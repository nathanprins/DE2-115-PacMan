
Pac-Man.elf:     file format elf32-littlenios2
Pac-Man.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00020458 memsz 0x00020458 flags r-x
    LOAD off    0x00021478 vaddr 0x00020478 paddr 0x00022438 align 2**12
         filesz 0x00001fc0 memsz 0x00001fc0 flags rw-
    LOAD off    0x000243f8 vaddr 0x000243f8 paddr 0x000243f8 align 2**12
         filesz 0x00000000 memsz 0x00009404 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001ee98  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001398  0001f0e0  0001f0e0  000200e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001fc0  00020478  00022438  00021478  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00009404  000243f8  000243f8  000243f8  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0002d7fc  0002d7fc  00023438  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  00023438  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00023438  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000016e8  00000000  00000000  00023460  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003d4d6  00000000  00000000  00024b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000fd5f  00000000  00000000  0006201e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013a46  00000000  00000000  00071d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00004c90  00000000  00000000  000857c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000921f  00000000  00000000  0008a454  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001d066  00000000  00000000  00093673  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  000b06dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002390  00000000  00000000  000b0700  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000ba77a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000ba780  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000ba785  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000ba786  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000ba787  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000ba78b  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000ba78f  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000ba793  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000ba79c  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000ba7a5  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000ba7ae  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000061  00000000  00000000  000ba7b9  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abe3  00000000  00000000  000ba81a  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001ae257  00000000  00000000  000c53fd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
0001f0e0 l    d  .rodata	00000000 .rodata
00020478 l    d  .rwdata	00000000 .rwdata
000243f8 l    d  .bss	00000000 .bss
0002d7fc l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Pac-Man_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ControllerInterface.cpp
00000000 l    df *ABS*	00000000 Entity.cpp
00000000 l    df *ABS*	00000000 Game.cpp
00000000 l    df *ABS*	00000000 Keyboard.cpp
00000000 l    df *ABS*	00000000 PacMan.cpp
00000000 l    df *ABS*	00000000 VGA.cpp
00000000 l    df *ABS*	00000000 VideoInterface.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
00003ae0 l     F .text	000000a4 _ZL21size_of_encoded_valueh
00003b84 l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
00003d90 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
00003de4 l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
00003e70 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
00003fa4 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
0000402c l     F .text	000001c0 _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
000041ec l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
00004c54 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
00004e04 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
0002a4a0 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
00004ebc l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
0000506c l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
000243f8 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 s_round.c
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
00006594 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
00024400 l     O .bss	00000004 fc_static
000066ac l     F .text	000000c0 _Unwind_RaiseException_Phase2
0000676c l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00020002 l     O .rodata	00000010 zeroes.4404
00009df4 l     F .text	000000bc __sbprintf
00020012 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000a004 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000bb34 l     F .text	00000008 __fp_unlock
0000bb48 l     F .text	0000019c __sinit.part.1
0000bce4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00020880 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00020cc4 l     O .rwdata	00000020 lc_ctype_charset
00020ca4 l     O .rwdata	00000020 lc_message_charset
00020ce4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00020044 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000e534 l     F .text	000000fc __sprint_r.part.0
00020178 l     O .rodata	00000010 blanks.4348
00020168 l     O .rodata	00000010 zeroes.4349
0000fac0 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
00012d10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00012e1c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00012e7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00012f88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
00013068 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000131d4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000132c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0001348c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000223ac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000136d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
000223b0 l     O .rwdata	00000004 lockid
00024430 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
000223b4 l     O .rwdata	00000004 lockid
00024438 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00015108 l     F .text	00000048 OS_InitMisc
00015150 l     F .text	0000006c OS_InitRdyList
000152bc l     F .text	000000e4 OS_InitTCBList
00015028 l     F .text	000000e0 OS_InitEventList
000151bc l     F .text	00000080 OS_InitTaskIdle
0001523c l     F .text	00000080 OS_InitTaskStat
0001552c l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0001724c l     F .text	000000f4 OS_FlagTaskRdy
0001700c l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001b2fc l     F .text	00000034 alt_dev_reg
00020ec4 l     O .rwdata	0000106c JTAG_UART
00021f30 l     O .rwdata	00000030 AV_Config
00021f60 l     O .rwdata	00000030 Audio_Subsystem_Audio
00021f90 l     O .rwdata	0000002c Char_LCD_16x2
00021fbc l     O .rwdata	0000002c IrDA
00021fe8 l     O .rwdata	0000002c Expansion_JP5
00022014 l     O .rwdata	0000002c Green_LEDs
00022040 l     O .rwdata	0000002c HEX3_HEX0
0002206c l     O .rwdata	0000002c HEX7_HEX4
00022098 l     O .rwdata	0000002c Pushbuttons
000220c4 l     O .rwdata	0000002c Red_LEDs
000220f0 l     O .rwdata	0000002c Slider_Switches
0002211c l     O .rwdata	00000038 PS2_Port
00022154 l     O .rwdata	00000038 PS2_Port_Dual
0002218c l     O .rwdata	0000002c Serial_Port
000221b8 l     O .rwdata	00000034 USB
000221ec l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
00022248 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
000222a4 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
000222f8 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0001be1c l     F .text	000002a8 altera_avalon_jtag_uart_irq
0001c0c4 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001c8a0 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001dd9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001e000 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0001e2c0 l     F .text	0000003c alt_get_errno
0001e2fc l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0002449c g     O .bss	00000004 alt_instruction_exception_handler
00004fc4 g     F .text	00000028 __cxa_free_exception
000038fc g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
0000dca8 g     F .text	00000074 _mprec_log10
000027e8 g     F .text	00000054 _ZN14VideoInterface9drawPixelEii
00003a80 g     F .text	00000018 _ZSt10unexpectedv
00022402 g     O .rwdata	00000002 OSTaskNameSize
00000548 g     F .text	00000028 _ZN6Entity6getDirEv
0000dd94 g     F .text	0000008c __any_on
0001005c g     F .text	00000054 _isatty_r
00020050 g     O .rodata	00000028 __mprec_tinytens
000133d0 g     F .text	000000bc alt_main
00007640 g     F .text	000000c0 _puts_r
0002d6fc g     O .bss	00000100 alt_irq
0001d45c g     F .text	00000060 alt_up_ps2_disable_read_interrupt
000050f0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
000100b0 g     F .text	00000060 _lseek_r
00017a6c g     F .text	000000cc OS_MemInit
00006828 g     F .text	00000020 .hidden _Unwind_GetIPInfo
00022438 g       *ABS*	00000000 __flash_rwdata_start
0001b29c g     F .text	00000060 OSTimeSet
0001ca04 g     F .text	00000040 alt_up_character_lcd_send_cmd
000119fc g     F .text	00000088 .hidden __eqdf2
00004d28 g     F .text	00000084 __cxa_rethrow
000067b4 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
00003abc g     F .text	00000014 _ZSt14set_unexpectedPFvvE
00013d7c g     F .text	00000610 OSEventPendMulti
000032d8 g     F .text	00000054 _Z9inputLoopPv
00006818 g     F .text	00000010 .hidden _Unwind_GetIP
0002d7fc g       *ABS*	00000000 __alt_heap_start
0001e908 g     F .text	00000024 OSTaskCreateHook
000244a0 g     O .bss	00002000 task1_stk
00007a0c g     F .text	0000005c _kill_r
00007604 g     F .text	0000003c printf
000223da g     O .rwdata	00000002 OSMboxEn
000143e4 g     F .text	0000004c OSIntEnter
000102c8 g     F .text	0000009c _wcrtomb_r
000077d4 g     F .text	00000084 _signal_r
0000e4d0 g     F .text	0000005c __sseek
0000be84 g     F .text	00000010 __sinit
00010170 g     F .text	00000140 __swbuf_r
0001d274 g     F .text	00000034 read_CE_bit
00005040 g     F .text	0000002c __cxa_free_dependent_exception
000223ea g     O .rwdata	00000002 OSQEn
0000336c g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
0000c94c g     F .text	0000007c _setlocale_r
0001fcac  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
0000bcec g     F .text	00000068 __sfmoreglue
00013a50 g     F .text	000000cc __malloc_unlock
00005118 g     F .text	00000100 round
00000570 g     F .text	000000d4 _ZN4GameC1EP19ControllerInterfaceP14VideoInterface
0001e970 g     F .text	00000020 OSTaskStatHook
0001d5fc g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
0001daf0 g     F .text	00000090 alt_up_rs232_read_fd
000050f0 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
00024440 g     O .bss	00000001 OSLockNesting
00004c34 g     F .text	00000020 _ZSt18uncaught_exceptionv
00022428 g     O .rwdata	00000002 OSDataSize
00024441 g     O .bss	00000001 OSRunning
00003974 g     F .text	00000020 __cxa_deleted_virtual
0000ccc8 g     F .text	0000015c memmove
0001e9b0 g     F .text	00000020 OSInitHookBegin
00022420 g     O .rwdata	00000002 OSTmrSize
000050c8 g     F .text	00000004 _ZNSt9exceptionD2Ev
0000be6c g     F .text	00000018 _cleanup
0000ce24 g     F .text	000000a8 _Balloc
000058e8 g     F .text	00000070 .hidden __fixsfsi
00002a04 g     F .text	00000064 _ZN14VideoInterface8drawLineEiiii
00024444 g     O .bss	00000004 OSIdleCtr
00011a84 g     F .text	000000dc .hidden __gtdf2
0001fe80  w    O .rodata	00000014 _ZTVSt13bad_exception
0001e6b8 g     F .text	00000024 altera_nios2_gen2_irq_init
0001e788 g       .text	00000000 OSStartTsk
0001c990 g     F .text	00000074 get_DDRAM_addr
0001586c g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
00006864 g     F .text	00000008 .hidden _Unwind_GetRegionStart
00022426 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
000223c6 g     O .rwdata	00000002 OSEventSize
00002de0 g     F .text	0000034c _ZN14VideoInterface18_drawLineBRESENHAMEiiiit
00024448 g     O .bss	00000001 OSPrioHighRdy
00010000 g     F .text	0000005c _fstat_r
0001e92c g     F .text	00000024 OSTaskDelHook
00024410 g     O .bss	00000004 errno
0000e44c g     F .text	00000008 __seofread
0001e768 g       .text	00000000 OSStartHighRdy
00019d38 g     F .text	000001e4 OSTaskCreateExt
00016b54 g     F .text	00000060 OSFlagPendGetFlagsRdy
00022406 g     O .rwdata	00000002 OSTaskStatStkSize
00006a40 g     F .text	00000074 .hidden _Unwind_Backtrace
00015cd0 g     F .text	00000308 OSFlagAccept
000180a4 g     F .text	000000b8 OSQFlush
00017b38 g     F .text	00000140 OSQAccept
00024428 g     O .bss	00000004 alt_argv
0002a324 g       *ABS*	00000000 _gp
000002c0 g     F .text	00000038 _ZN19ControllerInterface15getActiveButtonEv
00002918 g     F .text	000000b8 _ZN14VideoInterface5clearEt
00019b8c g     F .text	000001ac OSTaskCreate
0001969c g     F .text	000004f0 OSTaskChangePrio
0002443c g     O .bss	00000004 alt_heapsem
00012f68 g     F .text	00000020 getpid
0001fa60  w    O .rodata	0000000a _ZTS8Keyboard
00015b40 g     F .text	00000190 OSDebugInit
00004894 g     F .text	00000230 __cxa_call_unexpected
00019f1c g     F .text	00000344 OSTaskDel
00004ac4 g     F .text	00000008 __cxa_get_exception_ptr
00020d44 g     O .rwdata	00000180 alt_fd_list
0002a4d8 g     O .bss	00000370 OSFlagTbl
00006954 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
00014e08 g     F .text	000000b8 OS_EventTaskRemove
000067e4 g     F .text	00000018 .hidden _Unwind_GetCFA
00003a98 g     F .text	00000014 _ZSt13set_terminatePFvvE
0001df3c g     F .text	00000090 alt_find_dev
00007364 g     F .text	00000148 memcpy
00002208 g     F .text	000003a8 _ZN6PacMan5_drawEP14VideoInterface
000223f0 g     O .rwdata	00000002 OSRdyTblSize
0001cbac g     F .text	00000050 alt_up_character_lcd_write_fd
00004fec g     F .text	00000054 __cxa_allocate_dependent_exception
00000e14 g     F .text	0000110c _ZN4Game7drawMapEv
0000bb3c g     F .text	0000000c _cleanup_r
000036a8 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
000063a8 g     F .text	000000dc .hidden __floatsidf
0001e0c4 g     F .text	0000007c alt_io_redirect
00011b60 g     F .text	000000f4 .hidden __ltdf2
0001f0e0 g       *ABS*	00000000 __DTOR_END__
000036c0 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
0001d144 g     F .text	00000090 alt_up_irda_write_fd
0001da7c g     F .text	00000074 alt_up_rs232_read_data
00007700 g     F .text	00000014 puts
0001eca8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00000364 g     F .text	0000007c _ZN6Entity6updateEi
00013b1c g     F .text	00000120 OSEventNameGet
000223d4 g     O .rwdata	00000002 OSFlagMax
00002b0c g     F .text	00000064 _ZN14VideoInterface8drawRectEiiii
0000e384 g     F .text	00000074 __fpclassifyd
0000dc04 g     F .text	000000a4 __ratio
00014430 g     F .text	000000f8 OSIntExit
0000faa4 g     F .text	0000001c __vfiprintf_internal
000025b0 g     F .text	000000ec _ZN6PacMan7_updateEi
0002240e g     O .rwdata	00000002 OSTCBSize
00024449 g     O .bss	00000001 OSPrioCur
0001cf40 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0001c320 g     F .text	000002bc altera_avalon_jtag_uart_read
00006b30 g     F .text	00000014 malloc
000075d4 g     F .text	00000030 _printf_r
00011058 g     F .text	00000064 .hidden __udivsi3
00005218 g     F .text	00000084 roundf
00012fc4 g     F .text	000000a4 isatty
00007858 g     F .text	000000bc _raise_r
000223f4 g     O .rwdata	00000002 OSStkWidth
000200a0 g     O .rodata	000000c8 __mprec_tens
000223e8 g     O .rwdata	00000002 OSPtrSize
00000878 g     F .text	000002d0 _ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_
0000c9c8 g     F .text	0000000c __locale_charset
00005820 g     F .text	000000c8 .hidden __lesf2
000223c8 g     O .rwdata	00000002 OSEventTblSize
0001cee0 g     F .text	00000060 alt_up_irda_disable_read_interrupt
00002708 g     F .text	00000070 _ZN3VGA18_internalDrawPixelEiit
0001e6dc g       .text	00000000 OSCtxSw
0001ec18 g     F .text	00000090 alt_icache_flush
0002440c g     O .bss	00000004 __malloc_top_pad
0002444c g     O .bss	00000004 OSTCBList
00007a68 g     F .text	00000004 _getpid_r
00024420 g     O .bss	00000004 alt_fd_list_lock
0000213c g     F .text	000000cc _ZN6PacManC2Eii
0002238c g     O .rwdata	00000004 __mb_cur_max
0000c9f8 g     F .text	0000000c _localeconv_r
0000d230 g     F .text	0000003c __i2b
0000c308 g     F .text	000004bc __sfvwrite_r
00003840 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
00007914 g     F .text	000000a8 __sigtramp_r
0002a848 g     O .bss	00000c30 OSMemTbl
00024450 g     O .bss	00000001 OSTickStepState
0000269c g     F .text	0000006c _ZN3VGAC2EPsiii
00007714 g     F .text	00000054 _sbrk_r
00001fe4 g     F .text	00000158 _ZN8Keyboard6updateEv
0001fd78  w    O .rodata	00000020 _ZTVSt9type_info
000223ec g     O .rwdata	00000002 OSQMax
0002b478 g     O .bss	00000800 OSTaskStatStk
000176a8 g     F .text	000000f0 OSMemNameGet
000223cc g     O .rwdata	00000002 OSFlagEn
00010110 g     F .text	00000060 _read_r
000050d0 g     F .text	0000000c _ZNKSt9exception4whatEv
00022412 g     O .rwdata	00000002 OSTimeTickHookEn
00018554 g     F .text	00000168 OSQPost
00017340 g     F .text	000000a4 OS_FlagUnlink
000223a4 g     O .rwdata	00000004 alt_max_fd
0001d9f8 g     F .text	00000044 alt_up_rs232_check_parity
000153f4 g     F .text	00000068 OS_MemCopy
000028e0 g     F .text	00000038 _ZN14VideoInterface8setColorEt
0001545c g     F .text	000000d0 OS_Sched
0000fcf4 g     F .text	000000f0 _fclose_r
000175b8 g     F .text	000000f0 OSMemGet
0001a548 g     F .text	000001b4 OSTaskNameSet
0001d2a8 g     F .text	00000030 read_num_bytes_available
0000bb04 g     F .text	00000030 fflush
00024408 g     O .bss	00000004 __malloc_max_sbrked_mem
00024454 g     O .bss	00000004 OSCtxSwCtr
0001e990 g     F .text	00000020 OSTimeTickHook
0001e140 g     F .text	00000180 alt_irq_register
000223d6 g     O .rwdata	00000002 OSFlagNameSize
0001d210 g     F .text	00000034 read_RI_bit
00006484 g     F .text	00000110 .hidden __extendsfdf2
00014ec0 g     F .text	00000100 OS_EventTaskRemoveMulti
00005a7c g     F .text	000008ac .hidden __adddf3
0001fce0  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
00014cb8 g     F .text	00000150 OS_EventTaskWaitMulti
0000d9ac g     F .text	0000010c __b2d
000223ee g     O .rwdata	00000002 OSQSize
00010a28 g     F .text	00000538 .hidden __umoddi3
000132fc g     F .text	000000d4 lseek
00019004 g     F .text	0000020c OSSemPend
00003704 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00003994 g     F .text	00000004 _ZdlPv
00022384 g     O .rwdata	00000004 _global_impure_ptr
0000de20 g     F .text	00000564 _realloc_r
000223d8 g     O .rwdata	00000002 OSLowestPrio
0002d7fc g       *ABS*	00000000 __bss_end
0001ea10 g     F .text	00000024 OSTCBInitHook
0002241e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0001e5b0 g     F .text	00000108 alt_tick
0000679c g     F .text	00000018 .hidden _Unwind_SjLj_Register
000104b0 g     F .text	00000578 .hidden __udivdi3
00002778 g     F .text	00000070 _ZN14VideoInterfaceC2Eiii
0000ff5c g     F .text	00000024 _fputwc_r
000223c0 g     O .rwdata	00000002 OSEventEn
00020078 g     O .rodata	00000028 __mprec_bigtens
0000d014 g     F .text	00000104 __s2b
0002241a g     O .rwdata	00000002 OSTmrCfgNameSize
00006b18 g     F .text	00000018 abort
00012c68 g     F .text	000000a8 .hidden __floatunsidf
0000d6ec g     F .text	00000060 __mcmp
0001d30c g     F .text	0000002c read_data_byte
00004b80 g     F .text	000000b4 __cxa_end_catch
0000bea4 g     F .text	00000018 __fp_lock_all
000050cc g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
0001716c g     F .text	000000e0 OS_FlagInit
0001e514 g     F .text	0000009c alt_alarm_stop
0001d244 g     F .text	00000030 read_RE_bit
000223fc g     O .rwdata	00000002 OSTaskIdleStkSize
00024490 g     O .bss	00000004 alt_irq_active
00018c3c g     F .text	000000b0 OSSemAccept
00003a58 g     F .text	00000018 _ZSt9terminatev
000178ac g     F .text	000000d8 OSMemPut
000173e4 g     F .text	000001d4 OSMemCreate
00024458 g     O .bss	00000004 OSIdleCtrMax
0001cf80 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
00020d1c g     O .rwdata	00000028 alt_dev_null
00022410 g     O .rwdata	00000002 OSTicksPerSec
000003e0 g     F .text	00000060 _ZN6Entity4drawEP14VideoInterface
000050f8 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
00022344  w    O .rwdata	00000005 _ZTS3VGA
0001ce4c g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
0001e6dc g       .text	00000000 OSIntCtxSw
0001fd0c  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
0001d4bc g     F .text	00000074 alt_up_ps2_write_data_byte
0001dd7c g     F .text	00000020 alt_dcache_flush_all
0000d118 g     F .text	00000068 __hi0bits
00022364  w    O .rwdata	00000008 _ZTISt9exception
00006328 g     F .text	00000080 .hidden __fixdfsi
0002445c g     O .bss	00000004 OSTCBFreeList
00022438 g       *ABS*	00000000 __ram_rwdata_end
00019210 g     F .text	0000016c OSSemPendAbort
000038f8 g     F .text	00000004 _ZNSt9type_infoD1Ev
0002239c g     O .rwdata	00000008 alt_dev_list
000050f8 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
00013714 g     F .text	000000f8 write
00022414 g     O .rwdata	00000002 OSVersionNbr
0000390c g     F .text	00000004 _ZNSt9type_infoD0Ev
00005764 g     F .text	000000bc .hidden __gtsf2
0001fc2c  w    O .rodata	0000000c _ZTI6PacMan
000002f8 g     F .text	0000006c _ZN6EntityC2Eii
00020478 g       *ABS*	00000000 __ram_rodata_end
00012eb8 g     F .text	000000b0 fstat
0001db80 g     F .text	00000094 alt_up_rs232_write_fd
000130a4 g     F .text	00000130 kill
0000312c g     F .text	0000008c _Z4JTAGPKc
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00011b60 g     F .text	000000f4 .hidden __ledf2
000223bc g     O .rwdata	00000004 OSEndiannessTest
0000d464 g     F .text	00000140 __pow5mult
00000480 g     F .text	00000050 _ZN6Entity6setPosEii
0000e648 g     F .text	0000145c ___vfiprintf_internal_r
0002441c g     O .bss	00000004 __nlocale_changed
000110bc g     F .text	00000058 .hidden __umodsi3
00003904 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
000223ce g     O .rwdata	00000002 OSFlagGrpSize
00003aac g     F .text	00000010 _ZSt13get_terminatev
0002d7fc g       *ABS*	00000000 end
0001d7ec g     F .text	00000098 alt_up_ps2_write_fd
000004d0 g     F .text	00000028 _ZN6Entity11getVelocityEv
0001cfbc g     F .text	00000044 alt_up_irda_check_parity
00006a28 g     F .text	00000018 .hidden _Unwind_DeleteException
0001bce0 g     F .text	0000013c altera_avalon_jtag_uart_init
000156c4 g     F .text	000000dc OS_TaskStat
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
00003770 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0001f0dc g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0001c91c g     F .text	00000074 alt_avalon_timer_sc_init
00006ab4 g     F .text	00000064 .hidden __clzsi2
00003630 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0001c5dc g     F .text	000002c4 altera_avalon_jtag_uart_write
0000be94 g     F .text	00000004 __sfp_lock_acquire
0001fe08  w    O .rodata	00000012 _ZTSSt13bad_exception
0000cbe4 g     F .text	000000e4 memchr
000153a0 g     F .text	00000054 OS_MemClr
0001cab8 g     F .text	0000007c alt_up_character_lcd_write
00007be0 g     F .text	000021f8 ___vfprintf_internal_r
0001e7ac g     F .text	0000015c OSTaskStkInit
0000bff8 g     F .text	00000310 _free_r
0000c9d4 g     F .text	00000010 __locale_mb_cur_max
00014a10 g     F .text	00000198 OS_EventTaskRdy
0001ef24 g     F .text	00000180 __call_exitprocs
00024460 g     O .bss	00000001 OSCPUUsage
00024418 g     O .bss	00000004 __mlocale_changed
00001f20 g     F .text	000000c4 _ZN8KeyboardC1Ev
0002237c g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
00024494 g     O .bss	00000004 _alt_tick_rate
0001815c g     F .text	0000028c OSQPend
00002a68 g     F .text	000000a4 _ZN14VideoInterface8drawLineEiiiit
0001fd68  w    O .rodata	0000000d _ZTSSt9type_info
0001ae08 g     F .text	00000104 OSTimeDly
00003954 g     F .text	00000020 __cxa_pure_virtual
0000d5a4 g     F .text	00000148 __lshift
00002778 g     F .text	00000070 _ZN14VideoInterfaceC1Eiii
00024498 g     O .bss	00000004 _alt_nticks
000079d0 g     F .text	00000018 signal
000134c8 g     F .text	000000fc read
0001fa54  w    O .rodata	0000000c _ZTI8Keyboard
0001b368 g     F .text	00000814 alt_sys_init
0001ccfc g     F .text	0000008c alt_up_character_lcd_shift_display
00005958 g     F .text	00000124 .hidden __floatsisf
00022334  w    O .rwdata	00000008 _ZTS6Entity
00002c20 g     F .text	000001c0 _ZN14VideoInterface12_drawLineDDAEiiiit
00000284 g     F .text	0000003c _ZN19ControllerInterfaceC2Ev
0001ee0c g     F .text	00000118 __register_exitproc
00024461 g     O .bss	00000001 OSTaskCtr
000033b0 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0001d708 g     F .text	00000058 alt_up_ps2_clear_fifo
0001d9bc g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
0001af0c g     F .text	00000160 OSTimeDlyHMSM
0000d26c g     F .text	000001f8 __multiply
0001cd88 g     F .text	0000008c alt_up_character_lcd_erase_pos
0001c1c8 g     F .text	00000068 altera_avalon_jtag_uart_close
00020478 g       *ABS*	00000000 __ram_rwdata_start
00006884 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
0001f0e0 g       *ABS*	00000000 __ram_rodata_start
0002a4b0 g     O .bss	00000028 __malloc_current_mallinfo
00006998 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
000223c2 g     O .rwdata	00000002 OSEventMax
0000dab8 g     F .text	0000014c __d2b
0001fea8  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0001937c g     F .text	00000110 OSSemPost
000038f8 g     F .text	00000004 _ZNSt9type_infoD2Ev
0001fc38  w    O .rodata	0000000c _ZTV3VGA
000050fc g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
000145b4 g     F .text	000000dc OSSchedUnlock
000035ac g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
0001bb7c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0001eb3c g     F .text	000000dc alt_get_fd
00024464 g     O .bss	00000004 OSMemFreeList
00014700 g     F .text	000000b0 OSStatInit
00016f48 g     F .text	000000c4 OSFlagQuery
00000440 g     F .text	00000040 _ZN6Entity6setDirE5E_DIR
00022374  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
000223f8 g     O .rwdata	00000002 OSTaskCreateExtEn
0000fbdc g     F .text	00000054 _close_r
0001f0ec  w    O .rodata	00000016 _ZTS19ControllerInterface
0001fc44  w    O .rodata	0000000c _ZTI3VGA
0001ed90 g     F .text	0000007c memcmp
000149f0 g     F .text	00000020 OS_Dummy
0001bc3c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002d7fc g       *ABS*	00000000 __alt_stack_base
0001bc8c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000336c g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
0001ce84 g     F .text	0000005c alt_up_irda_enable_read_interrupt
00009eb0 g     F .text	00000154 __swsetup_r
0002bc78 g     O .bss	000001e0 OSQTbl
000069dc g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
00011114 g     F .text	000008e8 .hidden __divdf3
0000bd54 g     F .text	00000118 __sfp
0000dd1c g     F .text	00000078 __copybits
000038fc g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
00020478 g     O .rwdata	00000408 __malloc_av_
0000bea0 g     F .text	00000004 __sinit_lock_release
00024468 g     O .bss	00000004 OSTCBHighRdy
00011c54 g     F .text	00000718 .hidden __muldf3
0000e3f8 g     F .text	00000054 __sread
0001fe6c  w    O .rodata	00000014 _ZTVSt9exception
000050f4 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
0001fc1c  w    O .rodata	00000010 _ZTV6PacMan
0002446c g     O .bss	00000004 OSQFreeList
0001d91c g     F .text	00000060 alt_up_rs232_disable_read_interrupt
0001ea34 g     F .text	00000108 alt_find_file
00000d54 g     F .text	00000044 _ZN4Game8walkableE10map_item_t
0001ddd8 g     F .text	000000a4 alt_dev_llist_insert
00013930 g     F .text	00000120 __malloc_lock
00013628 g     F .text	000000b0 sbrk
0001fd3c  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
00004c98 g     F .text	00000090 __cxa_throw
00013c3c g     F .text	00000140 OSEventNameSet
0000baa8 g     F .text	0000005c _fflush_r
00006848 g     F .text	00000010 .hidden _Unwind_SetIP
0000fc30 g     F .text	000000c4 _calloc_r
00024470 g     O .bss	00000001 OSRdyGrp
000243f8 g       *ABS*	00000000 __bss_start
0001fc50  w    O .rodata	00000011 _ZTS14VideoInterface
00000520 g     F .text	00000028 _ZN6Entity4getYEv
000074ac g     F .text	00000128 memset
0001f0e0  w    O .rodata	0000000c _ZTV19ControllerInterface
000031b8 g     F .text	000000d8 main
0002442c g     O .bss	00000004 alt_envp
00024404 g     O .bss	00000004 __malloc_max_total_mem
0001bbdc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0001f104  w    O .rodata	00000010 _ZTV6Entity
000102b0 g     F .text	00000018 __swbuf
00005100 g     F .text	0000000c __cxa_get_globals_fast
000201a4 g     O .rodata	00000100 OSUnMapTbl
00005820 g     F .text	000000c8 .hidden __ltsf2
000223f2 g     O .rwdata	00000002 OSSemEn
0001cc70 g     F .text	0000008c alt_up_character_lcd_shift_cursor
00016bb4 g     F .text	00000394 OSFlagPost
0000e52c g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0000fde4 g     F .text	00000014 fclose
00014ba8 g     F .text	00000110 OS_EventTaskWait
000264a0 g     O .bss	00002000 task2_stk
00001f20 g     F .text	000000c4 _ZN8KeyboardC2Ev
0001d698 g     F .text	00000070 alt_up_ps2_read_data_byte
000157a0 g     F .text	000000cc OS_TaskStatStkChk
0001a260 g     F .text	00000150 OSTaskDelReq
0000a204 g     F .text	00001688 _dtoa_r
00006b58 g     F .text	0000080c _malloc_r
00010424 g     F .text	00000030 __ascii_wctomb
000050dc g     F .text	0000000c _ZNKSt13bad_exception4whatEv
000223a8 g     O .rwdata	00000004 alt_errno
00014690 g     F .text	00000070 OSStart
000284a0 g     O .bss	00002000 task3_stk
000079e8 g     F .text	00000010 _init_signal
000138d0 g     F .text	00000060 __env_unlock
0001fd30  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
0000c7c4 g     F .text	000000c4 _fwalk
0001a6fc g     F .text	000001d4 OSTaskResume
00017984 g     F .text	000000e8 OSMemQuery
00022404 g     O .rwdata	00000002 OSTaskStatEn
0001d000 g     F .text	00000040 alt_up_irda_write_data
000223de g     O .rwdata	00000002 OSMemMax
000186bc g     F .text	00000170 OSQPostFront
000050cc g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
0001fc64  w    O .rodata	0000000c _ZTV14VideoInterface
0001d884 g     F .text	0000003c alt_up_ps2_open_dev
00010f60 g     F .text	00000084 .hidden __divsi3
00024471 g     O .bss	00000003 OSRdyTbl
000223b8 g     O .rwdata	00000002 OSDebugEn
0001ca7c g     F .text	0000003c alt_up_character_lcd_open_dev
0000bed4 g     F .text	00000124 _malloc_trim_r
0001d400 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
00022324  w    O .rwdata	00000008 _ZTI19ControllerInterface
0001f0e0 g       *ABS*	00000000 __CTOR_END__
000223d0 g     O .rwdata	00000002 OSFlagNodeSize
00022418 g     O .rwdata	00000002 OSTmrCfgMax
0001ca44 g     F .text	00000038 alt_up_character_lcd_init
00007a6c g     F .text	000000dc strcmp
00017c78 g     F .text	000001ac OSQCreate
0001a3b0 g     F .text	00000198 OSTaskNameGet
0001f0e0 g       *ABS*	00000000 __flash_rodata_start
0001882c g     F .text	0000020c OSQPostOpt
000147b0 g     F .text	00000220 OSTimeTick
0001fe94  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
00022400 g     O .rwdata	00000002 OSTaskMax
0001f0e0 g       *ABS*	00000000 __DTOR_LIST__
00018cec g     F .text	000000d8 OSSemCreate
00022424 g     O .rwdata	00000002 OSTmrWheelSize
0001dc14 g     F .text	0000003c alt_up_rs232_open_dev
000119fc g     F .text	00000088 .hidden __nedf2
000223fa g     O .rwdata	00000002 OSTaskDelEn
0001948c g     F .text	00000110 OSSemQuery
00017e24 g     F .text	00000280 OSQDel
000183e8 g     F .text	0000016c OSQPendAbort
0001b330 g     F .text	00000038 alt_irq_init
000135c4 g     F .text	00000064 alt_release_fd
0000337c g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
0001d2d8 g     F .text	00000034 read_data_valid
0001ce14 g     F .text	00000038 alt_up_character_lcd_cursor_off
0001febc g     O .rodata	00000100 .hidden __clz_tab
00024414 g     O .bss	00000004 _PathLocale
0001d598 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
0001ed44 g     F .text	00000014 atexit
00005764 g     F .text	000000bc .hidden __gesf2
0000fb7c g     F .text	00000060 _write_r
00014528 g     F .text	0000008c OSSchedLock
0000ca04 g     F .text	00000018 setlocale
0000687c g     F .text	00000008 .hidden _Unwind_GetTextRelBase
00004dac g     F .text	00000058 __cxa_call_terminate
00015fd8 g     F .text	00000108 OSFlagCreate
000029d0 g     F .text	00000034 _ZN14VideoInterface10setLineAlgE9viLineAlg
00022388 g     O .rwdata	00000004 _impure_ptr
0002236c  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
00024424 g     O .bss	00000004 alt_argc
0000b88c g     F .text	0000021c __sflush_r
0001dedc g     F .text	00000060 _do_dtors
0002234c  w    O .rwdata	00000008 _ZTI14VideoInterface
0000c9f0 g     F .text	00000008 __locale_cjk_lang
000004f8 g     F .text	00000028 _ZN6Entity4getXEv
000223ca g     O .rwdata	00000002 OSEventMultiEn
00002b70 g     F .text	000000b0 _ZN14VideoInterface8drawRectEiiiit
0002232c  w    O .rwdata	00000008 _ZTI6Entity
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
000160e0 g     F .text	00000248 OSFlagDel
00024474 g     O .bss	00000004 OSEventFreeList
00003ad0 g     F .text	00000010 _ZSt14get_unexpectedv
00000020 g       .exceptions	00000000 alt_irq_entry
0000269c g     F .text	0000006c _ZN3VGAC1EPsiii
0000d948 g     F .text	00000064 __ulp
0000686c g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
0001659c g     F .text	000005b8 OSFlagPend
00022416 g     O .rwdata	00000002 OSTmrEn
0000bebc g     F .text	00000018 __fp_unlock_all
00022394 g     O .rwdata	00000008 alt_fs_list
0001fe48  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
000155a0 g     F .text	00000074 OS_StrCopy
0001d8c0 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
00006858 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
0001da3c g     F .text	00000040 alt_up_rs232_write_data
00004acc g     F .text	000000b4 __cxa_begin_catch
000223e0 g     O .rwdata	00000002 OSMemNameSize
000036c0 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
00003a70 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
0001e9d0 g     F .text	00000020 OSInitHookEnd
0002233c  w    O .rwdata	00000008 _ZTS6PacMan
00000284 g     F .text	0000003c _ZN19ControllerInterfaceC1Ev
00000020 g       *ABS*	00000000 __ram_exceptions_start
0002240c g     O .rwdata	00000002 OSTCBPrioTblMax
0000ca1c g     F .text	0000000c localeconv
00022408 g     O .rwdata	00000002 OSTaskStatStkChkEn
000050ec g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
0002235c g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
000223dc g     O .rwdata	00000002 OSMemEn
00004f64 g     F .text	00000060 __cxa_allocate_exception
000223e6 g     O .rwdata	00000002 OSMutexEn
0001fcd4  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0000213c g     F .text	000000cc _ZN6PacManC1Eii
00022438 g       *ABS*	00000000 _edata
00000570 g     F .text	000000d4 _ZN4GameC2EP19ControllerInterfaceP14VideoInterface
0002d7fc g       *ABS*	00000000 _end
00024478 g     O .bss	00000001 OSIntNesting
00004294 g     F .text	00000600 __gxx_personality_sj0
0000fdf8 g     F .text	00000164 __fputwc
00000248 g       *ABS*	00000000 __ram_exceptions_end
00000644 g     F .text	000001dc _ZN4Game6updateEi
0001c230 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0001b06c g     F .text	000001d4 OSTimeDlyResume
0001fa48  w    O .rodata	0000000c _ZTV8Keyboard
00016450 g     F .text	0000014c OSFlagNameSet
00000b48 g     F .text	0000020c _ZN4Game14updateMovementEP6Entityi
000050c8 g     F .text	00000004 _ZNSt9exceptionD1Ev
0001a8d0 g     F .text	000001c0 OSTaskStkChk
000223e2 g     O .rwdata	00000002 OSMemSize
0000e454 g     F .text	0000007c __swrite
00022380 g     O .rwdata	00000004 __malloc_trim_threshold
0000c9e4 g     F .text	0000000c __locale_msgcharset
0002447c g     O .bss	00000004 OSTCBCur
0001ed58 g     F .text	00000038 exit
000067fc g     F .text	0000001c .hidden _Unwind_SetGR
0001d040 g     F .text	00000074 alt_up_irda_read_data
000223e4 g     O .rwdata	00000002 OSMemTblSize
0000c888 g     F .text	000000c4 _fwalk_reent
00003510 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
0001d338 g     F .text	000000c8 alt_up_ps2_init
0000d74c g     F .text	000001fc __mdiff
00003998 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
0000283c g     F .text	000000a4 _ZN14VideoInterface9drawPixelEiit
00010fe4 g     F .text	00000074 .hidden __modsi3
00000d98 g     F .text	0000007c _ZN4Game4drawEv
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000be98 g     F .text	00000004 __sfp_lock_release
0001438c g     F .text	00000058 OSInit
0001fe1c  w    O .rodata	0000000c _ZTISt13bad_exception
0001ac74 g     F .text	00000124 OSTaskQuery
0001cb34 g     F .text	00000078 alt_up_character_lcd_string
00018b94 g     F .text	000000a8 OS_QInit
00015614 g     F .text	00000054 OS_StrLen
0001d1d4 g     F .text	0000003c alt_up_irda_open_dev
00017798 g     F .text	00000114 OSMemNameSet
000223fe g     O .rwdata	00000002 OSTaskProfileEn
00024480 g     O .bss	00000004 OSTime
000002f8 g     F .text	0000006c _ZN6EntityC1Eii
0002be58 g     O .bss	00000800 OSTaskIdleStk
00012e48 g     F .text	00000034 _exit
0001dc50 g     F .text	0000012c alt_alarm_start
00016328 g     F .text	00000128 OSFlagNameGet
0000332c g     F .text	00000040 _Z8GameLoopPv
0001b240 g     F .text	0000005c OSTimeGet
000067c8 g     F .text	0000001c .hidden _Unwind_GetGR
0000510c g     F .text	0000000c __cxa_get_globals
0000ca28 g     F .text	000001bc __smakebuf_r
00022360 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
0001d530 g     F .text	00000068 alt_up_ps2_wait_for_ack
00007b48 g     F .text	00000098 strlen
00007768 g     F .text	0000006c _init_signal_r
00022354  w    O .rwdata	00000008 _ZTISt9type_info
0001e950 g     F .text	00000020 OSTaskSwHook
0001e3c0 g     F .text	00000154 open
0002c658 g     O .bss	00000b40 OSEventTbl
00011a84 g     F .text	000000dc .hidden __gedf2
0001fdf8  w    O .rodata	0000000d _ZTSSt9exception
0002d198 g     O .bss	00000510 OSTCBTbl
0001959c g     F .text	00000100 OSSemSet
00022390 g     O .rwdata	00000004 __wctomb
000050e8 g     F .text	00000004 _ZNSt9exceptionD0Ev
0000e630 g     F .text	00000018 __sprint_r
0001dfcc g     F .text	00000034 alt_icache_flush_all
00006874 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
0001cbfc g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0002242c g     O .rwdata	00000004 alt_priority_mask
00018dc4 g     F .text	00000240 OSSemDel
00024484 g     O .bss	00000004 OSFlagFreeList
000223c4 g     O .rwdata	00000002 OSEventNameSize
00009dd8 g     F .text	0000001c __vfprintf_internal
00024488 g     O .bss	00000001 OSStatRdy
0002d6a8 g     O .bss	00000054 OSTCBPrioTbl
00010454 g     F .text	0000005c _wctomb_r
0001380c g     F .text	000000c4 __env_lock
0001d760 g     F .text	0000008c alt_up_ps2_read_fd
0002240a g     O .rwdata	00000002 OSTaskSwHookEn
0001236c g     F .text	000008fc .hidden __subdf3
0001d0b4 g     F .text	00000090 alt_up_irda_read_fd
00003290 g     F .text	00000048 _Z7gfxLoopPv
0000d180 g     F .text	000000b0 __lo0bits
00022430 g     O .rwdata	00000008 alt_alarm_list
000223d2 g     O .rwdata	00000002 OSFlagWidth
0001de7c g     F .text	00000060 _do_ctors
000079f8 g     F .text	00000014 __sigtramp
0001d97c g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00010364 g     F .text	000000c0 wcrtomb
00012d4c g     F .text	000000d0 close
0000529c g     F .text	000004c8 .hidden __addsf3
00024434 g     O .bss	00000004 alt_envsem
0002448c g     O .bss	00000004 OSIdleCtrRun
00000820 g     F .text	00000058 _ZN4Game11setInSquareEP6Entityii
000149d0 g     F .text	00000020 OSVersion
0002241c g     O .rwdata	00000002 OSTmrCfgWheelSize
0001fe28  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
0001323c g     F .text	00000084 alt_load
0001ad98 g     F .text	00000070 OS_TaskStkClr
000223f6 g     O .rwdata	00000002 OSTaskCreateEn
00003910 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
00014fc0 g     F .text	00000068 OS_EventWaitListInit
0000ff80 g     F .text	00000080 fputwc
000079bc g     F .text	00000014 raise
0001e9f0 g     F .text	00000020 OSTaskIdleHook
00006b44 g     F .text	00000014 free
0000be9c g     F .text	00000004 __sinit_lock_acquire
0000cef4 g     F .text	00000120 __multadd
000036d0 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
0001aa90 g     F .text	000001e4 OSTaskSuspend
0000cecc g     F .text	00000028 _Bfree
00015668 g     F .text	0000005c OS_TaskIdle
00022422 g     O .rwdata	00000002 OSTmrTblSize
00018a38 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00143e40 	call	143e4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	008000f4 	movhi	r2,3
 140:	10b5bf04 	addi	r2,r2,-10500
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008000f4 	movhi	r2,3
 158:	10b5bf04 	addi	r2,r2,-10500
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	00144300 	call	14430 <OSIntExit>
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a85e17 	ldw	r2,-24200(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a85e17 	ldw	r2,-24200(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     254:	d6a8c914 	ori	gp,gp,41764
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     25c:	1090fe14 	ori	r2,r2,17400

    movhi r3, %hi(__bss_end)
     260:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
     264:	18f5ff14 	ori	r3,r3,55292

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700026c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	001323c0 	call	1323c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	00133d00 	call	133d0 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000280>

00000284 <_ZN19ControllerInterfaceC1Ev>:
 *      Author: natha
 */

#include "ControllerInterface.h"

ControllerInterface::ControllerInterface(){
     284:	defffe04 	addi	sp,sp,-8
     288:	df000115 	stw	fp,4(sp)
     28c:	df000104 	addi	fp,sp,4
     290:	e13fff15 	stw	r4,-4(fp)
     294:	008000b4 	movhi	r2,2
     298:	10bc3a04 	addi	r2,r2,-3864
     29c:	e0ffff17 	ldw	r3,-4(fp)
     2a0:	18800015 	stw	r2,0(r3)
     2a4:	e0bfff17 	ldw	r2,-4(fp)
     2a8:	10000115 	stw	zero,4(r2)

};
     2ac:	0001883a 	nop
     2b0:	e037883a 	mov	sp,fp
     2b4:	df000017 	ldw	fp,0(sp)
     2b8:	dec00104 	addi	sp,sp,4
     2bc:	f800283a 	ret

000002c0 <_ZN19ControllerInterface15getActiveButtonEv>:

button_t ControllerInterface::getActiveButton(){
     2c0:	defffd04 	addi	sp,sp,-12
     2c4:	df000215 	stw	fp,8(sp)
     2c8:	df000204 	addi	fp,sp,8
     2cc:	e13fff15 	stw	r4,-4(fp)
	button_t temp = this->activeButton;
     2d0:	e0bfff17 	ldw	r2,-4(fp)
     2d4:	10800117 	ldw	r2,4(r2)
     2d8:	e0bffe15 	stw	r2,-8(fp)
	this->activeButton = BUTTON_NO_BUTTON;
     2dc:	e0bfff17 	ldw	r2,-4(fp)
     2e0:	10000115 	stw	zero,4(r2)
	return temp;
     2e4:	e0bffe17 	ldw	r2,-8(fp)
};
     2e8:	e037883a 	mov	sp,fp
     2ec:	df000017 	ldw	fp,0(sp)
     2f0:	dec00104 	addi	sp,sp,4
     2f4:	f800283a 	ret

000002f8 <_ZN6EntityC1Eii>:
 *      Author: natha
 */

#include "Entity.h"

Entity::Entity(int x, int y) : x(x), y(y) {
     2f8:	defffc04 	addi	sp,sp,-16
     2fc:	df000315 	stw	fp,12(sp)
     300:	df000304 	addi	fp,sp,12
     304:	e13ffd15 	stw	r4,-12(fp)
     308:	e17ffe15 	stw	r5,-8(fp)
     30c:	e1bfff15 	stw	r6,-4(fp)
     310:	008000b4 	movhi	r2,2
     314:	10bc4304 	addi	r2,r2,-3828
     318:	e0fffd17 	ldw	r3,-12(fp)
     31c:	18800015 	stw	r2,0(r3)
     320:	e0bffd17 	ldw	r2,-12(fp)
     324:	e0fffe17 	ldw	r3,-8(fp)
     328:	10c00115 	stw	r3,4(r2)
     32c:	e0bffd17 	ldw	r2,-12(fp)
     330:	e0ffff17 	ldw	r3,-4(fp)
     334:	10c00215 	stw	r3,8(r2)
     338:	e0bffd17 	ldw	r2,-12(fp)
     33c:	00c00044 	movi	r3,1
     340:	10c00805 	stb	r3,32(r2)
     344:	e0bffd17 	ldw	r2,-12(fp)
     348:	00c00104 	movi	r3,4
     34c:	10c00915 	stw	r3,36(r2)

};
     350:	0001883a 	nop
     354:	e037883a 	mov	sp,fp
     358:	df000017 	ldw	fp,0(sp)
     35c:	dec00104 	addi	sp,sp,4
     360:	f800283a 	ret

00000364 <_ZN6Entity6updateEi>:

void Entity::update(int elapsedTime){
     364:	defffc04 	addi	sp,sp,-16
     368:	dfc00315 	stw	ra,12(sp)
     36c:	df000215 	stw	fp,8(sp)
     370:	df000204 	addi	fp,sp,8
     374:	e13ffe15 	stw	r4,-8(fp)
     378:	e17fff15 	stw	r5,-4(fp)
	this->prev_dir = this->dir;
     37c:	e0bffe17 	ldw	r2,-8(fp)
     380:	10c00917 	ldw	r3,36(r2)
     384:	e0bffe17 	ldw	r2,-8(fp)
     388:	10c00a15 	stw	r3,40(r2)
	this->prev_x = this->x;
     38c:	e0bffe17 	ldw	r2,-8(fp)
     390:	10c00117 	ldw	r3,4(r2)
     394:	e0bffe17 	ldw	r2,-8(fp)
     398:	10c00315 	stw	r3,12(r2)
	this->prev_y = this->y;
     39c:	e0bffe17 	ldw	r2,-8(fp)
     3a0:	10c00217 	ldw	r3,8(r2)
     3a4:	e0bffe17 	ldw	r2,-8(fp)
     3a8:	10c00415 	stw	r3,16(r2)
	this->_update(elapsedTime);
     3ac:	e0bffe17 	ldw	r2,-8(fp)
     3b0:	10800017 	ldw	r2,0(r2)
     3b4:	10800104 	addi	r2,r2,4
     3b8:	10800017 	ldw	r2,0(r2)
     3bc:	e17fff17 	ldw	r5,-4(fp)
     3c0:	e13ffe17 	ldw	r4,-8(fp)
     3c4:	103ee83a 	callr	r2
};
     3c8:	0001883a 	nop
     3cc:	e037883a 	mov	sp,fp
     3d0:	dfc00117 	ldw	ra,4(sp)
     3d4:	df000017 	ldw	fp,0(sp)
     3d8:	dec00204 	addi	sp,sp,8
     3dc:	f800283a 	ret

000003e0 <_ZN6Entity4drawEP14VideoInterface>:

void Entity::draw(VideoInterface* vi){
     3e0:	defffc04 	addi	sp,sp,-16
     3e4:	dfc00315 	stw	ra,12(sp)
     3e8:	df000215 	stw	fp,8(sp)
     3ec:	df000204 	addi	fp,sp,8
     3f0:	e13ffe15 	stw	r4,-8(fp)
     3f4:	e17fff15 	stw	r5,-4(fp)
	if(this->redraw){
     3f8:	e0bffe17 	ldw	r2,-8(fp)
     3fc:	10800803 	ldbu	r2,32(r2)
     400:	10803fcc 	andi	r2,r2,255
     404:	10000826 	beq	r2,zero,428 <_ZN6Entity4drawEP14VideoInterface+0x48>
		this->_draw(vi);
     408:	e0bffe17 	ldw	r2,-8(fp)
     40c:	10800017 	ldw	r2,0(r2)
     410:	10800017 	ldw	r2,0(r2)
     414:	e17fff17 	ldw	r5,-4(fp)
     418:	e13ffe17 	ldw	r4,-8(fp)
     41c:	103ee83a 	callr	r2
		this->redraw = 0;
     420:	e0bffe17 	ldw	r2,-8(fp)
     424:	10000805 	stb	zero,32(r2)
	}
}
     428:	0001883a 	nop
     42c:	e037883a 	mov	sp,fp
     430:	dfc00117 	ldw	ra,4(sp)
     434:	df000017 	ldw	fp,0(sp)
     438:	dec00204 	addi	sp,sp,8
     43c:	f800283a 	ret

00000440 <_ZN6Entity6setDirE5E_DIR>:

void Entity::setDir(e_dir_t dir){
     440:	defffd04 	addi	sp,sp,-12
     444:	df000215 	stw	fp,8(sp)
     448:	df000204 	addi	fp,sp,8
     44c:	e13ffe15 	stw	r4,-8(fp)
     450:	e17fff15 	stw	r5,-4(fp)
	this->dir = dir;
     454:	e0bffe17 	ldw	r2,-8(fp)
     458:	e0ffff17 	ldw	r3,-4(fp)
     45c:	10c00915 	stw	r3,36(r2)
	this->redraw = 1;
     460:	e0bffe17 	ldw	r2,-8(fp)
     464:	00c00044 	movi	r3,1
     468:	10c00805 	stb	r3,32(r2)
};
     46c:	0001883a 	nop
     470:	e037883a 	mov	sp,fp
     474:	df000017 	ldw	fp,0(sp)
     478:	dec00104 	addi	sp,sp,4
     47c:	f800283a 	ret

00000480 <_ZN6Entity6setPosEii>:

void Entity::setPos(int x, int y){
     480:	defffc04 	addi	sp,sp,-16
     484:	df000315 	stw	fp,12(sp)
     488:	df000304 	addi	fp,sp,12
     48c:	e13ffd15 	stw	r4,-12(fp)
     490:	e17ffe15 	stw	r5,-8(fp)
     494:	e1bfff15 	stw	r6,-4(fp)
	this->x = x;
     498:	e0bffd17 	ldw	r2,-12(fp)
     49c:	e0fffe17 	ldw	r3,-8(fp)
     4a0:	10c00115 	stw	r3,4(r2)
	this->y = y;
     4a4:	e0bffd17 	ldw	r2,-12(fp)
     4a8:	e0ffff17 	ldw	r3,-4(fp)
     4ac:	10c00215 	stw	r3,8(r2)
	this->redraw = 1;
     4b0:	e0bffd17 	ldw	r2,-12(fp)
     4b4:	00c00044 	movi	r3,1
     4b8:	10c00805 	stb	r3,32(r2)
};
     4bc:	0001883a 	nop
     4c0:	e037883a 	mov	sp,fp
     4c4:	df000017 	ldw	fp,0(sp)
     4c8:	dec00104 	addi	sp,sp,4
     4cc:	f800283a 	ret

000004d0 <_ZN6Entity11getVelocityEv>:

int Entity::getVelocity(){
     4d0:	defffe04 	addi	sp,sp,-8
     4d4:	df000115 	stw	fp,4(sp)
     4d8:	df000104 	addi	fp,sp,4
     4dc:	e13fff15 	stw	r4,-4(fp)
	return velocity;
     4e0:	e0bfff17 	ldw	r2,-4(fp)
     4e4:	10800717 	ldw	r2,28(r2)
};
     4e8:	e037883a 	mov	sp,fp
     4ec:	df000017 	ldw	fp,0(sp)
     4f0:	dec00104 	addi	sp,sp,4
     4f4:	f800283a 	ret

000004f8 <_ZN6Entity4getXEv>:

int Entity::getX(){
     4f8:	defffe04 	addi	sp,sp,-8
     4fc:	df000115 	stw	fp,4(sp)
     500:	df000104 	addi	fp,sp,4
     504:	e13fff15 	stw	r4,-4(fp)
	return x;
     508:	e0bfff17 	ldw	r2,-4(fp)
     50c:	10800117 	ldw	r2,4(r2)
};
     510:	e037883a 	mov	sp,fp
     514:	df000017 	ldw	fp,0(sp)
     518:	dec00104 	addi	sp,sp,4
     51c:	f800283a 	ret

00000520 <_ZN6Entity4getYEv>:

int Entity::getY(){
     520:	defffe04 	addi	sp,sp,-8
     524:	df000115 	stw	fp,4(sp)
     528:	df000104 	addi	fp,sp,4
     52c:	e13fff15 	stw	r4,-4(fp)
	return y;
     530:	e0bfff17 	ldw	r2,-4(fp)
     534:	10800217 	ldw	r2,8(r2)
};
     538:	e037883a 	mov	sp,fp
     53c:	df000017 	ldw	fp,0(sp)
     540:	dec00104 	addi	sp,sp,4
     544:	f800283a 	ret

00000548 <_ZN6Entity6getDirEv>:

e_dir_t Entity::getDir(){
     548:	defffe04 	addi	sp,sp,-8
     54c:	df000115 	stw	fp,4(sp)
     550:	df000104 	addi	fp,sp,4
     554:	e13fff15 	stw	r4,-4(fp)
	return dir;
     558:	e0bfff17 	ldw	r2,-4(fp)
     55c:	10800917 	ldw	r2,36(r2)
};
     560:	e037883a 	mov	sp,fp
     564:	df000017 	ldw	fp,0(sp)
     568:	dec00104 	addi	sp,sp,4
     56c:	f800283a 	ret

00000570 <_ZN4GameC1EP19ControllerInterfaceP14VideoInterface>:
 *      Author: natha
 */

#include "Game.h"

Game::Game(ControllerInterface* control, VideoInterface* video) : ci(control), vi(video){
     570:	defffb04 	addi	sp,sp,-20
     574:	dfc00415 	stw	ra,16(sp)
     578:	df000315 	stw	fp,12(sp)
     57c:	df000304 	addi	fp,sp,12
     580:	e13ffd15 	stw	r4,-12(fp)
     584:	e17ffe15 	stw	r5,-8(fp)
     588:	e1bfff15 	stw	r6,-4(fp)
     58c:	e0bffd17 	ldw	r2,-12(fp)
     590:	e0fffe17 	ldw	r3,-8(fp)
     594:	10c00015 	stw	r3,0(r2)
     598:	e0bffd17 	ldw	r2,-12(fp)
     59c:	e0ffff17 	ldw	r3,-4(fp)
     5a0:	10c00115 	stw	r3,4(r2)
     5a4:	e0bffd17 	ldw	r2,-12(fp)
     5a8:	10800204 	addi	r2,r2,8
     5ac:	01800204 	movi	r6,8
     5b0:	01400204 	movi	r5,8
     5b4:	1009883a 	mov	r4,r2
     5b8:	000213c0 	call	213c <_ZN6PacManC1Eii>
     5bc:	e0bffd17 	ldw	r2,-12(fp)
     5c0:	10007c15 	stw	zero,496(r2)
     5c4:	e0bffd17 	ldw	r2,-12(fp)
     5c8:	10007d05 	stb	zero,500(r2)
     5cc:	e0bffd17 	ldw	r2,-12(fp)
     5d0:	10007e15 	stw	zero,504(r2)
     5d4:	e0fffd17 	ldw	r3,-12(fp)
     5d8:	008000b4 	movhi	r2,2
     5dc:	10bc4504 	addi	r2,r2,-3820
     5e0:	18c07f04 	addi	r3,r3,508
     5e4:	1009883a 	mov	r4,r2
     5e8:	00823704 	movi	r2,2268
     5ec:	100d883a 	mov	r6,r2
     5f0:	200b883a 	mov	r5,r4
     5f4:	1809883a 	mov	r4,r3
     5f8:	00073640 	call	7364 <memcpy>
	vi->clear(0);
     5fc:	e0bffd17 	ldw	r2,-12(fp)
     600:	10800117 	ldw	r2,4(r2)
     604:	000b883a 	mov	r5,zero
     608:	1009883a 	mov	r4,r2
     60c:	00029180 	call	2918 <_ZN14VideoInterface5clearEt>

	setInSquare(&player, 10, 15);
     610:	e0bffd17 	ldw	r2,-12(fp)
     614:	10800204 	addi	r2,r2,8
     618:	01c003c4 	movi	r7,15
     61c:	01800284 	movi	r6,10
     620:	100b883a 	mov	r5,r2
     624:	e13ffd17 	ldw	r4,-12(fp)
     628:	00008200 	call	820 <_ZN4Game11setInSquareEP6Entityii>
};
     62c:	0001883a 	nop
     630:	e037883a 	mov	sp,fp
     634:	dfc00117 	ldw	ra,4(sp)
     638:	df000017 	ldw	fp,0(sp)
     63c:	dec00204 	addi	sp,sp,8
     640:	f800283a 	ret

00000644 <_ZN4Game6updateEi>:

void Game::update(int elapsedTime){
     644:	defffa04 	addi	sp,sp,-24
     648:	dfc00515 	stw	ra,20(sp)
     64c:	df000415 	stw	fp,16(sp)
     650:	df000404 	addi	fp,sp,16
     654:	e13ffe15 	stw	r4,-8(fp)
     658:	e17fff15 	stw	r5,-4(fp)
	if(state == LEVEL_RUN){
     65c:	e0bffe17 	ldw	r2,-8(fp)
     660:	10807c17 	ldw	r2,496(r2)
     664:	10800058 	cmpnei	r2,r2,1
     668:	1000671e 	bne	r2,zero,808 <_ZN4Game6updateEi+0x1c4>
		switch(ci->getActiveButton()){
     66c:	e0bffe17 	ldw	r2,-8(fp)
     670:	10800017 	ldw	r2,0(r2)
     674:	1009883a 	mov	r4,r2
     678:	00002c00 	call	2c0 <_ZN19ControllerInterface15getActiveButtonEv>
     67c:	10c000a0 	cmpeqi	r3,r2,2
     680:	1800101e 	bne	r3,zero,6c4 <_ZN4Game6updateEi+0x80>
     684:	10c000c8 	cmpgei	r3,r2,3
     688:	1800031e 	bne	r3,zero,698 <_ZN4Game6updateEi+0x54>
     68c:	10800060 	cmpeqi	r2,r2,1
     690:	1000061e 	bne	r2,zero,6ac <_ZN4Game6updateEi+0x68>
			case BUTTON_UP: player.setDir(DIR_UP); break;
			case BUTTON_DOWN: player.setDir(DIR_DOWN); break;
			case BUTTON_LEFT: player.setDir(DIR_LEFT); break;
			case BUTTON_RIGHT: player.setDir(DIR_RIGHT); break;
			default: break;
     694:	00001d06 	br	70c <_ZN4Game6updateEi+0xc8>
	setInSquare(&player, 10, 15);
};

void Game::update(int elapsedTime){
	if(state == LEVEL_RUN){
		switch(ci->getActiveButton()){
     698:	10c000e0 	cmpeqi	r3,r2,3
     69c:	18000f1e 	bne	r3,zero,6dc <_ZN4Game6updateEi+0x98>
     6a0:	10800120 	cmpeqi	r2,r2,4
     6a4:	1000131e 	bne	r2,zero,6f4 <_ZN4Game6updateEi+0xb0>
			case BUTTON_UP: player.setDir(DIR_UP); break;
			case BUTTON_DOWN: player.setDir(DIR_DOWN); break;
			case BUTTON_LEFT: player.setDir(DIR_LEFT); break;
			case BUTTON_RIGHT: player.setDir(DIR_RIGHT); break;
			default: break;
     6a8:	00001806 	br	70c <_ZN4Game6updateEi+0xc8>
};

void Game::update(int elapsedTime){
	if(state == LEVEL_RUN){
		switch(ci->getActiveButton()){
			case BUTTON_UP: player.setDir(DIR_UP); break;
     6ac:	e0bffe17 	ldw	r2,-8(fp)
     6b0:	10800204 	addi	r2,r2,8
     6b4:	000b883a 	mov	r5,zero
     6b8:	1009883a 	mov	r4,r2
     6bc:	00004400 	call	440 <_ZN6Entity6setDirE5E_DIR>
     6c0:	00001206 	br	70c <_ZN4Game6updateEi+0xc8>
			case BUTTON_DOWN: player.setDir(DIR_DOWN); break;
     6c4:	e0bffe17 	ldw	r2,-8(fp)
     6c8:	10800204 	addi	r2,r2,8
     6cc:	01400044 	movi	r5,1
     6d0:	1009883a 	mov	r4,r2
     6d4:	00004400 	call	440 <_ZN6Entity6setDirE5E_DIR>
     6d8:	00000c06 	br	70c <_ZN4Game6updateEi+0xc8>
			case BUTTON_LEFT: player.setDir(DIR_LEFT); break;
     6dc:	e0bffe17 	ldw	r2,-8(fp)
     6e0:	10800204 	addi	r2,r2,8
     6e4:	01400084 	movi	r5,2
     6e8:	1009883a 	mov	r4,r2
     6ec:	00004400 	call	440 <_ZN6Entity6setDirE5E_DIR>
     6f0:	00000606 	br	70c <_ZN4Game6updateEi+0xc8>
			case BUTTON_RIGHT: player.setDir(DIR_RIGHT); break;
     6f4:	e0bffe17 	ldw	r2,-8(fp)
     6f8:	10800204 	addi	r2,r2,8
     6fc:	014000c4 	movi	r5,3
     700:	1009883a 	mov	r4,r2
     704:	00004400 	call	440 <_ZN6Entity6setDirE5E_DIR>
     708:	0001883a 	nop
			default: break;
		}
		updateMovement(&player, elapsedTime);
     70c:	e0bffe17 	ldw	r2,-8(fp)
     710:	10800204 	addi	r2,r2,8
     714:	e1bfff17 	ldw	r6,-4(fp)
     718:	100b883a 	mov	r5,r2
     71c:	e13ffe17 	ldw	r4,-8(fp)
     720:	0000b480 	call	b48 <_ZN4Game14updateMovementEP6Entityi>

		int xs = player.getX() / 8.0;
     724:	e0bffe17 	ldw	r2,-8(fp)
     728:	10800204 	addi	r2,r2,8
     72c:	1009883a 	mov	r4,r2
     730:	00004f80 	call	4f8 <_ZN6Entity4getXEv>
     734:	1009883a 	mov	r4,r2
     738:	00059580 	call	5958 <__floatsisf>
     73c:	1007883a 	mov	r3,r2
     740:	00904034 	movhi	r2,16640
     744:	1885fff2 	custom	255,r2,r3,r2
     748:	1009883a 	mov	r4,r2
     74c:	00058e80 	call	58e8 <__fixsfsi>
     750:	e0bffc15 	stw	r2,-16(fp)
		int ys = player.getY() / 8.0;
     754:	e0bffe17 	ldw	r2,-8(fp)
     758:	10800204 	addi	r2,r2,8
     75c:	1009883a 	mov	r4,r2
     760:	00005200 	call	520 <_ZN6Entity4getYEv>
     764:	1009883a 	mov	r4,r2
     768:	00059580 	call	5958 <__floatsisf>
     76c:	1007883a 	mov	r3,r2
     770:	00904034 	movhi	r2,16640
     774:	1885fff2 	custom	255,r2,r3,r2
     778:	1009883a 	mov	r4,r2
     77c:	00058e80 	call	58e8 <__fixsfsi>
     780:	e0bffd15 	stw	r2,-12(fp)
		if(map[ys][xs] == pd){
     784:	e0fffe17 	ldw	r3,-8(fp)
     788:	e0bffd17 	ldw	r2,-12(fp)
     78c:	11000564 	muli	r4,r2,21
     790:	e0bffc17 	ldw	r2,-16(fp)
     794:	2085883a 	add	r2,r4,r2
     798:	10801fc4 	addi	r2,r2,127
     79c:	1085883a 	add	r2,r2,r2
     7a0:	1085883a 	add	r2,r2,r2
     7a4:	1885883a 	add	r2,r3,r2
     7a8:	10800017 	ldw	r2,0(r2)
     7ac:	10800058 	cmpnei	r2,r2,1
     7b0:	1000151e 	bne	r2,zero,808 <_ZN4Game6updateEi+0x1c4>
			points += 100;
     7b4:	e0bffe17 	ldw	r2,-8(fp)
     7b8:	10807e17 	ldw	r2,504(r2)
     7bc:	10c01904 	addi	r3,r2,100
     7c0:	e0bffe17 	ldw	r2,-8(fp)
     7c4:	10c07e15 	stw	r3,504(r2)
			printf("Points: %d \n", points);
     7c8:	e0bffe17 	ldw	r2,-8(fp)
     7cc:	10807e17 	ldw	r2,504(r2)
     7d0:	100b883a 	mov	r5,r2
     7d4:	010000b4 	movhi	r4,2
     7d8:	213e7c04 	addi	r4,r4,-1552
     7dc:	00076040 	call	7604 <printf>
			map[ys][xs] = em;
     7e0:	e0fffe17 	ldw	r3,-8(fp)
     7e4:	e0bffd17 	ldw	r2,-12(fp)
     7e8:	11000564 	muli	r4,r2,21
     7ec:	e0bffc17 	ldw	r2,-16(fp)
     7f0:	2085883a 	add	r2,r4,r2
     7f4:	10801fc4 	addi	r2,r2,127
     7f8:	1085883a 	add	r2,r2,r2
     7fc:	1085883a 	add	r2,r2,r2
     800:	1885883a 	add	r2,r3,r2
     804:	10000015 	stw	zero,0(r2)
		}
	}
};
     808:	0001883a 	nop
     80c:	e037883a 	mov	sp,fp
     810:	dfc00117 	ldw	ra,4(sp)
     814:	df000017 	ldw	fp,0(sp)
     818:	dec00204 	addi	sp,sp,8
     81c:	f800283a 	ret

00000820 <_ZN4Game11setInSquareEP6Entityii>:

void Game::setInSquare(Entity* en, int xs, int ys){
     820:	defffa04 	addi	sp,sp,-24
     824:	dfc00515 	stw	ra,20(sp)
     828:	df000415 	stw	fp,16(sp)
     82c:	df000404 	addi	fp,sp,16
     830:	e13ffc15 	stw	r4,-16(fp)
     834:	e17ffd15 	stw	r5,-12(fp)
     838:	e1bffe15 	stw	r6,-8(fp)
     83c:	e1ffff15 	stw	r7,-4(fp)
	en->setPos(xs*8, ys*8);
     840:	e0bffe17 	ldw	r2,-8(fp)
     844:	100690fa 	slli	r3,r2,3
     848:	e0bfff17 	ldw	r2,-4(fp)
     84c:	100490fa 	slli	r2,r2,3
     850:	100d883a 	mov	r6,r2
     854:	180b883a 	mov	r5,r3
     858:	e13ffd17 	ldw	r4,-12(fp)
     85c:	00004800 	call	480 <_ZN6Entity6setPosEii>
};
     860:	0001883a 	nop
     864:	e037883a 	mov	sp,fp
     868:	dfc00117 	ldw	ra,4(sp)
     86c:	df000017 	ldw	fp,0(sp)
     870:	dec00204 	addi	sp,sp,8
     874:	f800283a 	ret

00000878 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_>:

void Game::distanceToWalls(Entity* en, int* up, int* down, int* left, int* right){
     878:	defff004 	addi	sp,sp,-64
     87c:	dfc00f15 	stw	ra,60(sp)
     880:	df000e15 	stw	fp,56(sp)
     884:	df000e04 	addi	fp,sp,56
     888:	e13ffc15 	stw	r4,-16(fp)
     88c:	e17ffd15 	stw	r5,-12(fp)
     890:	e1bffe15 	stw	r6,-8(fp)
     894:	e1ffff15 	stw	r7,-4(fp)
	int x = en->getX();
     898:	e13ffd17 	ldw	r4,-12(fp)
     89c:	00004f80 	call	4f8 <_ZN6Entity4getXEv>
     8a0:	e0bff615 	stw	r2,-40(fp)
	int y = en->getY();
     8a4:	e13ffd17 	ldw	r4,-12(fp)
     8a8:	00005200 	call	520 <_ZN6Entity4getYEv>
     8ac:	e0bff715 	stw	r2,-36(fp)
	int xSq = en->getX() / 8.0;
     8b0:	e13ffd17 	ldw	r4,-12(fp)
     8b4:	00004f80 	call	4f8 <_ZN6Entity4getXEv>
     8b8:	1009883a 	mov	r4,r2
     8bc:	00059580 	call	5958 <__floatsisf>
     8c0:	1007883a 	mov	r3,r2
     8c4:	00904034 	movhi	r2,16640
     8c8:	1885fff2 	custom	255,r2,r3,r2
     8cc:	1009883a 	mov	r4,r2
     8d0:	00058e80 	call	58e8 <__fixsfsi>
     8d4:	e0bff815 	stw	r2,-32(fp)
	int ySq = en->getY() / 8.0;
     8d8:	e13ffd17 	ldw	r4,-12(fp)
     8dc:	00005200 	call	520 <_ZN6Entity4getYEv>
     8e0:	1009883a 	mov	r4,r2
     8e4:	00059580 	call	5958 <__floatsisf>
     8e8:	1007883a 	mov	r3,r2
     8ec:	00904034 	movhi	r2,16640
     8f0:	1885fff2 	custom	255,r2,r3,r2
     8f4:	1009883a 	mov	r4,r2
     8f8:	00058e80 	call	58e8 <__fixsfsi>
     8fc:	e0bff915 	stw	r2,-28(fp)

	int upSq = 0, downSq = 0, leftSq = 0, rightSq = 0;
     900:	e03ff215 	stw	zero,-56(fp)
     904:	e03ff315 	stw	zero,-52(fp)
     908:	e03ff415 	stw	zero,-48(fp)
     90c:	e03ff515 	stw	zero,-44(fp)
	if(x % 8 == 0){
     910:	e0bff617 	ldw	r2,-40(fp)
     914:	108001cc 	andi	r2,r2,7
     918:	1000301e 	bne	r2,zero,9dc <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x164>
		while(walkable(map[ySq - upSq - 1][xSq])) 	 upSq++;
     91c:	e0fff917 	ldw	r3,-28(fp)
     920:	e0bff217 	ldw	r2,-56(fp)
     924:	1885c83a 	sub	r2,r3,r2
     928:	10bfffc4 	addi	r2,r2,-1
     92c:	e0fffc17 	ldw	r3,-16(fp)
     930:	11000564 	muli	r4,r2,21
     934:	e0bff817 	ldw	r2,-32(fp)
     938:	2085883a 	add	r2,r4,r2
     93c:	10801fc4 	addi	r2,r2,127
     940:	1085883a 	add	r2,r2,r2
     944:	1085883a 	add	r2,r2,r2
     948:	1885883a 	add	r2,r3,r2
     94c:	10800017 	ldw	r2,0(r2)
     950:	100b883a 	mov	r5,r2
     954:	e13ffc17 	ldw	r4,-16(fp)
     958:	0000d540 	call	d54 <_ZN4Game8walkableE10map_item_t>
     95c:	10803fcc 	andi	r2,r2,255
     960:	1004c03a 	cmpne	r2,r2,zero
     964:	10803fcc 	andi	r2,r2,255
     968:	10000426 	beq	r2,zero,97c <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x104>
     96c:	e0bff217 	ldw	r2,-56(fp)
     970:	10800044 	addi	r2,r2,1
     974:	e0bff215 	stw	r2,-56(fp)
     978:	003fe806 	br	91c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700091c>
		while(walkable(map[ySq + downSq + 1][xSq]))  downSq++;
     97c:	e0fff917 	ldw	r3,-28(fp)
     980:	e0bff317 	ldw	r2,-52(fp)
     984:	1885883a 	add	r2,r3,r2
     988:	10800044 	addi	r2,r2,1
     98c:	e0fffc17 	ldw	r3,-16(fp)
     990:	11000564 	muli	r4,r2,21
     994:	e0bff817 	ldw	r2,-32(fp)
     998:	2085883a 	add	r2,r4,r2
     99c:	10801fc4 	addi	r2,r2,127
     9a0:	1085883a 	add	r2,r2,r2
     9a4:	1085883a 	add	r2,r2,r2
     9a8:	1885883a 	add	r2,r3,r2
     9ac:	10800017 	ldw	r2,0(r2)
     9b0:	100b883a 	mov	r5,r2
     9b4:	e13ffc17 	ldw	r4,-16(fp)
     9b8:	0000d540 	call	d54 <_ZN4Game8walkableE10map_item_t>
     9bc:	10803fcc 	andi	r2,r2,255
     9c0:	1004c03a 	cmpne	r2,r2,zero
     9c4:	10803fcc 	andi	r2,r2,255
     9c8:	10000426 	beq	r2,zero,9dc <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x164>
     9cc:	e0bff317 	ldw	r2,-52(fp)
     9d0:	10800044 	addi	r2,r2,1
     9d4:	e0bff315 	stw	r2,-52(fp)
     9d8:	003fe806 	br	97c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700097c>
	}
	if(y % 8 == 0){
     9dc:	e0bff717 	ldw	r2,-36(fp)
     9e0:	108001cc 	andi	r2,r2,7
     9e4:	1000301e 	bne	r2,zero,aa8 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x230>
		while(walkable(map[ySq][xSq - leftSq - 1]))  leftSq++;
     9e8:	e0fff817 	ldw	r3,-32(fp)
     9ec:	e0bff417 	ldw	r2,-48(fp)
     9f0:	1885c83a 	sub	r2,r3,r2
     9f4:	10bfffc4 	addi	r2,r2,-1
     9f8:	e0fffc17 	ldw	r3,-16(fp)
     9fc:	e13ff917 	ldw	r4,-28(fp)
     a00:	21000564 	muli	r4,r4,21
     a04:	2085883a 	add	r2,r4,r2
     a08:	10801fc4 	addi	r2,r2,127
     a0c:	1085883a 	add	r2,r2,r2
     a10:	1085883a 	add	r2,r2,r2
     a14:	1885883a 	add	r2,r3,r2
     a18:	10800017 	ldw	r2,0(r2)
     a1c:	100b883a 	mov	r5,r2
     a20:	e13ffc17 	ldw	r4,-16(fp)
     a24:	0000d540 	call	d54 <_ZN4Game8walkableE10map_item_t>
     a28:	10803fcc 	andi	r2,r2,255
     a2c:	1004c03a 	cmpne	r2,r2,zero
     a30:	10803fcc 	andi	r2,r2,255
     a34:	10000426 	beq	r2,zero,a48 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x1d0>
     a38:	e0bff417 	ldw	r2,-48(fp)
     a3c:	10800044 	addi	r2,r2,1
     a40:	e0bff415 	stw	r2,-48(fp)
     a44:	003fe806 	br	9e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009e8>
		while(walkable(map[ySq][xSq + rightSq + 1])) rightSq++;
     a48:	e0fff817 	ldw	r3,-32(fp)
     a4c:	e0bff517 	ldw	r2,-44(fp)
     a50:	1885883a 	add	r2,r3,r2
     a54:	10800044 	addi	r2,r2,1
     a58:	e0fffc17 	ldw	r3,-16(fp)
     a5c:	e13ff917 	ldw	r4,-28(fp)
     a60:	21000564 	muli	r4,r4,21
     a64:	2085883a 	add	r2,r4,r2
     a68:	10801fc4 	addi	r2,r2,127
     a6c:	1085883a 	add	r2,r2,r2
     a70:	1085883a 	add	r2,r2,r2
     a74:	1885883a 	add	r2,r3,r2
     a78:	10800017 	ldw	r2,0(r2)
     a7c:	100b883a 	mov	r5,r2
     a80:	e13ffc17 	ldw	r4,-16(fp)
     a84:	0000d540 	call	d54 <_ZN4Game8walkableE10map_item_t>
     a88:	10803fcc 	andi	r2,r2,255
     a8c:	1004c03a 	cmpne	r2,r2,zero
     a90:	10803fcc 	andi	r2,r2,255
     a94:	10000426 	beq	r2,zero,aa8 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x230>
     a98:	e0bff517 	ldw	r2,-44(fp)
     a9c:	10800044 	addi	r2,r2,1
     aa0:	e0bff515 	stw	r2,-44(fp)
     aa4:	003fe806 	br	a48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000a48>
	}

	int xPixel = (xSq * 8) - x;
     aa8:	e0bff817 	ldw	r2,-32(fp)
     aac:	100690fa 	slli	r3,r2,3
     ab0:	e0bff617 	ldw	r2,-40(fp)
     ab4:	1885c83a 	sub	r2,r3,r2
     ab8:	e0bffa15 	stw	r2,-24(fp)
	int yPixel = (ySq * 8) - y;
     abc:	e0bff917 	ldw	r2,-28(fp)
     ac0:	100690fa 	slli	r3,r2,3
     ac4:	e0bff717 	ldw	r2,-36(fp)
     ac8:	1885c83a 	sub	r2,r3,r2
     acc:	e0bffb15 	stw	r2,-20(fp)

	*up 	= (upSq * 8) - yPixel;
     ad0:	e0bff217 	ldw	r2,-56(fp)
     ad4:	100690fa 	slli	r3,r2,3
     ad8:	e0bffb17 	ldw	r2,-20(fp)
     adc:	1887c83a 	sub	r3,r3,r2
     ae0:	e0bffe17 	ldw	r2,-8(fp)
     ae4:	10c00015 	stw	r3,0(r2)
	*down 	= (downSq * 8) + yPixel;
     ae8:	e0bff317 	ldw	r2,-52(fp)
     aec:	100690fa 	slli	r3,r2,3
     af0:	e0bffb17 	ldw	r2,-20(fp)
     af4:	1887883a 	add	r3,r3,r2
     af8:	e0bfff17 	ldw	r2,-4(fp)
     afc:	10c00015 	stw	r3,0(r2)
	*left 	= (leftSq * 8) - xPixel;
     b00:	e0bff417 	ldw	r2,-48(fp)
     b04:	100690fa 	slli	r3,r2,3
     b08:	e0bffa17 	ldw	r2,-24(fp)
     b0c:	1887c83a 	sub	r3,r3,r2
     b10:	e0800217 	ldw	r2,8(fp)
     b14:	10c00015 	stw	r3,0(r2)
	*right 	= (rightSq * 8) + xPixel;
     b18:	e0bff517 	ldw	r2,-44(fp)
     b1c:	100690fa 	slli	r3,r2,3
     b20:	e0bffa17 	ldw	r2,-24(fp)
     b24:	1887883a 	add	r3,r3,r2
     b28:	e0800317 	ldw	r2,12(fp)
     b2c:	10c00015 	stw	r3,0(r2)
};
     b30:	0001883a 	nop
     b34:	e037883a 	mov	sp,fp
     b38:	dfc00117 	ldw	ra,4(sp)
     b3c:	df000017 	ldw	fp,0(sp)
     b40:	dec00204 	addi	sp,sp,8
     b44:	f800283a 	ret

00000b48 <_ZN4Game14updateMovementEP6Entityi>:

void Game::updateMovement(Entity* en, int elapsedTime){
     b48:	defff204 	addi	sp,sp,-56
     b4c:	dfc00d15 	stw	ra,52(sp)
     b50:	df000c15 	stw	fp,48(sp)
     b54:	dc000b15 	stw	r16,44(sp)
     b58:	df000c04 	addi	fp,sp,48
     b5c:	e13ffc15 	stw	r4,-16(fp)
     b60:	e17ffd15 	stw	r5,-12(fp)
     b64:	e1bffe15 	stw	r6,-8(fp)
	en->update(elapsedTime);
     b68:	e17ffe17 	ldw	r5,-8(fp)
     b6c:	e13ffd17 	ldw	r4,-12(fp)
     b70:	00003640 	call	364 <_ZN6Entity6updateEi>

	int up, down, left, right;
	distanceToWalls(en, &up, &down, &left, &right);
     b74:	e13ff904 	addi	r4,fp,-28
     b78:	e0fff804 	addi	r3,fp,-32
     b7c:	e0bffb04 	addi	r2,fp,-20
     b80:	d8800115 	stw	r2,4(sp)
     b84:	e0bffa04 	addi	r2,fp,-24
     b88:	d8800015 	stw	r2,0(sp)
     b8c:	200f883a 	mov	r7,r4
     b90:	180d883a 	mov	r6,r3
     b94:	e17ffd17 	ldw	r5,-12(fp)
     b98:	e13ffc17 	ldw	r4,-16(fp)
     b9c:	00008780 	call	878 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_>

	float timeFraction = (float)elapsedTime / 1000;
     ba0:	e13ffe17 	ldw	r4,-8(fp)
     ba4:	00059580 	call	5958 <__floatsisf>
     ba8:	1007883a 	mov	r3,r2
     bac:	00911eb4 	movhi	r2,17530
     bb0:	1885fff2 	custom	255,r2,r3,r2
     bb4:	e0bff615 	stw	r2,-40(fp)
	int walk = roundf(timeFraction * en->getVelocity());
     bb8:	e13ffd17 	ldw	r4,-12(fp)
     bbc:	00004d00 	call	4d0 <_ZN6Entity11getVelocityEv>
     bc0:	1009883a 	mov	r4,r2
     bc4:	00059580 	call	5958 <__floatsisf>
     bc8:	1007883a 	mov	r3,r2
     bcc:	e0bff617 	ldw	r2,-40(fp)
     bd0:	1885ff32 	custom	252,r2,r3,r2
     bd4:	1009883a 	mov	r4,r2
     bd8:	00052180 	call	5218 <roundf>
     bdc:	1007883a 	mov	r3,r2
     be0:	1809883a 	mov	r4,r3
     be4:	00058e80 	call	58e8 <__fixsfsi>
     be8:	e0bff715 	stw	r2,-36(fp)

	switch(en->getDir()){
     bec:	e13ffd17 	ldw	r4,-12(fp)
     bf0:	00005480 	call	548 <_ZN6Entity6getDirEv>
     bf4:	10c00060 	cmpeqi	r3,r2,1
     bf8:	18001b1e 	bne	r3,zero,c68 <_ZN4Game14updateMovementEP6Entityi+0x120>
     bfc:	10c00088 	cmpgei	r3,r2,2
     c00:	1800021e 	bne	r3,zero,c0c <_ZN4Game14updateMovementEP6Entityi+0xc4>
     c04:	10000626 	beq	r2,zero,c20 <_ZN4Game14updateMovementEP6Entityi+0xd8>
		case DIR_UP: 	en->setPos(en->getX(), en->getY() - SHORTEST(walk, up)); break;
		case DIR_DOWN: 	en->setPos(en->getX(), en->getY() + SHORTEST(walk, down)); break;
		case DIR_LEFT: 	en->setPos(en->getX() - SHORTEST(walk, left), en->getY()); break;
		case DIR_RIGHT: en->setPos(en->getX() + SHORTEST(walk, right), en->getY()); break;
		default: break;
     c08:	00004b06 	br	d38 <_ZN4Game14updateMovementEP6Entityi+0x1f0>
	distanceToWalls(en, &up, &down, &left, &right);

	float timeFraction = (float)elapsedTime / 1000;
	int walk = roundf(timeFraction * en->getVelocity());

	switch(en->getDir()){
     c0c:	10c000a0 	cmpeqi	r3,r2,2
     c10:	1800271e 	bne	r3,zero,cb0 <_ZN4Game14updateMovementEP6Entityi+0x168>
     c14:	108000e0 	cmpeqi	r2,r2,3
     c18:	1000361e 	bne	r2,zero,cf4 <_ZN4Game14updateMovementEP6Entityi+0x1ac>
		case DIR_UP: 	en->setPos(en->getX(), en->getY() - SHORTEST(walk, up)); break;
		case DIR_DOWN: 	en->setPos(en->getX(), en->getY() + SHORTEST(walk, down)); break;
		case DIR_LEFT: 	en->setPos(en->getX() - SHORTEST(walk, left), en->getY()); break;
		case DIR_RIGHT: en->setPos(en->getX() + SHORTEST(walk, right), en->getY()); break;
		default: break;
     c1c:	00004606 	br	d38 <_ZN4Game14updateMovementEP6Entityi+0x1f0>

	float timeFraction = (float)elapsedTime / 1000;
	int walk = roundf(timeFraction * en->getVelocity());

	switch(en->getDir()){
		case DIR_UP: 	en->setPos(en->getX(), en->getY() - SHORTEST(walk, up)); break;
     c20:	e13ffd17 	ldw	r4,-12(fp)
     c24:	00004f80 	call	4f8 <_ZN6Entity4getXEv>
     c28:	1021883a 	mov	r16,r2
     c2c:	e13ffd17 	ldw	r4,-12(fp)
     c30:	00005200 	call	520 <_ZN6Entity4getYEv>
     c34:	1009883a 	mov	r4,r2
     c38:	e0fff817 	ldw	r3,-32(fp)
     c3c:	e0bff717 	ldw	r2,-36(fp)
     c40:	1880020e 	bge	r3,r2,c4c <_ZN4Game14updateMovementEP6Entityi+0x104>
     c44:	e0bff817 	ldw	r2,-32(fp)
     c48:	00000106 	br	c50 <_ZN4Game14updateMovementEP6Entityi+0x108>
     c4c:	e0bff717 	ldw	r2,-36(fp)
     c50:	2085c83a 	sub	r2,r4,r2
     c54:	100d883a 	mov	r6,r2
     c58:	800b883a 	mov	r5,r16
     c5c:	e13ffd17 	ldw	r4,-12(fp)
     c60:	00004800 	call	480 <_ZN6Entity6setPosEii>
     c64:	00003406 	br	d38 <_ZN4Game14updateMovementEP6Entityi+0x1f0>
		case DIR_DOWN: 	en->setPos(en->getX(), en->getY() + SHORTEST(walk, down)); break;
     c68:	e13ffd17 	ldw	r4,-12(fp)
     c6c:	00004f80 	call	4f8 <_ZN6Entity4getXEv>
     c70:	1021883a 	mov	r16,r2
     c74:	e13ffd17 	ldw	r4,-12(fp)
     c78:	00005200 	call	520 <_ZN6Entity4getYEv>
     c7c:	1009883a 	mov	r4,r2
     c80:	e0fff917 	ldw	r3,-28(fp)
     c84:	e0bff717 	ldw	r2,-36(fp)
     c88:	1880020e 	bge	r3,r2,c94 <_ZN4Game14updateMovementEP6Entityi+0x14c>
     c8c:	e0bff917 	ldw	r2,-28(fp)
     c90:	00000106 	br	c98 <_ZN4Game14updateMovementEP6Entityi+0x150>
     c94:	e0bff717 	ldw	r2,-36(fp)
     c98:	2085883a 	add	r2,r4,r2
     c9c:	100d883a 	mov	r6,r2
     ca0:	800b883a 	mov	r5,r16
     ca4:	e13ffd17 	ldw	r4,-12(fp)
     ca8:	00004800 	call	480 <_ZN6Entity6setPosEii>
     cac:	00002206 	br	d38 <_ZN4Game14updateMovementEP6Entityi+0x1f0>
		case DIR_LEFT: 	en->setPos(en->getX() - SHORTEST(walk, left), en->getY()); break;
     cb0:	e13ffd17 	ldw	r4,-12(fp)
     cb4:	00004f80 	call	4f8 <_ZN6Entity4getXEv>
     cb8:	1009883a 	mov	r4,r2
     cbc:	e0fffa17 	ldw	r3,-24(fp)
     cc0:	e0bff717 	ldw	r2,-36(fp)
     cc4:	1880020e 	bge	r3,r2,cd0 <_ZN4Game14updateMovementEP6Entityi+0x188>
     cc8:	e0bffa17 	ldw	r2,-24(fp)
     ccc:	00000106 	br	cd4 <_ZN4Game14updateMovementEP6Entityi+0x18c>
     cd0:	e0bff717 	ldw	r2,-36(fp)
     cd4:	20a1c83a 	sub	r16,r4,r2
     cd8:	e13ffd17 	ldw	r4,-12(fp)
     cdc:	00005200 	call	520 <_ZN6Entity4getYEv>
     ce0:	100d883a 	mov	r6,r2
     ce4:	800b883a 	mov	r5,r16
     ce8:	e13ffd17 	ldw	r4,-12(fp)
     cec:	00004800 	call	480 <_ZN6Entity6setPosEii>
     cf0:	00001106 	br	d38 <_ZN4Game14updateMovementEP6Entityi+0x1f0>
		case DIR_RIGHT: en->setPos(en->getX() + SHORTEST(walk, right), en->getY()); break;
     cf4:	e13ffd17 	ldw	r4,-12(fp)
     cf8:	00004f80 	call	4f8 <_ZN6Entity4getXEv>
     cfc:	1009883a 	mov	r4,r2
     d00:	e0fffb17 	ldw	r3,-20(fp)
     d04:	e0bff717 	ldw	r2,-36(fp)
     d08:	1880020e 	bge	r3,r2,d14 <_ZN4Game14updateMovementEP6Entityi+0x1cc>
     d0c:	e0bffb17 	ldw	r2,-20(fp)
     d10:	00000106 	br	d18 <_ZN4Game14updateMovementEP6Entityi+0x1d0>
     d14:	e0bff717 	ldw	r2,-36(fp)
     d18:	20a1883a 	add	r16,r4,r2
     d1c:	e13ffd17 	ldw	r4,-12(fp)
     d20:	00005200 	call	520 <_ZN6Entity4getYEv>
     d24:	100d883a 	mov	r6,r2
     d28:	800b883a 	mov	r5,r16
     d2c:	e13ffd17 	ldw	r4,-12(fp)
     d30:	00004800 	call	480 <_ZN6Entity6setPosEii>
     d34:	0001883a 	nop
		default: break;
	};
};
     d38:	0001883a 	nop
     d3c:	e6ffff04 	addi	sp,fp,-4
     d40:	dfc00217 	ldw	ra,8(sp)
     d44:	df000117 	ldw	fp,4(sp)
     d48:	dc000017 	ldw	r16,0(sp)
     d4c:	dec00304 	addi	sp,sp,12
     d50:	f800283a 	ret

00000d54 <_ZN4Game8walkableE10map_item_t>:

uint8_t Game::walkable(map_item_t item){
     d54:	defffd04 	addi	sp,sp,-12
     d58:	df000215 	stw	fp,8(sp)
     d5c:	df000204 	addi	fp,sp,8
     d60:	e13ffe15 	stw	r4,-8(fp)
     d64:	e17fff15 	stw	r5,-4(fp)
	return (item == em || item == pd);
     d68:	e0bfff17 	ldw	r2,-4(fp)
     d6c:	10000326 	beq	r2,zero,d7c <_ZN4Game8walkableE10map_item_t+0x28>
     d70:	e0bfff17 	ldw	r2,-4(fp)
     d74:	10800058 	cmpnei	r2,r2,1
     d78:	1000021e 	bne	r2,zero,d84 <_ZN4Game8walkableE10map_item_t+0x30>
     d7c:	00800044 	movi	r2,1
     d80:	00000106 	br	d88 <_ZN4Game8walkableE10map_item_t+0x34>
     d84:	0005883a 	mov	r2,zero
};
     d88:	e037883a 	mov	sp,fp
     d8c:	df000017 	ldw	fp,0(sp)
     d90:	dec00104 	addi	sp,sp,4
     d94:	f800283a 	ret

00000d98 <_ZN4Game4drawEv>:

void Game::draw(){
     d98:	defffd04 	addi	sp,sp,-12
     d9c:	dfc00215 	stw	ra,8(sp)
     da0:	df000115 	stw	fp,4(sp)
     da4:	df000104 	addi	fp,sp,4
     da8:	e13fff15 	stw	r4,-4(fp)
	switch(state){
     dac:	e0bfff17 	ldw	r2,-4(fp)
     db0:	10807c17 	ldw	r2,496(r2)
     db4:	10000326 	beq	r2,zero,dc4 <_ZN4Game4drawEv+0x2c>
     db8:	10800060 	cmpeqi	r2,r2,1
     dbc:	1000071e 	bne	r2,zero,ddc <_ZN4Game4drawEv+0x44>
			break;
		case LEVEL_RUN:
			player.draw(vi);
			break;
	}
};
     dc0:	00000e06 	br	dfc <_ZN4Game4drawEv+0x64>
};

void Game::draw(){
	switch(state){
		case LEVEL_START:
			drawMap();
     dc4:	e13fff17 	ldw	r4,-4(fp)
     dc8:	0000e140 	call	e14 <_ZN4Game7drawMapEv>
			state = LEVEL_RUN;
     dcc:	e0bfff17 	ldw	r2,-4(fp)
     dd0:	00c00044 	movi	r3,1
     dd4:	10c07c15 	stw	r3,496(r2)
			break;
     dd8:	00000806 	br	dfc <_ZN4Game4drawEv+0x64>
		case LEVEL_RUN:
			player.draw(vi);
     ddc:	e0bfff17 	ldw	r2,-4(fp)
     de0:	10c00204 	addi	r3,r2,8
     de4:	e0bfff17 	ldw	r2,-4(fp)
     de8:	10800117 	ldw	r2,4(r2)
     dec:	100b883a 	mov	r5,r2
     df0:	1809883a 	mov	r4,r3
     df4:	00003e00 	call	3e0 <_ZN6Entity4drawEP14VideoInterface>
			break;
     df8:	0001883a 	nop
	}
};
     dfc:	0001883a 	nop
     e00:	e037883a 	mov	sp,fp
     e04:	dfc00117 	ldw	ra,4(sp)
     e08:	df000017 	ldw	fp,0(sp)
     e0c:	dec00204 	addi	sp,sp,8
     e10:	f800283a 	ret

00000e14 <_ZN4Game7drawMapEv>:

void Game::drawMap(){
     e14:	defff904 	addi	sp,sp,-28
     e18:	dfc00615 	stw	ra,24(sp)
     e1c:	df000515 	stw	fp,20(sp)
     e20:	df000504 	addi	fp,sp,20
     e24:	e13fff15 	stw	r4,-4(fp)
	for(int v = 0; v < 27; v++){
     e28:	e03ffd15 	stw	zero,-12(fp)
     e2c:	e0bffd17 	ldw	r2,-12(fp)
     e30:	108006c8 	cmpgei	r2,r2,27
     e34:	1004341e 	bne	r2,zero,1f08 <_ZN4Game7drawMapEv+0x10f4>
			for(int h = 0; h < 21; h++){
     e38:	e03ffe15 	stw	zero,-8(fp)
     e3c:	e0bffe17 	ldw	r2,-8(fp)
     e40:	10800548 	cmpgei	r2,r2,21
     e44:	10042c1e 	bne	r2,zero,1ef8 <_ZN4Game7drawMapEv+0x10e4>
				if(simpleMap){
     e48:	e0bfff17 	ldw	r2,-4(fp)
     e4c:	10807d03 	ldbu	r2,500(r2)
     e50:	10803fcc 	andi	r2,r2,255
     e54:	10002126 	beq	r2,zero,edc <_ZN4Game7drawMapEv+0xc8>
					if(!walkable(map[v][h]))
     e58:	e0ffff17 	ldw	r3,-4(fp)
     e5c:	e0bffd17 	ldw	r2,-12(fp)
     e60:	11000564 	muli	r4,r2,21
     e64:	e0bffe17 	ldw	r2,-8(fp)
     e68:	2085883a 	add	r2,r4,r2
     e6c:	10801fc4 	addi	r2,r2,127
     e70:	1085883a 	add	r2,r2,r2
     e74:	1085883a 	add	r2,r2,r2
     e78:	1885883a 	add	r2,r3,r2
     e7c:	10800017 	ldw	r2,0(r2)
     e80:	100b883a 	mov	r5,r2
     e84:	e13fff17 	ldw	r4,-4(fp)
     e88:	0000d540 	call	d54 <_ZN4Game8walkableE10map_item_t>
     e8c:	10803fcc 	andi	r2,r2,255
     e90:	1005003a 	cmpeq	r2,r2,zero
     e94:	10803fcc 	andi	r2,r2,255
     e98:	10041326 	beq	r2,zero,1ee8 <_ZN4Game7drawMapEv+0x10d4>
						vi->drawRect(H(0), V(0), 8, 8, RGB565(0, 74, 241));
     e9c:	e0bfff17 	ldw	r2,-4(fp)
     ea0:	10c00117 	ldw	r3,4(r2)
     ea4:	e0bffe17 	ldw	r2,-8(fp)
     ea8:	100890fa 	slli	r4,r2,3
     eac:	e0bffd17 	ldw	r2,-12(fp)
     eb0:	100a90fa 	slli	r5,r2,3
     eb4:	00809784 	movi	r2,606
     eb8:	d8800115 	stw	r2,4(sp)
     ebc:	00800204 	movi	r2,8
     ec0:	d8800015 	stw	r2,0(sp)
     ec4:	01c00204 	movi	r7,8
     ec8:	280d883a 	mov	r6,r5
     ecc:	200b883a 	mov	r5,r4
     ed0:	1809883a 	mov	r4,r3
     ed4:	0002b700 	call	2b70 <_ZN14VideoInterface8drawRectEiiiit>
     ed8:	00040306 	br	1ee8 <_ZN4Game7drawMapEv+0x10d4>
				}else{
					switch(map[v][h]){
     edc:	e0ffff17 	ldw	r3,-4(fp)
     ee0:	e0bffd17 	ldw	r2,-12(fp)
     ee4:	11000564 	muli	r4,r2,21
     ee8:	e0bffe17 	ldw	r2,-8(fp)
     eec:	2085883a 	add	r2,r4,r2
     ef0:	10801fc4 	addi	r2,r2,127
     ef4:	1085883a 	add	r2,r2,r2
     ef8:	1085883a 	add	r2,r2,r2
     efc:	1885883a 	add	r2,r3,r2
     f00:	10800017 	ldw	r2,0(r2)
     f04:	10c00428 	cmpgeui	r3,r2,16
     f08:	1803f61e 	bne	r3,zero,1ee4 <_ZN4Game7drawMapEv+0x10d0>
     f0c:	100690ba 	slli	r3,r2,2
     f10:	00800034 	movhi	r2,0
     f14:	1083c904 	addi	r2,r2,3876
     f18:	1885883a 	add	r2,r3,r2
     f1c:	10800017 	ldw	r2,0(r2)
     f20:	1000683a 	jmp	r2
     f24:	00001ee4 	muli	zero,zero,123
     f28:	00000f64 	muli	zero,zero,61
     f2c:	00000fac 	andhi	zero,zero,62
     f30:	00001104 	movi	zero,68
     f34:	00001254 	movui	zero,73
     f38:	000013a4 	muli	zero,zero,78
     f3c:	000014ec 	andhi	zero,zero,83
     f40:	00001578 	rdprs	zero,zero,85
     f44:	00001604 	movi	zero,88
     f48:	00001760 	cmpeqi	zero,zero,93
     f4c:	000018c4 	movi	zero,99
     f50:	00001a20 	cmpeqi	zero,zero,104
     f54:	00001b84 	movi	zero,110
     f58:	00001c58 	cmpnei	zero,zero,113
     f5c:	00001d34 	movhi	zero,116
     f60:	00001e08 	cmpgei	zero,zero,120
						case pd:
							vi->drawRect(H(3), V(3), 2, 2, RGB565(255, 165, 0));
     f64:	e0bfff17 	ldw	r2,-4(fp)
     f68:	10c00117 	ldw	r3,4(r2)
     f6c:	e0bffe17 	ldw	r2,-8(fp)
     f70:	100490fa 	slli	r2,r2,3
     f74:	110000c4 	addi	r4,r2,3
     f78:	e0bffd17 	ldw	r2,-12(fp)
     f7c:	100490fa 	slli	r2,r2,3
     f80:	114000c4 	addi	r5,r2,3
     f84:	00bf4814 	movui	r2,64800
     f88:	d8800115 	stw	r2,4(sp)
     f8c:	00800084 	movi	r2,2
     f90:	d8800015 	stw	r2,0(sp)
     f94:	01c00084 	movi	r7,2
     f98:	280d883a 	mov	r6,r5
     f9c:	200b883a 	mov	r5,r4
     fa0:	1809883a 	mov	r4,r3
     fa4:	0002b700 	call	2b70 <_ZN14VideoInterface8drawRectEiiiit>
							break;
     fa8:	0003cf06 	br	1ee8 <_ZN4Game7drawMapEv+0x10d4>
						case c1:
							vi->drawLine(H(4), V(2), H(7), V(2), RGB565(0, 74, 241));
     fac:	e0bfff17 	ldw	r2,-4(fp)
     fb0:	11000117 	ldw	r4,4(r2)
     fb4:	e0bffe17 	ldw	r2,-8(fp)
     fb8:	100490fa 	slli	r2,r2,3
     fbc:	11400104 	addi	r5,r2,4
     fc0:	e0bffd17 	ldw	r2,-12(fp)
     fc4:	100490fa 	slli	r2,r2,3
     fc8:	11800084 	addi	r6,r2,2
     fcc:	e0bffe17 	ldw	r2,-8(fp)
     fd0:	100490fa 	slli	r2,r2,3
     fd4:	11c001c4 	addi	r7,r2,7
     fd8:	e0bffd17 	ldw	r2,-12(fp)
     fdc:	100490fa 	slli	r2,r2,3
     fe0:	10800084 	addi	r2,r2,2
     fe4:	00c09784 	movi	r3,606
     fe8:	d8c00115 	stw	r3,4(sp)
     fec:	d8800015 	stw	r2,0(sp)
     ff0:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(2), V(4), H(2), V(7), RGB565(0, 74, 241));
     ff4:	e0bfff17 	ldw	r2,-4(fp)
     ff8:	11000117 	ldw	r4,4(r2)
     ffc:	e0bffe17 	ldw	r2,-8(fp)
    1000:	100490fa 	slli	r2,r2,3
    1004:	11400084 	addi	r5,r2,2
    1008:	e0bffd17 	ldw	r2,-12(fp)
    100c:	100490fa 	slli	r2,r2,3
    1010:	11800104 	addi	r6,r2,4
    1014:	e0bffe17 	ldw	r2,-8(fp)
    1018:	100490fa 	slli	r2,r2,3
    101c:	11c00084 	addi	r7,r2,2
    1020:	e0bffd17 	ldw	r2,-12(fp)
    1024:	100490fa 	slli	r2,r2,3
    1028:	108001c4 	addi	r2,r2,7
    102c:	00c09784 	movi	r3,606
    1030:	d8c00115 	stw	r3,4(sp)
    1034:	d8800015 	stw	r2,0(sp)
    1038:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawPixel(H(3), V(3), RGB565(0, 74, 241));
    103c:	e0bfff17 	ldw	r2,-4(fp)
    1040:	10c00117 	ldw	r3,4(r2)
    1044:	e0bffe17 	ldw	r2,-8(fp)
    1048:	100490fa 	slli	r2,r2,3
    104c:	110000c4 	addi	r4,r2,3
    1050:	e0bffd17 	ldw	r2,-12(fp)
    1054:	100490fa 	slli	r2,r2,3
    1058:	108000c4 	addi	r2,r2,3
    105c:	01c09784 	movi	r7,606
    1060:	100d883a 	mov	r6,r2
    1064:	200b883a 	mov	r5,r4
    1068:	1809883a 	mov	r4,r3
    106c:	000283c0 	call	283c <_ZN14VideoInterface9drawPixelEiit>
							vi->drawLine(H(6), V(5), H(7), V(5), RGB565(0, 74, 241));
    1070:	e0bfff17 	ldw	r2,-4(fp)
    1074:	11000117 	ldw	r4,4(r2)
    1078:	e0bffe17 	ldw	r2,-8(fp)
    107c:	100490fa 	slli	r2,r2,3
    1080:	11400184 	addi	r5,r2,6
    1084:	e0bffd17 	ldw	r2,-12(fp)
    1088:	100490fa 	slli	r2,r2,3
    108c:	11800144 	addi	r6,r2,5
    1090:	e0bffe17 	ldw	r2,-8(fp)
    1094:	100490fa 	slli	r2,r2,3
    1098:	11c001c4 	addi	r7,r2,7
    109c:	e0bffd17 	ldw	r2,-12(fp)
    10a0:	100490fa 	slli	r2,r2,3
    10a4:	10800144 	addi	r2,r2,5
    10a8:	00c09784 	movi	r3,606
    10ac:	d8c00115 	stw	r3,4(sp)
    10b0:	d8800015 	stw	r2,0(sp)
    10b4:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(5), V(6), H(5), V(7), RGB565(0, 74, 241));
    10b8:	e0bfff17 	ldw	r2,-4(fp)
    10bc:	11000117 	ldw	r4,4(r2)
    10c0:	e0bffe17 	ldw	r2,-8(fp)
    10c4:	100490fa 	slli	r2,r2,3
    10c8:	11400144 	addi	r5,r2,5
    10cc:	e0bffd17 	ldw	r2,-12(fp)
    10d0:	100490fa 	slli	r2,r2,3
    10d4:	11800184 	addi	r6,r2,6
    10d8:	e0bffe17 	ldw	r2,-8(fp)
    10dc:	100490fa 	slli	r2,r2,3
    10e0:	11c00144 	addi	r7,r2,5
    10e4:	e0bffd17 	ldw	r2,-12(fp)
    10e8:	100490fa 	slli	r2,r2,3
    10ec:	108001c4 	addi	r2,r2,7
    10f0:	00c09784 	movi	r3,606
    10f4:	d8c00115 	stw	r3,4(sp)
    10f8:	d8800015 	stw	r2,0(sp)
    10fc:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							break;
    1100:	00037906 	br	1ee8 <_ZN4Game7drawMapEv+0x10d4>
						case c2:
							vi->drawLine(H(0), V(2), H(3), V(2), RGB565(0, 74, 241));
    1104:	e0bfff17 	ldw	r2,-4(fp)
    1108:	11000117 	ldw	r4,4(r2)
    110c:	e0bffe17 	ldw	r2,-8(fp)
    1110:	100a90fa 	slli	r5,r2,3
    1114:	e0bffd17 	ldw	r2,-12(fp)
    1118:	100490fa 	slli	r2,r2,3
    111c:	11800084 	addi	r6,r2,2
    1120:	e0bffe17 	ldw	r2,-8(fp)
    1124:	100490fa 	slli	r2,r2,3
    1128:	11c000c4 	addi	r7,r2,3
    112c:	e0bffd17 	ldw	r2,-12(fp)
    1130:	100490fa 	slli	r2,r2,3
    1134:	10800084 	addi	r2,r2,2
    1138:	00c09784 	movi	r3,606
    113c:	d8c00115 	stw	r3,4(sp)
    1140:	d8800015 	stw	r2,0(sp)
    1144:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(5), V(4), H(5), V(7), RGB565(0, 74, 241));
    1148:	e0bfff17 	ldw	r2,-4(fp)
    114c:	11000117 	ldw	r4,4(r2)
    1150:	e0bffe17 	ldw	r2,-8(fp)
    1154:	100490fa 	slli	r2,r2,3
    1158:	11400144 	addi	r5,r2,5
    115c:	e0bffd17 	ldw	r2,-12(fp)
    1160:	100490fa 	slli	r2,r2,3
    1164:	11800104 	addi	r6,r2,4
    1168:	e0bffe17 	ldw	r2,-8(fp)
    116c:	100490fa 	slli	r2,r2,3
    1170:	11c00144 	addi	r7,r2,5
    1174:	e0bffd17 	ldw	r2,-12(fp)
    1178:	100490fa 	slli	r2,r2,3
    117c:	108001c4 	addi	r2,r2,7
    1180:	00c09784 	movi	r3,606
    1184:	d8c00115 	stw	r3,4(sp)
    1188:	d8800015 	stw	r2,0(sp)
    118c:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawPixel(H(4), V(3), RGB565(0, 74, 241));
    1190:	e0bfff17 	ldw	r2,-4(fp)
    1194:	10c00117 	ldw	r3,4(r2)
    1198:	e0bffe17 	ldw	r2,-8(fp)
    119c:	100490fa 	slli	r2,r2,3
    11a0:	11000104 	addi	r4,r2,4
    11a4:	e0bffd17 	ldw	r2,-12(fp)
    11a8:	100490fa 	slli	r2,r2,3
    11ac:	108000c4 	addi	r2,r2,3
    11b0:	01c09784 	movi	r7,606
    11b4:	100d883a 	mov	r6,r2
    11b8:	200b883a 	mov	r5,r4
    11bc:	1809883a 	mov	r4,r3
    11c0:	000283c0 	call	283c <_ZN14VideoInterface9drawPixelEiit>
							vi->drawLine(H(0), V(5), H(1), V(5), RGB565(0, 74, 241));
    11c4:	e0bfff17 	ldw	r2,-4(fp)
    11c8:	11000117 	ldw	r4,4(r2)
    11cc:	e0bffe17 	ldw	r2,-8(fp)
    11d0:	100a90fa 	slli	r5,r2,3
    11d4:	e0bffd17 	ldw	r2,-12(fp)
    11d8:	100490fa 	slli	r2,r2,3
    11dc:	11800144 	addi	r6,r2,5
    11e0:	e0bffe17 	ldw	r2,-8(fp)
    11e4:	100490fa 	slli	r2,r2,3
    11e8:	11c00044 	addi	r7,r2,1
    11ec:	e0bffd17 	ldw	r2,-12(fp)
    11f0:	100490fa 	slli	r2,r2,3
    11f4:	10800144 	addi	r2,r2,5
    11f8:	00c09784 	movi	r3,606
    11fc:	d8c00115 	stw	r3,4(sp)
    1200:	d8800015 	stw	r2,0(sp)
    1204:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(2), V(5), H(2), V(7), RGB565(0, 74, 241));
    1208:	e0bfff17 	ldw	r2,-4(fp)
    120c:	11000117 	ldw	r4,4(r2)
    1210:	e0bffe17 	ldw	r2,-8(fp)
    1214:	100490fa 	slli	r2,r2,3
    1218:	11400084 	addi	r5,r2,2
    121c:	e0bffd17 	ldw	r2,-12(fp)
    1220:	100490fa 	slli	r2,r2,3
    1224:	11800144 	addi	r6,r2,5
    1228:	e0bffe17 	ldw	r2,-8(fp)
    122c:	100490fa 	slli	r2,r2,3
    1230:	11c00084 	addi	r7,r2,2
    1234:	e0bffd17 	ldw	r2,-12(fp)
    1238:	100490fa 	slli	r2,r2,3
    123c:	108001c4 	addi	r2,r2,7
    1240:	00c09784 	movi	r3,606
    1244:	d8c00115 	stw	r3,4(sp)
    1248:	d8800015 	stw	r2,0(sp)
    124c:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							break;
    1250:	00032506 	br	1ee8 <_ZN4Game7drawMapEv+0x10d4>
						case c3:
							vi->drawLine(H(2), V(0), H(2), V(3), RGB565(0, 74, 241));
    1254:	e0bfff17 	ldw	r2,-4(fp)
    1258:	11000117 	ldw	r4,4(r2)
    125c:	e0bffe17 	ldw	r2,-8(fp)
    1260:	100490fa 	slli	r2,r2,3
    1264:	11400084 	addi	r5,r2,2
    1268:	e0bffd17 	ldw	r2,-12(fp)
    126c:	100c90fa 	slli	r6,r2,3
    1270:	e0bffe17 	ldw	r2,-8(fp)
    1274:	100490fa 	slli	r2,r2,3
    1278:	11c00084 	addi	r7,r2,2
    127c:	e0bffd17 	ldw	r2,-12(fp)
    1280:	100490fa 	slli	r2,r2,3
    1284:	108000c4 	addi	r2,r2,3
    1288:	00c09784 	movi	r3,606
    128c:	d8c00115 	stw	r3,4(sp)
    1290:	d8800015 	stw	r2,0(sp)
    1294:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(4), V(5), H(7), V(5), RGB565(0, 74, 241));
    1298:	e0bfff17 	ldw	r2,-4(fp)
    129c:	11000117 	ldw	r4,4(r2)
    12a0:	e0bffe17 	ldw	r2,-8(fp)
    12a4:	100490fa 	slli	r2,r2,3
    12a8:	11400104 	addi	r5,r2,4
    12ac:	e0bffd17 	ldw	r2,-12(fp)
    12b0:	100490fa 	slli	r2,r2,3
    12b4:	11800144 	addi	r6,r2,5
    12b8:	e0bffe17 	ldw	r2,-8(fp)
    12bc:	100490fa 	slli	r2,r2,3
    12c0:	11c001c4 	addi	r7,r2,7
    12c4:	e0bffd17 	ldw	r2,-12(fp)
    12c8:	100490fa 	slli	r2,r2,3
    12cc:	10800144 	addi	r2,r2,5
    12d0:	00c09784 	movi	r3,606
    12d4:	d8c00115 	stw	r3,4(sp)
    12d8:	d8800015 	stw	r2,0(sp)
    12dc:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawPixel(H(3), V(4), RGB565(0, 74, 241));
    12e0:	e0bfff17 	ldw	r2,-4(fp)
    12e4:	10c00117 	ldw	r3,4(r2)
    12e8:	e0bffe17 	ldw	r2,-8(fp)
    12ec:	100490fa 	slli	r2,r2,3
    12f0:	110000c4 	addi	r4,r2,3
    12f4:	e0bffd17 	ldw	r2,-12(fp)
    12f8:	100490fa 	slli	r2,r2,3
    12fc:	10800104 	addi	r2,r2,4
    1300:	01c09784 	movi	r7,606
    1304:	100d883a 	mov	r6,r2
    1308:	200b883a 	mov	r5,r4
    130c:	1809883a 	mov	r4,r3
    1310:	000283c0 	call	283c <_ZN14VideoInterface9drawPixelEiit>
							vi->drawLine(H(5), V(0), H(5), V(1), RGB565(0, 74, 241));
    1314:	e0bfff17 	ldw	r2,-4(fp)
    1318:	11000117 	ldw	r4,4(r2)
    131c:	e0bffe17 	ldw	r2,-8(fp)
    1320:	100490fa 	slli	r2,r2,3
    1324:	11400144 	addi	r5,r2,5
    1328:	e0bffd17 	ldw	r2,-12(fp)
    132c:	100c90fa 	slli	r6,r2,3
    1330:	e0bffe17 	ldw	r2,-8(fp)
    1334:	100490fa 	slli	r2,r2,3
    1338:	11c00144 	addi	r7,r2,5
    133c:	e0bffd17 	ldw	r2,-12(fp)
    1340:	100490fa 	slli	r2,r2,3
    1344:	10800044 	addi	r2,r2,1
    1348:	00c09784 	movi	r3,606
    134c:	d8c00115 	stw	r3,4(sp)
    1350:	d8800015 	stw	r2,0(sp)
    1354:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(6), V(2), H(7), V(2), RGB565(0, 74, 241));
    1358:	e0bfff17 	ldw	r2,-4(fp)
    135c:	11000117 	ldw	r4,4(r2)
    1360:	e0bffe17 	ldw	r2,-8(fp)
    1364:	100490fa 	slli	r2,r2,3
    1368:	11400184 	addi	r5,r2,6
    136c:	e0bffd17 	ldw	r2,-12(fp)
    1370:	100490fa 	slli	r2,r2,3
    1374:	11800084 	addi	r6,r2,2
    1378:	e0bffe17 	ldw	r2,-8(fp)
    137c:	100490fa 	slli	r2,r2,3
    1380:	11c001c4 	addi	r7,r2,7
    1384:	e0bffd17 	ldw	r2,-12(fp)
    1388:	100490fa 	slli	r2,r2,3
    138c:	10800084 	addi	r2,r2,2
    1390:	00c09784 	movi	r3,606
    1394:	d8c00115 	stw	r3,4(sp)
    1398:	d8800015 	stw	r2,0(sp)
    139c:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							break;
    13a0:	0002d106 	br	1ee8 <_ZN4Game7drawMapEv+0x10d4>
						case c4:
							vi->drawLine(H(5), V(0), H(5), V(3), RGB565(0, 74, 241));
    13a4:	e0bfff17 	ldw	r2,-4(fp)
    13a8:	11000117 	ldw	r4,4(r2)
    13ac:	e0bffe17 	ldw	r2,-8(fp)
    13b0:	100490fa 	slli	r2,r2,3
    13b4:	11400144 	addi	r5,r2,5
    13b8:	e0bffd17 	ldw	r2,-12(fp)
    13bc:	100c90fa 	slli	r6,r2,3
    13c0:	e0bffe17 	ldw	r2,-8(fp)
    13c4:	100490fa 	slli	r2,r2,3
    13c8:	11c00144 	addi	r7,r2,5
    13cc:	e0bffd17 	ldw	r2,-12(fp)
    13d0:	100490fa 	slli	r2,r2,3
    13d4:	108000c4 	addi	r2,r2,3
    13d8:	00c09784 	movi	r3,606
    13dc:	d8c00115 	stw	r3,4(sp)
    13e0:	d8800015 	stw	r2,0(sp)
    13e4:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(0), V(5), H(3), V(5), RGB565(0, 74, 241));
    13e8:	e0bfff17 	ldw	r2,-4(fp)
    13ec:	11000117 	ldw	r4,4(r2)
    13f0:	e0bffe17 	ldw	r2,-8(fp)
    13f4:	100a90fa 	slli	r5,r2,3
    13f8:	e0bffd17 	ldw	r2,-12(fp)
    13fc:	100490fa 	slli	r2,r2,3
    1400:	11800144 	addi	r6,r2,5
    1404:	e0bffe17 	ldw	r2,-8(fp)
    1408:	100490fa 	slli	r2,r2,3
    140c:	11c000c4 	addi	r7,r2,3
    1410:	e0bffd17 	ldw	r2,-12(fp)
    1414:	100490fa 	slli	r2,r2,3
    1418:	10800144 	addi	r2,r2,5
    141c:	00c09784 	movi	r3,606
    1420:	d8c00115 	stw	r3,4(sp)
    1424:	d8800015 	stw	r2,0(sp)
    1428:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawPixel(H(4), V(4), RGB565(0, 74, 241));
    142c:	e0bfff17 	ldw	r2,-4(fp)
    1430:	10c00117 	ldw	r3,4(r2)
    1434:	e0bffe17 	ldw	r2,-8(fp)
    1438:	100490fa 	slli	r2,r2,3
    143c:	11000104 	addi	r4,r2,4
    1440:	e0bffd17 	ldw	r2,-12(fp)
    1444:	100490fa 	slli	r2,r2,3
    1448:	10800104 	addi	r2,r2,4
    144c:	01c09784 	movi	r7,606
    1450:	100d883a 	mov	r6,r2
    1454:	200b883a 	mov	r5,r4
    1458:	1809883a 	mov	r4,r3
    145c:	000283c0 	call	283c <_ZN14VideoInterface9drawPixelEiit>
							vi->drawLine(H(2), V(0), H(2), V(1), RGB565(0, 74, 241));
    1460:	e0bfff17 	ldw	r2,-4(fp)
    1464:	11000117 	ldw	r4,4(r2)
    1468:	e0bffe17 	ldw	r2,-8(fp)
    146c:	100490fa 	slli	r2,r2,3
    1470:	11400084 	addi	r5,r2,2
    1474:	e0bffd17 	ldw	r2,-12(fp)
    1478:	100c90fa 	slli	r6,r2,3
    147c:	e0bffe17 	ldw	r2,-8(fp)
    1480:	100490fa 	slli	r2,r2,3
    1484:	11c00084 	addi	r7,r2,2
    1488:	e0bffd17 	ldw	r2,-12(fp)
    148c:	100490fa 	slli	r2,r2,3
    1490:	10800044 	addi	r2,r2,1
    1494:	00c09784 	movi	r3,606
    1498:	d8c00115 	stw	r3,4(sp)
    149c:	d8800015 	stw	r2,0(sp)
    14a0:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(0), V(2), H(1), V(2), RGB565(0, 74, 241));
    14a4:	e0bfff17 	ldw	r2,-4(fp)
    14a8:	11000117 	ldw	r4,4(r2)
    14ac:	e0bffe17 	ldw	r2,-8(fp)
    14b0:	100a90fa 	slli	r5,r2,3
    14b4:	e0bffd17 	ldw	r2,-12(fp)
    14b8:	100490fa 	slli	r2,r2,3
    14bc:	11800084 	addi	r6,r2,2
    14c0:	e0bffe17 	ldw	r2,-8(fp)
    14c4:	100490fa 	slli	r2,r2,3
    14c8:	11c00044 	addi	r7,r2,1
    14cc:	e0bffd17 	ldw	r2,-12(fp)
    14d0:	100490fa 	slli	r2,r2,3
    14d4:	10800084 	addi	r2,r2,2
    14d8:	00c09784 	movi	r3,606
    14dc:	d8c00115 	stw	r3,4(sp)
    14e0:	d8800015 	stw	r2,0(sp)
    14e4:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							break;
    14e8:	00027f06 	br	1ee8 <_ZN4Game7drawMapEv+0x10d4>
						case ph:
							vi->drawLine(H(0), V(2), H(7), V(2), RGB565(0, 74, 241));
    14ec:	e0bfff17 	ldw	r2,-4(fp)
    14f0:	11000117 	ldw	r4,4(r2)
    14f4:	e0bffe17 	ldw	r2,-8(fp)
    14f8:	100a90fa 	slli	r5,r2,3
    14fc:	e0bffd17 	ldw	r2,-12(fp)
    1500:	100490fa 	slli	r2,r2,3
    1504:	11800084 	addi	r6,r2,2
    1508:	e0bffe17 	ldw	r2,-8(fp)
    150c:	100490fa 	slli	r2,r2,3
    1510:	11c001c4 	addi	r7,r2,7
    1514:	e0bffd17 	ldw	r2,-12(fp)
    1518:	100490fa 	slli	r2,r2,3
    151c:	10800084 	addi	r2,r2,2
    1520:	00c09784 	movi	r3,606
    1524:	d8c00115 	stw	r3,4(sp)
    1528:	d8800015 	stw	r2,0(sp)
    152c:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(0), V(5), H(7), V(5), RGB565(0, 74, 241));
    1530:	e0bfff17 	ldw	r2,-4(fp)
    1534:	11000117 	ldw	r4,4(r2)
    1538:	e0bffe17 	ldw	r2,-8(fp)
    153c:	100a90fa 	slli	r5,r2,3
    1540:	e0bffd17 	ldw	r2,-12(fp)
    1544:	100490fa 	slli	r2,r2,3
    1548:	11800144 	addi	r6,r2,5
    154c:	e0bffe17 	ldw	r2,-8(fp)
    1550:	100490fa 	slli	r2,r2,3
    1554:	11c001c4 	addi	r7,r2,7
    1558:	e0bffd17 	ldw	r2,-12(fp)
    155c:	100490fa 	slli	r2,r2,3
    1560:	10800144 	addi	r2,r2,5
    1564:	00c09784 	movi	r3,606
    1568:	d8c00115 	stw	r3,4(sp)
    156c:	d8800015 	stw	r2,0(sp)
    1570:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							break;
    1574:	00025c06 	br	1ee8 <_ZN4Game7drawMapEv+0x10d4>
						case pv:
							vi->drawLine(H(2), V(0), H(2), V(7), RGB565(0, 74, 241));
    1578:	e0bfff17 	ldw	r2,-4(fp)
    157c:	11000117 	ldw	r4,4(r2)
    1580:	e0bffe17 	ldw	r2,-8(fp)
    1584:	100490fa 	slli	r2,r2,3
    1588:	11400084 	addi	r5,r2,2
    158c:	e0bffd17 	ldw	r2,-12(fp)
    1590:	100c90fa 	slli	r6,r2,3
    1594:	e0bffe17 	ldw	r2,-8(fp)
    1598:	100490fa 	slli	r2,r2,3
    159c:	11c00084 	addi	r7,r2,2
    15a0:	e0bffd17 	ldw	r2,-12(fp)
    15a4:	100490fa 	slli	r2,r2,3
    15a8:	108001c4 	addi	r2,r2,7
    15ac:	00c09784 	movi	r3,606
    15b0:	d8c00115 	stw	r3,4(sp)
    15b4:	d8800015 	stw	r2,0(sp)
    15b8:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(5), V(0), H(5), V(7), RGB565(0, 74, 241));
    15bc:	e0bfff17 	ldw	r2,-4(fp)
    15c0:	11000117 	ldw	r4,4(r2)
    15c4:	e0bffe17 	ldw	r2,-8(fp)
    15c8:	100490fa 	slli	r2,r2,3
    15cc:	11400144 	addi	r5,r2,5
    15d0:	e0bffd17 	ldw	r2,-12(fp)
    15d4:	100c90fa 	slli	r6,r2,3
    15d8:	e0bffe17 	ldw	r2,-8(fp)
    15dc:	100490fa 	slli	r2,r2,3
    15e0:	11c00144 	addi	r7,r2,5
    15e4:	e0bffd17 	ldw	r2,-12(fp)
    15e8:	100490fa 	slli	r2,r2,3
    15ec:	108001c4 	addi	r2,r2,7
    15f0:	00c09784 	movi	r3,606
    15f4:	d8c00115 	stw	r3,4(sp)
    15f8:	d8800015 	stw	r2,0(sp)
    15fc:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							break;
    1600:	00023906 	br	1ee8 <_ZN4Game7drawMapEv+0x10d4>
						case tu:
							vi->drawLine(H(0), V(5), H(7), V(5), RGB565(0, 74, 241));
    1604:	e0bfff17 	ldw	r2,-4(fp)
    1608:	11000117 	ldw	r4,4(r2)
    160c:	e0bffe17 	ldw	r2,-8(fp)
    1610:	100a90fa 	slli	r5,r2,3
    1614:	e0bffd17 	ldw	r2,-12(fp)
    1618:	100490fa 	slli	r2,r2,3
    161c:	11800144 	addi	r6,r2,5
    1620:	e0bffe17 	ldw	r2,-8(fp)
    1624:	100490fa 	slli	r2,r2,3
    1628:	11c001c4 	addi	r7,r2,7
    162c:	e0bffd17 	ldw	r2,-12(fp)
    1630:	100490fa 	slli	r2,r2,3
    1634:	10800144 	addi	r2,r2,5
    1638:	00c09784 	movi	r3,606
    163c:	d8c00115 	stw	r3,4(sp)
    1640:	d8800015 	stw	r2,0(sp)
    1644:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(0), V(2), H(1), V(2), RGB565(0, 74, 241));
    1648:	e0bfff17 	ldw	r2,-4(fp)
    164c:	11000117 	ldw	r4,4(r2)
    1650:	e0bffe17 	ldw	r2,-8(fp)
    1654:	100a90fa 	slli	r5,r2,3
    1658:	e0bffd17 	ldw	r2,-12(fp)
    165c:	100490fa 	slli	r2,r2,3
    1660:	11800084 	addi	r6,r2,2
    1664:	e0bffe17 	ldw	r2,-8(fp)
    1668:	100490fa 	slli	r2,r2,3
    166c:	11c00044 	addi	r7,r2,1
    1670:	e0bffd17 	ldw	r2,-12(fp)
    1674:	100490fa 	slli	r2,r2,3
    1678:	10800084 	addi	r2,r2,2
    167c:	00c09784 	movi	r3,606
    1680:	d8c00115 	stw	r3,4(sp)
    1684:	d8800015 	stw	r2,0(sp)
    1688:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(6), V(2), H(7), V(2), RGB565(0, 74, 241));
    168c:	e0bfff17 	ldw	r2,-4(fp)
    1690:	11000117 	ldw	r4,4(r2)
    1694:	e0bffe17 	ldw	r2,-8(fp)
    1698:	100490fa 	slli	r2,r2,3
    169c:	11400184 	addi	r5,r2,6
    16a0:	e0bffd17 	ldw	r2,-12(fp)
    16a4:	100490fa 	slli	r2,r2,3
    16a8:	11800084 	addi	r6,r2,2
    16ac:	e0bffe17 	ldw	r2,-8(fp)
    16b0:	100490fa 	slli	r2,r2,3
    16b4:	11c001c4 	addi	r7,r2,7
    16b8:	e0bffd17 	ldw	r2,-12(fp)
    16bc:	100490fa 	slli	r2,r2,3
    16c0:	10800084 	addi	r2,r2,2
    16c4:	00c09784 	movi	r3,606
    16c8:	d8c00115 	stw	r3,4(sp)
    16cc:	d8800015 	stw	r2,0(sp)
    16d0:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(2), V(0), H(2), V(1), RGB565(0, 74, 241));
    16d4:	e0bfff17 	ldw	r2,-4(fp)
    16d8:	11000117 	ldw	r4,4(r2)
    16dc:	e0bffe17 	ldw	r2,-8(fp)
    16e0:	100490fa 	slli	r2,r2,3
    16e4:	11400084 	addi	r5,r2,2
    16e8:	e0bffd17 	ldw	r2,-12(fp)
    16ec:	100c90fa 	slli	r6,r2,3
    16f0:	e0bffe17 	ldw	r2,-8(fp)
    16f4:	100490fa 	slli	r2,r2,3
    16f8:	11c00084 	addi	r7,r2,2
    16fc:	e0bffd17 	ldw	r2,-12(fp)
    1700:	100490fa 	slli	r2,r2,3
    1704:	10800044 	addi	r2,r2,1
    1708:	00c09784 	movi	r3,606
    170c:	d8c00115 	stw	r3,4(sp)
    1710:	d8800015 	stw	r2,0(sp)
    1714:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(5), V(0), H(5), V(1), RGB565(0, 74, 241));
    1718:	e0bfff17 	ldw	r2,-4(fp)
    171c:	11000117 	ldw	r4,4(r2)
    1720:	e0bffe17 	ldw	r2,-8(fp)
    1724:	100490fa 	slli	r2,r2,3
    1728:	11400144 	addi	r5,r2,5
    172c:	e0bffd17 	ldw	r2,-12(fp)
    1730:	100c90fa 	slli	r6,r2,3
    1734:	e0bffe17 	ldw	r2,-8(fp)
    1738:	100490fa 	slli	r2,r2,3
    173c:	11c00144 	addi	r7,r2,5
    1740:	e0bffd17 	ldw	r2,-12(fp)
    1744:	100490fa 	slli	r2,r2,3
    1748:	10800044 	addi	r2,r2,1
    174c:	00c09784 	movi	r3,606
    1750:	d8c00115 	stw	r3,4(sp)
    1754:	d8800015 	stw	r2,0(sp)
    1758:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							break;
    175c:	0001e206 	br	1ee8 <_ZN4Game7drawMapEv+0x10d4>
						case td:
							vi->drawLine(H(0), V(2), H(7), V(2), RGB565(0, 74, 241));
    1760:	e0bfff17 	ldw	r2,-4(fp)
    1764:	11000117 	ldw	r4,4(r2)
    1768:	e0bffe17 	ldw	r2,-8(fp)
    176c:	100a90fa 	slli	r5,r2,3
    1770:	e0bffd17 	ldw	r2,-12(fp)
    1774:	100490fa 	slli	r2,r2,3
    1778:	11800084 	addi	r6,r2,2
    177c:	e0bffe17 	ldw	r2,-8(fp)
    1780:	100490fa 	slli	r2,r2,3
    1784:	11c001c4 	addi	r7,r2,7
    1788:	e0bffd17 	ldw	r2,-12(fp)
    178c:	100490fa 	slli	r2,r2,3
    1790:	10800084 	addi	r2,r2,2
    1794:	00c09784 	movi	r3,606
    1798:	d8c00115 	stw	r3,4(sp)
    179c:	d8800015 	stw	r2,0(sp)
    17a0:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(0), V(5), H(1), V(5), RGB565(0, 74, 241));
    17a4:	e0bfff17 	ldw	r2,-4(fp)
    17a8:	11000117 	ldw	r4,4(r2)
    17ac:	e0bffe17 	ldw	r2,-8(fp)
    17b0:	100a90fa 	slli	r5,r2,3
    17b4:	e0bffd17 	ldw	r2,-12(fp)
    17b8:	100490fa 	slli	r2,r2,3
    17bc:	11800144 	addi	r6,r2,5
    17c0:	e0bffe17 	ldw	r2,-8(fp)
    17c4:	100490fa 	slli	r2,r2,3
    17c8:	11c00044 	addi	r7,r2,1
    17cc:	e0bffd17 	ldw	r2,-12(fp)
    17d0:	100490fa 	slli	r2,r2,3
    17d4:	10800144 	addi	r2,r2,5
    17d8:	00c09784 	movi	r3,606
    17dc:	d8c00115 	stw	r3,4(sp)
    17e0:	d8800015 	stw	r2,0(sp)
    17e4:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(6), V(5), H(7), V(5), RGB565(0, 74, 241));
    17e8:	e0bfff17 	ldw	r2,-4(fp)
    17ec:	11000117 	ldw	r4,4(r2)
    17f0:	e0bffe17 	ldw	r2,-8(fp)
    17f4:	100490fa 	slli	r2,r2,3
    17f8:	11400184 	addi	r5,r2,6
    17fc:	e0bffd17 	ldw	r2,-12(fp)
    1800:	100490fa 	slli	r2,r2,3
    1804:	11800144 	addi	r6,r2,5
    1808:	e0bffe17 	ldw	r2,-8(fp)
    180c:	100490fa 	slli	r2,r2,3
    1810:	11c001c4 	addi	r7,r2,7
    1814:	e0bffd17 	ldw	r2,-12(fp)
    1818:	100490fa 	slli	r2,r2,3
    181c:	10800144 	addi	r2,r2,5
    1820:	00c09784 	movi	r3,606
    1824:	d8c00115 	stw	r3,4(sp)
    1828:	d8800015 	stw	r2,0(sp)
    182c:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(2), V(6), H(2), V(7), RGB565(0, 74, 241));
    1830:	e0bfff17 	ldw	r2,-4(fp)
    1834:	11000117 	ldw	r4,4(r2)
    1838:	e0bffe17 	ldw	r2,-8(fp)
    183c:	100490fa 	slli	r2,r2,3
    1840:	11400084 	addi	r5,r2,2
    1844:	e0bffd17 	ldw	r2,-12(fp)
    1848:	100490fa 	slli	r2,r2,3
    184c:	11800184 	addi	r6,r2,6
    1850:	e0bffe17 	ldw	r2,-8(fp)
    1854:	100490fa 	slli	r2,r2,3
    1858:	11c00084 	addi	r7,r2,2
    185c:	e0bffd17 	ldw	r2,-12(fp)
    1860:	100490fa 	slli	r2,r2,3
    1864:	108001c4 	addi	r2,r2,7
    1868:	00c09784 	movi	r3,606
    186c:	d8c00115 	stw	r3,4(sp)
    1870:	d8800015 	stw	r2,0(sp)
    1874:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(5), V(6), H(5), V(7), RGB565(0, 74, 241));
    1878:	e0bfff17 	ldw	r2,-4(fp)
    187c:	11000117 	ldw	r4,4(r2)
    1880:	e0bffe17 	ldw	r2,-8(fp)
    1884:	100490fa 	slli	r2,r2,3
    1888:	11400144 	addi	r5,r2,5
    188c:	e0bffd17 	ldw	r2,-12(fp)
    1890:	100490fa 	slli	r2,r2,3
    1894:	11800184 	addi	r6,r2,6
    1898:	e0bffe17 	ldw	r2,-8(fp)
    189c:	100490fa 	slli	r2,r2,3
    18a0:	11c00144 	addi	r7,r2,5
    18a4:	e0bffd17 	ldw	r2,-12(fp)
    18a8:	100490fa 	slli	r2,r2,3
    18ac:	108001c4 	addi	r2,r2,7
    18b0:	00c09784 	movi	r3,606
    18b4:	d8c00115 	stw	r3,4(sp)
    18b8:	d8800015 	stw	r2,0(sp)
    18bc:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							break;
    18c0:	00018906 	br	1ee8 <_ZN4Game7drawMapEv+0x10d4>
						case tl:
							vi->drawLine(H(5), V(0), H(5), V(7), RGB565(0, 74, 241));
    18c4:	e0bfff17 	ldw	r2,-4(fp)
    18c8:	11000117 	ldw	r4,4(r2)
    18cc:	e0bffe17 	ldw	r2,-8(fp)
    18d0:	100490fa 	slli	r2,r2,3
    18d4:	11400144 	addi	r5,r2,5
    18d8:	e0bffd17 	ldw	r2,-12(fp)
    18dc:	100c90fa 	slli	r6,r2,3
    18e0:	e0bffe17 	ldw	r2,-8(fp)
    18e4:	100490fa 	slli	r2,r2,3
    18e8:	11c00144 	addi	r7,r2,5
    18ec:	e0bffd17 	ldw	r2,-12(fp)
    18f0:	100490fa 	slli	r2,r2,3
    18f4:	108001c4 	addi	r2,r2,7
    18f8:	00c09784 	movi	r3,606
    18fc:	d8c00115 	stw	r3,4(sp)
    1900:	d8800015 	stw	r2,0(sp)
    1904:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(2), V(0), H(2), V(1), RGB565(0, 74, 241));
    1908:	e0bfff17 	ldw	r2,-4(fp)
    190c:	11000117 	ldw	r4,4(r2)
    1910:	e0bffe17 	ldw	r2,-8(fp)
    1914:	100490fa 	slli	r2,r2,3
    1918:	11400084 	addi	r5,r2,2
    191c:	e0bffd17 	ldw	r2,-12(fp)
    1920:	100c90fa 	slli	r6,r2,3
    1924:	e0bffe17 	ldw	r2,-8(fp)
    1928:	100490fa 	slli	r2,r2,3
    192c:	11c00084 	addi	r7,r2,2
    1930:	e0bffd17 	ldw	r2,-12(fp)
    1934:	100490fa 	slli	r2,r2,3
    1938:	10800044 	addi	r2,r2,1
    193c:	00c09784 	movi	r3,606
    1940:	d8c00115 	stw	r3,4(sp)
    1944:	d8800015 	stw	r2,0(sp)
    1948:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(0), V(2), H(1), V(2), RGB565(0, 74, 241));
    194c:	e0bfff17 	ldw	r2,-4(fp)
    1950:	11000117 	ldw	r4,4(r2)
    1954:	e0bffe17 	ldw	r2,-8(fp)
    1958:	100a90fa 	slli	r5,r2,3
    195c:	e0bffd17 	ldw	r2,-12(fp)
    1960:	100490fa 	slli	r2,r2,3
    1964:	11800084 	addi	r6,r2,2
    1968:	e0bffe17 	ldw	r2,-8(fp)
    196c:	100490fa 	slli	r2,r2,3
    1970:	11c00044 	addi	r7,r2,1
    1974:	e0bffd17 	ldw	r2,-12(fp)
    1978:	100490fa 	slli	r2,r2,3
    197c:	10800084 	addi	r2,r2,2
    1980:	00c09784 	movi	r3,606
    1984:	d8c00115 	stw	r3,4(sp)
    1988:	d8800015 	stw	r2,0(sp)
    198c:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(0), V(5), H(1), V(5), RGB565(0, 74, 241));
    1990:	e0bfff17 	ldw	r2,-4(fp)
    1994:	11000117 	ldw	r4,4(r2)
    1998:	e0bffe17 	ldw	r2,-8(fp)
    199c:	100a90fa 	slli	r5,r2,3
    19a0:	e0bffd17 	ldw	r2,-12(fp)
    19a4:	100490fa 	slli	r2,r2,3
    19a8:	11800144 	addi	r6,r2,5
    19ac:	e0bffe17 	ldw	r2,-8(fp)
    19b0:	100490fa 	slli	r2,r2,3
    19b4:	11c00044 	addi	r7,r2,1
    19b8:	e0bffd17 	ldw	r2,-12(fp)
    19bc:	100490fa 	slli	r2,r2,3
    19c0:	10800144 	addi	r2,r2,5
    19c4:	00c09784 	movi	r3,606
    19c8:	d8c00115 	stw	r3,4(sp)
    19cc:	d8800015 	stw	r2,0(sp)
    19d0:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(2), V(6), H(2), V(7), RGB565(0, 74, 241));
    19d4:	e0bfff17 	ldw	r2,-4(fp)
    19d8:	11000117 	ldw	r4,4(r2)
    19dc:	e0bffe17 	ldw	r2,-8(fp)
    19e0:	100490fa 	slli	r2,r2,3
    19e4:	11400084 	addi	r5,r2,2
    19e8:	e0bffd17 	ldw	r2,-12(fp)
    19ec:	100490fa 	slli	r2,r2,3
    19f0:	11800184 	addi	r6,r2,6
    19f4:	e0bffe17 	ldw	r2,-8(fp)
    19f8:	100490fa 	slli	r2,r2,3
    19fc:	11c00084 	addi	r7,r2,2
    1a00:	e0bffd17 	ldw	r2,-12(fp)
    1a04:	100490fa 	slli	r2,r2,3
    1a08:	108001c4 	addi	r2,r2,7
    1a0c:	00c09784 	movi	r3,606
    1a10:	d8c00115 	stw	r3,4(sp)
    1a14:	d8800015 	stw	r2,0(sp)
    1a18:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							break;
    1a1c:	00013206 	br	1ee8 <_ZN4Game7drawMapEv+0x10d4>
						case tr:
							vi->drawLine(H(2), V(0), H(2), V(7), RGB565(0, 74, 241));
    1a20:	e0bfff17 	ldw	r2,-4(fp)
    1a24:	11000117 	ldw	r4,4(r2)
    1a28:	e0bffe17 	ldw	r2,-8(fp)
    1a2c:	100490fa 	slli	r2,r2,3
    1a30:	11400084 	addi	r5,r2,2
    1a34:	e0bffd17 	ldw	r2,-12(fp)
    1a38:	100c90fa 	slli	r6,r2,3
    1a3c:	e0bffe17 	ldw	r2,-8(fp)
    1a40:	100490fa 	slli	r2,r2,3
    1a44:	11c00084 	addi	r7,r2,2
    1a48:	e0bffd17 	ldw	r2,-12(fp)
    1a4c:	100490fa 	slli	r2,r2,3
    1a50:	108001c4 	addi	r2,r2,7
    1a54:	00c09784 	movi	r3,606
    1a58:	d8c00115 	stw	r3,4(sp)
    1a5c:	d8800015 	stw	r2,0(sp)
    1a60:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(5), V(0), H(5), V(1), RGB565(0, 74, 241));
    1a64:	e0bfff17 	ldw	r2,-4(fp)
    1a68:	11000117 	ldw	r4,4(r2)
    1a6c:	e0bffe17 	ldw	r2,-8(fp)
    1a70:	100490fa 	slli	r2,r2,3
    1a74:	11400144 	addi	r5,r2,5
    1a78:	e0bffd17 	ldw	r2,-12(fp)
    1a7c:	100c90fa 	slli	r6,r2,3
    1a80:	e0bffe17 	ldw	r2,-8(fp)
    1a84:	100490fa 	slli	r2,r2,3
    1a88:	11c00144 	addi	r7,r2,5
    1a8c:	e0bffd17 	ldw	r2,-12(fp)
    1a90:	100490fa 	slli	r2,r2,3
    1a94:	10800044 	addi	r2,r2,1
    1a98:	00c09784 	movi	r3,606
    1a9c:	d8c00115 	stw	r3,4(sp)
    1aa0:	d8800015 	stw	r2,0(sp)
    1aa4:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(6), V(2), H(7), V(2), RGB565(0, 74, 241));
    1aa8:	e0bfff17 	ldw	r2,-4(fp)
    1aac:	11000117 	ldw	r4,4(r2)
    1ab0:	e0bffe17 	ldw	r2,-8(fp)
    1ab4:	100490fa 	slli	r2,r2,3
    1ab8:	11400184 	addi	r5,r2,6
    1abc:	e0bffd17 	ldw	r2,-12(fp)
    1ac0:	100490fa 	slli	r2,r2,3
    1ac4:	11800084 	addi	r6,r2,2
    1ac8:	e0bffe17 	ldw	r2,-8(fp)
    1acc:	100490fa 	slli	r2,r2,3
    1ad0:	11c001c4 	addi	r7,r2,7
    1ad4:	e0bffd17 	ldw	r2,-12(fp)
    1ad8:	100490fa 	slli	r2,r2,3
    1adc:	10800084 	addi	r2,r2,2
    1ae0:	00c09784 	movi	r3,606
    1ae4:	d8c00115 	stw	r3,4(sp)
    1ae8:	d8800015 	stw	r2,0(sp)
    1aec:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(6), V(5), H(7), V(5), RGB565(0, 74, 241));
    1af0:	e0bfff17 	ldw	r2,-4(fp)
    1af4:	11000117 	ldw	r4,4(r2)
    1af8:	e0bffe17 	ldw	r2,-8(fp)
    1afc:	100490fa 	slli	r2,r2,3
    1b00:	11400184 	addi	r5,r2,6
    1b04:	e0bffd17 	ldw	r2,-12(fp)
    1b08:	100490fa 	slli	r2,r2,3
    1b0c:	11800144 	addi	r6,r2,5
    1b10:	e0bffe17 	ldw	r2,-8(fp)
    1b14:	100490fa 	slli	r2,r2,3
    1b18:	11c001c4 	addi	r7,r2,7
    1b1c:	e0bffd17 	ldw	r2,-12(fp)
    1b20:	100490fa 	slli	r2,r2,3
    1b24:	10800144 	addi	r2,r2,5
    1b28:	00c09784 	movi	r3,606
    1b2c:	d8c00115 	stw	r3,4(sp)
    1b30:	d8800015 	stw	r2,0(sp)
    1b34:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(5), V(6), H(5), V(7), RGB565(0, 74, 241));
    1b38:	e0bfff17 	ldw	r2,-4(fp)
    1b3c:	11000117 	ldw	r4,4(r2)
    1b40:	e0bffe17 	ldw	r2,-8(fp)
    1b44:	100490fa 	slli	r2,r2,3
    1b48:	11400144 	addi	r5,r2,5
    1b4c:	e0bffd17 	ldw	r2,-12(fp)
    1b50:	100490fa 	slli	r2,r2,3
    1b54:	11800184 	addi	r6,r2,6
    1b58:	e0bffe17 	ldw	r2,-8(fp)
    1b5c:	100490fa 	slli	r2,r2,3
    1b60:	11c00144 	addi	r7,r2,5
    1b64:	e0bffd17 	ldw	r2,-12(fp)
    1b68:	100490fa 	slli	r2,r2,3
    1b6c:	108001c4 	addi	r2,r2,7
    1b70:	00c09784 	movi	r3,606
    1b74:	d8c00115 	stw	r3,4(sp)
    1b78:	d8800015 	stw	r2,0(sp)
    1b7c:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							break;
    1b80:	0000d906 	br	1ee8 <_ZN4Game7drawMapEv+0x10d4>
						case cu:
							vi->drawLine(H(2), V(0), H(2), V(3), RGB565(0, 74, 241));
    1b84:	e0bfff17 	ldw	r2,-4(fp)
    1b88:	11000117 	ldw	r4,4(r2)
    1b8c:	e0bffe17 	ldw	r2,-8(fp)
    1b90:	100490fa 	slli	r2,r2,3
    1b94:	11400084 	addi	r5,r2,2
    1b98:	e0bffd17 	ldw	r2,-12(fp)
    1b9c:	100c90fa 	slli	r6,r2,3
    1ba0:	e0bffe17 	ldw	r2,-8(fp)
    1ba4:	100490fa 	slli	r2,r2,3
    1ba8:	11c00084 	addi	r7,r2,2
    1bac:	e0bffd17 	ldw	r2,-12(fp)
    1bb0:	100490fa 	slli	r2,r2,3
    1bb4:	108000c4 	addi	r2,r2,3
    1bb8:	00c09784 	movi	r3,606
    1bbc:	d8c00115 	stw	r3,4(sp)
    1bc0:	d8800015 	stw	r2,0(sp)
    1bc4:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(5), V(0), H(5), V(3), RGB565(0, 74, 241));
    1bc8:	e0bfff17 	ldw	r2,-4(fp)
    1bcc:	11000117 	ldw	r4,4(r2)
    1bd0:	e0bffe17 	ldw	r2,-8(fp)
    1bd4:	100490fa 	slli	r2,r2,3
    1bd8:	11400144 	addi	r5,r2,5
    1bdc:	e0bffd17 	ldw	r2,-12(fp)
    1be0:	100c90fa 	slli	r6,r2,3
    1be4:	e0bffe17 	ldw	r2,-8(fp)
    1be8:	100490fa 	slli	r2,r2,3
    1bec:	11c00144 	addi	r7,r2,5
    1bf0:	e0bffd17 	ldw	r2,-12(fp)
    1bf4:	100490fa 	slli	r2,r2,3
    1bf8:	108000c4 	addi	r2,r2,3
    1bfc:	00c09784 	movi	r3,606
    1c00:	d8c00115 	stw	r3,4(sp)
    1c04:	d8800015 	stw	r2,0(sp)
    1c08:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(3), V(4), H(4), V(4), RGB565(0, 74, 241));
    1c0c:	e0bfff17 	ldw	r2,-4(fp)
    1c10:	11000117 	ldw	r4,4(r2)
    1c14:	e0bffe17 	ldw	r2,-8(fp)
    1c18:	100490fa 	slli	r2,r2,3
    1c1c:	114000c4 	addi	r5,r2,3
    1c20:	e0bffd17 	ldw	r2,-12(fp)
    1c24:	100490fa 	slli	r2,r2,3
    1c28:	11800104 	addi	r6,r2,4
    1c2c:	e0bffe17 	ldw	r2,-8(fp)
    1c30:	100490fa 	slli	r2,r2,3
    1c34:	11c00104 	addi	r7,r2,4
    1c38:	e0bffd17 	ldw	r2,-12(fp)
    1c3c:	100490fa 	slli	r2,r2,3
    1c40:	10800104 	addi	r2,r2,4
    1c44:	00c09784 	movi	r3,606
    1c48:	d8c00115 	stw	r3,4(sp)
    1c4c:	d8800015 	stw	r2,0(sp)
    1c50:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							break;
    1c54:	0000a406 	br	1ee8 <_ZN4Game7drawMapEv+0x10d4>
						case cd:
							vi->drawLine(H(2), V(4), H(2), V(7), RGB565(0, 74, 241));
    1c58:	e0bfff17 	ldw	r2,-4(fp)
    1c5c:	11000117 	ldw	r4,4(r2)
    1c60:	e0bffe17 	ldw	r2,-8(fp)
    1c64:	100490fa 	slli	r2,r2,3
    1c68:	11400084 	addi	r5,r2,2
    1c6c:	e0bffd17 	ldw	r2,-12(fp)
    1c70:	100490fa 	slli	r2,r2,3
    1c74:	11800104 	addi	r6,r2,4
    1c78:	e0bffe17 	ldw	r2,-8(fp)
    1c7c:	100490fa 	slli	r2,r2,3
    1c80:	11c00084 	addi	r7,r2,2
    1c84:	e0bffd17 	ldw	r2,-12(fp)
    1c88:	100490fa 	slli	r2,r2,3
    1c8c:	108001c4 	addi	r2,r2,7
    1c90:	00c09784 	movi	r3,606
    1c94:	d8c00115 	stw	r3,4(sp)
    1c98:	d8800015 	stw	r2,0(sp)
    1c9c:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(5), V(4), H(5), V(7), RGB565(0, 74, 241));
    1ca0:	e0bfff17 	ldw	r2,-4(fp)
    1ca4:	11000117 	ldw	r4,4(r2)
    1ca8:	e0bffe17 	ldw	r2,-8(fp)
    1cac:	100490fa 	slli	r2,r2,3
    1cb0:	11400144 	addi	r5,r2,5
    1cb4:	e0bffd17 	ldw	r2,-12(fp)
    1cb8:	100490fa 	slli	r2,r2,3
    1cbc:	11800104 	addi	r6,r2,4
    1cc0:	e0bffe17 	ldw	r2,-8(fp)
    1cc4:	100490fa 	slli	r2,r2,3
    1cc8:	11c00144 	addi	r7,r2,5
    1ccc:	e0bffd17 	ldw	r2,-12(fp)
    1cd0:	100490fa 	slli	r2,r2,3
    1cd4:	108001c4 	addi	r2,r2,7
    1cd8:	00c09784 	movi	r3,606
    1cdc:	d8c00115 	stw	r3,4(sp)
    1ce0:	d8800015 	stw	r2,0(sp)
    1ce4:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(3), V(3), H(4), V(3), RGB565(0, 74, 241));
    1ce8:	e0bfff17 	ldw	r2,-4(fp)
    1cec:	11000117 	ldw	r4,4(r2)
    1cf0:	e0bffe17 	ldw	r2,-8(fp)
    1cf4:	100490fa 	slli	r2,r2,3
    1cf8:	114000c4 	addi	r5,r2,3
    1cfc:	e0bffd17 	ldw	r2,-12(fp)
    1d00:	100490fa 	slli	r2,r2,3
    1d04:	118000c4 	addi	r6,r2,3
    1d08:	e0bffe17 	ldw	r2,-8(fp)
    1d0c:	100490fa 	slli	r2,r2,3
    1d10:	11c00104 	addi	r7,r2,4
    1d14:	e0bffd17 	ldw	r2,-12(fp)
    1d18:	100490fa 	slli	r2,r2,3
    1d1c:	108000c4 	addi	r2,r2,3
    1d20:	00c09784 	movi	r3,606
    1d24:	d8c00115 	stw	r3,4(sp)
    1d28:	d8800015 	stw	r2,0(sp)
    1d2c:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							break;
    1d30:	00006d06 	br	1ee8 <_ZN4Game7drawMapEv+0x10d4>
						case cl:
							vi->drawLine(H(0), V(2), H(3), V(2), RGB565(0, 74, 241));
    1d34:	e0bfff17 	ldw	r2,-4(fp)
    1d38:	11000117 	ldw	r4,4(r2)
    1d3c:	e0bffe17 	ldw	r2,-8(fp)
    1d40:	100a90fa 	slli	r5,r2,3
    1d44:	e0bffd17 	ldw	r2,-12(fp)
    1d48:	100490fa 	slli	r2,r2,3
    1d4c:	11800084 	addi	r6,r2,2
    1d50:	e0bffe17 	ldw	r2,-8(fp)
    1d54:	100490fa 	slli	r2,r2,3
    1d58:	11c000c4 	addi	r7,r2,3
    1d5c:	e0bffd17 	ldw	r2,-12(fp)
    1d60:	100490fa 	slli	r2,r2,3
    1d64:	10800084 	addi	r2,r2,2
    1d68:	00c09784 	movi	r3,606
    1d6c:	d8c00115 	stw	r3,4(sp)
    1d70:	d8800015 	stw	r2,0(sp)
    1d74:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(0), V(5), H(3), V(5), RGB565(0, 74, 241));
    1d78:	e0bfff17 	ldw	r2,-4(fp)
    1d7c:	11000117 	ldw	r4,4(r2)
    1d80:	e0bffe17 	ldw	r2,-8(fp)
    1d84:	100a90fa 	slli	r5,r2,3
    1d88:	e0bffd17 	ldw	r2,-12(fp)
    1d8c:	100490fa 	slli	r2,r2,3
    1d90:	11800144 	addi	r6,r2,5
    1d94:	e0bffe17 	ldw	r2,-8(fp)
    1d98:	100490fa 	slli	r2,r2,3
    1d9c:	11c000c4 	addi	r7,r2,3
    1da0:	e0bffd17 	ldw	r2,-12(fp)
    1da4:	100490fa 	slli	r2,r2,3
    1da8:	10800144 	addi	r2,r2,5
    1dac:	00c09784 	movi	r3,606
    1db0:	d8c00115 	stw	r3,4(sp)
    1db4:	d8800015 	stw	r2,0(sp)
    1db8:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(4), V(3), H(4), V(4), RGB565(0, 74, 241));
    1dbc:	e0bfff17 	ldw	r2,-4(fp)
    1dc0:	11000117 	ldw	r4,4(r2)
    1dc4:	e0bffe17 	ldw	r2,-8(fp)
    1dc8:	100490fa 	slli	r2,r2,3
    1dcc:	11400104 	addi	r5,r2,4
    1dd0:	e0bffd17 	ldw	r2,-12(fp)
    1dd4:	100490fa 	slli	r2,r2,3
    1dd8:	118000c4 	addi	r6,r2,3
    1ddc:	e0bffe17 	ldw	r2,-8(fp)
    1de0:	100490fa 	slli	r2,r2,3
    1de4:	11c00104 	addi	r7,r2,4
    1de8:	e0bffd17 	ldw	r2,-12(fp)
    1dec:	100490fa 	slli	r2,r2,3
    1df0:	10800104 	addi	r2,r2,4
    1df4:	00c09784 	movi	r3,606
    1df8:	d8c00115 	stw	r3,4(sp)
    1dfc:	d8800015 	stw	r2,0(sp)
    1e00:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							break;
    1e04:	00003806 	br	1ee8 <_ZN4Game7drawMapEv+0x10d4>
						case cr:
							vi->drawLine(H(4), V(2), H(7), V(2), RGB565(0, 74, 241));
    1e08:	e0bfff17 	ldw	r2,-4(fp)
    1e0c:	11000117 	ldw	r4,4(r2)
    1e10:	e0bffe17 	ldw	r2,-8(fp)
    1e14:	100490fa 	slli	r2,r2,3
    1e18:	11400104 	addi	r5,r2,4
    1e1c:	e0bffd17 	ldw	r2,-12(fp)
    1e20:	100490fa 	slli	r2,r2,3
    1e24:	11800084 	addi	r6,r2,2
    1e28:	e0bffe17 	ldw	r2,-8(fp)
    1e2c:	100490fa 	slli	r2,r2,3
    1e30:	11c001c4 	addi	r7,r2,7
    1e34:	e0bffd17 	ldw	r2,-12(fp)
    1e38:	100490fa 	slli	r2,r2,3
    1e3c:	10800084 	addi	r2,r2,2
    1e40:	00c09784 	movi	r3,606
    1e44:	d8c00115 	stw	r3,4(sp)
    1e48:	d8800015 	stw	r2,0(sp)
    1e4c:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(4), V(5), H(7), V(5), RGB565(0, 74, 241));
    1e50:	e0bfff17 	ldw	r2,-4(fp)
    1e54:	11000117 	ldw	r4,4(r2)
    1e58:	e0bffe17 	ldw	r2,-8(fp)
    1e5c:	100490fa 	slli	r2,r2,3
    1e60:	11400104 	addi	r5,r2,4
    1e64:	e0bffd17 	ldw	r2,-12(fp)
    1e68:	100490fa 	slli	r2,r2,3
    1e6c:	11800144 	addi	r6,r2,5
    1e70:	e0bffe17 	ldw	r2,-8(fp)
    1e74:	100490fa 	slli	r2,r2,3
    1e78:	11c001c4 	addi	r7,r2,7
    1e7c:	e0bffd17 	ldw	r2,-12(fp)
    1e80:	100490fa 	slli	r2,r2,3
    1e84:	10800144 	addi	r2,r2,5
    1e88:	00c09784 	movi	r3,606
    1e8c:	d8c00115 	stw	r3,4(sp)
    1e90:	d8800015 	stw	r2,0(sp)
    1e94:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							vi->drawLine(H(3), V(3), H(3), V(4), RGB565(0, 74, 241));
    1e98:	e0bfff17 	ldw	r2,-4(fp)
    1e9c:	11000117 	ldw	r4,4(r2)
    1ea0:	e0bffe17 	ldw	r2,-8(fp)
    1ea4:	100490fa 	slli	r2,r2,3
    1ea8:	114000c4 	addi	r5,r2,3
    1eac:	e0bffd17 	ldw	r2,-12(fp)
    1eb0:	100490fa 	slli	r2,r2,3
    1eb4:	118000c4 	addi	r6,r2,3
    1eb8:	e0bffe17 	ldw	r2,-8(fp)
    1ebc:	100490fa 	slli	r2,r2,3
    1ec0:	11c000c4 	addi	r7,r2,3
    1ec4:	e0bffd17 	ldw	r2,-12(fp)
    1ec8:	100490fa 	slli	r2,r2,3
    1ecc:	10800104 	addi	r2,r2,4
    1ed0:	00c09784 	movi	r3,606
    1ed4:	d8c00115 	stw	r3,4(sp)
    1ed8:	d8800015 	stw	r2,0(sp)
    1edc:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
							break;
    1ee0:	00000106 	br	1ee8 <_ZN4Game7drawMapEv+0x10d4>
						default: break;
    1ee4:	0001883a 	nop
	}
};

void Game::drawMap(){
	for(int v = 0; v < 27; v++){
			for(int h = 0; h < 21; h++){
    1ee8:	e0bffe17 	ldw	r2,-8(fp)
    1eec:	10800044 	addi	r2,r2,1
    1ef0:	e0bffe15 	stw	r2,-8(fp)
    1ef4:	003bd106 	br	e3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e3c>
			break;
	}
};

void Game::drawMap(){
	for(int v = 0; v < 27; v++){
    1ef8:	e0bffd17 	ldw	r2,-12(fp)
    1efc:	10800044 	addi	r2,r2,1
    1f00:	e0bffd15 	stw	r2,-12(fp)
    1f04:	003bc906 	br	e2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e2c>
					}
				}

			}
		}
};
    1f08:	0001883a 	nop
    1f0c:	e037883a 	mov	sp,fp
    1f10:	dfc00117 	ldw	ra,4(sp)
    1f14:	df000017 	ldw	fp,0(sp)
    1f18:	dec00204 	addi	sp,sp,8
    1f1c:	f800283a 	ret

00001f20 <_ZN8KeyboardC1Ev>:
 *      Author: natha
 */

#include "Keyboard.h"

Keyboard::Keyboard(){
    1f20:	defffd04 	addi	sp,sp,-12
    1f24:	dfc00215 	stw	ra,8(sp)
    1f28:	df000115 	stw	fp,4(sp)
    1f2c:	df000104 	addi	fp,sp,4
    1f30:	e13fff15 	stw	r4,-4(fp)
    1f34:	e0bfff17 	ldw	r2,-4(fp)
    1f38:	1009883a 	mov	r4,r2
    1f3c:	00002840 	call	284 <_ZN19ControllerInterfaceC1Ev>
    1f40:	008000b4 	movhi	r2,2
    1f44:	10be9404 	addi	r2,r2,-1456
    1f48:	e0ffff17 	ldw	r3,-4(fp)
    1f4c:	18800015 	stw	r2,0(r3)
	this->PS2_dev = alt_up_ps2_open_dev ("/dev/PS2_Port");
    1f50:	010000b4 	movhi	r4,2
    1f54:	213e8004 	addi	r4,r4,-1536
    1f58:	001d8840 	call	1d884 <alt_up_ps2_open_dev>
    1f5c:	1007883a 	mov	r3,r2
    1f60:	e0bfff17 	ldw	r2,-4(fp)
    1f64:	10c00215 	stw	r3,8(r2)
	if (this->PS2_dev == NULL)
    1f68:	e0bfff17 	ldw	r2,-4(fp)
    1f6c:	10800217 	ldw	r2,8(r2)
    1f70:	1000041e 	bne	r2,zero,1f84 <_ZN8KeyboardC1Ev+0x64>
		printf("Error: could not open PS2 device\n");
    1f74:	010000b4 	movhi	r4,2
    1f78:	213e8404 	addi	r4,r4,-1520
    1f7c:	00077000 	call	7700 <puts>
    1f80:	00000306 	br	1f90 <_ZN8KeyboardC1Ev+0x70>
	else
		printf("Opened PS2 device\n");
    1f84:	010000b4 	movhi	r4,2
    1f88:	213e8d04 	addi	r4,r4,-1484
    1f8c:	00077000 	call	7700 <puts>

	alt_up_ps2_write_data_byte (this->PS2_dev, 0xFF);
    1f90:	e0bfff17 	ldw	r2,-4(fp)
    1f94:	10800217 	ldw	r2,8(r2)
    1f98:	01403fc4 	movi	r5,255
    1f9c:	1009883a 	mov	r4,r2
    1fa0:	001d4bc0 	call	1d4bc <alt_up_ps2_write_data_byte>
	alt_up_ps2_enable_read_interrupt(this->PS2_dev);
    1fa4:	e0bfff17 	ldw	r2,-4(fp)
    1fa8:	10800217 	ldw	r2,8(r2)
    1fac:	1009883a 	mov	r4,r2
    1fb0:	001d4000 	call	1d400 <alt_up_ps2_enable_read_interrupt>

	byte1 = 0, byte2 = 0, byte3 = 0;
    1fb4:	e0bfff17 	ldw	r2,-4(fp)
    1fb8:	10000305 	stb	zero,12(r2)
    1fbc:	e0bfff17 	ldw	r2,-4(fp)
    1fc0:	10000345 	stb	zero,13(r2)
    1fc4:	e0bfff17 	ldw	r2,-4(fp)
    1fc8:	10000385 	stb	zero,14(r2)
};
    1fcc:	0001883a 	nop
    1fd0:	e037883a 	mov	sp,fp
    1fd4:	dfc00117 	ldw	ra,4(sp)
    1fd8:	df000017 	ldw	fp,0(sp)
    1fdc:	dec00204 	addi	sp,sp,8
    1fe0:	f800283a 	ret

00001fe4 <_ZN8Keyboard6updateEv>:

void Keyboard::update(){
    1fe4:	defffd04 	addi	sp,sp,-12
    1fe8:	dfc00215 	stw	ra,8(sp)
    1fec:	df000115 	stw	fp,4(sp)
    1ff0:	df000104 	addi	fp,sp,4
    1ff4:	e13fff15 	stw	r4,-4(fp)
	while(alt_up_ps2_read_data_byte (PS2_dev, &PS2_data) == 0)
    1ff8:	e0bfff17 	ldw	r2,-4(fp)
    1ffc:	10c00217 	ldw	r3,8(r2)
    2000:	e0bfff17 	ldw	r2,-4(fp)
    2004:	108003c4 	addi	r2,r2,15
    2008:	100b883a 	mov	r5,r2
    200c:	1809883a 	mov	r4,r3
    2010:	001d6980 	call	1d698 <alt_up_ps2_read_data_byte>
    2014:	1005003a 	cmpeq	r2,r2,zero
    2018:	10803fcc 	andi	r2,r2,255
    201c:	10004126 	beq	r2,zero,2124 <_ZN8Keyboard6updateEv+0x140>
	{
		/* shift the next data byte into the display */
		byte1 = byte2;
    2020:	e0bfff17 	ldw	r2,-4(fp)
    2024:	10c00343 	ldbu	r3,13(r2)
    2028:	e0bfff17 	ldw	r2,-4(fp)
    202c:	10c00305 	stb	r3,12(r2)
		byte2 = byte3;
    2030:	e0bfff17 	ldw	r2,-4(fp)
    2034:	10c00383 	ldbu	r3,14(r2)
    2038:	e0bfff17 	ldw	r2,-4(fp)
    203c:	10c00345 	stb	r3,13(r2)
		byte3 = PS2_data;
    2040:	e0bfff17 	ldw	r2,-4(fp)
    2044:	10c003c3 	ldbu	r3,15(r2)
    2048:	e0bfff17 	ldw	r2,-4(fp)
    204c:	10c00385 	stb	r3,14(r2)

		//printf("%d-%d-%d \n\r", byte1, byte2, byte3);
		if(byte2 == 224 && byte3 == 107)
    2050:	e0bfff17 	ldw	r2,-4(fp)
    2054:	10800343 	ldbu	r2,13(r2)
    2058:	10803fcc 	andi	r2,r2,255
    205c:	10803818 	cmpnei	r2,r2,224
    2060:	1000081e 	bne	r2,zero,2084 <_ZN8Keyboard6updateEv+0xa0>
    2064:	e0bfff17 	ldw	r2,-4(fp)
    2068:	10800383 	ldbu	r2,14(r2)
    206c:	10803fcc 	andi	r2,r2,255
    2070:	10801ad8 	cmpnei	r2,r2,107
    2074:	1000031e 	bne	r2,zero,2084 <_ZN8Keyboard6updateEv+0xa0>
			this->activeButton = BUTTON_LEFT;
    2078:	e0bfff17 	ldw	r2,-4(fp)
    207c:	00c000c4 	movi	r3,3
    2080:	10c00115 	stw	r3,4(r2)
		if(byte2 == 224 && byte3 == 117)
    2084:	e0bfff17 	ldw	r2,-4(fp)
    2088:	10800343 	ldbu	r2,13(r2)
    208c:	10803fcc 	andi	r2,r2,255
    2090:	10803818 	cmpnei	r2,r2,224
    2094:	1000081e 	bne	r2,zero,20b8 <_ZN8Keyboard6updateEv+0xd4>
    2098:	e0bfff17 	ldw	r2,-4(fp)
    209c:	10800383 	ldbu	r2,14(r2)
    20a0:	10803fcc 	andi	r2,r2,255
    20a4:	10801d58 	cmpnei	r2,r2,117
    20a8:	1000031e 	bne	r2,zero,20b8 <_ZN8Keyboard6updateEv+0xd4>
			this->activeButton = BUTTON_UP;
    20ac:	e0bfff17 	ldw	r2,-4(fp)
    20b0:	00c00044 	movi	r3,1
    20b4:	10c00115 	stw	r3,4(r2)
		if(byte2 == 224 && byte3 == 116)
    20b8:	e0bfff17 	ldw	r2,-4(fp)
    20bc:	10800343 	ldbu	r2,13(r2)
    20c0:	10803fcc 	andi	r2,r2,255
    20c4:	10803818 	cmpnei	r2,r2,224
    20c8:	1000081e 	bne	r2,zero,20ec <_ZN8Keyboard6updateEv+0x108>
    20cc:	e0bfff17 	ldw	r2,-4(fp)
    20d0:	10800383 	ldbu	r2,14(r2)
    20d4:	10803fcc 	andi	r2,r2,255
    20d8:	10801d18 	cmpnei	r2,r2,116
    20dc:	1000031e 	bne	r2,zero,20ec <_ZN8Keyboard6updateEv+0x108>
			this->activeButton = BUTTON_RIGHT;
    20e0:	e0bfff17 	ldw	r2,-4(fp)
    20e4:	00c00104 	movi	r3,4
    20e8:	10c00115 	stw	r3,4(r2)
		if(byte2 == 224 && byte3 == 114)
    20ec:	e0bfff17 	ldw	r2,-4(fp)
    20f0:	10800343 	ldbu	r2,13(r2)
    20f4:	10803fcc 	andi	r2,r2,255
    20f8:	10803818 	cmpnei	r2,r2,224
    20fc:	103fbe1e 	bne	r2,zero,1ff8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ff8>
    2100:	e0bfff17 	ldw	r2,-4(fp)
    2104:	10800383 	ldbu	r2,14(r2)
    2108:	10803fcc 	andi	r2,r2,255
    210c:	10801c98 	cmpnei	r2,r2,114
    2110:	103fb91e 	bne	r2,zero,1ff8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ff8>
			this->activeButton = BUTTON_DOWN;
    2114:	e0bfff17 	ldw	r2,-4(fp)
    2118:	00c00084 	movi	r3,2
    211c:	10c00115 	stw	r3,4(r2)

	byte1 = 0, byte2 = 0, byte3 = 0;
};

void Keyboard::update(){
	while(alt_up_ps2_read_data_byte (PS2_dev, &PS2_data) == 0)
    2120:	003fb506 	br	1ff8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ff8>
		if(byte2 == 224 && byte3 == 114)
			this->activeButton = BUTTON_DOWN;
//		if(byte2 == 41 && byte3 == 41) // SPACE
//			pm->setDir(DIR_NO_DIR);
	}
};
    2124:	0001883a 	nop
    2128:	e037883a 	mov	sp,fp
    212c:	dfc00117 	ldw	ra,4(sp)
    2130:	df000017 	ldw	fp,0(sp)
    2134:	dec00204 	addi	sp,sp,8
    2138:	f800283a 	ret

0000213c <_ZN6PacManC1Eii>:
 *      Author: natha
 */

#include "PacMan.h"

PacMan::PacMan(int x, int y) : Entity(x, y) {
    213c:	defffb04 	addi	sp,sp,-20
    2140:	dfc00415 	stw	ra,16(sp)
    2144:	df000315 	stw	fp,12(sp)
    2148:	df000304 	addi	fp,sp,12
    214c:	e13ffd15 	stw	r4,-12(fp)
    2150:	e17ffe15 	stw	r5,-8(fp)
    2154:	e1bfff15 	stw	r6,-4(fp)
    2158:	e0bffd17 	ldw	r2,-12(fp)
    215c:	e1bfff17 	ldw	r6,-4(fp)
    2160:	e17ffe17 	ldw	r5,-8(fp)
    2164:	1009883a 	mov	r4,r2
    2168:	00002f80 	call	2f8 <_ZN6EntityC1Eii>
    216c:	008000b4 	movhi	r2,2
    2170:	10bf0904 	addi	r2,r2,-988
    2174:	e0fffd17 	ldw	r3,-12(fp)
    2178:	18800015 	stw	r2,0(r3)
    217c:	e0bffd17 	ldw	r2,-12(fp)
    2180:	10000b15 	stw	zero,44(r2)
    2184:	e0bffd17 	ldw	r2,-12(fp)
    2188:	10000c15 	stw	zero,48(r2)
    218c:	e0bffd17 	ldw	r2,-12(fp)
    2190:	00c00044 	movi	r3,1
    2194:	10c00d15 	stw	r3,52(r2)
    2198:	e0fffd17 	ldw	r3,-12(fp)
    219c:	008000b4 	movhi	r2,2
    21a0:	10be9a84 	addi	r2,r2,-1430
    21a4:	18c00e04 	addi	r3,r3,56
    21a8:	1009883a 	mov	r4,r2
    21ac:	00806c04 	movi	r2,432
    21b0:	100d883a 	mov	r6,r2
    21b4:	200b883a 	mov	r5,r4
    21b8:	1809883a 	mov	r4,r3
    21bc:	00073640 	call	7364 <memcpy>
	this->width = 12;
    21c0:	e0bffd17 	ldw	r2,-12(fp)
    21c4:	00c00304 	movi	r3,12
    21c8:	10c00515 	stw	r3,20(r2)
	this->height = 12;
    21cc:	e0bffd17 	ldw	r2,-12(fp)
    21d0:	00c00304 	movi	r3,12
    21d4:	10c00615 	stw	r3,24(r2)
	this->dir = DIR_NO_DIR;
    21d8:	e0bffd17 	ldw	r2,-12(fp)
    21dc:	00c00104 	movi	r3,4
    21e0:	10c00915 	stw	r3,36(r2)
	this->velocity = 50;
    21e4:	e0bffd17 	ldw	r2,-12(fp)
    21e8:	00c00c84 	movi	r3,50
    21ec:	10c00715 	stw	r3,28(r2)
};
    21f0:	0001883a 	nop
    21f4:	e037883a 	mov	sp,fp
    21f8:	dfc00117 	ldw	ra,4(sp)
    21fc:	df000017 	ldw	fp,0(sp)
    2200:	dec00204 	addi	sp,sp,8
    2204:	f800283a 	ret

00002208 <_ZN6PacMan5_drawEP14VideoInterface>:

void PacMan::_draw(VideoInterface* vi){
    2208:	defff804 	addi	sp,sp,-32
    220c:	dfc00715 	stw	ra,28(sp)
    2210:	df000615 	stw	fp,24(sp)
    2214:	df000604 	addi	fp,sp,24
    2218:	e13ffe15 	stw	r4,-8(fp)
    221c:	e17fff15 	stw	r5,-4(fp)
	for(int y = 0; y < this->width; y++){
    2220:	e03ffa15 	stw	zero,-24(fp)
    2224:	e0bffe17 	ldw	r2,-8(fp)
    2228:	10800517 	ldw	r2,20(r2)
    222c:	e0fffa17 	ldw	r3,-24(fp)
    2230:	1880630e 	bge	r3,r2,23c0 <_ZN6PacMan5_drawEP14VideoInterface+0x1b8>
		for(int x = 0; x < this->width; x++){
    2234:	e03ffb15 	stw	zero,-20(fp)
    2238:	e0bffe17 	ldw	r2,-8(fp)
    223c:	10800517 	ldw	r2,20(r2)
    2240:	e0fffb17 	ldw	r3,-20(fp)
    2244:	18805a0e 	bge	r3,r2,23b0 <_ZN6PacMan5_drawEP14VideoInterface+0x1a8>
			if(this->prev_dir == DIR_RIGHT || this->prev_dir == DIR_NO_DIR)
    2248:	e0bffe17 	ldw	r2,-8(fp)
    224c:	10800a17 	ldw	r2,40(r2)
    2250:	108000e0 	cmpeqi	r2,r2,3
    2254:	1000041e 	bne	r2,zero,2268 <_ZN6PacMan5_drawEP14VideoInterface+0x60>
    2258:	e0bffe17 	ldw	r2,-8(fp)
    225c:	10800a17 	ldw	r2,40(r2)
    2260:	10800118 	cmpnei	r2,r2,4
    2264:	10000f1e 	bne	r2,zero,22a4 <_ZN6PacMan5_drawEP14VideoInterface+0x9c>
				vi->drawPixel(this->prev_x + x - 2, this->prev_y + y - 2, 0);
    2268:	e0bffe17 	ldw	r2,-8(fp)
    226c:	10c00317 	ldw	r3,12(r2)
    2270:	e0bffb17 	ldw	r2,-20(fp)
    2274:	1885883a 	add	r2,r3,r2
    2278:	113fff84 	addi	r4,r2,-2
    227c:	e0bffe17 	ldw	r2,-8(fp)
    2280:	10c00417 	ldw	r3,16(r2)
    2284:	e0bffa17 	ldw	r2,-24(fp)
    2288:	1885883a 	add	r2,r3,r2
    228c:	10bfff84 	addi	r2,r2,-2
    2290:	000f883a 	mov	r7,zero
    2294:	100d883a 	mov	r6,r2
    2298:	200b883a 	mov	r5,r4
    229c:	e13fff17 	ldw	r4,-4(fp)
    22a0:	000283c0 	call	283c <_ZN14VideoInterface9drawPixelEiit>
			if(this->prev_dir == DIR_LEFT)
    22a4:	e0bffe17 	ldw	r2,-8(fp)
    22a8:	10800a17 	ldw	r2,40(r2)
    22ac:	10800098 	cmpnei	r2,r2,2
    22b0:	1000131e 	bne	r2,zero,2300 <_ZN6PacMan5_drawEP14VideoInterface+0xf8>
				vi->drawPixel(this->prev_x + (this->width - 1 - x) - 2, this->prev_y + y - 2, 0);
    22b4:	e0bffe17 	ldw	r2,-8(fp)
    22b8:	10c00317 	ldw	r3,12(r2)
    22bc:	e0bffe17 	ldw	r2,-8(fp)
    22c0:	10800517 	ldw	r2,20(r2)
    22c4:	113fffc4 	addi	r4,r2,-1
    22c8:	e0bffb17 	ldw	r2,-20(fp)
    22cc:	2085c83a 	sub	r2,r4,r2
    22d0:	1885883a 	add	r2,r3,r2
    22d4:	113fff84 	addi	r4,r2,-2
    22d8:	e0bffe17 	ldw	r2,-8(fp)
    22dc:	10c00417 	ldw	r3,16(r2)
    22e0:	e0bffa17 	ldw	r2,-24(fp)
    22e4:	1885883a 	add	r2,r3,r2
    22e8:	10bfff84 	addi	r2,r2,-2
    22ec:	000f883a 	mov	r7,zero
    22f0:	100d883a 	mov	r6,r2
    22f4:	200b883a 	mov	r5,r4
    22f8:	e13fff17 	ldw	r4,-4(fp)
    22fc:	000283c0 	call	283c <_ZN14VideoInterface9drawPixelEiit>
			if(this->prev_dir == DIR_DOWN)
    2300:	e0bffe17 	ldw	r2,-8(fp)
    2304:	10800a17 	ldw	r2,40(r2)
    2308:	10800058 	cmpnei	r2,r2,1
    230c:	10000f1e 	bne	r2,zero,234c <_ZN6PacMan5_drawEP14VideoInterface+0x144>
				vi->drawPixel(this->prev_x + y - 2, this->prev_y + x - 2, 0);
    2310:	e0bffe17 	ldw	r2,-8(fp)
    2314:	10c00317 	ldw	r3,12(r2)
    2318:	e0bffa17 	ldw	r2,-24(fp)
    231c:	1885883a 	add	r2,r3,r2
    2320:	113fff84 	addi	r4,r2,-2
    2324:	e0bffe17 	ldw	r2,-8(fp)
    2328:	10c00417 	ldw	r3,16(r2)
    232c:	e0bffb17 	ldw	r2,-20(fp)
    2330:	1885883a 	add	r2,r3,r2
    2334:	10bfff84 	addi	r2,r2,-2
    2338:	000f883a 	mov	r7,zero
    233c:	100d883a 	mov	r6,r2
    2340:	200b883a 	mov	r5,r4
    2344:	e13fff17 	ldw	r4,-4(fp)
    2348:	000283c0 	call	283c <_ZN14VideoInterface9drawPixelEiit>
			if(this->prev_dir == DIR_UP)
    234c:	e0bffe17 	ldw	r2,-8(fp)
    2350:	10800a17 	ldw	r2,40(r2)
    2354:	1000121e 	bne	r2,zero,23a0 <_ZN6PacMan5_drawEP14VideoInterface+0x198>
				vi->drawPixel(this->prev_x + y - 2, this->prev_y + (this->height - 1 - x) - 2, 0);
    2358:	e0bffe17 	ldw	r2,-8(fp)
    235c:	10c00317 	ldw	r3,12(r2)
    2360:	e0bffa17 	ldw	r2,-24(fp)
    2364:	1885883a 	add	r2,r3,r2
    2368:	117fff84 	addi	r5,r2,-2
    236c:	e0bffe17 	ldw	r2,-8(fp)
    2370:	10c00417 	ldw	r3,16(r2)
    2374:	e0bffe17 	ldw	r2,-8(fp)
    2378:	10800617 	ldw	r2,24(r2)
    237c:	113fffc4 	addi	r4,r2,-1
    2380:	e0bffb17 	ldw	r2,-20(fp)
    2384:	2085c83a 	sub	r2,r4,r2
    2388:	1885883a 	add	r2,r3,r2
    238c:	10bfff84 	addi	r2,r2,-2
    2390:	000f883a 	mov	r7,zero
    2394:	100d883a 	mov	r6,r2
    2398:	e13fff17 	ldw	r4,-4(fp)
    239c:	000283c0 	call	283c <_ZN14VideoInterface9drawPixelEiit>
	this->velocity = 50;
};

void PacMan::_draw(VideoInterface* vi){
	for(int y = 0; y < this->width; y++){
		for(int x = 0; x < this->width; x++){
    23a0:	e0bffb17 	ldw	r2,-20(fp)
    23a4:	10800044 	addi	r2,r2,1
    23a8:	e0bffb15 	stw	r2,-20(fp)
    23ac:	003fa206 	br	2238 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002238>
	this->dir = DIR_NO_DIR;
	this->velocity = 50;
};

void PacMan::_draw(VideoInterface* vi){
	for(int y = 0; y < this->width; y++){
    23b0:	e0bffa17 	ldw	r2,-24(fp)
    23b4:	10800044 	addi	r2,r2,1
    23b8:	e0bffa15 	stw	r2,-24(fp)
    23bc:	003f9906 	br	2224 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002224>
			if(this->prev_dir == DIR_UP)
				vi->drawPixel(this->prev_x + y - 2, this->prev_y + (this->height - 1 - x) - 2, 0);
		}
	}

	for(int y = 0; y < this->width; y++){
    23c0:	e03ffc15 	stw	zero,-16(fp)
    23c4:	e0bffe17 	ldw	r2,-8(fp)
    23c8:	10800517 	ldw	r2,20(r2)
    23cc:	e0fffc17 	ldw	r3,-16(fp)
    23d0:	1880710e 	bge	r3,r2,2598 <_ZN6PacMan5_drawEP14VideoInterface+0x390>
		for(int x = 0; x < this->width; x++){
    23d4:	e03ffd15 	stw	zero,-12(fp)
    23d8:	e0bffe17 	ldw	r2,-8(fp)
    23dc:	10800517 	ldw	r2,20(r2)
    23e0:	e0fffd17 	ldw	r3,-12(fp)
    23e4:	1880680e 	bge	r3,r2,2588 <_ZN6PacMan5_drawEP14VideoInterface+0x380>
			if(this->bmp[this->frame][y][x]){
    23e8:	e0bffe17 	ldw	r2,-8(fp)
    23ec:	10800b17 	ldw	r2,44(r2)
    23f0:	e0fffe17 	ldw	r3,-8(fp)
    23f4:	e13ffc17 	ldw	r4,-16(fp)
    23f8:	21000324 	muli	r4,r4,12
    23fc:	10802424 	muli	r2,r2,144
    2400:	2085883a 	add	r2,r4,r2
    2404:	1887883a 	add	r3,r3,r2
    2408:	e0bffd17 	ldw	r2,-12(fp)
    240c:	1885883a 	add	r2,r3,r2
    2410:	10800e04 	addi	r2,r2,56
    2414:	10800003 	ldbu	r2,0(r2)
    2418:	10803fcc 	andi	r2,r2,255
    241c:	10005626 	beq	r2,zero,2578 <_ZN6PacMan5_drawEP14VideoInterface+0x370>
				if(this->dir == DIR_RIGHT || this->dir == DIR_NO_DIR)
    2420:	e0bffe17 	ldw	r2,-8(fp)
    2424:	10800917 	ldw	r2,36(r2)
    2428:	108000e0 	cmpeqi	r2,r2,3
    242c:	1000041e 	bne	r2,zero,2440 <_ZN6PacMan5_drawEP14VideoInterface+0x238>
    2430:	e0bffe17 	ldw	r2,-8(fp)
    2434:	10800917 	ldw	r2,36(r2)
    2438:	10800118 	cmpnei	r2,r2,4
    243c:	10000f1e 	bne	r2,zero,247c <_ZN6PacMan5_drawEP14VideoInterface+0x274>
					vi->drawPixel(this->x + x - 2, this->y + y - 2, PACMAN_COLOR);
    2440:	e0bffe17 	ldw	r2,-8(fp)
    2444:	10c00117 	ldw	r3,4(r2)
    2448:	e0bffd17 	ldw	r2,-12(fp)
    244c:	1885883a 	add	r2,r3,r2
    2450:	113fff84 	addi	r4,r2,-2
    2454:	e0bffe17 	ldw	r2,-8(fp)
    2458:	10c00217 	ldw	r3,8(r2)
    245c:	e0bffc17 	ldw	r2,-16(fp)
    2460:	1885883a 	add	r2,r3,r2
    2464:	10bfff84 	addi	r2,r2,-2
    2468:	01ffb014 	movui	r7,65216
    246c:	100d883a 	mov	r6,r2
    2470:	200b883a 	mov	r5,r4
    2474:	e13fff17 	ldw	r4,-4(fp)
    2478:	000283c0 	call	283c <_ZN14VideoInterface9drawPixelEiit>
				if(this->dir == DIR_LEFT)
    247c:	e0bffe17 	ldw	r2,-8(fp)
    2480:	10800917 	ldw	r2,36(r2)
    2484:	10800098 	cmpnei	r2,r2,2
    2488:	1000131e 	bne	r2,zero,24d8 <_ZN6PacMan5_drawEP14VideoInterface+0x2d0>
					vi->drawPixel(this->x + (this->width - 1 - x) - 2, this->y + y - 2, PACMAN_COLOR);
    248c:	e0bffe17 	ldw	r2,-8(fp)
    2490:	10c00117 	ldw	r3,4(r2)
    2494:	e0bffe17 	ldw	r2,-8(fp)
    2498:	10800517 	ldw	r2,20(r2)
    249c:	113fffc4 	addi	r4,r2,-1
    24a0:	e0bffd17 	ldw	r2,-12(fp)
    24a4:	2085c83a 	sub	r2,r4,r2
    24a8:	1885883a 	add	r2,r3,r2
    24ac:	113fff84 	addi	r4,r2,-2
    24b0:	e0bffe17 	ldw	r2,-8(fp)
    24b4:	10c00217 	ldw	r3,8(r2)
    24b8:	e0bffc17 	ldw	r2,-16(fp)
    24bc:	1885883a 	add	r2,r3,r2
    24c0:	10bfff84 	addi	r2,r2,-2
    24c4:	01ffb014 	movui	r7,65216
    24c8:	100d883a 	mov	r6,r2
    24cc:	200b883a 	mov	r5,r4
    24d0:	e13fff17 	ldw	r4,-4(fp)
    24d4:	000283c0 	call	283c <_ZN14VideoInterface9drawPixelEiit>
				if(this->dir == DIR_DOWN)
    24d8:	e0bffe17 	ldw	r2,-8(fp)
    24dc:	10800917 	ldw	r2,36(r2)
    24e0:	10800058 	cmpnei	r2,r2,1
    24e4:	10000f1e 	bne	r2,zero,2524 <_ZN6PacMan5_drawEP14VideoInterface+0x31c>
					vi->drawPixel(this->x + y - 2, this->y + x - 2, PACMAN_COLOR);
    24e8:	e0bffe17 	ldw	r2,-8(fp)
    24ec:	10c00117 	ldw	r3,4(r2)
    24f0:	e0bffc17 	ldw	r2,-16(fp)
    24f4:	1885883a 	add	r2,r3,r2
    24f8:	113fff84 	addi	r4,r2,-2
    24fc:	e0bffe17 	ldw	r2,-8(fp)
    2500:	10c00217 	ldw	r3,8(r2)
    2504:	e0bffd17 	ldw	r2,-12(fp)
    2508:	1885883a 	add	r2,r3,r2
    250c:	10bfff84 	addi	r2,r2,-2
    2510:	01ffb014 	movui	r7,65216
    2514:	100d883a 	mov	r6,r2
    2518:	200b883a 	mov	r5,r4
    251c:	e13fff17 	ldw	r4,-4(fp)
    2520:	000283c0 	call	283c <_ZN14VideoInterface9drawPixelEiit>
				if(this->dir == DIR_UP)
    2524:	e0bffe17 	ldw	r2,-8(fp)
    2528:	10800917 	ldw	r2,36(r2)
    252c:	1000121e 	bne	r2,zero,2578 <_ZN6PacMan5_drawEP14VideoInterface+0x370>
					vi->drawPixel(this->x + y - 2, this->y + (this->height - 1 - x) - 2, PACMAN_COLOR);
    2530:	e0bffe17 	ldw	r2,-8(fp)
    2534:	10c00117 	ldw	r3,4(r2)
    2538:	e0bffc17 	ldw	r2,-16(fp)
    253c:	1885883a 	add	r2,r3,r2
    2540:	117fff84 	addi	r5,r2,-2
    2544:	e0bffe17 	ldw	r2,-8(fp)
    2548:	10c00217 	ldw	r3,8(r2)
    254c:	e0bffe17 	ldw	r2,-8(fp)
    2550:	10800617 	ldw	r2,24(r2)
    2554:	113fffc4 	addi	r4,r2,-1
    2558:	e0bffd17 	ldw	r2,-12(fp)
    255c:	2085c83a 	sub	r2,r4,r2
    2560:	1885883a 	add	r2,r3,r2
    2564:	10bfff84 	addi	r2,r2,-2
    2568:	01ffb014 	movui	r7,65216
    256c:	100d883a 	mov	r6,r2
    2570:	e13fff17 	ldw	r4,-4(fp)
    2574:	000283c0 	call	283c <_ZN14VideoInterface9drawPixelEiit>
				vi->drawPixel(this->prev_x + y - 2, this->prev_y + (this->height - 1 - x) - 2, 0);
		}
	}

	for(int y = 0; y < this->width; y++){
		for(int x = 0; x < this->width; x++){
    2578:	e0bffd17 	ldw	r2,-12(fp)
    257c:	10800044 	addi	r2,r2,1
    2580:	e0bffd15 	stw	r2,-12(fp)
    2584:	003f9406 	br	23d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70023d8>
			if(this->prev_dir == DIR_UP)
				vi->drawPixel(this->prev_x + y - 2, this->prev_y + (this->height - 1 - x) - 2, 0);
		}
	}

	for(int y = 0; y < this->width; y++){
    2588:	e0bffc17 	ldw	r2,-16(fp)
    258c:	10800044 	addi	r2,r2,1
    2590:	e0bffc15 	stw	r2,-16(fp)
    2594:	003f8b06 	br	23c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70023c4>
				if(this->dir == DIR_UP)
					vi->drawPixel(this->x + y - 2, this->y + (this->height - 1 - x) - 2, PACMAN_COLOR);
			}
		}
	}
};
    2598:	0001883a 	nop
    259c:	e037883a 	mov	sp,fp
    25a0:	dfc00117 	ldw	ra,4(sp)
    25a4:	df000017 	ldw	fp,0(sp)
    25a8:	dec00204 	addi	sp,sp,8
    25ac:	f800283a 	ret

000025b0 <_ZN6PacMan7_updateEi>:

void PacMan::_update(int elapsedTime){
    25b0:	defffd04 	addi	sp,sp,-12
    25b4:	df000215 	stw	fp,8(sp)
    25b8:	df000204 	addi	fp,sp,8
    25bc:	e13ffe15 	stw	r4,-8(fp)
    25c0:	e17fff15 	stw	r5,-4(fp)
	this->lastFrame = this->frame;
    25c4:	e0bffe17 	ldw	r2,-8(fp)
    25c8:	10c00b17 	ldw	r3,44(r2)
    25cc:	e0bffe17 	ldw	r2,-8(fp)
    25d0:	10c00c15 	stw	r3,48(r2)

	if(this->dir != DIR_NO_DIR){
    25d4:	e0bffe17 	ldw	r2,-8(fp)
    25d8:	10800917 	ldw	r2,36(r2)
    25dc:	10800120 	cmpeqi	r2,r2,4
    25e0:	1000261e 	bne	r2,zero,267c <_ZN6PacMan7_updateEi+0xcc>
		if(this->frameDir){
    25e4:	e0bffe17 	ldw	r2,-8(fp)
    25e8:	10800d17 	ldw	r2,52(r2)
    25ec:	10001226 	beq	r2,zero,2638 <_ZN6PacMan7_updateEi+0x88>
			if(this->frame < 2){
    25f0:	e0bffe17 	ldw	r2,-8(fp)
    25f4:	10800b17 	ldw	r2,44(r2)
    25f8:	10800088 	cmpgei	r2,r2,2
    25fc:	1000061e 	bne	r2,zero,2618 <_ZN6PacMan7_updateEi+0x68>
				this->frame++;
    2600:	e0bffe17 	ldw	r2,-8(fp)
    2604:	10800b17 	ldw	r2,44(r2)
    2608:	10c00044 	addi	r3,r2,1
    260c:	e0bffe17 	ldw	r2,-8(fp)
    2610:	10c00b15 	stw	r3,44(r2)
    2614:	00001906 	br	267c <_ZN6PacMan7_updateEi+0xcc>
			}else{
				this->frame--;
    2618:	e0bffe17 	ldw	r2,-8(fp)
    261c:	10800b17 	ldw	r2,44(r2)
    2620:	10ffffc4 	addi	r3,r2,-1
    2624:	e0bffe17 	ldw	r2,-8(fp)
    2628:	10c00b15 	stw	r3,44(r2)
				this->frameDir = 0;
    262c:	e0bffe17 	ldw	r2,-8(fp)
    2630:	10000d15 	stw	zero,52(r2)
    2634:	00001106 	br	267c <_ZN6PacMan7_updateEi+0xcc>
			}
		}else{
			if(this->frame > 0){
    2638:	e0bffe17 	ldw	r2,-8(fp)
    263c:	10800b17 	ldw	r2,44(r2)
    2640:	0080060e 	bge	zero,r2,265c <_ZN6PacMan7_updateEi+0xac>
				this->frame--;
    2644:	e0bffe17 	ldw	r2,-8(fp)
    2648:	10800b17 	ldw	r2,44(r2)
    264c:	10ffffc4 	addi	r3,r2,-1
    2650:	e0bffe17 	ldw	r2,-8(fp)
    2654:	10c00b15 	stw	r3,44(r2)
    2658:	00000806 	br	267c <_ZN6PacMan7_updateEi+0xcc>
			}else{
				this->frame++;
    265c:	e0bffe17 	ldw	r2,-8(fp)
    2660:	10800b17 	ldw	r2,44(r2)
    2664:	10c00044 	addi	r3,r2,1
    2668:	e0bffe17 	ldw	r2,-8(fp)
    266c:	10c00b15 	stw	r3,44(r2)
				this->frameDir = 1;
    2670:	e0bffe17 	ldw	r2,-8(fp)
    2674:	00c00044 	movi	r3,1
    2678:	10c00d15 	stw	r3,52(r2)
			}
		}
	}
	this->redraw = 1;
    267c:	e0bffe17 	ldw	r2,-8(fp)
    2680:	00c00044 	movi	r3,1
    2684:	10c00805 	stb	r3,32(r2)
};
    2688:	0001883a 	nop
    268c:	e037883a 	mov	sp,fp
    2690:	df000017 	ldw	fp,0(sp)
    2694:	dec00104 	addi	sp,sp,4
    2698:	f800283a 	ret

0000269c <_ZN3VGAC1EPsiii>:
 *      Author: natha
 */

#include "VGA.h"

VGA::VGA(short* pixel_buffer, int width, int height, int scale) : VideoInterface(width, height, scale) {
    269c:	defffa04 	addi	sp,sp,-24
    26a0:	dfc00515 	stw	ra,20(sp)
    26a4:	df000415 	stw	fp,16(sp)
    26a8:	df000404 	addi	fp,sp,16
    26ac:	e13ffc15 	stw	r4,-16(fp)
    26b0:	e17ffd15 	stw	r5,-12(fp)
    26b4:	e1bffe15 	stw	r6,-8(fp)
    26b8:	e1ffff15 	stw	r7,-4(fp)
    26bc:	e0bffc17 	ldw	r2,-16(fp)
    26c0:	e1c00217 	ldw	r7,8(fp)
    26c4:	e1bfff17 	ldw	r6,-4(fp)
    26c8:	e17ffe17 	ldw	r5,-8(fp)
    26cc:	1009883a 	mov	r4,r2
    26d0:	00027780 	call	2778 <_ZN14VideoInterfaceC1Eiii>
    26d4:	008000b4 	movhi	r2,2
    26d8:	10bf1004 	addi	r2,r2,-960
    26dc:	e0fffc17 	ldw	r3,-16(fp)
    26e0:	18800015 	stw	r2,0(r3)
	this->pbuffer = pixel_buffer;
    26e4:	e0bffc17 	ldw	r2,-16(fp)
    26e8:	e0fffd17 	ldw	r3,-12(fp)
    26ec:	10c00615 	stw	r3,24(r2)
};
    26f0:	0001883a 	nop
    26f4:	e037883a 	mov	sp,fp
    26f8:	dfc00117 	ldw	ra,4(sp)
    26fc:	df000017 	ldw	fp,0(sp)
    2700:	dec00204 	addi	sp,sp,8
    2704:	f800283a 	ret

00002708 <_ZN3VGA18_internalDrawPixelEiit>:

void VGA::_internalDrawPixel(int x, int y, uint16_t color){
    2708:	defff904 	addi	sp,sp,-28
    270c:	df000615 	stw	fp,24(sp)
    2710:	df000604 	addi	fp,sp,24
    2714:	e13ffc15 	stw	r4,-16(fp)
    2718:	e17ffd15 	stw	r5,-12(fp)
    271c:	e1bffe15 	stw	r6,-8(fp)
    2720:	3805883a 	mov	r2,r7
    2724:	e0bfff0d 	sth	r2,-4(fp)
	volatile short* pbuff = this->pbuffer;
    2728:	e0bffc17 	ldw	r2,-16(fp)
    272c:	10800617 	ldw	r2,24(r2)
    2730:	e0bffa15 	stw	r2,-24(fp)

	int offset = (y << 9) + x;
    2734:	e0bffe17 	ldw	r2,-8(fp)
    2738:	1006927a 	slli	r3,r2,9
    273c:	e0bffd17 	ldw	r2,-12(fp)
    2740:	1885883a 	add	r2,r3,r2
    2744:	e0bffb15 	stw	r2,-20(fp)
	*(pbuff + offset) = (short)color;
    2748:	e0bffb17 	ldw	r2,-20(fp)
    274c:	1085883a 	add	r2,r2,r2
    2750:	1007883a 	mov	r3,r2
    2754:	e0bffa17 	ldw	r2,-24(fp)
    2758:	10c5883a 	add	r2,r2,r3
    275c:	e0ffff0b 	ldhu	r3,-4(fp)
    2760:	10c0000d 	sth	r3,0(r2)
};
    2764:	0001883a 	nop
    2768:	e037883a 	mov	sp,fp
    276c:	df000017 	ldw	fp,0(sp)
    2770:	dec00104 	addi	sp,sp,4
    2774:	f800283a 	ret

00002778 <_ZN14VideoInterfaceC1Eiii>:
 *      Author: natha
 */

#include "VideoInterface.h"

VideoInterface::VideoInterface(int width, int height, int scale){
    2778:	defffb04 	addi	sp,sp,-20
    277c:	df000415 	stw	fp,16(sp)
    2780:	df000404 	addi	fp,sp,16
    2784:	e13ffc15 	stw	r4,-16(fp)
    2788:	e17ffd15 	stw	r5,-12(fp)
    278c:	e1bffe15 	stw	r6,-8(fp)
    2790:	e1ffff15 	stw	r7,-4(fp)
    2794:	008000b4 	movhi	r2,2
    2798:	10bf1b04 	addi	r2,r2,-916
    279c:	e0fffc17 	ldw	r3,-16(fp)
    27a0:	18800015 	stw	r2,0(r3)
	this->width = width;
    27a4:	e0bffc17 	ldw	r2,-16(fp)
    27a8:	e0fffd17 	ldw	r3,-12(fp)
    27ac:	10c00315 	stw	r3,12(r2)
	this->height = height;
    27b0:	e0bffc17 	ldw	r2,-16(fp)
    27b4:	e0fffe17 	ldw	r3,-8(fp)
    27b8:	10c00415 	stw	r3,16(r2)
	this->scale = scale;
    27bc:	e0bffc17 	ldw	r2,-16(fp)
    27c0:	e0ffff17 	ldw	r3,-4(fp)
    27c4:	10c00515 	stw	r3,20(r2)
	this->viLA = BRESENHAM;
    27c8:	e0bffc17 	ldw	r2,-16(fp)
    27cc:	00c00044 	movi	r3,1
    27d0:	10c00115 	stw	r3,4(r2)
};
    27d4:	0001883a 	nop
    27d8:	e037883a 	mov	sp,fp
    27dc:	df000017 	ldw	fp,0(sp)
    27e0:	dec00104 	addi	sp,sp,4
    27e4:	f800283a 	ret

000027e8 <_ZN14VideoInterface9drawPixelEii>:

void VideoInterface::drawPixel(int x, int y){
    27e8:	defffb04 	addi	sp,sp,-20
    27ec:	dfc00415 	stw	ra,16(sp)
    27f0:	df000315 	stw	fp,12(sp)
    27f4:	df000304 	addi	fp,sp,12
    27f8:	e13ffd15 	stw	r4,-12(fp)
    27fc:	e17ffe15 	stw	r5,-8(fp)
    2800:	e1bfff15 	stw	r6,-4(fp)
	this->drawPixel(x, y, this->color);
    2804:	e0bffd17 	ldw	r2,-12(fp)
    2808:	1080020b 	ldhu	r2,8(r2)
    280c:	10bfffcc 	andi	r2,r2,65535
    2810:	100f883a 	mov	r7,r2
    2814:	e1bfff17 	ldw	r6,-4(fp)
    2818:	e17ffe17 	ldw	r5,-8(fp)
    281c:	e13ffd17 	ldw	r4,-12(fp)
    2820:	000283c0 	call	283c <_ZN14VideoInterface9drawPixelEiit>
};
    2824:	0001883a 	nop
    2828:	e037883a 	mov	sp,fp
    282c:	dfc00117 	ldw	ra,4(sp)
    2830:	df000017 	ldw	fp,0(sp)
    2834:	dec00204 	addi	sp,sp,8
    2838:	f800283a 	ret

0000283c <_ZN14VideoInterface9drawPixelEiit>:

void VideoInterface::drawPixel(int x, int y, uint16_t color){
    283c:	defffa04 	addi	sp,sp,-24
    2840:	dfc00515 	stw	ra,20(sp)
    2844:	df000415 	stw	fp,16(sp)
    2848:	df000404 	addi	fp,sp,16
    284c:	e13ffc15 	stw	r4,-16(fp)
    2850:	e17ffd15 	stw	r5,-12(fp)
    2854:	e1bffe15 	stw	r6,-8(fp)
    2858:	3805883a 	mov	r2,r7
    285c:	e0bfff0d 	sth	r2,-4(fp)
	if(x < 0 || x > this->width - 1) return;
    2860:	e0bffd17 	ldw	r2,-12(fp)
    2864:	10001616 	blt	r2,zero,28c0 <_ZN14VideoInterface9drawPixelEiit+0x84>
    2868:	e0bffc17 	ldw	r2,-16(fp)
    286c:	10800317 	ldw	r2,12(r2)
    2870:	10ffffc4 	addi	r3,r2,-1
    2874:	e0bffd17 	ldw	r2,-12(fp)
    2878:	18801116 	blt	r3,r2,28c0 <_ZN14VideoInterface9drawPixelEiit+0x84>
	if(y < 0 || y > this->height - 1) return;
    287c:	e0bffe17 	ldw	r2,-8(fp)
    2880:	10001116 	blt	r2,zero,28c8 <_ZN14VideoInterface9drawPixelEiit+0x8c>
    2884:	e0bffc17 	ldw	r2,-16(fp)
    2888:	10800417 	ldw	r2,16(r2)
    288c:	10ffffc4 	addi	r3,r2,-1
    2890:	e0bffe17 	ldw	r2,-8(fp)
    2894:	18800c16 	blt	r3,r2,28c8 <_ZN14VideoInterface9drawPixelEiit+0x8c>
	this->_internalDrawPixel(x, y, color);
    2898:	e0bffc17 	ldw	r2,-16(fp)
    289c:	10800017 	ldw	r2,0(r2)
    28a0:	10800017 	ldw	r2,0(r2)
    28a4:	e0ffff0b 	ldhu	r3,-4(fp)
    28a8:	180f883a 	mov	r7,r3
    28ac:	e1bffe17 	ldw	r6,-8(fp)
    28b0:	e17ffd17 	ldw	r5,-12(fp)
    28b4:	e13ffc17 	ldw	r4,-16(fp)
    28b8:	103ee83a 	callr	r2
    28bc:	00000306 	br	28cc <_ZN14VideoInterface9drawPixelEiit+0x90>
void VideoInterface::drawPixel(int x, int y){
	this->drawPixel(x, y, this->color);
};

void VideoInterface::drawPixel(int x, int y, uint16_t color){
	if(x < 0 || x > this->width - 1) return;
    28c0:	0001883a 	nop
    28c4:	00000106 	br	28cc <_ZN14VideoInterface9drawPixelEiit+0x90>
	if(y < 0 || y > this->height - 1) return;
    28c8:	0001883a 	nop
	this->_internalDrawPixel(x, y, color);
};
    28cc:	e037883a 	mov	sp,fp
    28d0:	dfc00117 	ldw	ra,4(sp)
    28d4:	df000017 	ldw	fp,0(sp)
    28d8:	dec00204 	addi	sp,sp,8
    28dc:	f800283a 	ret

000028e0 <_ZN14VideoInterface8setColorEt>:

void VideoInterface::setColor(uint16_t color){
    28e0:	defffd04 	addi	sp,sp,-12
    28e4:	df000215 	stw	fp,8(sp)
    28e8:	df000204 	addi	fp,sp,8
    28ec:	e13ffe15 	stw	r4,-8(fp)
    28f0:	2805883a 	mov	r2,r5
    28f4:	e0bfff0d 	sth	r2,-4(fp)
	this->color = color;
    28f8:	e0bffe17 	ldw	r2,-8(fp)
    28fc:	e0ffff0b 	ldhu	r3,-4(fp)
    2900:	10c0020d 	sth	r3,8(r2)
};
    2904:	0001883a 	nop
    2908:	e037883a 	mov	sp,fp
    290c:	df000017 	ldw	fp,0(sp)
    2910:	dec00104 	addi	sp,sp,4
    2914:	f800283a 	ret

00002918 <_ZN14VideoInterface5clearEt>:

void VideoInterface::clear(uint16_t color){
    2918:	defff904 	addi	sp,sp,-28
    291c:	dfc00615 	stw	ra,24(sp)
    2920:	df000515 	stw	fp,20(sp)
    2924:	df000504 	addi	fp,sp,20
    2928:	e13ffe15 	stw	r4,-8(fp)
    292c:	2805883a 	mov	r2,r5
    2930:	e0bfff0d 	sth	r2,-4(fp)
	uint16_t tcol = this->color;
    2934:	e0bffe17 	ldw	r2,-8(fp)
    2938:	1080020b 	ldhu	r2,8(r2)
    293c:	e0bffd0d 	sth	r2,-12(fp)
	this->setColor(color);
    2940:	e0bfff0b 	ldhu	r2,-4(fp)
    2944:	100b883a 	mov	r5,r2
    2948:	e13ffe17 	ldw	r4,-8(fp)
    294c:	00028e00 	call	28e0 <_ZN14VideoInterface8setColorEt>
	for(int y = 0; y < height; y++){
    2950:	e03ffb15 	stw	zero,-20(fp)
    2954:	e0bffe17 	ldw	r2,-8(fp)
    2958:	10800417 	ldw	r2,16(r2)
    295c:	e0fffb17 	ldw	r3,-20(fp)
    2960:	1880110e 	bge	r3,r2,29a8 <_ZN14VideoInterface5clearEt+0x90>
		for(int x = 0; x < width; x++){
    2964:	e03ffc15 	stw	zero,-16(fp)
    2968:	e0bffe17 	ldw	r2,-8(fp)
    296c:	10800317 	ldw	r2,12(r2)
    2970:	e0fffc17 	ldw	r3,-16(fp)
    2974:	1880080e 	bge	r3,r2,2998 <_ZN14VideoInterface5clearEt+0x80>
			this->drawPixel(x, y);
    2978:	e1bffb17 	ldw	r6,-20(fp)
    297c:	e17ffc17 	ldw	r5,-16(fp)
    2980:	e13ffe17 	ldw	r4,-8(fp)
    2984:	00027e80 	call	27e8 <_ZN14VideoInterface9drawPixelEii>

void VideoInterface::clear(uint16_t color){
	uint16_t tcol = this->color;
	this->setColor(color);
	for(int y = 0; y < height; y++){
		for(int x = 0; x < width; x++){
    2988:	e0bffc17 	ldw	r2,-16(fp)
    298c:	10800044 	addi	r2,r2,1
    2990:	e0bffc15 	stw	r2,-16(fp)
    2994:	003ff406 	br	2968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002968>
};

void VideoInterface::clear(uint16_t color){
	uint16_t tcol = this->color;
	this->setColor(color);
	for(int y = 0; y < height; y++){
    2998:	e0bffb17 	ldw	r2,-20(fp)
    299c:	10800044 	addi	r2,r2,1
    29a0:	e0bffb15 	stw	r2,-20(fp)
    29a4:	003feb06 	br	2954 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002954>
		for(int x = 0; x < width; x++){
			this->drawPixel(x, y);
		}
	}
	this->setColor(tcol);
    29a8:	e0bffd0b 	ldhu	r2,-12(fp)
    29ac:	100b883a 	mov	r5,r2
    29b0:	e13ffe17 	ldw	r4,-8(fp)
    29b4:	00028e00 	call	28e0 <_ZN14VideoInterface8setColorEt>
};
    29b8:	0001883a 	nop
    29bc:	e037883a 	mov	sp,fp
    29c0:	dfc00117 	ldw	ra,4(sp)
    29c4:	df000017 	ldw	fp,0(sp)
    29c8:	dec00204 	addi	sp,sp,8
    29cc:	f800283a 	ret

000029d0 <_ZN14VideoInterface10setLineAlgE9viLineAlg>:

void VideoInterface::setLineAlg(enum viLineAlg viLA){
    29d0:	defffd04 	addi	sp,sp,-12
    29d4:	df000215 	stw	fp,8(sp)
    29d8:	df000204 	addi	fp,sp,8
    29dc:	e13ffe15 	stw	r4,-8(fp)
    29e0:	e17fff15 	stw	r5,-4(fp)
	this->viLA = viLA;
    29e4:	e0bffe17 	ldw	r2,-8(fp)
    29e8:	e0ffff17 	ldw	r3,-4(fp)
    29ec:	10c00115 	stw	r3,4(r2)
};
    29f0:	0001883a 	nop
    29f4:	e037883a 	mov	sp,fp
    29f8:	df000017 	ldw	fp,0(sp)
    29fc:	dec00104 	addi	sp,sp,4
    2a00:	f800283a 	ret

00002a04 <_ZN14VideoInterface8drawLineEiiii>:

void VideoInterface::drawLine(int x0, int y0, int x1, int y1){
    2a04:	defff804 	addi	sp,sp,-32
    2a08:	dfc00715 	stw	ra,28(sp)
    2a0c:	df000615 	stw	fp,24(sp)
    2a10:	df000604 	addi	fp,sp,24
    2a14:	e13ffc15 	stw	r4,-16(fp)
    2a18:	e17ffd15 	stw	r5,-12(fp)
    2a1c:	e1bffe15 	stw	r6,-8(fp)
    2a20:	e1ffff15 	stw	r7,-4(fp)
	this->drawLine(x0, y0, x1, y1, this->color);
    2a24:	e0bffc17 	ldw	r2,-16(fp)
    2a28:	1080020b 	ldhu	r2,8(r2)
    2a2c:	10bfffcc 	andi	r2,r2,65535
    2a30:	d8800115 	stw	r2,4(sp)
    2a34:	e0800217 	ldw	r2,8(fp)
    2a38:	d8800015 	stw	r2,0(sp)
    2a3c:	e1ffff17 	ldw	r7,-4(fp)
    2a40:	e1bffe17 	ldw	r6,-8(fp)
    2a44:	e17ffd17 	ldw	r5,-12(fp)
    2a48:	e13ffc17 	ldw	r4,-16(fp)
    2a4c:	0002a680 	call	2a68 <_ZN14VideoInterface8drawLineEiiiit>
};
    2a50:	0001883a 	nop
    2a54:	e037883a 	mov	sp,fp
    2a58:	dfc00117 	ldw	ra,4(sp)
    2a5c:	df000017 	ldw	fp,0(sp)
    2a60:	dec00204 	addi	sp,sp,8
    2a64:	f800283a 	ret

00002a68 <_ZN14VideoInterface8drawLineEiiiit>:

void VideoInterface::drawLine(int x0, int y0, int x1, int y1, uint16_t color){
    2a68:	defff704 	addi	sp,sp,-36
    2a6c:	dfc00815 	stw	ra,32(sp)
    2a70:	df000715 	stw	fp,28(sp)
    2a74:	df000704 	addi	fp,sp,28
    2a78:	e13ffb15 	stw	r4,-20(fp)
    2a7c:	e17ffc15 	stw	r5,-16(fp)
    2a80:	e1bffd15 	stw	r6,-12(fp)
    2a84:	e1fffe15 	stw	r7,-8(fp)
    2a88:	e0800317 	ldw	r2,12(fp)
    2a8c:	e0bfff0d 	sth	r2,-4(fp)
	if(this->viLA == DDA) this->_drawLineDDA(x0, y0, x1, y1, color);
    2a90:	e0bffb17 	ldw	r2,-20(fp)
    2a94:	10800117 	ldw	r2,4(r2)
    2a98:	1000091e 	bne	r2,zero,2ac0 <_ZN14VideoInterface8drawLineEiiiit+0x58>
    2a9c:	e0bfff0b 	ldhu	r2,-4(fp)
    2aa0:	d8800115 	stw	r2,4(sp)
    2aa4:	e0800217 	ldw	r2,8(fp)
    2aa8:	d8800015 	stw	r2,0(sp)
    2aac:	e1fffe17 	ldw	r7,-8(fp)
    2ab0:	e1bffd17 	ldw	r6,-12(fp)
    2ab4:	e17ffc17 	ldw	r5,-16(fp)
    2ab8:	e13ffb17 	ldw	r4,-20(fp)
    2abc:	0002c200 	call	2c20 <_ZN14VideoInterface12_drawLineDDAEiiiit>
	if(this->viLA == BRESENHAM) this->_drawLineBRESENHAM(x0, y0, x1, y1, color);
    2ac0:	e0bffb17 	ldw	r2,-20(fp)
    2ac4:	10800117 	ldw	r2,4(r2)
    2ac8:	10800058 	cmpnei	r2,r2,1
    2acc:	1000091e 	bne	r2,zero,2af4 <_ZN14VideoInterface8drawLineEiiiit+0x8c>
    2ad0:	e0bfff0b 	ldhu	r2,-4(fp)
    2ad4:	d8800115 	stw	r2,4(sp)
    2ad8:	e0800217 	ldw	r2,8(fp)
    2adc:	d8800015 	stw	r2,0(sp)
    2ae0:	e1fffe17 	ldw	r7,-8(fp)
    2ae4:	e1bffd17 	ldw	r6,-12(fp)
    2ae8:	e17ffc17 	ldw	r5,-16(fp)
    2aec:	e13ffb17 	ldw	r4,-20(fp)
    2af0:	0002de00 	call	2de0 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit>
};
    2af4:	0001883a 	nop
    2af8:	e037883a 	mov	sp,fp
    2afc:	dfc00117 	ldw	ra,4(sp)
    2b00:	df000017 	ldw	fp,0(sp)
    2b04:	dec00204 	addi	sp,sp,8
    2b08:	f800283a 	ret

00002b0c <_ZN14VideoInterface8drawRectEiiii>:

void VideoInterface::drawRect(int x, int y, int width, int height){
    2b0c:	defff804 	addi	sp,sp,-32
    2b10:	dfc00715 	stw	ra,28(sp)
    2b14:	df000615 	stw	fp,24(sp)
    2b18:	df000604 	addi	fp,sp,24
    2b1c:	e13ffc15 	stw	r4,-16(fp)
    2b20:	e17ffd15 	stw	r5,-12(fp)
    2b24:	e1bffe15 	stw	r6,-8(fp)
    2b28:	e1ffff15 	stw	r7,-4(fp)
	this->drawRect(x, y, width, height, this->color);
    2b2c:	e0bffc17 	ldw	r2,-16(fp)
    2b30:	1080020b 	ldhu	r2,8(r2)
    2b34:	10bfffcc 	andi	r2,r2,65535
    2b38:	d8800115 	stw	r2,4(sp)
    2b3c:	e0800217 	ldw	r2,8(fp)
    2b40:	d8800015 	stw	r2,0(sp)
    2b44:	e1ffff17 	ldw	r7,-4(fp)
    2b48:	e1bffe17 	ldw	r6,-8(fp)
    2b4c:	e17ffd17 	ldw	r5,-12(fp)
    2b50:	e13ffc17 	ldw	r4,-16(fp)
    2b54:	0002b700 	call	2b70 <_ZN14VideoInterface8drawRectEiiiit>
};
    2b58:	0001883a 	nop
    2b5c:	e037883a 	mov	sp,fp
    2b60:	dfc00117 	ldw	ra,4(sp)
    2b64:	df000017 	ldw	fp,0(sp)
    2b68:	dec00204 	addi	sp,sp,8
    2b6c:	f800283a 	ret

00002b70 <_ZN14VideoInterface8drawRectEiiiit>:

void VideoInterface::drawRect(int x, int y, int width, int height, uint16_t color){
    2b70:	defff704 	addi	sp,sp,-36
    2b74:	dfc00815 	stw	ra,32(sp)
    2b78:	df000715 	stw	fp,28(sp)
    2b7c:	df000704 	addi	fp,sp,28
    2b80:	e13ffb15 	stw	r4,-20(fp)
    2b84:	e17ffc15 	stw	r5,-16(fp)
    2b88:	e1bffd15 	stw	r6,-12(fp)
    2b8c:	e1fffe15 	stw	r7,-8(fp)
    2b90:	e0800317 	ldw	r2,12(fp)
    2b94:	e0bfff0d 	sth	r2,-4(fp)
	for(int _y = 0; _y < height; _y++){
    2b98:	e03ff915 	stw	zero,-28(fp)
    2b9c:	e0fff917 	ldw	r3,-28(fp)
    2ba0:	e0800217 	ldw	r2,8(fp)
    2ba4:	1880180e 	bge	r3,r2,2c08 <_ZN14VideoInterface8drawRectEiiiit+0x98>
		for(int _x = 0; _x < width; _x++){
    2ba8:	e03ffa15 	stw	zero,-24(fp)
    2bac:	e0fffa17 	ldw	r3,-24(fp)
    2bb0:	e0bffe17 	ldw	r2,-8(fp)
    2bb4:	1880100e 	bge	r3,r2,2bf8 <_ZN14VideoInterface8drawRectEiiiit+0x88>
			this->drawPixel(x + _x, y + _y, color);
    2bb8:	e0fffc17 	ldw	r3,-16(fp)
    2bbc:	e0bffa17 	ldw	r2,-24(fp)
    2bc0:	1889883a 	add	r4,r3,r2
    2bc4:	e0fffd17 	ldw	r3,-12(fp)
    2bc8:	e0bff917 	ldw	r2,-28(fp)
    2bcc:	1885883a 	add	r2,r3,r2
    2bd0:	e0ffff0b 	ldhu	r3,-4(fp)
    2bd4:	180f883a 	mov	r7,r3
    2bd8:	100d883a 	mov	r6,r2
    2bdc:	200b883a 	mov	r5,r4
    2be0:	e13ffb17 	ldw	r4,-20(fp)
    2be4:	000283c0 	call	283c <_ZN14VideoInterface9drawPixelEiit>
	this->drawRect(x, y, width, height, this->color);
};

void VideoInterface::drawRect(int x, int y, int width, int height, uint16_t color){
	for(int _y = 0; _y < height; _y++){
		for(int _x = 0; _x < width; _x++){
    2be8:	e0bffa17 	ldw	r2,-24(fp)
    2bec:	10800044 	addi	r2,r2,1
    2bf0:	e0bffa15 	stw	r2,-24(fp)
    2bf4:	003fed06 	br	2bac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002bac>
void VideoInterface::drawRect(int x, int y, int width, int height){
	this->drawRect(x, y, width, height, this->color);
};

void VideoInterface::drawRect(int x, int y, int width, int height, uint16_t color){
	for(int _y = 0; _y < height; _y++){
    2bf8:	e0bff917 	ldw	r2,-28(fp)
    2bfc:	10800044 	addi	r2,r2,1
    2c00:	e0bff915 	stw	r2,-28(fp)
    2c04:	003fe506 	br	2b9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002b9c>
		for(int _x = 0; _x < width; _x++){
			this->drawPixel(x + _x, y + _y, color);
		}
	}
};
    2c08:	0001883a 	nop
    2c0c:	e037883a 	mov	sp,fp
    2c10:	dfc00117 	ldw	ra,4(sp)
    2c14:	df000017 	ldw	fp,0(sp)
    2c18:	dec00204 	addi	sp,sp,8
    2c1c:	f800283a 	ret

00002c20 <_ZN14VideoInterface12_drawLineDDAEiiiit>:

void VideoInterface::_drawLineDDA(int x0, int y0, int x1, int y1, uint16_t color){
    2c20:	defff204 	addi	sp,sp,-56
    2c24:	dfc00d15 	stw	ra,52(sp)
    2c28:	df000c15 	stw	fp,48(sp)
    2c2c:	dc000b15 	stw	r16,44(sp)
    2c30:	df000c04 	addi	fp,sp,48
    2c34:	e13ffa15 	stw	r4,-24(fp)
    2c38:	e17ffb15 	stw	r5,-20(fp)
    2c3c:	e1bffc15 	stw	r6,-16(fp)
    2c40:	e1fffd15 	stw	r7,-12(fp)
    2c44:	e0800317 	ldw	r2,12(fp)
    2c48:	e0bffe0d 	sth	r2,-8(fp)
	float x, y, dx, dy, step;

	dx = (float)abs(x1 - x0);
    2c4c:	e0fffd17 	ldw	r3,-12(fp)
    2c50:	e0bffb17 	ldw	r2,-20(fp)
    2c54:	1885c83a 	sub	r2,r3,r2
    2c58:	1000010e 	bge	r2,zero,2c60 <_ZN14VideoInterface12_drawLineDDAEiiiit+0x40>
    2c5c:	0085c83a 	sub	r2,zero,r2
    2c60:	1009883a 	mov	r4,r2
    2c64:	00059580 	call	5958 <__floatsisf>
    2c68:	1007883a 	mov	r3,r2
    2c6c:	e0fff715 	stw	r3,-36(fp)
	dy = (float)abs(y1 - y0);
    2c70:	e0c00217 	ldw	r3,8(fp)
    2c74:	e0bffc17 	ldw	r2,-16(fp)
    2c78:	1885c83a 	sub	r2,r3,r2
    2c7c:	1000010e 	bge	r2,zero,2c84 <_ZN14VideoInterface12_drawLineDDAEiiiit+0x64>
    2c80:	0085c83a 	sub	r2,zero,r2
    2c84:	1009883a 	mov	r4,r2
    2c88:	00059580 	call	5958 <__floatsisf>
    2c8c:	1007883a 	mov	r3,r2
    2c90:	e0fff815 	stw	r3,-32(fp)

	step = (dx >= dy) ? dx : dy;
    2c94:	e17ff817 	ldw	r5,-32(fp)
    2c98:	e13ff717 	ldw	r4,-36(fp)
    2c9c:	00057640 	call	5764 <__gesf2>
    2ca0:	10000216 	blt	r2,zero,2cac <_ZN14VideoInterface12_drawLineDDAEiiiit+0x8c>
    2ca4:	e0bff717 	ldw	r2,-36(fp)
    2ca8:	00000106 	br	2cb0 <_ZN14VideoInterface12_drawLineDDAEiiiit+0x90>
    2cac:	e0bff817 	ldw	r2,-32(fp)
    2cb0:	e0bff915 	stw	r2,-28(fp)

	dx = dx / step;
    2cb4:	e0fff717 	ldw	r3,-36(fp)
    2cb8:	e0bff917 	ldw	r2,-28(fp)
    2cbc:	1885fff2 	custom	255,r2,r3,r2
    2cc0:	e0bff715 	stw	r2,-36(fp)
	dy = dy / step;
    2cc4:	e0fff817 	ldw	r3,-32(fp)
    2cc8:	e0bff917 	ldw	r2,-28(fp)
    2ccc:	1885fff2 	custom	255,r2,r3,r2
    2cd0:	e0bff815 	stw	r2,-32(fp)

	x = x0;
    2cd4:	e13ffb17 	ldw	r4,-20(fp)
    2cd8:	00059580 	call	5958 <__floatsisf>
    2cdc:	1007883a 	mov	r3,r2
    2ce0:	e0fff415 	stw	r3,-48(fp)
	y = y0;
    2ce4:	e13ffc17 	ldw	r4,-16(fp)
    2ce8:	00059580 	call	5958 <__floatsisf>
    2cec:	1007883a 	mov	r3,r2
    2cf0:	e0fff515 	stw	r3,-44(fp)

	for(int i = 0; i < step; i++){
    2cf4:	e03ff615 	stw	zero,-40(fp)
    2cf8:	e13ff617 	ldw	r4,-40(fp)
    2cfc:	00059580 	call	5958 <__floatsisf>
    2d00:	1007883a 	mov	r3,r2
    2d04:	e17ff917 	ldw	r5,-28(fp)
    2d08:	1809883a 	mov	r4,r3
    2d0c:	00058200 	call	5820 <__lesf2>
    2d10:	10000116 	blt	r2,zero,2d18 <_ZN14VideoInterface12_drawLineDDAEiiiit+0xf8>
		this->drawPixel(round(x), round(y), color);
		x += dx;
		y += dy;
	}
};
    2d14:	00002c06 	br	2dc8 <_ZN14VideoInterface12_drawLineDDAEiiiit+0x1a8>

	x = x0;
	y = y0;

	for(int i = 0; i < step; i++){
		this->drawPixel(round(x), round(y), color);
    2d18:	e13ff417 	ldw	r4,-48(fp)
    2d1c:	00064840 	call	6484 <__extendsfdf2>
    2d20:	100b883a 	mov	r5,r2
    2d24:	180d883a 	mov	r6,r3
    2d28:	2809883a 	mov	r4,r5
    2d2c:	300b883a 	mov	r5,r6
    2d30:	00051180 	call	5118 <round>
    2d34:	100b883a 	mov	r5,r2
    2d38:	180d883a 	mov	r6,r3
    2d3c:	2809883a 	mov	r4,r5
    2d40:	300b883a 	mov	r5,r6
    2d44:	00063280 	call	6328 <__fixdfsi>
    2d48:	1021883a 	mov	r16,r2
    2d4c:	e13ff517 	ldw	r4,-44(fp)
    2d50:	00064840 	call	6484 <__extendsfdf2>
    2d54:	100b883a 	mov	r5,r2
    2d58:	180d883a 	mov	r6,r3
    2d5c:	2809883a 	mov	r4,r5
    2d60:	300b883a 	mov	r5,r6
    2d64:	00051180 	call	5118 <round>
    2d68:	100b883a 	mov	r5,r2
    2d6c:	180d883a 	mov	r6,r3
    2d70:	2809883a 	mov	r4,r5
    2d74:	300b883a 	mov	r5,r6
    2d78:	00063280 	call	6328 <__fixdfsi>
    2d7c:	1007883a 	mov	r3,r2
    2d80:	e0bffe0b 	ldhu	r2,-8(fp)
    2d84:	100f883a 	mov	r7,r2
    2d88:	180d883a 	mov	r6,r3
    2d8c:	800b883a 	mov	r5,r16
    2d90:	e13ffa17 	ldw	r4,-24(fp)
    2d94:	000283c0 	call	283c <_ZN14VideoInterface9drawPixelEiit>
		x += dx;
    2d98:	e0fff417 	ldw	r3,-48(fp)
    2d9c:	e0bff717 	ldw	r2,-36(fp)
    2da0:	1885ff72 	custom	253,r2,r3,r2
    2da4:	e0bff415 	stw	r2,-48(fp)
		y += dy;
    2da8:	e0fff517 	ldw	r3,-44(fp)
    2dac:	e0bff817 	ldw	r2,-32(fp)
    2db0:	1885ff72 	custom	253,r2,r3,r2
    2db4:	e0bff515 	stw	r2,-44(fp)
	dy = dy / step;

	x = x0;
	y = y0;

	for(int i = 0; i < step; i++){
    2db8:	e0bff617 	ldw	r2,-40(fp)
    2dbc:	10800044 	addi	r2,r2,1
    2dc0:	e0bff615 	stw	r2,-40(fp)
    2dc4:	003fcc06 	br	2cf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002cf8>
		this->drawPixel(round(x), round(y), color);
		x += dx;
		y += dy;
	}
};
    2dc8:	e6ffff04 	addi	sp,fp,-4
    2dcc:	dfc00217 	ldw	ra,8(sp)
    2dd0:	df000117 	ldw	fp,4(sp)
    2dd4:	dc000017 	ldw	r16,0(sp)
    2dd8:	dec00304 	addi	sp,sp,12
    2ddc:	f800283a 	ret

00002de0 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit>:

void VideoInterface::_drawLineBRESENHAM(int x0, int y0, int x1, int y1, uint16_t color){
    2de0:	deffea04 	addi	sp,sp,-88
    2de4:	dfc01515 	stw	ra,84(sp)
    2de8:	df001415 	stw	fp,80(sp)
    2dec:	dcc01315 	stw	r19,76(sp)
    2df0:	dc801215 	stw	r18,72(sp)
    2df4:	dc401115 	stw	r17,68(sp)
    2df8:	dc001015 	stw	r16,64(sp)
    2dfc:	df001404 	addi	fp,sp,80
    2e00:	e13ff715 	stw	r4,-36(fp)
    2e04:	e17ff815 	stw	r5,-32(fp)
    2e08:	e1bff915 	stw	r6,-28(fp)
    2e0c:	e1fffa15 	stw	r7,-24(fp)
    2e10:	e0800317 	ldw	r2,12(fp)
    2e14:	e0bffb0d 	sth	r2,-20(fp)
	int x, y, dx, dy, dx1, dy1, px, py, xe, ye, i;
	dx = x1 - x0;
    2e18:	e0fffa17 	ldw	r3,-24(fp)
    2e1c:	e0bff817 	ldw	r2,-32(fp)
    2e20:	1885c83a 	sub	r2,r3,r2
    2e24:	e0bff315 	stw	r2,-52(fp)
	dy = y1 - y0;
    2e28:	e0c00217 	ldw	r3,8(fp)
    2e2c:	e0bff917 	ldw	r2,-28(fp)
    2e30:	1885c83a 	sub	r2,r3,r2
    2e34:	e0bff415 	stw	r2,-48(fp)
	dx1 = fabs(dx);
    2e38:	e13ff317 	ldw	r4,-52(fp)
    2e3c:	00063a80 	call	63a8 <__floatsidf>
    2e40:	1009883a 	mov	r4,r2
    2e44:	180b883a 	mov	r5,r3
    2e48:	2025883a 	mov	r18,r4
    2e4c:	00a00034 	movhi	r2,32768
    2e50:	10bfffc4 	addi	r2,r2,-1
    2e54:	28a6703a 	and	r19,r5,r2
    2e58:	9009883a 	mov	r4,r18
    2e5c:	980b883a 	mov	r5,r19
    2e60:	00063280 	call	6328 <__fixdfsi>
    2e64:	e0bff515 	stw	r2,-44(fp)
	dy1 = fabs(dy);
    2e68:	e13ff417 	ldw	r4,-48(fp)
    2e6c:	00063a80 	call	63a8 <__floatsidf>
    2e70:	1009883a 	mov	r4,r2
    2e74:	180b883a 	mov	r5,r3
    2e78:	2021883a 	mov	r16,r4
    2e7c:	00a00034 	movhi	r2,32768
    2e80:	10bfffc4 	addi	r2,r2,-1
    2e84:	28a2703a 	and	r17,r5,r2
    2e88:	8009883a 	mov	r4,r16
    2e8c:	880b883a 	mov	r5,r17
    2e90:	00063280 	call	6328 <__fixdfsi>
    2e94:	e0bff615 	stw	r2,-40(fp)
	px = 2*dy1 - dx1;
    2e98:	e0bff617 	ldw	r2,-40(fp)
    2e9c:	1085883a 	add	r2,r2,r2
    2ea0:	1007883a 	mov	r3,r2
    2ea4:	e0bff517 	ldw	r2,-44(fp)
    2ea8:	1885c83a 	sub	r2,r3,r2
    2eac:	e0bfee15 	stw	r2,-72(fp)
	py = 2*dx1 - dy1;
    2eb0:	e0bff517 	ldw	r2,-44(fp)
    2eb4:	1085883a 	add	r2,r2,r2
    2eb8:	1007883a 	mov	r3,r2
    2ebc:	e0bff617 	ldw	r2,-40(fp)
    2ec0:	1885c83a 	sub	r2,r3,r2
    2ec4:	e0bfef15 	stw	r2,-68(fp)
	if(dy1 <= dx1 ){
    2ec8:	e0bff617 	ldw	r2,-40(fp)
    2ecc:	e0fff517 	ldw	r3,-44(fp)
    2ed0:	18804616 	blt	r3,r2,2fec <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x20c>
		if(dx >= 0){
    2ed4:	e0bff317 	ldw	r2,-52(fp)
    2ed8:	10000716 	blt	r2,zero,2ef8 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x118>
			x = x0;
    2edc:	e0bff817 	ldw	r2,-32(fp)
    2ee0:	e0bfec15 	stw	r2,-80(fp)
			y = y0;
    2ee4:	e0bff917 	ldw	r2,-28(fp)
    2ee8:	e0bfed15 	stw	r2,-76(fp)
			xe = x1;
    2eec:	e0bffa17 	ldw	r2,-24(fp)
    2ef0:	e0bff015 	stw	r2,-64(fp)
    2ef4:	00000606 	br	2f10 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x130>
		}else{
			x = x1;
    2ef8:	e0bffa17 	ldw	r2,-24(fp)
    2efc:	e0bfec15 	stw	r2,-80(fp)
			y = y1;
    2f00:	e0800217 	ldw	r2,8(fp)
    2f04:	e0bfed15 	stw	r2,-76(fp)
			xe = x0;
    2f08:	e0bff817 	ldw	r2,-32(fp)
    2f0c:	e0bff015 	stw	r2,-64(fp)
		}
		this->drawPixel(x, y, color);
    2f10:	e0bffb0b 	ldhu	r2,-20(fp)
    2f14:	100f883a 	mov	r7,r2
    2f18:	e1bfed17 	ldw	r6,-76(fp)
    2f1c:	e17fec17 	ldw	r5,-80(fp)
    2f20:	e13ff717 	ldw	r4,-36(fp)
    2f24:	000283c0 	call	283c <_ZN14VideoInterface9drawPixelEiit>
		for(i = 0; x < xe; i++){
    2f28:	e03ff215 	stw	zero,-56(fp)
    2f2c:	e0ffec17 	ldw	r3,-80(fp)
    2f30:	e0bff017 	ldw	r2,-64(fp)
    2f34:	1880730e 	bge	r3,r2,3104 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x324>
			x += 1;
    2f38:	e0bfec17 	ldw	r2,-80(fp)
    2f3c:	10800044 	addi	r2,r2,1
    2f40:	e0bfec15 	stw	r2,-80(fp)
			if(px < 0){
    2f44:	e0bfee17 	ldw	r2,-72(fp)
    2f48:	1000070e 	bge	r2,zero,2f68 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x188>
				px += 2*dy1;
    2f4c:	e0bff617 	ldw	r2,-40(fp)
    2f50:	1085883a 	add	r2,r2,r2
    2f54:	1007883a 	mov	r3,r2
    2f58:	e0bfee17 	ldw	r2,-72(fp)
    2f5c:	10c5883a 	add	r2,r2,r3
    2f60:	e0bfee15 	stw	r2,-72(fp)
    2f64:	00001706 	br	2fc4 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x1e4>
			}else{
				if((dx < 0 && dy < 0)||(dx > 0 && dy > 0)){
    2f68:	e0bff317 	ldw	r2,-52(fp)
    2f6c:	1000020e 	bge	r2,zero,2f78 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x198>
    2f70:	e0bff417 	ldw	r2,-48(fp)
    2f74:	10000416 	blt	r2,zero,2f88 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x1a8>
    2f78:	e0bff317 	ldw	r2,-52(fp)
    2f7c:	0080060e 	bge	zero,r2,2f98 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x1b8>
    2f80:	e0bff417 	ldw	r2,-48(fp)
    2f84:	0080040e 	bge	zero,r2,2f98 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x1b8>
					y += 1;
    2f88:	e0bfed17 	ldw	r2,-76(fp)
    2f8c:	10800044 	addi	r2,r2,1
    2f90:	e0bfed15 	stw	r2,-76(fp)
    2f94:	00000306 	br	2fa4 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x1c4>
				}else{
					y -= 1;
    2f98:	e0bfed17 	ldw	r2,-76(fp)
    2f9c:	10bfffc4 	addi	r2,r2,-1
    2fa0:	e0bfed15 	stw	r2,-76(fp)
				}
				px = px + 2*(dy1 - dx1);
    2fa4:	e0fff617 	ldw	r3,-40(fp)
    2fa8:	e0bff517 	ldw	r2,-44(fp)
    2fac:	1885c83a 	sub	r2,r3,r2
    2fb0:	1085883a 	add	r2,r2,r2
    2fb4:	1007883a 	mov	r3,r2
    2fb8:	e0bfee17 	ldw	r2,-72(fp)
    2fbc:	10c5883a 	add	r2,r2,r3
    2fc0:	e0bfee15 	stw	r2,-72(fp)
			}
			this->drawPixel(x, y, color);
    2fc4:	e0bffb0b 	ldhu	r2,-20(fp)
    2fc8:	100f883a 	mov	r7,r2
    2fcc:	e1bfed17 	ldw	r6,-76(fp)
    2fd0:	e17fec17 	ldw	r5,-80(fp)
    2fd4:	e13ff717 	ldw	r4,-36(fp)
    2fd8:	000283c0 	call	283c <_ZN14VideoInterface9drawPixelEiit>
			x = x1;
			y = y1;
			xe = x0;
		}
		this->drawPixel(x, y, color);
		for(i = 0; x < xe; i++){
    2fdc:	e0bff217 	ldw	r2,-56(fp)
    2fe0:	10800044 	addi	r2,r2,1
    2fe4:	e0bff215 	stw	r2,-56(fp)
    2fe8:	003fd006 	br	2f2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002f2c>
				px = px + 2*(dy1 - dx1);
			}
			this->drawPixel(x, y, color);
		}
	}else{
		if(dy >= 0){
    2fec:	e0bff417 	ldw	r2,-48(fp)
    2ff0:	10000716 	blt	r2,zero,3010 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x230>
			x = x0;
    2ff4:	e0bff817 	ldw	r2,-32(fp)
    2ff8:	e0bfec15 	stw	r2,-80(fp)
			y = y0;
    2ffc:	e0bff917 	ldw	r2,-28(fp)
    3000:	e0bfed15 	stw	r2,-76(fp)
			ye = y1;
    3004:	e0800217 	ldw	r2,8(fp)
    3008:	e0bff115 	stw	r2,-60(fp)
    300c:	00000606 	br	3028 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x248>
		}else{
			x = x1;
    3010:	e0bffa17 	ldw	r2,-24(fp)
    3014:	e0bfec15 	stw	r2,-80(fp)
			y = y1;
    3018:	e0800217 	ldw	r2,8(fp)
    301c:	e0bfed15 	stw	r2,-76(fp)
			ye = y0;
    3020:	e0bff917 	ldw	r2,-28(fp)
    3024:	e0bff115 	stw	r2,-60(fp)
		}
		this->drawPixel(x, y, color);
    3028:	e0bffb0b 	ldhu	r2,-20(fp)
    302c:	100f883a 	mov	r7,r2
    3030:	e1bfed17 	ldw	r6,-76(fp)
    3034:	e17fec17 	ldw	r5,-80(fp)
    3038:	e13ff717 	ldw	r4,-36(fp)
    303c:	000283c0 	call	283c <_ZN14VideoInterface9drawPixelEiit>
		for(i = 0;y < ye; i++){
    3040:	e03ff215 	stw	zero,-56(fp)
    3044:	e0ffed17 	ldw	r3,-76(fp)
    3048:	e0bff117 	ldw	r2,-60(fp)
    304c:	18802d0e 	bge	r3,r2,3104 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x324>
			y += 1;
    3050:	e0bfed17 	ldw	r2,-76(fp)
    3054:	10800044 	addi	r2,r2,1
    3058:	e0bfed15 	stw	r2,-76(fp)
			if(py <= 0){
    305c:	e0bfef17 	ldw	r2,-68(fp)
    3060:	00800716 	blt	zero,r2,3080 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x2a0>
				py = py + 2*dx1;
    3064:	e0bff517 	ldw	r2,-44(fp)
    3068:	1085883a 	add	r2,r2,r2
    306c:	1007883a 	mov	r3,r2
    3070:	e0bfef17 	ldw	r2,-68(fp)
    3074:	10c5883a 	add	r2,r2,r3
    3078:	e0bfef15 	stw	r2,-68(fp)
    307c:	00001706 	br	30dc <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x2fc>
			}else{
				if((dx < 0 && dy < 0)||(dx > 0 && dy > 0)){
    3080:	e0bff317 	ldw	r2,-52(fp)
    3084:	1000020e 	bge	r2,zero,3090 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x2b0>
    3088:	e0bff417 	ldw	r2,-48(fp)
    308c:	10000416 	blt	r2,zero,30a0 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x2c0>
    3090:	e0bff317 	ldw	r2,-52(fp)
    3094:	0080060e 	bge	zero,r2,30b0 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x2d0>
    3098:	e0bff417 	ldw	r2,-48(fp)
    309c:	0080040e 	bge	zero,r2,30b0 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x2d0>
					x += 1;
    30a0:	e0bfec17 	ldw	r2,-80(fp)
    30a4:	10800044 	addi	r2,r2,1
    30a8:	e0bfec15 	stw	r2,-80(fp)
    30ac:	00000306 	br	30bc <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x2dc>
				}else{
					x -= 1;
    30b0:	e0bfec17 	ldw	r2,-80(fp)
    30b4:	10bfffc4 	addi	r2,r2,-1
    30b8:	e0bfec15 	stw	r2,-80(fp)
				}
				py = py + 2*(dx1 - dy1);
    30bc:	e0fff517 	ldw	r3,-44(fp)
    30c0:	e0bff617 	ldw	r2,-40(fp)
    30c4:	1885c83a 	sub	r2,r3,r2
    30c8:	1085883a 	add	r2,r2,r2
    30cc:	1007883a 	mov	r3,r2
    30d0:	e0bfef17 	ldw	r2,-68(fp)
    30d4:	10c5883a 	add	r2,r2,r3
    30d8:	e0bfef15 	stw	r2,-68(fp)
			}
			this->drawPixel(x, y, color);
    30dc:	e0bffb0b 	ldhu	r2,-20(fp)
    30e0:	100f883a 	mov	r7,r2
    30e4:	e1bfed17 	ldw	r6,-76(fp)
    30e8:	e17fec17 	ldw	r5,-80(fp)
    30ec:	e13ff717 	ldw	r4,-36(fp)
    30f0:	000283c0 	call	283c <_ZN14VideoInterface9drawPixelEiit>
			x = x1;
			y = y1;
			ye = y0;
		}
		this->drawPixel(x, y, color);
		for(i = 0;y < ye; i++){
    30f4:	e0bff217 	ldw	r2,-56(fp)
    30f8:	10800044 	addi	r2,r2,1
    30fc:	e0bff215 	stw	r2,-56(fp)
    3100:	003fd006 	br	3044 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003044>
				py = py + 2*(dx1 - dy1);
			}
			this->drawPixel(x, y, color);
		}
	}
};
    3104:	0001883a 	nop
    3108:	e6fffc04 	addi	sp,fp,-16
    310c:	dfc00517 	ldw	ra,20(sp)
    3110:	df000417 	ldw	fp,16(sp)
    3114:	dcc00317 	ldw	r19,12(sp)
    3118:	dc800217 	ldw	r18,8(sp)
    311c:	dc400117 	ldw	r17,4(sp)
    3120:	dc000017 	ldw	r16,0(sp)
    3124:	dec00604 	addi	sp,sp,24
    3128:	f800283a 	ret

0000312c <_Z4JTAGPKc>:
#define TASK1_PRIORITY      1
#define TASK2_PRIORITY      2
#define TASK3_PRIORITY      3

void JTAG(const char* str)
{
    312c:	defffc04 	addi	sp,sp,-16
    3130:	df000315 	stw	fp,12(sp)
    3134:	df000304 	addi	fp,sp,12
    3138:	e13fff15 	stw	r4,-4(fp)
	volatile int * JTAG_UART_ptr 	= (int *) 0x10001000;
    313c:	00840034 	movhi	r2,4096
    3140:	10840004 	addi	r2,r2,4096
    3144:	e0bffd15 	stw	r2,-12(fp)
	int control = *(JTAG_UART_ptr + 1);
    3148:	e0bffd17 	ldw	r2,-12(fp)
    314c:	10800104 	addi	r2,r2,4
    3150:	10800017 	ldw	r2,0(r2)
    3154:	e0bffe15 	stw	r2,-8(fp)
	while(*(str)){
    3158:	e0bfff17 	ldw	r2,-4(fp)
    315c:	10800003 	ldbu	r2,0(r2)
    3160:	10803fcc 	andi	r2,r2,255
    3164:	1080201c 	xori	r2,r2,128
    3168:	10bfe004 	addi	r2,r2,-128
    316c:	10000d26 	beq	r2,zero,31a4 <_Z4JTAGPKc+0x78>
		if (control & 0xFFFF0000)
    3170:	e0bffe17 	ldw	r2,-8(fp)
    3174:	10bfffec 	andhi	r2,r2,65535
    3178:	103ff726 	beq	r2,zero,3158 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003158>
			*(JTAG_UART_ptr) = *(str++);
    317c:	e0bfff17 	ldw	r2,-4(fp)
    3180:	10c00044 	addi	r3,r2,1
    3184:	e0ffff15 	stw	r3,-4(fp)
    3188:	10800003 	ldbu	r2,0(r2)
    318c:	10c03fcc 	andi	r3,r2,255
    3190:	18c0201c 	xori	r3,r3,128
    3194:	18ffe004 	addi	r3,r3,-128
    3198:	e0bffd17 	ldw	r2,-12(fp)
    319c:	10c00015 	stw	r3,0(r2)

void JTAG(const char* str)
{
	volatile int * JTAG_UART_ptr 	= (int *) 0x10001000;
	int control = *(JTAG_UART_ptr + 1);
	while(*(str)){
    31a0:	003fed06 	br	3158 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003158>
		if (control & 0xFFFF0000)
			*(JTAG_UART_ptr) = *(str++);
	}
}
    31a4:	0001883a 	nop
    31a8:	e037883a 	mov	sp,fp
    31ac:	df000017 	ldw	fp,0(sp)
    31b0:	dec00104 	addi	sp,sp,4
    31b4:	f800283a 	ret

000031b8 <main>:

void GameLoop(void* pdata);
void gfxLoop(void* pdata);
void inputLoop(void* pdata);

int main(void){
    31b8:	defd3c04 	addi	sp,sp,-2832
    31bc:	dfc2c315 	stw	ra,2828(sp)
    31c0:	df02c215 	stw	fp,2824(sp)
    31c4:	df02c204 	addi	fp,sp,2824
	JTAG("Starting App\r\n");
    31c8:	010000b4 	movhi	r4,2
    31cc:	213f1c04 	addi	r4,r4,-912
    31d0:	000312c0 	call	312c <_Z4JTAGPKc>

	VGA vga((short*)0x08000000, 320, 240, 1);
    31d4:	00800044 	movi	r2,1
    31d8:	d8800015 	stw	r2,0(sp)
    31dc:	01c03c04 	movi	r7,240
    31e0:	01805004 	movi	r6,320
    31e4:	01420034 	movhi	r5,2048
    31e8:	e13d3f04 	addi	r4,fp,-2820
    31ec:	000269c0 	call	269c <_ZN3VGAC1EPsiii>
	Keyboard kb;
    31f0:	e0bd4604 	addi	r2,fp,-2792
    31f4:	1009883a 	mov	r4,r2
    31f8:	0001f200 	call	1f20 <_ZN8KeyboardC1Ev>
	Game game(&kb, &vga);
    31fc:	e0fd4604 	addi	r3,fp,-2792
    3200:	e0bd4a04 	addi	r2,fp,-2776
    3204:	e1bd3f04 	addi	r6,fp,-2820
    3208:	180b883a 	mov	r5,r3
    320c:	1009883a 	mov	r4,r2
    3210:	00005700 	call	570 <_ZN4GameC1EP19ControllerInterfaceP14VideoInterface>

	OSTaskCreate(gfxLoop,  (void*) &game, &task1_stk[TASK_STACKSIZE-1],  TASK1_PRIORITY);
    3214:	e0bd4a04 	addi	r2,fp,-2776
    3218:	01c00044 	movi	r7,1
    321c:	018000b4 	movhi	r6,2
    3220:	31992704 	addi	r6,r6,25756
    3224:	100b883a 	mov	r5,r2
    3228:	01000034 	movhi	r4,0
    322c:	210ca404 	addi	r4,r4,12944
    3230:	0019b8c0 	call	19b8c <OSTaskCreate>
	OSTaskCreate(inputLoop,(void*) &kb, &task2_stk[TASK_STACKSIZE-1],  TASK2_PRIORITY);
    3234:	e0bd4604 	addi	r2,fp,-2792
    3238:	01c00084 	movi	r7,2
    323c:	018000f4 	movhi	r6,3
    3240:	31a12704 	addi	r6,r6,-31588
    3244:	100b883a 	mov	r5,r2
    3248:	01000034 	movhi	r4,0
    324c:	210cb604 	addi	r4,r4,13016
    3250:	0019b8c0 	call	19b8c <OSTaskCreate>
	OSTaskCreate(GameLoop, (void*) &game, &task3_stk[TASK_STACKSIZE-1],  TASK3_PRIORITY);
    3254:	e0bd4a04 	addi	r2,fp,-2776
    3258:	01c000c4 	movi	r7,3
    325c:	018000f4 	movhi	r6,3
    3260:	31a92704 	addi	r6,r6,-23396
    3264:	100b883a 	mov	r5,r2
    3268:	01000034 	movhi	r4,0
    326c:	210ccb04 	addi	r4,r4,13100
    3270:	0019b8c0 	call	19b8c <OSTaskCreate>

	OSStart();
    3274:	00146900 	call	14690 <OSStart>
	return 0;
    3278:	0005883a 	mov	r2,zero
}
    327c:	e037883a 	mov	sp,fp
    3280:	dfc00117 	ldw	ra,4(sp)
    3284:	df000017 	ldw	fp,0(sp)
    3288:	dec00204 	addi	sp,sp,8
    328c:	f800283a 	ret

00003290 <_Z7gfxLoopPv>:

void gfxLoop(void* pdata){
    3290:	defffc04 	addi	sp,sp,-16
    3294:	dfc00315 	stw	ra,12(sp)
    3298:	df000215 	stw	fp,8(sp)
    329c:	df000204 	addi	fp,sp,8
    32a0:	e13fff15 	stw	r4,-4(fp)
	JTAG("GFX Started\r\n");
    32a4:	010000b4 	movhi	r4,2
    32a8:	213f2004 	addi	r4,r4,-896
    32ac:	000312c0 	call	312c <_Z4JTAGPKc>

	Game* game = (Game*) pdata;
    32b0:	e0bfff17 	ldw	r2,-4(fp)
    32b4:	e0bffe15 	stw	r2,-8(fp)
	while(1){
		game->draw();
    32b8:	e13ffe17 	ldw	r4,-8(fp)
    32bc:	0000d980 	call	d98 <_ZN4Game4drawEv>
		OSTimeDlyHMSM(0, 0, 0, 100);
    32c0:	01c01904 	movi	r7,100
    32c4:	000d883a 	mov	r6,zero
    32c8:	000b883a 	mov	r5,zero
    32cc:	0009883a 	mov	r4,zero
    32d0:	001af0c0 	call	1af0c <OSTimeDlyHMSM>

void gfxLoop(void* pdata){
	JTAG("GFX Started\r\n");

	Game* game = (Game*) pdata;
	while(1){
    32d4:	003ff806 	br	32b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70032b8>

000032d8 <_Z9inputLoopPv>:
		game->draw();
		OSTimeDlyHMSM(0, 0, 0, 100);
	}
}

void inputLoop(void* pdata){
    32d8:	defffc04 	addi	sp,sp,-16
    32dc:	dfc00315 	stw	ra,12(sp)
    32e0:	df000215 	stw	fp,8(sp)
    32e4:	df000204 	addi	fp,sp,8
    32e8:	e13fff15 	stw	r4,-4(fp)
	JTAG("Input polling started \r\n");
    32ec:	010000b4 	movhi	r4,2
    32f0:	213f2404 	addi	r4,r4,-880
    32f4:	000312c0 	call	312c <_Z4JTAGPKc>

	Keyboard* kb = (Keyboard*) pdata;
    32f8:	e0bfff17 	ldw	r2,-4(fp)
    32fc:	e0bffe15 	stw	r2,-8(fp)


	while(1)
	{
		kb->update();
    3300:	e0bffe17 	ldw	r2,-8(fp)
    3304:	10800017 	ldw	r2,0(r2)
    3308:	10800017 	ldw	r2,0(r2)
    330c:	e13ffe17 	ldw	r4,-8(fp)
    3310:	103ee83a 	callr	r2
		OSTimeDlyHMSM(0, 0, 0, 100);
    3314:	01c01904 	movi	r7,100
    3318:	000d883a 	mov	r6,zero
    331c:	000b883a 	mov	r5,zero
    3320:	0009883a 	mov	r4,zero
    3324:	001af0c0 	call	1af0c <OSTimeDlyHMSM>
	JTAG("Input polling started \r\n");

	Keyboard* kb = (Keyboard*) pdata;


	while(1)
    3328:	003ff506 	br	3300 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003300>

0000332c <_Z8GameLoopPv>:
		kb->update();
		OSTimeDlyHMSM(0, 0, 0, 100);
	}
}

void GameLoop(void* pdata){
    332c:	defffc04 	addi	sp,sp,-16
    3330:	dfc00315 	stw	ra,12(sp)
    3334:	df000215 	stw	fp,8(sp)
    3338:	df000204 	addi	fp,sp,8
    333c:	e13fff15 	stw	r4,-4(fp)
	Game* game = (Game*) pdata;
    3340:	e0bfff17 	ldw	r2,-4(fp)
    3344:	e0bffe15 	stw	r2,-8(fp)

	while (1)
	{
		game->update(100);
    3348:	01401904 	movi	r5,100
    334c:	e13ffe17 	ldw	r4,-8(fp)
    3350:	00006440 	call	644 <_ZN4Game6updateEi>
		OSTimeDlyHMSM(0, 0, 0, 100);
    3354:	01c01904 	movi	r7,100
    3358:	000d883a 	mov	r6,zero
    335c:	000b883a 	mov	r5,zero
    3360:	0009883a 	mov	r4,zero
    3364:	001af0c0 	call	1af0c <OSTimeDlyHMSM>
}

void GameLoop(void* pdata){
	Game* game = (Game*) pdata;

	while (1)
    3368:	003ff706 	br	3348 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003348>

0000336c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    336c:	008000b4 	movhi	r2,2
    3370:	10bf3a04 	addi	r2,r2,-792
    3374:	20800015 	stw	r2,0(r4)
    3378:	00036c01 	jmpi	36c0 <_ZN10__cxxabiv117__class_type_infoD1Ev>

0000337c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    337c:	defffe04 	addi	sp,sp,-8
    3380:	008000b4 	movhi	r2,2
    3384:	dc000015 	stw	r16,0(sp)
    3388:	dfc00115 	stw	ra,4(sp)
    338c:	10bf3a04 	addi	r2,r2,-792
    3390:	20800015 	stw	r2,0(r4)
    3394:	2021883a 	mov	r16,r4
    3398:	00036c00 	call	36c0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    339c:	8009883a 	mov	r4,r16
    33a0:	dfc00117 	ldw	ra,4(sp)
    33a4:	dc000017 	ldw	r16,0(sp)
    33a8:	dec00204 	addi	sp,sp,8
    33ac:	00039941 	jmpi	3994 <_ZdlPv>

000033b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    33b0:	defff504 	addi	sp,sp,-44
    33b4:	dc000115 	stw	r16,4(sp)
    33b8:	38800117 	ldw	r2,4(r7)
    33bc:	24000117 	ldw	r16,4(r4)
    33c0:	df000915 	stw	fp,36(sp)
    33c4:	ddc00815 	stw	r23,32(sp)
    33c8:	dd800715 	stw	r22,28(sp)
    33cc:	dcc00415 	stw	r19,16(sp)
    33d0:	dc800315 	stw	r18,12(sp)
    33d4:	dc400215 	stw	r17,8(sp)
    33d8:	dfc00a15 	stw	ra,40(sp)
    33dc:	dd400615 	stw	r21,24(sp)
    33e0:	dd000515 	stw	r20,20(sp)
    33e4:	2823883a 	mov	r17,r5
    33e8:	3039883a 	mov	fp,r6
    33ec:	dcc00b17 	ldw	r19,44(sp)
    33f0:	ddc00c17 	ldw	r23,48(sp)
    33f4:	dd800d17 	ldw	r22,52(sp)
    33f8:	dc800e17 	ldw	r18,56(sp)
    33fc:	80800b26 	beq	r16,r2,342c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
    3400:	80c00007 	ldb	r3,0(r16)
    3404:	2029883a 	mov	r20,r4
    3408:	01000a84 	movi	r4,42
    340c:	382b883a 	mov	r21,r7
    3410:	19001a26 	beq	r3,r4,347c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    3414:	100b883a 	mov	r5,r2
    3418:	8009883a 	mov	r4,r16
    341c:	d8c00015 	stw	r3,0(sp)
    3420:	0007a6c0 	call	7a6c <strcmp>
    3424:	d8c00017 	ldw	r3,0(sp)
    3428:	1000141e 	bne	r2,zero,347c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    342c:	94c00015 	stw	r19,0(r18)
    3430:	97000115 	stw	fp,4(r18)
    3434:	88002816 	blt	r17,zero,34d8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
    3438:	9c63883a 	add	r17,r19,r17
    343c:	b4403226 	beq	r22,r17,3508 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
    3440:	00800044 	movi	r2,1
    3444:	90800315 	stw	r2,12(r18)
    3448:	0005883a 	mov	r2,zero
    344c:	dfc00a17 	ldw	ra,40(sp)
    3450:	df000917 	ldw	fp,36(sp)
    3454:	ddc00817 	ldw	r23,32(sp)
    3458:	dd800717 	ldw	r22,28(sp)
    345c:	dd400617 	ldw	r21,24(sp)
    3460:	dd000517 	ldw	r20,20(sp)
    3464:	dcc00417 	ldw	r19,16(sp)
    3468:	dc800317 	ldw	r18,12(sp)
    346c:	dc400217 	ldw	r17,8(sp)
    3470:	dc000117 	ldw	r16,4(sp)
    3474:	dec00b04 	addi	sp,sp,44
    3478:	f800283a 	ret
    347c:	9d801926 	beq	r19,r22,34e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
    3480:	a1000217 	ldw	r4,8(r20)
    3484:	a80f883a 	mov	r7,r21
    3488:	e00d883a 	mov	r6,fp
    348c:	20800017 	ldw	r2,0(r4)
    3490:	dc800e15 	stw	r18,56(sp)
    3494:	dd800d15 	stw	r22,52(sp)
    3498:	ddc00c15 	stw	r23,48(sp)
    349c:	dcc00b15 	stw	r19,44(sp)
    34a0:	10800717 	ldw	r2,28(r2)
    34a4:	880b883a 	mov	r5,r17
    34a8:	dfc00a17 	ldw	ra,40(sp)
    34ac:	df000917 	ldw	fp,36(sp)
    34b0:	ddc00817 	ldw	r23,32(sp)
    34b4:	dd800717 	ldw	r22,28(sp)
    34b8:	dd400617 	ldw	r21,24(sp)
    34bc:	dd000517 	ldw	r20,20(sp)
    34c0:	dcc00417 	ldw	r19,16(sp)
    34c4:	dc800317 	ldw	r18,12(sp)
    34c8:	dc400217 	ldw	r17,8(sp)
    34cc:	dc000117 	ldw	r16,4(sp)
    34d0:	dec00b04 	addi	sp,sp,44
    34d4:	1000683a 	jmp	r2
    34d8:	00bfff84 	movi	r2,-2
    34dc:	88bfda1e 	bne	r17,r2,3448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003448>
    34e0:	003fd706 	br	3440 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003440>
    34e4:	b9400117 	ldw	r5,4(r23)
    34e8:	81400526 	beq	r16,r5,3500 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
    34ec:	00800a84 	movi	r2,42
    34f0:	18bfe326 	beq	r3,r2,3480 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003480>
    34f4:	8009883a 	mov	r4,r16
    34f8:	0007a6c0 	call	7a6c <strcmp>
    34fc:	103fe01e 	bne	r2,zero,3480 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003480>
    3500:	97000215 	stw	fp,8(r18)
    3504:	003fd006 	br	3448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003448>
    3508:	00800184 	movi	r2,6
    350c:	003fcd06 	br	3444 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003444>

00003510 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    3510:	defffa04 	addi	sp,sp,-24
    3514:	dc000215 	stw	r16,8(sp)
    3518:	dc000617 	ldw	r16,24(sp)
    351c:	dc800415 	stw	r18,16(sp)
    3520:	dc400315 	stw	r17,12(sp)
    3524:	dfc00515 	stw	ra,20(sp)
    3528:	2023883a 	mov	r17,r4
    352c:	2825883a 	mov	r18,r5
    3530:	81800b26 	beq	r16,r6,3560 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
    3534:	89000217 	ldw	r4,8(r17)
    3538:	900b883a 	mov	r5,r18
    353c:	20800017 	ldw	r2,0(r4)
    3540:	dc000615 	stw	r16,24(sp)
    3544:	10800817 	ldw	r2,32(r2)
    3548:	dfc00517 	ldw	ra,20(sp)
    354c:	dc800417 	ldw	r18,16(sp)
    3550:	dc400317 	ldw	r17,12(sp)
    3554:	dc000217 	ldw	r16,8(sp)
    3558:	dec00604 	addi	sp,sp,24
    355c:	1000683a 	jmp	r2
    3560:	21000117 	ldw	r4,4(r4)
    3564:	39400117 	ldw	r5,4(r7)
    3568:	21400926 	beq	r4,r5,3590 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
    356c:	20c00007 	ldb	r3,0(r4)
    3570:	00800a84 	movi	r2,42
    3574:	18bfef26 	beq	r3,r2,3534 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003534>
    3578:	d9800015 	stw	r6,0(sp)
    357c:	d9c00115 	stw	r7,4(sp)
    3580:	0007a6c0 	call	7a6c <strcmp>
    3584:	d9800017 	ldw	r6,0(sp)
    3588:	d9c00117 	ldw	r7,4(sp)
    358c:	103fe91e 	bne	r2,zero,3534 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003534>
    3590:	00800184 	movi	r2,6
    3594:	dfc00517 	ldw	ra,20(sp)
    3598:	dc800417 	ldw	r18,16(sp)
    359c:	dc400317 	ldw	r17,12(sp)
    35a0:	dc000217 	ldw	r16,8(sp)
    35a4:	dec00604 	addi	sp,sp,24
    35a8:	f800283a 	ret

000035ac <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    35ac:	defffb04 	addi	sp,sp,-20
    35b0:	dcc00315 	stw	r19,12(sp)
    35b4:	dc800215 	stw	r18,8(sp)
    35b8:	dc400115 	stw	r17,4(sp)
    35bc:	dc000015 	stw	r16,0(sp)
    35c0:	dfc00415 	stw	ra,16(sp)
    35c4:	2027883a 	mov	r19,r4
    35c8:	2821883a 	mov	r16,r5
    35cc:	3023883a 	mov	r17,r6
    35d0:	3825883a 	mov	r18,r7
    35d4:	00037040 	call	3704 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    35d8:	10c03fcc 	andi	r3,r2,255
    35dc:	18000726 	beq	r3,zero,35fc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
    35e0:	dfc00417 	ldw	ra,16(sp)
    35e4:	dcc00317 	ldw	r19,12(sp)
    35e8:	dc800217 	ldw	r18,8(sp)
    35ec:	dc400117 	ldw	r17,4(sp)
    35f0:	dc000017 	ldw	r16,0(sp)
    35f4:	dec00504 	addi	sp,sp,20
    35f8:	f800283a 	ret
    35fc:	99000217 	ldw	r4,8(r19)
    3600:	900f883a 	mov	r7,r18
    3604:	880d883a 	mov	r6,r17
    3608:	20800017 	ldw	r2,0(r4)
    360c:	800b883a 	mov	r5,r16
    3610:	10800617 	ldw	r2,24(r2)
    3614:	dfc00417 	ldw	ra,16(sp)
    3618:	dcc00317 	ldw	r19,12(sp)
    361c:	dc800217 	ldw	r18,8(sp)
    3620:	dc400117 	ldw	r17,4(sp)
    3624:	dc000017 	ldw	r16,0(sp)
    3628:	dec00504 	addi	sp,sp,20
    362c:	1000683a 	jmp	r2

00003630 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    3630:	20800017 	ldw	r2,0(r4)
    3634:	defffa04 	addi	sp,sp,-24
    3638:	dc000415 	stw	r16,16(sp)
    363c:	10800617 	ldw	r2,24(r2)
    3640:	3021883a 	mov	r16,r6
    3644:	31800017 	ldw	r6,0(r6)
    3648:	00c00404 	movi	r3,16
    364c:	d8c00215 	stw	r3,8(sp)
    3650:	dfc00515 	stw	ra,20(sp)
    3654:	d8000015 	stw	zero,0(sp)
    3658:	d8000115 	stw	zero,4(sp)
    365c:	d8000315 	stw	zero,12(sp)
    3660:	d80f883a 	mov	r7,sp
    3664:	103ee83a 	callr	r2
    3668:	d8800117 	ldw	r2,4(sp)
    366c:	00c00184 	movi	r3,6
    3670:	1080018c 	andi	r2,r2,6
    3674:	10c00526 	beq	r2,r3,368c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
    3678:	0005883a 	mov	r2,zero
    367c:	dfc00517 	ldw	ra,20(sp)
    3680:	dc000417 	ldw	r16,16(sp)
    3684:	dec00604 	addi	sp,sp,24
    3688:	f800283a 	ret
    368c:	d8c00017 	ldw	r3,0(sp)
    3690:	00800044 	movi	r2,1
    3694:	80c00015 	stw	r3,0(r16)
    3698:	dfc00517 	ldw	ra,20(sp)
    369c:	dc000417 	ldw	r16,16(sp)
    36a0:	dec00604 	addi	sp,sp,24
    36a4:	f800283a 	ret

000036a8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    36a8:	d8800017 	ldw	r2,0(sp)
    36ac:	11800226 	beq	r2,r6,36b8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
    36b0:	00800044 	movi	r2,1
    36b4:	f800283a 	ret
    36b8:	00800184 	movi	r2,6
    36bc:	f800283a 	ret

000036c0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    36c0:	008000b4 	movhi	r2,2
    36c4:	10bf5104 	addi	r2,r2,-700
    36c8:	20800015 	stw	r2,0(r4)
    36cc:	00038f81 	jmpi	38f8 <_ZNSt9type_infoD1Ev>

000036d0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    36d0:	defffe04 	addi	sp,sp,-8
    36d4:	008000b4 	movhi	r2,2
    36d8:	dc000015 	stw	r16,0(sp)
    36dc:	dfc00115 	stw	ra,4(sp)
    36e0:	10bf5104 	addi	r2,r2,-700
    36e4:	20800015 	stw	r2,0(r4)
    36e8:	2021883a 	mov	r16,r4
    36ec:	00038f80 	call	38f8 <_ZNSt9type_infoD1Ev>
    36f0:	8009883a 	mov	r4,r16
    36f4:	dfc00117 	ldw	ra,4(sp)
    36f8:	dc000017 	ldw	r16,0(sp)
    36fc:	dec00204 	addi	sp,sp,8
    3700:	00039941 	jmpi	3994 <_ZdlPv>

00003704 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    3704:	21000117 	ldw	r4,4(r4)
    3708:	29400117 	ldw	r5,4(r5)
    370c:	defffd04 	addi	sp,sp,-12
    3710:	dc400115 	stw	r17,4(sp)
    3714:	dc000015 	stw	r16,0(sp)
    3718:	dfc00215 	stw	ra,8(sp)
    371c:	3023883a 	mov	r17,r6
    3720:	3821883a 	mov	r16,r7
    3724:	21400526 	beq	r4,r5,373c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
    3728:	20c00007 	ldb	r3,0(r4)
    372c:	00800a84 	movi	r2,42
    3730:	18800d26 	beq	r3,r2,3768 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    3734:	0007a6c0 	call	7a6c <strcmp>
    3738:	10000b1e 	bne	r2,zero,3768 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    373c:	00800204 	movi	r2,8
    3740:	80800315 	stw	r2,12(r16)
    3744:	00800184 	movi	r2,6
    3748:	80800115 	stw	r2,4(r16)
    374c:	84400015 	stw	r17,0(r16)
    3750:	00800044 	movi	r2,1
    3754:	dfc00217 	ldw	ra,8(sp)
    3758:	dc400117 	ldw	r17,4(sp)
    375c:	dc000017 	ldw	r16,0(sp)
    3760:	dec00304 	addi	sp,sp,12
    3764:	f800283a 	ret
    3768:	0005883a 	mov	r2,zero
    376c:	003ff906 	br	3754 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003754>

00003770 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    3770:	defffa04 	addi	sp,sp,-24
    3774:	dc800415 	stw	r18,16(sp)
    3778:	d8800817 	ldw	r2,32(sp)
    377c:	dc800617 	ldw	r18,24(sp)
    3780:	dc400315 	stw	r17,12(sp)
    3784:	dc000215 	stw	r16,8(sp)
    3788:	dfc00515 	stw	ra,20(sp)
    378c:	dc400917 	ldw	r17,36(sp)
    3790:	24000117 	ldw	r16,4(r4)
    3794:	90801526 	beq	r18,r2,37ec <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
    3798:	39400117 	ldw	r5,4(r7)
    379c:	2c000826 	beq	r5,r16,37c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
    37a0:	80c00007 	ldb	r3,0(r16)
    37a4:	00800a84 	movi	r2,42
    37a8:	18800926 	beq	r3,r2,37d0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    37ac:	8009883a 	mov	r4,r16
    37b0:	d9800115 	stw	r6,4(sp)
    37b4:	0007a6c0 	call	7a6c <strcmp>
    37b8:	d9800117 	ldw	r6,4(sp)
    37bc:	1000041e 	bne	r2,zero,37d0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    37c0:	00800044 	movi	r2,1
    37c4:	8c800015 	stw	r18,0(r17)
    37c8:	89800115 	stw	r6,4(r17)
    37cc:	88800315 	stw	r2,12(r17)
    37d0:	0005883a 	mov	r2,zero
    37d4:	dfc00517 	ldw	ra,20(sp)
    37d8:	dc800417 	ldw	r18,16(sp)
    37dc:	dc400317 	ldw	r17,12(sp)
    37e0:	dc000217 	ldw	r16,8(sp)
    37e4:	dec00604 	addi	sp,sp,24
    37e8:	f800283a 	ret
    37ec:	d8800717 	ldw	r2,28(sp)
    37f0:	11400117 	ldw	r5,4(r2)
    37f4:	81400a26 	beq	r16,r5,3820 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
    37f8:	80c00007 	ldb	r3,0(r16)
    37fc:	00800a84 	movi	r2,42
    3800:	18800c26 	beq	r3,r2,3834 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
    3804:	8009883a 	mov	r4,r16
    3808:	d9800115 	stw	r6,4(sp)
    380c:	d9c00015 	stw	r7,0(sp)
    3810:	0007a6c0 	call	7a6c <strcmp>
    3814:	d9800117 	ldw	r6,4(sp)
    3818:	d9c00017 	ldw	r7,0(sp)
    381c:	1000021e 	bne	r2,zero,3828 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
    3820:	89800215 	stw	r6,8(r17)
    3824:	003fea06 	br	37d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70037d0>
    3828:	39400117 	ldw	r5,4(r7)
    382c:	817fdf1e 	bne	r16,r5,37ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70037ac>
    3830:	003fe306 	br	37c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70037c0>
    3834:	38800117 	ldw	r2,4(r7)
    3838:	80bfe51e 	bne	r16,r2,37d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70037d0>
    383c:	003fe006 	br	37c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70037c0>

00003840 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    3840:	20800117 	ldw	r2,4(r4)
    3844:	28c00117 	ldw	r3,4(r5)
    3848:	10c02926 	beq	r2,r3,38f0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
    384c:	defffb04 	addi	sp,sp,-20
    3850:	dcc00315 	stw	r19,12(sp)
    3854:	dc800215 	stw	r18,8(sp)
    3858:	dc400115 	stw	r17,4(sp)
    385c:	dc000015 	stw	r16,0(sp)
    3860:	dfc00415 	stw	ra,16(sp)
    3864:	2821883a 	mov	r16,r5
    3868:	11400007 	ldb	r5,0(r2)
    386c:	2025883a 	mov	r18,r4
    3870:	01000a84 	movi	r4,42
    3874:	3823883a 	mov	r17,r7
    3878:	3027883a 	mov	r19,r6
    387c:	29000626 	beq	r5,r4,3898 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    3880:	180b883a 	mov	r5,r3
    3884:	1009883a 	mov	r4,r2
    3888:	0007a6c0 	call	7a6c <strcmp>
    388c:	1000021e 	bne	r2,zero,3898 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    3890:	00800044 	movi	r2,1
    3894:	00000306 	br	38a4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
    3898:	008000c4 	movi	r2,3
    389c:	1440082e 	bgeu	r2,r17,38c0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
    38a0:	0005883a 	mov	r2,zero
    38a4:	dfc00417 	ldw	ra,16(sp)
    38a8:	dcc00317 	ldw	r19,12(sp)
    38ac:	dc800217 	ldw	r18,8(sp)
    38b0:	dc400117 	ldw	r17,4(sp)
    38b4:	dc000017 	ldw	r16,0(sp)
    38b8:	dec00504 	addi	sp,sp,20
    38bc:	f800283a 	ret
    38c0:	80800017 	ldw	r2,0(r16)
    38c4:	980d883a 	mov	r6,r19
    38c8:	900b883a 	mov	r5,r18
    38cc:	10800517 	ldw	r2,20(r2)
    38d0:	8009883a 	mov	r4,r16
    38d4:	dfc00417 	ldw	ra,16(sp)
    38d8:	dcc00317 	ldw	r19,12(sp)
    38dc:	dc800217 	ldw	r18,8(sp)
    38e0:	dc400117 	ldw	r17,4(sp)
    38e4:	dc000017 	ldw	r16,0(sp)
    38e8:	dec00504 	addi	sp,sp,20
    38ec:	1000683a 	jmp	r2
    38f0:	00800044 	movi	r2,1
    38f4:	f800283a 	ret

000038f8 <_ZNSt9type_infoD1Ev>:
    38f8:	f800283a 	ret

000038fc <_ZNKSt9type_info14__is_pointer_pEv>:
    38fc:	0005883a 	mov	r2,zero
    3900:	f800283a 	ret

00003904 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
    3904:	0005883a 	mov	r2,zero
    3908:	f800283a 	ret

0000390c <_ZNSt9type_infoD0Ev>:
    390c:	00039941 	jmpi	3994 <_ZdlPv>

00003910 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
    3910:	21000117 	ldw	r4,4(r4)
    3914:	29400117 	ldw	r5,4(r5)
    3918:	21400c26 	beq	r4,r5,394c <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
    391c:	20c00007 	ldb	r3,0(r4)
    3920:	00800a84 	movi	r2,42
    3924:	18800726 	beq	r3,r2,3944 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
    3928:	deffff04 	addi	sp,sp,-4
    392c:	dfc00015 	stw	ra,0(sp)
    3930:	0007a6c0 	call	7a6c <strcmp>
    3934:	1005003a 	cmpeq	r2,r2,zero
    3938:	dfc00017 	ldw	ra,0(sp)
    393c:	dec00104 	addi	sp,sp,4
    3940:	f800283a 	ret
    3944:	0005883a 	mov	r2,zero
    3948:	f800283a 	ret
    394c:	00800044 	movi	r2,1
    3950:	f800283a 	ret

00003954 <__cxa_pure_virtual>:
    3954:	014000b4 	movhi	r5,2
    3958:	deffff04 	addi	sp,sp,-4
    395c:	297f6604 	addi	r5,r5,-616
    3960:	018006c4 	movi	r6,27
    3964:	01000084 	movi	r4,2
    3968:	dfc00015 	stw	ra,0(sp)
    396c:	00137140 	call	13714 <write>
    3970:	0003a580 	call	3a58 <_ZSt9terminatev>

00003974 <__cxa_deleted_virtual>:
    3974:	014000b4 	movhi	r5,2
    3978:	deffff04 	addi	sp,sp,-4
    397c:	297f6d04 	addi	r5,r5,-588
    3980:	01800784 	movi	r6,30
    3984:	01000084 	movi	r4,2
    3988:	dfc00015 	stw	ra,0(sp)
    398c:	00137140 	call	13714 <write>
    3990:	0003a580 	call	3a58 <_ZSt9terminatev>

00003994 <_ZdlPv>:
    3994:	0006b441 	jmpi	6b44 <free>

00003998 <_ZN10__cxxabiv111__terminateEPFvvE>:
    3998:	00800034 	movhi	r2,0
    399c:	deffef04 	addi	sp,sp,-68
    39a0:	1090a504 	addi	r2,r2,17044
    39a4:	d8800615 	stw	r2,24(sp)
    39a8:	008000b4 	movhi	r2,2
    39ac:	10bc2904 	addi	r2,r2,-3932
    39b0:	d8800715 	stw	r2,28(sp)
    39b4:	00800034 	movhi	r2,0
    39b8:	108e7c04 	addi	r2,r2,14832
    39bc:	d9000d15 	stw	r4,52(sp)
    39c0:	d809883a 	mov	r4,sp
    39c4:	d8800915 	stw	r2,36(sp)
    39c8:	dfc01015 	stw	ra,64(sp)
    39cc:	df000f15 	stw	fp,60(sp)
    39d0:	dec00815 	stw	sp,32(sp)
    39d4:	dec00a15 	stw	sp,40(sp)
    39d8:	000679c0 	call	679c <_Unwind_SjLj_Register>
    39dc:	00800044 	movi	r2,1
    39e0:	d8800115 	stw	r2,4(sp)
    39e4:	d8800d17 	ldw	r2,52(sp)
    39e8:	103ee83a 	callr	r2
    39ec:	0006b180 	call	6b18 <abort>
    39f0:	d8c00217 	ldw	r3,8(sp)
    39f4:	d8800117 	ldw	r2,4(sp)
    39f8:	d8c00d15 	stw	r3,52(sp)
    39fc:	d8c00317 	ldw	r3,12(sp)
    3a00:	d8c00e15 	stw	r3,56(sp)
    3a04:	10000b26 	beq	r2,zero,3a34 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
    3a08:	10bfffc4 	addi	r2,r2,-1
    3a0c:	10000126 	beq	r2,zero,3a14 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
    3a10:	003b68fa 	trap	3
    3a14:	d8000115 	stw	zero,4(sp)
    3a18:	0004b800 	call	4b80 <__cxa_end_catch>
    3a1c:	d8c00e17 	ldw	r3,56(sp)
    3a20:	00bfffc4 	movi	r2,-1
    3a24:	18800826 	beq	r3,r2,3a48 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
    3a28:	d9000d17 	ldw	r4,52(sp)
    3a2c:	d8800115 	stw	r2,4(sp)
    3a30:	00069980 	call	6998 <_Unwind_SjLj_Resume>
    3a34:	d9000d17 	ldw	r4,52(sp)
    3a38:	0004acc0 	call	4acc <__cxa_begin_catch>
    3a3c:	00800084 	movi	r2,2
    3a40:	d8800115 	stw	r2,4(sp)
    3a44:	0006b180 	call	6b18 <abort>
    3a48:	d8800e17 	ldw	r2,56(sp)
    3a4c:	d9000d17 	ldw	r4,52(sp)
    3a50:	d8800115 	stw	r2,4(sp)
    3a54:	00048940 	call	4894 <__cxa_call_unexpected>

00003a58 <_ZSt9terminatev>:
    3a58:	008000b4 	movhi	r2,2
    3a5c:	1088d704 	addi	r2,r2,9052
    3a60:	11000017 	ldw	r4,0(r2)
    3a64:	deffff04 	addi	sp,sp,-4
    3a68:	dfc00015 	stw	ra,0(sp)
    3a6c:	00039980 	call	3998 <_ZN10__cxxabiv111__terminateEPFvvE>

00003a70 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    3a70:	deffff04 	addi	sp,sp,-4
    3a74:	dfc00015 	stw	ra,0(sp)
    3a78:	203ee83a 	callr	r4
    3a7c:	0003a580 	call	3a58 <_ZSt9terminatev>

00003a80 <_ZSt10unexpectedv>:
    3a80:	008000b4 	movhi	r2,2
    3a84:	1088d804 	addi	r2,r2,9056
    3a88:	11000017 	ldw	r4,0(r2)
    3a8c:	deffff04 	addi	sp,sp,-4
    3a90:	dfc00015 	stw	ra,0(sp)
    3a94:	0003a700 	call	3a70 <_ZN10__cxxabiv112__unexpectedEPFvvE>

00003a98 <_ZSt13set_terminatePFvvE>:
    3a98:	00c000b4 	movhi	r3,2
    3a9c:	18c8d704 	addi	r3,r3,9052
    3aa0:	18800017 	ldw	r2,0(r3)
    3aa4:	19000015 	stw	r4,0(r3)
    3aa8:	f800283a 	ret

00003aac <_ZSt13get_terminatev>:
    3aac:	008000b4 	movhi	r2,2
    3ab0:	1088d704 	addi	r2,r2,9052
    3ab4:	10800017 	ldw	r2,0(r2)
    3ab8:	f800283a 	ret

00003abc <_ZSt14set_unexpectedPFvvE>:
    3abc:	00c000b4 	movhi	r3,2
    3ac0:	18c8d804 	addi	r3,r3,9056
    3ac4:	18800017 	ldw	r2,0(r3)
    3ac8:	19000015 	stw	r4,0(r3)
    3acc:	f800283a 	ret

00003ad0 <_ZSt14get_unexpectedv>:
    3ad0:	008000b4 	movhi	r2,2
    3ad4:	1088d804 	addi	r2,r2,9056
    3ad8:	10800017 	ldw	r2,0(r2)
    3adc:	f800283a 	ret

00003ae0 <_ZL21size_of_encoded_valueh>:
    3ae0:	deffff04 	addi	sp,sp,-4
    3ae4:	dfc00015 	stw	ra,0(sp)
    3ae8:	20c03fcc 	andi	r3,r4,255
    3aec:	00803fc4 	movi	r2,255
    3af0:	18802026 	beq	r3,r2,3b74 <_ZL21size_of_encoded_valueh+0x94>
    3af4:	210001cc 	andi	r4,r4,7
    3af8:	00800144 	movi	r2,5
    3afc:	11001c36 	bltu	r2,r4,3b70 <_ZL21size_of_encoded_valueh+0x90>
    3b00:	200890ba 	slli	r4,r4,2
    3b04:	00800034 	movhi	r2,0
    3b08:	108ec604 	addi	r2,r2,15128
    3b0c:	2089883a 	add	r4,r4,r2
    3b10:	20800017 	ldw	r2,0(r4)
    3b14:	1000683a 	jmp	r2
    3b18:	00003b30 	cmpltui	zero,zero,236
    3b1c:	00003b70 	cmpltui	zero,zero,237
    3b20:	00003b40 	call	3b4 <_ZN6Entity6updateEi+0x50>
    3b24:	00003b30 	cmpltui	zero,zero,236
    3b28:	00003b60 	cmpeqi	zero,zero,237
    3b2c:	00003b50 	cmplti	zero,zero,237
    3b30:	00800104 	movi	r2,4
    3b34:	dfc00017 	ldw	ra,0(sp)
    3b38:	dec00104 	addi	sp,sp,4
    3b3c:	f800283a 	ret
    3b40:	00800084 	movi	r2,2
    3b44:	dfc00017 	ldw	ra,0(sp)
    3b48:	dec00104 	addi	sp,sp,4
    3b4c:	f800283a 	ret
    3b50:	00800044 	movi	r2,1
    3b54:	dfc00017 	ldw	ra,0(sp)
    3b58:	dec00104 	addi	sp,sp,4
    3b5c:	f800283a 	ret
    3b60:	00800204 	movi	r2,8
    3b64:	dfc00017 	ldw	ra,0(sp)
    3b68:	dec00104 	addi	sp,sp,4
    3b6c:	f800283a 	ret
    3b70:	0006b180 	call	6b18 <abort>
    3b74:	0005883a 	mov	r2,zero
    3b78:	dfc00017 	ldw	ra,0(sp)
    3b7c:	dec00104 	addi	sp,sp,4
    3b80:	f800283a 	ret

00003b84 <_ZL28read_encoded_value_with_basehjPKhPj>:
    3b84:	deffff04 	addi	sp,sp,-4
    3b88:	dfc00015 	stw	ra,0(sp)
    3b8c:	20c03fcc 	andi	r3,r4,255
    3b90:	00801404 	movi	r2,80
    3b94:	18807326 	beq	r3,r2,3d64 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
    3b98:	20c003cc 	andi	r3,r4,15
    3b9c:	00800304 	movi	r2,12
    3ba0:	10c06f36 	bltu	r2,r3,3d60 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
    3ba4:	180690ba 	slli	r3,r3,2
    3ba8:	02000034 	movhi	r8,0
    3bac:	420eef04 	addi	r8,r8,15292
    3bb0:	1a07883a 	add	r3,r3,r8
    3bb4:	18800017 	ldw	r2,0(r3)
    3bb8:	1000683a 	jmp	r2
    3bbc:	00003bf0 	cmpltui	zero,zero,239
    3bc0:	00003d0c 	andi	zero,zero,244
    3bc4:	00003d48 	cmpgei	zero,zero,245
    3bc8:	00003bf0 	cmpltui	zero,zero,239
    3bcc:	00003c54 	movui	zero,241
    3bd0:	00003ca8 	cmpgeui	zero,zero,242
    3bd4:	00003d60 	cmpeqi	zero,zero,245
    3bd8:	00003d60 	cmpeqi	zero,zero,245
    3bdc:	00003d60 	cmpeqi	zero,zero,245
    3be0:	00003cb4 	movhi	zero,242
    3be4:	00003c84 	movi	zero,242
    3be8:	00003bf0 	cmpltui	zero,zero,239
    3bec:	00003c54 	movui	zero,241
    3bf0:	30800043 	ldbu	r2,1(r6)
    3bf4:	30c00083 	ldbu	r3,2(r6)
    3bf8:	324000c3 	ldbu	r9,3(r6)
    3bfc:	32000003 	ldbu	r8,0(r6)
    3c00:	1004923a 	slli	r2,r2,8
    3c04:	1806943a 	slli	r3,r3,16
    3c08:	4812963a 	slli	r9,r9,24
    3c0c:	1204b03a 	or	r2,r2,r8
    3c10:	1884b03a 	or	r2,r3,r2
    3c14:	4886b03a 	or	r3,r9,r2
    3c18:	30800104 	addi	r2,r6,4
    3c1c:	18000926 	beq	r3,zero,3c44 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    3c20:	22001c0c 	andi	r8,r4,112
    3c24:	02400404 	movi	r9,16
    3c28:	42405726 	beq	r8,r9,3d88 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
    3c2c:	21003fcc 	andi	r4,r4,255
    3c30:	2100201c 	xori	r4,r4,128
    3c34:	213fe004 	addi	r4,r4,-128
    3c38:	1947883a 	add	r3,r3,r5
    3c3c:	2000010e 	bge	r4,zero,3c44 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    3c40:	18c00017 	ldw	r3,0(r3)
    3c44:	38c00015 	stw	r3,0(r7)
    3c48:	dfc00017 	ldw	ra,0(sp)
    3c4c:	dec00104 	addi	sp,sp,4
    3c50:	f800283a 	ret
    3c54:	30800043 	ldbu	r2,1(r6)
    3c58:	30c00083 	ldbu	r3,2(r6)
    3c5c:	324000c3 	ldbu	r9,3(r6)
    3c60:	32000003 	ldbu	r8,0(r6)
    3c64:	1004923a 	slli	r2,r2,8
    3c68:	1806943a 	slli	r3,r3,16
    3c6c:	4812963a 	slli	r9,r9,24
    3c70:	1204b03a 	or	r2,r2,r8
    3c74:	1884b03a 	or	r2,r3,r2
    3c78:	4886b03a 	or	r3,r9,r2
    3c7c:	30800204 	addi	r2,r6,8
    3c80:	003fe606 	br	3c1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c1c>
    3c84:	30c00043 	ldbu	r3,1(r6)
    3c88:	32000003 	ldbu	r8,0(r6)
    3c8c:	30800084 	addi	r2,r6,2
    3c90:	1806923a 	slli	r3,r3,8
    3c94:	1a06b03a 	or	r3,r3,r8
    3c98:	18ffffcc 	andi	r3,r3,65535
    3c9c:	18e0001c 	xori	r3,r3,32768
    3ca0:	18e00004 	addi	r3,r3,-32768
    3ca4:	003fdd06 	br	3c1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c1c>
    3ca8:	30c00003 	ldbu	r3,0(r6)
    3cac:	30800044 	addi	r2,r6,1
    3cb0:	003fda06 	br	3c1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c1c>
    3cb4:	3017883a 	mov	r11,r6
    3cb8:	0007883a 	mov	r3,zero
    3cbc:	0013883a 	mov	r9,zero
    3cc0:	5a800003 	ldbu	r10,0(r11)
    3cc4:	58800044 	addi	r2,r11,1
    3cc8:	1017883a 	mov	r11,r2
    3ccc:	52001fcc 	andi	r8,r10,127
    3cd0:	4250983a 	sll	r8,r8,r9
    3cd4:	53003fcc 	andi	r12,r10,255
    3cd8:	6300201c 	xori	r12,r12,128
    3cdc:	633fe004 	addi	r12,r12,-128
    3ce0:	1a06b03a 	or	r3,r3,r8
    3ce4:	4a4001c4 	addi	r9,r9,7
    3ce8:	603ff516 	blt	r12,zero,3cc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003cc0>
    3cec:	020007c4 	movi	r8,31
    3cf0:	427fca36 	bltu	r8,r9,3c1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c1c>
    3cf4:	5280100c 	andi	r10,r10,64
    3cf8:	503fc826 	beq	r10,zero,3c1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c1c>
    3cfc:	023fffc4 	movi	r8,-1
    3d00:	4252983a 	sll	r9,r8,r9
    3d04:	1a46b03a 	or	r3,r3,r9
    3d08:	003fc506 	br	3c20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c20>
    3d0c:	3017883a 	mov	r11,r6
    3d10:	0007883a 	mov	r3,zero
    3d14:	0015883a 	mov	r10,zero
    3d18:	5a000003 	ldbu	r8,0(r11)
    3d1c:	58800044 	addi	r2,r11,1
    3d20:	1017883a 	mov	r11,r2
    3d24:	42401fcc 	andi	r9,r8,127
    3d28:	4a92983a 	sll	r9,r9,r10
    3d2c:	42003fcc 	andi	r8,r8,255
    3d30:	4200201c 	xori	r8,r8,128
    3d34:	423fe004 	addi	r8,r8,-128
    3d38:	1a46b03a 	or	r3,r3,r9
    3d3c:	528001c4 	addi	r10,r10,7
    3d40:	403ff516 	blt	r8,zero,3d18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003d18>
    3d44:	003fb506 	br	3c1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c1c>
    3d48:	30c00043 	ldbu	r3,1(r6)
    3d4c:	32000003 	ldbu	r8,0(r6)
    3d50:	30800084 	addi	r2,r6,2
    3d54:	1806923a 	slli	r3,r3,8
    3d58:	1a06b03a 	or	r3,r3,r8
    3d5c:	003faf06 	br	3c1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c1c>
    3d60:	0006b180 	call	6b18 <abort>
    3d64:	308000c4 	addi	r2,r6,3
    3d68:	00ffff04 	movi	r3,-4
    3d6c:	10c4703a 	and	r2,r2,r3
    3d70:	10c00017 	ldw	r3,0(r2)
    3d74:	10800104 	addi	r2,r2,4
    3d78:	38c00015 	stw	r3,0(r7)
    3d7c:	dfc00017 	ldw	ra,0(sp)
    3d80:	dec00104 	addi	sp,sp,4
    3d84:	f800283a 	ret
    3d88:	300b883a 	mov	r5,r6
    3d8c:	003fa706 	br	3c2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003c2c>

00003d90 <_ZL15get_ttype_entryP16lsda_header_infom>:
    3d90:	defffc04 	addi	sp,sp,-16
    3d94:	dfc00315 	stw	ra,12(sp)
    3d98:	dc400215 	stw	r17,8(sp)
    3d9c:	dc000115 	stw	r16,4(sp)
    3da0:	2021883a 	mov	r16,r4
    3da4:	21000503 	ldbu	r4,20(r4)
    3da8:	2823883a 	mov	r17,r5
    3dac:	0003ae00 	call	3ae0 <_ZL21size_of_encoded_valueh>
    3db0:	1445383a 	mul	r2,r2,r17
    3db4:	81800317 	ldw	r6,12(r16)
    3db8:	81400217 	ldw	r5,8(r16)
    3dbc:	81000503 	ldbu	r4,20(r16)
    3dc0:	d80f883a 	mov	r7,sp
    3dc4:	308dc83a 	sub	r6,r6,r2
    3dc8:	0003b840 	call	3b84 <_ZL28read_encoded_value_with_basehjPKhPj>
    3dcc:	d8800017 	ldw	r2,0(sp)
    3dd0:	dfc00317 	ldw	ra,12(sp)
    3dd4:	dc400217 	ldw	r17,8(sp)
    3dd8:	dc000117 	ldw	r16,4(sp)
    3ddc:	dec00404 	addi	sp,sp,16
    3de0:	f800283a 	ret

00003de4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    3de4:	deffff04 	addi	sp,sp,-4
    3de8:	dfc00015 	stw	ra,0(sp)
    3dec:	20c03fcc 	andi	r3,r4,255
    3df0:	00803fc4 	movi	r2,255
    3df4:	18800e26 	beq	r3,r2,3e30 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    3df8:	20801c0c 	andi	r2,r4,112
    3dfc:	00c00804 	movi	r3,32
    3e00:	10c01726 	beq	r2,r3,3e60 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
    3e04:	18800e2e 	bgeu	r3,r2,3e40 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
    3e08:	00c01004 	movi	r3,64
    3e0c:	10c01026 	beq	r2,r3,3e50 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
    3e10:	00c01404 	movi	r3,80
    3e14:	10c00626 	beq	r2,r3,3e30 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    3e18:	00c00c04 	movi	r3,48
    3e1c:	10c00b1e 	bne	r2,r3,3e4c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
    3e20:	2809883a 	mov	r4,r5
    3e24:	dfc00017 	ldw	ra,0(sp)
    3e28:	dec00104 	addi	sp,sp,4
    3e2c:	00068741 	jmpi	6874 <_Unwind_GetDataRelBase>
    3e30:	0005883a 	mov	r2,zero
    3e34:	dfc00017 	ldw	ra,0(sp)
    3e38:	dec00104 	addi	sp,sp,4
    3e3c:	f800283a 	ret
    3e40:	103ffb26 	beq	r2,zero,3e30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e30>
    3e44:	00c00404 	movi	r3,16
    3e48:	10fff926 	beq	r2,r3,3e30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e30>
    3e4c:	0006b180 	call	6b18 <abort>
    3e50:	2809883a 	mov	r4,r5
    3e54:	dfc00017 	ldw	ra,0(sp)
    3e58:	dec00104 	addi	sp,sp,4
    3e5c:	00068641 	jmpi	6864 <_Unwind_GetRegionStart>
    3e60:	2809883a 	mov	r4,r5
    3e64:	dfc00017 	ldw	ra,0(sp)
    3e68:	dec00104 	addi	sp,sp,4
    3e6c:	000687c1 	jmpi	687c <_Unwind_GetTextRelBase>

00003e70 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    3e70:	defffb04 	addi	sp,sp,-20
    3e74:	dcc00315 	stw	r19,12(sp)
    3e78:	dc400115 	stw	r17,4(sp)
    3e7c:	dc000015 	stw	r16,0(sp)
    3e80:	dfc00415 	stw	ra,16(sp)
    3e84:	dc800215 	stw	r18,8(sp)
    3e88:	2027883a 	mov	r19,r4
    3e8c:	2821883a 	mov	r16,r5
    3e90:	3023883a 	mov	r17,r6
    3e94:	20003f26 	beq	r4,zero,3f94 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
    3e98:	00068640 	call	6864 <_Unwind_GetRegionStart>
    3e9c:	88800015 	stw	r2,0(r17)
    3ea0:	84800003 	ldbu	r18,0(r16)
    3ea4:	00c03fc4 	movi	r3,255
    3ea8:	84000044 	addi	r16,r16,1
    3eac:	90c03726 	beq	r18,r3,3f8c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
    3eb0:	980b883a 	mov	r5,r19
    3eb4:	9009883a 	mov	r4,r18
    3eb8:	0003de40 	call	3de4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    3ebc:	800d883a 	mov	r6,r16
    3ec0:	89c00104 	addi	r7,r17,4
    3ec4:	100b883a 	mov	r5,r2
    3ec8:	9009883a 	mov	r4,r18
    3ecc:	0003b840 	call	3b84 <_ZL28read_encoded_value_with_basehjPKhPj>
    3ed0:	1021883a 	mov	r16,r2
    3ed4:	80c00003 	ldbu	r3,0(r16)
    3ed8:	01003fc4 	movi	r4,255
    3edc:	80800044 	addi	r2,r16,1
    3ee0:	88c00505 	stb	r3,20(r17)
    3ee4:	18c03fcc 	andi	r3,r3,255
    3ee8:	19002c26 	beq	r3,r4,3f9c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
    3eec:	100f883a 	mov	r7,r2
    3ef0:	000d883a 	mov	r6,zero
    3ef4:	000b883a 	mov	r5,zero
    3ef8:	38c00003 	ldbu	r3,0(r7)
    3efc:	10800044 	addi	r2,r2,1
    3f00:	100f883a 	mov	r7,r2
    3f04:	19001fcc 	andi	r4,r3,127
    3f08:	2148983a 	sll	r4,r4,r5
    3f0c:	18c03fcc 	andi	r3,r3,255
    3f10:	18c0201c 	xori	r3,r3,128
    3f14:	18ffe004 	addi	r3,r3,-128
    3f18:	310cb03a 	or	r6,r6,r4
    3f1c:	294001c4 	addi	r5,r5,7
    3f20:	183ff516 	blt	r3,zero,3ef8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003ef8>
    3f24:	118d883a 	add	r6,r2,r6
    3f28:	89800315 	stw	r6,12(r17)
    3f2c:	10c00003 	ldbu	r3,0(r2)
    3f30:	000d883a 	mov	r6,zero
    3f34:	10800044 	addi	r2,r2,1
    3f38:	88c00545 	stb	r3,21(r17)
    3f3c:	000b883a 	mov	r5,zero
    3f40:	10c00003 	ldbu	r3,0(r2)
    3f44:	10800044 	addi	r2,r2,1
    3f48:	19001fcc 	andi	r4,r3,127
    3f4c:	2148983a 	sll	r4,r4,r5
    3f50:	18c03fcc 	andi	r3,r3,255
    3f54:	18c0201c 	xori	r3,r3,128
    3f58:	18ffe004 	addi	r3,r3,-128
    3f5c:	310cb03a 	or	r6,r6,r4
    3f60:	294001c4 	addi	r5,r5,7
    3f64:	183ff616 	blt	r3,zero,3f40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f40>
    3f68:	118d883a 	add	r6,r2,r6
    3f6c:	89800415 	stw	r6,16(r17)
    3f70:	dfc00417 	ldw	ra,16(sp)
    3f74:	dcc00317 	ldw	r19,12(sp)
    3f78:	dc800217 	ldw	r18,8(sp)
    3f7c:	dc400117 	ldw	r17,4(sp)
    3f80:	dc000017 	ldw	r16,0(sp)
    3f84:	dec00504 	addi	sp,sp,20
    3f88:	f800283a 	ret
    3f8c:	88800115 	stw	r2,4(r17)
    3f90:	003fd006 	br	3ed4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003ed4>
    3f94:	0005883a 	mov	r2,zero
    3f98:	003fc006 	br	3e9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e9c>
    3f9c:	88000315 	stw	zero,12(r17)
    3fa0:	003fe206 	br	3f2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003f2c>

00003fa4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
    3fa4:	28800017 	ldw	r2,0(r5)
    3fa8:	30c00017 	ldw	r3,0(r6)
    3fac:	defffb04 	addi	sp,sp,-20
    3fb0:	10800217 	ldw	r2,8(r2)
    3fb4:	dc400315 	stw	r17,12(sp)
    3fb8:	dc000215 	stw	r16,8(sp)
    3fbc:	d9400115 	stw	r5,4(sp)
    3fc0:	dfc00415 	stw	ra,16(sp)
    3fc4:	2021883a 	mov	r16,r4
    3fc8:	d8c00015 	stw	r3,0(sp)
    3fcc:	2809883a 	mov	r4,r5
    3fd0:	3023883a 	mov	r17,r6
    3fd4:	103ee83a 	callr	r2
    3fd8:	10803fcc 	andi	r2,r2,255
    3fdc:	d9400117 	ldw	r5,4(sp)
    3fe0:	10000326 	beq	r2,zero,3ff0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
    3fe4:	d8800017 	ldw	r2,0(sp)
    3fe8:	10800017 	ldw	r2,0(r2)
    3fec:	d8800015 	stw	r2,0(sp)
    3ff0:	80800017 	ldw	r2,0(r16)
    3ff4:	01c00044 	movi	r7,1
    3ff8:	d80d883a 	mov	r6,sp
    3ffc:	10800417 	ldw	r2,16(r2)
    4000:	8009883a 	mov	r4,r16
    4004:	103ee83a 	callr	r2
    4008:	10c03fcc 	andi	r3,r2,255
    400c:	18000226 	beq	r3,zero,4018 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
    4010:	d8c00017 	ldw	r3,0(sp)
    4014:	88c00015 	stw	r3,0(r17)
    4018:	dfc00417 	ldw	ra,16(sp)
    401c:	dc400317 	ldw	r17,12(sp)
    4020:	dc000217 	ldw	r16,8(sp)
    4024:	dec00504 	addi	sp,sp,20
    4028:	f800283a 	ret

0000402c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
    402c:	defff604 	addi	sp,sp,-40
    4030:	dc000415 	stw	r16,16(sp)
    4034:	3821d23a 	srai	r16,r7,8
    4038:	dc800615 	stw	r18,24(sp)
    403c:	dc400515 	stw	r17,20(sp)
    4040:	dfc00915 	stw	ra,36(sp)
    4044:	dd000815 	stw	r20,32(sp)
    4048:	dcc00715 	stw	r19,28(sp)
    404c:	d9400215 	stw	r5,8(sp)
    4050:	3825883a 	mov	r18,r7
    4054:	2023883a 	mov	r17,r4
    4058:	8000010e 	bge	r16,zero,4060 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x34>
    405c:	0421c83a 	sub	r16,zero,r16
    4060:	000b883a 	mov	r5,zero
    4064:	01000144 	movi	r4,5
    4068:	d9800315 	stw	r6,12(sp)
    406c:	0003de40 	call	3de4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    4070:	d9800317 	ldw	r6,12(sp)
    4074:	d9c00104 	addi	r7,sp,4
    4078:	100b883a 	mov	r5,r2
    407c:	01000144 	movi	r4,5
    4080:	0003b840 	call	3b84 <_ZL28read_encoded_value_with_basehjPKhPj>
    4084:	11fffe64 	muli	r7,r2,-7
    4088:	0007883a 	mov	r3,zero
    408c:	11400003 	ldbu	r5,0(r2)
    4090:	110001e4 	muli	r4,r2,7
    4094:	10800044 	addi	r2,r2,1
    4098:	29801fcc 	andi	r6,r5,127
    409c:	21c9883a 	add	r4,r4,r7
    40a0:	3108983a 	sll	r4,r6,r4
    40a4:	29403fcc 	andi	r5,r5,255
    40a8:	2940201c 	xori	r5,r5,128
    40ac:	297fe004 	addi	r5,r5,-128
    40b0:	1906b03a 	or	r3,r3,r4
    40b4:	283ff516 	blt	r5,zero,408c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700408c>
    40b8:	10c5883a 	add	r2,r2,r3
    40bc:	11fffe64 	muli	r7,r2,-7
    40c0:	0009883a 	mov	r4,zero
    40c4:	11400003 	ldbu	r5,0(r2)
    40c8:	10c001e4 	muli	r3,r2,7
    40cc:	10800044 	addi	r2,r2,1
    40d0:	29801fcc 	andi	r6,r5,127
    40d4:	19c7883a 	add	r3,r3,r7
    40d8:	30c6983a 	sll	r3,r6,r3
    40dc:	29403fcc 	andi	r5,r5,255
    40e0:	2940201c 	xori	r5,r5,128
    40e4:	297fe004 	addi	r5,r5,-128
    40e8:	20c8b03a 	or	r4,r4,r3
    40ec:	283ff516 	blt	r5,zero,40c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040c4>
    40f0:	80c03fcc 	andi	r3,r16,255
    40f4:	18ffffc4 	addi	r3,r3,-1
    40f8:	10c7883a 	add	r3,r2,r3
    40fc:	210000c4 	addi	r4,r4,3
    4100:	197ffe64 	muli	r5,r3,-7
    4104:	2085883a 	add	r2,r4,r2
    4108:	04ffff04 	movi	r19,-4
    410c:	14e6703a 	and	r19,r2,r19
    4110:	0021883a 	mov	r16,zero
    4114:	18800003 	ldbu	r2,0(r3)
    4118:	190001e4 	muli	r4,r3,7
    411c:	1d000044 	addi	r20,r3,1
    4120:	10c01fcc 	andi	r3,r2,127
    4124:	2149883a 	add	r4,r4,r5
    4128:	1908983a 	sll	r4,r3,r4
    412c:	10803fcc 	andi	r2,r2,255
    4130:	1080201c 	xori	r2,r2,128
    4134:	10bfe004 	addi	r2,r2,-128
    4138:	a007883a 	mov	r3,r20
    413c:	8120b03a 	or	r16,r16,r4
    4140:	103ff416 	blt	r2,zero,4114 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004114>
    4144:	94803fcc 	andi	r18,r18,255
    4148:	80001f26 	beq	r16,zero,41c8 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x19c>
    414c:	9009883a 	mov	r4,r18
    4150:	0003ae00 	call	3ae0 <_ZL21size_of_encoded_valueh>
    4154:	81bfffc4 	addi	r6,r16,-1
    4158:	308d383a 	mul	r6,r6,r2
    415c:	d9400a17 	ldw	r5,40(sp)
    4160:	d80f883a 	mov	r7,sp
    4164:	9009883a 	mov	r4,r18
    4168:	34cd883a 	add	r6,r6,r19
    416c:	0003b840 	call	3b84 <_ZL28read_encoded_value_with_basehjPKhPj>
    4170:	d9000017 	ldw	r4,0(sp)
    4174:	d9800204 	addi	r6,sp,8
    4178:	880b883a 	mov	r5,r17
    417c:	0003fa40 	call	3fa4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    4180:	10c03fcc 	andi	r3,r2,255
    4184:	1800111e 	bne	r3,zero,41cc <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1a0>
    4188:	a17ffe64 	muli	r5,r20,-7
    418c:	a007883a 	mov	r3,r20
    4190:	0021883a 	mov	r16,zero
    4194:	19000003 	ldbu	r4,0(r3)
    4198:	18c001e4 	muli	r3,r3,7
    419c:	a5000044 	addi	r20,r20,1
    41a0:	20801fcc 	andi	r2,r4,127
    41a4:	1947883a 	add	r3,r3,r5
    41a8:	10c4983a 	sll	r2,r2,r3
    41ac:	21003fcc 	andi	r4,r4,255
    41b0:	2100201c 	xori	r4,r4,128
    41b4:	213fe004 	addi	r4,r4,-128
    41b8:	a007883a 	mov	r3,r20
    41bc:	80a0b03a 	or	r16,r16,r2
    41c0:	203ff416 	blt	r4,zero,4194 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004194>
    41c4:	003fe006 	br	4148 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004148>
    41c8:	0005883a 	mov	r2,zero
    41cc:	dfc00917 	ldw	ra,36(sp)
    41d0:	dd000817 	ldw	r20,32(sp)
    41d4:	dcc00717 	ldw	r19,28(sp)
    41d8:	dc800617 	ldw	r18,24(sp)
    41dc:	dc400517 	ldw	r17,20(sp)
    41e0:	dc000417 	ldw	r16,16(sp)
    41e4:	dec00a04 	addi	sp,sp,40
    41e8:	f800283a 	ret

000041ec <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
    41ec:	defffb04 	addi	sp,sp,-20
    41f0:	dc000115 	stw	r16,4(sp)
    41f4:	24000317 	ldw	r16,12(r4)
    41f8:	01ce303a 	nor	r7,zero,r7
    41fc:	dc800315 	stw	r18,12(sp)
    4200:	dc400215 	stw	r17,8(sp)
    4204:	dfc00415 	stw	ra,16(sp)
    4208:	2023883a 	mov	r17,r4
    420c:	2825883a 	mov	r18,r5
    4210:	d9800015 	stw	r6,0(sp)
    4214:	81e1883a 	add	r16,r16,r7
    4218:	800d883a 	mov	r6,r16
    421c:	000b883a 	mov	r5,zero
    4220:	0009883a 	mov	r4,zero
    4224:	30800003 	ldbu	r2,0(r6)
    4228:	84000044 	addi	r16,r16,1
    422c:	800d883a 	mov	r6,r16
    4230:	10c01fcc 	andi	r3,r2,127
    4234:	1906983a 	sll	r3,r3,r4
    4238:	10803fcc 	andi	r2,r2,255
    423c:	1080201c 	xori	r2,r2,128
    4240:	10bfe004 	addi	r2,r2,-128
    4244:	28cab03a 	or	r5,r5,r3
    4248:	210001c4 	addi	r4,r4,7
    424c:	103ff516 	blt	r2,zero,4224 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004224>
    4250:	28000e26 	beq	r5,zero,428c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
    4254:	8809883a 	mov	r4,r17
    4258:	0003d900 	call	3d90 <_ZL15get_ttype_entryP16lsda_header_infom>
    425c:	d80d883a 	mov	r6,sp
    4260:	900b883a 	mov	r5,r18
    4264:	1009883a 	mov	r4,r2
    4268:	0003fa40 	call	3fa4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    426c:	10c03fcc 	andi	r3,r2,255
    4270:	183fe926 	beq	r3,zero,4218 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004218>
    4274:	dfc00417 	ldw	ra,16(sp)
    4278:	dc800317 	ldw	r18,12(sp)
    427c:	dc400217 	ldw	r17,8(sp)
    4280:	dc000117 	ldw	r16,4(sp)
    4284:	dec00504 	addi	sp,sp,20
    4288:	f800283a 	ret
    428c:	0005883a 	mov	r2,zero
    4290:	003ff806 	br	4274 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004274>

00004294 <__gxx_personality_sj0>:
    4294:	00800034 	movhi	r2,0
    4298:	deffdd04 	addi	sp,sp,-140
    429c:	1090a504 	addi	r2,r2,17044
    42a0:	d8800e15 	stw	r2,56(sp)
    42a4:	008000b4 	movhi	r2,2
    42a8:	10bc2f04 	addi	r2,r2,-3908
    42ac:	d8800f15 	stw	r2,60(sp)
    42b0:	00800034 	movhi	r2,0
    42b4:	10921b04 	addi	r2,r2,18540
    42b8:	d9001515 	stw	r4,84(sp)
    42bc:	d9000804 	addi	r4,sp,32
    42c0:	d8801115 	stw	r2,68(sp)
    42c4:	dfc02215 	stw	ra,136(sp)
    42c8:	df002115 	stw	fp,132(sp)
    42cc:	dec01015 	stw	sp,64(sp)
    42d0:	dec01215 	stw	sp,72(sp)
    42d4:	d9401915 	stw	r5,100(sp)
    42d8:	d9801615 	stw	r6,88(sp)
    42dc:	d9c01715 	stw	r7,92(sp)
    42e0:	000679c0 	call	679c <_Unwind_SjLj_Register>
    42e4:	d8c01517 	ldw	r3,84(sp)
    42e8:	d8000715 	stw	zero,28(sp)
    42ec:	d8000615 	stw	zero,24(sp)
    42f0:	00800044 	movi	r2,1
    42f4:	18800926 	beq	r3,r2,431c <__gxx_personality_sj0+0x88>
    42f8:	01c000c4 	movi	r7,3
    42fc:	d9c01515 	stw	r7,84(sp)
    4300:	d9000804 	addi	r4,sp,32
    4304:	00067b40 	call	67b4 <_Unwind_SjLj_Unregister>
    4308:	d8801517 	ldw	r2,84(sp)
    430c:	dfc02217 	ldw	ra,136(sp)
    4310:	df002117 	ldw	fp,132(sp)
    4314:	dec02304 	addi	sp,sp,140
    4318:	f800283a 	ret
    431c:	d9001617 	ldw	r4,88(sp)
    4320:	00af3574 	movhi	r2,48341
    4324:	d9c01717 	ldw	r7,92(sp)
    4328:	10b54004 	addi	r2,r2,-11008
    432c:	00ee2cb4 	movhi	r3,47282
    4330:	2085883a 	add	r2,r4,r2
    4334:	18eaaf04 	addi	r3,r3,-21828
    4338:	d8801b15 	stw	r2,108(sp)
    433c:	38c7883a 	add	r3,r7,r3
    4340:	1105803a 	cmpltu	r2,r2,r4
    4344:	10c7883a 	add	r3,r2,r3
    4348:	d8c01c15 	stw	r3,112(sp)
    434c:	d8c01917 	ldw	r3,100(sp)
    4350:	00800184 	movi	r2,6
    4354:	18805426 	beq	r3,r2,44a8 <__gxx_personality_sj0+0x214>
    4358:	d9002417 	ldw	r4,144(sp)
    435c:	00bfffc4 	movi	r2,-1
    4360:	d8800915 	stw	r2,36(sp)
    4364:	00068580 	call	6858 <_Unwind_GetLanguageSpecificData>
    4368:	d8801a15 	stw	r2,104(sp)
    436c:	1000c926 	beq	r2,zero,4694 <__gxx_personality_sj0+0x400>
    4370:	d9002417 	ldw	r4,144(sp)
    4374:	d80d883a 	mov	r6,sp
    4378:	100b883a 	mov	r5,r2
    437c:	0003e700 	call	3e70 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    4380:	d9402417 	ldw	r5,144(sp)
    4384:	d9000503 	ldbu	r4,20(sp)
    4388:	d8801515 	stw	r2,84(sp)
    438c:	0003de40 	call	3de4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    4390:	d9002417 	ldw	r4,144(sp)
    4394:	d9400604 	addi	r5,sp,24
    4398:	d8800215 	stw	r2,8(sp)
    439c:	00068280 	call	6828 <_Unwind_GetIPInfo>
    43a0:	d8c00617 	ldw	r3,24(sp)
    43a4:	18006126 	beq	r3,zero,452c <__gxx_personality_sj0+0x298>
    43a8:	1000ba16 	blt	r2,zero,4694 <__gxx_personality_sj0+0x400>
    43ac:	10002f1e 	bne	r2,zero,446c <__gxx_personality_sj0+0x1d8>
    43b0:	d8001515 	stw	zero,84(sp)
    43b4:	d8001f15 	stw	zero,124(sp)
    43b8:	d8001815 	stw	zero,96(sp)
    43bc:	00c00044 	movi	r3,1
    43c0:	d9001917 	ldw	r4,100(sp)
    43c4:	2080004c 	andi	r2,r4,1
    43c8:	1000b51e 	bne	r2,zero,46a0 <__gxx_personality_sj0+0x40c>
    43cc:	d9001917 	ldw	r4,100(sp)
    43d0:	2080020c 	andi	r2,r4,8
    43d4:	1000b71e 	bne	r2,zero,46b4 <__gxx_personality_sj0+0x420>
    43d8:	d9c01c17 	ldw	r7,112(sp)
    43dc:	3800b826 	beq	r7,zero,46c0 <__gxx_personality_sj0+0x42c>
    43e0:	00800044 	movi	r2,1
    43e4:	1880b526 	beq	r3,r2,46bc <__gxx_personality_sj0+0x428>
    43e8:	d9c01517 	ldw	r7,84(sp)
    43ec:	3800f516 	blt	r7,zero,47c4 <__gxx_personality_sj0+0x530>
    43f0:	d9002417 	ldw	r4,144(sp)
    43f4:	d9802317 	ldw	r6,140(sp)
    43f8:	00bfffc4 	movi	r2,-1
    43fc:	000b883a 	mov	r5,zero
    4400:	d8800915 	stw	r2,36(sp)
    4404:	00067fc0 	call	67fc <_Unwind_SetGR>
    4408:	d9801517 	ldw	r6,84(sp)
    440c:	d9002417 	ldw	r4,144(sp)
    4410:	01400044 	movi	r5,1
    4414:	00067fc0 	call	67fc <_Unwind_SetGR>
    4418:	d9002417 	ldw	r4,144(sp)
    441c:	d9401f17 	ldw	r5,124(sp)
    4420:	00068480 	call	6848 <_Unwind_SetIP>
    4424:	010001c4 	movi	r4,7
    4428:	d9001515 	stw	r4,84(sp)
    442c:	003fb406 	br	4300 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004300>
    4430:	000f883a 	mov	r7,zero
    4434:	000d883a 	mov	r6,zero
    4438:	19000003 	ldbu	r4,0(r3)
    443c:	18c00044 	addi	r3,r3,1
    4440:	d8c01515 	stw	r3,84(sp)
    4444:	21401fcc 	andi	r5,r4,127
    4448:	298a983a 	sll	r5,r5,r6
    444c:	21003fcc 	andi	r4,r4,255
    4450:	2100201c 	xori	r4,r4,128
    4454:	213fe004 	addi	r4,r4,-128
    4458:	394eb03a 	or	r7,r7,r5
    445c:	318001c4 	addi	r6,r6,7
    4460:	203ff516 	blt	r4,zero,4438 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004438>
    4464:	10bfffc4 	addi	r2,r2,-1
    4468:	10003226 	beq	r2,zero,4534 <__gxx_personality_sj0+0x2a0>
    446c:	d9c01517 	ldw	r7,84(sp)
    4470:	0011883a 	mov	r8,zero
    4474:	000d883a 	mov	r6,zero
    4478:	39000003 	ldbu	r4,0(r7)
    447c:	38c00044 	addi	r3,r7,1
    4480:	180f883a 	mov	r7,r3
    4484:	21401fcc 	andi	r5,r4,127
    4488:	298a983a 	sll	r5,r5,r6
    448c:	21003fcc 	andi	r4,r4,255
    4490:	2100201c 	xori	r4,r4,128
    4494:	213fe004 	addi	r4,r4,-128
    4498:	4150b03a 	or	r8,r8,r5
    449c:	318001c4 	addi	r6,r6,7
    44a0:	203ff516 	blt	r4,zero,4478 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004478>
    44a4:	003fe206 	br	4430 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004430>
    44a8:	d9001c17 	ldw	r4,112(sp)
    44ac:	203faa1e 	bne	r4,zero,4358 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004358>
    44b0:	d9c01517 	ldw	r7,84(sp)
    44b4:	d8801b17 	ldw	r2,108(sp)
    44b8:	38bfa736 	bltu	r7,r2,4358 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004358>
    44bc:	d8c02317 	ldw	r3,140(sp)
    44c0:	18fffe17 	ldw	r3,-8(r3)
    44c4:	d8c01f15 	stw	r3,124(sp)
    44c8:	18008226 	beq	r3,zero,46d4 <__gxx_personality_sj0+0x440>
    44cc:	d9002317 	ldw	r4,140(sp)
    44d0:	d9c02317 	ldw	r7,140(sp)
    44d4:	213ffb17 	ldw	r4,-20(r4)
    44d8:	39fffd17 	ldw	r7,-12(r7)
    44dc:	d9001515 	stw	r4,84(sp)
    44e0:	d9c01a15 	stw	r7,104(sp)
    44e4:	d8801517 	ldw	r2,84(sp)
    44e8:	103fc10e 	bge	r2,zero,43f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70043f0>
    44ec:	d9002417 	ldw	r4,144(sp)
    44f0:	d9401a17 	ldw	r5,104(sp)
    44f4:	d80d883a 	mov	r6,sp
    44f8:	00bfffc4 	movi	r2,-1
    44fc:	d8800915 	stw	r2,36(sp)
    4500:	0003e700 	call	3e70 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    4504:	d9402417 	ldw	r5,144(sp)
    4508:	d9000503 	ldbu	r4,20(sp)
    450c:	0003de40 	call	3de4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    4510:	d9000503 	ldbu	r4,20(sp)
    4514:	d9402417 	ldw	r5,144(sp)
    4518:	d8800215 	stw	r2,8(sp)
    451c:	0003de40 	call	3de4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    4520:	d8c02317 	ldw	r3,140(sp)
    4524:	18bffe15 	stw	r2,-8(r3)
    4528:	003fb106 	br	43f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70043f0>
    452c:	10bfffc4 	addi	r2,r2,-1
    4530:	003f9d06 	br	43a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70043a8>
    4534:	42000044 	addi	r8,r8,1
    4538:	da001f15 	stw	r8,124(sp)
    453c:	38005326 	beq	r7,zero,468c <__gxx_personality_sj0+0x3f8>
    4540:	d8800417 	ldw	r2,16(sp)
    4544:	39ffffc4 	addi	r7,r7,-1
    4548:	11c5883a 	add	r2,r2,r7
    454c:	d8801815 	stw	r2,96(sp)
    4550:	40005026 	beq	r8,zero,4694 <__gxx_personality_sj0+0x400>
    4554:	10007426 	beq	r2,zero,4728 <__gxx_personality_sj0+0x494>
    4558:	d8801917 	ldw	r2,100(sp)
    455c:	1080020c 	andi	r2,r2,8
    4560:	d8802015 	stw	r2,128(sp)
    4564:	1000a21e 	bne	r2,zero,47f0 <__gxx_personality_sj0+0x55c>
    4568:	d8c01c17 	ldw	r3,112(sp)
    456c:	1800b026 	beq	r3,zero,4830 <__gxx_personality_sj0+0x59c>
    4570:	01c000b4 	movhi	r7,2
    4574:	39c8dd04 	addi	r7,r7,9076
    4578:	d9c01e15 	stw	r7,120(sp)
    457c:	d8001d05 	stb	zero,116(sp)
    4580:	d8c01817 	ldw	r3,96(sp)
    4584:	d8001515 	stw	zero,84(sp)
    4588:	0009883a 	mov	r4,zero
    458c:	19400003 	ldbu	r5,0(r3)
    4590:	18800044 	addi	r2,r3,1
    4594:	d9c01517 	ldw	r7,84(sp)
    4598:	28c01fcc 	andi	r3,r5,127
    459c:	1906983a 	sll	r3,r3,r4
    45a0:	29803fcc 	andi	r6,r5,255
    45a4:	3180201c 	xori	r6,r6,128
    45a8:	38ceb03a 	or	r7,r7,r3
    45ac:	d8801715 	stw	r2,92(sp)
    45b0:	31bfe004 	addi	r6,r6,-128
    45b4:	d9c01515 	stw	r7,84(sp)
    45b8:	210001c4 	addi	r4,r4,7
    45bc:	1007883a 	mov	r3,r2
    45c0:	303ff216 	blt	r6,zero,458c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700458c>
    45c4:	00c007c4 	movi	r3,31
    45c8:	19000836 	bltu	r3,r4,45ec <__gxx_personality_sj0+0x358>
    45cc:	2940100c 	andi	r5,r5,64
    45d0:	28000626 	beq	r5,zero,45ec <__gxx_personality_sj0+0x358>
    45d4:	01c00044 	movi	r7,1
    45d8:	3908983a 	sll	r4,r7,r4
    45dc:	d8c01517 	ldw	r3,84(sp)
    45e0:	0109c83a 	sub	r4,zero,r4
    45e4:	1906b03a 	or	r3,r3,r4
    45e8:	d8c01515 	stw	r3,84(sp)
    45ec:	d8001615 	stw	zero,88(sp)
    45f0:	0009883a 	mov	r4,zero
    45f4:	11400003 	ldbu	r5,0(r2)
    45f8:	d9c01617 	ldw	r7,88(sp)
    45fc:	10800044 	addi	r2,r2,1
    4600:	28c01fcc 	andi	r3,r5,127
    4604:	1906983a 	sll	r3,r3,r4
    4608:	29803fcc 	andi	r6,r5,255
    460c:	3180201c 	xori	r6,r6,128
    4610:	38ceb03a 	or	r7,r7,r3
    4614:	31bfe004 	addi	r6,r6,-128
    4618:	d9c01615 	stw	r7,88(sp)
    461c:	210001c4 	addi	r4,r4,7
    4620:	303ff416 	blt	r6,zero,45f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70045f4>
    4624:	008007c4 	movi	r2,31
    4628:	11000736 	bltu	r2,r4,4648 <__gxx_personality_sj0+0x3b4>
    462c:	2940100c 	andi	r5,r5,64
    4630:	28000526 	beq	r5,zero,4648 <__gxx_personality_sj0+0x3b4>
    4634:	00c00044 	movi	r3,1
    4638:	1908983a 	sll	r4,r3,r4
    463c:	0109c83a 	sub	r4,zero,r4
    4640:	390eb03a 	or	r7,r7,r4
    4644:	d9c01615 	stw	r7,88(sp)
    4648:	d9001517 	ldw	r4,84(sp)
    464c:	20003c26 	beq	r4,zero,4740 <__gxx_personality_sj0+0x4ac>
    4650:	01003e0e 	bge	zero,r4,474c <__gxx_personality_sj0+0x4b8>
    4654:	01ffffc4 	movi	r7,-1
    4658:	200b883a 	mov	r5,r4
    465c:	d809883a 	mov	r4,sp
    4660:	d9c00915 	stw	r7,36(sp)
    4664:	0003d900 	call	3d90 <_ZL15get_ttype_entryP16lsda_header_infom>
    4668:	10005f26 	beq	r2,zero,47e8 <__gxx_personality_sj0+0x554>
    466c:	d8c01e17 	ldw	r3,120(sp)
    4670:	1800571e 	bne	r3,zero,47d0 <__gxx_personality_sj0+0x53c>
    4674:	d9001617 	ldw	r4,88(sp)
    4678:	20002926 	beq	r4,zero,4720 <__gxx_personality_sj0+0x48c>
    467c:	d9c01717 	ldw	r7,92(sp)
    4680:	390f883a 	add	r7,r7,r4
    4684:	d9c01815 	stw	r7,96(sp)
    4688:	003fbd06 	br	4580 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004580>
    468c:	d8c01f17 	ldw	r3,124(sp)
    4690:	1800251e 	bne	r3,zero,4728 <__gxx_personality_sj0+0x494>
    4694:	01000204 	movi	r4,8
    4698:	d9001515 	stw	r4,84(sp)
    469c:	003f1806 	br	4300 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004300>
    46a0:	d8801c17 	ldw	r2,112(sp)
    46a4:	10000d26 	beq	r2,zero,46dc <__gxx_personality_sj0+0x448>
    46a8:	00800184 	movi	r2,6
    46ac:	d8801515 	stw	r2,84(sp)
    46b0:	003f1306 	br	4300 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004300>
    46b4:	00800044 	movi	r2,1
    46b8:	18bf4d1e 	bne	r3,r2,43f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70043f0>
    46bc:	0003a580 	call	3a58 <_ZSt9terminatev>
    46c0:	d9001b17 	ldw	r4,108(sp)
    46c4:	00800044 	movi	r2,1
    46c8:	113f4536 	bltu	r2,r4,43e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70043e0>
    46cc:	00800044 	movi	r2,1
    46d0:	18bf841e 	bne	r3,r2,44e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70044e4>
    46d4:	d9002317 	ldw	r4,140(sp)
    46d8:	0004dac0 	call	4dac <__cxa_call_terminate>
    46dc:	d8c01b17 	ldw	r3,108(sp)
    46e0:	00800044 	movi	r2,1
    46e4:	10fff036 	bltu	r2,r3,46a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046a8>
    46e8:	d9002317 	ldw	r4,140(sp)
    46ec:	d8801817 	ldw	r2,96(sp)
    46f0:	d9c01517 	ldw	r7,84(sp)
    46f4:	d8c01a17 	ldw	r3,104(sp)
    46f8:	20bffc15 	stw	r2,-16(r4)
    46fc:	d8800717 	ldw	r2,28(sp)
    4700:	21fffb15 	stw	r7,-20(r4)
    4704:	d9c01f17 	ldw	r7,124(sp)
    4708:	20bfff15 	stw	r2,-4(r4)
    470c:	00800184 	movi	r2,6
    4710:	20fffd15 	stw	r3,-12(r4)
    4714:	21fffe15 	stw	r7,-8(r4)
    4718:	d8801515 	stw	r2,84(sp)
    471c:	003ef806 	br	4300 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004300>
    4720:	d8801d03 	ldbu	r2,116(sp)
    4724:	103fdb26 	beq	r2,zero,4694 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004694>
    4728:	d8c01917 	ldw	r3,100(sp)
    472c:	1880004c 	andi	r2,r3,1
    4730:	103fd81e 	bne	r2,zero,4694 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004694>
    4734:	d8001515 	stw	zero,84(sp)
    4738:	00c00084 	movi	r3,2
    473c:	003f2306 	br	43cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70043cc>
    4740:	00c00044 	movi	r3,1
    4744:	d8c01d05 	stb	r3,116(sp)
    4748:	003fca06 	br	4674 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004674>
    474c:	d9001e17 	ldw	r4,120(sp)
    4750:	20000426 	beq	r4,zero,4764 <__gxx_personality_sj0+0x4d0>
    4754:	d9c02017 	ldw	r7,128(sp)
    4758:	3800021e 	bne	r7,zero,4764 <__gxx_personality_sj0+0x4d0>
    475c:	d8801c17 	ldw	r2,112(sp)
    4760:	10002726 	beq	r2,zero,4800 <__gxx_personality_sj0+0x56c>
    4764:	d8801517 	ldw	r2,84(sp)
    4768:	000d883a 	mov	r6,zero
    476c:	000b883a 	mov	r5,zero
    4770:	0088303a 	nor	r4,zero,r2
    4774:	d8800317 	ldw	r2,12(sp)
    4778:	1109883a 	add	r4,r2,r4
    477c:	20800003 	ldbu	r2,0(r4)
    4780:	21000044 	addi	r4,r4,1
    4784:	10c01fcc 	andi	r3,r2,127
    4788:	1946983a 	sll	r3,r3,r5
    478c:	10803fcc 	andi	r2,r2,255
    4790:	1080201c 	xori	r2,r2,128
    4794:	10bfe004 	addi	r2,r2,-128
    4798:	30ccb03a 	or	r6,r6,r3
    479c:	294001c4 	addi	r5,r5,7
    47a0:	103ff616 	blt	r2,zero,477c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700477c>
    47a4:	3005003a 	cmpeq	r2,r6,zero
    47a8:	10803fcc 	andi	r2,r2,255
    47ac:	103fb126 	beq	r2,zero,4674 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004674>
    47b0:	d9c01917 	ldw	r7,100(sp)
    47b4:	3880004c 	andi	r2,r7,1
    47b8:	103fb91e 	bne	r2,zero,46a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046a0>
    47bc:	d8802017 	ldw	r2,128(sp)
    47c0:	10002d26 	beq	r2,zero,4878 <__gxx_personality_sj0+0x5e4>
    47c4:	00800044 	movi	r2,1
    47c8:	d8800915 	stw	r2,36(sp)
    47cc:	0003a800 	call	3a80 <_ZSt10unexpectedv>
    47d0:	d9800704 	addi	r6,sp,28
    47d4:	180b883a 	mov	r5,r3
    47d8:	1009883a 	mov	r4,r2
    47dc:	0003fa40 	call	3fa4 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    47e0:	10803fcc 	andi	r2,r2,255
    47e4:	103fa326 	beq	r2,zero,4674 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004674>
    47e8:	00c000c4 	movi	r3,3
    47ec:	003ef406 	br	43c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70043c0>
    47f0:	010000b4 	movhi	r4,2
    47f4:	2108db04 	addi	r4,r4,9068
    47f8:	d9001e15 	stw	r4,120(sp)
    47fc:	003f5f06 	br	457c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700457c>
    4800:	d9001b17 	ldw	r4,108(sp)
    4804:	00c00044 	movi	r3,1
    4808:	193fd636 	bltu	r3,r4,4764 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004764>
    480c:	01ffffc4 	movi	r7,-1
    4810:	d9c00915 	stw	r7,36(sp)
    4814:	d9800717 	ldw	r6,28(sp)
    4818:	d9c01517 	ldw	r7,84(sp)
    481c:	d9401e17 	ldw	r5,120(sp)
    4820:	d809883a 	mov	r4,sp
    4824:	00041ec0 	call	41ec <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    4828:	1080005c 	xori	r2,r2,1
    482c:	003fde06 	br	47a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70047a8>
    4830:	d9001b17 	ldw	r4,108(sp)
    4834:	00800044 	movi	r2,1
    4838:	113f4d36 	bltu	r2,r4,4570 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004570>
    483c:	d9c02317 	ldw	r7,140(sp)
    4840:	38800017 	ldw	r2,0(r7)
    4844:	1080004c 	andi	r2,r2,1
    4848:	1000061e 	bne	r2,zero,4864 <__gxx_personality_sj0+0x5d0>
    484c:	d8c02317 	ldw	r3,140(sp)
    4850:	18800504 	addi	r2,r3,20
    4854:	d8800715 	stw	r2,28(sp)
    4858:	10bff017 	ldw	r2,-64(r2)
    485c:	d8801e15 	stw	r2,120(sp)
    4860:	003f4606 	br	457c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700457c>
    4864:	38bff517 	ldw	r2,-44(r7)
    4868:	003ffa06 	br	4854 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004854>
    486c:	d9000a17 	ldw	r4,40(sp)
    4870:	0004acc0 	call	4acc <__cxa_begin_catch>
    4874:	003f9106 	br	46bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046bc>
    4878:	d9c01c17 	ldw	r7,112(sp)
    487c:	383eda1e 	bne	r7,zero,43e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70043e8>
    4880:	d8c01b17 	ldw	r3,108(sp)
    4884:	00800044 	movi	r2,1
    4888:	10fed736 	bltu	r2,r3,43e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70043e8>
    488c:	00c000c4 	movi	r3,3
    4890:	003f8e06 	br	46cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70046cc>

00004894 <__cxa_call_unexpected>:
    4894:	00800034 	movhi	r2,0
    4898:	deffe604 	addi	sp,sp,-104
    489c:	1090a504 	addi	r2,r2,17044
    48a0:	d8800d15 	stw	r2,52(sp)
    48a4:	008000b4 	movhi	r2,2
    48a8:	10bc3304 	addi	r2,r2,-3892
    48ac:	d8800e15 	stw	r2,56(sp)
    48b0:	d8800104 	addi	r2,sp,4
    48b4:	d8800f15 	stw	r2,60(sp)
    48b8:	00800034 	movhi	r2,0
    48bc:	10924804 	addi	r2,r2,18720
    48c0:	d9001415 	stw	r4,80(sp)
    48c4:	d9000704 	addi	r4,sp,28
    48c8:	dfc01915 	stw	ra,100(sp)
    48cc:	d8801015 	stw	r2,64(sp)
    48d0:	df001815 	stw	fp,96(sp)
    48d4:	dec01115 	stw	sp,68(sp)
    48d8:	000679c0 	call	679c <_Unwind_SjLj_Register>
    48dc:	d9001417 	ldw	r4,80(sp)
    48e0:	0004acc0 	call	4acc <__cxa_begin_catch>
    48e4:	d8c01417 	ldw	r3,80(sp)
    48e8:	18bffe17 	ldw	r2,-8(r3)
    48ec:	193ff717 	ldw	r4,-36(r3)
    48f0:	18fffd17 	ldw	r3,-12(r3)
    48f4:	d8800315 	stw	r2,12(sp)
    48f8:	d8c01615 	stw	r3,88(sp)
    48fc:	d8c01417 	ldw	r3,80(sp)
    4900:	18fffb17 	ldw	r3,-20(r3)
    4904:	d8c01515 	stw	r3,84(sp)
    4908:	d8c01417 	ldw	r3,80(sp)
    490c:	18fff817 	ldw	r3,-32(r3)
    4910:	d8c01415 	stw	r3,80(sp)
    4914:	00c00044 	movi	r3,1
    4918:	d8c00815 	stw	r3,32(sp)
    491c:	0003a700 	call	3a70 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    4920:	d8c00917 	ldw	r3,36(sp)
    4924:	d8800817 	ldw	r2,32(sp)
    4928:	d8c01715 	stw	r3,92(sp)
    492c:	10000a26 	beq	r2,zero,4958 <__cxa_call_unexpected+0xc4>
    4930:	10bfffc4 	addi	r2,r2,-1
    4934:	10000126 	beq	r2,zero,493c <__cxa_call_unexpected+0xa8>
    4938:	003b68fa 	trap	3
    493c:	d8000815 	stw	zero,32(sp)
    4940:	0004b800 	call	4b80 <__cxa_end_catch>
    4944:	0004b800 	call	4b80 <__cxa_end_catch>
    4948:	d9001717 	ldw	r4,92(sp)
    494c:	00bfffc4 	movi	r2,-1
    4950:	d8800815 	stw	r2,32(sp)
    4954:	00069980 	call	6998 <_Unwind_SjLj_Resume>
    4958:	d9001717 	ldw	r4,92(sp)
    495c:	0004acc0 	call	4acc <__cxa_begin_catch>
    4960:	00051000 	call	5100 <__cxa_get_globals_fast>
    4964:	10800017 	ldw	r2,0(r2)
    4968:	10c00b17 	ldw	r3,44(r2)
    496c:	18c0004c 	andi	r3,r3,1
    4970:	18001e26 	beq	r3,zero,49ec <__cxa_call_unexpected+0x158>
    4974:	10800017 	ldw	r2,0(r2)
    4978:	d8801715 	stw	r2,92(sp)
    497c:	d8801517 	ldw	r2,84(sp)
    4980:	00802b0e 	bge	zero,r2,4a30 <__cxa_call_unexpected+0x19c>
    4984:	d8c01717 	ldw	r3,92(sp)
    4988:	d8800317 	ldw	r2,12(sp)
    498c:	d9c01517 	ldw	r7,84(sp)
    4990:	193ff017 	ldw	r4,-64(r3)
    4994:	d9801617 	ldw	r6,88(sp)
    4998:	d8800015 	stw	r2,0(sp)
    499c:	180b883a 	mov	r5,r3
    49a0:	00800084 	movi	r2,2
    49a4:	d8800815 	stw	r2,32(sp)
    49a8:	000402c0 	call	402c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    49ac:	10803fcc 	andi	r2,r2,255
    49b0:	10001e1e 	bne	r2,zero,4a2c <__cxa_call_unexpected+0x198>
    49b4:	d8800317 	ldw	r2,12(sp)
    49b8:	d9c01517 	ldw	r7,84(sp)
    49bc:	d9801617 	ldw	r6,88(sp)
    49c0:	010000b4 	movhi	r4,2
    49c4:	d8800015 	stw	r2,0(sp)
    49c8:	213f8704 	addi	r4,r4,-484
    49cc:	00800084 	movi	r2,2
    49d0:	000b883a 	mov	r5,zero
    49d4:	d8800815 	stw	r2,32(sp)
    49d8:	000402c0 	call	402c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    49dc:	10803fcc 	andi	r2,r2,255
    49e0:	1000051e 	bne	r2,zero,49f8 <__cxa_call_unexpected+0x164>
    49e4:	d9001417 	ldw	r4,80(sp)
    49e8:	00039980 	call	3998 <_ZN10__cxxabiv111__terminateEPFvvE>
    49ec:	10801004 	addi	r2,r2,64
    49f0:	d8801715 	stw	r2,92(sp)
    49f4:	003fe106 	br	497c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700497c>
    49f8:	01000104 	movi	r4,4
    49fc:	0004f640 	call	4f64 <__cxa_allocate_exception>
    4a00:	00c000b4 	movhi	r3,2
    4a04:	18ffa204 	addi	r3,r3,-376
    4a08:	01800034 	movhi	r6,0
    4a0c:	014000b4 	movhi	r5,2
    4a10:	10c00015 	stw	r3,0(r2)
    4a14:	31943304 	addi	r6,r6,20684
    4a18:	00c00084 	movi	r3,2
    4a1c:	297f8704 	addi	r5,r5,-484
    4a20:	1009883a 	mov	r4,r2
    4a24:	d8c00815 	stw	r3,32(sp)
    4a28:	0004c980 	call	4c98 <__cxa_throw>
    4a2c:	0004d280 	call	4d28 <__cxa_rethrow>
    4a30:	d9401617 	ldw	r5,88(sp)
    4a34:	00800084 	movi	r2,2
    4a38:	d9800104 	addi	r6,sp,4
    4a3c:	0009883a 	mov	r4,zero
    4a40:	d8800815 	stw	r2,32(sp)
    4a44:	0003e700 	call	3e70 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    4a48:	d9801717 	ldw	r6,92(sp)
    4a4c:	d9c01517 	ldw	r7,84(sp)
    4a50:	d9000104 	addi	r4,sp,4
    4a54:	317ff017 	ldw	r5,-64(r6)
    4a58:	00041ec0 	call	41ec <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    4a5c:	10803fcc 	andi	r2,r2,255
    4a60:	1000171e 	bne	r2,zero,4ac0 <__cxa_call_unexpected+0x22c>
    4a64:	d9c01517 	ldw	r7,84(sp)
    4a68:	014000b4 	movhi	r5,2
    4a6c:	00800084 	movi	r2,2
    4a70:	297f8704 	addi	r5,r5,-484
    4a74:	000d883a 	mov	r6,zero
    4a78:	d9000104 	addi	r4,sp,4
    4a7c:	d8800815 	stw	r2,32(sp)
    4a80:	00041ec0 	call	41ec <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    4a84:	10803fcc 	andi	r2,r2,255
    4a88:	103fd626 	beq	r2,zero,49e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70049e4>
    4a8c:	01000104 	movi	r4,4
    4a90:	0004f640 	call	4f64 <__cxa_allocate_exception>
    4a94:	00c000b4 	movhi	r3,2
    4a98:	18ffa204 	addi	r3,r3,-376
    4a9c:	01800034 	movhi	r6,0
    4aa0:	014000b4 	movhi	r5,2
    4aa4:	10c00015 	stw	r3,0(r2)
    4aa8:	31943304 	addi	r6,r6,20684
    4aac:	00c00084 	movi	r3,2
    4ab0:	297f8704 	addi	r5,r5,-484
    4ab4:	1009883a 	mov	r4,r2
    4ab8:	d8c00815 	stw	r3,32(sp)
    4abc:	0004c980 	call	4c98 <__cxa_throw>
    4ac0:	0004d280 	call	4d28 <__cxa_rethrow>

00004ac4 <__cxa_get_exception_ptr>:
    4ac4:	20bfff17 	ldw	r2,-4(r4)
    4ac8:	f800283a 	ret

00004acc <__cxa_begin_catch>:
    4acc:	defffe04 	addi	sp,sp,-8
    4ad0:	dc000015 	stw	r16,0(sp)
    4ad4:	dfc00115 	stw	ra,4(sp)
    4ad8:	2021883a 	mov	r16,r4
    4adc:	000510c0 	call	510c <__cxa_get_globals>
    4ae0:	81000017 	ldw	r4,0(r16)
    4ae4:	80c00117 	ldw	r3,4(r16)
    4ae8:	01af3574 	movhi	r6,48341
    4aec:	31b54004 	addi	r6,r6,-11008
    4af0:	016e2cb4 	movhi	r5,47282
    4af4:	296aaf04 	addi	r5,r5,-21828
    4af8:	218d883a 	add	r6,r4,r6
    4afc:	3109803a 	cmpltu	r4,r6,r4
    4b00:	1947883a 	add	r3,r3,r5
    4b04:	20c7883a 	add	r3,r4,r3
    4b08:	817ff504 	addi	r5,r16,-44
    4b0c:	11000017 	ldw	r4,0(r2)
    4b10:	18000726 	beq	r3,zero,4b30 <__cxa_begin_catch+0x64>
    4b14:	2000191e 	bne	r4,zero,4b7c <__cxa_begin_catch+0xb0>
    4b18:	11400015 	stw	r5,0(r2)
    4b1c:	0005883a 	mov	r2,zero
    4b20:	dfc00117 	ldw	ra,4(sp)
    4b24:	dc000017 	ldw	r16,0(sp)
    4b28:	dec00204 	addi	sp,sp,8
    4b2c:	f800283a 	ret
    4b30:	01c00044 	movi	r7,1
    4b34:	39bff736 	bltu	r7,r6,4b14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b14>
    4b38:	80fffa17 	ldw	r3,-24(r16)
    4b3c:	18000d16 	blt	r3,zero,4b74 <__cxa_begin_catch+0xa8>
    4b40:	18c00044 	addi	r3,r3,1
    4b44:	11800117 	ldw	r6,4(r2)
    4b48:	80fffa15 	stw	r3,-24(r16)
    4b4c:	30ffffc4 	addi	r3,r6,-1
    4b50:	10c00115 	stw	r3,4(r2)
    4b54:	21400226 	beq	r4,r5,4b60 <__cxa_begin_catch+0x94>
    4b58:	813ff915 	stw	r4,-28(r16)
    4b5c:	11400015 	stw	r5,0(r2)
    4b60:	80bfff17 	ldw	r2,-4(r16)
    4b64:	dfc00117 	ldw	ra,4(sp)
    4b68:	dc000017 	ldw	r16,0(sp)
    4b6c:	dec00204 	addi	sp,sp,8
    4b70:	f800283a 	ret
    4b74:	38c7c83a 	sub	r3,r7,r3
    4b78:	003ff206 	br	4b44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004b44>
    4b7c:	0003a580 	call	3a58 <_ZSt9terminatev>

00004b80 <__cxa_end_catch>:
    4b80:	deffff04 	addi	sp,sp,-4
    4b84:	dfc00015 	stw	ra,0(sp)
    4b88:	00051000 	call	5100 <__cxa_get_globals_fast>
    4b8c:	11000017 	ldw	r4,0(r2)
    4b90:	20001426 	beq	r4,zero,4be4 <__cxa_end_catch+0x64>
    4b94:	21400b17 	ldw	r5,44(r4)
    4b98:	01ef3574 	movhi	r7,48341
    4b9c:	39f54004 	addi	r7,r7,-11008
    4ba0:	29cf883a 	add	r7,r5,r7
    4ba4:	20c00c17 	ldw	r3,48(r4)
    4ba8:	394d803a 	cmpltu	r6,r7,r5
    4bac:	016e2cb4 	movhi	r5,47282
    4bb0:	296aaf04 	addi	r5,r5,-21828
    4bb4:	1947883a 	add	r3,r3,r5
    4bb8:	30c7883a 	add	r3,r6,r3
    4bbc:	18000c1e 	bne	r3,zero,4bf0 <__cxa_end_catch+0x70>
    4bc0:	00c00044 	movi	r3,1
    4bc4:	19c00a36 	bltu	r3,r7,4bf0 <__cxa_end_catch+0x70>
    4bc8:	20c00517 	ldw	r3,20(r4)
    4bcc:	18000d16 	blt	r3,zero,4c04 <__cxa_end_catch+0x84>
    4bd0:	18ffffc4 	addi	r3,r3,-1
    4bd4:	18001026 	beq	r3,zero,4c18 <__cxa_end_catch+0x98>
    4bd8:	00bfffc4 	movi	r2,-1
    4bdc:	18801426 	beq	r3,r2,4c30 <__cxa_end_catch+0xb0>
    4be0:	20c00515 	stw	r3,20(r4)
    4be4:	dfc00017 	ldw	ra,0(sp)
    4be8:	dec00104 	addi	sp,sp,4
    4bec:	f800283a 	ret
    4bf0:	21000b04 	addi	r4,r4,44
    4bf4:	10000015 	stw	zero,0(r2)
    4bf8:	dfc00017 	ldw	ra,0(sp)
    4bfc:	dec00104 	addi	sp,sp,4
    4c00:	0006a281 	jmpi	6a28 <_Unwind_DeleteException>
    4c04:	18c00044 	addi	r3,r3,1
    4c08:	183ff51e 	bne	r3,zero,4be0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004be0>
    4c0c:	21400417 	ldw	r5,16(r4)
    4c10:	11400015 	stw	r5,0(r2)
    4c14:	003ff206 	br	4be0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004be0>
    4c18:	20c00417 	ldw	r3,16(r4)
    4c1c:	21000b04 	addi	r4,r4,44
    4c20:	10c00015 	stw	r3,0(r2)
    4c24:	dfc00017 	ldw	ra,0(sp)
    4c28:	dec00104 	addi	sp,sp,4
    4c2c:	0006a281 	jmpi	6a28 <_Unwind_DeleteException>
    4c30:	0003a580 	call	3a58 <_ZSt9terminatev>

00004c34 <_ZSt18uncaught_exceptionv>:
    4c34:	deffff04 	addi	sp,sp,-4
    4c38:	dfc00015 	stw	ra,0(sp)
    4c3c:	000510c0 	call	510c <__cxa_get_globals>
    4c40:	10800117 	ldw	r2,4(r2)
    4c44:	1004c03a 	cmpne	r2,r2,zero
    4c48:	dfc00017 	ldw	ra,0(sp)
    4c4c:	dec00104 	addi	sp,sp,4
    4c50:	f800283a 	ret

00004c54 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
    4c54:	defffe04 	addi	sp,sp,-8
    4c58:	dfc00115 	stw	ra,4(sp)
    4c5c:	dc000015 	stw	r16,0(sp)
    4c60:	00800044 	movi	r2,1
    4c64:	11000a36 	bltu	r2,r4,4c90 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
    4c68:	28bff617 	ldw	r2,-40(r5)
    4c6c:	2c000504 	addi	r16,r5,20
    4c70:	10000226 	beq	r2,zero,4c7c <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
    4c74:	8009883a 	mov	r4,r16
    4c78:	103ee83a 	callr	r2
    4c7c:	8009883a 	mov	r4,r16
    4c80:	dfc00117 	ldw	ra,4(sp)
    4c84:	dc000017 	ldw	r16,0(sp)
    4c88:	dec00204 	addi	sp,sp,8
    4c8c:	0004fc41 	jmpi	4fc4 <__cxa_free_exception>
    4c90:	293ff817 	ldw	r4,-32(r5)
    4c94:	00039980 	call	3998 <_ZN10__cxxabiv111__terminateEPFvvE>

00004c98 <__cxa_throw>:
    4c98:	defffb04 	addi	sp,sp,-20
    4c9c:	dfc00415 	stw	ra,16(sp)
    4ca0:	dcc00315 	stw	r19,12(sp)
    4ca4:	dc800215 	stw	r18,8(sp)
    4ca8:	2827883a 	mov	r19,r5
    4cac:	3025883a 	mov	r18,r6
    4cb0:	dc400115 	stw	r17,4(sp)
    4cb4:	dc000015 	stw	r16,0(sp)
    4cb8:	2021883a 	mov	r16,r4
    4cbc:	000510c0 	call	510c <__cxa_get_globals>
    4cc0:	10c00117 	ldw	r3,4(r2)
    4cc4:	847ffb04 	addi	r17,r16,-20
    4cc8:	18c00044 	addi	r3,r3,1
    4ccc:	10c00115 	stw	r3,4(r2)
    4cd0:	00800044 	movi	r2,1
    4cd4:	80bfef15 	stw	r2,-68(r16)
    4cd8:	84fff015 	stw	r19,-64(r16)
    4cdc:	84bff115 	stw	r18,-60(r16)
    4ce0:	0003ad00 	call	3ad0 <_ZSt14get_unexpectedv>
    4ce4:	80bff215 	stw	r2,-56(r16)
    4ce8:	0003aac0 	call	3aac <_ZSt13get_terminatev>
    4cec:	80bff315 	stw	r2,-52(r16)
    4cf0:	0090caf4 	movhi	r2,17195
    4cf4:	108ac004 	addi	r2,r2,11008
    4cf8:	80bffb15 	stw	r2,-20(r16)
    4cfc:	0091d3b4 	movhi	r2,18254
    4d00:	109550c4 	addi	r2,r2,21827
    4d04:	80bffc15 	stw	r2,-16(r16)
    4d08:	00800034 	movhi	r2,0
    4d0c:	10931504 	addi	r2,r2,19540
    4d10:	8809883a 	mov	r4,r17
    4d14:	80bffd15 	stw	r2,-12(r16)
    4d18:	00068840 	call	6884 <_Unwind_SjLj_RaiseException>
    4d1c:	8809883a 	mov	r4,r17
    4d20:	0004acc0 	call	4acc <__cxa_begin_catch>
    4d24:	0003a580 	call	3a58 <_ZSt9terminatev>

00004d28 <__cxa_rethrow>:
    4d28:	defffe04 	addi	sp,sp,-8
    4d2c:	dfc00115 	stw	ra,4(sp)
    4d30:	dc000015 	stw	r16,0(sp)
    4d34:	000510c0 	call	510c <__cxa_get_globals>
    4d38:	10c00117 	ldw	r3,4(r2)
    4d3c:	11000017 	ldw	r4,0(r2)
    4d40:	18c00044 	addi	r3,r3,1
    4d44:	10c00115 	stw	r3,4(r2)
    4d48:	20001126 	beq	r4,zero,4d90 <__cxa_rethrow+0x68>
    4d4c:	21400b17 	ldw	r5,44(r4)
    4d50:	01ef3574 	movhi	r7,48341
    4d54:	39f54004 	addi	r7,r7,-11008
    4d58:	29cf883a 	add	r7,r5,r7
    4d5c:	20c00c17 	ldw	r3,48(r4)
    4d60:	394d803a 	cmpltu	r6,r7,r5
    4d64:	016e2cb4 	movhi	r5,47282
    4d68:	296aaf04 	addi	r5,r5,-21828
    4d6c:	1947883a 	add	r3,r3,r5
    4d70:	30c7883a 	add	r3,r6,r3
    4d74:	18000726 	beq	r3,zero,4d94 <__cxa_rethrow+0x6c>
    4d78:	10000015 	stw	zero,0(r2)
    4d7c:	24000b04 	addi	r16,r4,44
    4d80:	8009883a 	mov	r4,r16
    4d84:	00069dc0 	call	69dc <_Unwind_SjLj_Resume_or_Rethrow>
    4d88:	8009883a 	mov	r4,r16
    4d8c:	0004acc0 	call	4acc <__cxa_begin_catch>
    4d90:	0003a580 	call	3a58 <_ZSt9terminatev>
    4d94:	00c00044 	movi	r3,1
    4d98:	19fff736 	bltu	r3,r7,4d78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004d78>
    4d9c:	20800517 	ldw	r2,20(r4)
    4da0:	0085c83a 	sub	r2,zero,r2
    4da4:	20800515 	stw	r2,20(r4)
    4da8:	003ff406 	br	4d7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004d7c>

00004dac <__cxa_call_terminate>:
    4dac:	defffe04 	addi	sp,sp,-8
    4db0:	dfc00115 	stw	ra,4(sp)
    4db4:	dc000015 	stw	r16,0(sp)
    4db8:	20000d26 	beq	r4,zero,4df0 <__cxa_call_terminate+0x44>
    4dbc:	2021883a 	mov	r16,r4
    4dc0:	0004acc0 	call	4acc <__cxa_begin_catch>
    4dc4:	80c00017 	ldw	r3,0(r16)
    4dc8:	016f3574 	movhi	r5,48341
    4dcc:	29754004 	addi	r5,r5,-11008
    4dd0:	194b883a 	add	r5,r3,r5
    4dd4:	80800117 	ldw	r2,4(r16)
    4dd8:	28c9803a 	cmpltu	r4,r5,r3
    4ddc:	00ee2cb4 	movhi	r3,47282
    4de0:	18eaaf04 	addi	r3,r3,-21828
    4de4:	10c5883a 	add	r2,r2,r3
    4de8:	2085883a 	add	r2,r4,r2
    4dec:	10000126 	beq	r2,zero,4df4 <__cxa_call_terminate+0x48>
    4df0:	0003a580 	call	3a58 <_ZSt9terminatev>
    4df4:	00800044 	movi	r2,1
    4df8:	117ffd36 	bltu	r2,r5,4df0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004df0>
    4dfc:	813ff817 	ldw	r4,-32(r16)
    4e00:	00039980 	call	3998 <_ZN10__cxxabiv111__terminateEPFvvE>

00004e04 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
    4e04:	018000f4 	movhi	r6,3
    4e08:	31a92804 	addi	r6,r6,-23392
    4e0c:	31400117 	ldw	r5,4(r6)
    4e10:	223fff04 	addi	r8,r4,-4
    4e14:	227fff17 	ldw	r9,-4(r4)
    4e18:	28001326 	beq	r5,zero,4e68 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
    4e1c:	424f883a 	add	r7,r8,r9
    4e20:	29c01426 	beq	r5,r7,4e74 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
    4e24:	28c00117 	ldw	r3,4(r5)
    4e28:	18001c26 	beq	r3,zero,4e9c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
    4e2c:	38c00336 	bltu	r7,r3,4e3c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
    4e30:	00001e06 	br	4eac <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
    4e34:	3880052e 	bgeu	r7,r2,4e4c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
    4e38:	1007883a 	mov	r3,r2
    4e3c:	18800117 	ldw	r2,4(r3)
    4e40:	29800104 	addi	r6,r5,4
    4e44:	180b883a 	mov	r5,r3
    4e48:	103ffa1e 	bne	r2,zero,4e34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004e34>
    4e4c:	19400017 	ldw	r5,0(r3)
    4e50:	194f883a 	add	r7,r3,r5
    4e54:	41c00e26 	beq	r8,r7,4e90 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
    4e58:	20800015 	stw	r2,0(r4)
    4e5c:	30800017 	ldw	r2,0(r6)
    4e60:	12000115 	stw	r8,4(r2)
    4e64:	f800283a 	ret
    4e68:	20000015 	stw	zero,0(r4)
    4e6c:	32000115 	stw	r8,4(r6)
    4e70:	f800283a 	ret
    4e74:	28c00017 	ldw	r3,0(r5)
    4e78:	28800117 	ldw	r2,4(r5)
    4e7c:	1a53883a 	add	r9,r3,r9
    4e80:	227fff15 	stw	r9,-4(r4)
    4e84:	20800015 	stw	r2,0(r4)
    4e88:	32000115 	stw	r8,4(r6)
    4e8c:	f800283a 	ret
    4e90:	494b883a 	add	r5,r9,r5
    4e94:	19400015 	stw	r5,0(r3)
    4e98:	f800283a 	ret
    4e9c:	0005883a 	mov	r2,zero
    4ea0:	2807883a 	mov	r3,r5
    4ea4:	31800104 	addi	r6,r6,4
    4ea8:	003fe806 	br	4e4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004e4c>
    4eac:	1805883a 	mov	r2,r3
    4eb0:	31800104 	addi	r6,r6,4
    4eb4:	2807883a 	mov	r3,r5
    4eb8:	003fe406 	br	4e4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004e4c>

00004ebc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
    4ebc:	20800104 	addi	r2,r4,4
    4ec0:	00c001c4 	movi	r3,7
    4ec4:	1880112e 	bgeu	r3,r2,4f0c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
    4ec8:	20c9883a 	add	r4,r4,r3
    4ecc:	00bfff04 	movi	r2,-4
    4ed0:	208a703a 	and	r5,r4,r2
    4ed4:	018000f4 	movhi	r6,3
    4ed8:	31a92804 	addi	r6,r6,-23392
    4edc:	30c00117 	ldw	r3,4(r6)
    4ee0:	18000826 	beq	r3,zero,4f04 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
    4ee4:	19000017 	ldw	r4,0(r3)
    4ee8:	21400436 	bltu	r4,r5,4efc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
    4eec:	00001a06 	br	4f58 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
    4ef0:	11000017 	ldw	r4,0(r2)
    4ef4:	2140072e 	bgeu	r4,r5,4f14 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
    4ef8:	1007883a 	mov	r3,r2
    4efc:	18800117 	ldw	r2,4(r3)
    4f00:	103ffb1e 	bne	r2,zero,4ef0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004ef0>
    4f04:	0005883a 	mov	r2,zero
    4f08:	f800283a 	ret
    4f0c:	01400204 	movi	r5,8
    4f10:	003ff006 	br	4ed4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004ed4>
    4f14:	18c00104 	addi	r3,r3,4
    4f18:	2149c83a 	sub	r4,r4,r5
    4f1c:	018001c4 	movi	r6,7
    4f20:	3100092e 	bgeu	r6,r4,4f48 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
    4f24:	11c00117 	ldw	r7,4(r2)
    4f28:	114d883a 	add	r6,r2,r5
    4f2c:	31000015 	stw	r4,0(r6)
    4f30:	31c00115 	stw	r7,4(r6)
    4f34:	18800017 	ldw	r2,0(r3)
    4f38:	11400015 	stw	r5,0(r2)
    4f3c:	19800015 	stw	r6,0(r3)
    4f40:	10800104 	addi	r2,r2,4
    4f44:	f800283a 	ret
    4f48:	11000117 	ldw	r4,4(r2)
    4f4c:	10800104 	addi	r2,r2,4
    4f50:	19000015 	stw	r4,0(r3)
    4f54:	f800283a 	ret
    4f58:	1805883a 	mov	r2,r3
    4f5c:	30c00104 	addi	r3,r6,4
    4f60:	003fed06 	br	4f18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004f18>

00004f64 <__cxa_allocate_exception>:
    4f64:	defffd04 	addi	sp,sp,-12
    4f68:	dc400115 	stw	r17,4(sp)
    4f6c:	24401104 	addi	r17,r4,68
    4f70:	8809883a 	mov	r4,r17
    4f74:	dc000015 	stw	r16,0(sp)
    4f78:	dfc00215 	stw	ra,8(sp)
    4f7c:	0006b300 	call	6b30 <malloc>
    4f80:	1021883a 	mov	r16,r2
    4f84:	10000a26 	beq	r2,zero,4fb0 <__cxa_allocate_exception+0x4c>
    4f88:	01801104 	movi	r6,68
    4f8c:	000b883a 	mov	r5,zero
    4f90:	8009883a 	mov	r4,r16
    4f94:	00074ac0 	call	74ac <memset>
    4f98:	80801104 	addi	r2,r16,68
    4f9c:	dfc00217 	ldw	ra,8(sp)
    4fa0:	dc400117 	ldw	r17,4(sp)
    4fa4:	dc000017 	ldw	r16,0(sp)
    4fa8:	dec00304 	addi	sp,sp,12
    4fac:	f800283a 	ret
    4fb0:	8809883a 	mov	r4,r17
    4fb4:	0004ebc0 	call	4ebc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    4fb8:	1021883a 	mov	r16,r2
    4fbc:	103ff21e 	bne	r2,zero,4f88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004f88>
    4fc0:	0003a580 	call	3a58 <_ZSt9terminatev>

00004fc4 <__cxa_free_exception>:
    4fc4:	00c000f4 	movhi	r3,3
    4fc8:	18e92804 	addi	r3,r3,-23392
    4fcc:	18800217 	ldw	r2,8(r3)
    4fd0:	213fef04 	addi	r4,r4,-68
    4fd4:	1100042e 	bgeu	r2,r4,4fe8 <__cxa_free_exception+0x24>
    4fd8:	18c00317 	ldw	r3,12(r3)
    4fdc:	10c5883a 	add	r2,r2,r3
    4fe0:	2080012e 	bgeu	r4,r2,4fe8 <__cxa_free_exception+0x24>
    4fe4:	0004e041 	jmpi	4e04 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    4fe8:	0006b441 	jmpi	6b44 <free>

00004fec <__cxa_allocate_dependent_exception>:
    4fec:	defffe04 	addi	sp,sp,-8
    4ff0:	01001004 	movi	r4,64
    4ff4:	dc000015 	stw	r16,0(sp)
    4ff8:	dfc00115 	stw	ra,4(sp)
    4ffc:	0006b300 	call	6b30 <malloc>
    5000:	1021883a 	mov	r16,r2
    5004:	10000926 	beq	r2,zero,502c <__cxa_allocate_dependent_exception+0x40>
    5008:	01801004 	movi	r6,64
    500c:	000b883a 	mov	r5,zero
    5010:	8009883a 	mov	r4,r16
    5014:	00074ac0 	call	74ac <memset>
    5018:	8005883a 	mov	r2,r16
    501c:	dfc00117 	ldw	ra,4(sp)
    5020:	dc000017 	ldw	r16,0(sp)
    5024:	dec00204 	addi	sp,sp,8
    5028:	f800283a 	ret
    502c:	01001004 	movi	r4,64
    5030:	0004ebc0 	call	4ebc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    5034:	1021883a 	mov	r16,r2
    5038:	103ff31e 	bne	r2,zero,5008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005008>
    503c:	0003a580 	call	3a58 <_ZSt9terminatev>

00005040 <__cxa_free_dependent_exception>:
    5040:	014000f4 	movhi	r5,3
    5044:	29692804 	addi	r5,r5,-23392
    5048:	28c00217 	ldw	r3,8(r5)
    504c:	2005883a 	mov	r2,r4
    5050:	1900042e 	bgeu	r3,r4,5064 <__cxa_free_dependent_exception+0x24>
    5054:	29400317 	ldw	r5,12(r5)
    5058:	1947883a 	add	r3,r3,r5
    505c:	20c0012e 	bgeu	r4,r3,5064 <__cxa_free_dependent_exception+0x24>
    5060:	0004e041 	jmpi	4e04 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    5064:	1009883a 	mov	r4,r2
    5068:	0006b441 	jmpi	6b44 <free>

0000506c <_GLOBAL__sub_I___cxa_allocate_exception>:
    506c:	defffd04 	addi	sp,sp,-12
    5070:	dc400115 	stw	r17,4(sp)
    5074:	dc000015 	stw	r16,0(sp)
    5078:	04424004 	movi	r17,2304
    507c:	040000f4 	movhi	r16,3
    5080:	84292804 	addi	r16,r16,-23392
    5084:	8809883a 	mov	r4,r17
    5088:	dfc00215 	stw	ra,8(sp)
    508c:	84400315 	stw	r17,12(r16)
    5090:	0006b300 	call	6b30 <malloc>
    5094:	80800215 	stw	r2,8(r16)
    5098:	10000826 	beq	r2,zero,50bc <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
    509c:	80800115 	stw	r2,4(r16)
    50a0:	14400015 	stw	r17,0(r2)
    50a4:	10000115 	stw	zero,4(r2)
    50a8:	dfc00217 	ldw	ra,8(sp)
    50ac:	dc400117 	ldw	r17,4(sp)
    50b0:	dc000017 	ldw	r16,0(sp)
    50b4:	dec00304 	addi	sp,sp,12
    50b8:	f800283a 	ret
    50bc:	80000315 	stw	zero,12(r16)
    50c0:	80000115 	stw	zero,4(r16)
    50c4:	003ff806 	br	50a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70050a8>

000050c8 <_ZNSt9exceptionD1Ev>:
    50c8:	f800283a 	ret

000050cc <_ZNSt13bad_exceptionD1Ev>:
    50cc:	f800283a 	ret

000050d0 <_ZNKSt9exception4whatEv>:
    50d0:	008000b4 	movhi	r2,2
    50d4:	10bf7504 	addi	r2,r2,-556
    50d8:	f800283a 	ret

000050dc <_ZNKSt13bad_exception4whatEv>:
    50dc:	008000b4 	movhi	r2,2
    50e0:	10bf7904 	addi	r2,r2,-540
    50e4:	f800283a 	ret

000050e8 <_ZNSt9exceptionD0Ev>:
    50e8:	00039941 	jmpi	3994 <_ZdlPv>

000050ec <_ZNSt13bad_exceptionD0Ev>:
    50ec:	00039941 	jmpi	3994 <_ZdlPv>

000050f0 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
    50f0:	f800283a 	ret

000050f4 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
    50f4:	00039941 	jmpi	3994 <_ZdlPv>

000050f8 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
    50f8:	f800283a 	ret

000050fc <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
    50fc:	00039941 	jmpi	3994 <_ZdlPv>

00005100 <__cxa_get_globals_fast>:
    5100:	008000b4 	movhi	r2,2
    5104:	1090fe04 	addi	r2,r2,17400
    5108:	f800283a 	ret

0000510c <__cxa_get_globals>:
    510c:	008000b4 	movhi	r2,2
    5110:	1090fe04 	addi	r2,r2,17400
    5114:	f800283a 	ret

00005118 <round>:
    5118:	289ffc2c 	andhi	r2,r5,32752
    511c:	1005d53a 	srai	r2,r2,20
    5120:	024004c4 	movi	r9,19
    5124:	2807883a 	mov	r3,r5
    5128:	123f0044 	addi	r8,r2,-1023
    512c:	200d883a 	mov	r6,r4
    5130:	280f883a 	mov	r7,r5
    5134:	4a000916 	blt	r9,r8,515c <round+0x44>
    5138:	40002516 	blt	r8,zero,51d0 <round+0xb8>
    513c:	00800434 	movhi	r2,16
    5140:	10bfffc4 	addi	r2,r2,-1
    5144:	1205d83a 	sra	r2,r2,r8
    5148:	2888703a 	and	r4,r5,r2
    514c:	2000181e 	bne	r4,zero,51b0 <round+0x98>
    5150:	3000171e 	bne	r6,zero,51b0 <round+0x98>
    5154:	0005883a 	mov	r2,zero
    5158:	f800283a 	ret
    515c:	02400cc4 	movi	r9,51
    5160:	4a00040e 	bge	r9,r8,5174 <round+0x5c>
    5164:	00810004 	movi	r2,1024
    5168:	40802126 	beq	r8,r2,51f0 <round+0xd8>
    516c:	3005883a 	mov	r2,r6
    5170:	f800283a 	ret
    5174:	013fffc4 	movi	r4,-1
    5178:	10befb44 	addi	r2,r2,-1043
    517c:	2084d83a 	srl	r2,r4,r2
    5180:	3088703a 	and	r4,r6,r2
    5184:	20001726 	beq	r4,zero,51e4 <round+0xcc>
    5188:	4a11c83a 	sub	r8,r9,r8
    518c:	02400044 	movi	r9,1
    5190:	4a10983a 	sll	r8,r9,r8
    5194:	4191883a 	add	r8,r8,r6
    5198:	4180012e 	bgeu	r8,r6,51a0 <round+0x88>
    519c:	2a47883a 	add	r3,r5,r9
    51a0:	0084303a 	nor	r2,zero,r2
    51a4:	120c703a 	and	r6,r2,r8
    51a8:	3005883a 	mov	r2,r6
    51ac:	f800283a 	ret
    51b0:	00c00234 	movhi	r3,8
    51b4:	1a07d83a 	sra	r3,r3,r8
    51b8:	0084303a 	nor	r2,zero,r2
    51bc:	000d883a 	mov	r6,zero
    51c0:	19c7883a 	add	r3,r3,r7
    51c4:	1886703a 	and	r3,r3,r2
    51c8:	3005883a 	mov	r2,r6
    51cc:	f800283a 	ret
    51d0:	00bfffc4 	movi	r2,-1
    51d4:	28e0002c 	andhi	r3,r5,32768
    51d8:	40800c26 	beq	r8,r2,520c <round+0xf4>
    51dc:	000d883a 	mov	r6,zero
    51e0:	003fe206 	br	516c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700516c>
    51e4:	3005883a 	mov	r2,r6
    51e8:	2807883a 	mov	r3,r5
    51ec:	f800283a 	ret
    51f0:	deffff04 	addi	sp,sp,-4
    51f4:	280f883a 	mov	r7,r5
    51f8:	dfc00015 	stw	ra,0(sp)
    51fc:	0005a7c0 	call	5a7c <__adddf3>
    5200:	dfc00017 	ldw	ra,0(sp)
    5204:	dec00104 	addi	sp,sp,4
    5208:	f800283a 	ret
    520c:	18cffc34 	orhi	r3,r3,16368
    5210:	000d883a 	mov	r6,zero
    5214:	003fd506 	br	516c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700516c>

00005218 <roundf>:
    5218:	20dfe02c 	andhi	r3,r4,32640
    521c:	1806d5fa 	srli	r3,r3,23
    5220:	01400584 	movi	r5,22
    5224:	2005883a 	mov	r2,r4
    5228:	18ffe044 	addi	r3,r3,-127
    522c:	28c00c16 	blt	r5,r3,5260 <roundf+0x48>
    5230:	18001516 	blt	r3,zero,5288 <roundf+0x70>
    5234:	01002034 	movhi	r4,128
    5238:	213fffc4 	addi	r4,r4,-1
    523c:	20c9d83a 	sra	r4,r4,r3
    5240:	208a703a 	and	r5,r4,r2
    5244:	28000826 	beq	r5,zero,5268 <roundf+0x50>
    5248:	01401034 	movhi	r5,64
    524c:	28c7d83a 	sra	r3,r5,r3
    5250:	0108303a 	nor	r4,zero,r4
    5254:	1885883a 	add	r2,r3,r2
    5258:	2084703a 	and	r2,r4,r2
    525c:	f800283a 	ret
    5260:	01402004 	movi	r5,128
    5264:	19400126 	beq	r3,r5,526c <roundf+0x54>
    5268:	f800283a 	ret
    526c:	deffff04 	addi	sp,sp,-4
    5270:	200b883a 	mov	r5,r4
    5274:	dfc00015 	stw	ra,0(sp)
    5278:	000529c0 	call	529c <__addsf3>
    527c:	dfc00017 	ldw	ra,0(sp)
    5280:	dec00104 	addi	sp,sp,4
    5284:	f800283a 	ret
    5288:	20a0002c 	andhi	r2,r4,32768
    528c:	013fffc4 	movi	r4,-1
    5290:	193ff51e 	bne	r3,r4,5268 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005268>
    5294:	108fe034 	orhi	r2,r2,16256
    5298:	f800283a 	ret

0000529c <__addsf3>:
    529c:	defffc04 	addi	sp,sp,-16
    52a0:	2004d7fa 	srli	r2,r4,31
    52a4:	280cd5fa 	srli	r6,r5,23
    52a8:	dc000015 	stw	r16,0(sp)
    52ac:	00c02034 	movhi	r3,128
    52b0:	2020d5fa 	srli	r16,r4,23
    52b4:	280ed7fa 	srli	r7,r5,31
    52b8:	18ffffc4 	addi	r3,r3,-1
    52bc:	dc400115 	stw	r17,4(sp)
    52c0:	1908703a 	and	r4,r3,r4
    52c4:	194a703a 	and	r5,r3,r5
    52c8:	dfc00315 	stw	ra,12(sp)
    52cc:	dc800215 	stw	r18,8(sp)
    52d0:	14403fcc 	andi	r17,r2,255
    52d4:	84003fcc 	andi	r16,r16,255
    52d8:	200890fa 	slli	r4,r4,3
    52dc:	31803fcc 	andi	r6,r6,255
    52e0:	280a90fa 	slli	r5,r5,3
    52e4:	89c05026 	beq	r17,r7,5428 <__addsf3+0x18c>
    52e8:	8185c83a 	sub	r2,r16,r6
    52ec:	00807a0e 	bge	zero,r2,54d8 <__addsf3+0x23c>
    52f0:	30001e1e 	bne	r6,zero,536c <__addsf3+0xd0>
    52f4:	28006d1e 	bne	r5,zero,54ac <__addsf3+0x210>
    52f8:	208001cc 	andi	r2,r4,7
    52fc:	10000426 	beq	r2,zero,5310 <__addsf3+0x74>
    5300:	208003cc 	andi	r2,r4,15
    5304:	00c00104 	movi	r3,4
    5308:	10c00126 	beq	r2,r3,5310 <__addsf3+0x74>
    530c:	20c9883a 	add	r4,r4,r3
    5310:	2081002c 	andhi	r2,r4,1024
    5314:	10003926 	beq	r2,zero,53fc <__addsf3+0x160>
    5318:	84000044 	addi	r16,r16,1
    531c:	00803fc4 	movi	r2,255
    5320:	80807826 	beq	r16,r2,5504 <__addsf3+0x268>
    5324:	200891ba 	slli	r4,r4,6
    5328:	8805883a 	mov	r2,r17
    532c:	2008d27a 	srli	r4,r4,9
    5330:	84003fcc 	andi	r16,r16,255
    5334:	800695fa 	slli	r3,r16,23
    5338:	10803fcc 	andi	r2,r2,255
    533c:	04002034 	movhi	r16,128
    5340:	843fffc4 	addi	r16,r16,-1
    5344:	100497fa 	slli	r2,r2,31
    5348:	2408703a 	and	r4,r4,r16
    534c:	20e0b03a 	or	r16,r4,r3
    5350:	8084b03a 	or	r2,r16,r2
    5354:	dfc00317 	ldw	ra,12(sp)
    5358:	dc800217 	ldw	r18,8(sp)
    535c:	dc400117 	ldw	r17,4(sp)
    5360:	dc000017 	ldw	r16,0(sp)
    5364:	dec00404 	addi	sp,sp,16
    5368:	f800283a 	ret
    536c:	00c03fc4 	movi	r3,255
    5370:	80ffe126 	beq	r16,r3,52f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f8>
    5374:	29410034 	orhi	r5,r5,1024
    5378:	00c006c4 	movi	r3,27
    537c:	18807516 	blt	r3,r2,5554 <__addsf3+0x2b8>
    5380:	00c00804 	movi	r3,32
    5384:	1887c83a 	sub	r3,r3,r2
    5388:	28c6983a 	sll	r3,r5,r3
    538c:	288ad83a 	srl	r5,r5,r2
    5390:	1804c03a 	cmpne	r2,r3,zero
    5394:	288ab03a 	or	r5,r5,r2
    5398:	2149c83a 	sub	r4,r4,r5
    539c:	2081002c 	andhi	r2,r4,1024
    53a0:	10001426 	beq	r2,zero,53f4 <__addsf3+0x158>
    53a4:	04810034 	movhi	r18,1024
    53a8:	94bfffc4 	addi	r18,r18,-1
    53ac:	24a4703a 	and	r18,r4,r18
    53b0:	9009883a 	mov	r4,r18
    53b4:	0006ab40 	call	6ab4 <__clzsi2>
    53b8:	10bffec4 	addi	r2,r2,-5
    53bc:	90a4983a 	sll	r18,r18,r2
    53c0:	14005416 	blt	r2,r16,5514 <__addsf3+0x278>
    53c4:	1405c83a 	sub	r2,r2,r16
    53c8:	11000044 	addi	r4,r2,1
    53cc:	00800804 	movi	r2,32
    53d0:	1105c83a 	sub	r2,r2,r4
    53d4:	9084983a 	sll	r2,r18,r2
    53d8:	9124d83a 	srl	r18,r18,r4
    53dc:	0021883a 	mov	r16,zero
    53e0:	1008c03a 	cmpne	r4,r2,zero
    53e4:	9108b03a 	or	r4,r18,r4
    53e8:	003fc306 	br	52f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f8>
    53ec:	1000db26 	beq	r2,zero,575c <__addsf3+0x4c0>
    53f0:	1009883a 	mov	r4,r2
    53f4:	208001cc 	andi	r2,r4,7
    53f8:	103fc11e 	bne	r2,zero,5300 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005300>
    53fc:	2006d0fa 	srli	r3,r4,3
    5400:	01003fc4 	movi	r4,255
    5404:	8805883a 	mov	r2,r17
    5408:	8100241e 	bne	r16,r4,549c <__addsf3+0x200>
    540c:	18006e26 	beq	r3,zero,55c8 <__addsf3+0x32c>
    5410:	19001034 	orhi	r4,r3,64
    5414:	00c02034 	movhi	r3,128
    5418:	18ffffc4 	addi	r3,r3,-1
    541c:	043fffc4 	movi	r16,-1
    5420:	20c8703a 	and	r4,r4,r3
    5424:	003fc206 	br	5330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005330>
    5428:	8187c83a 	sub	r3,r16,r6
    542c:	00c03e0e 	bge	zero,r3,5528 <__addsf3+0x28c>
    5430:	30002326 	beq	r6,zero,54c0 <__addsf3+0x224>
    5434:	01803fc4 	movi	r6,255
    5438:	81bfaf26 	beq	r16,r6,52f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f8>
    543c:	29410034 	orhi	r5,r5,1024
    5440:	018006c4 	movi	r6,27
    5444:	30c07416 	blt	r6,r3,5618 <__addsf3+0x37c>
    5448:	01800804 	movi	r6,32
    544c:	30cdc83a 	sub	r6,r6,r3
    5450:	298c983a 	sll	r6,r5,r6
    5454:	28cad83a 	srl	r5,r5,r3
    5458:	3006c03a 	cmpne	r3,r6,zero
    545c:	28cab03a 	or	r5,r5,r3
    5460:	2149883a 	add	r4,r4,r5
    5464:	20c1002c 	andhi	r3,r4,1024
    5468:	183fe226 	beq	r3,zero,53f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70053f4>
    546c:	84000044 	addi	r16,r16,1
    5470:	00c03fc4 	movi	r3,255
    5474:	80c05426 	beq	r16,r3,55c8 <__addsf3+0x32c>
    5478:	00bf0034 	movhi	r2,64512
    547c:	10bfffc4 	addi	r2,r2,-1
    5480:	20c0004c 	andi	r3,r4,1
    5484:	2088703a 	and	r4,r4,r2
    5488:	2008d07a 	srli	r4,r4,1
    548c:	20c8b03a 	or	r4,r4,r3
    5490:	003f9906 	br	52f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f8>
    5494:	0007883a 	mov	r3,zero
    5498:	0005883a 	mov	r2,zero
    549c:	01002034 	movhi	r4,128
    54a0:	213fffc4 	addi	r4,r4,-1
    54a4:	1908703a 	and	r4,r3,r4
    54a8:	003fa106 	br	5330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005330>
    54ac:	10bfffc4 	addi	r2,r2,-1
    54b0:	103fb926 	beq	r2,zero,5398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005398>
    54b4:	00c03fc4 	movi	r3,255
    54b8:	80ffaf1e 	bne	r16,r3,5378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005378>
    54bc:	003f8e06 	br	52f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f8>
    54c0:	283f8d26 	beq	r5,zero,52f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f8>
    54c4:	18ffffc4 	addi	r3,r3,-1
    54c8:	183fe526 	beq	r3,zero,5460 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005460>
    54cc:	01803fc4 	movi	r6,255
    54d0:	81bfdb1e 	bne	r16,r6,5440 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005440>
    54d4:	003f8806 	br	52f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f8>
    54d8:	1000201e 	bne	r2,zero,555c <__addsf3+0x2c0>
    54dc:	80800044 	addi	r2,r16,1
    54e0:	10803fcc 	andi	r2,r2,255
    54e4:	01800044 	movi	r6,1
    54e8:	3080450e 	bge	r6,r2,5600 <__addsf3+0x364>
    54ec:	2165c83a 	sub	r18,r4,r5
    54f0:	90c1002c 	andhi	r3,r18,1024
    54f4:	18002b26 	beq	r3,zero,55a4 <__addsf3+0x308>
    54f8:	2925c83a 	sub	r18,r5,r4
    54fc:	3823883a 	mov	r17,r7
    5500:	003fab06 	br	53b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70053b0>
    5504:	8805883a 	mov	r2,r17
    5508:	043fffc4 	movi	r16,-1
    550c:	0009883a 	mov	r4,zero
    5510:	003f8706 	br	5330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005330>
    5514:	013f0034 	movhi	r4,64512
    5518:	213fffc4 	addi	r4,r4,-1
    551c:	80a1c83a 	sub	r16,r16,r2
    5520:	9108703a 	and	r4,r18,r4
    5524:	003f7406 	br	52f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f8>
    5528:	1800411e 	bne	r3,zero,5630 <__addsf3+0x394>
    552c:	80c00044 	addi	r3,r16,1
    5530:	19c03fcc 	andi	r7,r3,255
    5534:	01800044 	movi	r6,1
    5538:	31c0260e 	bge	r6,r7,55d4 <__addsf3+0x338>
    553c:	01803fc4 	movi	r6,255
    5540:	19802126 	beq	r3,r6,55c8 <__addsf3+0x32c>
    5544:	2149883a 	add	r4,r4,r5
    5548:	2008d07a 	srli	r4,r4,1
    554c:	1821883a 	mov	r16,r3
    5550:	003f6906 	br	52f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f8>
    5554:	01400044 	movi	r5,1
    5558:	003f8f06 	br	5398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005398>
    555c:	8000151e 	bne	r16,zero,55b4 <__addsf3+0x318>
    5560:	20002f26 	beq	r4,zero,5620 <__addsf3+0x384>
    5564:	0084303a 	nor	r2,zero,r2
    5568:	10000a26 	beq	r2,zero,5594 <__addsf3+0x2f8>
    556c:	00c03fc4 	movi	r3,255
    5570:	30c02b26 	beq	r6,r3,5620 <__addsf3+0x384>
    5574:	00c006c4 	movi	r3,27
    5578:	18806d16 	blt	r3,r2,5730 <__addsf3+0x494>
    557c:	00c00804 	movi	r3,32
    5580:	1887c83a 	sub	r3,r3,r2
    5584:	20c6983a 	sll	r3,r4,r3
    5588:	2084d83a 	srl	r2,r4,r2
    558c:	1808c03a 	cmpne	r4,r3,zero
    5590:	1108b03a 	or	r4,r2,r4
    5594:	2909c83a 	sub	r4,r5,r4
    5598:	3021883a 	mov	r16,r6
    559c:	3823883a 	mov	r17,r7
    55a0:	003f7e06 	br	539c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700539c>
    55a4:	903f821e 	bne	r18,zero,53b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70053b0>
    55a8:	0005883a 	mov	r2,zero
    55ac:	0021883a 	mov	r16,zero
    55b0:	003fba06 	br	549c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700549c>
    55b4:	00c03fc4 	movi	r3,255
    55b8:	30c01926 	beq	r6,r3,5620 <__addsf3+0x384>
    55bc:	0085c83a 	sub	r2,zero,r2
    55c0:	21010034 	orhi	r4,r4,1024
    55c4:	003feb06 	br	5574 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005574>
    55c8:	043fffc4 	movi	r16,-1
    55cc:	0009883a 	mov	r4,zero
    55d0:	003f5706 	br	5330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005330>
    55d4:	80004a1e 	bne	r16,zero,5700 <__addsf3+0x464>
    55d8:	20005926 	beq	r4,zero,5740 <__addsf3+0x4a4>
    55dc:	283f4626 	beq	r5,zero,52f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f8>
    55e0:	2149883a 	add	r4,r4,r5
    55e4:	2081002c 	andhi	r2,r4,1024
    55e8:	103f8226 	beq	r2,zero,53f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70053f4>
    55ec:	00bf0034 	movhi	r2,64512
    55f0:	10bfffc4 	addi	r2,r2,-1
    55f4:	3021883a 	mov	r16,r6
    55f8:	2088703a 	and	r4,r4,r2
    55fc:	003f3e06 	br	52f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f8>
    5600:	8000121e 	bne	r16,zero,564c <__addsf3+0x3b0>
    5604:	2000261e 	bne	r4,zero,56a0 <__addsf3+0x404>
    5608:	283fa226 	beq	r5,zero,5494 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005494>
    560c:	2809883a 	mov	r4,r5
    5610:	3823883a 	mov	r17,r7
    5614:	003f3806 	br	52f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f8>
    5618:	01400044 	movi	r5,1
    561c:	003f9006 	br	5460 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005460>
    5620:	2809883a 	mov	r4,r5
    5624:	3021883a 	mov	r16,r6
    5628:	3823883a 	mov	r17,r7
    562c:	003f3206 	br	52f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f8>
    5630:	80000c1e 	bne	r16,zero,5664 <__addsf3+0x3c8>
    5634:	20002f26 	beq	r4,zero,56f4 <__addsf3+0x458>
    5638:	00c6303a 	nor	r3,zero,r3
    563c:	18002b1e 	bne	r3,zero,56ec <__addsf3+0x450>
    5640:	2149883a 	add	r4,r4,r5
    5644:	3021883a 	mov	r16,r6
    5648:	003f8606 	br	5464 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005464>
    564c:	20001b1e 	bne	r4,zero,56bc <__addsf3+0x420>
    5650:	28003926 	beq	r5,zero,5738 <__addsf3+0x49c>
    5654:	2809883a 	mov	r4,r5
    5658:	3823883a 	mov	r17,r7
    565c:	04003fc4 	movi	r16,255
    5660:	003f2506 	br	52f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f8>
    5664:	01c03fc4 	movi	r7,255
    5668:	31c02226 	beq	r6,r7,56f4 <__addsf3+0x458>
    566c:	00c7c83a 	sub	r3,zero,r3
    5670:	21010034 	orhi	r4,r4,1024
    5674:	01c006c4 	movi	r7,27
    5678:	38c03616 	blt	r7,r3,5754 <__addsf3+0x4b8>
    567c:	01c00804 	movi	r7,32
    5680:	38cfc83a 	sub	r7,r7,r3
    5684:	21ce983a 	sll	r7,r4,r7
    5688:	20c6d83a 	srl	r3,r4,r3
    568c:	3808c03a 	cmpne	r4,r7,zero
    5690:	1906b03a 	or	r3,r3,r4
    5694:	1949883a 	add	r4,r3,r5
    5698:	3021883a 	mov	r16,r6
    569c:	003f7106 	br	5464 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005464>
    56a0:	283f1526 	beq	r5,zero,52f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f8>
    56a4:	2145c83a 	sub	r2,r4,r5
    56a8:	10c1002c 	andhi	r3,r2,1024
    56ac:	183f4f26 	beq	r3,zero,53ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70053ec>
    56b0:	2909c83a 	sub	r4,r5,r4
    56b4:	3823883a 	mov	r17,r7
    56b8:	003f0f06 	br	52f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f8>
    56bc:	28001a26 	beq	r5,zero,5728 <__addsf3+0x48c>
    56c0:	2008d0fa 	srli	r4,r4,3
    56c4:	2080102c 	andhi	r2,r4,64
    56c8:	10000526 	beq	r2,zero,56e0 <__addsf3+0x444>
    56cc:	280ad0fa 	srli	r5,r5,3
    56d0:	2880102c 	andhi	r2,r5,64
    56d4:	1000021e 	bne	r2,zero,56e0 <__addsf3+0x444>
    56d8:	2809883a 	mov	r4,r5
    56dc:	3823883a 	mov	r17,r7
    56e0:	200890fa 	slli	r4,r4,3
    56e4:	04003fc4 	movi	r16,255
    56e8:	003f0306 	br	52f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f8>
    56ec:	01c03fc4 	movi	r7,255
    56f0:	31ffe01e 	bne	r6,r7,5674 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005674>
    56f4:	2809883a 	mov	r4,r5
    56f8:	3021883a 	mov	r16,r6
    56fc:	003efe06 	br	52f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f8>
    5700:	20001126 	beq	r4,zero,5748 <__addsf3+0x4ac>
    5704:	28000826 	beq	r5,zero,5728 <__addsf3+0x48c>
    5708:	2008d0fa 	srli	r4,r4,3
    570c:	2080102c 	andhi	r2,r4,64
    5710:	103ff326 	beq	r2,zero,56e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056e0>
    5714:	280ad0fa 	srli	r5,r5,3
    5718:	2880102c 	andhi	r2,r5,64
    571c:	103ff01e 	bne	r2,zero,56e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056e0>
    5720:	2809883a 	mov	r4,r5
    5724:	003fee06 	br	56e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056e0>
    5728:	04003fc4 	movi	r16,255
    572c:	003ef206 	br	52f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f8>
    5730:	01000044 	movi	r4,1
    5734:	003f9706 	br	5594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005594>
    5738:	0005883a 	mov	r2,zero
    573c:	003f3406 	br	5410 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005410>
    5740:	2809883a 	mov	r4,r5
    5744:	003eec06 	br	52f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f8>
    5748:	2809883a 	mov	r4,r5
    574c:	04003fc4 	movi	r16,255
    5750:	003ee906 	br	52f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f8>
    5754:	00c00044 	movi	r3,1
    5758:	003fce06 	br	5694 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005694>
    575c:	0005883a 	mov	r2,zero
    5760:	003f4e06 	br	549c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700549c>

00005764 <__gesf2>:
    5764:	2004d5fa 	srli	r2,r4,23
    5768:	2806d5fa 	srli	r3,r5,23
    576c:	01802034 	movhi	r6,128
    5770:	31bfffc4 	addi	r6,r6,-1
    5774:	10803fcc 	andi	r2,r2,255
    5778:	01c03fc4 	movi	r7,255
    577c:	3110703a 	and	r8,r6,r4
    5780:	18c03fcc 	andi	r3,r3,255
    5784:	314c703a 	and	r6,r6,r5
    5788:	2008d7fa 	srli	r4,r4,31
    578c:	280ad7fa 	srli	r5,r5,31
    5790:	11c01926 	beq	r2,r7,57f8 <__gesf2+0x94>
    5794:	01c03fc4 	movi	r7,255
    5798:	19c00f26 	beq	r3,r7,57d8 <__gesf2+0x74>
    579c:	1000061e 	bne	r2,zero,57b8 <__gesf2+0x54>
    57a0:	400f003a 	cmpeq	r7,r8,zero
    57a4:	1800071e 	bne	r3,zero,57c4 <__gesf2+0x60>
    57a8:	3000061e 	bne	r6,zero,57c4 <__gesf2+0x60>
    57ac:	0005883a 	mov	r2,zero
    57b0:	40000e1e 	bne	r8,zero,57ec <__gesf2+0x88>
    57b4:	f800283a 	ret
    57b8:	18000a1e 	bne	r3,zero,57e4 <__gesf2+0x80>
    57bc:	30000b26 	beq	r6,zero,57ec <__gesf2+0x88>
    57c0:	000f883a 	mov	r7,zero
    57c4:	29403fcc 	andi	r5,r5,255
    57c8:	38000726 	beq	r7,zero,57e8 <__gesf2+0x84>
    57cc:	28000826 	beq	r5,zero,57f0 <__gesf2+0x8c>
    57d0:	00800044 	movi	r2,1
    57d4:	f800283a 	ret
    57d8:	303ff026 	beq	r6,zero,579c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700579c>
    57dc:	00bfff84 	movi	r2,-2
    57e0:	f800283a 	ret
    57e4:	29403fcc 	andi	r5,r5,255
    57e8:	21400526 	beq	r4,r5,5800 <__gesf2+0x9c>
    57ec:	203ff826 	beq	r4,zero,57d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057d0>
    57f0:	00bfffc4 	movi	r2,-1
    57f4:	f800283a 	ret
    57f8:	403fe626 	beq	r8,zero,5794 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005794>
    57fc:	003ff706 	br	57dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057dc>
    5800:	18bffa16 	blt	r3,r2,57ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057ec>
    5804:	10c00216 	blt	r2,r3,5810 <__gesf2+0xac>
    5808:	323ff836 	bltu	r6,r8,57ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057ec>
    580c:	4180022e 	bgeu	r8,r6,5818 <__gesf2+0xb4>
    5810:	203fef1e 	bne	r4,zero,57d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057d0>
    5814:	003ff606 	br	57f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70057f0>
    5818:	0005883a 	mov	r2,zero
    581c:	f800283a 	ret

00005820 <__lesf2>:
    5820:	2004d5fa 	srli	r2,r4,23
    5824:	280cd5fa 	srli	r6,r5,23
    5828:	00c02034 	movhi	r3,128
    582c:	18ffffc4 	addi	r3,r3,-1
    5830:	10803fcc 	andi	r2,r2,255
    5834:	01c03fc4 	movi	r7,255
    5838:	1910703a 	and	r8,r3,r4
    583c:	31803fcc 	andi	r6,r6,255
    5840:	1946703a 	and	r3,r3,r5
    5844:	2008d7fa 	srli	r4,r4,31
    5848:	280ad7fa 	srli	r5,r5,31
    584c:	11c01b26 	beq	r2,r7,58bc <__lesf2+0x9c>
    5850:	01c03fc4 	movi	r7,255
    5854:	31c01126 	beq	r6,r7,589c <__lesf2+0x7c>
    5858:	1000071e 	bne	r2,zero,5878 <__lesf2+0x58>
    585c:	400f003a 	cmpeq	r7,r8,zero
    5860:	21003fcc 	andi	r4,r4,255
    5864:	3000081e 	bne	r6,zero,5888 <__lesf2+0x68>
    5868:	1800071e 	bne	r3,zero,5888 <__lesf2+0x68>
    586c:	0005883a 	mov	r2,zero
    5870:	40000f1e 	bne	r8,zero,58b0 <__lesf2+0x90>
    5874:	f800283a 	ret
    5878:	21003fcc 	andi	r4,r4,255
    587c:	30000a1e 	bne	r6,zero,58a8 <__lesf2+0x88>
    5880:	18000b26 	beq	r3,zero,58b0 <__lesf2+0x90>
    5884:	000f883a 	mov	r7,zero
    5888:	29403fcc 	andi	r5,r5,255
    588c:	38000726 	beq	r7,zero,58ac <__lesf2+0x8c>
    5890:	28000826 	beq	r5,zero,58b4 <__lesf2+0x94>
    5894:	00800044 	movi	r2,1
    5898:	f800283a 	ret
    589c:	183fee26 	beq	r3,zero,5858 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005858>
    58a0:	00800084 	movi	r2,2
    58a4:	f800283a 	ret
    58a8:	29403fcc 	andi	r5,r5,255
    58ac:	21400626 	beq	r4,r5,58c8 <__lesf2+0xa8>
    58b0:	203ff826 	beq	r4,zero,5894 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005894>
    58b4:	00bfffc4 	movi	r2,-1
    58b8:	f800283a 	ret
    58bc:	403fe426 	beq	r8,zero,5850 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005850>
    58c0:	00800084 	movi	r2,2
    58c4:	f800283a 	ret
    58c8:	30bff916 	blt	r6,r2,58b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70058b0>
    58cc:	11800216 	blt	r2,r6,58d8 <__lesf2+0xb8>
    58d0:	1a3ff736 	bltu	r3,r8,58b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70058b0>
    58d4:	40c0022e 	bgeu	r8,r3,58e0 <__lesf2+0xc0>
    58d8:	203fee1e 	bne	r4,zero,5894 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005894>
    58dc:	003ff506 	br	58b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70058b4>
    58e0:	0005883a 	mov	r2,zero
    58e4:	f800283a 	ret

000058e8 <__fixsfsi>:
    58e8:	200ad5fa 	srli	r5,r4,23
    58ec:	00c02034 	movhi	r3,128
    58f0:	18ffffc4 	addi	r3,r3,-1
    58f4:	29403fcc 	andi	r5,r5,255
    58f8:	00801f84 	movi	r2,126
    58fc:	1906703a 	and	r3,r3,r4
    5900:	2008d7fa 	srli	r4,r4,31
    5904:	11400e0e 	bge	r2,r5,5940 <__fixsfsi+0x58>
    5908:	00802744 	movi	r2,157
    590c:	11400816 	blt	r2,r5,5930 <__fixsfsi+0x48>
    5910:	00802544 	movi	r2,149
    5914:	18c02034 	orhi	r3,r3,128
    5918:	11400b0e 	bge	r2,r5,5948 <__fixsfsi+0x60>
    591c:	28bfda84 	addi	r2,r5,-150
    5920:	1884983a 	sll	r2,r3,r2
    5924:	20000726 	beq	r4,zero,5944 <__fixsfsi+0x5c>
    5928:	0085c83a 	sub	r2,zero,r2
    592c:	f800283a 	ret
    5930:	00a00034 	movhi	r2,32768
    5934:	10bfffc4 	addi	r2,r2,-1
    5938:	2085883a 	add	r2,r4,r2
    593c:	f800283a 	ret
    5940:	0005883a 	mov	r2,zero
    5944:	f800283a 	ret
    5948:	00802584 	movi	r2,150
    594c:	1145c83a 	sub	r2,r2,r5
    5950:	1884d83a 	srl	r2,r3,r2
    5954:	003ff306 	br	5924 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005924>

00005958 <__floatsisf>:
    5958:	defffd04 	addi	sp,sp,-12
    595c:	dfc00215 	stw	ra,8(sp)
    5960:	dc400115 	stw	r17,4(sp)
    5964:	dc000015 	stw	r16,0(sp)
    5968:	20003526 	beq	r4,zero,5a40 <__floatsisf+0xe8>
    596c:	2021883a 	mov	r16,r4
    5970:	2022d7fa 	srli	r17,r4,31
    5974:	20003616 	blt	r4,zero,5a50 <__floatsisf+0xf8>
    5978:	8009883a 	mov	r4,r16
    597c:	0006ab40 	call	6ab4 <__clzsi2>
    5980:	00c02784 	movi	r3,158
    5984:	1887c83a 	sub	r3,r3,r2
    5988:	01002584 	movi	r4,150
    598c:	20c01416 	blt	r4,r3,59e0 <__floatsisf+0x88>
    5990:	20c9c83a 	sub	r4,r4,r3
    5994:	8120983a 	sll	r16,r16,r4
    5998:	00802034 	movhi	r2,128
    599c:	10bfffc4 	addi	r2,r2,-1
    59a0:	8809883a 	mov	r4,r17
    59a4:	80a0703a 	and	r16,r16,r2
    59a8:	18803fcc 	andi	r2,r3,255
    59ac:	100695fa 	slli	r3,r2,23
    59b0:	20803fcc 	andi	r2,r4,255
    59b4:	100897fa 	slli	r4,r2,31
    59b8:	00802034 	movhi	r2,128
    59bc:	10bfffc4 	addi	r2,r2,-1
    59c0:	8084703a 	and	r2,r16,r2
    59c4:	10c4b03a 	or	r2,r2,r3
    59c8:	1104b03a 	or	r2,r2,r4
    59cc:	dfc00217 	ldw	ra,8(sp)
    59d0:	dc400117 	ldw	r17,4(sp)
    59d4:	dc000017 	ldw	r16,0(sp)
    59d8:	dec00304 	addi	sp,sp,12
    59dc:	f800283a 	ret
    59e0:	01002644 	movi	r4,153
    59e4:	20c01c16 	blt	r4,r3,5a58 <__floatsisf+0x100>
    59e8:	20c9c83a 	sub	r4,r4,r3
    59ec:	8120983a 	sll	r16,r16,r4
    59f0:	013f0034 	movhi	r4,64512
    59f4:	213fffc4 	addi	r4,r4,-1
    59f8:	814001cc 	andi	r5,r16,7
    59fc:	8108703a 	and	r4,r16,r4
    5a00:	28000426 	beq	r5,zero,5a14 <__floatsisf+0xbc>
    5a04:	840003cc 	andi	r16,r16,15
    5a08:	01400104 	movi	r5,4
    5a0c:	81400126 	beq	r16,r5,5a14 <__floatsisf+0xbc>
    5a10:	2149883a 	add	r4,r4,r5
    5a14:	2141002c 	andhi	r5,r4,1024
    5a18:	28000526 	beq	r5,zero,5a30 <__floatsisf+0xd8>
    5a1c:	00c027c4 	movi	r3,159
    5a20:	1887c83a 	sub	r3,r3,r2
    5a24:	00bf0034 	movhi	r2,64512
    5a28:	10bfffc4 	addi	r2,r2,-1
    5a2c:	2088703a 	and	r4,r4,r2
    5a30:	202091ba 	slli	r16,r4,6
    5a34:	8809883a 	mov	r4,r17
    5a38:	8020d27a 	srli	r16,r16,9
    5a3c:	003fda06 	br	59a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059a8>
    5a40:	0009883a 	mov	r4,zero
    5a44:	0007883a 	mov	r3,zero
    5a48:	0021883a 	mov	r16,zero
    5a4c:	003fd606 	br	59a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059a8>
    5a50:	0121c83a 	sub	r16,zero,r4
    5a54:	003fc806 	br	5978 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005978>
    5a58:	01002e44 	movi	r4,185
    5a5c:	20c9c83a 	sub	r4,r4,r3
    5a60:	01400144 	movi	r5,5
    5a64:	8108983a 	sll	r4,r16,r4
    5a68:	288bc83a 	sub	r5,r5,r2
    5a6c:	8160d83a 	srl	r16,r16,r5
    5a70:	2008c03a 	cmpne	r4,r4,zero
    5a74:	8120b03a 	or	r16,r16,r4
    5a78:	003fdd06 	br	59f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059f0>

00005a7c <__adddf3>:
    5a7c:	02c00434 	movhi	r11,16
    5a80:	5affffc4 	addi	r11,r11,-1
    5a84:	2806d7fa 	srli	r3,r5,31
    5a88:	2ad4703a 	and	r10,r5,r11
    5a8c:	3ad2703a 	and	r9,r7,r11
    5a90:	3804d53a 	srli	r2,r7,20
    5a94:	3018d77a 	srli	r12,r6,29
    5a98:	280ad53a 	srli	r5,r5,20
    5a9c:	501490fa 	slli	r10,r10,3
    5aa0:	2010d77a 	srli	r8,r4,29
    5aa4:	481290fa 	slli	r9,r9,3
    5aa8:	380ed7fa 	srli	r7,r7,31
    5aac:	defffb04 	addi	sp,sp,-20
    5ab0:	dc800215 	stw	r18,8(sp)
    5ab4:	dc400115 	stw	r17,4(sp)
    5ab8:	dc000015 	stw	r16,0(sp)
    5abc:	dfc00415 	stw	ra,16(sp)
    5ac0:	dcc00315 	stw	r19,12(sp)
    5ac4:	1c803fcc 	andi	r18,r3,255
    5ac8:	2c01ffcc 	andi	r16,r5,2047
    5acc:	5210b03a 	or	r8,r10,r8
    5ad0:	202290fa 	slli	r17,r4,3
    5ad4:	1081ffcc 	andi	r2,r2,2047
    5ad8:	4b12b03a 	or	r9,r9,r12
    5adc:	300c90fa 	slli	r6,r6,3
    5ae0:	91c07526 	beq	r18,r7,5cb8 <__adddf3+0x23c>
    5ae4:	8087c83a 	sub	r3,r16,r2
    5ae8:	00c0ab0e 	bge	zero,r3,5d98 <__adddf3+0x31c>
    5aec:	10002a1e 	bne	r2,zero,5b98 <__adddf3+0x11c>
    5af0:	4984b03a 	or	r2,r9,r6
    5af4:	1000961e 	bne	r2,zero,5d50 <__adddf3+0x2d4>
    5af8:	888001cc 	andi	r2,r17,7
    5afc:	10000726 	beq	r2,zero,5b1c <__adddf3+0xa0>
    5b00:	888003cc 	andi	r2,r17,15
    5b04:	00c00104 	movi	r3,4
    5b08:	10c00426 	beq	r2,r3,5b1c <__adddf3+0xa0>
    5b0c:	88c7883a 	add	r3,r17,r3
    5b10:	1c63803a 	cmpltu	r17,r3,r17
    5b14:	4451883a 	add	r8,r8,r17
    5b18:	1823883a 	mov	r17,r3
    5b1c:	4080202c 	andhi	r2,r8,128
    5b20:	10005926 	beq	r2,zero,5c88 <__adddf3+0x20c>
    5b24:	84000044 	addi	r16,r16,1
    5b28:	0081ffc4 	movi	r2,2047
    5b2c:	8080ba26 	beq	r16,r2,5e18 <__adddf3+0x39c>
    5b30:	00bfe034 	movhi	r2,65408
    5b34:	10bfffc4 	addi	r2,r2,-1
    5b38:	4090703a 	and	r8,r8,r2
    5b3c:	4004977a 	slli	r2,r8,29
    5b40:	4010927a 	slli	r8,r8,9
    5b44:	8822d0fa 	srli	r17,r17,3
    5b48:	8401ffcc 	andi	r16,r16,2047
    5b4c:	4010d33a 	srli	r8,r8,12
    5b50:	9007883a 	mov	r3,r18
    5b54:	1444b03a 	or	r2,r2,r17
    5b58:	8401ffcc 	andi	r16,r16,2047
    5b5c:	8020953a 	slli	r16,r16,20
    5b60:	18c03fcc 	andi	r3,r3,255
    5b64:	01000434 	movhi	r4,16
    5b68:	213fffc4 	addi	r4,r4,-1
    5b6c:	180697fa 	slli	r3,r3,31
    5b70:	4110703a 	and	r8,r8,r4
    5b74:	4410b03a 	or	r8,r8,r16
    5b78:	40c6b03a 	or	r3,r8,r3
    5b7c:	dfc00417 	ldw	ra,16(sp)
    5b80:	dcc00317 	ldw	r19,12(sp)
    5b84:	dc800217 	ldw	r18,8(sp)
    5b88:	dc400117 	ldw	r17,4(sp)
    5b8c:	dc000017 	ldw	r16,0(sp)
    5b90:	dec00504 	addi	sp,sp,20
    5b94:	f800283a 	ret
    5b98:	0081ffc4 	movi	r2,2047
    5b9c:	80bfd626 	beq	r16,r2,5af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af8>
    5ba0:	4a402034 	orhi	r9,r9,128
    5ba4:	00800e04 	movi	r2,56
    5ba8:	10c09f16 	blt	r2,r3,5e28 <__adddf3+0x3ac>
    5bac:	008007c4 	movi	r2,31
    5bb0:	10c0c216 	blt	r2,r3,5ebc <__adddf3+0x440>
    5bb4:	00800804 	movi	r2,32
    5bb8:	10c5c83a 	sub	r2,r2,r3
    5bbc:	488a983a 	sll	r5,r9,r2
    5bc0:	30c8d83a 	srl	r4,r6,r3
    5bc4:	3084983a 	sll	r2,r6,r2
    5bc8:	48c6d83a 	srl	r3,r9,r3
    5bcc:	290cb03a 	or	r6,r5,r4
    5bd0:	1004c03a 	cmpne	r2,r2,zero
    5bd4:	308cb03a 	or	r6,r6,r2
    5bd8:	898dc83a 	sub	r6,r17,r6
    5bdc:	89a3803a 	cmpltu	r17,r17,r6
    5be0:	40d1c83a 	sub	r8,r8,r3
    5be4:	4451c83a 	sub	r8,r8,r17
    5be8:	3023883a 	mov	r17,r6
    5bec:	4080202c 	andhi	r2,r8,128
    5bf0:	10002326 	beq	r2,zero,5c80 <__adddf3+0x204>
    5bf4:	04c02034 	movhi	r19,128
    5bf8:	9cffffc4 	addi	r19,r19,-1
    5bfc:	44e6703a 	and	r19,r8,r19
    5c00:	98007626 	beq	r19,zero,5ddc <__adddf3+0x360>
    5c04:	9809883a 	mov	r4,r19
    5c08:	0006ab40 	call	6ab4 <__clzsi2>
    5c0c:	10fffe04 	addi	r3,r2,-8
    5c10:	010007c4 	movi	r4,31
    5c14:	20c07716 	blt	r4,r3,5df4 <__adddf3+0x378>
    5c18:	00800804 	movi	r2,32
    5c1c:	10c5c83a 	sub	r2,r2,r3
    5c20:	8884d83a 	srl	r2,r17,r2
    5c24:	98d0983a 	sll	r8,r19,r3
    5c28:	88e2983a 	sll	r17,r17,r3
    5c2c:	1204b03a 	or	r2,r2,r8
    5c30:	1c007416 	blt	r3,r16,5e04 <__adddf3+0x388>
    5c34:	1c21c83a 	sub	r16,r3,r16
    5c38:	82000044 	addi	r8,r16,1
    5c3c:	00c007c4 	movi	r3,31
    5c40:	1a009116 	blt	r3,r8,5e88 <__adddf3+0x40c>
    5c44:	00c00804 	movi	r3,32
    5c48:	1a07c83a 	sub	r3,r3,r8
    5c4c:	8a08d83a 	srl	r4,r17,r8
    5c50:	88e2983a 	sll	r17,r17,r3
    5c54:	10c6983a 	sll	r3,r2,r3
    5c58:	1210d83a 	srl	r8,r2,r8
    5c5c:	8804c03a 	cmpne	r2,r17,zero
    5c60:	1906b03a 	or	r3,r3,r4
    5c64:	18a2b03a 	or	r17,r3,r2
    5c68:	0021883a 	mov	r16,zero
    5c6c:	003fa206 	br	5af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af8>
    5c70:	1890b03a 	or	r8,r3,r2
    5c74:	40017d26 	beq	r8,zero,626c <__adddf3+0x7f0>
    5c78:	1011883a 	mov	r8,r2
    5c7c:	1823883a 	mov	r17,r3
    5c80:	888001cc 	andi	r2,r17,7
    5c84:	103f9e1e 	bne	r2,zero,5b00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b00>
    5c88:	4004977a 	slli	r2,r8,29
    5c8c:	8822d0fa 	srli	r17,r17,3
    5c90:	4010d0fa 	srli	r8,r8,3
    5c94:	9007883a 	mov	r3,r18
    5c98:	1444b03a 	or	r2,r2,r17
    5c9c:	0101ffc4 	movi	r4,2047
    5ca0:	81002426 	beq	r16,r4,5d34 <__adddf3+0x2b8>
    5ca4:	8120703a 	and	r16,r16,r4
    5ca8:	01000434 	movhi	r4,16
    5cac:	213fffc4 	addi	r4,r4,-1
    5cb0:	4110703a 	and	r8,r8,r4
    5cb4:	003fa806 	br	5b58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b58>
    5cb8:	8089c83a 	sub	r4,r16,r2
    5cbc:	01005e0e 	bge	zero,r4,5e38 <__adddf3+0x3bc>
    5cc0:	10002b26 	beq	r2,zero,5d70 <__adddf3+0x2f4>
    5cc4:	0081ffc4 	movi	r2,2047
    5cc8:	80bf8b26 	beq	r16,r2,5af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af8>
    5ccc:	4a402034 	orhi	r9,r9,128
    5cd0:	00800e04 	movi	r2,56
    5cd4:	1100a40e 	bge	r2,r4,5f68 <__adddf3+0x4ec>
    5cd8:	498cb03a 	or	r6,r9,r6
    5cdc:	300ac03a 	cmpne	r5,r6,zero
    5ce0:	0013883a 	mov	r9,zero
    5ce4:	2c4b883a 	add	r5,r5,r17
    5ce8:	2c63803a 	cmpltu	r17,r5,r17
    5cec:	4a11883a 	add	r8,r9,r8
    5cf0:	8a11883a 	add	r8,r17,r8
    5cf4:	2823883a 	mov	r17,r5
    5cf8:	4080202c 	andhi	r2,r8,128
    5cfc:	103fe026 	beq	r2,zero,5c80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c80>
    5d00:	84000044 	addi	r16,r16,1
    5d04:	0081ffc4 	movi	r2,2047
    5d08:	8080d226 	beq	r16,r2,6054 <__adddf3+0x5d8>
    5d0c:	00bfe034 	movhi	r2,65408
    5d10:	10bfffc4 	addi	r2,r2,-1
    5d14:	4090703a 	and	r8,r8,r2
    5d18:	880ad07a 	srli	r5,r17,1
    5d1c:	400897fa 	slli	r4,r8,31
    5d20:	88c0004c 	andi	r3,r17,1
    5d24:	28e2b03a 	or	r17,r5,r3
    5d28:	4010d07a 	srli	r8,r8,1
    5d2c:	2462b03a 	or	r17,r4,r17
    5d30:	003f7106 	br	5af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af8>
    5d34:	4088b03a 	or	r4,r8,r2
    5d38:	20014526 	beq	r4,zero,6250 <__adddf3+0x7d4>
    5d3c:	01000434 	movhi	r4,16
    5d40:	42000234 	orhi	r8,r8,8
    5d44:	213fffc4 	addi	r4,r4,-1
    5d48:	4110703a 	and	r8,r8,r4
    5d4c:	003f8206 	br	5b58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b58>
    5d50:	18ffffc4 	addi	r3,r3,-1
    5d54:	1800491e 	bne	r3,zero,5e7c <__adddf3+0x400>
    5d58:	898bc83a 	sub	r5,r17,r6
    5d5c:	8963803a 	cmpltu	r17,r17,r5
    5d60:	4251c83a 	sub	r8,r8,r9
    5d64:	4451c83a 	sub	r8,r8,r17
    5d68:	2823883a 	mov	r17,r5
    5d6c:	003f9f06 	br	5bec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005bec>
    5d70:	4984b03a 	or	r2,r9,r6
    5d74:	103f6026 	beq	r2,zero,5af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af8>
    5d78:	213fffc4 	addi	r4,r4,-1
    5d7c:	2000931e 	bne	r4,zero,5fcc <__adddf3+0x550>
    5d80:	898d883a 	add	r6,r17,r6
    5d84:	3463803a 	cmpltu	r17,r6,r17
    5d88:	4251883a 	add	r8,r8,r9
    5d8c:	8a11883a 	add	r8,r17,r8
    5d90:	3023883a 	mov	r17,r6
    5d94:	003fd806 	br	5cf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005cf8>
    5d98:	1800541e 	bne	r3,zero,5eec <__adddf3+0x470>
    5d9c:	80800044 	addi	r2,r16,1
    5da0:	1081ffcc 	andi	r2,r2,2047
    5da4:	00c00044 	movi	r3,1
    5da8:	1880a00e 	bge	r3,r2,602c <__adddf3+0x5b0>
    5dac:	8989c83a 	sub	r4,r17,r6
    5db0:	8905803a 	cmpltu	r2,r17,r4
    5db4:	4267c83a 	sub	r19,r8,r9
    5db8:	98a7c83a 	sub	r19,r19,r2
    5dbc:	9880202c 	andhi	r2,r19,128
    5dc0:	10006326 	beq	r2,zero,5f50 <__adddf3+0x4d4>
    5dc4:	3463c83a 	sub	r17,r6,r17
    5dc8:	4a07c83a 	sub	r3,r9,r8
    5dcc:	344d803a 	cmpltu	r6,r6,r17
    5dd0:	19a7c83a 	sub	r19,r3,r6
    5dd4:	3825883a 	mov	r18,r7
    5dd8:	983f8a1e 	bne	r19,zero,5c04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c04>
    5ddc:	8809883a 	mov	r4,r17
    5de0:	0006ab40 	call	6ab4 <__clzsi2>
    5de4:	10800804 	addi	r2,r2,32
    5de8:	10fffe04 	addi	r3,r2,-8
    5dec:	010007c4 	movi	r4,31
    5df0:	20ff890e 	bge	r4,r3,5c18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c18>
    5df4:	10bff604 	addi	r2,r2,-40
    5df8:	8884983a 	sll	r2,r17,r2
    5dfc:	0023883a 	mov	r17,zero
    5e00:	1c3f8c0e 	bge	r3,r16,5c34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c34>
    5e04:	023fe034 	movhi	r8,65408
    5e08:	423fffc4 	addi	r8,r8,-1
    5e0c:	80e1c83a 	sub	r16,r16,r3
    5e10:	1210703a 	and	r8,r2,r8
    5e14:	003f3806 	br	5af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af8>
    5e18:	9007883a 	mov	r3,r18
    5e1c:	0011883a 	mov	r8,zero
    5e20:	0005883a 	mov	r2,zero
    5e24:	003f4c06 	br	5b58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b58>
    5e28:	498cb03a 	or	r6,r9,r6
    5e2c:	300cc03a 	cmpne	r6,r6,zero
    5e30:	0007883a 	mov	r3,zero
    5e34:	003f6806 	br	5bd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005bd8>
    5e38:	20009c1e 	bne	r4,zero,60ac <__adddf3+0x630>
    5e3c:	80800044 	addi	r2,r16,1
    5e40:	1141ffcc 	andi	r5,r2,2047
    5e44:	01000044 	movi	r4,1
    5e48:	2140670e 	bge	r4,r5,5fe8 <__adddf3+0x56c>
    5e4c:	0101ffc4 	movi	r4,2047
    5e50:	11007f26 	beq	r2,r4,6050 <__adddf3+0x5d4>
    5e54:	898d883a 	add	r6,r17,r6
    5e58:	4247883a 	add	r3,r8,r9
    5e5c:	3451803a 	cmpltu	r8,r6,r17
    5e60:	40d1883a 	add	r8,r8,r3
    5e64:	402297fa 	slli	r17,r8,31
    5e68:	300cd07a 	srli	r6,r6,1
    5e6c:	4010d07a 	srli	r8,r8,1
    5e70:	1021883a 	mov	r16,r2
    5e74:	89a2b03a 	or	r17,r17,r6
    5e78:	003f1f06 	br	5af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af8>
    5e7c:	0081ffc4 	movi	r2,2047
    5e80:	80bf481e 	bne	r16,r2,5ba4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005ba4>
    5e84:	003f1c06 	br	5af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af8>
    5e88:	843ff844 	addi	r16,r16,-31
    5e8c:	01000804 	movi	r4,32
    5e90:	1406d83a 	srl	r3,r2,r16
    5e94:	41005026 	beq	r8,r4,5fd8 <__adddf3+0x55c>
    5e98:	01001004 	movi	r4,64
    5e9c:	2211c83a 	sub	r8,r4,r8
    5ea0:	1204983a 	sll	r2,r2,r8
    5ea4:	88a2b03a 	or	r17,r17,r2
    5ea8:	8822c03a 	cmpne	r17,r17,zero
    5eac:	1c62b03a 	or	r17,r3,r17
    5eb0:	0011883a 	mov	r8,zero
    5eb4:	0021883a 	mov	r16,zero
    5eb8:	003f7106 	br	5c80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c80>
    5ebc:	193ff804 	addi	r4,r3,-32
    5ec0:	00800804 	movi	r2,32
    5ec4:	4908d83a 	srl	r4,r9,r4
    5ec8:	18804526 	beq	r3,r2,5fe0 <__adddf3+0x564>
    5ecc:	00801004 	movi	r2,64
    5ed0:	10c5c83a 	sub	r2,r2,r3
    5ed4:	4886983a 	sll	r3,r9,r2
    5ed8:	198cb03a 	or	r6,r3,r6
    5edc:	300cc03a 	cmpne	r6,r6,zero
    5ee0:	218cb03a 	or	r6,r4,r6
    5ee4:	0007883a 	mov	r3,zero
    5ee8:	003f3b06 	br	5bd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005bd8>
    5eec:	80002a26 	beq	r16,zero,5f98 <__adddf3+0x51c>
    5ef0:	0101ffc4 	movi	r4,2047
    5ef4:	11006826 	beq	r2,r4,6098 <__adddf3+0x61c>
    5ef8:	00c7c83a 	sub	r3,zero,r3
    5efc:	42002034 	orhi	r8,r8,128
    5f00:	01000e04 	movi	r4,56
    5f04:	20c07c16 	blt	r4,r3,60f8 <__adddf3+0x67c>
    5f08:	010007c4 	movi	r4,31
    5f0c:	20c0da16 	blt	r4,r3,6278 <__adddf3+0x7fc>
    5f10:	01000804 	movi	r4,32
    5f14:	20c9c83a 	sub	r4,r4,r3
    5f18:	4114983a 	sll	r10,r8,r4
    5f1c:	88cad83a 	srl	r5,r17,r3
    5f20:	8908983a 	sll	r4,r17,r4
    5f24:	40c6d83a 	srl	r3,r8,r3
    5f28:	5162b03a 	or	r17,r10,r5
    5f2c:	2008c03a 	cmpne	r4,r4,zero
    5f30:	8922b03a 	or	r17,r17,r4
    5f34:	3463c83a 	sub	r17,r6,r17
    5f38:	48c7c83a 	sub	r3,r9,r3
    5f3c:	344d803a 	cmpltu	r6,r6,r17
    5f40:	1991c83a 	sub	r8,r3,r6
    5f44:	1021883a 	mov	r16,r2
    5f48:	3825883a 	mov	r18,r7
    5f4c:	003f2706 	br	5bec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005bec>
    5f50:	24d0b03a 	or	r8,r4,r19
    5f54:	40001b1e 	bne	r8,zero,5fc4 <__adddf3+0x548>
    5f58:	0005883a 	mov	r2,zero
    5f5c:	0007883a 	mov	r3,zero
    5f60:	0021883a 	mov	r16,zero
    5f64:	003f4d06 	br	5c9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c9c>
    5f68:	008007c4 	movi	r2,31
    5f6c:	11003c16 	blt	r2,r4,6060 <__adddf3+0x5e4>
    5f70:	00800804 	movi	r2,32
    5f74:	1105c83a 	sub	r2,r2,r4
    5f78:	488e983a 	sll	r7,r9,r2
    5f7c:	310ad83a 	srl	r5,r6,r4
    5f80:	3084983a 	sll	r2,r6,r2
    5f84:	4912d83a 	srl	r9,r9,r4
    5f88:	394ab03a 	or	r5,r7,r5
    5f8c:	1004c03a 	cmpne	r2,r2,zero
    5f90:	288ab03a 	or	r5,r5,r2
    5f94:	003f5306 	br	5ce4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005ce4>
    5f98:	4448b03a 	or	r4,r8,r17
    5f9c:	20003e26 	beq	r4,zero,6098 <__adddf3+0x61c>
    5fa0:	00c6303a 	nor	r3,zero,r3
    5fa4:	18003a1e 	bne	r3,zero,6090 <__adddf3+0x614>
    5fa8:	3463c83a 	sub	r17,r6,r17
    5fac:	4a07c83a 	sub	r3,r9,r8
    5fb0:	344d803a 	cmpltu	r6,r6,r17
    5fb4:	1991c83a 	sub	r8,r3,r6
    5fb8:	1021883a 	mov	r16,r2
    5fbc:	3825883a 	mov	r18,r7
    5fc0:	003f0a06 	br	5bec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005bec>
    5fc4:	2023883a 	mov	r17,r4
    5fc8:	003f0d06 	br	5c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c00>
    5fcc:	0081ffc4 	movi	r2,2047
    5fd0:	80bf3f1e 	bne	r16,r2,5cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005cd0>
    5fd4:	003ec806 	br	5af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af8>
    5fd8:	0005883a 	mov	r2,zero
    5fdc:	003fb106 	br	5ea4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005ea4>
    5fe0:	0007883a 	mov	r3,zero
    5fe4:	003fbc06 	br	5ed8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005ed8>
    5fe8:	4444b03a 	or	r2,r8,r17
    5fec:	8000871e 	bne	r16,zero,620c <__adddf3+0x790>
    5ff0:	1000ba26 	beq	r2,zero,62dc <__adddf3+0x860>
    5ff4:	4984b03a 	or	r2,r9,r6
    5ff8:	103ebf26 	beq	r2,zero,5af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af8>
    5ffc:	8985883a 	add	r2,r17,r6
    6000:	4247883a 	add	r3,r8,r9
    6004:	1451803a 	cmpltu	r8,r2,r17
    6008:	40d1883a 	add	r8,r8,r3
    600c:	40c0202c 	andhi	r3,r8,128
    6010:	1023883a 	mov	r17,r2
    6014:	183f1a26 	beq	r3,zero,5c80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c80>
    6018:	00bfe034 	movhi	r2,65408
    601c:	10bfffc4 	addi	r2,r2,-1
    6020:	2021883a 	mov	r16,r4
    6024:	4090703a 	and	r8,r8,r2
    6028:	003eb306 	br	5af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af8>
    602c:	4444b03a 	or	r2,r8,r17
    6030:	8000291e 	bne	r16,zero,60d8 <__adddf3+0x65c>
    6034:	10004b1e 	bne	r2,zero,6164 <__adddf3+0x6e8>
    6038:	4990b03a 	or	r8,r9,r6
    603c:	40008b26 	beq	r8,zero,626c <__adddf3+0x7f0>
    6040:	4811883a 	mov	r8,r9
    6044:	3023883a 	mov	r17,r6
    6048:	3825883a 	mov	r18,r7
    604c:	003eaa06 	br	5af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af8>
    6050:	1021883a 	mov	r16,r2
    6054:	0011883a 	mov	r8,zero
    6058:	0005883a 	mov	r2,zero
    605c:	003f0f06 	br	5c9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c9c>
    6060:	217ff804 	addi	r5,r4,-32
    6064:	00800804 	movi	r2,32
    6068:	494ad83a 	srl	r5,r9,r5
    606c:	20807d26 	beq	r4,r2,6264 <__adddf3+0x7e8>
    6070:	00801004 	movi	r2,64
    6074:	1109c83a 	sub	r4,r2,r4
    6078:	4912983a 	sll	r9,r9,r4
    607c:	498cb03a 	or	r6,r9,r6
    6080:	300cc03a 	cmpne	r6,r6,zero
    6084:	298ab03a 	or	r5,r5,r6
    6088:	0013883a 	mov	r9,zero
    608c:	003f1506 	br	5ce4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005ce4>
    6090:	0101ffc4 	movi	r4,2047
    6094:	113f9a1e 	bne	r2,r4,5f00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005f00>
    6098:	4811883a 	mov	r8,r9
    609c:	3023883a 	mov	r17,r6
    60a0:	1021883a 	mov	r16,r2
    60a4:	3825883a 	mov	r18,r7
    60a8:	003e9306 	br	5af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af8>
    60ac:	8000161e 	bne	r16,zero,6108 <__adddf3+0x68c>
    60b0:	444ab03a 	or	r5,r8,r17
    60b4:	28005126 	beq	r5,zero,61fc <__adddf3+0x780>
    60b8:	0108303a 	nor	r4,zero,r4
    60bc:	20004d1e 	bne	r4,zero,61f4 <__adddf3+0x778>
    60c0:	89a3883a 	add	r17,r17,r6
    60c4:	4253883a 	add	r9,r8,r9
    60c8:	898d803a 	cmpltu	r6,r17,r6
    60cc:	3251883a 	add	r8,r6,r9
    60d0:	1021883a 	mov	r16,r2
    60d4:	003f0806 	br	5cf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005cf8>
    60d8:	1000301e 	bne	r2,zero,619c <__adddf3+0x720>
    60dc:	4984b03a 	or	r2,r9,r6
    60e0:	10007126 	beq	r2,zero,62a8 <__adddf3+0x82c>
    60e4:	4811883a 	mov	r8,r9
    60e8:	3023883a 	mov	r17,r6
    60ec:	3825883a 	mov	r18,r7
    60f0:	0401ffc4 	movi	r16,2047
    60f4:	003e8006 	br	5af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af8>
    60f8:	4462b03a 	or	r17,r8,r17
    60fc:	8822c03a 	cmpne	r17,r17,zero
    6100:	0007883a 	mov	r3,zero
    6104:	003f8b06 	br	5f34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005f34>
    6108:	0141ffc4 	movi	r5,2047
    610c:	11403b26 	beq	r2,r5,61fc <__adddf3+0x780>
    6110:	0109c83a 	sub	r4,zero,r4
    6114:	42002034 	orhi	r8,r8,128
    6118:	01400e04 	movi	r5,56
    611c:	29006716 	blt	r5,r4,62bc <__adddf3+0x840>
    6120:	014007c4 	movi	r5,31
    6124:	29007016 	blt	r5,r4,62e8 <__adddf3+0x86c>
    6128:	01400804 	movi	r5,32
    612c:	290bc83a 	sub	r5,r5,r4
    6130:	4154983a 	sll	r10,r8,r5
    6134:	890ed83a 	srl	r7,r17,r4
    6138:	894a983a 	sll	r5,r17,r5
    613c:	4108d83a 	srl	r4,r8,r4
    6140:	51e2b03a 	or	r17,r10,r7
    6144:	280ac03a 	cmpne	r5,r5,zero
    6148:	8962b03a 	or	r17,r17,r5
    614c:	89a3883a 	add	r17,r17,r6
    6150:	2253883a 	add	r9,r4,r9
    6154:	898d803a 	cmpltu	r6,r17,r6
    6158:	3251883a 	add	r8,r6,r9
    615c:	1021883a 	mov	r16,r2
    6160:	003ee506 	br	5cf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005cf8>
    6164:	4984b03a 	or	r2,r9,r6
    6168:	103e6326 	beq	r2,zero,5af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af8>
    616c:	8987c83a 	sub	r3,r17,r6
    6170:	88c9803a 	cmpltu	r4,r17,r3
    6174:	4245c83a 	sub	r2,r8,r9
    6178:	1105c83a 	sub	r2,r2,r4
    617c:	1100202c 	andhi	r4,r2,128
    6180:	203ebb26 	beq	r4,zero,5c70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c70>
    6184:	3463c83a 	sub	r17,r6,r17
    6188:	4a07c83a 	sub	r3,r9,r8
    618c:	344d803a 	cmpltu	r6,r6,r17
    6190:	1991c83a 	sub	r8,r3,r6
    6194:	3825883a 	mov	r18,r7
    6198:	003e5706 	br	5af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af8>
    619c:	4984b03a 	or	r2,r9,r6
    61a0:	10002e26 	beq	r2,zero,625c <__adddf3+0x7e0>
    61a4:	4004d0fa 	srli	r2,r8,3
    61a8:	8822d0fa 	srli	r17,r17,3
    61ac:	4010977a 	slli	r8,r8,29
    61b0:	10c0022c 	andhi	r3,r2,8
    61b4:	4462b03a 	or	r17,r8,r17
    61b8:	18000826 	beq	r3,zero,61dc <__adddf3+0x760>
    61bc:	4808d0fa 	srli	r4,r9,3
    61c0:	20c0022c 	andhi	r3,r4,8
    61c4:	1800051e 	bne	r3,zero,61dc <__adddf3+0x760>
    61c8:	300cd0fa 	srli	r6,r6,3
    61cc:	4806977a 	slli	r3,r9,29
    61d0:	2005883a 	mov	r2,r4
    61d4:	3825883a 	mov	r18,r7
    61d8:	19a2b03a 	or	r17,r3,r6
    61dc:	8810d77a 	srli	r8,r17,29
    61e0:	100490fa 	slli	r2,r2,3
    61e4:	882290fa 	slli	r17,r17,3
    61e8:	0401ffc4 	movi	r16,2047
    61ec:	4090b03a 	or	r8,r8,r2
    61f0:	003e4106 	br	5af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af8>
    61f4:	0141ffc4 	movi	r5,2047
    61f8:	117fc71e 	bne	r2,r5,6118 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006118>
    61fc:	4811883a 	mov	r8,r9
    6200:	3023883a 	mov	r17,r6
    6204:	1021883a 	mov	r16,r2
    6208:	003e3b06 	br	5af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af8>
    620c:	10002f26 	beq	r2,zero,62cc <__adddf3+0x850>
    6210:	4984b03a 	or	r2,r9,r6
    6214:	10001126 	beq	r2,zero,625c <__adddf3+0x7e0>
    6218:	4004d0fa 	srli	r2,r8,3
    621c:	8822d0fa 	srli	r17,r17,3
    6220:	4010977a 	slli	r8,r8,29
    6224:	10c0022c 	andhi	r3,r2,8
    6228:	4462b03a 	or	r17,r8,r17
    622c:	183feb26 	beq	r3,zero,61dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061dc>
    6230:	4808d0fa 	srli	r4,r9,3
    6234:	20c0022c 	andhi	r3,r4,8
    6238:	183fe81e 	bne	r3,zero,61dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061dc>
    623c:	300cd0fa 	srli	r6,r6,3
    6240:	4806977a 	slli	r3,r9,29
    6244:	2005883a 	mov	r2,r4
    6248:	19a2b03a 	or	r17,r3,r6
    624c:	003fe306 	br	61dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061dc>
    6250:	0011883a 	mov	r8,zero
    6254:	0005883a 	mov	r2,zero
    6258:	003e3f06 	br	5b58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b58>
    625c:	0401ffc4 	movi	r16,2047
    6260:	003e2506 	br	5af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af8>
    6264:	0013883a 	mov	r9,zero
    6268:	003f8406 	br	607c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700607c>
    626c:	0005883a 	mov	r2,zero
    6270:	0007883a 	mov	r3,zero
    6274:	003e8906 	br	5c9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c9c>
    6278:	197ff804 	addi	r5,r3,-32
    627c:	01000804 	movi	r4,32
    6280:	414ad83a 	srl	r5,r8,r5
    6284:	19002426 	beq	r3,r4,6318 <__adddf3+0x89c>
    6288:	01001004 	movi	r4,64
    628c:	20c7c83a 	sub	r3,r4,r3
    6290:	40c6983a 	sll	r3,r8,r3
    6294:	1c46b03a 	or	r3,r3,r17
    6298:	1806c03a 	cmpne	r3,r3,zero
    629c:	28e2b03a 	or	r17,r5,r3
    62a0:	0007883a 	mov	r3,zero
    62a4:	003f2306 	br	5f34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005f34>
    62a8:	0007883a 	mov	r3,zero
    62ac:	5811883a 	mov	r8,r11
    62b0:	00bfffc4 	movi	r2,-1
    62b4:	0401ffc4 	movi	r16,2047
    62b8:	003e7806 	br	5c9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c9c>
    62bc:	4462b03a 	or	r17,r8,r17
    62c0:	8822c03a 	cmpne	r17,r17,zero
    62c4:	0009883a 	mov	r4,zero
    62c8:	003fa006 	br	614c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700614c>
    62cc:	4811883a 	mov	r8,r9
    62d0:	3023883a 	mov	r17,r6
    62d4:	0401ffc4 	movi	r16,2047
    62d8:	003e0706 	br	5af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af8>
    62dc:	4811883a 	mov	r8,r9
    62e0:	3023883a 	mov	r17,r6
    62e4:	003e0406 	br	5af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005af8>
    62e8:	21fff804 	addi	r7,r4,-32
    62ec:	01400804 	movi	r5,32
    62f0:	41ced83a 	srl	r7,r8,r7
    62f4:	21400a26 	beq	r4,r5,6320 <__adddf3+0x8a4>
    62f8:	01401004 	movi	r5,64
    62fc:	2909c83a 	sub	r4,r5,r4
    6300:	4108983a 	sll	r4,r8,r4
    6304:	2448b03a 	or	r4,r4,r17
    6308:	2008c03a 	cmpne	r4,r4,zero
    630c:	3922b03a 	or	r17,r7,r4
    6310:	0009883a 	mov	r4,zero
    6314:	003f8d06 	br	614c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700614c>
    6318:	0007883a 	mov	r3,zero
    631c:	003fdd06 	br	6294 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006294>
    6320:	0009883a 	mov	r4,zero
    6324:	003ff706 	br	6304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006304>

00006328 <__fixdfsi>:
    6328:	280cd53a 	srli	r6,r5,20
    632c:	00c00434 	movhi	r3,16
    6330:	18ffffc4 	addi	r3,r3,-1
    6334:	3181ffcc 	andi	r6,r6,2047
    6338:	01c0ff84 	movi	r7,1022
    633c:	28c6703a 	and	r3,r5,r3
    6340:	280ad7fa 	srli	r5,r5,31
    6344:	3980120e 	bge	r7,r6,6390 <__fixdfsi+0x68>
    6348:	00810744 	movi	r2,1053
    634c:	11800c16 	blt	r2,r6,6380 <__fixdfsi+0x58>
    6350:	00810cc4 	movi	r2,1075
    6354:	1185c83a 	sub	r2,r2,r6
    6358:	01c007c4 	movi	r7,31
    635c:	18c00434 	orhi	r3,r3,16
    6360:	38800d16 	blt	r7,r2,6398 <__fixdfsi+0x70>
    6364:	31befb44 	addi	r6,r6,-1043
    6368:	2084d83a 	srl	r2,r4,r2
    636c:	1986983a 	sll	r3,r3,r6
    6370:	1884b03a 	or	r2,r3,r2
    6374:	28000726 	beq	r5,zero,6394 <__fixdfsi+0x6c>
    6378:	0085c83a 	sub	r2,zero,r2
    637c:	f800283a 	ret
    6380:	00a00034 	movhi	r2,32768
    6384:	10bfffc4 	addi	r2,r2,-1
    6388:	2885883a 	add	r2,r5,r2
    638c:	f800283a 	ret
    6390:	0005883a 	mov	r2,zero
    6394:	f800283a 	ret
    6398:	008104c4 	movi	r2,1043
    639c:	1185c83a 	sub	r2,r2,r6
    63a0:	1884d83a 	srl	r2,r3,r2
    63a4:	003ff306 	br	6374 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006374>

000063a8 <__floatsidf>:
    63a8:	defffd04 	addi	sp,sp,-12
    63ac:	dfc00215 	stw	ra,8(sp)
    63b0:	dc400115 	stw	r17,4(sp)
    63b4:	dc000015 	stw	r16,0(sp)
    63b8:	20002b26 	beq	r4,zero,6468 <__floatsidf+0xc0>
    63bc:	2023883a 	mov	r17,r4
    63c0:	2020d7fa 	srli	r16,r4,31
    63c4:	20002d16 	blt	r4,zero,647c <__floatsidf+0xd4>
    63c8:	8809883a 	mov	r4,r17
    63cc:	0006ab40 	call	6ab4 <__clzsi2>
    63d0:	01410784 	movi	r5,1054
    63d4:	288bc83a 	sub	r5,r5,r2
    63d8:	01010cc4 	movi	r4,1075
    63dc:	2149c83a 	sub	r4,r4,r5
    63e0:	00c007c4 	movi	r3,31
    63e4:	1900160e 	bge	r3,r4,6440 <__floatsidf+0x98>
    63e8:	00c104c4 	movi	r3,1043
    63ec:	1947c83a 	sub	r3,r3,r5
    63f0:	88c6983a 	sll	r3,r17,r3
    63f4:	00800434 	movhi	r2,16
    63f8:	10bfffc4 	addi	r2,r2,-1
    63fc:	1886703a 	and	r3,r3,r2
    6400:	2941ffcc 	andi	r5,r5,2047
    6404:	800d883a 	mov	r6,r16
    6408:	0005883a 	mov	r2,zero
    640c:	280a953a 	slli	r5,r5,20
    6410:	31803fcc 	andi	r6,r6,255
    6414:	01000434 	movhi	r4,16
    6418:	300c97fa 	slli	r6,r6,31
    641c:	213fffc4 	addi	r4,r4,-1
    6420:	1906703a 	and	r3,r3,r4
    6424:	1946b03a 	or	r3,r3,r5
    6428:	1986b03a 	or	r3,r3,r6
    642c:	dfc00217 	ldw	ra,8(sp)
    6430:	dc400117 	ldw	r17,4(sp)
    6434:	dc000017 	ldw	r16,0(sp)
    6438:	dec00304 	addi	sp,sp,12
    643c:	f800283a 	ret
    6440:	00c002c4 	movi	r3,11
    6444:	1887c83a 	sub	r3,r3,r2
    6448:	88c6d83a 	srl	r3,r17,r3
    644c:	8904983a 	sll	r2,r17,r4
    6450:	01000434 	movhi	r4,16
    6454:	213fffc4 	addi	r4,r4,-1
    6458:	2941ffcc 	andi	r5,r5,2047
    645c:	1906703a 	and	r3,r3,r4
    6460:	800d883a 	mov	r6,r16
    6464:	003fe906 	br	640c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700640c>
    6468:	000d883a 	mov	r6,zero
    646c:	000b883a 	mov	r5,zero
    6470:	0007883a 	mov	r3,zero
    6474:	0005883a 	mov	r2,zero
    6478:	003fe406 	br	640c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700640c>
    647c:	0123c83a 	sub	r17,zero,r4
    6480:	003fd106 	br	63c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70063c8>

00006484 <__extendsfdf2>:
    6484:	200ad5fa 	srli	r5,r4,23
    6488:	defffd04 	addi	sp,sp,-12
    648c:	dc400115 	stw	r17,4(sp)
    6490:	29403fcc 	andi	r5,r5,255
    6494:	29800044 	addi	r6,r5,1
    6498:	04402034 	movhi	r17,128
    649c:	dc000015 	stw	r16,0(sp)
    64a0:	8c7fffc4 	addi	r17,r17,-1
    64a4:	dfc00215 	stw	ra,8(sp)
    64a8:	31803fcc 	andi	r6,r6,255
    64ac:	00800044 	movi	r2,1
    64b0:	8922703a 	and	r17,r17,r4
    64b4:	2020d7fa 	srli	r16,r4,31
    64b8:	1180110e 	bge	r2,r6,6500 <__extendsfdf2+0x7c>
    64bc:	880cd0fa 	srli	r6,r17,3
    64c0:	8822977a 	slli	r17,r17,29
    64c4:	2940e004 	addi	r5,r5,896
    64c8:	2941ffcc 	andi	r5,r5,2047
    64cc:	2804953a 	slli	r2,r5,20
    64d0:	01400434 	movhi	r5,16
    64d4:	800697fa 	slli	r3,r16,31
    64d8:	297fffc4 	addi	r5,r5,-1
    64dc:	314a703a 	and	r5,r6,r5
    64e0:	288ab03a 	or	r5,r5,r2
    64e4:	28c6b03a 	or	r3,r5,r3
    64e8:	8805883a 	mov	r2,r17
    64ec:	dfc00217 	ldw	ra,8(sp)
    64f0:	dc400117 	ldw	r17,4(sp)
    64f4:	dc000017 	ldw	r16,0(sp)
    64f8:	dec00304 	addi	sp,sp,12
    64fc:	f800283a 	ret
    6500:	2800111e 	bne	r5,zero,6548 <__extendsfdf2+0xc4>
    6504:	88001c26 	beq	r17,zero,6578 <__extendsfdf2+0xf4>
    6508:	8809883a 	mov	r4,r17
    650c:	0006ab40 	call	6ab4 <__clzsi2>
    6510:	00c00284 	movi	r3,10
    6514:	18801b16 	blt	r3,r2,6584 <__extendsfdf2+0x100>
    6518:	018002c4 	movi	r6,11
    651c:	308dc83a 	sub	r6,r6,r2
    6520:	11000544 	addi	r4,r2,21
    6524:	8986d83a 	srl	r3,r17,r6
    6528:	8922983a 	sll	r17,r17,r4
    652c:	0180e244 	movi	r6,905
    6530:	01400434 	movhi	r5,16
    6534:	3085c83a 	sub	r2,r6,r2
    6538:	297fffc4 	addi	r5,r5,-1
    653c:	194c703a 	and	r6,r3,r5
    6540:	1141ffcc 	andi	r5,r2,2047
    6544:	003fe006 	br	64c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70064c8>
    6548:	88000826 	beq	r17,zero,656c <__extendsfdf2+0xe8>
    654c:	880cd0fa 	srli	r6,r17,3
    6550:	00800434 	movhi	r2,16
    6554:	10bfffc4 	addi	r2,r2,-1
    6558:	31800234 	orhi	r6,r6,8
    655c:	8822977a 	slli	r17,r17,29
    6560:	308c703a 	and	r6,r6,r2
    6564:	0141ffc4 	movi	r5,2047
    6568:	003fd706 	br	64c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70064c8>
    656c:	0141ffc4 	movi	r5,2047
    6570:	000d883a 	mov	r6,zero
    6574:	003fd406 	br	64c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70064c8>
    6578:	000b883a 	mov	r5,zero
    657c:	000d883a 	mov	r6,zero
    6580:	003fd106 	br	64c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70064c8>
    6584:	11bffd44 	addi	r6,r2,-11
    6588:	8986983a 	sll	r3,r17,r6
    658c:	0023883a 	mov	r17,zero
    6590:	003fe606 	br	652c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700652c>

00006594 <_Unwind_ForcedUnwind_Phase2>:
    6594:	defff404 	addi	sp,sp,-48
    6598:	dd800915 	stw	r22,36(sp)
    659c:	058000b4 	movhi	r22,2
    65a0:	ddc00a15 	stw	r23,40(sp)
    65a4:	dd400815 	stw	r21,32(sp)
    65a8:	dd000715 	stw	r20,28(sp)
    65ac:	dcc00615 	stw	r19,24(sp)
    65b0:	dc400415 	stw	r17,16(sp)
    65b4:	dc000315 	stw	r16,12(sp)
    65b8:	dfc00b15 	stw	ra,44(sp)
    65bc:	dc800515 	stw	r18,20(sp)
    65c0:	2021883a 	mov	r16,r4
    65c4:	2823883a 	mov	r17,r5
    65c8:	24c00317 	ldw	r19,12(r4)
    65cc:	25000417 	ldw	r20,16(r4)
    65d0:	28c00017 	ldw	r3,0(r5)
    65d4:	b5910004 	addi	r22,r22,17408
    65d8:	054001c4 	movi	r21,7
    65dc:	05c00204 	movi	r23,8
    65e0:	00001606 	br	663c <_Unwind_ForcedUnwind_Phase2+0xa8>
    65e4:	81800017 	ldw	r6,0(r16)
    65e8:	81c00117 	ldw	r7,4(r16)
    65ec:	1c800617 	ldw	r18,24(r3)
    65f0:	dd000215 	stw	r20,8(sp)
    65f4:	dc400115 	stw	r17,4(sp)
    65f8:	dc000015 	stw	r16,0(sp)
    65fc:	983ee83a 	callr	r19
    6600:	01400284 	movi	r5,10
    6604:	01000044 	movi	r4,1
    6608:	1000241e 	bne	r2,zero,669c <_Unwind_ForcedUnwind_Phase2+0x108>
    660c:	90000726 	beq	r18,zero,662c <_Unwind_ForcedUnwind_Phase2+0x98>
    6610:	81800017 	ldw	r6,0(r16)
    6614:	81c00117 	ldw	r7,4(r16)
    6618:	dc400115 	stw	r17,4(sp)
    661c:	dc000015 	stw	r16,0(sp)
    6620:	903ee83a 	callr	r18
    6624:	15401f26 	beq	r2,r21,66a4 <_Unwind_ForcedUnwind_Phase2+0x110>
    6628:	15c01c1e 	bne	r2,r23,669c <_Unwind_ForcedUnwind_Phase2+0x108>
    662c:	88800017 	ldw	r2,0(r17)
    6630:	10c00017 	ldw	r3,0(r2)
    6634:	b0c00015 	stw	r3,0(r22)
    6638:	88c00015 	stw	r3,0(r17)
    663c:	01400284 	movi	r5,10
    6640:	01000044 	movi	r4,1
    6644:	183fe71e 	bne	r3,zero,65e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70065e4>
    6648:	81800017 	ldw	r6,0(r16)
    664c:	81c00117 	ldw	r7,4(r16)
    6650:	01400684 	movi	r5,26
    6654:	dd000215 	stw	r20,8(sp)
    6658:	dc400115 	stw	r17,4(sp)
    665c:	dc000015 	stw	r16,0(sp)
    6660:	01000044 	movi	r4,1
    6664:	983ee83a 	callr	r19
    6668:	10000c1e 	bne	r2,zero,669c <_Unwind_ForcedUnwind_Phase2+0x108>
    666c:	00800144 	movi	r2,5
    6670:	dfc00b17 	ldw	ra,44(sp)
    6674:	ddc00a17 	ldw	r23,40(sp)
    6678:	dd800917 	ldw	r22,36(sp)
    667c:	dd400817 	ldw	r21,32(sp)
    6680:	dd000717 	ldw	r20,28(sp)
    6684:	dcc00617 	ldw	r19,24(sp)
    6688:	dc800517 	ldw	r18,20(sp)
    668c:	dc400417 	ldw	r17,16(sp)
    6690:	dc000317 	ldw	r16,12(sp)
    6694:	dec00c04 	addi	sp,sp,48
    6698:	f800283a 	ret
    669c:	00800084 	movi	r2,2
    66a0:	003ff306 	br	6670 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006670>
    66a4:	a805883a 	mov	r2,r21
    66a8:	003ff106 	br	6670 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006670>

000066ac <_Unwind_RaiseException_Phase2>:
    66ac:	28c00017 	ldw	r3,0(r5)
    66b0:	defff804 	addi	sp,sp,-32
    66b4:	dcc00515 	stw	r19,20(sp)
    66b8:	dc800415 	stw	r18,16(sp)
    66bc:	dc400315 	stw	r17,12(sp)
    66c0:	dc000215 	stw	r16,8(sp)
    66c4:	dfc00715 	stw	ra,28(sp)
    66c8:	dd000615 	stw	r20,24(sp)
    66cc:	2823883a 	mov	r17,r5
    66d0:	2021883a 	mov	r16,r4
    66d4:	048001c4 	movi	r18,7
    66d8:	04c00204 	movi	r19,8
    66dc:	18001326 	beq	r3,zero,672c <_Unwind_RaiseException_Phase2+0x80>
    66e0:	81000417 	ldw	r4,16(r16)
    66e4:	1a000617 	ldw	r8,24(r3)
    66e8:	19001926 	beq	r3,r4,6750 <_Unwind_RaiseException_Phase2+0xa4>
    66ec:	40000c26 	beq	r8,zero,6720 <_Unwind_RaiseException_Phase2+0x74>
    66f0:	01400084 	movi	r5,2
    66f4:	0029883a 	mov	r20,zero
    66f8:	81800017 	ldw	r6,0(r16)
    66fc:	81c00117 	ldw	r7,4(r16)
    6700:	01000044 	movi	r4,1
    6704:	dc400115 	stw	r17,4(sp)
    6708:	dc000015 	stw	r16,0(sp)
    670c:	403ee83a 	callr	r8
    6710:	14801326 	beq	r2,r18,6760 <_Unwind_RaiseException_Phase2+0xb4>
    6714:	14c0051e 	bne	r2,r19,672c <_Unwind_RaiseException_Phase2+0x80>
    6718:	a000131e 	bne	r20,zero,6768 <_Unwind_RaiseException_Phase2+0xbc>
    671c:	88c00017 	ldw	r3,0(r17)
    6720:	18c00017 	ldw	r3,0(r3)
    6724:	88c00015 	stw	r3,0(r17)
    6728:	183fed1e 	bne	r3,zero,66e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70066e0>
    672c:	00800084 	movi	r2,2
    6730:	dfc00717 	ldw	ra,28(sp)
    6734:	dd000617 	ldw	r20,24(sp)
    6738:	dcc00517 	ldw	r19,20(sp)
    673c:	dc800417 	ldw	r18,16(sp)
    6740:	dc400317 	ldw	r17,12(sp)
    6744:	dc000217 	ldw	r16,8(sp)
    6748:	dec00804 	addi	sp,sp,32
    674c:	f800283a 	ret
    6750:	40000526 	beq	r8,zero,6768 <_Unwind_RaiseException_Phase2+0xbc>
    6754:	01400184 	movi	r5,6
    6758:	05000104 	movi	r20,4
    675c:	003fe606 	br	66f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70066f8>
    6760:	9005883a 	mov	r2,r18
    6764:	003ff206 	br	6730 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006730>
    6768:	0006b180 	call	6b18 <abort>

0000676c <uw_install_context.isra.1>:
    676c:	20c00017 	ldw	r3,0(r4)
    6770:	deffff04 	addi	sp,sp,-4
    6774:	014000b4 	movhi	r5,2
    6778:	19000917 	ldw	r4,36(r3)
    677c:	df000015 	stw	fp,0(sp)
    6780:	18800804 	addi	r2,r3,32
    6784:	d839883a 	mov	fp,sp
    6788:	29510004 	addi	r5,r5,17408
    678c:	28c00015 	stw	r3,0(r5)
    6790:	17000017 	ldw	fp,0(r2)
    6794:	1ec00a17 	ldw	sp,40(r3)
    6798:	2000683a 	jmp	r4

0000679c <_Unwind_SjLj_Register>:
    679c:	008000b4 	movhi	r2,2
    67a0:	10910004 	addi	r2,r2,17408
    67a4:	10c00017 	ldw	r3,0(r2)
    67a8:	11000015 	stw	r4,0(r2)
    67ac:	20c00015 	stw	r3,0(r4)
    67b0:	f800283a 	ret

000067b4 <_Unwind_SjLj_Unregister>:
    67b4:	20c00017 	ldw	r3,0(r4)
    67b8:	008000b4 	movhi	r2,2
    67bc:	10910004 	addi	r2,r2,17408
    67c0:	10c00015 	stw	r3,0(r2)
    67c4:	f800283a 	ret

000067c8 <_Unwind_GetGR>:
    67c8:	20800017 	ldw	r2,0(r4)
    67cc:	29400084 	addi	r5,r5,2
    67d0:	294b883a 	add	r5,r5,r5
    67d4:	294b883a 	add	r5,r5,r5
    67d8:	114b883a 	add	r5,r2,r5
    67dc:	28800017 	ldw	r2,0(r5)
    67e0:	f800283a 	ret

000067e4 <_Unwind_GetCFA>:
    67e4:	20800017 	ldw	r2,0(r4)
    67e8:	10000226 	beq	r2,zero,67f4 <_Unwind_GetCFA+0x10>
    67ec:	10800a17 	ldw	r2,40(r2)
    67f0:	f800283a 	ret
    67f4:	0005883a 	mov	r2,zero
    67f8:	f800283a 	ret

000067fc <_Unwind_SetGR>:
    67fc:	20800017 	ldw	r2,0(r4)
    6800:	29400084 	addi	r5,r5,2
    6804:	294b883a 	add	r5,r5,r5
    6808:	294b883a 	add	r5,r5,r5
    680c:	114b883a 	add	r5,r2,r5
    6810:	29800015 	stw	r6,0(r5)
    6814:	f800283a 	ret

00006818 <_Unwind_GetIP>:
    6818:	20800017 	ldw	r2,0(r4)
    681c:	10800117 	ldw	r2,4(r2)
    6820:	10800044 	addi	r2,r2,1
    6824:	f800283a 	ret

00006828 <_Unwind_GetIPInfo>:
    6828:	20800017 	ldw	r2,0(r4)
    682c:	28000015 	stw	zero,0(r5)
    6830:	10000326 	beq	r2,zero,6840 <_Unwind_GetIPInfo+0x18>
    6834:	10800117 	ldw	r2,4(r2)
    6838:	10800044 	addi	r2,r2,1
    683c:	f800283a 	ret
    6840:	0005883a 	mov	r2,zero
    6844:	f800283a 	ret

00006848 <_Unwind_SetIP>:
    6848:	20800017 	ldw	r2,0(r4)
    684c:	297fffc4 	addi	r5,r5,-1
    6850:	11400115 	stw	r5,4(r2)
    6854:	f800283a 	ret

00006858 <_Unwind_GetLanguageSpecificData>:
    6858:	20800017 	ldw	r2,0(r4)
    685c:	10800717 	ldw	r2,28(r2)
    6860:	f800283a 	ret

00006864 <_Unwind_GetRegionStart>:
    6864:	0005883a 	mov	r2,zero
    6868:	f800283a 	ret

0000686c <_Unwind_FindEnclosingFunction>:
    686c:	0005883a 	mov	r2,zero
    6870:	f800283a 	ret

00006874 <_Unwind_GetDataRelBase>:
    6874:	0005883a 	mov	r2,zero
    6878:	f800283a 	ret

0000687c <_Unwind_GetTextRelBase>:
    687c:	0005883a 	mov	r2,zero
    6880:	f800283a 	ret

00006884 <_Unwind_SjLj_RaiseException>:
    6884:	008000b4 	movhi	r2,2
    6888:	defff804 	addi	sp,sp,-32
    688c:	10910004 	addi	r2,r2,17408
    6890:	dc800515 	stw	r18,20(sp)
    6894:	14800017 	ldw	r18,0(r2)
    6898:	dfc00715 	stw	ra,28(sp)
    689c:	dcc00615 	stw	r19,24(sp)
    68a0:	dc400415 	stw	r17,16(sp)
    68a4:	dc000315 	stw	r16,12(sp)
    68a8:	dc800215 	stw	r18,8(sp)
    68ac:	90001426 	beq	r18,zero,6900 <_Unwind_SjLj_RaiseException+0x7c>
    68b0:	2021883a 	mov	r16,r4
    68b4:	9005883a 	mov	r2,r18
    68b8:	04400184 	movi	r17,6
    68bc:	04c00204 	movi	r19,8
    68c0:	10800617 	ldw	r2,24(r2)
    68c4:	10000a26 	beq	r2,zero,68f0 <_Unwind_SjLj_RaiseException+0x6c>
    68c8:	81800017 	ldw	r6,0(r16)
    68cc:	81c00117 	ldw	r7,4(r16)
    68d0:	01400044 	movi	r5,1
    68d4:	d8c00204 	addi	r3,sp,8
    68d8:	d8c00115 	stw	r3,4(sp)
    68dc:	dc000015 	stw	r16,0(sp)
    68e0:	2809883a 	mov	r4,r5
    68e4:	103ee83a 	callr	r2
    68e8:	14400d26 	beq	r2,r17,6920 <_Unwind_SjLj_RaiseException+0x9c>
    68ec:	14c0171e 	bne	r2,r19,694c <_Unwind_SjLj_RaiseException+0xc8>
    68f0:	d8800217 	ldw	r2,8(sp)
    68f4:	10800017 	ldw	r2,0(r2)
    68f8:	d8800215 	stw	r2,8(sp)
    68fc:	103ff01e 	bne	r2,zero,68c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70068c0>
    6900:	00800144 	movi	r2,5
    6904:	dfc00717 	ldw	ra,28(sp)
    6908:	dcc00617 	ldw	r19,24(sp)
    690c:	dc800517 	ldw	r18,20(sp)
    6910:	dc400417 	ldw	r17,16(sp)
    6914:	dc000317 	ldw	r16,12(sp)
    6918:	dec00804 	addi	sp,sp,32
    691c:	f800283a 	ret
    6920:	d8800217 	ldw	r2,8(sp)
    6924:	80000315 	stw	zero,12(r16)
    6928:	d9400204 	addi	r5,sp,8
    692c:	80800415 	stw	r2,16(r16)
    6930:	8009883a 	mov	r4,r16
    6934:	dc800215 	stw	r18,8(sp)
    6938:	00066ac0 	call	66ac <_Unwind_RaiseException_Phase2>
    693c:	00c001c4 	movi	r3,7
    6940:	10fff01e 	bne	r2,r3,6904 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006904>
    6944:	d9000204 	addi	r4,sp,8
    6948:	000676c0 	call	676c <uw_install_context.isra.1>
    694c:	008000c4 	movi	r2,3
    6950:	003fec06 	br	6904 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006904>

00006954 <_Unwind_SjLj_ForcedUnwind>:
    6954:	00c000b4 	movhi	r3,2
    6958:	18d10004 	addi	r3,r3,17408
    695c:	defffe04 	addi	sp,sp,-8
    6960:	18c00017 	ldw	r3,0(r3)
    6964:	dfc00115 	stw	ra,4(sp)
    6968:	21400315 	stw	r5,12(r4)
    696c:	21800415 	stw	r6,16(r4)
    6970:	d80b883a 	mov	r5,sp
    6974:	d8c00015 	stw	r3,0(sp)
    6978:	00065940 	call	6594 <_Unwind_ForcedUnwind_Phase2>
    697c:	00c001c4 	movi	r3,7
    6980:	10c00326 	beq	r2,r3,6990 <_Unwind_SjLj_ForcedUnwind+0x3c>
    6984:	dfc00117 	ldw	ra,4(sp)
    6988:	dec00204 	addi	sp,sp,8
    698c:	f800283a 	ret
    6990:	d809883a 	mov	r4,sp
    6994:	000676c0 	call	676c <uw_install_context.isra.1>

00006998 <_Unwind_SjLj_Resume>:
    6998:	00c000b4 	movhi	r3,2
    699c:	18d10004 	addi	r3,r3,17408
    69a0:	18c00017 	ldw	r3,0(r3)
    69a4:	20800317 	ldw	r2,12(r4)
    69a8:	defffe04 	addi	sp,sp,-8
    69ac:	dfc00115 	stw	ra,4(sp)
    69b0:	d8c00015 	stw	r3,0(sp)
    69b4:	d80b883a 	mov	r5,sp
    69b8:	1000041e 	bne	r2,zero,69cc <_Unwind_SjLj_Resume+0x34>
    69bc:	00066ac0 	call	66ac <_Unwind_RaiseException_Phase2>
    69c0:	00c001c4 	movi	r3,7
    69c4:	10c00326 	beq	r2,r3,69d4 <_Unwind_SjLj_Resume+0x3c>
    69c8:	0006b180 	call	6b18 <abort>
    69cc:	00065940 	call	6594 <_Unwind_ForcedUnwind_Phase2>
    69d0:	003ffb06 	br	69c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70069c0>
    69d4:	d809883a 	mov	r4,sp
    69d8:	000676c0 	call	676c <uw_install_context.isra.1>

000069dc <_Unwind_SjLj_Resume_or_Rethrow>:
    69dc:	20800317 	ldw	r2,12(r4)
    69e0:	defffe04 	addi	sp,sp,-8
    69e4:	dfc00115 	stw	ra,4(sp)
    69e8:	1000041e 	bne	r2,zero,69fc <_Unwind_SjLj_Resume_or_Rethrow+0x20>
    69ec:	00068840 	call	6884 <_Unwind_SjLj_RaiseException>
    69f0:	dfc00117 	ldw	ra,4(sp)
    69f4:	dec00204 	addi	sp,sp,8
    69f8:	f800283a 	ret
    69fc:	008000b4 	movhi	r2,2
    6a00:	10910004 	addi	r2,r2,17408
    6a04:	10800017 	ldw	r2,0(r2)
    6a08:	d80b883a 	mov	r5,sp
    6a0c:	d8800015 	stw	r2,0(sp)
    6a10:	00065940 	call	6594 <_Unwind_ForcedUnwind_Phase2>
    6a14:	00c001c4 	movi	r3,7
    6a18:	10c00126 	beq	r2,r3,6a20 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
    6a1c:	0006b180 	call	6b18 <abort>
    6a20:	d809883a 	mov	r4,sp
    6a24:	000676c0 	call	676c <uw_install_context.isra.1>

00006a28 <_Unwind_DeleteException>:
    6a28:	20800217 	ldw	r2,8(r4)
    6a2c:	10000326 	beq	r2,zero,6a3c <_Unwind_DeleteException+0x14>
    6a30:	200b883a 	mov	r5,r4
    6a34:	01000044 	movi	r4,1
    6a38:	1000683a 	jmp	r2
    6a3c:	f800283a 	ret

00006a40 <_Unwind_Backtrace>:
    6a40:	008000b4 	movhi	r2,2
    6a44:	10910004 	addi	r2,r2,17408
    6a48:	10800017 	ldw	r2,0(r2)
    6a4c:	defffc04 	addi	sp,sp,-16
    6a50:	dc400215 	stw	r17,8(sp)
    6a54:	dc000115 	stw	r16,4(sp)
    6a58:	dfc00315 	stw	ra,12(sp)
    6a5c:	2023883a 	mov	r17,r4
    6a60:	2821883a 	mov	r16,r5
    6a64:	d8800015 	stw	r2,0(sp)
    6a68:	00000506 	br	6a80 <_Unwind_Backtrace+0x40>
    6a6c:	883ee83a 	callr	r17
    6a70:	10000e1e 	bne	r2,zero,6aac <_Unwind_Backtrace+0x6c>
    6a74:	d8800017 	ldw	r2,0(sp)
    6a78:	10800017 	ldw	r2,0(r2)
    6a7c:	d8800015 	stw	r2,0(sp)
    6a80:	800b883a 	mov	r5,r16
    6a84:	d809883a 	mov	r4,sp
    6a88:	103ff81e 	bne	r2,zero,6a6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a6c>
    6a8c:	883ee83a 	callr	r17
    6a90:	1000061e 	bne	r2,zero,6aac <_Unwind_Backtrace+0x6c>
    6a94:	00800144 	movi	r2,5
    6a98:	dfc00317 	ldw	ra,12(sp)
    6a9c:	dc400217 	ldw	r17,8(sp)
    6aa0:	dc000117 	ldw	r16,4(sp)
    6aa4:	dec00404 	addi	sp,sp,16
    6aa8:	f800283a 	ret
    6aac:	008000c4 	movi	r2,3
    6ab0:	003ff906 	br	6a98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a98>

00006ab4 <__clzsi2>:
    6ab4:	00bfffd4 	movui	r2,65535
    6ab8:	11000536 	bltu	r2,r4,6ad0 <__clzsi2+0x1c>
    6abc:	00803fc4 	movi	r2,255
    6ac0:	11000f36 	bltu	r2,r4,6b00 <__clzsi2+0x4c>
    6ac4:	00800804 	movi	r2,32
    6ac8:	0007883a 	mov	r3,zero
    6acc:	00000506 	br	6ae4 <__clzsi2+0x30>
    6ad0:	00804034 	movhi	r2,256
    6ad4:	10bfffc4 	addi	r2,r2,-1
    6ad8:	11000c2e 	bgeu	r2,r4,6b0c <__clzsi2+0x58>
    6adc:	00800204 	movi	r2,8
    6ae0:	00c00604 	movi	r3,24
    6ae4:	20c8d83a 	srl	r4,r4,r3
    6ae8:	00c000b4 	movhi	r3,2
    6aec:	18ffaf04 	addi	r3,r3,-324
    6af0:	1909883a 	add	r4,r3,r4
    6af4:	20c00003 	ldbu	r3,0(r4)
    6af8:	10c5c83a 	sub	r2,r2,r3
    6afc:	f800283a 	ret
    6b00:	00800604 	movi	r2,24
    6b04:	00c00204 	movi	r3,8
    6b08:	003ff606 	br	6ae4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ae4>
    6b0c:	00800404 	movi	r2,16
    6b10:	1007883a 	mov	r3,r2
    6b14:	003ff306 	br	6ae4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ae4>

00006b18 <abort>:
    6b18:	deffff04 	addi	sp,sp,-4
    6b1c:	01000184 	movi	r4,6
    6b20:	dfc00015 	stw	ra,0(sp)
    6b24:	00079bc0 	call	79bc <raise>
    6b28:	01000044 	movi	r4,1
    6b2c:	0012e480 	call	12e48 <_exit>

00006b30 <malloc>:
    6b30:	008000b4 	movhi	r2,2
    6b34:	1088e204 	addi	r2,r2,9096
    6b38:	200b883a 	mov	r5,r4
    6b3c:	11000017 	ldw	r4,0(r2)
    6b40:	0006b581 	jmpi	6b58 <_malloc_r>

00006b44 <free>:
    6b44:	008000b4 	movhi	r2,2
    6b48:	1088e204 	addi	r2,r2,9096
    6b4c:	200b883a 	mov	r5,r4
    6b50:	11000017 	ldw	r4,0(r2)
    6b54:	000bff81 	jmpi	bff8 <_free_r>

00006b58 <_malloc_r>:
    6b58:	defff504 	addi	sp,sp,-44
    6b5c:	dc800315 	stw	r18,12(sp)
    6b60:	dfc00a15 	stw	ra,40(sp)
    6b64:	df000915 	stw	fp,36(sp)
    6b68:	ddc00815 	stw	r23,32(sp)
    6b6c:	dd800715 	stw	r22,28(sp)
    6b70:	dd400615 	stw	r21,24(sp)
    6b74:	dd000515 	stw	r20,20(sp)
    6b78:	dcc00415 	stw	r19,16(sp)
    6b7c:	dc400215 	stw	r17,8(sp)
    6b80:	dc000115 	stw	r16,4(sp)
    6b84:	288002c4 	addi	r2,r5,11
    6b88:	00c00584 	movi	r3,22
    6b8c:	2025883a 	mov	r18,r4
    6b90:	18807f2e 	bgeu	r3,r2,6d90 <_malloc_r+0x238>
    6b94:	047ffe04 	movi	r17,-8
    6b98:	1462703a 	and	r17,r2,r17
    6b9c:	8800a316 	blt	r17,zero,6e2c <_malloc_r+0x2d4>
    6ba0:	8940a236 	bltu	r17,r5,6e2c <_malloc_r+0x2d4>
    6ba4:	00139300 	call	13930 <__malloc_lock>
    6ba8:	00807dc4 	movi	r2,503
    6bac:	1441e92e 	bgeu	r2,r17,7354 <_malloc_r+0x7fc>
    6bb0:	8804d27a 	srli	r2,r17,9
    6bb4:	1000a126 	beq	r2,zero,6e3c <_malloc_r+0x2e4>
    6bb8:	00c00104 	movi	r3,4
    6bbc:	18811e36 	bltu	r3,r2,7038 <_malloc_r+0x4e0>
    6bc0:	8804d1ba 	srli	r2,r17,6
    6bc4:	12000e44 	addi	r8,r2,57
    6bc8:	11c00e04 	addi	r7,r2,56
    6bcc:	4209883a 	add	r4,r8,r8
    6bd0:	04c000b4 	movhi	r19,2
    6bd4:	2109883a 	add	r4,r4,r4
    6bd8:	9cc11e04 	addi	r19,r19,1144
    6bdc:	2109883a 	add	r4,r4,r4
    6be0:	9909883a 	add	r4,r19,r4
    6be4:	24000117 	ldw	r16,4(r4)
    6be8:	213ffe04 	addi	r4,r4,-8
    6bec:	24009726 	beq	r4,r16,6e4c <_malloc_r+0x2f4>
    6bf0:	80800117 	ldw	r2,4(r16)
    6bf4:	01bfff04 	movi	r6,-4
    6bf8:	014003c4 	movi	r5,15
    6bfc:	1184703a 	and	r2,r2,r6
    6c00:	1447c83a 	sub	r3,r2,r17
    6c04:	28c00716 	blt	r5,r3,6c24 <_malloc_r+0xcc>
    6c08:	1800920e 	bge	r3,zero,6e54 <_malloc_r+0x2fc>
    6c0c:	84000317 	ldw	r16,12(r16)
    6c10:	24008e26 	beq	r4,r16,6e4c <_malloc_r+0x2f4>
    6c14:	80800117 	ldw	r2,4(r16)
    6c18:	1184703a 	and	r2,r2,r6
    6c1c:	1447c83a 	sub	r3,r2,r17
    6c20:	28fff90e 	bge	r5,r3,6c08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c08>
    6c24:	3809883a 	mov	r4,r7
    6c28:	018000b4 	movhi	r6,2
    6c2c:	9c000417 	ldw	r16,16(r19)
    6c30:	31811e04 	addi	r6,r6,1144
    6c34:	32000204 	addi	r8,r6,8
    6c38:	82013426 	beq	r16,r8,710c <_malloc_r+0x5b4>
    6c3c:	80c00117 	ldw	r3,4(r16)
    6c40:	00bfff04 	movi	r2,-4
    6c44:	188e703a 	and	r7,r3,r2
    6c48:	3c45c83a 	sub	r2,r7,r17
    6c4c:	00c003c4 	movi	r3,15
    6c50:	18811f16 	blt	r3,r2,70d0 <_malloc_r+0x578>
    6c54:	32000515 	stw	r8,20(r6)
    6c58:	32000415 	stw	r8,16(r6)
    6c5c:	10007f0e 	bge	r2,zero,6e5c <_malloc_r+0x304>
    6c60:	00807fc4 	movi	r2,511
    6c64:	11c0fd36 	bltu	r2,r7,705c <_malloc_r+0x504>
    6c68:	3806d0fa 	srli	r3,r7,3
    6c6c:	01c00044 	movi	r7,1
    6c70:	30800117 	ldw	r2,4(r6)
    6c74:	19400044 	addi	r5,r3,1
    6c78:	294b883a 	add	r5,r5,r5
    6c7c:	1807d0ba 	srai	r3,r3,2
    6c80:	294b883a 	add	r5,r5,r5
    6c84:	294b883a 	add	r5,r5,r5
    6c88:	298b883a 	add	r5,r5,r6
    6c8c:	38c6983a 	sll	r3,r7,r3
    6c90:	29c00017 	ldw	r7,0(r5)
    6c94:	2a7ffe04 	addi	r9,r5,-8
    6c98:	1886b03a 	or	r3,r3,r2
    6c9c:	82400315 	stw	r9,12(r16)
    6ca0:	81c00215 	stw	r7,8(r16)
    6ca4:	30c00115 	stw	r3,4(r6)
    6ca8:	2c000015 	stw	r16,0(r5)
    6cac:	3c000315 	stw	r16,12(r7)
    6cb0:	2005d0ba 	srai	r2,r4,2
    6cb4:	01400044 	movi	r5,1
    6cb8:	288a983a 	sll	r5,r5,r2
    6cbc:	19406f36 	bltu	r3,r5,6e7c <_malloc_r+0x324>
    6cc0:	28c4703a 	and	r2,r5,r3
    6cc4:	10000a1e 	bne	r2,zero,6cf0 <_malloc_r+0x198>
    6cc8:	00bfff04 	movi	r2,-4
    6ccc:	294b883a 	add	r5,r5,r5
    6cd0:	2088703a 	and	r4,r4,r2
    6cd4:	28c4703a 	and	r2,r5,r3
    6cd8:	21000104 	addi	r4,r4,4
    6cdc:	1000041e 	bne	r2,zero,6cf0 <_malloc_r+0x198>
    6ce0:	294b883a 	add	r5,r5,r5
    6ce4:	28c4703a 	and	r2,r5,r3
    6ce8:	21000104 	addi	r4,r4,4
    6cec:	103ffc26 	beq	r2,zero,6ce0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ce0>
    6cf0:	02bfff04 	movi	r10,-4
    6cf4:	024003c4 	movi	r9,15
    6cf8:	21800044 	addi	r6,r4,1
    6cfc:	318d883a 	add	r6,r6,r6
    6d00:	318d883a 	add	r6,r6,r6
    6d04:	318d883a 	add	r6,r6,r6
    6d08:	998d883a 	add	r6,r19,r6
    6d0c:	333ffe04 	addi	r12,r6,-8
    6d10:	2017883a 	mov	r11,r4
    6d14:	31800104 	addi	r6,r6,4
    6d18:	34000017 	ldw	r16,0(r6)
    6d1c:	31fffd04 	addi	r7,r6,-12
    6d20:	81c0041e 	bne	r16,r7,6d34 <_malloc_r+0x1dc>
    6d24:	0000fb06 	br	7114 <_malloc_r+0x5bc>
    6d28:	1801030e 	bge	r3,zero,7138 <_malloc_r+0x5e0>
    6d2c:	84000317 	ldw	r16,12(r16)
    6d30:	81c0f826 	beq	r16,r7,7114 <_malloc_r+0x5bc>
    6d34:	80800117 	ldw	r2,4(r16)
    6d38:	1284703a 	and	r2,r2,r10
    6d3c:	1447c83a 	sub	r3,r2,r17
    6d40:	48fff90e 	bge	r9,r3,6d28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006d28>
    6d44:	80800317 	ldw	r2,12(r16)
    6d48:	81000217 	ldw	r4,8(r16)
    6d4c:	89400054 	ori	r5,r17,1
    6d50:	81400115 	stw	r5,4(r16)
    6d54:	20800315 	stw	r2,12(r4)
    6d58:	11000215 	stw	r4,8(r2)
    6d5c:	8463883a 	add	r17,r16,r17
    6d60:	9c400515 	stw	r17,20(r19)
    6d64:	9c400415 	stw	r17,16(r19)
    6d68:	18800054 	ori	r2,r3,1
    6d6c:	88800115 	stw	r2,4(r17)
    6d70:	8a000315 	stw	r8,12(r17)
    6d74:	8a000215 	stw	r8,8(r17)
    6d78:	88e3883a 	add	r17,r17,r3
    6d7c:	88c00015 	stw	r3,0(r17)
    6d80:	9009883a 	mov	r4,r18
    6d84:	0013a500 	call	13a50 <__malloc_unlock>
    6d88:	80800204 	addi	r2,r16,8
    6d8c:	00001b06 	br	6dfc <_malloc_r+0x2a4>
    6d90:	04400404 	movi	r17,16
    6d94:	89402536 	bltu	r17,r5,6e2c <_malloc_r+0x2d4>
    6d98:	00139300 	call	13930 <__malloc_lock>
    6d9c:	00800184 	movi	r2,6
    6da0:	01000084 	movi	r4,2
    6da4:	04c000b4 	movhi	r19,2
    6da8:	1085883a 	add	r2,r2,r2
    6dac:	9cc11e04 	addi	r19,r19,1144
    6db0:	1085883a 	add	r2,r2,r2
    6db4:	9885883a 	add	r2,r19,r2
    6db8:	14000117 	ldw	r16,4(r2)
    6dbc:	10fffe04 	addi	r3,r2,-8
    6dc0:	80c0d926 	beq	r16,r3,7128 <_malloc_r+0x5d0>
    6dc4:	80c00117 	ldw	r3,4(r16)
    6dc8:	81000317 	ldw	r4,12(r16)
    6dcc:	00bfff04 	movi	r2,-4
    6dd0:	1884703a 	and	r2,r3,r2
    6dd4:	81400217 	ldw	r5,8(r16)
    6dd8:	8085883a 	add	r2,r16,r2
    6ddc:	10c00117 	ldw	r3,4(r2)
    6de0:	29000315 	stw	r4,12(r5)
    6de4:	21400215 	stw	r5,8(r4)
    6de8:	18c00054 	ori	r3,r3,1
    6dec:	10c00115 	stw	r3,4(r2)
    6df0:	9009883a 	mov	r4,r18
    6df4:	0013a500 	call	13a50 <__malloc_unlock>
    6df8:	80800204 	addi	r2,r16,8
    6dfc:	dfc00a17 	ldw	ra,40(sp)
    6e00:	df000917 	ldw	fp,36(sp)
    6e04:	ddc00817 	ldw	r23,32(sp)
    6e08:	dd800717 	ldw	r22,28(sp)
    6e0c:	dd400617 	ldw	r21,24(sp)
    6e10:	dd000517 	ldw	r20,20(sp)
    6e14:	dcc00417 	ldw	r19,16(sp)
    6e18:	dc800317 	ldw	r18,12(sp)
    6e1c:	dc400217 	ldw	r17,8(sp)
    6e20:	dc000117 	ldw	r16,4(sp)
    6e24:	dec00b04 	addi	sp,sp,44
    6e28:	f800283a 	ret
    6e2c:	00800304 	movi	r2,12
    6e30:	90800015 	stw	r2,0(r18)
    6e34:	0005883a 	mov	r2,zero
    6e38:	003ff006 	br	6dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006dfc>
    6e3c:	01002004 	movi	r4,128
    6e40:	02001004 	movi	r8,64
    6e44:	01c00fc4 	movi	r7,63
    6e48:	003f6106 	br	6bd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006bd0>
    6e4c:	4009883a 	mov	r4,r8
    6e50:	003f7506 	br	6c28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c28>
    6e54:	81000317 	ldw	r4,12(r16)
    6e58:	003fde06 	br	6dd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006dd4>
    6e5c:	81c5883a 	add	r2,r16,r7
    6e60:	11400117 	ldw	r5,4(r2)
    6e64:	9009883a 	mov	r4,r18
    6e68:	29400054 	ori	r5,r5,1
    6e6c:	11400115 	stw	r5,4(r2)
    6e70:	0013a500 	call	13a50 <__malloc_unlock>
    6e74:	80800204 	addi	r2,r16,8
    6e78:	003fe006 	br	6dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006dfc>
    6e7c:	9c000217 	ldw	r16,8(r19)
    6e80:	00bfff04 	movi	r2,-4
    6e84:	85800117 	ldw	r22,4(r16)
    6e88:	b0ac703a 	and	r22,r22,r2
    6e8c:	b4400336 	bltu	r22,r17,6e9c <_malloc_r+0x344>
    6e90:	b445c83a 	sub	r2,r22,r17
    6e94:	00c003c4 	movi	r3,15
    6e98:	18805d16 	blt	r3,r2,7010 <_malloc_r+0x4b8>
    6e9c:	05c000b4 	movhi	r23,2
    6ea0:	008000b4 	movhi	r2,2
    6ea4:	10910304 	addi	r2,r2,17420
    6ea8:	bdc8df04 	addi	r23,r23,9084
    6eac:	15400017 	ldw	r21,0(r2)
    6eb0:	b8c00017 	ldw	r3,0(r23)
    6eb4:	00bfffc4 	movi	r2,-1
    6eb8:	858d883a 	add	r6,r16,r22
    6ebc:	8d6b883a 	add	r21,r17,r21
    6ec0:	1880ea26 	beq	r3,r2,726c <_malloc_r+0x714>
    6ec4:	ad4403c4 	addi	r21,r21,4111
    6ec8:	00bc0004 	movi	r2,-4096
    6ecc:	a8aa703a 	and	r21,r21,r2
    6ed0:	a80b883a 	mov	r5,r21
    6ed4:	9009883a 	mov	r4,r18
    6ed8:	d9800015 	stw	r6,0(sp)
    6edc:	00077140 	call	7714 <_sbrk_r>
    6ee0:	1029883a 	mov	r20,r2
    6ee4:	00bfffc4 	movi	r2,-1
    6ee8:	d9800017 	ldw	r6,0(sp)
    6eec:	a080e826 	beq	r20,r2,7290 <_malloc_r+0x738>
    6ef0:	a180a636 	bltu	r20,r6,718c <_malloc_r+0x634>
    6ef4:	070000f4 	movhi	fp,3
    6ef8:	e7292c04 	addi	fp,fp,-23376
    6efc:	e0800017 	ldw	r2,0(fp)
    6f00:	a887883a 	add	r3,r21,r2
    6f04:	e0c00015 	stw	r3,0(fp)
    6f08:	3500e626 	beq	r6,r20,72a4 <_malloc_r+0x74c>
    6f0c:	b9000017 	ldw	r4,0(r23)
    6f10:	00bfffc4 	movi	r2,-1
    6f14:	2080ee26 	beq	r4,r2,72d0 <_malloc_r+0x778>
    6f18:	a185c83a 	sub	r2,r20,r6
    6f1c:	10c5883a 	add	r2,r2,r3
    6f20:	e0800015 	stw	r2,0(fp)
    6f24:	a0c001cc 	andi	r3,r20,7
    6f28:	1800bc26 	beq	r3,zero,721c <_malloc_r+0x6c4>
    6f2c:	a0e9c83a 	sub	r20,r20,r3
    6f30:	00840204 	movi	r2,4104
    6f34:	a5000204 	addi	r20,r20,8
    6f38:	10c7c83a 	sub	r3,r2,r3
    6f3c:	a545883a 	add	r2,r20,r21
    6f40:	1083ffcc 	andi	r2,r2,4095
    6f44:	18abc83a 	sub	r21,r3,r2
    6f48:	a80b883a 	mov	r5,r21
    6f4c:	9009883a 	mov	r4,r18
    6f50:	00077140 	call	7714 <_sbrk_r>
    6f54:	00ffffc4 	movi	r3,-1
    6f58:	10c0e126 	beq	r2,r3,72e0 <_malloc_r+0x788>
    6f5c:	1505c83a 	sub	r2,r2,r20
    6f60:	1545883a 	add	r2,r2,r21
    6f64:	10800054 	ori	r2,r2,1
    6f68:	e0c00017 	ldw	r3,0(fp)
    6f6c:	9d000215 	stw	r20,8(r19)
    6f70:	a0800115 	stw	r2,4(r20)
    6f74:	a8c7883a 	add	r3,r21,r3
    6f78:	e0c00015 	stw	r3,0(fp)
    6f7c:	84c00e26 	beq	r16,r19,6fb8 <_malloc_r+0x460>
    6f80:	018003c4 	movi	r6,15
    6f84:	3580a72e 	bgeu	r6,r22,7224 <_malloc_r+0x6cc>
    6f88:	81400117 	ldw	r5,4(r16)
    6f8c:	013ffe04 	movi	r4,-8
    6f90:	b0bffd04 	addi	r2,r22,-12
    6f94:	1104703a 	and	r2,r2,r4
    6f98:	2900004c 	andi	r4,r5,1
    6f9c:	2088b03a 	or	r4,r4,r2
    6fa0:	81000115 	stw	r4,4(r16)
    6fa4:	01400144 	movi	r5,5
    6fa8:	8089883a 	add	r4,r16,r2
    6fac:	21400115 	stw	r5,4(r4)
    6fb0:	21400215 	stw	r5,8(r4)
    6fb4:	3080cd36 	bltu	r6,r2,72ec <_malloc_r+0x794>
    6fb8:	008000b4 	movhi	r2,2
    6fbc:	10910204 	addi	r2,r2,17416
    6fc0:	11000017 	ldw	r4,0(r2)
    6fc4:	20c0012e 	bgeu	r4,r3,6fcc <_malloc_r+0x474>
    6fc8:	10c00015 	stw	r3,0(r2)
    6fcc:	008000b4 	movhi	r2,2
    6fd0:	10910104 	addi	r2,r2,17412
    6fd4:	11000017 	ldw	r4,0(r2)
    6fd8:	9c000217 	ldw	r16,8(r19)
    6fdc:	20c0012e 	bgeu	r4,r3,6fe4 <_malloc_r+0x48c>
    6fe0:	10c00015 	stw	r3,0(r2)
    6fe4:	80c00117 	ldw	r3,4(r16)
    6fe8:	00bfff04 	movi	r2,-4
    6fec:	1886703a 	and	r3,r3,r2
    6ff0:	1c45c83a 	sub	r2,r3,r17
    6ff4:	1c400236 	bltu	r3,r17,7000 <_malloc_r+0x4a8>
    6ff8:	00c003c4 	movi	r3,15
    6ffc:	18800416 	blt	r3,r2,7010 <_malloc_r+0x4b8>
    7000:	9009883a 	mov	r4,r18
    7004:	0013a500 	call	13a50 <__malloc_unlock>
    7008:	0005883a 	mov	r2,zero
    700c:	003f7b06 	br	6dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006dfc>
    7010:	88c00054 	ori	r3,r17,1
    7014:	80c00115 	stw	r3,4(r16)
    7018:	8463883a 	add	r17,r16,r17
    701c:	10800054 	ori	r2,r2,1
    7020:	9c400215 	stw	r17,8(r19)
    7024:	88800115 	stw	r2,4(r17)
    7028:	9009883a 	mov	r4,r18
    702c:	0013a500 	call	13a50 <__malloc_unlock>
    7030:	80800204 	addi	r2,r16,8
    7034:	003f7106 	br	6dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006dfc>
    7038:	00c00504 	movi	r3,20
    703c:	18804a2e 	bgeu	r3,r2,7168 <_malloc_r+0x610>
    7040:	00c01504 	movi	r3,84
    7044:	18806e36 	bltu	r3,r2,7200 <_malloc_r+0x6a8>
    7048:	8804d33a 	srli	r2,r17,12
    704c:	12001bc4 	addi	r8,r2,111
    7050:	11c01b84 	addi	r7,r2,110
    7054:	4209883a 	add	r4,r8,r8
    7058:	003edd06 	br	6bd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006bd0>
    705c:	3804d27a 	srli	r2,r7,9
    7060:	00c00104 	movi	r3,4
    7064:	1880442e 	bgeu	r3,r2,7178 <_malloc_r+0x620>
    7068:	00c00504 	movi	r3,20
    706c:	18808136 	bltu	r3,r2,7274 <_malloc_r+0x71c>
    7070:	11401704 	addi	r5,r2,92
    7074:	10c016c4 	addi	r3,r2,91
    7078:	294b883a 	add	r5,r5,r5
    707c:	294b883a 	add	r5,r5,r5
    7080:	294b883a 	add	r5,r5,r5
    7084:	994b883a 	add	r5,r19,r5
    7088:	28800017 	ldw	r2,0(r5)
    708c:	018000b4 	movhi	r6,2
    7090:	297ffe04 	addi	r5,r5,-8
    7094:	31811e04 	addi	r6,r6,1144
    7098:	28806526 	beq	r5,r2,7230 <_malloc_r+0x6d8>
    709c:	01bfff04 	movi	r6,-4
    70a0:	10c00117 	ldw	r3,4(r2)
    70a4:	1986703a 	and	r3,r3,r6
    70a8:	38c0022e 	bgeu	r7,r3,70b4 <_malloc_r+0x55c>
    70ac:	10800217 	ldw	r2,8(r2)
    70b0:	28bffb1e 	bne	r5,r2,70a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70070a0>
    70b4:	11400317 	ldw	r5,12(r2)
    70b8:	98c00117 	ldw	r3,4(r19)
    70bc:	81400315 	stw	r5,12(r16)
    70c0:	80800215 	stw	r2,8(r16)
    70c4:	2c000215 	stw	r16,8(r5)
    70c8:	14000315 	stw	r16,12(r2)
    70cc:	003ef806 	br	6cb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006cb0>
    70d0:	88c00054 	ori	r3,r17,1
    70d4:	80c00115 	stw	r3,4(r16)
    70d8:	8463883a 	add	r17,r16,r17
    70dc:	34400515 	stw	r17,20(r6)
    70e0:	34400415 	stw	r17,16(r6)
    70e4:	10c00054 	ori	r3,r2,1
    70e8:	8a000315 	stw	r8,12(r17)
    70ec:	8a000215 	stw	r8,8(r17)
    70f0:	88c00115 	stw	r3,4(r17)
    70f4:	88a3883a 	add	r17,r17,r2
    70f8:	88800015 	stw	r2,0(r17)
    70fc:	9009883a 	mov	r4,r18
    7100:	0013a500 	call	13a50 <__malloc_unlock>
    7104:	80800204 	addi	r2,r16,8
    7108:	003f3c06 	br	6dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006dfc>
    710c:	30c00117 	ldw	r3,4(r6)
    7110:	003ee706 	br	6cb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006cb0>
    7114:	5ac00044 	addi	r11,r11,1
    7118:	588000cc 	andi	r2,r11,3
    711c:	31800204 	addi	r6,r6,8
    7120:	103efd1e 	bne	r2,zero,6d18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006d18>
    7124:	00002406 	br	71b8 <_malloc_r+0x660>
    7128:	14000317 	ldw	r16,12(r2)
    712c:	143f251e 	bne	r2,r16,6dc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006dc4>
    7130:	21000084 	addi	r4,r4,2
    7134:	003ebc06 	br	6c28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c28>
    7138:	8085883a 	add	r2,r16,r2
    713c:	10c00117 	ldw	r3,4(r2)
    7140:	81000317 	ldw	r4,12(r16)
    7144:	81400217 	ldw	r5,8(r16)
    7148:	18c00054 	ori	r3,r3,1
    714c:	10c00115 	stw	r3,4(r2)
    7150:	29000315 	stw	r4,12(r5)
    7154:	21400215 	stw	r5,8(r4)
    7158:	9009883a 	mov	r4,r18
    715c:	0013a500 	call	13a50 <__malloc_unlock>
    7160:	80800204 	addi	r2,r16,8
    7164:	003f2506 	br	6dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006dfc>
    7168:	12001704 	addi	r8,r2,92
    716c:	11c016c4 	addi	r7,r2,91
    7170:	4209883a 	add	r4,r8,r8
    7174:	003e9606 	br	6bd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006bd0>
    7178:	3804d1ba 	srli	r2,r7,6
    717c:	11400e44 	addi	r5,r2,57
    7180:	10c00e04 	addi	r3,r2,56
    7184:	294b883a 	add	r5,r5,r5
    7188:	003fbc06 	br	707c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700707c>
    718c:	84ff5926 	beq	r16,r19,6ef4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ef4>
    7190:	008000b4 	movhi	r2,2
    7194:	10811e04 	addi	r2,r2,1144
    7198:	14000217 	ldw	r16,8(r2)
    719c:	00bfff04 	movi	r2,-4
    71a0:	80c00117 	ldw	r3,4(r16)
    71a4:	1886703a 	and	r3,r3,r2
    71a8:	003f9106 	br	6ff0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ff0>
    71ac:	60800217 	ldw	r2,8(r12)
    71b0:	213fffc4 	addi	r4,r4,-1
    71b4:	1300651e 	bne	r2,r12,734c <_malloc_r+0x7f4>
    71b8:	208000cc 	andi	r2,r4,3
    71bc:	633ffe04 	addi	r12,r12,-8
    71c0:	103ffa1e 	bne	r2,zero,71ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70071ac>
    71c4:	98800117 	ldw	r2,4(r19)
    71c8:	0146303a 	nor	r3,zero,r5
    71cc:	1884703a 	and	r2,r3,r2
    71d0:	98800115 	stw	r2,4(r19)
    71d4:	294b883a 	add	r5,r5,r5
    71d8:	117f2836 	bltu	r2,r5,6e7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006e7c>
    71dc:	283f2726 	beq	r5,zero,6e7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006e7c>
    71e0:	2886703a 	and	r3,r5,r2
    71e4:	5809883a 	mov	r4,r11
    71e8:	183ec31e 	bne	r3,zero,6cf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006cf8>
    71ec:	294b883a 	add	r5,r5,r5
    71f0:	2886703a 	and	r3,r5,r2
    71f4:	21000104 	addi	r4,r4,4
    71f8:	183ffc26 	beq	r3,zero,71ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70071ec>
    71fc:	003ebe06 	br	6cf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006cf8>
    7200:	00c05504 	movi	r3,340
    7204:	18801236 	bltu	r3,r2,7250 <_malloc_r+0x6f8>
    7208:	8804d3fa 	srli	r2,r17,15
    720c:	12001e04 	addi	r8,r2,120
    7210:	11c01dc4 	addi	r7,r2,119
    7214:	4209883a 	add	r4,r8,r8
    7218:	003e6d06 	br	6bd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006bd0>
    721c:	00c40004 	movi	r3,4096
    7220:	003f4606 	br	6f3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f3c>
    7224:	00800044 	movi	r2,1
    7228:	a0800115 	stw	r2,4(r20)
    722c:	003f7406 	br	7000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007000>
    7230:	1805d0ba 	srai	r2,r3,2
    7234:	01c00044 	movi	r7,1
    7238:	30c00117 	ldw	r3,4(r6)
    723c:	388e983a 	sll	r7,r7,r2
    7240:	2805883a 	mov	r2,r5
    7244:	38c6b03a 	or	r3,r7,r3
    7248:	30c00115 	stw	r3,4(r6)
    724c:	003f9b06 	br	70bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70070bc>
    7250:	00c15504 	movi	r3,1364
    7254:	18801a36 	bltu	r3,r2,72c0 <_malloc_r+0x768>
    7258:	8804d4ba 	srli	r2,r17,18
    725c:	12001f44 	addi	r8,r2,125
    7260:	11c01f04 	addi	r7,r2,124
    7264:	4209883a 	add	r4,r8,r8
    7268:	003e5906 	br	6bd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006bd0>
    726c:	ad400404 	addi	r21,r21,16
    7270:	003f1706 	br	6ed0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ed0>
    7274:	00c01504 	movi	r3,84
    7278:	18802336 	bltu	r3,r2,7308 <_malloc_r+0x7b0>
    727c:	3804d33a 	srli	r2,r7,12
    7280:	11401bc4 	addi	r5,r2,111
    7284:	10c01b84 	addi	r3,r2,110
    7288:	294b883a 	add	r5,r5,r5
    728c:	003f7b06 	br	707c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700707c>
    7290:	9c000217 	ldw	r16,8(r19)
    7294:	00bfff04 	movi	r2,-4
    7298:	80c00117 	ldw	r3,4(r16)
    729c:	1886703a 	and	r3,r3,r2
    72a0:	003f5306 	br	6ff0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ff0>
    72a4:	3083ffcc 	andi	r2,r6,4095
    72a8:	103f181e 	bne	r2,zero,6f0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f0c>
    72ac:	99000217 	ldw	r4,8(r19)
    72b0:	b545883a 	add	r2,r22,r21
    72b4:	10800054 	ori	r2,r2,1
    72b8:	20800115 	stw	r2,4(r4)
    72bc:	003f3e06 	br	6fb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006fb8>
    72c0:	01003f84 	movi	r4,254
    72c4:	02001fc4 	movi	r8,127
    72c8:	01c01f84 	movi	r7,126
    72cc:	003e4006 	br	6bd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006bd0>
    72d0:	008000b4 	movhi	r2,2
    72d4:	1088df04 	addi	r2,r2,9084
    72d8:	15000015 	stw	r20,0(r2)
    72dc:	003f1106 	br	6f24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f24>
    72e0:	00800044 	movi	r2,1
    72e4:	002b883a 	mov	r21,zero
    72e8:	003f1f06 	br	6f68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f68>
    72ec:	81400204 	addi	r5,r16,8
    72f0:	9009883a 	mov	r4,r18
    72f4:	000bff80 	call	bff8 <_free_r>
    72f8:	008000f4 	movhi	r2,3
    72fc:	10a92c04 	addi	r2,r2,-23376
    7300:	10c00017 	ldw	r3,0(r2)
    7304:	003f2c06 	br	6fb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006fb8>
    7308:	00c05504 	movi	r3,340
    730c:	18800536 	bltu	r3,r2,7324 <_malloc_r+0x7cc>
    7310:	3804d3fa 	srli	r2,r7,15
    7314:	11401e04 	addi	r5,r2,120
    7318:	10c01dc4 	addi	r3,r2,119
    731c:	294b883a 	add	r5,r5,r5
    7320:	003f5606 	br	707c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700707c>
    7324:	00c15504 	movi	r3,1364
    7328:	18800536 	bltu	r3,r2,7340 <_malloc_r+0x7e8>
    732c:	3804d4ba 	srli	r2,r7,18
    7330:	11401f44 	addi	r5,r2,125
    7334:	10c01f04 	addi	r3,r2,124
    7338:	294b883a 	add	r5,r5,r5
    733c:	003f4f06 	br	707c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700707c>
    7340:	01403f84 	movi	r5,254
    7344:	00c01f84 	movi	r3,126
    7348:	003f4c06 	br	707c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700707c>
    734c:	98800117 	ldw	r2,4(r19)
    7350:	003fa006 	br	71d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70071d4>
    7354:	8808d0fa 	srli	r4,r17,3
    7358:	20800044 	addi	r2,r4,1
    735c:	1085883a 	add	r2,r2,r2
    7360:	003e9006 	br	6da4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006da4>

00007364 <memcpy>:
    7364:	defffd04 	addi	sp,sp,-12
    7368:	dfc00215 	stw	ra,8(sp)
    736c:	dc400115 	stw	r17,4(sp)
    7370:	dc000015 	stw	r16,0(sp)
    7374:	00c003c4 	movi	r3,15
    7378:	2005883a 	mov	r2,r4
    737c:	1980452e 	bgeu	r3,r6,7494 <memcpy+0x130>
    7380:	2906b03a 	or	r3,r5,r4
    7384:	18c000cc 	andi	r3,r3,3
    7388:	1800441e 	bne	r3,zero,749c <memcpy+0x138>
    738c:	347ffc04 	addi	r17,r6,-16
    7390:	8822d13a 	srli	r17,r17,4
    7394:	28c00104 	addi	r3,r5,4
    7398:	23400104 	addi	r13,r4,4
    739c:	8820913a 	slli	r16,r17,4
    73a0:	2b000204 	addi	r12,r5,8
    73a4:	22c00204 	addi	r11,r4,8
    73a8:	84000504 	addi	r16,r16,20
    73ac:	2a800304 	addi	r10,r5,12
    73b0:	22400304 	addi	r9,r4,12
    73b4:	2c21883a 	add	r16,r5,r16
    73b8:	2811883a 	mov	r8,r5
    73bc:	200f883a 	mov	r7,r4
    73c0:	41000017 	ldw	r4,0(r8)
    73c4:	1fc00017 	ldw	ra,0(r3)
    73c8:	63c00017 	ldw	r15,0(r12)
    73cc:	39000015 	stw	r4,0(r7)
    73d0:	53800017 	ldw	r14,0(r10)
    73d4:	6fc00015 	stw	ra,0(r13)
    73d8:	5bc00015 	stw	r15,0(r11)
    73dc:	4b800015 	stw	r14,0(r9)
    73e0:	18c00404 	addi	r3,r3,16
    73e4:	39c00404 	addi	r7,r7,16
    73e8:	42000404 	addi	r8,r8,16
    73ec:	6b400404 	addi	r13,r13,16
    73f0:	63000404 	addi	r12,r12,16
    73f4:	5ac00404 	addi	r11,r11,16
    73f8:	52800404 	addi	r10,r10,16
    73fc:	4a400404 	addi	r9,r9,16
    7400:	1c3fef1e 	bne	r3,r16,73c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70073c0>
    7404:	89c00044 	addi	r7,r17,1
    7408:	380e913a 	slli	r7,r7,4
    740c:	310003cc 	andi	r4,r6,15
    7410:	02c000c4 	movi	r11,3
    7414:	11c7883a 	add	r3,r2,r7
    7418:	29cb883a 	add	r5,r5,r7
    741c:	5900212e 	bgeu	r11,r4,74a4 <memcpy+0x140>
    7420:	1813883a 	mov	r9,r3
    7424:	2811883a 	mov	r8,r5
    7428:	200f883a 	mov	r7,r4
    742c:	42800017 	ldw	r10,0(r8)
    7430:	4a400104 	addi	r9,r9,4
    7434:	39ffff04 	addi	r7,r7,-4
    7438:	4abfff15 	stw	r10,-4(r9)
    743c:	42000104 	addi	r8,r8,4
    7440:	59fffa36 	bltu	r11,r7,742c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700742c>
    7444:	213fff04 	addi	r4,r4,-4
    7448:	2008d0ba 	srli	r4,r4,2
    744c:	318000cc 	andi	r6,r6,3
    7450:	21000044 	addi	r4,r4,1
    7454:	2109883a 	add	r4,r4,r4
    7458:	2109883a 	add	r4,r4,r4
    745c:	1907883a 	add	r3,r3,r4
    7460:	290b883a 	add	r5,r5,r4
    7464:	30000626 	beq	r6,zero,7480 <memcpy+0x11c>
    7468:	198d883a 	add	r6,r3,r6
    746c:	29c00003 	ldbu	r7,0(r5)
    7470:	18c00044 	addi	r3,r3,1
    7474:	29400044 	addi	r5,r5,1
    7478:	19ffffc5 	stb	r7,-1(r3)
    747c:	19bffb1e 	bne	r3,r6,746c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700746c>
    7480:	dfc00217 	ldw	ra,8(sp)
    7484:	dc400117 	ldw	r17,4(sp)
    7488:	dc000017 	ldw	r16,0(sp)
    748c:	dec00304 	addi	sp,sp,12
    7490:	f800283a 	ret
    7494:	2007883a 	mov	r3,r4
    7498:	003ff206 	br	7464 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007464>
    749c:	2007883a 	mov	r3,r4
    74a0:	003ff106 	br	7468 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007468>
    74a4:	200d883a 	mov	r6,r4
    74a8:	003fee06 	br	7464 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007464>

000074ac <memset>:
    74ac:	20c000cc 	andi	r3,r4,3
    74b0:	2005883a 	mov	r2,r4
    74b4:	18004426 	beq	r3,zero,75c8 <memset+0x11c>
    74b8:	31ffffc4 	addi	r7,r6,-1
    74bc:	30004026 	beq	r6,zero,75c0 <memset+0x114>
    74c0:	2813883a 	mov	r9,r5
    74c4:	200d883a 	mov	r6,r4
    74c8:	2007883a 	mov	r3,r4
    74cc:	00000406 	br	74e0 <memset+0x34>
    74d0:	3a3fffc4 	addi	r8,r7,-1
    74d4:	31800044 	addi	r6,r6,1
    74d8:	38003926 	beq	r7,zero,75c0 <memset+0x114>
    74dc:	400f883a 	mov	r7,r8
    74e0:	18c00044 	addi	r3,r3,1
    74e4:	32400005 	stb	r9,0(r6)
    74e8:	1a0000cc 	andi	r8,r3,3
    74ec:	403ff81e 	bne	r8,zero,74d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70074d0>
    74f0:	010000c4 	movi	r4,3
    74f4:	21c02d2e 	bgeu	r4,r7,75ac <memset+0x100>
    74f8:	29003fcc 	andi	r4,r5,255
    74fc:	200c923a 	slli	r6,r4,8
    7500:	3108b03a 	or	r4,r6,r4
    7504:	200c943a 	slli	r6,r4,16
    7508:	218cb03a 	or	r6,r4,r6
    750c:	010003c4 	movi	r4,15
    7510:	21c0182e 	bgeu	r4,r7,7574 <memset+0xc8>
    7514:	3b3ffc04 	addi	r12,r7,-16
    7518:	6018d13a 	srli	r12,r12,4
    751c:	1a000104 	addi	r8,r3,4
    7520:	1ac00204 	addi	r11,r3,8
    7524:	6008913a 	slli	r4,r12,4
    7528:	1a800304 	addi	r10,r3,12
    752c:	1813883a 	mov	r9,r3
    7530:	21000504 	addi	r4,r4,20
    7534:	1909883a 	add	r4,r3,r4
    7538:	49800015 	stw	r6,0(r9)
    753c:	41800015 	stw	r6,0(r8)
    7540:	59800015 	stw	r6,0(r11)
    7544:	51800015 	stw	r6,0(r10)
    7548:	42000404 	addi	r8,r8,16
    754c:	4a400404 	addi	r9,r9,16
    7550:	5ac00404 	addi	r11,r11,16
    7554:	52800404 	addi	r10,r10,16
    7558:	413ff71e 	bne	r8,r4,7538 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007538>
    755c:	63000044 	addi	r12,r12,1
    7560:	6018913a 	slli	r12,r12,4
    7564:	39c003cc 	andi	r7,r7,15
    7568:	010000c4 	movi	r4,3
    756c:	1b07883a 	add	r3,r3,r12
    7570:	21c00e2e 	bgeu	r4,r7,75ac <memset+0x100>
    7574:	1813883a 	mov	r9,r3
    7578:	3811883a 	mov	r8,r7
    757c:	010000c4 	movi	r4,3
    7580:	49800015 	stw	r6,0(r9)
    7584:	423fff04 	addi	r8,r8,-4
    7588:	4a400104 	addi	r9,r9,4
    758c:	223ffc36 	bltu	r4,r8,7580 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007580>
    7590:	393fff04 	addi	r4,r7,-4
    7594:	2008d0ba 	srli	r4,r4,2
    7598:	39c000cc 	andi	r7,r7,3
    759c:	21000044 	addi	r4,r4,1
    75a0:	2109883a 	add	r4,r4,r4
    75a4:	2109883a 	add	r4,r4,r4
    75a8:	1907883a 	add	r3,r3,r4
    75ac:	38000526 	beq	r7,zero,75c4 <memset+0x118>
    75b0:	19cf883a 	add	r7,r3,r7
    75b4:	19400005 	stb	r5,0(r3)
    75b8:	18c00044 	addi	r3,r3,1
    75bc:	38fffd1e 	bne	r7,r3,75b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70075b4>
    75c0:	f800283a 	ret
    75c4:	f800283a 	ret
    75c8:	2007883a 	mov	r3,r4
    75cc:	300f883a 	mov	r7,r6
    75d0:	003fc706 	br	74f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70074f0>

000075d4 <_printf_r>:
    75d4:	defffd04 	addi	sp,sp,-12
    75d8:	2805883a 	mov	r2,r5
    75dc:	dfc00015 	stw	ra,0(sp)
    75e0:	d9800115 	stw	r6,4(sp)
    75e4:	d9c00215 	stw	r7,8(sp)
    75e8:	21400217 	ldw	r5,8(r4)
    75ec:	d9c00104 	addi	r7,sp,4
    75f0:	100d883a 	mov	r6,r2
    75f4:	0007be00 	call	7be0 <___vfprintf_internal_r>
    75f8:	dfc00017 	ldw	ra,0(sp)
    75fc:	dec00304 	addi	sp,sp,12
    7600:	f800283a 	ret

00007604 <printf>:
    7604:	defffc04 	addi	sp,sp,-16
    7608:	dfc00015 	stw	ra,0(sp)
    760c:	d9400115 	stw	r5,4(sp)
    7610:	d9800215 	stw	r6,8(sp)
    7614:	d9c00315 	stw	r7,12(sp)
    7618:	008000b4 	movhi	r2,2
    761c:	1088e204 	addi	r2,r2,9096
    7620:	10800017 	ldw	r2,0(r2)
    7624:	200b883a 	mov	r5,r4
    7628:	d9800104 	addi	r6,sp,4
    762c:	11000217 	ldw	r4,8(r2)
    7630:	0009dd80 	call	9dd8 <__vfprintf_internal>
    7634:	dfc00017 	ldw	ra,0(sp)
    7638:	dec00404 	addi	sp,sp,16
    763c:	f800283a 	ret

00007640 <_puts_r>:
    7640:	defff604 	addi	sp,sp,-40
    7644:	dc000715 	stw	r16,28(sp)
    7648:	2021883a 	mov	r16,r4
    764c:	2809883a 	mov	r4,r5
    7650:	dc400815 	stw	r17,32(sp)
    7654:	dfc00915 	stw	ra,36(sp)
    7658:	2823883a 	mov	r17,r5
    765c:	0007b480 	call	7b48 <strlen>
    7660:	10c00044 	addi	r3,r2,1
    7664:	d8800115 	stw	r2,4(sp)
    7668:	008000b4 	movhi	r2,2
    766c:	10bfef04 	addi	r2,r2,-68
    7670:	d8800215 	stw	r2,8(sp)
    7674:	00800044 	movi	r2,1
    7678:	d8800315 	stw	r2,12(sp)
    767c:	00800084 	movi	r2,2
    7680:	dc400015 	stw	r17,0(sp)
    7684:	d8c00615 	stw	r3,24(sp)
    7688:	dec00415 	stw	sp,16(sp)
    768c:	d8800515 	stw	r2,20(sp)
    7690:	80000226 	beq	r16,zero,769c <_puts_r+0x5c>
    7694:	80800e17 	ldw	r2,56(r16)
    7698:	10001426 	beq	r2,zero,76ec <_puts_r+0xac>
    769c:	81400217 	ldw	r5,8(r16)
    76a0:	2880030b 	ldhu	r2,12(r5)
    76a4:	10c8000c 	andi	r3,r2,8192
    76a8:	1800061e 	bne	r3,zero,76c4 <_puts_r+0x84>
    76ac:	29001917 	ldw	r4,100(r5)
    76b0:	00f7ffc4 	movi	r3,-8193
    76b4:	10880014 	ori	r2,r2,8192
    76b8:	20c6703a 	and	r3,r4,r3
    76bc:	2880030d 	sth	r2,12(r5)
    76c0:	28c01915 	stw	r3,100(r5)
    76c4:	d9800404 	addi	r6,sp,16
    76c8:	8009883a 	mov	r4,r16
    76cc:	000c3080 	call	c308 <__sfvwrite_r>
    76d0:	1000091e 	bne	r2,zero,76f8 <_puts_r+0xb8>
    76d4:	00800284 	movi	r2,10
    76d8:	dfc00917 	ldw	ra,36(sp)
    76dc:	dc400817 	ldw	r17,32(sp)
    76e0:	dc000717 	ldw	r16,28(sp)
    76e4:	dec00a04 	addi	sp,sp,40
    76e8:	f800283a 	ret
    76ec:	8009883a 	mov	r4,r16
    76f0:	000be840 	call	be84 <__sinit>
    76f4:	003fe906 	br	769c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700769c>
    76f8:	00bfffc4 	movi	r2,-1
    76fc:	003ff606 	br	76d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70076d8>

00007700 <puts>:
    7700:	008000b4 	movhi	r2,2
    7704:	1088e204 	addi	r2,r2,9096
    7708:	200b883a 	mov	r5,r4
    770c:	11000017 	ldw	r4,0(r2)
    7710:	00076401 	jmpi	7640 <_puts_r>

00007714 <_sbrk_r>:
    7714:	defffd04 	addi	sp,sp,-12
    7718:	dc000015 	stw	r16,0(sp)
    771c:	040000b4 	movhi	r16,2
    7720:	dc400115 	stw	r17,4(sp)
    7724:	84110404 	addi	r16,r16,17424
    7728:	2023883a 	mov	r17,r4
    772c:	2809883a 	mov	r4,r5
    7730:	dfc00215 	stw	ra,8(sp)
    7734:	80000015 	stw	zero,0(r16)
    7738:	00136280 	call	13628 <sbrk>
    773c:	00ffffc4 	movi	r3,-1
    7740:	10c00526 	beq	r2,r3,7758 <_sbrk_r+0x44>
    7744:	dfc00217 	ldw	ra,8(sp)
    7748:	dc400117 	ldw	r17,4(sp)
    774c:	dc000017 	ldw	r16,0(sp)
    7750:	dec00304 	addi	sp,sp,12
    7754:	f800283a 	ret
    7758:	80c00017 	ldw	r3,0(r16)
    775c:	183ff926 	beq	r3,zero,7744 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007744>
    7760:	88c00015 	stw	r3,0(r17)
    7764:	003ff706 	br	7744 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007744>

00007768 <_init_signal_r>:
    7768:	2080b717 	ldw	r2,732(r4)
    776c:	10000226 	beq	r2,zero,7778 <_init_signal_r+0x10>
    7770:	0005883a 	mov	r2,zero
    7774:	f800283a 	ret
    7778:	defffe04 	addi	sp,sp,-8
    777c:	01402004 	movi	r5,128
    7780:	dc000015 	stw	r16,0(sp)
    7784:	dfc00115 	stw	ra,4(sp)
    7788:	2021883a 	mov	r16,r4
    778c:	0006b580 	call	6b58 <_malloc_r>
    7790:	8080b715 	stw	r2,732(r16)
    7794:	10000d26 	beq	r2,zero,77cc <_init_signal_r+0x64>
    7798:	0007883a 	mov	r3,zero
    779c:	01002004 	movi	r4,128
    77a0:	00000106 	br	77a8 <_init_signal_r+0x40>
    77a4:	8080b717 	ldw	r2,732(r16)
    77a8:	10c5883a 	add	r2,r2,r3
    77ac:	10000015 	stw	zero,0(r2)
    77b0:	18c00104 	addi	r3,r3,4
    77b4:	193ffb1e 	bne	r3,r4,77a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70077a4>
    77b8:	0005883a 	mov	r2,zero
    77bc:	dfc00117 	ldw	ra,4(sp)
    77c0:	dc000017 	ldw	r16,0(sp)
    77c4:	dec00204 	addi	sp,sp,8
    77c8:	f800283a 	ret
    77cc:	00bfffc4 	movi	r2,-1
    77d0:	003ffa06 	br	77bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70077bc>

000077d4 <_signal_r>:
    77d4:	00c007c4 	movi	r3,31
    77d8:	19401536 	bltu	r3,r5,7830 <_signal_r+0x5c>
    77dc:	2080b717 	ldw	r2,732(r4)
    77e0:	defffc04 	addi	sp,sp,-16
    77e4:	dc800215 	stw	r18,8(sp)
    77e8:	dc400115 	stw	r17,4(sp)
    77ec:	dc000015 	stw	r16,0(sp)
    77f0:	dfc00315 	stw	ra,12(sp)
    77f4:	3023883a 	mov	r17,r6
    77f8:	2021883a 	mov	r16,r4
    77fc:	2825883a 	mov	r18,r5
    7800:	10000f26 	beq	r2,zero,7840 <_signal_r+0x6c>
    7804:	948b883a 	add	r5,r18,r18
    7808:	294b883a 	add	r5,r5,r5
    780c:	114b883a 	add	r5,r2,r5
    7810:	28800017 	ldw	r2,0(r5)
    7814:	2c400015 	stw	r17,0(r5)
    7818:	dfc00317 	ldw	ra,12(sp)
    781c:	dc800217 	ldw	r18,8(sp)
    7820:	dc400117 	ldw	r17,4(sp)
    7824:	dc000017 	ldw	r16,0(sp)
    7828:	dec00404 	addi	sp,sp,16
    782c:	f800283a 	ret
    7830:	00c00584 	movi	r3,22
    7834:	20c00015 	stw	r3,0(r4)
    7838:	00bfffc4 	movi	r2,-1
    783c:	f800283a 	ret
    7840:	00077680 	call	7768 <_init_signal_r>
    7844:	1000021e 	bne	r2,zero,7850 <_signal_r+0x7c>
    7848:	8080b717 	ldw	r2,732(r16)
    784c:	003fed06 	br	7804 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007804>
    7850:	00bfffc4 	movi	r2,-1
    7854:	003ff006 	br	7818 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007818>

00007858 <_raise_r>:
    7858:	008007c4 	movi	r2,31
    785c:	11402936 	bltu	r2,r5,7904 <_raise_r+0xac>
    7860:	20c0b717 	ldw	r3,732(r4)
    7864:	defffd04 	addi	sp,sp,-12
    7868:	dc400115 	stw	r17,4(sp)
    786c:	dc000015 	stw	r16,0(sp)
    7870:	dfc00215 	stw	ra,8(sp)
    7874:	2021883a 	mov	r16,r4
    7878:	2823883a 	mov	r17,r5
    787c:	18001726 	beq	r3,zero,78dc <_raise_r+0x84>
    7880:	2945883a 	add	r2,r5,r5
    7884:	1085883a 	add	r2,r2,r2
    7888:	1887883a 	add	r3,r3,r2
    788c:	19800017 	ldw	r6,0(r3)
    7890:	30001226 	beq	r6,zero,78dc <_raise_r+0x84>
    7894:	00800044 	movi	r2,1
    7898:	30800e26 	beq	r6,r2,78d4 <_raise_r+0x7c>
    789c:	013fffc4 	movi	r4,-1
    78a0:	31000926 	beq	r6,r4,78c8 <_raise_r+0x70>
    78a4:	18000015 	stw	zero,0(r3)
    78a8:	2809883a 	mov	r4,r5
    78ac:	303ee83a 	callr	r6
    78b0:	0005883a 	mov	r2,zero
    78b4:	dfc00217 	ldw	ra,8(sp)
    78b8:	dc400117 	ldw	r17,4(sp)
    78bc:	dc000017 	ldw	r16,0(sp)
    78c0:	dec00304 	addi	sp,sp,12
    78c4:	f800283a 	ret
    78c8:	00c00584 	movi	r3,22
    78cc:	80c00015 	stw	r3,0(r16)
    78d0:	003ff806 	br	78b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70078b4>
    78d4:	0005883a 	mov	r2,zero
    78d8:	003ff606 	br	78b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70078b4>
    78dc:	8009883a 	mov	r4,r16
    78e0:	0007a680 	call	7a68 <_getpid_r>
    78e4:	880d883a 	mov	r6,r17
    78e8:	100b883a 	mov	r5,r2
    78ec:	8009883a 	mov	r4,r16
    78f0:	dfc00217 	ldw	ra,8(sp)
    78f4:	dc400117 	ldw	r17,4(sp)
    78f8:	dc000017 	ldw	r16,0(sp)
    78fc:	dec00304 	addi	sp,sp,12
    7900:	0007a0c1 	jmpi	7a0c <_kill_r>
    7904:	00800584 	movi	r2,22
    7908:	20800015 	stw	r2,0(r4)
    790c:	00bfffc4 	movi	r2,-1
    7910:	f800283a 	ret

00007914 <__sigtramp_r>:
    7914:	008007c4 	movi	r2,31
    7918:	11402436 	bltu	r2,r5,79ac <__sigtramp_r+0x98>
    791c:	20c0b717 	ldw	r3,732(r4)
    7920:	defffd04 	addi	sp,sp,-12
    7924:	dc400115 	stw	r17,4(sp)
    7928:	dc000015 	stw	r16,0(sp)
    792c:	dfc00215 	stw	ra,8(sp)
    7930:	2021883a 	mov	r16,r4
    7934:	2823883a 	mov	r17,r5
    7938:	18001826 	beq	r3,zero,799c <__sigtramp_r+0x88>
    793c:	8c45883a 	add	r2,r17,r17
    7940:	1085883a 	add	r2,r2,r2
    7944:	1885883a 	add	r2,r3,r2
    7948:	10c00017 	ldw	r3,0(r2)
    794c:	18001126 	beq	r3,zero,7994 <__sigtramp_r+0x80>
    7950:	013fffc4 	movi	r4,-1
    7954:	19000d26 	beq	r3,r4,798c <__sigtramp_r+0x78>
    7958:	01000044 	movi	r4,1
    795c:	19000926 	beq	r3,r4,7984 <__sigtramp_r+0x70>
    7960:	10000015 	stw	zero,0(r2)
    7964:	8809883a 	mov	r4,r17
    7968:	183ee83a 	callr	r3
    796c:	0005883a 	mov	r2,zero
    7970:	dfc00217 	ldw	ra,8(sp)
    7974:	dc400117 	ldw	r17,4(sp)
    7978:	dc000017 	ldw	r16,0(sp)
    797c:	dec00304 	addi	sp,sp,12
    7980:	f800283a 	ret
    7984:	008000c4 	movi	r2,3
    7988:	003ff906 	br	7970 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007970>
    798c:	00800084 	movi	r2,2
    7990:	003ff706 	br	7970 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007970>
    7994:	00800044 	movi	r2,1
    7998:	003ff506 	br	7970 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007970>
    799c:	00077680 	call	7768 <_init_signal_r>
    79a0:	1000041e 	bne	r2,zero,79b4 <__sigtramp_r+0xa0>
    79a4:	80c0b717 	ldw	r3,732(r16)
    79a8:	003fe406 	br	793c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700793c>
    79ac:	00bfffc4 	movi	r2,-1
    79b0:	f800283a 	ret
    79b4:	00bfffc4 	movi	r2,-1
    79b8:	003fed06 	br	7970 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007970>

000079bc <raise>:
    79bc:	008000b4 	movhi	r2,2
    79c0:	1088e204 	addi	r2,r2,9096
    79c4:	200b883a 	mov	r5,r4
    79c8:	11000017 	ldw	r4,0(r2)
    79cc:	00078581 	jmpi	7858 <_raise_r>

000079d0 <signal>:
    79d0:	008000b4 	movhi	r2,2
    79d4:	1088e204 	addi	r2,r2,9096
    79d8:	280d883a 	mov	r6,r5
    79dc:	200b883a 	mov	r5,r4
    79e0:	11000017 	ldw	r4,0(r2)
    79e4:	00077d41 	jmpi	77d4 <_signal_r>

000079e8 <_init_signal>:
    79e8:	008000b4 	movhi	r2,2
    79ec:	1088e204 	addi	r2,r2,9096
    79f0:	11000017 	ldw	r4,0(r2)
    79f4:	00077681 	jmpi	7768 <_init_signal_r>

000079f8 <__sigtramp>:
    79f8:	008000b4 	movhi	r2,2
    79fc:	1088e204 	addi	r2,r2,9096
    7a00:	200b883a 	mov	r5,r4
    7a04:	11000017 	ldw	r4,0(r2)
    7a08:	00079141 	jmpi	7914 <__sigtramp_r>

00007a0c <_kill_r>:
    7a0c:	defffd04 	addi	sp,sp,-12
    7a10:	2805883a 	mov	r2,r5
    7a14:	dc000015 	stw	r16,0(sp)
    7a18:	040000b4 	movhi	r16,2
    7a1c:	dc400115 	stw	r17,4(sp)
    7a20:	84110404 	addi	r16,r16,17424
    7a24:	2023883a 	mov	r17,r4
    7a28:	300b883a 	mov	r5,r6
    7a2c:	1009883a 	mov	r4,r2
    7a30:	dfc00215 	stw	ra,8(sp)
    7a34:	80000015 	stw	zero,0(r16)
    7a38:	00130a40 	call	130a4 <kill>
    7a3c:	00ffffc4 	movi	r3,-1
    7a40:	10c00526 	beq	r2,r3,7a58 <_kill_r+0x4c>
    7a44:	dfc00217 	ldw	ra,8(sp)
    7a48:	dc400117 	ldw	r17,4(sp)
    7a4c:	dc000017 	ldw	r16,0(sp)
    7a50:	dec00304 	addi	sp,sp,12
    7a54:	f800283a 	ret
    7a58:	80c00017 	ldw	r3,0(r16)
    7a5c:	183ff926 	beq	r3,zero,7a44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a44>
    7a60:	88c00015 	stw	r3,0(r17)
    7a64:	003ff706 	br	7a44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a44>

00007a68 <_getpid_r>:
    7a68:	0012f681 	jmpi	12f68 <getpid>

00007a6c <strcmp>:
    7a6c:	2144b03a 	or	r2,r4,r5
    7a70:	108000cc 	andi	r2,r2,3
    7a74:	1000171e 	bne	r2,zero,7ad4 <strcmp+0x68>
    7a78:	20800017 	ldw	r2,0(r4)
    7a7c:	28c00017 	ldw	r3,0(r5)
    7a80:	10c0141e 	bne	r2,r3,7ad4 <strcmp+0x68>
    7a84:	027fbff4 	movhi	r9,65279
    7a88:	4a7fbfc4 	addi	r9,r9,-257
    7a8c:	0086303a 	nor	r3,zero,r2
    7a90:	02202074 	movhi	r8,32897
    7a94:	1245883a 	add	r2,r2,r9
    7a98:	42202004 	addi	r8,r8,-32640
    7a9c:	10c4703a 	and	r2,r2,r3
    7aa0:	1204703a 	and	r2,r2,r8
    7aa4:	10000226 	beq	r2,zero,7ab0 <strcmp+0x44>
    7aa8:	00002306 	br	7b38 <strcmp+0xcc>
    7aac:	1000221e 	bne	r2,zero,7b38 <strcmp+0xcc>
    7ab0:	21000104 	addi	r4,r4,4
    7ab4:	20c00017 	ldw	r3,0(r4)
    7ab8:	29400104 	addi	r5,r5,4
    7abc:	29800017 	ldw	r6,0(r5)
    7ac0:	1a4f883a 	add	r7,r3,r9
    7ac4:	00c4303a 	nor	r2,zero,r3
    7ac8:	3884703a 	and	r2,r7,r2
    7acc:	1204703a 	and	r2,r2,r8
    7ad0:	19bff626 	beq	r3,r6,7aac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007aac>
    7ad4:	20800003 	ldbu	r2,0(r4)
    7ad8:	10c03fcc 	andi	r3,r2,255
    7adc:	18c0201c 	xori	r3,r3,128
    7ae0:	18ffe004 	addi	r3,r3,-128
    7ae4:	18000c26 	beq	r3,zero,7b18 <strcmp+0xac>
    7ae8:	29800007 	ldb	r6,0(r5)
    7aec:	19800326 	beq	r3,r6,7afc <strcmp+0x90>
    7af0:	00001306 	br	7b40 <strcmp+0xd4>
    7af4:	29800007 	ldb	r6,0(r5)
    7af8:	11800b1e 	bne	r2,r6,7b28 <strcmp+0xbc>
    7afc:	21000044 	addi	r4,r4,1
    7b00:	20c00003 	ldbu	r3,0(r4)
    7b04:	29400044 	addi	r5,r5,1
    7b08:	18803fcc 	andi	r2,r3,255
    7b0c:	1080201c 	xori	r2,r2,128
    7b10:	10bfe004 	addi	r2,r2,-128
    7b14:	103ff71e 	bne	r2,zero,7af4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007af4>
    7b18:	0007883a 	mov	r3,zero
    7b1c:	28800003 	ldbu	r2,0(r5)
    7b20:	1885c83a 	sub	r2,r3,r2
    7b24:	f800283a 	ret
    7b28:	28800003 	ldbu	r2,0(r5)
    7b2c:	18c03fcc 	andi	r3,r3,255
    7b30:	1885c83a 	sub	r2,r3,r2
    7b34:	f800283a 	ret
    7b38:	0005883a 	mov	r2,zero
    7b3c:	f800283a 	ret
    7b40:	10c03fcc 	andi	r3,r2,255
    7b44:	003ff506 	br	7b1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b1c>

00007b48 <strlen>:
    7b48:	208000cc 	andi	r2,r4,3
    7b4c:	10002026 	beq	r2,zero,7bd0 <strlen+0x88>
    7b50:	20800007 	ldb	r2,0(r4)
    7b54:	10002026 	beq	r2,zero,7bd8 <strlen+0x90>
    7b58:	2005883a 	mov	r2,r4
    7b5c:	00000206 	br	7b68 <strlen+0x20>
    7b60:	10c00007 	ldb	r3,0(r2)
    7b64:	18001826 	beq	r3,zero,7bc8 <strlen+0x80>
    7b68:	10800044 	addi	r2,r2,1
    7b6c:	10c000cc 	andi	r3,r2,3
    7b70:	183ffb1e 	bne	r3,zero,7b60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b60>
    7b74:	10c00017 	ldw	r3,0(r2)
    7b78:	01ffbff4 	movhi	r7,65279
    7b7c:	39ffbfc4 	addi	r7,r7,-257
    7b80:	00ca303a 	nor	r5,zero,r3
    7b84:	01a02074 	movhi	r6,32897
    7b88:	19c7883a 	add	r3,r3,r7
    7b8c:	31a02004 	addi	r6,r6,-32640
    7b90:	1946703a 	and	r3,r3,r5
    7b94:	1986703a 	and	r3,r3,r6
    7b98:	1800091e 	bne	r3,zero,7bc0 <strlen+0x78>
    7b9c:	10800104 	addi	r2,r2,4
    7ba0:	10c00017 	ldw	r3,0(r2)
    7ba4:	19cb883a 	add	r5,r3,r7
    7ba8:	00c6303a 	nor	r3,zero,r3
    7bac:	28c6703a 	and	r3,r5,r3
    7bb0:	1986703a 	and	r3,r3,r6
    7bb4:	183ff926 	beq	r3,zero,7b9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b9c>
    7bb8:	00000106 	br	7bc0 <strlen+0x78>
    7bbc:	10800044 	addi	r2,r2,1
    7bc0:	10c00007 	ldb	r3,0(r2)
    7bc4:	183ffd1e 	bne	r3,zero,7bbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007bbc>
    7bc8:	1105c83a 	sub	r2,r2,r4
    7bcc:	f800283a 	ret
    7bd0:	2005883a 	mov	r2,r4
    7bd4:	003fe706 	br	7b74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b74>
    7bd8:	0005883a 	mov	r2,zero
    7bdc:	f800283a 	ret

00007be0 <___vfprintf_internal_r>:
    7be0:	deffb804 	addi	sp,sp,-288
    7be4:	dfc04715 	stw	ra,284(sp)
    7be8:	ddc04515 	stw	r23,276(sp)
    7bec:	dd404315 	stw	r21,268(sp)
    7bf0:	d9002c15 	stw	r4,176(sp)
    7bf4:	282f883a 	mov	r23,r5
    7bf8:	302b883a 	mov	r21,r6
    7bfc:	d9c02d15 	stw	r7,180(sp)
    7c00:	df004615 	stw	fp,280(sp)
    7c04:	dd804415 	stw	r22,272(sp)
    7c08:	dd004215 	stw	r20,264(sp)
    7c0c:	dcc04115 	stw	r19,260(sp)
    7c10:	dc804015 	stw	r18,256(sp)
    7c14:	dc403f15 	stw	r17,252(sp)
    7c18:	dc003e15 	stw	r16,248(sp)
    7c1c:	000c9f80 	call	c9f8 <_localeconv_r>
    7c20:	10800017 	ldw	r2,0(r2)
    7c24:	1009883a 	mov	r4,r2
    7c28:	d8803415 	stw	r2,208(sp)
    7c2c:	0007b480 	call	7b48 <strlen>
    7c30:	d8803715 	stw	r2,220(sp)
    7c34:	d8802c17 	ldw	r2,176(sp)
    7c38:	10000226 	beq	r2,zero,7c44 <___vfprintf_internal_r+0x64>
    7c3c:	10800e17 	ldw	r2,56(r2)
    7c40:	1000f926 	beq	r2,zero,8028 <___vfprintf_internal_r+0x448>
    7c44:	b880030b 	ldhu	r2,12(r23)
    7c48:	10c8000c 	andi	r3,r2,8192
    7c4c:	1800061e 	bne	r3,zero,7c68 <___vfprintf_internal_r+0x88>
    7c50:	b9001917 	ldw	r4,100(r23)
    7c54:	00f7ffc4 	movi	r3,-8193
    7c58:	10880014 	ori	r2,r2,8192
    7c5c:	20c6703a 	and	r3,r4,r3
    7c60:	b880030d 	sth	r2,12(r23)
    7c64:	b8c01915 	stw	r3,100(r23)
    7c68:	10c0020c 	andi	r3,r2,8
    7c6c:	1800c126 	beq	r3,zero,7f74 <___vfprintf_internal_r+0x394>
    7c70:	b8c00417 	ldw	r3,16(r23)
    7c74:	1800bf26 	beq	r3,zero,7f74 <___vfprintf_internal_r+0x394>
    7c78:	1080068c 	andi	r2,r2,26
    7c7c:	00c00284 	movi	r3,10
    7c80:	10c0c426 	beq	r2,r3,7f94 <___vfprintf_internal_r+0x3b4>
    7c84:	d8c00404 	addi	r3,sp,16
    7c88:	050000b4 	movhi	r20,2
    7c8c:	d9001e04 	addi	r4,sp,120
    7c90:	a5000084 	addi	r20,r20,2
    7c94:	d8c01e15 	stw	r3,120(sp)
    7c98:	d8002015 	stw	zero,128(sp)
    7c9c:	d8001f15 	stw	zero,124(sp)
    7ca0:	d8003315 	stw	zero,204(sp)
    7ca4:	d8003615 	stw	zero,216(sp)
    7ca8:	d8003815 	stw	zero,224(sp)
    7cac:	1811883a 	mov	r8,r3
    7cb0:	d8003915 	stw	zero,228(sp)
    7cb4:	d8003a15 	stw	zero,232(sp)
    7cb8:	d8002f15 	stw	zero,188(sp)
    7cbc:	d9002815 	stw	r4,160(sp)
    7cc0:	a8800007 	ldb	r2,0(r21)
    7cc4:	10027b26 	beq	r2,zero,86b4 <___vfprintf_internal_r+0xad4>
    7cc8:	00c00944 	movi	r3,37
    7ccc:	a821883a 	mov	r16,r21
    7cd0:	10c0021e 	bne	r2,r3,7cdc <___vfprintf_internal_r+0xfc>
    7cd4:	00001406 	br	7d28 <___vfprintf_internal_r+0x148>
    7cd8:	10c00326 	beq	r2,r3,7ce8 <___vfprintf_internal_r+0x108>
    7cdc:	84000044 	addi	r16,r16,1
    7ce0:	80800007 	ldb	r2,0(r16)
    7ce4:	103ffc1e 	bne	r2,zero,7cd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007cd8>
    7ce8:	8563c83a 	sub	r17,r16,r21
    7cec:	88000e26 	beq	r17,zero,7d28 <___vfprintf_internal_r+0x148>
    7cf0:	d8c02017 	ldw	r3,128(sp)
    7cf4:	d8801f17 	ldw	r2,124(sp)
    7cf8:	45400015 	stw	r21,0(r8)
    7cfc:	1c47883a 	add	r3,r3,r17
    7d00:	10800044 	addi	r2,r2,1
    7d04:	d8c02015 	stw	r3,128(sp)
    7d08:	44400115 	stw	r17,4(r8)
    7d0c:	d8801f15 	stw	r2,124(sp)
    7d10:	00c001c4 	movi	r3,7
    7d14:	1880a716 	blt	r3,r2,7fb4 <___vfprintf_internal_r+0x3d4>
    7d18:	42000204 	addi	r8,r8,8
    7d1c:	d9402f17 	ldw	r5,188(sp)
    7d20:	2c4b883a 	add	r5,r5,r17
    7d24:	d9402f15 	stw	r5,188(sp)
    7d28:	80800007 	ldb	r2,0(r16)
    7d2c:	1000a826 	beq	r2,zero,7fd0 <___vfprintf_internal_r+0x3f0>
    7d30:	84400047 	ldb	r17,1(r16)
    7d34:	00bfffc4 	movi	r2,-1
    7d38:	85400044 	addi	r21,r16,1
    7d3c:	d8002785 	stb	zero,158(sp)
    7d40:	0007883a 	mov	r3,zero
    7d44:	000f883a 	mov	r7,zero
    7d48:	d8802915 	stw	r2,164(sp)
    7d4c:	d8003115 	stw	zero,196(sp)
    7d50:	0025883a 	mov	r18,zero
    7d54:	01401604 	movi	r5,88
    7d58:	01800244 	movi	r6,9
    7d5c:	02800a84 	movi	r10,42
    7d60:	02401b04 	movi	r9,108
    7d64:	ad400044 	addi	r21,r21,1
    7d68:	88bff804 	addi	r2,r17,-32
    7d6c:	28830436 	bltu	r5,r2,8980 <___vfprintf_internal_r+0xda0>
    7d70:	100490ba 	slli	r2,r2,2
    7d74:	01000034 	movhi	r4,0
    7d78:	211f6204 	addi	r4,r4,32136
    7d7c:	1105883a 	add	r2,r2,r4
    7d80:	10800017 	ldw	r2,0(r2)
    7d84:	1000683a 	jmp	r2
    7d88:	000088a0 	cmpeqi	zero,zero,546
    7d8c:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7d90:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7d94:	000088c0 	call	88c <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x14>
    7d98:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7d9c:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7da0:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7da4:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7da8:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7dac:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7db0:	00008034 	movhi	zero,512
    7db4:	000087dc 	xori	zero,zero,543
    7db8:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7dbc:	00007efc 	xorhi	zero,zero,507
    7dc0:	0000805c 	xori	zero,zero,513
    7dc4:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7dc8:	0000809c 	xori	zero,zero,514
    7dcc:	000080a8 	cmpgeui	zero,zero,514
    7dd0:	000080a8 	cmpgeui	zero,zero,514
    7dd4:	000080a8 	cmpgeui	zero,zero,514
    7dd8:	000080a8 	cmpgeui	zero,zero,514
    7ddc:	000080a8 	cmpgeui	zero,zero,514
    7de0:	000080a8 	cmpgeui	zero,zero,514
    7de4:	000080a8 	cmpgeui	zero,zero,514
    7de8:	000080a8 	cmpgeui	zero,zero,514
    7dec:	000080a8 	cmpgeui	zero,zero,514
    7df0:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7df4:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7df8:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7dfc:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e00:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e04:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e08:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e0c:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e10:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e14:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e18:	000080dc 	xori	zero,zero,515
    7e1c:	00008198 	cmpnei	zero,zero,518
    7e20:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e24:	00008198 	cmpnei	zero,zero,518
    7e28:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e2c:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e30:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e34:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e38:	00008238 	rdprs	zero,zero,520
    7e3c:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e40:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e44:	00008244 	movi	zero,521
    7e48:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e4c:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e50:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e54:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e58:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e5c:	000086bc 	xorhi	zero,zero,538
    7e60:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e64:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e68:	0000871c 	xori	zero,zero,540
    7e6c:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e70:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e74:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e78:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e7c:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e80:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e84:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e88:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e8c:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e90:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7e94:	0000892c 	andhi	zero,zero,548
    7e98:	000088cc 	andi	zero,zero,547
    7e9c:	00008198 	cmpnei	zero,zero,518
    7ea0:	00008198 	cmpnei	zero,zero,518
    7ea4:	00008198 	cmpnei	zero,zero,518
    7ea8:	000088dc 	xori	zero,zero,547
    7eac:	000088cc 	andi	zero,zero,547
    7eb0:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7eb4:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7eb8:	000088e8 	cmpgeui	zero,zero,547
    7ebc:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7ec0:	000088f8 	rdprs	zero,zero,547
    7ec4:	000087cc 	andi	zero,zero,543
    7ec8:	00007f08 	cmpgei	zero,zero,508
    7ecc:	000087ec 	andhi	zero,zero,543
    7ed0:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7ed4:	000087f8 	rdprs	zero,zero,543
    7ed8:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7edc:	00008854 	movui	zero,545
    7ee0:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7ee4:	00008980 	call	898 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x20>
    7ee8:	00008864 	muli	zero,zero,545
    7eec:	d9003117 	ldw	r4,196(sp)
    7ef0:	d8802d15 	stw	r2,180(sp)
    7ef4:	0109c83a 	sub	r4,zero,r4
    7ef8:	d9003115 	stw	r4,196(sp)
    7efc:	94800114 	ori	r18,r18,4
    7f00:	ac400007 	ldb	r17,0(r21)
    7f04:	003f9706 	br	7d64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d64>
    7f08:	00800c04 	movi	r2,48
    7f0c:	d9002d17 	ldw	r4,180(sp)
    7f10:	d9402917 	ldw	r5,164(sp)
    7f14:	d8802705 	stb	r2,156(sp)
    7f18:	00801e04 	movi	r2,120
    7f1c:	d8802745 	stb	r2,157(sp)
    7f20:	d8002785 	stb	zero,158(sp)
    7f24:	20c00104 	addi	r3,r4,4
    7f28:	24c00017 	ldw	r19,0(r4)
    7f2c:	002d883a 	mov	r22,zero
    7f30:	90800094 	ori	r2,r18,2
    7f34:	28029a16 	blt	r5,zero,89a0 <___vfprintf_internal_r+0xdc0>
    7f38:	00bfdfc4 	movi	r2,-129
    7f3c:	90a4703a 	and	r18,r18,r2
    7f40:	d8c02d15 	stw	r3,180(sp)
    7f44:	94800094 	ori	r18,r18,2
    7f48:	9802871e 	bne	r19,zero,8968 <___vfprintf_internal_r+0xd88>
    7f4c:	008000b4 	movhi	r2,2
    7f50:	10bff904 	addi	r2,r2,-28
    7f54:	d8803915 	stw	r2,228(sp)
    7f58:	04401e04 	movi	r17,120
    7f5c:	d8802917 	ldw	r2,164(sp)
    7f60:	0039883a 	mov	fp,zero
    7f64:	1001e926 	beq	r2,zero,870c <___vfprintf_internal_r+0xb2c>
    7f68:	0027883a 	mov	r19,zero
    7f6c:	002d883a 	mov	r22,zero
    7f70:	00020506 	br	8788 <___vfprintf_internal_r+0xba8>
    7f74:	d9002c17 	ldw	r4,176(sp)
    7f78:	b80b883a 	mov	r5,r23
    7f7c:	0009eb00 	call	9eb0 <__swsetup_r>
    7f80:	1005ac1e 	bne	r2,zero,9634 <___vfprintf_internal_r+0x1a54>
    7f84:	b880030b 	ldhu	r2,12(r23)
    7f88:	00c00284 	movi	r3,10
    7f8c:	1080068c 	andi	r2,r2,26
    7f90:	10ff3c1e 	bne	r2,r3,7c84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c84>
    7f94:	b880038f 	ldh	r2,14(r23)
    7f98:	103f3a16 	blt	r2,zero,7c84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c84>
    7f9c:	d9c02d17 	ldw	r7,180(sp)
    7fa0:	d9002c17 	ldw	r4,176(sp)
    7fa4:	a80d883a 	mov	r6,r21
    7fa8:	b80b883a 	mov	r5,r23
    7fac:	0009df40 	call	9df4 <__sbprintf>
    7fb0:	00001106 	br	7ff8 <___vfprintf_internal_r+0x418>
    7fb4:	d9002c17 	ldw	r4,176(sp)
    7fb8:	d9801e04 	addi	r6,sp,120
    7fbc:	b80b883a 	mov	r5,r23
    7fc0:	000e6300 	call	e630 <__sprint_r>
    7fc4:	1000081e 	bne	r2,zero,7fe8 <___vfprintf_internal_r+0x408>
    7fc8:	da000404 	addi	r8,sp,16
    7fcc:	003f5306 	br	7d1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d1c>
    7fd0:	d8802017 	ldw	r2,128(sp)
    7fd4:	10000426 	beq	r2,zero,7fe8 <___vfprintf_internal_r+0x408>
    7fd8:	d9002c17 	ldw	r4,176(sp)
    7fdc:	d9801e04 	addi	r6,sp,120
    7fe0:	b80b883a 	mov	r5,r23
    7fe4:	000e6300 	call	e630 <__sprint_r>
    7fe8:	b880030b 	ldhu	r2,12(r23)
    7fec:	1080100c 	andi	r2,r2,64
    7ff0:	1005901e 	bne	r2,zero,9634 <___vfprintf_internal_r+0x1a54>
    7ff4:	d8802f17 	ldw	r2,188(sp)
    7ff8:	dfc04717 	ldw	ra,284(sp)
    7ffc:	df004617 	ldw	fp,280(sp)
    8000:	ddc04517 	ldw	r23,276(sp)
    8004:	dd804417 	ldw	r22,272(sp)
    8008:	dd404317 	ldw	r21,268(sp)
    800c:	dd004217 	ldw	r20,264(sp)
    8010:	dcc04117 	ldw	r19,260(sp)
    8014:	dc804017 	ldw	r18,256(sp)
    8018:	dc403f17 	ldw	r17,252(sp)
    801c:	dc003e17 	ldw	r16,248(sp)
    8020:	dec04804 	addi	sp,sp,288
    8024:	f800283a 	ret
    8028:	d9002c17 	ldw	r4,176(sp)
    802c:	000be840 	call	be84 <__sinit>
    8030:	003f0406 	br	7c44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c44>
    8034:	d8802d17 	ldw	r2,180(sp)
    8038:	d9002d17 	ldw	r4,180(sp)
    803c:	10800017 	ldw	r2,0(r2)
    8040:	d8803115 	stw	r2,196(sp)
    8044:	20800104 	addi	r2,r4,4
    8048:	d9003117 	ldw	r4,196(sp)
    804c:	203fa716 	blt	r4,zero,7eec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007eec>
    8050:	d8802d15 	stw	r2,180(sp)
    8054:	ac400007 	ldb	r17,0(r21)
    8058:	003f4206 	br	7d64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d64>
    805c:	ac400007 	ldb	r17,0(r21)
    8060:	aac00044 	addi	r11,r21,1
    8064:	8a872826 	beq	r17,r10,9d08 <___vfprintf_internal_r+0x2128>
    8068:	88bff404 	addi	r2,r17,-48
    806c:	0009883a 	mov	r4,zero
    8070:	30867d36 	bltu	r6,r2,9a68 <___vfprintf_internal_r+0x1e88>
    8074:	5c400007 	ldb	r17,0(r11)
    8078:	210002a4 	muli	r4,r4,10
    807c:	5d400044 	addi	r21,r11,1
    8080:	a817883a 	mov	r11,r21
    8084:	2089883a 	add	r4,r4,r2
    8088:	88bff404 	addi	r2,r17,-48
    808c:	30bff92e 	bgeu	r6,r2,8074 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008074>
    8090:	2005c916 	blt	r4,zero,97b8 <___vfprintf_internal_r+0x1bd8>
    8094:	d9002915 	stw	r4,164(sp)
    8098:	003f3306 	br	7d68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d68>
    809c:	94802014 	ori	r18,r18,128
    80a0:	ac400007 	ldb	r17,0(r21)
    80a4:	003f2f06 	br	7d64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d64>
    80a8:	a809883a 	mov	r4,r21
    80ac:	d8003115 	stw	zero,196(sp)
    80b0:	88bff404 	addi	r2,r17,-48
    80b4:	0017883a 	mov	r11,zero
    80b8:	24400007 	ldb	r17,0(r4)
    80bc:	5ac002a4 	muli	r11,r11,10
    80c0:	ad400044 	addi	r21,r21,1
    80c4:	a809883a 	mov	r4,r21
    80c8:	12d7883a 	add	r11,r2,r11
    80cc:	88bff404 	addi	r2,r17,-48
    80d0:	30bff92e 	bgeu	r6,r2,80b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70080b8>
    80d4:	dac03115 	stw	r11,196(sp)
    80d8:	003f2306 	br	7d68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d68>
    80dc:	18c03fcc 	andi	r3,r3,255
    80e0:	18072b1e 	bne	r3,zero,9d90 <___vfprintf_internal_r+0x21b0>
    80e4:	94800414 	ori	r18,r18,16
    80e8:	9080080c 	andi	r2,r18,32
    80ec:	10037b26 	beq	r2,zero,8edc <___vfprintf_internal_r+0x12fc>
    80f0:	d9402d17 	ldw	r5,180(sp)
    80f4:	28800117 	ldw	r2,4(r5)
    80f8:	2cc00017 	ldw	r19,0(r5)
    80fc:	29400204 	addi	r5,r5,8
    8100:	d9402d15 	stw	r5,180(sp)
    8104:	102d883a 	mov	r22,r2
    8108:	10044b16 	blt	r2,zero,9238 <___vfprintf_internal_r+0x1658>
    810c:	d9402917 	ldw	r5,164(sp)
    8110:	df002783 	ldbu	fp,158(sp)
    8114:	2803bc16 	blt	r5,zero,9008 <___vfprintf_internal_r+0x1428>
    8118:	00ffdfc4 	movi	r3,-129
    811c:	9d84b03a 	or	r2,r19,r22
    8120:	90e4703a 	and	r18,r18,r3
    8124:	10017726 	beq	r2,zero,8704 <___vfprintf_internal_r+0xb24>
    8128:	b0038326 	beq	r22,zero,8f38 <___vfprintf_internal_r+0x1358>
    812c:	dc402a15 	stw	r17,168(sp)
    8130:	dc001e04 	addi	r16,sp,120
    8134:	b023883a 	mov	r17,r22
    8138:	402d883a 	mov	r22,r8
    813c:	9809883a 	mov	r4,r19
    8140:	880b883a 	mov	r5,r17
    8144:	01800284 	movi	r6,10
    8148:	000f883a 	mov	r7,zero
    814c:	0010a280 	call	10a28 <__umoddi3>
    8150:	10800c04 	addi	r2,r2,48
    8154:	843fffc4 	addi	r16,r16,-1
    8158:	9809883a 	mov	r4,r19
    815c:	880b883a 	mov	r5,r17
    8160:	80800005 	stb	r2,0(r16)
    8164:	01800284 	movi	r6,10
    8168:	000f883a 	mov	r7,zero
    816c:	00104b00 	call	104b0 <__udivdi3>
    8170:	1027883a 	mov	r19,r2
    8174:	10c4b03a 	or	r2,r2,r3
    8178:	1823883a 	mov	r17,r3
    817c:	103fef1e 	bne	r2,zero,813c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700813c>
    8180:	d8c02817 	ldw	r3,160(sp)
    8184:	dc402a17 	ldw	r17,168(sp)
    8188:	b011883a 	mov	r8,r22
    818c:	1c07c83a 	sub	r3,r3,r16
    8190:	d8c02e15 	stw	r3,184(sp)
    8194:	00005906 	br	82fc <___vfprintf_internal_r+0x71c>
    8198:	18c03fcc 	andi	r3,r3,255
    819c:	1806fa1e 	bne	r3,zero,9d88 <___vfprintf_internal_r+0x21a8>
    81a0:	9080020c 	andi	r2,r18,8
    81a4:	10048a26 	beq	r2,zero,93d0 <___vfprintf_internal_r+0x17f0>
    81a8:	d8c02d17 	ldw	r3,180(sp)
    81ac:	d9002d17 	ldw	r4,180(sp)
    81b0:	d9402d17 	ldw	r5,180(sp)
    81b4:	18c00017 	ldw	r3,0(r3)
    81b8:	21000117 	ldw	r4,4(r4)
    81bc:	29400204 	addi	r5,r5,8
    81c0:	d8c03615 	stw	r3,216(sp)
    81c4:	d9003815 	stw	r4,224(sp)
    81c8:	d9402d15 	stw	r5,180(sp)
    81cc:	d9003617 	ldw	r4,216(sp)
    81d0:	d9403817 	ldw	r5,224(sp)
    81d4:	da003d15 	stw	r8,244(sp)
    81d8:	04000044 	movi	r16,1
    81dc:	000e3840 	call	e384 <__fpclassifyd>
    81e0:	da003d17 	ldw	r8,244(sp)
    81e4:	14041f1e 	bne	r2,r16,9264 <___vfprintf_internal_r+0x1684>
    81e8:	d9003617 	ldw	r4,216(sp)
    81ec:	d9403817 	ldw	r5,224(sp)
    81f0:	000d883a 	mov	r6,zero
    81f4:	000f883a 	mov	r7,zero
    81f8:	0011b600 	call	11b60 <__ledf2>
    81fc:	da003d17 	ldw	r8,244(sp)
    8200:	1005be16 	blt	r2,zero,98fc <___vfprintf_internal_r+0x1d1c>
    8204:	df002783 	ldbu	fp,158(sp)
    8208:	008011c4 	movi	r2,71
    820c:	1445330e 	bge	r2,r17,96dc <___vfprintf_internal_r+0x1afc>
    8210:	040000b4 	movhi	r16,2
    8214:	843ff104 	addi	r16,r16,-60
    8218:	00c000c4 	movi	r3,3
    821c:	00bfdfc4 	movi	r2,-129
    8220:	d8c02a15 	stw	r3,168(sp)
    8224:	90a4703a 	and	r18,r18,r2
    8228:	d8c02e15 	stw	r3,184(sp)
    822c:	d8002915 	stw	zero,164(sp)
    8230:	d8003215 	stw	zero,200(sp)
    8234:	00003706 	br	8314 <___vfprintf_internal_r+0x734>
    8238:	94800214 	ori	r18,r18,8
    823c:	ac400007 	ldb	r17,0(r21)
    8240:	003ec806 	br	7d64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d64>
    8244:	18c03fcc 	andi	r3,r3,255
    8248:	1806db1e 	bne	r3,zero,9db8 <___vfprintf_internal_r+0x21d8>
    824c:	94800414 	ori	r18,r18,16
    8250:	9080080c 	andi	r2,r18,32
    8254:	1002d826 	beq	r2,zero,8db8 <___vfprintf_internal_r+0x11d8>
    8258:	d9402d17 	ldw	r5,180(sp)
    825c:	d8c02917 	ldw	r3,164(sp)
    8260:	d8002785 	stb	zero,158(sp)
    8264:	28800204 	addi	r2,r5,8
    8268:	2cc00017 	ldw	r19,0(r5)
    826c:	2d800117 	ldw	r22,4(r5)
    8270:	18048f16 	blt	r3,zero,94b0 <___vfprintf_internal_r+0x18d0>
    8274:	013fdfc4 	movi	r4,-129
    8278:	9d86b03a 	or	r3,r19,r22
    827c:	d8802d15 	stw	r2,180(sp)
    8280:	9124703a 	and	r18,r18,r4
    8284:	1802d91e 	bne	r3,zero,8dec <___vfprintf_internal_r+0x120c>
    8288:	d8c02917 	ldw	r3,164(sp)
    828c:	0039883a 	mov	fp,zero
    8290:	1805c326 	beq	r3,zero,99a0 <___vfprintf_internal_r+0x1dc0>
    8294:	0027883a 	mov	r19,zero
    8298:	002d883a 	mov	r22,zero
    829c:	dc001e04 	addi	r16,sp,120
    82a0:	9806d0fa 	srli	r3,r19,3
    82a4:	b008977a 	slli	r4,r22,29
    82a8:	b02cd0fa 	srli	r22,r22,3
    82ac:	9cc001cc 	andi	r19,r19,7
    82b0:	98800c04 	addi	r2,r19,48
    82b4:	843fffc4 	addi	r16,r16,-1
    82b8:	20e6b03a 	or	r19,r4,r3
    82bc:	80800005 	stb	r2,0(r16)
    82c0:	9d86b03a 	or	r3,r19,r22
    82c4:	183ff61e 	bne	r3,zero,82a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70082a0>
    82c8:	90c0004c 	andi	r3,r18,1
    82cc:	18013b26 	beq	r3,zero,87bc <___vfprintf_internal_r+0xbdc>
    82d0:	10803fcc 	andi	r2,r2,255
    82d4:	1080201c 	xori	r2,r2,128
    82d8:	10bfe004 	addi	r2,r2,-128
    82dc:	00c00c04 	movi	r3,48
    82e0:	10c13626 	beq	r2,r3,87bc <___vfprintf_internal_r+0xbdc>
    82e4:	80ffffc5 	stb	r3,-1(r16)
    82e8:	d8c02817 	ldw	r3,160(sp)
    82ec:	80bfffc4 	addi	r2,r16,-1
    82f0:	1021883a 	mov	r16,r2
    82f4:	1887c83a 	sub	r3,r3,r2
    82f8:	d8c02e15 	stw	r3,184(sp)
    82fc:	d8802e17 	ldw	r2,184(sp)
    8300:	d9002917 	ldw	r4,164(sp)
    8304:	1100010e 	bge	r2,r4,830c <___vfprintf_internal_r+0x72c>
    8308:	2005883a 	mov	r2,r4
    830c:	d8802a15 	stw	r2,168(sp)
    8310:	d8003215 	stw	zero,200(sp)
    8314:	e7003fcc 	andi	fp,fp,255
    8318:	e700201c 	xori	fp,fp,128
    831c:	e73fe004 	addi	fp,fp,-128
    8320:	e0000326 	beq	fp,zero,8330 <___vfprintf_internal_r+0x750>
    8324:	d8c02a17 	ldw	r3,168(sp)
    8328:	18c00044 	addi	r3,r3,1
    832c:	d8c02a15 	stw	r3,168(sp)
    8330:	90c0008c 	andi	r3,r18,2
    8334:	d8c02b15 	stw	r3,172(sp)
    8338:	18000326 	beq	r3,zero,8348 <___vfprintf_internal_r+0x768>
    833c:	d8c02a17 	ldw	r3,168(sp)
    8340:	18c00084 	addi	r3,r3,2
    8344:	d8c02a15 	stw	r3,168(sp)
    8348:	90c0210c 	andi	r3,r18,132
    834c:	d8c03015 	stw	r3,192(sp)
    8350:	1801a31e 	bne	r3,zero,89e0 <___vfprintf_internal_r+0xe00>
    8354:	d9003117 	ldw	r4,196(sp)
    8358:	d8c02a17 	ldw	r3,168(sp)
    835c:	20e7c83a 	sub	r19,r4,r3
    8360:	04c19f0e 	bge	zero,r19,89e0 <___vfprintf_internal_r+0xe00>
    8364:	02400404 	movi	r9,16
    8368:	d8c02017 	ldw	r3,128(sp)
    836c:	d8801f17 	ldw	r2,124(sp)
    8370:	4cc50d0e 	bge	r9,r19,97a8 <___vfprintf_internal_r+0x1bc8>
    8374:	014000b4 	movhi	r5,2
    8378:	29400484 	addi	r5,r5,18
    837c:	dc403b15 	stw	r17,236(sp)
    8380:	d9403515 	stw	r5,212(sp)
    8384:	9823883a 	mov	r17,r19
    8388:	482d883a 	mov	r22,r9
    838c:	9027883a 	mov	r19,r18
    8390:	070001c4 	movi	fp,7
    8394:	8025883a 	mov	r18,r16
    8398:	dc002c17 	ldw	r16,176(sp)
    839c:	00000306 	br	83ac <___vfprintf_internal_r+0x7cc>
    83a0:	8c7ffc04 	addi	r17,r17,-16
    83a4:	42000204 	addi	r8,r8,8
    83a8:	b440130e 	bge	r22,r17,83f8 <___vfprintf_internal_r+0x818>
    83ac:	010000b4 	movhi	r4,2
    83b0:	18c00404 	addi	r3,r3,16
    83b4:	10800044 	addi	r2,r2,1
    83b8:	21000484 	addi	r4,r4,18
    83bc:	41000015 	stw	r4,0(r8)
    83c0:	45800115 	stw	r22,4(r8)
    83c4:	d8c02015 	stw	r3,128(sp)
    83c8:	d8801f15 	stw	r2,124(sp)
    83cc:	e0bff40e 	bge	fp,r2,83a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70083a0>
    83d0:	d9801e04 	addi	r6,sp,120
    83d4:	b80b883a 	mov	r5,r23
    83d8:	8009883a 	mov	r4,r16
    83dc:	000e6300 	call	e630 <__sprint_r>
    83e0:	103f011e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    83e4:	8c7ffc04 	addi	r17,r17,-16
    83e8:	d8c02017 	ldw	r3,128(sp)
    83ec:	d8801f17 	ldw	r2,124(sp)
    83f0:	da000404 	addi	r8,sp,16
    83f4:	b47fed16 	blt	r22,r17,83ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70083ac>
    83f8:	9021883a 	mov	r16,r18
    83fc:	9825883a 	mov	r18,r19
    8400:	8827883a 	mov	r19,r17
    8404:	dc403b17 	ldw	r17,236(sp)
    8408:	d9403517 	ldw	r5,212(sp)
    840c:	98c7883a 	add	r3,r19,r3
    8410:	10800044 	addi	r2,r2,1
    8414:	41400015 	stw	r5,0(r8)
    8418:	44c00115 	stw	r19,4(r8)
    841c:	d8c02015 	stw	r3,128(sp)
    8420:	d8801f15 	stw	r2,124(sp)
    8424:	010001c4 	movi	r4,7
    8428:	2082a316 	blt	r4,r2,8eb8 <___vfprintf_internal_r+0x12d8>
    842c:	df002787 	ldb	fp,158(sp)
    8430:	42000204 	addi	r8,r8,8
    8434:	e0000c26 	beq	fp,zero,8468 <___vfprintf_internal_r+0x888>
    8438:	d8801f17 	ldw	r2,124(sp)
    843c:	d9002784 	addi	r4,sp,158
    8440:	18c00044 	addi	r3,r3,1
    8444:	10800044 	addi	r2,r2,1
    8448:	41000015 	stw	r4,0(r8)
    844c:	01000044 	movi	r4,1
    8450:	41000115 	stw	r4,4(r8)
    8454:	d8c02015 	stw	r3,128(sp)
    8458:	d8801f15 	stw	r2,124(sp)
    845c:	010001c4 	movi	r4,7
    8460:	20823c16 	blt	r4,r2,8d54 <___vfprintf_internal_r+0x1174>
    8464:	42000204 	addi	r8,r8,8
    8468:	d8802b17 	ldw	r2,172(sp)
    846c:	10000c26 	beq	r2,zero,84a0 <___vfprintf_internal_r+0x8c0>
    8470:	d8801f17 	ldw	r2,124(sp)
    8474:	d9002704 	addi	r4,sp,156
    8478:	18c00084 	addi	r3,r3,2
    847c:	10800044 	addi	r2,r2,1
    8480:	41000015 	stw	r4,0(r8)
    8484:	01000084 	movi	r4,2
    8488:	41000115 	stw	r4,4(r8)
    848c:	d8c02015 	stw	r3,128(sp)
    8490:	d8801f15 	stw	r2,124(sp)
    8494:	010001c4 	movi	r4,7
    8498:	20823616 	blt	r4,r2,8d74 <___vfprintf_internal_r+0x1194>
    849c:	42000204 	addi	r8,r8,8
    84a0:	d9003017 	ldw	r4,192(sp)
    84a4:	00802004 	movi	r2,128
    84a8:	20819926 	beq	r4,r2,8b10 <___vfprintf_internal_r+0xf30>
    84ac:	d9402917 	ldw	r5,164(sp)
    84b0:	d8802e17 	ldw	r2,184(sp)
    84b4:	28adc83a 	sub	r22,r5,r2
    84b8:	0580310e 	bge	zero,r22,8580 <___vfprintf_internal_r+0x9a0>
    84bc:	07000404 	movi	fp,16
    84c0:	d8801f17 	ldw	r2,124(sp)
    84c4:	e584140e 	bge	fp,r22,9518 <___vfprintf_internal_r+0x1938>
    84c8:	014000b4 	movhi	r5,2
    84cc:	29400084 	addi	r5,r5,2
    84d0:	dc402915 	stw	r17,164(sp)
    84d4:	d9402b15 	stw	r5,172(sp)
    84d8:	b023883a 	mov	r17,r22
    84dc:	04c001c4 	movi	r19,7
    84e0:	a82d883a 	mov	r22,r21
    84e4:	902b883a 	mov	r21,r18
    84e8:	8025883a 	mov	r18,r16
    84ec:	dc002c17 	ldw	r16,176(sp)
    84f0:	00000306 	br	8500 <___vfprintf_internal_r+0x920>
    84f4:	8c7ffc04 	addi	r17,r17,-16
    84f8:	42000204 	addi	r8,r8,8
    84fc:	e440110e 	bge	fp,r17,8544 <___vfprintf_internal_r+0x964>
    8500:	18c00404 	addi	r3,r3,16
    8504:	10800044 	addi	r2,r2,1
    8508:	45000015 	stw	r20,0(r8)
    850c:	47000115 	stw	fp,4(r8)
    8510:	d8c02015 	stw	r3,128(sp)
    8514:	d8801f15 	stw	r2,124(sp)
    8518:	98bff60e 	bge	r19,r2,84f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084f4>
    851c:	d9801e04 	addi	r6,sp,120
    8520:	b80b883a 	mov	r5,r23
    8524:	8009883a 	mov	r4,r16
    8528:	000e6300 	call	e630 <__sprint_r>
    852c:	103eae1e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    8530:	8c7ffc04 	addi	r17,r17,-16
    8534:	d8c02017 	ldw	r3,128(sp)
    8538:	d8801f17 	ldw	r2,124(sp)
    853c:	da000404 	addi	r8,sp,16
    8540:	e47fef16 	blt	fp,r17,8500 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008500>
    8544:	9021883a 	mov	r16,r18
    8548:	a825883a 	mov	r18,r21
    854c:	b02b883a 	mov	r21,r22
    8550:	882d883a 	mov	r22,r17
    8554:	dc402917 	ldw	r17,164(sp)
    8558:	d9002b17 	ldw	r4,172(sp)
    855c:	1d87883a 	add	r3,r3,r22
    8560:	10800044 	addi	r2,r2,1
    8564:	41000015 	stw	r4,0(r8)
    8568:	45800115 	stw	r22,4(r8)
    856c:	d8c02015 	stw	r3,128(sp)
    8570:	d8801f15 	stw	r2,124(sp)
    8574:	010001c4 	movi	r4,7
    8578:	2081ee16 	blt	r4,r2,8d34 <___vfprintf_internal_r+0x1154>
    857c:	42000204 	addi	r8,r8,8
    8580:	9080400c 	andi	r2,r18,256
    8584:	1001181e 	bne	r2,zero,89e8 <___vfprintf_internal_r+0xe08>
    8588:	d9402e17 	ldw	r5,184(sp)
    858c:	d8801f17 	ldw	r2,124(sp)
    8590:	44000015 	stw	r16,0(r8)
    8594:	1947883a 	add	r3,r3,r5
    8598:	10800044 	addi	r2,r2,1
    859c:	41400115 	stw	r5,4(r8)
    85a0:	d8c02015 	stw	r3,128(sp)
    85a4:	d8801f15 	stw	r2,124(sp)
    85a8:	010001c4 	movi	r4,7
    85ac:	2081d316 	blt	r4,r2,8cfc <___vfprintf_internal_r+0x111c>
    85b0:	42000204 	addi	r8,r8,8
    85b4:	9480010c 	andi	r18,r18,4
    85b8:	90003226 	beq	r18,zero,8684 <___vfprintf_internal_r+0xaa4>
    85bc:	d9403117 	ldw	r5,196(sp)
    85c0:	d8802a17 	ldw	r2,168(sp)
    85c4:	28a1c83a 	sub	r16,r5,r2
    85c8:	04002e0e 	bge	zero,r16,8684 <___vfprintf_internal_r+0xaa4>
    85cc:	04400404 	movi	r17,16
    85d0:	d8801f17 	ldw	r2,124(sp)
    85d4:	8c04a20e 	bge	r17,r16,9860 <___vfprintf_internal_r+0x1c80>
    85d8:	014000b4 	movhi	r5,2
    85dc:	29400484 	addi	r5,r5,18
    85e0:	d9403515 	stw	r5,212(sp)
    85e4:	048001c4 	movi	r18,7
    85e8:	dcc02c17 	ldw	r19,176(sp)
    85ec:	00000306 	br	85fc <___vfprintf_internal_r+0xa1c>
    85f0:	843ffc04 	addi	r16,r16,-16
    85f4:	42000204 	addi	r8,r8,8
    85f8:	8c00130e 	bge	r17,r16,8648 <___vfprintf_internal_r+0xa68>
    85fc:	010000b4 	movhi	r4,2
    8600:	18c00404 	addi	r3,r3,16
    8604:	10800044 	addi	r2,r2,1
    8608:	21000484 	addi	r4,r4,18
    860c:	41000015 	stw	r4,0(r8)
    8610:	44400115 	stw	r17,4(r8)
    8614:	d8c02015 	stw	r3,128(sp)
    8618:	d8801f15 	stw	r2,124(sp)
    861c:	90bff40e 	bge	r18,r2,85f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70085f0>
    8620:	d9801e04 	addi	r6,sp,120
    8624:	b80b883a 	mov	r5,r23
    8628:	9809883a 	mov	r4,r19
    862c:	000e6300 	call	e630 <__sprint_r>
    8630:	103e6d1e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    8634:	843ffc04 	addi	r16,r16,-16
    8638:	d8c02017 	ldw	r3,128(sp)
    863c:	d8801f17 	ldw	r2,124(sp)
    8640:	da000404 	addi	r8,sp,16
    8644:	8c3fed16 	blt	r17,r16,85fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70085fc>
    8648:	d9403517 	ldw	r5,212(sp)
    864c:	1c07883a 	add	r3,r3,r16
    8650:	10800044 	addi	r2,r2,1
    8654:	41400015 	stw	r5,0(r8)
    8658:	44000115 	stw	r16,4(r8)
    865c:	d8c02015 	stw	r3,128(sp)
    8660:	d8801f15 	stw	r2,124(sp)
    8664:	010001c4 	movi	r4,7
    8668:	2080060e 	bge	r4,r2,8684 <___vfprintf_internal_r+0xaa4>
    866c:	d9002c17 	ldw	r4,176(sp)
    8670:	d9801e04 	addi	r6,sp,120
    8674:	b80b883a 	mov	r5,r23
    8678:	000e6300 	call	e630 <__sprint_r>
    867c:	103e5a1e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    8680:	d8c02017 	ldw	r3,128(sp)
    8684:	d8803117 	ldw	r2,196(sp)
    8688:	d9002a17 	ldw	r4,168(sp)
    868c:	1100010e 	bge	r2,r4,8694 <___vfprintf_internal_r+0xab4>
    8690:	2005883a 	mov	r2,r4
    8694:	d9402f17 	ldw	r5,188(sp)
    8698:	288b883a 	add	r5,r5,r2
    869c:	d9402f15 	stw	r5,188(sp)
    86a0:	18019e1e 	bne	r3,zero,8d1c <___vfprintf_internal_r+0x113c>
    86a4:	a8800007 	ldb	r2,0(r21)
    86a8:	d8001f15 	stw	zero,124(sp)
    86ac:	da000404 	addi	r8,sp,16
    86b0:	103d851e 	bne	r2,zero,7cc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007cc8>
    86b4:	a821883a 	mov	r16,r21
    86b8:	003d9b06 	br	7d28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d28>
    86bc:	18c03fcc 	andi	r3,r3,255
    86c0:	1805c11e 	bne	r3,zero,9dc8 <___vfprintf_internal_r+0x21e8>
    86c4:	94800414 	ori	r18,r18,16
    86c8:	9080080c 	andi	r2,r18,32
    86cc:	10020c26 	beq	r2,zero,8f00 <___vfprintf_internal_r+0x1320>
    86d0:	d8802d17 	ldw	r2,180(sp)
    86d4:	d9002917 	ldw	r4,164(sp)
    86d8:	d8002785 	stb	zero,158(sp)
    86dc:	10c00204 	addi	r3,r2,8
    86e0:	14c00017 	ldw	r19,0(r2)
    86e4:	15800117 	ldw	r22,4(r2)
    86e8:	20040f16 	blt	r4,zero,9728 <___vfprintf_internal_r+0x1b48>
    86ec:	013fdfc4 	movi	r4,-129
    86f0:	9d84b03a 	or	r2,r19,r22
    86f4:	d8c02d15 	stw	r3,180(sp)
    86f8:	9124703a 	and	r18,r18,r4
    86fc:	0039883a 	mov	fp,zero
    8700:	103e891e 	bne	r2,zero,8128 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008128>
    8704:	d9002917 	ldw	r4,164(sp)
    8708:	2002c11e 	bne	r4,zero,9210 <___vfprintf_internal_r+0x1630>
    870c:	d8002915 	stw	zero,164(sp)
    8710:	d8002e15 	stw	zero,184(sp)
    8714:	dc001e04 	addi	r16,sp,120
    8718:	003ef806 	br	82fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70082fc>
    871c:	18c03fcc 	andi	r3,r3,255
    8720:	18059d1e 	bne	r3,zero,9d98 <___vfprintf_internal_r+0x21b8>
    8724:	014000b4 	movhi	r5,2
    8728:	297ff404 	addi	r5,r5,-48
    872c:	d9403915 	stw	r5,228(sp)
    8730:	9080080c 	andi	r2,r18,32
    8734:	10005226 	beq	r2,zero,8880 <___vfprintf_internal_r+0xca0>
    8738:	d8802d17 	ldw	r2,180(sp)
    873c:	14c00017 	ldw	r19,0(r2)
    8740:	15800117 	ldw	r22,4(r2)
    8744:	10800204 	addi	r2,r2,8
    8748:	d8802d15 	stw	r2,180(sp)
    874c:	9080004c 	andi	r2,r18,1
    8750:	10019026 	beq	r2,zero,8d94 <___vfprintf_internal_r+0x11b4>
    8754:	9d84b03a 	or	r2,r19,r22
    8758:	10036926 	beq	r2,zero,9500 <___vfprintf_internal_r+0x1920>
    875c:	d8c02917 	ldw	r3,164(sp)
    8760:	00800c04 	movi	r2,48
    8764:	d8802705 	stb	r2,156(sp)
    8768:	dc402745 	stb	r17,157(sp)
    876c:	d8002785 	stb	zero,158(sp)
    8770:	90800094 	ori	r2,r18,2
    8774:	18045d16 	blt	r3,zero,98ec <___vfprintf_internal_r+0x1d0c>
    8778:	00bfdfc4 	movi	r2,-129
    877c:	90a4703a 	and	r18,r18,r2
    8780:	94800094 	ori	r18,r18,2
    8784:	0039883a 	mov	fp,zero
    8788:	d9003917 	ldw	r4,228(sp)
    878c:	dc001e04 	addi	r16,sp,120
    8790:	988003cc 	andi	r2,r19,15
    8794:	b006973a 	slli	r3,r22,28
    8798:	2085883a 	add	r2,r4,r2
    879c:	9826d13a 	srli	r19,r19,4
    87a0:	10800003 	ldbu	r2,0(r2)
    87a4:	b02cd13a 	srli	r22,r22,4
    87a8:	843fffc4 	addi	r16,r16,-1
    87ac:	1ce6b03a 	or	r19,r3,r19
    87b0:	80800005 	stb	r2,0(r16)
    87b4:	9d84b03a 	or	r2,r19,r22
    87b8:	103ff51e 	bne	r2,zero,8790 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008790>
    87bc:	d8c02817 	ldw	r3,160(sp)
    87c0:	1c07c83a 	sub	r3,r3,r16
    87c4:	d8c02e15 	stw	r3,184(sp)
    87c8:	003ecc06 	br	82fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70082fc>
    87cc:	18c03fcc 	andi	r3,r3,255
    87d0:	183e9f26 	beq	r3,zero,8250 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008250>
    87d4:	d9c02785 	stb	r7,158(sp)
    87d8:	003e9d06 	br	8250 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008250>
    87dc:	00c00044 	movi	r3,1
    87e0:	01c00ac4 	movi	r7,43
    87e4:	ac400007 	ldb	r17,0(r21)
    87e8:	003d5e06 	br	7d64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d64>
    87ec:	94800814 	ori	r18,r18,32
    87f0:	ac400007 	ldb	r17,0(r21)
    87f4:	003d5b06 	br	7d64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d64>
    87f8:	d8c02d17 	ldw	r3,180(sp)
    87fc:	d8002785 	stb	zero,158(sp)
    8800:	1c000017 	ldw	r16,0(r3)
    8804:	1cc00104 	addi	r19,r3,4
    8808:	80041926 	beq	r16,zero,9870 <___vfprintf_internal_r+0x1c90>
    880c:	d9002917 	ldw	r4,164(sp)
    8810:	2003d016 	blt	r4,zero,9754 <___vfprintf_internal_r+0x1b74>
    8814:	200d883a 	mov	r6,r4
    8818:	000b883a 	mov	r5,zero
    881c:	8009883a 	mov	r4,r16
    8820:	da003d15 	stw	r8,244(sp)
    8824:	000cbe40 	call	cbe4 <memchr>
    8828:	da003d17 	ldw	r8,244(sp)
    882c:	10045426 	beq	r2,zero,9980 <___vfprintf_internal_r+0x1da0>
    8830:	1405c83a 	sub	r2,r2,r16
    8834:	d8802e15 	stw	r2,184(sp)
    8838:	1003cc16 	blt	r2,zero,976c <___vfprintf_internal_r+0x1b8c>
    883c:	df002783 	ldbu	fp,158(sp)
    8840:	d8802a15 	stw	r2,168(sp)
    8844:	dcc02d15 	stw	r19,180(sp)
    8848:	d8002915 	stw	zero,164(sp)
    884c:	d8003215 	stw	zero,200(sp)
    8850:	003eb006 	br	8314 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008314>
    8854:	18c03fcc 	andi	r3,r3,255
    8858:	183f9b26 	beq	r3,zero,86c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70086c8>
    885c:	d9c02785 	stb	r7,158(sp)
    8860:	003f9906 	br	86c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70086c8>
    8864:	18c03fcc 	andi	r3,r3,255
    8868:	1805551e 	bne	r3,zero,9dc0 <___vfprintf_internal_r+0x21e0>
    886c:	014000b4 	movhi	r5,2
    8870:	297ff904 	addi	r5,r5,-28
    8874:	d9403915 	stw	r5,228(sp)
    8878:	9080080c 	andi	r2,r18,32
    887c:	103fae1e 	bne	r2,zero,8738 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008738>
    8880:	9080040c 	andi	r2,r18,16
    8884:	1002de26 	beq	r2,zero,9400 <___vfprintf_internal_r+0x1820>
    8888:	d8c02d17 	ldw	r3,180(sp)
    888c:	002d883a 	mov	r22,zero
    8890:	1cc00017 	ldw	r19,0(r3)
    8894:	18c00104 	addi	r3,r3,4
    8898:	d8c02d15 	stw	r3,180(sp)
    889c:	003fab06 	br	874c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700874c>
    88a0:	38803fcc 	andi	r2,r7,255
    88a4:	1080201c 	xori	r2,r2,128
    88a8:	10bfe004 	addi	r2,r2,-128
    88ac:	1002d21e 	bne	r2,zero,93f8 <___vfprintf_internal_r+0x1818>
    88b0:	00c00044 	movi	r3,1
    88b4:	01c00804 	movi	r7,32
    88b8:	ac400007 	ldb	r17,0(r21)
    88bc:	003d2906 	br	7d64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d64>
    88c0:	94800054 	ori	r18,r18,1
    88c4:	ac400007 	ldb	r17,0(r21)
    88c8:	003d2606 	br	7d64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d64>
    88cc:	18c03fcc 	andi	r3,r3,255
    88d0:	183e0526 	beq	r3,zero,80e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70080e8>
    88d4:	d9c02785 	stb	r7,158(sp)
    88d8:	003e0306 	br	80e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70080e8>
    88dc:	94801014 	ori	r18,r18,64
    88e0:	ac400007 	ldb	r17,0(r21)
    88e4:	003d1f06 	br	7d64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d64>
    88e8:	ac400007 	ldb	r17,0(r21)
    88ec:	8a438726 	beq	r17,r9,970c <___vfprintf_internal_r+0x1b2c>
    88f0:	94800414 	ori	r18,r18,16
    88f4:	003d1b06 	br	7d64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d64>
    88f8:	18c03fcc 	andi	r3,r3,255
    88fc:	1805341e 	bne	r3,zero,9dd0 <___vfprintf_internal_r+0x21f0>
    8900:	9080080c 	andi	r2,r18,32
    8904:	1002cd26 	beq	r2,zero,943c <___vfprintf_internal_r+0x185c>
    8908:	d9402d17 	ldw	r5,180(sp)
    890c:	d9002f17 	ldw	r4,188(sp)
    8910:	28800017 	ldw	r2,0(r5)
    8914:	2007d7fa 	srai	r3,r4,31
    8918:	29400104 	addi	r5,r5,4
    891c:	d9402d15 	stw	r5,180(sp)
    8920:	11000015 	stw	r4,0(r2)
    8924:	10c00115 	stw	r3,4(r2)
    8928:	003ce506 	br	7cc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007cc0>
    892c:	d8c02d17 	ldw	r3,180(sp)
    8930:	d9002d17 	ldw	r4,180(sp)
    8934:	d8002785 	stb	zero,158(sp)
    8938:	18800017 	ldw	r2,0(r3)
    893c:	21000104 	addi	r4,r4,4
    8940:	00c00044 	movi	r3,1
    8944:	d8c02a15 	stw	r3,168(sp)
    8948:	d8801405 	stb	r2,80(sp)
    894c:	d9002d15 	stw	r4,180(sp)
    8950:	d8c02e15 	stw	r3,184(sp)
    8954:	d8002915 	stw	zero,164(sp)
    8958:	d8003215 	stw	zero,200(sp)
    895c:	dc001404 	addi	r16,sp,80
    8960:	0039883a 	mov	fp,zero
    8964:	003e7206 	br	8330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008330>
    8968:	010000b4 	movhi	r4,2
    896c:	213ff904 	addi	r4,r4,-28
    8970:	0039883a 	mov	fp,zero
    8974:	d9003915 	stw	r4,228(sp)
    8978:	04401e04 	movi	r17,120
    897c:	003f8206 	br	8788 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008788>
    8980:	18c03fcc 	andi	r3,r3,255
    8984:	1805061e 	bne	r3,zero,9da0 <___vfprintf_internal_r+0x21c0>
    8988:	883d9126 	beq	r17,zero,7fd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fd0>
    898c:	00c00044 	movi	r3,1
    8990:	d8c02a15 	stw	r3,168(sp)
    8994:	dc401405 	stb	r17,80(sp)
    8998:	d8002785 	stb	zero,158(sp)
    899c:	003fec06 	br	8950 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008950>
    89a0:	014000b4 	movhi	r5,2
    89a4:	297ff904 	addi	r5,r5,-28
    89a8:	d9403915 	stw	r5,228(sp)
    89ac:	d8c02d15 	stw	r3,180(sp)
    89b0:	1025883a 	mov	r18,r2
    89b4:	04401e04 	movi	r17,120
    89b8:	9d84b03a 	or	r2,r19,r22
    89bc:	1000fc1e 	bne	r2,zero,8db0 <___vfprintf_internal_r+0x11d0>
    89c0:	0039883a 	mov	fp,zero
    89c4:	00800084 	movi	r2,2
    89c8:	10803fcc 	andi	r2,r2,255
    89cc:	00c00044 	movi	r3,1
    89d0:	10c20f26 	beq	r2,r3,9210 <___vfprintf_internal_r+0x1630>
    89d4:	00c00084 	movi	r3,2
    89d8:	10fd6326 	beq	r2,r3,7f68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f68>
    89dc:	003e2d06 	br	8294 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008294>
    89e0:	d8c02017 	ldw	r3,128(sp)
    89e4:	003e9306 	br	8434 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008434>
    89e8:	00801944 	movi	r2,101
    89ec:	14407e0e 	bge	r2,r17,8be8 <___vfprintf_internal_r+0x1008>
    89f0:	d9003617 	ldw	r4,216(sp)
    89f4:	d9403817 	ldw	r5,224(sp)
    89f8:	000d883a 	mov	r6,zero
    89fc:	000f883a 	mov	r7,zero
    8a00:	d8c03c15 	stw	r3,240(sp)
    8a04:	da003d15 	stw	r8,244(sp)
    8a08:	00119fc0 	call	119fc <__eqdf2>
    8a0c:	d8c03c17 	ldw	r3,240(sp)
    8a10:	da003d17 	ldw	r8,244(sp)
    8a14:	1000f71e 	bne	r2,zero,8df4 <___vfprintf_internal_r+0x1214>
    8a18:	d8801f17 	ldw	r2,124(sp)
    8a1c:	010000b4 	movhi	r4,2
    8a20:	21000004 	addi	r4,r4,0
    8a24:	18c00044 	addi	r3,r3,1
    8a28:	10800044 	addi	r2,r2,1
    8a2c:	41000015 	stw	r4,0(r8)
    8a30:	01000044 	movi	r4,1
    8a34:	41000115 	stw	r4,4(r8)
    8a38:	d8c02015 	stw	r3,128(sp)
    8a3c:	d8801f15 	stw	r2,124(sp)
    8a40:	010001c4 	movi	r4,7
    8a44:	2082b816 	blt	r4,r2,9528 <___vfprintf_internal_r+0x1948>
    8a48:	42000204 	addi	r8,r8,8
    8a4c:	d8802617 	ldw	r2,152(sp)
    8a50:	d9403317 	ldw	r5,204(sp)
    8a54:	11400216 	blt	r2,r5,8a60 <___vfprintf_internal_r+0xe80>
    8a58:	9080004c 	andi	r2,r18,1
    8a5c:	103ed526 	beq	r2,zero,85b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70085b4>
    8a60:	d8803717 	ldw	r2,220(sp)
    8a64:	d9003417 	ldw	r4,208(sp)
    8a68:	d9403717 	ldw	r5,220(sp)
    8a6c:	1887883a 	add	r3,r3,r2
    8a70:	d8801f17 	ldw	r2,124(sp)
    8a74:	41000015 	stw	r4,0(r8)
    8a78:	41400115 	stw	r5,4(r8)
    8a7c:	10800044 	addi	r2,r2,1
    8a80:	d8c02015 	stw	r3,128(sp)
    8a84:	d8801f15 	stw	r2,124(sp)
    8a88:	010001c4 	movi	r4,7
    8a8c:	20832916 	blt	r4,r2,9734 <___vfprintf_internal_r+0x1b54>
    8a90:	42000204 	addi	r8,r8,8
    8a94:	d8803317 	ldw	r2,204(sp)
    8a98:	143fffc4 	addi	r16,r2,-1
    8a9c:	043ec50e 	bge	zero,r16,85b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70085b4>
    8aa0:	04400404 	movi	r17,16
    8aa4:	d8801f17 	ldw	r2,124(sp)
    8aa8:	8c00880e 	bge	r17,r16,8ccc <___vfprintf_internal_r+0x10ec>
    8aac:	014000b4 	movhi	r5,2
    8ab0:	29400084 	addi	r5,r5,2
    8ab4:	d9402b15 	stw	r5,172(sp)
    8ab8:	058001c4 	movi	r22,7
    8abc:	dcc02c17 	ldw	r19,176(sp)
    8ac0:	00000306 	br	8ad0 <___vfprintf_internal_r+0xef0>
    8ac4:	42000204 	addi	r8,r8,8
    8ac8:	843ffc04 	addi	r16,r16,-16
    8acc:	8c00820e 	bge	r17,r16,8cd8 <___vfprintf_internal_r+0x10f8>
    8ad0:	18c00404 	addi	r3,r3,16
    8ad4:	10800044 	addi	r2,r2,1
    8ad8:	45000015 	stw	r20,0(r8)
    8adc:	44400115 	stw	r17,4(r8)
    8ae0:	d8c02015 	stw	r3,128(sp)
    8ae4:	d8801f15 	stw	r2,124(sp)
    8ae8:	b0bff60e 	bge	r22,r2,8ac4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ac4>
    8aec:	d9801e04 	addi	r6,sp,120
    8af0:	b80b883a 	mov	r5,r23
    8af4:	9809883a 	mov	r4,r19
    8af8:	000e6300 	call	e630 <__sprint_r>
    8afc:	103d3a1e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    8b00:	d8c02017 	ldw	r3,128(sp)
    8b04:	d8801f17 	ldw	r2,124(sp)
    8b08:	da000404 	addi	r8,sp,16
    8b0c:	003fee06 	br	8ac8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ac8>
    8b10:	d9403117 	ldw	r5,196(sp)
    8b14:	d8802a17 	ldw	r2,168(sp)
    8b18:	28adc83a 	sub	r22,r5,r2
    8b1c:	05be630e 	bge	zero,r22,84ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084ac>
    8b20:	07000404 	movi	fp,16
    8b24:	d8801f17 	ldw	r2,124(sp)
    8b28:	e5838f0e 	bge	fp,r22,9968 <___vfprintf_internal_r+0x1d88>
    8b2c:	014000b4 	movhi	r5,2
    8b30:	29400084 	addi	r5,r5,2
    8b34:	dc403015 	stw	r17,192(sp)
    8b38:	d9402b15 	stw	r5,172(sp)
    8b3c:	b023883a 	mov	r17,r22
    8b40:	04c001c4 	movi	r19,7
    8b44:	a82d883a 	mov	r22,r21
    8b48:	902b883a 	mov	r21,r18
    8b4c:	8025883a 	mov	r18,r16
    8b50:	dc002c17 	ldw	r16,176(sp)
    8b54:	00000306 	br	8b64 <___vfprintf_internal_r+0xf84>
    8b58:	8c7ffc04 	addi	r17,r17,-16
    8b5c:	42000204 	addi	r8,r8,8
    8b60:	e440110e 	bge	fp,r17,8ba8 <___vfprintf_internal_r+0xfc8>
    8b64:	18c00404 	addi	r3,r3,16
    8b68:	10800044 	addi	r2,r2,1
    8b6c:	45000015 	stw	r20,0(r8)
    8b70:	47000115 	stw	fp,4(r8)
    8b74:	d8c02015 	stw	r3,128(sp)
    8b78:	d8801f15 	stw	r2,124(sp)
    8b7c:	98bff60e 	bge	r19,r2,8b58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b58>
    8b80:	d9801e04 	addi	r6,sp,120
    8b84:	b80b883a 	mov	r5,r23
    8b88:	8009883a 	mov	r4,r16
    8b8c:	000e6300 	call	e630 <__sprint_r>
    8b90:	103d151e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    8b94:	8c7ffc04 	addi	r17,r17,-16
    8b98:	d8c02017 	ldw	r3,128(sp)
    8b9c:	d8801f17 	ldw	r2,124(sp)
    8ba0:	da000404 	addi	r8,sp,16
    8ba4:	e47fef16 	blt	fp,r17,8b64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b64>
    8ba8:	9021883a 	mov	r16,r18
    8bac:	a825883a 	mov	r18,r21
    8bb0:	b02b883a 	mov	r21,r22
    8bb4:	882d883a 	mov	r22,r17
    8bb8:	dc403017 	ldw	r17,192(sp)
    8bbc:	d9002b17 	ldw	r4,172(sp)
    8bc0:	1d87883a 	add	r3,r3,r22
    8bc4:	10800044 	addi	r2,r2,1
    8bc8:	41000015 	stw	r4,0(r8)
    8bcc:	45800115 	stw	r22,4(r8)
    8bd0:	d8c02015 	stw	r3,128(sp)
    8bd4:	d8801f15 	stw	r2,124(sp)
    8bd8:	010001c4 	movi	r4,7
    8bdc:	20818e16 	blt	r4,r2,9218 <___vfprintf_internal_r+0x1638>
    8be0:	42000204 	addi	r8,r8,8
    8be4:	003e3106 	br	84ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084ac>
    8be8:	d9403317 	ldw	r5,204(sp)
    8bec:	00800044 	movi	r2,1
    8bf0:	18c00044 	addi	r3,r3,1
    8bf4:	1141530e 	bge	r2,r5,9144 <___vfprintf_internal_r+0x1564>
    8bf8:	dc401f17 	ldw	r17,124(sp)
    8bfc:	00800044 	movi	r2,1
    8c00:	40800115 	stw	r2,4(r8)
    8c04:	8c400044 	addi	r17,r17,1
    8c08:	44000015 	stw	r16,0(r8)
    8c0c:	d8c02015 	stw	r3,128(sp)
    8c10:	dc401f15 	stw	r17,124(sp)
    8c14:	008001c4 	movi	r2,7
    8c18:	14416b16 	blt	r2,r17,91c8 <___vfprintf_internal_r+0x15e8>
    8c1c:	42000204 	addi	r8,r8,8
    8c20:	d8803717 	ldw	r2,220(sp)
    8c24:	d9003417 	ldw	r4,208(sp)
    8c28:	8c400044 	addi	r17,r17,1
    8c2c:	10c7883a 	add	r3,r2,r3
    8c30:	40800115 	stw	r2,4(r8)
    8c34:	41000015 	stw	r4,0(r8)
    8c38:	d8c02015 	stw	r3,128(sp)
    8c3c:	dc401f15 	stw	r17,124(sp)
    8c40:	008001c4 	movi	r2,7
    8c44:	14416916 	blt	r2,r17,91ec <___vfprintf_internal_r+0x160c>
    8c48:	45800204 	addi	r22,r8,8
    8c4c:	d9003617 	ldw	r4,216(sp)
    8c50:	d9403817 	ldw	r5,224(sp)
    8c54:	000d883a 	mov	r6,zero
    8c58:	000f883a 	mov	r7,zero
    8c5c:	d8c03c15 	stw	r3,240(sp)
    8c60:	00119fc0 	call	119fc <__eqdf2>
    8c64:	d8c03c17 	ldw	r3,240(sp)
    8c68:	1000bc26 	beq	r2,zero,8f5c <___vfprintf_internal_r+0x137c>
    8c6c:	d9403317 	ldw	r5,204(sp)
    8c70:	84000044 	addi	r16,r16,1
    8c74:	8c400044 	addi	r17,r17,1
    8c78:	28bfffc4 	addi	r2,r5,-1
    8c7c:	1887883a 	add	r3,r3,r2
    8c80:	b0800115 	stw	r2,4(r22)
    8c84:	b4000015 	stw	r16,0(r22)
    8c88:	d8c02015 	stw	r3,128(sp)
    8c8c:	dc401f15 	stw	r17,124(sp)
    8c90:	008001c4 	movi	r2,7
    8c94:	14414316 	blt	r2,r17,91a4 <___vfprintf_internal_r+0x15c4>
    8c98:	b5800204 	addi	r22,r22,8
    8c9c:	d9003a17 	ldw	r4,232(sp)
    8ca0:	df0022c4 	addi	fp,sp,139
    8ca4:	8c400044 	addi	r17,r17,1
    8ca8:	20c7883a 	add	r3,r4,r3
    8cac:	b7000015 	stw	fp,0(r22)
    8cb0:	b1000115 	stw	r4,4(r22)
    8cb4:	d8c02015 	stw	r3,128(sp)
    8cb8:	dc401f15 	stw	r17,124(sp)
    8cbc:	008001c4 	movi	r2,7
    8cc0:	14400e16 	blt	r2,r17,8cfc <___vfprintf_internal_r+0x111c>
    8cc4:	b2000204 	addi	r8,r22,8
    8cc8:	003e3a06 	br	85b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70085b4>
    8ccc:	010000b4 	movhi	r4,2
    8cd0:	21000084 	addi	r4,r4,2
    8cd4:	d9002b15 	stw	r4,172(sp)
    8cd8:	d9002b17 	ldw	r4,172(sp)
    8cdc:	1c07883a 	add	r3,r3,r16
    8ce0:	44000115 	stw	r16,4(r8)
    8ce4:	41000015 	stw	r4,0(r8)
    8ce8:	10800044 	addi	r2,r2,1
    8cec:	d8c02015 	stw	r3,128(sp)
    8cf0:	d8801f15 	stw	r2,124(sp)
    8cf4:	010001c4 	movi	r4,7
    8cf8:	20be2d0e 	bge	r4,r2,85b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70085b0>
    8cfc:	d9002c17 	ldw	r4,176(sp)
    8d00:	d9801e04 	addi	r6,sp,120
    8d04:	b80b883a 	mov	r5,r23
    8d08:	000e6300 	call	e630 <__sprint_r>
    8d0c:	103cb61e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    8d10:	d8c02017 	ldw	r3,128(sp)
    8d14:	da000404 	addi	r8,sp,16
    8d18:	003e2606 	br	85b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70085b4>
    8d1c:	d9002c17 	ldw	r4,176(sp)
    8d20:	d9801e04 	addi	r6,sp,120
    8d24:	b80b883a 	mov	r5,r23
    8d28:	000e6300 	call	e630 <__sprint_r>
    8d2c:	103e5d26 	beq	r2,zero,86a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70086a4>
    8d30:	003cad06 	br	7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    8d34:	d9002c17 	ldw	r4,176(sp)
    8d38:	d9801e04 	addi	r6,sp,120
    8d3c:	b80b883a 	mov	r5,r23
    8d40:	000e6300 	call	e630 <__sprint_r>
    8d44:	103ca81e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    8d48:	d8c02017 	ldw	r3,128(sp)
    8d4c:	da000404 	addi	r8,sp,16
    8d50:	003e0b06 	br	8580 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008580>
    8d54:	d9002c17 	ldw	r4,176(sp)
    8d58:	d9801e04 	addi	r6,sp,120
    8d5c:	b80b883a 	mov	r5,r23
    8d60:	000e6300 	call	e630 <__sprint_r>
    8d64:	103ca01e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    8d68:	d8c02017 	ldw	r3,128(sp)
    8d6c:	da000404 	addi	r8,sp,16
    8d70:	003dbd06 	br	8468 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008468>
    8d74:	d9002c17 	ldw	r4,176(sp)
    8d78:	d9801e04 	addi	r6,sp,120
    8d7c:	b80b883a 	mov	r5,r23
    8d80:	000e6300 	call	e630 <__sprint_r>
    8d84:	103c981e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    8d88:	d8c02017 	ldw	r3,128(sp)
    8d8c:	da000404 	addi	r8,sp,16
    8d90:	003dc306 	br	84a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084a0>
    8d94:	d8802917 	ldw	r2,164(sp)
    8d98:	d8002785 	stb	zero,158(sp)
    8d9c:	103f0616 	blt	r2,zero,89b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089b8>
    8da0:	00ffdfc4 	movi	r3,-129
    8da4:	9d84b03a 	or	r2,r19,r22
    8da8:	90e4703a 	and	r18,r18,r3
    8dac:	103c6b26 	beq	r2,zero,7f5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f5c>
    8db0:	0039883a 	mov	fp,zero
    8db4:	003e7406 	br	8788 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008788>
    8db8:	9080040c 	andi	r2,r18,16
    8dbc:	1001b326 	beq	r2,zero,948c <___vfprintf_internal_r+0x18ac>
    8dc0:	d9002d17 	ldw	r4,180(sp)
    8dc4:	d9402917 	ldw	r5,164(sp)
    8dc8:	d8002785 	stb	zero,158(sp)
    8dcc:	20800104 	addi	r2,r4,4
    8dd0:	24c00017 	ldw	r19,0(r4)
    8dd4:	002d883a 	mov	r22,zero
    8dd8:	2801b516 	blt	r5,zero,94b0 <___vfprintf_internal_r+0x18d0>
    8ddc:	00ffdfc4 	movi	r3,-129
    8de0:	d8802d15 	stw	r2,180(sp)
    8de4:	90e4703a 	and	r18,r18,r3
    8de8:	983d2726 	beq	r19,zero,8288 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008288>
    8dec:	0039883a 	mov	fp,zero
    8df0:	003d2a06 	br	829c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700829c>
    8df4:	dc402617 	ldw	r17,152(sp)
    8df8:	0441d30e 	bge	zero,r17,9548 <___vfprintf_internal_r+0x1968>
    8dfc:	dc403217 	ldw	r17,200(sp)
    8e00:	d8803317 	ldw	r2,204(sp)
    8e04:	1440010e 	bge	r2,r17,8e0c <___vfprintf_internal_r+0x122c>
    8e08:	1023883a 	mov	r17,r2
    8e0c:	04400a0e 	bge	zero,r17,8e38 <___vfprintf_internal_r+0x1258>
    8e10:	d8801f17 	ldw	r2,124(sp)
    8e14:	1c47883a 	add	r3,r3,r17
    8e18:	44000015 	stw	r16,0(r8)
    8e1c:	10800044 	addi	r2,r2,1
    8e20:	44400115 	stw	r17,4(r8)
    8e24:	d8c02015 	stw	r3,128(sp)
    8e28:	d8801f15 	stw	r2,124(sp)
    8e2c:	010001c4 	movi	r4,7
    8e30:	20826516 	blt	r4,r2,97c8 <___vfprintf_internal_r+0x1be8>
    8e34:	42000204 	addi	r8,r8,8
    8e38:	88026116 	blt	r17,zero,97c0 <___vfprintf_internal_r+0x1be0>
    8e3c:	d9003217 	ldw	r4,200(sp)
    8e40:	2463c83a 	sub	r17,r4,r17
    8e44:	04407b0e 	bge	zero,r17,9034 <___vfprintf_internal_r+0x1454>
    8e48:	05800404 	movi	r22,16
    8e4c:	d8801f17 	ldw	r2,124(sp)
    8e50:	b4419d0e 	bge	r22,r17,94c8 <___vfprintf_internal_r+0x18e8>
    8e54:	010000b4 	movhi	r4,2
    8e58:	21000084 	addi	r4,r4,2
    8e5c:	d9002b15 	stw	r4,172(sp)
    8e60:	070001c4 	movi	fp,7
    8e64:	dcc02c17 	ldw	r19,176(sp)
    8e68:	00000306 	br	8e78 <___vfprintf_internal_r+0x1298>
    8e6c:	42000204 	addi	r8,r8,8
    8e70:	8c7ffc04 	addi	r17,r17,-16
    8e74:	b441970e 	bge	r22,r17,94d4 <___vfprintf_internal_r+0x18f4>
    8e78:	18c00404 	addi	r3,r3,16
    8e7c:	10800044 	addi	r2,r2,1
    8e80:	45000015 	stw	r20,0(r8)
    8e84:	45800115 	stw	r22,4(r8)
    8e88:	d8c02015 	stw	r3,128(sp)
    8e8c:	d8801f15 	stw	r2,124(sp)
    8e90:	e0bff60e 	bge	fp,r2,8e6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008e6c>
    8e94:	d9801e04 	addi	r6,sp,120
    8e98:	b80b883a 	mov	r5,r23
    8e9c:	9809883a 	mov	r4,r19
    8ea0:	000e6300 	call	e630 <__sprint_r>
    8ea4:	103c501e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    8ea8:	d8c02017 	ldw	r3,128(sp)
    8eac:	d8801f17 	ldw	r2,124(sp)
    8eb0:	da000404 	addi	r8,sp,16
    8eb4:	003fee06 	br	8e70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008e70>
    8eb8:	d9002c17 	ldw	r4,176(sp)
    8ebc:	d9801e04 	addi	r6,sp,120
    8ec0:	b80b883a 	mov	r5,r23
    8ec4:	000e6300 	call	e630 <__sprint_r>
    8ec8:	103c471e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    8ecc:	d8c02017 	ldw	r3,128(sp)
    8ed0:	df002787 	ldb	fp,158(sp)
    8ed4:	da000404 	addi	r8,sp,16
    8ed8:	003d5606 	br	8434 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008434>
    8edc:	9080040c 	andi	r2,r18,16
    8ee0:	10016126 	beq	r2,zero,9468 <___vfprintf_internal_r+0x1888>
    8ee4:	d8802d17 	ldw	r2,180(sp)
    8ee8:	14c00017 	ldw	r19,0(r2)
    8eec:	10800104 	addi	r2,r2,4
    8ef0:	d8802d15 	stw	r2,180(sp)
    8ef4:	982dd7fa 	srai	r22,r19,31
    8ef8:	b005883a 	mov	r2,r22
    8efc:	003c8206 	br	8108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008108>
    8f00:	9080040c 	andi	r2,r18,16
    8f04:	10003526 	beq	r2,zero,8fdc <___vfprintf_internal_r+0x13fc>
    8f08:	d9402d17 	ldw	r5,180(sp)
    8f0c:	d8c02917 	ldw	r3,164(sp)
    8f10:	d8002785 	stb	zero,158(sp)
    8f14:	28800104 	addi	r2,r5,4
    8f18:	2cc00017 	ldw	r19,0(r5)
    8f1c:	002d883a 	mov	r22,zero
    8f20:	18003716 	blt	r3,zero,9000 <___vfprintf_internal_r+0x1420>
    8f24:	00ffdfc4 	movi	r3,-129
    8f28:	d8802d15 	stw	r2,180(sp)
    8f2c:	90e4703a 	and	r18,r18,r3
    8f30:	0039883a 	mov	fp,zero
    8f34:	983df326 	beq	r19,zero,8704 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008704>
    8f38:	00800244 	movi	r2,9
    8f3c:	14fc7b36 	bltu	r2,r19,812c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700812c>
    8f40:	d8c02817 	ldw	r3,160(sp)
    8f44:	dc001dc4 	addi	r16,sp,119
    8f48:	9cc00c04 	addi	r19,r19,48
    8f4c:	1c07c83a 	sub	r3,r3,r16
    8f50:	dcc01dc5 	stb	r19,119(sp)
    8f54:	d8c02e15 	stw	r3,184(sp)
    8f58:	003ce806 	br	82fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70082fc>
    8f5c:	d8803317 	ldw	r2,204(sp)
    8f60:	143fffc4 	addi	r16,r2,-1
    8f64:	043f4d0e 	bge	zero,r16,8c9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008c9c>
    8f68:	07000404 	movi	fp,16
    8f6c:	e400810e 	bge	fp,r16,9174 <___vfprintf_internal_r+0x1594>
    8f70:	014000b4 	movhi	r5,2
    8f74:	29400084 	addi	r5,r5,2
    8f78:	d9402b15 	stw	r5,172(sp)
    8f7c:	01c001c4 	movi	r7,7
    8f80:	dcc02c17 	ldw	r19,176(sp)
    8f84:	00000306 	br	8f94 <___vfprintf_internal_r+0x13b4>
    8f88:	b5800204 	addi	r22,r22,8
    8f8c:	843ffc04 	addi	r16,r16,-16
    8f90:	e4007b0e 	bge	fp,r16,9180 <___vfprintf_internal_r+0x15a0>
    8f94:	18c00404 	addi	r3,r3,16
    8f98:	8c400044 	addi	r17,r17,1
    8f9c:	b5000015 	stw	r20,0(r22)
    8fa0:	b7000115 	stw	fp,4(r22)
    8fa4:	d8c02015 	stw	r3,128(sp)
    8fa8:	dc401f15 	stw	r17,124(sp)
    8fac:	3c7ff60e 	bge	r7,r17,8f88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f88>
    8fb0:	d9801e04 	addi	r6,sp,120
    8fb4:	b80b883a 	mov	r5,r23
    8fb8:	9809883a 	mov	r4,r19
    8fbc:	d9c03c15 	stw	r7,240(sp)
    8fc0:	000e6300 	call	e630 <__sprint_r>
    8fc4:	d9c03c17 	ldw	r7,240(sp)
    8fc8:	103c071e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    8fcc:	d8c02017 	ldw	r3,128(sp)
    8fd0:	dc401f17 	ldw	r17,124(sp)
    8fd4:	dd800404 	addi	r22,sp,16
    8fd8:	003fec06 	br	8f8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f8c>
    8fdc:	9080100c 	andi	r2,r18,64
    8fe0:	d8002785 	stb	zero,158(sp)
    8fe4:	10010e26 	beq	r2,zero,9420 <___vfprintf_internal_r+0x1840>
    8fe8:	d9002d17 	ldw	r4,180(sp)
    8fec:	d9402917 	ldw	r5,164(sp)
    8ff0:	002d883a 	mov	r22,zero
    8ff4:	20800104 	addi	r2,r4,4
    8ff8:	24c0000b 	ldhu	r19,0(r4)
    8ffc:	283fc90e 	bge	r5,zero,8f24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f24>
    9000:	d8802d15 	stw	r2,180(sp)
    9004:	0039883a 	mov	fp,zero
    9008:	9d84b03a 	or	r2,r19,r22
    900c:	103c461e 	bne	r2,zero,8128 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008128>
    9010:	00800044 	movi	r2,1
    9014:	003e6c06 	br	89c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089c8>
    9018:	d9002c17 	ldw	r4,176(sp)
    901c:	d9801e04 	addi	r6,sp,120
    9020:	b80b883a 	mov	r5,r23
    9024:	000e6300 	call	e630 <__sprint_r>
    9028:	103bef1e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    902c:	d8c02017 	ldw	r3,128(sp)
    9030:	da000404 	addi	r8,sp,16
    9034:	d9003217 	ldw	r4,200(sp)
    9038:	d8802617 	ldw	r2,152(sp)
    903c:	d9403317 	ldw	r5,204(sp)
    9040:	8123883a 	add	r17,r16,r4
    9044:	11400216 	blt	r2,r5,9050 <___vfprintf_internal_r+0x1470>
    9048:	9100004c 	andi	r4,r18,1
    904c:	20000d26 	beq	r4,zero,9084 <___vfprintf_internal_r+0x14a4>
    9050:	d9003717 	ldw	r4,220(sp)
    9054:	d9403417 	ldw	r5,208(sp)
    9058:	1907883a 	add	r3,r3,r4
    905c:	d9001f17 	ldw	r4,124(sp)
    9060:	41400015 	stw	r5,0(r8)
    9064:	d9403717 	ldw	r5,220(sp)
    9068:	21000044 	addi	r4,r4,1
    906c:	d8c02015 	stw	r3,128(sp)
    9070:	41400115 	stw	r5,4(r8)
    9074:	d9001f15 	stw	r4,124(sp)
    9078:	014001c4 	movi	r5,7
    907c:	2901e816 	blt	r5,r4,9820 <___vfprintf_internal_r+0x1c40>
    9080:	42000204 	addi	r8,r8,8
    9084:	d9003317 	ldw	r4,204(sp)
    9088:	8121883a 	add	r16,r16,r4
    908c:	2085c83a 	sub	r2,r4,r2
    9090:	8461c83a 	sub	r16,r16,r17
    9094:	1400010e 	bge	r2,r16,909c <___vfprintf_internal_r+0x14bc>
    9098:	1021883a 	mov	r16,r2
    909c:	04000a0e 	bge	zero,r16,90c8 <___vfprintf_internal_r+0x14e8>
    90a0:	d9001f17 	ldw	r4,124(sp)
    90a4:	1c07883a 	add	r3,r3,r16
    90a8:	44400015 	stw	r17,0(r8)
    90ac:	21000044 	addi	r4,r4,1
    90b0:	44000115 	stw	r16,4(r8)
    90b4:	d8c02015 	stw	r3,128(sp)
    90b8:	d9001f15 	stw	r4,124(sp)
    90bc:	014001c4 	movi	r5,7
    90c0:	2901fb16 	blt	r5,r4,98b0 <___vfprintf_internal_r+0x1cd0>
    90c4:	42000204 	addi	r8,r8,8
    90c8:	8001f716 	blt	r16,zero,98a8 <___vfprintf_internal_r+0x1cc8>
    90cc:	1421c83a 	sub	r16,r2,r16
    90d0:	043d380e 	bge	zero,r16,85b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70085b4>
    90d4:	04400404 	movi	r17,16
    90d8:	d8801f17 	ldw	r2,124(sp)
    90dc:	8c3efb0e 	bge	r17,r16,8ccc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ccc>
    90e0:	014000b4 	movhi	r5,2
    90e4:	29400084 	addi	r5,r5,2
    90e8:	d9402b15 	stw	r5,172(sp)
    90ec:	058001c4 	movi	r22,7
    90f0:	dcc02c17 	ldw	r19,176(sp)
    90f4:	00000306 	br	9104 <___vfprintf_internal_r+0x1524>
    90f8:	42000204 	addi	r8,r8,8
    90fc:	843ffc04 	addi	r16,r16,-16
    9100:	8c3ef50e 	bge	r17,r16,8cd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008cd8>
    9104:	18c00404 	addi	r3,r3,16
    9108:	10800044 	addi	r2,r2,1
    910c:	45000015 	stw	r20,0(r8)
    9110:	44400115 	stw	r17,4(r8)
    9114:	d8c02015 	stw	r3,128(sp)
    9118:	d8801f15 	stw	r2,124(sp)
    911c:	b0bff60e 	bge	r22,r2,90f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090f8>
    9120:	d9801e04 	addi	r6,sp,120
    9124:	b80b883a 	mov	r5,r23
    9128:	9809883a 	mov	r4,r19
    912c:	000e6300 	call	e630 <__sprint_r>
    9130:	103bad1e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    9134:	d8c02017 	ldw	r3,128(sp)
    9138:	d8801f17 	ldw	r2,124(sp)
    913c:	da000404 	addi	r8,sp,16
    9140:	003fee06 	br	90fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090fc>
    9144:	9088703a 	and	r4,r18,r2
    9148:	203eab1e 	bne	r4,zero,8bf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008bf8>
    914c:	dc401f17 	ldw	r17,124(sp)
    9150:	40800115 	stw	r2,4(r8)
    9154:	44000015 	stw	r16,0(r8)
    9158:	8c400044 	addi	r17,r17,1
    915c:	d8c02015 	stw	r3,128(sp)
    9160:	dc401f15 	stw	r17,124(sp)
    9164:	008001c4 	movi	r2,7
    9168:	14400e16 	blt	r2,r17,91a4 <___vfprintf_internal_r+0x15c4>
    916c:	45800204 	addi	r22,r8,8
    9170:	003eca06 	br	8c9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008c9c>
    9174:	010000b4 	movhi	r4,2
    9178:	21000084 	addi	r4,r4,2
    917c:	d9002b15 	stw	r4,172(sp)
    9180:	d8802b17 	ldw	r2,172(sp)
    9184:	1c07883a 	add	r3,r3,r16
    9188:	8c400044 	addi	r17,r17,1
    918c:	b0800015 	stw	r2,0(r22)
    9190:	b4000115 	stw	r16,4(r22)
    9194:	d8c02015 	stw	r3,128(sp)
    9198:	dc401f15 	stw	r17,124(sp)
    919c:	008001c4 	movi	r2,7
    91a0:	147ebd0e 	bge	r2,r17,8c98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008c98>
    91a4:	d9002c17 	ldw	r4,176(sp)
    91a8:	d9801e04 	addi	r6,sp,120
    91ac:	b80b883a 	mov	r5,r23
    91b0:	000e6300 	call	e630 <__sprint_r>
    91b4:	103b8c1e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    91b8:	d8c02017 	ldw	r3,128(sp)
    91bc:	dc401f17 	ldw	r17,124(sp)
    91c0:	dd800404 	addi	r22,sp,16
    91c4:	003eb506 	br	8c9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008c9c>
    91c8:	d9002c17 	ldw	r4,176(sp)
    91cc:	d9801e04 	addi	r6,sp,120
    91d0:	b80b883a 	mov	r5,r23
    91d4:	000e6300 	call	e630 <__sprint_r>
    91d8:	103b831e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    91dc:	d8c02017 	ldw	r3,128(sp)
    91e0:	dc401f17 	ldw	r17,124(sp)
    91e4:	da000404 	addi	r8,sp,16
    91e8:	003e8d06 	br	8c20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008c20>
    91ec:	d9002c17 	ldw	r4,176(sp)
    91f0:	d9801e04 	addi	r6,sp,120
    91f4:	b80b883a 	mov	r5,r23
    91f8:	000e6300 	call	e630 <__sprint_r>
    91fc:	103b7a1e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    9200:	d8c02017 	ldw	r3,128(sp)
    9204:	dc401f17 	ldw	r17,124(sp)
    9208:	dd800404 	addi	r22,sp,16
    920c:	003e8f06 	br	8c4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008c4c>
    9210:	0027883a 	mov	r19,zero
    9214:	003f4a06 	br	8f40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f40>
    9218:	d9002c17 	ldw	r4,176(sp)
    921c:	d9801e04 	addi	r6,sp,120
    9220:	b80b883a 	mov	r5,r23
    9224:	000e6300 	call	e630 <__sprint_r>
    9228:	103b6f1e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    922c:	d8c02017 	ldw	r3,128(sp)
    9230:	da000404 	addi	r8,sp,16
    9234:	003c9d06 	br	84ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084ac>
    9238:	04e7c83a 	sub	r19,zero,r19
    923c:	9804c03a 	cmpne	r2,r19,zero
    9240:	05adc83a 	sub	r22,zero,r22
    9244:	b0adc83a 	sub	r22,r22,r2
    9248:	d8802917 	ldw	r2,164(sp)
    924c:	07000b44 	movi	fp,45
    9250:	df002785 	stb	fp,158(sp)
    9254:	10017b16 	blt	r2,zero,9844 <___vfprintf_internal_r+0x1c64>
    9258:	00bfdfc4 	movi	r2,-129
    925c:	90a4703a 	and	r18,r18,r2
    9260:	003bb106 	br	8128 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008128>
    9264:	d9003617 	ldw	r4,216(sp)
    9268:	d9403817 	ldw	r5,224(sp)
    926c:	da003d15 	stw	r8,244(sp)
    9270:	000e3840 	call	e384 <__fpclassifyd>
    9274:	da003d17 	ldw	r8,244(sp)
    9278:	1000f026 	beq	r2,zero,963c <___vfprintf_internal_r+0x1a5c>
    927c:	d9002917 	ldw	r4,164(sp)
    9280:	05bff7c4 	movi	r22,-33
    9284:	00bfffc4 	movi	r2,-1
    9288:	8dac703a 	and	r22,r17,r22
    928c:	20820026 	beq	r4,r2,9a90 <___vfprintf_internal_r+0x1eb0>
    9290:	008011c4 	movi	r2,71
    9294:	b081f726 	beq	r22,r2,9a74 <___vfprintf_internal_r+0x1e94>
    9298:	d9003817 	ldw	r4,224(sp)
    929c:	90c04014 	ori	r3,r18,256
    92a0:	d8c02b15 	stw	r3,172(sp)
    92a4:	20021516 	blt	r4,zero,9afc <___vfprintf_internal_r+0x1f1c>
    92a8:	dcc03817 	ldw	r19,224(sp)
    92ac:	d8002a05 	stb	zero,168(sp)
    92b0:	00801984 	movi	r2,102
    92b4:	8881f926 	beq	r17,r2,9a9c <___vfprintf_internal_r+0x1ebc>
    92b8:	00801184 	movi	r2,70
    92bc:	88821c26 	beq	r17,r2,9b30 <___vfprintf_internal_r+0x1f50>
    92c0:	00801144 	movi	r2,69
    92c4:	b081ef26 	beq	r22,r2,9a84 <___vfprintf_internal_r+0x1ea4>
    92c8:	d8c02917 	ldw	r3,164(sp)
    92cc:	d8802104 	addi	r2,sp,132
    92d0:	d8800315 	stw	r2,12(sp)
    92d4:	d9403617 	ldw	r5,216(sp)
    92d8:	d8802504 	addi	r2,sp,148
    92dc:	d9002c17 	ldw	r4,176(sp)
    92e0:	d8800215 	stw	r2,8(sp)
    92e4:	d8802604 	addi	r2,sp,152
    92e8:	d8c00015 	stw	r3,0(sp)
    92ec:	d8800115 	stw	r2,4(sp)
    92f0:	01c00084 	movi	r7,2
    92f4:	980d883a 	mov	r6,r19
    92f8:	d8c03c15 	stw	r3,240(sp)
    92fc:	da003d15 	stw	r8,244(sp)
    9300:	000a2040 	call	a204 <_dtoa_r>
    9304:	1021883a 	mov	r16,r2
    9308:	008019c4 	movi	r2,103
    930c:	d8c03c17 	ldw	r3,240(sp)
    9310:	da003d17 	ldw	r8,244(sp)
    9314:	88817126 	beq	r17,r2,98dc <___vfprintf_internal_r+0x1cfc>
    9318:	008011c4 	movi	r2,71
    931c:	88829226 	beq	r17,r2,9d68 <___vfprintf_internal_r+0x2188>
    9320:	80f9883a 	add	fp,r16,r3
    9324:	d9003617 	ldw	r4,216(sp)
    9328:	000d883a 	mov	r6,zero
    932c:	000f883a 	mov	r7,zero
    9330:	980b883a 	mov	r5,r19
    9334:	da003d15 	stw	r8,244(sp)
    9338:	00119fc0 	call	119fc <__eqdf2>
    933c:	da003d17 	ldw	r8,244(sp)
    9340:	10018d26 	beq	r2,zero,9978 <___vfprintf_internal_r+0x1d98>
    9344:	d8802117 	ldw	r2,132(sp)
    9348:	1700062e 	bgeu	r2,fp,9364 <___vfprintf_internal_r+0x1784>
    934c:	01000c04 	movi	r4,48
    9350:	10c00044 	addi	r3,r2,1
    9354:	d8c02115 	stw	r3,132(sp)
    9358:	11000005 	stb	r4,0(r2)
    935c:	d8802117 	ldw	r2,132(sp)
    9360:	173ffb36 	bltu	r2,fp,9350 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009350>
    9364:	1405c83a 	sub	r2,r2,r16
    9368:	d8803315 	stw	r2,204(sp)
    936c:	008011c4 	movi	r2,71
    9370:	b0817626 	beq	r22,r2,994c <___vfprintf_internal_r+0x1d6c>
    9374:	00801944 	movi	r2,101
    9378:	1442810e 	bge	r2,r17,9d80 <___vfprintf_internal_r+0x21a0>
    937c:	d8c02617 	ldw	r3,152(sp)
    9380:	00801984 	movi	r2,102
    9384:	d8c03215 	stw	r3,200(sp)
    9388:	8881fe26 	beq	r17,r2,9b84 <___vfprintf_internal_r+0x1fa4>
    938c:	d8c03217 	ldw	r3,200(sp)
    9390:	d9003317 	ldw	r4,204(sp)
    9394:	1901dd16 	blt	r3,r4,9b0c <___vfprintf_internal_r+0x1f2c>
    9398:	9480004c 	andi	r18,r18,1
    939c:	90022b1e 	bne	r18,zero,9c4c <___vfprintf_internal_r+0x206c>
    93a0:	1805883a 	mov	r2,r3
    93a4:	18028016 	blt	r3,zero,9da8 <___vfprintf_internal_r+0x21c8>
    93a8:	d8c03217 	ldw	r3,200(sp)
    93ac:	044019c4 	movi	r17,103
    93b0:	d8c02e15 	stw	r3,184(sp)
    93b4:	df002a07 	ldb	fp,168(sp)
    93b8:	e001531e 	bne	fp,zero,9908 <___vfprintf_internal_r+0x1d28>
    93bc:	df002783 	ldbu	fp,158(sp)
    93c0:	d8802a15 	stw	r2,168(sp)
    93c4:	dc802b17 	ldw	r18,172(sp)
    93c8:	d8002915 	stw	zero,164(sp)
    93cc:	003bd106 	br	8314 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008314>
    93d0:	d8802d17 	ldw	r2,180(sp)
    93d4:	d8c02d17 	ldw	r3,180(sp)
    93d8:	d9002d17 	ldw	r4,180(sp)
    93dc:	10800017 	ldw	r2,0(r2)
    93e0:	18c00117 	ldw	r3,4(r3)
    93e4:	21000204 	addi	r4,r4,8
    93e8:	d8803615 	stw	r2,216(sp)
    93ec:	d8c03815 	stw	r3,224(sp)
    93f0:	d9002d15 	stw	r4,180(sp)
    93f4:	003b7506 	br	81cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70081cc>
    93f8:	ac400007 	ldb	r17,0(r21)
    93fc:	003a5906 	br	7d64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d64>
    9400:	9080100c 	andi	r2,r18,64
    9404:	1000a826 	beq	r2,zero,96a8 <___vfprintf_internal_r+0x1ac8>
    9408:	d9002d17 	ldw	r4,180(sp)
    940c:	002d883a 	mov	r22,zero
    9410:	24c0000b 	ldhu	r19,0(r4)
    9414:	21000104 	addi	r4,r4,4
    9418:	d9002d15 	stw	r4,180(sp)
    941c:	003ccb06 	br	874c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700874c>
    9420:	d8c02d17 	ldw	r3,180(sp)
    9424:	d9002917 	ldw	r4,164(sp)
    9428:	002d883a 	mov	r22,zero
    942c:	18800104 	addi	r2,r3,4
    9430:	1cc00017 	ldw	r19,0(r3)
    9434:	203ebb0e 	bge	r4,zero,8f24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f24>
    9438:	003ef106 	br	9000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009000>
    943c:	9080040c 	andi	r2,r18,16
    9440:	1000921e 	bne	r2,zero,968c <___vfprintf_internal_r+0x1aac>
    9444:	9480100c 	andi	r18,r18,64
    9448:	90013926 	beq	r18,zero,9930 <___vfprintf_internal_r+0x1d50>
    944c:	d9002d17 	ldw	r4,180(sp)
    9450:	d9402f17 	ldw	r5,188(sp)
    9454:	20800017 	ldw	r2,0(r4)
    9458:	21000104 	addi	r4,r4,4
    945c:	d9002d15 	stw	r4,180(sp)
    9460:	1140000d 	sth	r5,0(r2)
    9464:	003a1606 	br	7cc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007cc0>
    9468:	9080100c 	andi	r2,r18,64
    946c:	10008026 	beq	r2,zero,9670 <___vfprintf_internal_r+0x1a90>
    9470:	d8c02d17 	ldw	r3,180(sp)
    9474:	1cc0000f 	ldh	r19,0(r3)
    9478:	18c00104 	addi	r3,r3,4
    947c:	d8c02d15 	stw	r3,180(sp)
    9480:	982dd7fa 	srai	r22,r19,31
    9484:	b005883a 	mov	r2,r22
    9488:	003b1f06 	br	8108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008108>
    948c:	9080100c 	andi	r2,r18,64
    9490:	d8002785 	stb	zero,158(sp)
    9494:	10008a1e 	bne	r2,zero,96c0 <___vfprintf_internal_r+0x1ae0>
    9498:	d9402d17 	ldw	r5,180(sp)
    949c:	d8c02917 	ldw	r3,164(sp)
    94a0:	002d883a 	mov	r22,zero
    94a4:	28800104 	addi	r2,r5,4
    94a8:	2cc00017 	ldw	r19,0(r5)
    94ac:	183e4b0e 	bge	r3,zero,8ddc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ddc>
    94b0:	9d86b03a 	or	r3,r19,r22
    94b4:	d8802d15 	stw	r2,180(sp)
    94b8:	183e4c1e 	bne	r3,zero,8dec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dec>
    94bc:	0039883a 	mov	fp,zero
    94c0:	0005883a 	mov	r2,zero
    94c4:	003d4006 	br	89c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089c8>
    94c8:	014000b4 	movhi	r5,2
    94cc:	29400084 	addi	r5,r5,2
    94d0:	d9402b15 	stw	r5,172(sp)
    94d4:	d9402b17 	ldw	r5,172(sp)
    94d8:	1c47883a 	add	r3,r3,r17
    94dc:	10800044 	addi	r2,r2,1
    94e0:	41400015 	stw	r5,0(r8)
    94e4:	44400115 	stw	r17,4(r8)
    94e8:	d8c02015 	stw	r3,128(sp)
    94ec:	d8801f15 	stw	r2,124(sp)
    94f0:	010001c4 	movi	r4,7
    94f4:	20bec816 	blt	r4,r2,9018 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009018>
    94f8:	42000204 	addi	r8,r8,8
    94fc:	003ecd06 	br	9034 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009034>
    9500:	d9002917 	ldw	r4,164(sp)
    9504:	d8002785 	stb	zero,158(sp)
    9508:	203d2d16 	blt	r4,zero,89c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089c0>
    950c:	00bfdfc4 	movi	r2,-129
    9510:	90a4703a 	and	r18,r18,r2
    9514:	003a9106 	br	7f5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f5c>
    9518:	010000b4 	movhi	r4,2
    951c:	21000084 	addi	r4,r4,2
    9520:	d9002b15 	stw	r4,172(sp)
    9524:	003c0c06 	br	8558 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008558>
    9528:	d9002c17 	ldw	r4,176(sp)
    952c:	d9801e04 	addi	r6,sp,120
    9530:	b80b883a 	mov	r5,r23
    9534:	000e6300 	call	e630 <__sprint_r>
    9538:	103aab1e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    953c:	d8c02017 	ldw	r3,128(sp)
    9540:	da000404 	addi	r8,sp,16
    9544:	003d4106 	br	8a4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a4c>
    9548:	d8801f17 	ldw	r2,124(sp)
    954c:	014000b4 	movhi	r5,2
    9550:	01000044 	movi	r4,1
    9554:	18c00044 	addi	r3,r3,1
    9558:	10800044 	addi	r2,r2,1
    955c:	29400004 	addi	r5,r5,0
    9560:	41000115 	stw	r4,4(r8)
    9564:	41400015 	stw	r5,0(r8)
    9568:	d8c02015 	stw	r3,128(sp)
    956c:	d8801f15 	stw	r2,124(sp)
    9570:	010001c4 	movi	r4,7
    9574:	20805c16 	blt	r4,r2,96e8 <___vfprintf_internal_r+0x1b08>
    9578:	42000204 	addi	r8,r8,8
    957c:	8800041e 	bne	r17,zero,9590 <___vfprintf_internal_r+0x19b0>
    9580:	d8803317 	ldw	r2,204(sp)
    9584:	1000021e 	bne	r2,zero,9590 <___vfprintf_internal_r+0x19b0>
    9588:	9080004c 	andi	r2,r18,1
    958c:	103c0926 	beq	r2,zero,85b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70085b4>
    9590:	d9003717 	ldw	r4,220(sp)
    9594:	d8801f17 	ldw	r2,124(sp)
    9598:	d9403417 	ldw	r5,208(sp)
    959c:	20c7883a 	add	r3,r4,r3
    95a0:	10800044 	addi	r2,r2,1
    95a4:	41000115 	stw	r4,4(r8)
    95a8:	41400015 	stw	r5,0(r8)
    95ac:	d8c02015 	stw	r3,128(sp)
    95b0:	d8801f15 	stw	r2,124(sp)
    95b4:	010001c4 	movi	r4,7
    95b8:	20812116 	blt	r4,r2,9a40 <___vfprintf_internal_r+0x1e60>
    95bc:	42000204 	addi	r8,r8,8
    95c0:	0463c83a 	sub	r17,zero,r17
    95c4:	0440730e 	bge	zero,r17,9794 <___vfprintf_internal_r+0x1bb4>
    95c8:	05800404 	movi	r22,16
    95cc:	b440860e 	bge	r22,r17,97e8 <___vfprintf_internal_r+0x1c08>
    95d0:	014000b4 	movhi	r5,2
    95d4:	29400084 	addi	r5,r5,2
    95d8:	d9402b15 	stw	r5,172(sp)
    95dc:	070001c4 	movi	fp,7
    95e0:	dcc02c17 	ldw	r19,176(sp)
    95e4:	00000306 	br	95f4 <___vfprintf_internal_r+0x1a14>
    95e8:	42000204 	addi	r8,r8,8
    95ec:	8c7ffc04 	addi	r17,r17,-16
    95f0:	b440800e 	bge	r22,r17,97f4 <___vfprintf_internal_r+0x1c14>
    95f4:	18c00404 	addi	r3,r3,16
    95f8:	10800044 	addi	r2,r2,1
    95fc:	45000015 	stw	r20,0(r8)
    9600:	45800115 	stw	r22,4(r8)
    9604:	d8c02015 	stw	r3,128(sp)
    9608:	d8801f15 	stw	r2,124(sp)
    960c:	e0bff60e 	bge	fp,r2,95e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095e8>
    9610:	d9801e04 	addi	r6,sp,120
    9614:	b80b883a 	mov	r5,r23
    9618:	9809883a 	mov	r4,r19
    961c:	000e6300 	call	e630 <__sprint_r>
    9620:	103a711e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    9624:	d8c02017 	ldw	r3,128(sp)
    9628:	d8801f17 	ldw	r2,124(sp)
    962c:	da000404 	addi	r8,sp,16
    9630:	003fee06 	br	95ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095ec>
    9634:	00bfffc4 	movi	r2,-1
    9638:	003a6f06 	br	7ff8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007ff8>
    963c:	008011c4 	movi	r2,71
    9640:	1440b816 	blt	r2,r17,9924 <___vfprintf_internal_r+0x1d44>
    9644:	040000b4 	movhi	r16,2
    9648:	843ff204 	addi	r16,r16,-56
    964c:	00c000c4 	movi	r3,3
    9650:	00bfdfc4 	movi	r2,-129
    9654:	d8c02a15 	stw	r3,168(sp)
    9658:	90a4703a 	and	r18,r18,r2
    965c:	df002783 	ldbu	fp,158(sp)
    9660:	d8c02e15 	stw	r3,184(sp)
    9664:	d8002915 	stw	zero,164(sp)
    9668:	d8003215 	stw	zero,200(sp)
    966c:	003b2906 	br	8314 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008314>
    9670:	d9002d17 	ldw	r4,180(sp)
    9674:	24c00017 	ldw	r19,0(r4)
    9678:	21000104 	addi	r4,r4,4
    967c:	d9002d15 	stw	r4,180(sp)
    9680:	982dd7fa 	srai	r22,r19,31
    9684:	b005883a 	mov	r2,r22
    9688:	003a9f06 	br	8108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008108>
    968c:	d9402d17 	ldw	r5,180(sp)
    9690:	d8c02f17 	ldw	r3,188(sp)
    9694:	28800017 	ldw	r2,0(r5)
    9698:	29400104 	addi	r5,r5,4
    969c:	d9402d15 	stw	r5,180(sp)
    96a0:	10c00015 	stw	r3,0(r2)
    96a4:	00398606 	br	7cc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007cc0>
    96a8:	d9402d17 	ldw	r5,180(sp)
    96ac:	002d883a 	mov	r22,zero
    96b0:	2cc00017 	ldw	r19,0(r5)
    96b4:	29400104 	addi	r5,r5,4
    96b8:	d9402d15 	stw	r5,180(sp)
    96bc:	003c2306 	br	874c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700874c>
    96c0:	d8c02d17 	ldw	r3,180(sp)
    96c4:	d9002917 	ldw	r4,164(sp)
    96c8:	002d883a 	mov	r22,zero
    96cc:	18800104 	addi	r2,r3,4
    96d0:	1cc0000b 	ldhu	r19,0(r3)
    96d4:	203dc10e 	bge	r4,zero,8ddc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ddc>
    96d8:	003f7506 	br	94b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70094b0>
    96dc:	040000b4 	movhi	r16,2
    96e0:	843ff004 	addi	r16,r16,-64
    96e4:	003acc06 	br	8218 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008218>
    96e8:	d9002c17 	ldw	r4,176(sp)
    96ec:	d9801e04 	addi	r6,sp,120
    96f0:	b80b883a 	mov	r5,r23
    96f4:	000e6300 	call	e630 <__sprint_r>
    96f8:	103a3b1e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    96fc:	dc402617 	ldw	r17,152(sp)
    9700:	d8c02017 	ldw	r3,128(sp)
    9704:	da000404 	addi	r8,sp,16
    9708:	003f9c06 	br	957c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700957c>
    970c:	ac400043 	ldbu	r17,1(r21)
    9710:	94800814 	ori	r18,r18,32
    9714:	ad400044 	addi	r21,r21,1
    9718:	8c403fcc 	andi	r17,r17,255
    971c:	8c40201c 	xori	r17,r17,128
    9720:	8c7fe004 	addi	r17,r17,-128
    9724:	00398f06 	br	7d64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d64>
    9728:	d8c02d15 	stw	r3,180(sp)
    972c:	0039883a 	mov	fp,zero
    9730:	003e3506 	br	9008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009008>
    9734:	d9002c17 	ldw	r4,176(sp)
    9738:	d9801e04 	addi	r6,sp,120
    973c:	b80b883a 	mov	r5,r23
    9740:	000e6300 	call	e630 <__sprint_r>
    9744:	103a281e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    9748:	d8c02017 	ldw	r3,128(sp)
    974c:	da000404 	addi	r8,sp,16
    9750:	003cd006 	br	8a94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a94>
    9754:	8009883a 	mov	r4,r16
    9758:	da003d15 	stw	r8,244(sp)
    975c:	0007b480 	call	7b48 <strlen>
    9760:	d8802e15 	stw	r2,184(sp)
    9764:	da003d17 	ldw	r8,244(sp)
    9768:	103c340e 	bge	r2,zero,883c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700883c>
    976c:	0005883a 	mov	r2,zero
    9770:	003c3206 	br	883c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700883c>
    9774:	d9002c17 	ldw	r4,176(sp)
    9778:	d9801e04 	addi	r6,sp,120
    977c:	b80b883a 	mov	r5,r23
    9780:	000e6300 	call	e630 <__sprint_r>
    9784:	103a181e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    9788:	d8c02017 	ldw	r3,128(sp)
    978c:	d8801f17 	ldw	r2,124(sp)
    9790:	da000404 	addi	r8,sp,16
    9794:	d9403317 	ldw	r5,204(sp)
    9798:	10800044 	addi	r2,r2,1
    979c:	44000015 	stw	r16,0(r8)
    97a0:	28c7883a 	add	r3,r5,r3
    97a4:	003b7d06 	br	859c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700859c>
    97a8:	010000b4 	movhi	r4,2
    97ac:	21000484 	addi	r4,r4,18
    97b0:	d9003515 	stw	r4,212(sp)
    97b4:	003b1406 	br	8408 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008408>
    97b8:	013fffc4 	movi	r4,-1
    97bc:	003a3506 	br	8094 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008094>
    97c0:	0023883a 	mov	r17,zero
    97c4:	003d9d06 	br	8e3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008e3c>
    97c8:	d9002c17 	ldw	r4,176(sp)
    97cc:	d9801e04 	addi	r6,sp,120
    97d0:	b80b883a 	mov	r5,r23
    97d4:	000e6300 	call	e630 <__sprint_r>
    97d8:	103a031e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    97dc:	d8c02017 	ldw	r3,128(sp)
    97e0:	da000404 	addi	r8,sp,16
    97e4:	003d9406 	br	8e38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008e38>
    97e8:	010000b4 	movhi	r4,2
    97ec:	21000084 	addi	r4,r4,2
    97f0:	d9002b15 	stw	r4,172(sp)
    97f4:	d9002b17 	ldw	r4,172(sp)
    97f8:	1c47883a 	add	r3,r3,r17
    97fc:	10800044 	addi	r2,r2,1
    9800:	41000015 	stw	r4,0(r8)
    9804:	44400115 	stw	r17,4(r8)
    9808:	d8c02015 	stw	r3,128(sp)
    980c:	d8801f15 	stw	r2,124(sp)
    9810:	010001c4 	movi	r4,7
    9814:	20bfd716 	blt	r4,r2,9774 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009774>
    9818:	42000204 	addi	r8,r8,8
    981c:	003fdd06 	br	9794 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009794>
    9820:	d9002c17 	ldw	r4,176(sp)
    9824:	d9801e04 	addi	r6,sp,120
    9828:	b80b883a 	mov	r5,r23
    982c:	000e6300 	call	e630 <__sprint_r>
    9830:	1039ed1e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    9834:	d8802617 	ldw	r2,152(sp)
    9838:	d8c02017 	ldw	r3,128(sp)
    983c:	da000404 	addi	r8,sp,16
    9840:	003e1006 	br	9084 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009084>
    9844:	00800044 	movi	r2,1
    9848:	10803fcc 	andi	r2,r2,255
    984c:	00c00044 	movi	r3,1
    9850:	10fa3526 	beq	r2,r3,8128 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008128>
    9854:	00c00084 	movi	r3,2
    9858:	10fbcb26 	beq	r2,r3,8788 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008788>
    985c:	003a8f06 	br	829c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700829c>
    9860:	010000b4 	movhi	r4,2
    9864:	21000484 	addi	r4,r4,18
    9868:	d9003515 	stw	r4,212(sp)
    986c:	003b7606 	br	8648 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008648>
    9870:	d8802917 	ldw	r2,164(sp)
    9874:	00c00184 	movi	r3,6
    9878:	1880012e 	bgeu	r3,r2,9880 <___vfprintf_internal_r+0x1ca0>
    987c:	1805883a 	mov	r2,r3
    9880:	d8802e15 	stw	r2,184(sp)
    9884:	1000ef16 	blt	r2,zero,9c44 <___vfprintf_internal_r+0x2064>
    9888:	040000b4 	movhi	r16,2
    988c:	d8802a15 	stw	r2,168(sp)
    9890:	dcc02d15 	stw	r19,180(sp)
    9894:	d8002915 	stw	zero,164(sp)
    9898:	d8003215 	stw	zero,200(sp)
    989c:	843ffe04 	addi	r16,r16,-8
    98a0:	0039883a 	mov	fp,zero
    98a4:	003aa206 	br	8330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008330>
    98a8:	0021883a 	mov	r16,zero
    98ac:	003e0706 	br	90cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090cc>
    98b0:	d9002c17 	ldw	r4,176(sp)
    98b4:	d9801e04 	addi	r6,sp,120
    98b8:	b80b883a 	mov	r5,r23
    98bc:	000e6300 	call	e630 <__sprint_r>
    98c0:	1039c91e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    98c4:	d8802617 	ldw	r2,152(sp)
    98c8:	d9403317 	ldw	r5,204(sp)
    98cc:	d8c02017 	ldw	r3,128(sp)
    98d0:	da000404 	addi	r8,sp,16
    98d4:	2885c83a 	sub	r2,r5,r2
    98d8:	003dfb06 	br	90c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090c8>
    98dc:	9080004c 	andi	r2,r18,1
    98e0:	103e8f1e 	bne	r2,zero,9320 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009320>
    98e4:	d8802117 	ldw	r2,132(sp)
    98e8:	003e9e06 	br	9364 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009364>
    98ec:	1025883a 	mov	r18,r2
    98f0:	0039883a 	mov	fp,zero
    98f4:	00800084 	movi	r2,2
    98f8:	003fd306 	br	9848 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009848>
    98fc:	07000b44 	movi	fp,45
    9900:	df002785 	stb	fp,158(sp)
    9904:	003a4006 	br	8208 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008208>
    9908:	00c00b44 	movi	r3,45
    990c:	d8c02785 	stb	r3,158(sp)
    9910:	d8802a15 	stw	r2,168(sp)
    9914:	dc802b17 	ldw	r18,172(sp)
    9918:	d8002915 	stw	zero,164(sp)
    991c:	07000b44 	movi	fp,45
    9920:	003a8006 	br	8324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008324>
    9924:	040000b4 	movhi	r16,2
    9928:	843ff304 	addi	r16,r16,-52
    992c:	003f4706 	br	964c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700964c>
    9930:	d8c02d17 	ldw	r3,180(sp)
    9934:	d9002f17 	ldw	r4,188(sp)
    9938:	18800017 	ldw	r2,0(r3)
    993c:	18c00104 	addi	r3,r3,4
    9940:	d8c02d15 	stw	r3,180(sp)
    9944:	11000015 	stw	r4,0(r2)
    9948:	0038dd06 	br	7cc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007cc0>
    994c:	dd802617 	ldw	r22,152(sp)
    9950:	00bfff44 	movi	r2,-3
    9954:	b0801c16 	blt	r22,r2,99c8 <___vfprintf_internal_r+0x1de8>
    9958:	d9402917 	ldw	r5,164(sp)
    995c:	2d801a16 	blt	r5,r22,99c8 <___vfprintf_internal_r+0x1de8>
    9960:	dd803215 	stw	r22,200(sp)
    9964:	003e8906 	br	938c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700938c>
    9968:	010000b4 	movhi	r4,2
    996c:	21000084 	addi	r4,r4,2
    9970:	d9002b15 	stw	r4,172(sp)
    9974:	003c9106 	br	8bbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008bbc>
    9978:	e005883a 	mov	r2,fp
    997c:	003e7906 	br	9364 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009364>
    9980:	d9402917 	ldw	r5,164(sp)
    9984:	df002783 	ldbu	fp,158(sp)
    9988:	dcc02d15 	stw	r19,180(sp)
    998c:	d9402a15 	stw	r5,168(sp)
    9990:	d9402e15 	stw	r5,184(sp)
    9994:	d8002915 	stw	zero,164(sp)
    9998:	d8003215 	stw	zero,200(sp)
    999c:	003a5d06 	br	8314 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008314>
    99a0:	9080004c 	andi	r2,r18,1
    99a4:	0039883a 	mov	fp,zero
    99a8:	10000426 	beq	r2,zero,99bc <___vfprintf_internal_r+0x1ddc>
    99ac:	00800c04 	movi	r2,48
    99b0:	dc001dc4 	addi	r16,sp,119
    99b4:	d8801dc5 	stb	r2,119(sp)
    99b8:	003b8006 	br	87bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70087bc>
    99bc:	d8002e15 	stw	zero,184(sp)
    99c0:	dc001e04 	addi	r16,sp,120
    99c4:	003a4d06 	br	82fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70082fc>
    99c8:	8c7fff84 	addi	r17,r17,-2
    99cc:	b5bfffc4 	addi	r22,r22,-1
    99d0:	dd802615 	stw	r22,152(sp)
    99d4:	dc4022c5 	stb	r17,139(sp)
    99d8:	b000bf16 	blt	r22,zero,9cd8 <___vfprintf_internal_r+0x20f8>
    99dc:	00800ac4 	movi	r2,43
    99e0:	d8802305 	stb	r2,140(sp)
    99e4:	00800244 	movi	r2,9
    99e8:	15807016 	blt	r2,r22,9bac <___vfprintf_internal_r+0x1fcc>
    99ec:	00800c04 	movi	r2,48
    99f0:	b5800c04 	addi	r22,r22,48
    99f4:	d8802345 	stb	r2,141(sp)
    99f8:	dd802385 	stb	r22,142(sp)
    99fc:	d88023c4 	addi	r2,sp,143
    9a00:	df0022c4 	addi	fp,sp,139
    9a04:	d8c03317 	ldw	r3,204(sp)
    9a08:	1739c83a 	sub	fp,r2,fp
    9a0c:	d9003317 	ldw	r4,204(sp)
    9a10:	e0c7883a 	add	r3,fp,r3
    9a14:	df003a15 	stw	fp,232(sp)
    9a18:	d8c02e15 	stw	r3,184(sp)
    9a1c:	00800044 	movi	r2,1
    9a20:	1100b30e 	bge	r2,r4,9cf0 <___vfprintf_internal_r+0x2110>
    9a24:	d8c02e17 	ldw	r3,184(sp)
    9a28:	18c00044 	addi	r3,r3,1
    9a2c:	d8c02e15 	stw	r3,184(sp)
    9a30:	1805883a 	mov	r2,r3
    9a34:	1800ac16 	blt	r3,zero,9ce8 <___vfprintf_internal_r+0x2108>
    9a38:	d8003215 	stw	zero,200(sp)
    9a3c:	003e5d06 	br	93b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70093b4>
    9a40:	d9002c17 	ldw	r4,176(sp)
    9a44:	d9801e04 	addi	r6,sp,120
    9a48:	b80b883a 	mov	r5,r23
    9a4c:	000e6300 	call	e630 <__sprint_r>
    9a50:	1039651e 	bne	r2,zero,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    9a54:	dc402617 	ldw	r17,152(sp)
    9a58:	d8c02017 	ldw	r3,128(sp)
    9a5c:	d8801f17 	ldw	r2,124(sp)
    9a60:	da000404 	addi	r8,sp,16
    9a64:	003ed606 	br	95c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095c0>
    9a68:	582b883a 	mov	r21,r11
    9a6c:	d8002915 	stw	zero,164(sp)
    9a70:	0038bd06 	br	7d68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d68>
    9a74:	d8802917 	ldw	r2,164(sp)
    9a78:	103e071e 	bne	r2,zero,9298 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009298>
    9a7c:	dc002915 	stw	r16,164(sp)
    9a80:	003e0506 	br	9298 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009298>
    9a84:	d9002917 	ldw	r4,164(sp)
    9a88:	20c00044 	addi	r3,r4,1
    9a8c:	003e0f06 	br	92cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70092cc>
    9a90:	01400184 	movi	r5,6
    9a94:	d9402915 	stw	r5,164(sp)
    9a98:	003dff06 	br	9298 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009298>
    9a9c:	d8802104 	addi	r2,sp,132
    9aa0:	d8800315 	stw	r2,12(sp)
    9aa4:	d8802504 	addi	r2,sp,148
    9aa8:	d8800215 	stw	r2,8(sp)
    9aac:	d8802604 	addi	r2,sp,152
    9ab0:	d8800115 	stw	r2,4(sp)
    9ab4:	d8802917 	ldw	r2,164(sp)
    9ab8:	d9403617 	ldw	r5,216(sp)
    9abc:	d9002c17 	ldw	r4,176(sp)
    9ac0:	d8800015 	stw	r2,0(sp)
    9ac4:	01c000c4 	movi	r7,3
    9ac8:	980d883a 	mov	r6,r19
    9acc:	da003d15 	stw	r8,244(sp)
    9ad0:	000a2040 	call	a204 <_dtoa_r>
    9ad4:	d8c02917 	ldw	r3,164(sp)
    9ad8:	da003d17 	ldw	r8,244(sp)
    9adc:	1021883a 	mov	r16,r2
    9ae0:	10f9883a 	add	fp,r2,r3
    9ae4:	81000007 	ldb	r4,0(r16)
    9ae8:	00800c04 	movi	r2,48
    9aec:	20805e26 	beq	r4,r2,9c68 <___vfprintf_internal_r+0x2088>
    9af0:	d8c02617 	ldw	r3,152(sp)
    9af4:	e0f9883a 	add	fp,fp,r3
    9af8:	003e0a06 	br	9324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009324>
    9afc:	00c00b44 	movi	r3,45
    9b00:	24e0003c 	xorhi	r19,r4,32768
    9b04:	d8c02a05 	stb	r3,168(sp)
    9b08:	003de906 	br	92b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70092b0>
    9b0c:	d8c03217 	ldw	r3,200(sp)
    9b10:	00c07a0e 	bge	zero,r3,9cfc <___vfprintf_internal_r+0x211c>
    9b14:	00800044 	movi	r2,1
    9b18:	d9003317 	ldw	r4,204(sp)
    9b1c:	1105883a 	add	r2,r2,r4
    9b20:	d8802e15 	stw	r2,184(sp)
    9b24:	10004e16 	blt	r2,zero,9c60 <___vfprintf_internal_r+0x2080>
    9b28:	044019c4 	movi	r17,103
    9b2c:	003e2106 	br	93b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70093b4>
    9b30:	d9002917 	ldw	r4,164(sp)
    9b34:	d8802104 	addi	r2,sp,132
    9b38:	d8800315 	stw	r2,12(sp)
    9b3c:	d9000015 	stw	r4,0(sp)
    9b40:	d8802504 	addi	r2,sp,148
    9b44:	d9403617 	ldw	r5,216(sp)
    9b48:	d9002c17 	ldw	r4,176(sp)
    9b4c:	d8800215 	stw	r2,8(sp)
    9b50:	d8802604 	addi	r2,sp,152
    9b54:	d8800115 	stw	r2,4(sp)
    9b58:	01c000c4 	movi	r7,3
    9b5c:	980d883a 	mov	r6,r19
    9b60:	da003d15 	stw	r8,244(sp)
    9b64:	000a2040 	call	a204 <_dtoa_r>
    9b68:	d8c02917 	ldw	r3,164(sp)
    9b6c:	da003d17 	ldw	r8,244(sp)
    9b70:	1021883a 	mov	r16,r2
    9b74:	00801184 	movi	r2,70
    9b78:	80f9883a 	add	fp,r16,r3
    9b7c:	88bfd926 	beq	r17,r2,9ae4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ae4>
    9b80:	003de806 	br	9324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009324>
    9b84:	d9002917 	ldw	r4,164(sp)
    9b88:	00c04d0e 	bge	zero,r3,9cc0 <___vfprintf_internal_r+0x20e0>
    9b8c:	2000441e 	bne	r4,zero,9ca0 <___vfprintf_internal_r+0x20c0>
    9b90:	9480004c 	andi	r18,r18,1
    9b94:	9000421e 	bne	r18,zero,9ca0 <___vfprintf_internal_r+0x20c0>
    9b98:	1805883a 	mov	r2,r3
    9b9c:	18007016 	blt	r3,zero,9d60 <___vfprintf_internal_r+0x2180>
    9ba0:	d8c03217 	ldw	r3,200(sp)
    9ba4:	d8c02e15 	stw	r3,184(sp)
    9ba8:	003e0206 	br	93b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70093b4>
    9bac:	df0022c4 	addi	fp,sp,139
    9bb0:	dc002915 	stw	r16,164(sp)
    9bb4:	4027883a 	mov	r19,r8
    9bb8:	e021883a 	mov	r16,fp
    9bbc:	b009883a 	mov	r4,r22
    9bc0:	01400284 	movi	r5,10
    9bc4:	0010fe40 	call	10fe4 <__modsi3>
    9bc8:	10800c04 	addi	r2,r2,48
    9bcc:	843fffc4 	addi	r16,r16,-1
    9bd0:	b009883a 	mov	r4,r22
    9bd4:	01400284 	movi	r5,10
    9bd8:	80800005 	stb	r2,0(r16)
    9bdc:	0010f600 	call	10f60 <__divsi3>
    9be0:	102d883a 	mov	r22,r2
    9be4:	00800244 	movi	r2,9
    9be8:	15bff416 	blt	r2,r22,9bbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009bbc>
    9bec:	9811883a 	mov	r8,r19
    9bf0:	b0800c04 	addi	r2,r22,48
    9bf4:	8027883a 	mov	r19,r16
    9bf8:	997fffc4 	addi	r5,r19,-1
    9bfc:	98bfffc5 	stb	r2,-1(r19)
    9c00:	dc002917 	ldw	r16,164(sp)
    9c04:	2f006a2e 	bgeu	r5,fp,9db0 <___vfprintf_internal_r+0x21d0>
    9c08:	d9c02384 	addi	r7,sp,142
    9c0c:	3ccfc83a 	sub	r7,r7,r19
    9c10:	d9002344 	addi	r4,sp,141
    9c14:	e1cf883a 	add	r7,fp,r7
    9c18:	00000106 	br	9c20 <___vfprintf_internal_r+0x2040>
    9c1c:	28800003 	ldbu	r2,0(r5)
    9c20:	20800005 	stb	r2,0(r4)
    9c24:	21000044 	addi	r4,r4,1
    9c28:	29400044 	addi	r5,r5,1
    9c2c:	393ffb1e 	bne	r7,r4,9c1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009c1c>
    9c30:	d8802304 	addi	r2,sp,140
    9c34:	14c5c83a 	sub	r2,r2,r19
    9c38:	d8c02344 	addi	r3,sp,141
    9c3c:	1885883a 	add	r2,r3,r2
    9c40:	003f7006 	br	9a04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a04>
    9c44:	0005883a 	mov	r2,zero
    9c48:	003f0f06 	br	9888 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009888>
    9c4c:	d8c03217 	ldw	r3,200(sp)
    9c50:	18c00044 	addi	r3,r3,1
    9c54:	d8c02e15 	stw	r3,184(sp)
    9c58:	1805883a 	mov	r2,r3
    9c5c:	183fb20e 	bge	r3,zero,9b28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b28>
    9c60:	0005883a 	mov	r2,zero
    9c64:	003fb006 	br	9b28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b28>
    9c68:	d9003617 	ldw	r4,216(sp)
    9c6c:	000d883a 	mov	r6,zero
    9c70:	000f883a 	mov	r7,zero
    9c74:	980b883a 	mov	r5,r19
    9c78:	d8c03c15 	stw	r3,240(sp)
    9c7c:	da003d15 	stw	r8,244(sp)
    9c80:	00119fc0 	call	119fc <__eqdf2>
    9c84:	d8c03c17 	ldw	r3,240(sp)
    9c88:	da003d17 	ldw	r8,244(sp)
    9c8c:	103f9826 	beq	r2,zero,9af0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009af0>
    9c90:	00800044 	movi	r2,1
    9c94:	10c7c83a 	sub	r3,r2,r3
    9c98:	d8c02615 	stw	r3,152(sp)
    9c9c:	003f9506 	br	9af4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009af4>
    9ca0:	d9002917 	ldw	r4,164(sp)
    9ca4:	d8c03217 	ldw	r3,200(sp)
    9ca8:	20800044 	addi	r2,r4,1
    9cac:	1885883a 	add	r2,r3,r2
    9cb0:	d8802e15 	stw	r2,184(sp)
    9cb4:	103dbf0e 	bge	r2,zero,93b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70093b4>
    9cb8:	0005883a 	mov	r2,zero
    9cbc:	003dbd06 	br	93b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70093b4>
    9cc0:	2000211e 	bne	r4,zero,9d48 <___vfprintf_internal_r+0x2168>
    9cc4:	9480004c 	andi	r18,r18,1
    9cc8:	90001f1e 	bne	r18,zero,9d48 <___vfprintf_internal_r+0x2168>
    9ccc:	00800044 	movi	r2,1
    9cd0:	d8802e15 	stw	r2,184(sp)
    9cd4:	003db706 	br	93b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70093b4>
    9cd8:	00800b44 	movi	r2,45
    9cdc:	05adc83a 	sub	r22,zero,r22
    9ce0:	d8802305 	stb	r2,140(sp)
    9ce4:	003f3f06 	br	99e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70099e4>
    9ce8:	0005883a 	mov	r2,zero
    9cec:	003f5206 	br	9a38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a38>
    9cf0:	90a4703a 	and	r18,r18,r2
    9cf4:	903f4e26 	beq	r18,zero,9a30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a30>
    9cf8:	003f4a06 	br	9a24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a24>
    9cfc:	00800084 	movi	r2,2
    9d00:	10c5c83a 	sub	r2,r2,r3
    9d04:	003f8406 	br	9b18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b18>
    9d08:	d8802d17 	ldw	r2,180(sp)
    9d0c:	d9002d17 	ldw	r4,180(sp)
    9d10:	ac400043 	ldbu	r17,1(r21)
    9d14:	10800017 	ldw	r2,0(r2)
    9d18:	582b883a 	mov	r21,r11
    9d1c:	d8802915 	stw	r2,164(sp)
    9d20:	20800104 	addi	r2,r4,4
    9d24:	d9002917 	ldw	r4,164(sp)
    9d28:	d8802d15 	stw	r2,180(sp)
    9d2c:	203e7a0e 	bge	r4,zero,9718 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009718>
    9d30:	8c403fcc 	andi	r17,r17,255
    9d34:	00bfffc4 	movi	r2,-1
    9d38:	8c40201c 	xori	r17,r17,128
    9d3c:	d8802915 	stw	r2,164(sp)
    9d40:	8c7fe004 	addi	r17,r17,-128
    9d44:	00380706 	br	7d64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d64>
    9d48:	d8c02917 	ldw	r3,164(sp)
    9d4c:	18c00084 	addi	r3,r3,2
    9d50:	d8c02e15 	stw	r3,184(sp)
    9d54:	1805883a 	mov	r2,r3
    9d58:	183d960e 	bge	r3,zero,93b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70093b4>
    9d5c:	003fd606 	br	9cb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009cb8>
    9d60:	0005883a 	mov	r2,zero
    9d64:	003f8e06 	br	9ba0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ba0>
    9d68:	9080004c 	andi	r2,r18,1
    9d6c:	103f811e 	bne	r2,zero,9b74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b74>
    9d70:	d8802117 	ldw	r2,132(sp)
    9d74:	1405c83a 	sub	r2,r2,r16
    9d78:	d8803315 	stw	r2,204(sp)
    9d7c:	b47ef326 	beq	r22,r17,994c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700994c>
    9d80:	dd802617 	ldw	r22,152(sp)
    9d84:	003f1106 	br	99cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70099cc>
    9d88:	d9c02785 	stb	r7,158(sp)
    9d8c:	00390406 	br	81a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70081a0>
    9d90:	d9c02785 	stb	r7,158(sp)
    9d94:	0038d306 	br	80e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70080e4>
    9d98:	d9c02785 	stb	r7,158(sp)
    9d9c:	003a6106 	br	8724 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008724>
    9da0:	d9c02785 	stb	r7,158(sp)
    9da4:	003af806 	br	8988 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008988>
    9da8:	0005883a 	mov	r2,zero
    9dac:	003d7e06 	br	93a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70093a8>
    9db0:	d8802344 	addi	r2,sp,141
    9db4:	003f1306 	br	9a04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a04>
    9db8:	d9c02785 	stb	r7,158(sp)
    9dbc:	00392306 	br	824c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700824c>
    9dc0:	d9c02785 	stb	r7,158(sp)
    9dc4:	003aa906 	br	886c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700886c>
    9dc8:	d9c02785 	stb	r7,158(sp)
    9dcc:	003a3d06 	br	86c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70086c4>
    9dd0:	d9c02785 	stb	r7,158(sp)
    9dd4:	003aca06 	br	8900 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008900>

00009dd8 <__vfprintf_internal>:
    9dd8:	008000b4 	movhi	r2,2
    9ddc:	1088e204 	addi	r2,r2,9096
    9de0:	300f883a 	mov	r7,r6
    9de4:	280d883a 	mov	r6,r5
    9de8:	200b883a 	mov	r5,r4
    9dec:	11000017 	ldw	r4,0(r2)
    9df0:	0007be01 	jmpi	7be0 <___vfprintf_internal_r>

00009df4 <__sbprintf>:
    9df4:	2880030b 	ldhu	r2,12(r5)
    9df8:	2ac01917 	ldw	r11,100(r5)
    9dfc:	2a80038b 	ldhu	r10,14(r5)
    9e00:	2a400717 	ldw	r9,28(r5)
    9e04:	2a000917 	ldw	r8,36(r5)
    9e08:	defee204 	addi	sp,sp,-1144
    9e0c:	00c10004 	movi	r3,1024
    9e10:	dc011a15 	stw	r16,1128(sp)
    9e14:	10bfff4c 	andi	r2,r2,65533
    9e18:	2821883a 	mov	r16,r5
    9e1c:	d8cb883a 	add	r5,sp,r3
    9e20:	dc811c15 	stw	r18,1136(sp)
    9e24:	dc411b15 	stw	r17,1132(sp)
    9e28:	dfc11d15 	stw	ra,1140(sp)
    9e2c:	2025883a 	mov	r18,r4
    9e30:	d881030d 	sth	r2,1036(sp)
    9e34:	dac11915 	stw	r11,1124(sp)
    9e38:	da81038d 	sth	r10,1038(sp)
    9e3c:	da410715 	stw	r9,1052(sp)
    9e40:	da010915 	stw	r8,1060(sp)
    9e44:	dec10015 	stw	sp,1024(sp)
    9e48:	dec10415 	stw	sp,1040(sp)
    9e4c:	d8c10215 	stw	r3,1032(sp)
    9e50:	d8c10515 	stw	r3,1044(sp)
    9e54:	d8010615 	stw	zero,1048(sp)
    9e58:	0007be00 	call	7be0 <___vfprintf_internal_r>
    9e5c:	1023883a 	mov	r17,r2
    9e60:	10000416 	blt	r2,zero,9e74 <__sbprintf+0x80>
    9e64:	d9410004 	addi	r5,sp,1024
    9e68:	9009883a 	mov	r4,r18
    9e6c:	000baa80 	call	baa8 <_fflush_r>
    9e70:	10000d1e 	bne	r2,zero,9ea8 <__sbprintf+0xb4>
    9e74:	d881030b 	ldhu	r2,1036(sp)
    9e78:	1080100c 	andi	r2,r2,64
    9e7c:	10000326 	beq	r2,zero,9e8c <__sbprintf+0x98>
    9e80:	8080030b 	ldhu	r2,12(r16)
    9e84:	10801014 	ori	r2,r2,64
    9e88:	8080030d 	sth	r2,12(r16)
    9e8c:	8805883a 	mov	r2,r17
    9e90:	dfc11d17 	ldw	ra,1140(sp)
    9e94:	dc811c17 	ldw	r18,1136(sp)
    9e98:	dc411b17 	ldw	r17,1132(sp)
    9e9c:	dc011a17 	ldw	r16,1128(sp)
    9ea0:	dec11e04 	addi	sp,sp,1144
    9ea4:	f800283a 	ret
    9ea8:	047fffc4 	movi	r17,-1
    9eac:	003ff106 	br	9e74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e74>

00009eb0 <__swsetup_r>:
    9eb0:	008000b4 	movhi	r2,2
    9eb4:	defffd04 	addi	sp,sp,-12
    9eb8:	1088e204 	addi	r2,r2,9096
    9ebc:	dc400115 	stw	r17,4(sp)
    9ec0:	2023883a 	mov	r17,r4
    9ec4:	11000017 	ldw	r4,0(r2)
    9ec8:	dc000015 	stw	r16,0(sp)
    9ecc:	dfc00215 	stw	ra,8(sp)
    9ed0:	2821883a 	mov	r16,r5
    9ed4:	20000226 	beq	r4,zero,9ee0 <__swsetup_r+0x30>
    9ed8:	20800e17 	ldw	r2,56(r4)
    9edc:	10003126 	beq	r2,zero,9fa4 <__swsetup_r+0xf4>
    9ee0:	8080030b 	ldhu	r2,12(r16)
    9ee4:	10c0020c 	andi	r3,r2,8
    9ee8:	1009883a 	mov	r4,r2
    9eec:	18000f26 	beq	r3,zero,9f2c <__swsetup_r+0x7c>
    9ef0:	80c00417 	ldw	r3,16(r16)
    9ef4:	18001526 	beq	r3,zero,9f4c <__swsetup_r+0x9c>
    9ef8:	1100004c 	andi	r4,r2,1
    9efc:	20001c1e 	bne	r4,zero,9f70 <__swsetup_r+0xc0>
    9f00:	1080008c 	andi	r2,r2,2
    9f04:	1000291e 	bne	r2,zero,9fac <__swsetup_r+0xfc>
    9f08:	80800517 	ldw	r2,20(r16)
    9f0c:	80800215 	stw	r2,8(r16)
    9f10:	18001c26 	beq	r3,zero,9f84 <__swsetup_r+0xd4>
    9f14:	0005883a 	mov	r2,zero
    9f18:	dfc00217 	ldw	ra,8(sp)
    9f1c:	dc400117 	ldw	r17,4(sp)
    9f20:	dc000017 	ldw	r16,0(sp)
    9f24:	dec00304 	addi	sp,sp,12
    9f28:	f800283a 	ret
    9f2c:	2080040c 	andi	r2,r4,16
    9f30:	10002e26 	beq	r2,zero,9fec <__swsetup_r+0x13c>
    9f34:	2080010c 	andi	r2,r4,4
    9f38:	10001e1e 	bne	r2,zero,9fb4 <__swsetup_r+0x104>
    9f3c:	80c00417 	ldw	r3,16(r16)
    9f40:	20800214 	ori	r2,r4,8
    9f44:	8080030d 	sth	r2,12(r16)
    9f48:	183feb1e 	bne	r3,zero,9ef8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ef8>
    9f4c:	1100a00c 	andi	r4,r2,640
    9f50:	01408004 	movi	r5,512
    9f54:	217fe826 	beq	r4,r5,9ef8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ef8>
    9f58:	800b883a 	mov	r5,r16
    9f5c:	8809883a 	mov	r4,r17
    9f60:	000ca280 	call	ca28 <__smakebuf_r>
    9f64:	8080030b 	ldhu	r2,12(r16)
    9f68:	80c00417 	ldw	r3,16(r16)
    9f6c:	003fe206 	br	9ef8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ef8>
    9f70:	80800517 	ldw	r2,20(r16)
    9f74:	80000215 	stw	zero,8(r16)
    9f78:	0085c83a 	sub	r2,zero,r2
    9f7c:	80800615 	stw	r2,24(r16)
    9f80:	183fe41e 	bne	r3,zero,9f14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f14>
    9f84:	80c0030b 	ldhu	r3,12(r16)
    9f88:	0005883a 	mov	r2,zero
    9f8c:	1900200c 	andi	r4,r3,128
    9f90:	203fe126 	beq	r4,zero,9f18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f18>
    9f94:	18c01014 	ori	r3,r3,64
    9f98:	80c0030d 	sth	r3,12(r16)
    9f9c:	00bfffc4 	movi	r2,-1
    9fa0:	003fdd06 	br	9f18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f18>
    9fa4:	000be840 	call	be84 <__sinit>
    9fa8:	003fcd06 	br	9ee0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ee0>
    9fac:	0005883a 	mov	r2,zero
    9fb0:	003fd606 	br	9f0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f0c>
    9fb4:	81400c17 	ldw	r5,48(r16)
    9fb8:	28000626 	beq	r5,zero,9fd4 <__swsetup_r+0x124>
    9fbc:	80801004 	addi	r2,r16,64
    9fc0:	28800326 	beq	r5,r2,9fd0 <__swsetup_r+0x120>
    9fc4:	8809883a 	mov	r4,r17
    9fc8:	000bff80 	call	bff8 <_free_r>
    9fcc:	8100030b 	ldhu	r4,12(r16)
    9fd0:	80000c15 	stw	zero,48(r16)
    9fd4:	80c00417 	ldw	r3,16(r16)
    9fd8:	00bff6c4 	movi	r2,-37
    9fdc:	1108703a 	and	r4,r2,r4
    9fe0:	80000115 	stw	zero,4(r16)
    9fe4:	80c00015 	stw	r3,0(r16)
    9fe8:	003fd506 	br	9f40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f40>
    9fec:	00800244 	movi	r2,9
    9ff0:	88800015 	stw	r2,0(r17)
    9ff4:	20801014 	ori	r2,r4,64
    9ff8:	8080030d 	sth	r2,12(r16)
    9ffc:	00bfffc4 	movi	r2,-1
    a000:	003fc506 	br	9f18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f18>

0000a004 <quorem>:
    a004:	defff704 	addi	sp,sp,-36
    a008:	dc800215 	stw	r18,8(sp)
    a00c:	20800417 	ldw	r2,16(r4)
    a010:	2c800417 	ldw	r18,16(r5)
    a014:	dfc00815 	stw	ra,32(sp)
    a018:	ddc00715 	stw	r23,28(sp)
    a01c:	dd800615 	stw	r22,24(sp)
    a020:	dd400515 	stw	r21,20(sp)
    a024:	dd000415 	stw	r20,16(sp)
    a028:	dcc00315 	stw	r19,12(sp)
    a02c:	dc400115 	stw	r17,4(sp)
    a030:	dc000015 	stw	r16,0(sp)
    a034:	14807116 	blt	r2,r18,a1fc <quorem+0x1f8>
    a038:	94bfffc4 	addi	r18,r18,-1
    a03c:	94ad883a 	add	r22,r18,r18
    a040:	b5ad883a 	add	r22,r22,r22
    a044:	2c400504 	addi	r17,r5,20
    a048:	8da9883a 	add	r20,r17,r22
    a04c:	25400504 	addi	r21,r4,20
    a050:	282f883a 	mov	r23,r5
    a054:	adad883a 	add	r22,r21,r22
    a058:	a1400017 	ldw	r5,0(r20)
    a05c:	2021883a 	mov	r16,r4
    a060:	b1000017 	ldw	r4,0(r22)
    a064:	29400044 	addi	r5,r5,1
    a068:	00110580 	call	11058 <__udivsi3>
    a06c:	1027883a 	mov	r19,r2
    a070:	10002c26 	beq	r2,zero,a124 <quorem+0x120>
    a074:	a813883a 	mov	r9,r21
    a078:	880b883a 	mov	r5,r17
    a07c:	0009883a 	mov	r4,zero
    a080:	000d883a 	mov	r6,zero
    a084:	2a000017 	ldw	r8,0(r5)
    a088:	49c00017 	ldw	r7,0(r9)
    a08c:	29400104 	addi	r5,r5,4
    a090:	40bfffcc 	andi	r2,r8,65535
    a094:	14c5383a 	mul	r2,r2,r19
    a098:	4010d43a 	srli	r8,r8,16
    a09c:	38ffffcc 	andi	r3,r7,65535
    a0a0:	1105883a 	add	r2,r2,r4
    a0a4:	1008d43a 	srli	r4,r2,16
    a0a8:	44d1383a 	mul	r8,r8,r19
    a0ac:	198d883a 	add	r6,r3,r6
    a0b0:	10ffffcc 	andi	r3,r2,65535
    a0b4:	30c7c83a 	sub	r3,r6,r3
    a0b8:	380ed43a 	srli	r7,r7,16
    a0bc:	4105883a 	add	r2,r8,r4
    a0c0:	180dd43a 	srai	r6,r3,16
    a0c4:	113fffcc 	andi	r4,r2,65535
    a0c8:	390fc83a 	sub	r7,r7,r4
    a0cc:	398d883a 	add	r6,r7,r6
    a0d0:	300e943a 	slli	r7,r6,16
    a0d4:	18ffffcc 	andi	r3,r3,65535
    a0d8:	1008d43a 	srli	r4,r2,16
    a0dc:	38ceb03a 	or	r7,r7,r3
    a0e0:	49c00015 	stw	r7,0(r9)
    a0e4:	300dd43a 	srai	r6,r6,16
    a0e8:	4a400104 	addi	r9,r9,4
    a0ec:	a17fe52e 	bgeu	r20,r5,a084 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a084>
    a0f0:	b0800017 	ldw	r2,0(r22)
    a0f4:	10000b1e 	bne	r2,zero,a124 <quorem+0x120>
    a0f8:	b0bfff04 	addi	r2,r22,-4
    a0fc:	a880082e 	bgeu	r21,r2,a120 <quorem+0x11c>
    a100:	b0ffff17 	ldw	r3,-4(r22)
    a104:	18000326 	beq	r3,zero,a114 <quorem+0x110>
    a108:	00000506 	br	a120 <quorem+0x11c>
    a10c:	10c00017 	ldw	r3,0(r2)
    a110:	1800031e 	bne	r3,zero,a120 <quorem+0x11c>
    a114:	10bfff04 	addi	r2,r2,-4
    a118:	94bfffc4 	addi	r18,r18,-1
    a11c:	a8bffb36 	bltu	r21,r2,a10c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a10c>
    a120:	84800415 	stw	r18,16(r16)
    a124:	b80b883a 	mov	r5,r23
    a128:	8009883a 	mov	r4,r16
    a12c:	000d6ec0 	call	d6ec <__mcmp>
    a130:	10002616 	blt	r2,zero,a1cc <quorem+0x1c8>
    a134:	9cc00044 	addi	r19,r19,1
    a138:	a805883a 	mov	r2,r21
    a13c:	000b883a 	mov	r5,zero
    a140:	11000017 	ldw	r4,0(r2)
    a144:	89800017 	ldw	r6,0(r17)
    a148:	10800104 	addi	r2,r2,4
    a14c:	20ffffcc 	andi	r3,r4,65535
    a150:	194b883a 	add	r5,r3,r5
    a154:	30ffffcc 	andi	r3,r6,65535
    a158:	28c7c83a 	sub	r3,r5,r3
    a15c:	300cd43a 	srli	r6,r6,16
    a160:	2008d43a 	srli	r4,r4,16
    a164:	180bd43a 	srai	r5,r3,16
    a168:	18ffffcc 	andi	r3,r3,65535
    a16c:	2189c83a 	sub	r4,r4,r6
    a170:	2149883a 	add	r4,r4,r5
    a174:	200c943a 	slli	r6,r4,16
    a178:	8c400104 	addi	r17,r17,4
    a17c:	200bd43a 	srai	r5,r4,16
    a180:	30c6b03a 	or	r3,r6,r3
    a184:	10ffff15 	stw	r3,-4(r2)
    a188:	a47fed2e 	bgeu	r20,r17,a140 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a140>
    a18c:	9485883a 	add	r2,r18,r18
    a190:	1085883a 	add	r2,r2,r2
    a194:	a887883a 	add	r3,r21,r2
    a198:	18800017 	ldw	r2,0(r3)
    a19c:	10000b1e 	bne	r2,zero,a1cc <quorem+0x1c8>
    a1a0:	18bfff04 	addi	r2,r3,-4
    a1a4:	a880082e 	bgeu	r21,r2,a1c8 <quorem+0x1c4>
    a1a8:	18ffff17 	ldw	r3,-4(r3)
    a1ac:	18000326 	beq	r3,zero,a1bc <quorem+0x1b8>
    a1b0:	00000506 	br	a1c8 <quorem+0x1c4>
    a1b4:	10c00017 	ldw	r3,0(r2)
    a1b8:	1800031e 	bne	r3,zero,a1c8 <quorem+0x1c4>
    a1bc:	10bfff04 	addi	r2,r2,-4
    a1c0:	94bfffc4 	addi	r18,r18,-1
    a1c4:	a8bffb36 	bltu	r21,r2,a1b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a1b4>
    a1c8:	84800415 	stw	r18,16(r16)
    a1cc:	9805883a 	mov	r2,r19
    a1d0:	dfc00817 	ldw	ra,32(sp)
    a1d4:	ddc00717 	ldw	r23,28(sp)
    a1d8:	dd800617 	ldw	r22,24(sp)
    a1dc:	dd400517 	ldw	r21,20(sp)
    a1e0:	dd000417 	ldw	r20,16(sp)
    a1e4:	dcc00317 	ldw	r19,12(sp)
    a1e8:	dc800217 	ldw	r18,8(sp)
    a1ec:	dc400117 	ldw	r17,4(sp)
    a1f0:	dc000017 	ldw	r16,0(sp)
    a1f4:	dec00904 	addi	sp,sp,36
    a1f8:	f800283a 	ret
    a1fc:	0005883a 	mov	r2,zero
    a200:	003ff306 	br	a1d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a1d0>

0000a204 <_dtoa_r>:
    a204:	20801017 	ldw	r2,64(r4)
    a208:	deffde04 	addi	sp,sp,-136
    a20c:	df002015 	stw	fp,128(sp)
    a210:	dcc01b15 	stw	r19,108(sp)
    a214:	dc801a15 	stw	r18,104(sp)
    a218:	dc401915 	stw	r17,100(sp)
    a21c:	dc001815 	stw	r16,96(sp)
    a220:	dfc02115 	stw	ra,132(sp)
    a224:	ddc01f15 	stw	r23,124(sp)
    a228:	dd801e15 	stw	r22,120(sp)
    a22c:	dd401d15 	stw	r21,116(sp)
    a230:	dd001c15 	stw	r20,112(sp)
    a234:	d9c00315 	stw	r7,12(sp)
    a238:	2039883a 	mov	fp,r4
    a23c:	3023883a 	mov	r17,r6
    a240:	2825883a 	mov	r18,r5
    a244:	dc002417 	ldw	r16,144(sp)
    a248:	3027883a 	mov	r19,r6
    a24c:	10000826 	beq	r2,zero,a270 <_dtoa_r+0x6c>
    a250:	21801117 	ldw	r6,68(r4)
    a254:	00c00044 	movi	r3,1
    a258:	100b883a 	mov	r5,r2
    a25c:	1986983a 	sll	r3,r3,r6
    a260:	11800115 	stw	r6,4(r2)
    a264:	10c00215 	stw	r3,8(r2)
    a268:	000cecc0 	call	cecc <_Bfree>
    a26c:	e0001015 	stw	zero,64(fp)
    a270:	88002e16 	blt	r17,zero,a32c <_dtoa_r+0x128>
    a274:	80000015 	stw	zero,0(r16)
    a278:	889ffc2c 	andhi	r2,r17,32752
    a27c:	00dffc34 	movhi	r3,32752
    a280:	10c01c26 	beq	r2,r3,a2f4 <_dtoa_r+0xf0>
    a284:	000d883a 	mov	r6,zero
    a288:	000f883a 	mov	r7,zero
    a28c:	9009883a 	mov	r4,r18
    a290:	980b883a 	mov	r5,r19
    a294:	00119fc0 	call	119fc <__eqdf2>
    a298:	10002b1e 	bne	r2,zero,a348 <_dtoa_r+0x144>
    a29c:	d9c02317 	ldw	r7,140(sp)
    a2a0:	00800044 	movi	r2,1
    a2a4:	38800015 	stw	r2,0(r7)
    a2a8:	d8802517 	ldw	r2,148(sp)
    a2ac:	10019e26 	beq	r2,zero,a928 <_dtoa_r+0x724>
    a2b0:	d8c02517 	ldw	r3,148(sp)
    a2b4:	008000b4 	movhi	r2,2
    a2b8:	10800044 	addi	r2,r2,1
    a2bc:	18800015 	stw	r2,0(r3)
    a2c0:	10bfffc4 	addi	r2,r2,-1
    a2c4:	dfc02117 	ldw	ra,132(sp)
    a2c8:	df002017 	ldw	fp,128(sp)
    a2cc:	ddc01f17 	ldw	r23,124(sp)
    a2d0:	dd801e17 	ldw	r22,120(sp)
    a2d4:	dd401d17 	ldw	r21,116(sp)
    a2d8:	dd001c17 	ldw	r20,112(sp)
    a2dc:	dcc01b17 	ldw	r19,108(sp)
    a2e0:	dc801a17 	ldw	r18,104(sp)
    a2e4:	dc401917 	ldw	r17,100(sp)
    a2e8:	dc001817 	ldw	r16,96(sp)
    a2ec:	dec02204 	addi	sp,sp,136
    a2f0:	f800283a 	ret
    a2f4:	d8c02317 	ldw	r3,140(sp)
    a2f8:	0089c3c4 	movi	r2,9999
    a2fc:	18800015 	stw	r2,0(r3)
    a300:	90017726 	beq	r18,zero,a8e0 <_dtoa_r+0x6dc>
    a304:	008000b4 	movhi	r2,2
    a308:	10800c04 	addi	r2,r2,48
    a30c:	d9002517 	ldw	r4,148(sp)
    a310:	203fec26 	beq	r4,zero,a2c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a2c4>
    a314:	10c000c7 	ldb	r3,3(r2)
    a318:	1801781e 	bne	r3,zero,a8fc <_dtoa_r+0x6f8>
    a31c:	10c000c4 	addi	r3,r2,3
    a320:	d9802517 	ldw	r6,148(sp)
    a324:	30c00015 	stw	r3,0(r6)
    a328:	003fe606 	br	a2c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a2c4>
    a32c:	04e00034 	movhi	r19,32768
    a330:	9cffffc4 	addi	r19,r19,-1
    a334:	00800044 	movi	r2,1
    a338:	8ce6703a 	and	r19,r17,r19
    a33c:	80800015 	stw	r2,0(r16)
    a340:	9823883a 	mov	r17,r19
    a344:	003fcc06 	br	a278 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a278>
    a348:	d8800204 	addi	r2,sp,8
    a34c:	d8800015 	stw	r2,0(sp)
    a350:	d9c00104 	addi	r7,sp,4
    a354:	900b883a 	mov	r5,r18
    a358:	980d883a 	mov	r6,r19
    a35c:	e009883a 	mov	r4,fp
    a360:	8820d53a 	srli	r16,r17,20
    a364:	000dab80 	call	dab8 <__d2b>
    a368:	d8800915 	stw	r2,36(sp)
    a36c:	8001651e 	bne	r16,zero,a904 <_dtoa_r+0x700>
    a370:	dd800217 	ldw	r22,8(sp)
    a374:	dc000117 	ldw	r16,4(sp)
    a378:	00800804 	movi	r2,32
    a37c:	b421883a 	add	r16,r22,r16
    a380:	80c10c84 	addi	r3,r16,1074
    a384:	10c2d10e 	bge	r2,r3,aecc <_dtoa_r+0xcc8>
    a388:	00801004 	movi	r2,64
    a38c:	81010484 	addi	r4,r16,1042
    a390:	10c7c83a 	sub	r3,r2,r3
    a394:	9108d83a 	srl	r4,r18,r4
    a398:	88e2983a 	sll	r17,r17,r3
    a39c:	2448b03a 	or	r4,r4,r17
    a3a0:	0012c680 	call	12c68 <__floatunsidf>
    a3a4:	017f8434 	movhi	r5,65040
    a3a8:	01800044 	movi	r6,1
    a3ac:	1009883a 	mov	r4,r2
    a3b0:	194b883a 	add	r5,r3,r5
    a3b4:	843fffc4 	addi	r16,r16,-1
    a3b8:	d9801115 	stw	r6,68(sp)
    a3bc:	000d883a 	mov	r6,zero
    a3c0:	01cffe34 	movhi	r7,16376
    a3c4:	001236c0 	call	1236c <__subdf3>
    a3c8:	0198dbf4 	movhi	r6,25455
    a3cc:	01cff4f4 	movhi	r7,16339
    a3d0:	3190d844 	addi	r6,r6,17249
    a3d4:	39e1e9c4 	addi	r7,r7,-30809
    a3d8:	1009883a 	mov	r4,r2
    a3dc:	180b883a 	mov	r5,r3
    a3e0:	0011c540 	call	11c54 <__muldf3>
    a3e4:	01a2d874 	movhi	r6,35681
    a3e8:	01cff1f4 	movhi	r7,16327
    a3ec:	31b22cc4 	addi	r6,r6,-14157
    a3f0:	39e28a04 	addi	r7,r7,-30168
    a3f4:	180b883a 	mov	r5,r3
    a3f8:	1009883a 	mov	r4,r2
    a3fc:	0005a7c0 	call	5a7c <__adddf3>
    a400:	8009883a 	mov	r4,r16
    a404:	1029883a 	mov	r20,r2
    a408:	1823883a 	mov	r17,r3
    a40c:	00063a80 	call	63a8 <__floatsidf>
    a410:	019427f4 	movhi	r6,20639
    a414:	01cff4f4 	movhi	r7,16339
    a418:	319e7ec4 	addi	r6,r6,31227
    a41c:	39d104c4 	addi	r7,r7,17427
    a420:	1009883a 	mov	r4,r2
    a424:	180b883a 	mov	r5,r3
    a428:	0011c540 	call	11c54 <__muldf3>
    a42c:	100d883a 	mov	r6,r2
    a430:	180f883a 	mov	r7,r3
    a434:	a009883a 	mov	r4,r20
    a438:	880b883a 	mov	r5,r17
    a43c:	0005a7c0 	call	5a7c <__adddf3>
    a440:	1009883a 	mov	r4,r2
    a444:	180b883a 	mov	r5,r3
    a448:	1029883a 	mov	r20,r2
    a44c:	1823883a 	mov	r17,r3
    a450:	00063280 	call	6328 <__fixdfsi>
    a454:	000d883a 	mov	r6,zero
    a458:	000f883a 	mov	r7,zero
    a45c:	a009883a 	mov	r4,r20
    a460:	880b883a 	mov	r5,r17
    a464:	d8800515 	stw	r2,20(sp)
    a468:	0011b600 	call	11b60 <__ledf2>
    a46c:	10028716 	blt	r2,zero,ae8c <_dtoa_r+0xc88>
    a470:	d8c00517 	ldw	r3,20(sp)
    a474:	00800584 	movi	r2,22
    a478:	10c27536 	bltu	r2,r3,ae50 <_dtoa_r+0xc4c>
    a47c:	180490fa 	slli	r2,r3,3
    a480:	00c000b4 	movhi	r3,2
    a484:	18c02804 	addi	r3,r3,160
    a488:	1885883a 	add	r2,r3,r2
    a48c:	11000017 	ldw	r4,0(r2)
    a490:	11400117 	ldw	r5,4(r2)
    a494:	900d883a 	mov	r6,r18
    a498:	980f883a 	mov	r7,r19
    a49c:	0011a840 	call	11a84 <__gedf2>
    a4a0:	00828d0e 	bge	zero,r2,aed8 <_dtoa_r+0xcd4>
    a4a4:	d9000517 	ldw	r4,20(sp)
    a4a8:	d8000e15 	stw	zero,56(sp)
    a4ac:	213fffc4 	addi	r4,r4,-1
    a4b0:	d9000515 	stw	r4,20(sp)
    a4b4:	b42dc83a 	sub	r22,r22,r16
    a4b8:	b5bfffc4 	addi	r22,r22,-1
    a4bc:	b0026f16 	blt	r22,zero,ae7c <_dtoa_r+0xc78>
    a4c0:	d8000815 	stw	zero,32(sp)
    a4c4:	d9c00517 	ldw	r7,20(sp)
    a4c8:	38026416 	blt	r7,zero,ae5c <_dtoa_r+0xc58>
    a4cc:	b1ed883a 	add	r22,r22,r7
    a4d0:	d9c00d15 	stw	r7,52(sp)
    a4d4:	d8000a15 	stw	zero,40(sp)
    a4d8:	d9800317 	ldw	r6,12(sp)
    a4dc:	00800244 	movi	r2,9
    a4e0:	11811436 	bltu	r2,r6,a934 <_dtoa_r+0x730>
    a4e4:	00800144 	movi	r2,5
    a4e8:	1184e10e 	bge	r2,r6,b870 <_dtoa_r+0x166c>
    a4ec:	31bfff04 	addi	r6,r6,-4
    a4f0:	d9800315 	stw	r6,12(sp)
    a4f4:	0023883a 	mov	r17,zero
    a4f8:	d9800317 	ldw	r6,12(sp)
    a4fc:	008000c4 	movi	r2,3
    a500:	30836726 	beq	r6,r2,b2a0 <_dtoa_r+0x109c>
    a504:	1183410e 	bge	r2,r6,b20c <_dtoa_r+0x1008>
    a508:	d9c00317 	ldw	r7,12(sp)
    a50c:	00800104 	movi	r2,4
    a510:	38827c26 	beq	r7,r2,af04 <_dtoa_r+0xd00>
    a514:	00800144 	movi	r2,5
    a518:	3884c41e 	bne	r7,r2,b82c <_dtoa_r+0x1628>
    a51c:	00800044 	movi	r2,1
    a520:	d8800b15 	stw	r2,44(sp)
    a524:	d8c00517 	ldw	r3,20(sp)
    a528:	d9002217 	ldw	r4,136(sp)
    a52c:	1907883a 	add	r3,r3,r4
    a530:	19800044 	addi	r6,r3,1
    a534:	d8c00c15 	stw	r3,48(sp)
    a538:	d9800615 	stw	r6,24(sp)
    a53c:	0183a40e 	bge	zero,r6,b3d0 <_dtoa_r+0x11cc>
    a540:	d9800617 	ldw	r6,24(sp)
    a544:	3021883a 	mov	r16,r6
    a548:	e0001115 	stw	zero,68(fp)
    a54c:	008005c4 	movi	r2,23
    a550:	1184c92e 	bgeu	r2,r6,b878 <_dtoa_r+0x1674>
    a554:	00c00044 	movi	r3,1
    a558:	00800104 	movi	r2,4
    a55c:	1085883a 	add	r2,r2,r2
    a560:	11000504 	addi	r4,r2,20
    a564:	180b883a 	mov	r5,r3
    a568:	18c00044 	addi	r3,r3,1
    a56c:	313ffb2e 	bgeu	r6,r4,a55c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a55c>
    a570:	e1401115 	stw	r5,68(fp)
    a574:	e009883a 	mov	r4,fp
    a578:	000ce240 	call	ce24 <_Balloc>
    a57c:	d8800715 	stw	r2,28(sp)
    a580:	e0801015 	stw	r2,64(fp)
    a584:	00800384 	movi	r2,14
    a588:	1400f736 	bltu	r2,r16,a968 <_dtoa_r+0x764>
    a58c:	8800f626 	beq	r17,zero,a968 <_dtoa_r+0x764>
    a590:	d9c00517 	ldw	r7,20(sp)
    a594:	01c39a0e 	bge	zero,r7,b400 <_dtoa_r+0x11fc>
    a598:	388003cc 	andi	r2,r7,15
    a59c:	100490fa 	slli	r2,r2,3
    a5a0:	382bd13a 	srai	r21,r7,4
    a5a4:	00c000b4 	movhi	r3,2
    a5a8:	18c02804 	addi	r3,r3,160
    a5ac:	1885883a 	add	r2,r3,r2
    a5b0:	a8c0040c 	andi	r3,r21,16
    a5b4:	12400017 	ldw	r9,0(r2)
    a5b8:	12000117 	ldw	r8,4(r2)
    a5bc:	18037926 	beq	r3,zero,b3a4 <_dtoa_r+0x11a0>
    a5c0:	008000b4 	movhi	r2,2
    a5c4:	10801e04 	addi	r2,r2,120
    a5c8:	11800817 	ldw	r6,32(r2)
    a5cc:	11c00917 	ldw	r7,36(r2)
    a5d0:	9009883a 	mov	r4,r18
    a5d4:	980b883a 	mov	r5,r19
    a5d8:	da001715 	stw	r8,92(sp)
    a5dc:	da401615 	stw	r9,88(sp)
    a5e0:	00111140 	call	11114 <__divdf3>
    a5e4:	da001717 	ldw	r8,92(sp)
    a5e8:	da401617 	ldw	r9,88(sp)
    a5ec:	ad4003cc 	andi	r21,r21,15
    a5f0:	040000c4 	movi	r16,3
    a5f4:	1023883a 	mov	r17,r2
    a5f8:	1829883a 	mov	r20,r3
    a5fc:	a8001126 	beq	r21,zero,a644 <_dtoa_r+0x440>
    a600:	05c000b4 	movhi	r23,2
    a604:	bdc01e04 	addi	r23,r23,120
    a608:	4805883a 	mov	r2,r9
    a60c:	4007883a 	mov	r3,r8
    a610:	a980004c 	andi	r6,r21,1
    a614:	1009883a 	mov	r4,r2
    a618:	a82bd07a 	srai	r21,r21,1
    a61c:	180b883a 	mov	r5,r3
    a620:	30000426 	beq	r6,zero,a634 <_dtoa_r+0x430>
    a624:	b9800017 	ldw	r6,0(r23)
    a628:	b9c00117 	ldw	r7,4(r23)
    a62c:	84000044 	addi	r16,r16,1
    a630:	0011c540 	call	11c54 <__muldf3>
    a634:	bdc00204 	addi	r23,r23,8
    a638:	a83ff51e 	bne	r21,zero,a610 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a610>
    a63c:	1013883a 	mov	r9,r2
    a640:	1811883a 	mov	r8,r3
    a644:	480d883a 	mov	r6,r9
    a648:	400f883a 	mov	r7,r8
    a64c:	8809883a 	mov	r4,r17
    a650:	a00b883a 	mov	r5,r20
    a654:	00111140 	call	11114 <__divdf3>
    a658:	d8800f15 	stw	r2,60(sp)
    a65c:	d8c01015 	stw	r3,64(sp)
    a660:	d8c00e17 	ldw	r3,56(sp)
    a664:	18000626 	beq	r3,zero,a680 <_dtoa_r+0x47c>
    a668:	d9000f17 	ldw	r4,60(sp)
    a66c:	d9401017 	ldw	r5,64(sp)
    a670:	000d883a 	mov	r6,zero
    a674:	01cffc34 	movhi	r7,16368
    a678:	0011b600 	call	11b60 <__ledf2>
    a67c:	10040b16 	blt	r2,zero,b6ac <_dtoa_r+0x14a8>
    a680:	8009883a 	mov	r4,r16
    a684:	00063a80 	call	63a8 <__floatsidf>
    a688:	d9800f17 	ldw	r6,60(sp)
    a68c:	d9c01017 	ldw	r7,64(sp)
    a690:	1009883a 	mov	r4,r2
    a694:	180b883a 	mov	r5,r3
    a698:	0011c540 	call	11c54 <__muldf3>
    a69c:	000d883a 	mov	r6,zero
    a6a0:	01d00734 	movhi	r7,16412
    a6a4:	1009883a 	mov	r4,r2
    a6a8:	180b883a 	mov	r5,r3
    a6ac:	0005a7c0 	call	5a7c <__adddf3>
    a6b0:	1021883a 	mov	r16,r2
    a6b4:	d8800617 	ldw	r2,24(sp)
    a6b8:	047f3034 	movhi	r17,64704
    a6bc:	1c63883a 	add	r17,r3,r17
    a6c0:	10031826 	beq	r2,zero,b324 <_dtoa_r+0x1120>
    a6c4:	d8c00517 	ldw	r3,20(sp)
    a6c8:	db000617 	ldw	r12,24(sp)
    a6cc:	d8c01315 	stw	r3,76(sp)
    a6d0:	d9000b17 	ldw	r4,44(sp)
    a6d4:	20038f26 	beq	r4,zero,b514 <_dtoa_r+0x1310>
    a6d8:	60bfffc4 	addi	r2,r12,-1
    a6dc:	100490fa 	slli	r2,r2,3
    a6e0:	00c000b4 	movhi	r3,2
    a6e4:	18c02804 	addi	r3,r3,160
    a6e8:	1885883a 	add	r2,r3,r2
    a6ec:	11800017 	ldw	r6,0(r2)
    a6f0:	11c00117 	ldw	r7,4(r2)
    a6f4:	d8800717 	ldw	r2,28(sp)
    a6f8:	0009883a 	mov	r4,zero
    a6fc:	014ff834 	movhi	r5,16352
    a700:	db001615 	stw	r12,88(sp)
    a704:	15c00044 	addi	r23,r2,1
    a708:	00111140 	call	11114 <__divdf3>
    a70c:	800d883a 	mov	r6,r16
    a710:	880f883a 	mov	r7,r17
    a714:	1009883a 	mov	r4,r2
    a718:	180b883a 	mov	r5,r3
    a71c:	001236c0 	call	1236c <__subdf3>
    a720:	d9401017 	ldw	r5,64(sp)
    a724:	d9000f17 	ldw	r4,60(sp)
    a728:	102b883a 	mov	r21,r2
    a72c:	d8c01215 	stw	r3,72(sp)
    a730:	00063280 	call	6328 <__fixdfsi>
    a734:	1009883a 	mov	r4,r2
    a738:	1029883a 	mov	r20,r2
    a73c:	00063a80 	call	63a8 <__floatsidf>
    a740:	d9000f17 	ldw	r4,60(sp)
    a744:	d9401017 	ldw	r5,64(sp)
    a748:	100d883a 	mov	r6,r2
    a74c:	180f883a 	mov	r7,r3
    a750:	001236c0 	call	1236c <__subdf3>
    a754:	1823883a 	mov	r17,r3
    a758:	d8c00717 	ldw	r3,28(sp)
    a75c:	d9401217 	ldw	r5,72(sp)
    a760:	a2000c04 	addi	r8,r20,48
    a764:	1021883a 	mov	r16,r2
    a768:	1a000005 	stb	r8,0(r3)
    a76c:	800d883a 	mov	r6,r16
    a770:	880f883a 	mov	r7,r17
    a774:	a809883a 	mov	r4,r21
    a778:	4029883a 	mov	r20,r8
    a77c:	0011a840 	call	11a84 <__gedf2>
    a780:	00841d16 	blt	zero,r2,b7f8 <_dtoa_r+0x15f4>
    a784:	800d883a 	mov	r6,r16
    a788:	880f883a 	mov	r7,r17
    a78c:	0009883a 	mov	r4,zero
    a790:	014ffc34 	movhi	r5,16368
    a794:	001236c0 	call	1236c <__subdf3>
    a798:	d9401217 	ldw	r5,72(sp)
    a79c:	100d883a 	mov	r6,r2
    a7a0:	180f883a 	mov	r7,r3
    a7a4:	a809883a 	mov	r4,r21
    a7a8:	0011a840 	call	11a84 <__gedf2>
    a7ac:	db001617 	ldw	r12,88(sp)
    a7b0:	00840e16 	blt	zero,r2,b7ec <_dtoa_r+0x15e8>
    a7b4:	00800044 	movi	r2,1
    a7b8:	13006b0e 	bge	r2,r12,a968 <_dtoa_r+0x764>
    a7bc:	d9000717 	ldw	r4,28(sp)
    a7c0:	dd800f15 	stw	r22,60(sp)
    a7c4:	dcc01015 	stw	r19,64(sp)
    a7c8:	2319883a 	add	r12,r4,r12
    a7cc:	dcc01217 	ldw	r19,72(sp)
    a7d0:	602d883a 	mov	r22,r12
    a7d4:	dc801215 	stw	r18,72(sp)
    a7d8:	b825883a 	mov	r18,r23
    a7dc:	00000906 	br	a804 <_dtoa_r+0x600>
    a7e0:	001236c0 	call	1236c <__subdf3>
    a7e4:	a80d883a 	mov	r6,r21
    a7e8:	980f883a 	mov	r7,r19
    a7ec:	1009883a 	mov	r4,r2
    a7f0:	180b883a 	mov	r5,r3
    a7f4:	0011b600 	call	11b60 <__ledf2>
    a7f8:	1003e816 	blt	r2,zero,b79c <_dtoa_r+0x1598>
    a7fc:	b825883a 	mov	r18,r23
    a800:	bd83e926 	beq	r23,r22,b7a8 <_dtoa_r+0x15a4>
    a804:	a809883a 	mov	r4,r21
    a808:	980b883a 	mov	r5,r19
    a80c:	000d883a 	mov	r6,zero
    a810:	01d00934 	movhi	r7,16420
    a814:	0011c540 	call	11c54 <__muldf3>
    a818:	000d883a 	mov	r6,zero
    a81c:	01d00934 	movhi	r7,16420
    a820:	8009883a 	mov	r4,r16
    a824:	880b883a 	mov	r5,r17
    a828:	102b883a 	mov	r21,r2
    a82c:	1827883a 	mov	r19,r3
    a830:	0011c540 	call	11c54 <__muldf3>
    a834:	180b883a 	mov	r5,r3
    a838:	1009883a 	mov	r4,r2
    a83c:	1821883a 	mov	r16,r3
    a840:	1023883a 	mov	r17,r2
    a844:	00063280 	call	6328 <__fixdfsi>
    a848:	1009883a 	mov	r4,r2
    a84c:	1029883a 	mov	r20,r2
    a850:	00063a80 	call	63a8 <__floatsidf>
    a854:	8809883a 	mov	r4,r17
    a858:	800b883a 	mov	r5,r16
    a85c:	100d883a 	mov	r6,r2
    a860:	180f883a 	mov	r7,r3
    a864:	001236c0 	call	1236c <__subdf3>
    a868:	a5000c04 	addi	r20,r20,48
    a86c:	a80d883a 	mov	r6,r21
    a870:	980f883a 	mov	r7,r19
    a874:	1009883a 	mov	r4,r2
    a878:	180b883a 	mov	r5,r3
    a87c:	95000005 	stb	r20,0(r18)
    a880:	1021883a 	mov	r16,r2
    a884:	1823883a 	mov	r17,r3
    a888:	0011b600 	call	11b60 <__ledf2>
    a88c:	bdc00044 	addi	r23,r23,1
    a890:	800d883a 	mov	r6,r16
    a894:	880f883a 	mov	r7,r17
    a898:	0009883a 	mov	r4,zero
    a89c:	014ffc34 	movhi	r5,16368
    a8a0:	103fcf0e 	bge	r2,zero,a7e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a7e0>
    a8a4:	d8c01317 	ldw	r3,76(sp)
    a8a8:	d8c00515 	stw	r3,20(sp)
    a8ac:	d9400917 	ldw	r5,36(sp)
    a8b0:	e009883a 	mov	r4,fp
    a8b4:	000cecc0 	call	cecc <_Bfree>
    a8b8:	d9000517 	ldw	r4,20(sp)
    a8bc:	d9802317 	ldw	r6,140(sp)
    a8c0:	d9c02517 	ldw	r7,148(sp)
    a8c4:	b8000005 	stb	zero,0(r23)
    a8c8:	20800044 	addi	r2,r4,1
    a8cc:	30800015 	stw	r2,0(r6)
    a8d0:	3802aa26 	beq	r7,zero,b37c <_dtoa_r+0x1178>
    a8d4:	3dc00015 	stw	r23,0(r7)
    a8d8:	d8800717 	ldw	r2,28(sp)
    a8dc:	003e7906 	br	a2c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a2c4>
    a8e0:	00800434 	movhi	r2,16
    a8e4:	10bfffc4 	addi	r2,r2,-1
    a8e8:	88a2703a 	and	r17,r17,r2
    a8ec:	883e851e 	bne	r17,zero,a304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a304>
    a8f0:	008000b4 	movhi	r2,2
    a8f4:	10800904 	addi	r2,r2,36
    a8f8:	003e8406 	br	a30c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a30c>
    a8fc:	10c00204 	addi	r3,r2,8
    a900:	003e8706 	br	a320 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a320>
    a904:	01400434 	movhi	r5,16
    a908:	297fffc4 	addi	r5,r5,-1
    a90c:	994a703a 	and	r5,r19,r5
    a910:	9009883a 	mov	r4,r18
    a914:	843f0044 	addi	r16,r16,-1023
    a918:	294ffc34 	orhi	r5,r5,16368
    a91c:	dd800217 	ldw	r22,8(sp)
    a920:	d8001115 	stw	zero,68(sp)
    a924:	003ea506 	br	a3bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a3bc>
    a928:	008000b4 	movhi	r2,2
    a92c:	10800004 	addi	r2,r2,0
    a930:	003e6406 	br	a2c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a2c4>
    a934:	e0001115 	stw	zero,68(fp)
    a938:	000b883a 	mov	r5,zero
    a93c:	e009883a 	mov	r4,fp
    a940:	000ce240 	call	ce24 <_Balloc>
    a944:	01bfffc4 	movi	r6,-1
    a948:	01c00044 	movi	r7,1
    a94c:	d8800715 	stw	r2,28(sp)
    a950:	d9800c15 	stw	r6,48(sp)
    a954:	e0801015 	stw	r2,64(fp)
    a958:	d8000315 	stw	zero,12(sp)
    a95c:	d9c00b15 	stw	r7,44(sp)
    a960:	d9800615 	stw	r6,24(sp)
    a964:	d8002215 	stw	zero,136(sp)
    a968:	d8800117 	ldw	r2,4(sp)
    a96c:	10008916 	blt	r2,zero,ab94 <_dtoa_r+0x990>
    a970:	d9000517 	ldw	r4,20(sp)
    a974:	00c00384 	movi	r3,14
    a978:	19008616 	blt	r3,r4,ab94 <_dtoa_r+0x990>
    a97c:	200490fa 	slli	r2,r4,3
    a980:	00c000b4 	movhi	r3,2
    a984:	d9802217 	ldw	r6,136(sp)
    a988:	18c02804 	addi	r3,r3,160
    a98c:	1885883a 	add	r2,r3,r2
    a990:	14000017 	ldw	r16,0(r2)
    a994:	14400117 	ldw	r17,4(r2)
    a998:	30016316 	blt	r6,zero,af28 <_dtoa_r+0xd24>
    a99c:	800d883a 	mov	r6,r16
    a9a0:	880f883a 	mov	r7,r17
    a9a4:	9009883a 	mov	r4,r18
    a9a8:	980b883a 	mov	r5,r19
    a9ac:	00111140 	call	11114 <__divdf3>
    a9b0:	180b883a 	mov	r5,r3
    a9b4:	1009883a 	mov	r4,r2
    a9b8:	00063280 	call	6328 <__fixdfsi>
    a9bc:	1009883a 	mov	r4,r2
    a9c0:	102b883a 	mov	r21,r2
    a9c4:	00063a80 	call	63a8 <__floatsidf>
    a9c8:	800d883a 	mov	r6,r16
    a9cc:	880f883a 	mov	r7,r17
    a9d0:	1009883a 	mov	r4,r2
    a9d4:	180b883a 	mov	r5,r3
    a9d8:	0011c540 	call	11c54 <__muldf3>
    a9dc:	100d883a 	mov	r6,r2
    a9e0:	180f883a 	mov	r7,r3
    a9e4:	9009883a 	mov	r4,r18
    a9e8:	980b883a 	mov	r5,r19
    a9ec:	001236c0 	call	1236c <__subdf3>
    a9f0:	d9c00717 	ldw	r7,28(sp)
    a9f4:	1009883a 	mov	r4,r2
    a9f8:	a8800c04 	addi	r2,r21,48
    a9fc:	38800005 	stb	r2,0(r7)
    aa00:	3dc00044 	addi	r23,r7,1
    aa04:	d9c00617 	ldw	r7,24(sp)
    aa08:	01800044 	movi	r6,1
    aa0c:	180b883a 	mov	r5,r3
    aa10:	2005883a 	mov	r2,r4
    aa14:	39803826 	beq	r7,r6,aaf8 <_dtoa_r+0x8f4>
    aa18:	000d883a 	mov	r6,zero
    aa1c:	01d00934 	movhi	r7,16420
    aa20:	0011c540 	call	11c54 <__muldf3>
    aa24:	000d883a 	mov	r6,zero
    aa28:	000f883a 	mov	r7,zero
    aa2c:	1009883a 	mov	r4,r2
    aa30:	180b883a 	mov	r5,r3
    aa34:	1025883a 	mov	r18,r2
    aa38:	1827883a 	mov	r19,r3
    aa3c:	00119fc0 	call	119fc <__eqdf2>
    aa40:	103f9a26 	beq	r2,zero,a8ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8ac>
    aa44:	d9c00617 	ldw	r7,24(sp)
    aa48:	d8c00717 	ldw	r3,28(sp)
    aa4c:	b829883a 	mov	r20,r23
    aa50:	38bfffc4 	addi	r2,r7,-1
    aa54:	18ad883a 	add	r22,r3,r2
    aa58:	00000a06 	br	aa84 <_dtoa_r+0x880>
    aa5c:	0011c540 	call	11c54 <__muldf3>
    aa60:	000d883a 	mov	r6,zero
    aa64:	000f883a 	mov	r7,zero
    aa68:	1009883a 	mov	r4,r2
    aa6c:	180b883a 	mov	r5,r3
    aa70:	1025883a 	mov	r18,r2
    aa74:	1827883a 	mov	r19,r3
    aa78:	b829883a 	mov	r20,r23
    aa7c:	00119fc0 	call	119fc <__eqdf2>
    aa80:	103f8a26 	beq	r2,zero,a8ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8ac>
    aa84:	800d883a 	mov	r6,r16
    aa88:	880f883a 	mov	r7,r17
    aa8c:	9009883a 	mov	r4,r18
    aa90:	980b883a 	mov	r5,r19
    aa94:	00111140 	call	11114 <__divdf3>
    aa98:	180b883a 	mov	r5,r3
    aa9c:	1009883a 	mov	r4,r2
    aaa0:	00063280 	call	6328 <__fixdfsi>
    aaa4:	1009883a 	mov	r4,r2
    aaa8:	102b883a 	mov	r21,r2
    aaac:	00063a80 	call	63a8 <__floatsidf>
    aab0:	800d883a 	mov	r6,r16
    aab4:	880f883a 	mov	r7,r17
    aab8:	1009883a 	mov	r4,r2
    aabc:	180b883a 	mov	r5,r3
    aac0:	0011c540 	call	11c54 <__muldf3>
    aac4:	100d883a 	mov	r6,r2
    aac8:	180f883a 	mov	r7,r3
    aacc:	9009883a 	mov	r4,r18
    aad0:	980b883a 	mov	r5,r19
    aad4:	001236c0 	call	1236c <__subdf3>
    aad8:	aa000c04 	addi	r8,r21,48
    aadc:	a2000005 	stb	r8,0(r20)
    aae0:	000d883a 	mov	r6,zero
    aae4:	01d00934 	movhi	r7,16420
    aae8:	1009883a 	mov	r4,r2
    aaec:	180b883a 	mov	r5,r3
    aaf0:	a5c00044 	addi	r23,r20,1
    aaf4:	b53fd91e 	bne	r22,r20,aa5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aa5c>
    aaf8:	100d883a 	mov	r6,r2
    aafc:	180f883a 	mov	r7,r3
    ab00:	1009883a 	mov	r4,r2
    ab04:	180b883a 	mov	r5,r3
    ab08:	0005a7c0 	call	5a7c <__adddf3>
    ab0c:	100d883a 	mov	r6,r2
    ab10:	180f883a 	mov	r7,r3
    ab14:	8009883a 	mov	r4,r16
    ab18:	880b883a 	mov	r5,r17
    ab1c:	1027883a 	mov	r19,r2
    ab20:	1825883a 	mov	r18,r3
    ab24:	0011b600 	call	11b60 <__ledf2>
    ab28:	10000816 	blt	r2,zero,ab4c <_dtoa_r+0x948>
    ab2c:	980d883a 	mov	r6,r19
    ab30:	900f883a 	mov	r7,r18
    ab34:	8009883a 	mov	r4,r16
    ab38:	880b883a 	mov	r5,r17
    ab3c:	00119fc0 	call	119fc <__eqdf2>
    ab40:	103f5a1e 	bne	r2,zero,a8ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8ac>
    ab44:	ad40004c 	andi	r21,r21,1
    ab48:	a83f5826 	beq	r21,zero,a8ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8ac>
    ab4c:	bd3fffc3 	ldbu	r20,-1(r23)
    ab50:	b8bfffc4 	addi	r2,r23,-1
    ab54:	1007883a 	mov	r3,r2
    ab58:	01400e44 	movi	r5,57
    ab5c:	d9800717 	ldw	r6,28(sp)
    ab60:	00000506 	br	ab78 <_dtoa_r+0x974>
    ab64:	18ffffc4 	addi	r3,r3,-1
    ab68:	11824726 	beq	r2,r6,b488 <_dtoa_r+0x1284>
    ab6c:	1d000003 	ldbu	r20,0(r3)
    ab70:	102f883a 	mov	r23,r2
    ab74:	10bfffc4 	addi	r2,r2,-1
    ab78:	a1003fcc 	andi	r4,r20,255
    ab7c:	2100201c 	xori	r4,r4,128
    ab80:	213fe004 	addi	r4,r4,-128
    ab84:	217ff726 	beq	r4,r5,ab64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ab64>
    ab88:	a2000044 	addi	r8,r20,1
    ab8c:	12000005 	stb	r8,0(r2)
    ab90:	003f4606 	br	a8ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8ac>
    ab94:	d9000b17 	ldw	r4,44(sp)
    ab98:	2000c826 	beq	r4,zero,aebc <_dtoa_r+0xcb8>
    ab9c:	d9800317 	ldw	r6,12(sp)
    aba0:	00c00044 	movi	r3,1
    aba4:	1980f90e 	bge	r3,r6,af8c <_dtoa_r+0xd88>
    aba8:	d8800617 	ldw	r2,24(sp)
    abac:	d8c00a17 	ldw	r3,40(sp)
    abb0:	157fffc4 	addi	r21,r2,-1
    abb4:	1d41f316 	blt	r3,r21,b384 <_dtoa_r+0x1180>
    abb8:	1d6bc83a 	sub	r21,r3,r21
    abbc:	d9c00617 	ldw	r7,24(sp)
    abc0:	3802aa16 	blt	r7,zero,b66c <_dtoa_r+0x1468>
    abc4:	dd000817 	ldw	r20,32(sp)
    abc8:	d8800617 	ldw	r2,24(sp)
    abcc:	d8c00817 	ldw	r3,32(sp)
    abd0:	01400044 	movi	r5,1
    abd4:	e009883a 	mov	r4,fp
    abd8:	1887883a 	add	r3,r3,r2
    abdc:	d8c00815 	stw	r3,32(sp)
    abe0:	b0ad883a 	add	r22,r22,r2
    abe4:	000d2300 	call	d230 <__i2b>
    abe8:	1023883a 	mov	r17,r2
    abec:	a0000826 	beq	r20,zero,ac10 <_dtoa_r+0xa0c>
    abf0:	0580070e 	bge	zero,r22,ac10 <_dtoa_r+0xa0c>
    abf4:	a005883a 	mov	r2,r20
    abf8:	b500b916 	blt	r22,r20,aee0 <_dtoa_r+0xcdc>
    abfc:	d9000817 	ldw	r4,32(sp)
    ac00:	a0a9c83a 	sub	r20,r20,r2
    ac04:	b0adc83a 	sub	r22,r22,r2
    ac08:	2089c83a 	sub	r4,r4,r2
    ac0c:	d9000815 	stw	r4,32(sp)
    ac10:	d9800a17 	ldw	r6,40(sp)
    ac14:	0181810e 	bge	zero,r6,b21c <_dtoa_r+0x1018>
    ac18:	d9c00b17 	ldw	r7,44(sp)
    ac1c:	3800b326 	beq	r7,zero,aeec <_dtoa_r+0xce8>
    ac20:	a800b226 	beq	r21,zero,aeec <_dtoa_r+0xce8>
    ac24:	880b883a 	mov	r5,r17
    ac28:	a80d883a 	mov	r6,r21
    ac2c:	e009883a 	mov	r4,fp
    ac30:	000d4640 	call	d464 <__pow5mult>
    ac34:	d9800917 	ldw	r6,36(sp)
    ac38:	100b883a 	mov	r5,r2
    ac3c:	e009883a 	mov	r4,fp
    ac40:	1023883a 	mov	r17,r2
    ac44:	000d26c0 	call	d26c <__multiply>
    ac48:	1021883a 	mov	r16,r2
    ac4c:	d8800a17 	ldw	r2,40(sp)
    ac50:	d9400917 	ldw	r5,36(sp)
    ac54:	e009883a 	mov	r4,fp
    ac58:	1545c83a 	sub	r2,r2,r21
    ac5c:	d8800a15 	stw	r2,40(sp)
    ac60:	000cecc0 	call	cecc <_Bfree>
    ac64:	d8c00a17 	ldw	r3,40(sp)
    ac68:	18009f1e 	bne	r3,zero,aee8 <_dtoa_r+0xce4>
    ac6c:	05c00044 	movi	r23,1
    ac70:	e009883a 	mov	r4,fp
    ac74:	b80b883a 	mov	r5,r23
    ac78:	000d2300 	call	d230 <__i2b>
    ac7c:	d9000d17 	ldw	r4,52(sp)
    ac80:	102b883a 	mov	r21,r2
    ac84:	2000ce26 	beq	r4,zero,afc0 <_dtoa_r+0xdbc>
    ac88:	200d883a 	mov	r6,r4
    ac8c:	100b883a 	mov	r5,r2
    ac90:	e009883a 	mov	r4,fp
    ac94:	000d4640 	call	d464 <__pow5mult>
    ac98:	d9800317 	ldw	r6,12(sp)
    ac9c:	102b883a 	mov	r21,r2
    aca0:	b981810e 	bge	r23,r6,b2a8 <_dtoa_r+0x10a4>
    aca4:	0027883a 	mov	r19,zero
    aca8:	a8800417 	ldw	r2,16(r21)
    acac:	05c00804 	movi	r23,32
    acb0:	10800104 	addi	r2,r2,4
    acb4:	1085883a 	add	r2,r2,r2
    acb8:	1085883a 	add	r2,r2,r2
    acbc:	a885883a 	add	r2,r21,r2
    acc0:	11000017 	ldw	r4,0(r2)
    acc4:	000d1180 	call	d118 <__hi0bits>
    acc8:	b885c83a 	sub	r2,r23,r2
    accc:	1585883a 	add	r2,r2,r22
    acd0:	108007cc 	andi	r2,r2,31
    acd4:	1000b326 	beq	r2,zero,afa4 <_dtoa_r+0xda0>
    acd8:	00c00804 	movi	r3,32
    acdc:	1887c83a 	sub	r3,r3,r2
    ace0:	01000104 	movi	r4,4
    ace4:	20c2cd0e 	bge	r4,r3,b81c <_dtoa_r+0x1618>
    ace8:	00c00704 	movi	r3,28
    acec:	1885c83a 	sub	r2,r3,r2
    acf0:	d8c00817 	ldw	r3,32(sp)
    acf4:	a0a9883a 	add	r20,r20,r2
    acf8:	b0ad883a 	add	r22,r22,r2
    acfc:	1887883a 	add	r3,r3,r2
    ad00:	d8c00815 	stw	r3,32(sp)
    ad04:	d9800817 	ldw	r6,32(sp)
    ad08:	0180040e 	bge	zero,r6,ad1c <_dtoa_r+0xb18>
    ad0c:	800b883a 	mov	r5,r16
    ad10:	e009883a 	mov	r4,fp
    ad14:	000d5a40 	call	d5a4 <__lshift>
    ad18:	1021883a 	mov	r16,r2
    ad1c:	0580050e 	bge	zero,r22,ad34 <_dtoa_r+0xb30>
    ad20:	a80b883a 	mov	r5,r21
    ad24:	b00d883a 	mov	r6,r22
    ad28:	e009883a 	mov	r4,fp
    ad2c:	000d5a40 	call	d5a4 <__lshift>
    ad30:	102b883a 	mov	r21,r2
    ad34:	d9c00e17 	ldw	r7,56(sp)
    ad38:	3801211e 	bne	r7,zero,b1c0 <_dtoa_r+0xfbc>
    ad3c:	d9800617 	ldw	r6,24(sp)
    ad40:	0181380e 	bge	zero,r6,b224 <_dtoa_r+0x1020>
    ad44:	d8c00b17 	ldw	r3,44(sp)
    ad48:	1800ab1e 	bne	r3,zero,aff8 <_dtoa_r+0xdf4>
    ad4c:	dc800717 	ldw	r18,28(sp)
    ad50:	dcc00617 	ldw	r19,24(sp)
    ad54:	9029883a 	mov	r20,r18
    ad58:	00000206 	br	ad64 <_dtoa_r+0xb60>
    ad5c:	000cef40 	call	cef4 <__multadd>
    ad60:	1021883a 	mov	r16,r2
    ad64:	a80b883a 	mov	r5,r21
    ad68:	8009883a 	mov	r4,r16
    ad6c:	000a0040 	call	a004 <quorem>
    ad70:	10800c04 	addi	r2,r2,48
    ad74:	90800005 	stb	r2,0(r18)
    ad78:	94800044 	addi	r18,r18,1
    ad7c:	9507c83a 	sub	r3,r18,r20
    ad80:	000f883a 	mov	r7,zero
    ad84:	01800284 	movi	r6,10
    ad88:	800b883a 	mov	r5,r16
    ad8c:	e009883a 	mov	r4,fp
    ad90:	1cfff216 	blt	r3,r19,ad5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad5c>
    ad94:	1011883a 	mov	r8,r2
    ad98:	d8800617 	ldw	r2,24(sp)
    ad9c:	0082370e 	bge	zero,r2,b67c <_dtoa_r+0x1478>
    ada0:	d9000717 	ldw	r4,28(sp)
    ada4:	0025883a 	mov	r18,zero
    ada8:	20af883a 	add	r23,r4,r2
    adac:	01800044 	movi	r6,1
    adb0:	800b883a 	mov	r5,r16
    adb4:	e009883a 	mov	r4,fp
    adb8:	da001715 	stw	r8,92(sp)
    adbc:	000d5a40 	call	d5a4 <__lshift>
    adc0:	a80b883a 	mov	r5,r21
    adc4:	1009883a 	mov	r4,r2
    adc8:	d8800915 	stw	r2,36(sp)
    adcc:	000d6ec0 	call	d6ec <__mcmp>
    add0:	da001717 	ldw	r8,92(sp)
    add4:	0081800e 	bge	zero,r2,b3d8 <_dtoa_r+0x11d4>
    add8:	b93fffc3 	ldbu	r4,-1(r23)
    addc:	b8bfffc4 	addi	r2,r23,-1
    ade0:	1007883a 	mov	r3,r2
    ade4:	01800e44 	movi	r6,57
    ade8:	d9c00717 	ldw	r7,28(sp)
    adec:	00000506 	br	ae04 <_dtoa_r+0xc00>
    adf0:	18ffffc4 	addi	r3,r3,-1
    adf4:	11c12326 	beq	r2,r7,b284 <_dtoa_r+0x1080>
    adf8:	19000003 	ldbu	r4,0(r3)
    adfc:	102f883a 	mov	r23,r2
    ae00:	10bfffc4 	addi	r2,r2,-1
    ae04:	21403fcc 	andi	r5,r4,255
    ae08:	2940201c 	xori	r5,r5,128
    ae0c:	297fe004 	addi	r5,r5,-128
    ae10:	29bff726 	beq	r5,r6,adf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700adf0>
    ae14:	21000044 	addi	r4,r4,1
    ae18:	11000005 	stb	r4,0(r2)
    ae1c:	a80b883a 	mov	r5,r21
    ae20:	e009883a 	mov	r4,fp
    ae24:	000cecc0 	call	cecc <_Bfree>
    ae28:	883ea026 	beq	r17,zero,a8ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8ac>
    ae2c:	90000426 	beq	r18,zero,ae40 <_dtoa_r+0xc3c>
    ae30:	94400326 	beq	r18,r17,ae40 <_dtoa_r+0xc3c>
    ae34:	900b883a 	mov	r5,r18
    ae38:	e009883a 	mov	r4,fp
    ae3c:	000cecc0 	call	cecc <_Bfree>
    ae40:	880b883a 	mov	r5,r17
    ae44:	e009883a 	mov	r4,fp
    ae48:	000cecc0 	call	cecc <_Bfree>
    ae4c:	003e9706 	br	a8ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8ac>
    ae50:	01800044 	movi	r6,1
    ae54:	d9800e15 	stw	r6,56(sp)
    ae58:	003d9606 	br	a4b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a4b4>
    ae5c:	d8800817 	ldw	r2,32(sp)
    ae60:	d8c00517 	ldw	r3,20(sp)
    ae64:	d8000d15 	stw	zero,52(sp)
    ae68:	10c5c83a 	sub	r2,r2,r3
    ae6c:	00c9c83a 	sub	r4,zero,r3
    ae70:	d8800815 	stw	r2,32(sp)
    ae74:	d9000a15 	stw	r4,40(sp)
    ae78:	003d9706 	br	a4d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a4d8>
    ae7c:	05adc83a 	sub	r22,zero,r22
    ae80:	dd800815 	stw	r22,32(sp)
    ae84:	002d883a 	mov	r22,zero
    ae88:	003d8e06 	br	a4c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a4c4>
    ae8c:	d9000517 	ldw	r4,20(sp)
    ae90:	00063a80 	call	63a8 <__floatsidf>
    ae94:	100d883a 	mov	r6,r2
    ae98:	180f883a 	mov	r7,r3
    ae9c:	a009883a 	mov	r4,r20
    aea0:	880b883a 	mov	r5,r17
    aea4:	00119fc0 	call	119fc <__eqdf2>
    aea8:	103d7126 	beq	r2,zero,a470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a470>
    aeac:	d9c00517 	ldw	r7,20(sp)
    aeb0:	39ffffc4 	addi	r7,r7,-1
    aeb4:	d9c00515 	stw	r7,20(sp)
    aeb8:	003d6d06 	br	a470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a470>
    aebc:	dd400a17 	ldw	r21,40(sp)
    aec0:	dd000817 	ldw	r20,32(sp)
    aec4:	0023883a 	mov	r17,zero
    aec8:	003f4806 	br	abec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700abec>
    aecc:	10e3c83a 	sub	r17,r2,r3
    aed0:	9448983a 	sll	r4,r18,r17
    aed4:	003d3206 	br	a3a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a3a0>
    aed8:	d8000e15 	stw	zero,56(sp)
    aedc:	003d7506 	br	a4b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a4b4>
    aee0:	b005883a 	mov	r2,r22
    aee4:	003f4506 	br	abfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700abfc>
    aee8:	dc000915 	stw	r16,36(sp)
    aeec:	d9800a17 	ldw	r6,40(sp)
    aef0:	d9400917 	ldw	r5,36(sp)
    aef4:	e009883a 	mov	r4,fp
    aef8:	000d4640 	call	d464 <__pow5mult>
    aefc:	1021883a 	mov	r16,r2
    af00:	003f5a06 	br	ac6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ac6c>
    af04:	01c00044 	movi	r7,1
    af08:	d9c00b15 	stw	r7,44(sp)
    af0c:	d8802217 	ldw	r2,136(sp)
    af10:	0081280e 	bge	zero,r2,b3b4 <_dtoa_r+0x11b0>
    af14:	100d883a 	mov	r6,r2
    af18:	1021883a 	mov	r16,r2
    af1c:	d8800c15 	stw	r2,48(sp)
    af20:	d8800615 	stw	r2,24(sp)
    af24:	003d8806 	br	a548 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a548>
    af28:	d8800617 	ldw	r2,24(sp)
    af2c:	00be9b16 	blt	zero,r2,a99c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a99c>
    af30:	10010f1e 	bne	r2,zero,b370 <_dtoa_r+0x116c>
    af34:	880b883a 	mov	r5,r17
    af38:	000d883a 	mov	r6,zero
    af3c:	01d00534 	movhi	r7,16404
    af40:	8009883a 	mov	r4,r16
    af44:	0011c540 	call	11c54 <__muldf3>
    af48:	900d883a 	mov	r6,r18
    af4c:	980f883a 	mov	r7,r19
    af50:	1009883a 	mov	r4,r2
    af54:	180b883a 	mov	r5,r3
    af58:	0011a840 	call	11a84 <__gedf2>
    af5c:	002b883a 	mov	r21,zero
    af60:	0023883a 	mov	r17,zero
    af64:	1000bf16 	blt	r2,zero,b264 <_dtoa_r+0x1060>
    af68:	d9802217 	ldw	r6,136(sp)
    af6c:	ddc00717 	ldw	r23,28(sp)
    af70:	018c303a 	nor	r6,zero,r6
    af74:	d9800515 	stw	r6,20(sp)
    af78:	a80b883a 	mov	r5,r21
    af7c:	e009883a 	mov	r4,fp
    af80:	000cecc0 	call	cecc <_Bfree>
    af84:	883e4926 	beq	r17,zero,a8ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8ac>
    af88:	003fad06 	br	ae40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae40>
    af8c:	d9c01117 	ldw	r7,68(sp)
    af90:	3801bc26 	beq	r7,zero,b684 <_dtoa_r+0x1480>
    af94:	10810cc4 	addi	r2,r2,1075
    af98:	dd400a17 	ldw	r21,40(sp)
    af9c:	dd000817 	ldw	r20,32(sp)
    afa0:	003f0a06 	br	abcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700abcc>
    afa4:	00800704 	movi	r2,28
    afa8:	d9000817 	ldw	r4,32(sp)
    afac:	a0a9883a 	add	r20,r20,r2
    afb0:	b0ad883a 	add	r22,r22,r2
    afb4:	2089883a 	add	r4,r4,r2
    afb8:	d9000815 	stw	r4,32(sp)
    afbc:	003f5106 	br	ad04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad04>
    afc0:	d8c00317 	ldw	r3,12(sp)
    afc4:	b8c1fc0e 	bge	r23,r3,b7b8 <_dtoa_r+0x15b4>
    afc8:	0027883a 	mov	r19,zero
    afcc:	b805883a 	mov	r2,r23
    afd0:	003f3e06 	br	accc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700accc>
    afd4:	880b883a 	mov	r5,r17
    afd8:	e009883a 	mov	r4,fp
    afdc:	000f883a 	mov	r7,zero
    afe0:	01800284 	movi	r6,10
    afe4:	000cef40 	call	cef4 <__multadd>
    afe8:	d9000c17 	ldw	r4,48(sp)
    afec:	1023883a 	mov	r17,r2
    aff0:	0102040e 	bge	zero,r4,b804 <_dtoa_r+0x1600>
    aff4:	d9000615 	stw	r4,24(sp)
    aff8:	0500050e 	bge	zero,r20,b010 <_dtoa_r+0xe0c>
    affc:	880b883a 	mov	r5,r17
    b000:	a00d883a 	mov	r6,r20
    b004:	e009883a 	mov	r4,fp
    b008:	000d5a40 	call	d5a4 <__lshift>
    b00c:	1023883a 	mov	r17,r2
    b010:	9801241e 	bne	r19,zero,b4a4 <_dtoa_r+0x12a0>
    b014:	8829883a 	mov	r20,r17
    b018:	d9000617 	ldw	r4,24(sp)
    b01c:	dcc00717 	ldw	r19,28(sp)
    b020:	9480004c 	andi	r18,r18,1
    b024:	20bfffc4 	addi	r2,r4,-1
    b028:	9885883a 	add	r2,r19,r2
    b02c:	d8800415 	stw	r2,16(sp)
    b030:	dc800615 	stw	r18,24(sp)
    b034:	a80b883a 	mov	r5,r21
    b038:	8009883a 	mov	r4,r16
    b03c:	000a0040 	call	a004 <quorem>
    b040:	880b883a 	mov	r5,r17
    b044:	8009883a 	mov	r4,r16
    b048:	102f883a 	mov	r23,r2
    b04c:	000d6ec0 	call	d6ec <__mcmp>
    b050:	a80b883a 	mov	r5,r21
    b054:	a00d883a 	mov	r6,r20
    b058:	e009883a 	mov	r4,fp
    b05c:	102d883a 	mov	r22,r2
    b060:	000d74c0 	call	d74c <__mdiff>
    b064:	1007883a 	mov	r3,r2
    b068:	10800317 	ldw	r2,12(r2)
    b06c:	bc800c04 	addi	r18,r23,48
    b070:	180b883a 	mov	r5,r3
    b074:	10004e1e 	bne	r2,zero,b1b0 <_dtoa_r+0xfac>
    b078:	8009883a 	mov	r4,r16
    b07c:	d8c01615 	stw	r3,88(sp)
    b080:	000d6ec0 	call	d6ec <__mcmp>
    b084:	d8c01617 	ldw	r3,88(sp)
    b088:	e009883a 	mov	r4,fp
    b08c:	d8801615 	stw	r2,88(sp)
    b090:	180b883a 	mov	r5,r3
    b094:	000cecc0 	call	cecc <_Bfree>
    b098:	d8801617 	ldw	r2,88(sp)
    b09c:	1000041e 	bne	r2,zero,b0b0 <_dtoa_r+0xeac>
    b0a0:	d9800317 	ldw	r6,12(sp)
    b0a4:	3000021e 	bne	r6,zero,b0b0 <_dtoa_r+0xeac>
    b0a8:	d8c00617 	ldw	r3,24(sp)
    b0ac:	18003726 	beq	r3,zero,b18c <_dtoa_r+0xf88>
    b0b0:	b0002016 	blt	r22,zero,b134 <_dtoa_r+0xf30>
    b0b4:	b000041e 	bne	r22,zero,b0c8 <_dtoa_r+0xec4>
    b0b8:	d9000317 	ldw	r4,12(sp)
    b0bc:	2000021e 	bne	r4,zero,b0c8 <_dtoa_r+0xec4>
    b0c0:	d8c00617 	ldw	r3,24(sp)
    b0c4:	18001b26 	beq	r3,zero,b134 <_dtoa_r+0xf30>
    b0c8:	00810716 	blt	zero,r2,b4e8 <_dtoa_r+0x12e4>
    b0cc:	d8c00417 	ldw	r3,16(sp)
    b0d0:	9d800044 	addi	r22,r19,1
    b0d4:	9c800005 	stb	r18,0(r19)
    b0d8:	b02f883a 	mov	r23,r22
    b0dc:	98c10626 	beq	r19,r3,b4f8 <_dtoa_r+0x12f4>
    b0e0:	800b883a 	mov	r5,r16
    b0e4:	000f883a 	mov	r7,zero
    b0e8:	01800284 	movi	r6,10
    b0ec:	e009883a 	mov	r4,fp
    b0f0:	000cef40 	call	cef4 <__multadd>
    b0f4:	1021883a 	mov	r16,r2
    b0f8:	000f883a 	mov	r7,zero
    b0fc:	01800284 	movi	r6,10
    b100:	880b883a 	mov	r5,r17
    b104:	e009883a 	mov	r4,fp
    b108:	8d002526 	beq	r17,r20,b1a0 <_dtoa_r+0xf9c>
    b10c:	000cef40 	call	cef4 <__multadd>
    b110:	a00b883a 	mov	r5,r20
    b114:	000f883a 	mov	r7,zero
    b118:	01800284 	movi	r6,10
    b11c:	e009883a 	mov	r4,fp
    b120:	1023883a 	mov	r17,r2
    b124:	000cef40 	call	cef4 <__multadd>
    b128:	1029883a 	mov	r20,r2
    b12c:	b027883a 	mov	r19,r22
    b130:	003fc006 	br	b034 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b034>
    b134:	9011883a 	mov	r8,r18
    b138:	00800e0e 	bge	zero,r2,b174 <_dtoa_r+0xf70>
    b13c:	800b883a 	mov	r5,r16
    b140:	01800044 	movi	r6,1
    b144:	e009883a 	mov	r4,fp
    b148:	da001715 	stw	r8,92(sp)
    b14c:	000d5a40 	call	d5a4 <__lshift>
    b150:	a80b883a 	mov	r5,r21
    b154:	1009883a 	mov	r4,r2
    b158:	1021883a 	mov	r16,r2
    b15c:	000d6ec0 	call	d6ec <__mcmp>
    b160:	da001717 	ldw	r8,92(sp)
    b164:	0081960e 	bge	zero,r2,b7c0 <_dtoa_r+0x15bc>
    b168:	00800e44 	movi	r2,57
    b16c:	40817026 	beq	r8,r2,b730 <_dtoa_r+0x152c>
    b170:	ba000c44 	addi	r8,r23,49
    b174:	8825883a 	mov	r18,r17
    b178:	9dc00044 	addi	r23,r19,1
    b17c:	9a000005 	stb	r8,0(r19)
    b180:	a023883a 	mov	r17,r20
    b184:	dc000915 	stw	r16,36(sp)
    b188:	003f2406 	br	ae1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae1c>
    b18c:	00800e44 	movi	r2,57
    b190:	9011883a 	mov	r8,r18
    b194:	90816626 	beq	r18,r2,b730 <_dtoa_r+0x152c>
    b198:	05bff516 	blt	zero,r22,b170 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b170>
    b19c:	003ff506 	br	b174 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b174>
    b1a0:	000cef40 	call	cef4 <__multadd>
    b1a4:	1023883a 	mov	r17,r2
    b1a8:	1029883a 	mov	r20,r2
    b1ac:	003fdf06 	br	b12c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b12c>
    b1b0:	e009883a 	mov	r4,fp
    b1b4:	000cecc0 	call	cecc <_Bfree>
    b1b8:	00800044 	movi	r2,1
    b1bc:	003fbc06 	br	b0b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b0b0>
    b1c0:	a80b883a 	mov	r5,r21
    b1c4:	8009883a 	mov	r4,r16
    b1c8:	000d6ec0 	call	d6ec <__mcmp>
    b1cc:	103edb0e 	bge	r2,zero,ad3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad3c>
    b1d0:	800b883a 	mov	r5,r16
    b1d4:	000f883a 	mov	r7,zero
    b1d8:	01800284 	movi	r6,10
    b1dc:	e009883a 	mov	r4,fp
    b1e0:	000cef40 	call	cef4 <__multadd>
    b1e4:	1021883a 	mov	r16,r2
    b1e8:	d8800517 	ldw	r2,20(sp)
    b1ec:	d8c00b17 	ldw	r3,44(sp)
    b1f0:	10bfffc4 	addi	r2,r2,-1
    b1f4:	d8800515 	stw	r2,20(sp)
    b1f8:	183f761e 	bne	r3,zero,afd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700afd4>
    b1fc:	d9000c17 	ldw	r4,48(sp)
    b200:	0101730e 	bge	zero,r4,b7d0 <_dtoa_r+0x15cc>
    b204:	d9000615 	stw	r4,24(sp)
    b208:	003ed006 	br	ad4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad4c>
    b20c:	00800084 	movi	r2,2
    b210:	3081861e 	bne	r6,r2,b82c <_dtoa_r+0x1628>
    b214:	d8000b15 	stw	zero,44(sp)
    b218:	003f3c06 	br	af0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af0c>
    b21c:	dc000917 	ldw	r16,36(sp)
    b220:	003e9206 	br	ac6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ac6c>
    b224:	d9c00317 	ldw	r7,12(sp)
    b228:	00800084 	movi	r2,2
    b22c:	11fec50e 	bge	r2,r7,ad44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad44>
    b230:	d9000617 	ldw	r4,24(sp)
    b234:	20013c1e 	bne	r4,zero,b728 <_dtoa_r+0x1524>
    b238:	a80b883a 	mov	r5,r21
    b23c:	000f883a 	mov	r7,zero
    b240:	01800144 	movi	r6,5
    b244:	e009883a 	mov	r4,fp
    b248:	000cef40 	call	cef4 <__multadd>
    b24c:	100b883a 	mov	r5,r2
    b250:	8009883a 	mov	r4,r16
    b254:	102b883a 	mov	r21,r2
    b258:	000d6ec0 	call	d6ec <__mcmp>
    b25c:	dc000915 	stw	r16,36(sp)
    b260:	00bf410e 	bge	zero,r2,af68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af68>
    b264:	d9c00717 	ldw	r7,28(sp)
    b268:	00800c44 	movi	r2,49
    b26c:	38800005 	stb	r2,0(r7)
    b270:	d8800517 	ldw	r2,20(sp)
    b274:	3dc00044 	addi	r23,r7,1
    b278:	10800044 	addi	r2,r2,1
    b27c:	d8800515 	stw	r2,20(sp)
    b280:	003f3d06 	br	af78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af78>
    b284:	d9800517 	ldw	r6,20(sp)
    b288:	d9c00717 	ldw	r7,28(sp)
    b28c:	00800c44 	movi	r2,49
    b290:	31800044 	addi	r6,r6,1
    b294:	d9800515 	stw	r6,20(sp)
    b298:	38800005 	stb	r2,0(r7)
    b29c:	003edf06 	br	ae1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae1c>
    b2a0:	d8000b15 	stw	zero,44(sp)
    b2a4:	003c9f06 	br	a524 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a524>
    b2a8:	903e7e1e 	bne	r18,zero,aca4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aca4>
    b2ac:	00800434 	movhi	r2,16
    b2b0:	10bfffc4 	addi	r2,r2,-1
    b2b4:	9884703a 	and	r2,r19,r2
    b2b8:	1000ea1e 	bne	r2,zero,b664 <_dtoa_r+0x1460>
    b2bc:	9cdffc2c 	andhi	r19,r19,32752
    b2c0:	9800e826 	beq	r19,zero,b664 <_dtoa_r+0x1460>
    b2c4:	d9c00817 	ldw	r7,32(sp)
    b2c8:	b5800044 	addi	r22,r22,1
    b2cc:	04c00044 	movi	r19,1
    b2d0:	39c00044 	addi	r7,r7,1
    b2d4:	d9c00815 	stw	r7,32(sp)
    b2d8:	d8800d17 	ldw	r2,52(sp)
    b2dc:	103e721e 	bne	r2,zero,aca8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aca8>
    b2e0:	00800044 	movi	r2,1
    b2e4:	003e7906 	br	accc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700accc>
    b2e8:	8009883a 	mov	r4,r16
    b2ec:	00063a80 	call	63a8 <__floatsidf>
    b2f0:	d9800f17 	ldw	r6,60(sp)
    b2f4:	d9c01017 	ldw	r7,64(sp)
    b2f8:	1009883a 	mov	r4,r2
    b2fc:	180b883a 	mov	r5,r3
    b300:	0011c540 	call	11c54 <__muldf3>
    b304:	000d883a 	mov	r6,zero
    b308:	01d00734 	movhi	r7,16412
    b30c:	1009883a 	mov	r4,r2
    b310:	180b883a 	mov	r5,r3
    b314:	0005a7c0 	call	5a7c <__adddf3>
    b318:	047f3034 	movhi	r17,64704
    b31c:	1021883a 	mov	r16,r2
    b320:	1c63883a 	add	r17,r3,r17
    b324:	d9000f17 	ldw	r4,60(sp)
    b328:	d9401017 	ldw	r5,64(sp)
    b32c:	000d883a 	mov	r6,zero
    b330:	01d00534 	movhi	r7,16404
    b334:	001236c0 	call	1236c <__subdf3>
    b338:	800d883a 	mov	r6,r16
    b33c:	880f883a 	mov	r7,r17
    b340:	1009883a 	mov	r4,r2
    b344:	180b883a 	mov	r5,r3
    b348:	102b883a 	mov	r21,r2
    b34c:	1829883a 	mov	r20,r3
    b350:	0011a840 	call	11a84 <__gedf2>
    b354:	00806c16 	blt	zero,r2,b508 <_dtoa_r+0x1304>
    b358:	89e0003c 	xorhi	r7,r17,32768
    b35c:	800d883a 	mov	r6,r16
    b360:	a809883a 	mov	r4,r21
    b364:	a00b883a 	mov	r5,r20
    b368:	0011b600 	call	11b60 <__ledf2>
    b36c:	103d7e0e 	bge	r2,zero,a968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a968>
    b370:	002b883a 	mov	r21,zero
    b374:	0023883a 	mov	r17,zero
    b378:	003efb06 	br	af68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af68>
    b37c:	d8800717 	ldw	r2,28(sp)
    b380:	003bd006 	br	a2c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a2c4>
    b384:	d9000a17 	ldw	r4,40(sp)
    b388:	d9800d17 	ldw	r6,52(sp)
    b38c:	dd400a15 	stw	r21,40(sp)
    b390:	a905c83a 	sub	r2,r21,r4
    b394:	308d883a 	add	r6,r6,r2
    b398:	d9800d15 	stw	r6,52(sp)
    b39c:	002b883a 	mov	r21,zero
    b3a0:	003e0606 	br	abbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700abbc>
    b3a4:	9023883a 	mov	r17,r18
    b3a8:	9829883a 	mov	r20,r19
    b3ac:	04000084 	movi	r16,2
    b3b0:	003c9206 	br	a5fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a5fc>
    b3b4:	04000044 	movi	r16,1
    b3b8:	dc000c15 	stw	r16,48(sp)
    b3bc:	dc000615 	stw	r16,24(sp)
    b3c0:	dc002215 	stw	r16,136(sp)
    b3c4:	e0001115 	stw	zero,68(fp)
    b3c8:	000b883a 	mov	r5,zero
    b3cc:	003c6906 	br	a574 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a574>
    b3d0:	3021883a 	mov	r16,r6
    b3d4:	003ffb06 	br	b3c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b3c4>
    b3d8:	1000021e 	bne	r2,zero,b3e4 <_dtoa_r+0x11e0>
    b3dc:	4200004c 	andi	r8,r8,1
    b3e0:	403e7d1e 	bne	r8,zero,add8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700add8>
    b3e4:	01000c04 	movi	r4,48
    b3e8:	00000106 	br	b3f0 <_dtoa_r+0x11ec>
    b3ec:	102f883a 	mov	r23,r2
    b3f0:	b8bfffc4 	addi	r2,r23,-1
    b3f4:	10c00007 	ldb	r3,0(r2)
    b3f8:	193ffc26 	beq	r3,r4,b3ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b3ec>
    b3fc:	003e8706 	br	ae1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae1c>
    b400:	d8800517 	ldw	r2,20(sp)
    b404:	00a3c83a 	sub	r17,zero,r2
    b408:	8800a426 	beq	r17,zero,b69c <_dtoa_r+0x1498>
    b40c:	888003cc 	andi	r2,r17,15
    b410:	100490fa 	slli	r2,r2,3
    b414:	00c000b4 	movhi	r3,2
    b418:	18c02804 	addi	r3,r3,160
    b41c:	1885883a 	add	r2,r3,r2
    b420:	11800017 	ldw	r6,0(r2)
    b424:	11c00117 	ldw	r7,4(r2)
    b428:	9009883a 	mov	r4,r18
    b42c:	980b883a 	mov	r5,r19
    b430:	8823d13a 	srai	r17,r17,4
    b434:	0011c540 	call	11c54 <__muldf3>
    b438:	d8800f15 	stw	r2,60(sp)
    b43c:	d8c01015 	stw	r3,64(sp)
    b440:	8800e826 	beq	r17,zero,b7e4 <_dtoa_r+0x15e0>
    b444:	050000b4 	movhi	r20,2
    b448:	a5001e04 	addi	r20,r20,120
    b44c:	04000084 	movi	r16,2
    b450:	8980004c 	andi	r6,r17,1
    b454:	1009883a 	mov	r4,r2
    b458:	8823d07a 	srai	r17,r17,1
    b45c:	180b883a 	mov	r5,r3
    b460:	30000426 	beq	r6,zero,b474 <_dtoa_r+0x1270>
    b464:	a1800017 	ldw	r6,0(r20)
    b468:	a1c00117 	ldw	r7,4(r20)
    b46c:	84000044 	addi	r16,r16,1
    b470:	0011c540 	call	11c54 <__muldf3>
    b474:	a5000204 	addi	r20,r20,8
    b478:	883ff51e 	bne	r17,zero,b450 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b450>
    b47c:	d8800f15 	stw	r2,60(sp)
    b480:	d8c01015 	stw	r3,64(sp)
    b484:	003c7606 	br	a660 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a660>
    b488:	00c00c04 	movi	r3,48
    b48c:	10c00005 	stb	r3,0(r2)
    b490:	d8c00517 	ldw	r3,20(sp)
    b494:	bd3fffc3 	ldbu	r20,-1(r23)
    b498:	18c00044 	addi	r3,r3,1
    b49c:	d8c00515 	stw	r3,20(sp)
    b4a0:	003db906 	br	ab88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ab88>
    b4a4:	89400117 	ldw	r5,4(r17)
    b4a8:	e009883a 	mov	r4,fp
    b4ac:	000ce240 	call	ce24 <_Balloc>
    b4b0:	89800417 	ldw	r6,16(r17)
    b4b4:	89400304 	addi	r5,r17,12
    b4b8:	11000304 	addi	r4,r2,12
    b4bc:	31800084 	addi	r6,r6,2
    b4c0:	318d883a 	add	r6,r6,r6
    b4c4:	318d883a 	add	r6,r6,r6
    b4c8:	1027883a 	mov	r19,r2
    b4cc:	00073640 	call	7364 <memcpy>
    b4d0:	01800044 	movi	r6,1
    b4d4:	980b883a 	mov	r5,r19
    b4d8:	e009883a 	mov	r4,fp
    b4dc:	000d5a40 	call	d5a4 <__lshift>
    b4e0:	1029883a 	mov	r20,r2
    b4e4:	003ecc06 	br	b018 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b018>
    b4e8:	00800e44 	movi	r2,57
    b4ec:	90809026 	beq	r18,r2,b730 <_dtoa_r+0x152c>
    b4f0:	92000044 	addi	r8,r18,1
    b4f4:	003f1f06 	br	b174 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b174>
    b4f8:	9011883a 	mov	r8,r18
    b4fc:	8825883a 	mov	r18,r17
    b500:	a023883a 	mov	r17,r20
    b504:	003e2906 	br	adac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700adac>
    b508:	002b883a 	mov	r21,zero
    b50c:	0023883a 	mov	r17,zero
    b510:	003f5406 	br	b264 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b264>
    b514:	61bfffc4 	addi	r6,r12,-1
    b518:	300490fa 	slli	r2,r6,3
    b51c:	00c000b4 	movhi	r3,2
    b520:	18c02804 	addi	r3,r3,160
    b524:	1885883a 	add	r2,r3,r2
    b528:	11000017 	ldw	r4,0(r2)
    b52c:	11400117 	ldw	r5,4(r2)
    b530:	d8800717 	ldw	r2,28(sp)
    b534:	880f883a 	mov	r7,r17
    b538:	d9801215 	stw	r6,72(sp)
    b53c:	800d883a 	mov	r6,r16
    b540:	db001615 	stw	r12,88(sp)
    b544:	15c00044 	addi	r23,r2,1
    b548:	0011c540 	call	11c54 <__muldf3>
    b54c:	d9401017 	ldw	r5,64(sp)
    b550:	d9000f17 	ldw	r4,60(sp)
    b554:	d8c01515 	stw	r3,84(sp)
    b558:	d8801415 	stw	r2,80(sp)
    b55c:	00063280 	call	6328 <__fixdfsi>
    b560:	1009883a 	mov	r4,r2
    b564:	1021883a 	mov	r16,r2
    b568:	00063a80 	call	63a8 <__floatsidf>
    b56c:	d9000f17 	ldw	r4,60(sp)
    b570:	d9401017 	ldw	r5,64(sp)
    b574:	100d883a 	mov	r6,r2
    b578:	180f883a 	mov	r7,r3
    b57c:	001236c0 	call	1236c <__subdf3>
    b580:	1829883a 	mov	r20,r3
    b584:	d8c00717 	ldw	r3,28(sp)
    b588:	84000c04 	addi	r16,r16,48
    b58c:	1023883a 	mov	r17,r2
    b590:	1c000005 	stb	r16,0(r3)
    b594:	db001617 	ldw	r12,88(sp)
    b598:	00800044 	movi	r2,1
    b59c:	60802226 	beq	r12,r2,b628 <_dtoa_r+0x1424>
    b5a0:	d9c00717 	ldw	r7,28(sp)
    b5a4:	8805883a 	mov	r2,r17
    b5a8:	b82b883a 	mov	r21,r23
    b5ac:	3b19883a 	add	r12,r7,r12
    b5b0:	6023883a 	mov	r17,r12
    b5b4:	a007883a 	mov	r3,r20
    b5b8:	dc800f15 	stw	r18,60(sp)
    b5bc:	000d883a 	mov	r6,zero
    b5c0:	01d00934 	movhi	r7,16420
    b5c4:	1009883a 	mov	r4,r2
    b5c8:	180b883a 	mov	r5,r3
    b5cc:	0011c540 	call	11c54 <__muldf3>
    b5d0:	180b883a 	mov	r5,r3
    b5d4:	1009883a 	mov	r4,r2
    b5d8:	1829883a 	mov	r20,r3
    b5dc:	1025883a 	mov	r18,r2
    b5e0:	00063280 	call	6328 <__fixdfsi>
    b5e4:	1009883a 	mov	r4,r2
    b5e8:	1021883a 	mov	r16,r2
    b5ec:	00063a80 	call	63a8 <__floatsidf>
    b5f0:	100d883a 	mov	r6,r2
    b5f4:	180f883a 	mov	r7,r3
    b5f8:	9009883a 	mov	r4,r18
    b5fc:	a00b883a 	mov	r5,r20
    b600:	84000c04 	addi	r16,r16,48
    b604:	001236c0 	call	1236c <__subdf3>
    b608:	ad400044 	addi	r21,r21,1
    b60c:	ac3fffc5 	stb	r16,-1(r21)
    b610:	ac7fea1e 	bne	r21,r17,b5bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5bc>
    b614:	1023883a 	mov	r17,r2
    b618:	d8801217 	ldw	r2,72(sp)
    b61c:	dc800f17 	ldw	r18,60(sp)
    b620:	1829883a 	mov	r20,r3
    b624:	b8af883a 	add	r23,r23,r2
    b628:	d9001417 	ldw	r4,80(sp)
    b62c:	d9401517 	ldw	r5,84(sp)
    b630:	000d883a 	mov	r6,zero
    b634:	01cff834 	movhi	r7,16352
    b638:	0005a7c0 	call	5a7c <__adddf3>
    b63c:	880d883a 	mov	r6,r17
    b640:	a00f883a 	mov	r7,r20
    b644:	1009883a 	mov	r4,r2
    b648:	180b883a 	mov	r5,r3
    b64c:	0011b600 	call	11b60 <__ledf2>
    b650:	10003e0e 	bge	r2,zero,b74c <_dtoa_r+0x1548>
    b654:	d9001317 	ldw	r4,76(sp)
    b658:	bd3fffc3 	ldbu	r20,-1(r23)
    b65c:	d9000515 	stw	r4,20(sp)
    b660:	003d3b06 	br	ab50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ab50>
    b664:	0027883a 	mov	r19,zero
    b668:	003f1b06 	br	b2d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2d8>
    b66c:	d8800817 	ldw	r2,32(sp)
    b670:	11e9c83a 	sub	r20,r2,r7
    b674:	0005883a 	mov	r2,zero
    b678:	003d5406 	br	abcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700abcc>
    b67c:	00800044 	movi	r2,1
    b680:	003dc706 	br	ada0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ada0>
    b684:	d8c00217 	ldw	r3,8(sp)
    b688:	00800d84 	movi	r2,54
    b68c:	dd400a17 	ldw	r21,40(sp)
    b690:	10c5c83a 	sub	r2,r2,r3
    b694:	dd000817 	ldw	r20,32(sp)
    b698:	003d4c06 	br	abcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700abcc>
    b69c:	dc800f15 	stw	r18,60(sp)
    b6a0:	dcc01015 	stw	r19,64(sp)
    b6a4:	04000084 	movi	r16,2
    b6a8:	003bed06 	br	a660 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a660>
    b6ac:	d9000617 	ldw	r4,24(sp)
    b6b0:	203f0d26 	beq	r4,zero,b2e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2e8>
    b6b4:	d9800c17 	ldw	r6,48(sp)
    b6b8:	01bcab0e 	bge	zero,r6,a968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a968>
    b6bc:	d9401017 	ldw	r5,64(sp)
    b6c0:	d9000f17 	ldw	r4,60(sp)
    b6c4:	000d883a 	mov	r6,zero
    b6c8:	01d00934 	movhi	r7,16420
    b6cc:	0011c540 	call	11c54 <__muldf3>
    b6d0:	81000044 	addi	r4,r16,1
    b6d4:	d8800f15 	stw	r2,60(sp)
    b6d8:	d8c01015 	stw	r3,64(sp)
    b6dc:	00063a80 	call	63a8 <__floatsidf>
    b6e0:	d9800f17 	ldw	r6,60(sp)
    b6e4:	d9c01017 	ldw	r7,64(sp)
    b6e8:	1009883a 	mov	r4,r2
    b6ec:	180b883a 	mov	r5,r3
    b6f0:	0011c540 	call	11c54 <__muldf3>
    b6f4:	01d00734 	movhi	r7,16412
    b6f8:	000d883a 	mov	r6,zero
    b6fc:	1009883a 	mov	r4,r2
    b700:	180b883a 	mov	r5,r3
    b704:	0005a7c0 	call	5a7c <__adddf3>
    b708:	d9c00517 	ldw	r7,20(sp)
    b70c:	047f3034 	movhi	r17,64704
    b710:	1021883a 	mov	r16,r2
    b714:	39ffffc4 	addi	r7,r7,-1
    b718:	d9c01315 	stw	r7,76(sp)
    b71c:	1c63883a 	add	r17,r3,r17
    b720:	db000c17 	ldw	r12,48(sp)
    b724:	003bea06 	br	a6d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a6d0>
    b728:	dc000915 	stw	r16,36(sp)
    b72c:	003e0e06 	br	af68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af68>
    b730:	01000e44 	movi	r4,57
    b734:	8825883a 	mov	r18,r17
    b738:	9dc00044 	addi	r23,r19,1
    b73c:	99000005 	stb	r4,0(r19)
    b740:	a023883a 	mov	r17,r20
    b744:	dc000915 	stw	r16,36(sp)
    b748:	003da406 	br	addc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700addc>
    b74c:	d9801417 	ldw	r6,80(sp)
    b750:	d9c01517 	ldw	r7,84(sp)
    b754:	0009883a 	mov	r4,zero
    b758:	014ff834 	movhi	r5,16352
    b75c:	001236c0 	call	1236c <__subdf3>
    b760:	880d883a 	mov	r6,r17
    b764:	a00f883a 	mov	r7,r20
    b768:	1009883a 	mov	r4,r2
    b76c:	180b883a 	mov	r5,r3
    b770:	0011a840 	call	11a84 <__gedf2>
    b774:	00bc7c0e 	bge	zero,r2,a968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a968>
    b778:	01000c04 	movi	r4,48
    b77c:	00000106 	br	b784 <_dtoa_r+0x1580>
    b780:	102f883a 	mov	r23,r2
    b784:	b8bfffc4 	addi	r2,r23,-1
    b788:	10c00007 	ldb	r3,0(r2)
    b78c:	193ffc26 	beq	r3,r4,b780 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b780>
    b790:	d9801317 	ldw	r6,76(sp)
    b794:	d9800515 	stw	r6,20(sp)
    b798:	003c4406 	br	a8ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8ac>
    b79c:	d9801317 	ldw	r6,76(sp)
    b7a0:	d9800515 	stw	r6,20(sp)
    b7a4:	003cea06 	br	ab50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ab50>
    b7a8:	dd800f17 	ldw	r22,60(sp)
    b7ac:	dcc01017 	ldw	r19,64(sp)
    b7b0:	dc801217 	ldw	r18,72(sp)
    b7b4:	003c6c06 	br	a968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a968>
    b7b8:	903e031e 	bne	r18,zero,afc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700afc8>
    b7bc:	003ebb06 	br	b2ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2ac>
    b7c0:	103e6c1e 	bne	r2,zero,b174 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b174>
    b7c4:	4080004c 	andi	r2,r8,1
    b7c8:	103e6a26 	beq	r2,zero,b174 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b174>
    b7cc:	003e6606 	br	b168 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b168>
    b7d0:	d8c00317 	ldw	r3,12(sp)
    b7d4:	00800084 	movi	r2,2
    b7d8:	10c02916 	blt	r2,r3,b880 <_dtoa_r+0x167c>
    b7dc:	d9000c17 	ldw	r4,48(sp)
    b7e0:	003e8806 	br	b204 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b204>
    b7e4:	04000084 	movi	r16,2
    b7e8:	003b9d06 	br	a660 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a660>
    b7ec:	d9001317 	ldw	r4,76(sp)
    b7f0:	d9000515 	stw	r4,20(sp)
    b7f4:	003cd606 	br	ab50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ab50>
    b7f8:	d8801317 	ldw	r2,76(sp)
    b7fc:	d8800515 	stw	r2,20(sp)
    b800:	003c2a06 	br	a8ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8ac>
    b804:	d9800317 	ldw	r6,12(sp)
    b808:	00800084 	movi	r2,2
    b80c:	11801516 	blt	r2,r6,b864 <_dtoa_r+0x1660>
    b810:	d9c00c17 	ldw	r7,48(sp)
    b814:	d9c00615 	stw	r7,24(sp)
    b818:	003df706 	br	aff8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aff8>
    b81c:	193d3926 	beq	r3,r4,ad04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad04>
    b820:	00c00f04 	movi	r3,60
    b824:	1885c83a 	sub	r2,r3,r2
    b828:	003ddf06 	br	afa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700afa8>
    b82c:	e009883a 	mov	r4,fp
    b830:	e0001115 	stw	zero,68(fp)
    b834:	000b883a 	mov	r5,zero
    b838:	000ce240 	call	ce24 <_Balloc>
    b83c:	d8800715 	stw	r2,28(sp)
    b840:	d8c00717 	ldw	r3,28(sp)
    b844:	00bfffc4 	movi	r2,-1
    b848:	01000044 	movi	r4,1
    b84c:	d8800c15 	stw	r2,48(sp)
    b850:	e0c01015 	stw	r3,64(fp)
    b854:	d9000b15 	stw	r4,44(sp)
    b858:	d8800615 	stw	r2,24(sp)
    b85c:	d8002215 	stw	zero,136(sp)
    b860:	003c4106 	br	a968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a968>
    b864:	d8c00c17 	ldw	r3,48(sp)
    b868:	d8c00615 	stw	r3,24(sp)
    b86c:	003e7006 	br	b230 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b230>
    b870:	04400044 	movi	r17,1
    b874:	003b2006 	br	a4f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a4f8>
    b878:	000b883a 	mov	r5,zero
    b87c:	003b3d06 	br	a574 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a574>
    b880:	d8800c17 	ldw	r2,48(sp)
    b884:	d8800615 	stw	r2,24(sp)
    b888:	003e6906 	br	b230 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b230>

0000b88c <__sflush_r>:
    b88c:	2880030b 	ldhu	r2,12(r5)
    b890:	defffb04 	addi	sp,sp,-20
    b894:	dcc00315 	stw	r19,12(sp)
    b898:	dc400115 	stw	r17,4(sp)
    b89c:	dfc00415 	stw	ra,16(sp)
    b8a0:	dc800215 	stw	r18,8(sp)
    b8a4:	dc000015 	stw	r16,0(sp)
    b8a8:	10c0020c 	andi	r3,r2,8
    b8ac:	2823883a 	mov	r17,r5
    b8b0:	2027883a 	mov	r19,r4
    b8b4:	1800311e 	bne	r3,zero,b97c <__sflush_r+0xf0>
    b8b8:	28c00117 	ldw	r3,4(r5)
    b8bc:	10820014 	ori	r2,r2,2048
    b8c0:	2880030d 	sth	r2,12(r5)
    b8c4:	00c04b0e 	bge	zero,r3,b9f4 <__sflush_r+0x168>
    b8c8:	8a000a17 	ldw	r8,40(r17)
    b8cc:	40002326 	beq	r8,zero,b95c <__sflush_r+0xd0>
    b8d0:	9c000017 	ldw	r16,0(r19)
    b8d4:	10c4000c 	andi	r3,r2,4096
    b8d8:	98000015 	stw	zero,0(r19)
    b8dc:	18004826 	beq	r3,zero,ba00 <__sflush_r+0x174>
    b8e0:	89801417 	ldw	r6,80(r17)
    b8e4:	10c0010c 	andi	r3,r2,4
    b8e8:	18000626 	beq	r3,zero,b904 <__sflush_r+0x78>
    b8ec:	88c00117 	ldw	r3,4(r17)
    b8f0:	88800c17 	ldw	r2,48(r17)
    b8f4:	30cdc83a 	sub	r6,r6,r3
    b8f8:	10000226 	beq	r2,zero,b904 <__sflush_r+0x78>
    b8fc:	88800f17 	ldw	r2,60(r17)
    b900:	308dc83a 	sub	r6,r6,r2
    b904:	89400717 	ldw	r5,28(r17)
    b908:	000f883a 	mov	r7,zero
    b90c:	9809883a 	mov	r4,r19
    b910:	403ee83a 	callr	r8
    b914:	00ffffc4 	movi	r3,-1
    b918:	10c04426 	beq	r2,r3,ba2c <__sflush_r+0x1a0>
    b91c:	88c0030b 	ldhu	r3,12(r17)
    b920:	89000417 	ldw	r4,16(r17)
    b924:	88000115 	stw	zero,4(r17)
    b928:	197dffcc 	andi	r5,r3,63487
    b92c:	8940030d 	sth	r5,12(r17)
    b930:	89000015 	stw	r4,0(r17)
    b934:	18c4000c 	andi	r3,r3,4096
    b938:	18002c1e 	bne	r3,zero,b9ec <__sflush_r+0x160>
    b93c:	89400c17 	ldw	r5,48(r17)
    b940:	9c000015 	stw	r16,0(r19)
    b944:	28000526 	beq	r5,zero,b95c <__sflush_r+0xd0>
    b948:	88801004 	addi	r2,r17,64
    b94c:	28800226 	beq	r5,r2,b958 <__sflush_r+0xcc>
    b950:	9809883a 	mov	r4,r19
    b954:	000bff80 	call	bff8 <_free_r>
    b958:	88000c15 	stw	zero,48(r17)
    b95c:	0005883a 	mov	r2,zero
    b960:	dfc00417 	ldw	ra,16(sp)
    b964:	dcc00317 	ldw	r19,12(sp)
    b968:	dc800217 	ldw	r18,8(sp)
    b96c:	dc400117 	ldw	r17,4(sp)
    b970:	dc000017 	ldw	r16,0(sp)
    b974:	dec00504 	addi	sp,sp,20
    b978:	f800283a 	ret
    b97c:	2c800417 	ldw	r18,16(r5)
    b980:	903ff626 	beq	r18,zero,b95c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b95c>
    b984:	2c000017 	ldw	r16,0(r5)
    b988:	108000cc 	andi	r2,r2,3
    b98c:	2c800015 	stw	r18,0(r5)
    b990:	84a1c83a 	sub	r16,r16,r18
    b994:	1000131e 	bne	r2,zero,b9e4 <__sflush_r+0x158>
    b998:	28800517 	ldw	r2,20(r5)
    b99c:	88800215 	stw	r2,8(r17)
    b9a0:	04000316 	blt	zero,r16,b9b0 <__sflush_r+0x124>
    b9a4:	003fed06 	br	b95c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b95c>
    b9a8:	90a5883a 	add	r18,r18,r2
    b9ac:	043feb0e 	bge	zero,r16,b95c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b95c>
    b9b0:	88800917 	ldw	r2,36(r17)
    b9b4:	89400717 	ldw	r5,28(r17)
    b9b8:	800f883a 	mov	r7,r16
    b9bc:	900d883a 	mov	r6,r18
    b9c0:	9809883a 	mov	r4,r19
    b9c4:	103ee83a 	callr	r2
    b9c8:	80a1c83a 	sub	r16,r16,r2
    b9cc:	00bff616 	blt	zero,r2,b9a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b9a8>
    b9d0:	88c0030b 	ldhu	r3,12(r17)
    b9d4:	00bfffc4 	movi	r2,-1
    b9d8:	18c01014 	ori	r3,r3,64
    b9dc:	88c0030d 	sth	r3,12(r17)
    b9e0:	003fdf06 	br	b960 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b960>
    b9e4:	0005883a 	mov	r2,zero
    b9e8:	003fec06 	br	b99c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b99c>
    b9ec:	88801415 	stw	r2,80(r17)
    b9f0:	003fd206 	br	b93c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b93c>
    b9f4:	28c00f17 	ldw	r3,60(r5)
    b9f8:	00ffb316 	blt	zero,r3,b8c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b8c8>
    b9fc:	003fd706 	br	b95c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b95c>
    ba00:	89400717 	ldw	r5,28(r17)
    ba04:	000d883a 	mov	r6,zero
    ba08:	01c00044 	movi	r7,1
    ba0c:	9809883a 	mov	r4,r19
    ba10:	403ee83a 	callr	r8
    ba14:	100d883a 	mov	r6,r2
    ba18:	00bfffc4 	movi	r2,-1
    ba1c:	30801426 	beq	r6,r2,ba70 <__sflush_r+0x1e4>
    ba20:	8880030b 	ldhu	r2,12(r17)
    ba24:	8a000a17 	ldw	r8,40(r17)
    ba28:	003fae06 	br	b8e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b8e4>
    ba2c:	98c00017 	ldw	r3,0(r19)
    ba30:	183fba26 	beq	r3,zero,b91c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b91c>
    ba34:	01000744 	movi	r4,29
    ba38:	19000626 	beq	r3,r4,ba54 <__sflush_r+0x1c8>
    ba3c:	01000584 	movi	r4,22
    ba40:	19000426 	beq	r3,r4,ba54 <__sflush_r+0x1c8>
    ba44:	88c0030b 	ldhu	r3,12(r17)
    ba48:	18c01014 	ori	r3,r3,64
    ba4c:	88c0030d 	sth	r3,12(r17)
    ba50:	003fc306 	br	b960 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b960>
    ba54:	8880030b 	ldhu	r2,12(r17)
    ba58:	88c00417 	ldw	r3,16(r17)
    ba5c:	88000115 	stw	zero,4(r17)
    ba60:	10bdffcc 	andi	r2,r2,63487
    ba64:	8880030d 	sth	r2,12(r17)
    ba68:	88c00015 	stw	r3,0(r17)
    ba6c:	003fb306 	br	b93c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b93c>
    ba70:	98800017 	ldw	r2,0(r19)
    ba74:	103fea26 	beq	r2,zero,ba20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ba20>
    ba78:	00c00744 	movi	r3,29
    ba7c:	10c00226 	beq	r2,r3,ba88 <__sflush_r+0x1fc>
    ba80:	00c00584 	movi	r3,22
    ba84:	10c0031e 	bne	r2,r3,ba94 <__sflush_r+0x208>
    ba88:	9c000015 	stw	r16,0(r19)
    ba8c:	0005883a 	mov	r2,zero
    ba90:	003fb306 	br	b960 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b960>
    ba94:	88c0030b 	ldhu	r3,12(r17)
    ba98:	3005883a 	mov	r2,r6
    ba9c:	18c01014 	ori	r3,r3,64
    baa0:	88c0030d 	sth	r3,12(r17)
    baa4:	003fae06 	br	b960 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b960>

0000baa8 <_fflush_r>:
    baa8:	defffd04 	addi	sp,sp,-12
    baac:	dc000115 	stw	r16,4(sp)
    bab0:	dfc00215 	stw	ra,8(sp)
    bab4:	2021883a 	mov	r16,r4
    bab8:	20000226 	beq	r4,zero,bac4 <_fflush_r+0x1c>
    babc:	20800e17 	ldw	r2,56(r4)
    bac0:	10000c26 	beq	r2,zero,baf4 <_fflush_r+0x4c>
    bac4:	2880030f 	ldh	r2,12(r5)
    bac8:	1000051e 	bne	r2,zero,bae0 <_fflush_r+0x38>
    bacc:	0005883a 	mov	r2,zero
    bad0:	dfc00217 	ldw	ra,8(sp)
    bad4:	dc000117 	ldw	r16,4(sp)
    bad8:	dec00304 	addi	sp,sp,12
    badc:	f800283a 	ret
    bae0:	8009883a 	mov	r4,r16
    bae4:	dfc00217 	ldw	ra,8(sp)
    bae8:	dc000117 	ldw	r16,4(sp)
    baec:	dec00304 	addi	sp,sp,12
    baf0:	000b88c1 	jmpi	b88c <__sflush_r>
    baf4:	d9400015 	stw	r5,0(sp)
    baf8:	000be840 	call	be84 <__sinit>
    bafc:	d9400017 	ldw	r5,0(sp)
    bb00:	003ff006 	br	bac4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bac4>

0000bb04 <fflush>:
    bb04:	20000526 	beq	r4,zero,bb1c <fflush+0x18>
    bb08:	008000b4 	movhi	r2,2
    bb0c:	1088e204 	addi	r2,r2,9096
    bb10:	200b883a 	mov	r5,r4
    bb14:	11000017 	ldw	r4,0(r2)
    bb18:	000baa81 	jmpi	baa8 <_fflush_r>
    bb1c:	008000b4 	movhi	r2,2
    bb20:	1088e104 	addi	r2,r2,9092
    bb24:	11000017 	ldw	r4,0(r2)
    bb28:	01400074 	movhi	r5,1
    bb2c:	296eaa04 	addi	r5,r5,-17752
    bb30:	000c8881 	jmpi	c888 <_fwalk_reent>

0000bb34 <__fp_unlock>:
    bb34:	0005883a 	mov	r2,zero
    bb38:	f800283a 	ret

0000bb3c <_cleanup_r>:
    bb3c:	01400074 	movhi	r5,1
    bb40:	297f3d04 	addi	r5,r5,-780
    bb44:	000c8881 	jmpi	c888 <_fwalk_reent>

0000bb48 <__sinit.part.1>:
    bb48:	defff704 	addi	sp,sp,-36
    bb4c:	00c00074 	movhi	r3,1
    bb50:	dfc00815 	stw	ra,32(sp)
    bb54:	ddc00715 	stw	r23,28(sp)
    bb58:	dd800615 	stw	r22,24(sp)
    bb5c:	dd400515 	stw	r21,20(sp)
    bb60:	dd000415 	stw	r20,16(sp)
    bb64:	dcc00315 	stw	r19,12(sp)
    bb68:	dc800215 	stw	r18,8(sp)
    bb6c:	dc400115 	stw	r17,4(sp)
    bb70:	dc000015 	stw	r16,0(sp)
    bb74:	18eecf04 	addi	r3,r3,-17604
    bb78:	24000117 	ldw	r16,4(r4)
    bb7c:	20c00f15 	stw	r3,60(r4)
    bb80:	2080bb04 	addi	r2,r4,748
    bb84:	00c000c4 	movi	r3,3
    bb88:	20c0b915 	stw	r3,740(r4)
    bb8c:	2080ba15 	stw	r2,744(r4)
    bb90:	2000b815 	stw	zero,736(r4)
    bb94:	05c00204 	movi	r23,8
    bb98:	00800104 	movi	r2,4
    bb9c:	2025883a 	mov	r18,r4
    bba0:	b80d883a 	mov	r6,r23
    bba4:	81001704 	addi	r4,r16,92
    bba8:	000b883a 	mov	r5,zero
    bbac:	80000015 	stw	zero,0(r16)
    bbb0:	80000115 	stw	zero,4(r16)
    bbb4:	80000215 	stw	zero,8(r16)
    bbb8:	8080030d 	sth	r2,12(r16)
    bbbc:	80001915 	stw	zero,100(r16)
    bbc0:	8000038d 	sth	zero,14(r16)
    bbc4:	80000415 	stw	zero,16(r16)
    bbc8:	80000515 	stw	zero,20(r16)
    bbcc:	80000615 	stw	zero,24(r16)
    bbd0:	00074ac0 	call	74ac <memset>
    bbd4:	05800074 	movhi	r22,1
    bbd8:	94400217 	ldw	r17,8(r18)
    bbdc:	05400074 	movhi	r21,1
    bbe0:	05000074 	movhi	r20,1
    bbe4:	04c00074 	movhi	r19,1
    bbe8:	b5b8fe04 	addi	r22,r22,-7176
    bbec:	ad791504 	addi	r21,r21,-7084
    bbf0:	a5393404 	addi	r20,r20,-6960
    bbf4:	9cf94b04 	addi	r19,r19,-6868
    bbf8:	85800815 	stw	r22,32(r16)
    bbfc:	85400915 	stw	r21,36(r16)
    bc00:	85000a15 	stw	r20,40(r16)
    bc04:	84c00b15 	stw	r19,44(r16)
    bc08:	84000715 	stw	r16,28(r16)
    bc0c:	00800284 	movi	r2,10
    bc10:	8880030d 	sth	r2,12(r17)
    bc14:	00800044 	movi	r2,1
    bc18:	b80d883a 	mov	r6,r23
    bc1c:	89001704 	addi	r4,r17,92
    bc20:	000b883a 	mov	r5,zero
    bc24:	88000015 	stw	zero,0(r17)
    bc28:	88000115 	stw	zero,4(r17)
    bc2c:	88000215 	stw	zero,8(r17)
    bc30:	88001915 	stw	zero,100(r17)
    bc34:	8880038d 	sth	r2,14(r17)
    bc38:	88000415 	stw	zero,16(r17)
    bc3c:	88000515 	stw	zero,20(r17)
    bc40:	88000615 	stw	zero,24(r17)
    bc44:	00074ac0 	call	74ac <memset>
    bc48:	94000317 	ldw	r16,12(r18)
    bc4c:	00800484 	movi	r2,18
    bc50:	8c400715 	stw	r17,28(r17)
    bc54:	8d800815 	stw	r22,32(r17)
    bc58:	8d400915 	stw	r21,36(r17)
    bc5c:	8d000a15 	stw	r20,40(r17)
    bc60:	8cc00b15 	stw	r19,44(r17)
    bc64:	8080030d 	sth	r2,12(r16)
    bc68:	00800084 	movi	r2,2
    bc6c:	80000015 	stw	zero,0(r16)
    bc70:	80000115 	stw	zero,4(r16)
    bc74:	80000215 	stw	zero,8(r16)
    bc78:	80001915 	stw	zero,100(r16)
    bc7c:	8080038d 	sth	r2,14(r16)
    bc80:	80000415 	stw	zero,16(r16)
    bc84:	80000515 	stw	zero,20(r16)
    bc88:	80000615 	stw	zero,24(r16)
    bc8c:	b80d883a 	mov	r6,r23
    bc90:	000b883a 	mov	r5,zero
    bc94:	81001704 	addi	r4,r16,92
    bc98:	00074ac0 	call	74ac <memset>
    bc9c:	00800044 	movi	r2,1
    bca0:	84000715 	stw	r16,28(r16)
    bca4:	85800815 	stw	r22,32(r16)
    bca8:	85400915 	stw	r21,36(r16)
    bcac:	85000a15 	stw	r20,40(r16)
    bcb0:	84c00b15 	stw	r19,44(r16)
    bcb4:	90800e15 	stw	r2,56(r18)
    bcb8:	dfc00817 	ldw	ra,32(sp)
    bcbc:	ddc00717 	ldw	r23,28(sp)
    bcc0:	dd800617 	ldw	r22,24(sp)
    bcc4:	dd400517 	ldw	r21,20(sp)
    bcc8:	dd000417 	ldw	r20,16(sp)
    bccc:	dcc00317 	ldw	r19,12(sp)
    bcd0:	dc800217 	ldw	r18,8(sp)
    bcd4:	dc400117 	ldw	r17,4(sp)
    bcd8:	dc000017 	ldw	r16,0(sp)
    bcdc:	dec00904 	addi	sp,sp,36
    bce0:	f800283a 	ret

0000bce4 <__fp_lock>:
    bce4:	0005883a 	mov	r2,zero
    bce8:	f800283a 	ret

0000bcec <__sfmoreglue>:
    bcec:	defffc04 	addi	sp,sp,-16
    bcf0:	dc400115 	stw	r17,4(sp)
    bcf4:	2c7fffc4 	addi	r17,r5,-1
    bcf8:	8c401a24 	muli	r17,r17,104
    bcfc:	dc800215 	stw	r18,8(sp)
    bd00:	2825883a 	mov	r18,r5
    bd04:	89401d04 	addi	r5,r17,116
    bd08:	dc000015 	stw	r16,0(sp)
    bd0c:	dfc00315 	stw	ra,12(sp)
    bd10:	0006b580 	call	6b58 <_malloc_r>
    bd14:	1021883a 	mov	r16,r2
    bd18:	10000726 	beq	r2,zero,bd38 <__sfmoreglue+0x4c>
    bd1c:	11000304 	addi	r4,r2,12
    bd20:	10000015 	stw	zero,0(r2)
    bd24:	14800115 	stw	r18,4(r2)
    bd28:	11000215 	stw	r4,8(r2)
    bd2c:	89801a04 	addi	r6,r17,104
    bd30:	000b883a 	mov	r5,zero
    bd34:	00074ac0 	call	74ac <memset>
    bd38:	8005883a 	mov	r2,r16
    bd3c:	dfc00317 	ldw	ra,12(sp)
    bd40:	dc800217 	ldw	r18,8(sp)
    bd44:	dc400117 	ldw	r17,4(sp)
    bd48:	dc000017 	ldw	r16,0(sp)
    bd4c:	dec00404 	addi	sp,sp,16
    bd50:	f800283a 	ret

0000bd54 <__sfp>:
    bd54:	defffb04 	addi	sp,sp,-20
    bd58:	dc000015 	stw	r16,0(sp)
    bd5c:	040000b4 	movhi	r16,2
    bd60:	8408e104 	addi	r16,r16,9092
    bd64:	dcc00315 	stw	r19,12(sp)
    bd68:	2027883a 	mov	r19,r4
    bd6c:	81000017 	ldw	r4,0(r16)
    bd70:	dfc00415 	stw	ra,16(sp)
    bd74:	dc800215 	stw	r18,8(sp)
    bd78:	20800e17 	ldw	r2,56(r4)
    bd7c:	dc400115 	stw	r17,4(sp)
    bd80:	1000021e 	bne	r2,zero,bd8c <__sfp+0x38>
    bd84:	000bb480 	call	bb48 <__sinit.part.1>
    bd88:	81000017 	ldw	r4,0(r16)
    bd8c:	2480b804 	addi	r18,r4,736
    bd90:	047fffc4 	movi	r17,-1
    bd94:	91000117 	ldw	r4,4(r18)
    bd98:	94000217 	ldw	r16,8(r18)
    bd9c:	213fffc4 	addi	r4,r4,-1
    bda0:	20000a16 	blt	r4,zero,bdcc <__sfp+0x78>
    bda4:	8080030f 	ldh	r2,12(r16)
    bda8:	10000c26 	beq	r2,zero,bddc <__sfp+0x88>
    bdac:	80c01d04 	addi	r3,r16,116
    bdb0:	00000206 	br	bdbc <__sfp+0x68>
    bdb4:	18bfe60f 	ldh	r2,-104(r3)
    bdb8:	10000826 	beq	r2,zero,bddc <__sfp+0x88>
    bdbc:	213fffc4 	addi	r4,r4,-1
    bdc0:	1c3ffd04 	addi	r16,r3,-12
    bdc4:	18c01a04 	addi	r3,r3,104
    bdc8:	247ffa1e 	bne	r4,r17,bdb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bdb4>
    bdcc:	90800017 	ldw	r2,0(r18)
    bdd0:	10001d26 	beq	r2,zero,be48 <__sfp+0xf4>
    bdd4:	1025883a 	mov	r18,r2
    bdd8:	003fee06 	br	bd94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd94>
    bddc:	00bfffc4 	movi	r2,-1
    bde0:	8080038d 	sth	r2,14(r16)
    bde4:	00800044 	movi	r2,1
    bde8:	8080030d 	sth	r2,12(r16)
    bdec:	80001915 	stw	zero,100(r16)
    bdf0:	80000015 	stw	zero,0(r16)
    bdf4:	80000215 	stw	zero,8(r16)
    bdf8:	80000115 	stw	zero,4(r16)
    bdfc:	80000415 	stw	zero,16(r16)
    be00:	80000515 	stw	zero,20(r16)
    be04:	80000615 	stw	zero,24(r16)
    be08:	01800204 	movi	r6,8
    be0c:	000b883a 	mov	r5,zero
    be10:	81001704 	addi	r4,r16,92
    be14:	00074ac0 	call	74ac <memset>
    be18:	8005883a 	mov	r2,r16
    be1c:	80000c15 	stw	zero,48(r16)
    be20:	80000d15 	stw	zero,52(r16)
    be24:	80001115 	stw	zero,68(r16)
    be28:	80001215 	stw	zero,72(r16)
    be2c:	dfc00417 	ldw	ra,16(sp)
    be30:	dcc00317 	ldw	r19,12(sp)
    be34:	dc800217 	ldw	r18,8(sp)
    be38:	dc400117 	ldw	r17,4(sp)
    be3c:	dc000017 	ldw	r16,0(sp)
    be40:	dec00504 	addi	sp,sp,20
    be44:	f800283a 	ret
    be48:	01400104 	movi	r5,4
    be4c:	9809883a 	mov	r4,r19
    be50:	000bcec0 	call	bcec <__sfmoreglue>
    be54:	90800015 	stw	r2,0(r18)
    be58:	103fde1e 	bne	r2,zero,bdd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bdd4>
    be5c:	00800304 	movi	r2,12
    be60:	98800015 	stw	r2,0(r19)
    be64:	0005883a 	mov	r2,zero
    be68:	003ff006 	br	be2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be2c>

0000be6c <_cleanup>:
    be6c:	008000b4 	movhi	r2,2
    be70:	1088e104 	addi	r2,r2,9092
    be74:	11000017 	ldw	r4,0(r2)
    be78:	01400074 	movhi	r5,1
    be7c:	297f3d04 	addi	r5,r5,-780
    be80:	000c8881 	jmpi	c888 <_fwalk_reent>

0000be84 <__sinit>:
    be84:	20800e17 	ldw	r2,56(r4)
    be88:	10000126 	beq	r2,zero,be90 <__sinit+0xc>
    be8c:	f800283a 	ret
    be90:	000bb481 	jmpi	bb48 <__sinit.part.1>

0000be94 <__sfp_lock_acquire>:
    be94:	f800283a 	ret

0000be98 <__sfp_lock_release>:
    be98:	f800283a 	ret

0000be9c <__sinit_lock_acquire>:
    be9c:	f800283a 	ret

0000bea0 <__sinit_lock_release>:
    bea0:	f800283a 	ret

0000bea4 <__fp_lock_all>:
    bea4:	008000b4 	movhi	r2,2
    bea8:	1088e204 	addi	r2,r2,9096
    beac:	11000017 	ldw	r4,0(r2)
    beb0:	01400074 	movhi	r5,1
    beb4:	296f3904 	addi	r5,r5,-17180
    beb8:	000c7c41 	jmpi	c7c4 <_fwalk>

0000bebc <__fp_unlock_all>:
    bebc:	008000b4 	movhi	r2,2
    bec0:	1088e204 	addi	r2,r2,9096
    bec4:	11000017 	ldw	r4,0(r2)
    bec8:	01400074 	movhi	r5,1
    becc:	296ecd04 	addi	r5,r5,-17612
    bed0:	000c7c41 	jmpi	c7c4 <_fwalk>

0000bed4 <_malloc_trim_r>:
    bed4:	defffb04 	addi	sp,sp,-20
    bed8:	dcc00315 	stw	r19,12(sp)
    bedc:	04c000b4 	movhi	r19,2
    bee0:	dc800215 	stw	r18,8(sp)
    bee4:	dc400115 	stw	r17,4(sp)
    bee8:	dc000015 	stw	r16,0(sp)
    beec:	dfc00415 	stw	ra,16(sp)
    bef0:	2821883a 	mov	r16,r5
    bef4:	9cc11e04 	addi	r19,r19,1144
    bef8:	2025883a 	mov	r18,r4
    befc:	00139300 	call	13930 <__malloc_lock>
    bf00:	98800217 	ldw	r2,8(r19)
    bf04:	14400117 	ldw	r17,4(r2)
    bf08:	00bfff04 	movi	r2,-4
    bf0c:	88a2703a 	and	r17,r17,r2
    bf10:	8c21c83a 	sub	r16,r17,r16
    bf14:	8403fbc4 	addi	r16,r16,4079
    bf18:	8020d33a 	srli	r16,r16,12
    bf1c:	0083ffc4 	movi	r2,4095
    bf20:	843fffc4 	addi	r16,r16,-1
    bf24:	8020933a 	slli	r16,r16,12
    bf28:	1400060e 	bge	r2,r16,bf44 <_malloc_trim_r+0x70>
    bf2c:	000b883a 	mov	r5,zero
    bf30:	9009883a 	mov	r4,r18
    bf34:	00077140 	call	7714 <_sbrk_r>
    bf38:	98c00217 	ldw	r3,8(r19)
    bf3c:	1c47883a 	add	r3,r3,r17
    bf40:	10c00a26 	beq	r2,r3,bf6c <_malloc_trim_r+0x98>
    bf44:	9009883a 	mov	r4,r18
    bf48:	0013a500 	call	13a50 <__malloc_unlock>
    bf4c:	0005883a 	mov	r2,zero
    bf50:	dfc00417 	ldw	ra,16(sp)
    bf54:	dcc00317 	ldw	r19,12(sp)
    bf58:	dc800217 	ldw	r18,8(sp)
    bf5c:	dc400117 	ldw	r17,4(sp)
    bf60:	dc000017 	ldw	r16,0(sp)
    bf64:	dec00504 	addi	sp,sp,20
    bf68:	f800283a 	ret
    bf6c:	040bc83a 	sub	r5,zero,r16
    bf70:	9009883a 	mov	r4,r18
    bf74:	00077140 	call	7714 <_sbrk_r>
    bf78:	00ffffc4 	movi	r3,-1
    bf7c:	10c00d26 	beq	r2,r3,bfb4 <_malloc_trim_r+0xe0>
    bf80:	00c000f4 	movhi	r3,3
    bf84:	18e92c04 	addi	r3,r3,-23376
    bf88:	18800017 	ldw	r2,0(r3)
    bf8c:	99000217 	ldw	r4,8(r19)
    bf90:	8c23c83a 	sub	r17,r17,r16
    bf94:	8c400054 	ori	r17,r17,1
    bf98:	1421c83a 	sub	r16,r2,r16
    bf9c:	24400115 	stw	r17,4(r4)
    bfa0:	9009883a 	mov	r4,r18
    bfa4:	1c000015 	stw	r16,0(r3)
    bfa8:	0013a500 	call	13a50 <__malloc_unlock>
    bfac:	00800044 	movi	r2,1
    bfb0:	003fe706 	br	bf50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf50>
    bfb4:	000b883a 	mov	r5,zero
    bfb8:	9009883a 	mov	r4,r18
    bfbc:	00077140 	call	7714 <_sbrk_r>
    bfc0:	99000217 	ldw	r4,8(r19)
    bfc4:	014003c4 	movi	r5,15
    bfc8:	1107c83a 	sub	r3,r2,r4
    bfcc:	28ffdd0e 	bge	r5,r3,bf44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf44>
    bfd0:	014000b4 	movhi	r5,2
    bfd4:	2948df04 	addi	r5,r5,9084
    bfd8:	29400017 	ldw	r5,0(r5)
    bfdc:	18c00054 	ori	r3,r3,1
    bfe0:	20c00115 	stw	r3,4(r4)
    bfe4:	00c000f4 	movhi	r3,3
    bfe8:	1145c83a 	sub	r2,r2,r5
    bfec:	18e92c04 	addi	r3,r3,-23376
    bff0:	18800015 	stw	r2,0(r3)
    bff4:	003fd306 	br	bf44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf44>

0000bff8 <_free_r>:
    bff8:	28004126 	beq	r5,zero,c100 <_free_r+0x108>
    bffc:	defffd04 	addi	sp,sp,-12
    c000:	dc400115 	stw	r17,4(sp)
    c004:	dc000015 	stw	r16,0(sp)
    c008:	2023883a 	mov	r17,r4
    c00c:	2821883a 	mov	r16,r5
    c010:	dfc00215 	stw	ra,8(sp)
    c014:	00139300 	call	13930 <__malloc_lock>
    c018:	81ffff17 	ldw	r7,-4(r16)
    c01c:	00bfff84 	movi	r2,-2
    c020:	010000b4 	movhi	r4,2
    c024:	81bffe04 	addi	r6,r16,-8
    c028:	3884703a 	and	r2,r7,r2
    c02c:	21011e04 	addi	r4,r4,1144
    c030:	308b883a 	add	r5,r6,r2
    c034:	2a400117 	ldw	r9,4(r5)
    c038:	22000217 	ldw	r8,8(r4)
    c03c:	00ffff04 	movi	r3,-4
    c040:	48c6703a 	and	r3,r9,r3
    c044:	2a005726 	beq	r5,r8,c1a4 <_free_r+0x1ac>
    c048:	28c00115 	stw	r3,4(r5)
    c04c:	39c0004c 	andi	r7,r7,1
    c050:	3800091e 	bne	r7,zero,c078 <_free_r+0x80>
    c054:	823ffe17 	ldw	r8,-8(r16)
    c058:	22400204 	addi	r9,r4,8
    c05c:	320dc83a 	sub	r6,r6,r8
    c060:	31c00217 	ldw	r7,8(r6)
    c064:	1205883a 	add	r2,r2,r8
    c068:	3a406526 	beq	r7,r9,c200 <_free_r+0x208>
    c06c:	32000317 	ldw	r8,12(r6)
    c070:	3a000315 	stw	r8,12(r7)
    c074:	41c00215 	stw	r7,8(r8)
    c078:	28cf883a 	add	r7,r5,r3
    c07c:	39c00117 	ldw	r7,4(r7)
    c080:	39c0004c 	andi	r7,r7,1
    c084:	38003a26 	beq	r7,zero,c170 <_free_r+0x178>
    c088:	10c00054 	ori	r3,r2,1
    c08c:	30c00115 	stw	r3,4(r6)
    c090:	3087883a 	add	r3,r6,r2
    c094:	18800015 	stw	r2,0(r3)
    c098:	00c07fc4 	movi	r3,511
    c09c:	18801936 	bltu	r3,r2,c104 <_free_r+0x10c>
    c0a0:	1004d0fa 	srli	r2,r2,3
    c0a4:	01c00044 	movi	r7,1
    c0a8:	21400117 	ldw	r5,4(r4)
    c0ac:	10c00044 	addi	r3,r2,1
    c0b0:	18c7883a 	add	r3,r3,r3
    c0b4:	1005d0ba 	srai	r2,r2,2
    c0b8:	18c7883a 	add	r3,r3,r3
    c0bc:	18c7883a 	add	r3,r3,r3
    c0c0:	1907883a 	add	r3,r3,r4
    c0c4:	3884983a 	sll	r2,r7,r2
    c0c8:	19c00017 	ldw	r7,0(r3)
    c0cc:	1a3ffe04 	addi	r8,r3,-8
    c0d0:	1144b03a 	or	r2,r2,r5
    c0d4:	32000315 	stw	r8,12(r6)
    c0d8:	31c00215 	stw	r7,8(r6)
    c0dc:	20800115 	stw	r2,4(r4)
    c0e0:	19800015 	stw	r6,0(r3)
    c0e4:	39800315 	stw	r6,12(r7)
    c0e8:	8809883a 	mov	r4,r17
    c0ec:	dfc00217 	ldw	ra,8(sp)
    c0f0:	dc400117 	ldw	r17,4(sp)
    c0f4:	dc000017 	ldw	r16,0(sp)
    c0f8:	dec00304 	addi	sp,sp,12
    c0fc:	0013a501 	jmpi	13a50 <__malloc_unlock>
    c100:	f800283a 	ret
    c104:	100ad27a 	srli	r5,r2,9
    c108:	00c00104 	movi	r3,4
    c10c:	19404a36 	bltu	r3,r5,c238 <_free_r+0x240>
    c110:	100ad1ba 	srli	r5,r2,6
    c114:	28c00e44 	addi	r3,r5,57
    c118:	18c7883a 	add	r3,r3,r3
    c11c:	29400e04 	addi	r5,r5,56
    c120:	18c7883a 	add	r3,r3,r3
    c124:	18c7883a 	add	r3,r3,r3
    c128:	1909883a 	add	r4,r3,r4
    c12c:	20c00017 	ldw	r3,0(r4)
    c130:	01c000b4 	movhi	r7,2
    c134:	213ffe04 	addi	r4,r4,-8
    c138:	39c11e04 	addi	r7,r7,1144
    c13c:	20c04426 	beq	r4,r3,c250 <_free_r+0x258>
    c140:	01ffff04 	movi	r7,-4
    c144:	19400117 	ldw	r5,4(r3)
    c148:	29ca703a 	and	r5,r5,r7
    c14c:	1140022e 	bgeu	r2,r5,c158 <_free_r+0x160>
    c150:	18c00217 	ldw	r3,8(r3)
    c154:	20fffb1e 	bne	r4,r3,c144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c144>
    c158:	19000317 	ldw	r4,12(r3)
    c15c:	31000315 	stw	r4,12(r6)
    c160:	30c00215 	stw	r3,8(r6)
    c164:	21800215 	stw	r6,8(r4)
    c168:	19800315 	stw	r6,12(r3)
    c16c:	003fde06 	br	c0e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c0e8>
    c170:	29c00217 	ldw	r7,8(r5)
    c174:	10c5883a 	add	r2,r2,r3
    c178:	00c000b4 	movhi	r3,2
    c17c:	18c12004 	addi	r3,r3,1152
    c180:	38c03b26 	beq	r7,r3,c270 <_free_r+0x278>
    c184:	2a000317 	ldw	r8,12(r5)
    c188:	11400054 	ori	r5,r2,1
    c18c:	3087883a 	add	r3,r6,r2
    c190:	3a000315 	stw	r8,12(r7)
    c194:	41c00215 	stw	r7,8(r8)
    c198:	31400115 	stw	r5,4(r6)
    c19c:	18800015 	stw	r2,0(r3)
    c1a0:	003fbd06 	br	c098 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c098>
    c1a4:	39c0004c 	andi	r7,r7,1
    c1a8:	10c5883a 	add	r2,r2,r3
    c1ac:	3800071e 	bne	r7,zero,c1cc <_free_r+0x1d4>
    c1b0:	81fffe17 	ldw	r7,-8(r16)
    c1b4:	31cdc83a 	sub	r6,r6,r7
    c1b8:	30c00317 	ldw	r3,12(r6)
    c1bc:	31400217 	ldw	r5,8(r6)
    c1c0:	11c5883a 	add	r2,r2,r7
    c1c4:	28c00315 	stw	r3,12(r5)
    c1c8:	19400215 	stw	r5,8(r3)
    c1cc:	10c00054 	ori	r3,r2,1
    c1d0:	30c00115 	stw	r3,4(r6)
    c1d4:	00c000b4 	movhi	r3,2
    c1d8:	18c8e004 	addi	r3,r3,9088
    c1dc:	18c00017 	ldw	r3,0(r3)
    c1e0:	21800215 	stw	r6,8(r4)
    c1e4:	10ffc036 	bltu	r2,r3,c0e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c0e8>
    c1e8:	008000b4 	movhi	r2,2
    c1ec:	10910304 	addi	r2,r2,17420
    c1f0:	11400017 	ldw	r5,0(r2)
    c1f4:	8809883a 	mov	r4,r17
    c1f8:	000bed40 	call	bed4 <_malloc_trim_r>
    c1fc:	003fba06 	br	c0e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c0e8>
    c200:	28c9883a 	add	r4,r5,r3
    c204:	21000117 	ldw	r4,4(r4)
    c208:	2100004c 	andi	r4,r4,1
    c20c:	2000391e 	bne	r4,zero,c2f4 <_free_r+0x2fc>
    c210:	29c00217 	ldw	r7,8(r5)
    c214:	29000317 	ldw	r4,12(r5)
    c218:	1885883a 	add	r2,r3,r2
    c21c:	10c00054 	ori	r3,r2,1
    c220:	39000315 	stw	r4,12(r7)
    c224:	21c00215 	stw	r7,8(r4)
    c228:	30c00115 	stw	r3,4(r6)
    c22c:	308d883a 	add	r6,r6,r2
    c230:	30800015 	stw	r2,0(r6)
    c234:	003fac06 	br	c0e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c0e8>
    c238:	00c00504 	movi	r3,20
    c23c:	19401536 	bltu	r3,r5,c294 <_free_r+0x29c>
    c240:	28c01704 	addi	r3,r5,92
    c244:	18c7883a 	add	r3,r3,r3
    c248:	294016c4 	addi	r5,r5,91
    c24c:	003fb406 	br	c120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c120>
    c250:	280bd0ba 	srai	r5,r5,2
    c254:	00c00044 	movi	r3,1
    c258:	38800117 	ldw	r2,4(r7)
    c25c:	194a983a 	sll	r5,r3,r5
    c260:	2007883a 	mov	r3,r4
    c264:	2884b03a 	or	r2,r5,r2
    c268:	38800115 	stw	r2,4(r7)
    c26c:	003fbb06 	br	c15c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c15c>
    c270:	21800515 	stw	r6,20(r4)
    c274:	21800415 	stw	r6,16(r4)
    c278:	10c00054 	ori	r3,r2,1
    c27c:	31c00315 	stw	r7,12(r6)
    c280:	31c00215 	stw	r7,8(r6)
    c284:	30c00115 	stw	r3,4(r6)
    c288:	308d883a 	add	r6,r6,r2
    c28c:	30800015 	stw	r2,0(r6)
    c290:	003f9506 	br	c0e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c0e8>
    c294:	00c01504 	movi	r3,84
    c298:	19400536 	bltu	r3,r5,c2b0 <_free_r+0x2b8>
    c29c:	100ad33a 	srli	r5,r2,12
    c2a0:	28c01bc4 	addi	r3,r5,111
    c2a4:	18c7883a 	add	r3,r3,r3
    c2a8:	29401b84 	addi	r5,r5,110
    c2ac:	003f9c06 	br	c120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c120>
    c2b0:	00c05504 	movi	r3,340
    c2b4:	19400536 	bltu	r3,r5,c2cc <_free_r+0x2d4>
    c2b8:	100ad3fa 	srli	r5,r2,15
    c2bc:	28c01e04 	addi	r3,r5,120
    c2c0:	18c7883a 	add	r3,r3,r3
    c2c4:	29401dc4 	addi	r5,r5,119
    c2c8:	003f9506 	br	c120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c120>
    c2cc:	00c15504 	movi	r3,1364
    c2d0:	19400536 	bltu	r3,r5,c2e8 <_free_r+0x2f0>
    c2d4:	100ad4ba 	srli	r5,r2,18
    c2d8:	28c01f44 	addi	r3,r5,125
    c2dc:	18c7883a 	add	r3,r3,r3
    c2e0:	29401f04 	addi	r5,r5,124
    c2e4:	003f8e06 	br	c120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c120>
    c2e8:	00c03f84 	movi	r3,254
    c2ec:	01401f84 	movi	r5,126
    c2f0:	003f8b06 	br	c120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c120>
    c2f4:	10c00054 	ori	r3,r2,1
    c2f8:	30c00115 	stw	r3,4(r6)
    c2fc:	308d883a 	add	r6,r6,r2
    c300:	30800015 	stw	r2,0(r6)
    c304:	003f7806 	br	c0e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c0e8>

0000c308 <__sfvwrite_r>:
    c308:	30800217 	ldw	r2,8(r6)
    c30c:	10006726 	beq	r2,zero,c4ac <__sfvwrite_r+0x1a4>
    c310:	28c0030b 	ldhu	r3,12(r5)
    c314:	defff404 	addi	sp,sp,-48
    c318:	dd400715 	stw	r21,28(sp)
    c31c:	dd000615 	stw	r20,24(sp)
    c320:	dc000215 	stw	r16,8(sp)
    c324:	dfc00b15 	stw	ra,44(sp)
    c328:	df000a15 	stw	fp,40(sp)
    c32c:	ddc00915 	stw	r23,36(sp)
    c330:	dd800815 	stw	r22,32(sp)
    c334:	dcc00515 	stw	r19,20(sp)
    c338:	dc800415 	stw	r18,16(sp)
    c33c:	dc400315 	stw	r17,12(sp)
    c340:	1880020c 	andi	r2,r3,8
    c344:	2821883a 	mov	r16,r5
    c348:	202b883a 	mov	r21,r4
    c34c:	3029883a 	mov	r20,r6
    c350:	10002726 	beq	r2,zero,c3f0 <__sfvwrite_r+0xe8>
    c354:	28800417 	ldw	r2,16(r5)
    c358:	10002526 	beq	r2,zero,c3f0 <__sfvwrite_r+0xe8>
    c35c:	1880008c 	andi	r2,r3,2
    c360:	a4400017 	ldw	r17,0(r20)
    c364:	10002a26 	beq	r2,zero,c410 <__sfvwrite_r+0x108>
    c368:	05a00034 	movhi	r22,32768
    c36c:	0027883a 	mov	r19,zero
    c370:	0025883a 	mov	r18,zero
    c374:	b5bf0004 	addi	r22,r22,-1024
    c378:	980d883a 	mov	r6,r19
    c37c:	a809883a 	mov	r4,r21
    c380:	90004626 	beq	r18,zero,c49c <__sfvwrite_r+0x194>
    c384:	900f883a 	mov	r7,r18
    c388:	b480022e 	bgeu	r22,r18,c394 <__sfvwrite_r+0x8c>
    c38c:	01e00034 	movhi	r7,32768
    c390:	39ff0004 	addi	r7,r7,-1024
    c394:	80800917 	ldw	r2,36(r16)
    c398:	81400717 	ldw	r5,28(r16)
    c39c:	103ee83a 	callr	r2
    c3a0:	0080570e 	bge	zero,r2,c500 <__sfvwrite_r+0x1f8>
    c3a4:	a0c00217 	ldw	r3,8(r20)
    c3a8:	98a7883a 	add	r19,r19,r2
    c3ac:	90a5c83a 	sub	r18,r18,r2
    c3b0:	1885c83a 	sub	r2,r3,r2
    c3b4:	a0800215 	stw	r2,8(r20)
    c3b8:	103fef1e 	bne	r2,zero,c378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c378>
    c3bc:	0005883a 	mov	r2,zero
    c3c0:	dfc00b17 	ldw	ra,44(sp)
    c3c4:	df000a17 	ldw	fp,40(sp)
    c3c8:	ddc00917 	ldw	r23,36(sp)
    c3cc:	dd800817 	ldw	r22,32(sp)
    c3d0:	dd400717 	ldw	r21,28(sp)
    c3d4:	dd000617 	ldw	r20,24(sp)
    c3d8:	dcc00517 	ldw	r19,20(sp)
    c3dc:	dc800417 	ldw	r18,16(sp)
    c3e0:	dc400317 	ldw	r17,12(sp)
    c3e4:	dc000217 	ldw	r16,8(sp)
    c3e8:	dec00c04 	addi	sp,sp,48
    c3ec:	f800283a 	ret
    c3f0:	800b883a 	mov	r5,r16
    c3f4:	a809883a 	mov	r4,r21
    c3f8:	0009eb00 	call	9eb0 <__swsetup_r>
    c3fc:	1000eb1e 	bne	r2,zero,c7ac <__sfvwrite_r+0x4a4>
    c400:	80c0030b 	ldhu	r3,12(r16)
    c404:	a4400017 	ldw	r17,0(r20)
    c408:	1880008c 	andi	r2,r3,2
    c40c:	103fd61e 	bne	r2,zero,c368 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c368>
    c410:	1880004c 	andi	r2,r3,1
    c414:	10003f1e 	bne	r2,zero,c514 <__sfvwrite_r+0x20c>
    c418:	0039883a 	mov	fp,zero
    c41c:	0025883a 	mov	r18,zero
    c420:	90001a26 	beq	r18,zero,c48c <__sfvwrite_r+0x184>
    c424:	1880800c 	andi	r2,r3,512
    c428:	84c00217 	ldw	r19,8(r16)
    c42c:	10002126 	beq	r2,zero,c4b4 <__sfvwrite_r+0x1ac>
    c430:	982f883a 	mov	r23,r19
    c434:	94c09336 	bltu	r18,r19,c684 <__sfvwrite_r+0x37c>
    c438:	1881200c 	andi	r2,r3,1152
    c43c:	10009e1e 	bne	r2,zero,c6b8 <__sfvwrite_r+0x3b0>
    c440:	81000017 	ldw	r4,0(r16)
    c444:	b80d883a 	mov	r6,r23
    c448:	e00b883a 	mov	r5,fp
    c44c:	000ccc80 	call	ccc8 <memmove>
    c450:	80c00217 	ldw	r3,8(r16)
    c454:	81000017 	ldw	r4,0(r16)
    c458:	9005883a 	mov	r2,r18
    c45c:	1ce7c83a 	sub	r19,r3,r19
    c460:	25cf883a 	add	r7,r4,r23
    c464:	84c00215 	stw	r19,8(r16)
    c468:	81c00015 	stw	r7,0(r16)
    c46c:	a0c00217 	ldw	r3,8(r20)
    c470:	e0b9883a 	add	fp,fp,r2
    c474:	90a5c83a 	sub	r18,r18,r2
    c478:	18a7c83a 	sub	r19,r3,r2
    c47c:	a4c00215 	stw	r19,8(r20)
    c480:	983fce26 	beq	r19,zero,c3bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3bc>
    c484:	80c0030b 	ldhu	r3,12(r16)
    c488:	903fe61e 	bne	r18,zero,c424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c424>
    c48c:	8f000017 	ldw	fp,0(r17)
    c490:	8c800117 	ldw	r18,4(r17)
    c494:	8c400204 	addi	r17,r17,8
    c498:	003fe106 	br	c420 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c420>
    c49c:	8cc00017 	ldw	r19,0(r17)
    c4a0:	8c800117 	ldw	r18,4(r17)
    c4a4:	8c400204 	addi	r17,r17,8
    c4a8:	003fb306 	br	c378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c378>
    c4ac:	0005883a 	mov	r2,zero
    c4b0:	f800283a 	ret
    c4b4:	81000017 	ldw	r4,0(r16)
    c4b8:	80800417 	ldw	r2,16(r16)
    c4bc:	11005736 	bltu	r2,r4,c61c <__sfvwrite_r+0x314>
    c4c0:	85c00517 	ldw	r23,20(r16)
    c4c4:	95c05536 	bltu	r18,r23,c61c <__sfvwrite_r+0x314>
    c4c8:	00a00034 	movhi	r2,32768
    c4cc:	10bfffc4 	addi	r2,r2,-1
    c4d0:	9009883a 	mov	r4,r18
    c4d4:	1480012e 	bgeu	r2,r18,c4dc <__sfvwrite_r+0x1d4>
    c4d8:	1009883a 	mov	r4,r2
    c4dc:	b80b883a 	mov	r5,r23
    c4e0:	0010f600 	call	10f60 <__divsi3>
    c4e4:	15cf383a 	mul	r7,r2,r23
    c4e8:	81400717 	ldw	r5,28(r16)
    c4ec:	80800917 	ldw	r2,36(r16)
    c4f0:	e00d883a 	mov	r6,fp
    c4f4:	a809883a 	mov	r4,r21
    c4f8:	103ee83a 	callr	r2
    c4fc:	00bfdb16 	blt	zero,r2,c46c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c46c>
    c500:	8080030b 	ldhu	r2,12(r16)
    c504:	10801014 	ori	r2,r2,64
    c508:	8080030d 	sth	r2,12(r16)
    c50c:	00bfffc4 	movi	r2,-1
    c510:	003fab06 	br	c3c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3c0>
    c514:	0027883a 	mov	r19,zero
    c518:	0011883a 	mov	r8,zero
    c51c:	0039883a 	mov	fp,zero
    c520:	0025883a 	mov	r18,zero
    c524:	90001f26 	beq	r18,zero,c5a4 <__sfvwrite_r+0x29c>
    c528:	40005a26 	beq	r8,zero,c694 <__sfvwrite_r+0x38c>
    c52c:	982d883a 	mov	r22,r19
    c530:	94c0012e 	bgeu	r18,r19,c538 <__sfvwrite_r+0x230>
    c534:	902d883a 	mov	r22,r18
    c538:	81000017 	ldw	r4,0(r16)
    c53c:	80800417 	ldw	r2,16(r16)
    c540:	b02f883a 	mov	r23,r22
    c544:	81c00517 	ldw	r7,20(r16)
    c548:	1100032e 	bgeu	r2,r4,c558 <__sfvwrite_r+0x250>
    c54c:	80c00217 	ldw	r3,8(r16)
    c550:	38c7883a 	add	r3,r7,r3
    c554:	1d801816 	blt	r3,r22,c5b8 <__sfvwrite_r+0x2b0>
    c558:	b1c03e16 	blt	r22,r7,c654 <__sfvwrite_r+0x34c>
    c55c:	80800917 	ldw	r2,36(r16)
    c560:	81400717 	ldw	r5,28(r16)
    c564:	e00d883a 	mov	r6,fp
    c568:	da000115 	stw	r8,4(sp)
    c56c:	a809883a 	mov	r4,r21
    c570:	103ee83a 	callr	r2
    c574:	102f883a 	mov	r23,r2
    c578:	da000117 	ldw	r8,4(sp)
    c57c:	00bfe00e 	bge	zero,r2,c500 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c500>
    c580:	9de7c83a 	sub	r19,r19,r23
    c584:	98001f26 	beq	r19,zero,c604 <__sfvwrite_r+0x2fc>
    c588:	a0800217 	ldw	r2,8(r20)
    c58c:	e5f9883a 	add	fp,fp,r23
    c590:	95e5c83a 	sub	r18,r18,r23
    c594:	15efc83a 	sub	r23,r2,r23
    c598:	a5c00215 	stw	r23,8(r20)
    c59c:	b83f8726 	beq	r23,zero,c3bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3bc>
    c5a0:	903fe11e 	bne	r18,zero,c528 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c528>
    c5a4:	8f000017 	ldw	fp,0(r17)
    c5a8:	8c800117 	ldw	r18,4(r17)
    c5ac:	0011883a 	mov	r8,zero
    c5b0:	8c400204 	addi	r17,r17,8
    c5b4:	003fdb06 	br	c524 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c524>
    c5b8:	180d883a 	mov	r6,r3
    c5bc:	e00b883a 	mov	r5,fp
    c5c0:	da000115 	stw	r8,4(sp)
    c5c4:	d8c00015 	stw	r3,0(sp)
    c5c8:	000ccc80 	call	ccc8 <memmove>
    c5cc:	d8c00017 	ldw	r3,0(sp)
    c5d0:	80800017 	ldw	r2,0(r16)
    c5d4:	800b883a 	mov	r5,r16
    c5d8:	a809883a 	mov	r4,r21
    c5dc:	10c5883a 	add	r2,r2,r3
    c5e0:	80800015 	stw	r2,0(r16)
    c5e4:	d8c00015 	stw	r3,0(sp)
    c5e8:	000baa80 	call	baa8 <_fflush_r>
    c5ec:	d8c00017 	ldw	r3,0(sp)
    c5f0:	da000117 	ldw	r8,4(sp)
    c5f4:	103fc21e 	bne	r2,zero,c500 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c500>
    c5f8:	182f883a 	mov	r23,r3
    c5fc:	9de7c83a 	sub	r19,r19,r23
    c600:	983fe11e 	bne	r19,zero,c588 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c588>
    c604:	800b883a 	mov	r5,r16
    c608:	a809883a 	mov	r4,r21
    c60c:	000baa80 	call	baa8 <_fflush_r>
    c610:	103fbb1e 	bne	r2,zero,c500 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c500>
    c614:	0011883a 	mov	r8,zero
    c618:	003fdb06 	br	c588 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c588>
    c61c:	94c0012e 	bgeu	r18,r19,c624 <__sfvwrite_r+0x31c>
    c620:	9027883a 	mov	r19,r18
    c624:	980d883a 	mov	r6,r19
    c628:	e00b883a 	mov	r5,fp
    c62c:	000ccc80 	call	ccc8 <memmove>
    c630:	80800217 	ldw	r2,8(r16)
    c634:	80c00017 	ldw	r3,0(r16)
    c638:	14c5c83a 	sub	r2,r2,r19
    c63c:	1cc7883a 	add	r3,r3,r19
    c640:	80800215 	stw	r2,8(r16)
    c644:	80c00015 	stw	r3,0(r16)
    c648:	10004326 	beq	r2,zero,c758 <__sfvwrite_r+0x450>
    c64c:	9805883a 	mov	r2,r19
    c650:	003f8606 	br	c46c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c46c>
    c654:	b00d883a 	mov	r6,r22
    c658:	e00b883a 	mov	r5,fp
    c65c:	da000115 	stw	r8,4(sp)
    c660:	000ccc80 	call	ccc8 <memmove>
    c664:	80800217 	ldw	r2,8(r16)
    c668:	80c00017 	ldw	r3,0(r16)
    c66c:	da000117 	ldw	r8,4(sp)
    c670:	1585c83a 	sub	r2,r2,r22
    c674:	1dad883a 	add	r22,r3,r22
    c678:	80800215 	stw	r2,8(r16)
    c67c:	85800015 	stw	r22,0(r16)
    c680:	003fbf06 	br	c580 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c580>
    c684:	81000017 	ldw	r4,0(r16)
    c688:	9027883a 	mov	r19,r18
    c68c:	902f883a 	mov	r23,r18
    c690:	003f6c06 	br	c444 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c444>
    c694:	900d883a 	mov	r6,r18
    c698:	01400284 	movi	r5,10
    c69c:	e009883a 	mov	r4,fp
    c6a0:	000cbe40 	call	cbe4 <memchr>
    c6a4:	10003e26 	beq	r2,zero,c7a0 <__sfvwrite_r+0x498>
    c6a8:	10800044 	addi	r2,r2,1
    c6ac:	1727c83a 	sub	r19,r2,fp
    c6b0:	02000044 	movi	r8,1
    c6b4:	003f9d06 	br	c52c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c52c>
    c6b8:	80800517 	ldw	r2,20(r16)
    c6bc:	81400417 	ldw	r5,16(r16)
    c6c0:	81c00017 	ldw	r7,0(r16)
    c6c4:	10a7883a 	add	r19,r2,r2
    c6c8:	9885883a 	add	r2,r19,r2
    c6cc:	1026d7fa 	srli	r19,r2,31
    c6d0:	396dc83a 	sub	r22,r7,r5
    c6d4:	b1000044 	addi	r4,r22,1
    c6d8:	9885883a 	add	r2,r19,r2
    c6dc:	1027d07a 	srai	r19,r2,1
    c6e0:	2485883a 	add	r2,r4,r18
    c6e4:	980d883a 	mov	r6,r19
    c6e8:	9880022e 	bgeu	r19,r2,c6f4 <__sfvwrite_r+0x3ec>
    c6ec:	1027883a 	mov	r19,r2
    c6f0:	100d883a 	mov	r6,r2
    c6f4:	18c1000c 	andi	r3,r3,1024
    c6f8:	18001c26 	beq	r3,zero,c76c <__sfvwrite_r+0x464>
    c6fc:	300b883a 	mov	r5,r6
    c700:	a809883a 	mov	r4,r21
    c704:	0006b580 	call	6b58 <_malloc_r>
    c708:	102f883a 	mov	r23,r2
    c70c:	10002926 	beq	r2,zero,c7b4 <__sfvwrite_r+0x4ac>
    c710:	81400417 	ldw	r5,16(r16)
    c714:	b00d883a 	mov	r6,r22
    c718:	1009883a 	mov	r4,r2
    c71c:	00073640 	call	7364 <memcpy>
    c720:	8080030b 	ldhu	r2,12(r16)
    c724:	00fedfc4 	movi	r3,-1153
    c728:	10c4703a 	and	r2,r2,r3
    c72c:	10802014 	ori	r2,r2,128
    c730:	8080030d 	sth	r2,12(r16)
    c734:	bd89883a 	add	r4,r23,r22
    c738:	9d8fc83a 	sub	r7,r19,r22
    c73c:	85c00415 	stw	r23,16(r16)
    c740:	84c00515 	stw	r19,20(r16)
    c744:	81000015 	stw	r4,0(r16)
    c748:	9027883a 	mov	r19,r18
    c74c:	81c00215 	stw	r7,8(r16)
    c750:	902f883a 	mov	r23,r18
    c754:	003f3b06 	br	c444 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c444>
    c758:	800b883a 	mov	r5,r16
    c75c:	a809883a 	mov	r4,r21
    c760:	000baa80 	call	baa8 <_fflush_r>
    c764:	103fb926 	beq	r2,zero,c64c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c64c>
    c768:	003f6506 	br	c500 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c500>
    c76c:	a809883a 	mov	r4,r21
    c770:	000de200 	call	de20 <_realloc_r>
    c774:	102f883a 	mov	r23,r2
    c778:	103fee1e 	bne	r2,zero,c734 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c734>
    c77c:	81400417 	ldw	r5,16(r16)
    c780:	a809883a 	mov	r4,r21
    c784:	000bff80 	call	bff8 <_free_r>
    c788:	8080030b 	ldhu	r2,12(r16)
    c78c:	00ffdfc4 	movi	r3,-129
    c790:	1884703a 	and	r2,r3,r2
    c794:	00c00304 	movi	r3,12
    c798:	a8c00015 	stw	r3,0(r21)
    c79c:	003f5906 	br	c504 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c504>
    c7a0:	94c00044 	addi	r19,r18,1
    c7a4:	02000044 	movi	r8,1
    c7a8:	003f6006 	br	c52c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c52c>
    c7ac:	00bfffc4 	movi	r2,-1
    c7b0:	003f0306 	br	c3c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3c0>
    c7b4:	00800304 	movi	r2,12
    c7b8:	a8800015 	stw	r2,0(r21)
    c7bc:	8080030b 	ldhu	r2,12(r16)
    c7c0:	003f5006 	br	c504 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c504>

0000c7c4 <_fwalk>:
    c7c4:	defff704 	addi	sp,sp,-36
    c7c8:	dd000415 	stw	r20,16(sp)
    c7cc:	dfc00815 	stw	ra,32(sp)
    c7d0:	ddc00715 	stw	r23,28(sp)
    c7d4:	dd800615 	stw	r22,24(sp)
    c7d8:	dd400515 	stw	r21,20(sp)
    c7dc:	dcc00315 	stw	r19,12(sp)
    c7e0:	dc800215 	stw	r18,8(sp)
    c7e4:	dc400115 	stw	r17,4(sp)
    c7e8:	dc000015 	stw	r16,0(sp)
    c7ec:	2500b804 	addi	r20,r4,736
    c7f0:	a0002326 	beq	r20,zero,c880 <_fwalk+0xbc>
    c7f4:	282b883a 	mov	r21,r5
    c7f8:	002f883a 	mov	r23,zero
    c7fc:	05800044 	movi	r22,1
    c800:	04ffffc4 	movi	r19,-1
    c804:	a4400117 	ldw	r17,4(r20)
    c808:	a4800217 	ldw	r18,8(r20)
    c80c:	8c7fffc4 	addi	r17,r17,-1
    c810:	88000d16 	blt	r17,zero,c848 <_fwalk+0x84>
    c814:	94000304 	addi	r16,r18,12
    c818:	94800384 	addi	r18,r18,14
    c81c:	8080000b 	ldhu	r2,0(r16)
    c820:	8c7fffc4 	addi	r17,r17,-1
    c824:	813ffd04 	addi	r4,r16,-12
    c828:	b080042e 	bgeu	r22,r2,c83c <_fwalk+0x78>
    c82c:	9080000f 	ldh	r2,0(r18)
    c830:	14c00226 	beq	r2,r19,c83c <_fwalk+0x78>
    c834:	a83ee83a 	callr	r21
    c838:	b8aeb03a 	or	r23,r23,r2
    c83c:	84001a04 	addi	r16,r16,104
    c840:	94801a04 	addi	r18,r18,104
    c844:	8cfff51e 	bne	r17,r19,c81c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c81c>
    c848:	a5000017 	ldw	r20,0(r20)
    c84c:	a03fed1e 	bne	r20,zero,c804 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c804>
    c850:	b805883a 	mov	r2,r23
    c854:	dfc00817 	ldw	ra,32(sp)
    c858:	ddc00717 	ldw	r23,28(sp)
    c85c:	dd800617 	ldw	r22,24(sp)
    c860:	dd400517 	ldw	r21,20(sp)
    c864:	dd000417 	ldw	r20,16(sp)
    c868:	dcc00317 	ldw	r19,12(sp)
    c86c:	dc800217 	ldw	r18,8(sp)
    c870:	dc400117 	ldw	r17,4(sp)
    c874:	dc000017 	ldw	r16,0(sp)
    c878:	dec00904 	addi	sp,sp,36
    c87c:	f800283a 	ret
    c880:	002f883a 	mov	r23,zero
    c884:	003ff206 	br	c850 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c850>

0000c888 <_fwalk_reent>:
    c888:	defff704 	addi	sp,sp,-36
    c88c:	dd000415 	stw	r20,16(sp)
    c890:	dfc00815 	stw	ra,32(sp)
    c894:	ddc00715 	stw	r23,28(sp)
    c898:	dd800615 	stw	r22,24(sp)
    c89c:	dd400515 	stw	r21,20(sp)
    c8a0:	dcc00315 	stw	r19,12(sp)
    c8a4:	dc800215 	stw	r18,8(sp)
    c8a8:	dc400115 	stw	r17,4(sp)
    c8ac:	dc000015 	stw	r16,0(sp)
    c8b0:	2500b804 	addi	r20,r4,736
    c8b4:	a0002326 	beq	r20,zero,c944 <_fwalk_reent+0xbc>
    c8b8:	282b883a 	mov	r21,r5
    c8bc:	2027883a 	mov	r19,r4
    c8c0:	002f883a 	mov	r23,zero
    c8c4:	05800044 	movi	r22,1
    c8c8:	04bfffc4 	movi	r18,-1
    c8cc:	a4400117 	ldw	r17,4(r20)
    c8d0:	a4000217 	ldw	r16,8(r20)
    c8d4:	8c7fffc4 	addi	r17,r17,-1
    c8d8:	88000c16 	blt	r17,zero,c90c <_fwalk_reent+0x84>
    c8dc:	84000304 	addi	r16,r16,12
    c8e0:	8080000b 	ldhu	r2,0(r16)
    c8e4:	8c7fffc4 	addi	r17,r17,-1
    c8e8:	817ffd04 	addi	r5,r16,-12
    c8ec:	b080052e 	bgeu	r22,r2,c904 <_fwalk_reent+0x7c>
    c8f0:	8080008f 	ldh	r2,2(r16)
    c8f4:	9809883a 	mov	r4,r19
    c8f8:	14800226 	beq	r2,r18,c904 <_fwalk_reent+0x7c>
    c8fc:	a83ee83a 	callr	r21
    c900:	b8aeb03a 	or	r23,r23,r2
    c904:	84001a04 	addi	r16,r16,104
    c908:	8cbff51e 	bne	r17,r18,c8e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c8e0>
    c90c:	a5000017 	ldw	r20,0(r20)
    c910:	a03fee1e 	bne	r20,zero,c8cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c8cc>
    c914:	b805883a 	mov	r2,r23
    c918:	dfc00817 	ldw	ra,32(sp)
    c91c:	ddc00717 	ldw	r23,28(sp)
    c920:	dd800617 	ldw	r22,24(sp)
    c924:	dd400517 	ldw	r21,20(sp)
    c928:	dd000417 	ldw	r20,16(sp)
    c92c:	dcc00317 	ldw	r19,12(sp)
    c930:	dc800217 	ldw	r18,8(sp)
    c934:	dc400117 	ldw	r17,4(sp)
    c938:	dc000017 	ldw	r16,0(sp)
    c93c:	dec00904 	addi	sp,sp,36
    c940:	f800283a 	ret
    c944:	002f883a 	mov	r23,zero
    c948:	003ff206 	br	c914 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c914>

0000c94c <_setlocale_r>:
    c94c:	30001b26 	beq	r6,zero,c9bc <_setlocale_r+0x70>
    c950:	014000b4 	movhi	r5,2
    c954:	defffe04 	addi	sp,sp,-8
    c958:	29400e04 	addi	r5,r5,56
    c95c:	3009883a 	mov	r4,r6
    c960:	dc000015 	stw	r16,0(sp)
    c964:	dfc00115 	stw	ra,4(sp)
    c968:	3021883a 	mov	r16,r6
    c96c:	0007a6c0 	call	7a6c <strcmp>
    c970:	1000061e 	bne	r2,zero,c98c <_setlocale_r+0x40>
    c974:	008000b4 	movhi	r2,2
    c978:	10800d04 	addi	r2,r2,52
    c97c:	dfc00117 	ldw	ra,4(sp)
    c980:	dc000017 	ldw	r16,0(sp)
    c984:	dec00204 	addi	sp,sp,8
    c988:	f800283a 	ret
    c98c:	014000b4 	movhi	r5,2
    c990:	29400d04 	addi	r5,r5,52
    c994:	8009883a 	mov	r4,r16
    c998:	0007a6c0 	call	7a6c <strcmp>
    c99c:	103ff526 	beq	r2,zero,c974 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c974>
    c9a0:	014000b4 	movhi	r5,2
    c9a4:	297ff804 	addi	r5,r5,-32
    c9a8:	8009883a 	mov	r4,r16
    c9ac:	0007a6c0 	call	7a6c <strcmp>
    c9b0:	103ff026 	beq	r2,zero,c974 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c974>
    c9b4:	0005883a 	mov	r2,zero
    c9b8:	003ff006 	br	c97c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c97c>
    c9bc:	008000b4 	movhi	r2,2
    c9c0:	10800d04 	addi	r2,r2,52
    c9c4:	f800283a 	ret

0000c9c8 <__locale_charset>:
    c9c8:	008000b4 	movhi	r2,2
    c9cc:	10833104 	addi	r2,r2,3268
    c9d0:	f800283a 	ret

0000c9d4 <__locale_mb_cur_max>:
    c9d4:	008000b4 	movhi	r2,2
    c9d8:	1088e304 	addi	r2,r2,9100
    c9dc:	10800017 	ldw	r2,0(r2)
    c9e0:	f800283a 	ret

0000c9e4 <__locale_msgcharset>:
    c9e4:	008000b4 	movhi	r2,2
    c9e8:	10832904 	addi	r2,r2,3236
    c9ec:	f800283a 	ret

0000c9f0 <__locale_cjk_lang>:
    c9f0:	0005883a 	mov	r2,zero
    c9f4:	f800283a 	ret

0000c9f8 <_localeconv_r>:
    c9f8:	008000b4 	movhi	r2,2
    c9fc:	10833904 	addi	r2,r2,3300
    ca00:	f800283a 	ret

0000ca04 <setlocale>:
    ca04:	008000b4 	movhi	r2,2
    ca08:	1088e204 	addi	r2,r2,9096
    ca0c:	280d883a 	mov	r6,r5
    ca10:	200b883a 	mov	r5,r4
    ca14:	11000017 	ldw	r4,0(r2)
    ca18:	000c94c1 	jmpi	c94c <_setlocale_r>

0000ca1c <localeconv>:
    ca1c:	008000b4 	movhi	r2,2
    ca20:	10833904 	addi	r2,r2,3300
    ca24:	f800283a 	ret

0000ca28 <__smakebuf_r>:
    ca28:	2880030b 	ldhu	r2,12(r5)
    ca2c:	10c0008c 	andi	r3,r2,2
    ca30:	1800411e 	bne	r3,zero,cb38 <__smakebuf_r+0x110>
    ca34:	deffec04 	addi	sp,sp,-80
    ca38:	dc000f15 	stw	r16,60(sp)
    ca3c:	2821883a 	mov	r16,r5
    ca40:	2940038f 	ldh	r5,14(r5)
    ca44:	dc401015 	stw	r17,64(sp)
    ca48:	dfc01315 	stw	ra,76(sp)
    ca4c:	dcc01215 	stw	r19,72(sp)
    ca50:	dc801115 	stw	r18,68(sp)
    ca54:	2023883a 	mov	r17,r4
    ca58:	28001c16 	blt	r5,zero,cacc <__smakebuf_r+0xa4>
    ca5c:	d80d883a 	mov	r6,sp
    ca60:	00100000 	call	10000 <_fstat_r>
    ca64:	10001816 	blt	r2,zero,cac8 <__smakebuf_r+0xa0>
    ca68:	d8800117 	ldw	r2,4(sp)
    ca6c:	00e00014 	movui	r3,32768
    ca70:	10bc000c 	andi	r2,r2,61440
    ca74:	14c80020 	cmpeqi	r19,r2,8192
    ca78:	10c03726 	beq	r2,r3,cb58 <__smakebuf_r+0x130>
    ca7c:	80c0030b 	ldhu	r3,12(r16)
    ca80:	18c20014 	ori	r3,r3,2048
    ca84:	80c0030d 	sth	r3,12(r16)
    ca88:	00c80004 	movi	r3,8192
    ca8c:	10c0521e 	bne	r2,r3,cbd8 <__smakebuf_r+0x1b0>
    ca90:	8140038f 	ldh	r5,14(r16)
    ca94:	8809883a 	mov	r4,r17
    ca98:	001005c0 	call	1005c <_isatty_r>
    ca9c:	10004c26 	beq	r2,zero,cbd0 <__smakebuf_r+0x1a8>
    caa0:	8080030b 	ldhu	r2,12(r16)
    caa4:	80c010c4 	addi	r3,r16,67
    caa8:	80c00015 	stw	r3,0(r16)
    caac:	10800054 	ori	r2,r2,1
    cab0:	8080030d 	sth	r2,12(r16)
    cab4:	00800044 	movi	r2,1
    cab8:	80c00415 	stw	r3,16(r16)
    cabc:	80800515 	stw	r2,20(r16)
    cac0:	04810004 	movi	r18,1024
    cac4:	00000706 	br	cae4 <__smakebuf_r+0xbc>
    cac8:	8080030b 	ldhu	r2,12(r16)
    cacc:	10c0200c 	andi	r3,r2,128
    cad0:	18001f1e 	bne	r3,zero,cb50 <__smakebuf_r+0x128>
    cad4:	04810004 	movi	r18,1024
    cad8:	10820014 	ori	r2,r2,2048
    cadc:	8080030d 	sth	r2,12(r16)
    cae0:	0027883a 	mov	r19,zero
    cae4:	900b883a 	mov	r5,r18
    cae8:	8809883a 	mov	r4,r17
    caec:	0006b580 	call	6b58 <_malloc_r>
    caf0:	10002c26 	beq	r2,zero,cba4 <__smakebuf_r+0x17c>
    caf4:	80c0030b 	ldhu	r3,12(r16)
    caf8:	01000074 	movhi	r4,1
    cafc:	212ecf04 	addi	r4,r4,-17604
    cb00:	89000f15 	stw	r4,60(r17)
    cb04:	18c02014 	ori	r3,r3,128
    cb08:	80c0030d 	sth	r3,12(r16)
    cb0c:	80800015 	stw	r2,0(r16)
    cb10:	80800415 	stw	r2,16(r16)
    cb14:	84800515 	stw	r18,20(r16)
    cb18:	98001a1e 	bne	r19,zero,cb84 <__smakebuf_r+0x15c>
    cb1c:	dfc01317 	ldw	ra,76(sp)
    cb20:	dcc01217 	ldw	r19,72(sp)
    cb24:	dc801117 	ldw	r18,68(sp)
    cb28:	dc401017 	ldw	r17,64(sp)
    cb2c:	dc000f17 	ldw	r16,60(sp)
    cb30:	dec01404 	addi	sp,sp,80
    cb34:	f800283a 	ret
    cb38:	288010c4 	addi	r2,r5,67
    cb3c:	28800015 	stw	r2,0(r5)
    cb40:	28800415 	stw	r2,16(r5)
    cb44:	00800044 	movi	r2,1
    cb48:	28800515 	stw	r2,20(r5)
    cb4c:	f800283a 	ret
    cb50:	04801004 	movi	r18,64
    cb54:	003fe006 	br	cad8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cad8>
    cb58:	81000a17 	ldw	r4,40(r16)
    cb5c:	00c00074 	movhi	r3,1
    cb60:	18f93404 	addi	r3,r3,-6960
    cb64:	20ffc51e 	bne	r4,r3,ca7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca7c>
    cb68:	8080030b 	ldhu	r2,12(r16)
    cb6c:	04810004 	movi	r18,1024
    cb70:	84801315 	stw	r18,76(r16)
    cb74:	1484b03a 	or	r2,r2,r18
    cb78:	8080030d 	sth	r2,12(r16)
    cb7c:	0027883a 	mov	r19,zero
    cb80:	003fd806 	br	cae4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cae4>
    cb84:	8140038f 	ldh	r5,14(r16)
    cb88:	8809883a 	mov	r4,r17
    cb8c:	001005c0 	call	1005c <_isatty_r>
    cb90:	103fe226 	beq	r2,zero,cb1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb1c>
    cb94:	8080030b 	ldhu	r2,12(r16)
    cb98:	10800054 	ori	r2,r2,1
    cb9c:	8080030d 	sth	r2,12(r16)
    cba0:	003fde06 	br	cb1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb1c>
    cba4:	8080030b 	ldhu	r2,12(r16)
    cba8:	10c0800c 	andi	r3,r2,512
    cbac:	183fdb1e 	bne	r3,zero,cb1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb1c>
    cbb0:	10800094 	ori	r2,r2,2
    cbb4:	80c010c4 	addi	r3,r16,67
    cbb8:	8080030d 	sth	r2,12(r16)
    cbbc:	00800044 	movi	r2,1
    cbc0:	80c00015 	stw	r3,0(r16)
    cbc4:	80c00415 	stw	r3,16(r16)
    cbc8:	80800515 	stw	r2,20(r16)
    cbcc:	003fd306 	br	cb1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb1c>
    cbd0:	04810004 	movi	r18,1024
    cbd4:	003fc306 	br	cae4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cae4>
    cbd8:	0027883a 	mov	r19,zero
    cbdc:	04810004 	movi	r18,1024
    cbe0:	003fc006 	br	cae4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cae4>

0000cbe4 <memchr>:
    cbe4:	208000cc 	andi	r2,r4,3
    cbe8:	280f883a 	mov	r7,r5
    cbec:	10003426 	beq	r2,zero,ccc0 <memchr+0xdc>
    cbf0:	30bfffc4 	addi	r2,r6,-1
    cbf4:	30001a26 	beq	r6,zero,cc60 <memchr+0x7c>
    cbf8:	20c00003 	ldbu	r3,0(r4)
    cbfc:	29803fcc 	andi	r6,r5,255
    cc00:	30c0051e 	bne	r6,r3,cc18 <memchr+0x34>
    cc04:	00001806 	br	cc68 <memchr+0x84>
    cc08:	10001526 	beq	r2,zero,cc60 <memchr+0x7c>
    cc0c:	20c00003 	ldbu	r3,0(r4)
    cc10:	10bfffc4 	addi	r2,r2,-1
    cc14:	30c01426 	beq	r6,r3,cc68 <memchr+0x84>
    cc18:	21000044 	addi	r4,r4,1
    cc1c:	20c000cc 	andi	r3,r4,3
    cc20:	183ff91e 	bne	r3,zero,cc08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc08>
    cc24:	020000c4 	movi	r8,3
    cc28:	40801136 	bltu	r8,r2,cc70 <memchr+0x8c>
    cc2c:	10000c26 	beq	r2,zero,cc60 <memchr+0x7c>
    cc30:	20c00003 	ldbu	r3,0(r4)
    cc34:	29403fcc 	andi	r5,r5,255
    cc38:	28c00b26 	beq	r5,r3,cc68 <memchr+0x84>
    cc3c:	20c00044 	addi	r3,r4,1
    cc40:	39803fcc 	andi	r6,r7,255
    cc44:	2089883a 	add	r4,r4,r2
    cc48:	00000306 	br	cc58 <memchr+0x74>
    cc4c:	18c00044 	addi	r3,r3,1
    cc50:	197fffc3 	ldbu	r5,-1(r3)
    cc54:	31400526 	beq	r6,r5,cc6c <memchr+0x88>
    cc58:	1805883a 	mov	r2,r3
    cc5c:	20fffb1e 	bne	r4,r3,cc4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc4c>
    cc60:	0005883a 	mov	r2,zero
    cc64:	f800283a 	ret
    cc68:	2005883a 	mov	r2,r4
    cc6c:	f800283a 	ret
    cc70:	28c03fcc 	andi	r3,r5,255
    cc74:	1812923a 	slli	r9,r3,8
    cc78:	02ffbff4 	movhi	r11,65279
    cc7c:	02a02074 	movhi	r10,32897
    cc80:	48d2b03a 	or	r9,r9,r3
    cc84:	4806943a 	slli	r3,r9,16
    cc88:	5affbfc4 	addi	r11,r11,-257
    cc8c:	52a02004 	addi	r10,r10,-32640
    cc90:	48d2b03a 	or	r9,r9,r3
    cc94:	20c00017 	ldw	r3,0(r4)
    cc98:	48c6f03a 	xor	r3,r9,r3
    cc9c:	1acd883a 	add	r6,r3,r11
    cca0:	00c6303a 	nor	r3,zero,r3
    cca4:	30c6703a 	and	r3,r6,r3
    cca8:	1a86703a 	and	r3,r3,r10
    ccac:	183fe01e 	bne	r3,zero,cc30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc30>
    ccb0:	10bfff04 	addi	r2,r2,-4
    ccb4:	21000104 	addi	r4,r4,4
    ccb8:	40bff636 	bltu	r8,r2,cc94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc94>
    ccbc:	003fdb06 	br	cc2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc2c>
    ccc0:	3005883a 	mov	r2,r6
    ccc4:	003fd706 	br	cc24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc24>

0000ccc8 <memmove>:
    ccc8:	2005883a 	mov	r2,r4
    cccc:	29000b2e 	bgeu	r5,r4,ccfc <memmove+0x34>
    ccd0:	298f883a 	add	r7,r5,r6
    ccd4:	21c0092e 	bgeu	r4,r7,ccfc <memmove+0x34>
    ccd8:	2187883a 	add	r3,r4,r6
    ccdc:	198bc83a 	sub	r5,r3,r6
    cce0:	30004826 	beq	r6,zero,ce04 <memmove+0x13c>
    cce4:	39ffffc4 	addi	r7,r7,-1
    cce8:	39000003 	ldbu	r4,0(r7)
    ccec:	18ffffc4 	addi	r3,r3,-1
    ccf0:	19000005 	stb	r4,0(r3)
    ccf4:	28fffb1e 	bne	r5,r3,cce4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cce4>
    ccf8:	f800283a 	ret
    ccfc:	00c003c4 	movi	r3,15
    cd00:	1980412e 	bgeu	r3,r6,ce08 <memmove+0x140>
    cd04:	2886b03a 	or	r3,r5,r2
    cd08:	18c000cc 	andi	r3,r3,3
    cd0c:	1800401e 	bne	r3,zero,ce10 <memmove+0x148>
    cd10:	33fffc04 	addi	r15,r6,-16
    cd14:	781ed13a 	srli	r15,r15,4
    cd18:	28c00104 	addi	r3,r5,4
    cd1c:	13400104 	addi	r13,r2,4
    cd20:	781c913a 	slli	r14,r15,4
    cd24:	2b000204 	addi	r12,r5,8
    cd28:	12c00204 	addi	r11,r2,8
    cd2c:	73800504 	addi	r14,r14,20
    cd30:	2a800304 	addi	r10,r5,12
    cd34:	12400304 	addi	r9,r2,12
    cd38:	2b9d883a 	add	r14,r5,r14
    cd3c:	2811883a 	mov	r8,r5
    cd40:	100f883a 	mov	r7,r2
    cd44:	41000017 	ldw	r4,0(r8)
    cd48:	39c00404 	addi	r7,r7,16
    cd4c:	18c00404 	addi	r3,r3,16
    cd50:	393ffc15 	stw	r4,-16(r7)
    cd54:	193ffc17 	ldw	r4,-16(r3)
    cd58:	6b400404 	addi	r13,r13,16
    cd5c:	5ac00404 	addi	r11,r11,16
    cd60:	693ffc15 	stw	r4,-16(r13)
    cd64:	61000017 	ldw	r4,0(r12)
    cd68:	4a400404 	addi	r9,r9,16
    cd6c:	42000404 	addi	r8,r8,16
    cd70:	593ffc15 	stw	r4,-16(r11)
    cd74:	51000017 	ldw	r4,0(r10)
    cd78:	63000404 	addi	r12,r12,16
    cd7c:	52800404 	addi	r10,r10,16
    cd80:	493ffc15 	stw	r4,-16(r9)
    cd84:	1bbfef1e 	bne	r3,r14,cd44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cd44>
    cd88:	79000044 	addi	r4,r15,1
    cd8c:	2008913a 	slli	r4,r4,4
    cd90:	328003cc 	andi	r10,r6,15
    cd94:	02c000c4 	movi	r11,3
    cd98:	1107883a 	add	r3,r2,r4
    cd9c:	290b883a 	add	r5,r5,r4
    cda0:	5a801e2e 	bgeu	r11,r10,ce1c <memmove+0x154>
    cda4:	1813883a 	mov	r9,r3
    cda8:	2811883a 	mov	r8,r5
    cdac:	500f883a 	mov	r7,r10
    cdb0:	41000017 	ldw	r4,0(r8)
    cdb4:	4a400104 	addi	r9,r9,4
    cdb8:	39ffff04 	addi	r7,r7,-4
    cdbc:	493fff15 	stw	r4,-4(r9)
    cdc0:	42000104 	addi	r8,r8,4
    cdc4:	59fffa36 	bltu	r11,r7,cdb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cdb0>
    cdc8:	513fff04 	addi	r4,r10,-4
    cdcc:	2008d0ba 	srli	r4,r4,2
    cdd0:	318000cc 	andi	r6,r6,3
    cdd4:	21000044 	addi	r4,r4,1
    cdd8:	2109883a 	add	r4,r4,r4
    cddc:	2109883a 	add	r4,r4,r4
    cde0:	1907883a 	add	r3,r3,r4
    cde4:	290b883a 	add	r5,r5,r4
    cde8:	30000b26 	beq	r6,zero,ce18 <memmove+0x150>
    cdec:	198d883a 	add	r6,r3,r6
    cdf0:	29c00003 	ldbu	r7,0(r5)
    cdf4:	18c00044 	addi	r3,r3,1
    cdf8:	29400044 	addi	r5,r5,1
    cdfc:	19ffffc5 	stb	r7,-1(r3)
    ce00:	19bffb1e 	bne	r3,r6,cdf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cdf0>
    ce04:	f800283a 	ret
    ce08:	1007883a 	mov	r3,r2
    ce0c:	003ff606 	br	cde8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cde8>
    ce10:	1007883a 	mov	r3,r2
    ce14:	003ff506 	br	cdec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cdec>
    ce18:	f800283a 	ret
    ce1c:	500d883a 	mov	r6,r10
    ce20:	003ff106 	br	cde8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cde8>

0000ce24 <_Balloc>:
    ce24:	20801317 	ldw	r2,76(r4)
    ce28:	defffc04 	addi	sp,sp,-16
    ce2c:	dc400115 	stw	r17,4(sp)
    ce30:	dc000015 	stw	r16,0(sp)
    ce34:	dfc00315 	stw	ra,12(sp)
    ce38:	dc800215 	stw	r18,8(sp)
    ce3c:	2023883a 	mov	r17,r4
    ce40:	2821883a 	mov	r16,r5
    ce44:	10000f26 	beq	r2,zero,ce84 <_Balloc+0x60>
    ce48:	8407883a 	add	r3,r16,r16
    ce4c:	18c7883a 	add	r3,r3,r3
    ce50:	10c7883a 	add	r3,r2,r3
    ce54:	18800017 	ldw	r2,0(r3)
    ce58:	10001126 	beq	r2,zero,cea0 <_Balloc+0x7c>
    ce5c:	11000017 	ldw	r4,0(r2)
    ce60:	19000015 	stw	r4,0(r3)
    ce64:	10000415 	stw	zero,16(r2)
    ce68:	10000315 	stw	zero,12(r2)
    ce6c:	dfc00317 	ldw	ra,12(sp)
    ce70:	dc800217 	ldw	r18,8(sp)
    ce74:	dc400117 	ldw	r17,4(sp)
    ce78:	dc000017 	ldw	r16,0(sp)
    ce7c:	dec00404 	addi	sp,sp,16
    ce80:	f800283a 	ret
    ce84:	01800844 	movi	r6,33
    ce88:	01400104 	movi	r5,4
    ce8c:	000fc300 	call	fc30 <_calloc_r>
    ce90:	88801315 	stw	r2,76(r17)
    ce94:	103fec1e 	bne	r2,zero,ce48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce48>
    ce98:	0005883a 	mov	r2,zero
    ce9c:	003ff306 	br	ce6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce6c>
    cea0:	01400044 	movi	r5,1
    cea4:	2c24983a 	sll	r18,r5,r16
    cea8:	8809883a 	mov	r4,r17
    ceac:	91800144 	addi	r6,r18,5
    ceb0:	318d883a 	add	r6,r6,r6
    ceb4:	318d883a 	add	r6,r6,r6
    ceb8:	000fc300 	call	fc30 <_calloc_r>
    cebc:	103ff626 	beq	r2,zero,ce98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce98>
    cec0:	14000115 	stw	r16,4(r2)
    cec4:	14800215 	stw	r18,8(r2)
    cec8:	003fe606 	br	ce64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce64>

0000cecc <_Bfree>:
    cecc:	28000826 	beq	r5,zero,cef0 <_Bfree+0x24>
    ced0:	28c00117 	ldw	r3,4(r5)
    ced4:	20801317 	ldw	r2,76(r4)
    ced8:	18c7883a 	add	r3,r3,r3
    cedc:	18c7883a 	add	r3,r3,r3
    cee0:	10c5883a 	add	r2,r2,r3
    cee4:	10c00017 	ldw	r3,0(r2)
    cee8:	28c00015 	stw	r3,0(r5)
    ceec:	11400015 	stw	r5,0(r2)
    cef0:	f800283a 	ret

0000cef4 <__multadd>:
    cef4:	defffa04 	addi	sp,sp,-24
    cef8:	dc800315 	stw	r18,12(sp)
    cefc:	dc400215 	stw	r17,8(sp)
    cf00:	dc000115 	stw	r16,4(sp)
    cf04:	2823883a 	mov	r17,r5
    cf08:	2c000417 	ldw	r16,16(r5)
    cf0c:	dfc00515 	stw	ra,20(sp)
    cf10:	dcc00415 	stw	r19,16(sp)
    cf14:	2025883a 	mov	r18,r4
    cf18:	29400504 	addi	r5,r5,20
    cf1c:	0011883a 	mov	r8,zero
    cf20:	28c00017 	ldw	r3,0(r5)
    cf24:	29400104 	addi	r5,r5,4
    cf28:	42000044 	addi	r8,r8,1
    cf2c:	18bfffcc 	andi	r2,r3,65535
    cf30:	1185383a 	mul	r2,r2,r6
    cf34:	1806d43a 	srli	r3,r3,16
    cf38:	11cf883a 	add	r7,r2,r7
    cf3c:	3808d43a 	srli	r4,r7,16
    cf40:	1987383a 	mul	r3,r3,r6
    cf44:	38bfffcc 	andi	r2,r7,65535
    cf48:	1907883a 	add	r3,r3,r4
    cf4c:	1808943a 	slli	r4,r3,16
    cf50:	180ed43a 	srli	r7,r3,16
    cf54:	2085883a 	add	r2,r4,r2
    cf58:	28bfff15 	stw	r2,-4(r5)
    cf5c:	443ff016 	blt	r8,r16,cf20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf20>
    cf60:	38000926 	beq	r7,zero,cf88 <__multadd+0x94>
    cf64:	88800217 	ldw	r2,8(r17)
    cf68:	80800f0e 	bge	r16,r2,cfa8 <__multadd+0xb4>
    cf6c:	80800144 	addi	r2,r16,5
    cf70:	1085883a 	add	r2,r2,r2
    cf74:	1085883a 	add	r2,r2,r2
    cf78:	8885883a 	add	r2,r17,r2
    cf7c:	11c00015 	stw	r7,0(r2)
    cf80:	84000044 	addi	r16,r16,1
    cf84:	8c000415 	stw	r16,16(r17)
    cf88:	8805883a 	mov	r2,r17
    cf8c:	dfc00517 	ldw	ra,20(sp)
    cf90:	dcc00417 	ldw	r19,16(sp)
    cf94:	dc800317 	ldw	r18,12(sp)
    cf98:	dc400217 	ldw	r17,8(sp)
    cf9c:	dc000117 	ldw	r16,4(sp)
    cfa0:	dec00604 	addi	sp,sp,24
    cfa4:	f800283a 	ret
    cfa8:	89400117 	ldw	r5,4(r17)
    cfac:	9009883a 	mov	r4,r18
    cfb0:	d9c00015 	stw	r7,0(sp)
    cfb4:	29400044 	addi	r5,r5,1
    cfb8:	000ce240 	call	ce24 <_Balloc>
    cfbc:	89800417 	ldw	r6,16(r17)
    cfc0:	89400304 	addi	r5,r17,12
    cfc4:	11000304 	addi	r4,r2,12
    cfc8:	31800084 	addi	r6,r6,2
    cfcc:	318d883a 	add	r6,r6,r6
    cfd0:	318d883a 	add	r6,r6,r6
    cfd4:	1027883a 	mov	r19,r2
    cfd8:	00073640 	call	7364 <memcpy>
    cfdc:	d9c00017 	ldw	r7,0(sp)
    cfe0:	88000a26 	beq	r17,zero,d00c <__multadd+0x118>
    cfe4:	88c00117 	ldw	r3,4(r17)
    cfe8:	90801317 	ldw	r2,76(r18)
    cfec:	18c7883a 	add	r3,r3,r3
    cff0:	18c7883a 	add	r3,r3,r3
    cff4:	10c5883a 	add	r2,r2,r3
    cff8:	10c00017 	ldw	r3,0(r2)
    cffc:	88c00015 	stw	r3,0(r17)
    d000:	14400015 	stw	r17,0(r2)
    d004:	9823883a 	mov	r17,r19
    d008:	003fd806 	br	cf6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf6c>
    d00c:	9823883a 	mov	r17,r19
    d010:	003fd606 	br	cf6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf6c>

0000d014 <__s2b>:
    d014:	defff904 	addi	sp,sp,-28
    d018:	dc400115 	stw	r17,4(sp)
    d01c:	dc000015 	stw	r16,0(sp)
    d020:	2023883a 	mov	r17,r4
    d024:	2821883a 	mov	r16,r5
    d028:	39000204 	addi	r4,r7,8
    d02c:	01400244 	movi	r5,9
    d030:	dcc00315 	stw	r19,12(sp)
    d034:	dc800215 	stw	r18,8(sp)
    d038:	dfc00615 	stw	ra,24(sp)
    d03c:	dd400515 	stw	r21,20(sp)
    d040:	dd000415 	stw	r20,16(sp)
    d044:	3825883a 	mov	r18,r7
    d048:	3027883a 	mov	r19,r6
    d04c:	0010f600 	call	10f60 <__divsi3>
    d050:	00c00044 	movi	r3,1
    d054:	000b883a 	mov	r5,zero
    d058:	1880030e 	bge	r3,r2,d068 <__s2b+0x54>
    d05c:	18c7883a 	add	r3,r3,r3
    d060:	29400044 	addi	r5,r5,1
    d064:	18bffd16 	blt	r3,r2,d05c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d05c>
    d068:	8809883a 	mov	r4,r17
    d06c:	000ce240 	call	ce24 <_Balloc>
    d070:	d8c00717 	ldw	r3,28(sp)
    d074:	10c00515 	stw	r3,20(r2)
    d078:	00c00044 	movi	r3,1
    d07c:	10c00415 	stw	r3,16(r2)
    d080:	00c00244 	movi	r3,9
    d084:	1cc0210e 	bge	r3,r19,d10c <__s2b+0xf8>
    d088:	80eb883a 	add	r21,r16,r3
    d08c:	a829883a 	mov	r20,r21
    d090:	84e1883a 	add	r16,r16,r19
    d094:	a1c00007 	ldb	r7,0(r20)
    d098:	01800284 	movi	r6,10
    d09c:	a5000044 	addi	r20,r20,1
    d0a0:	100b883a 	mov	r5,r2
    d0a4:	39fff404 	addi	r7,r7,-48
    d0a8:	8809883a 	mov	r4,r17
    d0ac:	000cef40 	call	cef4 <__multadd>
    d0b0:	a43ff81e 	bne	r20,r16,d094 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d094>
    d0b4:	ace1883a 	add	r16,r21,r19
    d0b8:	843ffe04 	addi	r16,r16,-8
    d0bc:	9c800a0e 	bge	r19,r18,d0e8 <__s2b+0xd4>
    d0c0:	94e5c83a 	sub	r18,r18,r19
    d0c4:	84a5883a 	add	r18,r16,r18
    d0c8:	81c00007 	ldb	r7,0(r16)
    d0cc:	01800284 	movi	r6,10
    d0d0:	84000044 	addi	r16,r16,1
    d0d4:	100b883a 	mov	r5,r2
    d0d8:	39fff404 	addi	r7,r7,-48
    d0dc:	8809883a 	mov	r4,r17
    d0e0:	000cef40 	call	cef4 <__multadd>
    d0e4:	84bff81e 	bne	r16,r18,d0c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0c8>
    d0e8:	dfc00617 	ldw	ra,24(sp)
    d0ec:	dd400517 	ldw	r21,20(sp)
    d0f0:	dd000417 	ldw	r20,16(sp)
    d0f4:	dcc00317 	ldw	r19,12(sp)
    d0f8:	dc800217 	ldw	r18,8(sp)
    d0fc:	dc400117 	ldw	r17,4(sp)
    d100:	dc000017 	ldw	r16,0(sp)
    d104:	dec00704 	addi	sp,sp,28
    d108:	f800283a 	ret
    d10c:	84000284 	addi	r16,r16,10
    d110:	1827883a 	mov	r19,r3
    d114:	003fe906 	br	d0bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0bc>

0000d118 <__hi0bits>:
    d118:	20bfffec 	andhi	r2,r4,65535
    d11c:	1000141e 	bne	r2,zero,d170 <__hi0bits+0x58>
    d120:	2008943a 	slli	r4,r4,16
    d124:	00800404 	movi	r2,16
    d128:	20ffc02c 	andhi	r3,r4,65280
    d12c:	1800021e 	bne	r3,zero,d138 <__hi0bits+0x20>
    d130:	2008923a 	slli	r4,r4,8
    d134:	10800204 	addi	r2,r2,8
    d138:	20fc002c 	andhi	r3,r4,61440
    d13c:	1800021e 	bne	r3,zero,d148 <__hi0bits+0x30>
    d140:	2008913a 	slli	r4,r4,4
    d144:	10800104 	addi	r2,r2,4
    d148:	20f0002c 	andhi	r3,r4,49152
    d14c:	1800031e 	bne	r3,zero,d15c <__hi0bits+0x44>
    d150:	2109883a 	add	r4,r4,r4
    d154:	10800084 	addi	r2,r2,2
    d158:	2109883a 	add	r4,r4,r4
    d15c:	20000316 	blt	r4,zero,d16c <__hi0bits+0x54>
    d160:	2110002c 	andhi	r4,r4,16384
    d164:	2000041e 	bne	r4,zero,d178 <__hi0bits+0x60>
    d168:	00800804 	movi	r2,32
    d16c:	f800283a 	ret
    d170:	0005883a 	mov	r2,zero
    d174:	003fec06 	br	d128 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d128>
    d178:	10800044 	addi	r2,r2,1
    d17c:	f800283a 	ret

0000d180 <__lo0bits>:
    d180:	20c00017 	ldw	r3,0(r4)
    d184:	188001cc 	andi	r2,r3,7
    d188:	10000826 	beq	r2,zero,d1ac <__lo0bits+0x2c>
    d18c:	1880004c 	andi	r2,r3,1
    d190:	1000211e 	bne	r2,zero,d218 <__lo0bits+0x98>
    d194:	1880008c 	andi	r2,r3,2
    d198:	1000211e 	bne	r2,zero,d220 <__lo0bits+0xa0>
    d19c:	1806d0ba 	srli	r3,r3,2
    d1a0:	00800084 	movi	r2,2
    d1a4:	20c00015 	stw	r3,0(r4)
    d1a8:	f800283a 	ret
    d1ac:	18bfffcc 	andi	r2,r3,65535
    d1b0:	10001326 	beq	r2,zero,d200 <__lo0bits+0x80>
    d1b4:	0005883a 	mov	r2,zero
    d1b8:	19403fcc 	andi	r5,r3,255
    d1bc:	2800021e 	bne	r5,zero,d1c8 <__lo0bits+0x48>
    d1c0:	1806d23a 	srli	r3,r3,8
    d1c4:	10800204 	addi	r2,r2,8
    d1c8:	194003cc 	andi	r5,r3,15
    d1cc:	2800021e 	bne	r5,zero,d1d8 <__lo0bits+0x58>
    d1d0:	1806d13a 	srli	r3,r3,4
    d1d4:	10800104 	addi	r2,r2,4
    d1d8:	194000cc 	andi	r5,r3,3
    d1dc:	2800021e 	bne	r5,zero,d1e8 <__lo0bits+0x68>
    d1e0:	1806d0ba 	srli	r3,r3,2
    d1e4:	10800084 	addi	r2,r2,2
    d1e8:	1940004c 	andi	r5,r3,1
    d1ec:	2800081e 	bne	r5,zero,d210 <__lo0bits+0x90>
    d1f0:	1806d07a 	srli	r3,r3,1
    d1f4:	1800051e 	bne	r3,zero,d20c <__lo0bits+0x8c>
    d1f8:	00800804 	movi	r2,32
    d1fc:	f800283a 	ret
    d200:	1806d43a 	srli	r3,r3,16
    d204:	00800404 	movi	r2,16
    d208:	003feb06 	br	d1b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d1b8>
    d20c:	10800044 	addi	r2,r2,1
    d210:	20c00015 	stw	r3,0(r4)
    d214:	f800283a 	ret
    d218:	0005883a 	mov	r2,zero
    d21c:	f800283a 	ret
    d220:	1806d07a 	srli	r3,r3,1
    d224:	00800044 	movi	r2,1
    d228:	20c00015 	stw	r3,0(r4)
    d22c:	f800283a 	ret

0000d230 <__i2b>:
    d230:	defffd04 	addi	sp,sp,-12
    d234:	dc000015 	stw	r16,0(sp)
    d238:	04000044 	movi	r16,1
    d23c:	dc400115 	stw	r17,4(sp)
    d240:	2823883a 	mov	r17,r5
    d244:	800b883a 	mov	r5,r16
    d248:	dfc00215 	stw	ra,8(sp)
    d24c:	000ce240 	call	ce24 <_Balloc>
    d250:	14400515 	stw	r17,20(r2)
    d254:	14000415 	stw	r16,16(r2)
    d258:	dfc00217 	ldw	ra,8(sp)
    d25c:	dc400117 	ldw	r17,4(sp)
    d260:	dc000017 	ldw	r16,0(sp)
    d264:	dec00304 	addi	sp,sp,12
    d268:	f800283a 	ret

0000d26c <__multiply>:
    d26c:	defffa04 	addi	sp,sp,-24
    d270:	dcc00315 	stw	r19,12(sp)
    d274:	dc800215 	stw	r18,8(sp)
    d278:	34c00417 	ldw	r19,16(r6)
    d27c:	2c800417 	ldw	r18,16(r5)
    d280:	dd000415 	stw	r20,16(sp)
    d284:	dc400115 	stw	r17,4(sp)
    d288:	dfc00515 	stw	ra,20(sp)
    d28c:	dc000015 	stw	r16,0(sp)
    d290:	2829883a 	mov	r20,r5
    d294:	3023883a 	mov	r17,r6
    d298:	94c0050e 	bge	r18,r19,d2b0 <__multiply+0x44>
    d29c:	9007883a 	mov	r3,r18
    d2a0:	3029883a 	mov	r20,r6
    d2a4:	9825883a 	mov	r18,r19
    d2a8:	2823883a 	mov	r17,r5
    d2ac:	1827883a 	mov	r19,r3
    d2b0:	a0800217 	ldw	r2,8(r20)
    d2b4:	94e1883a 	add	r16,r18,r19
    d2b8:	a1400117 	ldw	r5,4(r20)
    d2bc:	1400010e 	bge	r2,r16,d2c4 <__multiply+0x58>
    d2c0:	29400044 	addi	r5,r5,1
    d2c4:	000ce240 	call	ce24 <_Balloc>
    d2c8:	8415883a 	add	r10,r16,r16
    d2cc:	12c00504 	addi	r11,r2,20
    d2d0:	5295883a 	add	r10,r10,r10
    d2d4:	5a95883a 	add	r10,r11,r10
    d2d8:	5807883a 	mov	r3,r11
    d2dc:	5a80032e 	bgeu	r11,r10,d2ec <__multiply+0x80>
    d2e0:	18000015 	stw	zero,0(r3)
    d2e4:	18c00104 	addi	r3,r3,4
    d2e8:	1abffd36 	bltu	r3,r10,d2e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d2e0>
    d2ec:	9ce7883a 	add	r19,r19,r19
    d2f0:	94a5883a 	add	r18,r18,r18
    d2f4:	89800504 	addi	r6,r17,20
    d2f8:	9ce7883a 	add	r19,r19,r19
    d2fc:	a3400504 	addi	r13,r20,20
    d300:	94a5883a 	add	r18,r18,r18
    d304:	34d9883a 	add	r12,r6,r19
    d308:	6c93883a 	add	r9,r13,r18
    d30c:	3300422e 	bgeu	r6,r12,d418 <__multiply+0x1ac>
    d310:	37c00017 	ldw	ra,0(r6)
    d314:	fbffffcc 	andi	r15,ra,65535
    d318:	78001b26 	beq	r15,zero,d388 <__multiply+0x11c>
    d31c:	5811883a 	mov	r8,r11
    d320:	681d883a 	mov	r14,r13
    d324:	000f883a 	mov	r7,zero
    d328:	71000017 	ldw	r4,0(r14)
    d32c:	40c00017 	ldw	r3,0(r8)
    d330:	73800104 	addi	r14,r14,4
    d334:	217fffcc 	andi	r5,r4,65535
    d338:	2bcb383a 	mul	r5,r5,r15
    d33c:	2008d43a 	srli	r4,r4,16
    d340:	1c7fffcc 	andi	r17,r3,65535
    d344:	2c4b883a 	add	r5,r5,r17
    d348:	29cb883a 	add	r5,r5,r7
    d34c:	23c9383a 	mul	r4,r4,r15
    d350:	1806d43a 	srli	r3,r3,16
    d354:	280ed43a 	srli	r7,r5,16
    d358:	297fffcc 	andi	r5,r5,65535
    d35c:	20c7883a 	add	r3,r4,r3
    d360:	19c7883a 	add	r3,r3,r7
    d364:	1808943a 	slli	r4,r3,16
    d368:	4023883a 	mov	r17,r8
    d36c:	180ed43a 	srli	r7,r3,16
    d370:	214ab03a 	or	r5,r4,r5
    d374:	41400015 	stw	r5,0(r8)
    d378:	42000104 	addi	r8,r8,4
    d37c:	727fea36 	bltu	r14,r9,d328 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d328>
    d380:	89c00115 	stw	r7,4(r17)
    d384:	37c00017 	ldw	ra,0(r6)
    d388:	f83ed43a 	srli	ra,ra,16
    d38c:	f8001f26 	beq	ra,zero,d40c <__multiply+0x1a0>
    d390:	58c00017 	ldw	r3,0(r11)
    d394:	681d883a 	mov	r14,r13
    d398:	581f883a 	mov	r15,r11
    d39c:	1811883a 	mov	r8,r3
    d3a0:	5825883a 	mov	r18,r11
    d3a4:	000f883a 	mov	r7,zero
    d3a8:	00000106 	br	d3b0 <__multiply+0x144>
    d3ac:	8825883a 	mov	r18,r17
    d3b0:	7140000b 	ldhu	r5,0(r14)
    d3b4:	4010d43a 	srli	r8,r8,16
    d3b8:	193fffcc 	andi	r4,r3,65535
    d3bc:	2fcb383a 	mul	r5,r5,ra
    d3c0:	7bc00104 	addi	r15,r15,4
    d3c4:	73800104 	addi	r14,r14,4
    d3c8:	2a0b883a 	add	r5,r5,r8
    d3cc:	29cb883a 	add	r5,r5,r7
    d3d0:	2806943a 	slli	r3,r5,16
    d3d4:	94400104 	addi	r17,r18,4
    d3d8:	280ad43a 	srli	r5,r5,16
    d3dc:	1908b03a 	or	r4,r3,r4
    d3e0:	793fff15 	stw	r4,-4(r15)
    d3e4:	70ffff17 	ldw	r3,-4(r14)
    d3e8:	8a000017 	ldw	r8,0(r17)
    d3ec:	1806d43a 	srli	r3,r3,16
    d3f0:	413fffcc 	andi	r4,r8,65535
    d3f4:	1fc7383a 	mul	r3,r3,ra
    d3f8:	1907883a 	add	r3,r3,r4
    d3fc:	1947883a 	add	r3,r3,r5
    d400:	180ed43a 	srli	r7,r3,16
    d404:	727fe936 	bltu	r14,r9,d3ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d3ac>
    d408:	90c00115 	stw	r3,4(r18)
    d40c:	31800104 	addi	r6,r6,4
    d410:	5ac00104 	addi	r11,r11,4
    d414:	333fbe36 	bltu	r6,r12,d310 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d310>
    d418:	0400090e 	bge	zero,r16,d440 <__multiply+0x1d4>
    d41c:	50ffff17 	ldw	r3,-4(r10)
    d420:	52bfff04 	addi	r10,r10,-4
    d424:	18000326 	beq	r3,zero,d434 <__multiply+0x1c8>
    d428:	00000506 	br	d440 <__multiply+0x1d4>
    d42c:	50c00017 	ldw	r3,0(r10)
    d430:	1800031e 	bne	r3,zero,d440 <__multiply+0x1d4>
    d434:	843fffc4 	addi	r16,r16,-1
    d438:	52bfff04 	addi	r10,r10,-4
    d43c:	803ffb1e 	bne	r16,zero,d42c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d42c>
    d440:	14000415 	stw	r16,16(r2)
    d444:	dfc00517 	ldw	ra,20(sp)
    d448:	dd000417 	ldw	r20,16(sp)
    d44c:	dcc00317 	ldw	r19,12(sp)
    d450:	dc800217 	ldw	r18,8(sp)
    d454:	dc400117 	ldw	r17,4(sp)
    d458:	dc000017 	ldw	r16,0(sp)
    d45c:	dec00604 	addi	sp,sp,24
    d460:	f800283a 	ret

0000d464 <__pow5mult>:
    d464:	defffa04 	addi	sp,sp,-24
    d468:	dcc00315 	stw	r19,12(sp)
    d46c:	dc000015 	stw	r16,0(sp)
    d470:	dfc00515 	stw	ra,20(sp)
    d474:	dd000415 	stw	r20,16(sp)
    d478:	dc800215 	stw	r18,8(sp)
    d47c:	dc400115 	stw	r17,4(sp)
    d480:	308000cc 	andi	r2,r6,3
    d484:	3021883a 	mov	r16,r6
    d488:	2027883a 	mov	r19,r4
    d48c:	10002f1e 	bne	r2,zero,d54c <__pow5mult+0xe8>
    d490:	2825883a 	mov	r18,r5
    d494:	8021d0ba 	srai	r16,r16,2
    d498:	80001a26 	beq	r16,zero,d504 <__pow5mult+0xa0>
    d49c:	9c401217 	ldw	r17,72(r19)
    d4a0:	8800061e 	bne	r17,zero,d4bc <__pow5mult+0x58>
    d4a4:	00003406 	br	d578 <__pow5mult+0x114>
    d4a8:	8021d07a 	srai	r16,r16,1
    d4ac:	80001526 	beq	r16,zero,d504 <__pow5mult+0xa0>
    d4b0:	88800017 	ldw	r2,0(r17)
    d4b4:	10001c26 	beq	r2,zero,d528 <__pow5mult+0xc4>
    d4b8:	1023883a 	mov	r17,r2
    d4bc:	8080004c 	andi	r2,r16,1
    d4c0:	103ff926 	beq	r2,zero,d4a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d4a8>
    d4c4:	880d883a 	mov	r6,r17
    d4c8:	900b883a 	mov	r5,r18
    d4cc:	9809883a 	mov	r4,r19
    d4d0:	000d26c0 	call	d26c <__multiply>
    d4d4:	90001b26 	beq	r18,zero,d544 <__pow5mult+0xe0>
    d4d8:	91000117 	ldw	r4,4(r18)
    d4dc:	98c01317 	ldw	r3,76(r19)
    d4e0:	8021d07a 	srai	r16,r16,1
    d4e4:	2109883a 	add	r4,r4,r4
    d4e8:	2109883a 	add	r4,r4,r4
    d4ec:	1907883a 	add	r3,r3,r4
    d4f0:	19000017 	ldw	r4,0(r3)
    d4f4:	91000015 	stw	r4,0(r18)
    d4f8:	1c800015 	stw	r18,0(r3)
    d4fc:	1025883a 	mov	r18,r2
    d500:	803feb1e 	bne	r16,zero,d4b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d4b0>
    d504:	9005883a 	mov	r2,r18
    d508:	dfc00517 	ldw	ra,20(sp)
    d50c:	dd000417 	ldw	r20,16(sp)
    d510:	dcc00317 	ldw	r19,12(sp)
    d514:	dc800217 	ldw	r18,8(sp)
    d518:	dc400117 	ldw	r17,4(sp)
    d51c:	dc000017 	ldw	r16,0(sp)
    d520:	dec00604 	addi	sp,sp,24
    d524:	f800283a 	ret
    d528:	880d883a 	mov	r6,r17
    d52c:	880b883a 	mov	r5,r17
    d530:	9809883a 	mov	r4,r19
    d534:	000d26c0 	call	d26c <__multiply>
    d538:	88800015 	stw	r2,0(r17)
    d53c:	10000015 	stw	zero,0(r2)
    d540:	003fdd06 	br	d4b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d4b8>
    d544:	1025883a 	mov	r18,r2
    d548:	003fd706 	br	d4a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d4a8>
    d54c:	10bfffc4 	addi	r2,r2,-1
    d550:	1085883a 	add	r2,r2,r2
    d554:	00c000b4 	movhi	r3,2
    d558:	18c01104 	addi	r3,r3,68
    d55c:	1085883a 	add	r2,r2,r2
    d560:	1885883a 	add	r2,r3,r2
    d564:	11800017 	ldw	r6,0(r2)
    d568:	000f883a 	mov	r7,zero
    d56c:	000cef40 	call	cef4 <__multadd>
    d570:	1025883a 	mov	r18,r2
    d574:	003fc706 	br	d494 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d494>
    d578:	05000044 	movi	r20,1
    d57c:	a00b883a 	mov	r5,r20
    d580:	9809883a 	mov	r4,r19
    d584:	000ce240 	call	ce24 <_Balloc>
    d588:	1023883a 	mov	r17,r2
    d58c:	00809c44 	movi	r2,625
    d590:	88800515 	stw	r2,20(r17)
    d594:	8d000415 	stw	r20,16(r17)
    d598:	9c401215 	stw	r17,72(r19)
    d59c:	88000015 	stw	zero,0(r17)
    d5a0:	003fc606 	br	d4bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d4bc>

0000d5a4 <__lshift>:
    d5a4:	defff904 	addi	sp,sp,-28
    d5a8:	dd400515 	stw	r21,20(sp)
    d5ac:	dcc00315 	stw	r19,12(sp)
    d5b0:	302bd17a 	srai	r21,r6,5
    d5b4:	2cc00417 	ldw	r19,16(r5)
    d5b8:	28800217 	ldw	r2,8(r5)
    d5bc:	dd000415 	stw	r20,16(sp)
    d5c0:	ace7883a 	add	r19,r21,r19
    d5c4:	dc800215 	stw	r18,8(sp)
    d5c8:	dc400115 	stw	r17,4(sp)
    d5cc:	dc000015 	stw	r16,0(sp)
    d5d0:	dfc00615 	stw	ra,24(sp)
    d5d4:	9c000044 	addi	r16,r19,1
    d5d8:	2823883a 	mov	r17,r5
    d5dc:	3029883a 	mov	r20,r6
    d5e0:	2025883a 	mov	r18,r4
    d5e4:	29400117 	ldw	r5,4(r5)
    d5e8:	1400030e 	bge	r2,r16,d5f8 <__lshift+0x54>
    d5ec:	1085883a 	add	r2,r2,r2
    d5f0:	29400044 	addi	r5,r5,1
    d5f4:	143ffd16 	blt	r2,r16,d5ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d5ec>
    d5f8:	9009883a 	mov	r4,r18
    d5fc:	000ce240 	call	ce24 <_Balloc>
    d600:	10c00504 	addi	r3,r2,20
    d604:	0540070e 	bge	zero,r21,d624 <__lshift+0x80>
    d608:	ad6b883a 	add	r21,r21,r21
    d60c:	ad6b883a 	add	r21,r21,r21
    d610:	1809883a 	mov	r4,r3
    d614:	1d47883a 	add	r3,r3,r21
    d618:	20000015 	stw	zero,0(r4)
    d61c:	21000104 	addi	r4,r4,4
    d620:	193ffd1e 	bne	r3,r4,d618 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d618>
    d624:	8a000417 	ldw	r8,16(r17)
    d628:	89000504 	addi	r4,r17,20
    d62c:	a18007cc 	andi	r6,r20,31
    d630:	4211883a 	add	r8,r8,r8
    d634:	4211883a 	add	r8,r8,r8
    d638:	2211883a 	add	r8,r4,r8
    d63c:	30002326 	beq	r6,zero,d6cc <__lshift+0x128>
    d640:	02400804 	movi	r9,32
    d644:	4993c83a 	sub	r9,r9,r6
    d648:	000b883a 	mov	r5,zero
    d64c:	21c00017 	ldw	r7,0(r4)
    d650:	1815883a 	mov	r10,r3
    d654:	18c00104 	addi	r3,r3,4
    d658:	398e983a 	sll	r7,r7,r6
    d65c:	21000104 	addi	r4,r4,4
    d660:	394ab03a 	or	r5,r7,r5
    d664:	197fff15 	stw	r5,-4(r3)
    d668:	217fff17 	ldw	r5,-4(r4)
    d66c:	2a4ad83a 	srl	r5,r5,r9
    d670:	223ff636 	bltu	r4,r8,d64c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d64c>
    d674:	51400115 	stw	r5,4(r10)
    d678:	28001a1e 	bne	r5,zero,d6e4 <__lshift+0x140>
    d67c:	843fffc4 	addi	r16,r16,-1
    d680:	14000415 	stw	r16,16(r2)
    d684:	88000826 	beq	r17,zero,d6a8 <__lshift+0x104>
    d688:	89000117 	ldw	r4,4(r17)
    d68c:	90c01317 	ldw	r3,76(r18)
    d690:	2109883a 	add	r4,r4,r4
    d694:	2109883a 	add	r4,r4,r4
    d698:	1907883a 	add	r3,r3,r4
    d69c:	19000017 	ldw	r4,0(r3)
    d6a0:	89000015 	stw	r4,0(r17)
    d6a4:	1c400015 	stw	r17,0(r3)
    d6a8:	dfc00617 	ldw	ra,24(sp)
    d6ac:	dd400517 	ldw	r21,20(sp)
    d6b0:	dd000417 	ldw	r20,16(sp)
    d6b4:	dcc00317 	ldw	r19,12(sp)
    d6b8:	dc800217 	ldw	r18,8(sp)
    d6bc:	dc400117 	ldw	r17,4(sp)
    d6c0:	dc000017 	ldw	r16,0(sp)
    d6c4:	dec00704 	addi	sp,sp,28
    d6c8:	f800283a 	ret
    d6cc:	21400017 	ldw	r5,0(r4)
    d6d0:	18c00104 	addi	r3,r3,4
    d6d4:	21000104 	addi	r4,r4,4
    d6d8:	197fff15 	stw	r5,-4(r3)
    d6dc:	223ffb36 	bltu	r4,r8,d6cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d6cc>
    d6e0:	003fe606 	br	d67c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d67c>
    d6e4:	9c000084 	addi	r16,r19,2
    d6e8:	003fe406 	br	d67c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d67c>

0000d6ec <__mcmp>:
    d6ec:	20800417 	ldw	r2,16(r4)
    d6f0:	28c00417 	ldw	r3,16(r5)
    d6f4:	10c5c83a 	sub	r2,r2,r3
    d6f8:	1000111e 	bne	r2,zero,d740 <__mcmp+0x54>
    d6fc:	18c7883a 	add	r3,r3,r3
    d700:	18c7883a 	add	r3,r3,r3
    d704:	21000504 	addi	r4,r4,20
    d708:	29400504 	addi	r5,r5,20
    d70c:	20c5883a 	add	r2,r4,r3
    d710:	28cb883a 	add	r5,r5,r3
    d714:	00000106 	br	d71c <__mcmp+0x30>
    d718:	20800a2e 	bgeu	r4,r2,d744 <__mcmp+0x58>
    d71c:	10bfff04 	addi	r2,r2,-4
    d720:	297fff04 	addi	r5,r5,-4
    d724:	11800017 	ldw	r6,0(r2)
    d728:	28c00017 	ldw	r3,0(r5)
    d72c:	30fffa26 	beq	r6,r3,d718 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d718>
    d730:	30c00236 	bltu	r6,r3,d73c <__mcmp+0x50>
    d734:	00800044 	movi	r2,1
    d738:	f800283a 	ret
    d73c:	00bfffc4 	movi	r2,-1
    d740:	f800283a 	ret
    d744:	0005883a 	mov	r2,zero
    d748:	f800283a 	ret

0000d74c <__mdiff>:
    d74c:	28c00417 	ldw	r3,16(r5)
    d750:	30800417 	ldw	r2,16(r6)
    d754:	defffa04 	addi	sp,sp,-24
    d758:	dcc00315 	stw	r19,12(sp)
    d75c:	dc800215 	stw	r18,8(sp)
    d760:	dfc00515 	stw	ra,20(sp)
    d764:	dd000415 	stw	r20,16(sp)
    d768:	dc400115 	stw	r17,4(sp)
    d76c:	dc000015 	stw	r16,0(sp)
    d770:	1887c83a 	sub	r3,r3,r2
    d774:	2825883a 	mov	r18,r5
    d778:	3027883a 	mov	r19,r6
    d77c:	1800141e 	bne	r3,zero,d7d0 <__mdiff+0x84>
    d780:	1085883a 	add	r2,r2,r2
    d784:	1085883a 	add	r2,r2,r2
    d788:	2a000504 	addi	r8,r5,20
    d78c:	34000504 	addi	r16,r6,20
    d790:	4087883a 	add	r3,r8,r2
    d794:	8085883a 	add	r2,r16,r2
    d798:	00000106 	br	d7a0 <__mdiff+0x54>
    d79c:	40c0592e 	bgeu	r8,r3,d904 <__mdiff+0x1b8>
    d7a0:	18ffff04 	addi	r3,r3,-4
    d7a4:	10bfff04 	addi	r2,r2,-4
    d7a8:	19c00017 	ldw	r7,0(r3)
    d7ac:	11400017 	ldw	r5,0(r2)
    d7b0:	397ffa26 	beq	r7,r5,d79c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d79c>
    d7b4:	3940592e 	bgeu	r7,r5,d91c <__mdiff+0x1d0>
    d7b8:	9005883a 	mov	r2,r18
    d7bc:	4023883a 	mov	r17,r8
    d7c0:	9825883a 	mov	r18,r19
    d7c4:	05000044 	movi	r20,1
    d7c8:	1027883a 	mov	r19,r2
    d7cc:	00000406 	br	d7e0 <__mdiff+0x94>
    d7d0:	18005616 	blt	r3,zero,d92c <__mdiff+0x1e0>
    d7d4:	34400504 	addi	r17,r6,20
    d7d8:	2c000504 	addi	r16,r5,20
    d7dc:	0029883a 	mov	r20,zero
    d7e0:	91400117 	ldw	r5,4(r18)
    d7e4:	000ce240 	call	ce24 <_Balloc>
    d7e8:	92400417 	ldw	r9,16(r18)
    d7ec:	9b000417 	ldw	r12,16(r19)
    d7f0:	12c00504 	addi	r11,r2,20
    d7f4:	4a51883a 	add	r8,r9,r9
    d7f8:	6319883a 	add	r12,r12,r12
    d7fc:	4211883a 	add	r8,r8,r8
    d800:	6319883a 	add	r12,r12,r12
    d804:	15000315 	stw	r20,12(r2)
    d808:	8211883a 	add	r8,r16,r8
    d80c:	8b19883a 	add	r12,r17,r12
    d810:	0007883a 	mov	r3,zero
    d814:	81400017 	ldw	r5,0(r16)
    d818:	89c00017 	ldw	r7,0(r17)
    d81c:	59800104 	addi	r6,r11,4
    d820:	293fffcc 	andi	r4,r5,65535
    d824:	20c7883a 	add	r3,r4,r3
    d828:	393fffcc 	andi	r4,r7,65535
    d82c:	1909c83a 	sub	r4,r3,r4
    d830:	280ad43a 	srli	r5,r5,16
    d834:	380ed43a 	srli	r7,r7,16
    d838:	2007d43a 	srai	r3,r4,16
    d83c:	213fffcc 	andi	r4,r4,65535
    d840:	29cbc83a 	sub	r5,r5,r7
    d844:	28c7883a 	add	r3,r5,r3
    d848:	180a943a 	slli	r5,r3,16
    d84c:	8c400104 	addi	r17,r17,4
    d850:	84000104 	addi	r16,r16,4
    d854:	2908b03a 	or	r4,r5,r4
    d858:	59000015 	stw	r4,0(r11)
    d85c:	1807d43a 	srai	r3,r3,16
    d860:	3015883a 	mov	r10,r6
    d864:	3017883a 	mov	r11,r6
    d868:	8b3fea36 	bltu	r17,r12,d814 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d814>
    d86c:	8200162e 	bgeu	r16,r8,d8c8 <__mdiff+0x17c>
    d870:	8017883a 	mov	r11,r16
    d874:	59400017 	ldw	r5,0(r11)
    d878:	31800104 	addi	r6,r6,4
    d87c:	5ac00104 	addi	r11,r11,4
    d880:	293fffcc 	andi	r4,r5,65535
    d884:	20c7883a 	add	r3,r4,r3
    d888:	280ed43a 	srli	r7,r5,16
    d88c:	180bd43a 	srai	r5,r3,16
    d890:	193fffcc 	andi	r4,r3,65535
    d894:	3947883a 	add	r3,r7,r5
    d898:	180a943a 	slli	r5,r3,16
    d89c:	1807d43a 	srai	r3,r3,16
    d8a0:	2908b03a 	or	r4,r5,r4
    d8a4:	313fff15 	stw	r4,-4(r6)
    d8a8:	5a3ff236 	bltu	r11,r8,d874 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d874>
    d8ac:	0406303a 	nor	r3,zero,r16
    d8b0:	1a07883a 	add	r3,r3,r8
    d8b4:	1806d0ba 	srli	r3,r3,2
    d8b8:	18c00044 	addi	r3,r3,1
    d8bc:	18c7883a 	add	r3,r3,r3
    d8c0:	18c7883a 	add	r3,r3,r3
    d8c4:	50d5883a 	add	r10,r10,r3
    d8c8:	50ffff04 	addi	r3,r10,-4
    d8cc:	2000041e 	bne	r4,zero,d8e0 <__mdiff+0x194>
    d8d0:	18ffff04 	addi	r3,r3,-4
    d8d4:	19000017 	ldw	r4,0(r3)
    d8d8:	4a7fffc4 	addi	r9,r9,-1
    d8dc:	203ffc26 	beq	r4,zero,d8d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8d0>
    d8e0:	12400415 	stw	r9,16(r2)
    d8e4:	dfc00517 	ldw	ra,20(sp)
    d8e8:	dd000417 	ldw	r20,16(sp)
    d8ec:	dcc00317 	ldw	r19,12(sp)
    d8f0:	dc800217 	ldw	r18,8(sp)
    d8f4:	dc400117 	ldw	r17,4(sp)
    d8f8:	dc000017 	ldw	r16,0(sp)
    d8fc:	dec00604 	addi	sp,sp,24
    d900:	f800283a 	ret
    d904:	000b883a 	mov	r5,zero
    d908:	000ce240 	call	ce24 <_Balloc>
    d90c:	00c00044 	movi	r3,1
    d910:	10c00415 	stw	r3,16(r2)
    d914:	10000515 	stw	zero,20(r2)
    d918:	003ff206 	br	d8e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8e4>
    d91c:	8023883a 	mov	r17,r16
    d920:	0029883a 	mov	r20,zero
    d924:	4021883a 	mov	r16,r8
    d928:	003fad06 	br	d7e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d7e0>
    d92c:	9005883a 	mov	r2,r18
    d930:	94400504 	addi	r17,r18,20
    d934:	9c000504 	addi	r16,r19,20
    d938:	9825883a 	mov	r18,r19
    d93c:	05000044 	movi	r20,1
    d940:	1027883a 	mov	r19,r2
    d944:	003fa606 	br	d7e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d7e0>

0000d948 <__ulp>:
    d948:	295ffc2c 	andhi	r5,r5,32752
    d94c:	00bf3034 	movhi	r2,64704
    d950:	2887883a 	add	r3,r5,r2
    d954:	00c0020e 	bge	zero,r3,d960 <__ulp+0x18>
    d958:	0005883a 	mov	r2,zero
    d95c:	f800283a 	ret
    d960:	00c7c83a 	sub	r3,zero,r3
    d964:	1807d53a 	srai	r3,r3,20
    d968:	008004c4 	movi	r2,19
    d96c:	10c00b0e 	bge	r2,r3,d99c <__ulp+0x54>
    d970:	18bffb04 	addi	r2,r3,-20
    d974:	01000784 	movi	r4,30
    d978:	0007883a 	mov	r3,zero
    d97c:	20800516 	blt	r4,r2,d994 <__ulp+0x4c>
    d980:	010007c4 	movi	r4,31
    d984:	2089c83a 	sub	r4,r4,r2
    d988:	00800044 	movi	r2,1
    d98c:	1104983a 	sll	r2,r2,r4
    d990:	f800283a 	ret
    d994:	00800044 	movi	r2,1
    d998:	f800283a 	ret
    d99c:	01400234 	movhi	r5,8
    d9a0:	28c7d83a 	sra	r3,r5,r3
    d9a4:	0005883a 	mov	r2,zero
    d9a8:	f800283a 	ret

0000d9ac <__b2d>:
    d9ac:	defffa04 	addi	sp,sp,-24
    d9b0:	dc000015 	stw	r16,0(sp)
    d9b4:	24000417 	ldw	r16,16(r4)
    d9b8:	dc400115 	stw	r17,4(sp)
    d9bc:	24400504 	addi	r17,r4,20
    d9c0:	8421883a 	add	r16,r16,r16
    d9c4:	8421883a 	add	r16,r16,r16
    d9c8:	8c21883a 	add	r16,r17,r16
    d9cc:	dc800215 	stw	r18,8(sp)
    d9d0:	84bfff17 	ldw	r18,-4(r16)
    d9d4:	dd000415 	stw	r20,16(sp)
    d9d8:	dcc00315 	stw	r19,12(sp)
    d9dc:	9009883a 	mov	r4,r18
    d9e0:	2829883a 	mov	r20,r5
    d9e4:	dfc00515 	stw	ra,20(sp)
    d9e8:	000d1180 	call	d118 <__hi0bits>
    d9ec:	00c00804 	movi	r3,32
    d9f0:	1889c83a 	sub	r4,r3,r2
    d9f4:	a1000015 	stw	r4,0(r20)
    d9f8:	01000284 	movi	r4,10
    d9fc:	84ffff04 	addi	r19,r16,-4
    da00:	20801216 	blt	r4,r2,da4c <__b2d+0xa0>
    da04:	018002c4 	movi	r6,11
    da08:	308dc83a 	sub	r6,r6,r2
    da0c:	9186d83a 	srl	r3,r18,r6
    da10:	18cffc34 	orhi	r3,r3,16368
    da14:	8cc0212e 	bgeu	r17,r19,da9c <__b2d+0xf0>
    da18:	813ffe17 	ldw	r4,-8(r16)
    da1c:	218cd83a 	srl	r6,r4,r6
    da20:	10800544 	addi	r2,r2,21
    da24:	9084983a 	sll	r2,r18,r2
    da28:	1184b03a 	or	r2,r2,r6
    da2c:	dfc00517 	ldw	ra,20(sp)
    da30:	dd000417 	ldw	r20,16(sp)
    da34:	dcc00317 	ldw	r19,12(sp)
    da38:	dc800217 	ldw	r18,8(sp)
    da3c:	dc400117 	ldw	r17,4(sp)
    da40:	dc000017 	ldw	r16,0(sp)
    da44:	dec00604 	addi	sp,sp,24
    da48:	f800283a 	ret
    da4c:	8cc00f2e 	bgeu	r17,r19,da8c <__b2d+0xe0>
    da50:	117ffd44 	addi	r5,r2,-11
    da54:	80bffe17 	ldw	r2,-8(r16)
    da58:	28000e26 	beq	r5,zero,da94 <__b2d+0xe8>
    da5c:	1949c83a 	sub	r4,r3,r5
    da60:	9164983a 	sll	r18,r18,r5
    da64:	1106d83a 	srl	r3,r2,r4
    da68:	81bffe04 	addi	r6,r16,-8
    da6c:	948ffc34 	orhi	r18,r18,16368
    da70:	90c6b03a 	or	r3,r18,r3
    da74:	89800e2e 	bgeu	r17,r6,dab0 <__b2d+0x104>
    da78:	81bffd17 	ldw	r6,-12(r16)
    da7c:	1144983a 	sll	r2,r2,r5
    da80:	310ad83a 	srl	r5,r6,r4
    da84:	2884b03a 	or	r2,r5,r2
    da88:	003fe806 	br	da2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da2c>
    da8c:	10bffd44 	addi	r2,r2,-11
    da90:	1000041e 	bne	r2,zero,daa4 <__b2d+0xf8>
    da94:	90cffc34 	orhi	r3,r18,16368
    da98:	003fe406 	br	da2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da2c>
    da9c:	000d883a 	mov	r6,zero
    daa0:	003fdf06 	br	da20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da20>
    daa4:	90a4983a 	sll	r18,r18,r2
    daa8:	0005883a 	mov	r2,zero
    daac:	003ff906 	br	da94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da94>
    dab0:	1144983a 	sll	r2,r2,r5
    dab4:	003fdd06 	br	da2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da2c>

0000dab8 <__d2b>:
    dab8:	defff804 	addi	sp,sp,-32
    dabc:	dc000215 	stw	r16,8(sp)
    dac0:	3021883a 	mov	r16,r6
    dac4:	dc400315 	stw	r17,12(sp)
    dac8:	8022907a 	slli	r17,r16,1
    dacc:	dd000615 	stw	r20,24(sp)
    dad0:	2829883a 	mov	r20,r5
    dad4:	01400044 	movi	r5,1
    dad8:	dcc00515 	stw	r19,20(sp)
    dadc:	dc800415 	stw	r18,16(sp)
    dae0:	dfc00715 	stw	ra,28(sp)
    dae4:	3825883a 	mov	r18,r7
    dae8:	8822d57a 	srli	r17,r17,21
    daec:	000ce240 	call	ce24 <_Balloc>
    daf0:	1027883a 	mov	r19,r2
    daf4:	00800434 	movhi	r2,16
    daf8:	10bfffc4 	addi	r2,r2,-1
    dafc:	808c703a 	and	r6,r16,r2
    db00:	88000126 	beq	r17,zero,db08 <__d2b+0x50>
    db04:	31800434 	orhi	r6,r6,16
    db08:	d9800015 	stw	r6,0(sp)
    db0c:	a0002426 	beq	r20,zero,dba0 <__d2b+0xe8>
    db10:	d9000104 	addi	r4,sp,4
    db14:	dd000115 	stw	r20,4(sp)
    db18:	000d1800 	call	d180 <__lo0bits>
    db1c:	d8c00017 	ldw	r3,0(sp)
    db20:	10002f1e 	bne	r2,zero,dbe0 <__d2b+0x128>
    db24:	d9000117 	ldw	r4,4(sp)
    db28:	99000515 	stw	r4,20(r19)
    db2c:	1821003a 	cmpeq	r16,r3,zero
    db30:	01000084 	movi	r4,2
    db34:	2421c83a 	sub	r16,r4,r16
    db38:	98c00615 	stw	r3,24(r19)
    db3c:	9c000415 	stw	r16,16(r19)
    db40:	88001f1e 	bne	r17,zero,dbc0 <__d2b+0x108>
    db44:	10bef384 	addi	r2,r2,-1074
    db48:	90800015 	stw	r2,0(r18)
    db4c:	00900034 	movhi	r2,16384
    db50:	10bfffc4 	addi	r2,r2,-1
    db54:	8085883a 	add	r2,r16,r2
    db58:	1085883a 	add	r2,r2,r2
    db5c:	1085883a 	add	r2,r2,r2
    db60:	9885883a 	add	r2,r19,r2
    db64:	11000517 	ldw	r4,20(r2)
    db68:	8020917a 	slli	r16,r16,5
    db6c:	000d1180 	call	d118 <__hi0bits>
    db70:	d8c00817 	ldw	r3,32(sp)
    db74:	8085c83a 	sub	r2,r16,r2
    db78:	18800015 	stw	r2,0(r3)
    db7c:	9805883a 	mov	r2,r19
    db80:	dfc00717 	ldw	ra,28(sp)
    db84:	dd000617 	ldw	r20,24(sp)
    db88:	dcc00517 	ldw	r19,20(sp)
    db8c:	dc800417 	ldw	r18,16(sp)
    db90:	dc400317 	ldw	r17,12(sp)
    db94:	dc000217 	ldw	r16,8(sp)
    db98:	dec00804 	addi	sp,sp,32
    db9c:	f800283a 	ret
    dba0:	d809883a 	mov	r4,sp
    dba4:	000d1800 	call	d180 <__lo0bits>
    dba8:	d8c00017 	ldw	r3,0(sp)
    dbac:	04000044 	movi	r16,1
    dbb0:	9c000415 	stw	r16,16(r19)
    dbb4:	98c00515 	stw	r3,20(r19)
    dbb8:	10800804 	addi	r2,r2,32
    dbbc:	883fe126 	beq	r17,zero,db44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700db44>
    dbc0:	00c00d44 	movi	r3,53
    dbc4:	8c7ef344 	addi	r17,r17,-1075
    dbc8:	88a3883a 	add	r17,r17,r2
    dbcc:	1885c83a 	sub	r2,r3,r2
    dbd0:	d8c00817 	ldw	r3,32(sp)
    dbd4:	94400015 	stw	r17,0(r18)
    dbd8:	18800015 	stw	r2,0(r3)
    dbdc:	003fe706 	br	db7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700db7c>
    dbe0:	01000804 	movi	r4,32
    dbe4:	2089c83a 	sub	r4,r4,r2
    dbe8:	1908983a 	sll	r4,r3,r4
    dbec:	d9400117 	ldw	r5,4(sp)
    dbf0:	1886d83a 	srl	r3,r3,r2
    dbf4:	2148b03a 	or	r4,r4,r5
    dbf8:	99000515 	stw	r4,20(r19)
    dbfc:	d8c00015 	stw	r3,0(sp)
    dc00:	003fca06 	br	db2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700db2c>

0000dc04 <__ratio>:
    dc04:	defff904 	addi	sp,sp,-28
    dc08:	dc400315 	stw	r17,12(sp)
    dc0c:	2823883a 	mov	r17,r5
    dc10:	d9400104 	addi	r5,sp,4
    dc14:	dfc00615 	stw	ra,24(sp)
    dc18:	dcc00515 	stw	r19,20(sp)
    dc1c:	dc800415 	stw	r18,16(sp)
    dc20:	2027883a 	mov	r19,r4
    dc24:	dc000215 	stw	r16,8(sp)
    dc28:	000d9ac0 	call	d9ac <__b2d>
    dc2c:	d80b883a 	mov	r5,sp
    dc30:	8809883a 	mov	r4,r17
    dc34:	1025883a 	mov	r18,r2
    dc38:	1821883a 	mov	r16,r3
    dc3c:	000d9ac0 	call	d9ac <__b2d>
    dc40:	8a000417 	ldw	r8,16(r17)
    dc44:	99000417 	ldw	r4,16(r19)
    dc48:	d9400117 	ldw	r5,4(sp)
    dc4c:	2209c83a 	sub	r4,r4,r8
    dc50:	2010917a 	slli	r8,r4,5
    dc54:	d9000017 	ldw	r4,0(sp)
    dc58:	2909c83a 	sub	r4,r5,r4
    dc5c:	4109883a 	add	r4,r8,r4
    dc60:	01000e0e 	bge	zero,r4,dc9c <__ratio+0x98>
    dc64:	2008953a 	slli	r4,r4,20
    dc68:	2421883a 	add	r16,r4,r16
    dc6c:	100d883a 	mov	r6,r2
    dc70:	180f883a 	mov	r7,r3
    dc74:	9009883a 	mov	r4,r18
    dc78:	800b883a 	mov	r5,r16
    dc7c:	00111140 	call	11114 <__divdf3>
    dc80:	dfc00617 	ldw	ra,24(sp)
    dc84:	dcc00517 	ldw	r19,20(sp)
    dc88:	dc800417 	ldw	r18,16(sp)
    dc8c:	dc400317 	ldw	r17,12(sp)
    dc90:	dc000217 	ldw	r16,8(sp)
    dc94:	dec00704 	addi	sp,sp,28
    dc98:	f800283a 	ret
    dc9c:	2008953a 	slli	r4,r4,20
    dca0:	1907c83a 	sub	r3,r3,r4
    dca4:	003ff106 	br	dc6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dc6c>

0000dca8 <_mprec_log10>:
    dca8:	defffe04 	addi	sp,sp,-8
    dcac:	dc000015 	stw	r16,0(sp)
    dcb0:	dfc00115 	stw	ra,4(sp)
    dcb4:	008005c4 	movi	r2,23
    dcb8:	2021883a 	mov	r16,r4
    dcbc:	11000d0e 	bge	r2,r4,dcf4 <_mprec_log10+0x4c>
    dcc0:	0005883a 	mov	r2,zero
    dcc4:	00cffc34 	movhi	r3,16368
    dcc8:	843fffc4 	addi	r16,r16,-1
    dccc:	000d883a 	mov	r6,zero
    dcd0:	01d00934 	movhi	r7,16420
    dcd4:	1009883a 	mov	r4,r2
    dcd8:	180b883a 	mov	r5,r3
    dcdc:	0011c540 	call	11c54 <__muldf3>
    dce0:	803ff91e 	bne	r16,zero,dcc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dcc8>
    dce4:	dfc00117 	ldw	ra,4(sp)
    dce8:	dc000017 	ldw	r16,0(sp)
    dcec:	dec00204 	addi	sp,sp,8
    dcf0:	f800283a 	ret
    dcf4:	202090fa 	slli	r16,r4,3
    dcf8:	008000b4 	movhi	r2,2
    dcfc:	10802804 	addi	r2,r2,160
    dd00:	1421883a 	add	r16,r2,r16
    dd04:	80800017 	ldw	r2,0(r16)
    dd08:	80c00117 	ldw	r3,4(r16)
    dd0c:	dfc00117 	ldw	ra,4(sp)
    dd10:	dc000017 	ldw	r16,0(sp)
    dd14:	dec00204 	addi	sp,sp,8
    dd18:	f800283a 	ret

0000dd1c <__copybits>:
    dd1c:	297fffc4 	addi	r5,r5,-1
    dd20:	280fd17a 	srai	r7,r5,5
    dd24:	30c00417 	ldw	r3,16(r6)
    dd28:	30800504 	addi	r2,r6,20
    dd2c:	39c00044 	addi	r7,r7,1
    dd30:	18c7883a 	add	r3,r3,r3
    dd34:	39cf883a 	add	r7,r7,r7
    dd38:	18c7883a 	add	r3,r3,r3
    dd3c:	39cf883a 	add	r7,r7,r7
    dd40:	10c7883a 	add	r3,r2,r3
    dd44:	21cf883a 	add	r7,r4,r7
    dd48:	10c00d2e 	bgeu	r2,r3,dd80 <__copybits+0x64>
    dd4c:	200b883a 	mov	r5,r4
    dd50:	12000017 	ldw	r8,0(r2)
    dd54:	29400104 	addi	r5,r5,4
    dd58:	10800104 	addi	r2,r2,4
    dd5c:	2a3fff15 	stw	r8,-4(r5)
    dd60:	10fffb36 	bltu	r2,r3,dd50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dd50>
    dd64:	1985c83a 	sub	r2,r3,r6
    dd68:	10bffac4 	addi	r2,r2,-21
    dd6c:	1004d0ba 	srli	r2,r2,2
    dd70:	10800044 	addi	r2,r2,1
    dd74:	1085883a 	add	r2,r2,r2
    dd78:	1085883a 	add	r2,r2,r2
    dd7c:	2089883a 	add	r4,r4,r2
    dd80:	21c0032e 	bgeu	r4,r7,dd90 <__copybits+0x74>
    dd84:	20000015 	stw	zero,0(r4)
    dd88:	21000104 	addi	r4,r4,4
    dd8c:	21fffd36 	bltu	r4,r7,dd84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dd84>
    dd90:	f800283a 	ret

0000dd94 <__any_on>:
    dd94:	20c00417 	ldw	r3,16(r4)
    dd98:	2805d17a 	srai	r2,r5,5
    dd9c:	21000504 	addi	r4,r4,20
    dda0:	18800d0e 	bge	r3,r2,ddd8 <__any_on+0x44>
    dda4:	18c7883a 	add	r3,r3,r3
    dda8:	18c7883a 	add	r3,r3,r3
    ddac:	20c7883a 	add	r3,r4,r3
    ddb0:	20c0192e 	bgeu	r4,r3,de18 <__any_on+0x84>
    ddb4:	18bfff17 	ldw	r2,-4(r3)
    ddb8:	18ffff04 	addi	r3,r3,-4
    ddbc:	1000041e 	bne	r2,zero,ddd0 <__any_on+0x3c>
    ddc0:	20c0142e 	bgeu	r4,r3,de14 <__any_on+0x80>
    ddc4:	18ffff04 	addi	r3,r3,-4
    ddc8:	19400017 	ldw	r5,0(r3)
    ddcc:	283ffc26 	beq	r5,zero,ddc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ddc0>
    ddd0:	00800044 	movi	r2,1
    ddd4:	f800283a 	ret
    ddd8:	10c00a0e 	bge	r2,r3,de04 <__any_on+0x70>
    dddc:	1085883a 	add	r2,r2,r2
    dde0:	1085883a 	add	r2,r2,r2
    dde4:	294007cc 	andi	r5,r5,31
    dde8:	2087883a 	add	r3,r4,r2
    ddec:	283ff026 	beq	r5,zero,ddb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ddb0>
    ddf0:	19800017 	ldw	r6,0(r3)
    ddf4:	3144d83a 	srl	r2,r6,r5
    ddf8:	114a983a 	sll	r5,r2,r5
    ddfc:	317ff41e 	bne	r6,r5,ddd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ddd0>
    de00:	003feb06 	br	ddb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ddb0>
    de04:	1085883a 	add	r2,r2,r2
    de08:	1085883a 	add	r2,r2,r2
    de0c:	2087883a 	add	r3,r4,r2
    de10:	003fe706 	br	ddb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ddb0>
    de14:	f800283a 	ret
    de18:	0005883a 	mov	r2,zero
    de1c:	f800283a 	ret

0000de20 <_realloc_r>:
    de20:	defff604 	addi	sp,sp,-40
    de24:	dc800215 	stw	r18,8(sp)
    de28:	dfc00915 	stw	ra,36(sp)
    de2c:	df000815 	stw	fp,32(sp)
    de30:	ddc00715 	stw	r23,28(sp)
    de34:	dd800615 	stw	r22,24(sp)
    de38:	dd400515 	stw	r21,20(sp)
    de3c:	dd000415 	stw	r20,16(sp)
    de40:	dcc00315 	stw	r19,12(sp)
    de44:	dc400115 	stw	r17,4(sp)
    de48:	dc000015 	stw	r16,0(sp)
    de4c:	3025883a 	mov	r18,r6
    de50:	2800b726 	beq	r5,zero,e130 <_realloc_r+0x310>
    de54:	282b883a 	mov	r21,r5
    de58:	2029883a 	mov	r20,r4
    de5c:	00139300 	call	13930 <__malloc_lock>
    de60:	a8bfff17 	ldw	r2,-4(r21)
    de64:	043fff04 	movi	r16,-4
    de68:	90c002c4 	addi	r3,r18,11
    de6c:	01000584 	movi	r4,22
    de70:	acfffe04 	addi	r19,r21,-8
    de74:	1420703a 	and	r16,r2,r16
    de78:	20c0332e 	bgeu	r4,r3,df48 <_realloc_r+0x128>
    de7c:	047ffe04 	movi	r17,-8
    de80:	1c62703a 	and	r17,r3,r17
    de84:	8807883a 	mov	r3,r17
    de88:	88005816 	blt	r17,zero,dfec <_realloc_r+0x1cc>
    de8c:	8c805736 	bltu	r17,r18,dfec <_realloc_r+0x1cc>
    de90:	80c0300e 	bge	r16,r3,df54 <_realloc_r+0x134>
    de94:	070000b4 	movhi	fp,2
    de98:	e7011e04 	addi	fp,fp,1144
    de9c:	e1c00217 	ldw	r7,8(fp)
    dea0:	9c09883a 	add	r4,r19,r16
    dea4:	22000117 	ldw	r8,4(r4)
    dea8:	21c06326 	beq	r4,r7,e038 <_realloc_r+0x218>
    deac:	017fff84 	movi	r5,-2
    deb0:	414a703a 	and	r5,r8,r5
    deb4:	214b883a 	add	r5,r4,r5
    deb8:	29800117 	ldw	r6,4(r5)
    debc:	3180004c 	andi	r6,r6,1
    dec0:	30003f26 	beq	r6,zero,dfc0 <_realloc_r+0x1a0>
    dec4:	1080004c 	andi	r2,r2,1
    dec8:	10008326 	beq	r2,zero,e0d8 <_realloc_r+0x2b8>
    decc:	900b883a 	mov	r5,r18
    ded0:	a009883a 	mov	r4,r20
    ded4:	0006b580 	call	6b58 <_malloc_r>
    ded8:	1025883a 	mov	r18,r2
    dedc:	10011e26 	beq	r2,zero,e358 <_realloc_r+0x538>
    dee0:	a93fff17 	ldw	r4,-4(r21)
    dee4:	10fffe04 	addi	r3,r2,-8
    dee8:	00bfff84 	movi	r2,-2
    deec:	2084703a 	and	r2,r4,r2
    def0:	9885883a 	add	r2,r19,r2
    def4:	1880ee26 	beq	r3,r2,e2b0 <_realloc_r+0x490>
    def8:	81bfff04 	addi	r6,r16,-4
    defc:	00800904 	movi	r2,36
    df00:	1180b836 	bltu	r2,r6,e1e4 <_realloc_r+0x3c4>
    df04:	00c004c4 	movi	r3,19
    df08:	19809636 	bltu	r3,r6,e164 <_realloc_r+0x344>
    df0c:	9005883a 	mov	r2,r18
    df10:	a807883a 	mov	r3,r21
    df14:	19000017 	ldw	r4,0(r3)
    df18:	11000015 	stw	r4,0(r2)
    df1c:	19000117 	ldw	r4,4(r3)
    df20:	11000115 	stw	r4,4(r2)
    df24:	18c00217 	ldw	r3,8(r3)
    df28:	10c00215 	stw	r3,8(r2)
    df2c:	a80b883a 	mov	r5,r21
    df30:	a009883a 	mov	r4,r20
    df34:	000bff80 	call	bff8 <_free_r>
    df38:	a009883a 	mov	r4,r20
    df3c:	0013a500 	call	13a50 <__malloc_unlock>
    df40:	9005883a 	mov	r2,r18
    df44:	00001206 	br	df90 <_realloc_r+0x170>
    df48:	00c00404 	movi	r3,16
    df4c:	1823883a 	mov	r17,r3
    df50:	003fce06 	br	de8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de8c>
    df54:	a825883a 	mov	r18,r21
    df58:	8445c83a 	sub	r2,r16,r17
    df5c:	00c003c4 	movi	r3,15
    df60:	18802636 	bltu	r3,r2,dffc <_realloc_r+0x1dc>
    df64:	99800117 	ldw	r6,4(r19)
    df68:	9c07883a 	add	r3,r19,r16
    df6c:	3180004c 	andi	r6,r6,1
    df70:	3420b03a 	or	r16,r6,r16
    df74:	9c000115 	stw	r16,4(r19)
    df78:	18800117 	ldw	r2,4(r3)
    df7c:	10800054 	ori	r2,r2,1
    df80:	18800115 	stw	r2,4(r3)
    df84:	a009883a 	mov	r4,r20
    df88:	0013a500 	call	13a50 <__malloc_unlock>
    df8c:	9005883a 	mov	r2,r18
    df90:	dfc00917 	ldw	ra,36(sp)
    df94:	df000817 	ldw	fp,32(sp)
    df98:	ddc00717 	ldw	r23,28(sp)
    df9c:	dd800617 	ldw	r22,24(sp)
    dfa0:	dd400517 	ldw	r21,20(sp)
    dfa4:	dd000417 	ldw	r20,16(sp)
    dfa8:	dcc00317 	ldw	r19,12(sp)
    dfac:	dc800217 	ldw	r18,8(sp)
    dfb0:	dc400117 	ldw	r17,4(sp)
    dfb4:	dc000017 	ldw	r16,0(sp)
    dfb8:	dec00a04 	addi	sp,sp,40
    dfbc:	f800283a 	ret
    dfc0:	017fff04 	movi	r5,-4
    dfc4:	414a703a 	and	r5,r8,r5
    dfc8:	814d883a 	add	r6,r16,r5
    dfcc:	30c01f16 	blt	r6,r3,e04c <_realloc_r+0x22c>
    dfd0:	20800317 	ldw	r2,12(r4)
    dfd4:	20c00217 	ldw	r3,8(r4)
    dfd8:	a825883a 	mov	r18,r21
    dfdc:	3021883a 	mov	r16,r6
    dfe0:	18800315 	stw	r2,12(r3)
    dfe4:	10c00215 	stw	r3,8(r2)
    dfe8:	003fdb06 	br	df58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df58>
    dfec:	00800304 	movi	r2,12
    dff0:	a0800015 	stw	r2,0(r20)
    dff4:	0005883a 	mov	r2,zero
    dff8:	003fe506 	br	df90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df90>
    dffc:	98c00117 	ldw	r3,4(r19)
    e000:	9c4b883a 	add	r5,r19,r17
    e004:	11000054 	ori	r4,r2,1
    e008:	18c0004c 	andi	r3,r3,1
    e00c:	1c62b03a 	or	r17,r3,r17
    e010:	9c400115 	stw	r17,4(r19)
    e014:	29000115 	stw	r4,4(r5)
    e018:	2885883a 	add	r2,r5,r2
    e01c:	10c00117 	ldw	r3,4(r2)
    e020:	29400204 	addi	r5,r5,8
    e024:	a009883a 	mov	r4,r20
    e028:	18c00054 	ori	r3,r3,1
    e02c:	10c00115 	stw	r3,4(r2)
    e030:	000bff80 	call	bff8 <_free_r>
    e034:	003fd306 	br	df84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df84>
    e038:	017fff04 	movi	r5,-4
    e03c:	414a703a 	and	r5,r8,r5
    e040:	89800404 	addi	r6,r17,16
    e044:	8151883a 	add	r8,r16,r5
    e048:	4180590e 	bge	r8,r6,e1b0 <_realloc_r+0x390>
    e04c:	1080004c 	andi	r2,r2,1
    e050:	103f9e1e 	bne	r2,zero,decc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700decc>
    e054:	adbffe17 	ldw	r22,-8(r21)
    e058:	00bfff04 	movi	r2,-4
    e05c:	9dadc83a 	sub	r22,r19,r22
    e060:	b1800117 	ldw	r6,4(r22)
    e064:	3084703a 	and	r2,r6,r2
    e068:	20002026 	beq	r4,zero,e0ec <_realloc_r+0x2cc>
    e06c:	80af883a 	add	r23,r16,r2
    e070:	b96f883a 	add	r23,r23,r5
    e074:	21c05f26 	beq	r4,r7,e1f4 <_realloc_r+0x3d4>
    e078:	b8c01c16 	blt	r23,r3,e0ec <_realloc_r+0x2cc>
    e07c:	20800317 	ldw	r2,12(r4)
    e080:	20c00217 	ldw	r3,8(r4)
    e084:	81bfff04 	addi	r6,r16,-4
    e088:	01000904 	movi	r4,36
    e08c:	18800315 	stw	r2,12(r3)
    e090:	10c00215 	stw	r3,8(r2)
    e094:	b0c00217 	ldw	r3,8(r22)
    e098:	b0800317 	ldw	r2,12(r22)
    e09c:	b4800204 	addi	r18,r22,8
    e0a0:	18800315 	stw	r2,12(r3)
    e0a4:	10c00215 	stw	r3,8(r2)
    e0a8:	21801b36 	bltu	r4,r6,e118 <_realloc_r+0x2f8>
    e0ac:	008004c4 	movi	r2,19
    e0b0:	1180352e 	bgeu	r2,r6,e188 <_realloc_r+0x368>
    e0b4:	a8800017 	ldw	r2,0(r21)
    e0b8:	b0800215 	stw	r2,8(r22)
    e0bc:	a8800117 	ldw	r2,4(r21)
    e0c0:	b0800315 	stw	r2,12(r22)
    e0c4:	008006c4 	movi	r2,27
    e0c8:	11807f36 	bltu	r2,r6,e2c8 <_realloc_r+0x4a8>
    e0cc:	b0800404 	addi	r2,r22,16
    e0d0:	ad400204 	addi	r21,r21,8
    e0d4:	00002d06 	br	e18c <_realloc_r+0x36c>
    e0d8:	adbffe17 	ldw	r22,-8(r21)
    e0dc:	00bfff04 	movi	r2,-4
    e0e0:	9dadc83a 	sub	r22,r19,r22
    e0e4:	b1000117 	ldw	r4,4(r22)
    e0e8:	2084703a 	and	r2,r4,r2
    e0ec:	b03f7726 	beq	r22,zero,decc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700decc>
    e0f0:	80af883a 	add	r23,r16,r2
    e0f4:	b8ff7516 	blt	r23,r3,decc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700decc>
    e0f8:	b0800317 	ldw	r2,12(r22)
    e0fc:	b0c00217 	ldw	r3,8(r22)
    e100:	81bfff04 	addi	r6,r16,-4
    e104:	01000904 	movi	r4,36
    e108:	18800315 	stw	r2,12(r3)
    e10c:	10c00215 	stw	r3,8(r2)
    e110:	b4800204 	addi	r18,r22,8
    e114:	21bfe52e 	bgeu	r4,r6,e0ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0ac>
    e118:	a80b883a 	mov	r5,r21
    e11c:	9009883a 	mov	r4,r18
    e120:	000ccc80 	call	ccc8 <memmove>
    e124:	b821883a 	mov	r16,r23
    e128:	b027883a 	mov	r19,r22
    e12c:	003f8a06 	br	df58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df58>
    e130:	300b883a 	mov	r5,r6
    e134:	dfc00917 	ldw	ra,36(sp)
    e138:	df000817 	ldw	fp,32(sp)
    e13c:	ddc00717 	ldw	r23,28(sp)
    e140:	dd800617 	ldw	r22,24(sp)
    e144:	dd400517 	ldw	r21,20(sp)
    e148:	dd000417 	ldw	r20,16(sp)
    e14c:	dcc00317 	ldw	r19,12(sp)
    e150:	dc800217 	ldw	r18,8(sp)
    e154:	dc400117 	ldw	r17,4(sp)
    e158:	dc000017 	ldw	r16,0(sp)
    e15c:	dec00a04 	addi	sp,sp,40
    e160:	0006b581 	jmpi	6b58 <_malloc_r>
    e164:	a8c00017 	ldw	r3,0(r21)
    e168:	90c00015 	stw	r3,0(r18)
    e16c:	a8c00117 	ldw	r3,4(r21)
    e170:	90c00115 	stw	r3,4(r18)
    e174:	00c006c4 	movi	r3,27
    e178:	19804536 	bltu	r3,r6,e290 <_realloc_r+0x470>
    e17c:	90800204 	addi	r2,r18,8
    e180:	a8c00204 	addi	r3,r21,8
    e184:	003f6306 	br	df14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df14>
    e188:	9005883a 	mov	r2,r18
    e18c:	a8c00017 	ldw	r3,0(r21)
    e190:	b821883a 	mov	r16,r23
    e194:	b027883a 	mov	r19,r22
    e198:	10c00015 	stw	r3,0(r2)
    e19c:	a8c00117 	ldw	r3,4(r21)
    e1a0:	10c00115 	stw	r3,4(r2)
    e1a4:	a8c00217 	ldw	r3,8(r21)
    e1a8:	10c00215 	stw	r3,8(r2)
    e1ac:	003f6a06 	br	df58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df58>
    e1b0:	9c67883a 	add	r19,r19,r17
    e1b4:	4445c83a 	sub	r2,r8,r17
    e1b8:	e4c00215 	stw	r19,8(fp)
    e1bc:	10800054 	ori	r2,r2,1
    e1c0:	98800115 	stw	r2,4(r19)
    e1c4:	a8bfff17 	ldw	r2,-4(r21)
    e1c8:	a009883a 	mov	r4,r20
    e1cc:	1080004c 	andi	r2,r2,1
    e1d0:	1462b03a 	or	r17,r2,r17
    e1d4:	ac7fff15 	stw	r17,-4(r21)
    e1d8:	0013a500 	call	13a50 <__malloc_unlock>
    e1dc:	a805883a 	mov	r2,r21
    e1e0:	003f6b06 	br	df90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df90>
    e1e4:	a80b883a 	mov	r5,r21
    e1e8:	9009883a 	mov	r4,r18
    e1ec:	000ccc80 	call	ccc8 <memmove>
    e1f0:	003f4e06 	br	df2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df2c>
    e1f4:	89000404 	addi	r4,r17,16
    e1f8:	b93fbc16 	blt	r23,r4,e0ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0ec>
    e1fc:	b0800317 	ldw	r2,12(r22)
    e200:	b0c00217 	ldw	r3,8(r22)
    e204:	81bfff04 	addi	r6,r16,-4
    e208:	01000904 	movi	r4,36
    e20c:	18800315 	stw	r2,12(r3)
    e210:	10c00215 	stw	r3,8(r2)
    e214:	b4800204 	addi	r18,r22,8
    e218:	21804336 	bltu	r4,r6,e328 <_realloc_r+0x508>
    e21c:	008004c4 	movi	r2,19
    e220:	11803f2e 	bgeu	r2,r6,e320 <_realloc_r+0x500>
    e224:	a8800017 	ldw	r2,0(r21)
    e228:	b0800215 	stw	r2,8(r22)
    e22c:	a8800117 	ldw	r2,4(r21)
    e230:	b0800315 	stw	r2,12(r22)
    e234:	008006c4 	movi	r2,27
    e238:	11803f36 	bltu	r2,r6,e338 <_realloc_r+0x518>
    e23c:	b0800404 	addi	r2,r22,16
    e240:	ad400204 	addi	r21,r21,8
    e244:	a8c00017 	ldw	r3,0(r21)
    e248:	10c00015 	stw	r3,0(r2)
    e24c:	a8c00117 	ldw	r3,4(r21)
    e250:	10c00115 	stw	r3,4(r2)
    e254:	a8c00217 	ldw	r3,8(r21)
    e258:	10c00215 	stw	r3,8(r2)
    e25c:	b447883a 	add	r3,r22,r17
    e260:	bc45c83a 	sub	r2,r23,r17
    e264:	e0c00215 	stw	r3,8(fp)
    e268:	10800054 	ori	r2,r2,1
    e26c:	18800115 	stw	r2,4(r3)
    e270:	b0800117 	ldw	r2,4(r22)
    e274:	a009883a 	mov	r4,r20
    e278:	1080004c 	andi	r2,r2,1
    e27c:	1462b03a 	or	r17,r2,r17
    e280:	b4400115 	stw	r17,4(r22)
    e284:	0013a500 	call	13a50 <__malloc_unlock>
    e288:	9005883a 	mov	r2,r18
    e28c:	003f4006 	br	df90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df90>
    e290:	a8c00217 	ldw	r3,8(r21)
    e294:	90c00215 	stw	r3,8(r18)
    e298:	a8c00317 	ldw	r3,12(r21)
    e29c:	90c00315 	stw	r3,12(r18)
    e2a0:	30801126 	beq	r6,r2,e2e8 <_realloc_r+0x4c8>
    e2a4:	90800404 	addi	r2,r18,16
    e2a8:	a8c00404 	addi	r3,r21,16
    e2ac:	003f1906 	br	df14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df14>
    e2b0:	90ffff17 	ldw	r3,-4(r18)
    e2b4:	00bfff04 	movi	r2,-4
    e2b8:	a825883a 	mov	r18,r21
    e2bc:	1884703a 	and	r2,r3,r2
    e2c0:	80a1883a 	add	r16,r16,r2
    e2c4:	003f2406 	br	df58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df58>
    e2c8:	a8800217 	ldw	r2,8(r21)
    e2cc:	b0800415 	stw	r2,16(r22)
    e2d0:	a8800317 	ldw	r2,12(r21)
    e2d4:	b0800515 	stw	r2,20(r22)
    e2d8:	31000a26 	beq	r6,r4,e304 <_realloc_r+0x4e4>
    e2dc:	b0800604 	addi	r2,r22,24
    e2e0:	ad400404 	addi	r21,r21,16
    e2e4:	003fa906 	br	e18c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e18c>
    e2e8:	a9000417 	ldw	r4,16(r21)
    e2ec:	90800604 	addi	r2,r18,24
    e2f0:	a8c00604 	addi	r3,r21,24
    e2f4:	91000415 	stw	r4,16(r18)
    e2f8:	a9000517 	ldw	r4,20(r21)
    e2fc:	91000515 	stw	r4,20(r18)
    e300:	003f0406 	br	df14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df14>
    e304:	a8c00417 	ldw	r3,16(r21)
    e308:	ad400604 	addi	r21,r21,24
    e30c:	b0800804 	addi	r2,r22,32
    e310:	b0c00615 	stw	r3,24(r22)
    e314:	a8ffff17 	ldw	r3,-4(r21)
    e318:	b0c00715 	stw	r3,28(r22)
    e31c:	003f9b06 	br	e18c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e18c>
    e320:	9005883a 	mov	r2,r18
    e324:	003fc706 	br	e244 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e244>
    e328:	a80b883a 	mov	r5,r21
    e32c:	9009883a 	mov	r4,r18
    e330:	000ccc80 	call	ccc8 <memmove>
    e334:	003fc906 	br	e25c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e25c>
    e338:	a8800217 	ldw	r2,8(r21)
    e33c:	b0800415 	stw	r2,16(r22)
    e340:	a8800317 	ldw	r2,12(r21)
    e344:	b0800515 	stw	r2,20(r22)
    e348:	31000726 	beq	r6,r4,e368 <_realloc_r+0x548>
    e34c:	b0800604 	addi	r2,r22,24
    e350:	ad400404 	addi	r21,r21,16
    e354:	003fbb06 	br	e244 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e244>
    e358:	a009883a 	mov	r4,r20
    e35c:	0013a500 	call	13a50 <__malloc_unlock>
    e360:	0005883a 	mov	r2,zero
    e364:	003f0a06 	br	df90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df90>
    e368:	a8c00417 	ldw	r3,16(r21)
    e36c:	ad400604 	addi	r21,r21,24
    e370:	b0800804 	addi	r2,r22,32
    e374:	b0c00615 	stw	r3,24(r22)
    e378:	a8ffff17 	ldw	r3,-4(r21)
    e37c:	b0c00715 	stw	r3,28(r22)
    e380:	003fb006 	br	e244 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e244>

0000e384 <__fpclassifyd>:
    e384:	00a00034 	movhi	r2,32768
    e388:	10bfffc4 	addi	r2,r2,-1
    e38c:	2884703a 	and	r2,r5,r2
    e390:	10000726 	beq	r2,zero,e3b0 <__fpclassifyd+0x2c>
    e394:	00fffc34 	movhi	r3,65520
    e398:	019ff834 	movhi	r6,32736
    e39c:	28c7883a 	add	r3,r5,r3
    e3a0:	31bfffc4 	addi	r6,r6,-1
    e3a4:	30c00536 	bltu	r6,r3,e3bc <__fpclassifyd+0x38>
    e3a8:	00800104 	movi	r2,4
    e3ac:	f800283a 	ret
    e3b0:	2000021e 	bne	r4,zero,e3bc <__fpclassifyd+0x38>
    e3b4:	00800084 	movi	r2,2
    e3b8:	f800283a 	ret
    e3bc:	00dffc34 	movhi	r3,32752
    e3c0:	019ff834 	movhi	r6,32736
    e3c4:	28cb883a 	add	r5,r5,r3
    e3c8:	31bfffc4 	addi	r6,r6,-1
    e3cc:	317ff62e 	bgeu	r6,r5,e3a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e3a8>
    e3d0:	01400434 	movhi	r5,16
    e3d4:	297fffc4 	addi	r5,r5,-1
    e3d8:	28800236 	bltu	r5,r2,e3e4 <__fpclassifyd+0x60>
    e3dc:	008000c4 	movi	r2,3
    e3e0:	f800283a 	ret
    e3e4:	10c00226 	beq	r2,r3,e3f0 <__fpclassifyd+0x6c>
    e3e8:	0005883a 	mov	r2,zero
    e3ec:	f800283a 	ret
    e3f0:	2005003a 	cmpeq	r2,r4,zero
    e3f4:	f800283a 	ret

0000e3f8 <__sread>:
    e3f8:	defffe04 	addi	sp,sp,-8
    e3fc:	dc000015 	stw	r16,0(sp)
    e400:	2821883a 	mov	r16,r5
    e404:	2940038f 	ldh	r5,14(r5)
    e408:	dfc00115 	stw	ra,4(sp)
    e40c:	00101100 	call	10110 <_read_r>
    e410:	10000716 	blt	r2,zero,e430 <__sread+0x38>
    e414:	80c01417 	ldw	r3,80(r16)
    e418:	1887883a 	add	r3,r3,r2
    e41c:	80c01415 	stw	r3,80(r16)
    e420:	dfc00117 	ldw	ra,4(sp)
    e424:	dc000017 	ldw	r16,0(sp)
    e428:	dec00204 	addi	sp,sp,8
    e42c:	f800283a 	ret
    e430:	80c0030b 	ldhu	r3,12(r16)
    e434:	18fbffcc 	andi	r3,r3,61439
    e438:	80c0030d 	sth	r3,12(r16)
    e43c:	dfc00117 	ldw	ra,4(sp)
    e440:	dc000017 	ldw	r16,0(sp)
    e444:	dec00204 	addi	sp,sp,8
    e448:	f800283a 	ret

0000e44c <__seofread>:
    e44c:	0005883a 	mov	r2,zero
    e450:	f800283a 	ret

0000e454 <__swrite>:
    e454:	2880030b 	ldhu	r2,12(r5)
    e458:	defffb04 	addi	sp,sp,-20
    e45c:	dcc00315 	stw	r19,12(sp)
    e460:	dc800215 	stw	r18,8(sp)
    e464:	dc400115 	stw	r17,4(sp)
    e468:	dc000015 	stw	r16,0(sp)
    e46c:	dfc00415 	stw	ra,16(sp)
    e470:	10c0400c 	andi	r3,r2,256
    e474:	2821883a 	mov	r16,r5
    e478:	2023883a 	mov	r17,r4
    e47c:	3025883a 	mov	r18,r6
    e480:	3827883a 	mov	r19,r7
    e484:	18000526 	beq	r3,zero,e49c <__swrite+0x48>
    e488:	2940038f 	ldh	r5,14(r5)
    e48c:	01c00084 	movi	r7,2
    e490:	000d883a 	mov	r6,zero
    e494:	00100b00 	call	100b0 <_lseek_r>
    e498:	8080030b 	ldhu	r2,12(r16)
    e49c:	8140038f 	ldh	r5,14(r16)
    e4a0:	10bbffcc 	andi	r2,r2,61439
    e4a4:	980f883a 	mov	r7,r19
    e4a8:	900d883a 	mov	r6,r18
    e4ac:	8809883a 	mov	r4,r17
    e4b0:	8080030d 	sth	r2,12(r16)
    e4b4:	dfc00417 	ldw	ra,16(sp)
    e4b8:	dcc00317 	ldw	r19,12(sp)
    e4bc:	dc800217 	ldw	r18,8(sp)
    e4c0:	dc400117 	ldw	r17,4(sp)
    e4c4:	dc000017 	ldw	r16,0(sp)
    e4c8:	dec00504 	addi	sp,sp,20
    e4cc:	000fb7c1 	jmpi	fb7c <_write_r>

0000e4d0 <__sseek>:
    e4d0:	defffe04 	addi	sp,sp,-8
    e4d4:	dc000015 	stw	r16,0(sp)
    e4d8:	2821883a 	mov	r16,r5
    e4dc:	2940038f 	ldh	r5,14(r5)
    e4e0:	dfc00115 	stw	ra,4(sp)
    e4e4:	00100b00 	call	100b0 <_lseek_r>
    e4e8:	00ffffc4 	movi	r3,-1
    e4ec:	10c00826 	beq	r2,r3,e510 <__sseek+0x40>
    e4f0:	80c0030b 	ldhu	r3,12(r16)
    e4f4:	80801415 	stw	r2,80(r16)
    e4f8:	18c40014 	ori	r3,r3,4096
    e4fc:	80c0030d 	sth	r3,12(r16)
    e500:	dfc00117 	ldw	ra,4(sp)
    e504:	dc000017 	ldw	r16,0(sp)
    e508:	dec00204 	addi	sp,sp,8
    e50c:	f800283a 	ret
    e510:	80c0030b 	ldhu	r3,12(r16)
    e514:	18fbffcc 	andi	r3,r3,61439
    e518:	80c0030d 	sth	r3,12(r16)
    e51c:	dfc00117 	ldw	ra,4(sp)
    e520:	dc000017 	ldw	r16,0(sp)
    e524:	dec00204 	addi	sp,sp,8
    e528:	f800283a 	ret

0000e52c <__sclose>:
    e52c:	2940038f 	ldh	r5,14(r5)
    e530:	000fbdc1 	jmpi	fbdc <_close_r>

0000e534 <__sprint_r.part.0>:
    e534:	28801917 	ldw	r2,100(r5)
    e538:	defff604 	addi	sp,sp,-40
    e53c:	dd400515 	stw	r21,20(sp)
    e540:	dfc00915 	stw	ra,36(sp)
    e544:	df000815 	stw	fp,32(sp)
    e548:	ddc00715 	stw	r23,28(sp)
    e54c:	dd800615 	stw	r22,24(sp)
    e550:	dd000415 	stw	r20,16(sp)
    e554:	dcc00315 	stw	r19,12(sp)
    e558:	dc800215 	stw	r18,8(sp)
    e55c:	dc400115 	stw	r17,4(sp)
    e560:	dc000015 	stw	r16,0(sp)
    e564:	1088000c 	andi	r2,r2,8192
    e568:	302b883a 	mov	r21,r6
    e56c:	10002e26 	beq	r2,zero,e628 <__sprint_r.part.0+0xf4>
    e570:	30800217 	ldw	r2,8(r6)
    e574:	35800017 	ldw	r22,0(r6)
    e578:	10002926 	beq	r2,zero,e620 <__sprint_r.part.0+0xec>
    e57c:	2827883a 	mov	r19,r5
    e580:	2029883a 	mov	r20,r4
    e584:	b5c00104 	addi	r23,r22,4
    e588:	04bfffc4 	movi	r18,-1
    e58c:	bc400017 	ldw	r17,0(r23)
    e590:	b4000017 	ldw	r16,0(r22)
    e594:	0039883a 	mov	fp,zero
    e598:	8822d0ba 	srli	r17,r17,2
    e59c:	8800031e 	bne	r17,zero,e5ac <__sprint_r.part.0+0x78>
    e5a0:	00001806 	br	e604 <__sprint_r.part.0+0xd0>
    e5a4:	84000104 	addi	r16,r16,4
    e5a8:	8f001526 	beq	r17,fp,e600 <__sprint_r.part.0+0xcc>
    e5ac:	81400017 	ldw	r5,0(r16)
    e5b0:	980d883a 	mov	r6,r19
    e5b4:	a009883a 	mov	r4,r20
    e5b8:	000ff5c0 	call	ff5c <_fputwc_r>
    e5bc:	e7000044 	addi	fp,fp,1
    e5c0:	14bff81e 	bne	r2,r18,e5a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e5a4>
    e5c4:	9005883a 	mov	r2,r18
    e5c8:	a8000215 	stw	zero,8(r21)
    e5cc:	a8000115 	stw	zero,4(r21)
    e5d0:	dfc00917 	ldw	ra,36(sp)
    e5d4:	df000817 	ldw	fp,32(sp)
    e5d8:	ddc00717 	ldw	r23,28(sp)
    e5dc:	dd800617 	ldw	r22,24(sp)
    e5e0:	dd400517 	ldw	r21,20(sp)
    e5e4:	dd000417 	ldw	r20,16(sp)
    e5e8:	dcc00317 	ldw	r19,12(sp)
    e5ec:	dc800217 	ldw	r18,8(sp)
    e5f0:	dc400117 	ldw	r17,4(sp)
    e5f4:	dc000017 	ldw	r16,0(sp)
    e5f8:	dec00a04 	addi	sp,sp,40
    e5fc:	f800283a 	ret
    e600:	a8800217 	ldw	r2,8(r21)
    e604:	8c63883a 	add	r17,r17,r17
    e608:	8c63883a 	add	r17,r17,r17
    e60c:	1445c83a 	sub	r2,r2,r17
    e610:	a8800215 	stw	r2,8(r21)
    e614:	b5800204 	addi	r22,r22,8
    e618:	bdc00204 	addi	r23,r23,8
    e61c:	103fdb1e 	bne	r2,zero,e58c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e58c>
    e620:	0005883a 	mov	r2,zero
    e624:	003fe806 	br	e5c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e5c8>
    e628:	000c3080 	call	c308 <__sfvwrite_r>
    e62c:	003fe606 	br	e5c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e5c8>

0000e630 <__sprint_r>:
    e630:	30c00217 	ldw	r3,8(r6)
    e634:	18000126 	beq	r3,zero,e63c <__sprint_r+0xc>
    e638:	000e5341 	jmpi	e534 <__sprint_r.part.0>
    e63c:	30000115 	stw	zero,4(r6)
    e640:	0005883a 	mov	r2,zero
    e644:	f800283a 	ret

0000e648 <___vfiprintf_internal_r>:
    e648:	deffc904 	addi	sp,sp,-220
    e64c:	df003515 	stw	fp,212(sp)
    e650:	dd003115 	stw	r20,196(sp)
    e654:	dfc03615 	stw	ra,216(sp)
    e658:	ddc03415 	stw	r23,208(sp)
    e65c:	dd803315 	stw	r22,204(sp)
    e660:	dd403215 	stw	r21,200(sp)
    e664:	dcc03015 	stw	r19,192(sp)
    e668:	dc802f15 	stw	r18,188(sp)
    e66c:	dc402e15 	stw	r17,184(sp)
    e670:	dc002d15 	stw	r16,180(sp)
    e674:	d9002015 	stw	r4,128(sp)
    e678:	d9c02215 	stw	r7,136(sp)
    e67c:	2829883a 	mov	r20,r5
    e680:	3039883a 	mov	fp,r6
    e684:	20000226 	beq	r4,zero,e690 <___vfiprintf_internal_r+0x48>
    e688:	20800e17 	ldw	r2,56(r4)
    e68c:	1000cf26 	beq	r2,zero,e9cc <___vfiprintf_internal_r+0x384>
    e690:	a080030b 	ldhu	r2,12(r20)
    e694:	10c8000c 	andi	r3,r2,8192
    e698:	1800061e 	bne	r3,zero,e6b4 <___vfiprintf_internal_r+0x6c>
    e69c:	a1001917 	ldw	r4,100(r20)
    e6a0:	00f7ffc4 	movi	r3,-8193
    e6a4:	10880014 	ori	r2,r2,8192
    e6a8:	20c6703a 	and	r3,r4,r3
    e6ac:	a080030d 	sth	r2,12(r20)
    e6b0:	a0c01915 	stw	r3,100(r20)
    e6b4:	10c0020c 	andi	r3,r2,8
    e6b8:	1800a926 	beq	r3,zero,e960 <___vfiprintf_internal_r+0x318>
    e6bc:	a0c00417 	ldw	r3,16(r20)
    e6c0:	1800a726 	beq	r3,zero,e960 <___vfiprintf_internal_r+0x318>
    e6c4:	1080068c 	andi	r2,r2,26
    e6c8:	00c00284 	movi	r3,10
    e6cc:	10c0ac26 	beq	r2,r3,e980 <___vfiprintf_internal_r+0x338>
    e6d0:	da801a04 	addi	r10,sp,104
    e6d4:	da801e15 	stw	r10,120(sp)
    e6d8:	d8801e17 	ldw	r2,120(sp)
    e6dc:	da8019c4 	addi	r10,sp,103
    e6e0:	058000b4 	movhi	r22,2
    e6e4:	05c000b4 	movhi	r23,2
    e6e8:	da801f15 	stw	r10,124(sp)
    e6ec:	1295c83a 	sub	r10,r2,r10
    e6f0:	b5805e04 	addi	r22,r22,376
    e6f4:	bdc05a04 	addi	r23,r23,360
    e6f8:	dec01a15 	stw	sp,104(sp)
    e6fc:	d8001c15 	stw	zero,112(sp)
    e700:	d8001b15 	stw	zero,108(sp)
    e704:	d8002615 	stw	zero,152(sp)
    e708:	d8002315 	stw	zero,140(sp)
    e70c:	da802715 	stw	r10,156(sp)
    e710:	d811883a 	mov	r8,sp
    e714:	dd002115 	stw	r20,132(sp)
    e718:	e021883a 	mov	r16,fp
    e71c:	80800007 	ldb	r2,0(r16)
    e720:	1003ea26 	beq	r2,zero,f6cc <___vfiprintf_internal_r+0x1084>
    e724:	00c00944 	movi	r3,37
    e728:	8025883a 	mov	r18,r16
    e72c:	10c0021e 	bne	r2,r3,e738 <___vfiprintf_internal_r+0xf0>
    e730:	00001606 	br	e78c <___vfiprintf_internal_r+0x144>
    e734:	10c00326 	beq	r2,r3,e744 <___vfiprintf_internal_r+0xfc>
    e738:	94800044 	addi	r18,r18,1
    e73c:	90800007 	ldb	r2,0(r18)
    e740:	103ffc1e 	bne	r2,zero,e734 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e734>
    e744:	9423c83a 	sub	r17,r18,r16
    e748:	88001026 	beq	r17,zero,e78c <___vfiprintf_internal_r+0x144>
    e74c:	d8c01c17 	ldw	r3,112(sp)
    e750:	d8801b17 	ldw	r2,108(sp)
    e754:	44000015 	stw	r16,0(r8)
    e758:	88c7883a 	add	r3,r17,r3
    e75c:	10800044 	addi	r2,r2,1
    e760:	44400115 	stw	r17,4(r8)
    e764:	d8c01c15 	stw	r3,112(sp)
    e768:	d8801b15 	stw	r2,108(sp)
    e76c:	010001c4 	movi	r4,7
    e770:	2080760e 	bge	r4,r2,e94c <___vfiprintf_internal_r+0x304>
    e774:	1803821e 	bne	r3,zero,f580 <___vfiprintf_internal_r+0xf38>
    e778:	da802317 	ldw	r10,140(sp)
    e77c:	d8001b15 	stw	zero,108(sp)
    e780:	d811883a 	mov	r8,sp
    e784:	5455883a 	add	r10,r10,r17
    e788:	da802315 	stw	r10,140(sp)
    e78c:	90800007 	ldb	r2,0(r18)
    e790:	10044626 	beq	r2,zero,f8ac <___vfiprintf_internal_r+0x1264>
    e794:	90c00047 	ldb	r3,1(r18)
    e798:	94000044 	addi	r16,r18,1
    e79c:	d8001d85 	stb	zero,118(sp)
    e7a0:	0009883a 	mov	r4,zero
    e7a4:	000f883a 	mov	r7,zero
    e7a8:	027fffc4 	movi	r9,-1
    e7ac:	0023883a 	mov	r17,zero
    e7b0:	0029883a 	mov	r20,zero
    e7b4:	01401604 	movi	r5,88
    e7b8:	01800244 	movi	r6,9
    e7bc:	03400a84 	movi	r13,42
    e7c0:	03001b04 	movi	r12,108
    e7c4:	84000044 	addi	r16,r16,1
    e7c8:	18bff804 	addi	r2,r3,-32
    e7cc:	28827336 	bltu	r5,r2,f19c <___vfiprintf_internal_r+0xb54>
    e7d0:	100490ba 	slli	r2,r2,2
    e7d4:	02800074 	movhi	r10,1
    e7d8:	52b9fa04 	addi	r10,r10,-6168
    e7dc:	1285883a 	add	r2,r2,r10
    e7e0:	10800017 	ldw	r2,0(r2)
    e7e4:	1000683a 	jmp	r2
    e7e8:	0000eed0 	cmplti	zero,zero,955
    e7ec:	0000f19c 	xori	zero,zero,966
    e7f0:	0000f19c 	xori	zero,zero,966
    e7f4:	0000eef0 	cmpltui	zero,zero,955
    e7f8:	0000f19c 	xori	zero,zero,966
    e7fc:	0000f19c 	xori	zero,zero,966
    e800:	0000f19c 	xori	zero,zero,966
    e804:	0000f19c 	xori	zero,zero,966
    e808:	0000f19c 	xori	zero,zero,966
    e80c:	0000f19c 	xori	zero,zero,966
    e810:	0000f0d8 	cmpnei	zero,zero,963
    e814:	0000f0f4 	movhi	zero,963
    e818:	0000f19c 	xori	zero,zero,966
    e81c:	0000e9dc 	xori	zero,zero,935
    e820:	0000f104 	movi	zero,964
    e824:	0000f19c 	xori	zero,zero,966
    e828:	0000eefc 	xorhi	zero,zero,955
    e82c:	0000ef08 	cmpgei	zero,zero,956
    e830:	0000ef08 	cmpgei	zero,zero,956
    e834:	0000ef08 	cmpgei	zero,zero,956
    e838:	0000ef08 	cmpgei	zero,zero,956
    e83c:	0000ef08 	cmpgei	zero,zero,956
    e840:	0000ef08 	cmpgei	zero,zero,956
    e844:	0000ef08 	cmpgei	zero,zero,956
    e848:	0000ef08 	cmpgei	zero,zero,956
    e84c:	0000ef08 	cmpgei	zero,zero,956
    e850:	0000f19c 	xori	zero,zero,966
    e854:	0000f19c 	xori	zero,zero,966
    e858:	0000f19c 	xori	zero,zero,966
    e85c:	0000f19c 	xori	zero,zero,966
    e860:	0000f19c 	xori	zero,zero,966
    e864:	0000f19c 	xori	zero,zero,966
    e868:	0000f19c 	xori	zero,zero,966
    e86c:	0000f19c 	xori	zero,zero,966
    e870:	0000f19c 	xori	zero,zero,966
    e874:	0000f19c 	xori	zero,zero,966
    e878:	0000ef34 	movhi	zero,956
    e87c:	0000f19c 	xori	zero,zero,966
    e880:	0000f19c 	xori	zero,zero,966
    e884:	0000f19c 	xori	zero,zero,966
    e888:	0000f19c 	xori	zero,zero,966
    e88c:	0000f19c 	xori	zero,zero,966
    e890:	0000f19c 	xori	zero,zero,966
    e894:	0000f19c 	xori	zero,zero,966
    e898:	0000f19c 	xori	zero,zero,966
    e89c:	0000f19c 	xori	zero,zero,966
    e8a0:	0000f19c 	xori	zero,zero,966
    e8a4:	0000ef6c 	andhi	zero,zero,957
    e8a8:	0000f19c 	xori	zero,zero,966
    e8ac:	0000f19c 	xori	zero,zero,966
    e8b0:	0000f19c 	xori	zero,zero,966
    e8b4:	0000f19c 	xori	zero,zero,966
    e8b8:	0000f19c 	xori	zero,zero,966
    e8bc:	0000efc4 	movi	zero,959
    e8c0:	0000f19c 	xori	zero,zero,966
    e8c4:	0000f19c 	xori	zero,zero,966
    e8c8:	0000f034 	movhi	zero,960
    e8cc:	0000f19c 	xori	zero,zero,966
    e8d0:	0000f19c 	xori	zero,zero,966
    e8d4:	0000f19c 	xori	zero,zero,966
    e8d8:	0000f19c 	xori	zero,zero,966
    e8dc:	0000f19c 	xori	zero,zero,966
    e8e0:	0000f19c 	xori	zero,zero,966
    e8e4:	0000f19c 	xori	zero,zero,966
    e8e8:	0000f19c 	xori	zero,zero,966
    e8ec:	0000f19c 	xori	zero,zero,966
    e8f0:	0000f19c 	xori	zero,zero,966
    e8f4:	0000ede0 	cmpeqi	zero,zero,951
    e8f8:	0000ee0c 	andi	zero,zero,952
    e8fc:	0000f19c 	xori	zero,zero,966
    e900:	0000f19c 	xori	zero,zero,966
    e904:	0000f19c 	xori	zero,zero,966
    e908:	0000f144 	movi	zero,965
    e90c:	0000ee0c 	andi	zero,zero,952
    e910:	0000f19c 	xori	zero,zero,966
    e914:	0000f19c 	xori	zero,zero,966
    e918:	0000eca0 	cmpeqi	zero,zero,946
    e91c:	0000f19c 	xori	zero,zero,966
    e920:	0000ecb0 	cmpltui	zero,zero,946
    e924:	0000ecec 	andhi	zero,zero,947
    e928:	0000e9e8 	cmpgeui	zero,zero,935
    e92c:	0000ec94 	movui	zero,946
    e930:	0000f19c 	xori	zero,zero,966
    e934:	0000f070 	cmpltui	zero,zero,961
    e938:	0000f19c 	xori	zero,zero,966
    e93c:	0000f0c8 	cmpgei	zero,zero,963
    e940:	0000f19c 	xori	zero,zero,966
    e944:	0000f19c 	xori	zero,zero,966
    e948:	0000ed8c 	andi	zero,zero,950
    e94c:	42000204 	addi	r8,r8,8
    e950:	da802317 	ldw	r10,140(sp)
    e954:	5455883a 	add	r10,r10,r17
    e958:	da802315 	stw	r10,140(sp)
    e95c:	003f8b06 	br	e78c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e78c>
    e960:	d9002017 	ldw	r4,128(sp)
    e964:	a00b883a 	mov	r5,r20
    e968:	0009eb00 	call	9eb0 <__swsetup_r>
    e96c:	1003b11e 	bne	r2,zero,f834 <___vfiprintf_internal_r+0x11ec>
    e970:	a080030b 	ldhu	r2,12(r20)
    e974:	00c00284 	movi	r3,10
    e978:	1080068c 	andi	r2,r2,26
    e97c:	10ff541e 	bne	r2,r3,e6d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e6d0>
    e980:	a080038f 	ldh	r2,14(r20)
    e984:	103f5216 	blt	r2,zero,e6d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e6d0>
    e988:	d9c02217 	ldw	r7,136(sp)
    e98c:	d9002017 	ldw	r4,128(sp)
    e990:	e00d883a 	mov	r6,fp
    e994:	a00b883a 	mov	r5,r20
    e998:	000fac00 	call	fac0 <__sbprintf>
    e99c:	dfc03617 	ldw	ra,216(sp)
    e9a0:	df003517 	ldw	fp,212(sp)
    e9a4:	ddc03417 	ldw	r23,208(sp)
    e9a8:	dd803317 	ldw	r22,204(sp)
    e9ac:	dd403217 	ldw	r21,200(sp)
    e9b0:	dd003117 	ldw	r20,196(sp)
    e9b4:	dcc03017 	ldw	r19,192(sp)
    e9b8:	dc802f17 	ldw	r18,188(sp)
    e9bc:	dc402e17 	ldw	r17,184(sp)
    e9c0:	dc002d17 	ldw	r16,180(sp)
    e9c4:	dec03704 	addi	sp,sp,220
    e9c8:	f800283a 	ret
    e9cc:	000be840 	call	be84 <__sinit>
    e9d0:	003f2f06 	br	e690 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e690>
    e9d4:	0463c83a 	sub	r17,zero,r17
    e9d8:	d8802215 	stw	r2,136(sp)
    e9dc:	a5000114 	ori	r20,r20,4
    e9e0:	80c00007 	ldb	r3,0(r16)
    e9e4:	003f7706 	br	e7c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e7c4>
    e9e8:	00800c04 	movi	r2,48
    e9ec:	da802217 	ldw	r10,136(sp)
    e9f0:	d8801d05 	stb	r2,116(sp)
    e9f4:	00801e04 	movi	r2,120
    e9f8:	d8801d45 	stb	r2,117(sp)
    e9fc:	d8001d85 	stb	zero,118(sp)
    ea00:	50c00104 	addi	r3,r10,4
    ea04:	54800017 	ldw	r18,0(r10)
    ea08:	0027883a 	mov	r19,zero
    ea0c:	a0800094 	ori	r2,r20,2
    ea10:	48030b16 	blt	r9,zero,f640 <___vfiprintf_internal_r+0xff8>
    ea14:	00bfdfc4 	movi	r2,-129
    ea18:	a096703a 	and	r11,r20,r2
    ea1c:	d8c02215 	stw	r3,136(sp)
    ea20:	5d000094 	ori	r20,r11,2
    ea24:	90032b1e 	bne	r18,zero,f6d4 <___vfiprintf_internal_r+0x108c>
    ea28:	008000b4 	movhi	r2,2
    ea2c:	10bff904 	addi	r2,r2,-28
    ea30:	d8802615 	stw	r2,152(sp)
    ea34:	0039883a 	mov	fp,zero
    ea38:	48017b1e 	bne	r9,zero,f028 <___vfiprintf_internal_r+0x9e0>
    ea3c:	0013883a 	mov	r9,zero
    ea40:	0027883a 	mov	r19,zero
    ea44:	dd401a04 	addi	r21,sp,104
    ea48:	4825883a 	mov	r18,r9
    ea4c:	4cc0010e 	bge	r9,r19,ea54 <___vfiprintf_internal_r+0x40c>
    ea50:	9825883a 	mov	r18,r19
    ea54:	e7003fcc 	andi	fp,fp,255
    ea58:	e700201c 	xori	fp,fp,128
    ea5c:	e73fe004 	addi	fp,fp,-128
    ea60:	e0000126 	beq	fp,zero,ea68 <___vfiprintf_internal_r+0x420>
    ea64:	94800044 	addi	r18,r18,1
    ea68:	a380008c 	andi	r14,r20,2
    ea6c:	70000126 	beq	r14,zero,ea74 <___vfiprintf_internal_r+0x42c>
    ea70:	94800084 	addi	r18,r18,2
    ea74:	a700210c 	andi	fp,r20,132
    ea78:	e001df1e 	bne	fp,zero,f1f8 <___vfiprintf_internal_r+0xbb0>
    ea7c:	8c87c83a 	sub	r3,r17,r18
    ea80:	00c1dd0e 	bge	zero,r3,f1f8 <___vfiprintf_internal_r+0xbb0>
    ea84:	01c00404 	movi	r7,16
    ea88:	d8801c17 	ldw	r2,112(sp)
    ea8c:	38c3ad0e 	bge	r7,r3,f944 <___vfiprintf_internal_r+0x12fc>
    ea90:	028000b4 	movhi	r10,2
    ea94:	52805e04 	addi	r10,r10,376
    ea98:	dc002915 	stw	r16,164(sp)
    ea9c:	d9801b17 	ldw	r6,108(sp)
    eaa0:	da802415 	stw	r10,144(sp)
    eaa4:	03c001c4 	movi	r15,7
    eaa8:	da402515 	stw	r9,148(sp)
    eaac:	db802815 	stw	r14,160(sp)
    eab0:	1821883a 	mov	r16,r3
    eab4:	00000506 	br	eacc <___vfiprintf_internal_r+0x484>
    eab8:	31400084 	addi	r5,r6,2
    eabc:	42000204 	addi	r8,r8,8
    eac0:	200d883a 	mov	r6,r4
    eac4:	843ffc04 	addi	r16,r16,-16
    eac8:	3c000d0e 	bge	r7,r16,eb00 <___vfiprintf_internal_r+0x4b8>
    eacc:	10800404 	addi	r2,r2,16
    ead0:	31000044 	addi	r4,r6,1
    ead4:	45800015 	stw	r22,0(r8)
    ead8:	41c00115 	stw	r7,4(r8)
    eadc:	d8801c15 	stw	r2,112(sp)
    eae0:	d9001b15 	stw	r4,108(sp)
    eae4:	793ff40e 	bge	r15,r4,eab8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eab8>
    eae8:	1001b51e 	bne	r2,zero,f1c0 <___vfiprintf_internal_r+0xb78>
    eaec:	843ffc04 	addi	r16,r16,-16
    eaf0:	000d883a 	mov	r6,zero
    eaf4:	01400044 	movi	r5,1
    eaf8:	d811883a 	mov	r8,sp
    eafc:	3c3ff316 	blt	r7,r16,eacc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eacc>
    eb00:	8007883a 	mov	r3,r16
    eb04:	da402517 	ldw	r9,148(sp)
    eb08:	db802817 	ldw	r14,160(sp)
    eb0c:	dc002917 	ldw	r16,164(sp)
    eb10:	da802417 	ldw	r10,144(sp)
    eb14:	1885883a 	add	r2,r3,r2
    eb18:	40c00115 	stw	r3,4(r8)
    eb1c:	42800015 	stw	r10,0(r8)
    eb20:	d8801c15 	stw	r2,112(sp)
    eb24:	d9401b15 	stw	r5,108(sp)
    eb28:	00c001c4 	movi	r3,7
    eb2c:	19426016 	blt	r3,r5,f4b0 <___vfiprintf_internal_r+0xe68>
    eb30:	d8c01d87 	ldb	r3,118(sp)
    eb34:	42000204 	addi	r8,r8,8
    eb38:	29000044 	addi	r4,r5,1
    eb3c:	1801b31e 	bne	r3,zero,f20c <___vfiprintf_internal_r+0xbc4>
    eb40:	7001c026 	beq	r14,zero,f244 <___vfiprintf_internal_r+0xbfc>
    eb44:	d8c01d04 	addi	r3,sp,116
    eb48:	10800084 	addi	r2,r2,2
    eb4c:	40c00015 	stw	r3,0(r8)
    eb50:	00c00084 	movi	r3,2
    eb54:	40c00115 	stw	r3,4(r8)
    eb58:	d8801c15 	stw	r2,112(sp)
    eb5c:	d9001b15 	stw	r4,108(sp)
    eb60:	00c001c4 	movi	r3,7
    eb64:	1902650e 	bge	r3,r4,f4fc <___vfiprintf_internal_r+0xeb4>
    eb68:	10029a1e 	bne	r2,zero,f5d4 <___vfiprintf_internal_r+0xf8c>
    eb6c:	00c02004 	movi	r3,128
    eb70:	01000044 	movi	r4,1
    eb74:	000b883a 	mov	r5,zero
    eb78:	d811883a 	mov	r8,sp
    eb7c:	e0c1b31e 	bne	fp,r3,f24c <___vfiprintf_internal_r+0xc04>
    eb80:	8cb9c83a 	sub	fp,r17,r18
    eb84:	0701b10e 	bge	zero,fp,f24c <___vfiprintf_internal_r+0xc04>
    eb88:	01c00404 	movi	r7,16
    eb8c:	3f03890e 	bge	r7,fp,f9b4 <___vfiprintf_internal_r+0x136c>
    eb90:	00c000b4 	movhi	r3,2
    eb94:	18c05a04 	addi	r3,r3,360
    eb98:	d8c02415 	stw	r3,144(sp)
    eb9c:	8007883a 	mov	r3,r16
    eba0:	034001c4 	movi	r13,7
    eba4:	e021883a 	mov	r16,fp
    eba8:	da402515 	stw	r9,148(sp)
    ebac:	1839883a 	mov	fp,r3
    ebb0:	00000506 	br	ebc8 <___vfiprintf_internal_r+0x580>
    ebb4:	29800084 	addi	r6,r5,2
    ebb8:	42000204 	addi	r8,r8,8
    ebbc:	180b883a 	mov	r5,r3
    ebc0:	843ffc04 	addi	r16,r16,-16
    ebc4:	3c000d0e 	bge	r7,r16,ebfc <___vfiprintf_internal_r+0x5b4>
    ebc8:	10800404 	addi	r2,r2,16
    ebcc:	28c00044 	addi	r3,r5,1
    ebd0:	45c00015 	stw	r23,0(r8)
    ebd4:	41c00115 	stw	r7,4(r8)
    ebd8:	d8801c15 	stw	r2,112(sp)
    ebdc:	d8c01b15 	stw	r3,108(sp)
    ebe0:	68fff40e 	bge	r13,r3,ebb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ebb4>
    ebe4:	1002241e 	bne	r2,zero,f478 <___vfiprintf_internal_r+0xe30>
    ebe8:	843ffc04 	addi	r16,r16,-16
    ebec:	01800044 	movi	r6,1
    ebf0:	000b883a 	mov	r5,zero
    ebf4:	d811883a 	mov	r8,sp
    ebf8:	3c3ff316 	blt	r7,r16,ebc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ebc8>
    ebfc:	da402517 	ldw	r9,148(sp)
    ec00:	e007883a 	mov	r3,fp
    ec04:	8039883a 	mov	fp,r16
    ec08:	1821883a 	mov	r16,r3
    ec0c:	d8c02417 	ldw	r3,144(sp)
    ec10:	1705883a 	add	r2,r2,fp
    ec14:	47000115 	stw	fp,4(r8)
    ec18:	40c00015 	stw	r3,0(r8)
    ec1c:	d8801c15 	stw	r2,112(sp)
    ec20:	d9801b15 	stw	r6,108(sp)
    ec24:	00c001c4 	movi	r3,7
    ec28:	19827616 	blt	r3,r6,f604 <___vfiprintf_internal_r+0xfbc>
    ec2c:	4cf9c83a 	sub	fp,r9,r19
    ec30:	42000204 	addi	r8,r8,8
    ec34:	31000044 	addi	r4,r6,1
    ec38:	300b883a 	mov	r5,r6
    ec3c:	07018516 	blt	zero,fp,f254 <___vfiprintf_internal_r+0xc0c>
    ec40:	9885883a 	add	r2,r19,r2
    ec44:	45400015 	stw	r21,0(r8)
    ec48:	44c00115 	stw	r19,4(r8)
    ec4c:	d8801c15 	stw	r2,112(sp)
    ec50:	d9001b15 	stw	r4,108(sp)
    ec54:	00c001c4 	movi	r3,7
    ec58:	1901dd0e 	bge	r3,r4,f3d0 <___vfiprintf_internal_r+0xd88>
    ec5c:	1002401e 	bne	r2,zero,f560 <___vfiprintf_internal_r+0xf18>
    ec60:	d8001b15 	stw	zero,108(sp)
    ec64:	a2c0010c 	andi	r11,r20,4
    ec68:	58000226 	beq	r11,zero,ec74 <___vfiprintf_internal_r+0x62c>
    ec6c:	8ca7c83a 	sub	r19,r17,r18
    ec70:	04c2f216 	blt	zero,r19,f83c <___vfiprintf_internal_r+0x11f4>
    ec74:	8c80010e 	bge	r17,r18,ec7c <___vfiprintf_internal_r+0x634>
    ec78:	9023883a 	mov	r17,r18
    ec7c:	da802317 	ldw	r10,140(sp)
    ec80:	5455883a 	add	r10,r10,r17
    ec84:	da802315 	stw	r10,140(sp)
    ec88:	d8001b15 	stw	zero,108(sp)
    ec8c:	d811883a 	mov	r8,sp
    ec90:	003ea206 	br	e71c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e71c>
    ec94:	a5000814 	ori	r20,r20,32
    ec98:	80c00007 	ldb	r3,0(r16)
    ec9c:	003ec906 	br	e7c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e7c4>
    eca0:	80c00007 	ldb	r3,0(r16)
    eca4:	1b030926 	beq	r3,r12,f8cc <___vfiprintf_internal_r+0x1284>
    eca8:	a5000414 	ori	r20,r20,16
    ecac:	003ec506 	br	e7c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e7c4>
    ecb0:	21003fcc 	andi	r4,r4,255
    ecb4:	20035e1e 	bne	r4,zero,fa30 <___vfiprintf_internal_r+0x13e8>
    ecb8:	a080080c 	andi	r2,r20,32
    ecbc:	1002a526 	beq	r2,zero,f754 <___vfiprintf_internal_r+0x110c>
    ecc0:	da802217 	ldw	r10,136(sp)
    ecc4:	50800017 	ldw	r2,0(r10)
    ecc8:	da802317 	ldw	r10,140(sp)
    eccc:	5007d7fa 	srai	r3,r10,31
    ecd0:	da802217 	ldw	r10,136(sp)
    ecd4:	10c00115 	stw	r3,4(r2)
    ecd8:	52800104 	addi	r10,r10,4
    ecdc:	da802215 	stw	r10,136(sp)
    ece0:	da802317 	ldw	r10,140(sp)
    ece4:	12800015 	stw	r10,0(r2)
    ece8:	003e8c06 	br	e71c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e71c>
    ecec:	21003fcc 	andi	r4,r4,255
    ecf0:	2003511e 	bne	r4,zero,fa38 <___vfiprintf_internal_r+0x13f0>
    ecf4:	a080080c 	andi	r2,r20,32
    ecf8:	1000a126 	beq	r2,zero,ef80 <___vfiprintf_internal_r+0x938>
    ecfc:	da802217 	ldw	r10,136(sp)
    ed00:	d8001d85 	stb	zero,118(sp)
    ed04:	50800204 	addi	r2,r10,8
    ed08:	54800017 	ldw	r18,0(r10)
    ed0c:	54c00117 	ldw	r19,4(r10)
    ed10:	4802b416 	blt	r9,zero,f7e4 <___vfiprintf_internal_r+0x119c>
    ed14:	013fdfc4 	movi	r4,-129
    ed18:	94c6b03a 	or	r3,r18,r19
    ed1c:	d8802215 	stw	r2,136(sp)
    ed20:	a128703a 	and	r20,r20,r4
    ed24:	1800a226 	beq	r3,zero,efb0 <___vfiprintf_internal_r+0x968>
    ed28:	0039883a 	mov	fp,zero
    ed2c:	dd401a04 	addi	r21,sp,104
    ed30:	9006d0fa 	srli	r3,r18,3
    ed34:	9808977a 	slli	r4,r19,29
    ed38:	9826d0fa 	srli	r19,r19,3
    ed3c:	948001cc 	andi	r18,r18,7
    ed40:	90800c04 	addi	r2,r18,48
    ed44:	ad7fffc4 	addi	r21,r21,-1
    ed48:	20e4b03a 	or	r18,r4,r3
    ed4c:	a8800005 	stb	r2,0(r21)
    ed50:	94c6b03a 	or	r3,r18,r19
    ed54:	183ff61e 	bne	r3,zero,ed30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ed30>
    ed58:	a0c0004c 	andi	r3,r20,1
    ed5c:	18005926 	beq	r3,zero,eec4 <___vfiprintf_internal_r+0x87c>
    ed60:	10803fcc 	andi	r2,r2,255
    ed64:	1080201c 	xori	r2,r2,128
    ed68:	10bfe004 	addi	r2,r2,-128
    ed6c:	00c00c04 	movi	r3,48
    ed70:	10c05426 	beq	r2,r3,eec4 <___vfiprintf_internal_r+0x87c>
    ed74:	da801e17 	ldw	r10,120(sp)
    ed78:	a8bfffc4 	addi	r2,r21,-1
    ed7c:	a8ffffc5 	stb	r3,-1(r21)
    ed80:	50a7c83a 	sub	r19,r10,r2
    ed84:	102b883a 	mov	r21,r2
    ed88:	003f2f06 	br	ea48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea48>
    ed8c:	21003fcc 	andi	r4,r4,255
    ed90:	2003421e 	bne	r4,zero,fa9c <___vfiprintf_internal_r+0x1454>
    ed94:	008000b4 	movhi	r2,2
    ed98:	10bff904 	addi	r2,r2,-28
    ed9c:	d8802615 	stw	r2,152(sp)
    eda0:	a080080c 	andi	r2,r20,32
    eda4:	1000aa26 	beq	r2,zero,f050 <___vfiprintf_internal_r+0xa08>
    eda8:	da802217 	ldw	r10,136(sp)
    edac:	54800017 	ldw	r18,0(r10)
    edb0:	54c00117 	ldw	r19,4(r10)
    edb4:	52800204 	addi	r10,r10,8
    edb8:	da802215 	stw	r10,136(sp)
    edbc:	a080004c 	andi	r2,r20,1
    edc0:	1001d226 	beq	r2,zero,f50c <___vfiprintf_internal_r+0xec4>
    edc4:	94c4b03a 	or	r2,r18,r19
    edc8:	1002351e 	bne	r2,zero,f6a0 <___vfiprintf_internal_r+0x1058>
    edcc:	d8001d85 	stb	zero,118(sp)
    edd0:	48022216 	blt	r9,zero,f65c <___vfiprintf_internal_r+0x1014>
    edd4:	00bfdfc4 	movi	r2,-129
    edd8:	a0a8703a 	and	r20,r20,r2
    eddc:	003f1506 	br	ea34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea34>
    ede0:	da802217 	ldw	r10,136(sp)
    ede4:	04800044 	movi	r18,1
    ede8:	d8001d85 	stb	zero,118(sp)
    edec:	50800017 	ldw	r2,0(r10)
    edf0:	52800104 	addi	r10,r10,4
    edf4:	da802215 	stw	r10,136(sp)
    edf8:	d8801005 	stb	r2,64(sp)
    edfc:	9027883a 	mov	r19,r18
    ee00:	dd401004 	addi	r21,sp,64
    ee04:	0013883a 	mov	r9,zero
    ee08:	003f1706 	br	ea68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea68>
    ee0c:	21003fcc 	andi	r4,r4,255
    ee10:	2003201e 	bne	r4,zero,fa94 <___vfiprintf_internal_r+0x144c>
    ee14:	a080080c 	andi	r2,r20,32
    ee18:	10004b26 	beq	r2,zero,ef48 <___vfiprintf_internal_r+0x900>
    ee1c:	da802217 	ldw	r10,136(sp)
    ee20:	50800117 	ldw	r2,4(r10)
    ee24:	54800017 	ldw	r18,0(r10)
    ee28:	52800204 	addi	r10,r10,8
    ee2c:	da802215 	stw	r10,136(sp)
    ee30:	1027883a 	mov	r19,r2
    ee34:	10022c16 	blt	r2,zero,f6e8 <___vfiprintf_internal_r+0x10a0>
    ee38:	df001d83 	ldbu	fp,118(sp)
    ee3c:	48007216 	blt	r9,zero,f008 <___vfiprintf_internal_r+0x9c0>
    ee40:	00ffdfc4 	movi	r3,-129
    ee44:	94c4b03a 	or	r2,r18,r19
    ee48:	a0e8703a 	and	r20,r20,r3
    ee4c:	1000cc26 	beq	r2,zero,f180 <___vfiprintf_internal_r+0xb38>
    ee50:	98021026 	beq	r19,zero,f694 <___vfiprintf_internal_r+0x104c>
    ee54:	dc402415 	stw	r17,144(sp)
    ee58:	dc002515 	stw	r16,148(sp)
    ee5c:	9823883a 	mov	r17,r19
    ee60:	9021883a 	mov	r16,r18
    ee64:	dd401a04 	addi	r21,sp,104
    ee68:	4825883a 	mov	r18,r9
    ee6c:	4027883a 	mov	r19,r8
    ee70:	8009883a 	mov	r4,r16
    ee74:	880b883a 	mov	r5,r17
    ee78:	01800284 	movi	r6,10
    ee7c:	000f883a 	mov	r7,zero
    ee80:	0010a280 	call	10a28 <__umoddi3>
    ee84:	10800c04 	addi	r2,r2,48
    ee88:	ad7fffc4 	addi	r21,r21,-1
    ee8c:	8009883a 	mov	r4,r16
    ee90:	880b883a 	mov	r5,r17
    ee94:	a8800005 	stb	r2,0(r21)
    ee98:	01800284 	movi	r6,10
    ee9c:	000f883a 	mov	r7,zero
    eea0:	00104b00 	call	104b0 <__udivdi3>
    eea4:	1021883a 	mov	r16,r2
    eea8:	10c4b03a 	or	r2,r2,r3
    eeac:	1823883a 	mov	r17,r3
    eeb0:	103fef1e 	bne	r2,zero,ee70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ee70>
    eeb4:	dc402417 	ldw	r17,144(sp)
    eeb8:	dc002517 	ldw	r16,148(sp)
    eebc:	9013883a 	mov	r9,r18
    eec0:	9811883a 	mov	r8,r19
    eec4:	da801e17 	ldw	r10,120(sp)
    eec8:	5567c83a 	sub	r19,r10,r21
    eecc:	003ede06 	br	ea48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea48>
    eed0:	38803fcc 	andi	r2,r7,255
    eed4:	1080201c 	xori	r2,r2,128
    eed8:	10bfe004 	addi	r2,r2,-128
    eedc:	1002371e 	bne	r2,zero,f7bc <___vfiprintf_internal_r+0x1174>
    eee0:	01000044 	movi	r4,1
    eee4:	01c00804 	movi	r7,32
    eee8:	80c00007 	ldb	r3,0(r16)
    eeec:	003e3506 	br	e7c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e7c4>
    eef0:	a5000054 	ori	r20,r20,1
    eef4:	80c00007 	ldb	r3,0(r16)
    eef8:	003e3206 	br	e7c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e7c4>
    eefc:	a5002014 	ori	r20,r20,128
    ef00:	80c00007 	ldb	r3,0(r16)
    ef04:	003e2f06 	br	e7c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e7c4>
    ef08:	8015883a 	mov	r10,r16
    ef0c:	0023883a 	mov	r17,zero
    ef10:	18bff404 	addi	r2,r3,-48
    ef14:	50c00007 	ldb	r3,0(r10)
    ef18:	8c4002a4 	muli	r17,r17,10
    ef1c:	84000044 	addi	r16,r16,1
    ef20:	8015883a 	mov	r10,r16
    ef24:	1463883a 	add	r17,r2,r17
    ef28:	18bff404 	addi	r2,r3,-48
    ef2c:	30bff92e 	bgeu	r6,r2,ef14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ef14>
    ef30:	003e2506 	br	e7c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e7c8>
    ef34:	21003fcc 	andi	r4,r4,255
    ef38:	2002d41e 	bne	r4,zero,fa8c <___vfiprintf_internal_r+0x1444>
    ef3c:	a5000414 	ori	r20,r20,16
    ef40:	a080080c 	andi	r2,r20,32
    ef44:	103fb51e 	bne	r2,zero,ee1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ee1c>
    ef48:	a080040c 	andi	r2,r20,16
    ef4c:	1001f826 	beq	r2,zero,f730 <___vfiprintf_internal_r+0x10e8>
    ef50:	da802217 	ldw	r10,136(sp)
    ef54:	54800017 	ldw	r18,0(r10)
    ef58:	52800104 	addi	r10,r10,4
    ef5c:	da802215 	stw	r10,136(sp)
    ef60:	9027d7fa 	srai	r19,r18,31
    ef64:	9805883a 	mov	r2,r19
    ef68:	003fb206 	br	ee34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ee34>
    ef6c:	21003fcc 	andi	r4,r4,255
    ef70:	2002c41e 	bne	r4,zero,fa84 <___vfiprintf_internal_r+0x143c>
    ef74:	a5000414 	ori	r20,r20,16
    ef78:	a080080c 	andi	r2,r20,32
    ef7c:	103f5f1e 	bne	r2,zero,ecfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ecfc>
    ef80:	a080040c 	andi	r2,r20,16
    ef84:	10020f26 	beq	r2,zero,f7c4 <___vfiprintf_internal_r+0x117c>
    ef88:	da802217 	ldw	r10,136(sp)
    ef8c:	d8001d85 	stb	zero,118(sp)
    ef90:	0027883a 	mov	r19,zero
    ef94:	50800104 	addi	r2,r10,4
    ef98:	54800017 	ldw	r18,0(r10)
    ef9c:	48021116 	blt	r9,zero,f7e4 <___vfiprintf_internal_r+0x119c>
    efa0:	00ffdfc4 	movi	r3,-129
    efa4:	d8802215 	stw	r2,136(sp)
    efa8:	a0e8703a 	and	r20,r20,r3
    efac:	903f5e1e 	bne	r18,zero,ed28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ed28>
    efb0:	0039883a 	mov	fp,zero
    efb4:	4802a626 	beq	r9,zero,fa50 <___vfiprintf_internal_r+0x1408>
    efb8:	0025883a 	mov	r18,zero
    efbc:	0027883a 	mov	r19,zero
    efc0:	003f5a06 	br	ed2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ed2c>
    efc4:	21003fcc 	andi	r4,r4,255
    efc8:	20029f1e 	bne	r4,zero,fa48 <___vfiprintf_internal_r+0x1400>
    efcc:	a5000414 	ori	r20,r20,16
    efd0:	a080080c 	andi	r2,r20,32
    efd4:	10005e1e 	bne	r2,zero,f150 <___vfiprintf_internal_r+0xb08>
    efd8:	a080040c 	andi	r2,r20,16
    efdc:	1001a21e 	bne	r2,zero,f668 <___vfiprintf_internal_r+0x1020>
    efe0:	a080100c 	andi	r2,r20,64
    efe4:	d8001d85 	stb	zero,118(sp)
    efe8:	da802217 	ldw	r10,136(sp)
    efec:	1002231e 	bne	r2,zero,f87c <___vfiprintf_internal_r+0x1234>
    eff0:	50800104 	addi	r2,r10,4
    eff4:	54800017 	ldw	r18,0(r10)
    eff8:	0027883a 	mov	r19,zero
    effc:	4801a00e 	bge	r9,zero,f680 <___vfiprintf_internal_r+0x1038>
    f000:	d8802215 	stw	r2,136(sp)
    f004:	0039883a 	mov	fp,zero
    f008:	94c4b03a 	or	r2,r18,r19
    f00c:	103f901e 	bne	r2,zero,ee50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ee50>
    f010:	00800044 	movi	r2,1
    f014:	10803fcc 	andi	r2,r2,255
    f018:	00c00044 	movi	r3,1
    f01c:	10c05926 	beq	r2,r3,f184 <___vfiprintf_internal_r+0xb3c>
    f020:	00c00084 	movi	r3,2
    f024:	10ffe41e 	bne	r2,r3,efb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700efb8>
    f028:	0025883a 	mov	r18,zero
    f02c:	0027883a 	mov	r19,zero
    f030:	00013d06 	br	f528 <___vfiprintf_internal_r+0xee0>
    f034:	21003fcc 	andi	r4,r4,255
    f038:	2002811e 	bne	r4,zero,fa40 <___vfiprintf_internal_r+0x13f8>
    f03c:	008000b4 	movhi	r2,2
    f040:	10bff404 	addi	r2,r2,-48
    f044:	d8802615 	stw	r2,152(sp)
    f048:	a080080c 	andi	r2,r20,32
    f04c:	103f561e 	bne	r2,zero,eda8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eda8>
    f050:	a080040c 	andi	r2,r20,16
    f054:	1001d126 	beq	r2,zero,f79c <___vfiprintf_internal_r+0x1154>
    f058:	da802217 	ldw	r10,136(sp)
    f05c:	0027883a 	mov	r19,zero
    f060:	54800017 	ldw	r18,0(r10)
    f064:	52800104 	addi	r10,r10,4
    f068:	da802215 	stw	r10,136(sp)
    f06c:	003f5306 	br	edbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700edbc>
    f070:	da802217 	ldw	r10,136(sp)
    f074:	d8001d85 	stb	zero,118(sp)
    f078:	55400017 	ldw	r21,0(r10)
    f07c:	50c00104 	addi	r3,r10,4
    f080:	a8024226 	beq	r21,zero,f98c <___vfiprintf_internal_r+0x1344>
    f084:	48021816 	blt	r9,zero,f8e8 <___vfiprintf_internal_r+0x12a0>
    f088:	480d883a 	mov	r6,r9
    f08c:	000b883a 	mov	r5,zero
    f090:	a809883a 	mov	r4,r21
    f094:	d8c02a15 	stw	r3,168(sp)
    f098:	da002b15 	stw	r8,172(sp)
    f09c:	da402c15 	stw	r9,176(sp)
    f0a0:	000cbe40 	call	cbe4 <memchr>
    f0a4:	d8c02a17 	ldw	r3,168(sp)
    f0a8:	da002b17 	ldw	r8,172(sp)
    f0ac:	da402c17 	ldw	r9,176(sp)
    f0b0:	10024826 	beq	r2,zero,f9d4 <___vfiprintf_internal_r+0x138c>
    f0b4:	1567c83a 	sub	r19,r2,r21
    f0b8:	df001d83 	ldbu	fp,118(sp)
    f0bc:	d8c02215 	stw	r3,136(sp)
    f0c0:	0013883a 	mov	r9,zero
    f0c4:	003e6006 	br	ea48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea48>
    f0c8:	21003fcc 	andi	r4,r4,255
    f0cc:	203fc026 	beq	r4,zero,efd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700efd0>
    f0d0:	d9c01d85 	stb	r7,118(sp)
    f0d4:	003fbe06 	br	efd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700efd0>
    f0d8:	da802217 	ldw	r10,136(sp)
    f0dc:	54400017 	ldw	r17,0(r10)
    f0e0:	50800104 	addi	r2,r10,4
    f0e4:	883e3b16 	blt	r17,zero,e9d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e9d4>
    f0e8:	d8802215 	stw	r2,136(sp)
    f0ec:	80c00007 	ldb	r3,0(r16)
    f0f0:	003db406 	br	e7c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e7c4>
    f0f4:	01000044 	movi	r4,1
    f0f8:	01c00ac4 	movi	r7,43
    f0fc:	80c00007 	ldb	r3,0(r16)
    f100:	003db006 	br	e7c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e7c4>
    f104:	80c00007 	ldb	r3,0(r16)
    f108:	82800044 	addi	r10,r16,1
    f10c:	1b423c26 	beq	r3,r13,fa00 <___vfiprintf_internal_r+0x13b8>
    f110:	18bff404 	addi	r2,r3,-48
    f114:	0013883a 	mov	r9,zero
    f118:	30822b36 	bltu	r6,r2,f9c8 <___vfiprintf_internal_r+0x1380>
    f11c:	50c00007 	ldb	r3,0(r10)
    f120:	4a4002a4 	muli	r9,r9,10
    f124:	54000044 	addi	r16,r10,1
    f128:	8015883a 	mov	r10,r16
    f12c:	4893883a 	add	r9,r9,r2
    f130:	18bff404 	addi	r2,r3,-48
    f134:	30bff92e 	bgeu	r6,r2,f11c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f11c>
    f138:	483da30e 	bge	r9,zero,e7c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e7c8>
    f13c:	027fffc4 	movi	r9,-1
    f140:	003da106 	br	e7c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e7c8>
    f144:	a5001014 	ori	r20,r20,64
    f148:	80c00007 	ldb	r3,0(r16)
    f14c:	003d9d06 	br	e7c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e7c4>
    f150:	da802217 	ldw	r10,136(sp)
    f154:	d8001d85 	stb	zero,118(sp)
    f158:	50c00204 	addi	r3,r10,8
    f15c:	54800017 	ldw	r18,0(r10)
    f160:	54c00117 	ldw	r19,4(r10)
    f164:	4801ca16 	blt	r9,zero,f890 <___vfiprintf_internal_r+0x1248>
    f168:	013fdfc4 	movi	r4,-129
    f16c:	94c4b03a 	or	r2,r18,r19
    f170:	d8c02215 	stw	r3,136(sp)
    f174:	a128703a 	and	r20,r20,r4
    f178:	0039883a 	mov	fp,zero
    f17c:	103f341e 	bne	r2,zero,ee50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ee50>
    f180:	483e2e26 	beq	r9,zero,ea3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea3c>
    f184:	0025883a 	mov	r18,zero
    f188:	94800c04 	addi	r18,r18,48
    f18c:	dc8019c5 	stb	r18,103(sp)
    f190:	dcc02717 	ldw	r19,156(sp)
    f194:	dd4019c4 	addi	r21,sp,103
    f198:	003e2b06 	br	ea48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea48>
    f19c:	21003fcc 	andi	r4,r4,255
    f1a0:	2002361e 	bne	r4,zero,fa7c <___vfiprintf_internal_r+0x1434>
    f1a4:	1801c126 	beq	r3,zero,f8ac <___vfiprintf_internal_r+0x1264>
    f1a8:	04800044 	movi	r18,1
    f1ac:	d8c01005 	stb	r3,64(sp)
    f1b0:	d8001d85 	stb	zero,118(sp)
    f1b4:	9027883a 	mov	r19,r18
    f1b8:	dd401004 	addi	r21,sp,64
    f1bc:	003f1106 	br	ee04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ee04>
    f1c0:	d9402117 	ldw	r5,132(sp)
    f1c4:	d9002017 	ldw	r4,128(sp)
    f1c8:	d9801a04 	addi	r6,sp,104
    f1cc:	d9c02b15 	stw	r7,172(sp)
    f1d0:	dbc02a15 	stw	r15,168(sp)
    f1d4:	000e5340 	call	e534 <__sprint_r.part.0>
    f1d8:	d9c02b17 	ldw	r7,172(sp)
    f1dc:	dbc02a17 	ldw	r15,168(sp)
    f1e0:	10006d1e 	bne	r2,zero,f398 <___vfiprintf_internal_r+0xd50>
    f1e4:	d9801b17 	ldw	r6,108(sp)
    f1e8:	d8801c17 	ldw	r2,112(sp)
    f1ec:	d811883a 	mov	r8,sp
    f1f0:	31400044 	addi	r5,r6,1
    f1f4:	003e3306 	br	eac4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eac4>
    f1f8:	d9401b17 	ldw	r5,108(sp)
    f1fc:	d8801c17 	ldw	r2,112(sp)
    f200:	29000044 	addi	r4,r5,1
    f204:	d8c01d87 	ldb	r3,118(sp)
    f208:	183e4d26 	beq	r3,zero,eb40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eb40>
    f20c:	00c00044 	movi	r3,1
    f210:	d9401d84 	addi	r5,sp,118
    f214:	10c5883a 	add	r2,r2,r3
    f218:	41400015 	stw	r5,0(r8)
    f21c:	40c00115 	stw	r3,4(r8)
    f220:	d8801c15 	stw	r2,112(sp)
    f224:	d9001b15 	stw	r4,108(sp)
    f228:	014001c4 	movi	r5,7
    f22c:	2900a90e 	bge	r5,r4,f4d4 <___vfiprintf_internal_r+0xe8c>
    f230:	1000da1e 	bne	r2,zero,f59c <___vfiprintf_internal_r+0xf54>
    f234:	7000ab1e 	bne	r14,zero,f4e4 <___vfiprintf_internal_r+0xe9c>
    f238:	000b883a 	mov	r5,zero
    f23c:	1809883a 	mov	r4,r3
    f240:	d811883a 	mov	r8,sp
    f244:	00c02004 	movi	r3,128
    f248:	e0fe4d26 	beq	fp,r3,eb80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eb80>
    f24c:	4cf9c83a 	sub	fp,r9,r19
    f250:	073e7b0e 	bge	zero,fp,ec40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ec40>
    f254:	01c00404 	movi	r7,16
    f258:	3f01900e 	bge	r7,fp,f89c <___vfiprintf_internal_r+0x1254>
    f25c:	00c000b4 	movhi	r3,2
    f260:	18c05a04 	addi	r3,r3,360
    f264:	d8c02415 	stw	r3,144(sp)
    f268:	034001c4 	movi	r13,7
    f26c:	00000506 	br	f284 <___vfiprintf_internal_r+0xc3c>
    f270:	29000084 	addi	r4,r5,2
    f274:	42000204 	addi	r8,r8,8
    f278:	180b883a 	mov	r5,r3
    f27c:	e73ffc04 	addi	fp,fp,-16
    f280:	3f000d0e 	bge	r7,fp,f2b8 <___vfiprintf_internal_r+0xc70>
    f284:	10800404 	addi	r2,r2,16
    f288:	28c00044 	addi	r3,r5,1
    f28c:	45c00015 	stw	r23,0(r8)
    f290:	41c00115 	stw	r7,4(r8)
    f294:	d8801c15 	stw	r2,112(sp)
    f298:	d8c01b15 	stw	r3,108(sp)
    f29c:	68fff40e 	bge	r13,r3,f270 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f270>
    f2a0:	1000101e 	bne	r2,zero,f2e4 <___vfiprintf_internal_r+0xc9c>
    f2a4:	e73ffc04 	addi	fp,fp,-16
    f2a8:	01000044 	movi	r4,1
    f2ac:	000b883a 	mov	r5,zero
    f2b0:	d811883a 	mov	r8,sp
    f2b4:	3f3ff316 	blt	r7,fp,f284 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f284>
    f2b8:	da802417 	ldw	r10,144(sp)
    f2bc:	1705883a 	add	r2,r2,fp
    f2c0:	47000115 	stw	fp,4(r8)
    f2c4:	42800015 	stw	r10,0(r8)
    f2c8:	d8801c15 	stw	r2,112(sp)
    f2cc:	d9001b15 	stw	r4,108(sp)
    f2d0:	00c001c4 	movi	r3,7
    f2d4:	19003616 	blt	r3,r4,f3b0 <___vfiprintf_internal_r+0xd68>
    f2d8:	42000204 	addi	r8,r8,8
    f2dc:	21000044 	addi	r4,r4,1
    f2e0:	003e5706 	br	ec40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ec40>
    f2e4:	d9402117 	ldw	r5,132(sp)
    f2e8:	d9002017 	ldw	r4,128(sp)
    f2ec:	d9801a04 	addi	r6,sp,104
    f2f0:	d9c02b15 	stw	r7,172(sp)
    f2f4:	db402a15 	stw	r13,168(sp)
    f2f8:	000e5340 	call	e534 <__sprint_r.part.0>
    f2fc:	d9c02b17 	ldw	r7,172(sp)
    f300:	db402a17 	ldw	r13,168(sp)
    f304:	1000241e 	bne	r2,zero,f398 <___vfiprintf_internal_r+0xd50>
    f308:	d9401b17 	ldw	r5,108(sp)
    f30c:	d8801c17 	ldw	r2,112(sp)
    f310:	d811883a 	mov	r8,sp
    f314:	29000044 	addi	r4,r5,1
    f318:	003fd806 	br	f27c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f27c>
    f31c:	d9401b17 	ldw	r5,108(sp)
    f320:	00c000b4 	movhi	r3,2
    f324:	18c05e04 	addi	r3,r3,376
    f328:	d8c02415 	stw	r3,144(sp)
    f32c:	29400044 	addi	r5,r5,1
    f330:	d8c02417 	ldw	r3,144(sp)
    f334:	14c5883a 	add	r2,r2,r19
    f338:	44c00115 	stw	r19,4(r8)
    f33c:	40c00015 	stw	r3,0(r8)
    f340:	d8801c15 	stw	r2,112(sp)
    f344:	d9401b15 	stw	r5,108(sp)
    f348:	00c001c4 	movi	r3,7
    f34c:	1940070e 	bge	r3,r5,f36c <___vfiprintf_internal_r+0xd24>
    f350:	103e4826 	beq	r2,zero,ec74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ec74>
    f354:	d9402117 	ldw	r5,132(sp)
    f358:	d9002017 	ldw	r4,128(sp)
    f35c:	d9801a04 	addi	r6,sp,104
    f360:	000e5340 	call	e534 <__sprint_r.part.0>
    f364:	10000c1e 	bne	r2,zero,f398 <___vfiprintf_internal_r+0xd50>
    f368:	d8801c17 	ldw	r2,112(sp)
    f36c:	8c80010e 	bge	r17,r18,f374 <___vfiprintf_internal_r+0xd2c>
    f370:	9023883a 	mov	r17,r18
    f374:	da802317 	ldw	r10,140(sp)
    f378:	5455883a 	add	r10,r10,r17
    f37c:	da802315 	stw	r10,140(sp)
    f380:	103e4126 	beq	r2,zero,ec88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ec88>
    f384:	d9402117 	ldw	r5,132(sp)
    f388:	d9002017 	ldw	r4,128(sp)
    f38c:	d9801a04 	addi	r6,sp,104
    f390:	000e5340 	call	e534 <__sprint_r.part.0>
    f394:	103e3c26 	beq	r2,zero,ec88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ec88>
    f398:	dd002117 	ldw	r20,132(sp)
    f39c:	a080030b 	ldhu	r2,12(r20)
    f3a0:	1080100c 	andi	r2,r2,64
    f3a4:	1001231e 	bne	r2,zero,f834 <___vfiprintf_internal_r+0x11ec>
    f3a8:	d8802317 	ldw	r2,140(sp)
    f3ac:	003d7b06 	br	e99c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e99c>
    f3b0:	1000991e 	bne	r2,zero,f618 <___vfiprintf_internal_r+0xfd0>
    f3b4:	00c00044 	movi	r3,1
    f3b8:	9805883a 	mov	r2,r19
    f3bc:	dd400015 	stw	r21,0(sp)
    f3c0:	dcc00115 	stw	r19,4(sp)
    f3c4:	dcc01c15 	stw	r19,112(sp)
    f3c8:	d8c01b15 	stw	r3,108(sp)
    f3cc:	d811883a 	mov	r8,sp
    f3d0:	42000204 	addi	r8,r8,8
    f3d4:	a2c0010c 	andi	r11,r20,4
    f3d8:	583fe426 	beq	r11,zero,f36c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f36c>
    f3dc:	8ca7c83a 	sub	r19,r17,r18
    f3e0:	04ffe20e 	bge	zero,r19,f36c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f36c>
    f3e4:	01c00404 	movi	r7,16
    f3e8:	3cffcc0e 	bge	r7,r19,f31c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f31c>
    f3ec:	028000b4 	movhi	r10,2
    f3f0:	52805e04 	addi	r10,r10,376
    f3f4:	d9001b17 	ldw	r4,108(sp)
    f3f8:	da802415 	stw	r10,144(sp)
    f3fc:	382b883a 	mov	r21,r7
    f400:	050001c4 	movi	r20,7
    f404:	df002017 	ldw	fp,128(sp)
    f408:	00000506 	br	f420 <___vfiprintf_internal_r+0xdd8>
    f40c:	21400084 	addi	r5,r4,2
    f410:	42000204 	addi	r8,r8,8
    f414:	1809883a 	mov	r4,r3
    f418:	9cfffc04 	addi	r19,r19,-16
    f41c:	acffc40e 	bge	r21,r19,f330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f330>
    f420:	10800404 	addi	r2,r2,16
    f424:	20c00044 	addi	r3,r4,1
    f428:	45800015 	stw	r22,0(r8)
    f42c:	45400115 	stw	r21,4(r8)
    f430:	d8801c15 	stw	r2,112(sp)
    f434:	d8c01b15 	stw	r3,108(sp)
    f438:	a0fff40e 	bge	r20,r3,f40c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f40c>
    f43c:	1000041e 	bne	r2,zero,f450 <___vfiprintf_internal_r+0xe08>
    f440:	01400044 	movi	r5,1
    f444:	0009883a 	mov	r4,zero
    f448:	d811883a 	mov	r8,sp
    f44c:	003ff206 	br	f418 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f418>
    f450:	d9402117 	ldw	r5,132(sp)
    f454:	d9801a04 	addi	r6,sp,104
    f458:	e009883a 	mov	r4,fp
    f45c:	000e5340 	call	e534 <__sprint_r.part.0>
    f460:	103fcd1e 	bne	r2,zero,f398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f398>
    f464:	d9001b17 	ldw	r4,108(sp)
    f468:	d8801c17 	ldw	r2,112(sp)
    f46c:	d811883a 	mov	r8,sp
    f470:	21400044 	addi	r5,r4,1
    f474:	003fe806 	br	f418 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f418>
    f478:	d9402117 	ldw	r5,132(sp)
    f47c:	d9002017 	ldw	r4,128(sp)
    f480:	d9801a04 	addi	r6,sp,104
    f484:	d9c02b15 	stw	r7,172(sp)
    f488:	db402a15 	stw	r13,168(sp)
    f48c:	000e5340 	call	e534 <__sprint_r.part.0>
    f490:	d9c02b17 	ldw	r7,172(sp)
    f494:	db402a17 	ldw	r13,168(sp)
    f498:	103fbf1e 	bne	r2,zero,f398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f398>
    f49c:	d9401b17 	ldw	r5,108(sp)
    f4a0:	d8801c17 	ldw	r2,112(sp)
    f4a4:	d811883a 	mov	r8,sp
    f4a8:	29800044 	addi	r6,r5,1
    f4ac:	003dc406 	br	ebc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ebc0>
    f4b0:	1000d21e 	bne	r2,zero,f7fc <___vfiprintf_internal_r+0x11b4>
    f4b4:	d8c01d87 	ldb	r3,118(sp)
    f4b8:	18009526 	beq	r3,zero,f710 <___vfiprintf_internal_r+0x10c8>
    f4bc:	00800044 	movi	r2,1
    f4c0:	d8c01d84 	addi	r3,sp,118
    f4c4:	1009883a 	mov	r4,r2
    f4c8:	d8c00015 	stw	r3,0(sp)
    f4cc:	d8800115 	stw	r2,4(sp)
    f4d0:	d811883a 	mov	r8,sp
    f4d4:	200b883a 	mov	r5,r4
    f4d8:	42000204 	addi	r8,r8,8
    f4dc:	21000044 	addi	r4,r4,1
    f4e0:	003d9706 	br	eb40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eb40>
    f4e4:	d9001d04 	addi	r4,sp,116
    f4e8:	00800084 	movi	r2,2
    f4ec:	d9000015 	stw	r4,0(sp)
    f4f0:	d8800115 	stw	r2,4(sp)
    f4f4:	1809883a 	mov	r4,r3
    f4f8:	d811883a 	mov	r8,sp
    f4fc:	200b883a 	mov	r5,r4
    f500:	42000204 	addi	r8,r8,8
    f504:	21000044 	addi	r4,r4,1
    f508:	003f4e06 	br	f244 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f244>
    f50c:	d8001d85 	stb	zero,118(sp)
    f510:	48005016 	blt	r9,zero,f654 <___vfiprintf_internal_r+0x100c>
    f514:	00ffdfc4 	movi	r3,-129
    f518:	94c4b03a 	or	r2,r18,r19
    f51c:	a0e8703a 	and	r20,r20,r3
    f520:	103d4426 	beq	r2,zero,ea34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea34>
    f524:	0039883a 	mov	fp,zero
    f528:	d9002617 	ldw	r4,152(sp)
    f52c:	dd401a04 	addi	r21,sp,104
    f530:	908003cc 	andi	r2,r18,15
    f534:	9806973a 	slli	r3,r19,28
    f538:	2085883a 	add	r2,r4,r2
    f53c:	9024d13a 	srli	r18,r18,4
    f540:	10800003 	ldbu	r2,0(r2)
    f544:	9826d13a 	srli	r19,r19,4
    f548:	ad7fffc4 	addi	r21,r21,-1
    f54c:	1ca4b03a 	or	r18,r3,r18
    f550:	a8800005 	stb	r2,0(r21)
    f554:	94c4b03a 	or	r2,r18,r19
    f558:	103ff51e 	bne	r2,zero,f530 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f530>
    f55c:	003e5906 	br	eec4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eec4>
    f560:	d9402117 	ldw	r5,132(sp)
    f564:	d9002017 	ldw	r4,128(sp)
    f568:	d9801a04 	addi	r6,sp,104
    f56c:	000e5340 	call	e534 <__sprint_r.part.0>
    f570:	103f891e 	bne	r2,zero,f398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f398>
    f574:	d8801c17 	ldw	r2,112(sp)
    f578:	d811883a 	mov	r8,sp
    f57c:	003f9506 	br	f3d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f3d4>
    f580:	d9402117 	ldw	r5,132(sp)
    f584:	d9002017 	ldw	r4,128(sp)
    f588:	d9801a04 	addi	r6,sp,104
    f58c:	000e5340 	call	e534 <__sprint_r.part.0>
    f590:	103f811e 	bne	r2,zero,f398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f398>
    f594:	d811883a 	mov	r8,sp
    f598:	003ced06 	br	e950 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e950>
    f59c:	d9402117 	ldw	r5,132(sp)
    f5a0:	d9002017 	ldw	r4,128(sp)
    f5a4:	d9801a04 	addi	r6,sp,104
    f5a8:	da402c15 	stw	r9,176(sp)
    f5ac:	db802a15 	stw	r14,168(sp)
    f5b0:	000e5340 	call	e534 <__sprint_r.part.0>
    f5b4:	da402c17 	ldw	r9,176(sp)
    f5b8:	db802a17 	ldw	r14,168(sp)
    f5bc:	103f761e 	bne	r2,zero,f398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f398>
    f5c0:	d9401b17 	ldw	r5,108(sp)
    f5c4:	d8801c17 	ldw	r2,112(sp)
    f5c8:	d811883a 	mov	r8,sp
    f5cc:	29000044 	addi	r4,r5,1
    f5d0:	003d5b06 	br	eb40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eb40>
    f5d4:	d9402117 	ldw	r5,132(sp)
    f5d8:	d9002017 	ldw	r4,128(sp)
    f5dc:	d9801a04 	addi	r6,sp,104
    f5e0:	da402c15 	stw	r9,176(sp)
    f5e4:	000e5340 	call	e534 <__sprint_r.part.0>
    f5e8:	da402c17 	ldw	r9,176(sp)
    f5ec:	103f6a1e 	bne	r2,zero,f398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f398>
    f5f0:	d9401b17 	ldw	r5,108(sp)
    f5f4:	d8801c17 	ldw	r2,112(sp)
    f5f8:	d811883a 	mov	r8,sp
    f5fc:	29000044 	addi	r4,r5,1
    f600:	003f1006 	br	f244 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f244>
    f604:	1000c31e 	bne	r2,zero,f914 <___vfiprintf_internal_r+0x12cc>
    f608:	01000044 	movi	r4,1
    f60c:	000b883a 	mov	r5,zero
    f610:	d811883a 	mov	r8,sp
    f614:	003f0d06 	br	f24c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f24c>
    f618:	d9402117 	ldw	r5,132(sp)
    f61c:	d9002017 	ldw	r4,128(sp)
    f620:	d9801a04 	addi	r6,sp,104
    f624:	000e5340 	call	e534 <__sprint_r.part.0>
    f628:	103f5b1e 	bne	r2,zero,f398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f398>
    f62c:	d9001b17 	ldw	r4,108(sp)
    f630:	d8801c17 	ldw	r2,112(sp)
    f634:	d811883a 	mov	r8,sp
    f638:	21000044 	addi	r4,r4,1
    f63c:	003d8006 	br	ec40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ec40>
    f640:	010000b4 	movhi	r4,2
    f644:	213ff904 	addi	r4,r4,-28
    f648:	d9002615 	stw	r4,152(sp)
    f64c:	d8c02215 	stw	r3,136(sp)
    f650:	1029883a 	mov	r20,r2
    f654:	94c4b03a 	or	r2,r18,r19
    f658:	103fb21e 	bne	r2,zero,f524 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f524>
    f65c:	0039883a 	mov	fp,zero
    f660:	00800084 	movi	r2,2
    f664:	003e6b06 	br	f014 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f014>
    f668:	da802217 	ldw	r10,136(sp)
    f66c:	d8001d85 	stb	zero,118(sp)
    f670:	0027883a 	mov	r19,zero
    f674:	50800104 	addi	r2,r10,4
    f678:	54800017 	ldw	r18,0(r10)
    f67c:	483e6016 	blt	r9,zero,f000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f000>
    f680:	00ffdfc4 	movi	r3,-129
    f684:	d8802215 	stw	r2,136(sp)
    f688:	a0e8703a 	and	r20,r20,r3
    f68c:	0039883a 	mov	fp,zero
    f690:	903ebb26 	beq	r18,zero,f180 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f180>
    f694:	00800244 	movi	r2,9
    f698:	14bdee36 	bltu	r2,r18,ee54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ee54>
    f69c:	003eba06 	br	f188 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f188>
    f6a0:	00800c04 	movi	r2,48
    f6a4:	d8c01d45 	stb	r3,117(sp)
    f6a8:	d8801d05 	stb	r2,116(sp)
    f6ac:	d8001d85 	stb	zero,118(sp)
    f6b0:	a0c00094 	ori	r3,r20,2
    f6b4:	4800a916 	blt	r9,zero,f95c <___vfiprintf_internal_r+0x1314>
    f6b8:	00bfdfc4 	movi	r2,-129
    f6bc:	a096703a 	and	r11,r20,r2
    f6c0:	5d000094 	ori	r20,r11,2
    f6c4:	0039883a 	mov	fp,zero
    f6c8:	003f9706 	br	f528 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f528>
    f6cc:	8025883a 	mov	r18,r16
    f6d0:	003c2e06 	br	e78c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e78c>
    f6d4:	008000b4 	movhi	r2,2
    f6d8:	10bff904 	addi	r2,r2,-28
    f6dc:	0039883a 	mov	fp,zero
    f6e0:	d8802615 	stw	r2,152(sp)
    f6e4:	003f9006 	br	f528 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f528>
    f6e8:	04a5c83a 	sub	r18,zero,r18
    f6ec:	07000b44 	movi	fp,45
    f6f0:	9004c03a 	cmpne	r2,r18,zero
    f6f4:	04e7c83a 	sub	r19,zero,r19
    f6f8:	df001d85 	stb	fp,118(sp)
    f6fc:	98a7c83a 	sub	r19,r19,r2
    f700:	48009f16 	blt	r9,zero,f980 <___vfiprintf_internal_r+0x1338>
    f704:	00bfdfc4 	movi	r2,-129
    f708:	a0a8703a 	and	r20,r20,r2
    f70c:	003dd006 	br	ee50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ee50>
    f710:	70004c26 	beq	r14,zero,f844 <___vfiprintf_internal_r+0x11fc>
    f714:	00800084 	movi	r2,2
    f718:	d8c01d04 	addi	r3,sp,116
    f71c:	d8c00015 	stw	r3,0(sp)
    f720:	d8800115 	stw	r2,4(sp)
    f724:	01000044 	movi	r4,1
    f728:	d811883a 	mov	r8,sp
    f72c:	003f7306 	br	f4fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f4fc>
    f730:	a080100c 	andi	r2,r20,64
    f734:	da802217 	ldw	r10,136(sp)
    f738:	103e0626 	beq	r2,zero,ef54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ef54>
    f73c:	5480000f 	ldh	r18,0(r10)
    f740:	52800104 	addi	r10,r10,4
    f744:	da802215 	stw	r10,136(sp)
    f748:	9027d7fa 	srai	r19,r18,31
    f74c:	9805883a 	mov	r2,r19
    f750:	003db806 	br	ee34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ee34>
    f754:	a080040c 	andi	r2,r20,16
    f758:	1000091e 	bne	r2,zero,f780 <___vfiprintf_internal_r+0x1138>
    f75c:	a2c0100c 	andi	r11,r20,64
    f760:	58000726 	beq	r11,zero,f780 <___vfiprintf_internal_r+0x1138>
    f764:	da802217 	ldw	r10,136(sp)
    f768:	50800017 	ldw	r2,0(r10)
    f76c:	52800104 	addi	r10,r10,4
    f770:	da802215 	stw	r10,136(sp)
    f774:	da802317 	ldw	r10,140(sp)
    f778:	1280000d 	sth	r10,0(r2)
    f77c:	003be706 	br	e71c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e71c>
    f780:	da802217 	ldw	r10,136(sp)
    f784:	50800017 	ldw	r2,0(r10)
    f788:	52800104 	addi	r10,r10,4
    f78c:	da802215 	stw	r10,136(sp)
    f790:	da802317 	ldw	r10,140(sp)
    f794:	12800015 	stw	r10,0(r2)
    f798:	003be006 	br	e71c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e71c>
    f79c:	a080100c 	andi	r2,r20,64
    f7a0:	da802217 	ldw	r10,136(sp)
    f7a4:	10003026 	beq	r2,zero,f868 <___vfiprintf_internal_r+0x1220>
    f7a8:	5480000b 	ldhu	r18,0(r10)
    f7ac:	52800104 	addi	r10,r10,4
    f7b0:	0027883a 	mov	r19,zero
    f7b4:	da802215 	stw	r10,136(sp)
    f7b8:	003d8006 	br	edbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700edbc>
    f7bc:	80c00007 	ldb	r3,0(r16)
    f7c0:	003c0006 	br	e7c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e7c4>
    f7c4:	a080100c 	andi	r2,r20,64
    f7c8:	d8001d85 	stb	zero,118(sp)
    f7cc:	da802217 	ldw	r10,136(sp)
    f7d0:	1000201e 	bne	r2,zero,f854 <___vfiprintf_internal_r+0x120c>
    f7d4:	50800104 	addi	r2,r10,4
    f7d8:	54800017 	ldw	r18,0(r10)
    f7dc:	0027883a 	mov	r19,zero
    f7e0:	483def0e 	bge	r9,zero,efa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700efa0>
    f7e4:	94c6b03a 	or	r3,r18,r19
    f7e8:	d8802215 	stw	r2,136(sp)
    f7ec:	183d4e1e 	bne	r3,zero,ed28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ed28>
    f7f0:	0039883a 	mov	fp,zero
    f7f4:	0005883a 	mov	r2,zero
    f7f8:	003e0606 	br	f014 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f014>
    f7fc:	d9402117 	ldw	r5,132(sp)
    f800:	d9002017 	ldw	r4,128(sp)
    f804:	d9801a04 	addi	r6,sp,104
    f808:	da402c15 	stw	r9,176(sp)
    f80c:	db802a15 	stw	r14,168(sp)
    f810:	000e5340 	call	e534 <__sprint_r.part.0>
    f814:	da402c17 	ldw	r9,176(sp)
    f818:	db802a17 	ldw	r14,168(sp)
    f81c:	103ede1e 	bne	r2,zero,f398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f398>
    f820:	d9401b17 	ldw	r5,108(sp)
    f824:	d8801c17 	ldw	r2,112(sp)
    f828:	d811883a 	mov	r8,sp
    f82c:	29000044 	addi	r4,r5,1
    f830:	003e7406 	br	f204 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f204>
    f834:	00bfffc4 	movi	r2,-1
    f838:	003c5806 	br	e99c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e99c>
    f83c:	d811883a 	mov	r8,sp
    f840:	003ee806 	br	f3e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f3e4>
    f844:	000b883a 	mov	r5,zero
    f848:	01000044 	movi	r4,1
    f84c:	d811883a 	mov	r8,sp
    f850:	003e7c06 	br	f244 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f244>
    f854:	50800104 	addi	r2,r10,4
    f858:	5480000b 	ldhu	r18,0(r10)
    f85c:	0027883a 	mov	r19,zero
    f860:	483dcf0e 	bge	r9,zero,efa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700efa0>
    f864:	003fdf06 	br	f7e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f7e4>
    f868:	54800017 	ldw	r18,0(r10)
    f86c:	52800104 	addi	r10,r10,4
    f870:	0027883a 	mov	r19,zero
    f874:	da802215 	stw	r10,136(sp)
    f878:	003d5006 	br	edbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700edbc>
    f87c:	50800104 	addi	r2,r10,4
    f880:	5480000b 	ldhu	r18,0(r10)
    f884:	0027883a 	mov	r19,zero
    f888:	483f7d0e 	bge	r9,zero,f680 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f680>
    f88c:	003ddc06 	br	f000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f000>
    f890:	d8c02215 	stw	r3,136(sp)
    f894:	0039883a 	mov	fp,zero
    f898:	003ddb06 	br	f008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f008>
    f89c:	028000b4 	movhi	r10,2
    f8a0:	52805a04 	addi	r10,r10,360
    f8a4:	da802415 	stw	r10,144(sp)
    f8a8:	003e8306 	br	f2b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f2b8>
    f8ac:	d8801c17 	ldw	r2,112(sp)
    f8b0:	dd002117 	ldw	r20,132(sp)
    f8b4:	103eb926 	beq	r2,zero,f39c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f39c>
    f8b8:	d9002017 	ldw	r4,128(sp)
    f8bc:	d9801a04 	addi	r6,sp,104
    f8c0:	a00b883a 	mov	r5,r20
    f8c4:	000e5340 	call	e534 <__sprint_r.part.0>
    f8c8:	003eb406 	br	f39c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f39c>
    f8cc:	80c00043 	ldbu	r3,1(r16)
    f8d0:	a5000814 	ori	r20,r20,32
    f8d4:	84000044 	addi	r16,r16,1
    f8d8:	18c03fcc 	andi	r3,r3,255
    f8dc:	18c0201c 	xori	r3,r3,128
    f8e0:	18ffe004 	addi	r3,r3,-128
    f8e4:	003bb706 	br	e7c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e7c4>
    f8e8:	a809883a 	mov	r4,r21
    f8ec:	d8c02a15 	stw	r3,168(sp)
    f8f0:	da002b15 	stw	r8,172(sp)
    f8f4:	0007b480 	call	7b48 <strlen>
    f8f8:	d8c02a17 	ldw	r3,168(sp)
    f8fc:	1027883a 	mov	r19,r2
    f900:	df001d83 	ldbu	fp,118(sp)
    f904:	d8c02215 	stw	r3,136(sp)
    f908:	0013883a 	mov	r9,zero
    f90c:	da002b17 	ldw	r8,172(sp)
    f910:	003c4d06 	br	ea48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea48>
    f914:	d9402117 	ldw	r5,132(sp)
    f918:	d9002017 	ldw	r4,128(sp)
    f91c:	d9801a04 	addi	r6,sp,104
    f920:	da402c15 	stw	r9,176(sp)
    f924:	000e5340 	call	e534 <__sprint_r.part.0>
    f928:	da402c17 	ldw	r9,176(sp)
    f92c:	103e9a1e 	bne	r2,zero,f398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f398>
    f930:	d9401b17 	ldw	r5,108(sp)
    f934:	d8801c17 	ldw	r2,112(sp)
    f938:	d811883a 	mov	r8,sp
    f93c:	29000044 	addi	r4,r5,1
    f940:	003e4206 	br	f24c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f24c>
    f944:	d9401b17 	ldw	r5,108(sp)
    f948:	010000b4 	movhi	r4,2
    f94c:	21005e04 	addi	r4,r4,376
    f950:	d9002415 	stw	r4,144(sp)
    f954:	29400044 	addi	r5,r5,1
    f958:	003c6d06 	br	eb10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eb10>
    f95c:	0039883a 	mov	fp,zero
    f960:	00800084 	movi	r2,2
    f964:	10803fcc 	andi	r2,r2,255
    f968:	01000044 	movi	r4,1
    f96c:	11001e26 	beq	r2,r4,f9e8 <___vfiprintf_internal_r+0x13a0>
    f970:	01000084 	movi	r4,2
    f974:	11001e1e 	bne	r2,r4,f9f0 <___vfiprintf_internal_r+0x13a8>
    f978:	1829883a 	mov	r20,r3
    f97c:	003eea06 	br	f528 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f528>
    f980:	a007883a 	mov	r3,r20
    f984:	00800044 	movi	r2,1
    f988:	003ff606 	br	f964 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f964>
    f98c:	00800184 	movi	r2,6
    f990:	1240012e 	bgeu	r2,r9,f998 <___vfiprintf_internal_r+0x1350>
    f994:	1013883a 	mov	r9,r2
    f998:	4827883a 	mov	r19,r9
    f99c:	4825883a 	mov	r18,r9
    f9a0:	48001516 	blt	r9,zero,f9f8 <___vfiprintf_internal_r+0x13b0>
    f9a4:	054000b4 	movhi	r21,2
    f9a8:	d8c02215 	stw	r3,136(sp)
    f9ac:	ad7ffe04 	addi	r21,r21,-8
    f9b0:	003d1406 	br	ee04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ee04>
    f9b4:	028000b4 	movhi	r10,2
    f9b8:	52805a04 	addi	r10,r10,360
    f9bc:	da802415 	stw	r10,144(sp)
    f9c0:	200d883a 	mov	r6,r4
    f9c4:	003c9106 	br	ec0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ec0c>
    f9c8:	5021883a 	mov	r16,r10
    f9cc:	0013883a 	mov	r9,zero
    f9d0:	003b7d06 	br	e7c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e7c8>
    f9d4:	4827883a 	mov	r19,r9
    f9d8:	df001d83 	ldbu	fp,118(sp)
    f9dc:	d8c02215 	stw	r3,136(sp)
    f9e0:	0013883a 	mov	r9,zero
    f9e4:	003c1806 	br	ea48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea48>
    f9e8:	1829883a 	mov	r20,r3
    f9ec:	003d1806 	br	ee50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ee50>
    f9f0:	1829883a 	mov	r20,r3
    f9f4:	003ccd06 	br	ed2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ed2c>
    f9f8:	0025883a 	mov	r18,zero
    f9fc:	003fe906 	br	f9a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f9a4>
    fa00:	d8802217 	ldw	r2,136(sp)
    fa04:	80c00043 	ldbu	r3,1(r16)
    fa08:	5021883a 	mov	r16,r10
    fa0c:	12400017 	ldw	r9,0(r2)
    fa10:	10800104 	addi	r2,r2,4
    fa14:	d8802215 	stw	r2,136(sp)
    fa18:	483faf0e 	bge	r9,zero,f8d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f8d8>
    fa1c:	18c03fcc 	andi	r3,r3,255
    fa20:	18c0201c 	xori	r3,r3,128
    fa24:	027fffc4 	movi	r9,-1
    fa28:	18ffe004 	addi	r3,r3,-128
    fa2c:	003b6506 	br	e7c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e7c4>
    fa30:	d9c01d85 	stb	r7,118(sp)
    fa34:	003ca006 	br	ecb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ecb8>
    fa38:	d9c01d85 	stb	r7,118(sp)
    fa3c:	003cad06 	br	ecf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ecf4>
    fa40:	d9c01d85 	stb	r7,118(sp)
    fa44:	003d7d06 	br	f03c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f03c>
    fa48:	d9c01d85 	stb	r7,118(sp)
    fa4c:	003d5f06 	br	efcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700efcc>
    fa50:	a080004c 	andi	r2,r20,1
    fa54:	0039883a 	mov	fp,zero
    fa58:	10000526 	beq	r2,zero,fa70 <___vfiprintf_internal_r+0x1428>
    fa5c:	00800c04 	movi	r2,48
    fa60:	d88019c5 	stb	r2,103(sp)
    fa64:	dcc02717 	ldw	r19,156(sp)
    fa68:	dd4019c4 	addi	r21,sp,103
    fa6c:	003bf606 	br	ea48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea48>
    fa70:	0027883a 	mov	r19,zero
    fa74:	dd401a04 	addi	r21,sp,104
    fa78:	003bf306 	br	ea48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea48>
    fa7c:	d9c01d85 	stb	r7,118(sp)
    fa80:	003dc806 	br	f1a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f1a4>
    fa84:	d9c01d85 	stb	r7,118(sp)
    fa88:	003d3a06 	br	ef74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ef74>
    fa8c:	d9c01d85 	stb	r7,118(sp)
    fa90:	003d2a06 	br	ef3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ef3c>
    fa94:	d9c01d85 	stb	r7,118(sp)
    fa98:	003cde06 	br	ee14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ee14>
    fa9c:	d9c01d85 	stb	r7,118(sp)
    faa0:	003cbc06 	br	ed94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ed94>

0000faa4 <__vfiprintf_internal>:
    faa4:	008000b4 	movhi	r2,2
    faa8:	1088e204 	addi	r2,r2,9096
    faac:	300f883a 	mov	r7,r6
    fab0:	280d883a 	mov	r6,r5
    fab4:	200b883a 	mov	r5,r4
    fab8:	11000017 	ldw	r4,0(r2)
    fabc:	000e6481 	jmpi	e648 <___vfiprintf_internal_r>

0000fac0 <__sbprintf>:
    fac0:	2880030b 	ldhu	r2,12(r5)
    fac4:	2ac01917 	ldw	r11,100(r5)
    fac8:	2a80038b 	ldhu	r10,14(r5)
    facc:	2a400717 	ldw	r9,28(r5)
    fad0:	2a000917 	ldw	r8,36(r5)
    fad4:	defee204 	addi	sp,sp,-1144
    fad8:	00c10004 	movi	r3,1024
    fadc:	dc011a15 	stw	r16,1128(sp)
    fae0:	10bfff4c 	andi	r2,r2,65533
    fae4:	2821883a 	mov	r16,r5
    fae8:	d8cb883a 	add	r5,sp,r3
    faec:	dc811c15 	stw	r18,1136(sp)
    faf0:	dc411b15 	stw	r17,1132(sp)
    faf4:	dfc11d15 	stw	ra,1140(sp)
    faf8:	2025883a 	mov	r18,r4
    fafc:	d881030d 	sth	r2,1036(sp)
    fb00:	dac11915 	stw	r11,1124(sp)
    fb04:	da81038d 	sth	r10,1038(sp)
    fb08:	da410715 	stw	r9,1052(sp)
    fb0c:	da010915 	stw	r8,1060(sp)
    fb10:	dec10015 	stw	sp,1024(sp)
    fb14:	dec10415 	stw	sp,1040(sp)
    fb18:	d8c10215 	stw	r3,1032(sp)
    fb1c:	d8c10515 	stw	r3,1044(sp)
    fb20:	d8010615 	stw	zero,1048(sp)
    fb24:	000e6480 	call	e648 <___vfiprintf_internal_r>
    fb28:	1023883a 	mov	r17,r2
    fb2c:	10000416 	blt	r2,zero,fb40 <__sbprintf+0x80>
    fb30:	d9410004 	addi	r5,sp,1024
    fb34:	9009883a 	mov	r4,r18
    fb38:	000baa80 	call	baa8 <_fflush_r>
    fb3c:	10000d1e 	bne	r2,zero,fb74 <__sbprintf+0xb4>
    fb40:	d881030b 	ldhu	r2,1036(sp)
    fb44:	1080100c 	andi	r2,r2,64
    fb48:	10000326 	beq	r2,zero,fb58 <__sbprintf+0x98>
    fb4c:	8080030b 	ldhu	r2,12(r16)
    fb50:	10801014 	ori	r2,r2,64
    fb54:	8080030d 	sth	r2,12(r16)
    fb58:	8805883a 	mov	r2,r17
    fb5c:	dfc11d17 	ldw	ra,1140(sp)
    fb60:	dc811c17 	ldw	r18,1136(sp)
    fb64:	dc411b17 	ldw	r17,1132(sp)
    fb68:	dc011a17 	ldw	r16,1128(sp)
    fb6c:	dec11e04 	addi	sp,sp,1144
    fb70:	f800283a 	ret
    fb74:	047fffc4 	movi	r17,-1
    fb78:	003ff106 	br	fb40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fb40>

0000fb7c <_write_r>:
    fb7c:	defffd04 	addi	sp,sp,-12
    fb80:	2805883a 	mov	r2,r5
    fb84:	dc000015 	stw	r16,0(sp)
    fb88:	040000b4 	movhi	r16,2
    fb8c:	dc400115 	stw	r17,4(sp)
    fb90:	300b883a 	mov	r5,r6
    fb94:	84110404 	addi	r16,r16,17424
    fb98:	2023883a 	mov	r17,r4
    fb9c:	380d883a 	mov	r6,r7
    fba0:	1009883a 	mov	r4,r2
    fba4:	dfc00215 	stw	ra,8(sp)
    fba8:	80000015 	stw	zero,0(r16)
    fbac:	00137140 	call	13714 <write>
    fbb0:	00ffffc4 	movi	r3,-1
    fbb4:	10c00526 	beq	r2,r3,fbcc <_write_r+0x50>
    fbb8:	dfc00217 	ldw	ra,8(sp)
    fbbc:	dc400117 	ldw	r17,4(sp)
    fbc0:	dc000017 	ldw	r16,0(sp)
    fbc4:	dec00304 	addi	sp,sp,12
    fbc8:	f800283a 	ret
    fbcc:	80c00017 	ldw	r3,0(r16)
    fbd0:	183ff926 	beq	r3,zero,fbb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fbb8>
    fbd4:	88c00015 	stw	r3,0(r17)
    fbd8:	003ff706 	br	fbb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fbb8>

0000fbdc <_close_r>:
    fbdc:	defffd04 	addi	sp,sp,-12
    fbe0:	dc000015 	stw	r16,0(sp)
    fbe4:	040000b4 	movhi	r16,2
    fbe8:	dc400115 	stw	r17,4(sp)
    fbec:	84110404 	addi	r16,r16,17424
    fbf0:	2023883a 	mov	r17,r4
    fbf4:	2809883a 	mov	r4,r5
    fbf8:	dfc00215 	stw	ra,8(sp)
    fbfc:	80000015 	stw	zero,0(r16)
    fc00:	0012d4c0 	call	12d4c <close>
    fc04:	00ffffc4 	movi	r3,-1
    fc08:	10c00526 	beq	r2,r3,fc20 <_close_r+0x44>
    fc0c:	dfc00217 	ldw	ra,8(sp)
    fc10:	dc400117 	ldw	r17,4(sp)
    fc14:	dc000017 	ldw	r16,0(sp)
    fc18:	dec00304 	addi	sp,sp,12
    fc1c:	f800283a 	ret
    fc20:	80c00017 	ldw	r3,0(r16)
    fc24:	183ff926 	beq	r3,zero,fc0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fc0c>
    fc28:	88c00015 	stw	r3,0(r17)
    fc2c:	003ff706 	br	fc0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fc0c>

0000fc30 <_calloc_r>:
    fc30:	298b383a 	mul	r5,r5,r6
    fc34:	defffe04 	addi	sp,sp,-8
    fc38:	dfc00115 	stw	ra,4(sp)
    fc3c:	dc000015 	stw	r16,0(sp)
    fc40:	0006b580 	call	6b58 <_malloc_r>
    fc44:	10002926 	beq	r2,zero,fcec <_calloc_r+0xbc>
    fc48:	11bfff17 	ldw	r6,-4(r2)
    fc4c:	1021883a 	mov	r16,r2
    fc50:	00bfff04 	movi	r2,-4
    fc54:	308c703a 	and	r6,r6,r2
    fc58:	00c00904 	movi	r3,36
    fc5c:	308d883a 	add	r6,r6,r2
    fc60:	19801636 	bltu	r3,r6,fcbc <_calloc_r+0x8c>
    fc64:	008004c4 	movi	r2,19
    fc68:	11800b2e 	bgeu	r2,r6,fc98 <_calloc_r+0x68>
    fc6c:	80000015 	stw	zero,0(r16)
    fc70:	80000115 	stw	zero,4(r16)
    fc74:	008006c4 	movi	r2,27
    fc78:	11801a2e 	bgeu	r2,r6,fce4 <_calloc_r+0xb4>
    fc7c:	80000215 	stw	zero,8(r16)
    fc80:	80000315 	stw	zero,12(r16)
    fc84:	30c0151e 	bne	r6,r3,fcdc <_calloc_r+0xac>
    fc88:	80000415 	stw	zero,16(r16)
    fc8c:	80800604 	addi	r2,r16,24
    fc90:	80000515 	stw	zero,20(r16)
    fc94:	00000106 	br	fc9c <_calloc_r+0x6c>
    fc98:	8005883a 	mov	r2,r16
    fc9c:	10000015 	stw	zero,0(r2)
    fca0:	10000115 	stw	zero,4(r2)
    fca4:	10000215 	stw	zero,8(r2)
    fca8:	8005883a 	mov	r2,r16
    fcac:	dfc00117 	ldw	ra,4(sp)
    fcb0:	dc000017 	ldw	r16,0(sp)
    fcb4:	dec00204 	addi	sp,sp,8
    fcb8:	f800283a 	ret
    fcbc:	000b883a 	mov	r5,zero
    fcc0:	8009883a 	mov	r4,r16
    fcc4:	00074ac0 	call	74ac <memset>
    fcc8:	8005883a 	mov	r2,r16
    fccc:	dfc00117 	ldw	ra,4(sp)
    fcd0:	dc000017 	ldw	r16,0(sp)
    fcd4:	dec00204 	addi	sp,sp,8
    fcd8:	f800283a 	ret
    fcdc:	80800404 	addi	r2,r16,16
    fce0:	003fee06 	br	fc9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fc9c>
    fce4:	80800204 	addi	r2,r16,8
    fce8:	003fec06 	br	fc9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fc9c>
    fcec:	0005883a 	mov	r2,zero
    fcf0:	003fee06 	br	fcac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fcac>

0000fcf4 <_fclose_r>:
    fcf4:	28003926 	beq	r5,zero,fddc <_fclose_r+0xe8>
    fcf8:	defffc04 	addi	sp,sp,-16
    fcfc:	dc400115 	stw	r17,4(sp)
    fd00:	dc000015 	stw	r16,0(sp)
    fd04:	dfc00315 	stw	ra,12(sp)
    fd08:	dc800215 	stw	r18,8(sp)
    fd0c:	2023883a 	mov	r17,r4
    fd10:	2821883a 	mov	r16,r5
    fd14:	20000226 	beq	r4,zero,fd20 <_fclose_r+0x2c>
    fd18:	20800e17 	ldw	r2,56(r4)
    fd1c:	10002726 	beq	r2,zero,fdbc <_fclose_r+0xc8>
    fd20:	8080030f 	ldh	r2,12(r16)
    fd24:	1000071e 	bne	r2,zero,fd44 <_fclose_r+0x50>
    fd28:	0005883a 	mov	r2,zero
    fd2c:	dfc00317 	ldw	ra,12(sp)
    fd30:	dc800217 	ldw	r18,8(sp)
    fd34:	dc400117 	ldw	r17,4(sp)
    fd38:	dc000017 	ldw	r16,0(sp)
    fd3c:	dec00404 	addi	sp,sp,16
    fd40:	f800283a 	ret
    fd44:	800b883a 	mov	r5,r16
    fd48:	8809883a 	mov	r4,r17
    fd4c:	000b88c0 	call	b88c <__sflush_r>
    fd50:	1025883a 	mov	r18,r2
    fd54:	80800b17 	ldw	r2,44(r16)
    fd58:	10000426 	beq	r2,zero,fd6c <_fclose_r+0x78>
    fd5c:	81400717 	ldw	r5,28(r16)
    fd60:	8809883a 	mov	r4,r17
    fd64:	103ee83a 	callr	r2
    fd68:	10001616 	blt	r2,zero,fdc4 <_fclose_r+0xd0>
    fd6c:	8080030b 	ldhu	r2,12(r16)
    fd70:	1080200c 	andi	r2,r2,128
    fd74:	1000151e 	bne	r2,zero,fdcc <_fclose_r+0xd8>
    fd78:	81400c17 	ldw	r5,48(r16)
    fd7c:	28000526 	beq	r5,zero,fd94 <_fclose_r+0xa0>
    fd80:	80801004 	addi	r2,r16,64
    fd84:	28800226 	beq	r5,r2,fd90 <_fclose_r+0x9c>
    fd88:	8809883a 	mov	r4,r17
    fd8c:	000bff80 	call	bff8 <_free_r>
    fd90:	80000c15 	stw	zero,48(r16)
    fd94:	81401117 	ldw	r5,68(r16)
    fd98:	28000326 	beq	r5,zero,fda8 <_fclose_r+0xb4>
    fd9c:	8809883a 	mov	r4,r17
    fda0:	000bff80 	call	bff8 <_free_r>
    fda4:	80001115 	stw	zero,68(r16)
    fda8:	000be940 	call	be94 <__sfp_lock_acquire>
    fdac:	8000030d 	sth	zero,12(r16)
    fdb0:	000be980 	call	be98 <__sfp_lock_release>
    fdb4:	9005883a 	mov	r2,r18
    fdb8:	003fdc06 	br	fd2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fd2c>
    fdbc:	000be840 	call	be84 <__sinit>
    fdc0:	003fd706 	br	fd20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fd20>
    fdc4:	04bfffc4 	movi	r18,-1
    fdc8:	003fe806 	br	fd6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fd6c>
    fdcc:	81400417 	ldw	r5,16(r16)
    fdd0:	8809883a 	mov	r4,r17
    fdd4:	000bff80 	call	bff8 <_free_r>
    fdd8:	003fe706 	br	fd78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fd78>
    fddc:	0005883a 	mov	r2,zero
    fde0:	f800283a 	ret

0000fde4 <fclose>:
    fde4:	008000b4 	movhi	r2,2
    fde8:	1088e204 	addi	r2,r2,9096
    fdec:	200b883a 	mov	r5,r4
    fdf0:	11000017 	ldw	r4,0(r2)
    fdf4:	000fcf41 	jmpi	fcf4 <_fclose_r>

0000fdf8 <__fputwc>:
    fdf8:	defff804 	addi	sp,sp,-32
    fdfc:	dcc00415 	stw	r19,16(sp)
    fe00:	dc800315 	stw	r18,12(sp)
    fe04:	dc000115 	stw	r16,4(sp)
    fe08:	dfc00715 	stw	ra,28(sp)
    fe0c:	dd400615 	stw	r21,24(sp)
    fe10:	dd000515 	stw	r20,20(sp)
    fe14:	dc400215 	stw	r17,8(sp)
    fe18:	2027883a 	mov	r19,r4
    fe1c:	2825883a 	mov	r18,r5
    fe20:	3021883a 	mov	r16,r6
    fe24:	000c9d40 	call	c9d4 <__locale_mb_cur_max>
    fe28:	00c00044 	movi	r3,1
    fe2c:	10c03e26 	beq	r2,r3,ff28 <__fputwc+0x130>
    fe30:	81c01704 	addi	r7,r16,92
    fe34:	900d883a 	mov	r6,r18
    fe38:	d80b883a 	mov	r5,sp
    fe3c:	9809883a 	mov	r4,r19
    fe40:	00102c80 	call	102c8 <_wcrtomb_r>
    fe44:	1029883a 	mov	r20,r2
    fe48:	00bfffc4 	movi	r2,-1
    fe4c:	a0802026 	beq	r20,r2,fed0 <__fputwc+0xd8>
    fe50:	d9400003 	ldbu	r5,0(sp)
    fe54:	a0001c26 	beq	r20,zero,fec8 <__fputwc+0xd0>
    fe58:	0023883a 	mov	r17,zero
    fe5c:	05400284 	movi	r21,10
    fe60:	00000906 	br	fe88 <__fputwc+0x90>
    fe64:	80800017 	ldw	r2,0(r16)
    fe68:	11400005 	stb	r5,0(r2)
    fe6c:	80c00017 	ldw	r3,0(r16)
    fe70:	18c00044 	addi	r3,r3,1
    fe74:	80c00015 	stw	r3,0(r16)
    fe78:	8c400044 	addi	r17,r17,1
    fe7c:	dc45883a 	add	r2,sp,r17
    fe80:	8d00112e 	bgeu	r17,r20,fec8 <__fputwc+0xd0>
    fe84:	11400003 	ldbu	r5,0(r2)
    fe88:	80c00217 	ldw	r3,8(r16)
    fe8c:	18ffffc4 	addi	r3,r3,-1
    fe90:	80c00215 	stw	r3,8(r16)
    fe94:	183ff30e 	bge	r3,zero,fe64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fe64>
    fe98:	80800617 	ldw	r2,24(r16)
    fe9c:	18801916 	blt	r3,r2,ff04 <__fputwc+0x10c>
    fea0:	80800017 	ldw	r2,0(r16)
    fea4:	11400005 	stb	r5,0(r2)
    fea8:	80800017 	ldw	r2,0(r16)
    feac:	10c00003 	ldbu	r3,0(r2)
    feb0:	10800044 	addi	r2,r2,1
    feb4:	1d402326 	beq	r3,r21,ff44 <__fputwc+0x14c>
    feb8:	80800015 	stw	r2,0(r16)
    febc:	8c400044 	addi	r17,r17,1
    fec0:	dc45883a 	add	r2,sp,r17
    fec4:	8d3fef36 	bltu	r17,r20,fe84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fe84>
    fec8:	9005883a 	mov	r2,r18
    fecc:	00000406 	br	fee0 <__fputwc+0xe8>
    fed0:	80c0030b 	ldhu	r3,12(r16)
    fed4:	a005883a 	mov	r2,r20
    fed8:	18c01014 	ori	r3,r3,64
    fedc:	80c0030d 	sth	r3,12(r16)
    fee0:	dfc00717 	ldw	ra,28(sp)
    fee4:	dd400617 	ldw	r21,24(sp)
    fee8:	dd000517 	ldw	r20,20(sp)
    feec:	dcc00417 	ldw	r19,16(sp)
    fef0:	dc800317 	ldw	r18,12(sp)
    fef4:	dc400217 	ldw	r17,8(sp)
    fef8:	dc000117 	ldw	r16,4(sp)
    fefc:	dec00804 	addi	sp,sp,32
    ff00:	f800283a 	ret
    ff04:	800d883a 	mov	r6,r16
    ff08:	29403fcc 	andi	r5,r5,255
    ff0c:	9809883a 	mov	r4,r19
    ff10:	00101700 	call	10170 <__swbuf_r>
    ff14:	10bfffe0 	cmpeqi	r2,r2,-1
    ff18:	10803fcc 	andi	r2,r2,255
    ff1c:	103fd626 	beq	r2,zero,fe78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fe78>
    ff20:	00bfffc4 	movi	r2,-1
    ff24:	003fee06 	br	fee0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fee0>
    ff28:	90ffffc4 	addi	r3,r18,-1
    ff2c:	01003f84 	movi	r4,254
    ff30:	20ffbf36 	bltu	r4,r3,fe30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fe30>
    ff34:	900b883a 	mov	r5,r18
    ff38:	dc800005 	stb	r18,0(sp)
    ff3c:	1029883a 	mov	r20,r2
    ff40:	003fc506 	br	fe58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fe58>
    ff44:	800d883a 	mov	r6,r16
    ff48:	a80b883a 	mov	r5,r21
    ff4c:	9809883a 	mov	r4,r19
    ff50:	00101700 	call	10170 <__swbuf_r>
    ff54:	10bfffe0 	cmpeqi	r2,r2,-1
    ff58:	003fef06 	br	ff18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ff18>

0000ff5c <_fputwc_r>:
    ff5c:	3080030b 	ldhu	r2,12(r6)
    ff60:	10c8000c 	andi	r3,r2,8192
    ff64:	1800051e 	bne	r3,zero,ff7c <_fputwc_r+0x20>
    ff68:	30c01917 	ldw	r3,100(r6)
    ff6c:	10880014 	ori	r2,r2,8192
    ff70:	3080030d 	sth	r2,12(r6)
    ff74:	18880014 	ori	r2,r3,8192
    ff78:	30801915 	stw	r2,100(r6)
    ff7c:	000fdf81 	jmpi	fdf8 <__fputwc>

0000ff80 <fputwc>:
    ff80:	008000b4 	movhi	r2,2
    ff84:	defffc04 	addi	sp,sp,-16
    ff88:	1088e204 	addi	r2,r2,9096
    ff8c:	dc000115 	stw	r16,4(sp)
    ff90:	14000017 	ldw	r16,0(r2)
    ff94:	dc400215 	stw	r17,8(sp)
    ff98:	dfc00315 	stw	ra,12(sp)
    ff9c:	2023883a 	mov	r17,r4
    ffa0:	80000226 	beq	r16,zero,ffac <fputwc+0x2c>
    ffa4:	80800e17 	ldw	r2,56(r16)
    ffa8:	10001026 	beq	r2,zero,ffec <fputwc+0x6c>
    ffac:	2880030b 	ldhu	r2,12(r5)
    ffb0:	10c8000c 	andi	r3,r2,8192
    ffb4:	1800051e 	bne	r3,zero,ffcc <fputwc+0x4c>
    ffb8:	28c01917 	ldw	r3,100(r5)
    ffbc:	10880014 	ori	r2,r2,8192
    ffc0:	2880030d 	sth	r2,12(r5)
    ffc4:	18880014 	ori	r2,r3,8192
    ffc8:	28801915 	stw	r2,100(r5)
    ffcc:	280d883a 	mov	r6,r5
    ffd0:	8009883a 	mov	r4,r16
    ffd4:	880b883a 	mov	r5,r17
    ffd8:	dfc00317 	ldw	ra,12(sp)
    ffdc:	dc400217 	ldw	r17,8(sp)
    ffe0:	dc000117 	ldw	r16,4(sp)
    ffe4:	dec00404 	addi	sp,sp,16
    ffe8:	000fdf81 	jmpi	fdf8 <__fputwc>
    ffec:	8009883a 	mov	r4,r16
    fff0:	d9400015 	stw	r5,0(sp)
    fff4:	000be840 	call	be84 <__sinit>
    fff8:	d9400017 	ldw	r5,0(sp)
    fffc:	003feb06 	br	ffac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ffac>

00010000 <_fstat_r>:
   10000:	defffd04 	addi	sp,sp,-12
   10004:	2805883a 	mov	r2,r5
   10008:	dc000015 	stw	r16,0(sp)
   1000c:	040000b4 	movhi	r16,2
   10010:	dc400115 	stw	r17,4(sp)
   10014:	84110404 	addi	r16,r16,17424
   10018:	2023883a 	mov	r17,r4
   1001c:	300b883a 	mov	r5,r6
   10020:	1009883a 	mov	r4,r2
   10024:	dfc00215 	stw	ra,8(sp)
   10028:	80000015 	stw	zero,0(r16)
   1002c:	0012eb80 	call	12eb8 <fstat>
   10030:	00ffffc4 	movi	r3,-1
   10034:	10c00526 	beq	r2,r3,1004c <_fstat_r+0x4c>
   10038:	dfc00217 	ldw	ra,8(sp)
   1003c:	dc400117 	ldw	r17,4(sp)
   10040:	dc000017 	ldw	r16,0(sp)
   10044:	dec00304 	addi	sp,sp,12
   10048:	f800283a 	ret
   1004c:	80c00017 	ldw	r3,0(r16)
   10050:	183ff926 	beq	r3,zero,10038 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010038>
   10054:	88c00015 	stw	r3,0(r17)
   10058:	003ff706 	br	10038 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010038>

0001005c <_isatty_r>:
   1005c:	defffd04 	addi	sp,sp,-12
   10060:	dc000015 	stw	r16,0(sp)
   10064:	040000b4 	movhi	r16,2
   10068:	dc400115 	stw	r17,4(sp)
   1006c:	84110404 	addi	r16,r16,17424
   10070:	2023883a 	mov	r17,r4
   10074:	2809883a 	mov	r4,r5
   10078:	dfc00215 	stw	ra,8(sp)
   1007c:	80000015 	stw	zero,0(r16)
   10080:	0012fc40 	call	12fc4 <isatty>
   10084:	00ffffc4 	movi	r3,-1
   10088:	10c00526 	beq	r2,r3,100a0 <_isatty_r+0x44>
   1008c:	dfc00217 	ldw	ra,8(sp)
   10090:	dc400117 	ldw	r17,4(sp)
   10094:	dc000017 	ldw	r16,0(sp)
   10098:	dec00304 	addi	sp,sp,12
   1009c:	f800283a 	ret
   100a0:	80c00017 	ldw	r3,0(r16)
   100a4:	183ff926 	beq	r3,zero,1008c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701008c>
   100a8:	88c00015 	stw	r3,0(r17)
   100ac:	003ff706 	br	1008c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701008c>

000100b0 <_lseek_r>:
   100b0:	defffd04 	addi	sp,sp,-12
   100b4:	2805883a 	mov	r2,r5
   100b8:	dc000015 	stw	r16,0(sp)
   100bc:	040000b4 	movhi	r16,2
   100c0:	dc400115 	stw	r17,4(sp)
   100c4:	300b883a 	mov	r5,r6
   100c8:	84110404 	addi	r16,r16,17424
   100cc:	2023883a 	mov	r17,r4
   100d0:	380d883a 	mov	r6,r7
   100d4:	1009883a 	mov	r4,r2
   100d8:	dfc00215 	stw	ra,8(sp)
   100dc:	80000015 	stw	zero,0(r16)
   100e0:	00132fc0 	call	132fc <lseek>
   100e4:	00ffffc4 	movi	r3,-1
   100e8:	10c00526 	beq	r2,r3,10100 <_lseek_r+0x50>
   100ec:	dfc00217 	ldw	ra,8(sp)
   100f0:	dc400117 	ldw	r17,4(sp)
   100f4:	dc000017 	ldw	r16,0(sp)
   100f8:	dec00304 	addi	sp,sp,12
   100fc:	f800283a 	ret
   10100:	80c00017 	ldw	r3,0(r16)
   10104:	183ff926 	beq	r3,zero,100ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70100ec>
   10108:	88c00015 	stw	r3,0(r17)
   1010c:	003ff706 	br	100ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70100ec>

00010110 <_read_r>:
   10110:	defffd04 	addi	sp,sp,-12
   10114:	2805883a 	mov	r2,r5
   10118:	dc000015 	stw	r16,0(sp)
   1011c:	040000b4 	movhi	r16,2
   10120:	dc400115 	stw	r17,4(sp)
   10124:	300b883a 	mov	r5,r6
   10128:	84110404 	addi	r16,r16,17424
   1012c:	2023883a 	mov	r17,r4
   10130:	380d883a 	mov	r6,r7
   10134:	1009883a 	mov	r4,r2
   10138:	dfc00215 	stw	ra,8(sp)
   1013c:	80000015 	stw	zero,0(r16)
   10140:	00134c80 	call	134c8 <read>
   10144:	00ffffc4 	movi	r3,-1
   10148:	10c00526 	beq	r2,r3,10160 <_read_r+0x50>
   1014c:	dfc00217 	ldw	ra,8(sp)
   10150:	dc400117 	ldw	r17,4(sp)
   10154:	dc000017 	ldw	r16,0(sp)
   10158:	dec00304 	addi	sp,sp,12
   1015c:	f800283a 	ret
   10160:	80c00017 	ldw	r3,0(r16)
   10164:	183ff926 	beq	r3,zero,1014c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701014c>
   10168:	88c00015 	stw	r3,0(r17)
   1016c:	003ff706 	br	1014c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701014c>

00010170 <__swbuf_r>:
   10170:	defffb04 	addi	sp,sp,-20
   10174:	dcc00315 	stw	r19,12(sp)
   10178:	dc800215 	stw	r18,8(sp)
   1017c:	dc000015 	stw	r16,0(sp)
   10180:	dfc00415 	stw	ra,16(sp)
   10184:	dc400115 	stw	r17,4(sp)
   10188:	2025883a 	mov	r18,r4
   1018c:	2827883a 	mov	r19,r5
   10190:	3021883a 	mov	r16,r6
   10194:	20000226 	beq	r4,zero,101a0 <__swbuf_r+0x30>
   10198:	20800e17 	ldw	r2,56(r4)
   1019c:	10004226 	beq	r2,zero,102a8 <__swbuf_r+0x138>
   101a0:	80800617 	ldw	r2,24(r16)
   101a4:	8100030b 	ldhu	r4,12(r16)
   101a8:	80800215 	stw	r2,8(r16)
   101ac:	2080020c 	andi	r2,r4,8
   101b0:	10003626 	beq	r2,zero,1028c <__swbuf_r+0x11c>
   101b4:	80c00417 	ldw	r3,16(r16)
   101b8:	18003426 	beq	r3,zero,1028c <__swbuf_r+0x11c>
   101bc:	2088000c 	andi	r2,r4,8192
   101c0:	9c403fcc 	andi	r17,r19,255
   101c4:	10001a26 	beq	r2,zero,10230 <__swbuf_r+0xc0>
   101c8:	80800017 	ldw	r2,0(r16)
   101cc:	81000517 	ldw	r4,20(r16)
   101d0:	10c7c83a 	sub	r3,r2,r3
   101d4:	1900200e 	bge	r3,r4,10258 <__swbuf_r+0xe8>
   101d8:	18c00044 	addi	r3,r3,1
   101dc:	81000217 	ldw	r4,8(r16)
   101e0:	11400044 	addi	r5,r2,1
   101e4:	81400015 	stw	r5,0(r16)
   101e8:	213fffc4 	addi	r4,r4,-1
   101ec:	81000215 	stw	r4,8(r16)
   101f0:	14c00005 	stb	r19,0(r2)
   101f4:	80800517 	ldw	r2,20(r16)
   101f8:	10c01e26 	beq	r2,r3,10274 <__swbuf_r+0x104>
   101fc:	8080030b 	ldhu	r2,12(r16)
   10200:	1080004c 	andi	r2,r2,1
   10204:	10000226 	beq	r2,zero,10210 <__swbuf_r+0xa0>
   10208:	00800284 	movi	r2,10
   1020c:	88801926 	beq	r17,r2,10274 <__swbuf_r+0x104>
   10210:	8805883a 	mov	r2,r17
   10214:	dfc00417 	ldw	ra,16(sp)
   10218:	dcc00317 	ldw	r19,12(sp)
   1021c:	dc800217 	ldw	r18,8(sp)
   10220:	dc400117 	ldw	r17,4(sp)
   10224:	dc000017 	ldw	r16,0(sp)
   10228:	dec00504 	addi	sp,sp,20
   1022c:	f800283a 	ret
   10230:	81401917 	ldw	r5,100(r16)
   10234:	00b7ffc4 	movi	r2,-8193
   10238:	21080014 	ori	r4,r4,8192
   1023c:	2884703a 	and	r2,r5,r2
   10240:	80801915 	stw	r2,100(r16)
   10244:	80800017 	ldw	r2,0(r16)
   10248:	8100030d 	sth	r4,12(r16)
   1024c:	81000517 	ldw	r4,20(r16)
   10250:	10c7c83a 	sub	r3,r2,r3
   10254:	193fe016 	blt	r3,r4,101d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70101d8>
   10258:	800b883a 	mov	r5,r16
   1025c:	9009883a 	mov	r4,r18
   10260:	000baa80 	call	baa8 <_fflush_r>
   10264:	1000071e 	bne	r2,zero,10284 <__swbuf_r+0x114>
   10268:	80800017 	ldw	r2,0(r16)
   1026c:	00c00044 	movi	r3,1
   10270:	003fda06 	br	101dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70101dc>
   10274:	800b883a 	mov	r5,r16
   10278:	9009883a 	mov	r4,r18
   1027c:	000baa80 	call	baa8 <_fflush_r>
   10280:	103fe326 	beq	r2,zero,10210 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010210>
   10284:	00bfffc4 	movi	r2,-1
   10288:	003fe206 	br	10214 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010214>
   1028c:	800b883a 	mov	r5,r16
   10290:	9009883a 	mov	r4,r18
   10294:	0009eb00 	call	9eb0 <__swsetup_r>
   10298:	103ffa1e 	bne	r2,zero,10284 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010284>
   1029c:	8100030b 	ldhu	r4,12(r16)
   102a0:	80c00417 	ldw	r3,16(r16)
   102a4:	003fc506 	br	101bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70101bc>
   102a8:	000be840 	call	be84 <__sinit>
   102ac:	003fbc06 	br	101a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70101a0>

000102b0 <__swbuf>:
   102b0:	008000b4 	movhi	r2,2
   102b4:	1088e204 	addi	r2,r2,9096
   102b8:	280d883a 	mov	r6,r5
   102bc:	200b883a 	mov	r5,r4
   102c0:	11000017 	ldw	r4,0(r2)
   102c4:	00101701 	jmpi	10170 <__swbuf_r>

000102c8 <_wcrtomb_r>:
   102c8:	defff604 	addi	sp,sp,-40
   102cc:	008000b4 	movhi	r2,2
   102d0:	dc800815 	stw	r18,32(sp)
   102d4:	dc400715 	stw	r17,28(sp)
   102d8:	dc000615 	stw	r16,24(sp)
   102dc:	1088e404 	addi	r2,r2,9104
   102e0:	dfc00915 	stw	ra,36(sp)
   102e4:	2021883a 	mov	r16,r4
   102e8:	3823883a 	mov	r17,r7
   102ec:	14800017 	ldw	r18,0(r2)
   102f0:	28001426 	beq	r5,zero,10344 <_wcrtomb_r+0x7c>
   102f4:	d9400415 	stw	r5,16(sp)
   102f8:	d9800515 	stw	r6,20(sp)
   102fc:	000c9c80 	call	c9c8 <__locale_charset>
   10300:	d9800517 	ldw	r6,20(sp)
   10304:	d9400417 	ldw	r5,16(sp)
   10308:	100f883a 	mov	r7,r2
   1030c:	dc400015 	stw	r17,0(sp)
   10310:	8009883a 	mov	r4,r16
   10314:	903ee83a 	callr	r18
   10318:	00ffffc4 	movi	r3,-1
   1031c:	10c0031e 	bne	r2,r3,1032c <_wcrtomb_r+0x64>
   10320:	88000015 	stw	zero,0(r17)
   10324:	00c02284 	movi	r3,138
   10328:	80c00015 	stw	r3,0(r16)
   1032c:	dfc00917 	ldw	ra,36(sp)
   10330:	dc800817 	ldw	r18,32(sp)
   10334:	dc400717 	ldw	r17,28(sp)
   10338:	dc000617 	ldw	r16,24(sp)
   1033c:	dec00a04 	addi	sp,sp,40
   10340:	f800283a 	ret
   10344:	000c9c80 	call	c9c8 <__locale_charset>
   10348:	100f883a 	mov	r7,r2
   1034c:	dc400015 	stw	r17,0(sp)
   10350:	000d883a 	mov	r6,zero
   10354:	d9400104 	addi	r5,sp,4
   10358:	8009883a 	mov	r4,r16
   1035c:	903ee83a 	callr	r18
   10360:	003fed06 	br	10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>

00010364 <wcrtomb>:
   10364:	defff604 	addi	sp,sp,-40
   10368:	008000b4 	movhi	r2,2
   1036c:	dc800615 	stw	r18,24(sp)
   10370:	dc400515 	stw	r17,20(sp)
   10374:	1088e204 	addi	r2,r2,9096
   10378:	dfc00915 	stw	ra,36(sp)
   1037c:	dd000815 	stw	r20,32(sp)
   10380:	dcc00715 	stw	r19,28(sp)
   10384:	dc000415 	stw	r16,16(sp)
   10388:	3025883a 	mov	r18,r6
   1038c:	14400017 	ldw	r17,0(r2)
   10390:	20001926 	beq	r4,zero,103f8 <wcrtomb+0x94>
   10394:	008000b4 	movhi	r2,2
   10398:	1088e404 	addi	r2,r2,9104
   1039c:	15000017 	ldw	r20,0(r2)
   103a0:	2021883a 	mov	r16,r4
   103a4:	2827883a 	mov	r19,r5
   103a8:	000c9c80 	call	c9c8 <__locale_charset>
   103ac:	100f883a 	mov	r7,r2
   103b0:	dc800015 	stw	r18,0(sp)
   103b4:	980d883a 	mov	r6,r19
   103b8:	800b883a 	mov	r5,r16
   103bc:	8809883a 	mov	r4,r17
   103c0:	a03ee83a 	callr	r20
   103c4:	00ffffc4 	movi	r3,-1
   103c8:	10c0031e 	bne	r2,r3,103d8 <wcrtomb+0x74>
   103cc:	90000015 	stw	zero,0(r18)
   103d0:	00c02284 	movi	r3,138
   103d4:	88c00015 	stw	r3,0(r17)
   103d8:	dfc00917 	ldw	ra,36(sp)
   103dc:	dd000817 	ldw	r20,32(sp)
   103e0:	dcc00717 	ldw	r19,28(sp)
   103e4:	dc800617 	ldw	r18,24(sp)
   103e8:	dc400517 	ldw	r17,20(sp)
   103ec:	dc000417 	ldw	r16,16(sp)
   103f0:	dec00a04 	addi	sp,sp,40
   103f4:	f800283a 	ret
   103f8:	008000b4 	movhi	r2,2
   103fc:	1088e404 	addi	r2,r2,9104
   10400:	14000017 	ldw	r16,0(r2)
   10404:	000c9c80 	call	c9c8 <__locale_charset>
   10408:	100f883a 	mov	r7,r2
   1040c:	dc800015 	stw	r18,0(sp)
   10410:	000d883a 	mov	r6,zero
   10414:	d9400104 	addi	r5,sp,4
   10418:	8809883a 	mov	r4,r17
   1041c:	803ee83a 	callr	r16
   10420:	003fe806 	br	103c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70103c4>

00010424 <__ascii_wctomb>:
   10424:	28000526 	beq	r5,zero,1043c <__ascii_wctomb+0x18>
   10428:	00803fc4 	movi	r2,255
   1042c:	11800536 	bltu	r2,r6,10444 <__ascii_wctomb+0x20>
   10430:	29800005 	stb	r6,0(r5)
   10434:	00800044 	movi	r2,1
   10438:	f800283a 	ret
   1043c:	0005883a 	mov	r2,zero
   10440:	f800283a 	ret
   10444:	00802284 	movi	r2,138
   10448:	20800015 	stw	r2,0(r4)
   1044c:	00bfffc4 	movi	r2,-1
   10450:	f800283a 	ret

00010454 <_wctomb_r>:
   10454:	008000b4 	movhi	r2,2
   10458:	defff904 	addi	sp,sp,-28
   1045c:	1088e404 	addi	r2,r2,9104
   10460:	dfc00615 	stw	ra,24(sp)
   10464:	dc400515 	stw	r17,20(sp)
   10468:	dc000415 	stw	r16,16(sp)
   1046c:	3823883a 	mov	r17,r7
   10470:	14000017 	ldw	r16,0(r2)
   10474:	d9000115 	stw	r4,4(sp)
   10478:	d9400215 	stw	r5,8(sp)
   1047c:	d9800315 	stw	r6,12(sp)
   10480:	000c9c80 	call	c9c8 <__locale_charset>
   10484:	d9800317 	ldw	r6,12(sp)
   10488:	d9400217 	ldw	r5,8(sp)
   1048c:	d9000117 	ldw	r4,4(sp)
   10490:	100f883a 	mov	r7,r2
   10494:	dc400015 	stw	r17,0(sp)
   10498:	803ee83a 	callr	r16
   1049c:	dfc00617 	ldw	ra,24(sp)
   104a0:	dc400517 	ldw	r17,20(sp)
   104a4:	dc000417 	ldw	r16,16(sp)
   104a8:	dec00704 	addi	sp,sp,28
   104ac:	f800283a 	ret

000104b0 <__udivdi3>:
   104b0:	defff504 	addi	sp,sp,-44
   104b4:	dcc00415 	stw	r19,16(sp)
   104b8:	dc000115 	stw	r16,4(sp)
   104bc:	dfc00a15 	stw	ra,40(sp)
   104c0:	df000915 	stw	fp,36(sp)
   104c4:	ddc00815 	stw	r23,32(sp)
   104c8:	dd800715 	stw	r22,28(sp)
   104cc:	dd400615 	stw	r21,24(sp)
   104d0:	dd000515 	stw	r20,20(sp)
   104d4:	dc800315 	stw	r18,12(sp)
   104d8:	dc400215 	stw	r17,8(sp)
   104dc:	2027883a 	mov	r19,r4
   104e0:	2821883a 	mov	r16,r5
   104e4:	3800411e 	bne	r7,zero,105ec <__udivdi3+0x13c>
   104e8:	3023883a 	mov	r17,r6
   104ec:	2025883a 	mov	r18,r4
   104f0:	2980522e 	bgeu	r5,r6,1063c <__udivdi3+0x18c>
   104f4:	00bfffd4 	movui	r2,65535
   104f8:	282d883a 	mov	r22,r5
   104fc:	1180a836 	bltu	r2,r6,107a0 <__udivdi3+0x2f0>
   10500:	00803fc4 	movi	r2,255
   10504:	1185803a 	cmpltu	r2,r2,r6
   10508:	100490fa 	slli	r2,r2,3
   1050c:	3086d83a 	srl	r3,r6,r2
   10510:	010000b4 	movhi	r4,2
   10514:	213faf04 	addi	r4,r4,-324
   10518:	20c7883a 	add	r3,r4,r3
   1051c:	18c00003 	ldbu	r3,0(r3)
   10520:	1885883a 	add	r2,r3,r2
   10524:	00c00804 	movi	r3,32
   10528:	1887c83a 	sub	r3,r3,r2
   1052c:	18000526 	beq	r3,zero,10544 <__udivdi3+0x94>
   10530:	80e0983a 	sll	r16,r16,r3
   10534:	9884d83a 	srl	r2,r19,r2
   10538:	30e2983a 	sll	r17,r6,r3
   1053c:	98e4983a 	sll	r18,r19,r3
   10540:	142cb03a 	or	r22,r2,r16
   10544:	882ad43a 	srli	r21,r17,16
   10548:	b009883a 	mov	r4,r22
   1054c:	8d3fffcc 	andi	r20,r17,65535
   10550:	a80b883a 	mov	r5,r21
   10554:	00110bc0 	call	110bc <__umodsi3>
   10558:	b009883a 	mov	r4,r22
   1055c:	a80b883a 	mov	r5,r21
   10560:	1027883a 	mov	r19,r2
   10564:	00110580 	call	11058 <__udivsi3>
   10568:	102d883a 	mov	r22,r2
   1056c:	9826943a 	slli	r19,r19,16
   10570:	9004d43a 	srli	r2,r18,16
   10574:	a5a1383a 	mul	r16,r20,r22
   10578:	14c4b03a 	or	r2,r2,r19
   1057c:	1400052e 	bgeu	r2,r16,10594 <__udivdi3+0xe4>
   10580:	1445883a 	add	r2,r2,r17
   10584:	b0ffffc4 	addi	r3,r22,-1
   10588:	14400136 	bltu	r2,r17,10590 <__udivdi3+0xe0>
   1058c:	14012336 	bltu	r2,r16,10a1c <__udivdi3+0x56c>
   10590:	182d883a 	mov	r22,r3
   10594:	1421c83a 	sub	r16,r2,r16
   10598:	a80b883a 	mov	r5,r21
   1059c:	8009883a 	mov	r4,r16
   105a0:	00110bc0 	call	110bc <__umodsi3>
   105a4:	1027883a 	mov	r19,r2
   105a8:	a80b883a 	mov	r5,r21
   105ac:	8009883a 	mov	r4,r16
   105b0:	00110580 	call	11058 <__udivsi3>
   105b4:	9826943a 	slli	r19,r19,16
   105b8:	a0a9383a 	mul	r20,r20,r2
   105bc:	94bfffcc 	andi	r18,r18,65535
   105c0:	94e4b03a 	or	r18,r18,r19
   105c4:	9500052e 	bgeu	r18,r20,105dc <__udivdi3+0x12c>
   105c8:	8ca5883a 	add	r18,r17,r18
   105cc:	10ffffc4 	addi	r3,r2,-1
   105d0:	9440f136 	bltu	r18,r17,10998 <__udivdi3+0x4e8>
   105d4:	9500f02e 	bgeu	r18,r20,10998 <__udivdi3+0x4e8>
   105d8:	10bfff84 	addi	r2,r2,-2
   105dc:	b00c943a 	slli	r6,r22,16
   105e0:	0007883a 	mov	r3,zero
   105e4:	3084b03a 	or	r2,r6,r2
   105e8:	00005906 	br	10750 <__udivdi3+0x2a0>
   105ec:	29c05636 	bltu	r5,r7,10748 <__udivdi3+0x298>
   105f0:	00bfffd4 	movui	r2,65535
   105f4:	11c0622e 	bgeu	r2,r7,10780 <__udivdi3+0x2d0>
   105f8:	00804034 	movhi	r2,256
   105fc:	10bfffc4 	addi	r2,r2,-1
   10600:	11c0ee36 	bltu	r2,r7,109bc <__udivdi3+0x50c>
   10604:	00800404 	movi	r2,16
   10608:	3886d83a 	srl	r3,r7,r2
   1060c:	010000b4 	movhi	r4,2
   10610:	213faf04 	addi	r4,r4,-324
   10614:	20c7883a 	add	r3,r4,r3
   10618:	18c00003 	ldbu	r3,0(r3)
   1061c:	05400804 	movi	r21,32
   10620:	1885883a 	add	r2,r3,r2
   10624:	a8abc83a 	sub	r21,r21,r2
   10628:	a800621e 	bne	r21,zero,107b4 <__udivdi3+0x304>
   1062c:	3c00e936 	bltu	r7,r16,109d4 <__udivdi3+0x524>
   10630:	9985403a 	cmpgeu	r2,r19,r6
   10634:	0007883a 	mov	r3,zero
   10638:	00004506 	br	10750 <__udivdi3+0x2a0>
   1063c:	3000041e 	bne	r6,zero,10650 <__udivdi3+0x1a0>
   10640:	000b883a 	mov	r5,zero
   10644:	01000044 	movi	r4,1
   10648:	00110580 	call	11058 <__udivsi3>
   1064c:	1023883a 	mov	r17,r2
   10650:	00bfffd4 	movui	r2,65535
   10654:	14404e2e 	bgeu	r2,r17,10790 <__udivdi3+0x2e0>
   10658:	00804034 	movhi	r2,256
   1065c:	10bfffc4 	addi	r2,r2,-1
   10660:	1440d836 	bltu	r2,r17,109c4 <__udivdi3+0x514>
   10664:	00800404 	movi	r2,16
   10668:	8886d83a 	srl	r3,r17,r2
   1066c:	010000b4 	movhi	r4,2
   10670:	213faf04 	addi	r4,r4,-324
   10674:	20c7883a 	add	r3,r4,r3
   10678:	18c00003 	ldbu	r3,0(r3)
   1067c:	1885883a 	add	r2,r3,r2
   10680:	00c00804 	movi	r3,32
   10684:	1887c83a 	sub	r3,r3,r2
   10688:	18008f1e 	bne	r3,zero,108c8 <__udivdi3+0x418>
   1068c:	882ad43a 	srli	r21,r17,16
   10690:	8461c83a 	sub	r16,r16,r17
   10694:	8d3fffcc 	andi	r20,r17,65535
   10698:	00c00044 	movi	r3,1
   1069c:	8009883a 	mov	r4,r16
   106a0:	a80b883a 	mov	r5,r21
   106a4:	d8c00015 	stw	r3,0(sp)
   106a8:	00110bc0 	call	110bc <__umodsi3>
   106ac:	8009883a 	mov	r4,r16
   106b0:	a80b883a 	mov	r5,r21
   106b4:	1027883a 	mov	r19,r2
   106b8:	00110580 	call	11058 <__udivsi3>
   106bc:	9826943a 	slli	r19,r19,16
   106c0:	9008d43a 	srli	r4,r18,16
   106c4:	1521383a 	mul	r16,r2,r20
   106c8:	102d883a 	mov	r22,r2
   106cc:	24c8b03a 	or	r4,r4,r19
   106d0:	d8c00017 	ldw	r3,0(sp)
   106d4:	2400052e 	bgeu	r4,r16,106ec <__udivdi3+0x23c>
   106d8:	2449883a 	add	r4,r4,r17
   106dc:	b0bfffc4 	addi	r2,r22,-1
   106e0:	24400136 	bltu	r4,r17,106e8 <__udivdi3+0x238>
   106e4:	2400ca36 	bltu	r4,r16,10a10 <__udivdi3+0x560>
   106e8:	102d883a 	mov	r22,r2
   106ec:	2421c83a 	sub	r16,r4,r16
   106f0:	a80b883a 	mov	r5,r21
   106f4:	8009883a 	mov	r4,r16
   106f8:	d8c00015 	stw	r3,0(sp)
   106fc:	00110bc0 	call	110bc <__umodsi3>
   10700:	1027883a 	mov	r19,r2
   10704:	a80b883a 	mov	r5,r21
   10708:	8009883a 	mov	r4,r16
   1070c:	00110580 	call	11058 <__udivsi3>
   10710:	9826943a 	slli	r19,r19,16
   10714:	1529383a 	mul	r20,r2,r20
   10718:	94bfffcc 	andi	r18,r18,65535
   1071c:	94e4b03a 	or	r18,r18,r19
   10720:	d8c00017 	ldw	r3,0(sp)
   10724:	9500052e 	bgeu	r18,r20,1073c <__udivdi3+0x28c>
   10728:	8ca5883a 	add	r18,r17,r18
   1072c:	113fffc4 	addi	r4,r2,-1
   10730:	94409736 	bltu	r18,r17,10990 <__udivdi3+0x4e0>
   10734:	9500962e 	bgeu	r18,r20,10990 <__udivdi3+0x4e0>
   10738:	10bfff84 	addi	r2,r2,-2
   1073c:	b00c943a 	slli	r6,r22,16
   10740:	3084b03a 	or	r2,r6,r2
   10744:	00000206 	br	10750 <__udivdi3+0x2a0>
   10748:	0007883a 	mov	r3,zero
   1074c:	0005883a 	mov	r2,zero
   10750:	dfc00a17 	ldw	ra,40(sp)
   10754:	df000917 	ldw	fp,36(sp)
   10758:	ddc00817 	ldw	r23,32(sp)
   1075c:	dd800717 	ldw	r22,28(sp)
   10760:	dd400617 	ldw	r21,24(sp)
   10764:	dd000517 	ldw	r20,20(sp)
   10768:	dcc00417 	ldw	r19,16(sp)
   1076c:	dc800317 	ldw	r18,12(sp)
   10770:	dc400217 	ldw	r17,8(sp)
   10774:	dc000117 	ldw	r16,4(sp)
   10778:	dec00b04 	addi	sp,sp,44
   1077c:	f800283a 	ret
   10780:	00803fc4 	movi	r2,255
   10784:	11c5803a 	cmpltu	r2,r2,r7
   10788:	100490fa 	slli	r2,r2,3
   1078c:	003f9e06 	br	10608 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010608>
   10790:	00803fc4 	movi	r2,255
   10794:	1445803a 	cmpltu	r2,r2,r17
   10798:	100490fa 	slli	r2,r2,3
   1079c:	003fb206 	br	10668 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010668>
   107a0:	00804034 	movhi	r2,256
   107a4:	10bfffc4 	addi	r2,r2,-1
   107a8:	11808836 	bltu	r2,r6,109cc <__udivdi3+0x51c>
   107ac:	00800404 	movi	r2,16
   107b0:	003f5606 	br	1050c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701050c>
   107b4:	30aed83a 	srl	r23,r6,r2
   107b8:	3d4e983a 	sll	r7,r7,r21
   107bc:	80acd83a 	srl	r22,r16,r2
   107c0:	9884d83a 	srl	r2,r19,r2
   107c4:	3deeb03a 	or	r23,r7,r23
   107c8:	b824d43a 	srli	r18,r23,16
   107cc:	8560983a 	sll	r16,r16,r21
   107d0:	b009883a 	mov	r4,r22
   107d4:	900b883a 	mov	r5,r18
   107d8:	3568983a 	sll	r20,r6,r21
   107dc:	1420b03a 	or	r16,r2,r16
   107e0:	00110bc0 	call	110bc <__umodsi3>
   107e4:	b009883a 	mov	r4,r22
   107e8:	900b883a 	mov	r5,r18
   107ec:	1023883a 	mov	r17,r2
   107f0:	00110580 	call	11058 <__udivsi3>
   107f4:	8808943a 	slli	r4,r17,16
   107f8:	bf3fffcc 	andi	fp,r23,65535
   107fc:	8006d43a 	srli	r3,r16,16
   10800:	e0a3383a 	mul	r17,fp,r2
   10804:	100d883a 	mov	r6,r2
   10808:	1906b03a 	or	r3,r3,r4
   1080c:	1c40042e 	bgeu	r3,r17,10820 <__udivdi3+0x370>
   10810:	1dc7883a 	add	r3,r3,r23
   10814:	10bfffc4 	addi	r2,r2,-1
   10818:	1dc0752e 	bgeu	r3,r23,109f0 <__udivdi3+0x540>
   1081c:	100d883a 	mov	r6,r2
   10820:	1c63c83a 	sub	r17,r3,r17
   10824:	900b883a 	mov	r5,r18
   10828:	8809883a 	mov	r4,r17
   1082c:	d9800015 	stw	r6,0(sp)
   10830:	00110bc0 	call	110bc <__umodsi3>
   10834:	102d883a 	mov	r22,r2
   10838:	8809883a 	mov	r4,r17
   1083c:	900b883a 	mov	r5,r18
   10840:	00110580 	call	11058 <__udivsi3>
   10844:	b02c943a 	slli	r22,r22,16
   10848:	e089383a 	mul	r4,fp,r2
   1084c:	843fffcc 	andi	r16,r16,65535
   10850:	85a0b03a 	or	r16,r16,r22
   10854:	d9800017 	ldw	r6,0(sp)
   10858:	8100042e 	bgeu	r16,r4,1086c <__udivdi3+0x3bc>
   1085c:	85e1883a 	add	r16,r16,r23
   10860:	10ffffc4 	addi	r3,r2,-1
   10864:	85c05e2e 	bgeu	r16,r23,109e0 <__udivdi3+0x530>
   10868:	1805883a 	mov	r2,r3
   1086c:	300c943a 	slli	r6,r6,16
   10870:	a17fffcc 	andi	r5,r20,65535
   10874:	a028d43a 	srli	r20,r20,16
   10878:	3084b03a 	or	r2,r6,r2
   1087c:	10ffffcc 	andi	r3,r2,65535
   10880:	100cd43a 	srli	r6,r2,16
   10884:	194f383a 	mul	r7,r3,r5
   10888:	1d07383a 	mul	r3,r3,r20
   1088c:	314b383a 	mul	r5,r6,r5
   10890:	3810d43a 	srli	r8,r7,16
   10894:	8121c83a 	sub	r16,r16,r4
   10898:	1947883a 	add	r3,r3,r5
   1089c:	40c7883a 	add	r3,r8,r3
   108a0:	350d383a 	mul	r6,r6,r20
   108a4:	1940022e 	bgeu	r3,r5,108b0 <__udivdi3+0x400>
   108a8:	01000074 	movhi	r4,1
   108ac:	310d883a 	add	r6,r6,r4
   108b0:	1828d43a 	srli	r20,r3,16
   108b4:	a18d883a 	add	r6,r20,r6
   108b8:	81803e36 	bltu	r16,r6,109b4 <__udivdi3+0x504>
   108bc:	81803826 	beq	r16,r6,109a0 <__udivdi3+0x4f0>
   108c0:	0007883a 	mov	r3,zero
   108c4:	003fa206 	br	10750 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010750>
   108c8:	88e2983a 	sll	r17,r17,r3
   108cc:	80a8d83a 	srl	r20,r16,r2
   108d0:	80e0983a 	sll	r16,r16,r3
   108d4:	882ad43a 	srli	r21,r17,16
   108d8:	9884d83a 	srl	r2,r19,r2
   108dc:	a009883a 	mov	r4,r20
   108e0:	a80b883a 	mov	r5,r21
   108e4:	142eb03a 	or	r23,r2,r16
   108e8:	98e4983a 	sll	r18,r19,r3
   108ec:	00110bc0 	call	110bc <__umodsi3>
   108f0:	a009883a 	mov	r4,r20
   108f4:	a80b883a 	mov	r5,r21
   108f8:	1021883a 	mov	r16,r2
   108fc:	00110580 	call	11058 <__udivsi3>
   10900:	1039883a 	mov	fp,r2
   10904:	8d3fffcc 	andi	r20,r17,65535
   10908:	8020943a 	slli	r16,r16,16
   1090c:	b804d43a 	srli	r2,r23,16
   10910:	a72d383a 	mul	r22,r20,fp
   10914:	1404b03a 	or	r2,r2,r16
   10918:	1580062e 	bgeu	r2,r22,10934 <__udivdi3+0x484>
   1091c:	1445883a 	add	r2,r2,r17
   10920:	e0ffffc4 	addi	r3,fp,-1
   10924:	14403836 	bltu	r2,r17,10a08 <__udivdi3+0x558>
   10928:	1580372e 	bgeu	r2,r22,10a08 <__udivdi3+0x558>
   1092c:	e73fff84 	addi	fp,fp,-2
   10930:	1445883a 	add	r2,r2,r17
   10934:	15adc83a 	sub	r22,r2,r22
   10938:	a80b883a 	mov	r5,r21
   1093c:	b009883a 	mov	r4,r22
   10940:	00110bc0 	call	110bc <__umodsi3>
   10944:	1027883a 	mov	r19,r2
   10948:	b009883a 	mov	r4,r22
   1094c:	a80b883a 	mov	r5,r21
   10950:	00110580 	call	11058 <__udivsi3>
   10954:	9826943a 	slli	r19,r19,16
   10958:	a0a1383a 	mul	r16,r20,r2
   1095c:	b93fffcc 	andi	r4,r23,65535
   10960:	24c8b03a 	or	r4,r4,r19
   10964:	2400062e 	bgeu	r4,r16,10980 <__udivdi3+0x4d0>
   10968:	2449883a 	add	r4,r4,r17
   1096c:	10ffffc4 	addi	r3,r2,-1
   10970:	24402336 	bltu	r4,r17,10a00 <__udivdi3+0x550>
   10974:	2400222e 	bgeu	r4,r16,10a00 <__udivdi3+0x550>
   10978:	10bfff84 	addi	r2,r2,-2
   1097c:	2449883a 	add	r4,r4,r17
   10980:	e038943a 	slli	fp,fp,16
   10984:	2421c83a 	sub	r16,r4,r16
   10988:	e086b03a 	or	r3,fp,r2
   1098c:	003f4306 	br	1069c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701069c>
   10990:	2005883a 	mov	r2,r4
   10994:	003f6906 	br	1073c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701073c>
   10998:	1805883a 	mov	r2,r3
   1099c:	003f0f06 	br	105dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70105dc>
   109a0:	1806943a 	slli	r3,r3,16
   109a4:	9d66983a 	sll	r19,r19,r21
   109a8:	39ffffcc 	andi	r7,r7,65535
   109ac:	19c7883a 	add	r3,r3,r7
   109b0:	98ffc32e 	bgeu	r19,r3,108c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70108c0>
   109b4:	10bfffc4 	addi	r2,r2,-1
   109b8:	003fc106 	br	108c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70108c0>
   109bc:	00800604 	movi	r2,24
   109c0:	003f1106 	br	10608 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010608>
   109c4:	00800604 	movi	r2,24
   109c8:	003f2706 	br	10668 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010668>
   109cc:	00800604 	movi	r2,24
   109d0:	003ece06 	br	1050c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701050c>
   109d4:	0007883a 	mov	r3,zero
   109d8:	00800044 	movi	r2,1
   109dc:	003f5c06 	br	10750 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010750>
   109e0:	813fa12e 	bgeu	r16,r4,10868 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010868>
   109e4:	10bfff84 	addi	r2,r2,-2
   109e8:	85e1883a 	add	r16,r16,r23
   109ec:	003f9f06 	br	1086c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701086c>
   109f0:	1c7f8a2e 	bgeu	r3,r17,1081c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701081c>
   109f4:	31bfff84 	addi	r6,r6,-2
   109f8:	1dc7883a 	add	r3,r3,r23
   109fc:	003f8806 	br	10820 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010820>
   10a00:	1805883a 	mov	r2,r3
   10a04:	003fde06 	br	10980 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010980>
   10a08:	1839883a 	mov	fp,r3
   10a0c:	003fc906 	br	10934 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010934>
   10a10:	b5bfff84 	addi	r22,r22,-2
   10a14:	2449883a 	add	r4,r4,r17
   10a18:	003f3406 	br	106ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70106ec>
   10a1c:	b5bfff84 	addi	r22,r22,-2
   10a20:	1445883a 	add	r2,r2,r17
   10a24:	003edb06 	br	10594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010594>

00010a28 <__umoddi3>:
   10a28:	defff404 	addi	sp,sp,-48
   10a2c:	df000a15 	stw	fp,40(sp)
   10a30:	dc400315 	stw	r17,12(sp)
   10a34:	dc000215 	stw	r16,8(sp)
   10a38:	dfc00b15 	stw	ra,44(sp)
   10a3c:	ddc00915 	stw	r23,36(sp)
   10a40:	dd800815 	stw	r22,32(sp)
   10a44:	dd400715 	stw	r21,28(sp)
   10a48:	dd000615 	stw	r20,24(sp)
   10a4c:	dcc00515 	stw	r19,20(sp)
   10a50:	dc800415 	stw	r18,16(sp)
   10a54:	2021883a 	mov	r16,r4
   10a58:	2823883a 	mov	r17,r5
   10a5c:	2839883a 	mov	fp,r5
   10a60:	38003c1e 	bne	r7,zero,10b54 <__umoddi3+0x12c>
   10a64:	3027883a 	mov	r19,r6
   10a68:	2029883a 	mov	r20,r4
   10a6c:	2980512e 	bgeu	r5,r6,10bb4 <__umoddi3+0x18c>
   10a70:	00bfffd4 	movui	r2,65535
   10a74:	11809a36 	bltu	r2,r6,10ce0 <__umoddi3+0x2b8>
   10a78:	01003fc4 	movi	r4,255
   10a7c:	2189803a 	cmpltu	r4,r4,r6
   10a80:	200890fa 	slli	r4,r4,3
   10a84:	3104d83a 	srl	r2,r6,r4
   10a88:	00c000b4 	movhi	r3,2
   10a8c:	18ffaf04 	addi	r3,r3,-324
   10a90:	1885883a 	add	r2,r3,r2
   10a94:	10c00003 	ldbu	r3,0(r2)
   10a98:	00800804 	movi	r2,32
   10a9c:	1909883a 	add	r4,r3,r4
   10aa0:	1125c83a 	sub	r18,r2,r4
   10aa4:	90000526 	beq	r18,zero,10abc <__umoddi3+0x94>
   10aa8:	8ca2983a 	sll	r17,r17,r18
   10aac:	8108d83a 	srl	r4,r16,r4
   10ab0:	34a6983a 	sll	r19,r6,r18
   10ab4:	84a8983a 	sll	r20,r16,r18
   10ab8:	2478b03a 	or	fp,r4,r17
   10abc:	982ed43a 	srli	r23,r19,16
   10ac0:	e009883a 	mov	r4,fp
   10ac4:	9dbfffcc 	andi	r22,r19,65535
   10ac8:	b80b883a 	mov	r5,r23
   10acc:	00110bc0 	call	110bc <__umodsi3>
   10ad0:	e009883a 	mov	r4,fp
   10ad4:	b80b883a 	mov	r5,r23
   10ad8:	102b883a 	mov	r21,r2
   10adc:	00110580 	call	11058 <__udivsi3>
   10ae0:	a806943a 	slli	r3,r21,16
   10ae4:	a008d43a 	srli	r4,r20,16
   10ae8:	b085383a 	mul	r2,r22,r2
   10aec:	20c8b03a 	or	r4,r4,r3
   10af0:	2080032e 	bgeu	r4,r2,10b00 <__umoddi3+0xd8>
   10af4:	24c9883a 	add	r4,r4,r19
   10af8:	24c00136 	bltu	r4,r19,10b00 <__umoddi3+0xd8>
   10afc:	20811036 	bltu	r4,r2,10f40 <__umoddi3+0x518>
   10b00:	20abc83a 	sub	r21,r4,r2
   10b04:	b80b883a 	mov	r5,r23
   10b08:	a809883a 	mov	r4,r21
   10b0c:	00110bc0 	call	110bc <__umodsi3>
   10b10:	1023883a 	mov	r17,r2
   10b14:	b80b883a 	mov	r5,r23
   10b18:	a809883a 	mov	r4,r21
   10b1c:	00110580 	call	11058 <__udivsi3>
   10b20:	8822943a 	slli	r17,r17,16
   10b24:	b085383a 	mul	r2,r22,r2
   10b28:	a0ffffcc 	andi	r3,r20,65535
   10b2c:	1c46b03a 	or	r3,r3,r17
   10b30:	1880042e 	bgeu	r3,r2,10b44 <__umoddi3+0x11c>
   10b34:	1cc7883a 	add	r3,r3,r19
   10b38:	1cc00236 	bltu	r3,r19,10b44 <__umoddi3+0x11c>
   10b3c:	1880012e 	bgeu	r3,r2,10b44 <__umoddi3+0x11c>
   10b40:	1cc7883a 	add	r3,r3,r19
   10b44:	1885c83a 	sub	r2,r3,r2
   10b48:	1484d83a 	srl	r2,r2,r18
   10b4c:	0007883a 	mov	r3,zero
   10b50:	00004f06 	br	10c90 <__umoddi3+0x268>
   10b54:	29c04c36 	bltu	r5,r7,10c88 <__umoddi3+0x260>
   10b58:	00bfffd4 	movui	r2,65535
   10b5c:	11c0582e 	bgeu	r2,r7,10cc0 <__umoddi3+0x298>
   10b60:	00804034 	movhi	r2,256
   10b64:	10bfffc4 	addi	r2,r2,-1
   10b68:	11c0e736 	bltu	r2,r7,10f08 <__umoddi3+0x4e0>
   10b6c:	01000404 	movi	r4,16
   10b70:	3904d83a 	srl	r2,r7,r4
   10b74:	00c000b4 	movhi	r3,2
   10b78:	18ffaf04 	addi	r3,r3,-324
   10b7c:	1885883a 	add	r2,r3,r2
   10b80:	14c00003 	ldbu	r19,0(r2)
   10b84:	00c00804 	movi	r3,32
   10b88:	9927883a 	add	r19,r19,r4
   10b8c:	1ce9c83a 	sub	r20,r3,r19
   10b90:	a000581e 	bne	r20,zero,10cf4 <__umoddi3+0x2cc>
   10b94:	3c400136 	bltu	r7,r17,10b9c <__umoddi3+0x174>
   10b98:	8180eb36 	bltu	r16,r6,10f48 <__umoddi3+0x520>
   10b9c:	8185c83a 	sub	r2,r16,r6
   10ba0:	89e3c83a 	sub	r17,r17,r7
   10ba4:	8089803a 	cmpltu	r4,r16,r2
   10ba8:	8939c83a 	sub	fp,r17,r4
   10bac:	e007883a 	mov	r3,fp
   10bb0:	00003706 	br	10c90 <__umoddi3+0x268>
   10bb4:	3000041e 	bne	r6,zero,10bc8 <__umoddi3+0x1a0>
   10bb8:	000b883a 	mov	r5,zero
   10bbc:	01000044 	movi	r4,1
   10bc0:	00110580 	call	11058 <__udivsi3>
   10bc4:	1027883a 	mov	r19,r2
   10bc8:	00bfffd4 	movui	r2,65535
   10bcc:	14c0402e 	bgeu	r2,r19,10cd0 <__umoddi3+0x2a8>
   10bd0:	00804034 	movhi	r2,256
   10bd4:	10bfffc4 	addi	r2,r2,-1
   10bd8:	14c0cd36 	bltu	r2,r19,10f10 <__umoddi3+0x4e8>
   10bdc:	00800404 	movi	r2,16
   10be0:	9886d83a 	srl	r3,r19,r2
   10be4:	010000b4 	movhi	r4,2
   10be8:	213faf04 	addi	r4,r4,-324
   10bec:	20c7883a 	add	r3,r4,r3
   10bf0:	18c00003 	ldbu	r3,0(r3)
   10bf4:	1887883a 	add	r3,r3,r2
   10bf8:	00800804 	movi	r2,32
   10bfc:	10e5c83a 	sub	r18,r2,r3
   10c00:	9000901e 	bne	r18,zero,10e44 <__umoddi3+0x41c>
   10c04:	982cd43a 	srli	r22,r19,16
   10c08:	8ce3c83a 	sub	r17,r17,r19
   10c0c:	9d7fffcc 	andi	r21,r19,65535
   10c10:	b00b883a 	mov	r5,r22
   10c14:	8809883a 	mov	r4,r17
   10c18:	00110bc0 	call	110bc <__umodsi3>
   10c1c:	8809883a 	mov	r4,r17
   10c20:	b00b883a 	mov	r5,r22
   10c24:	1021883a 	mov	r16,r2
   10c28:	00110580 	call	11058 <__udivsi3>
   10c2c:	8006943a 	slli	r3,r16,16
   10c30:	a008d43a 	srli	r4,r20,16
   10c34:	1545383a 	mul	r2,r2,r21
   10c38:	20c8b03a 	or	r4,r4,r3
   10c3c:	2080042e 	bgeu	r4,r2,10c50 <__umoddi3+0x228>
   10c40:	24c9883a 	add	r4,r4,r19
   10c44:	24c00236 	bltu	r4,r19,10c50 <__umoddi3+0x228>
   10c48:	2080012e 	bgeu	r4,r2,10c50 <__umoddi3+0x228>
   10c4c:	24c9883a 	add	r4,r4,r19
   10c50:	20a1c83a 	sub	r16,r4,r2
   10c54:	b00b883a 	mov	r5,r22
   10c58:	8009883a 	mov	r4,r16
   10c5c:	00110bc0 	call	110bc <__umodsi3>
   10c60:	1023883a 	mov	r17,r2
   10c64:	b00b883a 	mov	r5,r22
   10c68:	8009883a 	mov	r4,r16
   10c6c:	00110580 	call	11058 <__udivsi3>
   10c70:	8822943a 	slli	r17,r17,16
   10c74:	1545383a 	mul	r2,r2,r21
   10c78:	a53fffcc 	andi	r20,r20,65535
   10c7c:	a446b03a 	or	r3,r20,r17
   10c80:	18bfb02e 	bgeu	r3,r2,10b44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010b44>
   10c84:	003fab06 	br	10b34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010b34>
   10c88:	2005883a 	mov	r2,r4
   10c8c:	2807883a 	mov	r3,r5
   10c90:	dfc00b17 	ldw	ra,44(sp)
   10c94:	df000a17 	ldw	fp,40(sp)
   10c98:	ddc00917 	ldw	r23,36(sp)
   10c9c:	dd800817 	ldw	r22,32(sp)
   10ca0:	dd400717 	ldw	r21,28(sp)
   10ca4:	dd000617 	ldw	r20,24(sp)
   10ca8:	dcc00517 	ldw	r19,20(sp)
   10cac:	dc800417 	ldw	r18,16(sp)
   10cb0:	dc400317 	ldw	r17,12(sp)
   10cb4:	dc000217 	ldw	r16,8(sp)
   10cb8:	dec00c04 	addi	sp,sp,48
   10cbc:	f800283a 	ret
   10cc0:	04c03fc4 	movi	r19,255
   10cc4:	99c9803a 	cmpltu	r4,r19,r7
   10cc8:	200890fa 	slli	r4,r4,3
   10ccc:	003fa806 	br	10b70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010b70>
   10cd0:	00803fc4 	movi	r2,255
   10cd4:	14c5803a 	cmpltu	r2,r2,r19
   10cd8:	100490fa 	slli	r2,r2,3
   10cdc:	003fc006 	br	10be0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010be0>
   10ce0:	00804034 	movhi	r2,256
   10ce4:	10bfffc4 	addi	r2,r2,-1
   10ce8:	11808b36 	bltu	r2,r6,10f18 <__umoddi3+0x4f0>
   10cec:	01000404 	movi	r4,16
   10cf0:	003f6406 	br	10a84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010a84>
   10cf4:	34c4d83a 	srl	r2,r6,r19
   10cf8:	3d0e983a 	sll	r7,r7,r20
   10cfc:	8cf8d83a 	srl	fp,r17,r19
   10d00:	8d10983a 	sll	r8,r17,r20
   10d04:	38aab03a 	or	r21,r7,r2
   10d08:	a82cd43a 	srli	r22,r21,16
   10d0c:	84e2d83a 	srl	r17,r16,r19
   10d10:	e009883a 	mov	r4,fp
   10d14:	b00b883a 	mov	r5,r22
   10d18:	8a22b03a 	or	r17,r17,r8
   10d1c:	3524983a 	sll	r18,r6,r20
   10d20:	00110bc0 	call	110bc <__umodsi3>
   10d24:	e009883a 	mov	r4,fp
   10d28:	b00b883a 	mov	r5,r22
   10d2c:	102f883a 	mov	r23,r2
   10d30:	00110580 	call	11058 <__udivsi3>
   10d34:	100d883a 	mov	r6,r2
   10d38:	b808943a 	slli	r4,r23,16
   10d3c:	aa3fffcc 	andi	r8,r21,65535
   10d40:	8804d43a 	srli	r2,r17,16
   10d44:	41af383a 	mul	r23,r8,r6
   10d48:	8520983a 	sll	r16,r16,r20
   10d4c:	1104b03a 	or	r2,r2,r4
   10d50:	15c0042e 	bgeu	r2,r23,10d64 <__umoddi3+0x33c>
   10d54:	1545883a 	add	r2,r2,r21
   10d58:	30ffffc4 	addi	r3,r6,-1
   10d5c:	1540742e 	bgeu	r2,r21,10f30 <__umoddi3+0x508>
   10d60:	180d883a 	mov	r6,r3
   10d64:	15efc83a 	sub	r23,r2,r23
   10d68:	b00b883a 	mov	r5,r22
   10d6c:	b809883a 	mov	r4,r23
   10d70:	d9800115 	stw	r6,4(sp)
   10d74:	da000015 	stw	r8,0(sp)
   10d78:	00110bc0 	call	110bc <__umodsi3>
   10d7c:	b00b883a 	mov	r5,r22
   10d80:	b809883a 	mov	r4,r23
   10d84:	1039883a 	mov	fp,r2
   10d88:	00110580 	call	11058 <__udivsi3>
   10d8c:	da000017 	ldw	r8,0(sp)
   10d90:	e038943a 	slli	fp,fp,16
   10d94:	100b883a 	mov	r5,r2
   10d98:	4089383a 	mul	r4,r8,r2
   10d9c:	8a3fffcc 	andi	r8,r17,65535
   10da0:	4710b03a 	or	r8,r8,fp
   10da4:	d9800117 	ldw	r6,4(sp)
   10da8:	4100042e 	bgeu	r8,r4,10dbc <__umoddi3+0x394>
   10dac:	4551883a 	add	r8,r8,r21
   10db0:	10bfffc4 	addi	r2,r2,-1
   10db4:	45405a2e 	bgeu	r8,r21,10f20 <__umoddi3+0x4f8>
   10db8:	100b883a 	mov	r5,r2
   10dbc:	300c943a 	slli	r6,r6,16
   10dc0:	91ffffcc 	andi	r7,r18,65535
   10dc4:	9004d43a 	srli	r2,r18,16
   10dc8:	314cb03a 	or	r6,r6,r5
   10dcc:	317fffcc 	andi	r5,r6,65535
   10dd0:	300cd43a 	srli	r6,r6,16
   10dd4:	29d3383a 	mul	r9,r5,r7
   10dd8:	288b383a 	mul	r5,r5,r2
   10ddc:	31cf383a 	mul	r7,r6,r7
   10de0:	4806d43a 	srli	r3,r9,16
   10de4:	4111c83a 	sub	r8,r8,r4
   10de8:	29cb883a 	add	r5,r5,r7
   10dec:	194b883a 	add	r5,r3,r5
   10df0:	3085383a 	mul	r2,r6,r2
   10df4:	29c0022e 	bgeu	r5,r7,10e00 <__umoddi3+0x3d8>
   10df8:	00c00074 	movhi	r3,1
   10dfc:	10c5883a 	add	r2,r2,r3
   10e00:	2808d43a 	srli	r4,r5,16
   10e04:	280a943a 	slli	r5,r5,16
   10e08:	4a7fffcc 	andi	r9,r9,65535
   10e0c:	2085883a 	add	r2,r4,r2
   10e10:	2a4b883a 	add	r5,r5,r9
   10e14:	40803636 	bltu	r8,r2,10ef0 <__umoddi3+0x4c8>
   10e18:	40804d26 	beq	r8,r2,10f50 <__umoddi3+0x528>
   10e1c:	4089c83a 	sub	r4,r8,r2
   10e20:	280f883a 	mov	r7,r5
   10e24:	81cfc83a 	sub	r7,r16,r7
   10e28:	81c7803a 	cmpltu	r3,r16,r7
   10e2c:	20c7c83a 	sub	r3,r4,r3
   10e30:	1cc4983a 	sll	r2,r3,r19
   10e34:	3d0ed83a 	srl	r7,r7,r20
   10e38:	1d06d83a 	srl	r3,r3,r20
   10e3c:	11c4b03a 	or	r2,r2,r7
   10e40:	003f9306 	br	10c90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010c90>
   10e44:	9ca6983a 	sll	r19,r19,r18
   10e48:	88e8d83a 	srl	r20,r17,r3
   10e4c:	80c4d83a 	srl	r2,r16,r3
   10e50:	982cd43a 	srli	r22,r19,16
   10e54:	8ca2983a 	sll	r17,r17,r18
   10e58:	a009883a 	mov	r4,r20
   10e5c:	b00b883a 	mov	r5,r22
   10e60:	1478b03a 	or	fp,r2,r17
   10e64:	00110bc0 	call	110bc <__umodsi3>
   10e68:	a009883a 	mov	r4,r20
   10e6c:	b00b883a 	mov	r5,r22
   10e70:	1023883a 	mov	r17,r2
   10e74:	00110580 	call	11058 <__udivsi3>
   10e78:	9d7fffcc 	andi	r21,r19,65535
   10e7c:	880a943a 	slli	r5,r17,16
   10e80:	e008d43a 	srli	r4,fp,16
   10e84:	a885383a 	mul	r2,r21,r2
   10e88:	84a8983a 	sll	r20,r16,r18
   10e8c:	2148b03a 	or	r4,r4,r5
   10e90:	2080042e 	bgeu	r4,r2,10ea4 <__umoddi3+0x47c>
   10e94:	24c9883a 	add	r4,r4,r19
   10e98:	24c00236 	bltu	r4,r19,10ea4 <__umoddi3+0x47c>
   10e9c:	2080012e 	bgeu	r4,r2,10ea4 <__umoddi3+0x47c>
   10ea0:	24c9883a 	add	r4,r4,r19
   10ea4:	20a3c83a 	sub	r17,r4,r2
   10ea8:	b00b883a 	mov	r5,r22
   10eac:	8809883a 	mov	r4,r17
   10eb0:	00110bc0 	call	110bc <__umodsi3>
   10eb4:	102f883a 	mov	r23,r2
   10eb8:	8809883a 	mov	r4,r17
   10ebc:	b00b883a 	mov	r5,r22
   10ec0:	00110580 	call	11058 <__udivsi3>
   10ec4:	b82e943a 	slli	r23,r23,16
   10ec8:	a885383a 	mul	r2,r21,r2
   10ecc:	e13fffcc 	andi	r4,fp,65535
   10ed0:	25c8b03a 	or	r4,r4,r23
   10ed4:	2080042e 	bgeu	r4,r2,10ee8 <__umoddi3+0x4c0>
   10ed8:	24c9883a 	add	r4,r4,r19
   10edc:	24c00236 	bltu	r4,r19,10ee8 <__umoddi3+0x4c0>
   10ee0:	2080012e 	bgeu	r4,r2,10ee8 <__umoddi3+0x4c0>
   10ee4:	24c9883a 	add	r4,r4,r19
   10ee8:	20a3c83a 	sub	r17,r4,r2
   10eec:	003f4806 	br	10c10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010c10>
   10ef0:	2c8fc83a 	sub	r7,r5,r18
   10ef4:	1545c83a 	sub	r2,r2,r21
   10ef8:	29cb803a 	cmpltu	r5,r5,r7
   10efc:	1145c83a 	sub	r2,r2,r5
   10f00:	4089c83a 	sub	r4,r8,r2
   10f04:	003fc706 	br	10e24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010e24>
   10f08:	01000604 	movi	r4,24
   10f0c:	003f1806 	br	10b70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010b70>
   10f10:	00800604 	movi	r2,24
   10f14:	003f3206 	br	10be0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010be0>
   10f18:	01000604 	movi	r4,24
   10f1c:	003ed906 	br	10a84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010a84>
   10f20:	413fa52e 	bgeu	r8,r4,10db8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010db8>
   10f24:	297fff84 	addi	r5,r5,-2
   10f28:	4551883a 	add	r8,r8,r21
   10f2c:	003fa306 	br	10dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010dbc>
   10f30:	15ff8b2e 	bgeu	r2,r23,10d60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010d60>
   10f34:	31bfff84 	addi	r6,r6,-2
   10f38:	1545883a 	add	r2,r2,r21
   10f3c:	003f8906 	br	10d64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010d64>
   10f40:	24c9883a 	add	r4,r4,r19
   10f44:	003eee06 	br	10b00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010b00>
   10f48:	8005883a 	mov	r2,r16
   10f4c:	003f1706 	br	10bac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010bac>
   10f50:	817fe736 	bltu	r16,r5,10ef0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010ef0>
   10f54:	280f883a 	mov	r7,r5
   10f58:	0009883a 	mov	r4,zero
   10f5c:	003fb106 	br	10e24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010e24>

00010f60 <__divsi3>:
   10f60:	20001b16 	blt	r4,zero,10fd0 <__divsi3+0x70>
   10f64:	000f883a 	mov	r7,zero
   10f68:	28001616 	blt	r5,zero,10fc4 <__divsi3+0x64>
   10f6c:	200d883a 	mov	r6,r4
   10f70:	29001a2e 	bgeu	r5,r4,10fdc <__divsi3+0x7c>
   10f74:	00800804 	movi	r2,32
   10f78:	00c00044 	movi	r3,1
   10f7c:	00000106 	br	10f84 <__divsi3+0x24>
   10f80:	10000d26 	beq	r2,zero,10fb8 <__divsi3+0x58>
   10f84:	294b883a 	add	r5,r5,r5
   10f88:	10bfffc4 	addi	r2,r2,-1
   10f8c:	18c7883a 	add	r3,r3,r3
   10f90:	293ffb36 	bltu	r5,r4,10f80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010f80>
   10f94:	0005883a 	mov	r2,zero
   10f98:	18000726 	beq	r3,zero,10fb8 <__divsi3+0x58>
   10f9c:	0005883a 	mov	r2,zero
   10fa0:	31400236 	bltu	r6,r5,10fac <__divsi3+0x4c>
   10fa4:	314dc83a 	sub	r6,r6,r5
   10fa8:	10c4b03a 	or	r2,r2,r3
   10fac:	1806d07a 	srli	r3,r3,1
   10fb0:	280ad07a 	srli	r5,r5,1
   10fb4:	183ffa1e 	bne	r3,zero,10fa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010fa0>
   10fb8:	38000126 	beq	r7,zero,10fc0 <__divsi3+0x60>
   10fbc:	0085c83a 	sub	r2,zero,r2
   10fc0:	f800283a 	ret
   10fc4:	014bc83a 	sub	r5,zero,r5
   10fc8:	39c0005c 	xori	r7,r7,1
   10fcc:	003fe706 	br	10f6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010f6c>
   10fd0:	0109c83a 	sub	r4,zero,r4
   10fd4:	01c00044 	movi	r7,1
   10fd8:	003fe306 	br	10f68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010f68>
   10fdc:	00c00044 	movi	r3,1
   10fe0:	003fee06 	br	10f9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010f9c>

00010fe4 <__modsi3>:
   10fe4:	20001716 	blt	r4,zero,11044 <__modsi3+0x60>
   10fe8:	000f883a 	mov	r7,zero
   10fec:	2005883a 	mov	r2,r4
   10ff0:	28001216 	blt	r5,zero,1103c <__modsi3+0x58>
   10ff4:	2900162e 	bgeu	r5,r4,11050 <__modsi3+0x6c>
   10ff8:	01800804 	movi	r6,32
   10ffc:	00c00044 	movi	r3,1
   11000:	00000106 	br	11008 <__modsi3+0x24>
   11004:	30000a26 	beq	r6,zero,11030 <__modsi3+0x4c>
   11008:	294b883a 	add	r5,r5,r5
   1100c:	31bfffc4 	addi	r6,r6,-1
   11010:	18c7883a 	add	r3,r3,r3
   11014:	293ffb36 	bltu	r5,r4,11004 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011004>
   11018:	18000526 	beq	r3,zero,11030 <__modsi3+0x4c>
   1101c:	1806d07a 	srli	r3,r3,1
   11020:	11400136 	bltu	r2,r5,11028 <__modsi3+0x44>
   11024:	1145c83a 	sub	r2,r2,r5
   11028:	280ad07a 	srli	r5,r5,1
   1102c:	183ffb1e 	bne	r3,zero,1101c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701101c>
   11030:	38000126 	beq	r7,zero,11038 <__modsi3+0x54>
   11034:	0085c83a 	sub	r2,zero,r2
   11038:	f800283a 	ret
   1103c:	014bc83a 	sub	r5,zero,r5
   11040:	003fec06 	br	10ff4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010ff4>
   11044:	0109c83a 	sub	r4,zero,r4
   11048:	01c00044 	movi	r7,1
   1104c:	003fe706 	br	10fec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010fec>
   11050:	00c00044 	movi	r3,1
   11054:	003ff106 	br	1101c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701101c>

00011058 <__udivsi3>:
   11058:	200d883a 	mov	r6,r4
   1105c:	2900152e 	bgeu	r5,r4,110b4 <__udivsi3+0x5c>
   11060:	28001416 	blt	r5,zero,110b4 <__udivsi3+0x5c>
   11064:	00800804 	movi	r2,32
   11068:	00c00044 	movi	r3,1
   1106c:	00000206 	br	11078 <__udivsi3+0x20>
   11070:	10000e26 	beq	r2,zero,110ac <__udivsi3+0x54>
   11074:	28000516 	blt	r5,zero,1108c <__udivsi3+0x34>
   11078:	294b883a 	add	r5,r5,r5
   1107c:	10bfffc4 	addi	r2,r2,-1
   11080:	18c7883a 	add	r3,r3,r3
   11084:	293ffa36 	bltu	r5,r4,11070 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011070>
   11088:	18000826 	beq	r3,zero,110ac <__udivsi3+0x54>
   1108c:	0005883a 	mov	r2,zero
   11090:	31400236 	bltu	r6,r5,1109c <__udivsi3+0x44>
   11094:	314dc83a 	sub	r6,r6,r5
   11098:	10c4b03a 	or	r2,r2,r3
   1109c:	1806d07a 	srli	r3,r3,1
   110a0:	280ad07a 	srli	r5,r5,1
   110a4:	183ffa1e 	bne	r3,zero,11090 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011090>
   110a8:	f800283a 	ret
   110ac:	0005883a 	mov	r2,zero
   110b0:	f800283a 	ret
   110b4:	00c00044 	movi	r3,1
   110b8:	003ff406 	br	1108c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701108c>

000110bc <__umodsi3>:
   110bc:	2005883a 	mov	r2,r4
   110c0:	2900122e 	bgeu	r5,r4,1110c <__umodsi3+0x50>
   110c4:	28001116 	blt	r5,zero,1110c <__umodsi3+0x50>
   110c8:	01800804 	movi	r6,32
   110cc:	00c00044 	movi	r3,1
   110d0:	00000206 	br	110dc <__umodsi3+0x20>
   110d4:	30000c26 	beq	r6,zero,11108 <__umodsi3+0x4c>
   110d8:	28000516 	blt	r5,zero,110f0 <__umodsi3+0x34>
   110dc:	294b883a 	add	r5,r5,r5
   110e0:	31bfffc4 	addi	r6,r6,-1
   110e4:	18c7883a 	add	r3,r3,r3
   110e8:	293ffa36 	bltu	r5,r4,110d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70110d4>
   110ec:	18000626 	beq	r3,zero,11108 <__umodsi3+0x4c>
   110f0:	1806d07a 	srli	r3,r3,1
   110f4:	11400136 	bltu	r2,r5,110fc <__umodsi3+0x40>
   110f8:	1145c83a 	sub	r2,r2,r5
   110fc:	280ad07a 	srli	r5,r5,1
   11100:	183ffb1e 	bne	r3,zero,110f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70110f0>
   11104:	f800283a 	ret
   11108:	f800283a 	ret
   1110c:	00c00044 	movi	r3,1
   11110:	003ff706 	br	110f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70110f0>

00011114 <__divdf3>:
   11114:	defff204 	addi	sp,sp,-56
   11118:	dd400915 	stw	r21,36(sp)
   1111c:	282ad53a 	srli	r21,r5,20
   11120:	dd000815 	stw	r20,32(sp)
   11124:	2828d7fa 	srli	r20,r5,31
   11128:	dc000415 	stw	r16,16(sp)
   1112c:	04000434 	movhi	r16,16
   11130:	df000c15 	stw	fp,48(sp)
   11134:	843fffc4 	addi	r16,r16,-1
   11138:	dfc00d15 	stw	ra,52(sp)
   1113c:	ddc00b15 	stw	r23,44(sp)
   11140:	dd800a15 	stw	r22,40(sp)
   11144:	dcc00715 	stw	r19,28(sp)
   11148:	dc800615 	stw	r18,24(sp)
   1114c:	dc400515 	stw	r17,20(sp)
   11150:	ad41ffcc 	andi	r21,r21,2047
   11154:	2c20703a 	and	r16,r5,r16
   11158:	a7003fcc 	andi	fp,r20,255
   1115c:	a8006126 	beq	r21,zero,112e4 <__divdf3+0x1d0>
   11160:	0081ffc4 	movi	r2,2047
   11164:	2025883a 	mov	r18,r4
   11168:	a8803726 	beq	r21,r2,11248 <__divdf3+0x134>
   1116c:	80800434 	orhi	r2,r16,16
   11170:	100490fa 	slli	r2,r2,3
   11174:	2020d77a 	srli	r16,r4,29
   11178:	202490fa 	slli	r18,r4,3
   1117c:	ad7f0044 	addi	r21,r21,-1023
   11180:	80a0b03a 	or	r16,r16,r2
   11184:	0027883a 	mov	r19,zero
   11188:	0013883a 	mov	r9,zero
   1118c:	3804d53a 	srli	r2,r7,20
   11190:	382cd7fa 	srli	r22,r7,31
   11194:	04400434 	movhi	r17,16
   11198:	8c7fffc4 	addi	r17,r17,-1
   1119c:	1081ffcc 	andi	r2,r2,2047
   111a0:	3011883a 	mov	r8,r6
   111a4:	3c62703a 	and	r17,r7,r17
   111a8:	b5c03fcc 	andi	r23,r22,255
   111ac:	10006c26 	beq	r2,zero,11360 <__divdf3+0x24c>
   111b0:	00c1ffc4 	movi	r3,2047
   111b4:	10c06426 	beq	r2,r3,11348 <__divdf3+0x234>
   111b8:	88c00434 	orhi	r3,r17,16
   111bc:	180690fa 	slli	r3,r3,3
   111c0:	3022d77a 	srli	r17,r6,29
   111c4:	301090fa 	slli	r8,r6,3
   111c8:	10bf0044 	addi	r2,r2,-1023
   111cc:	88e2b03a 	or	r17,r17,r3
   111d0:	000f883a 	mov	r7,zero
   111d4:	a58cf03a 	xor	r6,r20,r22
   111d8:	3cc8b03a 	or	r4,r7,r19
   111dc:	a8abc83a 	sub	r21,r21,r2
   111e0:	008003c4 	movi	r2,15
   111e4:	3007883a 	mov	r3,r6
   111e8:	34c03fcc 	andi	r19,r6,255
   111ec:	11009036 	bltu	r2,r4,11430 <__divdf3+0x31c>
   111f0:	200890ba 	slli	r4,r4,2
   111f4:	00800074 	movhi	r2,1
   111f8:	10848204 	addi	r2,r2,4616
   111fc:	2089883a 	add	r4,r4,r2
   11200:	20800017 	ldw	r2,0(r4)
   11204:	1000683a 	jmp	r2
   11208:	00011430 	cmpltui	zero,zero,1104
   1120c:	00011280 	call	1128 <_ZN4Game7drawMapEv+0x314>
   11210:	00011420 	cmpeqi	zero,zero,1104
   11214:	00011274 	movhi	zero,1097
   11218:	00011420 	cmpeqi	zero,zero,1104
   1121c:	000113f4 	movhi	zero,1103
   11220:	00011420 	cmpeqi	zero,zero,1104
   11224:	00011274 	movhi	zero,1097
   11228:	00011280 	call	1128 <_ZN4Game7drawMapEv+0x314>
   1122c:	00011280 	call	1128 <_ZN4Game7drawMapEv+0x314>
   11230:	000113f4 	movhi	zero,1103
   11234:	00011274 	movhi	zero,1097
   11238:	00011264 	muli	zero,zero,1097
   1123c:	00011264 	muli	zero,zero,1097
   11240:	00011264 	muli	zero,zero,1097
   11244:	00011714 	movui	zero,1116
   11248:	2404b03a 	or	r2,r4,r16
   1124c:	1000661e 	bne	r2,zero,113e8 <__divdf3+0x2d4>
   11250:	04c00204 	movi	r19,8
   11254:	0021883a 	mov	r16,zero
   11258:	0025883a 	mov	r18,zero
   1125c:	02400084 	movi	r9,2
   11260:	003fca06 	br	1118c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701118c>
   11264:	8023883a 	mov	r17,r16
   11268:	9011883a 	mov	r8,r18
   1126c:	e02f883a 	mov	r23,fp
   11270:	480f883a 	mov	r7,r9
   11274:	00800084 	movi	r2,2
   11278:	3881311e 	bne	r7,r2,11740 <__divdf3+0x62c>
   1127c:	b827883a 	mov	r19,r23
   11280:	98c0004c 	andi	r3,r19,1
   11284:	0081ffc4 	movi	r2,2047
   11288:	000b883a 	mov	r5,zero
   1128c:	0025883a 	mov	r18,zero
   11290:	1004953a 	slli	r2,r2,20
   11294:	18c03fcc 	andi	r3,r3,255
   11298:	04400434 	movhi	r17,16
   1129c:	8c7fffc4 	addi	r17,r17,-1
   112a0:	180697fa 	slli	r3,r3,31
   112a4:	2c4a703a 	and	r5,r5,r17
   112a8:	288ab03a 	or	r5,r5,r2
   112ac:	28c6b03a 	or	r3,r5,r3
   112b0:	9005883a 	mov	r2,r18
   112b4:	dfc00d17 	ldw	ra,52(sp)
   112b8:	df000c17 	ldw	fp,48(sp)
   112bc:	ddc00b17 	ldw	r23,44(sp)
   112c0:	dd800a17 	ldw	r22,40(sp)
   112c4:	dd400917 	ldw	r21,36(sp)
   112c8:	dd000817 	ldw	r20,32(sp)
   112cc:	dcc00717 	ldw	r19,28(sp)
   112d0:	dc800617 	ldw	r18,24(sp)
   112d4:	dc400517 	ldw	r17,20(sp)
   112d8:	dc000417 	ldw	r16,16(sp)
   112dc:	dec00e04 	addi	sp,sp,56
   112e0:	f800283a 	ret
   112e4:	2404b03a 	or	r2,r4,r16
   112e8:	2027883a 	mov	r19,r4
   112ec:	10003926 	beq	r2,zero,113d4 <__divdf3+0x2c0>
   112f0:	80012e26 	beq	r16,zero,117ac <__divdf3+0x698>
   112f4:	8009883a 	mov	r4,r16
   112f8:	d9800315 	stw	r6,12(sp)
   112fc:	d9c00215 	stw	r7,8(sp)
   11300:	0006ab40 	call	6ab4 <__clzsi2>
   11304:	d9800317 	ldw	r6,12(sp)
   11308:	d9c00217 	ldw	r7,8(sp)
   1130c:	113ffd44 	addi	r4,r2,-11
   11310:	00c00704 	movi	r3,28
   11314:	19012116 	blt	r3,r4,1179c <__divdf3+0x688>
   11318:	00c00744 	movi	r3,29
   1131c:	147ffe04 	addi	r17,r2,-8
   11320:	1907c83a 	sub	r3,r3,r4
   11324:	8460983a 	sll	r16,r16,r17
   11328:	98c6d83a 	srl	r3,r19,r3
   1132c:	9c64983a 	sll	r18,r19,r17
   11330:	1c20b03a 	or	r16,r3,r16
   11334:	1080fcc4 	addi	r2,r2,1011
   11338:	00abc83a 	sub	r21,zero,r2
   1133c:	0027883a 	mov	r19,zero
   11340:	0013883a 	mov	r9,zero
   11344:	003f9106 	br	1118c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701118c>
   11348:	3446b03a 	or	r3,r6,r17
   1134c:	18001f1e 	bne	r3,zero,113cc <__divdf3+0x2b8>
   11350:	0023883a 	mov	r17,zero
   11354:	0011883a 	mov	r8,zero
   11358:	01c00084 	movi	r7,2
   1135c:	003f9d06 	br	111d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70111d4>
   11360:	3446b03a 	or	r3,r6,r17
   11364:	18001526 	beq	r3,zero,113bc <__divdf3+0x2a8>
   11368:	88011b26 	beq	r17,zero,117d8 <__divdf3+0x6c4>
   1136c:	8809883a 	mov	r4,r17
   11370:	d9800315 	stw	r6,12(sp)
   11374:	da400115 	stw	r9,4(sp)
   11378:	0006ab40 	call	6ab4 <__clzsi2>
   1137c:	d9800317 	ldw	r6,12(sp)
   11380:	da400117 	ldw	r9,4(sp)
   11384:	113ffd44 	addi	r4,r2,-11
   11388:	00c00704 	movi	r3,28
   1138c:	19010e16 	blt	r3,r4,117c8 <__divdf3+0x6b4>
   11390:	00c00744 	movi	r3,29
   11394:	123ffe04 	addi	r8,r2,-8
   11398:	1907c83a 	sub	r3,r3,r4
   1139c:	8a22983a 	sll	r17,r17,r8
   113a0:	30c6d83a 	srl	r3,r6,r3
   113a4:	3210983a 	sll	r8,r6,r8
   113a8:	1c62b03a 	or	r17,r3,r17
   113ac:	1080fcc4 	addi	r2,r2,1011
   113b0:	0085c83a 	sub	r2,zero,r2
   113b4:	000f883a 	mov	r7,zero
   113b8:	003f8606 	br	111d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70111d4>
   113bc:	0023883a 	mov	r17,zero
   113c0:	0011883a 	mov	r8,zero
   113c4:	01c00044 	movi	r7,1
   113c8:	003f8206 	br	111d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70111d4>
   113cc:	01c000c4 	movi	r7,3
   113d0:	003f8006 	br	111d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70111d4>
   113d4:	04c00104 	movi	r19,4
   113d8:	0021883a 	mov	r16,zero
   113dc:	0025883a 	mov	r18,zero
   113e0:	02400044 	movi	r9,1
   113e4:	003f6906 	br	1118c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701118c>
   113e8:	04c00304 	movi	r19,12
   113ec:	024000c4 	movi	r9,3
   113f0:	003f6606 	br	1118c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701118c>
   113f4:	01400434 	movhi	r5,16
   113f8:	0007883a 	mov	r3,zero
   113fc:	297fffc4 	addi	r5,r5,-1
   11400:	04bfffc4 	movi	r18,-1
   11404:	0081ffc4 	movi	r2,2047
   11408:	003fa106 	br	11290 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011290>
   1140c:	00c00044 	movi	r3,1
   11410:	1887c83a 	sub	r3,r3,r2
   11414:	01000e04 	movi	r4,56
   11418:	20c1210e 	bge	r4,r3,118a0 <__divdf3+0x78c>
   1141c:	98c0004c 	andi	r3,r19,1
   11420:	0005883a 	mov	r2,zero
   11424:	000b883a 	mov	r5,zero
   11428:	0025883a 	mov	r18,zero
   1142c:	003f9806 	br	11290 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011290>
   11430:	8c00fd36 	bltu	r17,r16,11828 <__divdf3+0x714>
   11434:	8440fb26 	beq	r16,r17,11824 <__divdf3+0x710>
   11438:	8007883a 	mov	r3,r16
   1143c:	ad7fffc4 	addi	r21,r21,-1
   11440:	0021883a 	mov	r16,zero
   11444:	4004d63a 	srli	r2,r8,24
   11448:	8822923a 	slli	r17,r17,8
   1144c:	1809883a 	mov	r4,r3
   11450:	402c923a 	slli	r22,r8,8
   11454:	88b8b03a 	or	fp,r17,r2
   11458:	e028d43a 	srli	r20,fp,16
   1145c:	d8c00015 	stw	r3,0(sp)
   11460:	e5ffffcc 	andi	r23,fp,65535
   11464:	a00b883a 	mov	r5,r20
   11468:	00110580 	call	11058 <__udivsi3>
   1146c:	d8c00017 	ldw	r3,0(sp)
   11470:	a00b883a 	mov	r5,r20
   11474:	d8800315 	stw	r2,12(sp)
   11478:	1809883a 	mov	r4,r3
   1147c:	00110bc0 	call	110bc <__umodsi3>
   11480:	d9800317 	ldw	r6,12(sp)
   11484:	1006943a 	slli	r3,r2,16
   11488:	9004d43a 	srli	r2,r18,16
   1148c:	b9a3383a 	mul	r17,r23,r6
   11490:	10c4b03a 	or	r2,r2,r3
   11494:	1440062e 	bgeu	r2,r17,114b0 <__divdf3+0x39c>
   11498:	1705883a 	add	r2,r2,fp
   1149c:	30ffffc4 	addi	r3,r6,-1
   114a0:	1700ee36 	bltu	r2,fp,1185c <__divdf3+0x748>
   114a4:	1440ed2e 	bgeu	r2,r17,1185c <__divdf3+0x748>
   114a8:	31bfff84 	addi	r6,r6,-2
   114ac:	1705883a 	add	r2,r2,fp
   114b0:	1463c83a 	sub	r17,r2,r17
   114b4:	a00b883a 	mov	r5,r20
   114b8:	8809883a 	mov	r4,r17
   114bc:	d9800315 	stw	r6,12(sp)
   114c0:	00110580 	call	11058 <__udivsi3>
   114c4:	a00b883a 	mov	r5,r20
   114c8:	8809883a 	mov	r4,r17
   114cc:	d8800215 	stw	r2,8(sp)
   114d0:	00110bc0 	call	110bc <__umodsi3>
   114d4:	d9c00217 	ldw	r7,8(sp)
   114d8:	1004943a 	slli	r2,r2,16
   114dc:	94bfffcc 	andi	r18,r18,65535
   114e0:	b9d1383a 	mul	r8,r23,r7
   114e4:	90a4b03a 	or	r18,r18,r2
   114e8:	d9800317 	ldw	r6,12(sp)
   114ec:	9200062e 	bgeu	r18,r8,11508 <__divdf3+0x3f4>
   114f0:	9725883a 	add	r18,r18,fp
   114f4:	38bfffc4 	addi	r2,r7,-1
   114f8:	9700d636 	bltu	r18,fp,11854 <__divdf3+0x740>
   114fc:	9200d52e 	bgeu	r18,r8,11854 <__divdf3+0x740>
   11500:	39ffff84 	addi	r7,r7,-2
   11504:	9725883a 	add	r18,r18,fp
   11508:	3004943a 	slli	r2,r6,16
   1150c:	b012d43a 	srli	r9,r22,16
   11510:	b1bfffcc 	andi	r6,r22,65535
   11514:	11e2b03a 	or	r17,r2,r7
   11518:	8806d43a 	srli	r3,r17,16
   1151c:	893fffcc 	andi	r4,r17,65535
   11520:	218b383a 	mul	r5,r4,r6
   11524:	30c5383a 	mul	r2,r6,r3
   11528:	2249383a 	mul	r4,r4,r9
   1152c:	280ed43a 	srli	r7,r5,16
   11530:	9225c83a 	sub	r18,r18,r8
   11534:	2089883a 	add	r4,r4,r2
   11538:	3909883a 	add	r4,r7,r4
   1153c:	1a47383a 	mul	r3,r3,r9
   11540:	2080022e 	bgeu	r4,r2,1154c <__divdf3+0x438>
   11544:	00800074 	movhi	r2,1
   11548:	1887883a 	add	r3,r3,r2
   1154c:	2004d43a 	srli	r2,r4,16
   11550:	2008943a 	slli	r4,r4,16
   11554:	297fffcc 	andi	r5,r5,65535
   11558:	10c7883a 	add	r3,r2,r3
   1155c:	2149883a 	add	r4,r4,r5
   11560:	90c0a536 	bltu	r18,r3,117f8 <__divdf3+0x6e4>
   11564:	90c0bf26 	beq	r18,r3,11864 <__divdf3+0x750>
   11568:	90c7c83a 	sub	r3,r18,r3
   1156c:	810fc83a 	sub	r7,r16,r4
   11570:	81e5803a 	cmpltu	r18,r16,r7
   11574:	1ca5c83a 	sub	r18,r3,r18
   11578:	e480c126 	beq	fp,r18,11880 <__divdf3+0x76c>
   1157c:	a00b883a 	mov	r5,r20
   11580:	9009883a 	mov	r4,r18
   11584:	d9800315 	stw	r6,12(sp)
   11588:	d9c00215 	stw	r7,8(sp)
   1158c:	da400115 	stw	r9,4(sp)
   11590:	00110580 	call	11058 <__udivsi3>
   11594:	a00b883a 	mov	r5,r20
   11598:	9009883a 	mov	r4,r18
   1159c:	d8800015 	stw	r2,0(sp)
   115a0:	00110bc0 	call	110bc <__umodsi3>
   115a4:	d9c00217 	ldw	r7,8(sp)
   115a8:	da000017 	ldw	r8,0(sp)
   115ac:	1006943a 	slli	r3,r2,16
   115b0:	3804d43a 	srli	r2,r7,16
   115b4:	ba21383a 	mul	r16,r23,r8
   115b8:	d9800317 	ldw	r6,12(sp)
   115bc:	10c4b03a 	or	r2,r2,r3
   115c0:	da400117 	ldw	r9,4(sp)
   115c4:	1400062e 	bgeu	r2,r16,115e0 <__divdf3+0x4cc>
   115c8:	1705883a 	add	r2,r2,fp
   115cc:	40ffffc4 	addi	r3,r8,-1
   115d0:	1700ad36 	bltu	r2,fp,11888 <__divdf3+0x774>
   115d4:	1400ac2e 	bgeu	r2,r16,11888 <__divdf3+0x774>
   115d8:	423fff84 	addi	r8,r8,-2
   115dc:	1705883a 	add	r2,r2,fp
   115e0:	1421c83a 	sub	r16,r2,r16
   115e4:	a00b883a 	mov	r5,r20
   115e8:	8009883a 	mov	r4,r16
   115ec:	d9800315 	stw	r6,12(sp)
   115f0:	d9c00215 	stw	r7,8(sp)
   115f4:	da000015 	stw	r8,0(sp)
   115f8:	da400115 	stw	r9,4(sp)
   115fc:	00110580 	call	11058 <__udivsi3>
   11600:	8009883a 	mov	r4,r16
   11604:	a00b883a 	mov	r5,r20
   11608:	1025883a 	mov	r18,r2
   1160c:	00110bc0 	call	110bc <__umodsi3>
   11610:	d9c00217 	ldw	r7,8(sp)
   11614:	1004943a 	slli	r2,r2,16
   11618:	bcaf383a 	mul	r23,r23,r18
   1161c:	393fffcc 	andi	r4,r7,65535
   11620:	2088b03a 	or	r4,r4,r2
   11624:	d9800317 	ldw	r6,12(sp)
   11628:	da000017 	ldw	r8,0(sp)
   1162c:	da400117 	ldw	r9,4(sp)
   11630:	25c0062e 	bgeu	r4,r23,1164c <__divdf3+0x538>
   11634:	2709883a 	add	r4,r4,fp
   11638:	90bfffc4 	addi	r2,r18,-1
   1163c:	27009436 	bltu	r4,fp,11890 <__divdf3+0x77c>
   11640:	25c0932e 	bgeu	r4,r23,11890 <__divdf3+0x77c>
   11644:	94bfff84 	addi	r18,r18,-2
   11648:	2709883a 	add	r4,r4,fp
   1164c:	4004943a 	slli	r2,r8,16
   11650:	25efc83a 	sub	r23,r4,r23
   11654:	1490b03a 	or	r8,r2,r18
   11658:	4008d43a 	srli	r4,r8,16
   1165c:	40ffffcc 	andi	r3,r8,65535
   11660:	30c5383a 	mul	r2,r6,r3
   11664:	1a47383a 	mul	r3,r3,r9
   11668:	310d383a 	mul	r6,r6,r4
   1166c:	100ad43a 	srli	r5,r2,16
   11670:	4913383a 	mul	r9,r9,r4
   11674:	1987883a 	add	r3,r3,r6
   11678:	28c7883a 	add	r3,r5,r3
   1167c:	1980022e 	bgeu	r3,r6,11688 <__divdf3+0x574>
   11680:	01000074 	movhi	r4,1
   11684:	4913883a 	add	r9,r9,r4
   11688:	1808d43a 	srli	r4,r3,16
   1168c:	1806943a 	slli	r3,r3,16
   11690:	10bfffcc 	andi	r2,r2,65535
   11694:	2253883a 	add	r9,r4,r9
   11698:	1887883a 	add	r3,r3,r2
   1169c:	ba403836 	bltu	r23,r9,11780 <__divdf3+0x66c>
   116a0:	ba403626 	beq	r23,r9,1177c <__divdf3+0x668>
   116a4:	42000054 	ori	r8,r8,1
   116a8:	a880ffc4 	addi	r2,r21,1023
   116ac:	00bf570e 	bge	zero,r2,1140c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701140c>
   116b0:	40c001cc 	andi	r3,r8,7
   116b4:	18000726 	beq	r3,zero,116d4 <__divdf3+0x5c0>
   116b8:	40c003cc 	andi	r3,r8,15
   116bc:	01000104 	movi	r4,4
   116c0:	19000426 	beq	r3,r4,116d4 <__divdf3+0x5c0>
   116c4:	4107883a 	add	r3,r8,r4
   116c8:	1a11803a 	cmpltu	r8,r3,r8
   116cc:	8a23883a 	add	r17,r17,r8
   116d0:	1811883a 	mov	r8,r3
   116d4:	88c0402c 	andhi	r3,r17,256
   116d8:	18000426 	beq	r3,zero,116ec <__divdf3+0x5d8>
   116dc:	00ffc034 	movhi	r3,65280
   116e0:	18ffffc4 	addi	r3,r3,-1
   116e4:	a8810004 	addi	r2,r21,1024
   116e8:	88e2703a 	and	r17,r17,r3
   116ec:	00c1ff84 	movi	r3,2046
   116f0:	18bee316 	blt	r3,r2,11280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011280>
   116f4:	8824977a 	slli	r18,r17,29
   116f8:	4010d0fa 	srli	r8,r8,3
   116fc:	8822927a 	slli	r17,r17,9
   11700:	1081ffcc 	andi	r2,r2,2047
   11704:	9224b03a 	or	r18,r18,r8
   11708:	880ad33a 	srli	r5,r17,12
   1170c:	98c0004c 	andi	r3,r19,1
   11710:	003edf06 	br	11290 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011290>
   11714:	8080022c 	andhi	r2,r16,8
   11718:	10001226 	beq	r2,zero,11764 <__divdf3+0x650>
   1171c:	8880022c 	andhi	r2,r17,8
   11720:	1000101e 	bne	r2,zero,11764 <__divdf3+0x650>
   11724:	00800434 	movhi	r2,16
   11728:	89400234 	orhi	r5,r17,8
   1172c:	10bfffc4 	addi	r2,r2,-1
   11730:	b007883a 	mov	r3,r22
   11734:	288a703a 	and	r5,r5,r2
   11738:	4025883a 	mov	r18,r8
   1173c:	003f3106 	br	11404 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011404>
   11740:	008000c4 	movi	r2,3
   11744:	3880a626 	beq	r7,r2,119e0 <__divdf3+0x8cc>
   11748:	00800044 	movi	r2,1
   1174c:	3880521e 	bne	r7,r2,11898 <__divdf3+0x784>
   11750:	b807883a 	mov	r3,r23
   11754:	0005883a 	mov	r2,zero
   11758:	000b883a 	mov	r5,zero
   1175c:	0025883a 	mov	r18,zero
   11760:	003ecb06 	br	11290 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011290>
   11764:	00800434 	movhi	r2,16
   11768:	81400234 	orhi	r5,r16,8
   1176c:	10bfffc4 	addi	r2,r2,-1
   11770:	a007883a 	mov	r3,r20
   11774:	288a703a 	and	r5,r5,r2
   11778:	003f2206 	br	11404 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011404>
   1177c:	183fca26 	beq	r3,zero,116a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70116a8>
   11780:	e5ef883a 	add	r23,fp,r23
   11784:	40bfffc4 	addi	r2,r8,-1
   11788:	bf00392e 	bgeu	r23,fp,11870 <__divdf3+0x75c>
   1178c:	1011883a 	mov	r8,r2
   11790:	ba7fc41e 	bne	r23,r9,116a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70116a4>
   11794:	b0ffc31e 	bne	r22,r3,116a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70116a4>
   11798:	003fc306 	br	116a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70116a8>
   1179c:	143ff604 	addi	r16,r2,-40
   117a0:	9c20983a 	sll	r16,r19,r16
   117a4:	0025883a 	mov	r18,zero
   117a8:	003ee206 	br	11334 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011334>
   117ac:	d9800315 	stw	r6,12(sp)
   117b0:	d9c00215 	stw	r7,8(sp)
   117b4:	0006ab40 	call	6ab4 <__clzsi2>
   117b8:	10800804 	addi	r2,r2,32
   117bc:	d9c00217 	ldw	r7,8(sp)
   117c0:	d9800317 	ldw	r6,12(sp)
   117c4:	003ed106 	br	1130c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701130c>
   117c8:	147ff604 	addi	r17,r2,-40
   117cc:	3462983a 	sll	r17,r6,r17
   117d0:	0011883a 	mov	r8,zero
   117d4:	003ef506 	br	113ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70113ac>
   117d8:	3009883a 	mov	r4,r6
   117dc:	d9800315 	stw	r6,12(sp)
   117e0:	da400115 	stw	r9,4(sp)
   117e4:	0006ab40 	call	6ab4 <__clzsi2>
   117e8:	10800804 	addi	r2,r2,32
   117ec:	da400117 	ldw	r9,4(sp)
   117f0:	d9800317 	ldw	r6,12(sp)
   117f4:	003ee306 	br	11384 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011384>
   117f8:	85a1883a 	add	r16,r16,r22
   117fc:	8585803a 	cmpltu	r2,r16,r22
   11800:	1705883a 	add	r2,r2,fp
   11804:	14a5883a 	add	r18,r2,r18
   11808:	88bfffc4 	addi	r2,r17,-1
   1180c:	e4800c2e 	bgeu	fp,r18,11840 <__divdf3+0x72c>
   11810:	90c03e36 	bltu	r18,r3,1190c <__divdf3+0x7f8>
   11814:	1c806926 	beq	r3,r18,119bc <__divdf3+0x8a8>
   11818:	90c7c83a 	sub	r3,r18,r3
   1181c:	1023883a 	mov	r17,r2
   11820:	003f5206 	br	1156c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701156c>
   11824:	923f0436 	bltu	r18,r8,11438 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011438>
   11828:	800897fa 	slli	r4,r16,31
   1182c:	9004d07a 	srli	r2,r18,1
   11830:	8006d07a 	srli	r3,r16,1
   11834:	902097fa 	slli	r16,r18,31
   11838:	20a4b03a 	or	r18,r4,r2
   1183c:	003f0106 	br	11444 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011444>
   11840:	e4bff51e 	bne	fp,r18,11818 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011818>
   11844:	85bff22e 	bgeu	r16,r22,11810 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011810>
   11848:	e0c7c83a 	sub	r3,fp,r3
   1184c:	1023883a 	mov	r17,r2
   11850:	003f4606 	br	1156c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701156c>
   11854:	100f883a 	mov	r7,r2
   11858:	003f2b06 	br	11508 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011508>
   1185c:	180d883a 	mov	r6,r3
   11860:	003f1306 	br	114b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70114b0>
   11864:	813fe436 	bltu	r16,r4,117f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70117f8>
   11868:	0007883a 	mov	r3,zero
   1186c:	003f3f06 	br	1156c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701156c>
   11870:	ba402c36 	bltu	r23,r9,11924 <__divdf3+0x810>
   11874:	4dc05426 	beq	r9,r23,119c8 <__divdf3+0x8b4>
   11878:	1011883a 	mov	r8,r2
   1187c:	003f8906 	br	116a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70116a4>
   11880:	023fffc4 	movi	r8,-1
   11884:	003f8806 	br	116a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70116a8>
   11888:	1811883a 	mov	r8,r3
   1188c:	003f5406 	br	115e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70115e0>
   11890:	1025883a 	mov	r18,r2
   11894:	003f6d06 	br	1164c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701164c>
   11898:	b827883a 	mov	r19,r23
   1189c:	003f8206 	br	116a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70116a8>
   118a0:	010007c4 	movi	r4,31
   118a4:	20c02616 	blt	r4,r3,11940 <__divdf3+0x82c>
   118a8:	00800804 	movi	r2,32
   118ac:	10c5c83a 	sub	r2,r2,r3
   118b0:	888a983a 	sll	r5,r17,r2
   118b4:	40c8d83a 	srl	r4,r8,r3
   118b8:	4084983a 	sll	r2,r8,r2
   118bc:	88e2d83a 	srl	r17,r17,r3
   118c0:	2906b03a 	or	r3,r5,r4
   118c4:	1004c03a 	cmpne	r2,r2,zero
   118c8:	1886b03a 	or	r3,r3,r2
   118cc:	188001cc 	andi	r2,r3,7
   118d0:	10000726 	beq	r2,zero,118f0 <__divdf3+0x7dc>
   118d4:	188003cc 	andi	r2,r3,15
   118d8:	01000104 	movi	r4,4
   118dc:	11000426 	beq	r2,r4,118f0 <__divdf3+0x7dc>
   118e0:	1805883a 	mov	r2,r3
   118e4:	10c00104 	addi	r3,r2,4
   118e8:	1885803a 	cmpltu	r2,r3,r2
   118ec:	88a3883a 	add	r17,r17,r2
   118f0:	8880202c 	andhi	r2,r17,128
   118f4:	10002726 	beq	r2,zero,11994 <__divdf3+0x880>
   118f8:	98c0004c 	andi	r3,r19,1
   118fc:	00800044 	movi	r2,1
   11900:	000b883a 	mov	r5,zero
   11904:	0025883a 	mov	r18,zero
   11908:	003e6106 	br	11290 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011290>
   1190c:	85a1883a 	add	r16,r16,r22
   11910:	8585803a 	cmpltu	r2,r16,r22
   11914:	1705883a 	add	r2,r2,fp
   11918:	14a5883a 	add	r18,r2,r18
   1191c:	8c7fff84 	addi	r17,r17,-2
   11920:	003f1106 	br	11568 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011568>
   11924:	b589883a 	add	r4,r22,r22
   11928:	25ad803a 	cmpltu	r22,r4,r22
   1192c:	b739883a 	add	fp,r22,fp
   11930:	40bfff84 	addi	r2,r8,-2
   11934:	bf2f883a 	add	r23,r23,fp
   11938:	202d883a 	mov	r22,r4
   1193c:	003f9306 	br	1178c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701178c>
   11940:	013ff844 	movi	r4,-31
   11944:	2085c83a 	sub	r2,r4,r2
   11948:	8888d83a 	srl	r4,r17,r2
   1194c:	00800804 	movi	r2,32
   11950:	18802126 	beq	r3,r2,119d8 <__divdf3+0x8c4>
   11954:	00801004 	movi	r2,64
   11958:	10c5c83a 	sub	r2,r2,r3
   1195c:	8884983a 	sll	r2,r17,r2
   11960:	1204b03a 	or	r2,r2,r8
   11964:	1004c03a 	cmpne	r2,r2,zero
   11968:	2084b03a 	or	r2,r4,r2
   1196c:	144001cc 	andi	r17,r2,7
   11970:	88000d1e 	bne	r17,zero,119a8 <__divdf3+0x894>
   11974:	000b883a 	mov	r5,zero
   11978:	1024d0fa 	srli	r18,r2,3
   1197c:	98c0004c 	andi	r3,r19,1
   11980:	0005883a 	mov	r2,zero
   11984:	9464b03a 	or	r18,r18,r17
   11988:	003e4106 	br	11290 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011290>
   1198c:	1007883a 	mov	r3,r2
   11990:	0023883a 	mov	r17,zero
   11994:	880a927a 	slli	r5,r17,9
   11998:	1805883a 	mov	r2,r3
   1199c:	8822977a 	slli	r17,r17,29
   119a0:	280ad33a 	srli	r5,r5,12
   119a4:	003ff406 	br	11978 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011978>
   119a8:	10c003cc 	andi	r3,r2,15
   119ac:	01000104 	movi	r4,4
   119b0:	193ff626 	beq	r3,r4,1198c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701198c>
   119b4:	0023883a 	mov	r17,zero
   119b8:	003fca06 	br	118e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70118e4>
   119bc:	813fd336 	bltu	r16,r4,1190c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701190c>
   119c0:	1023883a 	mov	r17,r2
   119c4:	003fa806 	br	11868 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011868>
   119c8:	b0ffd636 	bltu	r22,r3,11924 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011924>
   119cc:	1011883a 	mov	r8,r2
   119d0:	b0ff341e 	bne	r22,r3,116a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70116a4>
   119d4:	003f3406 	br	116a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70116a8>
   119d8:	0005883a 	mov	r2,zero
   119dc:	003fe006 	br	11960 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011960>
   119e0:	00800434 	movhi	r2,16
   119e4:	89400234 	orhi	r5,r17,8
   119e8:	10bfffc4 	addi	r2,r2,-1
   119ec:	b807883a 	mov	r3,r23
   119f0:	288a703a 	and	r5,r5,r2
   119f4:	4025883a 	mov	r18,r8
   119f8:	003e8206 	br	11404 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011404>

000119fc <__eqdf2>:
   119fc:	2804d53a 	srli	r2,r5,20
   11a00:	3806d53a 	srli	r3,r7,20
   11a04:	02000434 	movhi	r8,16
   11a08:	423fffc4 	addi	r8,r8,-1
   11a0c:	1081ffcc 	andi	r2,r2,2047
   11a10:	0281ffc4 	movi	r10,2047
   11a14:	2a12703a 	and	r9,r5,r8
   11a18:	18c1ffcc 	andi	r3,r3,2047
   11a1c:	3a10703a 	and	r8,r7,r8
   11a20:	280ad7fa 	srli	r5,r5,31
   11a24:	380ed7fa 	srli	r7,r7,31
   11a28:	12801026 	beq	r2,r10,11a6c <__eqdf2+0x70>
   11a2c:	0281ffc4 	movi	r10,2047
   11a30:	1a800a26 	beq	r3,r10,11a5c <__eqdf2+0x60>
   11a34:	10c00226 	beq	r2,r3,11a40 <__eqdf2+0x44>
   11a38:	00800044 	movi	r2,1
   11a3c:	f800283a 	ret
   11a40:	4a3ffd1e 	bne	r9,r8,11a38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011a38>
   11a44:	21bffc1e 	bne	r4,r6,11a38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011a38>
   11a48:	29c00c26 	beq	r5,r7,11a7c <__eqdf2+0x80>
   11a4c:	103ffa1e 	bne	r2,zero,11a38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011a38>
   11a50:	2244b03a 	or	r2,r4,r9
   11a54:	1004c03a 	cmpne	r2,r2,zero
   11a58:	f800283a 	ret
   11a5c:	3214b03a 	or	r10,r6,r8
   11a60:	503ff426 	beq	r10,zero,11a34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011a34>
   11a64:	00800044 	movi	r2,1
   11a68:	f800283a 	ret
   11a6c:	2254b03a 	or	r10,r4,r9
   11a70:	503fee26 	beq	r10,zero,11a2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011a2c>
   11a74:	00800044 	movi	r2,1
   11a78:	f800283a 	ret
   11a7c:	0005883a 	mov	r2,zero
   11a80:	f800283a 	ret

00011a84 <__gedf2>:
   11a84:	2804d53a 	srli	r2,r5,20
   11a88:	3806d53a 	srli	r3,r7,20
   11a8c:	02000434 	movhi	r8,16
   11a90:	423fffc4 	addi	r8,r8,-1
   11a94:	1081ffcc 	andi	r2,r2,2047
   11a98:	0241ffc4 	movi	r9,2047
   11a9c:	2a14703a 	and	r10,r5,r8
   11aa0:	18c1ffcc 	andi	r3,r3,2047
   11aa4:	3a10703a 	and	r8,r7,r8
   11aa8:	280ad7fa 	srli	r5,r5,31
   11aac:	380ed7fa 	srli	r7,r7,31
   11ab0:	12401d26 	beq	r2,r9,11b28 <__gedf2+0xa4>
   11ab4:	0241ffc4 	movi	r9,2047
   11ab8:	1a401226 	beq	r3,r9,11b04 <__gedf2+0x80>
   11abc:	1000081e 	bne	r2,zero,11ae0 <__gedf2+0x5c>
   11ac0:	2296b03a 	or	r11,r4,r10
   11ac4:	5813003a 	cmpeq	r9,r11,zero
   11ac8:	1800091e 	bne	r3,zero,11af0 <__gedf2+0x6c>
   11acc:	3218b03a 	or	r12,r6,r8
   11ad0:	6000071e 	bne	r12,zero,11af0 <__gedf2+0x6c>
   11ad4:	0005883a 	mov	r2,zero
   11ad8:	5800101e 	bne	r11,zero,11b1c <__gedf2+0x98>
   11adc:	f800283a 	ret
   11ae0:	18000c1e 	bne	r3,zero,11b14 <__gedf2+0x90>
   11ae4:	3212b03a 	or	r9,r6,r8
   11ae8:	48000c26 	beq	r9,zero,11b1c <__gedf2+0x98>
   11aec:	0013883a 	mov	r9,zero
   11af0:	39c03fcc 	andi	r7,r7,255
   11af4:	48000826 	beq	r9,zero,11b18 <__gedf2+0x94>
   11af8:	38000926 	beq	r7,zero,11b20 <__gedf2+0x9c>
   11afc:	00800044 	movi	r2,1
   11b00:	f800283a 	ret
   11b04:	3212b03a 	or	r9,r6,r8
   11b08:	483fec26 	beq	r9,zero,11abc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011abc>
   11b0c:	00bfff84 	movi	r2,-2
   11b10:	f800283a 	ret
   11b14:	39c03fcc 	andi	r7,r7,255
   11b18:	29c00626 	beq	r5,r7,11b34 <__gedf2+0xb0>
   11b1c:	283ff726 	beq	r5,zero,11afc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011afc>
   11b20:	00bfffc4 	movi	r2,-1
   11b24:	f800283a 	ret
   11b28:	2292b03a 	or	r9,r4,r10
   11b2c:	483fe126 	beq	r9,zero,11ab4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011ab4>
   11b30:	003ff606 	br	11b0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b0c>
   11b34:	18bff916 	blt	r3,r2,11b1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b1c>
   11b38:	10c00316 	blt	r2,r3,11b48 <__gedf2+0xc4>
   11b3c:	42bff736 	bltu	r8,r10,11b1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b1c>
   11b40:	52000326 	beq	r10,r8,11b50 <__gedf2+0xcc>
   11b44:	5200042e 	bgeu	r10,r8,11b58 <__gedf2+0xd4>
   11b48:	283fec1e 	bne	r5,zero,11afc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011afc>
   11b4c:	003ff406 	br	11b20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b20>
   11b50:	313ff236 	bltu	r6,r4,11b1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b1c>
   11b54:	21bffc36 	bltu	r4,r6,11b48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b48>
   11b58:	0005883a 	mov	r2,zero
   11b5c:	f800283a 	ret

00011b60 <__ledf2>:
   11b60:	2804d53a 	srli	r2,r5,20
   11b64:	3810d53a 	srli	r8,r7,20
   11b68:	00c00434 	movhi	r3,16
   11b6c:	18ffffc4 	addi	r3,r3,-1
   11b70:	1081ffcc 	andi	r2,r2,2047
   11b74:	0241ffc4 	movi	r9,2047
   11b78:	28d4703a 	and	r10,r5,r3
   11b7c:	4201ffcc 	andi	r8,r8,2047
   11b80:	38c6703a 	and	r3,r7,r3
   11b84:	280ad7fa 	srli	r5,r5,31
   11b88:	380ed7fa 	srli	r7,r7,31
   11b8c:	12401f26 	beq	r2,r9,11c0c <__ledf2+0xac>
   11b90:	0241ffc4 	movi	r9,2047
   11b94:	42401426 	beq	r8,r9,11be8 <__ledf2+0x88>
   11b98:	1000091e 	bne	r2,zero,11bc0 <__ledf2+0x60>
   11b9c:	2296b03a 	or	r11,r4,r10
   11ba0:	5813003a 	cmpeq	r9,r11,zero
   11ba4:	29403fcc 	andi	r5,r5,255
   11ba8:	40000a1e 	bne	r8,zero,11bd4 <__ledf2+0x74>
   11bac:	30d8b03a 	or	r12,r6,r3
   11bb0:	6000081e 	bne	r12,zero,11bd4 <__ledf2+0x74>
   11bb4:	0005883a 	mov	r2,zero
   11bb8:	5800111e 	bne	r11,zero,11c00 <__ledf2+0xa0>
   11bbc:	f800283a 	ret
   11bc0:	29403fcc 	andi	r5,r5,255
   11bc4:	40000c1e 	bne	r8,zero,11bf8 <__ledf2+0x98>
   11bc8:	30d2b03a 	or	r9,r6,r3
   11bcc:	48000c26 	beq	r9,zero,11c00 <__ledf2+0xa0>
   11bd0:	0013883a 	mov	r9,zero
   11bd4:	39c03fcc 	andi	r7,r7,255
   11bd8:	48000826 	beq	r9,zero,11bfc <__ledf2+0x9c>
   11bdc:	38001126 	beq	r7,zero,11c24 <__ledf2+0xc4>
   11be0:	00800044 	movi	r2,1
   11be4:	f800283a 	ret
   11be8:	30d2b03a 	or	r9,r6,r3
   11bec:	483fea26 	beq	r9,zero,11b98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b98>
   11bf0:	00800084 	movi	r2,2
   11bf4:	f800283a 	ret
   11bf8:	39c03fcc 	andi	r7,r7,255
   11bfc:	39400726 	beq	r7,r5,11c1c <__ledf2+0xbc>
   11c00:	2800081e 	bne	r5,zero,11c24 <__ledf2+0xc4>
   11c04:	00800044 	movi	r2,1
   11c08:	f800283a 	ret
   11c0c:	2292b03a 	or	r9,r4,r10
   11c10:	483fdf26 	beq	r9,zero,11b90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b90>
   11c14:	00800084 	movi	r2,2
   11c18:	f800283a 	ret
   11c1c:	4080030e 	bge	r8,r2,11c2c <__ledf2+0xcc>
   11c20:	383fef26 	beq	r7,zero,11be0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011be0>
   11c24:	00bfffc4 	movi	r2,-1
   11c28:	f800283a 	ret
   11c2c:	123feb16 	blt	r2,r8,11bdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011bdc>
   11c30:	1abff336 	bltu	r3,r10,11c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011c00>
   11c34:	50c00326 	beq	r10,r3,11c44 <__ledf2+0xe4>
   11c38:	50c0042e 	bgeu	r10,r3,11c4c <__ledf2+0xec>
   11c3c:	283fe81e 	bne	r5,zero,11be0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011be0>
   11c40:	003ff806 	br	11c24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011c24>
   11c44:	313fee36 	bltu	r6,r4,11c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011c00>
   11c48:	21bffc36 	bltu	r4,r6,11c3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011c3c>
   11c4c:	0005883a 	mov	r2,zero
   11c50:	f800283a 	ret

00011c54 <__muldf3>:
   11c54:	defff304 	addi	sp,sp,-52
   11c58:	2804d53a 	srli	r2,r5,20
   11c5c:	dd800915 	stw	r22,36(sp)
   11c60:	282cd7fa 	srli	r22,r5,31
   11c64:	dc000315 	stw	r16,12(sp)
   11c68:	04000434 	movhi	r16,16
   11c6c:	dd400815 	stw	r21,32(sp)
   11c70:	dc800515 	stw	r18,20(sp)
   11c74:	843fffc4 	addi	r16,r16,-1
   11c78:	dfc00c15 	stw	ra,48(sp)
   11c7c:	df000b15 	stw	fp,44(sp)
   11c80:	ddc00a15 	stw	r23,40(sp)
   11c84:	dd000715 	stw	r20,28(sp)
   11c88:	dcc00615 	stw	r19,24(sp)
   11c8c:	dc400415 	stw	r17,16(sp)
   11c90:	1481ffcc 	andi	r18,r2,2047
   11c94:	2c20703a 	and	r16,r5,r16
   11c98:	b02b883a 	mov	r21,r22
   11c9c:	b2403fcc 	andi	r9,r22,255
   11ca0:	90006026 	beq	r18,zero,11e24 <__muldf3+0x1d0>
   11ca4:	0081ffc4 	movi	r2,2047
   11ca8:	2029883a 	mov	r20,r4
   11cac:	90803626 	beq	r18,r2,11d88 <__muldf3+0x134>
   11cb0:	80800434 	orhi	r2,r16,16
   11cb4:	100490fa 	slli	r2,r2,3
   11cb8:	2020d77a 	srli	r16,r4,29
   11cbc:	202890fa 	slli	r20,r4,3
   11cc0:	94bf0044 	addi	r18,r18,-1023
   11cc4:	80a0b03a 	or	r16,r16,r2
   11cc8:	0027883a 	mov	r19,zero
   11ccc:	0039883a 	mov	fp,zero
   11cd0:	3804d53a 	srli	r2,r7,20
   11cd4:	382ed7fa 	srli	r23,r7,31
   11cd8:	04400434 	movhi	r17,16
   11cdc:	8c7fffc4 	addi	r17,r17,-1
   11ce0:	1081ffcc 	andi	r2,r2,2047
   11ce4:	3011883a 	mov	r8,r6
   11ce8:	3c62703a 	and	r17,r7,r17
   11cec:	ba803fcc 	andi	r10,r23,255
   11cf0:	10006d26 	beq	r2,zero,11ea8 <__muldf3+0x254>
   11cf4:	00c1ffc4 	movi	r3,2047
   11cf8:	10c06526 	beq	r2,r3,11e90 <__muldf3+0x23c>
   11cfc:	88c00434 	orhi	r3,r17,16
   11d00:	180690fa 	slli	r3,r3,3
   11d04:	3022d77a 	srli	r17,r6,29
   11d08:	301090fa 	slli	r8,r6,3
   11d0c:	10bf0044 	addi	r2,r2,-1023
   11d10:	88e2b03a 	or	r17,r17,r3
   11d14:	000b883a 	mov	r5,zero
   11d18:	9085883a 	add	r2,r18,r2
   11d1c:	2cc8b03a 	or	r4,r5,r19
   11d20:	00c003c4 	movi	r3,15
   11d24:	bdacf03a 	xor	r22,r23,r22
   11d28:	12c00044 	addi	r11,r2,1
   11d2c:	19009936 	bltu	r3,r4,11f94 <__muldf3+0x340>
   11d30:	200890ba 	slli	r4,r4,2
   11d34:	00c00074 	movhi	r3,1
   11d38:	18c75204 	addi	r3,r3,7496
   11d3c:	20c9883a 	add	r4,r4,r3
   11d40:	20c00017 	ldw	r3,0(r4)
   11d44:	1800683a 	jmp	r3
   11d48:	00011f94 	movui	zero,1150
   11d4c:	00011da8 	cmpgeui	zero,zero,1142
   11d50:	00011da8 	cmpgeui	zero,zero,1142
   11d54:	00011da4 	muli	zero,zero,1142
   11d58:	00011f70 	cmpltui	zero,zero,1149
   11d5c:	00011f70 	cmpltui	zero,zero,1149
   11d60:	00011f58 	cmpnei	zero,zero,1149
   11d64:	00011da4 	muli	zero,zero,1142
   11d68:	00011f70 	cmpltui	zero,zero,1149
   11d6c:	00011f58 	cmpnei	zero,zero,1149
   11d70:	00011f70 	cmpltui	zero,zero,1149
   11d74:	00011da4 	muli	zero,zero,1142
   11d78:	00011f80 	call	11f8 <_ZN4Game7drawMapEv+0x3e4>
   11d7c:	00011f80 	call	11f8 <_ZN4Game7drawMapEv+0x3e4>
   11d80:	00011f80 	call	11f8 <_ZN4Game7drawMapEv+0x3e4>
   11d84:	0001219c 	xori	zero,zero,1158
   11d88:	2404b03a 	or	r2,r4,r16
   11d8c:	10006f1e 	bne	r2,zero,11f4c <__muldf3+0x2f8>
   11d90:	04c00204 	movi	r19,8
   11d94:	0021883a 	mov	r16,zero
   11d98:	0029883a 	mov	r20,zero
   11d9c:	07000084 	movi	fp,2
   11da0:	003fcb06 	br	11cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011cd0>
   11da4:	502d883a 	mov	r22,r10
   11da8:	00800084 	movi	r2,2
   11dac:	28805726 	beq	r5,r2,11f0c <__muldf3+0x2b8>
   11db0:	008000c4 	movi	r2,3
   11db4:	28816626 	beq	r5,r2,12350 <__muldf3+0x6fc>
   11db8:	00800044 	movi	r2,1
   11dbc:	2881411e 	bne	r5,r2,122c4 <__muldf3+0x670>
   11dc0:	b02b883a 	mov	r21,r22
   11dc4:	0005883a 	mov	r2,zero
   11dc8:	000b883a 	mov	r5,zero
   11dcc:	0029883a 	mov	r20,zero
   11dd0:	1004953a 	slli	r2,r2,20
   11dd4:	a8c03fcc 	andi	r3,r21,255
   11dd8:	04400434 	movhi	r17,16
   11ddc:	8c7fffc4 	addi	r17,r17,-1
   11de0:	180697fa 	slli	r3,r3,31
   11de4:	2c4a703a 	and	r5,r5,r17
   11de8:	288ab03a 	or	r5,r5,r2
   11dec:	28c6b03a 	or	r3,r5,r3
   11df0:	a005883a 	mov	r2,r20
   11df4:	dfc00c17 	ldw	ra,48(sp)
   11df8:	df000b17 	ldw	fp,44(sp)
   11dfc:	ddc00a17 	ldw	r23,40(sp)
   11e00:	dd800917 	ldw	r22,36(sp)
   11e04:	dd400817 	ldw	r21,32(sp)
   11e08:	dd000717 	ldw	r20,28(sp)
   11e0c:	dcc00617 	ldw	r19,24(sp)
   11e10:	dc800517 	ldw	r18,20(sp)
   11e14:	dc400417 	ldw	r17,16(sp)
   11e18:	dc000317 	ldw	r16,12(sp)
   11e1c:	dec00d04 	addi	sp,sp,52
   11e20:	f800283a 	ret
   11e24:	2404b03a 	or	r2,r4,r16
   11e28:	2027883a 	mov	r19,r4
   11e2c:	10004226 	beq	r2,zero,11f38 <__muldf3+0x2e4>
   11e30:	8000fc26 	beq	r16,zero,12224 <__muldf3+0x5d0>
   11e34:	8009883a 	mov	r4,r16
   11e38:	d9800215 	stw	r6,8(sp)
   11e3c:	d9c00015 	stw	r7,0(sp)
   11e40:	da400115 	stw	r9,4(sp)
   11e44:	0006ab40 	call	6ab4 <__clzsi2>
   11e48:	d9800217 	ldw	r6,8(sp)
   11e4c:	d9c00017 	ldw	r7,0(sp)
   11e50:	da400117 	ldw	r9,4(sp)
   11e54:	113ffd44 	addi	r4,r2,-11
   11e58:	00c00704 	movi	r3,28
   11e5c:	1900ed16 	blt	r3,r4,12214 <__muldf3+0x5c0>
   11e60:	00c00744 	movi	r3,29
   11e64:	147ffe04 	addi	r17,r2,-8
   11e68:	1907c83a 	sub	r3,r3,r4
   11e6c:	8460983a 	sll	r16,r16,r17
   11e70:	98c6d83a 	srl	r3,r19,r3
   11e74:	9c68983a 	sll	r20,r19,r17
   11e78:	1c20b03a 	or	r16,r3,r16
   11e7c:	1080fcc4 	addi	r2,r2,1011
   11e80:	00a5c83a 	sub	r18,zero,r2
   11e84:	0027883a 	mov	r19,zero
   11e88:	0039883a 	mov	fp,zero
   11e8c:	003f9006 	br	11cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011cd0>
   11e90:	3446b03a 	or	r3,r6,r17
   11e94:	1800261e 	bne	r3,zero,11f30 <__muldf3+0x2dc>
   11e98:	0023883a 	mov	r17,zero
   11e9c:	0011883a 	mov	r8,zero
   11ea0:	01400084 	movi	r5,2
   11ea4:	003f9c06 	br	11d18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011d18>
   11ea8:	3446b03a 	or	r3,r6,r17
   11eac:	18001c26 	beq	r3,zero,11f20 <__muldf3+0x2cc>
   11eb0:	8800ce26 	beq	r17,zero,121ec <__muldf3+0x598>
   11eb4:	8809883a 	mov	r4,r17
   11eb8:	d9800215 	stw	r6,8(sp)
   11ebc:	da400115 	stw	r9,4(sp)
   11ec0:	da800015 	stw	r10,0(sp)
   11ec4:	0006ab40 	call	6ab4 <__clzsi2>
   11ec8:	d9800217 	ldw	r6,8(sp)
   11ecc:	da400117 	ldw	r9,4(sp)
   11ed0:	da800017 	ldw	r10,0(sp)
   11ed4:	113ffd44 	addi	r4,r2,-11
   11ed8:	00c00704 	movi	r3,28
   11edc:	1900bf16 	blt	r3,r4,121dc <__muldf3+0x588>
   11ee0:	00c00744 	movi	r3,29
   11ee4:	123ffe04 	addi	r8,r2,-8
   11ee8:	1907c83a 	sub	r3,r3,r4
   11eec:	8a22983a 	sll	r17,r17,r8
   11ef0:	30c6d83a 	srl	r3,r6,r3
   11ef4:	3210983a 	sll	r8,r6,r8
   11ef8:	1c62b03a 	or	r17,r3,r17
   11efc:	1080fcc4 	addi	r2,r2,1011
   11f00:	0085c83a 	sub	r2,zero,r2
   11f04:	000b883a 	mov	r5,zero
   11f08:	003f8306 	br	11d18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011d18>
   11f0c:	b02b883a 	mov	r21,r22
   11f10:	0081ffc4 	movi	r2,2047
   11f14:	000b883a 	mov	r5,zero
   11f18:	0029883a 	mov	r20,zero
   11f1c:	003fac06 	br	11dd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011dd0>
   11f20:	0023883a 	mov	r17,zero
   11f24:	0011883a 	mov	r8,zero
   11f28:	01400044 	movi	r5,1
   11f2c:	003f7a06 	br	11d18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011d18>
   11f30:	014000c4 	movi	r5,3
   11f34:	003f7806 	br	11d18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011d18>
   11f38:	04c00104 	movi	r19,4
   11f3c:	0021883a 	mov	r16,zero
   11f40:	0029883a 	mov	r20,zero
   11f44:	07000044 	movi	fp,1
   11f48:	003f6106 	br	11cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011cd0>
   11f4c:	04c00304 	movi	r19,12
   11f50:	070000c4 	movi	fp,3
   11f54:	003f5e06 	br	11cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011cd0>
   11f58:	01400434 	movhi	r5,16
   11f5c:	002b883a 	mov	r21,zero
   11f60:	297fffc4 	addi	r5,r5,-1
   11f64:	053fffc4 	movi	r20,-1
   11f68:	0081ffc4 	movi	r2,2047
   11f6c:	003f9806 	br	11dd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011dd0>
   11f70:	8023883a 	mov	r17,r16
   11f74:	a011883a 	mov	r8,r20
   11f78:	e00b883a 	mov	r5,fp
   11f7c:	003f8a06 	br	11da8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011da8>
   11f80:	8023883a 	mov	r17,r16
   11f84:	a011883a 	mov	r8,r20
   11f88:	482d883a 	mov	r22,r9
   11f8c:	e00b883a 	mov	r5,fp
   11f90:	003f8506 	br	11da8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011da8>
   11f94:	a00ad43a 	srli	r5,r20,16
   11f98:	401ad43a 	srli	r13,r8,16
   11f9c:	a53fffcc 	andi	r20,r20,65535
   11fa0:	423fffcc 	andi	r8,r8,65535
   11fa4:	4519383a 	mul	r12,r8,r20
   11fa8:	4147383a 	mul	r3,r8,r5
   11fac:	6d09383a 	mul	r4,r13,r20
   11fb0:	600cd43a 	srli	r6,r12,16
   11fb4:	2b5d383a 	mul	r14,r5,r13
   11fb8:	20c9883a 	add	r4,r4,r3
   11fbc:	310d883a 	add	r6,r6,r4
   11fc0:	30c0022e 	bgeu	r6,r3,11fcc <__muldf3+0x378>
   11fc4:	00c00074 	movhi	r3,1
   11fc8:	70dd883a 	add	r14,r14,r3
   11fcc:	8826d43a 	srli	r19,r17,16
   11fd0:	8bffffcc 	andi	r15,r17,65535
   11fd4:	7d23383a 	mul	r17,r15,r20
   11fd8:	7949383a 	mul	r4,r15,r5
   11fdc:	9d29383a 	mul	r20,r19,r20
   11fe0:	8814d43a 	srli	r10,r17,16
   11fe4:	3012943a 	slli	r9,r6,16
   11fe8:	a129883a 	add	r20,r20,r4
   11fec:	633fffcc 	andi	r12,r12,65535
   11ff0:	5515883a 	add	r10,r10,r20
   11ff4:	3006d43a 	srli	r3,r6,16
   11ff8:	4b13883a 	add	r9,r9,r12
   11ffc:	2ccb383a 	mul	r5,r5,r19
   12000:	5100022e 	bgeu	r10,r4,1200c <__muldf3+0x3b8>
   12004:	01000074 	movhi	r4,1
   12008:	290b883a 	add	r5,r5,r4
   1200c:	802ad43a 	srli	r21,r16,16
   12010:	843fffcc 	andi	r16,r16,65535
   12014:	440d383a 	mul	r6,r8,r16
   12018:	4565383a 	mul	r18,r8,r21
   1201c:	8349383a 	mul	r4,r16,r13
   12020:	500e943a 	slli	r7,r10,16
   12024:	3010d43a 	srli	r8,r6,16
   12028:	5028d43a 	srli	r20,r10,16
   1202c:	2489883a 	add	r4,r4,r18
   12030:	8abfffcc 	andi	r10,r17,65535
   12034:	3a95883a 	add	r10,r7,r10
   12038:	4119883a 	add	r12,r8,r4
   1203c:	a169883a 	add	r20,r20,r5
   12040:	1a87883a 	add	r3,r3,r10
   12044:	6d5b383a 	mul	r13,r13,r21
   12048:	6480022e 	bgeu	r12,r18,12054 <__muldf3+0x400>
   1204c:	01000074 	movhi	r4,1
   12050:	691b883a 	add	r13,r13,r4
   12054:	7c25383a 	mul	r18,r15,r16
   12058:	7d4b383a 	mul	r5,r15,r21
   1205c:	84cf383a 	mul	r7,r16,r19
   12060:	901ed43a 	srli	r15,r18,16
   12064:	6008d43a 	srli	r4,r12,16
   12068:	6010943a 	slli	r8,r12,16
   1206c:	394f883a 	add	r7,r7,r5
   12070:	333fffcc 	andi	r12,r6,65535
   12074:	79df883a 	add	r15,r15,r7
   12078:	235b883a 	add	r13,r4,r13
   1207c:	9d63383a 	mul	r17,r19,r21
   12080:	4309883a 	add	r4,r8,r12
   12084:	7940022e 	bgeu	r15,r5,12090 <__muldf3+0x43c>
   12088:	01400074 	movhi	r5,1
   1208c:	8963883a 	add	r17,r17,r5
   12090:	780a943a 	slli	r5,r15,16
   12094:	91bfffcc 	andi	r6,r18,65535
   12098:	70c7883a 	add	r3,r14,r3
   1209c:	298d883a 	add	r6,r5,r6
   120a0:	1a8f803a 	cmpltu	r7,r3,r10
   120a4:	350b883a 	add	r5,r6,r20
   120a8:	20c7883a 	add	r3,r4,r3
   120ac:	3955883a 	add	r10,r7,r5
   120b0:	1909803a 	cmpltu	r4,r3,r4
   120b4:	6a91883a 	add	r8,r13,r10
   120b8:	780cd43a 	srli	r6,r15,16
   120bc:	2219883a 	add	r12,r4,r8
   120c0:	2d0b803a 	cmpltu	r5,r5,r20
   120c4:	51cf803a 	cmpltu	r7,r10,r7
   120c8:	29ceb03a 	or	r7,r5,r7
   120cc:	4351803a 	cmpltu	r8,r8,r13
   120d0:	610b803a 	cmpltu	r5,r12,r4
   120d4:	4148b03a 	or	r4,r8,r5
   120d8:	398f883a 	add	r7,r7,r6
   120dc:	3909883a 	add	r4,r7,r4
   120e0:	1810927a 	slli	r8,r3,9
   120e4:	2449883a 	add	r4,r4,r17
   120e8:	2008927a 	slli	r4,r4,9
   120ec:	6022d5fa 	srli	r17,r12,23
   120f0:	1806d5fa 	srli	r3,r3,23
   120f4:	4252b03a 	or	r9,r8,r9
   120f8:	600a927a 	slli	r5,r12,9
   120fc:	4810c03a 	cmpne	r8,r9,zero
   12100:	2462b03a 	or	r17,r4,r17
   12104:	40c6b03a 	or	r3,r8,r3
   12108:	8900402c 	andhi	r4,r17,256
   1210c:	1950b03a 	or	r8,r3,r5
   12110:	20000726 	beq	r4,zero,12130 <__muldf3+0x4dc>
   12114:	4006d07a 	srli	r3,r8,1
   12118:	880497fa 	slli	r2,r17,31
   1211c:	4200004c 	andi	r8,r8,1
   12120:	8822d07a 	srli	r17,r17,1
   12124:	1a10b03a 	or	r8,r3,r8
   12128:	1210b03a 	or	r8,r2,r8
   1212c:	5805883a 	mov	r2,r11
   12130:	1140ffc4 	addi	r5,r2,1023
   12134:	0140440e 	bge	zero,r5,12248 <__muldf3+0x5f4>
   12138:	40c001cc 	andi	r3,r8,7
   1213c:	18000726 	beq	r3,zero,1215c <__muldf3+0x508>
   12140:	40c003cc 	andi	r3,r8,15
   12144:	01000104 	movi	r4,4
   12148:	19000426 	beq	r3,r4,1215c <__muldf3+0x508>
   1214c:	4107883a 	add	r3,r8,r4
   12150:	1a11803a 	cmpltu	r8,r3,r8
   12154:	8a23883a 	add	r17,r17,r8
   12158:	1811883a 	mov	r8,r3
   1215c:	88c0402c 	andhi	r3,r17,256
   12160:	18000426 	beq	r3,zero,12174 <__muldf3+0x520>
   12164:	11410004 	addi	r5,r2,1024
   12168:	00bfc034 	movhi	r2,65280
   1216c:	10bfffc4 	addi	r2,r2,-1
   12170:	88a2703a 	and	r17,r17,r2
   12174:	0081ff84 	movi	r2,2046
   12178:	117f6416 	blt	r2,r5,11f0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011f0c>
   1217c:	8828977a 	slli	r20,r17,29
   12180:	4010d0fa 	srli	r8,r8,3
   12184:	8822927a 	slli	r17,r17,9
   12188:	2881ffcc 	andi	r2,r5,2047
   1218c:	a228b03a 	or	r20,r20,r8
   12190:	880ad33a 	srli	r5,r17,12
   12194:	b02b883a 	mov	r21,r22
   12198:	003f0d06 	br	11dd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011dd0>
   1219c:	8080022c 	andhi	r2,r16,8
   121a0:	10000926 	beq	r2,zero,121c8 <__muldf3+0x574>
   121a4:	8880022c 	andhi	r2,r17,8
   121a8:	1000071e 	bne	r2,zero,121c8 <__muldf3+0x574>
   121ac:	00800434 	movhi	r2,16
   121b0:	89400234 	orhi	r5,r17,8
   121b4:	10bfffc4 	addi	r2,r2,-1
   121b8:	b82b883a 	mov	r21,r23
   121bc:	288a703a 	and	r5,r5,r2
   121c0:	4029883a 	mov	r20,r8
   121c4:	003f6806 	br	11f68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011f68>
   121c8:	00800434 	movhi	r2,16
   121cc:	81400234 	orhi	r5,r16,8
   121d0:	10bfffc4 	addi	r2,r2,-1
   121d4:	288a703a 	and	r5,r5,r2
   121d8:	003f6306 	br	11f68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011f68>
   121dc:	147ff604 	addi	r17,r2,-40
   121e0:	3462983a 	sll	r17,r6,r17
   121e4:	0011883a 	mov	r8,zero
   121e8:	003f4406 	br	11efc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011efc>
   121ec:	3009883a 	mov	r4,r6
   121f0:	d9800215 	stw	r6,8(sp)
   121f4:	da400115 	stw	r9,4(sp)
   121f8:	da800015 	stw	r10,0(sp)
   121fc:	0006ab40 	call	6ab4 <__clzsi2>
   12200:	10800804 	addi	r2,r2,32
   12204:	da800017 	ldw	r10,0(sp)
   12208:	da400117 	ldw	r9,4(sp)
   1220c:	d9800217 	ldw	r6,8(sp)
   12210:	003f3006 	br	11ed4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011ed4>
   12214:	143ff604 	addi	r16,r2,-40
   12218:	9c20983a 	sll	r16,r19,r16
   1221c:	0029883a 	mov	r20,zero
   12220:	003f1606 	br	11e7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011e7c>
   12224:	d9800215 	stw	r6,8(sp)
   12228:	d9c00015 	stw	r7,0(sp)
   1222c:	da400115 	stw	r9,4(sp)
   12230:	0006ab40 	call	6ab4 <__clzsi2>
   12234:	10800804 	addi	r2,r2,32
   12238:	da400117 	ldw	r9,4(sp)
   1223c:	d9c00017 	ldw	r7,0(sp)
   12240:	d9800217 	ldw	r6,8(sp)
   12244:	003f0306 	br	11e54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011e54>
   12248:	00c00044 	movi	r3,1
   1224c:	1947c83a 	sub	r3,r3,r5
   12250:	00800e04 	movi	r2,56
   12254:	10feda16 	blt	r2,r3,11dc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011dc0>
   12258:	008007c4 	movi	r2,31
   1225c:	10c01b16 	blt	r2,r3,122cc <__muldf3+0x678>
   12260:	00800804 	movi	r2,32
   12264:	10c5c83a 	sub	r2,r2,r3
   12268:	888a983a 	sll	r5,r17,r2
   1226c:	40c8d83a 	srl	r4,r8,r3
   12270:	4084983a 	sll	r2,r8,r2
   12274:	88e2d83a 	srl	r17,r17,r3
   12278:	2906b03a 	or	r3,r5,r4
   1227c:	1004c03a 	cmpne	r2,r2,zero
   12280:	1886b03a 	or	r3,r3,r2
   12284:	188001cc 	andi	r2,r3,7
   12288:	10000726 	beq	r2,zero,122a8 <__muldf3+0x654>
   1228c:	188003cc 	andi	r2,r3,15
   12290:	01000104 	movi	r4,4
   12294:	11000426 	beq	r2,r4,122a8 <__muldf3+0x654>
   12298:	1805883a 	mov	r2,r3
   1229c:	10c00104 	addi	r3,r2,4
   122a0:	1885803a 	cmpltu	r2,r3,r2
   122a4:	88a3883a 	add	r17,r17,r2
   122a8:	8880202c 	andhi	r2,r17,128
   122ac:	10001c26 	beq	r2,zero,12320 <__muldf3+0x6cc>
   122b0:	b02b883a 	mov	r21,r22
   122b4:	00800044 	movi	r2,1
   122b8:	000b883a 	mov	r5,zero
   122bc:	0029883a 	mov	r20,zero
   122c0:	003ec306 	br	11dd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011dd0>
   122c4:	5805883a 	mov	r2,r11
   122c8:	003f9906 	br	12130 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012130>
   122cc:	00bff844 	movi	r2,-31
   122d0:	1145c83a 	sub	r2,r2,r5
   122d4:	8888d83a 	srl	r4,r17,r2
   122d8:	00800804 	movi	r2,32
   122dc:	18801a26 	beq	r3,r2,12348 <__muldf3+0x6f4>
   122e0:	00801004 	movi	r2,64
   122e4:	10c5c83a 	sub	r2,r2,r3
   122e8:	8884983a 	sll	r2,r17,r2
   122ec:	1204b03a 	or	r2,r2,r8
   122f0:	1004c03a 	cmpne	r2,r2,zero
   122f4:	2084b03a 	or	r2,r4,r2
   122f8:	144001cc 	andi	r17,r2,7
   122fc:	88000d1e 	bne	r17,zero,12334 <__muldf3+0x6e0>
   12300:	000b883a 	mov	r5,zero
   12304:	1028d0fa 	srli	r20,r2,3
   12308:	b02b883a 	mov	r21,r22
   1230c:	0005883a 	mov	r2,zero
   12310:	a468b03a 	or	r20,r20,r17
   12314:	003eae06 	br	11dd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011dd0>
   12318:	1007883a 	mov	r3,r2
   1231c:	0023883a 	mov	r17,zero
   12320:	880a927a 	slli	r5,r17,9
   12324:	1805883a 	mov	r2,r3
   12328:	8822977a 	slli	r17,r17,29
   1232c:	280ad33a 	srli	r5,r5,12
   12330:	003ff406 	br	12304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012304>
   12334:	10c003cc 	andi	r3,r2,15
   12338:	01000104 	movi	r4,4
   1233c:	193ff626 	beq	r3,r4,12318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012318>
   12340:	0023883a 	mov	r17,zero
   12344:	003fd506 	br	1229c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701229c>
   12348:	0005883a 	mov	r2,zero
   1234c:	003fe706 	br	122ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70122ec>
   12350:	00800434 	movhi	r2,16
   12354:	89400234 	orhi	r5,r17,8
   12358:	10bfffc4 	addi	r2,r2,-1
   1235c:	b02b883a 	mov	r21,r22
   12360:	288a703a 	and	r5,r5,r2
   12364:	4029883a 	mov	r20,r8
   12368:	003eff06 	br	11f68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011f68>

0001236c <__subdf3>:
   1236c:	02000434 	movhi	r8,16
   12370:	423fffc4 	addi	r8,r8,-1
   12374:	defffb04 	addi	sp,sp,-20
   12378:	2a14703a 	and	r10,r5,r8
   1237c:	3812d53a 	srli	r9,r7,20
   12380:	3a10703a 	and	r8,r7,r8
   12384:	2006d77a 	srli	r3,r4,29
   12388:	3004d77a 	srli	r2,r6,29
   1238c:	dc000015 	stw	r16,0(sp)
   12390:	501490fa 	slli	r10,r10,3
   12394:	2820d53a 	srli	r16,r5,20
   12398:	401090fa 	slli	r8,r8,3
   1239c:	dc800215 	stw	r18,8(sp)
   123a0:	dc400115 	stw	r17,4(sp)
   123a4:	dfc00415 	stw	ra,16(sp)
   123a8:	202290fa 	slli	r17,r4,3
   123ac:	dcc00315 	stw	r19,12(sp)
   123b0:	4a41ffcc 	andi	r9,r9,2047
   123b4:	0101ffc4 	movi	r4,2047
   123b8:	2824d7fa 	srli	r18,r5,31
   123bc:	8401ffcc 	andi	r16,r16,2047
   123c0:	50c6b03a 	or	r3,r10,r3
   123c4:	380ed7fa 	srli	r7,r7,31
   123c8:	408ab03a 	or	r5,r8,r2
   123cc:	300c90fa 	slli	r6,r6,3
   123d0:	49009626 	beq	r9,r4,1262c <__subdf3+0x2c0>
   123d4:	39c0005c 	xori	r7,r7,1
   123d8:	8245c83a 	sub	r2,r16,r9
   123dc:	3c807426 	beq	r7,r18,125b0 <__subdf3+0x244>
   123e0:	0080af0e 	bge	zero,r2,126a0 <__subdf3+0x334>
   123e4:	48002a1e 	bne	r9,zero,12490 <__subdf3+0x124>
   123e8:	2988b03a 	or	r4,r5,r6
   123ec:	20009a1e 	bne	r4,zero,12658 <__subdf3+0x2ec>
   123f0:	888001cc 	andi	r2,r17,7
   123f4:	10000726 	beq	r2,zero,12414 <__subdf3+0xa8>
   123f8:	888003cc 	andi	r2,r17,15
   123fc:	01000104 	movi	r4,4
   12400:	11000426 	beq	r2,r4,12414 <__subdf3+0xa8>
   12404:	890b883a 	add	r5,r17,r4
   12408:	2c63803a 	cmpltu	r17,r5,r17
   1240c:	1c47883a 	add	r3,r3,r17
   12410:	2823883a 	mov	r17,r5
   12414:	1880202c 	andhi	r2,r3,128
   12418:	10005926 	beq	r2,zero,12580 <__subdf3+0x214>
   1241c:	84000044 	addi	r16,r16,1
   12420:	0081ffc4 	movi	r2,2047
   12424:	8080be26 	beq	r16,r2,12720 <__subdf3+0x3b4>
   12428:	017fe034 	movhi	r5,65408
   1242c:	297fffc4 	addi	r5,r5,-1
   12430:	1946703a 	and	r3,r3,r5
   12434:	1804977a 	slli	r2,r3,29
   12438:	1806927a 	slli	r3,r3,9
   1243c:	8822d0fa 	srli	r17,r17,3
   12440:	8401ffcc 	andi	r16,r16,2047
   12444:	180ad33a 	srli	r5,r3,12
   12448:	9100004c 	andi	r4,r18,1
   1244c:	1444b03a 	or	r2,r2,r17
   12450:	80c1ffcc 	andi	r3,r16,2047
   12454:	1820953a 	slli	r16,r3,20
   12458:	20c03fcc 	andi	r3,r4,255
   1245c:	180897fa 	slli	r4,r3,31
   12460:	00c00434 	movhi	r3,16
   12464:	18ffffc4 	addi	r3,r3,-1
   12468:	28c6703a 	and	r3,r5,r3
   1246c:	1c06b03a 	or	r3,r3,r16
   12470:	1906b03a 	or	r3,r3,r4
   12474:	dfc00417 	ldw	ra,16(sp)
   12478:	dcc00317 	ldw	r19,12(sp)
   1247c:	dc800217 	ldw	r18,8(sp)
   12480:	dc400117 	ldw	r17,4(sp)
   12484:	dc000017 	ldw	r16,0(sp)
   12488:	dec00504 	addi	sp,sp,20
   1248c:	f800283a 	ret
   12490:	0101ffc4 	movi	r4,2047
   12494:	813fd626 	beq	r16,r4,123f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f0>
   12498:	29402034 	orhi	r5,r5,128
   1249c:	01000e04 	movi	r4,56
   124a0:	2080a316 	blt	r4,r2,12730 <__subdf3+0x3c4>
   124a4:	010007c4 	movi	r4,31
   124a8:	2080c616 	blt	r4,r2,127c4 <__subdf3+0x458>
   124ac:	01000804 	movi	r4,32
   124b0:	2089c83a 	sub	r4,r4,r2
   124b4:	2910983a 	sll	r8,r5,r4
   124b8:	308ed83a 	srl	r7,r6,r2
   124bc:	3108983a 	sll	r4,r6,r4
   124c0:	2884d83a 	srl	r2,r5,r2
   124c4:	41ccb03a 	or	r6,r8,r7
   124c8:	2008c03a 	cmpne	r4,r4,zero
   124cc:	310cb03a 	or	r6,r6,r4
   124d0:	898dc83a 	sub	r6,r17,r6
   124d4:	89a3803a 	cmpltu	r17,r17,r6
   124d8:	1887c83a 	sub	r3,r3,r2
   124dc:	1c47c83a 	sub	r3,r3,r17
   124e0:	3023883a 	mov	r17,r6
   124e4:	1880202c 	andhi	r2,r3,128
   124e8:	10002326 	beq	r2,zero,12578 <__subdf3+0x20c>
   124ec:	04c02034 	movhi	r19,128
   124f0:	9cffffc4 	addi	r19,r19,-1
   124f4:	1ce6703a 	and	r19,r3,r19
   124f8:	98007a26 	beq	r19,zero,126e4 <__subdf3+0x378>
   124fc:	9809883a 	mov	r4,r19
   12500:	0006ab40 	call	6ab4 <__clzsi2>
   12504:	113ffe04 	addi	r4,r2,-8
   12508:	00c007c4 	movi	r3,31
   1250c:	19007b16 	blt	r3,r4,126fc <__subdf3+0x390>
   12510:	00800804 	movi	r2,32
   12514:	1105c83a 	sub	r2,r2,r4
   12518:	8884d83a 	srl	r2,r17,r2
   1251c:	9906983a 	sll	r3,r19,r4
   12520:	8922983a 	sll	r17,r17,r4
   12524:	10c4b03a 	or	r2,r2,r3
   12528:	24007816 	blt	r4,r16,1270c <__subdf3+0x3a0>
   1252c:	2421c83a 	sub	r16,r4,r16
   12530:	80c00044 	addi	r3,r16,1
   12534:	010007c4 	movi	r4,31
   12538:	20c09516 	blt	r4,r3,12790 <__subdf3+0x424>
   1253c:	01400804 	movi	r5,32
   12540:	28cbc83a 	sub	r5,r5,r3
   12544:	88c8d83a 	srl	r4,r17,r3
   12548:	8962983a 	sll	r17,r17,r5
   1254c:	114a983a 	sll	r5,r2,r5
   12550:	10c6d83a 	srl	r3,r2,r3
   12554:	8804c03a 	cmpne	r2,r17,zero
   12558:	290ab03a 	or	r5,r5,r4
   1255c:	28a2b03a 	or	r17,r5,r2
   12560:	0021883a 	mov	r16,zero
   12564:	003fa206 	br	123f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f0>
   12568:	2090b03a 	or	r8,r4,r2
   1256c:	40018e26 	beq	r8,zero,12ba8 <__subdf3+0x83c>
   12570:	1007883a 	mov	r3,r2
   12574:	2023883a 	mov	r17,r4
   12578:	888001cc 	andi	r2,r17,7
   1257c:	103f9e1e 	bne	r2,zero,123f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f8>
   12580:	1804977a 	slli	r2,r3,29
   12584:	8822d0fa 	srli	r17,r17,3
   12588:	1810d0fa 	srli	r8,r3,3
   1258c:	9100004c 	andi	r4,r18,1
   12590:	1444b03a 	or	r2,r2,r17
   12594:	00c1ffc4 	movi	r3,2047
   12598:	80c02826 	beq	r16,r3,1263c <__subdf3+0x2d0>
   1259c:	01400434 	movhi	r5,16
   125a0:	297fffc4 	addi	r5,r5,-1
   125a4:	80e0703a 	and	r16,r16,r3
   125a8:	414a703a 	and	r5,r8,r5
   125ac:	003fa806 	br	12450 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012450>
   125b0:	0080630e 	bge	zero,r2,12740 <__subdf3+0x3d4>
   125b4:	48003026 	beq	r9,zero,12678 <__subdf3+0x30c>
   125b8:	0101ffc4 	movi	r4,2047
   125bc:	813f8c26 	beq	r16,r4,123f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f0>
   125c0:	29402034 	orhi	r5,r5,128
   125c4:	01000e04 	movi	r4,56
   125c8:	2080a90e 	bge	r4,r2,12870 <__subdf3+0x504>
   125cc:	298cb03a 	or	r6,r5,r6
   125d0:	3012c03a 	cmpne	r9,r6,zero
   125d4:	0005883a 	mov	r2,zero
   125d8:	4c53883a 	add	r9,r9,r17
   125dc:	4c63803a 	cmpltu	r17,r9,r17
   125e0:	10c7883a 	add	r3,r2,r3
   125e4:	88c7883a 	add	r3,r17,r3
   125e8:	4823883a 	mov	r17,r9
   125ec:	1880202c 	andhi	r2,r3,128
   125f0:	1000d026 	beq	r2,zero,12934 <__subdf3+0x5c8>
   125f4:	84000044 	addi	r16,r16,1
   125f8:	0081ffc4 	movi	r2,2047
   125fc:	8080fe26 	beq	r16,r2,129f8 <__subdf3+0x68c>
   12600:	00bfe034 	movhi	r2,65408
   12604:	10bfffc4 	addi	r2,r2,-1
   12608:	1886703a 	and	r3,r3,r2
   1260c:	880ad07a 	srli	r5,r17,1
   12610:	180497fa 	slli	r2,r3,31
   12614:	8900004c 	andi	r4,r17,1
   12618:	2922b03a 	or	r17,r5,r4
   1261c:	1806d07a 	srli	r3,r3,1
   12620:	1462b03a 	or	r17,r2,r17
   12624:	3825883a 	mov	r18,r7
   12628:	003f7106 	br	123f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f0>
   1262c:	2984b03a 	or	r2,r5,r6
   12630:	103f6826 	beq	r2,zero,123d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123d4>
   12634:	39c03fcc 	andi	r7,r7,255
   12638:	003f6706 	br	123d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123d8>
   1263c:	4086b03a 	or	r3,r8,r2
   12640:	18015226 	beq	r3,zero,12b8c <__subdf3+0x820>
   12644:	00c00434 	movhi	r3,16
   12648:	41400234 	orhi	r5,r8,8
   1264c:	18ffffc4 	addi	r3,r3,-1
   12650:	28ca703a 	and	r5,r5,r3
   12654:	003f7e06 	br	12450 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012450>
   12658:	10bfffc4 	addi	r2,r2,-1
   1265c:	1000491e 	bne	r2,zero,12784 <__subdf3+0x418>
   12660:	898fc83a 	sub	r7,r17,r6
   12664:	89e3803a 	cmpltu	r17,r17,r7
   12668:	1947c83a 	sub	r3,r3,r5
   1266c:	1c47c83a 	sub	r3,r3,r17
   12670:	3823883a 	mov	r17,r7
   12674:	003f9b06 	br	124e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70124e4>
   12678:	2988b03a 	or	r4,r5,r6
   1267c:	203f5c26 	beq	r4,zero,123f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f0>
   12680:	10bfffc4 	addi	r2,r2,-1
   12684:	1000931e 	bne	r2,zero,128d4 <__subdf3+0x568>
   12688:	898d883a 	add	r6,r17,r6
   1268c:	3463803a 	cmpltu	r17,r6,r17
   12690:	1947883a 	add	r3,r3,r5
   12694:	88c7883a 	add	r3,r17,r3
   12698:	3023883a 	mov	r17,r6
   1269c:	003fd306 	br	125ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70125ec>
   126a0:	1000541e 	bne	r2,zero,127f4 <__subdf3+0x488>
   126a4:	80800044 	addi	r2,r16,1
   126a8:	1081ffcc 	andi	r2,r2,2047
   126ac:	01000044 	movi	r4,1
   126b0:	2080a20e 	bge	r4,r2,1293c <__subdf3+0x5d0>
   126b4:	8989c83a 	sub	r4,r17,r6
   126b8:	8905803a 	cmpltu	r2,r17,r4
   126bc:	1967c83a 	sub	r19,r3,r5
   126c0:	98a7c83a 	sub	r19,r19,r2
   126c4:	9880202c 	andhi	r2,r19,128
   126c8:	10006326 	beq	r2,zero,12858 <__subdf3+0x4ec>
   126cc:	3463c83a 	sub	r17,r6,r17
   126d0:	28c7c83a 	sub	r3,r5,r3
   126d4:	344d803a 	cmpltu	r6,r6,r17
   126d8:	19a7c83a 	sub	r19,r3,r6
   126dc:	3825883a 	mov	r18,r7
   126e0:	983f861e 	bne	r19,zero,124fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70124fc>
   126e4:	8809883a 	mov	r4,r17
   126e8:	0006ab40 	call	6ab4 <__clzsi2>
   126ec:	10800804 	addi	r2,r2,32
   126f0:	113ffe04 	addi	r4,r2,-8
   126f4:	00c007c4 	movi	r3,31
   126f8:	193f850e 	bge	r3,r4,12510 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012510>
   126fc:	10bff604 	addi	r2,r2,-40
   12700:	8884983a 	sll	r2,r17,r2
   12704:	0023883a 	mov	r17,zero
   12708:	243f880e 	bge	r4,r16,1252c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701252c>
   1270c:	00ffe034 	movhi	r3,65408
   12710:	18ffffc4 	addi	r3,r3,-1
   12714:	8121c83a 	sub	r16,r16,r4
   12718:	10c6703a 	and	r3,r2,r3
   1271c:	003f3406 	br	123f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f0>
   12720:	9100004c 	andi	r4,r18,1
   12724:	000b883a 	mov	r5,zero
   12728:	0005883a 	mov	r2,zero
   1272c:	003f4806 	br	12450 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012450>
   12730:	298cb03a 	or	r6,r5,r6
   12734:	300cc03a 	cmpne	r6,r6,zero
   12738:	0005883a 	mov	r2,zero
   1273c:	003f6406 	br	124d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70124d0>
   12740:	10009a1e 	bne	r2,zero,129ac <__subdf3+0x640>
   12744:	82400044 	addi	r9,r16,1
   12748:	4881ffcc 	andi	r2,r9,2047
   1274c:	02800044 	movi	r10,1
   12750:	5080670e 	bge	r10,r2,128f0 <__subdf3+0x584>
   12754:	0081ffc4 	movi	r2,2047
   12758:	4880af26 	beq	r9,r2,12a18 <__subdf3+0x6ac>
   1275c:	898d883a 	add	r6,r17,r6
   12760:	1945883a 	add	r2,r3,r5
   12764:	3447803a 	cmpltu	r3,r6,r17
   12768:	1887883a 	add	r3,r3,r2
   1276c:	182297fa 	slli	r17,r3,31
   12770:	300cd07a 	srli	r6,r6,1
   12774:	1806d07a 	srli	r3,r3,1
   12778:	4821883a 	mov	r16,r9
   1277c:	89a2b03a 	or	r17,r17,r6
   12780:	003f1b06 	br	123f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f0>
   12784:	0101ffc4 	movi	r4,2047
   12788:	813f441e 	bne	r16,r4,1249c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701249c>
   1278c:	003f1806 	br	123f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f0>
   12790:	843ff844 	addi	r16,r16,-31
   12794:	01400804 	movi	r5,32
   12798:	1408d83a 	srl	r4,r2,r16
   1279c:	19405026 	beq	r3,r5,128e0 <__subdf3+0x574>
   127a0:	01401004 	movi	r5,64
   127a4:	28c7c83a 	sub	r3,r5,r3
   127a8:	10c4983a 	sll	r2,r2,r3
   127ac:	88a2b03a 	or	r17,r17,r2
   127b0:	8822c03a 	cmpne	r17,r17,zero
   127b4:	2462b03a 	or	r17,r4,r17
   127b8:	0007883a 	mov	r3,zero
   127bc:	0021883a 	mov	r16,zero
   127c0:	003f6d06 	br	12578 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012578>
   127c4:	11fff804 	addi	r7,r2,-32
   127c8:	01000804 	movi	r4,32
   127cc:	29ced83a 	srl	r7,r5,r7
   127d0:	11004526 	beq	r2,r4,128e8 <__subdf3+0x57c>
   127d4:	01001004 	movi	r4,64
   127d8:	2089c83a 	sub	r4,r4,r2
   127dc:	2904983a 	sll	r2,r5,r4
   127e0:	118cb03a 	or	r6,r2,r6
   127e4:	300cc03a 	cmpne	r6,r6,zero
   127e8:	398cb03a 	or	r6,r7,r6
   127ec:	0005883a 	mov	r2,zero
   127f0:	003f3706 	br	124d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70124d0>
   127f4:	80002a26 	beq	r16,zero,128a0 <__subdf3+0x534>
   127f8:	0101ffc4 	movi	r4,2047
   127fc:	49006626 	beq	r9,r4,12998 <__subdf3+0x62c>
   12800:	0085c83a 	sub	r2,zero,r2
   12804:	18c02034 	orhi	r3,r3,128
   12808:	01000e04 	movi	r4,56
   1280c:	20807e16 	blt	r4,r2,12a08 <__subdf3+0x69c>
   12810:	010007c4 	movi	r4,31
   12814:	2080e716 	blt	r4,r2,12bb4 <__subdf3+0x848>
   12818:	01000804 	movi	r4,32
   1281c:	2089c83a 	sub	r4,r4,r2
   12820:	1914983a 	sll	r10,r3,r4
   12824:	8890d83a 	srl	r8,r17,r2
   12828:	8908983a 	sll	r4,r17,r4
   1282c:	1884d83a 	srl	r2,r3,r2
   12830:	5222b03a 	or	r17,r10,r8
   12834:	2006c03a 	cmpne	r3,r4,zero
   12838:	88e2b03a 	or	r17,r17,r3
   1283c:	3463c83a 	sub	r17,r6,r17
   12840:	2885c83a 	sub	r2,r5,r2
   12844:	344d803a 	cmpltu	r6,r6,r17
   12848:	1187c83a 	sub	r3,r2,r6
   1284c:	4821883a 	mov	r16,r9
   12850:	3825883a 	mov	r18,r7
   12854:	003f2306 	br	124e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70124e4>
   12858:	24d0b03a 	or	r8,r4,r19
   1285c:	40001b1e 	bne	r8,zero,128cc <__subdf3+0x560>
   12860:	0005883a 	mov	r2,zero
   12864:	0009883a 	mov	r4,zero
   12868:	0021883a 	mov	r16,zero
   1286c:	003f4906 	br	12594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012594>
   12870:	010007c4 	movi	r4,31
   12874:	20803a16 	blt	r4,r2,12960 <__subdf3+0x5f4>
   12878:	01000804 	movi	r4,32
   1287c:	2089c83a 	sub	r4,r4,r2
   12880:	2912983a 	sll	r9,r5,r4
   12884:	3090d83a 	srl	r8,r6,r2
   12888:	3108983a 	sll	r4,r6,r4
   1288c:	2884d83a 	srl	r2,r5,r2
   12890:	4a12b03a 	or	r9,r9,r8
   12894:	2008c03a 	cmpne	r4,r4,zero
   12898:	4912b03a 	or	r9,r9,r4
   1289c:	003f4e06 	br	125d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70125d8>
   128a0:	1c48b03a 	or	r4,r3,r17
   128a4:	20003c26 	beq	r4,zero,12998 <__subdf3+0x62c>
   128a8:	0084303a 	nor	r2,zero,r2
   128ac:	1000381e 	bne	r2,zero,12990 <__subdf3+0x624>
   128b0:	3463c83a 	sub	r17,r6,r17
   128b4:	28c5c83a 	sub	r2,r5,r3
   128b8:	344d803a 	cmpltu	r6,r6,r17
   128bc:	1187c83a 	sub	r3,r2,r6
   128c0:	4821883a 	mov	r16,r9
   128c4:	3825883a 	mov	r18,r7
   128c8:	003f0606 	br	124e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70124e4>
   128cc:	2023883a 	mov	r17,r4
   128d0:	003f0906 	br	124f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70124f8>
   128d4:	0101ffc4 	movi	r4,2047
   128d8:	813f3a1e 	bne	r16,r4,125c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70125c4>
   128dc:	003ec406 	br	123f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f0>
   128e0:	0005883a 	mov	r2,zero
   128e4:	003fb106 	br	127ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70127ac>
   128e8:	0005883a 	mov	r2,zero
   128ec:	003fbc06 	br	127e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70127e0>
   128f0:	1c44b03a 	or	r2,r3,r17
   128f4:	80008e1e 	bne	r16,zero,12b30 <__subdf3+0x7c4>
   128f8:	1000c826 	beq	r2,zero,12c1c <__subdf3+0x8b0>
   128fc:	2984b03a 	or	r2,r5,r6
   12900:	103ebb26 	beq	r2,zero,123f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f0>
   12904:	8989883a 	add	r4,r17,r6
   12908:	1945883a 	add	r2,r3,r5
   1290c:	2447803a 	cmpltu	r3,r4,r17
   12910:	1887883a 	add	r3,r3,r2
   12914:	1880202c 	andhi	r2,r3,128
   12918:	2023883a 	mov	r17,r4
   1291c:	103f1626 	beq	r2,zero,12578 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012578>
   12920:	00bfe034 	movhi	r2,65408
   12924:	10bfffc4 	addi	r2,r2,-1
   12928:	5021883a 	mov	r16,r10
   1292c:	1886703a 	and	r3,r3,r2
   12930:	003eaf06 	br	123f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f0>
   12934:	3825883a 	mov	r18,r7
   12938:	003f0f06 	br	12578 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012578>
   1293c:	1c44b03a 	or	r2,r3,r17
   12940:	8000251e 	bne	r16,zero,129d8 <__subdf3+0x66c>
   12944:	1000661e 	bne	r2,zero,12ae0 <__subdf3+0x774>
   12948:	2990b03a 	or	r8,r5,r6
   1294c:	40009626 	beq	r8,zero,12ba8 <__subdf3+0x83c>
   12950:	2807883a 	mov	r3,r5
   12954:	3023883a 	mov	r17,r6
   12958:	3825883a 	mov	r18,r7
   1295c:	003ea406 	br	123f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f0>
   12960:	127ff804 	addi	r9,r2,-32
   12964:	01000804 	movi	r4,32
   12968:	2a52d83a 	srl	r9,r5,r9
   1296c:	11008c26 	beq	r2,r4,12ba0 <__subdf3+0x834>
   12970:	01001004 	movi	r4,64
   12974:	2085c83a 	sub	r2,r4,r2
   12978:	2884983a 	sll	r2,r5,r2
   1297c:	118cb03a 	or	r6,r2,r6
   12980:	300cc03a 	cmpne	r6,r6,zero
   12984:	4992b03a 	or	r9,r9,r6
   12988:	0005883a 	mov	r2,zero
   1298c:	003f1206 	br	125d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70125d8>
   12990:	0101ffc4 	movi	r4,2047
   12994:	493f9c1e 	bne	r9,r4,12808 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012808>
   12998:	2807883a 	mov	r3,r5
   1299c:	3023883a 	mov	r17,r6
   129a0:	4821883a 	mov	r16,r9
   129a4:	3825883a 	mov	r18,r7
   129a8:	003e9106 	br	123f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f0>
   129ac:	80001f1e 	bne	r16,zero,12a2c <__subdf3+0x6c0>
   129b0:	1c48b03a 	or	r4,r3,r17
   129b4:	20005a26 	beq	r4,zero,12b20 <__subdf3+0x7b4>
   129b8:	0084303a 	nor	r2,zero,r2
   129bc:	1000561e 	bne	r2,zero,12b18 <__subdf3+0x7ac>
   129c0:	89a3883a 	add	r17,r17,r6
   129c4:	1945883a 	add	r2,r3,r5
   129c8:	898d803a 	cmpltu	r6,r17,r6
   129cc:	3087883a 	add	r3,r6,r2
   129d0:	4821883a 	mov	r16,r9
   129d4:	003f0506 	br	125ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70125ec>
   129d8:	10002b1e 	bne	r2,zero,12a88 <__subdf3+0x71c>
   129dc:	2984b03a 	or	r2,r5,r6
   129e0:	10008026 	beq	r2,zero,12be4 <__subdf3+0x878>
   129e4:	2807883a 	mov	r3,r5
   129e8:	3023883a 	mov	r17,r6
   129ec:	3825883a 	mov	r18,r7
   129f0:	0401ffc4 	movi	r16,2047
   129f4:	003e7e06 	br	123f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f0>
   129f8:	3809883a 	mov	r4,r7
   129fc:	0011883a 	mov	r8,zero
   12a00:	0005883a 	mov	r2,zero
   12a04:	003ee306 	br	12594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012594>
   12a08:	1c62b03a 	or	r17,r3,r17
   12a0c:	8822c03a 	cmpne	r17,r17,zero
   12a10:	0005883a 	mov	r2,zero
   12a14:	003f8906 	br	1283c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701283c>
   12a18:	3809883a 	mov	r4,r7
   12a1c:	4821883a 	mov	r16,r9
   12a20:	0011883a 	mov	r8,zero
   12a24:	0005883a 	mov	r2,zero
   12a28:	003eda06 	br	12594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012594>
   12a2c:	0101ffc4 	movi	r4,2047
   12a30:	49003b26 	beq	r9,r4,12b20 <__subdf3+0x7b4>
   12a34:	0085c83a 	sub	r2,zero,r2
   12a38:	18c02034 	orhi	r3,r3,128
   12a3c:	01000e04 	movi	r4,56
   12a40:	20806e16 	blt	r4,r2,12bfc <__subdf3+0x890>
   12a44:	010007c4 	movi	r4,31
   12a48:	20807716 	blt	r4,r2,12c28 <__subdf3+0x8bc>
   12a4c:	01000804 	movi	r4,32
   12a50:	2089c83a 	sub	r4,r4,r2
   12a54:	1914983a 	sll	r10,r3,r4
   12a58:	8890d83a 	srl	r8,r17,r2
   12a5c:	8908983a 	sll	r4,r17,r4
   12a60:	1884d83a 	srl	r2,r3,r2
   12a64:	5222b03a 	or	r17,r10,r8
   12a68:	2006c03a 	cmpne	r3,r4,zero
   12a6c:	88e2b03a 	or	r17,r17,r3
   12a70:	89a3883a 	add	r17,r17,r6
   12a74:	1145883a 	add	r2,r2,r5
   12a78:	898d803a 	cmpltu	r6,r17,r6
   12a7c:	3087883a 	add	r3,r6,r2
   12a80:	4821883a 	mov	r16,r9
   12a84:	003ed906 	br	125ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70125ec>
   12a88:	2984b03a 	or	r2,r5,r6
   12a8c:	10004226 	beq	r2,zero,12b98 <__subdf3+0x82c>
   12a90:	1808d0fa 	srli	r4,r3,3
   12a94:	8822d0fa 	srli	r17,r17,3
   12a98:	1806977a 	slli	r3,r3,29
   12a9c:	2080022c 	andhi	r2,r4,8
   12aa0:	1c62b03a 	or	r17,r3,r17
   12aa4:	10000826 	beq	r2,zero,12ac8 <__subdf3+0x75c>
   12aa8:	2812d0fa 	srli	r9,r5,3
   12aac:	4880022c 	andhi	r2,r9,8
   12ab0:	1000051e 	bne	r2,zero,12ac8 <__subdf3+0x75c>
   12ab4:	300cd0fa 	srli	r6,r6,3
   12ab8:	2804977a 	slli	r2,r5,29
   12abc:	4809883a 	mov	r4,r9
   12ac0:	3825883a 	mov	r18,r7
   12ac4:	11a2b03a 	or	r17,r2,r6
   12ac8:	8806d77a 	srli	r3,r17,29
   12acc:	200890fa 	slli	r4,r4,3
   12ad0:	882290fa 	slli	r17,r17,3
   12ad4:	0401ffc4 	movi	r16,2047
   12ad8:	1906b03a 	or	r3,r3,r4
   12adc:	003e4406 	br	123f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f0>
   12ae0:	2984b03a 	or	r2,r5,r6
   12ae4:	103e4226 	beq	r2,zero,123f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f0>
   12ae8:	8989c83a 	sub	r4,r17,r6
   12aec:	8911803a 	cmpltu	r8,r17,r4
   12af0:	1945c83a 	sub	r2,r3,r5
   12af4:	1205c83a 	sub	r2,r2,r8
   12af8:	1200202c 	andhi	r8,r2,128
   12afc:	403e9a26 	beq	r8,zero,12568 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012568>
   12b00:	3463c83a 	sub	r17,r6,r17
   12b04:	28c5c83a 	sub	r2,r5,r3
   12b08:	344d803a 	cmpltu	r6,r6,r17
   12b0c:	1187c83a 	sub	r3,r2,r6
   12b10:	3825883a 	mov	r18,r7
   12b14:	003e3606 	br	123f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f0>
   12b18:	0101ffc4 	movi	r4,2047
   12b1c:	493fc71e 	bne	r9,r4,12a3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012a3c>
   12b20:	2807883a 	mov	r3,r5
   12b24:	3023883a 	mov	r17,r6
   12b28:	4821883a 	mov	r16,r9
   12b2c:	003e3006 	br	123f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f0>
   12b30:	10003626 	beq	r2,zero,12c0c <__subdf3+0x8a0>
   12b34:	2984b03a 	or	r2,r5,r6
   12b38:	10001726 	beq	r2,zero,12b98 <__subdf3+0x82c>
   12b3c:	1808d0fa 	srli	r4,r3,3
   12b40:	8822d0fa 	srli	r17,r17,3
   12b44:	1806977a 	slli	r3,r3,29
   12b48:	2080022c 	andhi	r2,r4,8
   12b4c:	1c62b03a 	or	r17,r3,r17
   12b50:	10000726 	beq	r2,zero,12b70 <__subdf3+0x804>
   12b54:	2812d0fa 	srli	r9,r5,3
   12b58:	4880022c 	andhi	r2,r9,8
   12b5c:	1000041e 	bne	r2,zero,12b70 <__subdf3+0x804>
   12b60:	300cd0fa 	srli	r6,r6,3
   12b64:	2804977a 	slli	r2,r5,29
   12b68:	4809883a 	mov	r4,r9
   12b6c:	11a2b03a 	or	r17,r2,r6
   12b70:	8806d77a 	srli	r3,r17,29
   12b74:	200890fa 	slli	r4,r4,3
   12b78:	882290fa 	slli	r17,r17,3
   12b7c:	3825883a 	mov	r18,r7
   12b80:	1906b03a 	or	r3,r3,r4
   12b84:	0401ffc4 	movi	r16,2047
   12b88:	003e1906 	br	123f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f0>
   12b8c:	000b883a 	mov	r5,zero
   12b90:	0005883a 	mov	r2,zero
   12b94:	003e2e06 	br	12450 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012450>
   12b98:	0401ffc4 	movi	r16,2047
   12b9c:	003e1406 	br	123f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f0>
   12ba0:	0005883a 	mov	r2,zero
   12ba4:	003f7506 	br	1297c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701297c>
   12ba8:	0005883a 	mov	r2,zero
   12bac:	0009883a 	mov	r4,zero
   12bb0:	003e7806 	br	12594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012594>
   12bb4:	123ff804 	addi	r8,r2,-32
   12bb8:	01000804 	movi	r4,32
   12bbc:	1a10d83a 	srl	r8,r3,r8
   12bc0:	11002526 	beq	r2,r4,12c58 <__subdf3+0x8ec>
   12bc4:	01001004 	movi	r4,64
   12bc8:	2085c83a 	sub	r2,r4,r2
   12bcc:	1884983a 	sll	r2,r3,r2
   12bd0:	1444b03a 	or	r2,r2,r17
   12bd4:	1004c03a 	cmpne	r2,r2,zero
   12bd8:	40a2b03a 	or	r17,r8,r2
   12bdc:	0005883a 	mov	r2,zero
   12be0:	003f1606 	br	1283c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701283c>
   12be4:	02000434 	movhi	r8,16
   12be8:	0009883a 	mov	r4,zero
   12bec:	423fffc4 	addi	r8,r8,-1
   12bf0:	00bfffc4 	movi	r2,-1
   12bf4:	0401ffc4 	movi	r16,2047
   12bf8:	003e6606 	br	12594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012594>
   12bfc:	1c62b03a 	or	r17,r3,r17
   12c00:	8822c03a 	cmpne	r17,r17,zero
   12c04:	0005883a 	mov	r2,zero
   12c08:	003f9906 	br	12a70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012a70>
   12c0c:	2807883a 	mov	r3,r5
   12c10:	3023883a 	mov	r17,r6
   12c14:	0401ffc4 	movi	r16,2047
   12c18:	003df506 	br	123f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f0>
   12c1c:	2807883a 	mov	r3,r5
   12c20:	3023883a 	mov	r17,r6
   12c24:	003df206 	br	123f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123f0>
   12c28:	123ff804 	addi	r8,r2,-32
   12c2c:	01000804 	movi	r4,32
   12c30:	1a10d83a 	srl	r8,r3,r8
   12c34:	11000a26 	beq	r2,r4,12c60 <__subdf3+0x8f4>
   12c38:	01001004 	movi	r4,64
   12c3c:	2085c83a 	sub	r2,r4,r2
   12c40:	1884983a 	sll	r2,r3,r2
   12c44:	1444b03a 	or	r2,r2,r17
   12c48:	1004c03a 	cmpne	r2,r2,zero
   12c4c:	40a2b03a 	or	r17,r8,r2
   12c50:	0005883a 	mov	r2,zero
   12c54:	003f8606 	br	12a70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012a70>
   12c58:	0005883a 	mov	r2,zero
   12c5c:	003fdc06 	br	12bd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bd0>
   12c60:	0005883a 	mov	r2,zero
   12c64:	003ff706 	br	12c44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012c44>

00012c68 <__floatunsidf>:
   12c68:	defffe04 	addi	sp,sp,-8
   12c6c:	dc000015 	stw	r16,0(sp)
   12c70:	dfc00115 	stw	ra,4(sp)
   12c74:	2021883a 	mov	r16,r4
   12c78:	20002226 	beq	r4,zero,12d04 <__floatunsidf+0x9c>
   12c7c:	0006ab40 	call	6ab4 <__clzsi2>
   12c80:	01010784 	movi	r4,1054
   12c84:	2089c83a 	sub	r4,r4,r2
   12c88:	01810cc4 	movi	r6,1075
   12c8c:	310dc83a 	sub	r6,r6,r4
   12c90:	00c007c4 	movi	r3,31
   12c94:	1980120e 	bge	r3,r6,12ce0 <__floatunsidf+0x78>
   12c98:	00c104c4 	movi	r3,1043
   12c9c:	1907c83a 	sub	r3,r3,r4
   12ca0:	80ca983a 	sll	r5,r16,r3
   12ca4:	00800434 	movhi	r2,16
   12ca8:	10bfffc4 	addi	r2,r2,-1
   12cac:	2101ffcc 	andi	r4,r4,2047
   12cb0:	0021883a 	mov	r16,zero
   12cb4:	288a703a 	and	r5,r5,r2
   12cb8:	2008953a 	slli	r4,r4,20
   12cbc:	00c00434 	movhi	r3,16
   12cc0:	18ffffc4 	addi	r3,r3,-1
   12cc4:	28c6703a 	and	r3,r5,r3
   12cc8:	8005883a 	mov	r2,r16
   12ccc:	1906b03a 	or	r3,r3,r4
   12cd0:	dfc00117 	ldw	ra,4(sp)
   12cd4:	dc000017 	ldw	r16,0(sp)
   12cd8:	dec00204 	addi	sp,sp,8
   12cdc:	f800283a 	ret
   12ce0:	00c002c4 	movi	r3,11
   12ce4:	188bc83a 	sub	r5,r3,r2
   12ce8:	814ad83a 	srl	r5,r16,r5
   12cec:	00c00434 	movhi	r3,16
   12cf0:	18ffffc4 	addi	r3,r3,-1
   12cf4:	81a0983a 	sll	r16,r16,r6
   12cf8:	2101ffcc 	andi	r4,r4,2047
   12cfc:	28ca703a 	and	r5,r5,r3
   12d00:	003fed06 	br	12cb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012cb8>
   12d04:	0009883a 	mov	r4,zero
   12d08:	000b883a 	mov	r5,zero
   12d0c:	003fea06 	br	12cb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012cb8>

00012d10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12d10:	defffe04 	addi	sp,sp,-8
   12d14:	dfc00115 	stw	ra,4(sp)
   12d18:	df000015 	stw	fp,0(sp)
   12d1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12d20:	d0a02117 	ldw	r2,-32636(gp)
   12d24:	10000326 	beq	r2,zero,12d34 <alt_get_errno+0x24>
   12d28:	d0a02117 	ldw	r2,-32636(gp)
   12d2c:	103ee83a 	callr	r2
   12d30:	00000106 	br	12d38 <alt_get_errno+0x28>
   12d34:	d0a83b04 	addi	r2,gp,-24340
}
   12d38:	e037883a 	mov	sp,fp
   12d3c:	dfc00117 	ldw	ra,4(sp)
   12d40:	df000017 	ldw	fp,0(sp)
   12d44:	dec00204 	addi	sp,sp,8
   12d48:	f800283a 	ret

00012d4c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   12d4c:	defffb04 	addi	sp,sp,-20
   12d50:	dfc00415 	stw	ra,16(sp)
   12d54:	df000315 	stw	fp,12(sp)
   12d58:	df000304 	addi	fp,sp,12
   12d5c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   12d60:	e0bfff17 	ldw	r2,-4(fp)
   12d64:	10000616 	blt	r2,zero,12d80 <close+0x34>
   12d68:	e0bfff17 	ldw	r2,-4(fp)
   12d6c:	10c00324 	muli	r3,r2,12
   12d70:	008000b4 	movhi	r2,2
   12d74:	10835104 	addi	r2,r2,3396
   12d78:	1885883a 	add	r2,r3,r2
   12d7c:	00000106 	br	12d84 <close+0x38>
   12d80:	0005883a 	mov	r2,zero
   12d84:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   12d88:	e0bffd17 	ldw	r2,-12(fp)
   12d8c:	10001926 	beq	r2,zero,12df4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   12d90:	e0bffd17 	ldw	r2,-12(fp)
   12d94:	10800017 	ldw	r2,0(r2)
   12d98:	10800417 	ldw	r2,16(r2)
   12d9c:	10000626 	beq	r2,zero,12db8 <close+0x6c>
   12da0:	e0bffd17 	ldw	r2,-12(fp)
   12da4:	10800017 	ldw	r2,0(r2)
   12da8:	10800417 	ldw	r2,16(r2)
   12dac:	e13ffd17 	ldw	r4,-12(fp)
   12db0:	103ee83a 	callr	r2
   12db4:	00000106 	br	12dbc <close+0x70>
   12db8:	0005883a 	mov	r2,zero
   12dbc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   12dc0:	e13fff17 	ldw	r4,-4(fp)
   12dc4:	00135c40 	call	135c4 <alt_release_fd>
    if (rval < 0)
   12dc8:	e0bffe17 	ldw	r2,-8(fp)
   12dcc:	1000070e 	bge	r2,zero,12dec <close+0xa0>
    {
      ALT_ERRNO = -rval;
   12dd0:	0012d100 	call	12d10 <alt_get_errno>
   12dd4:	1007883a 	mov	r3,r2
   12dd8:	e0bffe17 	ldw	r2,-8(fp)
   12ddc:	0085c83a 	sub	r2,zero,r2
   12de0:	18800015 	stw	r2,0(r3)
      return -1;
   12de4:	00bfffc4 	movi	r2,-1
   12de8:	00000706 	br	12e08 <close+0xbc>
    }
    return 0;
   12dec:	0005883a 	mov	r2,zero
   12df0:	00000506 	br	12e08 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12df4:	0012d100 	call	12d10 <alt_get_errno>
   12df8:	1007883a 	mov	r3,r2
   12dfc:	00801444 	movi	r2,81
   12e00:	18800015 	stw	r2,0(r3)
    return -1;
   12e04:	00bfffc4 	movi	r2,-1
  }
}
   12e08:	e037883a 	mov	sp,fp
   12e0c:	dfc00117 	ldw	ra,4(sp)
   12e10:	df000017 	ldw	fp,0(sp)
   12e14:	dec00204 	addi	sp,sp,8
   12e18:	f800283a 	ret

00012e1c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   12e1c:	defffc04 	addi	sp,sp,-16
   12e20:	df000315 	stw	fp,12(sp)
   12e24:	df000304 	addi	fp,sp,12
   12e28:	e13ffd15 	stw	r4,-12(fp)
   12e2c:	e17ffe15 	stw	r5,-8(fp)
   12e30:	e1bfff15 	stw	r6,-4(fp)
  return len;
   12e34:	e0bfff17 	ldw	r2,-4(fp)
}
   12e38:	e037883a 	mov	sp,fp
   12e3c:	df000017 	ldw	fp,0(sp)
   12e40:	dec00104 	addi	sp,sp,4
   12e44:	f800283a 	ret

00012e48 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12e48:	defffd04 	addi	sp,sp,-12
   12e4c:	df000215 	stw	fp,8(sp)
   12e50:	df000204 	addi	fp,sp,8
   12e54:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   12e58:	d0284745 	stb	zero,-24291(gp)
   12e5c:	e0bfff17 	ldw	r2,-4(fp)
   12e60:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   12e64:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   12e68:	10000226 	beq	r2,zero,12e74 <_exit+0x2c>
    ALT_SIM_FAIL();
   12e6c:	002af070 	cmpltui	zero,zero,43969
   12e70:	00000106 	br	12e78 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   12e74:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   12e78:	003fff06 	br	12e78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012e78>

00012e7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12e7c:	defffe04 	addi	sp,sp,-8
   12e80:	dfc00115 	stw	ra,4(sp)
   12e84:	df000015 	stw	fp,0(sp)
   12e88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12e8c:	d0a02117 	ldw	r2,-32636(gp)
   12e90:	10000326 	beq	r2,zero,12ea0 <alt_get_errno+0x24>
   12e94:	d0a02117 	ldw	r2,-32636(gp)
   12e98:	103ee83a 	callr	r2
   12e9c:	00000106 	br	12ea4 <alt_get_errno+0x28>
   12ea0:	d0a83b04 	addi	r2,gp,-24340
}
   12ea4:	e037883a 	mov	sp,fp
   12ea8:	dfc00117 	ldw	ra,4(sp)
   12eac:	df000017 	ldw	fp,0(sp)
   12eb0:	dec00204 	addi	sp,sp,8
   12eb4:	f800283a 	ret

00012eb8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   12eb8:	defffb04 	addi	sp,sp,-20
   12ebc:	dfc00415 	stw	ra,16(sp)
   12ec0:	df000315 	stw	fp,12(sp)
   12ec4:	df000304 	addi	fp,sp,12
   12ec8:	e13ffe15 	stw	r4,-8(fp)
   12ecc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12ed0:	e0bffe17 	ldw	r2,-8(fp)
   12ed4:	10000616 	blt	r2,zero,12ef0 <fstat+0x38>
   12ed8:	e0bffe17 	ldw	r2,-8(fp)
   12edc:	10c00324 	muli	r3,r2,12
   12ee0:	008000b4 	movhi	r2,2
   12ee4:	10835104 	addi	r2,r2,3396
   12ee8:	1885883a 	add	r2,r3,r2
   12eec:	00000106 	br	12ef4 <fstat+0x3c>
   12ef0:	0005883a 	mov	r2,zero
   12ef4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   12ef8:	e0bffd17 	ldw	r2,-12(fp)
   12efc:	10001026 	beq	r2,zero,12f40 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   12f00:	e0bffd17 	ldw	r2,-12(fp)
   12f04:	10800017 	ldw	r2,0(r2)
   12f08:	10800817 	ldw	r2,32(r2)
   12f0c:	10000726 	beq	r2,zero,12f2c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   12f10:	e0bffd17 	ldw	r2,-12(fp)
   12f14:	10800017 	ldw	r2,0(r2)
   12f18:	10800817 	ldw	r2,32(r2)
   12f1c:	e17fff17 	ldw	r5,-4(fp)
   12f20:	e13ffd17 	ldw	r4,-12(fp)
   12f24:	103ee83a 	callr	r2
   12f28:	00000a06 	br	12f54 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   12f2c:	e0bfff17 	ldw	r2,-4(fp)
   12f30:	00c80004 	movi	r3,8192
   12f34:	10c00115 	stw	r3,4(r2)
      return 0;
   12f38:	0005883a 	mov	r2,zero
   12f3c:	00000506 	br	12f54 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   12f40:	0012e7c0 	call	12e7c <alt_get_errno>
   12f44:	1007883a 	mov	r3,r2
   12f48:	00801444 	movi	r2,81
   12f4c:	18800015 	stw	r2,0(r3)
    return -1;
   12f50:	00bfffc4 	movi	r2,-1
  }
}
   12f54:	e037883a 	mov	sp,fp
   12f58:	dfc00117 	ldw	ra,4(sp)
   12f5c:	df000017 	ldw	fp,0(sp)
   12f60:	dec00204 	addi	sp,sp,8
   12f64:	f800283a 	ret

00012f68 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   12f68:	deffff04 	addi	sp,sp,-4
   12f6c:	df000015 	stw	fp,0(sp)
   12f70:	d839883a 	mov	fp,sp
  return 0;
   12f74:	0005883a 	mov	r2,zero
}
   12f78:	e037883a 	mov	sp,fp
   12f7c:	df000017 	ldw	fp,0(sp)
   12f80:	dec00104 	addi	sp,sp,4
   12f84:	f800283a 	ret

00012f88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12f88:	defffe04 	addi	sp,sp,-8
   12f8c:	dfc00115 	stw	ra,4(sp)
   12f90:	df000015 	stw	fp,0(sp)
   12f94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   12f98:	d0a02117 	ldw	r2,-32636(gp)
   12f9c:	10000326 	beq	r2,zero,12fac <alt_get_errno+0x24>
   12fa0:	d0a02117 	ldw	r2,-32636(gp)
   12fa4:	103ee83a 	callr	r2
   12fa8:	00000106 	br	12fb0 <alt_get_errno+0x28>
   12fac:	d0a83b04 	addi	r2,gp,-24340
}
   12fb0:	e037883a 	mov	sp,fp
   12fb4:	dfc00117 	ldw	ra,4(sp)
   12fb8:	df000017 	ldw	fp,0(sp)
   12fbc:	dec00204 	addi	sp,sp,8
   12fc0:	f800283a 	ret

00012fc4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   12fc4:	deffed04 	addi	sp,sp,-76
   12fc8:	dfc01215 	stw	ra,72(sp)
   12fcc:	df001115 	stw	fp,68(sp)
   12fd0:	df001104 	addi	fp,sp,68
   12fd4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12fd8:	e0bfff17 	ldw	r2,-4(fp)
   12fdc:	10000616 	blt	r2,zero,12ff8 <isatty+0x34>
   12fe0:	e0bfff17 	ldw	r2,-4(fp)
   12fe4:	10c00324 	muli	r3,r2,12
   12fe8:	008000b4 	movhi	r2,2
   12fec:	10835104 	addi	r2,r2,3396
   12ff0:	1885883a 	add	r2,r3,r2
   12ff4:	00000106 	br	12ffc <isatty+0x38>
   12ff8:	0005883a 	mov	r2,zero
   12ffc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   13000:	e0bfef17 	ldw	r2,-68(fp)
   13004:	10000e26 	beq	r2,zero,13040 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   13008:	e0bfef17 	ldw	r2,-68(fp)
   1300c:	10800017 	ldw	r2,0(r2)
   13010:	10800817 	ldw	r2,32(r2)
   13014:	1000021e 	bne	r2,zero,13020 <isatty+0x5c>
    {
      return 1;
   13018:	00800044 	movi	r2,1
   1301c:	00000d06 	br	13054 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   13020:	e0bff004 	addi	r2,fp,-64
   13024:	100b883a 	mov	r5,r2
   13028:	e13fff17 	ldw	r4,-4(fp)
   1302c:	0012eb80 	call	12eb8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   13030:	e0bff117 	ldw	r2,-60(fp)
   13034:	10880020 	cmpeqi	r2,r2,8192
   13038:	10803fcc 	andi	r2,r2,255
   1303c:	00000506 	br	13054 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13040:	0012f880 	call	12f88 <alt_get_errno>
   13044:	1007883a 	mov	r3,r2
   13048:	00801444 	movi	r2,81
   1304c:	18800015 	stw	r2,0(r3)
    return 0;
   13050:	0005883a 	mov	r2,zero
  }
}
   13054:	e037883a 	mov	sp,fp
   13058:	dfc00117 	ldw	ra,4(sp)
   1305c:	df000017 	ldw	fp,0(sp)
   13060:	dec00204 	addi	sp,sp,8
   13064:	f800283a 	ret

00013068 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13068:	defffe04 	addi	sp,sp,-8
   1306c:	dfc00115 	stw	ra,4(sp)
   13070:	df000015 	stw	fp,0(sp)
   13074:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13078:	d0a02117 	ldw	r2,-32636(gp)
   1307c:	10000326 	beq	r2,zero,1308c <alt_get_errno+0x24>
   13080:	d0a02117 	ldw	r2,-32636(gp)
   13084:	103ee83a 	callr	r2
   13088:	00000106 	br	13090 <alt_get_errno+0x28>
   1308c:	d0a83b04 	addi	r2,gp,-24340
}
   13090:	e037883a 	mov	sp,fp
   13094:	dfc00117 	ldw	ra,4(sp)
   13098:	df000017 	ldw	fp,0(sp)
   1309c:	dec00204 	addi	sp,sp,8
   130a0:	f800283a 	ret

000130a4 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   130a4:	defffb04 	addi	sp,sp,-20
   130a8:	dfc00415 	stw	ra,16(sp)
   130ac:	df000315 	stw	fp,12(sp)
   130b0:	df000304 	addi	fp,sp,12
   130b4:	e13ffe15 	stw	r4,-8(fp)
   130b8:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   130bc:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   130c0:	e0bffe17 	ldw	r2,-8(fp)
   130c4:	00802f16 	blt	zero,r2,13184 <kill+0xe0>
  {
    switch (sig)
   130c8:	e0bfff17 	ldw	r2,-4(fp)
   130cc:	10800828 	cmpgeui	r2,r2,32
   130d0:	1000291e 	bne	r2,zero,13178 <kill+0xd4>
   130d4:	e0bfff17 	ldw	r2,-4(fp)
   130d8:	100690ba 	slli	r3,r2,2
   130dc:	00800074 	movhi	r2,1
   130e0:	108c3c04 	addi	r2,r2,12528
   130e4:	1885883a 	add	r2,r3,r2
   130e8:	10800017 	ldw	r2,0(r2)
   130ec:	1000683a 	jmp	r2
   130f0:	00013198 	cmpnei	zero,zero,1222
   130f4:	00013178 	rdprs	zero,zero,1221
   130f8:	00013178 	rdprs	zero,zero,1221
   130fc:	00013170 	cmpltui	zero,zero,1221
   13100:	00013170 	cmpltui	zero,zero,1221
   13104:	00013170 	cmpltui	zero,zero,1221
   13108:	00013170 	cmpltui	zero,zero,1221
   1310c:	00013178 	rdprs	zero,zero,1221
   13110:	00013170 	cmpltui	zero,zero,1221
   13114:	00013170 	cmpltui	zero,zero,1221
   13118:	00013170 	cmpltui	zero,zero,1221
   1311c:	00013170 	cmpltui	zero,zero,1221
   13120:	00013170 	cmpltui	zero,zero,1221
   13124:	00013170 	cmpltui	zero,zero,1221
   13128:	00013170 	cmpltui	zero,zero,1221
   1312c:	00013170 	cmpltui	zero,zero,1221
   13130:	00013198 	cmpnei	zero,zero,1222
   13134:	00013178 	rdprs	zero,zero,1221
   13138:	00013178 	rdprs	zero,zero,1221
   1313c:	00013178 	rdprs	zero,zero,1221
   13140:	00013198 	cmpnei	zero,zero,1222
   13144:	00013178 	rdprs	zero,zero,1221
   13148:	00013178 	rdprs	zero,zero,1221
   1314c:	00013170 	cmpltui	zero,zero,1221
   13150:	00013170 	cmpltui	zero,zero,1221
   13154:	00013170 	cmpltui	zero,zero,1221
   13158:	00013170 	cmpltui	zero,zero,1221
   1315c:	00013170 	cmpltui	zero,zero,1221
   13160:	00013178 	rdprs	zero,zero,1221
   13164:	00013178 	rdprs	zero,zero,1221
   13168:	00013170 	cmpltui	zero,zero,1221
   1316c:	00013170 	cmpltui	zero,zero,1221
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   13170:	0009883a 	mov	r4,zero
   13174:	0012e480 	call	12e48 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   13178:	00800584 	movi	r2,22
   1317c:	e0bffd15 	stw	r2,-12(fp)
   13180:	00000606 	br	1319c <kill+0xf8>
    }
  }

  else if (pid > 0)
   13184:	e0bffe17 	ldw	r2,-8(fp)
   13188:	0080040e 	bge	zero,r2,1319c <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   1318c:	008000c4 	movi	r2,3
   13190:	e0bffd15 	stw	r2,-12(fp)
   13194:	00000106 	br	1319c <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   13198:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
   1319c:	e0bffd17 	ldw	r2,-12(fp)
   131a0:	10000626 	beq	r2,zero,131bc <kill+0x118>
  {
    ALT_ERRNO = status;
   131a4:	00130680 	call	13068 <alt_get_errno>
   131a8:	1007883a 	mov	r3,r2
   131ac:	e0bffd17 	ldw	r2,-12(fp)
   131b0:	18800015 	stw	r2,0(r3)
    return -1;
   131b4:	00bfffc4 	movi	r2,-1
   131b8:	00000106 	br	131c0 <kill+0x11c>
  }

  return 0;
   131bc:	0005883a 	mov	r2,zero
}
   131c0:	e037883a 	mov	sp,fp
   131c4:	dfc00117 	ldw	ra,4(sp)
   131c8:	df000017 	ldw	fp,0(sp)
   131cc:	dec00204 	addi	sp,sp,8
   131d0:	f800283a 	ret

000131d4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   131d4:	defffc04 	addi	sp,sp,-16
   131d8:	df000315 	stw	fp,12(sp)
   131dc:	df000304 	addi	fp,sp,12
   131e0:	e13ffd15 	stw	r4,-12(fp)
   131e4:	e17ffe15 	stw	r5,-8(fp)
   131e8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   131ec:	e0fffe17 	ldw	r3,-8(fp)
   131f0:	e0bffd17 	ldw	r2,-12(fp)
   131f4:	18800c26 	beq	r3,r2,13228 <alt_load_section+0x54>
  {
    while( to != end )
   131f8:	00000806 	br	1321c <alt_load_section+0x48>
    {
      *to++ = *from++;
   131fc:	e0bffe17 	ldw	r2,-8(fp)
   13200:	10c00104 	addi	r3,r2,4
   13204:	e0fffe15 	stw	r3,-8(fp)
   13208:	e0fffd17 	ldw	r3,-12(fp)
   1320c:	19000104 	addi	r4,r3,4
   13210:	e13ffd15 	stw	r4,-12(fp)
   13214:	18c00017 	ldw	r3,0(r3)
   13218:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1321c:	e0fffe17 	ldw	r3,-8(fp)
   13220:	e0bfff17 	ldw	r2,-4(fp)
   13224:	18bff51e 	bne	r3,r2,131fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70131fc>
    {
      *to++ = *from++;
    }
  }
}
   13228:	0001883a 	nop
   1322c:	e037883a 	mov	sp,fp
   13230:	df000017 	ldw	fp,0(sp)
   13234:	dec00104 	addi	sp,sp,4
   13238:	f800283a 	ret

0001323c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1323c:	defffe04 	addi	sp,sp,-8
   13240:	dfc00115 	stw	ra,4(sp)
   13244:	df000015 	stw	fp,0(sp)
   13248:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1324c:	018000b4 	movhi	r6,2
   13250:	31890e04 	addi	r6,r6,9272
   13254:	014000b4 	movhi	r5,2
   13258:	29411e04 	addi	r5,r5,1144
   1325c:	010000b4 	movhi	r4,2
   13260:	21090e04 	addi	r4,r4,9272
   13264:	00131d40 	call	131d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   13268:	01800034 	movhi	r6,0
   1326c:	31809204 	addi	r6,r6,584
   13270:	01400034 	movhi	r5,0
   13274:	29400804 	addi	r5,r5,32
   13278:	01000034 	movhi	r4,0
   1327c:	21000804 	addi	r4,r4,32
   13280:	00131d40 	call	131d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   13284:	018000b4 	movhi	r6,2
   13288:	31811e04 	addi	r6,r6,1144
   1328c:	014000b4 	movhi	r5,2
   13290:	297c3804 	addi	r5,r5,-3872
   13294:	010000b4 	movhi	r4,2
   13298:	213c3804 	addi	r4,r4,-3872
   1329c:	00131d40 	call	131d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   132a0:	001dd7c0 	call	1dd7c <alt_dcache_flush_all>
  alt_icache_flush_all();
   132a4:	001dfcc0 	call	1dfcc <alt_icache_flush_all>
}
   132a8:	0001883a 	nop
   132ac:	e037883a 	mov	sp,fp
   132b0:	dfc00117 	ldw	ra,4(sp)
   132b4:	df000017 	ldw	fp,0(sp)
   132b8:	dec00204 	addi	sp,sp,8
   132bc:	f800283a 	ret

000132c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   132c0:	defffe04 	addi	sp,sp,-8
   132c4:	dfc00115 	stw	ra,4(sp)
   132c8:	df000015 	stw	fp,0(sp)
   132cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   132d0:	d0a02117 	ldw	r2,-32636(gp)
   132d4:	10000326 	beq	r2,zero,132e4 <alt_get_errno+0x24>
   132d8:	d0a02117 	ldw	r2,-32636(gp)
   132dc:	103ee83a 	callr	r2
   132e0:	00000106 	br	132e8 <alt_get_errno+0x28>
   132e4:	d0a83b04 	addi	r2,gp,-24340
}
   132e8:	e037883a 	mov	sp,fp
   132ec:	dfc00117 	ldw	ra,4(sp)
   132f0:	df000017 	ldw	fp,0(sp)
   132f4:	dec00204 	addi	sp,sp,8
   132f8:	f800283a 	ret

000132fc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   132fc:	defff904 	addi	sp,sp,-28
   13300:	dfc00615 	stw	ra,24(sp)
   13304:	df000515 	stw	fp,20(sp)
   13308:	df000504 	addi	fp,sp,20
   1330c:	e13ffd15 	stw	r4,-12(fp)
   13310:	e17ffe15 	stw	r5,-8(fp)
   13314:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   13318:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1331c:	e0bffd17 	ldw	r2,-12(fp)
   13320:	10000616 	blt	r2,zero,1333c <lseek+0x40>
   13324:	e0bffd17 	ldw	r2,-12(fp)
   13328:	10c00324 	muli	r3,r2,12
   1332c:	008000b4 	movhi	r2,2
   13330:	10835104 	addi	r2,r2,3396
   13334:	1885883a 	add	r2,r3,r2
   13338:	00000106 	br	13340 <lseek+0x44>
   1333c:	0005883a 	mov	r2,zero
   13340:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   13344:	e0bffc17 	ldw	r2,-16(fp)
   13348:	10001026 	beq	r2,zero,1338c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1334c:	e0bffc17 	ldw	r2,-16(fp)
   13350:	10800017 	ldw	r2,0(r2)
   13354:	10800717 	ldw	r2,28(r2)
   13358:	10000926 	beq	r2,zero,13380 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1335c:	e0bffc17 	ldw	r2,-16(fp)
   13360:	10800017 	ldw	r2,0(r2)
   13364:	10800717 	ldw	r2,28(r2)
   13368:	e1bfff17 	ldw	r6,-4(fp)
   1336c:	e17ffe17 	ldw	r5,-8(fp)
   13370:	e13ffc17 	ldw	r4,-16(fp)
   13374:	103ee83a 	callr	r2
   13378:	e0bffb15 	stw	r2,-20(fp)
   1337c:	00000506 	br	13394 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   13380:	00bfde84 	movi	r2,-134
   13384:	e0bffb15 	stw	r2,-20(fp)
   13388:	00000206 	br	13394 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   1338c:	00bfebc4 	movi	r2,-81
   13390:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   13394:	e0bffb17 	ldw	r2,-20(fp)
   13398:	1000070e 	bge	r2,zero,133b8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   1339c:	00132c00 	call	132c0 <alt_get_errno>
   133a0:	1007883a 	mov	r3,r2
   133a4:	e0bffb17 	ldw	r2,-20(fp)
   133a8:	0085c83a 	sub	r2,zero,r2
   133ac:	18800015 	stw	r2,0(r3)
    rc = -1;
   133b0:	00bfffc4 	movi	r2,-1
   133b4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   133b8:	e0bffb17 	ldw	r2,-20(fp)
}
   133bc:	e037883a 	mov	sp,fp
   133c0:	dfc00117 	ldw	ra,4(sp)
   133c4:	df000017 	ldw	fp,0(sp)
   133c8:	dec00204 	addi	sp,sp,8
   133cc:	f800283a 	ret

000133d0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   133d0:	defff904 	addi	sp,sp,-28
   133d4:	dfc00615 	stw	ra,24(sp)
   133d8:	df000515 	stw	fp,20(sp)
   133dc:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   133e0:	0009883a 	mov	r4,zero
   133e4:	001b3300 	call	1b330 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   133e8:	001438c0 	call	1438c <OSInit>
   133ec:	01000044 	movi	r4,1
   133f0:	0018cec0 	call	18cec <OSSemCreate>
   133f4:	d0a84415 	stw	r2,-24304(gp)
   133f8:	01000044 	movi	r4,1
   133fc:	0018cec0 	call	18cec <OSSemCreate>
   13400:	d0a84615 	stw	r2,-24296(gp)
   13404:	d0a83f04 	addi	r2,gp,-24324
   13408:	e0bffc15 	stw	r2,-16(fp)
   1340c:	00800044 	movi	r2,1
   13410:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   13414:	e0bffd0b 	ldhu	r2,-12(fp)
   13418:	1009883a 	mov	r4,r2
   1341c:	0018cec0 	call	18cec <OSSemCreate>
   13420:	1007883a 	mov	r3,r2
   13424:	e0bffc17 	ldw	r2,-16(fp)
   13428:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1342c:	001b3680 	call	1b368 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   13430:	018000b4 	movhi	r6,2
   13434:	31806504 	addi	r6,r6,404
   13438:	014000b4 	movhi	r5,2
   1343c:	29406504 	addi	r5,r5,404
   13440:	010000b4 	movhi	r4,2
   13444:	21006504 	addi	r4,r4,404
   13448:	001e0c40 	call	1e0c4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1344c:	001de7c0 	call	1de7c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   13450:	010000b4 	movhi	r4,2
   13454:	2137b704 	addi	r4,r4,-8484
   13458:	001ed440 	call	1ed44 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1345c:	d0a84017 	ldw	r2,-24320(gp)
   13460:	d0e84117 	ldw	r3,-24316(gp)
   13464:	d1284217 	ldw	r4,-24312(gp)
   13468:	200d883a 	mov	r6,r4
   1346c:	180b883a 	mov	r5,r3
   13470:	1009883a 	mov	r4,r2
   13474:	00031b80 	call	31b8 <main>
   13478:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   1347c:	01000044 	movi	r4,1
   13480:	0012d4c0 	call	12d4c <close>
  exit (result);
   13484:	e13ffb17 	ldw	r4,-20(fp)
   13488:	001ed580 	call	1ed58 <exit>

0001348c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1348c:	defffe04 	addi	sp,sp,-8
   13490:	dfc00115 	stw	ra,4(sp)
   13494:	df000015 	stw	fp,0(sp)
   13498:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1349c:	d0a02117 	ldw	r2,-32636(gp)
   134a0:	10000326 	beq	r2,zero,134b0 <alt_get_errno+0x24>
   134a4:	d0a02117 	ldw	r2,-32636(gp)
   134a8:	103ee83a 	callr	r2
   134ac:	00000106 	br	134b4 <alt_get_errno+0x28>
   134b0:	d0a83b04 	addi	r2,gp,-24340
}
   134b4:	e037883a 	mov	sp,fp
   134b8:	dfc00117 	ldw	ra,4(sp)
   134bc:	df000017 	ldw	fp,0(sp)
   134c0:	dec00204 	addi	sp,sp,8
   134c4:	f800283a 	ret

000134c8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   134c8:	defff904 	addi	sp,sp,-28
   134cc:	dfc00615 	stw	ra,24(sp)
   134d0:	df000515 	stw	fp,20(sp)
   134d4:	df000504 	addi	fp,sp,20
   134d8:	e13ffd15 	stw	r4,-12(fp)
   134dc:	e17ffe15 	stw	r5,-8(fp)
   134e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   134e4:	e0bffd17 	ldw	r2,-12(fp)
   134e8:	10000616 	blt	r2,zero,13504 <read+0x3c>
   134ec:	e0bffd17 	ldw	r2,-12(fp)
   134f0:	10c00324 	muli	r3,r2,12
   134f4:	008000b4 	movhi	r2,2
   134f8:	10835104 	addi	r2,r2,3396
   134fc:	1885883a 	add	r2,r3,r2
   13500:	00000106 	br	13508 <read+0x40>
   13504:	0005883a 	mov	r2,zero
   13508:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1350c:	e0bffb17 	ldw	r2,-20(fp)
   13510:	10002226 	beq	r2,zero,1359c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13514:	e0bffb17 	ldw	r2,-20(fp)
   13518:	10800217 	ldw	r2,8(r2)
   1351c:	108000cc 	andi	r2,r2,3
   13520:	10800060 	cmpeqi	r2,r2,1
   13524:	1000181e 	bne	r2,zero,13588 <read+0xc0>
        (fd->dev->read))
   13528:	e0bffb17 	ldw	r2,-20(fp)
   1352c:	10800017 	ldw	r2,0(r2)
   13530:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   13534:	10001426 	beq	r2,zero,13588 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13538:	e0bffb17 	ldw	r2,-20(fp)
   1353c:	10800017 	ldw	r2,0(r2)
   13540:	10800517 	ldw	r2,20(r2)
   13544:	e0ffff17 	ldw	r3,-4(fp)
   13548:	180d883a 	mov	r6,r3
   1354c:	e17ffe17 	ldw	r5,-8(fp)
   13550:	e13ffb17 	ldw	r4,-20(fp)
   13554:	103ee83a 	callr	r2
   13558:	e0bffc15 	stw	r2,-16(fp)
   1355c:	e0bffc17 	ldw	r2,-16(fp)
   13560:	1000070e 	bge	r2,zero,13580 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   13564:	001348c0 	call	1348c <alt_get_errno>
   13568:	1007883a 	mov	r3,r2
   1356c:	e0bffc17 	ldw	r2,-16(fp)
   13570:	0085c83a 	sub	r2,zero,r2
   13574:	18800015 	stw	r2,0(r3)
          return -1;
   13578:	00bfffc4 	movi	r2,-1
   1357c:	00000c06 	br	135b0 <read+0xe8>
        }
        return rval;
   13580:	e0bffc17 	ldw	r2,-16(fp)
   13584:	00000a06 	br	135b0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   13588:	001348c0 	call	1348c <alt_get_errno>
   1358c:	1007883a 	mov	r3,r2
   13590:	00800344 	movi	r2,13
   13594:	18800015 	stw	r2,0(r3)
   13598:	00000406 	br	135ac <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1359c:	001348c0 	call	1348c <alt_get_errno>
   135a0:	1007883a 	mov	r3,r2
   135a4:	00801444 	movi	r2,81
   135a8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   135ac:	00bfffc4 	movi	r2,-1
}
   135b0:	e037883a 	mov	sp,fp
   135b4:	dfc00117 	ldw	ra,4(sp)
   135b8:	df000017 	ldw	fp,0(sp)
   135bc:	dec00204 	addi	sp,sp,8
   135c0:	f800283a 	ret

000135c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   135c4:	defffe04 	addi	sp,sp,-8
   135c8:	df000115 	stw	fp,4(sp)
   135cc:	df000104 	addi	fp,sp,4
   135d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   135d4:	e0bfff17 	ldw	r2,-4(fp)
   135d8:	108000d0 	cmplti	r2,r2,3
   135dc:	10000d1e 	bne	r2,zero,13614 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   135e0:	008000b4 	movhi	r2,2
   135e4:	10835104 	addi	r2,r2,3396
   135e8:	e0ffff17 	ldw	r3,-4(fp)
   135ec:	18c00324 	muli	r3,r3,12
   135f0:	10c5883a 	add	r2,r2,r3
   135f4:	10800204 	addi	r2,r2,8
   135f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   135fc:	008000b4 	movhi	r2,2
   13600:	10835104 	addi	r2,r2,3396
   13604:	e0ffff17 	ldw	r3,-4(fp)
   13608:	18c00324 	muli	r3,r3,12
   1360c:	10c5883a 	add	r2,r2,r3
   13610:	10000015 	stw	zero,0(r2)
  }
}
   13614:	0001883a 	nop
   13618:	e037883a 	mov	sp,fp
   1361c:	df000017 	ldw	fp,0(sp)
   13620:	dec00104 	addi	sp,sp,4
   13624:	f800283a 	ret

00013628 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13628:	defff904 	addi	sp,sp,-28
   1362c:	df000615 	stw	fp,24(sp)
   13630:	df000604 	addi	fp,sp,24
   13634:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13638:	0005303a 	rdctl	r2,status
   1363c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13640:	e0fffe17 	ldw	r3,-8(fp)
   13644:	00bfff84 	movi	r2,-2
   13648:	1884703a 	and	r2,r3,r2
   1364c:	1001703a 	wrctl	status,r2
  
  return context;
   13650:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   13654:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13658:	d0a02217 	ldw	r2,-32632(gp)
   1365c:	10c000c4 	addi	r3,r2,3
   13660:	00bfff04 	movi	r2,-4
   13664:	1884703a 	and	r2,r3,r2
   13668:	d0a02215 	stw	r2,-32632(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1366c:	d0e02217 	ldw	r3,-32632(gp)
   13670:	e0bfff17 	ldw	r2,-4(fp)
   13674:	1887883a 	add	r3,r3,r2
   13678:	00810034 	movhi	r2,1024
   1367c:	10800004 	addi	r2,r2,0
   13680:	10c0062e 	bgeu	r2,r3,1369c <sbrk+0x74>
   13684:	e0bffb17 	ldw	r2,-20(fp)
   13688:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1368c:	e0bffa17 	ldw	r2,-24(fp)
   13690:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   13694:	00bfffc4 	movi	r2,-1
   13698:	00000b06 	br	136c8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1369c:	d0a02217 	ldw	r2,-32632(gp)
   136a0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   136a4:	d0e02217 	ldw	r3,-32632(gp)
   136a8:	e0bfff17 	ldw	r2,-4(fp)
   136ac:	1885883a 	add	r2,r3,r2
   136b0:	d0a02215 	stw	r2,-32632(gp)
   136b4:	e0bffb17 	ldw	r2,-20(fp)
   136b8:	e0bffc15 	stw	r2,-16(fp)
   136bc:	e0bffc17 	ldw	r2,-16(fp)
   136c0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   136c4:	e0bffd17 	ldw	r2,-12(fp)
} 
   136c8:	e037883a 	mov	sp,fp
   136cc:	df000017 	ldw	fp,0(sp)
   136d0:	dec00104 	addi	sp,sp,4
   136d4:	f800283a 	ret

000136d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   136d8:	defffe04 	addi	sp,sp,-8
   136dc:	dfc00115 	stw	ra,4(sp)
   136e0:	df000015 	stw	fp,0(sp)
   136e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   136e8:	d0a02117 	ldw	r2,-32636(gp)
   136ec:	10000326 	beq	r2,zero,136fc <alt_get_errno+0x24>
   136f0:	d0a02117 	ldw	r2,-32636(gp)
   136f4:	103ee83a 	callr	r2
   136f8:	00000106 	br	13700 <alt_get_errno+0x28>
   136fc:	d0a83b04 	addi	r2,gp,-24340
}
   13700:	e037883a 	mov	sp,fp
   13704:	dfc00117 	ldw	ra,4(sp)
   13708:	df000017 	ldw	fp,0(sp)
   1370c:	dec00204 	addi	sp,sp,8
   13710:	f800283a 	ret

00013714 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13714:	defff904 	addi	sp,sp,-28
   13718:	dfc00615 	stw	ra,24(sp)
   1371c:	df000515 	stw	fp,20(sp)
   13720:	df000504 	addi	fp,sp,20
   13724:	e13ffd15 	stw	r4,-12(fp)
   13728:	e17ffe15 	stw	r5,-8(fp)
   1372c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13730:	e0bffd17 	ldw	r2,-12(fp)
   13734:	10000616 	blt	r2,zero,13750 <write+0x3c>
   13738:	e0bffd17 	ldw	r2,-12(fp)
   1373c:	10c00324 	muli	r3,r2,12
   13740:	008000b4 	movhi	r2,2
   13744:	10835104 	addi	r2,r2,3396
   13748:	1885883a 	add	r2,r3,r2
   1374c:	00000106 	br	13754 <write+0x40>
   13750:	0005883a 	mov	r2,zero
   13754:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13758:	e0bffb17 	ldw	r2,-20(fp)
   1375c:	10002126 	beq	r2,zero,137e4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13760:	e0bffb17 	ldw	r2,-20(fp)
   13764:	10800217 	ldw	r2,8(r2)
   13768:	108000cc 	andi	r2,r2,3
   1376c:	10001826 	beq	r2,zero,137d0 <write+0xbc>
   13770:	e0bffb17 	ldw	r2,-20(fp)
   13774:	10800017 	ldw	r2,0(r2)
   13778:	10800617 	ldw	r2,24(r2)
   1377c:	10001426 	beq	r2,zero,137d0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   13780:	e0bffb17 	ldw	r2,-20(fp)
   13784:	10800017 	ldw	r2,0(r2)
   13788:	10800617 	ldw	r2,24(r2)
   1378c:	e0ffff17 	ldw	r3,-4(fp)
   13790:	180d883a 	mov	r6,r3
   13794:	e17ffe17 	ldw	r5,-8(fp)
   13798:	e13ffb17 	ldw	r4,-20(fp)
   1379c:	103ee83a 	callr	r2
   137a0:	e0bffc15 	stw	r2,-16(fp)
   137a4:	e0bffc17 	ldw	r2,-16(fp)
   137a8:	1000070e 	bge	r2,zero,137c8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   137ac:	00136d80 	call	136d8 <alt_get_errno>
   137b0:	1007883a 	mov	r3,r2
   137b4:	e0bffc17 	ldw	r2,-16(fp)
   137b8:	0085c83a 	sub	r2,zero,r2
   137bc:	18800015 	stw	r2,0(r3)
        return -1;
   137c0:	00bfffc4 	movi	r2,-1
   137c4:	00000c06 	br	137f8 <write+0xe4>
      }
      return rval;
   137c8:	e0bffc17 	ldw	r2,-16(fp)
   137cc:	00000a06 	br	137f8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   137d0:	00136d80 	call	136d8 <alt_get_errno>
   137d4:	1007883a 	mov	r3,r2
   137d8:	00800344 	movi	r2,13
   137dc:	18800015 	stw	r2,0(r3)
   137e0:	00000406 	br	137f4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   137e4:	00136d80 	call	136d8 <alt_get_errno>
   137e8:	1007883a 	mov	r3,r2
   137ec:	00801444 	movi	r2,81
   137f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   137f4:	00bfffc4 	movi	r2,-1
}
   137f8:	e037883a 	mov	sp,fp
   137fc:	dfc00117 	ldw	ra,4(sp)
   13800:	df000017 	ldw	fp,0(sp)
   13804:	dec00204 	addi	sp,sp,8
   13808:	f800283a 	ret

0001380c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   1380c:	deffdf04 	addi	sp,sp,-132
   13810:	dfc02015 	stw	ra,128(sp)
   13814:	df001f15 	stw	fp,124(sp)
   13818:	df001f04 	addi	fp,sp,124
   1381c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   13820:	e0bfe204 	addi	r2,fp,-120
   13824:	100b883a 	mov	r5,r2
   13828:	01003fc4 	movi	r4,255
   1382c:	001ac740 	call	1ac74 <OSTaskQuery>
   13830:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   13834:	e0bffe83 	ldbu	r2,-6(fp)
   13838:	10803fcc 	andi	r2,r2,255
   1383c:	10001e1e 	bne	r2,zero,138b8 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
   13840:	e0bfee83 	ldbu	r2,-70(fp)
   13844:	10803fcc 	andi	r2,r2,255
   13848:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   1384c:	d0a84417 	ldw	r2,-24304(gp)
   13850:	e0fffd04 	addi	r3,fp,-12
   13854:	180b883a 	mov	r5,r3
   13858:	1009883a 	mov	r4,r2
   1385c:	001948c0 	call	1948c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   13860:	e0bffe43 	ldbu	r2,-7(fp)
   13864:	10803fcc 	andi	r2,r2,255
   13868:	10000726 	beq	r2,zero,13888 <__env_lock+0x7c>
   1386c:	d0a02317 	ldw	r2,-32628(gp)
   13870:	e0ffe117 	ldw	r3,-124(fp)
   13874:	1880041e 	bne	r3,r2,13888 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
   13878:	d0a84317 	ldw	r2,-24308(gp)
   1387c:	10800044 	addi	r2,r2,1
   13880:	d0a84315 	stw	r2,-24308(gp)
   13884:	00000a06 	br	138b0 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   13888:	d0a84417 	ldw	r2,-24304(gp)
   1388c:	e0fffe84 	addi	r3,fp,-6
   13890:	180d883a 	mov	r6,r3
   13894:	000b883a 	mov	r5,zero
   13898:	1009883a 	mov	r4,r2
   1389c:	00190040 	call	19004 <OSSemPend>
    locks  = 1;
   138a0:	00800044 	movi	r2,1
   138a4:	d0a84315 	stw	r2,-24308(gp)
    lockid = id;
   138a8:	e0bfe117 	ldw	r2,-124(fp)
   138ac:	d0a02315 	stw	r2,-32628(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   138b0:	0001883a 	nop
   138b4:	00000106 	br	138bc <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   138b8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   138bc:	e037883a 	mov	sp,fp
   138c0:	dfc00117 	ldw	ra,4(sp)
   138c4:	df000017 	ldw	fp,0(sp)
   138c8:	dec00204 	addi	sp,sp,8
   138cc:	f800283a 	ret

000138d0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   138d0:	defffd04 	addi	sp,sp,-12
   138d4:	dfc00215 	stw	ra,8(sp)
   138d8:	df000115 	stw	fp,4(sp)
   138dc:	df000104 	addi	fp,sp,4
   138e0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   138e4:	d0a84317 	ldw	r2,-24308(gp)
   138e8:	10000b26 	beq	r2,zero,13918 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   138ec:	d0a84317 	ldw	r2,-24308(gp)
   138f0:	10bfffc4 	addi	r2,r2,-1
   138f4:	d0a84315 	stw	r2,-24308(gp)
   138f8:	d0a84317 	ldw	r2,-24308(gp)
   138fc:	1000071e 	bne	r2,zero,1391c <__env_unlock+0x4c>
  {
    lockid = -1;
   13900:	00bfffc4 	movi	r2,-1
   13904:	d0a02315 	stw	r2,-32628(gp)
    OSSemPost( alt_envsem );
   13908:	d0a84417 	ldw	r2,-24304(gp)
   1390c:	1009883a 	mov	r4,r2
   13910:	001937c0 	call	1937c <OSSemPost>
   13914:	00000106 	br	1391c <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
   13918:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   1391c:	e037883a 	mov	sp,fp
   13920:	dfc00117 	ldw	ra,4(sp)
   13924:	df000017 	ldw	fp,0(sp)
   13928:	dec00204 	addi	sp,sp,8
   1392c:	f800283a 	ret

00013930 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   13930:	deffdb04 	addi	sp,sp,-148
   13934:	dfc02415 	stw	ra,144(sp)
   13938:	df002315 	stw	fp,140(sp)
   1393c:	df002304 	addi	fp,sp,140
   13940:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13944:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   13948:	d0a84743 	ldbu	r2,-24291(gp)
   1394c:	10803fcc 	andi	r2,r2,255
   13950:	10800060 	cmpeqi	r2,r2,1
   13954:	10003626 	beq	r2,zero,13a30 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   13958:	e0bfe204 	addi	r2,fp,-120
   1395c:	100b883a 	mov	r5,r2
   13960:	01003fc4 	movi	r4,255
   13964:	001ac740 	call	1ac74 <OSTaskQuery>
   13968:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   1396c:	e0bffe83 	ldbu	r2,-6(fp)
   13970:	10803fcc 	andi	r2,r2,255
   13974:	1000301e 	bne	r2,zero,13a38 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
   13978:	e0bfee83 	ldbu	r2,-70(fp)
   1397c:	10803fcc 	andi	r2,r2,255
   13980:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   13984:	d0a84617 	ldw	r2,-24296(gp)
   13988:	e0fffd04 	addi	r3,fp,-12
   1398c:	180b883a 	mov	r5,r3
   13990:	1009883a 	mov	r4,r2
   13994:	001948c0 	call	1948c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13998:	0005303a 	rdctl	r2,status
   1399c:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   139a0:	e0ffe117 	ldw	r3,-124(fp)
   139a4:	00bfff84 	movi	r2,-2
   139a8:	1884703a 	and	r2,r3,r2
   139ac:	1001703a 	wrctl	status,r2
  
  return context;
   139b0:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
   139b4:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   139b8:	e0bffd0b 	ldhu	r2,-12(fp)
   139bc:	10bfffcc 	andi	r2,r2,65535
   139c0:	10000b1e 	bne	r2,zero,139f0 <__malloc_lock+0xc0>
   139c4:	d0a02417 	ldw	r2,-32624(gp)
   139c8:	e0ffde17 	ldw	r3,-136(fp)
   139cc:	1880081e 	bne	r3,r2,139f0 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
   139d0:	d0a84517 	ldw	r2,-24300(gp)
   139d4:	10800044 	addi	r2,r2,1
   139d8:	d0a84515 	stw	r2,-24300(gp)
   139dc:	e0bfdd17 	ldw	r2,-140(fp)
   139e0:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   139e4:	e0bfdf17 	ldw	r2,-132(fp)
   139e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   139ec:	00000e06 	br	13a28 <__malloc_lock+0xf8>
   139f0:	e0bfdd17 	ldw	r2,-140(fp)
   139f4:	e0bfe015 	stw	r2,-128(fp)
   139f8:	e0bfe017 	ldw	r2,-128(fp)
   139fc:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   13a00:	d0a84617 	ldw	r2,-24296(gp)
   13a04:	e0fffe84 	addi	r3,fp,-6
   13a08:	180d883a 	mov	r6,r3
   13a0c:	000b883a 	mov	r5,zero
   13a10:	1009883a 	mov	r4,r2
   13a14:	00190040 	call	19004 <OSSemPend>
    locks  = 1;
   13a18:	00800044 	movi	r2,1
   13a1c:	d0a84515 	stw	r2,-24300(gp)
    lockid = id;
   13a20:	e0bfde17 	ldw	r2,-136(fp)
   13a24:	d0a02415 	stw	r2,-32624(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   13a28:	0001883a 	nop
   13a2c:	00000306 	br	13a3c <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
   13a30:	0001883a 	nop
   13a34:	00000106 	br	13a3c <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   13a38:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   13a3c:	e037883a 	mov	sp,fp
   13a40:	dfc00117 	ldw	ra,4(sp)
   13a44:	df000017 	ldw	fp,0(sp)
   13a48:	dec00204 	addi	sp,sp,8
   13a4c:	f800283a 	ret

00013a50 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   13a50:	defff804 	addi	sp,sp,-32
   13a54:	dfc00715 	stw	ra,28(sp)
   13a58:	df000615 	stw	fp,24(sp)
   13a5c:	df000604 	addi	fp,sp,24
   13a60:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13a64:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   13a68:	d0a84743 	ldbu	r2,-24291(gp)
   13a6c:	10803fcc 	andi	r2,r2,255
   13a70:	10800060 	cmpeqi	r2,r2,1
   13a74:	10002326 	beq	r2,zero,13b04 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a78:	0005303a 	rdctl	r2,status
   13a7c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a80:	e0fffe17 	ldw	r3,-8(fp)
   13a84:	00bfff84 	movi	r2,-2
   13a88:	1884703a 	and	r2,r3,r2
   13a8c:	1001703a 	wrctl	status,r2
  
  return context;
   13a90:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
   13a94:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   13a98:	d0a84517 	ldw	r2,-24300(gp)
   13a9c:	1000051e 	bne	r2,zero,13ab4 <__malloc_unlock+0x64>
   13aa0:	e0bffa17 	ldw	r2,-24(fp)
   13aa4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13aa8:	e0bffb17 	ldw	r2,-20(fp)
   13aac:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   13ab0:	00001506 	br	13b08 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   13ab4:	d0a84517 	ldw	r2,-24300(gp)
   13ab8:	10bfffc4 	addi	r2,r2,-1
   13abc:	d0a84515 	stw	r2,-24300(gp)
   13ac0:	d0a84517 	ldw	r2,-24300(gp)
   13ac4:	10000a1e 	bne	r2,zero,13af0 <__malloc_unlock+0xa0>
  {
    lockid = -1;
   13ac8:	00bfffc4 	movi	r2,-1
   13acc:	d0a02415 	stw	r2,-32624(gp)
   13ad0:	e0bffa17 	ldw	r2,-24(fp)
   13ad4:	e0bffc15 	stw	r2,-16(fp)
   13ad8:	e0bffc17 	ldw	r2,-16(fp)
   13adc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   13ae0:	d0a84617 	ldw	r2,-24296(gp)
   13ae4:	1009883a 	mov	r4,r2
   13ae8:	001937c0 	call	1937c <OSSemPost>
   13aec:	00000606 	br	13b08 <__malloc_unlock+0xb8>
   13af0:	e0bffa17 	ldw	r2,-24(fp)
   13af4:	e0bffd15 	stw	r2,-12(fp)
   13af8:	e0bffd17 	ldw	r2,-12(fp)
   13afc:	1001703a 	wrctl	status,r2
   13b00:	00000106 	br	13b08 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
   13b04:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   13b08:	e037883a 	mov	sp,fp
   13b0c:	dfc00117 	ldw	ra,4(sp)
   13b10:	df000017 	ldw	fp,0(sp)
   13b14:	dec00204 	addi	sp,sp,8
   13b18:	f800283a 	ret

00013b1c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   13b1c:	defff704 	addi	sp,sp,-36
   13b20:	dfc00815 	stw	ra,32(sp)
   13b24:	df000715 	stw	fp,28(sp)
   13b28:	df000704 	addi	fp,sp,28
   13b2c:	e13ffd15 	stw	r4,-12(fp)
   13b30:	e17ffe15 	stw	r5,-8(fp)
   13b34:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13b38:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13b3c:	e0bfff17 	ldw	r2,-4(fp)
   13b40:	1000021e 	bne	r2,zero,13b4c <OSEventNameGet+0x30>
        return (0);
   13b44:	0005883a 	mov	r2,zero
   13b48:	00003706 	br	13c28 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   13b4c:	e0bffd17 	ldw	r2,-12(fp)
   13b50:	1000051e 	bne	r2,zero,13b68 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   13b54:	e0bfff17 	ldw	r2,-4(fp)
   13b58:	00c00104 	movi	r3,4
   13b5c:	10c00005 	stb	r3,0(r2)
        return (0);
   13b60:	0005883a 	mov	r2,zero
   13b64:	00003006 	br	13c28 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13b68:	e0bffe17 	ldw	r2,-8(fp)
   13b6c:	1000051e 	bne	r2,zero,13b84 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   13b70:	e0bfff17 	ldw	r2,-4(fp)
   13b74:	00c00304 	movi	r3,12
   13b78:	10c00005 	stb	r3,0(r2)
        return (0);
   13b7c:	0005883a 	mov	r2,zero
   13b80:	00002906 	br	13c28 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13b84:	d0a85503 	ldbu	r2,-24236(gp)
   13b88:	10803fcc 	andi	r2,r2,255
   13b8c:	10000526 	beq	r2,zero,13ba4 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   13b90:	e0bfff17 	ldw	r2,-4(fp)
   13b94:	00c00444 	movi	r3,17
   13b98:	10c00005 	stb	r3,0(r2)
        return (0);
   13b9c:	0005883a 	mov	r2,zero
   13ba0:	00002106 	br	13c28 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   13ba4:	e0bffd17 	ldw	r2,-12(fp)
   13ba8:	10800003 	ldbu	r2,0(r2)
   13bac:	10803fcc 	andi	r2,r2,255
   13bb0:	10bfffc4 	addi	r2,r2,-1
   13bb4:	10800128 	cmpgeui	r2,r2,4
   13bb8:	10000526 	beq	r2,zero,13bd0 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   13bbc:	e0bfff17 	ldw	r2,-4(fp)
   13bc0:	00c00044 	movi	r3,1
   13bc4:	10c00005 	stb	r3,0(r2)
             return (0);
   13bc8:	0005883a 	mov	r2,zero
   13bcc:	00001606 	br	13c28 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   13bd0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13bd4:	0005303a 	rdctl	r2,status
   13bd8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13bdc:	e0fffb17 	ldw	r3,-20(fp)
   13be0:	00bfff84 	movi	r2,-2
   13be4:	1884703a 	and	r2,r3,r2
   13be8:	1001703a 	wrctl	status,r2
  
  return context;
   13bec:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   13bf0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   13bf4:	e0bffd17 	ldw	r2,-12(fp)
   13bf8:	10800384 	addi	r2,r2,14
   13bfc:	100b883a 	mov	r5,r2
   13c00:	e13ffe17 	ldw	r4,-8(fp)
   13c04:	00155a00 	call	155a0 <OS_StrCopy>
   13c08:	e0bffa05 	stb	r2,-24(fp)
   13c0c:	e0bff917 	ldw	r2,-28(fp)
   13c10:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13c14:	e0bffc17 	ldw	r2,-16(fp)
   13c18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13c1c:	e0bfff17 	ldw	r2,-4(fp)
   13c20:	10000005 	stb	zero,0(r2)
    return (len);
   13c24:	e0bffa03 	ldbu	r2,-24(fp)
}
   13c28:	e037883a 	mov	sp,fp
   13c2c:	dfc00117 	ldw	ra,4(sp)
   13c30:	df000017 	ldw	fp,0(sp)
   13c34:	dec00204 	addi	sp,sp,8
   13c38:	f800283a 	ret

00013c3c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   13c3c:	defff604 	addi	sp,sp,-40
   13c40:	dfc00915 	stw	ra,36(sp)
   13c44:	df000815 	stw	fp,32(sp)
   13c48:	df000804 	addi	fp,sp,32
   13c4c:	e13ffd15 	stw	r4,-12(fp)
   13c50:	e17ffe15 	stw	r5,-8(fp)
   13c54:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   13c58:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   13c5c:	e0bfff17 	ldw	r2,-4(fp)
   13c60:	10004026 	beq	r2,zero,13d64 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   13c64:	e0bffd17 	ldw	r2,-12(fp)
   13c68:	1000041e 	bne	r2,zero,13c7c <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   13c6c:	e0bfff17 	ldw	r2,-4(fp)
   13c70:	00c00104 	movi	r3,4
   13c74:	10c00005 	stb	r3,0(r2)
        return;
   13c78:	00003b06 	br	13d68 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   13c7c:	e0bffe17 	ldw	r2,-8(fp)
   13c80:	1000041e 	bne	r2,zero,13c94 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   13c84:	e0bfff17 	ldw	r2,-4(fp)
   13c88:	00c00304 	movi	r3,12
   13c8c:	10c00005 	stb	r3,0(r2)
        return;
   13c90:	00003506 	br	13d68 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   13c94:	d0a85503 	ldbu	r2,-24236(gp)
   13c98:	10803fcc 	andi	r2,r2,255
   13c9c:	10000426 	beq	r2,zero,13cb0 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   13ca0:	e0bfff17 	ldw	r2,-4(fp)
   13ca4:	00c00484 	movi	r3,18
   13ca8:	10c00005 	stb	r3,0(r2)
        return;
   13cac:	00002e06 	br	13d68 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
   13cb0:	e0bffd17 	ldw	r2,-12(fp)
   13cb4:	10800003 	ldbu	r2,0(r2)
   13cb8:	10803fcc 	andi	r2,r2,255
   13cbc:	10bfffc4 	addi	r2,r2,-1
   13cc0:	10800128 	cmpgeui	r2,r2,4
   13cc4:	10000426 	beq	r2,zero,13cd8 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   13cc8:	e0bfff17 	ldw	r2,-4(fp)
   13ccc:	00c00044 	movi	r3,1
   13cd0:	10c00005 	stb	r3,0(r2)
             return;
   13cd4:	00002406 	br	13d68 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   13cd8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13cdc:	0005303a 	rdctl	r2,status
   13ce0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13ce4:	e0fffc17 	ldw	r3,-16(fp)
   13ce8:	00bfff84 	movi	r2,-2
   13cec:	1884703a 	and	r2,r3,r2
   13cf0:	1001703a 	wrctl	status,r2
  
  return context;
   13cf4:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   13cf8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   13cfc:	e13ffe17 	ldw	r4,-8(fp)
   13d00:	00156140 	call	15614 <OS_StrLen>
   13d04:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   13d08:	e0bffa03 	ldbu	r2,-24(fp)
   13d0c:	10800830 	cmpltui	r2,r2,32
   13d10:	1000081e 	bne	r2,zero,13d34 <OSEventNameSet+0xf8>
   13d14:	e0bff817 	ldw	r2,-32(fp)
   13d18:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13d1c:	e0bff917 	ldw	r2,-28(fp)
   13d20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   13d24:	e0bfff17 	ldw	r2,-4(fp)
   13d28:	00c002c4 	movi	r3,11
   13d2c:	10c00005 	stb	r3,0(r2)
        return;
   13d30:	00000d06 	br	13d68 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   13d34:	e0bffd17 	ldw	r2,-12(fp)
   13d38:	10800384 	addi	r2,r2,14
   13d3c:	e17ffe17 	ldw	r5,-8(fp)
   13d40:	1009883a 	mov	r4,r2
   13d44:	00155a00 	call	155a0 <OS_StrCopy>
   13d48:	e0bff817 	ldw	r2,-32(fp)
   13d4c:	e0bffb15 	stw	r2,-20(fp)
   13d50:	e0bffb17 	ldw	r2,-20(fp)
   13d54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   13d58:	e0bfff17 	ldw	r2,-4(fp)
   13d5c:	10000005 	stb	zero,0(r2)
   13d60:	00000106 	br	13d68 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   13d64:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   13d68:	e037883a 	mov	sp,fp
   13d6c:	dfc00117 	ldw	ra,4(sp)
   13d70:	df000017 	ldw	fp,0(sp)
   13d74:	dec00204 	addi	sp,sp,8
   13d78:	f800283a 	ret

00013d7c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   13d7c:	deffed04 	addi	sp,sp,-76
   13d80:	dfc01215 	stw	ra,72(sp)
   13d84:	df001115 	stw	fp,68(sp)
   13d88:	df001104 	addi	fp,sp,68
   13d8c:	e13ffc15 	stw	r4,-16(fp)
   13d90:	e17ffd15 	stw	r5,-12(fp)
   13d94:	e1bffe15 	stw	r6,-8(fp)
   13d98:	3805883a 	mov	r2,r7
   13d9c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   13da0:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   13da4:	e0800217 	ldw	r2,8(fp)
   13da8:	1000021e 	bne	r2,zero,13db4 <OSEventPendMulti+0x38>
        return (0);
   13dac:	0005883a 	mov	r2,zero
   13db0:	00017106 	br	14378 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   13db4:	e0bffc17 	ldw	r2,-16(fp)
   13db8:	1000051e 	bne	r2,zero,13dd0 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   13dbc:	e0800217 	ldw	r2,8(fp)
   13dc0:	00c00104 	movi	r3,4
   13dc4:	10c00005 	stb	r3,0(r2)
        return (0);
   13dc8:	0005883a 	mov	r2,zero
   13dcc:	00016a06 	br	14378 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   13dd0:	e0bffd17 	ldw	r2,-12(fp)
   13dd4:	1000051e 	bne	r2,zero,13dec <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   13dd8:	e0800217 	ldw	r2,8(fp)
   13ddc:	00c00104 	movi	r3,4
   13de0:	10c00005 	stb	r3,0(r2)
        return (0);
   13de4:	0005883a 	mov	r2,zero
   13de8:	00016306 	br	14378 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   13dec:	e0bffe17 	ldw	r2,-8(fp)
   13df0:	1000051e 	bne	r2,zero,13e08 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   13df4:	e0800217 	ldw	r2,8(fp)
   13df8:	00c00104 	movi	r3,4
   13dfc:	10c00005 	stb	r3,0(r2)
        return (0);
   13e00:	0005883a 	mov	r2,zero
   13e04:	00015c06 	br	14378 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   13e08:	e0bffd17 	ldw	r2,-12(fp)
   13e0c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   13e10:	e0bffc17 	ldw	r2,-16(fp)
   13e14:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   13e18:	e0bfef17 	ldw	r2,-68(fp)
   13e1c:	10800017 	ldw	r2,0(r2)
   13e20:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   13e24:	00001906 	br	13e8c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   13e28:	e0bff017 	ldw	r2,-64(fp)
   13e2c:	10800003 	ldbu	r2,0(r2)
   13e30:	10803fcc 	andi	r2,r2,255
   13e34:	10c000a0 	cmpeqi	r3,r2,2
   13e38:	1800091e 	bne	r3,zero,13e60 <OSEventPendMulti+0xe4>
   13e3c:	10c000e0 	cmpeqi	r3,r2,3
   13e40:	1800091e 	bne	r3,zero,13e68 <OSEventPendMulti+0xec>
   13e44:	10800060 	cmpeqi	r2,r2,1
   13e48:	1000091e 	bne	r2,zero,13e70 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   13e4c:	e0800217 	ldw	r2,8(fp)
   13e50:	00c00044 	movi	r3,1
   13e54:	10c00005 	stb	r3,0(r2)
                 return (0);
   13e58:	0005883a 	mov	r2,zero
   13e5c:	00014606 	br	14378 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   13e60:	0001883a 	nop
   13e64:	00000306 	br	13e74 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   13e68:	0001883a 	nop
   13e6c:	00000106 	br	13e74 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   13e70:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   13e74:	e0bfef17 	ldw	r2,-68(fp)
   13e78:	10800104 	addi	r2,r2,4
   13e7c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   13e80:	e0bfef17 	ldw	r2,-68(fp)
   13e84:	10800017 	ldw	r2,0(r2)
   13e88:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   13e8c:	e0bff017 	ldw	r2,-64(fp)
   13e90:	103fe51e 	bne	r2,zero,13e28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013e28>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   13e94:	d0a85503 	ldbu	r2,-24236(gp)
   13e98:	10803fcc 	andi	r2,r2,255
   13e9c:	10000526 	beq	r2,zero,13eb4 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   13ea0:	e0800217 	ldw	r2,8(fp)
   13ea4:	00c00084 	movi	r3,2
   13ea8:	10c00005 	stb	r3,0(r2)
        return (0);
   13eac:	0005883a 	mov	r2,zero
   13eb0:	00013106 	br	14378 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   13eb4:	d0a84703 	ldbu	r2,-24292(gp)
   13eb8:	10803fcc 	andi	r2,r2,255
   13ebc:	10000526 	beq	r2,zero,13ed4 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   13ec0:	e0800217 	ldw	r2,8(fp)
   13ec4:	00c00344 	movi	r3,13
   13ec8:	10c00005 	stb	r3,0(r2)
        return (0);
   13ecc:	0005883a 	mov	r2,zero
   13ed0:	00012906 	br	14378 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13ed4:	0005303a 	rdctl	r2,status
   13ed8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13edc:	e0fffb17 	ldw	r3,-20(fp)
   13ee0:	00bfff84 	movi	r2,-2
   13ee4:	1884703a 	and	r2,r3,r2
   13ee8:	1001703a 	wrctl	status,r2
  
  return context;
   13eec:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   13ef0:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   13ef4:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   13ef8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   13efc:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   13f00:	e0bffc17 	ldw	r2,-16(fp)
   13f04:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   13f08:	e0bfef17 	ldw	r2,-68(fp)
   13f0c:	10800017 	ldw	r2,0(r2)
   13f10:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   13f14:	00008106 	br	1411c <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   13f18:	e0bff017 	ldw	r2,-64(fp)
   13f1c:	10800003 	ldbu	r2,0(r2)
   13f20:	10803fcc 	andi	r2,r2,255
   13f24:	10c000a0 	cmpeqi	r3,r2,2
   13f28:	18003c1e 	bne	r3,zero,1401c <OSEventPendMulti+0x2a0>
   13f2c:	10c000e0 	cmpeqi	r3,r2,3
   13f30:	1800031e 	bne	r3,zero,13f40 <OSEventPendMulti+0x1c4>
   13f34:	10800060 	cmpeqi	r2,r2,1
   13f38:	10001e1e 	bne	r2,zero,13fb4 <OSEventPendMulti+0x238>
   13f3c:	00006606 	br	140d8 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   13f40:	e0bff017 	ldw	r2,-64(fp)
   13f44:	1080020b 	ldhu	r2,8(r2)
   13f48:	10bfffcc 	andi	r2,r2,65535
   13f4c:	10001526 	beq	r2,zero,13fa4 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   13f50:	e0bff017 	ldw	r2,-64(fp)
   13f54:	1080020b 	ldhu	r2,8(r2)
   13f58:	10bfffc4 	addi	r2,r2,-1
   13f5c:	1007883a 	mov	r3,r2
   13f60:	e0bff017 	ldw	r2,-64(fp)
   13f64:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   13f68:	e0bffd17 	ldw	r2,-12(fp)
   13f6c:	10c00104 	addi	r3,r2,4
   13f70:	e0fffd15 	stw	r3,-12(fp)
   13f74:	e0fff017 	ldw	r3,-64(fp)
   13f78:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   13f7c:	00800044 	movi	r2,1
   13f80:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   13f84:	e0bffe17 	ldw	r2,-8(fp)
   13f88:	10c00104 	addi	r3,r2,4
   13f8c:	e0fffe15 	stw	r3,-8(fp)
   13f90:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   13f94:	e0bff18b 	ldhu	r2,-58(fp)
   13f98:	10800044 	addi	r2,r2,1
   13f9c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   13fa0:	00005806 	br	14104 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   13fa4:	e0bff203 	ldbu	r2,-56(fp)
   13fa8:	10800054 	ori	r2,r2,1
   13fac:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   13fb0:	00005406 	br	14104 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   13fb4:	e0bff017 	ldw	r2,-64(fp)
   13fb8:	10800117 	ldw	r2,4(r2)
   13fbc:	10001326 	beq	r2,zero,1400c <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   13fc0:	e0bffe17 	ldw	r2,-8(fp)
   13fc4:	10c00104 	addi	r3,r2,4
   13fc8:	e0fffe15 	stw	r3,-8(fp)
   13fcc:	e0fff017 	ldw	r3,-64(fp)
   13fd0:	18c00117 	ldw	r3,4(r3)
   13fd4:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   13fd8:	e0bff017 	ldw	r2,-64(fp)
   13fdc:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   13fe0:	e0bffd17 	ldw	r2,-12(fp)
   13fe4:	10c00104 	addi	r3,r2,4
   13fe8:	e0fffd15 	stw	r3,-12(fp)
   13fec:	e0fff017 	ldw	r3,-64(fp)
   13ff0:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   13ff4:	00800044 	movi	r2,1
   13ff8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   13ffc:	e0bff18b 	ldhu	r2,-58(fp)
   14000:	10800044 	addi	r2,r2,1
   14004:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   14008:	00003e06 	br	14104 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   1400c:	e0bff203 	ldbu	r2,-56(fp)
   14010:	10800094 	ori	r2,r2,2
   14014:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   14018:	00003a06 	br	14104 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   1401c:	e0bff017 	ldw	r2,-64(fp)
   14020:	10800117 	ldw	r2,4(r2)
   14024:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   14028:	e0bff517 	ldw	r2,-44(fp)
   1402c:	1080058b 	ldhu	r2,22(r2)
   14030:	10bfffcc 	andi	r2,r2,65535
   14034:	10002426 	beq	r2,zero,140c8 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   14038:	e0bffe17 	ldw	r2,-8(fp)
   1403c:	10c00104 	addi	r3,r2,4
   14040:	e0fffe15 	stw	r3,-8(fp)
   14044:	e0fff517 	ldw	r3,-44(fp)
   14048:	18c00417 	ldw	r3,16(r3)
   1404c:	19400104 	addi	r5,r3,4
   14050:	e13ff517 	ldw	r4,-44(fp)
   14054:	21400415 	stw	r5,16(r4)
   14058:	18c00017 	ldw	r3,0(r3)
   1405c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   14060:	e0bff517 	ldw	r2,-44(fp)
   14064:	10c00417 	ldw	r3,16(r2)
   14068:	e0bff517 	ldw	r2,-44(fp)
   1406c:	10800217 	ldw	r2,8(r2)
   14070:	1880041e 	bne	r3,r2,14084 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   14074:	e0bff517 	ldw	r2,-44(fp)
   14078:	10c00117 	ldw	r3,4(r2)
   1407c:	e0bff517 	ldw	r2,-44(fp)
   14080:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   14084:	e0bff517 	ldw	r2,-44(fp)
   14088:	1080058b 	ldhu	r2,22(r2)
   1408c:	10bfffc4 	addi	r2,r2,-1
   14090:	1007883a 	mov	r3,r2
   14094:	e0bff517 	ldw	r2,-44(fp)
   14098:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   1409c:	e0bffd17 	ldw	r2,-12(fp)
   140a0:	10c00104 	addi	r3,r2,4
   140a4:	e0fffd15 	stw	r3,-12(fp)
   140a8:	e0fff017 	ldw	r3,-64(fp)
   140ac:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   140b0:	00800044 	movi	r2,1
   140b4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   140b8:	e0bff18b 	ldhu	r2,-58(fp)
   140bc:	10800044 	addi	r2,r2,1
   140c0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   140c4:	00000f06 	br	14104 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   140c8:	e0bff203 	ldbu	r2,-56(fp)
   140cc:	10800114 	ori	r2,r2,4
   140d0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   140d4:	00000b06 	br	14104 <OSEventPendMulti+0x388>
   140d8:	e0bff317 	ldw	r2,-52(fp)
   140dc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   140e0:	e0bff417 	ldw	r2,-48(fp)
   140e4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   140e8:	e0bffd17 	ldw	r2,-12(fp)
   140ec:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   140f0:	e0800217 	ldw	r2,8(fp)
   140f4:	00c00044 	movi	r3,1
   140f8:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   140fc:	e0bff18b 	ldhu	r2,-58(fp)
   14100:	00009d06 	br	14378 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   14104:	e0bfef17 	ldw	r2,-68(fp)
   14108:	10800104 	addi	r2,r2,4
   1410c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   14110:	e0bfef17 	ldw	r2,-68(fp)
   14114:	10800017 	ldw	r2,0(r2)
   14118:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   1411c:	e0bff017 	ldw	r2,-64(fp)
   14120:	103f7d1e 	bne	r2,zero,13f18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013f18>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   14124:	e0bff103 	ldbu	r2,-60(fp)
   14128:	10800058 	cmpnei	r2,r2,1
   1412c:	10000a1e 	bne	r2,zero,14158 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   14130:	e0bffd17 	ldw	r2,-12(fp)
   14134:	10000015 	stw	zero,0(r2)
   14138:	e0bff317 	ldw	r2,-52(fp)
   1413c:	e0bff615 	stw	r2,-40(fp)
   14140:	e0bff617 	ldw	r2,-40(fp)
   14144:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   14148:	e0800217 	ldw	r2,8(fp)
   1414c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   14150:	e0bff18b 	ldhu	r2,-58(fp)
   14154:	00008806 	br	14378 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   14158:	d0a85617 	ldw	r2,-24232(gp)
   1415c:	d0e85617 	ldw	r3,-24232(gp)
   14160:	19000c03 	ldbu	r4,48(r3)
   14164:	e0fff203 	ldbu	r3,-56(fp)
   14168:	20c6b03a 	or	r3,r4,r3
   1416c:	1809883a 	mov	r4,r3
   14170:	00ffe004 	movi	r3,-128
   14174:	20c6b03a 	or	r3,r4,r3
   14178:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1417c:	d0a85617 	ldw	r2,-24232(gp)
   14180:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   14184:	d0a85617 	ldw	r2,-24232(gp)
   14188:	e0ffff0b 	ldhu	r3,-4(fp)
   1418c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   14190:	e13ffc17 	ldw	r4,-16(fp)
   14194:	0014cb80 	call	14cb8 <OS_EventTaskWaitMulti>
   14198:	e0bff317 	ldw	r2,-52(fp)
   1419c:	e0bff915 	stw	r2,-28(fp)
   141a0:	e0bff917 	ldw	r2,-28(fp)
   141a4:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   141a8:	001545c0 	call	1545c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   141ac:	0005303a 	rdctl	r2,status
   141b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   141b4:	e0fff717 	ldw	r3,-36(fp)
   141b8:	00bfff84 	movi	r2,-2
   141bc:	1884703a 	and	r2,r3,r2
   141c0:	1001703a 	wrctl	status,r2
  
  return context;
   141c4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   141c8:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   141cc:	d0a85617 	ldw	r2,-24232(gp)
   141d0:	10800c43 	ldbu	r2,49(r2)
   141d4:	10803fcc 	andi	r2,r2,255
   141d8:	10000226 	beq	r2,zero,141e4 <OSEventPendMulti+0x468>
   141dc:	108000a0 	cmpeqi	r2,r2,2
   141e0:	10001826 	beq	r2,zero,14244 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   141e4:	d0a85617 	ldw	r2,-24232(gp)
   141e8:	10800717 	ldw	r2,28(r2)
   141ec:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   141f0:	e0bff017 	ldw	r2,-64(fp)
   141f4:	10000b26 	beq	r2,zero,14224 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   141f8:	e0bffd17 	ldw	r2,-12(fp)
   141fc:	10c00104 	addi	r3,r2,4
   14200:	e0fffd15 	stw	r3,-12(fp)
   14204:	e0fff017 	ldw	r3,-64(fp)
   14208:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   1420c:	e0bffd17 	ldw	r2,-12(fp)
   14210:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   14214:	e0bff18b 	ldhu	r2,-58(fp)
   14218:	10800044 	addi	r2,r2,1
   1421c:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   14220:	00000d06 	br	14258 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   14224:	d0a85617 	ldw	r2,-24232(gp)
   14228:	00c00044 	movi	r3,1
   1422c:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   14230:	d0a85617 	ldw	r2,-24232(gp)
   14234:	e17ffc17 	ldw	r5,-16(fp)
   14238:	1009883a 	mov	r4,r2
   1423c:	0014ec00 	call	14ec0 <OS_EventTaskRemoveMulti>
             }
			 break;
   14240:	00000506 	br	14258 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   14244:	d0a85617 	ldw	r2,-24232(gp)
   14248:	e17ffc17 	ldw	r5,-16(fp)
   1424c:	1009883a 	mov	r4,r2
   14250:	0014ec00 	call	14ec0 <OS_EventTaskRemoveMulti>
             break;
   14254:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   14258:	d0a85617 	ldw	r2,-24232(gp)
   1425c:	10800c43 	ldbu	r2,49(r2)
   14260:	10803fcc 	andi	r2,r2,255
   14264:	10000326 	beq	r2,zero,14274 <OSEventPendMulti+0x4f8>
   14268:	108000a0 	cmpeqi	r2,r2,2
   1426c:	1000231e 	bne	r2,zero,142fc <OSEventPendMulti+0x580>
   14270:	00002a06 	br	1431c <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   14274:	e0bff017 	ldw	r2,-64(fp)
   14278:	10800003 	ldbu	r2,0(r2)
   1427c:	10803fcc 	andi	r2,r2,255
   14280:	0080100e 	bge	zero,r2,142c4 <OSEventPendMulti+0x548>
   14284:	10c000d0 	cmplti	r3,r2,3
   14288:	1800071e 	bne	r3,zero,142a8 <OSEventPendMulti+0x52c>
   1428c:	108000e0 	cmpeqi	r2,r2,3
   14290:	10000c26 	beq	r2,zero,142c4 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   14294:	e0bffe17 	ldw	r2,-8(fp)
   14298:	10c00104 	addi	r3,r2,4
   1429c:	e0fffe15 	stw	r3,-8(fp)
   142a0:	10000015 	stw	zero,0(r2)
                      break;
   142a4:	00001206 	br	142f0 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   142a8:	e0bffe17 	ldw	r2,-8(fp)
   142ac:	10c00104 	addi	r3,r2,4
   142b0:	e0fffe15 	stw	r3,-8(fp)
   142b4:	d0e85617 	ldw	r3,-24232(gp)
   142b8:	18c00917 	ldw	r3,36(r3)
   142bc:	10c00015 	stw	r3,0(r2)
                      break;
   142c0:	00000b06 	br	142f0 <OSEventPendMulti+0x574>
   142c4:	e0bff317 	ldw	r2,-52(fp)
   142c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   142cc:	e0bff817 	ldw	r2,-32(fp)
   142d0:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   142d4:	e0bffd17 	ldw	r2,-12(fp)
   142d8:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   142dc:	e0800217 	ldw	r2,8(fp)
   142e0:	00c00044 	movi	r3,1
   142e4:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   142e8:	e0bff18b 	ldhu	r2,-58(fp)
   142ec:	00002206 	br	14378 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   142f0:	e0800217 	ldw	r2,8(fp)
   142f4:	10000005 	stb	zero,0(r2)
             break;
   142f8:	00001006 	br	1433c <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   142fc:	e0bffe17 	ldw	r2,-8(fp)
   14300:	10c00104 	addi	r3,r2,4
   14304:	e0fffe15 	stw	r3,-8(fp)
   14308:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   1430c:	e0800217 	ldw	r2,8(fp)
   14310:	00c00384 	movi	r3,14
   14314:	10c00005 	stb	r3,0(r2)
             break;
   14318:	00000806 	br	1433c <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   1431c:	e0bffe17 	ldw	r2,-8(fp)
   14320:	10c00104 	addi	r3,r2,4
   14324:	e0fffe15 	stw	r3,-8(fp)
   14328:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   1432c:	e0800217 	ldw	r2,8(fp)
   14330:	00c00284 	movi	r3,10
   14334:	10c00005 	stb	r3,0(r2)
             break;
   14338:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   1433c:	d0a85617 	ldw	r2,-24232(gp)
   14340:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   14344:	d0a85617 	ldw	r2,-24232(gp)
   14348:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   1434c:	d0a85617 	ldw	r2,-24232(gp)
   14350:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   14354:	d0a85617 	ldw	r2,-24232(gp)
   14358:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   1435c:	d0a85617 	ldw	r2,-24232(gp)
   14360:	10000915 	stw	zero,36(r2)
   14364:	e0bff317 	ldw	r2,-52(fp)
   14368:	e0bffa15 	stw	r2,-24(fp)
   1436c:	e0bffa17 	ldw	r2,-24(fp)
   14370:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   14374:	e0bff18b 	ldhu	r2,-58(fp)
}
   14378:	e037883a 	mov	sp,fp
   1437c:	dfc00117 	ldw	ra,4(sp)
   14380:	df000017 	ldw	fp,0(sp)
   14384:	dec00204 	addi	sp,sp,8
   14388:	f800283a 	ret

0001438c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   1438c:	defffe04 	addi	sp,sp,-8
   14390:	dfc00115 	stw	ra,4(sp)
   14394:	df000015 	stw	fp,0(sp)
   14398:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   1439c:	001e9b00 	call	1e9b0 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   143a0:	00151080 	call	15108 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   143a4:	00151500 	call	15150 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   143a8:	00152bc0 	call	152bc <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   143ac:	00150280 	call	15028 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   143b0:	001716c0 	call	1716c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   143b4:	0017a6c0 	call	17a6c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   143b8:	0018b940 	call	18b94 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   143bc:	00151bc0 	call	151bc <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   143c0:	001523c0 	call	1523c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   143c4:	001e9d00 	call	1e9d0 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   143c8:	0015b400 	call	15b40 <OSDebugInit>
#endif
}
   143cc:	0001883a 	nop
   143d0:	e037883a 	mov	sp,fp
   143d4:	dfc00117 	ldw	ra,4(sp)
   143d8:	df000017 	ldw	fp,0(sp)
   143dc:	dec00204 	addi	sp,sp,8
   143e0:	f800283a 	ret

000143e4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   143e4:	deffff04 	addi	sp,sp,-4
   143e8:	df000015 	stw	fp,0(sp)
   143ec:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
   143f0:	d0a84743 	ldbu	r2,-24291(gp)
   143f4:	10803fcc 	andi	r2,r2,255
   143f8:	10800058 	cmpnei	r2,r2,1
   143fc:	1000071e 	bne	r2,zero,1441c <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
   14400:	d0a85503 	ldbu	r2,-24236(gp)
   14404:	10803fcc 	andi	r2,r2,255
   14408:	10803fe0 	cmpeqi	r2,r2,255
   1440c:	1000031e 	bne	r2,zero,1441c <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   14410:	d0a85503 	ldbu	r2,-24236(gp)
   14414:	10800044 	addi	r2,r2,1
   14418:	d0a85505 	stb	r2,-24236(gp)
        }
    }
}
   1441c:	0001883a 	nop
   14420:	e037883a 	mov	sp,fp
   14424:	df000017 	ldw	fp,0(sp)
   14428:	dec00104 	addi	sp,sp,4
   1442c:	f800283a 	ret

00014430 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   14430:	defffb04 	addi	sp,sp,-20
   14434:	dfc00415 	stw	ra,16(sp)
   14438:	df000315 	stw	fp,12(sp)
   1443c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   14440:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   14444:	d0a84743 	ldbu	r2,-24291(gp)
   14448:	10803fcc 	andi	r2,r2,255
   1444c:	10800058 	cmpnei	r2,r2,1
   14450:	10002f1e 	bne	r2,zero,14510 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14454:	0005303a 	rdctl	r2,status
   14458:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1445c:	e0ffff17 	ldw	r3,-4(fp)
   14460:	00bfff84 	movi	r2,-2
   14464:	1884703a 	and	r2,r3,r2
   14468:	1001703a 	wrctl	status,r2
  
  return context;
   1446c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   14470:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   14474:	d0a85503 	ldbu	r2,-24236(gp)
   14478:	10803fcc 	andi	r2,r2,255
   1447c:	10000326 	beq	r2,zero,1448c <OSIntExit+0x5c>
            OSIntNesting--;
   14480:	d0a85503 	ldbu	r2,-24236(gp)
   14484:	10bfffc4 	addi	r2,r2,-1
   14488:	d0a85505 	stb	r2,-24236(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   1448c:	d0a85503 	ldbu	r2,-24236(gp)
   14490:	10803fcc 	andi	r2,r2,255
   14494:	10001a1e 	bne	r2,zero,14500 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   14498:	d0a84703 	ldbu	r2,-24292(gp)
   1449c:	10803fcc 	andi	r2,r2,255
   144a0:	1000171e 	bne	r2,zero,14500 <OSIntExit+0xd0>
                OS_SchedNew();
   144a4:	001552c0 	call	1552c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   144a8:	d0e84903 	ldbu	r3,-24284(gp)
   144ac:	d0a84943 	ldbu	r2,-24283(gp)
   144b0:	18c03fcc 	andi	r3,r3,255
   144b4:	10803fcc 	andi	r2,r2,255
   144b8:	18801126 	beq	r3,r2,14500 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   144bc:	d0a84903 	ldbu	r2,-24284(gp)
   144c0:	10c03fcc 	andi	r3,r2,255
   144c4:	008000f4 	movhi	r2,3
   144c8:	10b5aa04 	addi	r2,r2,-10584
   144cc:	18c7883a 	add	r3,r3,r3
   144d0:	18c7883a 	add	r3,r3,r3
   144d4:	10c5883a 	add	r2,r2,r3
   144d8:	10800017 	ldw	r2,0(r2)
   144dc:	d0a85115 	stw	r2,-24252(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   144e0:	d0a85117 	ldw	r2,-24252(gp)
   144e4:	10c00e17 	ldw	r3,56(r2)
   144e8:	18c00044 	addi	r3,r3,1
   144ec:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   144f0:	d0a84c17 	ldw	r2,-24272(gp)
   144f4:	10800044 	addi	r2,r2,1
   144f8:	d0a84c15 	stw	r2,-24272(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   144fc:	001e6dc0 	call	1e6dc <OSCtxSw>
   14500:	e0bffd17 	ldw	r2,-12(fp)
   14504:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14508:	e0bffe17 	ldw	r2,-8(fp)
   1450c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   14510:	0001883a 	nop
   14514:	e037883a 	mov	sp,fp
   14518:	dfc00117 	ldw	ra,4(sp)
   1451c:	df000017 	ldw	fp,0(sp)
   14520:	dec00204 	addi	sp,sp,8
   14524:	f800283a 	ret

00014528 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   14528:	defffc04 	addi	sp,sp,-16
   1452c:	df000315 	stw	fp,12(sp)
   14530:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14534:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   14538:	d0a84743 	ldbu	r2,-24291(gp)
   1453c:	10803fcc 	andi	r2,r2,255
   14540:	10800058 	cmpnei	r2,r2,1
   14544:	1000161e 	bne	r2,zero,145a0 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14548:	0005303a 	rdctl	r2,status
   1454c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14550:	e0ffff17 	ldw	r3,-4(fp)
   14554:	00bfff84 	movi	r2,-2
   14558:	1884703a 	and	r2,r3,r2
   1455c:	1001703a 	wrctl	status,r2
  
  return context;
   14560:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   14564:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   14568:	d0a85503 	ldbu	r2,-24236(gp)
   1456c:	10803fcc 	andi	r2,r2,255
   14570:	1000071e 	bne	r2,zero,14590 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   14574:	d0a84703 	ldbu	r2,-24292(gp)
   14578:	10803fcc 	andi	r2,r2,255
   1457c:	10803fe0 	cmpeqi	r2,r2,255
   14580:	1000031e 	bne	r2,zero,14590 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   14584:	d0a84703 	ldbu	r2,-24292(gp)
   14588:	10800044 	addi	r2,r2,1
   1458c:	d0a84705 	stb	r2,-24292(gp)
   14590:	e0bffd17 	ldw	r2,-12(fp)
   14594:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14598:	e0bffe17 	ldw	r2,-8(fp)
   1459c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   145a0:	0001883a 	nop
   145a4:	e037883a 	mov	sp,fp
   145a8:	df000017 	ldw	fp,0(sp)
   145ac:	dec00104 	addi	sp,sp,4
   145b0:	f800283a 	ret

000145b4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   145b4:	defff804 	addi	sp,sp,-32
   145b8:	dfc00715 	stw	ra,28(sp)
   145bc:	df000615 	stw	fp,24(sp)
   145c0:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   145c4:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   145c8:	d0a84743 	ldbu	r2,-24291(gp)
   145cc:	10803fcc 	andi	r2,r2,255
   145d0:	10800058 	cmpnei	r2,r2,1
   145d4:	1000281e 	bne	r2,zero,14678 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   145d8:	0005303a 	rdctl	r2,status
   145dc:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   145e0:	e0ffff17 	ldw	r3,-4(fp)
   145e4:	00bfff84 	movi	r2,-2
   145e8:	1884703a 	and	r2,r3,r2
   145ec:	1001703a 	wrctl	status,r2
  
  return context;
   145f0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   145f4:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   145f8:	d0a84703 	ldbu	r2,-24292(gp)
   145fc:	10803fcc 	andi	r2,r2,255
   14600:	10001926 	beq	r2,zero,14668 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   14604:	d0a84703 	ldbu	r2,-24292(gp)
   14608:	10bfffc4 	addi	r2,r2,-1
   1460c:	d0a84705 	stb	r2,-24292(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   14610:	d0a84703 	ldbu	r2,-24292(gp)
   14614:	10803fcc 	andi	r2,r2,255
   14618:	10000e1e 	bne	r2,zero,14654 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   1461c:	d0a85503 	ldbu	r2,-24236(gp)
   14620:	10803fcc 	andi	r2,r2,255
   14624:	1000061e 	bne	r2,zero,14640 <OSSchedUnlock+0x8c>
   14628:	e0bffa17 	ldw	r2,-24(fp)
   1462c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14630:	e0bffb17 	ldw	r2,-20(fp)
   14634:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   14638:	001545c0 	call	1545c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   1463c:	00000e06 	br	14678 <OSSchedUnlock+0xc4>
   14640:	e0bffa17 	ldw	r2,-24(fp)
   14644:	e0bffc15 	stw	r2,-16(fp)
   14648:	e0bffc17 	ldw	r2,-16(fp)
   1464c:	1001703a 	wrctl	status,r2
   14650:	00000906 	br	14678 <OSSchedUnlock+0xc4>
   14654:	e0bffa17 	ldw	r2,-24(fp)
   14658:	e0bffd15 	stw	r2,-12(fp)
   1465c:	e0bffd17 	ldw	r2,-12(fp)
   14660:	1001703a 	wrctl	status,r2
   14664:	00000406 	br	14678 <OSSchedUnlock+0xc4>
   14668:	e0bffa17 	ldw	r2,-24(fp)
   1466c:	e0bffe15 	stw	r2,-8(fp)
   14670:	e0bffe17 	ldw	r2,-8(fp)
   14674:	1001703a 	wrctl	status,r2
   14678:	0001883a 	nop
   1467c:	e037883a 	mov	sp,fp
   14680:	dfc00117 	ldw	ra,4(sp)
   14684:	df000017 	ldw	fp,0(sp)
   14688:	dec00204 	addi	sp,sp,8
   1468c:	f800283a 	ret

00014690 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   14690:	defffe04 	addi	sp,sp,-8
   14694:	dfc00115 	stw	ra,4(sp)
   14698:	df000015 	stw	fp,0(sp)
   1469c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   146a0:	d0a84743 	ldbu	r2,-24291(gp)
   146a4:	10803fcc 	andi	r2,r2,255
   146a8:	10000f1e 	bne	r2,zero,146e8 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   146ac:	001552c0 	call	1552c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   146b0:	d0a84903 	ldbu	r2,-24284(gp)
   146b4:	d0a84945 	stb	r2,-24283(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   146b8:	d0a84903 	ldbu	r2,-24284(gp)
   146bc:	10c03fcc 	andi	r3,r2,255
   146c0:	008000f4 	movhi	r2,3
   146c4:	10b5aa04 	addi	r2,r2,-10584
   146c8:	18c7883a 	add	r3,r3,r3
   146cc:	18c7883a 	add	r3,r3,r3
   146d0:	10c5883a 	add	r2,r2,r3
   146d4:	10800017 	ldw	r2,0(r2)
   146d8:	d0a85115 	stw	r2,-24252(gp)
        OSTCBCur      = OSTCBHighRdy;
   146dc:	d0a85117 	ldw	r2,-24252(gp)
   146e0:	d0a85615 	stw	r2,-24232(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   146e4:	001e7680 	call	1e768 <OSStartHighRdy>
    }
}
   146e8:	0001883a 	nop
   146ec:	e037883a 	mov	sp,fp
   146f0:	dfc00117 	ldw	ra,4(sp)
   146f4:	df000017 	ldw	fp,0(sp)
   146f8:	dec00204 	addi	sp,sp,8
   146fc:	f800283a 	ret

00014700 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   14700:	defff904 	addi	sp,sp,-28
   14704:	dfc00615 	stw	ra,24(sp)
   14708:	df000515 	stw	fp,20(sp)
   1470c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   14710:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   14714:	01000084 	movi	r4,2
   14718:	001ae080 	call	1ae08 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1471c:	0005303a 	rdctl	r2,status
   14720:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14724:	e0fffc17 	ldw	r3,-16(fp)
   14728:	00bfff84 	movi	r2,-2
   1472c:	1884703a 	and	r2,r3,r2
   14730:	1001703a 	wrctl	status,r2
  
  return context;
   14734:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   14738:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   1473c:	d0284815 	stw	zero,-24288(gp)
   14740:	e0bffb17 	ldw	r2,-20(fp)
   14744:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14748:	e0bffd17 	ldw	r2,-12(fp)
   1474c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   14750:	0009883a 	mov	r4,zero
   14754:	001ae080 	call	1ae08 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14758:	0005303a 	rdctl	r2,status
   1475c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14760:	e0fffe17 	ldw	r3,-8(fp)
   14764:	00bfff84 	movi	r2,-2
   14768:	1884703a 	and	r2,r3,r2
   1476c:	1001703a 	wrctl	status,r2
  
  return context;
   14770:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   14774:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   14778:	d0a84817 	ldw	r2,-24288(gp)
   1477c:	d0a84d15 	stw	r2,-24268(gp)
    OSStatRdy    = OS_TRUE;
   14780:	00800044 	movi	r2,1
   14784:	d0a85905 	stb	r2,-24220(gp)
   14788:	e0bffb17 	ldw	r2,-20(fp)
   1478c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14790:	e0bfff17 	ldw	r2,-4(fp)
   14794:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   14798:	0001883a 	nop
   1479c:	e037883a 	mov	sp,fp
   147a0:	dfc00117 	ldw	ra,4(sp)
   147a4:	df000017 	ldw	fp,0(sp)
   147a8:	dec00204 	addi	sp,sp,8
   147ac:	f800283a 	ret

000147b0 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   147b0:	defff704 	addi	sp,sp,-36
   147b4:	dfc00815 	stw	ra,32(sp)
   147b8:	df000715 	stw	fp,28(sp)
   147bc:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   147c0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   147c4:	001e9900 	call	1e990 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   147c8:	0005303a 	rdctl	r2,status
   147cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   147d0:	e0fffd17 	ldw	r3,-12(fp)
   147d4:	00bfff84 	movi	r2,-2
   147d8:	1884703a 	and	r2,r3,r2
   147dc:	1001703a 	wrctl	status,r2
  
  return context;
   147e0:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   147e4:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   147e8:	d0a85717 	ldw	r2,-24228(gp)
   147ec:	10800044 	addi	r2,r2,1
   147f0:	d0a85715 	stw	r2,-24228(gp)
   147f4:	e0bffb17 	ldw	r2,-20(fp)
   147f8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   147fc:	e0bfff17 	ldw	r2,-4(fp)
   14800:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   14804:	d0a84743 	ldbu	r2,-24291(gp)
   14808:	10803fcc 	andi	r2,r2,255
   1480c:	10800058 	cmpnei	r2,r2,1
   14810:	10006a1e 	bne	r2,zero,149bc <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   14814:	d0a84b03 	ldbu	r2,-24276(gp)
   14818:	10803fcc 	andi	r2,r2,255
   1481c:	10c00060 	cmpeqi	r3,r2,1
   14820:	1800061e 	bne	r3,zero,1483c <OSTimeTick+0x8c>
   14824:	10c000a0 	cmpeqi	r3,r2,2
   14828:	1800061e 	bne	r3,zero,14844 <OSTimeTick+0x94>
   1482c:	10000a1e 	bne	r2,zero,14858 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   14830:	00800044 	movi	r2,1
   14834:	e0bffa05 	stb	r2,-24(fp)
                 break;
   14838:	00000b06 	br	14868 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   1483c:	e03ffa05 	stb	zero,-24(fp)
                 break;
   14840:	00000906 	br	14868 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   14844:	00800044 	movi	r2,1
   14848:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   1484c:	00800044 	movi	r2,1
   14850:	d0a84b05 	stb	r2,-24276(gp)
                 break;
   14854:	00000406 	br	14868 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   14858:	00800044 	movi	r2,1
   1485c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   14860:	d0284b05 	stb	zero,-24276(gp)
                 break;
   14864:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   14868:	e0bffa03 	ldbu	r2,-24(fp)
   1486c:	10005226 	beq	r2,zero,149b8 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   14870:	d0a84a17 	ldw	r2,-24280(gp)
   14874:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   14878:	00004906 	br	149a0 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1487c:	0005303a 	rdctl	r2,status
   14880:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14884:	e0fffc17 	ldw	r3,-16(fp)
   14888:	00bfff84 	movi	r2,-2
   1488c:	1884703a 	and	r2,r3,r2
   14890:	1001703a 	wrctl	status,r2
  
  return context;
   14894:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
   14898:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   1489c:	e0bff917 	ldw	r2,-28(fp)
   148a0:	10800b8b 	ldhu	r2,46(r2)
   148a4:	10bfffcc 	andi	r2,r2,65535
   148a8:	10003626 	beq	r2,zero,14984 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   148ac:	e0bff917 	ldw	r2,-28(fp)
   148b0:	10800b8b 	ldhu	r2,46(r2)
   148b4:	10bfffc4 	addi	r2,r2,-1
   148b8:	1007883a 	mov	r3,r2
   148bc:	e0bff917 	ldw	r2,-28(fp)
   148c0:	10c00b8d 	sth	r3,46(r2)
   148c4:	e0bff917 	ldw	r2,-28(fp)
   148c8:	10800b8b 	ldhu	r2,46(r2)
   148cc:	10bfffcc 	andi	r2,r2,65535
   148d0:	10002c1e 	bne	r2,zero,14984 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   148d4:	e0bff917 	ldw	r2,-28(fp)
   148d8:	10800c03 	ldbu	r2,48(r2)
   148dc:	10803fcc 	andi	r2,r2,255
   148e0:	10800dcc 	andi	r2,r2,55
   148e4:	10000b26 	beq	r2,zero,14914 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   148e8:	e0bff917 	ldw	r2,-28(fp)
   148ec:	10c00c03 	ldbu	r3,48(r2)
   148f0:	00bff204 	movi	r2,-56
   148f4:	1884703a 	and	r2,r3,r2
   148f8:	1007883a 	mov	r3,r2
   148fc:	e0bff917 	ldw	r2,-28(fp)
   14900:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   14904:	e0bff917 	ldw	r2,-28(fp)
   14908:	00c00044 	movi	r3,1
   1490c:	10c00c45 	stb	r3,49(r2)
   14910:	00000206 	br	1491c <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   14914:	e0bff917 	ldw	r2,-28(fp)
   14918:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   1491c:	e0bff917 	ldw	r2,-28(fp)
   14920:	10800c03 	ldbu	r2,48(r2)
   14924:	10803fcc 	andi	r2,r2,255
   14928:	1080020c 	andi	r2,r2,8
   1492c:	1000151e 	bne	r2,zero,14984 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   14930:	e0bff917 	ldw	r2,-28(fp)
   14934:	10c00d83 	ldbu	r3,54(r2)
   14938:	d0a85303 	ldbu	r2,-24244(gp)
   1493c:	1884b03a 	or	r2,r3,r2
   14940:	d0a85305 	stb	r2,-24244(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   14944:	e0bff917 	ldw	r2,-28(fp)
   14948:	10800d03 	ldbu	r2,52(r2)
   1494c:	10c03fcc 	andi	r3,r2,255
   14950:	e0bff917 	ldw	r2,-28(fp)
   14954:	10800d03 	ldbu	r2,52(r2)
   14958:	11003fcc 	andi	r4,r2,255
   1495c:	d0a85344 	addi	r2,gp,-24243
   14960:	2085883a 	add	r2,r4,r2
   14964:	11000003 	ldbu	r4,0(r2)
   14968:	e0bff917 	ldw	r2,-28(fp)
   1496c:	10800d43 	ldbu	r2,53(r2)
   14970:	2084b03a 	or	r2,r4,r2
   14974:	1009883a 	mov	r4,r2
   14978:	d0a85344 	addi	r2,gp,-24243
   1497c:	1885883a 	add	r2,r3,r2
   14980:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   14984:	e0bff917 	ldw	r2,-28(fp)
   14988:	10800517 	ldw	r2,20(r2)
   1498c:	e0bff915 	stw	r2,-28(fp)
   14990:	e0bffb17 	ldw	r2,-20(fp)
   14994:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14998:	e0bffe17 	ldw	r2,-8(fp)
   1499c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   149a0:	e0bff917 	ldw	r2,-28(fp)
   149a4:	10800c83 	ldbu	r2,50(r2)
   149a8:	10803fcc 	andi	r2,r2,255
   149ac:	10800518 	cmpnei	r2,r2,20
   149b0:	103fb21e 	bne	r2,zero,1487c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701487c>
   149b4:	00000106 	br	149bc <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
   149b8:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   149bc:	e037883a 	mov	sp,fp
   149c0:	dfc00117 	ldw	ra,4(sp)
   149c4:	df000017 	ldw	fp,0(sp)
   149c8:	dec00204 	addi	sp,sp,8
   149cc:	f800283a 	ret

000149d0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   149d0:	deffff04 	addi	sp,sp,-4
   149d4:	df000015 	stw	fp,0(sp)
   149d8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   149dc:	00804784 	movi	r2,286
}
   149e0:	e037883a 	mov	sp,fp
   149e4:	df000017 	ldw	fp,0(sp)
   149e8:	dec00104 	addi	sp,sp,4
   149ec:	f800283a 	ret

000149f0 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   149f0:	deffff04 	addi	sp,sp,-4
   149f4:	df000015 	stw	fp,0(sp)
   149f8:	d839883a 	mov	fp,sp
}
   149fc:	0001883a 	nop
   14a00:	e037883a 	mov	sp,fp
   14a04:	df000017 	ldw	fp,0(sp)
   14a08:	dec00104 	addi	sp,sp,4
   14a0c:	f800283a 	ret

00014a10 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   14a10:	defff804 	addi	sp,sp,-32
   14a14:	dfc00715 	stw	ra,28(sp)
   14a18:	df000615 	stw	fp,24(sp)
   14a1c:	df000604 	addi	fp,sp,24
   14a20:	e13ffc15 	stw	r4,-16(fp)
   14a24:	e17ffd15 	stw	r5,-12(fp)
   14a28:	3007883a 	mov	r3,r6
   14a2c:	3805883a 	mov	r2,r7
   14a30:	e0fffe05 	stb	r3,-8(fp)
   14a34:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   14a38:	e0bffc17 	ldw	r2,-16(fp)
   14a3c:	10800283 	ldbu	r2,10(r2)
   14a40:	10c03fcc 	andi	r3,r2,255
   14a44:	008000b4 	movhi	r2,2
   14a48:	10806904 	addi	r2,r2,420
   14a4c:	10c5883a 	add	r2,r2,r3
   14a50:	10800003 	ldbu	r2,0(r2)
   14a54:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   14a58:	e0bffa03 	ldbu	r2,-24(fp)
   14a5c:	e0fffc17 	ldw	r3,-16(fp)
   14a60:	1885883a 	add	r2,r3,r2
   14a64:	108002c4 	addi	r2,r2,11
   14a68:	10800003 	ldbu	r2,0(r2)
   14a6c:	10c03fcc 	andi	r3,r2,255
   14a70:	008000b4 	movhi	r2,2
   14a74:	10806904 	addi	r2,r2,420
   14a78:	10c5883a 	add	r2,r2,r3
   14a7c:	10800003 	ldbu	r2,0(r2)
   14a80:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   14a84:	e0bffa03 	ldbu	r2,-24(fp)
   14a88:	100490fa 	slli	r2,r2,3
   14a8c:	1007883a 	mov	r3,r2
   14a90:	e0bffa43 	ldbu	r2,-23(fp)
   14a94:	1885883a 	add	r2,r3,r2
   14a98:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   14a9c:	e0fffa83 	ldbu	r3,-22(fp)
   14aa0:	008000f4 	movhi	r2,3
   14aa4:	10b5aa04 	addi	r2,r2,-10584
   14aa8:	18c7883a 	add	r3,r3,r3
   14aac:	18c7883a 	add	r3,r3,r3
   14ab0:	10c5883a 	add	r2,r2,r3
   14ab4:	10800017 	ldw	r2,0(r2)
   14ab8:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   14abc:	e0bffb17 	ldw	r2,-20(fp)
   14ac0:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   14ac4:	e0bffb17 	ldw	r2,-20(fp)
   14ac8:	e0fffd17 	ldw	r3,-12(fp)
   14acc:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   14ad0:	e0bffb17 	ldw	r2,-20(fp)
   14ad4:	10800c03 	ldbu	r2,48(r2)
   14ad8:	1007883a 	mov	r3,r2
   14adc:	e0bffe03 	ldbu	r2,-8(fp)
   14ae0:	0084303a 	nor	r2,zero,r2
   14ae4:	1884703a 	and	r2,r3,r2
   14ae8:	1007883a 	mov	r3,r2
   14aec:	e0bffb17 	ldw	r2,-20(fp)
   14af0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   14af4:	e0bffb17 	ldw	r2,-20(fp)
   14af8:	e0ffff03 	ldbu	r3,-4(fp)
   14afc:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   14b00:	e0bffb17 	ldw	r2,-20(fp)
   14b04:	10800c03 	ldbu	r2,48(r2)
   14b08:	10803fcc 	andi	r2,r2,255
   14b0c:	1080020c 	andi	r2,r2,8
   14b10:	1000111e 	bne	r2,zero,14b58 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   14b14:	e0bffb17 	ldw	r2,-20(fp)
   14b18:	10c00d83 	ldbu	r3,54(r2)
   14b1c:	d0a85303 	ldbu	r2,-24244(gp)
   14b20:	1884b03a 	or	r2,r3,r2
   14b24:	d0a85305 	stb	r2,-24244(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   14b28:	e0fffa03 	ldbu	r3,-24(fp)
   14b2c:	e13ffa03 	ldbu	r4,-24(fp)
   14b30:	d0a85344 	addi	r2,gp,-24243
   14b34:	2085883a 	add	r2,r4,r2
   14b38:	11000003 	ldbu	r4,0(r2)
   14b3c:	e0bffb17 	ldw	r2,-20(fp)
   14b40:	10800d43 	ldbu	r2,53(r2)
   14b44:	2084b03a 	or	r2,r4,r2
   14b48:	1009883a 	mov	r4,r2
   14b4c:	d0a85344 	addi	r2,gp,-24243
   14b50:	1885883a 	add	r2,r3,r2
   14b54:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   14b58:	e17ffc17 	ldw	r5,-16(fp)
   14b5c:	e13ffb17 	ldw	r4,-20(fp)
   14b60:	0014e080 	call	14e08 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   14b64:	e0bffb17 	ldw	r2,-20(fp)
   14b68:	10800817 	ldw	r2,32(r2)
   14b6c:	10000826 	beq	r2,zero,14b90 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   14b70:	e0bffb17 	ldw	r2,-20(fp)
   14b74:	10800817 	ldw	r2,32(r2)
   14b78:	100b883a 	mov	r5,r2
   14b7c:	e13ffb17 	ldw	r4,-20(fp)
   14b80:	0014ec00 	call	14ec0 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   14b84:	e0bffb17 	ldw	r2,-20(fp)
   14b88:	e0fffc17 	ldw	r3,-16(fp)
   14b8c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   14b90:	e0bffa83 	ldbu	r2,-22(fp)
}
   14b94:	e037883a 	mov	sp,fp
   14b98:	dfc00117 	ldw	ra,4(sp)
   14b9c:	df000017 	ldw	fp,0(sp)
   14ba0:	dec00204 	addi	sp,sp,8
   14ba4:	f800283a 	ret

00014ba8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   14ba8:	defffd04 	addi	sp,sp,-12
   14bac:	df000215 	stw	fp,8(sp)
   14bb0:	df000204 	addi	fp,sp,8
   14bb4:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   14bb8:	d0a85617 	ldw	r2,-24232(gp)
   14bbc:	e0ffff17 	ldw	r3,-4(fp)
   14bc0:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   14bc4:	d0a85617 	ldw	r2,-24232(gp)
   14bc8:	10800d03 	ldbu	r2,52(r2)
   14bcc:	10803fcc 	andi	r2,r2,255
   14bd0:	d0e85617 	ldw	r3,-24232(gp)
   14bd4:	18c00d03 	ldbu	r3,52(r3)
   14bd8:	18c03fcc 	andi	r3,r3,255
   14bdc:	e13fff17 	ldw	r4,-4(fp)
   14be0:	20c7883a 	add	r3,r4,r3
   14be4:	18c002c4 	addi	r3,r3,11
   14be8:	19000003 	ldbu	r4,0(r3)
   14bec:	d0e85617 	ldw	r3,-24232(gp)
   14bf0:	18c00d43 	ldbu	r3,53(r3)
   14bf4:	20c6b03a 	or	r3,r4,r3
   14bf8:	1809883a 	mov	r4,r3
   14bfc:	e0ffff17 	ldw	r3,-4(fp)
   14c00:	1885883a 	add	r2,r3,r2
   14c04:	108002c4 	addi	r2,r2,11
   14c08:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   14c0c:	e0bfff17 	ldw	r2,-4(fp)
   14c10:	10c00283 	ldbu	r3,10(r2)
   14c14:	d0a85617 	ldw	r2,-24232(gp)
   14c18:	10800d83 	ldbu	r2,54(r2)
   14c1c:	1884b03a 	or	r2,r3,r2
   14c20:	1007883a 	mov	r3,r2
   14c24:	e0bfff17 	ldw	r2,-4(fp)
   14c28:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   14c2c:	d0a85617 	ldw	r2,-24232(gp)
   14c30:	10800d03 	ldbu	r2,52(r2)
   14c34:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   14c38:	e0fffe03 	ldbu	r3,-8(fp)
   14c3c:	e13ffe03 	ldbu	r4,-8(fp)
   14c40:	d0a85344 	addi	r2,gp,-24243
   14c44:	2085883a 	add	r2,r4,r2
   14c48:	10800003 	ldbu	r2,0(r2)
   14c4c:	1009883a 	mov	r4,r2
   14c50:	d0a85617 	ldw	r2,-24232(gp)
   14c54:	10800d43 	ldbu	r2,53(r2)
   14c58:	0084303a 	nor	r2,zero,r2
   14c5c:	2084703a 	and	r2,r4,r2
   14c60:	1009883a 	mov	r4,r2
   14c64:	d0a85344 	addi	r2,gp,-24243
   14c68:	1885883a 	add	r2,r3,r2
   14c6c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   14c70:	e0fffe03 	ldbu	r3,-8(fp)
   14c74:	d0a85344 	addi	r2,gp,-24243
   14c78:	1885883a 	add	r2,r3,r2
   14c7c:	10800003 	ldbu	r2,0(r2)
   14c80:	10803fcc 	andi	r2,r2,255
   14c84:	1000071e 	bne	r2,zero,14ca4 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   14c88:	d0a85617 	ldw	r2,-24232(gp)
   14c8c:	10800d83 	ldbu	r2,54(r2)
   14c90:	0084303a 	nor	r2,zero,r2
   14c94:	1007883a 	mov	r3,r2
   14c98:	d0a85303 	ldbu	r2,-24244(gp)
   14c9c:	1884703a 	and	r2,r3,r2
   14ca0:	d0a85305 	stb	r2,-24244(gp)
    }
}
   14ca4:	0001883a 	nop
   14ca8:	e037883a 	mov	sp,fp
   14cac:	df000017 	ldw	fp,0(sp)
   14cb0:	dec00104 	addi	sp,sp,4
   14cb4:	f800283a 	ret

00014cb8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   14cb8:	defffb04 	addi	sp,sp,-20
   14cbc:	df000415 	stw	fp,16(sp)
   14cc0:	df000404 	addi	fp,sp,16
   14cc4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   14cc8:	d0a85617 	ldw	r2,-24232(gp)
   14ccc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   14cd0:	d0a85617 	ldw	r2,-24232(gp)
   14cd4:	e0ffff17 	ldw	r3,-4(fp)
   14cd8:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   14cdc:	e0bfff17 	ldw	r2,-4(fp)
   14ce0:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   14ce4:	e0bffc17 	ldw	r2,-16(fp)
   14ce8:	10800017 	ldw	r2,0(r2)
   14cec:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   14cf0:	00002006 	br	14d74 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   14cf4:	d0a85617 	ldw	r2,-24232(gp)
   14cf8:	10800d03 	ldbu	r2,52(r2)
   14cfc:	10803fcc 	andi	r2,r2,255
   14d00:	d0e85617 	ldw	r3,-24232(gp)
   14d04:	18c00d03 	ldbu	r3,52(r3)
   14d08:	18c03fcc 	andi	r3,r3,255
   14d0c:	e13ffd17 	ldw	r4,-12(fp)
   14d10:	20c7883a 	add	r3,r4,r3
   14d14:	18c002c4 	addi	r3,r3,11
   14d18:	19000003 	ldbu	r4,0(r3)
   14d1c:	d0e85617 	ldw	r3,-24232(gp)
   14d20:	18c00d43 	ldbu	r3,53(r3)
   14d24:	20c6b03a 	or	r3,r4,r3
   14d28:	1809883a 	mov	r4,r3
   14d2c:	e0fffd17 	ldw	r3,-12(fp)
   14d30:	1885883a 	add	r2,r3,r2
   14d34:	108002c4 	addi	r2,r2,11
   14d38:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   14d3c:	e0bffd17 	ldw	r2,-12(fp)
   14d40:	10c00283 	ldbu	r3,10(r2)
   14d44:	d0a85617 	ldw	r2,-24232(gp)
   14d48:	10800d83 	ldbu	r2,54(r2)
   14d4c:	1884b03a 	or	r2,r3,r2
   14d50:	1007883a 	mov	r3,r2
   14d54:	e0bffd17 	ldw	r2,-12(fp)
   14d58:	10c00285 	stb	r3,10(r2)
        pevents++;
   14d5c:	e0bffc17 	ldw	r2,-16(fp)
   14d60:	10800104 	addi	r2,r2,4
   14d64:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   14d68:	e0bffc17 	ldw	r2,-16(fp)
   14d6c:	10800017 	ldw	r2,0(r2)
   14d70:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   14d74:	e0bffd17 	ldw	r2,-12(fp)
   14d78:	103fde1e 	bne	r2,zero,14cf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014cf4>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   14d7c:	d0a85617 	ldw	r2,-24232(gp)
   14d80:	10800d03 	ldbu	r2,52(r2)
   14d84:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   14d88:	e0fffe03 	ldbu	r3,-8(fp)
   14d8c:	e13ffe03 	ldbu	r4,-8(fp)
   14d90:	d0a85344 	addi	r2,gp,-24243
   14d94:	2085883a 	add	r2,r4,r2
   14d98:	10800003 	ldbu	r2,0(r2)
   14d9c:	1009883a 	mov	r4,r2
   14da0:	d0a85617 	ldw	r2,-24232(gp)
   14da4:	10800d43 	ldbu	r2,53(r2)
   14da8:	0084303a 	nor	r2,zero,r2
   14dac:	2084703a 	and	r2,r4,r2
   14db0:	1009883a 	mov	r4,r2
   14db4:	d0a85344 	addi	r2,gp,-24243
   14db8:	1885883a 	add	r2,r3,r2
   14dbc:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   14dc0:	e0fffe03 	ldbu	r3,-8(fp)
   14dc4:	d0a85344 	addi	r2,gp,-24243
   14dc8:	1885883a 	add	r2,r3,r2
   14dcc:	10800003 	ldbu	r2,0(r2)
   14dd0:	10803fcc 	andi	r2,r2,255
   14dd4:	1000071e 	bne	r2,zero,14df4 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   14dd8:	d0a85617 	ldw	r2,-24232(gp)
   14ddc:	10800d83 	ldbu	r2,54(r2)
   14de0:	0084303a 	nor	r2,zero,r2
   14de4:	1007883a 	mov	r3,r2
   14de8:	d0a85303 	ldbu	r2,-24244(gp)
   14dec:	1884703a 	and	r2,r3,r2
   14df0:	d0a85305 	stb	r2,-24244(gp)
    }
}
   14df4:	0001883a 	nop
   14df8:	e037883a 	mov	sp,fp
   14dfc:	df000017 	ldw	fp,0(sp)
   14e00:	dec00104 	addi	sp,sp,4
   14e04:	f800283a 	ret

00014e08 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   14e08:	defffc04 	addi	sp,sp,-16
   14e0c:	df000315 	stw	fp,12(sp)
   14e10:	df000304 	addi	fp,sp,12
   14e14:	e13ffe15 	stw	r4,-8(fp)
   14e18:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   14e1c:	e0bffe17 	ldw	r2,-8(fp)
   14e20:	10800d03 	ldbu	r2,52(r2)
   14e24:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   14e28:	e0bffd03 	ldbu	r2,-12(fp)
   14e2c:	e0fffd03 	ldbu	r3,-12(fp)
   14e30:	e13fff17 	ldw	r4,-4(fp)
   14e34:	20c7883a 	add	r3,r4,r3
   14e38:	18c002c4 	addi	r3,r3,11
   14e3c:	18c00003 	ldbu	r3,0(r3)
   14e40:	1809883a 	mov	r4,r3
   14e44:	e0fffe17 	ldw	r3,-8(fp)
   14e48:	18c00d43 	ldbu	r3,53(r3)
   14e4c:	00c6303a 	nor	r3,zero,r3
   14e50:	20c6703a 	and	r3,r4,r3
   14e54:	1809883a 	mov	r4,r3
   14e58:	e0ffff17 	ldw	r3,-4(fp)
   14e5c:	1885883a 	add	r2,r3,r2
   14e60:	108002c4 	addi	r2,r2,11
   14e64:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
   14e68:	e0bffd03 	ldbu	r2,-12(fp)
   14e6c:	e0ffff17 	ldw	r3,-4(fp)
   14e70:	1885883a 	add	r2,r3,r2
   14e74:	108002c4 	addi	r2,r2,11
   14e78:	10800003 	ldbu	r2,0(r2)
   14e7c:	10803fcc 	andi	r2,r2,255
   14e80:	10000a1e 	bne	r2,zero,14eac <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   14e84:	e0bfff17 	ldw	r2,-4(fp)
   14e88:	10800283 	ldbu	r2,10(r2)
   14e8c:	1007883a 	mov	r3,r2
   14e90:	e0bffe17 	ldw	r2,-8(fp)
   14e94:	10800d83 	ldbu	r2,54(r2)
   14e98:	0084303a 	nor	r2,zero,r2
   14e9c:	1884703a 	and	r2,r3,r2
   14ea0:	1007883a 	mov	r3,r2
   14ea4:	e0bfff17 	ldw	r2,-4(fp)
   14ea8:	10c00285 	stb	r3,10(r2)
    }
}
   14eac:	0001883a 	nop
   14eb0:	e037883a 	mov	sp,fp
   14eb4:	df000017 	ldw	fp,0(sp)
   14eb8:	dec00104 	addi	sp,sp,4
   14ebc:	f800283a 	ret

00014ec0 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   14ec0:	defffa04 	addi	sp,sp,-24
   14ec4:	df000515 	stw	fp,20(sp)
   14ec8:	df000504 	addi	fp,sp,20
   14ecc:	e13ffe15 	stw	r4,-8(fp)
   14ed0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   14ed4:	e0bffe17 	ldw	r2,-8(fp)
   14ed8:	10800d03 	ldbu	r2,52(r2)
   14edc:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   14ee0:	e0bffe17 	ldw	r2,-8(fp)
   14ee4:	10800d83 	ldbu	r2,54(r2)
   14ee8:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   14eec:	e0bffe17 	ldw	r2,-8(fp)
   14ef0:	10800d43 	ldbu	r2,53(r2)
   14ef4:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   14ef8:	e0bfff17 	ldw	r2,-4(fp)
   14efc:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   14f00:	e0bffb17 	ldw	r2,-20(fp)
   14f04:	10800017 	ldw	r2,0(r2)
   14f08:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   14f0c:	00002506 	br	14fa4 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   14f10:	e0bffd03 	ldbu	r2,-12(fp)
   14f14:	e0fffd03 	ldbu	r3,-12(fp)
   14f18:	e13ffc17 	ldw	r4,-16(fp)
   14f1c:	20c7883a 	add	r3,r4,r3
   14f20:	18c002c4 	addi	r3,r3,11
   14f24:	18c00003 	ldbu	r3,0(r3)
   14f28:	1809883a 	mov	r4,r3
   14f2c:	e0fffd83 	ldbu	r3,-10(fp)
   14f30:	00c6303a 	nor	r3,zero,r3
   14f34:	20c6703a 	and	r3,r4,r3
   14f38:	1809883a 	mov	r4,r3
   14f3c:	e0fffc17 	ldw	r3,-16(fp)
   14f40:	1885883a 	add	r2,r3,r2
   14f44:	108002c4 	addi	r2,r2,11
   14f48:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
   14f4c:	e0bffd03 	ldbu	r2,-12(fp)
   14f50:	e0fffc17 	ldw	r3,-16(fp)
   14f54:	1885883a 	add	r2,r3,r2
   14f58:	108002c4 	addi	r2,r2,11
   14f5c:	10800003 	ldbu	r2,0(r2)
   14f60:	10803fcc 	andi	r2,r2,255
   14f64:	1000091e 	bne	r2,zero,14f8c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   14f68:	e0bffc17 	ldw	r2,-16(fp)
   14f6c:	10800283 	ldbu	r2,10(r2)
   14f70:	1007883a 	mov	r3,r2
   14f74:	e0bffd43 	ldbu	r2,-11(fp)
   14f78:	0084303a 	nor	r2,zero,r2
   14f7c:	1884703a 	and	r2,r3,r2
   14f80:	1007883a 	mov	r3,r2
   14f84:	e0bffc17 	ldw	r2,-16(fp)
   14f88:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   14f8c:	e0bffb17 	ldw	r2,-20(fp)
   14f90:	10800104 	addi	r2,r2,4
   14f94:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   14f98:	e0bffb17 	ldw	r2,-20(fp)
   14f9c:	10800017 	ldw	r2,0(r2)
   14fa0:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   14fa4:	e0bffc17 	ldw	r2,-16(fp)
   14fa8:	103fd91e 	bne	r2,zero,14f10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014f10>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   14fac:	0001883a 	nop
   14fb0:	e037883a 	mov	sp,fp
   14fb4:	df000017 	ldw	fp,0(sp)
   14fb8:	dec00104 	addi	sp,sp,4
   14fbc:	f800283a 	ret

00014fc0 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   14fc0:	defffc04 	addi	sp,sp,-16
   14fc4:	df000315 	stw	fp,12(sp)
   14fc8:	df000304 	addi	fp,sp,12
   14fcc:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   14fd0:	e0bfff17 	ldw	r2,-4(fp)
   14fd4:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   14fd8:	e0bfff17 	ldw	r2,-4(fp)
   14fdc:	108002c4 	addi	r2,r2,11
   14fe0:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   14fe4:	e03ffe05 	stb	zero,-8(fp)
   14fe8:	00000706 	br	15008 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   14fec:	e0bffd17 	ldw	r2,-12(fp)
   14ff0:	10c00044 	addi	r3,r2,1
   14ff4:	e0fffd15 	stw	r3,-12(fp)
   14ff8:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   14ffc:	e0bffe03 	ldbu	r2,-8(fp)
   15000:	10800044 	addi	r2,r2,1
   15004:	e0bffe05 	stb	r2,-8(fp)
   15008:	e0bffe03 	ldbu	r2,-8(fp)
   1500c:	108000f0 	cmpltui	r2,r2,3
   15010:	103ff61e 	bne	r2,zero,14fec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014fec>
        *ptbl++ = 0;
    }
}
   15014:	0001883a 	nop
   15018:	e037883a 	mov	sp,fp
   1501c:	df000017 	ldw	fp,0(sp)
   15020:	dec00104 	addi	sp,sp,4
   15024:	f800283a 	ret

00015028 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   15028:	defffb04 	addi	sp,sp,-20
   1502c:	dfc00415 	stw	ra,16(sp)
   15030:	df000315 	stw	fp,12(sp)
   15034:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   15038:	0142d004 	movi	r5,2880
   1503c:	010000f4 	movhi	r4,3
   15040:	21319604 	addi	r4,r4,-14760
   15044:	00153a00 	call	153a0 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   15048:	008000f4 	movhi	r2,3
   1504c:	10b19604 	addi	r2,r2,-14760
   15050:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   15054:	008000f4 	movhi	r2,3
   15058:	10b1a204 	addi	r2,r2,-14712
   1505c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   15060:	e03ffd0d 	sth	zero,-12(fp)
   15064:	00001306 	br	150b4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   15068:	e0bffe17 	ldw	r2,-8(fp)
   1506c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   15070:	e0bffe17 	ldw	r2,-8(fp)
   15074:	e0ffff17 	ldw	r3,-4(fp)
   15078:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   1507c:	e0bffe17 	ldw	r2,-8(fp)
   15080:	00c00fc4 	movi	r3,63
   15084:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   15088:	e0bffe17 	ldw	r2,-8(fp)
   1508c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   15090:	e0bffe17 	ldw	r2,-8(fp)
   15094:	10800c04 	addi	r2,r2,48
   15098:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   1509c:	e0bfff17 	ldw	r2,-4(fp)
   150a0:	10800c04 	addi	r2,r2,48
   150a4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   150a8:	e0bffd0b 	ldhu	r2,-12(fp)
   150ac:	10800044 	addi	r2,r2,1
   150b0:	e0bffd0d 	sth	r2,-12(fp)
   150b4:	e0bffd0b 	ldhu	r2,-12(fp)
   150b8:	10800ef0 	cmpltui	r2,r2,59
   150bc:	103fea1e 	bne	r2,zero,15068 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015068>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   150c0:	e0bffe17 	ldw	r2,-8(fp)
   150c4:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   150c8:	e0bffe17 	ldw	r2,-8(fp)
   150cc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   150d0:	e0bffe17 	ldw	r2,-8(fp)
   150d4:	00c00fc4 	movi	r3,63
   150d8:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   150dc:	e0bffe17 	ldw	r2,-8(fp)
   150e0:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   150e4:	008000f4 	movhi	r2,3
   150e8:	10b19604 	addi	r2,r2,-14760
   150ec:	d0a85415 	stw	r2,-24240(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   150f0:	0001883a 	nop
   150f4:	e037883a 	mov	sp,fp
   150f8:	dfc00117 	ldw	ra,4(sp)
   150fc:	df000017 	ldw	fp,0(sp)
   15100:	dec00204 	addi	sp,sp,8
   15104:	f800283a 	ret

00015108 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   15108:	deffff04 	addi	sp,sp,-4
   1510c:	df000015 	stw	fp,0(sp)
   15110:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   15114:	d0285715 	stw	zero,-24228(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   15118:	d0285505 	stb	zero,-24236(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   1511c:	d0284705 	stb	zero,-24292(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   15120:	d0284f45 	stb	zero,-24259(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   15124:	d0284745 	stb	zero,-24291(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   15128:	d0284c15 	stw	zero,-24272(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   1512c:	d0284815 	stw	zero,-24288(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   15130:	d0285a15 	stw	zero,-24216(gp)
    OSIdleCtrMax  = 0L;
   15134:	d0284d15 	stw	zero,-24268(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   15138:	d0285905 	stb	zero,-24220(gp)
#endif
}
   1513c:	0001883a 	nop
   15140:	e037883a 	mov	sp,fp
   15144:	df000017 	ldw	fp,0(sp)
   15148:	dec00104 	addi	sp,sp,4
   1514c:	f800283a 	ret

00015150 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   15150:	defffd04 	addi	sp,sp,-12
   15154:	df000215 	stw	fp,8(sp)
   15158:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   1515c:	d0285305 	stb	zero,-24244(gp)
    prdytbl       = &OSRdyTbl[0];
   15160:	d0a85344 	addi	r2,gp,-24243
   15164:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   15168:	e03ffe05 	stb	zero,-8(fp)
   1516c:	00000706 	br	1518c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   15170:	e0bfff17 	ldw	r2,-4(fp)
   15174:	10c00044 	addi	r3,r2,1
   15178:	e0ffff15 	stw	r3,-4(fp)
   1517c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   15180:	e0bffe03 	ldbu	r2,-8(fp)
   15184:	10800044 	addi	r2,r2,1
   15188:	e0bffe05 	stb	r2,-8(fp)
   1518c:	e0bffe03 	ldbu	r2,-8(fp)
   15190:	108000f0 	cmpltui	r2,r2,3
   15194:	103ff61e 	bne	r2,zero,15170 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015170>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   15198:	d0284945 	stb	zero,-24283(gp)
    OSPrioHighRdy = 0;
   1519c:	d0284905 	stb	zero,-24284(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   151a0:	d0285115 	stw	zero,-24252(gp)
    OSTCBCur      = (OS_TCB *)0;
   151a4:	d0285615 	stw	zero,-24232(gp)
}
   151a8:	0001883a 	nop
   151ac:	e037883a 	mov	sp,fp
   151b0:	df000017 	ldw	fp,0(sp)
   151b4:	dec00104 	addi	sp,sp,4
   151b8:	f800283a 	ret

000151bc <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   151bc:	defff804 	addi	sp,sp,-32
   151c0:	dfc00715 	stw	ra,28(sp)
   151c4:	df000615 	stw	fp,24(sp)
   151c8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   151cc:	008000c4 	movi	r2,3
   151d0:	d8800415 	stw	r2,16(sp)
   151d4:	d8000315 	stw	zero,12(sp)
   151d8:	00808004 	movi	r2,512
   151dc:	d8800215 	stw	r2,8(sp)
   151e0:	008000f4 	movhi	r2,3
   151e4:	10af9604 	addi	r2,r2,-16808
   151e8:	d8800115 	stw	r2,4(sp)
   151ec:	00bfffd4 	movui	r2,65535
   151f0:	d8800015 	stw	r2,0(sp)
   151f4:	01c00504 	movi	r7,20
   151f8:	018000f4 	movhi	r6,3
   151fc:	31b19504 	addi	r6,r6,-14764
   15200:	000b883a 	mov	r5,zero
   15204:	01000074 	movhi	r4,1
   15208:	21159a04 	addi	r4,r4,22120
   1520c:	0019d380 	call	19d38 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   15210:	e1bfff04 	addi	r6,fp,-4
   15214:	014000b4 	movhi	r5,2
   15218:	2940a904 	addi	r5,r5,676
   1521c:	01000504 	movi	r4,20
   15220:	001a5480 	call	1a548 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   15224:	0001883a 	nop
   15228:	e037883a 	mov	sp,fp
   1522c:	dfc00117 	ldw	ra,4(sp)
   15230:	df000017 	ldw	fp,0(sp)
   15234:	dec00204 	addi	sp,sp,8
   15238:	f800283a 	ret

0001523c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   1523c:	defff804 	addi	sp,sp,-32
   15240:	dfc00715 	stw	ra,28(sp)
   15244:	df000615 	stw	fp,24(sp)
   15248:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   1524c:	008000c4 	movi	r2,3
   15250:	d8800415 	stw	r2,16(sp)
   15254:	d8000315 	stw	zero,12(sp)
   15258:	00808004 	movi	r2,512
   1525c:	d8800215 	stw	r2,8(sp)
   15260:	008000f4 	movhi	r2,3
   15264:	10ad1e04 	addi	r2,r2,-19336
   15268:	d8800115 	stw	r2,4(sp)
   1526c:	00bfff94 	movui	r2,65534
   15270:	d8800015 	stw	r2,0(sp)
   15274:	01c004c4 	movi	r7,19
   15278:	018000f4 	movhi	r6,3
   1527c:	31af1d04 	addi	r6,r6,-17292
   15280:	000b883a 	mov	r5,zero
   15284:	01000074 	movhi	r4,1
   15288:	2115b104 	addi	r4,r4,22212
   1528c:	0019d380 	call	19d38 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   15290:	e1bfff04 	addi	r6,fp,-4
   15294:	014000b4 	movhi	r5,2
   15298:	2940ad04 	addi	r5,r5,692
   1529c:	010004c4 	movi	r4,19
   152a0:	001a5480 	call	1a548 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   152a4:	0001883a 	nop
   152a8:	e037883a 	mov	sp,fp
   152ac:	dfc00117 	ldw	ra,4(sp)
   152b0:	df000017 	ldw	fp,0(sp)
   152b4:	dec00204 	addi	sp,sp,8
   152b8:	f800283a 	ret

000152bc <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   152bc:	defffb04 	addi	sp,sp,-20
   152c0:	dfc00415 	stw	ra,16(sp)
   152c4:	df000315 	stw	fp,12(sp)
   152c8:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   152cc:	01414404 	movi	r5,1296
   152d0:	010000f4 	movhi	r4,3
   152d4:	21346604 	addi	r4,r4,-11880
   152d8:	00153a00 	call	153a0 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   152dc:	01401504 	movi	r5,84
   152e0:	010000f4 	movhi	r4,3
   152e4:	2135aa04 	addi	r4,r4,-10584
   152e8:	00153a00 	call	153a0 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   152ec:	008000f4 	movhi	r2,3
   152f0:	10b46604 	addi	r2,r2,-11880
   152f4:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   152f8:	008000f4 	movhi	r2,3
   152fc:	10b48104 	addi	r2,r2,-11772
   15300:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   15304:	e03ffd05 	stb	zero,-12(fp)
   15308:	00001106 	br	15350 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   1530c:	e0bffe17 	ldw	r2,-8(fp)
   15310:	e0ffff17 	ldw	r3,-4(fp)
   15314:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   15318:	e0bffe17 	ldw	r2,-8(fp)
   1531c:	00c00fc4 	movi	r3,63
   15320:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   15324:	e0bffe17 	ldw	r2,-8(fp)
   15328:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   1532c:	e0bffe17 	ldw	r2,-8(fp)
   15330:	10801b04 	addi	r2,r2,108
   15334:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   15338:	e0bfff17 	ldw	r2,-4(fp)
   1533c:	10801b04 	addi	r2,r2,108
   15340:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   15344:	e0bffd03 	ldbu	r2,-12(fp)
   15348:	10800044 	addi	r2,r2,1
   1534c:	e0bffd05 	stb	r2,-12(fp)
   15350:	e0bffd03 	ldbu	r2,-12(fp)
   15354:	108002f0 	cmpltui	r2,r2,11
   15358:	103fec1e 	bne	r2,zero,1530c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701530c>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   1535c:	e0bffe17 	ldw	r2,-8(fp)
   15360:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   15364:	e0bffe17 	ldw	r2,-8(fp)
   15368:	00c00fc4 	movi	r3,63
   1536c:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   15370:	e0bffe17 	ldw	r2,-8(fp)
   15374:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   15378:	d0284a15 	stw	zero,-24280(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   1537c:	008000f4 	movhi	r2,3
   15380:	10b46604 	addi	r2,r2,-11880
   15384:	d0a84e15 	stw	r2,-24264(gp)
}
   15388:	0001883a 	nop
   1538c:	e037883a 	mov	sp,fp
   15390:	dfc00117 	ldw	ra,4(sp)
   15394:	df000017 	ldw	fp,0(sp)
   15398:	dec00204 	addi	sp,sp,8
   1539c:	f800283a 	ret

000153a0 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   153a0:	defffd04 	addi	sp,sp,-12
   153a4:	df000215 	stw	fp,8(sp)
   153a8:	df000204 	addi	fp,sp,8
   153ac:	e13ffe15 	stw	r4,-8(fp)
   153b0:	2805883a 	mov	r2,r5
   153b4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   153b8:	00000706 	br	153d8 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   153bc:	e0bffe17 	ldw	r2,-8(fp)
   153c0:	10c00044 	addi	r3,r2,1
   153c4:	e0fffe15 	stw	r3,-8(fp)
   153c8:	10000005 	stb	zero,0(r2)
        size--;
   153cc:	e0bfff0b 	ldhu	r2,-4(fp)
   153d0:	10bfffc4 	addi	r2,r2,-1
   153d4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   153d8:	e0bfff0b 	ldhu	r2,-4(fp)
   153dc:	103ff71e 	bne	r2,zero,153bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70153bc>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   153e0:	0001883a 	nop
   153e4:	e037883a 	mov	sp,fp
   153e8:	df000017 	ldw	fp,0(sp)
   153ec:	dec00104 	addi	sp,sp,4
   153f0:	f800283a 	ret

000153f4 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   153f4:	defffc04 	addi	sp,sp,-16
   153f8:	df000315 	stw	fp,12(sp)
   153fc:	df000304 	addi	fp,sp,12
   15400:	e13ffd15 	stw	r4,-12(fp)
   15404:	e17ffe15 	stw	r5,-8(fp)
   15408:	3005883a 	mov	r2,r6
   1540c:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   15410:	00000b06 	br	15440 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   15414:	e0bffd17 	ldw	r2,-12(fp)
   15418:	10c00044 	addi	r3,r2,1
   1541c:	e0fffd15 	stw	r3,-12(fp)
   15420:	e0fffe17 	ldw	r3,-8(fp)
   15424:	19000044 	addi	r4,r3,1
   15428:	e13ffe15 	stw	r4,-8(fp)
   1542c:	18c00003 	ldbu	r3,0(r3)
   15430:	10c00005 	stb	r3,0(r2)
        size--;
   15434:	e0bfff0b 	ldhu	r2,-4(fp)
   15438:	10bfffc4 	addi	r2,r2,-1
   1543c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   15440:	e0bfff0b 	ldhu	r2,-4(fp)
   15444:	103ff31e 	bne	r2,zero,15414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015414>
        *pdest++ = *psrc++;
        size--;
    }
}
   15448:	0001883a 	nop
   1544c:	e037883a 	mov	sp,fp
   15450:	df000017 	ldw	fp,0(sp)
   15454:	dec00104 	addi	sp,sp,4
   15458:	f800283a 	ret

0001545c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   1545c:	defffb04 	addi	sp,sp,-20
   15460:	dfc00415 	stw	ra,16(sp)
   15464:	df000315 	stw	fp,12(sp)
   15468:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1546c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15470:	0005303a 	rdctl	r2,status
   15474:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15478:	e0ffff17 	ldw	r3,-4(fp)
   1547c:	00bfff84 	movi	r2,-2
   15480:	1884703a 	and	r2,r3,r2
   15484:	1001703a 	wrctl	status,r2
  
  return context;
   15488:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   1548c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   15490:	d0a85503 	ldbu	r2,-24236(gp)
   15494:	10803fcc 	andi	r2,r2,255
   15498:	10001a1e 	bne	r2,zero,15504 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   1549c:	d0a84703 	ldbu	r2,-24292(gp)
   154a0:	10803fcc 	andi	r2,r2,255
   154a4:	1000171e 	bne	r2,zero,15504 <OS_Sched+0xa8>
            OS_SchedNew();
   154a8:	001552c0 	call	1552c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   154ac:	d0e84903 	ldbu	r3,-24284(gp)
   154b0:	d0a84943 	ldbu	r2,-24283(gp)
   154b4:	18c03fcc 	andi	r3,r3,255
   154b8:	10803fcc 	andi	r2,r2,255
   154bc:	18801126 	beq	r3,r2,15504 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   154c0:	d0a84903 	ldbu	r2,-24284(gp)
   154c4:	10c03fcc 	andi	r3,r2,255
   154c8:	008000f4 	movhi	r2,3
   154cc:	10b5aa04 	addi	r2,r2,-10584
   154d0:	18c7883a 	add	r3,r3,r3
   154d4:	18c7883a 	add	r3,r3,r3
   154d8:	10c5883a 	add	r2,r2,r3
   154dc:	10800017 	ldw	r2,0(r2)
   154e0:	d0a85115 	stw	r2,-24252(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   154e4:	d0a85117 	ldw	r2,-24252(gp)
   154e8:	10c00e17 	ldw	r3,56(r2)
   154ec:	18c00044 	addi	r3,r3,1
   154f0:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   154f4:	d0a84c17 	ldw	r2,-24272(gp)
   154f8:	10800044 	addi	r2,r2,1
   154fc:	d0a84c15 	stw	r2,-24272(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   15500:	001e6dc0 	call	1e6dc <OSCtxSw>
   15504:	e0bffd17 	ldw	r2,-12(fp)
   15508:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1550c:	e0bffe17 	ldw	r2,-8(fp)
   15510:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   15514:	0001883a 	nop
   15518:	e037883a 	mov	sp,fp
   1551c:	dfc00117 	ldw	ra,4(sp)
   15520:	df000017 	ldw	fp,0(sp)
   15524:	dec00204 	addi	sp,sp,8
   15528:	f800283a 	ret

0001552c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   1552c:	defffe04 	addi	sp,sp,-8
   15530:	df000115 	stw	fp,4(sp)
   15534:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   15538:	d0a85303 	ldbu	r2,-24244(gp)
   1553c:	10c03fcc 	andi	r3,r2,255
   15540:	008000b4 	movhi	r2,2
   15544:	10806904 	addi	r2,r2,420
   15548:	10c5883a 	add	r2,r2,r3
   1554c:	10800003 	ldbu	r2,0(r2)
   15550:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   15554:	e0bfff03 	ldbu	r2,-4(fp)
   15558:	100490fa 	slli	r2,r2,3
   1555c:	1009883a 	mov	r4,r2
   15560:	e0ffff03 	ldbu	r3,-4(fp)
   15564:	d0a85344 	addi	r2,gp,-24243
   15568:	1885883a 	add	r2,r3,r2
   1556c:	10800003 	ldbu	r2,0(r2)
   15570:	10c03fcc 	andi	r3,r2,255
   15574:	008000b4 	movhi	r2,2
   15578:	10806904 	addi	r2,r2,420
   1557c:	10c5883a 	add	r2,r2,r3
   15580:	10800003 	ldbu	r2,0(r2)
   15584:	2085883a 	add	r2,r4,r2
   15588:	d0a84905 	stb	r2,-24284(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   1558c:	0001883a 	nop
   15590:	e037883a 	mov	sp,fp
   15594:	df000017 	ldw	fp,0(sp)
   15598:	dec00104 	addi	sp,sp,4
   1559c:	f800283a 	ret

000155a0 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   155a0:	defffc04 	addi	sp,sp,-16
   155a4:	df000315 	stw	fp,12(sp)
   155a8:	df000304 	addi	fp,sp,12
   155ac:	e13ffe15 	stw	r4,-8(fp)
   155b0:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   155b4:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   155b8:	00000b06 	br	155e8 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   155bc:	e0bffe17 	ldw	r2,-8(fp)
   155c0:	10c00044 	addi	r3,r2,1
   155c4:	e0fffe15 	stw	r3,-8(fp)
   155c8:	e0ffff17 	ldw	r3,-4(fp)
   155cc:	19000044 	addi	r4,r3,1
   155d0:	e13fff15 	stw	r4,-4(fp)
   155d4:	18c00003 	ldbu	r3,0(r3)
   155d8:	10c00005 	stb	r3,0(r2)
        len++;
   155dc:	e0bffd03 	ldbu	r2,-12(fp)
   155e0:	10800044 	addi	r2,r2,1
   155e4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   155e8:	e0bfff17 	ldw	r2,-4(fp)
   155ec:	10800003 	ldbu	r2,0(r2)
   155f0:	10803fcc 	andi	r2,r2,255
   155f4:	103ff11e 	bne	r2,zero,155bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70155bc>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   155f8:	e0bffe17 	ldw	r2,-8(fp)
   155fc:	10000005 	stb	zero,0(r2)
    return (len);
   15600:	e0bffd03 	ldbu	r2,-12(fp)
}
   15604:	e037883a 	mov	sp,fp
   15608:	df000017 	ldw	fp,0(sp)
   1560c:	dec00104 	addi	sp,sp,4
   15610:	f800283a 	ret

00015614 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   15614:	defffd04 	addi	sp,sp,-12
   15618:	df000215 	stw	fp,8(sp)
   1561c:	df000204 	addi	fp,sp,8
   15620:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   15624:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   15628:	00000606 	br	15644 <OS_StrLen+0x30>
        psrc++;
   1562c:	e0bfff17 	ldw	r2,-4(fp)
   15630:	10800044 	addi	r2,r2,1
   15634:	e0bfff15 	stw	r2,-4(fp)
        len++;
   15638:	e0bffe03 	ldbu	r2,-8(fp)
   1563c:	10800044 	addi	r2,r2,1
   15640:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   15644:	e0bfff17 	ldw	r2,-4(fp)
   15648:	10800003 	ldbu	r2,0(r2)
   1564c:	10803fcc 	andi	r2,r2,255
   15650:	103ff61e 	bne	r2,zero,1562c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701562c>
        psrc++;
        len++;
    }
    return (len);
   15654:	e0bffe03 	ldbu	r2,-8(fp)
}
   15658:	e037883a 	mov	sp,fp
   1565c:	df000017 	ldw	fp,0(sp)
   15660:	dec00104 	addi	sp,sp,4
   15664:	f800283a 	ret

00015668 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   15668:	defffa04 	addi	sp,sp,-24
   1566c:	dfc00515 	stw	ra,20(sp)
   15670:	df000415 	stw	fp,16(sp)
   15674:	df000404 	addi	fp,sp,16
   15678:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1567c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15680:	0005303a 	rdctl	r2,status
   15684:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15688:	e0fffd17 	ldw	r3,-12(fp)
   1568c:	00bfff84 	movi	r2,-2
   15690:	1884703a 	and	r2,r3,r2
   15694:	1001703a 	wrctl	status,r2
  
  return context;
   15698:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   1569c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   156a0:	d0a84817 	ldw	r2,-24288(gp)
   156a4:	10800044 	addi	r2,r2,1
   156a8:	d0a84815 	stw	r2,-24288(gp)
   156ac:	e0bffc17 	ldw	r2,-16(fp)
   156b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   156b4:	e0bffe17 	ldw	r2,-8(fp)
   156b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   156bc:	001e9f00 	call	1e9f0 <OSTaskIdleHook>
    }
   156c0:	003fef06 	br	15680 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015680>

000156c4 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   156c4:	defff804 	addi	sp,sp,-32
   156c8:	dfc00715 	stw	ra,28(sp)
   156cc:	df000615 	stw	fp,24(sp)
   156d0:	dc400515 	stw	r17,20(sp)
   156d4:	dc000415 	stw	r16,16(sp)
   156d8:	df000604 	addi	fp,sp,24
   156dc:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   156e0:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   156e4:	00000206 	br	156f0 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   156e8:	01000044 	movi	r4,1
   156ec:	001ae080 	call	1ae08 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   156f0:	d0a85903 	ldbu	r2,-24220(gp)
   156f4:	10803fcc 	andi	r2,r2,255
   156f8:	103ffb26 	beq	r2,zero,156e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70156e8>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   156fc:	d0e84d17 	ldw	r3,-24268(gp)
   15700:	00947b34 	movhi	r2,20972
   15704:	10a147c4 	addi	r2,r2,-31457
   15708:	1888383a 	mulxuu	r4,r3,r2
   1570c:	1885383a 	mul	r2,r3,r2
   15710:	1021883a 	mov	r16,r2
   15714:	2023883a 	mov	r17,r4
   15718:	8804d17a 	srli	r2,r17,5
   1571c:	d0a84d15 	stw	r2,-24268(gp)
    if (OSIdleCtrMax == 0L) {
   15720:	d0a84d17 	ldw	r2,-24268(gp)
   15724:	1000031e 	bne	r2,zero,15734 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   15728:	d0284f05 	stb	zero,-24260(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   1572c:	01003fc4 	movi	r4,255
   15730:	001aa900 	call	1aa90 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15734:	0005303a 	rdctl	r2,status
   15738:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1573c:	e0fffb17 	ldw	r3,-20(fp)
   15740:	00bfff84 	movi	r2,-2
   15744:	1884703a 	and	r2,r3,r2
   15748:	1001703a 	wrctl	status,r2
  
  return context;
   1574c:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   15750:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   15754:	d0a84817 	ldw	r2,-24288(gp)
   15758:	d0a85a15 	stw	r2,-24216(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   1575c:	d0284815 	stw	zero,-24288(gp)
   15760:	e0bffa17 	ldw	r2,-24(fp)
   15764:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15768:	e0bffc17 	ldw	r2,-16(fp)
   1576c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   15770:	d0e85a17 	ldw	r3,-24216(gp)
   15774:	d0a84d17 	ldw	r2,-24268(gp)
   15778:	1885203a 	divu	r2,r3,r2
   1577c:	1007883a 	mov	r3,r2
   15780:	00801904 	movi	r2,100
   15784:	10c5c83a 	sub	r2,r2,r3
   15788:	d0a84f05 	stb	r2,-24260(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   1578c:	001e9700 	call	1e970 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   15790:	00157a00 	call	157a0 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   15794:	0009883a 	mov	r4,zero
   15798:	001ae080 	call	1ae08 <OSTimeDly>
    }
   1579c:	003fe506 	br	15734 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015734>

000157a0 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   157a0:	defffa04 	addi	sp,sp,-24
   157a4:	dfc00515 	stw	ra,20(sp)
   157a8:	df000415 	stw	fp,16(sp)
   157ac:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   157b0:	e03ffc05 	stb	zero,-16(fp)
   157b4:	00002406 	br	15848 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   157b8:	e0bffc03 	ldbu	r2,-16(fp)
   157bc:	e0fffe04 	addi	r3,fp,-8
   157c0:	180b883a 	mov	r5,r3
   157c4:	1009883a 	mov	r4,r2
   157c8:	001a8d00 	call	1a8d0 <OSTaskStkChk>
   157cc:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   157d0:	e0bffc43 	ldbu	r2,-15(fp)
   157d4:	1000191e 	bne	r2,zero,1583c <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   157d8:	e0fffc03 	ldbu	r3,-16(fp)
   157dc:	008000f4 	movhi	r2,3
   157e0:	10b5aa04 	addi	r2,r2,-10584
   157e4:	18c7883a 	add	r3,r3,r3
   157e8:	18c7883a 	add	r3,r3,r3
   157ec:	10c5883a 	add	r2,r2,r3
   157f0:	10800017 	ldw	r2,0(r2)
   157f4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   157f8:	e0bffd17 	ldw	r2,-12(fp)
   157fc:	10000f26 	beq	r2,zero,1583c <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   15800:	e0bffd17 	ldw	r2,-12(fp)
   15804:	10800060 	cmpeqi	r2,r2,1
   15808:	10000c1e 	bne	r2,zero,1583c <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   1580c:	e0bffd17 	ldw	r2,-12(fp)
   15810:	10c00217 	ldw	r3,8(r2)
   15814:	e0bffd17 	ldw	r2,-12(fp)
   15818:	10800317 	ldw	r2,12(r2)
   1581c:	1085883a 	add	r2,r2,r2
   15820:	1085883a 	add	r2,r2,r2
   15824:	1887883a 	add	r3,r3,r2
   15828:	e0bffd17 	ldw	r2,-12(fp)
   1582c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   15830:	e0ffff17 	ldw	r3,-4(fp)
   15834:	e0bffd17 	ldw	r2,-12(fp)
   15838:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   1583c:	e0bffc03 	ldbu	r2,-16(fp)
   15840:	10800044 	addi	r2,r2,1
   15844:	e0bffc05 	stb	r2,-16(fp)
   15848:	e0bffc03 	ldbu	r2,-16(fp)
   1584c:	10800570 	cmpltui	r2,r2,21
   15850:	103fd91e 	bne	r2,zero,157b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70157b8>
#endif
                }
            }
        }
    }
}
   15854:	0001883a 	nop
   15858:	e037883a 	mov	sp,fp
   1585c:	dfc00117 	ldw	ra,4(sp)
   15860:	df000017 	ldw	fp,0(sp)
   15864:	dec00204 	addi	sp,sp,8
   15868:	f800283a 	ret

0001586c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   1586c:	defff204 	addi	sp,sp,-56
   15870:	dfc00d15 	stw	ra,52(sp)
   15874:	df000c15 	stw	fp,48(sp)
   15878:	df000c04 	addi	fp,sp,48
   1587c:	e17ffc15 	stw	r5,-16(fp)
   15880:	e1bffd15 	stw	r6,-12(fp)
   15884:	3807883a 	mov	r3,r7
   15888:	e0800417 	ldw	r2,16(fp)
   1588c:	e13ffb05 	stb	r4,-20(fp)
   15890:	e0fffe0d 	sth	r3,-8(fp)
   15894:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   15898:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1589c:	0005303a 	rdctl	r2,status
   158a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   158a4:	e0fffa17 	ldw	r3,-24(fp)
   158a8:	00bfff84 	movi	r2,-2
   158ac:	1884703a 	and	r2,r3,r2
   158b0:	1001703a 	wrctl	status,r2
  
  return context;
   158b4:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   158b8:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   158bc:	d0a84e17 	ldw	r2,-24264(gp)
   158c0:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   158c4:	e0bff617 	ldw	r2,-40(fp)
   158c8:	10009326 	beq	r2,zero,15b18 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   158cc:	e0bff617 	ldw	r2,-40(fp)
   158d0:	10800517 	ldw	r2,20(r2)
   158d4:	d0a84e15 	stw	r2,-24264(gp)
   158d8:	e0bff417 	ldw	r2,-48(fp)
   158dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   158e0:	e0bff817 	ldw	r2,-32(fp)
   158e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   158e8:	e0bff617 	ldw	r2,-40(fp)
   158ec:	e0fffc17 	ldw	r3,-16(fp)
   158f0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   158f4:	e0bff617 	ldw	r2,-40(fp)
   158f8:	e0fffb03 	ldbu	r3,-20(fp)
   158fc:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   15900:	e0bff617 	ldw	r2,-40(fp)
   15904:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   15908:	e0bff617 	ldw	r2,-40(fp)
   1590c:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   15910:	e0bff617 	ldw	r2,-40(fp)
   15914:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   15918:	e0bff617 	ldw	r2,-40(fp)
   1591c:	e0c00317 	ldw	r3,12(fp)
   15920:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   15924:	e0bff617 	ldw	r2,-40(fp)
   15928:	e0c00217 	ldw	r3,8(fp)
   1592c:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   15930:	e0bff617 	ldw	r2,-40(fp)
   15934:	e0fffd17 	ldw	r3,-12(fp)
   15938:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   1593c:	e0bff617 	ldw	r2,-40(fp)
   15940:	e0ffff0b 	ldhu	r3,-4(fp)
   15944:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   15948:	e0bff617 	ldw	r2,-40(fp)
   1594c:	e0fffe0b 	ldhu	r3,-8(fp)
   15950:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   15954:	e0bff617 	ldw	r2,-40(fp)
   15958:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   1595c:	e0bffb03 	ldbu	r2,-20(fp)
   15960:	1004d0fa 	srli	r2,r2,3
   15964:	1007883a 	mov	r3,r2
   15968:	e0bff617 	ldw	r2,-40(fp)
   1596c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   15970:	e0bffb03 	ldbu	r2,-20(fp)
   15974:	108001cc 	andi	r2,r2,7
   15978:	1007883a 	mov	r3,r2
   1597c:	e0bff617 	ldw	r2,-40(fp)
   15980:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   15984:	e0bff617 	ldw	r2,-40(fp)
   15988:	10800d03 	ldbu	r2,52(r2)
   1598c:	10803fcc 	andi	r2,r2,255
   15990:	00c00044 	movi	r3,1
   15994:	1884983a 	sll	r2,r3,r2
   15998:	1007883a 	mov	r3,r2
   1599c:	e0bff617 	ldw	r2,-40(fp)
   159a0:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   159a4:	e0bff617 	ldw	r2,-40(fp)
   159a8:	10800cc3 	ldbu	r2,51(r2)
   159ac:	10803fcc 	andi	r2,r2,255
   159b0:	00c00044 	movi	r3,1
   159b4:	1884983a 	sll	r2,r3,r2
   159b8:	1007883a 	mov	r3,r2
   159bc:	e0bff617 	ldw	r2,-40(fp)
   159c0:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   159c4:	e0bff617 	ldw	r2,-40(fp)
   159c8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   159cc:	e0bff617 	ldw	r2,-40(fp)
   159d0:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   159d4:	e0bff617 	ldw	r2,-40(fp)
   159d8:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   159dc:	e0bff617 	ldw	r2,-40(fp)
   159e0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   159e4:	e0bff617 	ldw	r2,-40(fp)
   159e8:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   159ec:	e0bff617 	ldw	r2,-40(fp)
   159f0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   159f4:	e0bff617 	ldw	r2,-40(fp)
   159f8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   159fc:	e0bff617 	ldw	r2,-40(fp)
   15a00:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   15a04:	e0bff617 	ldw	r2,-40(fp)
   15a08:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   15a0c:	e0bff617 	ldw	r2,-40(fp)
   15a10:	00c00fc4 	movi	r3,63
   15a14:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   15a18:	e0bff617 	ldw	r2,-40(fp)
   15a1c:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   15a20:	e13ff617 	ldw	r4,-40(fp)
   15a24:	001ea100 	call	1ea10 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   15a28:	e13ff617 	ldw	r4,-40(fp)
   15a2c:	001e9080 	call	1e908 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15a30:	0005303a 	rdctl	r2,status
   15a34:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15a38:	e0fff517 	ldw	r3,-44(fp)
   15a3c:	00bfff84 	movi	r2,-2
   15a40:	1884703a 	and	r2,r3,r2
   15a44:	1001703a 	wrctl	status,r2
  
  return context;
   15a48:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   15a4c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   15a50:	e0fffb03 	ldbu	r3,-20(fp)
   15a54:	008000f4 	movhi	r2,3
   15a58:	10b5aa04 	addi	r2,r2,-10584
   15a5c:	18c7883a 	add	r3,r3,r3
   15a60:	18c7883a 	add	r3,r3,r3
   15a64:	10c5883a 	add	r2,r2,r3
   15a68:	e0fff617 	ldw	r3,-40(fp)
   15a6c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   15a70:	d0e84a17 	ldw	r3,-24280(gp)
   15a74:	e0bff617 	ldw	r2,-40(fp)
   15a78:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   15a7c:	e0bff617 	ldw	r2,-40(fp)
   15a80:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   15a84:	d0a84a17 	ldw	r2,-24280(gp)
   15a88:	10000326 	beq	r2,zero,15a98 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   15a8c:	d0a84a17 	ldw	r2,-24280(gp)
   15a90:	e0fff617 	ldw	r3,-40(fp)
   15a94:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   15a98:	e0bff617 	ldw	r2,-40(fp)
   15a9c:	d0a84a15 	stw	r2,-24280(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   15aa0:	e0bff617 	ldw	r2,-40(fp)
   15aa4:	10c00d83 	ldbu	r3,54(r2)
   15aa8:	d0a85303 	ldbu	r2,-24244(gp)
   15aac:	1884b03a 	or	r2,r3,r2
   15ab0:	d0a85305 	stb	r2,-24244(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   15ab4:	e0bff617 	ldw	r2,-40(fp)
   15ab8:	10800d03 	ldbu	r2,52(r2)
   15abc:	10c03fcc 	andi	r3,r2,255
   15ac0:	e0bff617 	ldw	r2,-40(fp)
   15ac4:	10800d03 	ldbu	r2,52(r2)
   15ac8:	11003fcc 	andi	r4,r2,255
   15acc:	d0a85344 	addi	r2,gp,-24243
   15ad0:	2085883a 	add	r2,r4,r2
   15ad4:	11000003 	ldbu	r4,0(r2)
   15ad8:	e0bff617 	ldw	r2,-40(fp)
   15adc:	10800d43 	ldbu	r2,53(r2)
   15ae0:	2084b03a 	or	r2,r4,r2
   15ae4:	1009883a 	mov	r4,r2
   15ae8:	d0a85344 	addi	r2,gp,-24243
   15aec:	1885883a 	add	r2,r3,r2
   15af0:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   15af4:	d0a84f43 	ldbu	r2,-24259(gp)
   15af8:	10800044 	addi	r2,r2,1
   15afc:	d0a84f45 	stb	r2,-24259(gp)
   15b00:	e0bff417 	ldw	r2,-48(fp)
   15b04:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15b08:	e0bff717 	ldw	r2,-36(fp)
   15b0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   15b10:	0005883a 	mov	r2,zero
   15b14:	00000506 	br	15b2c <OS_TCBInit+0x2c0>
   15b18:	e0bff417 	ldw	r2,-48(fp)
   15b1c:	e0bff915 	stw	r2,-28(fp)
   15b20:	e0bff917 	ldw	r2,-28(fp)
   15b24:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   15b28:	00801084 	movi	r2,66
}
   15b2c:	e037883a 	mov	sp,fp
   15b30:	dfc00117 	ldw	ra,4(sp)
   15b34:	df000017 	ldw	fp,0(sp)
   15b38:	dec00204 	addi	sp,sp,8
   15b3c:	f800283a 	ret

00015b40 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   15b40:	defffe04 	addi	sp,sp,-8
   15b44:	df000115 	stw	fp,4(sp)
   15b48:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   15b4c:	d0a02504 	addi	r2,gp,-32620
   15b50:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   15b54:	d0a02604 	addi	r2,gp,-32616
   15b58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   15b5c:	d0a02784 	addi	r2,gp,-32610
   15b60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   15b64:	d0a02804 	addi	r2,gp,-32608
   15b68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   15b6c:	d0a02704 	addi	r2,gp,-32612
   15b70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   15b74:	d0a02884 	addi	r2,gp,-32606
   15b78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   15b7c:	d0a02904 	addi	r2,gp,-32604
   15b80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   15b84:	d0a02984 	addi	r2,gp,-32602
   15b88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   15b8c:	d0a02a04 	addi	r2,gp,-32600
   15b90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   15b94:	d0a02a84 	addi	r2,gp,-32598
   15b98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   15b9c:	d0a02b04 	addi	r2,gp,-32596
   15ba0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   15ba4:	d0a02b84 	addi	r2,gp,-32594
   15ba8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   15bac:	d0a02c04 	addi	r2,gp,-32592
   15bb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   15bb4:	d0a02c84 	addi	r2,gp,-32590
   15bb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   15bbc:	d0a02d04 	addi	r2,gp,-32588
   15bc0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   15bc4:	d0a02d84 	addi	r2,gp,-32586
   15bc8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   15bcc:	d0a02e04 	addi	r2,gp,-32584
   15bd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   15bd4:	d0a02e84 	addi	r2,gp,-32582
   15bd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   15bdc:	d0a02f04 	addi	r2,gp,-32580
   15be0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   15be4:	d0a02f84 	addi	r2,gp,-32578
   15be8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   15bec:	d0a03004 	addi	r2,gp,-32576
   15bf0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   15bf4:	d0a03084 	addi	r2,gp,-32574
   15bf8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   15bfc:	d0a03104 	addi	r2,gp,-32572
   15c00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   15c04:	d0a03184 	addi	r2,gp,-32570
   15c08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   15c0c:	d0a03204 	addi	r2,gp,-32568
   15c10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   15c14:	d0a03284 	addi	r2,gp,-32566
   15c18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   15c1c:	d0a03304 	addi	r2,gp,-32564
   15c20:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   15c24:	d0a03384 	addi	r2,gp,-32562
   15c28:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   15c2c:	d0a03404 	addi	r2,gp,-32560
   15c30:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   15c34:	d0a03484 	addi	r2,gp,-32558
   15c38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   15c3c:	d0a03504 	addi	r2,gp,-32556
   15c40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   15c44:	d0a03584 	addi	r2,gp,-32554
   15c48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   15c4c:	d0a03604 	addi	r2,gp,-32552
   15c50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   15c54:	d0a03684 	addi	r2,gp,-32550
   15c58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   15c5c:	d0a03704 	addi	r2,gp,-32548
   15c60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   15c64:	d0a03784 	addi	r2,gp,-32546
   15c68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   15c6c:	d0a03804 	addi	r2,gp,-32544
   15c70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   15c74:	d0a03884 	addi	r2,gp,-32542
   15c78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   15c7c:	d0a03904 	addi	r2,gp,-32540
   15c80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   15c84:	d0a03984 	addi	r2,gp,-32538
   15c88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   15c8c:	d0a03a04 	addi	r2,gp,-32536
   15c90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   15c94:	d0a03a84 	addi	r2,gp,-32534
   15c98:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   15c9c:	d0a03b04 	addi	r2,gp,-32532
   15ca0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   15ca4:	d0a03b84 	addi	r2,gp,-32530
   15ca8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   15cac:	d0a03c04 	addi	r2,gp,-32528
   15cb0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   15cb4:	d0a04104 	addi	r2,gp,-32508
   15cb8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   15cbc:	0001883a 	nop
   15cc0:	e037883a 	mov	sp,fp
   15cc4:	df000017 	ldw	fp,0(sp)
   15cc8:	dec00104 	addi	sp,sp,4
   15ccc:	f800283a 	ret

00015cd0 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   15cd0:	defff204 	addi	sp,sp,-56
   15cd4:	df000d15 	stw	fp,52(sp)
   15cd8:	df000d04 	addi	fp,sp,52
   15cdc:	e13ffc15 	stw	r4,-16(fp)
   15ce0:	2807883a 	mov	r3,r5
   15ce4:	3005883a 	mov	r2,r6
   15ce8:	e1ffff15 	stw	r7,-4(fp)
   15cec:	e0fffd0d 	sth	r3,-12(fp)
   15cf0:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   15cf4:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   15cf8:	e0bfff17 	ldw	r2,-4(fp)
   15cfc:	1000021e 	bne	r2,zero,15d08 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   15d00:	0005883a 	mov	r2,zero
   15d04:	0000b006 	br	15fc8 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   15d08:	e0bffc17 	ldw	r2,-16(fp)
   15d0c:	1000051e 	bne	r2,zero,15d24 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   15d10:	e0bfff17 	ldw	r2,-4(fp)
   15d14:	00c01b84 	movi	r3,110
   15d18:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15d1c:	0005883a 	mov	r2,zero
   15d20:	0000a906 	br	15fc8 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   15d24:	e0bffc17 	ldw	r2,-16(fp)
   15d28:	10800003 	ldbu	r2,0(r2)
   15d2c:	10803fcc 	andi	r2,r2,255
   15d30:	10800160 	cmpeqi	r2,r2,5
   15d34:	1000051e 	bne	r2,zero,15d4c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   15d38:	e0bfff17 	ldw	r2,-4(fp)
   15d3c:	00c00044 	movi	r3,1
   15d40:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   15d44:	0005883a 	mov	r2,zero
   15d48:	00009f06 	br	15fc8 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   15d4c:	e0fffe03 	ldbu	r3,-8(fp)
   15d50:	00bfe004 	movi	r2,-128
   15d54:	1884703a 	and	r2,r3,r2
   15d58:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   15d5c:	e0bff503 	ldbu	r2,-44(fp)
   15d60:	10000626 	beq	r2,zero,15d7c <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   15d64:	e0bffe03 	ldbu	r2,-8(fp)
   15d68:	10801fcc 	andi	r2,r2,127
   15d6c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   15d70:	00800044 	movi	r2,1
   15d74:	e0bff385 	stb	r2,-50(fp)
   15d78:	00000106 	br	15d80 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   15d7c:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   15d80:	e0bfff17 	ldw	r2,-4(fp)
   15d84:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15d88:	0005303a 	rdctl	r2,status
   15d8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15d90:	e0fffb17 	ldw	r3,-20(fp)
   15d94:	00bfff84 	movi	r2,-2
   15d98:	1884703a 	and	r2,r3,r2
   15d9c:	1001703a 	wrctl	status,r2
  
  return context;
   15da0:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   15da4:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   15da8:	e0bffe03 	ldbu	r2,-8(fp)
   15dac:	10c00060 	cmpeqi	r3,r2,1
   15db0:	18005f1e 	bne	r3,zero,15f30 <OSFlagAccept+0x260>
   15db4:	10c00088 	cmpgei	r3,r2,2
   15db8:	1800021e 	bne	r3,zero,15dc4 <OSFlagAccept+0xf4>
   15dbc:	10003f26 	beq	r2,zero,15ebc <OSFlagAccept+0x1ec>
   15dc0:	00007706 	br	15fa0 <OSFlagAccept+0x2d0>
   15dc4:	10c000a0 	cmpeqi	r3,r2,2
   15dc8:	1800031e 	bne	r3,zero,15dd8 <OSFlagAccept+0x108>
   15dcc:	108000e0 	cmpeqi	r2,r2,3
   15dd0:	10001e1e 	bne	r2,zero,15e4c <OSFlagAccept+0x17c>
   15dd4:	00007206 	br	15fa0 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   15dd8:	e0bffc17 	ldw	r2,-16(fp)
   15ddc:	10c0020b 	ldhu	r3,8(r2)
   15de0:	e0bffd0b 	ldhu	r2,-12(fp)
   15de4:	1884703a 	and	r2,r3,r2
   15de8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   15dec:	e0fff30b 	ldhu	r3,-52(fp)
   15df0:	e0bffd0b 	ldhu	r2,-12(fp)
   15df4:	18800d1e 	bne	r3,r2,15e2c <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15df8:	e0bff383 	ldbu	r2,-50(fp)
   15dfc:	10800058 	cmpnei	r2,r2,1
   15e00:	10000d1e 	bne	r2,zero,15e38 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   15e04:	e0bffc17 	ldw	r2,-16(fp)
   15e08:	1080020b 	ldhu	r2,8(r2)
   15e0c:	1007883a 	mov	r3,r2
   15e10:	e0bff30b 	ldhu	r2,-52(fp)
   15e14:	0084303a 	nor	r2,zero,r2
   15e18:	1884703a 	and	r2,r3,r2
   15e1c:	1007883a 	mov	r3,r2
   15e20:	e0bffc17 	ldw	r2,-16(fp)
   15e24:	10c0020d 	sth	r3,8(r2)
   15e28:	00000306 	br	15e38 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   15e2c:	e0bfff17 	ldw	r2,-4(fp)
   15e30:	00c01c04 	movi	r3,112
   15e34:	10c00005 	stb	r3,0(r2)
   15e38:	e0bff417 	ldw	r2,-48(fp)
   15e3c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   15e40:	e0bff617 	ldw	r2,-40(fp)
   15e44:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   15e48:	00005e06 	br	15fc4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   15e4c:	e0bffc17 	ldw	r2,-16(fp)
   15e50:	10c0020b 	ldhu	r3,8(r2)
   15e54:	e0bffd0b 	ldhu	r2,-12(fp)
   15e58:	1884703a 	and	r2,r3,r2
   15e5c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   15e60:	e0bff30b 	ldhu	r2,-52(fp)
   15e64:	10000d26 	beq	r2,zero,15e9c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15e68:	e0bff383 	ldbu	r2,-50(fp)
   15e6c:	10800058 	cmpnei	r2,r2,1
   15e70:	10000d1e 	bne	r2,zero,15ea8 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   15e74:	e0bffc17 	ldw	r2,-16(fp)
   15e78:	1080020b 	ldhu	r2,8(r2)
   15e7c:	1007883a 	mov	r3,r2
   15e80:	e0bff30b 	ldhu	r2,-52(fp)
   15e84:	0084303a 	nor	r2,zero,r2
   15e88:	1884703a 	and	r2,r3,r2
   15e8c:	1007883a 	mov	r3,r2
   15e90:	e0bffc17 	ldw	r2,-16(fp)
   15e94:	10c0020d 	sth	r3,8(r2)
   15e98:	00000306 	br	15ea8 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   15e9c:	e0bfff17 	ldw	r2,-4(fp)
   15ea0:	00c01c04 	movi	r3,112
   15ea4:	10c00005 	stb	r3,0(r2)
   15ea8:	e0bff417 	ldw	r2,-48(fp)
   15eac:	e0bff715 	stw	r2,-36(fp)
   15eb0:	e0bff717 	ldw	r2,-36(fp)
   15eb4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   15eb8:	00004206 	br	15fc4 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   15ebc:	e0bffc17 	ldw	r2,-16(fp)
   15ec0:	1080020b 	ldhu	r2,8(r2)
   15ec4:	0084303a 	nor	r2,zero,r2
   15ec8:	1007883a 	mov	r3,r2
   15ecc:	e0bffd0b 	ldhu	r2,-12(fp)
   15ed0:	1884703a 	and	r2,r3,r2
   15ed4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   15ed8:	e0fff30b 	ldhu	r3,-52(fp)
   15edc:	e0bffd0b 	ldhu	r2,-12(fp)
   15ee0:	18800b1e 	bne	r3,r2,15f10 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15ee4:	e0bff383 	ldbu	r2,-50(fp)
   15ee8:	10800058 	cmpnei	r2,r2,1
   15eec:	10000b1e 	bne	r2,zero,15f1c <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   15ef0:	e0bffc17 	ldw	r2,-16(fp)
   15ef4:	10c0020b 	ldhu	r3,8(r2)
   15ef8:	e0bff30b 	ldhu	r2,-52(fp)
   15efc:	1884b03a 	or	r2,r3,r2
   15f00:	1007883a 	mov	r3,r2
   15f04:	e0bffc17 	ldw	r2,-16(fp)
   15f08:	10c0020d 	sth	r3,8(r2)
   15f0c:	00000306 	br	15f1c <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   15f10:	e0bfff17 	ldw	r2,-4(fp)
   15f14:	00c01c04 	movi	r3,112
   15f18:	10c00005 	stb	r3,0(r2)
   15f1c:	e0bff417 	ldw	r2,-48(fp)
   15f20:	e0bff815 	stw	r2,-32(fp)
   15f24:	e0bff817 	ldw	r2,-32(fp)
   15f28:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   15f2c:	00002506 	br	15fc4 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   15f30:	e0bffc17 	ldw	r2,-16(fp)
   15f34:	1080020b 	ldhu	r2,8(r2)
   15f38:	0084303a 	nor	r2,zero,r2
   15f3c:	1007883a 	mov	r3,r2
   15f40:	e0bffd0b 	ldhu	r2,-12(fp)
   15f44:	1884703a 	and	r2,r3,r2
   15f48:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   15f4c:	e0bff30b 	ldhu	r2,-52(fp)
   15f50:	10000b26 	beq	r2,zero,15f80 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   15f54:	e0bff383 	ldbu	r2,-50(fp)
   15f58:	10800058 	cmpnei	r2,r2,1
   15f5c:	10000b1e 	bne	r2,zero,15f8c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   15f60:	e0bffc17 	ldw	r2,-16(fp)
   15f64:	10c0020b 	ldhu	r3,8(r2)
   15f68:	e0bff30b 	ldhu	r2,-52(fp)
   15f6c:	1884b03a 	or	r2,r3,r2
   15f70:	1007883a 	mov	r3,r2
   15f74:	e0bffc17 	ldw	r2,-16(fp)
   15f78:	10c0020d 	sth	r3,8(r2)
   15f7c:	00000306 	br	15f8c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   15f80:	e0bfff17 	ldw	r2,-4(fp)
   15f84:	00c01c04 	movi	r3,112
   15f88:	10c00005 	stb	r3,0(r2)
   15f8c:	e0bff417 	ldw	r2,-48(fp)
   15f90:	e0bff915 	stw	r2,-28(fp)
   15f94:	e0bff917 	ldw	r2,-28(fp)
   15f98:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   15f9c:	00000906 	br	15fc4 <OSFlagAccept+0x2f4>
   15fa0:	e0bff417 	ldw	r2,-48(fp)
   15fa4:	e0bffa15 	stw	r2,-24(fp)
   15fa8:	e0bffa17 	ldw	r2,-24(fp)
   15fac:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   15fb0:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   15fb4:	e0bfff17 	ldw	r2,-4(fp)
   15fb8:	00c01bc4 	movi	r3,111
   15fbc:	10c00005 	stb	r3,0(r2)
             break;
   15fc0:	0001883a 	nop
    }
    return (flags_rdy);
   15fc4:	e0bff30b 	ldhu	r2,-52(fp)
}
   15fc8:	e037883a 	mov	sp,fp
   15fcc:	df000017 	ldw	fp,0(sp)
   15fd0:	dec00104 	addi	sp,sp,4
   15fd4:	f800283a 	ret

00015fd8 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   15fd8:	defff804 	addi	sp,sp,-32
   15fdc:	df000715 	stw	fp,28(sp)
   15fe0:	df000704 	addi	fp,sp,28
   15fe4:	2005883a 	mov	r2,r4
   15fe8:	e17fff15 	stw	r5,-4(fp)
   15fec:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   15ff0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   15ff4:	e0bfff17 	ldw	r2,-4(fp)
   15ff8:	1000021e 	bne	r2,zero,16004 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   15ffc:	0005883a 	mov	r2,zero
   16000:	00003306 	br	160d0 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   16004:	d0a85503 	ldbu	r2,-24236(gp)
   16008:	10803fcc 	andi	r2,r2,255
   1600c:	10000526 	beq	r2,zero,16024 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   16010:	e0bfff17 	ldw	r2,-4(fp)
   16014:	00c00404 	movi	r3,16
   16018:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   1601c:	0005883a 	mov	r2,zero
   16020:	00002b06 	br	160d0 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16024:	0005303a 	rdctl	r2,status
   16028:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1602c:	e0fffd17 	ldw	r3,-12(fp)
   16030:	00bfff84 	movi	r2,-2
   16034:	1884703a 	and	r2,r3,r2
   16038:	1001703a 	wrctl	status,r2
  
  return context;
   1603c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   16040:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   16044:	d0a85817 	ldw	r2,-24224(gp)
   16048:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   1604c:	e0bffb17 	ldw	r2,-20(fp)
   16050:	10001726 	beq	r2,zero,160b0 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   16054:	d0a85817 	ldw	r2,-24224(gp)
   16058:	10800117 	ldw	r2,4(r2)
   1605c:	d0a85815 	stw	r2,-24224(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   16060:	e0bffb17 	ldw	r2,-20(fp)
   16064:	00c00144 	movi	r3,5
   16068:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   1606c:	e0bffb17 	ldw	r2,-20(fp)
   16070:	e0fffe0b 	ldhu	r3,-8(fp)
   16074:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   16078:	e0bffb17 	ldw	r2,-20(fp)
   1607c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   16080:	e0bffb17 	ldw	r2,-20(fp)
   16084:	00c00fc4 	movi	r3,63
   16088:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1608c:	e0bffb17 	ldw	r2,-20(fp)
   16090:	100002c5 	stb	zero,11(r2)
   16094:	e0bff917 	ldw	r2,-28(fp)
   16098:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1609c:	e0bffa17 	ldw	r2,-24(fp)
   160a0:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   160a4:	e0bfff17 	ldw	r2,-4(fp)
   160a8:	10000005 	stb	zero,0(r2)
   160ac:	00000706 	br	160cc <OSFlagCreate+0xf4>
   160b0:	e0bff917 	ldw	r2,-28(fp)
   160b4:	e0bffc15 	stw	r2,-16(fp)
   160b8:	e0bffc17 	ldw	r2,-16(fp)
   160bc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   160c0:	e0bfff17 	ldw	r2,-4(fp)
   160c4:	00c01c84 	movi	r3,114
   160c8:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   160cc:	e0bffb17 	ldw	r2,-20(fp)
}
   160d0:	e037883a 	mov	sp,fp
   160d4:	df000017 	ldw	fp,0(sp)
   160d8:	dec00104 	addi	sp,sp,4
   160dc:	f800283a 	ret

000160e0 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   160e0:	defff204 	addi	sp,sp,-56
   160e4:	dfc00d15 	stw	ra,52(sp)
   160e8:	df000c15 	stw	fp,48(sp)
   160ec:	df000c04 	addi	fp,sp,48
   160f0:	e13ffd15 	stw	r4,-12(fp)
   160f4:	2805883a 	mov	r2,r5
   160f8:	e1bfff15 	stw	r6,-4(fp)
   160fc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   16100:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   16104:	e0bfff17 	ldw	r2,-4(fp)
   16108:	1000021e 	bne	r2,zero,16114 <OSFlagDel+0x34>
        return (pgrp);
   1610c:	e0bffd17 	ldw	r2,-12(fp)
   16110:	00008006 	br	16314 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   16114:	e0bffd17 	ldw	r2,-12(fp)
   16118:	1000051e 	bne	r2,zero,16130 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1611c:	e0bfff17 	ldw	r2,-4(fp)
   16120:	00c01b84 	movi	r3,110
   16124:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   16128:	e0bffd17 	ldw	r2,-12(fp)
   1612c:	00007906 	br	16314 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   16130:	d0a85503 	ldbu	r2,-24236(gp)
   16134:	10803fcc 	andi	r2,r2,255
   16138:	10000526 	beq	r2,zero,16150 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1613c:	e0bfff17 	ldw	r2,-4(fp)
   16140:	00c003c4 	movi	r3,15
   16144:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   16148:	e0bffd17 	ldw	r2,-12(fp)
   1614c:	00007106 	br	16314 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   16150:	e0bffd17 	ldw	r2,-12(fp)
   16154:	10800003 	ldbu	r2,0(r2)
   16158:	10803fcc 	andi	r2,r2,255
   1615c:	10800160 	cmpeqi	r2,r2,5
   16160:	1000051e 	bne	r2,zero,16178 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   16164:	e0bfff17 	ldw	r2,-4(fp)
   16168:	00c00044 	movi	r3,1
   1616c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   16170:	e0bffd17 	ldw	r2,-12(fp)
   16174:	00006706 	br	16314 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16178:	0005303a 	rdctl	r2,status
   1617c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16180:	e0fffc17 	ldw	r3,-16(fp)
   16184:	00bfff84 	movi	r2,-2
   16188:	1884703a 	and	r2,r3,r2
   1618c:	1001703a 	wrctl	status,r2
  
  return context;
   16190:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16194:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   16198:	e0bffd17 	ldw	r2,-12(fp)
   1619c:	10800117 	ldw	r2,4(r2)
   161a0:	10000326 	beq	r2,zero,161b0 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   161a4:	00800044 	movi	r2,1
   161a8:	e0bff405 	stb	r2,-48(fp)
   161ac:	00000106 	br	161b4 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   161b0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   161b4:	e0bffe03 	ldbu	r2,-8(fp)
   161b8:	10000326 	beq	r2,zero,161c8 <OSFlagDel+0xe8>
   161bc:	10800060 	cmpeqi	r2,r2,1
   161c0:	1000231e 	bne	r2,zero,16250 <OSFlagDel+0x170>
   161c4:	00004806 	br	162e8 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   161c8:	e0bff403 	ldbu	r2,-48(fp)
   161cc:	1000161e 	bne	r2,zero,16228 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   161d0:	e0bffd17 	ldw	r2,-12(fp)
   161d4:	00c00fc4 	movi	r3,63
   161d8:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   161dc:	e0bffd17 	ldw	r2,-12(fp)
   161e0:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   161e4:	e0bffd17 	ldw	r2,-12(fp)
   161e8:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   161ec:	d0e85817 	ldw	r3,-24224(gp)
   161f0:	e0bffd17 	ldw	r2,-12(fp)
   161f4:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   161f8:	e0bffd17 	ldw	r2,-12(fp)
   161fc:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   16200:	e0bffd17 	ldw	r2,-12(fp)
   16204:	d0a85815 	stw	r2,-24224(gp)
   16208:	e0bff717 	ldw	r2,-36(fp)
   1620c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16210:	e0bff817 	ldw	r2,-32(fp)
   16214:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   16218:	e0bfff17 	ldw	r2,-4(fp)
   1621c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   16220:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   16224:	00003a06 	br	16310 <OSFlagDel+0x230>
   16228:	e0bff717 	ldw	r2,-36(fp)
   1622c:	e0bff915 	stw	r2,-28(fp)
   16230:	e0bff917 	ldw	r2,-28(fp)
   16234:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   16238:	e0bfff17 	ldw	r2,-4(fp)
   1623c:	00c01244 	movi	r3,73
   16240:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   16244:	e0bffd17 	ldw	r2,-12(fp)
   16248:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   1624c:	00003006 	br	16310 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   16250:	e0bffd17 	ldw	r2,-12(fp)
   16254:	10800117 	ldw	r2,4(r2)
   16258:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   1625c:	00000606 	br	16278 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   16260:	000b883a 	mov	r5,zero
   16264:	e13ff517 	ldw	r4,-44(fp)
   16268:	001724c0 	call	1724c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   1626c:	e0bff517 	ldw	r2,-44(fp)
   16270:	10800017 	ldw	r2,0(r2)
   16274:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   16278:	e0bff517 	ldw	r2,-44(fp)
   1627c:	103ff81e 	bne	r2,zero,16260 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016260>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   16280:	e0bffd17 	ldw	r2,-12(fp)
   16284:	00c00fc4 	movi	r3,63
   16288:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1628c:	e0bffd17 	ldw	r2,-12(fp)
   16290:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   16294:	e0bffd17 	ldw	r2,-12(fp)
   16298:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   1629c:	d0e85817 	ldw	r3,-24224(gp)
   162a0:	e0bffd17 	ldw	r2,-12(fp)
   162a4:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   162a8:	e0bffd17 	ldw	r2,-12(fp)
   162ac:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   162b0:	e0bffd17 	ldw	r2,-12(fp)
   162b4:	d0a85815 	stw	r2,-24224(gp)
   162b8:	e0bff717 	ldw	r2,-36(fp)
   162bc:	e0bffa15 	stw	r2,-24(fp)
   162c0:	e0bffa17 	ldw	r2,-24(fp)
   162c4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   162c8:	e0bff403 	ldbu	r2,-48(fp)
   162cc:	10800058 	cmpnei	r2,r2,1
   162d0:	1000011e 	bne	r2,zero,162d8 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   162d4:	001545c0 	call	1545c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   162d8:	e0bfff17 	ldw	r2,-4(fp)
   162dc:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   162e0:	e03ff615 	stw	zero,-40(fp)
             break;
   162e4:	00000a06 	br	16310 <OSFlagDel+0x230>
   162e8:	e0bff717 	ldw	r2,-36(fp)
   162ec:	e0bffb15 	stw	r2,-20(fp)
   162f0:	e0bffb17 	ldw	r2,-20(fp)
   162f4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   162f8:	e0bfff17 	ldw	r2,-4(fp)
   162fc:	00c001c4 	movi	r3,7
   16300:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   16304:	e0bffd17 	ldw	r2,-12(fp)
   16308:	e0bff615 	stw	r2,-40(fp)
             break;
   1630c:	0001883a 	nop
    }
    return (pgrp_return);
   16310:	e0bff617 	ldw	r2,-40(fp)
}
   16314:	e037883a 	mov	sp,fp
   16318:	dfc00117 	ldw	ra,4(sp)
   1631c:	df000017 	ldw	fp,0(sp)
   16320:	dec00204 	addi	sp,sp,8
   16324:	f800283a 	ret

00016328 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   16328:	defff604 	addi	sp,sp,-40
   1632c:	dfc00915 	stw	ra,36(sp)
   16330:	df000815 	stw	fp,32(sp)
   16334:	df000804 	addi	fp,sp,32
   16338:	e13ffd15 	stw	r4,-12(fp)
   1633c:	e17ffe15 	stw	r5,-8(fp)
   16340:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   16344:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   16348:	e0bfff17 	ldw	r2,-4(fp)
   1634c:	1000021e 	bne	r2,zero,16358 <OSFlagNameGet+0x30>
        return (0);
   16350:	0005883a 	mov	r2,zero
   16354:	00003906 	br	1643c <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   16358:	e0bffd17 	ldw	r2,-12(fp)
   1635c:	1000051e 	bne	r2,zero,16374 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   16360:	e0bfff17 	ldw	r2,-4(fp)
   16364:	00c01b84 	movi	r3,110
   16368:	10c00005 	stb	r3,0(r2)
        return (0);
   1636c:	0005883a 	mov	r2,zero
   16370:	00003206 	br	1643c <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   16374:	e0bffe17 	ldw	r2,-8(fp)
   16378:	1000051e 	bne	r2,zero,16390 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1637c:	e0bfff17 	ldw	r2,-4(fp)
   16380:	00c00304 	movi	r3,12
   16384:	10c00005 	stb	r3,0(r2)
        return (0);
   16388:	0005883a 	mov	r2,zero
   1638c:	00002b06 	br	1643c <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   16390:	d0a85503 	ldbu	r2,-24236(gp)
   16394:	10803fcc 	andi	r2,r2,255
   16398:	10000526 	beq	r2,zero,163b0 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   1639c:	e0bfff17 	ldw	r2,-4(fp)
   163a0:	00c00444 	movi	r3,17
   163a4:	10c00005 	stb	r3,0(r2)
        return (0);
   163a8:	0005883a 	mov	r2,zero
   163ac:	00002306 	br	1643c <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   163b0:	0005303a 	rdctl	r2,status
   163b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   163b8:	e0fffc17 	ldw	r3,-16(fp)
   163bc:	00bfff84 	movi	r2,-2
   163c0:	1884703a 	and	r2,r3,r2
   163c4:	1001703a 	wrctl	status,r2
  
  return context;
   163c8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   163cc:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   163d0:	e0bffd17 	ldw	r2,-12(fp)
   163d4:	10800003 	ldbu	r2,0(r2)
   163d8:	10803fcc 	andi	r2,r2,255
   163dc:	10800160 	cmpeqi	r2,r2,5
   163e0:	1000091e 	bne	r2,zero,16408 <OSFlagNameGet+0xe0>
   163e4:	e0bff817 	ldw	r2,-32(fp)
   163e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   163ec:	e0bff917 	ldw	r2,-28(fp)
   163f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   163f4:	e0bfff17 	ldw	r2,-4(fp)
   163f8:	00c00044 	movi	r3,1
   163fc:	10c00005 	stb	r3,0(r2)
        return (0);
   16400:	0005883a 	mov	r2,zero
   16404:	00000d06 	br	1643c <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   16408:	e0bffd17 	ldw	r2,-12(fp)
   1640c:	10800284 	addi	r2,r2,10
   16410:	100b883a 	mov	r5,r2
   16414:	e13ffe17 	ldw	r4,-8(fp)
   16418:	00155a00 	call	155a0 <OS_StrCopy>
   1641c:	e0bffb05 	stb	r2,-20(fp)
   16420:	e0bff817 	ldw	r2,-32(fp)
   16424:	e0bffa15 	stw	r2,-24(fp)
   16428:	e0bffa17 	ldw	r2,-24(fp)
   1642c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16430:	e0bfff17 	ldw	r2,-4(fp)
   16434:	10000005 	stb	zero,0(r2)
    return (len);
   16438:	e0bffb03 	ldbu	r2,-20(fp)
}
   1643c:	e037883a 	mov	sp,fp
   16440:	dfc00117 	ldw	ra,4(sp)
   16444:	df000017 	ldw	fp,0(sp)
   16448:	dec00204 	addi	sp,sp,8
   1644c:	f800283a 	ret

00016450 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   16450:	defff504 	addi	sp,sp,-44
   16454:	dfc00a15 	stw	ra,40(sp)
   16458:	df000915 	stw	fp,36(sp)
   1645c:	df000904 	addi	fp,sp,36
   16460:	e13ffd15 	stw	r4,-12(fp)
   16464:	e17ffe15 	stw	r5,-8(fp)
   16468:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1646c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   16470:	e0bfff17 	ldw	r2,-4(fp)
   16474:	10004326 	beq	r2,zero,16584 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   16478:	e0bffd17 	ldw	r2,-12(fp)
   1647c:	1000041e 	bne	r2,zero,16490 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   16480:	e0bfff17 	ldw	r2,-4(fp)
   16484:	00c01b84 	movi	r3,110
   16488:	10c00005 	stb	r3,0(r2)
        return;
   1648c:	00003e06 	br	16588 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   16490:	e0bffe17 	ldw	r2,-8(fp)
   16494:	1000041e 	bne	r2,zero,164a8 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   16498:	e0bfff17 	ldw	r2,-4(fp)
   1649c:	00c00304 	movi	r3,12
   164a0:	10c00005 	stb	r3,0(r2)
        return;
   164a4:	00003806 	br	16588 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   164a8:	d0a85503 	ldbu	r2,-24236(gp)
   164ac:	10803fcc 	andi	r2,r2,255
   164b0:	10000426 	beq	r2,zero,164c4 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   164b4:	e0bfff17 	ldw	r2,-4(fp)
   164b8:	00c00484 	movi	r3,18
   164bc:	10c00005 	stb	r3,0(r2)
        return;
   164c0:	00003106 	br	16588 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   164c4:	0005303a 	rdctl	r2,status
   164c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   164cc:	e0fffc17 	ldw	r3,-16(fp)
   164d0:	00bfff84 	movi	r2,-2
   164d4:	1884703a 	and	r2,r3,r2
   164d8:	1001703a 	wrctl	status,r2
  
  return context;
   164dc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   164e0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   164e4:	e0bffd17 	ldw	r2,-12(fp)
   164e8:	10800003 	ldbu	r2,0(r2)
   164ec:	10803fcc 	andi	r2,r2,255
   164f0:	10800160 	cmpeqi	r2,r2,5
   164f4:	1000081e 	bne	r2,zero,16518 <OSFlagNameSet+0xc8>
   164f8:	e0bff717 	ldw	r2,-36(fp)
   164fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16500:	e0bff817 	ldw	r2,-32(fp)
   16504:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   16508:	e0bfff17 	ldw	r2,-4(fp)
   1650c:	00c00044 	movi	r3,1
   16510:	10c00005 	stb	r3,0(r2)
        return;
   16514:	00001c06 	br	16588 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   16518:	e13ffe17 	ldw	r4,-8(fp)
   1651c:	00156140 	call	15614 <OS_StrLen>
   16520:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   16524:	e0bffa03 	ldbu	r2,-24(fp)
   16528:	10800830 	cmpltui	r2,r2,32
   1652c:	1000081e 	bne	r2,zero,16550 <OSFlagNameSet+0x100>
   16530:	e0bff717 	ldw	r2,-36(fp)
   16534:	e0bff915 	stw	r2,-28(fp)
   16538:	e0bff917 	ldw	r2,-28(fp)
   1653c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   16540:	e0bfff17 	ldw	r2,-4(fp)
   16544:	00c01cc4 	movi	r3,115
   16548:	10c00005 	stb	r3,0(r2)
        return;
   1654c:	00000e06 	br	16588 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   16550:	e0bffd17 	ldw	r2,-12(fp)
   16554:	10800284 	addi	r2,r2,10
   16558:	e17ffe17 	ldw	r5,-8(fp)
   1655c:	1009883a 	mov	r4,r2
   16560:	00155a00 	call	155a0 <OS_StrCopy>
   16564:	e0bff717 	ldw	r2,-36(fp)
   16568:	e0bffb15 	stw	r2,-20(fp)
   1656c:	e0bffb17 	ldw	r2,-20(fp)
   16570:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16574:	e0bfff17 	ldw	r2,-4(fp)
   16578:	10000005 	stb	zero,0(r2)
    return;
   1657c:	0001883a 	nop
   16580:	00000106 	br	16588 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   16584:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   16588:	e037883a 	mov	sp,fp
   1658c:	dfc00117 	ldw	ra,4(sp)
   16590:	df000017 	ldw	fp,0(sp)
   16594:	dec00204 	addi	sp,sp,8
   16598:	f800283a 	ret

0001659c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   1659c:	deffe104 	addi	sp,sp,-124
   165a0:	dfc01e15 	stw	ra,120(sp)
   165a4:	df001d15 	stw	fp,116(sp)
   165a8:	df001d04 	addi	fp,sp,116
   165ac:	e13ffc15 	stw	r4,-16(fp)
   165b0:	2809883a 	mov	r4,r5
   165b4:	3007883a 	mov	r3,r6
   165b8:	3805883a 	mov	r2,r7
   165bc:	e13ffd0d 	sth	r4,-12(fp)
   165c0:	e0fffe05 	stb	r3,-8(fp)
   165c4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   165c8:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   165cc:	e0800217 	ldw	r2,8(fp)
   165d0:	1000021e 	bne	r2,zero,165dc <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   165d4:	0005883a 	mov	r2,zero
   165d8:	00015906 	br	16b40 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   165dc:	e0bffc17 	ldw	r2,-16(fp)
   165e0:	1000051e 	bne	r2,zero,165f8 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   165e4:	e0800217 	ldw	r2,8(fp)
   165e8:	00c01b84 	movi	r3,110
   165ec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   165f0:	0005883a 	mov	r2,zero
   165f4:	00015206 	br	16b40 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   165f8:	d0a85503 	ldbu	r2,-24236(gp)
   165fc:	10803fcc 	andi	r2,r2,255
   16600:	10000526 	beq	r2,zero,16618 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   16604:	e0800217 	ldw	r2,8(fp)
   16608:	00c00084 	movi	r3,2
   1660c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16610:	0005883a 	mov	r2,zero
   16614:	00014a06 	br	16b40 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   16618:	d0a84703 	ldbu	r2,-24292(gp)
   1661c:	10803fcc 	andi	r2,r2,255
   16620:	10000526 	beq	r2,zero,16638 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   16624:	e0800217 	ldw	r2,8(fp)
   16628:	00c00344 	movi	r3,13
   1662c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16630:	0005883a 	mov	r2,zero
   16634:	00014206 	br	16b40 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   16638:	e0bffc17 	ldw	r2,-16(fp)
   1663c:	10800003 	ldbu	r2,0(r2)
   16640:	10803fcc 	andi	r2,r2,255
   16644:	10800160 	cmpeqi	r2,r2,5
   16648:	1000051e 	bne	r2,zero,16660 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   1664c:	e0800217 	ldw	r2,8(fp)
   16650:	00c00044 	movi	r3,1
   16654:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16658:	0005883a 	mov	r2,zero
   1665c:	00013806 	br	16b40 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   16660:	e0fffe03 	ldbu	r3,-8(fp)
   16664:	00bfe004 	movi	r2,-128
   16668:	1884703a 	and	r2,r3,r2
   1666c:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   16670:	e0bfe603 	ldbu	r2,-104(fp)
   16674:	10000626 	beq	r2,zero,16690 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   16678:	e0bffe03 	ldbu	r2,-8(fp)
   1667c:	10801fcc 	andi	r2,r2,127
   16680:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   16684:	00800044 	movi	r2,1
   16688:	e0bfe405 	stb	r2,-112(fp)
   1668c:	00000106 	br	16694 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   16690:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16694:	0005303a 	rdctl	r2,status
   16698:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1669c:	e0fff617 	ldw	r3,-40(fp)
   166a0:	00bfff84 	movi	r2,-2
   166a4:	1884703a 	and	r2,r3,r2
   166a8:	1001703a 	wrctl	status,r2
  
  return context;
   166ac:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   166b0:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   166b4:	e0bffe03 	ldbu	r2,-8(fp)
   166b8:	10c00060 	cmpeqi	r3,r2,1
   166bc:	1800921e 	bne	r3,zero,16908 <OSFlagPend+0x36c>
   166c0:	10c00088 	cmpgei	r3,r2,2
   166c4:	1800021e 	bne	r3,zero,166d0 <OSFlagPend+0x134>
   166c8:	10006126 	beq	r2,zero,16850 <OSFlagPend+0x2b4>
   166cc:	0000bb06 	br	169bc <OSFlagPend+0x420>
   166d0:	10c000a0 	cmpeqi	r3,r2,2
   166d4:	1800031e 	bne	r3,zero,166e4 <OSFlagPend+0x148>
   166d8:	108000e0 	cmpeqi	r2,r2,3
   166dc:	10002f1e 	bne	r2,zero,1679c <OSFlagPend+0x200>
   166e0:	0000b606 	br	169bc <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   166e4:	e0bffc17 	ldw	r2,-16(fp)
   166e8:	10c0020b 	ldhu	r3,8(r2)
   166ec:	e0bffd0b 	ldhu	r2,-12(fp)
   166f0:	1884703a 	and	r2,r3,r2
   166f4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   166f8:	e0ffe80b 	ldhu	r3,-96(fp)
   166fc:	e0bffd0b 	ldhu	r2,-12(fp)
   16700:	1880171e 	bne	r3,r2,16760 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   16704:	e0bfe403 	ldbu	r2,-112(fp)
   16708:	10800058 	cmpnei	r2,r2,1
   1670c:	1000091e 	bne	r2,zero,16734 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   16710:	e0bffc17 	ldw	r2,-16(fp)
   16714:	1080020b 	ldhu	r2,8(r2)
   16718:	1007883a 	mov	r3,r2
   1671c:	e0bfe80b 	ldhu	r2,-96(fp)
   16720:	0084303a 	nor	r2,zero,r2
   16724:	1884703a 	and	r2,r3,r2
   16728:	1007883a 	mov	r3,r2
   1672c:	e0bffc17 	ldw	r2,-16(fp)
   16730:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   16734:	d0a85617 	ldw	r2,-24232(gp)
   16738:	e0ffe80b 	ldhu	r3,-96(fp)
   1673c:	10c00b0d 	sth	r3,44(r2)
   16740:	e0bfe517 	ldw	r2,-108(fp)
   16744:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16748:	e0bfe717 	ldw	r2,-100(fp)
   1674c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   16750:	e0800217 	ldw	r2,8(fp)
   16754:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   16758:	e0bfe80b 	ldhu	r2,-96(fp)
   1675c:	0000f806 	br	16b40 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   16760:	e13ffd0b 	ldhu	r4,-12(fp)
   16764:	e17ffe03 	ldbu	r5,-8(fp)
   16768:	e0bfff0b 	ldhu	r2,-4(fp)
   1676c:	e0fff704 	addi	r3,fp,-36
   16770:	d8800015 	stw	r2,0(sp)
   16774:	280f883a 	mov	r7,r5
   16778:	200d883a 	mov	r6,r4
   1677c:	180b883a 	mov	r5,r3
   16780:	e13ffc17 	ldw	r4,-16(fp)
   16784:	001700c0 	call	1700c <OS_FlagBlock>
   16788:	e0bfe517 	ldw	r2,-108(fp)
   1678c:	e0bfe915 	stw	r2,-92(fp)
   16790:	e0bfe917 	ldw	r2,-92(fp)
   16794:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   16798:	00009206 	br	169e4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   1679c:	e0bffc17 	ldw	r2,-16(fp)
   167a0:	10c0020b 	ldhu	r3,8(r2)
   167a4:	e0bffd0b 	ldhu	r2,-12(fp)
   167a8:	1884703a 	and	r2,r3,r2
   167ac:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   167b0:	e0bfe80b 	ldhu	r2,-96(fp)
   167b4:	10001726 	beq	r2,zero,16814 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   167b8:	e0bfe403 	ldbu	r2,-112(fp)
   167bc:	10800058 	cmpnei	r2,r2,1
   167c0:	1000091e 	bne	r2,zero,167e8 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   167c4:	e0bffc17 	ldw	r2,-16(fp)
   167c8:	1080020b 	ldhu	r2,8(r2)
   167cc:	1007883a 	mov	r3,r2
   167d0:	e0bfe80b 	ldhu	r2,-96(fp)
   167d4:	0084303a 	nor	r2,zero,r2
   167d8:	1884703a 	and	r2,r3,r2
   167dc:	1007883a 	mov	r3,r2
   167e0:	e0bffc17 	ldw	r2,-16(fp)
   167e4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   167e8:	d0a85617 	ldw	r2,-24232(gp)
   167ec:	e0ffe80b 	ldhu	r3,-96(fp)
   167f0:	10c00b0d 	sth	r3,44(r2)
   167f4:	e0bfe517 	ldw	r2,-108(fp)
   167f8:	e0bfea15 	stw	r2,-88(fp)
   167fc:	e0bfea17 	ldw	r2,-88(fp)
   16800:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   16804:	e0800217 	ldw	r2,8(fp)
   16808:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1680c:	e0bfe80b 	ldhu	r2,-96(fp)
   16810:	0000cb06 	br	16b40 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   16814:	e13ffd0b 	ldhu	r4,-12(fp)
   16818:	e17ffe03 	ldbu	r5,-8(fp)
   1681c:	e0bfff0b 	ldhu	r2,-4(fp)
   16820:	e0fff704 	addi	r3,fp,-36
   16824:	d8800015 	stw	r2,0(sp)
   16828:	280f883a 	mov	r7,r5
   1682c:	200d883a 	mov	r6,r4
   16830:	180b883a 	mov	r5,r3
   16834:	e13ffc17 	ldw	r4,-16(fp)
   16838:	001700c0 	call	1700c <OS_FlagBlock>
   1683c:	e0bfe517 	ldw	r2,-108(fp)
   16840:	e0bfeb15 	stw	r2,-84(fp)
   16844:	e0bfeb17 	ldw	r2,-84(fp)
   16848:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1684c:	00006506 	br	169e4 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   16850:	e0bffc17 	ldw	r2,-16(fp)
   16854:	1080020b 	ldhu	r2,8(r2)
   16858:	0084303a 	nor	r2,zero,r2
   1685c:	1007883a 	mov	r3,r2
   16860:	e0bffd0b 	ldhu	r2,-12(fp)
   16864:	1884703a 	and	r2,r3,r2
   16868:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1686c:	e0ffe80b 	ldhu	r3,-96(fp)
   16870:	e0bffd0b 	ldhu	r2,-12(fp)
   16874:	1880151e 	bne	r3,r2,168cc <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   16878:	e0bfe403 	ldbu	r2,-112(fp)
   1687c:	10800058 	cmpnei	r2,r2,1
   16880:	1000071e 	bne	r2,zero,168a0 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   16884:	e0bffc17 	ldw	r2,-16(fp)
   16888:	10c0020b 	ldhu	r3,8(r2)
   1688c:	e0bfe80b 	ldhu	r2,-96(fp)
   16890:	1884b03a 	or	r2,r3,r2
   16894:	1007883a 	mov	r3,r2
   16898:	e0bffc17 	ldw	r2,-16(fp)
   1689c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   168a0:	d0a85617 	ldw	r2,-24232(gp)
   168a4:	e0ffe80b 	ldhu	r3,-96(fp)
   168a8:	10c00b0d 	sth	r3,44(r2)
   168ac:	e0bfe517 	ldw	r2,-108(fp)
   168b0:	e0bfec15 	stw	r2,-80(fp)
   168b4:	e0bfec17 	ldw	r2,-80(fp)
   168b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   168bc:	e0800217 	ldw	r2,8(fp)
   168c0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   168c4:	e0bfe80b 	ldhu	r2,-96(fp)
   168c8:	00009d06 	br	16b40 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   168cc:	e13ffd0b 	ldhu	r4,-12(fp)
   168d0:	e17ffe03 	ldbu	r5,-8(fp)
   168d4:	e0bfff0b 	ldhu	r2,-4(fp)
   168d8:	e0fff704 	addi	r3,fp,-36
   168dc:	d8800015 	stw	r2,0(sp)
   168e0:	280f883a 	mov	r7,r5
   168e4:	200d883a 	mov	r6,r4
   168e8:	180b883a 	mov	r5,r3
   168ec:	e13ffc17 	ldw	r4,-16(fp)
   168f0:	001700c0 	call	1700c <OS_FlagBlock>
   168f4:	e0bfe517 	ldw	r2,-108(fp)
   168f8:	e0bfed15 	stw	r2,-76(fp)
   168fc:	e0bfed17 	ldw	r2,-76(fp)
   16900:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   16904:	00003706 	br	169e4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   16908:	e0bffc17 	ldw	r2,-16(fp)
   1690c:	1080020b 	ldhu	r2,8(r2)
   16910:	0084303a 	nor	r2,zero,r2
   16914:	1007883a 	mov	r3,r2
   16918:	e0bffd0b 	ldhu	r2,-12(fp)
   1691c:	1884703a 	and	r2,r3,r2
   16920:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   16924:	e0bfe80b 	ldhu	r2,-96(fp)
   16928:	10001526 	beq	r2,zero,16980 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1692c:	e0bfe403 	ldbu	r2,-112(fp)
   16930:	10800058 	cmpnei	r2,r2,1
   16934:	1000071e 	bne	r2,zero,16954 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   16938:	e0bffc17 	ldw	r2,-16(fp)
   1693c:	10c0020b 	ldhu	r3,8(r2)
   16940:	e0bfe80b 	ldhu	r2,-96(fp)
   16944:	1884b03a 	or	r2,r3,r2
   16948:	1007883a 	mov	r3,r2
   1694c:	e0bffc17 	ldw	r2,-16(fp)
   16950:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   16954:	d0a85617 	ldw	r2,-24232(gp)
   16958:	e0ffe80b 	ldhu	r3,-96(fp)
   1695c:	10c00b0d 	sth	r3,44(r2)
   16960:	e0bfe517 	ldw	r2,-108(fp)
   16964:	e0bfee15 	stw	r2,-72(fp)
   16968:	e0bfee17 	ldw	r2,-72(fp)
   1696c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   16970:	e0800217 	ldw	r2,8(fp)
   16974:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   16978:	e0bfe80b 	ldhu	r2,-96(fp)
   1697c:	00007006 	br	16b40 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   16980:	e13ffd0b 	ldhu	r4,-12(fp)
   16984:	e17ffe03 	ldbu	r5,-8(fp)
   16988:	e0bfff0b 	ldhu	r2,-4(fp)
   1698c:	e0fff704 	addi	r3,fp,-36
   16990:	d8800015 	stw	r2,0(sp)
   16994:	280f883a 	mov	r7,r5
   16998:	200d883a 	mov	r6,r4
   1699c:	180b883a 	mov	r5,r3
   169a0:	e13ffc17 	ldw	r4,-16(fp)
   169a4:	001700c0 	call	1700c <OS_FlagBlock>
   169a8:	e0bfe517 	ldw	r2,-108(fp)
   169ac:	e0bfef15 	stw	r2,-68(fp)
   169b0:	e0bfef17 	ldw	r2,-68(fp)
   169b4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   169b8:	00000a06 	br	169e4 <OSFlagPend+0x448>
   169bc:	e0bfe517 	ldw	r2,-108(fp)
   169c0:	e0bff015 	stw	r2,-64(fp)
   169c4:	e0bff017 	ldw	r2,-64(fp)
   169c8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   169cc:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   169d0:	e0800217 	ldw	r2,8(fp)
   169d4:	00c01bc4 	movi	r3,111
   169d8:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   169dc:	e0bfe80b 	ldhu	r2,-96(fp)
   169e0:	00005706 	br	16b40 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   169e4:	001545c0 	call	1545c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   169e8:	0005303a 	rdctl	r2,status
   169ec:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   169f0:	e0fff117 	ldw	r3,-60(fp)
   169f4:	00bfff84 	movi	r2,-2
   169f8:	1884703a 	and	r2,r3,r2
   169fc:	1001703a 	wrctl	status,r2
  
  return context;
   16a00:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   16a04:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   16a08:	d0a85617 	ldw	r2,-24232(gp)
   16a0c:	10800c43 	ldbu	r2,49(r2)
   16a10:	10803fcc 	andi	r2,r2,255
   16a14:	10001c26 	beq	r2,zero,16a88 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   16a18:	d0a85617 	ldw	r2,-24232(gp)
   16a1c:	10800c43 	ldbu	r2,49(r2)
   16a20:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   16a24:	d0a85617 	ldw	r2,-24232(gp)
   16a28:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   16a2c:	e0bff704 	addi	r2,fp,-36
   16a30:	1009883a 	mov	r4,r2
   16a34:	00173400 	call	17340 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   16a38:	d0a85617 	ldw	r2,-24232(gp)
   16a3c:	10000c05 	stb	zero,48(r2)
   16a40:	e0bfe517 	ldw	r2,-108(fp)
   16a44:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16a48:	e0bff217 	ldw	r2,-56(fp)
   16a4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   16a50:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   16a54:	e0bff303 	ldbu	r2,-52(fp)
   16a58:	108000a0 	cmpeqi	r2,r2,2
   16a5c:	10000426 	beq	r2,zero,16a70 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   16a60:	e0800217 	ldw	r2,8(fp)
   16a64:	00c00384 	movi	r3,14
   16a68:	10c00005 	stb	r3,0(r2)
                 break;
   16a6c:	00000406 	br	16a80 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   16a70:	e0800217 	ldw	r2,8(fp)
   16a74:	00c00284 	movi	r3,10
   16a78:	10c00005 	stb	r3,0(r2)
                 break;
   16a7c:	0001883a 	nop
        }
        return (flags_rdy);
   16a80:	e0bfe80b 	ldhu	r2,-96(fp)
   16a84:	00002e06 	br	16b40 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   16a88:	d0a85617 	ldw	r2,-24232(gp)
   16a8c:	10800b0b 	ldhu	r2,44(r2)
   16a90:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   16a94:	e0bfe403 	ldbu	r2,-112(fp)
   16a98:	10800058 	cmpnei	r2,r2,1
   16a9c:	1000211e 	bne	r2,zero,16b24 <OSFlagPend+0x588>
        switch (wait_type) {
   16aa0:	e0bffe03 	ldbu	r2,-8(fp)
   16aa4:	10001616 	blt	r2,zero,16b00 <OSFlagPend+0x564>
   16aa8:	10c00090 	cmplti	r3,r2,2
   16aac:	18000c1e 	bne	r3,zero,16ae0 <OSFlagPend+0x544>
   16ab0:	10800108 	cmpgei	r2,r2,4
   16ab4:	1000121e 	bne	r2,zero,16b00 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   16ab8:	e0bffc17 	ldw	r2,-16(fp)
   16abc:	1080020b 	ldhu	r2,8(r2)
   16ac0:	1007883a 	mov	r3,r2
   16ac4:	e0bfe80b 	ldhu	r2,-96(fp)
   16ac8:	0084303a 	nor	r2,zero,r2
   16acc:	1884703a 	and	r2,r3,r2
   16ad0:	1007883a 	mov	r3,r2
   16ad4:	e0bffc17 	ldw	r2,-16(fp)
   16ad8:	10c0020d 	sth	r3,8(r2)
                 break;
   16adc:	00001106 	br	16b24 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   16ae0:	e0bffc17 	ldw	r2,-16(fp)
   16ae4:	10c0020b 	ldhu	r3,8(r2)
   16ae8:	e0bfe80b 	ldhu	r2,-96(fp)
   16aec:	1884b03a 	or	r2,r3,r2
   16af0:	1007883a 	mov	r3,r2
   16af4:	e0bffc17 	ldw	r2,-16(fp)
   16af8:	10c0020d 	sth	r3,8(r2)
                 break;
   16afc:	00000906 	br	16b24 <OSFlagPend+0x588>
   16b00:	e0bfe517 	ldw	r2,-108(fp)
   16b04:	e0bff415 	stw	r2,-48(fp)
   16b08:	e0bff417 	ldw	r2,-48(fp)
   16b0c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   16b10:	e0800217 	ldw	r2,8(fp)
   16b14:	00c01bc4 	movi	r3,111
   16b18:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   16b1c:	0005883a 	mov	r2,zero
   16b20:	00000706 	br	16b40 <OSFlagPend+0x5a4>
   16b24:	e0bfe517 	ldw	r2,-108(fp)
   16b28:	e0bff515 	stw	r2,-44(fp)
   16b2c:	e0bff517 	ldw	r2,-44(fp)
   16b30:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   16b34:	e0800217 	ldw	r2,8(fp)
   16b38:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   16b3c:	e0bfe80b 	ldhu	r2,-96(fp)
}
   16b40:	e037883a 	mov	sp,fp
   16b44:	dfc00117 	ldw	ra,4(sp)
   16b48:	df000017 	ldw	fp,0(sp)
   16b4c:	dec00204 	addi	sp,sp,8
   16b50:	f800283a 	ret

00016b54 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   16b54:	defffb04 	addi	sp,sp,-20
   16b58:	df000415 	stw	fp,16(sp)
   16b5c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   16b60:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16b64:	0005303a 	rdctl	r2,status
   16b68:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16b6c:	e0fffe17 	ldw	r3,-8(fp)
   16b70:	00bfff84 	movi	r2,-2
   16b74:	1884703a 	and	r2,r3,r2
   16b78:	1001703a 	wrctl	status,r2
  
  return context;
   16b7c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   16b80:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   16b84:	d0a85617 	ldw	r2,-24232(gp)
   16b88:	10800b0b 	ldhu	r2,44(r2)
   16b8c:	e0bffd0d 	sth	r2,-12(fp)
   16b90:	e0bffc17 	ldw	r2,-16(fp)
   16b94:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16b98:	e0bfff17 	ldw	r2,-4(fp)
   16b9c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   16ba0:	e0bffd0b 	ldhu	r2,-12(fp)
}
   16ba4:	e037883a 	mov	sp,fp
   16ba8:	df000017 	ldw	fp,0(sp)
   16bac:	dec00104 	addi	sp,sp,4
   16bb0:	f800283a 	ret

00016bb4 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   16bb4:	deffef04 	addi	sp,sp,-68
   16bb8:	dfc01015 	stw	ra,64(sp)
   16bbc:	df000f15 	stw	fp,60(sp)
   16bc0:	df000f04 	addi	fp,sp,60
   16bc4:	e13ffc15 	stw	r4,-16(fp)
   16bc8:	2807883a 	mov	r3,r5
   16bcc:	3005883a 	mov	r2,r6
   16bd0:	e1ffff15 	stw	r7,-4(fp)
   16bd4:	e0fffd0d 	sth	r3,-12(fp)
   16bd8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   16bdc:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   16be0:	e0bfff17 	ldw	r2,-4(fp)
   16be4:	1000021e 	bne	r2,zero,16bf0 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   16be8:	0005883a 	mov	r2,zero
   16bec:	0000d106 	br	16f34 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   16bf0:	e0bffc17 	ldw	r2,-16(fp)
   16bf4:	1000051e 	bne	r2,zero,16c0c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   16bf8:	e0bfff17 	ldw	r2,-4(fp)
   16bfc:	00c01b84 	movi	r3,110
   16c00:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16c04:	0005883a 	mov	r2,zero
   16c08:	0000ca06 	br	16f34 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   16c0c:	e0bffc17 	ldw	r2,-16(fp)
   16c10:	10800003 	ldbu	r2,0(r2)
   16c14:	10803fcc 	andi	r2,r2,255
   16c18:	10800160 	cmpeqi	r2,r2,5
   16c1c:	1000051e 	bne	r2,zero,16c34 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   16c20:	e0bfff17 	ldw	r2,-4(fp)
   16c24:	00c00044 	movi	r3,1
   16c28:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16c2c:	0005883a 	mov	r2,zero
   16c30:	0000c006 	br	16f34 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16c34:	0005303a 	rdctl	r2,status
   16c38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16c3c:	e0fffb17 	ldw	r3,-20(fp)
   16c40:	00bfff84 	movi	r2,-2
   16c44:	1884703a 	and	r2,r3,r2
   16c48:	1001703a 	wrctl	status,r2
  
  return context;
   16c4c:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   16c50:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   16c54:	e0bffe03 	ldbu	r2,-8(fp)
   16c58:	10000326 	beq	r2,zero,16c68 <OSFlagPost+0xb4>
   16c5c:	10800060 	cmpeqi	r2,r2,1
   16c60:	10000b1e 	bne	r2,zero,16c90 <OSFlagPost+0xdc>
   16c64:	00001206 	br	16cb0 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   16c68:	e0bffc17 	ldw	r2,-16(fp)
   16c6c:	1080020b 	ldhu	r2,8(r2)
   16c70:	1007883a 	mov	r3,r2
   16c74:	e0bffd0b 	ldhu	r2,-12(fp)
   16c78:	0084303a 	nor	r2,zero,r2
   16c7c:	1884703a 	and	r2,r3,r2
   16c80:	1007883a 	mov	r3,r2
   16c84:	e0bffc17 	ldw	r2,-16(fp)
   16c88:	10c0020d 	sth	r3,8(r2)
             break;
   16c8c:	00001106 	br	16cd4 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   16c90:	e0bffc17 	ldw	r2,-16(fp)
   16c94:	10c0020b 	ldhu	r3,8(r2)
   16c98:	e0bffd0b 	ldhu	r2,-12(fp)
   16c9c:	1884b03a 	or	r2,r3,r2
   16ca0:	1007883a 	mov	r3,r2
   16ca4:	e0bffc17 	ldw	r2,-16(fp)
   16ca8:	10c0020d 	sth	r3,8(r2)
             break;
   16cac:	00000906 	br	16cd4 <OSFlagPost+0x120>
   16cb0:	e0bff317 	ldw	r2,-52(fp)
   16cb4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16cb8:	e0bff417 	ldw	r2,-48(fp)
   16cbc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   16cc0:	e0bfff17 	ldw	r2,-4(fp)
   16cc4:	00c01c44 	movi	r3,113
   16cc8:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   16ccc:	0005883a 	mov	r2,zero
   16cd0:	00009806 	br	16f34 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   16cd4:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   16cd8:	e0bffc17 	ldw	r2,-16(fp)
   16cdc:	10800117 	ldw	r2,4(r2)
   16ce0:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   16ce4:	00007706 	br	16ec4 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   16ce8:	e0bff117 	ldw	r2,-60(fp)
   16cec:	10800483 	ldbu	r2,18(r2)
   16cf0:	10803fcc 	andi	r2,r2,255
   16cf4:	10c00060 	cmpeqi	r3,r2,1
   16cf8:	18004a1e 	bne	r3,zero,16e24 <OSFlagPost+0x270>
   16cfc:	10c00088 	cmpgei	r3,r2,2
   16d00:	1800021e 	bne	r3,zero,16d0c <OSFlagPost+0x158>
   16d04:	10002f26 	beq	r2,zero,16dc4 <OSFlagPost+0x210>
   16d08:	00005b06 	br	16e78 <OSFlagPost+0x2c4>
   16d0c:	10c000a0 	cmpeqi	r3,r2,2
   16d10:	1800031e 	bne	r3,zero,16d20 <OSFlagPost+0x16c>
   16d14:	108000e0 	cmpeqi	r2,r2,3
   16d18:	1000171e 	bne	r2,zero,16d78 <OSFlagPost+0x1c4>
   16d1c:	00005606 	br	16e78 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16d20:	e0bffc17 	ldw	r2,-16(fp)
   16d24:	10c0020b 	ldhu	r3,8(r2)
   16d28:	e0bff117 	ldw	r2,-60(fp)
   16d2c:	1080040b 	ldhu	r2,16(r2)
   16d30:	1884703a 	and	r2,r3,r2
   16d34:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   16d38:	e0bff117 	ldw	r2,-60(fp)
   16d3c:	1080040b 	ldhu	r2,16(r2)
   16d40:	10ffffcc 	andi	r3,r2,65535
   16d44:	e0bff60b 	ldhu	r2,-40(fp)
   16d48:	1880541e 	bne	r3,r2,16e9c <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   16d4c:	e0bff60b 	ldhu	r2,-40(fp)
   16d50:	100b883a 	mov	r5,r2
   16d54:	e13ff117 	ldw	r4,-60(fp)
   16d58:	001724c0 	call	1724c <OS_FlagTaskRdy>
   16d5c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   16d60:	e0bff683 	ldbu	r2,-38(fp)
   16d64:	10800058 	cmpnei	r2,r2,1
   16d68:	10004c1e 	bne	r2,zero,16e9c <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   16d6c:	00800044 	movi	r2,1
   16d70:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16d74:	00004906 	br	16e9c <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16d78:	e0bffc17 	ldw	r2,-16(fp)
   16d7c:	10c0020b 	ldhu	r3,8(r2)
   16d80:	e0bff117 	ldw	r2,-60(fp)
   16d84:	1080040b 	ldhu	r2,16(r2)
   16d88:	1884703a 	and	r2,r3,r2
   16d8c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   16d90:	e0bff60b 	ldhu	r2,-40(fp)
   16d94:	10004326 	beq	r2,zero,16ea4 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   16d98:	e0bff60b 	ldhu	r2,-40(fp)
   16d9c:	100b883a 	mov	r5,r2
   16da0:	e13ff117 	ldw	r4,-60(fp)
   16da4:	001724c0 	call	1724c <OS_FlagTaskRdy>
   16da8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   16dac:	e0bff683 	ldbu	r2,-38(fp)
   16db0:	10800058 	cmpnei	r2,r2,1
   16db4:	10003b1e 	bne	r2,zero,16ea4 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   16db8:	00800044 	movi	r2,1
   16dbc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16dc0:	00003806 	br	16ea4 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16dc4:	e0bffc17 	ldw	r2,-16(fp)
   16dc8:	1080020b 	ldhu	r2,8(r2)
   16dcc:	0084303a 	nor	r2,zero,r2
   16dd0:	1007883a 	mov	r3,r2
   16dd4:	e0bff117 	ldw	r2,-60(fp)
   16dd8:	1080040b 	ldhu	r2,16(r2)
   16ddc:	1884703a 	and	r2,r3,r2
   16de0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   16de4:	e0bff117 	ldw	r2,-60(fp)
   16de8:	1080040b 	ldhu	r2,16(r2)
   16dec:	10ffffcc 	andi	r3,r2,65535
   16df0:	e0bff60b 	ldhu	r2,-40(fp)
   16df4:	18802d1e 	bne	r3,r2,16eac <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   16df8:	e0bff60b 	ldhu	r2,-40(fp)
   16dfc:	100b883a 	mov	r5,r2
   16e00:	e13ff117 	ldw	r4,-60(fp)
   16e04:	001724c0 	call	1724c <OS_FlagTaskRdy>
   16e08:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   16e0c:	e0bff683 	ldbu	r2,-38(fp)
   16e10:	10800058 	cmpnei	r2,r2,1
   16e14:	1000251e 	bne	r2,zero,16eac <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   16e18:	00800044 	movi	r2,1
   16e1c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16e20:	00002206 	br	16eac <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   16e24:	e0bffc17 	ldw	r2,-16(fp)
   16e28:	1080020b 	ldhu	r2,8(r2)
   16e2c:	0084303a 	nor	r2,zero,r2
   16e30:	1007883a 	mov	r3,r2
   16e34:	e0bff117 	ldw	r2,-60(fp)
   16e38:	1080040b 	ldhu	r2,16(r2)
   16e3c:	1884703a 	and	r2,r3,r2
   16e40:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   16e44:	e0bff60b 	ldhu	r2,-40(fp)
   16e48:	10001a26 	beq	r2,zero,16eb4 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   16e4c:	e0bff60b 	ldhu	r2,-40(fp)
   16e50:	100b883a 	mov	r5,r2
   16e54:	e13ff117 	ldw	r4,-60(fp)
   16e58:	001724c0 	call	1724c <OS_FlagTaskRdy>
   16e5c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   16e60:	e0bff683 	ldbu	r2,-38(fp)
   16e64:	10800058 	cmpnei	r2,r2,1
   16e68:	1000121e 	bne	r2,zero,16eb4 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   16e6c:	00800044 	movi	r2,1
   16e70:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   16e74:	00000f06 	br	16eb4 <OSFlagPost+0x300>
   16e78:	e0bff317 	ldw	r2,-52(fp)
   16e7c:	e0bff515 	stw	r2,-44(fp)
   16e80:	e0bff517 	ldw	r2,-44(fp)
   16e84:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   16e88:	e0bfff17 	ldw	r2,-4(fp)
   16e8c:	00c01bc4 	movi	r3,111
   16e90:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   16e94:	0005883a 	mov	r2,zero
   16e98:	00002606 	br	16f34 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   16e9c:	0001883a 	nop
   16ea0:	00000506 	br	16eb8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   16ea4:	0001883a 	nop
   16ea8:	00000306 	br	16eb8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   16eac:	0001883a 	nop
   16eb0:	00000106 	br	16eb8 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   16eb4:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   16eb8:	e0bff117 	ldw	r2,-60(fp)
   16ebc:	10800017 	ldw	r2,0(r2)
   16ec0:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   16ec4:	e0bff117 	ldw	r2,-60(fp)
   16ec8:	103f871e 	bne	r2,zero,16ce8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016ce8>
   16ecc:	e0bff317 	ldw	r2,-52(fp)
   16ed0:	e0bff715 	stw	r2,-36(fp)
   16ed4:	e0bff717 	ldw	r2,-36(fp)
   16ed8:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   16edc:	e0bff203 	ldbu	r2,-56(fp)
   16ee0:	10800058 	cmpnei	r2,r2,1
   16ee4:	1000011e 	bne	r2,zero,16eec <OSFlagPost+0x338>
        OS_Sched();
   16ee8:	001545c0 	call	1545c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16eec:	0005303a 	rdctl	r2,status
   16ef0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16ef4:	e0fffa17 	ldw	r3,-24(fp)
   16ef8:	00bfff84 	movi	r2,-2
   16efc:	1884703a 	and	r2,r3,r2
   16f00:	1001703a 	wrctl	status,r2
  
  return context;
   16f04:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   16f08:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   16f0c:	e0bffc17 	ldw	r2,-16(fp)
   16f10:	1080020b 	ldhu	r2,8(r2)
   16f14:	e0bff90d 	sth	r2,-28(fp)
   16f18:	e0bff317 	ldw	r2,-52(fp)
   16f1c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16f20:	e0bff817 	ldw	r2,-32(fp)
   16f24:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   16f28:	e0bfff17 	ldw	r2,-4(fp)
   16f2c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   16f30:	e0bff90b 	ldhu	r2,-28(fp)
}
   16f34:	e037883a 	mov	sp,fp
   16f38:	dfc00117 	ldw	ra,4(sp)
   16f3c:	df000017 	ldw	fp,0(sp)
   16f40:	dec00204 	addi	sp,sp,8
   16f44:	f800283a 	ret

00016f48 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   16f48:	defff904 	addi	sp,sp,-28
   16f4c:	df000615 	stw	fp,24(sp)
   16f50:	df000604 	addi	fp,sp,24
   16f54:	e13ffe15 	stw	r4,-8(fp)
   16f58:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   16f5c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   16f60:	e0bfff17 	ldw	r2,-4(fp)
   16f64:	1000021e 	bne	r2,zero,16f70 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   16f68:	0005883a 	mov	r2,zero
   16f6c:	00002306 	br	16ffc <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   16f70:	e0bffe17 	ldw	r2,-8(fp)
   16f74:	1000051e 	bne	r2,zero,16f8c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   16f78:	e0bfff17 	ldw	r2,-4(fp)
   16f7c:	00c01b84 	movi	r3,110
   16f80:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16f84:	0005883a 	mov	r2,zero
   16f88:	00001c06 	br	16ffc <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   16f8c:	e0bffe17 	ldw	r2,-8(fp)
   16f90:	10800003 	ldbu	r2,0(r2)
   16f94:	10803fcc 	andi	r2,r2,255
   16f98:	10800160 	cmpeqi	r2,r2,5
   16f9c:	1000051e 	bne	r2,zero,16fb4 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   16fa0:	e0bfff17 	ldw	r2,-4(fp)
   16fa4:	00c00044 	movi	r3,1
   16fa8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   16fac:	0005883a 	mov	r2,zero
   16fb0:	00001206 	br	16ffc <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   16fb4:	0005303a 	rdctl	r2,status
   16fb8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   16fbc:	e0fffc17 	ldw	r3,-16(fp)
   16fc0:	00bfff84 	movi	r2,-2
   16fc4:	1884703a 	and	r2,r3,r2
   16fc8:	1001703a 	wrctl	status,r2
  
  return context;
   16fcc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   16fd0:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   16fd4:	e0bffe17 	ldw	r2,-8(fp)
   16fd8:	1080020b 	ldhu	r2,8(r2)
   16fdc:	e0bffb0d 	sth	r2,-20(fp)
   16fe0:	e0bffa17 	ldw	r2,-24(fp)
   16fe4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   16fe8:	e0bffd17 	ldw	r2,-12(fp)
   16fec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   16ff0:	e0bfff17 	ldw	r2,-4(fp)
   16ff4:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   16ff8:	e0bffb0b 	ldhu	r2,-20(fp)
}
   16ffc:	e037883a 	mov	sp,fp
   17000:	df000017 	ldw	fp,0(sp)
   17004:	dec00104 	addi	sp,sp,4
   17008:	f800283a 	ret

0001700c <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   1700c:	defff804 	addi	sp,sp,-32
   17010:	df000715 	stw	fp,28(sp)
   17014:	df000704 	addi	fp,sp,28
   17018:	e13ffb15 	stw	r4,-20(fp)
   1701c:	e17ffc15 	stw	r5,-16(fp)
   17020:	3009883a 	mov	r4,r6
   17024:	3807883a 	mov	r3,r7
   17028:	e0800117 	ldw	r2,4(fp)
   1702c:	e13ffd0d 	sth	r4,-12(fp)
   17030:	e0fffe05 	stb	r3,-8(fp)
   17034:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   17038:	d0a85617 	ldw	r2,-24232(gp)
   1703c:	d0e85617 	ldw	r3,-24232(gp)
   17040:	18c00c03 	ldbu	r3,48(r3)
   17044:	18c00814 	ori	r3,r3,32
   17048:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   1704c:	d0a85617 	ldw	r2,-24232(gp)
   17050:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   17054:	d0a85617 	ldw	r2,-24232(gp)
   17058:	e0ffff0b 	ldhu	r3,-4(fp)
   1705c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   17060:	d0a85617 	ldw	r2,-24232(gp)
   17064:	e0fffc17 	ldw	r3,-16(fp)
   17068:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   1706c:	e0bffc17 	ldw	r2,-16(fp)
   17070:	e0fffd0b 	ldhu	r3,-12(fp)
   17074:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   17078:	e0bffc17 	ldw	r2,-16(fp)
   1707c:	e0fffe03 	ldbu	r3,-8(fp)
   17080:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   17084:	d0e85617 	ldw	r3,-24232(gp)
   17088:	e0bffc17 	ldw	r2,-16(fp)
   1708c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   17090:	e0bffb17 	ldw	r2,-20(fp)
   17094:	10c00117 	ldw	r3,4(r2)
   17098:	e0bffc17 	ldw	r2,-16(fp)
   1709c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   170a0:	e0bffc17 	ldw	r2,-16(fp)
   170a4:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   170a8:	e0bffc17 	ldw	r2,-16(fp)
   170ac:	e0fffb17 	ldw	r3,-20(fp)
   170b0:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   170b4:	e0bffb17 	ldw	r2,-20(fp)
   170b8:	10800117 	ldw	r2,4(r2)
   170bc:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   170c0:	e0bff917 	ldw	r2,-28(fp)
   170c4:	10000326 	beq	r2,zero,170d4 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   170c8:	e0bff917 	ldw	r2,-28(fp)
   170cc:	e0fffc17 	ldw	r3,-16(fp)
   170d0:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   170d4:	e0bffb17 	ldw	r2,-20(fp)
   170d8:	e0fffc17 	ldw	r3,-16(fp)
   170dc:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   170e0:	d0a85617 	ldw	r2,-24232(gp)
   170e4:	10800d03 	ldbu	r2,52(r2)
   170e8:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   170ec:	e0fffa03 	ldbu	r3,-24(fp)
   170f0:	e13ffa03 	ldbu	r4,-24(fp)
   170f4:	d0a85344 	addi	r2,gp,-24243
   170f8:	2085883a 	add	r2,r4,r2
   170fc:	10800003 	ldbu	r2,0(r2)
   17100:	1009883a 	mov	r4,r2
   17104:	d0a85617 	ldw	r2,-24232(gp)
   17108:	10800d43 	ldbu	r2,53(r2)
   1710c:	0084303a 	nor	r2,zero,r2
   17110:	2084703a 	and	r2,r4,r2
   17114:	1009883a 	mov	r4,r2
   17118:	d0a85344 	addi	r2,gp,-24243
   1711c:	1885883a 	add	r2,r3,r2
   17120:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   17124:	e0fffa03 	ldbu	r3,-24(fp)
   17128:	d0a85344 	addi	r2,gp,-24243
   1712c:	1885883a 	add	r2,r3,r2
   17130:	10800003 	ldbu	r2,0(r2)
   17134:	10803fcc 	andi	r2,r2,255
   17138:	1000071e 	bne	r2,zero,17158 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1713c:	d0a85617 	ldw	r2,-24232(gp)
   17140:	10800d83 	ldbu	r2,54(r2)
   17144:	0084303a 	nor	r2,zero,r2
   17148:	1007883a 	mov	r3,r2
   1714c:	d0a85303 	ldbu	r2,-24244(gp)
   17150:	1884703a 	and	r2,r3,r2
   17154:	d0a85305 	stb	r2,-24244(gp)
    }
}
   17158:	0001883a 	nop
   1715c:	e037883a 	mov	sp,fp
   17160:	df000017 	ldw	fp,0(sp)
   17164:	dec00104 	addi	sp,sp,4
   17168:	f800283a 	ret

0001716c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   1716c:	defffb04 	addi	sp,sp,-20
   17170:	dfc00415 	stw	ra,16(sp)
   17174:	df000315 	stw	fp,12(sp)
   17178:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   1717c:	0140dc04 	movi	r5,880
   17180:	010000f4 	movhi	r4,3
   17184:	21293604 	addi	r4,r4,-23336
   17188:	00153a00 	call	153a0 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   1718c:	008000f4 	movhi	r2,3
   17190:	10a93604 	addi	r2,r2,-23336
   17194:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   17198:	008000f4 	movhi	r2,3
   1719c:	10a94104 	addi	r2,r2,-23292
   171a0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   171a4:	e03ffd0d 	sth	zero,-12(fp)
   171a8:	00001306 	br	171f8 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   171ac:	e0bffe17 	ldw	r2,-8(fp)
   171b0:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   171b4:	e0bffe17 	ldw	r2,-8(fp)
   171b8:	e0ffff17 	ldw	r3,-4(fp)
   171bc:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   171c0:	e0bffe17 	ldw	r2,-8(fp)
   171c4:	00c00fc4 	movi	r3,63
   171c8:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   171cc:	e0bffe17 	ldw	r2,-8(fp)
   171d0:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   171d4:	e0bffe17 	ldw	r2,-8(fp)
   171d8:	10800b04 	addi	r2,r2,44
   171dc:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   171e0:	e0bfff17 	ldw	r2,-4(fp)
   171e4:	10800b04 	addi	r2,r2,44
   171e8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   171ec:	e0bffd0b 	ldhu	r2,-12(fp)
   171f0:	10800044 	addi	r2,r2,1
   171f4:	e0bffd0d 	sth	r2,-12(fp)
   171f8:	e0bffd0b 	ldhu	r2,-12(fp)
   171fc:	108004f0 	cmpltui	r2,r2,19
   17200:	103fea1e 	bne	r2,zero,171ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70171ac>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   17204:	e0bffe17 	ldw	r2,-8(fp)
   17208:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   1720c:	e0bffe17 	ldw	r2,-8(fp)
   17210:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   17214:	e0bffe17 	ldw	r2,-8(fp)
   17218:	00c00fc4 	movi	r3,63
   1721c:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   17220:	e0bffe17 	ldw	r2,-8(fp)
   17224:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   17228:	008000f4 	movhi	r2,3
   1722c:	10a93604 	addi	r2,r2,-23336
   17230:	d0a85815 	stw	r2,-24224(gp)
#endif
}
   17234:	0001883a 	nop
   17238:	e037883a 	mov	sp,fp
   1723c:	dfc00117 	ldw	ra,4(sp)
   17240:	df000017 	ldw	fp,0(sp)
   17244:	dec00204 	addi	sp,sp,8
   17248:	f800283a 	ret

0001724c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   1724c:	defffa04 	addi	sp,sp,-24
   17250:	dfc00515 	stw	ra,20(sp)
   17254:	df000415 	stw	fp,16(sp)
   17258:	df000404 	addi	fp,sp,16
   1725c:	e13ffe15 	stw	r4,-8(fp)
   17260:	2805883a 	mov	r2,r5
   17264:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   17268:	e0bffe17 	ldw	r2,-8(fp)
   1726c:	10800217 	ldw	r2,8(r2)
   17270:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   17274:	e0bffd17 	ldw	r2,-12(fp)
   17278:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   1727c:	e0bffd17 	ldw	r2,-12(fp)
   17280:	e0ffff0b 	ldhu	r3,-4(fp)
   17284:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   17288:	e0bffd17 	ldw	r2,-12(fp)
   1728c:	10c00c03 	ldbu	r3,48(r2)
   17290:	00bff7c4 	movi	r2,-33
   17294:	1884703a 	and	r2,r3,r2
   17298:	1007883a 	mov	r3,r2
   1729c:	e0bffd17 	ldw	r2,-12(fp)
   172a0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   172a4:	e0bffd17 	ldw	r2,-12(fp)
   172a8:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   172ac:	e0bffd17 	ldw	r2,-12(fp)
   172b0:	10800c03 	ldbu	r2,48(r2)
   172b4:	10803fcc 	andi	r2,r2,255
   172b8:	1000181e 	bne	r2,zero,1731c <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   172bc:	e0bffd17 	ldw	r2,-12(fp)
   172c0:	10c00d83 	ldbu	r3,54(r2)
   172c4:	d0a85303 	ldbu	r2,-24244(gp)
   172c8:	1884b03a 	or	r2,r3,r2
   172cc:	d0a85305 	stb	r2,-24244(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   172d0:	e0bffd17 	ldw	r2,-12(fp)
   172d4:	10800d03 	ldbu	r2,52(r2)
   172d8:	10c03fcc 	andi	r3,r2,255
   172dc:	e0bffd17 	ldw	r2,-12(fp)
   172e0:	10800d03 	ldbu	r2,52(r2)
   172e4:	11003fcc 	andi	r4,r2,255
   172e8:	d0a85344 	addi	r2,gp,-24243
   172ec:	2085883a 	add	r2,r4,r2
   172f0:	11000003 	ldbu	r4,0(r2)
   172f4:	e0bffd17 	ldw	r2,-12(fp)
   172f8:	10800d43 	ldbu	r2,53(r2)
   172fc:	2084b03a 	or	r2,r4,r2
   17300:	1009883a 	mov	r4,r2
   17304:	d0a85344 	addi	r2,gp,-24243
   17308:	1885883a 	add	r2,r3,r2
   1730c:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   17310:	00800044 	movi	r2,1
   17314:	e0bffc05 	stb	r2,-16(fp)
   17318:	00000106 	br	17320 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   1731c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   17320:	e13ffe17 	ldw	r4,-8(fp)
   17324:	00173400 	call	17340 <OS_FlagUnlink>
    return (sched);
   17328:	e0bffc03 	ldbu	r2,-16(fp)
}
   1732c:	e037883a 	mov	sp,fp
   17330:	dfc00117 	ldw	ra,4(sp)
   17334:	df000017 	ldw	fp,0(sp)
   17338:	dec00204 	addi	sp,sp,8
   1733c:	f800283a 	ret

00017340 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   17340:	defffa04 	addi	sp,sp,-24
   17344:	df000515 	stw	fp,20(sp)
   17348:	df000504 	addi	fp,sp,20
   1734c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   17350:	e0bfff17 	ldw	r2,-4(fp)
   17354:	10800117 	ldw	r2,4(r2)
   17358:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   1735c:	e0bfff17 	ldw	r2,-4(fp)
   17360:	10800017 	ldw	r2,0(r2)
   17364:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   17368:	e0bffb17 	ldw	r2,-20(fp)
   1736c:	10000b1e 	bne	r2,zero,1739c <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   17370:	e0bfff17 	ldw	r2,-4(fp)
   17374:	10800317 	ldw	r2,12(r2)
   17378:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   1737c:	e0bffd17 	ldw	r2,-12(fp)
   17380:	e0fffc17 	ldw	r3,-16(fp)
   17384:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   17388:	e0bffc17 	ldw	r2,-16(fp)
   1738c:	10000b26 	beq	r2,zero,173bc <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   17390:	e0bffc17 	ldw	r2,-16(fp)
   17394:	10000115 	stw	zero,4(r2)
   17398:	00000806 	br	173bc <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   1739c:	e0bffb17 	ldw	r2,-20(fp)
   173a0:	e0fffc17 	ldw	r3,-16(fp)
   173a4:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   173a8:	e0bffc17 	ldw	r2,-16(fp)
   173ac:	10000326 	beq	r2,zero,173bc <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   173b0:	e0bffc17 	ldw	r2,-16(fp)
   173b4:	e0fffb17 	ldw	r3,-20(fp)
   173b8:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   173bc:	e0bfff17 	ldw	r2,-4(fp)
   173c0:	10800217 	ldw	r2,8(r2)
   173c4:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   173c8:	e0bffe17 	ldw	r2,-8(fp)
   173cc:	10000a15 	stw	zero,40(r2)
#endif
}
   173d0:	0001883a 	nop
   173d4:	e037883a 	mov	sp,fp
   173d8:	df000017 	ldw	fp,0(sp)
   173dc:	dec00104 	addi	sp,sp,4
   173e0:	f800283a 	ret

000173e4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   173e4:	defff404 	addi	sp,sp,-48
   173e8:	df000b15 	stw	fp,44(sp)
   173ec:	df000b04 	addi	fp,sp,44
   173f0:	e13ffc15 	stw	r4,-16(fp)
   173f4:	e17ffd15 	stw	r5,-12(fp)
   173f8:	e1bffe15 	stw	r6,-8(fp)
   173fc:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   17400:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   17404:	e0bfff17 	ldw	r2,-4(fp)
   17408:	1000021e 	bne	r2,zero,17414 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   1740c:	0005883a 	mov	r2,zero
   17410:	00006506 	br	175a8 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   17414:	e0bffc17 	ldw	r2,-16(fp)
   17418:	1000051e 	bne	r2,zero,17430 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   1741c:	e0bfff17 	ldw	r2,-4(fp)
   17420:	00c01884 	movi	r3,98
   17424:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   17428:	0005883a 	mov	r2,zero
   1742c:	00005e06 	br	175a8 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   17430:	e0bffc17 	ldw	r2,-16(fp)
   17434:	108000cc 	andi	r2,r2,3
   17438:	10000526 	beq	r2,zero,17450 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   1743c:	e0bfff17 	ldw	r2,-4(fp)
   17440:	00c01884 	movi	r3,98
   17444:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   17448:	0005883a 	mov	r2,zero
   1744c:	00005606 	br	175a8 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   17450:	e0bffd17 	ldw	r2,-12(fp)
   17454:	108000a8 	cmpgeui	r2,r2,2
   17458:	1000051e 	bne	r2,zero,17470 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   1745c:	e0bfff17 	ldw	r2,-4(fp)
   17460:	00c016c4 	movi	r3,91
   17464:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   17468:	0005883a 	mov	r2,zero
   1746c:	00004e06 	br	175a8 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   17470:	e0bffe17 	ldw	r2,-8(fp)
   17474:	10800128 	cmpgeui	r2,r2,4
   17478:	1000051e 	bne	r2,zero,17490 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   1747c:	e0bfff17 	ldw	r2,-4(fp)
   17480:	00c01704 	movi	r3,92
   17484:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   17488:	0005883a 	mov	r2,zero
   1748c:	00004606 	br	175a8 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17490:	0005303a 	rdctl	r2,status
   17494:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17498:	e0fffb17 	ldw	r3,-20(fp)
   1749c:	00bfff84 	movi	r2,-2
   174a0:	1884703a 	and	r2,r3,r2
   174a4:	1001703a 	wrctl	status,r2
  
  return context;
   174a8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   174ac:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   174b0:	d0a85017 	ldw	r2,-24256(gp)
   174b4:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   174b8:	d0a85017 	ldw	r2,-24256(gp)
   174bc:	10000326 	beq	r2,zero,174cc <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   174c0:	d0a85017 	ldw	r2,-24256(gp)
   174c4:	10800117 	ldw	r2,4(r2)
   174c8:	d0a85015 	stw	r2,-24256(gp)
   174cc:	e0bff817 	ldw	r2,-32(fp)
   174d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   174d4:	e0bff917 	ldw	r2,-28(fp)
   174d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   174dc:	e0bffa17 	ldw	r2,-24(fp)
   174e0:	1000051e 	bne	r2,zero,174f8 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   174e4:	e0bfff17 	ldw	r2,-4(fp)
   174e8:	00c01684 	movi	r3,90
   174ec:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   174f0:	0005883a 	mov	r2,zero
   174f4:	00002c06 	br	175a8 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   174f8:	e0bffc17 	ldw	r2,-16(fp)
   174fc:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   17500:	e0fffc17 	ldw	r3,-16(fp)
   17504:	e0bffe17 	ldw	r2,-8(fp)
   17508:	1885883a 	add	r2,r3,r2
   1750c:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   17510:	e03ff715 	stw	zero,-36(fp)
   17514:	00000c06 	br	17548 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   17518:	e0bff617 	ldw	r2,-40(fp)
   1751c:	e0fff517 	ldw	r3,-44(fp)
   17520:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   17524:	e0bff517 	ldw	r2,-44(fp)
   17528:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   1752c:	e0fff517 	ldw	r3,-44(fp)
   17530:	e0bffe17 	ldw	r2,-8(fp)
   17534:	1885883a 	add	r2,r3,r2
   17538:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   1753c:	e0bff717 	ldw	r2,-36(fp)
   17540:	10800044 	addi	r2,r2,1
   17544:	e0bff715 	stw	r2,-36(fp)
   17548:	e0bffd17 	ldw	r2,-12(fp)
   1754c:	10bfffc4 	addi	r2,r2,-1
   17550:	e0fff717 	ldw	r3,-36(fp)
   17554:	18bff036 	bltu	r3,r2,17518 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017518>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   17558:	e0bff617 	ldw	r2,-40(fp)
   1755c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   17560:	e0bffa17 	ldw	r2,-24(fp)
   17564:	e0fffc17 	ldw	r3,-16(fp)
   17568:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   1756c:	e0bffa17 	ldw	r2,-24(fp)
   17570:	e0fffc17 	ldw	r3,-16(fp)
   17574:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   17578:	e0bffa17 	ldw	r2,-24(fp)
   1757c:	e0fffd17 	ldw	r3,-12(fp)
   17580:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   17584:	e0bffa17 	ldw	r2,-24(fp)
   17588:	e0fffd17 	ldw	r3,-12(fp)
   1758c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   17590:	e0bffa17 	ldw	r2,-24(fp)
   17594:	e0fffe17 	ldw	r3,-8(fp)
   17598:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   1759c:	e0bfff17 	ldw	r2,-4(fp)
   175a0:	10000005 	stb	zero,0(r2)
    return (pmem);
   175a4:	e0bffa17 	ldw	r2,-24(fp)
}
   175a8:	e037883a 	mov	sp,fp
   175ac:	df000017 	ldw	fp,0(sp)
   175b0:	dec00104 	addi	sp,sp,4
   175b4:	f800283a 	ret

000175b8 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   175b8:	defff804 	addi	sp,sp,-32
   175bc:	df000715 	stw	fp,28(sp)
   175c0:	df000704 	addi	fp,sp,28
   175c4:	e13ffe15 	stw	r4,-8(fp)
   175c8:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   175cc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   175d0:	e0bfff17 	ldw	r2,-4(fp)
   175d4:	1000021e 	bne	r2,zero,175e0 <OSMemGet+0x28>
        return ((void *)0);
   175d8:	0005883a 	mov	r2,zero
   175dc:	00002e06 	br	17698 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   175e0:	e0bffe17 	ldw	r2,-8(fp)
   175e4:	1000051e 	bne	r2,zero,175fc <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   175e8:	e0bfff17 	ldw	r2,-4(fp)
   175ec:	00c01804 	movi	r3,96
   175f0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   175f4:	0005883a 	mov	r2,zero
   175f8:	00002706 	br	17698 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   175fc:	0005303a 	rdctl	r2,status
   17600:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17604:	e0fffd17 	ldw	r3,-12(fp)
   17608:	00bfff84 	movi	r2,-2
   1760c:	1884703a 	and	r2,r3,r2
   17610:	1001703a 	wrctl	status,r2
  
  return context;
   17614:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17618:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   1761c:	e0bffe17 	ldw	r2,-8(fp)
   17620:	10800417 	ldw	r2,16(r2)
   17624:	10001426 	beq	r2,zero,17678 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   17628:	e0bffe17 	ldw	r2,-8(fp)
   1762c:	10800117 	ldw	r2,4(r2)
   17630:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   17634:	e0bffb17 	ldw	r2,-20(fp)
   17638:	10c00017 	ldw	r3,0(r2)
   1763c:	e0bffe17 	ldw	r2,-8(fp)
   17640:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   17644:	e0bffe17 	ldw	r2,-8(fp)
   17648:	10800417 	ldw	r2,16(r2)
   1764c:	10ffffc4 	addi	r3,r2,-1
   17650:	e0bffe17 	ldw	r2,-8(fp)
   17654:	10c00415 	stw	r3,16(r2)
   17658:	e0bff917 	ldw	r2,-28(fp)
   1765c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17660:	e0bffa17 	ldw	r2,-24(fp)
   17664:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   17668:	e0bfff17 	ldw	r2,-4(fp)
   1766c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   17670:	e0bffb17 	ldw	r2,-20(fp)
   17674:	00000806 	br	17698 <OSMemGet+0xe0>
   17678:	e0bff917 	ldw	r2,-28(fp)
   1767c:	e0bffc15 	stw	r2,-16(fp)
   17680:	e0bffc17 	ldw	r2,-16(fp)
   17684:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   17688:	e0bfff17 	ldw	r2,-4(fp)
   1768c:	00c01744 	movi	r3,93
   17690:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   17694:	0005883a 	mov	r2,zero
}
   17698:	e037883a 	mov	sp,fp
   1769c:	df000017 	ldw	fp,0(sp)
   176a0:	dec00104 	addi	sp,sp,4
   176a4:	f800283a 	ret

000176a8 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   176a8:	defff704 	addi	sp,sp,-36
   176ac:	dfc00815 	stw	ra,32(sp)
   176b0:	df000715 	stw	fp,28(sp)
   176b4:	df000704 	addi	fp,sp,28
   176b8:	e13ffd15 	stw	r4,-12(fp)
   176bc:	e17ffe15 	stw	r5,-8(fp)
   176c0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   176c4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   176c8:	e0bfff17 	ldw	r2,-4(fp)
   176cc:	1000021e 	bne	r2,zero,176d8 <OSMemNameGet+0x30>
        return (0);
   176d0:	0005883a 	mov	r2,zero
   176d4:	00002b06 	br	17784 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   176d8:	e0bffd17 	ldw	r2,-12(fp)
   176dc:	1000051e 	bne	r2,zero,176f4 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   176e0:	e0bfff17 	ldw	r2,-4(fp)
   176e4:	00c01804 	movi	r3,96
   176e8:	10c00005 	stb	r3,0(r2)
        return (0);
   176ec:	0005883a 	mov	r2,zero
   176f0:	00002406 	br	17784 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   176f4:	e0bffe17 	ldw	r2,-8(fp)
   176f8:	1000051e 	bne	r2,zero,17710 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   176fc:	e0bfff17 	ldw	r2,-4(fp)
   17700:	00c00304 	movi	r3,12
   17704:	10c00005 	stb	r3,0(r2)
        return (0);
   17708:	0005883a 	mov	r2,zero
   1770c:	00001d06 	br	17784 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   17710:	d0a85503 	ldbu	r2,-24236(gp)
   17714:	10803fcc 	andi	r2,r2,255
   17718:	10000526 	beq	r2,zero,17730 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   1771c:	e0bfff17 	ldw	r2,-4(fp)
   17720:	00c00444 	movi	r3,17
   17724:	10c00005 	stb	r3,0(r2)
        return (0);
   17728:	0005883a 	mov	r2,zero
   1772c:	00001506 	br	17784 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17730:	0005303a 	rdctl	r2,status
   17734:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17738:	e0fffb17 	ldw	r3,-20(fp)
   1773c:	00bfff84 	movi	r2,-2
   17740:	1884703a 	and	r2,r3,r2
   17744:	1001703a 	wrctl	status,r2
  
  return context;
   17748:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1774c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   17750:	e0bffd17 	ldw	r2,-12(fp)
   17754:	10800504 	addi	r2,r2,20
   17758:	100b883a 	mov	r5,r2
   1775c:	e13ffe17 	ldw	r4,-8(fp)
   17760:	00155a00 	call	155a0 <OS_StrCopy>
   17764:	e0bffa05 	stb	r2,-24(fp)
   17768:	e0bff917 	ldw	r2,-28(fp)
   1776c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17770:	e0bffc17 	ldw	r2,-16(fp)
   17774:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17778:	e0bfff17 	ldw	r2,-4(fp)
   1777c:	10000005 	stb	zero,0(r2)
    return (len);
   17780:	e0bffa03 	ldbu	r2,-24(fp)
}
   17784:	e037883a 	mov	sp,fp
   17788:	dfc00117 	ldw	ra,4(sp)
   1778c:	df000017 	ldw	fp,0(sp)
   17790:	dec00204 	addi	sp,sp,8
   17794:	f800283a 	ret

00017798 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   17798:	defff604 	addi	sp,sp,-40
   1779c:	dfc00915 	stw	ra,36(sp)
   177a0:	df000815 	stw	fp,32(sp)
   177a4:	df000804 	addi	fp,sp,32
   177a8:	e13ffd15 	stw	r4,-12(fp)
   177ac:	e17ffe15 	stw	r5,-8(fp)
   177b0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   177b4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   177b8:	e0bfff17 	ldw	r2,-4(fp)
   177bc:	10003526 	beq	r2,zero,17894 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   177c0:	e0bffd17 	ldw	r2,-12(fp)
   177c4:	1000041e 	bne	r2,zero,177d8 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   177c8:	e0bfff17 	ldw	r2,-4(fp)
   177cc:	00c01804 	movi	r3,96
   177d0:	10c00005 	stb	r3,0(r2)
        return;
   177d4:	00003006 	br	17898 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   177d8:	e0bffe17 	ldw	r2,-8(fp)
   177dc:	1000041e 	bne	r2,zero,177f0 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   177e0:	e0bfff17 	ldw	r2,-4(fp)
   177e4:	00c00304 	movi	r3,12
   177e8:	10c00005 	stb	r3,0(r2)
        return;
   177ec:	00002a06 	br	17898 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   177f0:	d0a85503 	ldbu	r2,-24236(gp)
   177f4:	10803fcc 	andi	r2,r2,255
   177f8:	10000426 	beq	r2,zero,1780c <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   177fc:	e0bfff17 	ldw	r2,-4(fp)
   17800:	00c00484 	movi	r3,18
   17804:	10c00005 	stb	r3,0(r2)
        return;
   17808:	00002306 	br	17898 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1780c:	0005303a 	rdctl	r2,status
   17810:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17814:	e0fffc17 	ldw	r3,-16(fp)
   17818:	00bfff84 	movi	r2,-2
   1781c:	1884703a 	and	r2,r3,r2
   17820:	1001703a 	wrctl	status,r2
  
  return context;
   17824:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17828:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   1782c:	e13ffe17 	ldw	r4,-8(fp)
   17830:	00156140 	call	15614 <OS_StrLen>
   17834:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   17838:	e0bffa03 	ldbu	r2,-24(fp)
   1783c:	10800830 	cmpltui	r2,r2,32
   17840:	1000081e 	bne	r2,zero,17864 <OSMemNameSet+0xcc>
   17844:	e0bff817 	ldw	r2,-32(fp)
   17848:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1784c:	e0bff917 	ldw	r2,-28(fp)
   17850:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   17854:	e0bfff17 	ldw	r2,-4(fp)
   17858:	00c018c4 	movi	r3,99
   1785c:	10c00005 	stb	r3,0(r2)
        return;
   17860:	00000d06 	br	17898 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   17864:	e0bffd17 	ldw	r2,-12(fp)
   17868:	10800504 	addi	r2,r2,20
   1786c:	e17ffe17 	ldw	r5,-8(fp)
   17870:	1009883a 	mov	r4,r2
   17874:	00155a00 	call	155a0 <OS_StrCopy>
   17878:	e0bff817 	ldw	r2,-32(fp)
   1787c:	e0bffb15 	stw	r2,-20(fp)
   17880:	e0bffb17 	ldw	r2,-20(fp)
   17884:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   17888:	e0bfff17 	ldw	r2,-4(fp)
   1788c:	10000005 	stb	zero,0(r2)
   17890:	00000106 	br	17898 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   17894:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   17898:	e037883a 	mov	sp,fp
   1789c:	dfc00117 	ldw	ra,4(sp)
   178a0:	df000017 	ldw	fp,0(sp)
   178a4:	dec00204 	addi	sp,sp,8
   178a8:	f800283a 	ret

000178ac <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   178ac:	defff904 	addi	sp,sp,-28
   178b0:	df000615 	stw	fp,24(sp)
   178b4:	df000604 	addi	fp,sp,24
   178b8:	e13ffe15 	stw	r4,-8(fp)
   178bc:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   178c0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   178c4:	e0bffe17 	ldw	r2,-8(fp)
   178c8:	1000021e 	bne	r2,zero,178d4 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   178cc:	00801804 	movi	r2,96
   178d0:	00002806 	br	17974 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   178d4:	e0bfff17 	ldw	r2,-4(fp)
   178d8:	1000021e 	bne	r2,zero,178e4 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   178dc:	008017c4 	movi	r2,95
   178e0:	00002406 	br	17974 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   178e4:	0005303a 	rdctl	r2,status
   178e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   178ec:	e0fffd17 	ldw	r3,-12(fp)
   178f0:	00bfff84 	movi	r2,-2
   178f4:	1884703a 	and	r2,r3,r2
   178f8:	1001703a 	wrctl	status,r2
  
  return context;
   178fc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   17900:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   17904:	e0bffe17 	ldw	r2,-8(fp)
   17908:	10c00417 	ldw	r3,16(r2)
   1790c:	e0bffe17 	ldw	r2,-8(fp)
   17910:	10800317 	ldw	r2,12(r2)
   17914:	18800636 	bltu	r3,r2,17930 <OSMemPut+0x84>
   17918:	e0bffa17 	ldw	r2,-24(fp)
   1791c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17920:	e0bffb17 	ldw	r2,-20(fp)
   17924:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   17928:	00801784 	movi	r2,94
   1792c:	00001106 	br	17974 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   17930:	e0bffe17 	ldw	r2,-8(fp)
   17934:	10c00117 	ldw	r3,4(r2)
   17938:	e0bfff17 	ldw	r2,-4(fp)
   1793c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   17940:	e0bffe17 	ldw	r2,-8(fp)
   17944:	e0ffff17 	ldw	r3,-4(fp)
   17948:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   1794c:	e0bffe17 	ldw	r2,-8(fp)
   17950:	10800417 	ldw	r2,16(r2)
   17954:	10c00044 	addi	r3,r2,1
   17958:	e0bffe17 	ldw	r2,-8(fp)
   1795c:	10c00415 	stw	r3,16(r2)
   17960:	e0bffa17 	ldw	r2,-24(fp)
   17964:	e0bffc15 	stw	r2,-16(fp)
   17968:	e0bffc17 	ldw	r2,-16(fp)
   1796c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   17970:	0005883a 	mov	r2,zero
}
   17974:	e037883a 	mov	sp,fp
   17978:	df000017 	ldw	fp,0(sp)
   1797c:	dec00104 	addi	sp,sp,4
   17980:	f800283a 	ret

00017984 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   17984:	defffa04 	addi	sp,sp,-24
   17988:	df000515 	stw	fp,20(sp)
   1798c:	df000504 	addi	fp,sp,20
   17990:	e13ffe15 	stw	r4,-8(fp)
   17994:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17998:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   1799c:	e0bffe17 	ldw	r2,-8(fp)
   179a0:	1000021e 	bne	r2,zero,179ac <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   179a4:	00801804 	movi	r2,96
   179a8:	00002c06 	br	17a5c <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   179ac:	e0bfff17 	ldw	r2,-4(fp)
   179b0:	1000021e 	bne	r2,zero,179bc <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   179b4:	00801844 	movi	r2,97
   179b8:	00002806 	br	17a5c <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   179bc:	0005303a 	rdctl	r2,status
   179c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   179c4:	e0fffc17 	ldw	r3,-16(fp)
   179c8:	00bfff84 	movi	r2,-2
   179cc:	1884703a 	and	r2,r3,r2
   179d0:	1001703a 	wrctl	status,r2
  
  return context;
   179d4:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   179d8:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   179dc:	e0bffe17 	ldw	r2,-8(fp)
   179e0:	10c00017 	ldw	r3,0(r2)
   179e4:	e0bfff17 	ldw	r2,-4(fp)
   179e8:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   179ec:	e0bffe17 	ldw	r2,-8(fp)
   179f0:	10c00117 	ldw	r3,4(r2)
   179f4:	e0bfff17 	ldw	r2,-4(fp)
   179f8:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   179fc:	e0bffe17 	ldw	r2,-8(fp)
   17a00:	10c00217 	ldw	r3,8(r2)
   17a04:	e0bfff17 	ldw	r2,-4(fp)
   17a08:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   17a0c:	e0bffe17 	ldw	r2,-8(fp)
   17a10:	10c00317 	ldw	r3,12(r2)
   17a14:	e0bfff17 	ldw	r2,-4(fp)
   17a18:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   17a1c:	e0bffe17 	ldw	r2,-8(fp)
   17a20:	10c00417 	ldw	r3,16(r2)
   17a24:	e0bfff17 	ldw	r2,-4(fp)
   17a28:	10c00415 	stw	r3,16(r2)
   17a2c:	e0bffb17 	ldw	r2,-20(fp)
   17a30:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17a34:	e0bffd17 	ldw	r2,-12(fp)
   17a38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   17a3c:	e0bfff17 	ldw	r2,-4(fp)
   17a40:	10c00317 	ldw	r3,12(r2)
   17a44:	e0bfff17 	ldw	r2,-4(fp)
   17a48:	10800417 	ldw	r2,16(r2)
   17a4c:	1887c83a 	sub	r3,r3,r2
   17a50:	e0bfff17 	ldw	r2,-4(fp)
   17a54:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   17a58:	0005883a 	mov	r2,zero
}
   17a5c:	e037883a 	mov	sp,fp
   17a60:	df000017 	ldw	fp,0(sp)
   17a64:	dec00104 	addi	sp,sp,4
   17a68:	f800283a 	ret

00017a6c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   17a6c:	defffc04 	addi	sp,sp,-16
   17a70:	dfc00315 	stw	ra,12(sp)
   17a74:	df000215 	stw	fp,8(sp)
   17a78:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   17a7c:	01430c04 	movi	r5,3120
   17a80:	010000f4 	movhi	r4,3
   17a84:	212a1204 	addi	r4,r4,-22456
   17a88:	00153a00 	call	153a0 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   17a8c:	008000f4 	movhi	r2,3
   17a90:	10aa1204 	addi	r2,r2,-22456
   17a94:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   17a98:	e03fff0d 	sth	zero,-4(fp)
   17a9c:	00001306 	br	17aec <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   17aa0:	e0bfff0b 	ldhu	r2,-4(fp)
   17aa4:	10800044 	addi	r2,r2,1
   17aa8:	10c00d24 	muli	r3,r2,52
   17aac:	008000f4 	movhi	r2,3
   17ab0:	10aa1204 	addi	r2,r2,-22456
   17ab4:	1887883a 	add	r3,r3,r2
   17ab8:	e0bffe17 	ldw	r2,-8(fp)
   17abc:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   17ac0:	e0bffe17 	ldw	r2,-8(fp)
   17ac4:	00c00fc4 	movi	r3,63
   17ac8:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   17acc:	e0bffe17 	ldw	r2,-8(fp)
   17ad0:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   17ad4:	e0bffe17 	ldw	r2,-8(fp)
   17ad8:	10800d04 	addi	r2,r2,52
   17adc:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   17ae0:	e0bfff0b 	ldhu	r2,-4(fp)
   17ae4:	10800044 	addi	r2,r2,1
   17ae8:	e0bfff0d 	sth	r2,-4(fp)
   17aec:	e0bfff0b 	ldhu	r2,-4(fp)
   17af0:	10800ef0 	cmpltui	r2,r2,59
   17af4:	103fea1e 	bne	r2,zero,17aa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017aa0>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   17af8:	e0bffe17 	ldw	r2,-8(fp)
   17afc:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   17b00:	e0bffe17 	ldw	r2,-8(fp)
   17b04:	00c00fc4 	movi	r3,63
   17b08:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   17b0c:	e0bffe17 	ldw	r2,-8(fp)
   17b10:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   17b14:	008000f4 	movhi	r2,3
   17b18:	10aa1204 	addi	r2,r2,-22456
   17b1c:	d0a85015 	stw	r2,-24256(gp)
#endif
}
   17b20:	0001883a 	nop
   17b24:	e037883a 	mov	sp,fp
   17b28:	dfc00117 	ldw	ra,4(sp)
   17b2c:	df000017 	ldw	fp,0(sp)
   17b30:	dec00204 	addi	sp,sp,8
   17b34:	f800283a 	ret

00017b38 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   17b38:	defff804 	addi	sp,sp,-32
   17b3c:	df000715 	stw	fp,28(sp)
   17b40:	df000704 	addi	fp,sp,28
   17b44:	e13ffe15 	stw	r4,-8(fp)
   17b48:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17b4c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   17b50:	e0bfff17 	ldw	r2,-4(fp)
   17b54:	1000021e 	bne	r2,zero,17b60 <OSQAccept+0x28>
        return ((void *)0);
   17b58:	0005883a 	mov	r2,zero
   17b5c:	00004206 	br	17c68 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   17b60:	e0bffe17 	ldw	r2,-8(fp)
   17b64:	1000051e 	bne	r2,zero,17b7c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   17b68:	e0bfff17 	ldw	r2,-4(fp)
   17b6c:	00c00104 	movi	r3,4
   17b70:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17b74:	0005883a 	mov	r2,zero
   17b78:	00003b06 	br	17c68 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   17b7c:	e0bffe17 	ldw	r2,-8(fp)
   17b80:	10800003 	ldbu	r2,0(r2)
   17b84:	10803fcc 	andi	r2,r2,255
   17b88:	108000a0 	cmpeqi	r2,r2,2
   17b8c:	1000051e 	bne	r2,zero,17ba4 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   17b90:	e0bfff17 	ldw	r2,-4(fp)
   17b94:	00c00044 	movi	r3,1
   17b98:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   17b9c:	0005883a 	mov	r2,zero
   17ba0:	00003106 	br	17c68 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17ba4:	0005303a 	rdctl	r2,status
   17ba8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17bac:	e0fffd17 	ldw	r3,-12(fp)
   17bb0:	00bfff84 	movi	r2,-2
   17bb4:	1884703a 	and	r2,r3,r2
   17bb8:	1001703a 	wrctl	status,r2
  
  return context;
   17bbc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17bc0:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   17bc4:	e0bffe17 	ldw	r2,-8(fp)
   17bc8:	10800117 	ldw	r2,4(r2)
   17bcc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   17bd0:	e0bffc17 	ldw	r2,-16(fp)
   17bd4:	1080058b 	ldhu	r2,22(r2)
   17bd8:	10bfffcc 	andi	r2,r2,65535
   17bdc:	10001926 	beq	r2,zero,17c44 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   17be0:	e0bffc17 	ldw	r2,-16(fp)
   17be4:	10800417 	ldw	r2,16(r2)
   17be8:	11000104 	addi	r4,r2,4
   17bec:	e0fffc17 	ldw	r3,-16(fp)
   17bf0:	19000415 	stw	r4,16(r3)
   17bf4:	10800017 	ldw	r2,0(r2)
   17bf8:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   17bfc:	e0bffc17 	ldw	r2,-16(fp)
   17c00:	1080058b 	ldhu	r2,22(r2)
   17c04:	10bfffc4 	addi	r2,r2,-1
   17c08:	1007883a 	mov	r3,r2
   17c0c:	e0bffc17 	ldw	r2,-16(fp)
   17c10:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   17c14:	e0bffc17 	ldw	r2,-16(fp)
   17c18:	10c00417 	ldw	r3,16(r2)
   17c1c:	e0bffc17 	ldw	r2,-16(fp)
   17c20:	10800217 	ldw	r2,8(r2)
   17c24:	1880041e 	bne	r3,r2,17c38 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   17c28:	e0bffc17 	ldw	r2,-16(fp)
   17c2c:	10c00117 	ldw	r3,4(r2)
   17c30:	e0bffc17 	ldw	r2,-16(fp)
   17c34:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   17c38:	e0bfff17 	ldw	r2,-4(fp)
   17c3c:	10000005 	stb	zero,0(r2)
   17c40:	00000406 	br	17c54 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   17c44:	e0bfff17 	ldw	r2,-4(fp)
   17c48:	00c007c4 	movi	r3,31
   17c4c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   17c50:	e03ff915 	stw	zero,-28(fp)
   17c54:	e0bffa17 	ldw	r2,-24(fp)
   17c58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17c5c:	e0bffb17 	ldw	r2,-20(fp)
   17c60:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   17c64:	e0bff917 	ldw	r2,-28(fp)
}
   17c68:	e037883a 	mov	sp,fp
   17c6c:	df000017 	ldw	fp,0(sp)
   17c70:	dec00104 	addi	sp,sp,4
   17c74:	f800283a 	ret

00017c78 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   17c78:	defff404 	addi	sp,sp,-48
   17c7c:	dfc00b15 	stw	ra,44(sp)
   17c80:	df000a15 	stw	fp,40(sp)
   17c84:	df000a04 	addi	fp,sp,40
   17c88:	e13ffe15 	stw	r4,-8(fp)
   17c8c:	2805883a 	mov	r2,r5
   17c90:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17c94:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   17c98:	d0a85503 	ldbu	r2,-24236(gp)
   17c9c:	10803fcc 	andi	r2,r2,255
   17ca0:	10000226 	beq	r2,zero,17cac <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   17ca4:	0005883a 	mov	r2,zero
   17ca8:	00005906 	br	17e10 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17cac:	0005303a 	rdctl	r2,status
   17cb0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17cb4:	e0fffd17 	ldw	r3,-12(fp)
   17cb8:	00bfff84 	movi	r2,-2
   17cbc:	1884703a 	and	r2,r3,r2
   17cc0:	1001703a 	wrctl	status,r2
  
  return context;
   17cc4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   17cc8:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   17ccc:	d0a85417 	ldw	r2,-24240(gp)
   17cd0:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   17cd4:	d0a85417 	ldw	r2,-24240(gp)
   17cd8:	10000326 	beq	r2,zero,17ce8 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   17cdc:	d0a85417 	ldw	r2,-24240(gp)
   17ce0:	10800117 	ldw	r2,4(r2)
   17ce4:	d0a85415 	stw	r2,-24240(gp)
   17ce8:	e0bff717 	ldw	r2,-36(fp)
   17cec:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17cf0:	e0bff817 	ldw	r2,-32(fp)
   17cf4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   17cf8:	e0bff617 	ldw	r2,-40(fp)
   17cfc:	10004326 	beq	r2,zero,17e0c <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17d00:	0005303a 	rdctl	r2,status
   17d04:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17d08:	e0fff917 	ldw	r3,-28(fp)
   17d0c:	00bfff84 	movi	r2,-2
   17d10:	1884703a 	and	r2,r3,r2
   17d14:	1001703a 	wrctl	status,r2
  
  return context;
   17d18:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   17d1c:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   17d20:	d0a85217 	ldw	r2,-24248(gp)
   17d24:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   17d28:	e0bffb17 	ldw	r2,-20(fp)
   17d2c:	10002d26 	beq	r2,zero,17de4 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   17d30:	d0a85217 	ldw	r2,-24248(gp)
   17d34:	10800017 	ldw	r2,0(r2)
   17d38:	d0a85215 	stw	r2,-24248(gp)
   17d3c:	e0bff717 	ldw	r2,-36(fp)
   17d40:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17d44:	e0bffa17 	ldw	r2,-24(fp)
   17d48:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   17d4c:	e0bffb17 	ldw	r2,-20(fp)
   17d50:	e0fffe17 	ldw	r3,-8(fp)
   17d54:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   17d58:	e0bfff0b 	ldhu	r2,-4(fp)
   17d5c:	1085883a 	add	r2,r2,r2
   17d60:	1085883a 	add	r2,r2,r2
   17d64:	1007883a 	mov	r3,r2
   17d68:	e0bffe17 	ldw	r2,-8(fp)
   17d6c:	10c7883a 	add	r3,r2,r3
   17d70:	e0bffb17 	ldw	r2,-20(fp)
   17d74:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   17d78:	e0bffb17 	ldw	r2,-20(fp)
   17d7c:	e0fffe17 	ldw	r3,-8(fp)
   17d80:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   17d84:	e0bffb17 	ldw	r2,-20(fp)
   17d88:	e0fffe17 	ldw	r3,-8(fp)
   17d8c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   17d90:	e0bffb17 	ldw	r2,-20(fp)
   17d94:	e0ffff0b 	ldhu	r3,-4(fp)
   17d98:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   17d9c:	e0bffb17 	ldw	r2,-20(fp)
   17da0:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   17da4:	e0bff617 	ldw	r2,-40(fp)
   17da8:	00c00084 	movi	r3,2
   17dac:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   17db0:	e0bff617 	ldw	r2,-40(fp)
   17db4:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   17db8:	e0bff617 	ldw	r2,-40(fp)
   17dbc:	e0fffb17 	ldw	r3,-20(fp)
   17dc0:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   17dc4:	e0bff617 	ldw	r2,-40(fp)
   17dc8:	00c00fc4 	movi	r3,63
   17dcc:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   17dd0:	e0bff617 	ldw	r2,-40(fp)
   17dd4:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   17dd8:	e13ff617 	ldw	r4,-40(fp)
   17ddc:	0014fc00 	call	14fc0 <OS_EventWaitListInit>
   17de0:	00000a06 	br	17e0c <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   17de4:	d0e85417 	ldw	r3,-24240(gp)
   17de8:	e0bff617 	ldw	r2,-40(fp)
   17dec:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   17df0:	e0bff617 	ldw	r2,-40(fp)
   17df4:	d0a85415 	stw	r2,-24240(gp)
   17df8:	e0bff717 	ldw	r2,-36(fp)
   17dfc:	e0bffc15 	stw	r2,-16(fp)
   17e00:	e0bffc17 	ldw	r2,-16(fp)
   17e04:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   17e08:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   17e0c:	e0bff617 	ldw	r2,-40(fp)
}
   17e10:	e037883a 	mov	sp,fp
   17e14:	dfc00117 	ldw	ra,4(sp)
   17e18:	df000017 	ldw	fp,0(sp)
   17e1c:	dec00204 	addi	sp,sp,8
   17e20:	f800283a 	ret

00017e24 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   17e24:	defff204 	addi	sp,sp,-56
   17e28:	dfc00d15 	stw	ra,52(sp)
   17e2c:	df000c15 	stw	fp,48(sp)
   17e30:	df000c04 	addi	fp,sp,48
   17e34:	e13ffd15 	stw	r4,-12(fp)
   17e38:	2805883a 	mov	r2,r5
   17e3c:	e1bfff15 	stw	r6,-4(fp)
   17e40:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   17e44:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   17e48:	e0bfff17 	ldw	r2,-4(fp)
   17e4c:	1000021e 	bne	r2,zero,17e58 <OSQDel+0x34>
        return (pevent);
   17e50:	e0bffd17 	ldw	r2,-12(fp)
   17e54:	00008e06 	br	18090 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   17e58:	e0bffd17 	ldw	r2,-12(fp)
   17e5c:	1000051e 	bne	r2,zero,17e74 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   17e60:	e0bfff17 	ldw	r2,-4(fp)
   17e64:	00c00104 	movi	r3,4
   17e68:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17e6c:	e0bffd17 	ldw	r2,-12(fp)
   17e70:	00008706 	br	18090 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   17e74:	e0bffd17 	ldw	r2,-12(fp)
   17e78:	10800003 	ldbu	r2,0(r2)
   17e7c:	10803fcc 	andi	r2,r2,255
   17e80:	108000a0 	cmpeqi	r2,r2,2
   17e84:	1000051e 	bne	r2,zero,17e9c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   17e88:	e0bfff17 	ldw	r2,-4(fp)
   17e8c:	00c00044 	movi	r3,1
   17e90:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17e94:	e0bffd17 	ldw	r2,-12(fp)
   17e98:	00007d06 	br	18090 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   17e9c:	d0a85503 	ldbu	r2,-24236(gp)
   17ea0:	10803fcc 	andi	r2,r2,255
   17ea4:	10000526 	beq	r2,zero,17ebc <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   17ea8:	e0bfff17 	ldw	r2,-4(fp)
   17eac:	00c003c4 	movi	r3,15
   17eb0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   17eb4:	e0bffd17 	ldw	r2,-12(fp)
   17eb8:	00007506 	br	18090 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17ebc:	0005303a 	rdctl	r2,status
   17ec0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17ec4:	e0fffc17 	ldw	r3,-16(fp)
   17ec8:	00bfff84 	movi	r2,-2
   17ecc:	1884703a 	and	r2,r3,r2
   17ed0:	1001703a 	wrctl	status,r2
  
  return context;
   17ed4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   17ed8:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   17edc:	e0bffd17 	ldw	r2,-12(fp)
   17ee0:	10800283 	ldbu	r2,10(r2)
   17ee4:	10803fcc 	andi	r2,r2,255
   17ee8:	10000326 	beq	r2,zero,17ef8 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   17eec:	00800044 	movi	r2,1
   17ef0:	e0bff405 	stb	r2,-48(fp)
   17ef4:	00000106 	br	17efc <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   17ef8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   17efc:	e0bffe03 	ldbu	r2,-8(fp)
   17f00:	10000326 	beq	r2,zero,17f10 <OSQDel+0xec>
   17f04:	10800060 	cmpeqi	r2,r2,1
   17f08:	1000301e 	bne	r2,zero,17fcc <OSQDel+0x1a8>
   17f0c:	00005506 	br	18064 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   17f10:	e0bff403 	ldbu	r2,-48(fp)
   17f14:	10001e1e 	bne	r2,zero,17f90 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   17f18:	e0bffd17 	ldw	r2,-12(fp)
   17f1c:	00c00fc4 	movi	r3,63
   17f20:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   17f24:	e0bffd17 	ldw	r2,-12(fp)
   17f28:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   17f2c:	e0bffd17 	ldw	r2,-12(fp)
   17f30:	10800117 	ldw	r2,4(r2)
   17f34:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   17f38:	d0e85217 	ldw	r3,-24248(gp)
   17f3c:	e0bff817 	ldw	r2,-32(fp)
   17f40:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   17f44:	e0bff817 	ldw	r2,-32(fp)
   17f48:	d0a85215 	stw	r2,-24248(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   17f4c:	e0bffd17 	ldw	r2,-12(fp)
   17f50:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   17f54:	d0e85417 	ldw	r3,-24240(gp)
   17f58:	e0bffd17 	ldw	r2,-12(fp)
   17f5c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   17f60:	e0bffd17 	ldw	r2,-12(fp)
   17f64:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   17f68:	e0bffd17 	ldw	r2,-12(fp)
   17f6c:	d0a85415 	stw	r2,-24240(gp)
   17f70:	e0bff617 	ldw	r2,-40(fp)
   17f74:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17f78:	e0bff717 	ldw	r2,-36(fp)
   17f7c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   17f80:	e0bfff17 	ldw	r2,-4(fp)
   17f84:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   17f88:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   17f8c:	00003f06 	br	1808c <OSQDel+0x268>
   17f90:	e0bff617 	ldw	r2,-40(fp)
   17f94:	e0bff915 	stw	r2,-28(fp)
   17f98:	e0bff917 	ldw	r2,-28(fp)
   17f9c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   17fa0:	e0bfff17 	ldw	r2,-4(fp)
   17fa4:	00c01244 	movi	r3,73
   17fa8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   17fac:	e0bffd17 	ldw	r2,-12(fp)
   17fb0:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   17fb4:	00003506 	br	1808c <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   17fb8:	000f883a 	mov	r7,zero
   17fbc:	01800104 	movi	r6,4
   17fc0:	000b883a 	mov	r5,zero
   17fc4:	e13ffd17 	ldw	r4,-12(fp)
   17fc8:	0014a100 	call	14a10 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   17fcc:	e0bffd17 	ldw	r2,-12(fp)
   17fd0:	10800283 	ldbu	r2,10(r2)
   17fd4:	10803fcc 	andi	r2,r2,255
   17fd8:	103ff71e 	bne	r2,zero,17fb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017fb8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   17fdc:	e0bffd17 	ldw	r2,-12(fp)
   17fe0:	00c00fc4 	movi	r3,63
   17fe4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   17fe8:	e0bffd17 	ldw	r2,-12(fp)
   17fec:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   17ff0:	e0bffd17 	ldw	r2,-12(fp)
   17ff4:	10800117 	ldw	r2,4(r2)
   17ff8:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   17ffc:	d0e85217 	ldw	r3,-24248(gp)
   18000:	e0bff817 	ldw	r2,-32(fp)
   18004:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   18008:	e0bff817 	ldw	r2,-32(fp)
   1800c:	d0a85215 	stw	r2,-24248(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   18010:	e0bffd17 	ldw	r2,-12(fp)
   18014:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   18018:	d0e85417 	ldw	r3,-24240(gp)
   1801c:	e0bffd17 	ldw	r2,-12(fp)
   18020:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   18024:	e0bffd17 	ldw	r2,-12(fp)
   18028:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1802c:	e0bffd17 	ldw	r2,-12(fp)
   18030:	d0a85415 	stw	r2,-24240(gp)
   18034:	e0bff617 	ldw	r2,-40(fp)
   18038:	e0bffa15 	stw	r2,-24(fp)
   1803c:	e0bffa17 	ldw	r2,-24(fp)
   18040:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   18044:	e0bff403 	ldbu	r2,-48(fp)
   18048:	10800058 	cmpnei	r2,r2,1
   1804c:	1000011e 	bne	r2,zero,18054 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   18050:	001545c0 	call	1545c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   18054:	e0bfff17 	ldw	r2,-4(fp)
   18058:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   1805c:	e03ff515 	stw	zero,-44(fp)
             break;
   18060:	00000a06 	br	1808c <OSQDel+0x268>
   18064:	e0bff617 	ldw	r2,-40(fp)
   18068:	e0bffb15 	stw	r2,-20(fp)
   1806c:	e0bffb17 	ldw	r2,-20(fp)
   18070:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   18074:	e0bfff17 	ldw	r2,-4(fp)
   18078:	00c001c4 	movi	r3,7
   1807c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   18080:	e0bffd17 	ldw	r2,-12(fp)
   18084:	e0bff515 	stw	r2,-44(fp)
             break;
   18088:	0001883a 	nop
    }
    return (pevent_return);
   1808c:	e0bff517 	ldw	r2,-44(fp)
}
   18090:	e037883a 	mov	sp,fp
   18094:	dfc00117 	ldw	ra,4(sp)
   18098:	df000017 	ldw	fp,0(sp)
   1809c:	dec00204 	addi	sp,sp,8
   180a0:	f800283a 	ret

000180a4 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   180a4:	defffa04 	addi	sp,sp,-24
   180a8:	df000515 	stw	fp,20(sp)
   180ac:	df000504 	addi	fp,sp,20
   180b0:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   180b4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   180b8:	e0bfff17 	ldw	r2,-4(fp)
   180bc:	1000021e 	bne	r2,zero,180c8 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   180c0:	00800104 	movi	r2,4
   180c4:	00002106 	br	1814c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   180c8:	e0bfff17 	ldw	r2,-4(fp)
   180cc:	10800003 	ldbu	r2,0(r2)
   180d0:	10803fcc 	andi	r2,r2,255
   180d4:	108000a0 	cmpeqi	r2,r2,2
   180d8:	1000021e 	bne	r2,zero,180e4 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   180dc:	00800044 	movi	r2,1
   180e0:	00001a06 	br	1814c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   180e4:	0005303a 	rdctl	r2,status
   180e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   180ec:	e0fffd17 	ldw	r3,-12(fp)
   180f0:	00bfff84 	movi	r2,-2
   180f4:	1884703a 	and	r2,r3,r2
   180f8:	1001703a 	wrctl	status,r2
  
  return context;
   180fc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   18100:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   18104:	e0bfff17 	ldw	r2,-4(fp)
   18108:	10800117 	ldw	r2,4(r2)
   1810c:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   18110:	e0bffc17 	ldw	r2,-16(fp)
   18114:	10c00117 	ldw	r3,4(r2)
   18118:	e0bffc17 	ldw	r2,-16(fp)
   1811c:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   18120:	e0bffc17 	ldw	r2,-16(fp)
   18124:	10c00117 	ldw	r3,4(r2)
   18128:	e0bffc17 	ldw	r2,-16(fp)
   1812c:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   18130:	e0bffc17 	ldw	r2,-16(fp)
   18134:	1000058d 	sth	zero,22(r2)
   18138:	e0bffb17 	ldw	r2,-20(fp)
   1813c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18140:	e0bffe17 	ldw	r2,-8(fp)
   18144:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18148:	0005883a 	mov	r2,zero
}
   1814c:	e037883a 	mov	sp,fp
   18150:	df000017 	ldw	fp,0(sp)
   18154:	dec00104 	addi	sp,sp,4
   18158:	f800283a 	ret

0001815c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1815c:	defff304 	addi	sp,sp,-52
   18160:	dfc00c15 	stw	ra,48(sp)
   18164:	df000b15 	stw	fp,44(sp)
   18168:	df000b04 	addi	fp,sp,44
   1816c:	e13ffd15 	stw	r4,-12(fp)
   18170:	2805883a 	mov	r2,r5
   18174:	e1bfff15 	stw	r6,-4(fp)
   18178:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1817c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   18180:	e0bfff17 	ldw	r2,-4(fp)
   18184:	1000021e 	bne	r2,zero,18190 <OSQPend+0x34>
        return ((void *)0);
   18188:	0005883a 	mov	r2,zero
   1818c:	00009106 	br	183d4 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   18190:	e0bffd17 	ldw	r2,-12(fp)
   18194:	1000051e 	bne	r2,zero,181ac <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18198:	e0bfff17 	ldw	r2,-4(fp)
   1819c:	00c00104 	movi	r3,4
   181a0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   181a4:	0005883a 	mov	r2,zero
   181a8:	00008a06 	br	183d4 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   181ac:	e0bffd17 	ldw	r2,-12(fp)
   181b0:	10800003 	ldbu	r2,0(r2)
   181b4:	10803fcc 	andi	r2,r2,255
   181b8:	108000a0 	cmpeqi	r2,r2,2
   181bc:	1000051e 	bne	r2,zero,181d4 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   181c0:	e0bfff17 	ldw	r2,-4(fp)
   181c4:	00c00044 	movi	r3,1
   181c8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   181cc:	0005883a 	mov	r2,zero
   181d0:	00008006 	br	183d4 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   181d4:	d0a85503 	ldbu	r2,-24236(gp)
   181d8:	10803fcc 	andi	r2,r2,255
   181dc:	10000526 	beq	r2,zero,181f4 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   181e0:	e0bfff17 	ldw	r2,-4(fp)
   181e4:	00c00084 	movi	r3,2
   181e8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   181ec:	0005883a 	mov	r2,zero
   181f0:	00007806 	br	183d4 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   181f4:	d0a84703 	ldbu	r2,-24292(gp)
   181f8:	10803fcc 	andi	r2,r2,255
   181fc:	10000526 	beq	r2,zero,18214 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   18200:	e0bfff17 	ldw	r2,-4(fp)
   18204:	00c00344 	movi	r3,13
   18208:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1820c:	0005883a 	mov	r2,zero
   18210:	00007006 	br	183d4 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18214:	0005303a 	rdctl	r2,status
   18218:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1821c:	e0fffc17 	ldw	r3,-16(fp)
   18220:	00bfff84 	movi	r2,-2
   18224:	1884703a 	and	r2,r3,r2
   18228:	1001703a 	wrctl	status,r2
  
  return context;
   1822c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18230:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   18234:	e0bffd17 	ldw	r2,-12(fp)
   18238:	10800117 	ldw	r2,4(r2)
   1823c:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   18240:	e0bff817 	ldw	r2,-32(fp)
   18244:	1080058b 	ldhu	r2,22(r2)
   18248:	10bfffcc 	andi	r2,r2,65535
   1824c:	10001e26 	beq	r2,zero,182c8 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   18250:	e0bff817 	ldw	r2,-32(fp)
   18254:	10800417 	ldw	r2,16(r2)
   18258:	11000104 	addi	r4,r2,4
   1825c:	e0fff817 	ldw	r3,-32(fp)
   18260:	19000415 	stw	r4,16(r3)
   18264:	10800017 	ldw	r2,0(r2)
   18268:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1826c:	e0bff817 	ldw	r2,-32(fp)
   18270:	1080058b 	ldhu	r2,22(r2)
   18274:	10bfffc4 	addi	r2,r2,-1
   18278:	1007883a 	mov	r3,r2
   1827c:	e0bff817 	ldw	r2,-32(fp)
   18280:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   18284:	e0bff817 	ldw	r2,-32(fp)
   18288:	10c00417 	ldw	r3,16(r2)
   1828c:	e0bff817 	ldw	r2,-32(fp)
   18290:	10800217 	ldw	r2,8(r2)
   18294:	1880041e 	bne	r3,r2,182a8 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   18298:	e0bff817 	ldw	r2,-32(fp)
   1829c:	10c00117 	ldw	r3,4(r2)
   182a0:	e0bff817 	ldw	r2,-32(fp)
   182a4:	10c00415 	stw	r3,16(r2)
   182a8:	e0bff617 	ldw	r2,-40(fp)
   182ac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   182b0:	e0bff717 	ldw	r2,-36(fp)
   182b4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   182b8:	e0bfff17 	ldw	r2,-4(fp)
   182bc:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   182c0:	e0bff517 	ldw	r2,-44(fp)
   182c4:	00004306 	br	183d4 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   182c8:	d0a85617 	ldw	r2,-24232(gp)
   182cc:	d0e85617 	ldw	r3,-24232(gp)
   182d0:	18c00c03 	ldbu	r3,48(r3)
   182d4:	18c00114 	ori	r3,r3,4
   182d8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   182dc:	d0a85617 	ldw	r2,-24232(gp)
   182e0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   182e4:	d0a85617 	ldw	r2,-24232(gp)
   182e8:	e0fffe0b 	ldhu	r3,-8(fp)
   182ec:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   182f0:	e13ffd17 	ldw	r4,-12(fp)
   182f4:	0014ba80 	call	14ba8 <OS_EventTaskWait>
   182f8:	e0bff617 	ldw	r2,-40(fp)
   182fc:	e0bffb15 	stw	r2,-20(fp)
   18300:	e0bffb17 	ldw	r2,-20(fp)
   18304:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   18308:	001545c0 	call	1545c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1830c:	0005303a 	rdctl	r2,status
   18310:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18314:	e0fff917 	ldw	r3,-28(fp)
   18318:	00bfff84 	movi	r2,-2
   1831c:	1884703a 	and	r2,r3,r2
   18320:	1001703a 	wrctl	status,r2
  
  return context;
   18324:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   18328:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1832c:	d0a85617 	ldw	r2,-24232(gp)
   18330:	10800c43 	ldbu	r2,49(r2)
   18334:	10803fcc 	andi	r2,r2,255
   18338:	10000326 	beq	r2,zero,18348 <OSQPend+0x1ec>
   1833c:	108000a0 	cmpeqi	r2,r2,2
   18340:	1000071e 	bne	r2,zero,18360 <OSQPend+0x204>
   18344:	00000b06 	br	18374 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   18348:	d0a85617 	ldw	r2,-24232(gp)
   1834c:	10800917 	ldw	r2,36(r2)
   18350:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   18354:	e0bfff17 	ldw	r2,-4(fp)
   18358:	10000005 	stb	zero,0(r2)
             break;
   1835c:	00000e06 	br	18398 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   18360:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   18364:	e0bfff17 	ldw	r2,-4(fp)
   18368:	00c00384 	movi	r3,14
   1836c:	10c00005 	stb	r3,0(r2)
             break;
   18370:	00000906 	br	18398 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   18374:	d0a85617 	ldw	r2,-24232(gp)
   18378:	e17ffd17 	ldw	r5,-12(fp)
   1837c:	1009883a 	mov	r4,r2
   18380:	0014e080 	call	14e08 <OS_EventTaskRemove>
             pmsg = (void *)0;
   18384:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   18388:	e0bfff17 	ldw	r2,-4(fp)
   1838c:	00c00284 	movi	r3,10
   18390:	10c00005 	stb	r3,0(r2)
             break;
   18394:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   18398:	d0a85617 	ldw	r2,-24232(gp)
   1839c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   183a0:	d0a85617 	ldw	r2,-24232(gp)
   183a4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   183a8:	d0a85617 	ldw	r2,-24232(gp)
   183ac:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   183b0:	d0a85617 	ldw	r2,-24232(gp)
   183b4:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   183b8:	d0a85617 	ldw	r2,-24232(gp)
   183bc:	10000915 	stw	zero,36(r2)
   183c0:	e0bff617 	ldw	r2,-40(fp)
   183c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   183c8:	e0bffa17 	ldw	r2,-24(fp)
   183cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   183d0:	e0bff517 	ldw	r2,-44(fp)
}
   183d4:	e037883a 	mov	sp,fp
   183d8:	dfc00117 	ldw	ra,4(sp)
   183dc:	df000017 	ldw	fp,0(sp)
   183e0:	dec00204 	addi	sp,sp,8
   183e4:	f800283a 	ret

000183e8 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   183e8:	defff604 	addi	sp,sp,-40
   183ec:	dfc00915 	stw	ra,36(sp)
   183f0:	df000815 	stw	fp,32(sp)
   183f4:	df000804 	addi	fp,sp,32
   183f8:	e13ffd15 	stw	r4,-12(fp)
   183fc:	2805883a 	mov	r2,r5
   18400:	e1bfff15 	stw	r6,-4(fp)
   18404:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18408:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1840c:	e0bfff17 	ldw	r2,-4(fp)
   18410:	1000021e 	bne	r2,zero,1841c <OSQPendAbort+0x34>
        return (0);
   18414:	0005883a 	mov	r2,zero
   18418:	00004906 	br	18540 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1841c:	e0bffd17 	ldw	r2,-12(fp)
   18420:	1000051e 	bne	r2,zero,18438 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18424:	e0bfff17 	ldw	r2,-4(fp)
   18428:	00c00104 	movi	r3,4
   1842c:	10c00005 	stb	r3,0(r2)
        return (0);
   18430:	0005883a 	mov	r2,zero
   18434:	00004206 	br	18540 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   18438:	e0bffd17 	ldw	r2,-12(fp)
   1843c:	10800003 	ldbu	r2,0(r2)
   18440:	10803fcc 	andi	r2,r2,255
   18444:	108000a0 	cmpeqi	r2,r2,2
   18448:	1000051e 	bne	r2,zero,18460 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1844c:	e0bfff17 	ldw	r2,-4(fp)
   18450:	00c00044 	movi	r3,1
   18454:	10c00005 	stb	r3,0(r2)
        return (0);
   18458:	0005883a 	mov	r2,zero
   1845c:	00003806 	br	18540 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18460:	0005303a 	rdctl	r2,status
   18464:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18468:	e0fffc17 	ldw	r3,-16(fp)
   1846c:	00bfff84 	movi	r2,-2
   18470:	1884703a 	and	r2,r3,r2
   18474:	1001703a 	wrctl	status,r2
  
  return context;
   18478:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1847c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   18480:	e0bffd17 	ldw	r2,-12(fp)
   18484:	10800283 	ldbu	r2,10(r2)
   18488:	10803fcc 	andi	r2,r2,255
   1848c:	10002526 	beq	r2,zero,18524 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   18490:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   18494:	e0bffe03 	ldbu	r2,-8(fp)
   18498:	10800060 	cmpeqi	r2,r2,1
   1849c:	10000e26 	beq	r2,zero,184d8 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   184a0:	00000806 	br	184c4 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   184a4:	01c00084 	movi	r7,2
   184a8:	01800104 	movi	r6,4
   184ac:	000b883a 	mov	r5,zero
   184b0:	e13ffd17 	ldw	r4,-12(fp)
   184b4:	0014a100 	call	14a10 <OS_EventTaskRdy>
                     nbr_tasks++;
   184b8:	e0bff803 	ldbu	r2,-32(fp)
   184bc:	10800044 	addi	r2,r2,1
   184c0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   184c4:	e0bffd17 	ldw	r2,-12(fp)
   184c8:	10800283 	ldbu	r2,10(r2)
   184cc:	10803fcc 	andi	r2,r2,255
   184d0:	103ff41e 	bne	r2,zero,184a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70184a4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   184d4:	00000906 	br	184fc <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   184d8:	01c00084 	movi	r7,2
   184dc:	01800104 	movi	r6,4
   184e0:	000b883a 	mov	r5,zero
   184e4:	e13ffd17 	ldw	r4,-12(fp)
   184e8:	0014a100 	call	14a10 <OS_EventTaskRdy>
                 nbr_tasks++;
   184ec:	e0bff803 	ldbu	r2,-32(fp)
   184f0:	10800044 	addi	r2,r2,1
   184f4:	e0bff805 	stb	r2,-32(fp)
                 break;
   184f8:	0001883a 	nop
   184fc:	e0bff917 	ldw	r2,-28(fp)
   18500:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18504:	e0bffa17 	ldw	r2,-24(fp)
   18508:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   1850c:	001545c0 	call	1545c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   18510:	e0bfff17 	ldw	r2,-4(fp)
   18514:	00c00384 	movi	r3,14
   18518:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1851c:	e0bff803 	ldbu	r2,-32(fp)
   18520:	00000706 	br	18540 <OSQPendAbort+0x158>
   18524:	e0bff917 	ldw	r2,-28(fp)
   18528:	e0bffb15 	stw	r2,-20(fp)
   1852c:	e0bffb17 	ldw	r2,-20(fp)
   18530:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   18534:	e0bfff17 	ldw	r2,-4(fp)
   18538:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   1853c:	0005883a 	mov	r2,zero
}
   18540:	e037883a 	mov	sp,fp
   18544:	dfc00117 	ldw	ra,4(sp)
   18548:	df000017 	ldw	fp,0(sp)
   1854c:	dec00204 	addi	sp,sp,8
   18550:	f800283a 	ret

00018554 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   18554:	defff604 	addi	sp,sp,-40
   18558:	dfc00915 	stw	ra,36(sp)
   1855c:	df000815 	stw	fp,32(sp)
   18560:	df000804 	addi	fp,sp,32
   18564:	e13ffe15 	stw	r4,-8(fp)
   18568:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1856c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   18570:	e0bffe17 	ldw	r2,-8(fp)
   18574:	1000021e 	bne	r2,zero,18580 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   18578:	00800104 	movi	r2,4
   1857c:	00004a06 	br	186a8 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   18580:	e0bffe17 	ldw	r2,-8(fp)
   18584:	10800003 	ldbu	r2,0(r2)
   18588:	10803fcc 	andi	r2,r2,255
   1858c:	108000a0 	cmpeqi	r2,r2,2
   18590:	1000021e 	bne	r2,zero,1859c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   18594:	00800044 	movi	r2,1
   18598:	00004306 	br	186a8 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1859c:	0005303a 	rdctl	r2,status
   185a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   185a4:	e0fffd17 	ldw	r3,-12(fp)
   185a8:	00bfff84 	movi	r2,-2
   185ac:	1884703a 	and	r2,r3,r2
   185b0:	1001703a 	wrctl	status,r2
  
  return context;
   185b4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   185b8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   185bc:	e0bffe17 	ldw	r2,-8(fp)
   185c0:	10800283 	ldbu	r2,10(r2)
   185c4:	10803fcc 	andi	r2,r2,255
   185c8:	10000c26 	beq	r2,zero,185fc <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   185cc:	000f883a 	mov	r7,zero
   185d0:	01800104 	movi	r6,4
   185d4:	e17fff17 	ldw	r5,-4(fp)
   185d8:	e13ffe17 	ldw	r4,-8(fp)
   185dc:	0014a100 	call	14a10 <OS_EventTaskRdy>
   185e0:	e0bff817 	ldw	r2,-32(fp)
   185e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   185e8:	e0bff917 	ldw	r2,-28(fp)
   185ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   185f0:	001545c0 	call	1545c <OS_Sched>
        return (OS_ERR_NONE);
   185f4:	0005883a 	mov	r2,zero
   185f8:	00002b06 	br	186a8 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   185fc:	e0bffe17 	ldw	r2,-8(fp)
   18600:	10800117 	ldw	r2,4(r2)
   18604:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   18608:	e0bffb17 	ldw	r2,-20(fp)
   1860c:	10c0058b 	ldhu	r3,22(r2)
   18610:	e0bffb17 	ldw	r2,-20(fp)
   18614:	1080050b 	ldhu	r2,20(r2)
   18618:	18ffffcc 	andi	r3,r3,65535
   1861c:	10bfffcc 	andi	r2,r2,65535
   18620:	18800636 	bltu	r3,r2,1863c <OSQPost+0xe8>
   18624:	e0bff817 	ldw	r2,-32(fp)
   18628:	e0bffa15 	stw	r2,-24(fp)
   1862c:	e0bffa17 	ldw	r2,-24(fp)
   18630:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   18634:	00800784 	movi	r2,30
   18638:	00001b06 	br	186a8 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   1863c:	e0bffb17 	ldw	r2,-20(fp)
   18640:	10800317 	ldw	r2,12(r2)
   18644:	11000104 	addi	r4,r2,4
   18648:	e0fffb17 	ldw	r3,-20(fp)
   1864c:	19000315 	stw	r4,12(r3)
   18650:	e0ffff17 	ldw	r3,-4(fp)
   18654:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   18658:	e0bffb17 	ldw	r2,-20(fp)
   1865c:	1080058b 	ldhu	r2,22(r2)
   18660:	10800044 	addi	r2,r2,1
   18664:	1007883a 	mov	r3,r2
   18668:	e0bffb17 	ldw	r2,-20(fp)
   1866c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   18670:	e0bffb17 	ldw	r2,-20(fp)
   18674:	10c00317 	ldw	r3,12(r2)
   18678:	e0bffb17 	ldw	r2,-20(fp)
   1867c:	10800217 	ldw	r2,8(r2)
   18680:	1880041e 	bne	r3,r2,18694 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   18684:	e0bffb17 	ldw	r2,-20(fp)
   18688:	10c00117 	ldw	r3,4(r2)
   1868c:	e0bffb17 	ldw	r2,-20(fp)
   18690:	10c00315 	stw	r3,12(r2)
   18694:	e0bff817 	ldw	r2,-32(fp)
   18698:	e0bffc15 	stw	r2,-16(fp)
   1869c:	e0bffc17 	ldw	r2,-16(fp)
   186a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   186a4:	0005883a 	mov	r2,zero
}
   186a8:	e037883a 	mov	sp,fp
   186ac:	dfc00117 	ldw	ra,4(sp)
   186b0:	df000017 	ldw	fp,0(sp)
   186b4:	dec00204 	addi	sp,sp,8
   186b8:	f800283a 	ret

000186bc <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   186bc:	defff604 	addi	sp,sp,-40
   186c0:	dfc00915 	stw	ra,36(sp)
   186c4:	df000815 	stw	fp,32(sp)
   186c8:	df000804 	addi	fp,sp,32
   186cc:	e13ffe15 	stw	r4,-8(fp)
   186d0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   186d4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   186d8:	e0bffe17 	ldw	r2,-8(fp)
   186dc:	1000021e 	bne	r2,zero,186e8 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   186e0:	00800104 	movi	r2,4
   186e4:	00004c06 	br	18818 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   186e8:	e0bffe17 	ldw	r2,-8(fp)
   186ec:	10800003 	ldbu	r2,0(r2)
   186f0:	10803fcc 	andi	r2,r2,255
   186f4:	108000a0 	cmpeqi	r2,r2,2
   186f8:	1000021e 	bne	r2,zero,18704 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   186fc:	00800044 	movi	r2,1
   18700:	00004506 	br	18818 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18704:	0005303a 	rdctl	r2,status
   18708:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1870c:	e0fffd17 	ldw	r3,-12(fp)
   18710:	00bfff84 	movi	r2,-2
   18714:	1884703a 	and	r2,r3,r2
   18718:	1001703a 	wrctl	status,r2
  
  return context;
   1871c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   18720:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   18724:	e0bffe17 	ldw	r2,-8(fp)
   18728:	10800283 	ldbu	r2,10(r2)
   1872c:	10803fcc 	andi	r2,r2,255
   18730:	10000c26 	beq	r2,zero,18764 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   18734:	000f883a 	mov	r7,zero
   18738:	01800104 	movi	r6,4
   1873c:	e17fff17 	ldw	r5,-4(fp)
   18740:	e13ffe17 	ldw	r4,-8(fp)
   18744:	0014a100 	call	14a10 <OS_EventTaskRdy>
   18748:	e0bff817 	ldw	r2,-32(fp)
   1874c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18750:	e0bff917 	ldw	r2,-28(fp)
   18754:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   18758:	001545c0 	call	1545c <OS_Sched>
        return (OS_ERR_NONE);
   1875c:	0005883a 	mov	r2,zero
   18760:	00002d06 	br	18818 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   18764:	e0bffe17 	ldw	r2,-8(fp)
   18768:	10800117 	ldw	r2,4(r2)
   1876c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   18770:	e0bffb17 	ldw	r2,-20(fp)
   18774:	10c0058b 	ldhu	r3,22(r2)
   18778:	e0bffb17 	ldw	r2,-20(fp)
   1877c:	1080050b 	ldhu	r2,20(r2)
   18780:	18ffffcc 	andi	r3,r3,65535
   18784:	10bfffcc 	andi	r2,r2,65535
   18788:	18800636 	bltu	r3,r2,187a4 <OSQPostFront+0xe8>
   1878c:	e0bff817 	ldw	r2,-32(fp)
   18790:	e0bffa15 	stw	r2,-24(fp)
   18794:	e0bffa17 	ldw	r2,-24(fp)
   18798:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1879c:	00800784 	movi	r2,30
   187a0:	00001d06 	br	18818 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   187a4:	e0bffb17 	ldw	r2,-20(fp)
   187a8:	10c00417 	ldw	r3,16(r2)
   187ac:	e0bffb17 	ldw	r2,-20(fp)
   187b0:	10800117 	ldw	r2,4(r2)
   187b4:	1880041e 	bne	r3,r2,187c8 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   187b8:	e0bffb17 	ldw	r2,-20(fp)
   187bc:	10c00217 	ldw	r3,8(r2)
   187c0:	e0bffb17 	ldw	r2,-20(fp)
   187c4:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   187c8:	e0bffb17 	ldw	r2,-20(fp)
   187cc:	10800417 	ldw	r2,16(r2)
   187d0:	10ffff04 	addi	r3,r2,-4
   187d4:	e0bffb17 	ldw	r2,-20(fp)
   187d8:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   187dc:	e0bffb17 	ldw	r2,-20(fp)
   187e0:	10800417 	ldw	r2,16(r2)
   187e4:	e0ffff17 	ldw	r3,-4(fp)
   187e8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   187ec:	e0bffb17 	ldw	r2,-20(fp)
   187f0:	1080058b 	ldhu	r2,22(r2)
   187f4:	10800044 	addi	r2,r2,1
   187f8:	1007883a 	mov	r3,r2
   187fc:	e0bffb17 	ldw	r2,-20(fp)
   18800:	10c0058d 	sth	r3,22(r2)
   18804:	e0bff817 	ldw	r2,-32(fp)
   18808:	e0bffc15 	stw	r2,-16(fp)
   1880c:	e0bffc17 	ldw	r2,-16(fp)
   18810:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18814:	0005883a 	mov	r2,zero
}
   18818:	e037883a 	mov	sp,fp
   1881c:	dfc00117 	ldw	ra,4(sp)
   18820:	df000017 	ldw	fp,0(sp)
   18824:	dec00204 	addi	sp,sp,8
   18828:	f800283a 	ret

0001882c <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   1882c:	defff504 	addi	sp,sp,-44
   18830:	dfc00a15 	stw	ra,40(sp)
   18834:	df000915 	stw	fp,36(sp)
   18838:	df000904 	addi	fp,sp,36
   1883c:	e13ffd15 	stw	r4,-12(fp)
   18840:	e17ffe15 	stw	r5,-8(fp)
   18844:	3005883a 	mov	r2,r6
   18848:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1884c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18850:	e0bffd17 	ldw	r2,-12(fp)
   18854:	1000021e 	bne	r2,zero,18860 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   18858:	00800104 	movi	r2,4
   1885c:	00007106 	br	18a24 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   18860:	e0bffd17 	ldw	r2,-12(fp)
   18864:	10800003 	ldbu	r2,0(r2)
   18868:	10803fcc 	andi	r2,r2,255
   1886c:	108000a0 	cmpeqi	r2,r2,2
   18870:	1000021e 	bne	r2,zero,1887c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   18874:	00800044 	movi	r2,1
   18878:	00006a06 	br	18a24 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1887c:	0005303a 	rdctl	r2,status
   18880:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18884:	e0fffc17 	ldw	r3,-16(fp)
   18888:	00bfff84 	movi	r2,-2
   1888c:	1884703a 	and	r2,r3,r2
   18890:	1001703a 	wrctl	status,r2
  
  return context;
   18894:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18898:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   1889c:	e0bffd17 	ldw	r2,-12(fp)
   188a0:	10800283 	ldbu	r2,10(r2)
   188a4:	10803fcc 	andi	r2,r2,255
   188a8:	10001d26 	beq	r2,zero,18920 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   188ac:	e0bfff03 	ldbu	r2,-4(fp)
   188b0:	1080004c 	andi	r2,r2,1
   188b4:	10000b26 	beq	r2,zero,188e4 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   188b8:	00000506 	br	188d0 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   188bc:	000f883a 	mov	r7,zero
   188c0:	01800104 	movi	r6,4
   188c4:	e17ffe17 	ldw	r5,-8(fp)
   188c8:	e13ffd17 	ldw	r4,-12(fp)
   188cc:	0014a100 	call	14a10 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   188d0:	e0bffd17 	ldw	r2,-12(fp)
   188d4:	10800283 	ldbu	r2,10(r2)
   188d8:	10803fcc 	andi	r2,r2,255
   188dc:	103ff71e 	bne	r2,zero,188bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70188bc>
   188e0:	00000506 	br	188f8 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   188e4:	000f883a 	mov	r7,zero
   188e8:	01800104 	movi	r6,4
   188ec:	e17ffe17 	ldw	r5,-8(fp)
   188f0:	e13ffd17 	ldw	r4,-12(fp)
   188f4:	0014a100 	call	14a10 <OS_EventTaskRdy>
   188f8:	e0bff717 	ldw	r2,-36(fp)
   188fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18900:	e0bff817 	ldw	r2,-32(fp)
   18904:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   18908:	e0bfff03 	ldbu	r2,-4(fp)
   1890c:	1080010c 	andi	r2,r2,4
   18910:	1000011e 	bne	r2,zero,18918 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   18914:	001545c0 	call	1545c <OS_Sched>
        }
        return (OS_ERR_NONE);
   18918:	0005883a 	mov	r2,zero
   1891c:	00004106 	br	18a24 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   18920:	e0bffd17 	ldw	r2,-12(fp)
   18924:	10800117 	ldw	r2,4(r2)
   18928:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   1892c:	e0bffa17 	ldw	r2,-24(fp)
   18930:	10c0058b 	ldhu	r3,22(r2)
   18934:	e0bffa17 	ldw	r2,-24(fp)
   18938:	1080050b 	ldhu	r2,20(r2)
   1893c:	18ffffcc 	andi	r3,r3,65535
   18940:	10bfffcc 	andi	r2,r2,65535
   18944:	18800636 	bltu	r3,r2,18960 <OSQPostOpt+0x134>
   18948:	e0bff717 	ldw	r2,-36(fp)
   1894c:	e0bff915 	stw	r2,-28(fp)
   18950:	e0bff917 	ldw	r2,-28(fp)
   18954:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   18958:	00800784 	movi	r2,30
   1895c:	00003106 	br	18a24 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   18960:	e0bfff03 	ldbu	r2,-4(fp)
   18964:	1080008c 	andi	r2,r2,2
   18968:	10001326 	beq	r2,zero,189b8 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   1896c:	e0bffa17 	ldw	r2,-24(fp)
   18970:	10c00417 	ldw	r3,16(r2)
   18974:	e0bffa17 	ldw	r2,-24(fp)
   18978:	10800117 	ldw	r2,4(r2)
   1897c:	1880041e 	bne	r3,r2,18990 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   18980:	e0bffa17 	ldw	r2,-24(fp)
   18984:	10c00217 	ldw	r3,8(r2)
   18988:	e0bffa17 	ldw	r2,-24(fp)
   1898c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   18990:	e0bffa17 	ldw	r2,-24(fp)
   18994:	10800417 	ldw	r2,16(r2)
   18998:	10ffff04 	addi	r3,r2,-4
   1899c:	e0bffa17 	ldw	r2,-24(fp)
   189a0:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   189a4:	e0bffa17 	ldw	r2,-24(fp)
   189a8:	10800417 	ldw	r2,16(r2)
   189ac:	e0fffe17 	ldw	r3,-8(fp)
   189b0:	10c00015 	stw	r3,0(r2)
   189b4:	00001006 	br	189f8 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   189b8:	e0bffa17 	ldw	r2,-24(fp)
   189bc:	10800317 	ldw	r2,12(r2)
   189c0:	11000104 	addi	r4,r2,4
   189c4:	e0fffa17 	ldw	r3,-24(fp)
   189c8:	19000315 	stw	r4,12(r3)
   189cc:	e0fffe17 	ldw	r3,-8(fp)
   189d0:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   189d4:	e0bffa17 	ldw	r2,-24(fp)
   189d8:	10c00317 	ldw	r3,12(r2)
   189dc:	e0bffa17 	ldw	r2,-24(fp)
   189e0:	10800217 	ldw	r2,8(r2)
   189e4:	1880041e 	bne	r3,r2,189f8 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   189e8:	e0bffa17 	ldw	r2,-24(fp)
   189ec:	10c00117 	ldw	r3,4(r2)
   189f0:	e0bffa17 	ldw	r2,-24(fp)
   189f4:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   189f8:	e0bffa17 	ldw	r2,-24(fp)
   189fc:	1080058b 	ldhu	r2,22(r2)
   18a00:	10800044 	addi	r2,r2,1
   18a04:	1007883a 	mov	r3,r2
   18a08:	e0bffa17 	ldw	r2,-24(fp)
   18a0c:	10c0058d 	sth	r3,22(r2)
   18a10:	e0bff717 	ldw	r2,-36(fp)
   18a14:	e0bffb15 	stw	r2,-20(fp)
   18a18:	e0bffb17 	ldw	r2,-20(fp)
   18a1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18a20:	0005883a 	mov	r2,zero
}
   18a24:	e037883a 	mov	sp,fp
   18a28:	dfc00117 	ldw	ra,4(sp)
   18a2c:	df000017 	ldw	fp,0(sp)
   18a30:	dec00204 	addi	sp,sp,8
   18a34:	f800283a 	ret

00018a38 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   18a38:	defff604 	addi	sp,sp,-40
   18a3c:	df000915 	stw	fp,36(sp)
   18a40:	df000904 	addi	fp,sp,36
   18a44:	e13ffe15 	stw	r4,-8(fp)
   18a48:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   18a4c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   18a50:	e0bffe17 	ldw	r2,-8(fp)
   18a54:	1000021e 	bne	r2,zero,18a60 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   18a58:	00800104 	movi	r2,4
   18a5c:	00004906 	br	18b84 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   18a60:	e0bfff17 	ldw	r2,-4(fp)
   18a64:	1000021e 	bne	r2,zero,18a70 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   18a68:	00800244 	movi	r2,9
   18a6c:	00004506 	br	18b84 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   18a70:	e0bffe17 	ldw	r2,-8(fp)
   18a74:	10800003 	ldbu	r2,0(r2)
   18a78:	10803fcc 	andi	r2,r2,255
   18a7c:	108000a0 	cmpeqi	r2,r2,2
   18a80:	1000021e 	bne	r2,zero,18a8c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   18a84:	00800044 	movi	r2,1
   18a88:	00003e06 	br	18b84 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18a8c:	0005303a 	rdctl	r2,status
   18a90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18a94:	e0fffd17 	ldw	r3,-12(fp)
   18a98:	00bfff84 	movi	r2,-2
   18a9c:	1884703a 	and	r2,r3,r2
   18aa0:	1001703a 	wrctl	status,r2
  
  return context;
   18aa4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   18aa8:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   18aac:	e0bffe17 	ldw	r2,-8(fp)
   18ab0:	10c00283 	ldbu	r3,10(r2)
   18ab4:	e0bfff17 	ldw	r2,-4(fp)
   18ab8:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   18abc:	e0bffe17 	ldw	r2,-8(fp)
   18ac0:	108002c4 	addi	r2,r2,11
   18ac4:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   18ac8:	e0bfff17 	ldw	r2,-4(fp)
   18acc:	10800204 	addi	r2,r2,8
   18ad0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18ad4:	e03ff705 	stb	zero,-36(fp)
   18ad8:	00000b06 	br	18b08 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   18adc:	e0bff917 	ldw	r2,-28(fp)
   18ae0:	10c00044 	addi	r3,r2,1
   18ae4:	e0fff915 	stw	r3,-28(fp)
   18ae8:	e0fff817 	ldw	r3,-32(fp)
   18aec:	19000044 	addi	r4,r3,1
   18af0:	e13ff815 	stw	r4,-32(fp)
   18af4:	18c00003 	ldbu	r3,0(r3)
   18af8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   18afc:	e0bff703 	ldbu	r2,-36(fp)
   18b00:	10800044 	addi	r2,r2,1
   18b04:	e0bff705 	stb	r2,-36(fp)
   18b08:	e0bff703 	ldbu	r2,-36(fp)
   18b0c:	108000f0 	cmpltui	r2,r2,3
   18b10:	103ff21e 	bne	r2,zero,18adc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018adc>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   18b14:	e0bffe17 	ldw	r2,-8(fp)
   18b18:	10800117 	ldw	r2,4(r2)
   18b1c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   18b20:	e0bffc17 	ldw	r2,-16(fp)
   18b24:	1080058b 	ldhu	r2,22(r2)
   18b28:	10bfffcc 	andi	r2,r2,65535
   18b2c:	10000626 	beq	r2,zero,18b48 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   18b30:	e0bffc17 	ldw	r2,-16(fp)
   18b34:	10800417 	ldw	r2,16(r2)
   18b38:	10c00017 	ldw	r3,0(r2)
   18b3c:	e0bfff17 	ldw	r2,-4(fp)
   18b40:	10c00015 	stw	r3,0(r2)
   18b44:	00000206 	br	18b50 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   18b48:	e0bfff17 	ldw	r2,-4(fp)
   18b4c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   18b50:	e0bffc17 	ldw	r2,-16(fp)
   18b54:	10c0058b 	ldhu	r3,22(r2)
   18b58:	e0bfff17 	ldw	r2,-4(fp)
   18b5c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   18b60:	e0bffc17 	ldw	r2,-16(fp)
   18b64:	10c0050b 	ldhu	r3,20(r2)
   18b68:	e0bfff17 	ldw	r2,-4(fp)
   18b6c:	10c0018d 	sth	r3,6(r2)
   18b70:	e0bffa17 	ldw	r2,-24(fp)
   18b74:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18b78:	e0bffb17 	ldw	r2,-20(fp)
   18b7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   18b80:	0005883a 	mov	r2,zero
}
   18b84:	e037883a 	mov	sp,fp
   18b88:	df000017 	ldw	fp,0(sp)
   18b8c:	dec00104 	addi	sp,sp,4
   18b90:	f800283a 	ret

00018b94 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   18b94:	defffb04 	addi	sp,sp,-20
   18b98:	dfc00415 	stw	ra,16(sp)
   18b9c:	df000315 	stw	fp,12(sp)
   18ba0:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   18ba4:	01407804 	movi	r5,480
   18ba8:	010000f4 	movhi	r4,3
   18bac:	212f1e04 	addi	r4,r4,-17288
   18bb0:	00153a00 	call	153a0 <OS_MemClr>
    pq1 = &OSQTbl[0];
   18bb4:	008000f4 	movhi	r2,3
   18bb8:	10af1e04 	addi	r2,r2,-17288
   18bbc:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   18bc0:	008000f4 	movhi	r2,3
   18bc4:	10af2404 	addi	r2,r2,-17264
   18bc8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   18bcc:	e03ffd0d 	sth	zero,-12(fp)
   18bd0:	00000c06 	br	18c04 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   18bd4:	e0bffe17 	ldw	r2,-8(fp)
   18bd8:	e0ffff17 	ldw	r3,-4(fp)
   18bdc:	10c00015 	stw	r3,0(r2)
        pq1++;
   18be0:	e0bffe17 	ldw	r2,-8(fp)
   18be4:	10800604 	addi	r2,r2,24
   18be8:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   18bec:	e0bfff17 	ldw	r2,-4(fp)
   18bf0:	10800604 	addi	r2,r2,24
   18bf4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   18bf8:	e0bffd0b 	ldhu	r2,-12(fp)
   18bfc:	10800044 	addi	r2,r2,1
   18c00:	e0bffd0d 	sth	r2,-12(fp)
   18c04:	e0bffd0b 	ldhu	r2,-12(fp)
   18c08:	108004f0 	cmpltui	r2,r2,19
   18c0c:	103ff11e 	bne	r2,zero,18bd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018bd4>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   18c10:	e0bffe17 	ldw	r2,-8(fp)
   18c14:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   18c18:	008000f4 	movhi	r2,3
   18c1c:	10af1e04 	addi	r2,r2,-17288
   18c20:	d0a85215 	stw	r2,-24248(gp)
#endif
}
   18c24:	0001883a 	nop
   18c28:	e037883a 	mov	sp,fp
   18c2c:	dfc00117 	ldw	ra,4(sp)
   18c30:	df000017 	ldw	fp,0(sp)
   18c34:	dec00204 	addi	sp,sp,8
   18c38:	f800283a 	ret

00018c3c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   18c3c:	defffa04 	addi	sp,sp,-24
   18c40:	df000515 	stw	fp,20(sp)
   18c44:	df000504 	addi	fp,sp,20
   18c48:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   18c4c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   18c50:	e0bfff17 	ldw	r2,-4(fp)
   18c54:	1000021e 	bne	r2,zero,18c60 <OSSemAccept+0x24>
        return (0);
   18c58:	0005883a 	mov	r2,zero
   18c5c:	00001f06 	br	18cdc <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   18c60:	e0bfff17 	ldw	r2,-4(fp)
   18c64:	10800003 	ldbu	r2,0(r2)
   18c68:	10803fcc 	andi	r2,r2,255
   18c6c:	108000e0 	cmpeqi	r2,r2,3
   18c70:	1000021e 	bne	r2,zero,18c7c <OSSemAccept+0x40>
        return (0);
   18c74:	0005883a 	mov	r2,zero
   18c78:	00001806 	br	18cdc <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18c7c:	0005303a 	rdctl	r2,status
   18c80:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18c84:	e0fffe17 	ldw	r3,-8(fp)
   18c88:	00bfff84 	movi	r2,-2
   18c8c:	1884703a 	and	r2,r3,r2
   18c90:	1001703a 	wrctl	status,r2
  
  return context;
   18c94:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   18c98:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   18c9c:	e0bfff17 	ldw	r2,-4(fp)
   18ca0:	1080020b 	ldhu	r2,8(r2)
   18ca4:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   18ca8:	e0bffd0b 	ldhu	r2,-12(fp)
   18cac:	10000626 	beq	r2,zero,18cc8 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   18cb0:	e0bfff17 	ldw	r2,-4(fp)
   18cb4:	1080020b 	ldhu	r2,8(r2)
   18cb8:	10bfffc4 	addi	r2,r2,-1
   18cbc:	1007883a 	mov	r3,r2
   18cc0:	e0bfff17 	ldw	r2,-4(fp)
   18cc4:	10c0020d 	sth	r3,8(r2)
   18cc8:	e0bffb17 	ldw	r2,-20(fp)
   18ccc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18cd0:	e0bffc17 	ldw	r2,-16(fp)
   18cd4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   18cd8:	e0bffd0b 	ldhu	r2,-12(fp)
}
   18cdc:	e037883a 	mov	sp,fp
   18ce0:	df000017 	ldw	fp,0(sp)
   18ce4:	dec00104 	addi	sp,sp,4
   18ce8:	f800283a 	ret

00018cec <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   18cec:	defff904 	addi	sp,sp,-28
   18cf0:	dfc00615 	stw	ra,24(sp)
   18cf4:	df000515 	stw	fp,20(sp)
   18cf8:	df000504 	addi	fp,sp,20
   18cfc:	2005883a 	mov	r2,r4
   18d00:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18d04:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   18d08:	d0a85503 	ldbu	r2,-24236(gp)
   18d0c:	10803fcc 	andi	r2,r2,255
   18d10:	10000226 	beq	r2,zero,18d1c <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   18d14:	0005883a 	mov	r2,zero
   18d18:	00002506 	br	18db0 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18d1c:	0005303a 	rdctl	r2,status
   18d20:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18d24:	e0fffe17 	ldw	r3,-8(fp)
   18d28:	00bfff84 	movi	r2,-2
   18d2c:	1884703a 	and	r2,r3,r2
   18d30:	1001703a 	wrctl	status,r2
  
  return context;
   18d34:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   18d38:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   18d3c:	d0a85417 	ldw	r2,-24240(gp)
   18d40:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   18d44:	d0a85417 	ldw	r2,-24240(gp)
   18d48:	10000326 	beq	r2,zero,18d58 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   18d4c:	d0a85417 	ldw	r2,-24240(gp)
   18d50:	10800117 	ldw	r2,4(r2)
   18d54:	d0a85415 	stw	r2,-24240(gp)
   18d58:	e0bffb17 	ldw	r2,-20(fp)
   18d5c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18d60:	e0bffc17 	ldw	r2,-16(fp)
   18d64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   18d68:	e0bffd17 	ldw	r2,-12(fp)
   18d6c:	10000f26 	beq	r2,zero,18dac <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   18d70:	e0bffd17 	ldw	r2,-12(fp)
   18d74:	00c000c4 	movi	r3,3
   18d78:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   18d7c:	e0bffd17 	ldw	r2,-12(fp)
   18d80:	e0ffff0b 	ldhu	r3,-4(fp)
   18d84:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   18d88:	e0bffd17 	ldw	r2,-12(fp)
   18d8c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   18d90:	e0bffd17 	ldw	r2,-12(fp)
   18d94:	00c00fc4 	movi	r3,63
   18d98:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   18d9c:	e0bffd17 	ldw	r2,-12(fp)
   18da0:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   18da4:	e13ffd17 	ldw	r4,-12(fp)
   18da8:	0014fc00 	call	14fc0 <OS_EventWaitListInit>
    }
    return (pevent);
   18dac:	e0bffd17 	ldw	r2,-12(fp)
}
   18db0:	e037883a 	mov	sp,fp
   18db4:	dfc00117 	ldw	ra,4(sp)
   18db8:	df000017 	ldw	fp,0(sp)
   18dbc:	dec00204 	addi	sp,sp,8
   18dc0:	f800283a 	ret

00018dc4 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   18dc4:	defff304 	addi	sp,sp,-52
   18dc8:	dfc00c15 	stw	ra,48(sp)
   18dcc:	df000b15 	stw	fp,44(sp)
   18dd0:	df000b04 	addi	fp,sp,44
   18dd4:	e13ffd15 	stw	r4,-12(fp)
   18dd8:	2805883a 	mov	r2,r5
   18ddc:	e1bfff15 	stw	r6,-4(fp)
   18de0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   18de4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   18de8:	e0bfff17 	ldw	r2,-4(fp)
   18dec:	1000021e 	bne	r2,zero,18df8 <OSSemDel+0x34>
        return (pevent);
   18df0:	e0bffd17 	ldw	r2,-12(fp)
   18df4:	00007e06 	br	18ff0 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   18df8:	e0bffd17 	ldw	r2,-12(fp)
   18dfc:	1000051e 	bne	r2,zero,18e14 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   18e00:	e0bfff17 	ldw	r2,-4(fp)
   18e04:	00c00104 	movi	r3,4
   18e08:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18e0c:	e0bffd17 	ldw	r2,-12(fp)
   18e10:	00007706 	br	18ff0 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   18e14:	e0bffd17 	ldw	r2,-12(fp)
   18e18:	10800003 	ldbu	r2,0(r2)
   18e1c:	10803fcc 	andi	r2,r2,255
   18e20:	108000e0 	cmpeqi	r2,r2,3
   18e24:	1000051e 	bne	r2,zero,18e3c <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   18e28:	e0bfff17 	ldw	r2,-4(fp)
   18e2c:	00c00044 	movi	r3,1
   18e30:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18e34:	e0bffd17 	ldw	r2,-12(fp)
   18e38:	00006d06 	br	18ff0 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   18e3c:	d0a85503 	ldbu	r2,-24236(gp)
   18e40:	10803fcc 	andi	r2,r2,255
   18e44:	10000526 	beq	r2,zero,18e5c <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   18e48:	e0bfff17 	ldw	r2,-4(fp)
   18e4c:	00c003c4 	movi	r3,15
   18e50:	10c00005 	stb	r3,0(r2)
        return (pevent);
   18e54:	e0bffd17 	ldw	r2,-12(fp)
   18e58:	00006506 	br	18ff0 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18e5c:	0005303a 	rdctl	r2,status
   18e60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18e64:	e0fffc17 	ldw	r3,-16(fp)
   18e68:	00bfff84 	movi	r2,-2
   18e6c:	1884703a 	and	r2,r3,r2
   18e70:	1001703a 	wrctl	status,r2
  
  return context;
   18e74:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   18e78:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   18e7c:	e0bffd17 	ldw	r2,-12(fp)
   18e80:	10800283 	ldbu	r2,10(r2)
   18e84:	10803fcc 	andi	r2,r2,255
   18e88:	10000326 	beq	r2,zero,18e98 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   18e8c:	00800044 	movi	r2,1
   18e90:	e0bff505 	stb	r2,-44(fp)
   18e94:	00000106 	br	18e9c <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   18e98:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   18e9c:	e0bffe03 	ldbu	r2,-8(fp)
   18ea0:	10000326 	beq	r2,zero,18eb0 <OSSemDel+0xec>
   18ea4:	10800060 	cmpeqi	r2,r2,1
   18ea8:	1000281e 	bne	r2,zero,18f4c <OSSemDel+0x188>
   18eac:	00004506 	br	18fc4 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   18eb0:	e0bff503 	ldbu	r2,-44(fp)
   18eb4:	1000161e 	bne	r2,zero,18f10 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   18eb8:	e0bffd17 	ldw	r2,-12(fp)
   18ebc:	00c00fc4 	movi	r3,63
   18ec0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   18ec4:	e0bffd17 	ldw	r2,-12(fp)
   18ec8:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   18ecc:	e0bffd17 	ldw	r2,-12(fp)
   18ed0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   18ed4:	d0e85417 	ldw	r3,-24240(gp)
   18ed8:	e0bffd17 	ldw	r2,-12(fp)
   18edc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   18ee0:	e0bffd17 	ldw	r2,-12(fp)
   18ee4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   18ee8:	e0bffd17 	ldw	r2,-12(fp)
   18eec:	d0a85415 	stw	r2,-24240(gp)
   18ef0:	e0bff717 	ldw	r2,-36(fp)
   18ef4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18ef8:	e0bff817 	ldw	r2,-32(fp)
   18efc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   18f00:	e0bfff17 	ldw	r2,-4(fp)
   18f04:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   18f08:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   18f0c:	00003706 	br	18fec <OSSemDel+0x228>
   18f10:	e0bff717 	ldw	r2,-36(fp)
   18f14:	e0bff915 	stw	r2,-28(fp)
   18f18:	e0bff917 	ldw	r2,-28(fp)
   18f1c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   18f20:	e0bfff17 	ldw	r2,-4(fp)
   18f24:	00c01244 	movi	r3,73
   18f28:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   18f2c:	e0bffd17 	ldw	r2,-12(fp)
   18f30:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   18f34:	00002d06 	br	18fec <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   18f38:	000f883a 	mov	r7,zero
   18f3c:	01800044 	movi	r6,1
   18f40:	000b883a 	mov	r5,zero
   18f44:	e13ffd17 	ldw	r4,-12(fp)
   18f48:	0014a100 	call	14a10 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   18f4c:	e0bffd17 	ldw	r2,-12(fp)
   18f50:	10800283 	ldbu	r2,10(r2)
   18f54:	10803fcc 	andi	r2,r2,255
   18f58:	103ff71e 	bne	r2,zero,18f38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018f38>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   18f5c:	e0bffd17 	ldw	r2,-12(fp)
   18f60:	00c00fc4 	movi	r3,63
   18f64:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   18f68:	e0bffd17 	ldw	r2,-12(fp)
   18f6c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   18f70:	e0bffd17 	ldw	r2,-12(fp)
   18f74:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   18f78:	d0e85417 	ldw	r3,-24240(gp)
   18f7c:	e0bffd17 	ldw	r2,-12(fp)
   18f80:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   18f84:	e0bffd17 	ldw	r2,-12(fp)
   18f88:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   18f8c:	e0bffd17 	ldw	r2,-12(fp)
   18f90:	d0a85415 	stw	r2,-24240(gp)
   18f94:	e0bff717 	ldw	r2,-36(fp)
   18f98:	e0bffa15 	stw	r2,-24(fp)
   18f9c:	e0bffa17 	ldw	r2,-24(fp)
   18fa0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   18fa4:	e0bff503 	ldbu	r2,-44(fp)
   18fa8:	10800058 	cmpnei	r2,r2,1
   18fac:	1000011e 	bne	r2,zero,18fb4 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   18fb0:	001545c0 	call	1545c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   18fb4:	e0bfff17 	ldw	r2,-4(fp)
   18fb8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   18fbc:	e03ff615 	stw	zero,-40(fp)
             break;
   18fc0:	00000a06 	br	18fec <OSSemDel+0x228>
   18fc4:	e0bff717 	ldw	r2,-36(fp)
   18fc8:	e0bffb15 	stw	r2,-20(fp)
   18fcc:	e0bffb17 	ldw	r2,-20(fp)
   18fd0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   18fd4:	e0bfff17 	ldw	r2,-4(fp)
   18fd8:	00c001c4 	movi	r3,7
   18fdc:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   18fe0:	e0bffd17 	ldw	r2,-12(fp)
   18fe4:	e0bff615 	stw	r2,-40(fp)
             break;
   18fe8:	0001883a 	nop
    }
    return (pevent_return);
   18fec:	e0bff617 	ldw	r2,-40(fp)
}
   18ff0:	e037883a 	mov	sp,fp
   18ff4:	dfc00117 	ldw	ra,4(sp)
   18ff8:	df000017 	ldw	fp,0(sp)
   18ffc:	dec00204 	addi	sp,sp,8
   19000:	f800283a 	ret

00019004 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   19004:	defff504 	addi	sp,sp,-44
   19008:	dfc00a15 	stw	ra,40(sp)
   1900c:	df000915 	stw	fp,36(sp)
   19010:	df000904 	addi	fp,sp,36
   19014:	e13ffd15 	stw	r4,-12(fp)
   19018:	2805883a 	mov	r2,r5
   1901c:	e1bfff15 	stw	r6,-4(fp)
   19020:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19024:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   19028:	e0bfff17 	ldw	r2,-4(fp)
   1902c:	10007226 	beq	r2,zero,191f8 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19030:	e0bffd17 	ldw	r2,-12(fp)
   19034:	1000041e 	bne	r2,zero,19048 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   19038:	e0bfff17 	ldw	r2,-4(fp)
   1903c:	00c00104 	movi	r3,4
   19040:	10c00005 	stb	r3,0(r2)
        return;
   19044:	00006d06 	br	191fc <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   19048:	e0bffd17 	ldw	r2,-12(fp)
   1904c:	10800003 	ldbu	r2,0(r2)
   19050:	10803fcc 	andi	r2,r2,255
   19054:	108000e0 	cmpeqi	r2,r2,3
   19058:	1000041e 	bne	r2,zero,1906c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   1905c:	e0bfff17 	ldw	r2,-4(fp)
   19060:	00c00044 	movi	r3,1
   19064:	10c00005 	stb	r3,0(r2)
        return;
   19068:	00006406 	br	191fc <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   1906c:	d0a85503 	ldbu	r2,-24236(gp)
   19070:	10803fcc 	andi	r2,r2,255
   19074:	10000426 	beq	r2,zero,19088 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   19078:	e0bfff17 	ldw	r2,-4(fp)
   1907c:	00c00084 	movi	r3,2
   19080:	10c00005 	stb	r3,0(r2)
        return;
   19084:	00005d06 	br	191fc <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   19088:	d0a84703 	ldbu	r2,-24292(gp)
   1908c:	10803fcc 	andi	r2,r2,255
   19090:	10000426 	beq	r2,zero,190a4 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   19094:	e0bfff17 	ldw	r2,-4(fp)
   19098:	00c00344 	movi	r3,13
   1909c:	10c00005 	stb	r3,0(r2)
        return;
   190a0:	00005606 	br	191fc <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   190a4:	0005303a 	rdctl	r2,status
   190a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   190ac:	e0fffc17 	ldw	r3,-16(fp)
   190b0:	00bfff84 	movi	r2,-2
   190b4:	1884703a 	and	r2,r3,r2
   190b8:	1001703a 	wrctl	status,r2
  
  return context;
   190bc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   190c0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   190c4:	e0bffd17 	ldw	r2,-12(fp)
   190c8:	1080020b 	ldhu	r2,8(r2)
   190cc:	10bfffcc 	andi	r2,r2,65535
   190d0:	10000d26 	beq	r2,zero,19108 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   190d4:	e0bffd17 	ldw	r2,-12(fp)
   190d8:	1080020b 	ldhu	r2,8(r2)
   190dc:	10bfffc4 	addi	r2,r2,-1
   190e0:	1007883a 	mov	r3,r2
   190e4:	e0bffd17 	ldw	r2,-12(fp)
   190e8:	10c0020d 	sth	r3,8(r2)
   190ec:	e0bff717 	ldw	r2,-36(fp)
   190f0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   190f4:	e0bff817 	ldw	r2,-32(fp)
   190f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   190fc:	e0bfff17 	ldw	r2,-4(fp)
   19100:	10000005 	stb	zero,0(r2)
        return;
   19104:	00003d06 	br	191fc <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   19108:	d0a85617 	ldw	r2,-24232(gp)
   1910c:	d0e85617 	ldw	r3,-24232(gp)
   19110:	18c00c03 	ldbu	r3,48(r3)
   19114:	18c00054 	ori	r3,r3,1
   19118:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1911c:	d0a85617 	ldw	r2,-24232(gp)
   19120:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   19124:	d0a85617 	ldw	r2,-24232(gp)
   19128:	e0fffe0b 	ldhu	r3,-8(fp)
   1912c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   19130:	e13ffd17 	ldw	r4,-12(fp)
   19134:	0014ba80 	call	14ba8 <OS_EventTaskWait>
   19138:	e0bff717 	ldw	r2,-36(fp)
   1913c:	e0bffb15 	stw	r2,-20(fp)
   19140:	e0bffb17 	ldw	r2,-20(fp)
   19144:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   19148:	001545c0 	call	1545c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1914c:	0005303a 	rdctl	r2,status
   19150:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19154:	e0fff917 	ldw	r3,-28(fp)
   19158:	00bfff84 	movi	r2,-2
   1915c:	1884703a 	and	r2,r3,r2
   19160:	1001703a 	wrctl	status,r2
  
  return context;
   19164:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   19168:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1916c:	d0a85617 	ldw	r2,-24232(gp)
   19170:	10800c43 	ldbu	r2,49(r2)
   19174:	10803fcc 	andi	r2,r2,255
   19178:	10000326 	beq	r2,zero,19188 <OSSemPend+0x184>
   1917c:	108000a0 	cmpeqi	r2,r2,2
   19180:	1000041e 	bne	r2,zero,19194 <OSSemPend+0x190>
   19184:	00000706 	br	191a4 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   19188:	e0bfff17 	ldw	r2,-4(fp)
   1918c:	10000005 	stb	zero,0(r2)
             break;
   19190:	00000c06 	br	191c4 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   19194:	e0bfff17 	ldw	r2,-4(fp)
   19198:	00c00384 	movi	r3,14
   1919c:	10c00005 	stb	r3,0(r2)
             break;
   191a0:	00000806 	br	191c4 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   191a4:	d0a85617 	ldw	r2,-24232(gp)
   191a8:	e17ffd17 	ldw	r5,-12(fp)
   191ac:	1009883a 	mov	r4,r2
   191b0:	0014e080 	call	14e08 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   191b4:	e0bfff17 	ldw	r2,-4(fp)
   191b8:	00c00284 	movi	r3,10
   191bc:	10c00005 	stb	r3,0(r2)
             break;
   191c0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   191c4:	d0a85617 	ldw	r2,-24232(gp)
   191c8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   191cc:	d0a85617 	ldw	r2,-24232(gp)
   191d0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   191d4:	d0a85617 	ldw	r2,-24232(gp)
   191d8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   191dc:	d0a85617 	ldw	r2,-24232(gp)
   191e0:	10000815 	stw	zero,32(r2)
   191e4:	e0bff717 	ldw	r2,-36(fp)
   191e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   191ec:	e0bffa17 	ldw	r2,-24(fp)
   191f0:	1001703a 	wrctl	status,r2
   191f4:	00000106 	br	191fc <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   191f8:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   191fc:	e037883a 	mov	sp,fp
   19200:	dfc00117 	ldw	ra,4(sp)
   19204:	df000017 	ldw	fp,0(sp)
   19208:	dec00204 	addi	sp,sp,8
   1920c:	f800283a 	ret

00019210 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   19210:	defff604 	addi	sp,sp,-40
   19214:	dfc00915 	stw	ra,36(sp)
   19218:	df000815 	stw	fp,32(sp)
   1921c:	df000804 	addi	fp,sp,32
   19220:	e13ffd15 	stw	r4,-12(fp)
   19224:	2805883a 	mov	r2,r5
   19228:	e1bfff15 	stw	r6,-4(fp)
   1922c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19230:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   19234:	e0bfff17 	ldw	r2,-4(fp)
   19238:	1000021e 	bne	r2,zero,19244 <OSSemPendAbort+0x34>
        return (0);
   1923c:	0005883a 	mov	r2,zero
   19240:	00004906 	br	19368 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19244:	e0bffd17 	ldw	r2,-12(fp)
   19248:	1000051e 	bne	r2,zero,19260 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1924c:	e0bfff17 	ldw	r2,-4(fp)
   19250:	00c00104 	movi	r3,4
   19254:	10c00005 	stb	r3,0(r2)
        return (0);
   19258:	0005883a 	mov	r2,zero
   1925c:	00004206 	br	19368 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   19260:	e0bffd17 	ldw	r2,-12(fp)
   19264:	10800003 	ldbu	r2,0(r2)
   19268:	10803fcc 	andi	r2,r2,255
   1926c:	108000e0 	cmpeqi	r2,r2,3
   19270:	1000051e 	bne	r2,zero,19288 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   19274:	e0bfff17 	ldw	r2,-4(fp)
   19278:	00c00044 	movi	r3,1
   1927c:	10c00005 	stb	r3,0(r2)
        return (0);
   19280:	0005883a 	mov	r2,zero
   19284:	00003806 	br	19368 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19288:	0005303a 	rdctl	r2,status
   1928c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19290:	e0fffc17 	ldw	r3,-16(fp)
   19294:	00bfff84 	movi	r2,-2
   19298:	1884703a 	and	r2,r3,r2
   1929c:	1001703a 	wrctl	status,r2
  
  return context;
   192a0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   192a4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   192a8:	e0bffd17 	ldw	r2,-12(fp)
   192ac:	10800283 	ldbu	r2,10(r2)
   192b0:	10803fcc 	andi	r2,r2,255
   192b4:	10002526 	beq	r2,zero,1934c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   192b8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   192bc:	e0bffe03 	ldbu	r2,-8(fp)
   192c0:	10800060 	cmpeqi	r2,r2,1
   192c4:	10000e26 	beq	r2,zero,19300 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   192c8:	00000806 	br	192ec <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   192cc:	01c00084 	movi	r7,2
   192d0:	01800044 	movi	r6,1
   192d4:	000b883a 	mov	r5,zero
   192d8:	e13ffd17 	ldw	r4,-12(fp)
   192dc:	0014a100 	call	14a10 <OS_EventTaskRdy>
                     nbr_tasks++;
   192e0:	e0bff803 	ldbu	r2,-32(fp)
   192e4:	10800044 	addi	r2,r2,1
   192e8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   192ec:	e0bffd17 	ldw	r2,-12(fp)
   192f0:	10800283 	ldbu	r2,10(r2)
   192f4:	10803fcc 	andi	r2,r2,255
   192f8:	103ff41e 	bne	r2,zero,192cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70192cc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   192fc:	00000906 	br	19324 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   19300:	01c00084 	movi	r7,2
   19304:	01800044 	movi	r6,1
   19308:	000b883a 	mov	r5,zero
   1930c:	e13ffd17 	ldw	r4,-12(fp)
   19310:	0014a100 	call	14a10 <OS_EventTaskRdy>
                 nbr_tasks++;
   19314:	e0bff803 	ldbu	r2,-32(fp)
   19318:	10800044 	addi	r2,r2,1
   1931c:	e0bff805 	stb	r2,-32(fp)
                 break;
   19320:	0001883a 	nop
   19324:	e0bff917 	ldw	r2,-28(fp)
   19328:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1932c:	e0bffa17 	ldw	r2,-24(fp)
   19330:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   19334:	001545c0 	call	1545c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   19338:	e0bfff17 	ldw	r2,-4(fp)
   1933c:	00c00384 	movi	r3,14
   19340:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   19344:	e0bff803 	ldbu	r2,-32(fp)
   19348:	00000706 	br	19368 <OSSemPendAbort+0x158>
   1934c:	e0bff917 	ldw	r2,-28(fp)
   19350:	e0bffb15 	stw	r2,-20(fp)
   19354:	e0bffb17 	ldw	r2,-20(fp)
   19358:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1935c:	e0bfff17 	ldw	r2,-4(fp)
   19360:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   19364:	0005883a 	mov	r2,zero
}
   19368:	e037883a 	mov	sp,fp
   1936c:	dfc00117 	ldw	ra,4(sp)
   19370:	df000017 	ldw	fp,0(sp)
   19374:	dec00204 	addi	sp,sp,8
   19378:	f800283a 	ret

0001937c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   1937c:	defff804 	addi	sp,sp,-32
   19380:	dfc00715 	stw	ra,28(sp)
   19384:	df000615 	stw	fp,24(sp)
   19388:	df000604 	addi	fp,sp,24
   1938c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   19390:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   19394:	e0bfff17 	ldw	r2,-4(fp)
   19398:	1000021e 	bne	r2,zero,193a4 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   1939c:	00800104 	movi	r2,4
   193a0:	00003506 	br	19478 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   193a4:	e0bfff17 	ldw	r2,-4(fp)
   193a8:	10800003 	ldbu	r2,0(r2)
   193ac:	10803fcc 	andi	r2,r2,255
   193b0:	108000e0 	cmpeqi	r2,r2,3
   193b4:	1000021e 	bne	r2,zero,193c0 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   193b8:	00800044 	movi	r2,1
   193bc:	00002e06 	br	19478 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   193c0:	0005303a 	rdctl	r2,status
   193c4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   193c8:	e0fffe17 	ldw	r3,-8(fp)
   193cc:	00bfff84 	movi	r2,-2
   193d0:	1884703a 	and	r2,r3,r2
   193d4:	1001703a 	wrctl	status,r2
  
  return context;
   193d8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   193dc:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   193e0:	e0bfff17 	ldw	r2,-4(fp)
   193e4:	10800283 	ldbu	r2,10(r2)
   193e8:	10803fcc 	andi	r2,r2,255
   193ec:	10000c26 	beq	r2,zero,19420 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   193f0:	000f883a 	mov	r7,zero
   193f4:	01800044 	movi	r6,1
   193f8:	000b883a 	mov	r5,zero
   193fc:	e13fff17 	ldw	r4,-4(fp)
   19400:	0014a100 	call	14a10 <OS_EventTaskRdy>
   19404:	e0bffa17 	ldw	r2,-24(fp)
   19408:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1940c:	e0bffb17 	ldw	r2,-20(fp)
   19410:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   19414:	001545c0 	call	1545c <OS_Sched>
        return (OS_ERR_NONE);
   19418:	0005883a 	mov	r2,zero
   1941c:	00001606 	br	19478 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   19420:	e0bfff17 	ldw	r2,-4(fp)
   19424:	1080020b 	ldhu	r2,8(r2)
   19428:	10ffffcc 	andi	r3,r2,65535
   1942c:	00bfffd4 	movui	r2,65535
   19430:	18800c26 	beq	r3,r2,19464 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   19434:	e0bfff17 	ldw	r2,-4(fp)
   19438:	1080020b 	ldhu	r2,8(r2)
   1943c:	10800044 	addi	r2,r2,1
   19440:	1007883a 	mov	r3,r2
   19444:	e0bfff17 	ldw	r2,-4(fp)
   19448:	10c0020d 	sth	r3,8(r2)
   1944c:	e0bffa17 	ldw	r2,-24(fp)
   19450:	e0bffc15 	stw	r2,-16(fp)
   19454:	e0bffc17 	ldw	r2,-16(fp)
   19458:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   1945c:	0005883a 	mov	r2,zero
   19460:	00000506 	br	19478 <OSSemPost+0xfc>
   19464:	e0bffa17 	ldw	r2,-24(fp)
   19468:	e0bffd15 	stw	r2,-12(fp)
   1946c:	e0bffd17 	ldw	r2,-12(fp)
   19470:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   19474:	00800c84 	movi	r2,50
}
   19478:	e037883a 	mov	sp,fp
   1947c:	dfc00117 	ldw	ra,4(sp)
   19480:	df000017 	ldw	fp,0(sp)
   19484:	dec00204 	addi	sp,sp,8
   19488:	f800283a 	ret

0001948c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   1948c:	defff704 	addi	sp,sp,-36
   19490:	df000815 	stw	fp,32(sp)
   19494:	df000804 	addi	fp,sp,32
   19498:	e13ffe15 	stw	r4,-8(fp)
   1949c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   194a0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   194a4:	e0bffe17 	ldw	r2,-8(fp)
   194a8:	1000021e 	bne	r2,zero,194b4 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   194ac:	00800104 	movi	r2,4
   194b0:	00003606 	br	1958c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   194b4:	e0bfff17 	ldw	r2,-4(fp)
   194b8:	1000021e 	bne	r2,zero,194c4 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   194bc:	00800244 	movi	r2,9
   194c0:	00003206 	br	1958c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   194c4:	e0bffe17 	ldw	r2,-8(fp)
   194c8:	10800003 	ldbu	r2,0(r2)
   194cc:	10803fcc 	andi	r2,r2,255
   194d0:	108000e0 	cmpeqi	r2,r2,3
   194d4:	1000021e 	bne	r2,zero,194e0 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   194d8:	00800044 	movi	r2,1
   194dc:	00002b06 	br	1958c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   194e0:	0005303a 	rdctl	r2,status
   194e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   194e8:	e0fffd17 	ldw	r3,-12(fp)
   194ec:	00bfff84 	movi	r2,-2
   194f0:	1884703a 	and	r2,r3,r2
   194f4:	1001703a 	wrctl	status,r2
  
  return context;
   194f8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   194fc:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   19500:	e0bffe17 	ldw	r2,-8(fp)
   19504:	10c00283 	ldbu	r3,10(r2)
   19508:	e0bfff17 	ldw	r2,-4(fp)
   1950c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   19510:	e0bffe17 	ldw	r2,-8(fp)
   19514:	108002c4 	addi	r2,r2,11
   19518:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   1951c:	e0bfff17 	ldw	r2,-4(fp)
   19520:	10800084 	addi	r2,r2,2
   19524:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   19528:	e03ffa05 	stb	zero,-24(fp)
   1952c:	00000b06 	br	1955c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   19530:	e0bff917 	ldw	r2,-28(fp)
   19534:	10c00044 	addi	r3,r2,1
   19538:	e0fff915 	stw	r3,-28(fp)
   1953c:	e0fff817 	ldw	r3,-32(fp)
   19540:	19000044 	addi	r4,r3,1
   19544:	e13ff815 	stw	r4,-32(fp)
   19548:	18c00003 	ldbu	r3,0(r3)
   1954c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   19550:	e0bffa03 	ldbu	r2,-24(fp)
   19554:	10800044 	addi	r2,r2,1
   19558:	e0bffa05 	stb	r2,-24(fp)
   1955c:	e0bffa03 	ldbu	r2,-24(fp)
   19560:	108000f0 	cmpltui	r2,r2,3
   19564:	103ff21e 	bne	r2,zero,19530 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019530>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   19568:	e0bffe17 	ldw	r2,-8(fp)
   1956c:	10c0020b 	ldhu	r3,8(r2)
   19570:	e0bfff17 	ldw	r2,-4(fp)
   19574:	10c0000d 	sth	r3,0(r2)
   19578:	e0bffb17 	ldw	r2,-20(fp)
   1957c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19580:	e0bffc17 	ldw	r2,-16(fp)
   19584:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   19588:	0005883a 	mov	r2,zero
}
   1958c:	e037883a 	mov	sp,fp
   19590:	df000017 	ldw	fp,0(sp)
   19594:	dec00104 	addi	sp,sp,4
   19598:	f800283a 	ret

0001959c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   1959c:	defff904 	addi	sp,sp,-28
   195a0:	df000615 	stw	fp,24(sp)
   195a4:	df000604 	addi	fp,sp,24
   195a8:	e13ffd15 	stw	r4,-12(fp)
   195ac:	2805883a 	mov	r2,r5
   195b0:	e1bfff15 	stw	r6,-4(fp)
   195b4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   195b8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   195bc:	e0bfff17 	ldw	r2,-4(fp)
   195c0:	10003126 	beq	r2,zero,19688 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   195c4:	e0bffd17 	ldw	r2,-12(fp)
   195c8:	1000041e 	bne	r2,zero,195dc <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   195cc:	e0bfff17 	ldw	r2,-4(fp)
   195d0:	00c00104 	movi	r3,4
   195d4:	10c00005 	stb	r3,0(r2)
        return;
   195d8:	00002c06 	br	1968c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   195dc:	e0bffd17 	ldw	r2,-12(fp)
   195e0:	10800003 	ldbu	r2,0(r2)
   195e4:	10803fcc 	andi	r2,r2,255
   195e8:	108000e0 	cmpeqi	r2,r2,3
   195ec:	1000041e 	bne	r2,zero,19600 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   195f0:	e0bfff17 	ldw	r2,-4(fp)
   195f4:	00c00044 	movi	r3,1
   195f8:	10c00005 	stb	r3,0(r2)
        return;
   195fc:	00002306 	br	1968c <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19600:	0005303a 	rdctl	r2,status
   19604:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19608:	e0fffc17 	ldw	r3,-16(fp)
   1960c:	00bfff84 	movi	r2,-2
   19610:	1884703a 	and	r2,r3,r2
   19614:	1001703a 	wrctl	status,r2
  
  return context;
   19618:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1961c:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   19620:	e0bfff17 	ldw	r2,-4(fp)
   19624:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   19628:	e0bffd17 	ldw	r2,-12(fp)
   1962c:	1080020b 	ldhu	r2,8(r2)
   19630:	10bfffcc 	andi	r2,r2,65535
   19634:	10000426 	beq	r2,zero,19648 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   19638:	e0bffd17 	ldw	r2,-12(fp)
   1963c:	e0fffe0b 	ldhu	r3,-8(fp)
   19640:	10c0020d 	sth	r3,8(r2)
   19644:	00000b06 	br	19674 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   19648:	e0bffd17 	ldw	r2,-12(fp)
   1964c:	10800283 	ldbu	r2,10(r2)
   19650:	10803fcc 	andi	r2,r2,255
   19654:	1000041e 	bne	r2,zero,19668 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   19658:	e0bffd17 	ldw	r2,-12(fp)
   1965c:	e0fffe0b 	ldhu	r3,-8(fp)
   19660:	10c0020d 	sth	r3,8(r2)
   19664:	00000306 	br	19674 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   19668:	e0bfff17 	ldw	r2,-4(fp)
   1966c:	00c01244 	movi	r3,73
   19670:	10c00005 	stb	r3,0(r2)
   19674:	e0bffa17 	ldw	r2,-24(fp)
   19678:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1967c:	e0bffb17 	ldw	r2,-20(fp)
   19680:	1001703a 	wrctl	status,r2
   19684:	00000106 	br	1968c <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   19688:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   1968c:	e037883a 	mov	sp,fp
   19690:	df000017 	ldw	fp,0(sp)
   19694:	dec00104 	addi	sp,sp,4
   19698:	f800283a 	ret

0001969c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   1969c:	defff104 	addi	sp,sp,-60
   196a0:	dfc00e15 	stw	ra,56(sp)
   196a4:	df000d15 	stw	fp,52(sp)
   196a8:	df000d04 	addi	fp,sp,52
   196ac:	2007883a 	mov	r3,r4
   196b0:	2805883a 	mov	r2,r5
   196b4:	e0fffe05 	stb	r3,-8(fp)
   196b8:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   196bc:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   196c0:	e0bffe03 	ldbu	r2,-8(fp)
   196c4:	10800530 	cmpltui	r2,r2,20
   196c8:	1000051e 	bne	r2,zero,196e0 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   196cc:	e0bffe03 	ldbu	r2,-8(fp)
   196d0:	10803fe0 	cmpeqi	r2,r2,255
   196d4:	1000021e 	bne	r2,zero,196e0 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   196d8:	00800a84 	movi	r2,42
   196dc:	00012606 	br	19b78 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   196e0:	e0bfff03 	ldbu	r2,-4(fp)
   196e4:	10800530 	cmpltui	r2,r2,20
   196e8:	1000021e 	bne	r2,zero,196f4 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   196ec:	00800a84 	movi	r2,42
   196f0:	00012106 	br	19b78 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   196f4:	0005303a 	rdctl	r2,status
   196f8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   196fc:	e0fffd17 	ldw	r3,-12(fp)
   19700:	00bfff84 	movi	r2,-2
   19704:	1884703a 	and	r2,r3,r2
   19708:	1001703a 	wrctl	status,r2
  
  return context;
   1970c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19710:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   19714:	e0ffff03 	ldbu	r3,-4(fp)
   19718:	008000f4 	movhi	r2,3
   1971c:	10b5aa04 	addi	r2,r2,-10584
   19720:	18c7883a 	add	r3,r3,r3
   19724:	18c7883a 	add	r3,r3,r3
   19728:	10c5883a 	add	r2,r2,r3
   1972c:	10800017 	ldw	r2,0(r2)
   19730:	10000626 	beq	r2,zero,1974c <OSTaskChangePrio+0xb0>
   19734:	e0bff517 	ldw	r2,-44(fp)
   19738:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1973c:	e0bff617 	ldw	r2,-40(fp)
   19740:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   19744:	00800a04 	movi	r2,40
   19748:	00010b06 	br	19b78 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   1974c:	e0bffe03 	ldbu	r2,-8(fp)
   19750:	10803fd8 	cmpnei	r2,r2,255
   19754:	1000031e 	bne	r2,zero,19764 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   19758:	d0a85617 	ldw	r2,-24232(gp)
   1975c:	10800c83 	ldbu	r2,50(r2)
   19760:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   19764:	e0fffe03 	ldbu	r3,-8(fp)
   19768:	008000f4 	movhi	r2,3
   1976c:	10b5aa04 	addi	r2,r2,-10584
   19770:	18c7883a 	add	r3,r3,r3
   19774:	18c7883a 	add	r3,r3,r3
   19778:	10c5883a 	add	r2,r2,r3
   1977c:	10800017 	ldw	r2,0(r2)
   19780:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   19784:	e0bff817 	ldw	r2,-32(fp)
   19788:	1000061e 	bne	r2,zero,197a4 <OSTaskChangePrio+0x108>
   1978c:	e0bff517 	ldw	r2,-44(fp)
   19790:	e0bff715 	stw	r2,-36(fp)
   19794:	e0bff717 	ldw	r2,-36(fp)
   19798:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   1979c:	00800a44 	movi	r2,41
   197a0:	0000f506 	br	19b78 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   197a4:	e0bff817 	ldw	r2,-32(fp)
   197a8:	10800058 	cmpnei	r2,r2,1
   197ac:	1000061e 	bne	r2,zero,197c8 <OSTaskChangePrio+0x12c>
   197b0:	e0bff517 	ldw	r2,-44(fp)
   197b4:	e0bff915 	stw	r2,-28(fp)
   197b8:	e0bff917 	ldw	r2,-28(fp)
   197bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   197c0:	008010c4 	movi	r2,67
   197c4:	0000ec06 	br	19b78 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   197c8:	e0bfff03 	ldbu	r2,-4(fp)
   197cc:	1004d0fa 	srli	r2,r2,3
   197d0:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   197d4:	e0bfff03 	ldbu	r2,-4(fp)
   197d8:	108001cc 	andi	r2,r2,7
   197dc:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   197e0:	e0bffb03 	ldbu	r2,-20(fp)
   197e4:	00c00044 	movi	r3,1
   197e8:	1884983a 	sll	r2,r3,r2
   197ec:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   197f0:	e0bffb43 	ldbu	r2,-19(fp)
   197f4:	00c00044 	movi	r3,1
   197f8:	1884983a 	sll	r2,r3,r2
   197fc:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   19800:	e0fffe03 	ldbu	r3,-8(fp)
   19804:	008000f4 	movhi	r2,3
   19808:	10b5aa04 	addi	r2,r2,-10584
   1980c:	18c7883a 	add	r3,r3,r3
   19810:	18c7883a 	add	r3,r3,r3
   19814:	10c5883a 	add	r2,r2,r3
   19818:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   1981c:	e0ffff03 	ldbu	r3,-4(fp)
   19820:	008000f4 	movhi	r2,3
   19824:	10b5aa04 	addi	r2,r2,-10584
   19828:	18c7883a 	add	r3,r3,r3
   1982c:	18c7883a 	add	r3,r3,r3
   19830:	10c5883a 	add	r2,r2,r3
   19834:	e0fff817 	ldw	r3,-32(fp)
   19838:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   1983c:	e0bff817 	ldw	r2,-32(fp)
   19840:	10800d03 	ldbu	r2,52(r2)
   19844:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   19848:	e0bff817 	ldw	r2,-32(fp)
   1984c:	10800d83 	ldbu	r2,54(r2)
   19850:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   19854:	e0bff817 	ldw	r2,-32(fp)
   19858:	10800d43 	ldbu	r2,53(r2)
   1985c:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   19860:	e0fffc03 	ldbu	r3,-16(fp)
   19864:	d0a85344 	addi	r2,gp,-24243
   19868:	1885883a 	add	r2,r3,r2
   1986c:	10c00003 	ldbu	r3,0(r2)
   19870:	e0bffc83 	ldbu	r2,-14(fp)
   19874:	1884703a 	and	r2,r3,r2
   19878:	10803fcc 	andi	r2,r2,255
   1987c:	10002826 	beq	r2,zero,19920 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   19880:	e0fffc03 	ldbu	r3,-16(fp)
   19884:	e13ffc03 	ldbu	r4,-16(fp)
   19888:	d0a85344 	addi	r2,gp,-24243
   1988c:	2085883a 	add	r2,r4,r2
   19890:	10800003 	ldbu	r2,0(r2)
   19894:	1009883a 	mov	r4,r2
   19898:	e0bffc83 	ldbu	r2,-14(fp)
   1989c:	0084303a 	nor	r2,zero,r2
   198a0:	2084703a 	and	r2,r4,r2
   198a4:	1009883a 	mov	r4,r2
   198a8:	d0a85344 	addi	r2,gp,-24243
   198ac:	1885883a 	add	r2,r3,r2
   198b0:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   198b4:	e0fffc03 	ldbu	r3,-16(fp)
   198b8:	d0a85344 	addi	r2,gp,-24243
   198bc:	1885883a 	add	r2,r3,r2
   198c0:	10800003 	ldbu	r2,0(r2)
   198c4:	10803fcc 	andi	r2,r2,255
   198c8:	1000061e 	bne	r2,zero,198e4 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   198cc:	e0bffc43 	ldbu	r2,-15(fp)
   198d0:	0084303a 	nor	r2,zero,r2
   198d4:	1007883a 	mov	r3,r2
   198d8:	d0a85303 	ldbu	r2,-24244(gp)
   198dc:	1884703a 	and	r2,r3,r2
   198e0:	d0a85305 	stb	r2,-24244(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   198e4:	d0e85303 	ldbu	r3,-24244(gp)
   198e8:	e0bffb83 	ldbu	r2,-18(fp)
   198ec:	1884b03a 	or	r2,r3,r2
   198f0:	d0a85305 	stb	r2,-24244(gp)
         OSRdyTbl[y_new] |= bitx_new;
   198f4:	e0fffb03 	ldbu	r3,-20(fp)
   198f8:	e13ffb03 	ldbu	r4,-20(fp)
   198fc:	d0a85344 	addi	r2,gp,-24243
   19900:	2085883a 	add	r2,r4,r2
   19904:	11000003 	ldbu	r4,0(r2)
   19908:	e0bffbc3 	ldbu	r2,-17(fp)
   1990c:	2084b03a 	or	r2,r4,r2
   19910:	1009883a 	mov	r4,r2
   19914:	d0a85344 	addi	r2,gp,-24243
   19918:	1885883a 	add	r2,r3,r2
   1991c:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   19920:	e0bff817 	ldw	r2,-32(fp)
   19924:	10800717 	ldw	r2,28(r2)
   19928:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   1992c:	e0bff317 	ldw	r2,-52(fp)
   19930:	10003326 	beq	r2,zero,19a00 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   19934:	e0bffc03 	ldbu	r2,-16(fp)
   19938:	e0fffc03 	ldbu	r3,-16(fp)
   1993c:	e13ff317 	ldw	r4,-52(fp)
   19940:	20c7883a 	add	r3,r4,r3
   19944:	18c002c4 	addi	r3,r3,11
   19948:	18c00003 	ldbu	r3,0(r3)
   1994c:	1809883a 	mov	r4,r3
   19950:	e0fffc83 	ldbu	r3,-14(fp)
   19954:	00c6303a 	nor	r3,zero,r3
   19958:	20c6703a 	and	r3,r4,r3
   1995c:	1809883a 	mov	r4,r3
   19960:	e0fff317 	ldw	r3,-52(fp)
   19964:	1885883a 	add	r2,r3,r2
   19968:	108002c4 	addi	r2,r2,11
   1996c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   19970:	e0bffc03 	ldbu	r2,-16(fp)
   19974:	e0fff317 	ldw	r3,-52(fp)
   19978:	1885883a 	add	r2,r3,r2
   1997c:	108002c4 	addi	r2,r2,11
   19980:	10800003 	ldbu	r2,0(r2)
   19984:	10803fcc 	andi	r2,r2,255
   19988:	1000091e 	bne	r2,zero,199b0 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   1998c:	e0bff317 	ldw	r2,-52(fp)
   19990:	10800283 	ldbu	r2,10(r2)
   19994:	1007883a 	mov	r3,r2
   19998:	e0bffc43 	ldbu	r2,-15(fp)
   1999c:	0084303a 	nor	r2,zero,r2
   199a0:	1884703a 	and	r2,r3,r2
   199a4:	1007883a 	mov	r3,r2
   199a8:	e0bff317 	ldw	r2,-52(fp)
   199ac:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   199b0:	e0bff317 	ldw	r2,-52(fp)
   199b4:	10c00283 	ldbu	r3,10(r2)
   199b8:	e0bffb83 	ldbu	r2,-18(fp)
   199bc:	1884b03a 	or	r2,r3,r2
   199c0:	1007883a 	mov	r3,r2
   199c4:	e0bff317 	ldw	r2,-52(fp)
   199c8:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   199cc:	e0bffb03 	ldbu	r2,-20(fp)
   199d0:	e0fffb03 	ldbu	r3,-20(fp)
   199d4:	e13ff317 	ldw	r4,-52(fp)
   199d8:	20c7883a 	add	r3,r4,r3
   199dc:	18c002c4 	addi	r3,r3,11
   199e0:	19000003 	ldbu	r4,0(r3)
   199e4:	e0fffbc3 	ldbu	r3,-17(fp)
   199e8:	20c6b03a 	or	r3,r4,r3
   199ec:	1809883a 	mov	r4,r3
   199f0:	e0fff317 	ldw	r3,-52(fp)
   199f4:	1885883a 	add	r2,r3,r2
   199f8:	108002c4 	addi	r2,r2,11
   199fc:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   19a00:	e0bff817 	ldw	r2,-32(fp)
   19a04:	10800817 	ldw	r2,32(r2)
   19a08:	10004226 	beq	r2,zero,19b14 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   19a0c:	e0bff817 	ldw	r2,-32(fp)
   19a10:	10800817 	ldw	r2,32(r2)
   19a14:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   19a18:	e0bff417 	ldw	r2,-48(fp)
   19a1c:	10800017 	ldw	r2,0(r2)
   19a20:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   19a24:	00003906 	br	19b0c <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   19a28:	e0bffc03 	ldbu	r2,-16(fp)
   19a2c:	e0fffc03 	ldbu	r3,-16(fp)
   19a30:	e13ff317 	ldw	r4,-52(fp)
   19a34:	20c7883a 	add	r3,r4,r3
   19a38:	18c002c4 	addi	r3,r3,11
   19a3c:	18c00003 	ldbu	r3,0(r3)
   19a40:	1809883a 	mov	r4,r3
   19a44:	e0fffc83 	ldbu	r3,-14(fp)
   19a48:	00c6303a 	nor	r3,zero,r3
   19a4c:	20c6703a 	and	r3,r4,r3
   19a50:	1809883a 	mov	r4,r3
   19a54:	e0fff317 	ldw	r3,-52(fp)
   19a58:	1885883a 	add	r2,r3,r2
   19a5c:	108002c4 	addi	r2,r2,11
   19a60:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   19a64:	e0bffc03 	ldbu	r2,-16(fp)
   19a68:	e0fff317 	ldw	r3,-52(fp)
   19a6c:	1885883a 	add	r2,r3,r2
   19a70:	108002c4 	addi	r2,r2,11
   19a74:	10800003 	ldbu	r2,0(r2)
   19a78:	10803fcc 	andi	r2,r2,255
   19a7c:	1000091e 	bne	r2,zero,19aa4 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   19a80:	e0bff317 	ldw	r2,-52(fp)
   19a84:	10800283 	ldbu	r2,10(r2)
   19a88:	1007883a 	mov	r3,r2
   19a8c:	e0bffc43 	ldbu	r2,-15(fp)
   19a90:	0084303a 	nor	r2,zero,r2
   19a94:	1884703a 	and	r2,r3,r2
   19a98:	1007883a 	mov	r3,r2
   19a9c:	e0bff317 	ldw	r2,-52(fp)
   19aa0:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   19aa4:	e0bff317 	ldw	r2,-52(fp)
   19aa8:	10c00283 	ldbu	r3,10(r2)
   19aac:	e0bffb83 	ldbu	r2,-18(fp)
   19ab0:	1884b03a 	or	r2,r3,r2
   19ab4:	1007883a 	mov	r3,r2
   19ab8:	e0bff317 	ldw	r2,-52(fp)
   19abc:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   19ac0:	e0bffb03 	ldbu	r2,-20(fp)
   19ac4:	e0fffb03 	ldbu	r3,-20(fp)
   19ac8:	e13ff317 	ldw	r4,-52(fp)
   19acc:	20c7883a 	add	r3,r4,r3
   19ad0:	18c002c4 	addi	r3,r3,11
   19ad4:	19000003 	ldbu	r4,0(r3)
   19ad8:	e0fffbc3 	ldbu	r3,-17(fp)
   19adc:	20c6b03a 	or	r3,r4,r3
   19ae0:	1809883a 	mov	r4,r3
   19ae4:	e0fff317 	ldw	r3,-52(fp)
   19ae8:	1885883a 	add	r2,r3,r2
   19aec:	108002c4 	addi	r2,r2,11
   19af0:	11000005 	stb	r4,0(r2)
            pevents++;
   19af4:	e0bff417 	ldw	r2,-48(fp)
   19af8:	10800104 	addi	r2,r2,4
   19afc:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   19b00:	e0bff417 	ldw	r2,-48(fp)
   19b04:	10800017 	ldw	r2,0(r2)
   19b08:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   19b0c:	e0bff317 	ldw	r2,-52(fp)
   19b10:	103fc51e 	bne	r2,zero,19a28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019a28>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   19b14:	e0bff817 	ldw	r2,-32(fp)
   19b18:	e0ffff03 	ldbu	r3,-4(fp)
   19b1c:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   19b20:	e0bff817 	ldw	r2,-32(fp)
   19b24:	e0fffb03 	ldbu	r3,-20(fp)
   19b28:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   19b2c:	e0bff817 	ldw	r2,-32(fp)
   19b30:	e0fffb43 	ldbu	r3,-19(fp)
   19b34:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   19b38:	e0bff817 	ldw	r2,-32(fp)
   19b3c:	e0fffb83 	ldbu	r3,-18(fp)
   19b40:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   19b44:	e0bff817 	ldw	r2,-32(fp)
   19b48:	e0fffbc3 	ldbu	r3,-17(fp)
   19b4c:	10c00d45 	stb	r3,53(r2)
   19b50:	e0bff517 	ldw	r2,-44(fp)
   19b54:	e0bffa15 	stw	r2,-24(fp)
   19b58:	e0bffa17 	ldw	r2,-24(fp)
   19b5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   19b60:	d0a84743 	ldbu	r2,-24291(gp)
   19b64:	10803fcc 	andi	r2,r2,255
   19b68:	10800058 	cmpnei	r2,r2,1
   19b6c:	1000011e 	bne	r2,zero,19b74 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   19b70:	001545c0 	call	1545c <OS_Sched>
    }
    return (OS_ERR_NONE);
   19b74:	0005883a 	mov	r2,zero
}
   19b78:	e037883a 	mov	sp,fp
   19b7c:	dfc00117 	ldw	ra,4(sp)
   19b80:	df000017 	ldw	fp,0(sp)
   19b84:	dec00204 	addi	sp,sp,8
   19b88:	f800283a 	ret

00019b8c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   19b8c:	deffee04 	addi	sp,sp,-72
   19b90:	dfc01115 	stw	ra,68(sp)
   19b94:	df001015 	stw	fp,64(sp)
   19b98:	df001004 	addi	fp,sp,64
   19b9c:	e13ffc15 	stw	r4,-16(fp)
   19ba0:	e17ffd15 	stw	r5,-12(fp)
   19ba4:	e1bffe15 	stw	r6,-8(fp)
   19ba8:	3805883a 	mov	r2,r7
   19bac:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   19bb0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   19bb4:	e0bfff03 	ldbu	r2,-4(fp)
   19bb8:	10800570 	cmpltui	r2,r2,21
   19bbc:	1000021e 	bne	r2,zero,19bc8 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   19bc0:	00800a84 	movi	r2,42
   19bc4:	00005706 	br	19d24 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19bc8:	0005303a 	rdctl	r2,status
   19bcc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19bd0:	e0fffb17 	ldw	r3,-20(fp)
   19bd4:	00bfff84 	movi	r2,-2
   19bd8:	1884703a 	and	r2,r3,r2
   19bdc:	1001703a 	wrctl	status,r2
  
  return context;
   19be0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19be4:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   19be8:	d0a85503 	ldbu	r2,-24236(gp)
   19bec:	10803fcc 	andi	r2,r2,255
   19bf0:	10000626 	beq	r2,zero,19c0c <OSTaskCreate+0x80>
   19bf4:	e0bff317 	ldw	r2,-52(fp)
   19bf8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19bfc:	e0bff417 	ldw	r2,-48(fp)
   19c00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   19c04:	00800f04 	movi	r2,60
   19c08:	00004606 	br	19d24 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   19c0c:	e0ffff03 	ldbu	r3,-4(fp)
   19c10:	008000f4 	movhi	r2,3
   19c14:	10b5aa04 	addi	r2,r2,-10584
   19c18:	18c7883a 	add	r3,r3,r3
   19c1c:	18c7883a 	add	r3,r3,r3
   19c20:	10c5883a 	add	r2,r2,r3
   19c24:	10800017 	ldw	r2,0(r2)
   19c28:	1000391e 	bne	r2,zero,19d10 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   19c2c:	e0ffff03 	ldbu	r3,-4(fp)
   19c30:	008000f4 	movhi	r2,3
   19c34:	10b5aa04 	addi	r2,r2,-10584
   19c38:	18c7883a 	add	r3,r3,r3
   19c3c:	18c7883a 	add	r3,r3,r3
   19c40:	10c5883a 	add	r2,r2,r3
   19c44:	00c00044 	movi	r3,1
   19c48:	10c00015 	stw	r3,0(r2)
   19c4c:	e0bff317 	ldw	r2,-52(fp)
   19c50:	e0bff515 	stw	r2,-44(fp)
   19c54:	e0bff517 	ldw	r2,-44(fp)
   19c58:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   19c5c:	000f883a 	mov	r7,zero
   19c60:	e1bffe17 	ldw	r6,-8(fp)
   19c64:	e17ffd17 	ldw	r5,-12(fp)
   19c68:	e13ffc17 	ldw	r4,-16(fp)
   19c6c:	001e7ac0 	call	1e7ac <OSTaskStkInit>
   19c70:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   19c74:	e0bfff03 	ldbu	r2,-4(fp)
   19c78:	d8000215 	stw	zero,8(sp)
   19c7c:	d8000115 	stw	zero,4(sp)
   19c80:	d8000015 	stw	zero,0(sp)
   19c84:	000f883a 	mov	r7,zero
   19c88:	000d883a 	mov	r6,zero
   19c8c:	e17ff717 	ldw	r5,-36(fp)
   19c90:	1009883a 	mov	r4,r2
   19c94:	001586c0 	call	1586c <OS_TCBInit>
   19c98:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   19c9c:	e0bff803 	ldbu	r2,-32(fp)
   19ca0:	1000061e 	bne	r2,zero,19cbc <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   19ca4:	d0a84743 	ldbu	r2,-24291(gp)
   19ca8:	10803fcc 	andi	r2,r2,255
   19cac:	10800058 	cmpnei	r2,r2,1
   19cb0:	1000151e 	bne	r2,zero,19d08 <OSTaskCreate+0x17c>
                OS_Sched();
   19cb4:	001545c0 	call	1545c <OS_Sched>
   19cb8:	00001306 	br	19d08 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19cbc:	0005303a 	rdctl	r2,status
   19cc0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19cc4:	e0fffa17 	ldw	r3,-24(fp)
   19cc8:	00bfff84 	movi	r2,-2
   19ccc:	1884703a 	and	r2,r3,r2
   19cd0:	1001703a 	wrctl	status,r2
  
  return context;
   19cd4:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   19cd8:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   19cdc:	e0ffff03 	ldbu	r3,-4(fp)
   19ce0:	008000f4 	movhi	r2,3
   19ce4:	10b5aa04 	addi	r2,r2,-10584
   19ce8:	18c7883a 	add	r3,r3,r3
   19cec:	18c7883a 	add	r3,r3,r3
   19cf0:	10c5883a 	add	r2,r2,r3
   19cf4:	10000015 	stw	zero,0(r2)
   19cf8:	e0bff317 	ldw	r2,-52(fp)
   19cfc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19d00:	e0bff617 	ldw	r2,-40(fp)
   19d04:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   19d08:	e0bff803 	ldbu	r2,-32(fp)
   19d0c:	00000506 	br	19d24 <OSTaskCreate+0x198>
   19d10:	e0bff317 	ldw	r2,-52(fp)
   19d14:	e0bff915 	stw	r2,-28(fp)
   19d18:	e0bff917 	ldw	r2,-28(fp)
   19d1c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   19d20:	00800a04 	movi	r2,40
}
   19d24:	e037883a 	mov	sp,fp
   19d28:	dfc00117 	ldw	ra,4(sp)
   19d2c:	df000017 	ldw	fp,0(sp)
   19d30:	dec00204 	addi	sp,sp,8
   19d34:	f800283a 	ret

00019d38 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   19d38:	deffec04 	addi	sp,sp,-80
   19d3c:	dfc01315 	stw	ra,76(sp)
   19d40:	df001215 	stw	fp,72(sp)
   19d44:	df001204 	addi	fp,sp,72
   19d48:	e13ffa15 	stw	r4,-24(fp)
   19d4c:	e17ffb15 	stw	r5,-20(fp)
   19d50:	e1bffc15 	stw	r6,-16(fp)
   19d54:	3809883a 	mov	r4,r7
   19d58:	e0c00217 	ldw	r3,8(fp)
   19d5c:	e0800617 	ldw	r2,24(fp)
   19d60:	e13ffd05 	stb	r4,-12(fp)
   19d64:	e0fffe0d 	sth	r3,-8(fp)
   19d68:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   19d6c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   19d70:	e0bffd03 	ldbu	r2,-12(fp)
   19d74:	10800570 	cmpltui	r2,r2,21
   19d78:	1000021e 	bne	r2,zero,19d84 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   19d7c:	00800a84 	movi	r2,42
   19d80:	00006106 	br	19f08 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19d84:	0005303a 	rdctl	r2,status
   19d88:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19d8c:	e0fff917 	ldw	r3,-28(fp)
   19d90:	00bfff84 	movi	r2,-2
   19d94:	1884703a 	and	r2,r3,r2
   19d98:	1001703a 	wrctl	status,r2
  
  return context;
   19d9c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   19da0:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   19da4:	d0a85503 	ldbu	r2,-24236(gp)
   19da8:	10803fcc 	andi	r2,r2,255
   19dac:	10000626 	beq	r2,zero,19dc8 <OSTaskCreateExt+0x90>
   19db0:	e0bff117 	ldw	r2,-60(fp)
   19db4:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19db8:	e0bff217 	ldw	r2,-56(fp)
   19dbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   19dc0:	00800f04 	movi	r2,60
   19dc4:	00005006 	br	19f08 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   19dc8:	e0fffd03 	ldbu	r3,-12(fp)
   19dcc:	008000f4 	movhi	r2,3
   19dd0:	10b5aa04 	addi	r2,r2,-10584
   19dd4:	18c7883a 	add	r3,r3,r3
   19dd8:	18c7883a 	add	r3,r3,r3
   19ddc:	10c5883a 	add	r2,r2,r3
   19de0:	10800017 	ldw	r2,0(r2)
   19de4:	1000431e 	bne	r2,zero,19ef4 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   19de8:	e0fffd03 	ldbu	r3,-12(fp)
   19dec:	008000f4 	movhi	r2,3
   19df0:	10b5aa04 	addi	r2,r2,-10584
   19df4:	18c7883a 	add	r3,r3,r3
   19df8:	18c7883a 	add	r3,r3,r3
   19dfc:	10c5883a 	add	r2,r2,r3
   19e00:	00c00044 	movi	r3,1
   19e04:	10c00015 	stw	r3,0(r2)
   19e08:	e0bff117 	ldw	r2,-60(fp)
   19e0c:	e0bff315 	stw	r2,-52(fp)
   19e10:	e0bff317 	ldw	r2,-52(fp)
   19e14:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   19e18:	e0bfff0b 	ldhu	r2,-4(fp)
   19e1c:	100d883a 	mov	r6,r2
   19e20:	e1400417 	ldw	r5,16(fp)
   19e24:	e1000317 	ldw	r4,12(fp)
   19e28:	001ad980 	call	1ad98 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   19e2c:	e0bfff0b 	ldhu	r2,-4(fp)
   19e30:	100f883a 	mov	r7,r2
   19e34:	e1bffc17 	ldw	r6,-16(fp)
   19e38:	e17ffb17 	ldw	r5,-20(fp)
   19e3c:	e13ffa17 	ldw	r4,-24(fp)
   19e40:	001e7ac0 	call	1e7ac <OSTaskStkInit>
   19e44:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   19e48:	e0fffd03 	ldbu	r3,-12(fp)
   19e4c:	e13ffe0b 	ldhu	r4,-8(fp)
   19e50:	e0bfff0b 	ldhu	r2,-4(fp)
   19e54:	d8800215 	stw	r2,8(sp)
   19e58:	e0800517 	ldw	r2,20(fp)
   19e5c:	d8800115 	stw	r2,4(sp)
   19e60:	e0800417 	ldw	r2,16(fp)
   19e64:	d8800015 	stw	r2,0(sp)
   19e68:	200f883a 	mov	r7,r4
   19e6c:	e1800317 	ldw	r6,12(fp)
   19e70:	e17ff517 	ldw	r5,-44(fp)
   19e74:	1809883a 	mov	r4,r3
   19e78:	001586c0 	call	1586c <OS_TCBInit>
   19e7c:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   19e80:	e0bff603 	ldbu	r2,-40(fp)
   19e84:	1000061e 	bne	r2,zero,19ea0 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   19e88:	d0a84743 	ldbu	r2,-24291(gp)
   19e8c:	10803fcc 	andi	r2,r2,255
   19e90:	10800058 	cmpnei	r2,r2,1
   19e94:	1000151e 	bne	r2,zero,19eec <OSTaskCreateExt+0x1b4>
                OS_Sched();
   19e98:	001545c0 	call	1545c <OS_Sched>
   19e9c:	00001306 	br	19eec <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19ea0:	0005303a 	rdctl	r2,status
   19ea4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19ea8:	e0fff817 	ldw	r3,-32(fp)
   19eac:	00bfff84 	movi	r2,-2
   19eb0:	1884703a 	and	r2,r3,r2
   19eb4:	1001703a 	wrctl	status,r2
  
  return context;
   19eb8:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   19ebc:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   19ec0:	e0fffd03 	ldbu	r3,-12(fp)
   19ec4:	008000f4 	movhi	r2,3
   19ec8:	10b5aa04 	addi	r2,r2,-10584
   19ecc:	18c7883a 	add	r3,r3,r3
   19ed0:	18c7883a 	add	r3,r3,r3
   19ed4:	10c5883a 	add	r2,r2,r3
   19ed8:	10000015 	stw	zero,0(r2)
   19edc:	e0bff117 	ldw	r2,-60(fp)
   19ee0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19ee4:	e0bff417 	ldw	r2,-48(fp)
   19ee8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   19eec:	e0bff603 	ldbu	r2,-40(fp)
   19ef0:	00000506 	br	19f08 <OSTaskCreateExt+0x1d0>
   19ef4:	e0bff117 	ldw	r2,-60(fp)
   19ef8:	e0bff715 	stw	r2,-36(fp)
   19efc:	e0bff717 	ldw	r2,-36(fp)
   19f00:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   19f04:	00800a04 	movi	r2,40
}
   19f08:	e037883a 	mov	sp,fp
   19f0c:	dfc00117 	ldw	ra,4(sp)
   19f10:	df000017 	ldw	fp,0(sp)
   19f14:	dec00204 	addi	sp,sp,8
   19f18:	f800283a 	ret

00019f1c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   19f1c:	defff404 	addi	sp,sp,-48
   19f20:	dfc00b15 	stw	ra,44(sp)
   19f24:	df000a15 	stw	fp,40(sp)
   19f28:	df000a04 	addi	fp,sp,40
   19f2c:	2005883a 	mov	r2,r4
   19f30:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   19f34:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   19f38:	d0a85503 	ldbu	r2,-24236(gp)
   19f3c:	10803fcc 	andi	r2,r2,255
   19f40:	10000226 	beq	r2,zero,19f4c <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   19f44:	00801004 	movi	r2,64
   19f48:	0000c006 	br	1a24c <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   19f4c:	e0bfff03 	ldbu	r2,-4(fp)
   19f50:	10800518 	cmpnei	r2,r2,20
   19f54:	1000021e 	bne	r2,zero,19f60 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   19f58:	00800f84 	movi	r2,62
   19f5c:	0000bb06 	br	1a24c <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   19f60:	e0bfff03 	ldbu	r2,-4(fp)
   19f64:	10800530 	cmpltui	r2,r2,20
   19f68:	1000051e 	bne	r2,zero,19f80 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   19f6c:	e0bfff03 	ldbu	r2,-4(fp)
   19f70:	10803fe0 	cmpeqi	r2,r2,255
   19f74:	1000021e 	bne	r2,zero,19f80 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   19f78:	00800a84 	movi	r2,42
   19f7c:	0000b306 	br	1a24c <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19f80:	0005303a 	rdctl	r2,status
   19f84:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19f88:	e0fffe17 	ldw	r3,-8(fp)
   19f8c:	00bfff84 	movi	r2,-2
   19f90:	1884703a 	and	r2,r3,r2
   19f94:	1001703a 	wrctl	status,r2
  
  return context;
   19f98:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   19f9c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   19fa0:	e0bfff03 	ldbu	r2,-4(fp)
   19fa4:	10803fd8 	cmpnei	r2,r2,255
   19fa8:	1000031e 	bne	r2,zero,19fb8 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   19fac:	d0a85617 	ldw	r2,-24232(gp)
   19fb0:	10800c83 	ldbu	r2,50(r2)
   19fb4:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   19fb8:	e0ffff03 	ldbu	r3,-4(fp)
   19fbc:	008000f4 	movhi	r2,3
   19fc0:	10b5aa04 	addi	r2,r2,-10584
   19fc4:	18c7883a 	add	r3,r3,r3
   19fc8:	18c7883a 	add	r3,r3,r3
   19fcc:	10c5883a 	add	r2,r2,r3
   19fd0:	10800017 	ldw	r2,0(r2)
   19fd4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   19fd8:	e0bff817 	ldw	r2,-32(fp)
   19fdc:	1000061e 	bne	r2,zero,19ff8 <OSTaskDel+0xdc>
   19fe0:	e0bff617 	ldw	r2,-40(fp)
   19fe4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19fe8:	e0bff717 	ldw	r2,-36(fp)
   19fec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   19ff0:	008010c4 	movi	r2,67
   19ff4:	00009506 	br	1a24c <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   19ff8:	e0bff817 	ldw	r2,-32(fp)
   19ffc:	10800058 	cmpnei	r2,r2,1
   1a000:	1000061e 	bne	r2,zero,1a01c <OSTaskDel+0x100>
   1a004:	e0bff617 	ldw	r2,-40(fp)
   1a008:	e0bff915 	stw	r2,-28(fp)
   1a00c:	e0bff917 	ldw	r2,-28(fp)
   1a010:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1a014:	00800f44 	movi	r2,61
   1a018:	00008c06 	br	1a24c <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   1a01c:	e0bff817 	ldw	r2,-32(fp)
   1a020:	10800d03 	ldbu	r2,52(r2)
   1a024:	10c03fcc 	andi	r3,r2,255
   1a028:	e0bff817 	ldw	r2,-32(fp)
   1a02c:	10800d03 	ldbu	r2,52(r2)
   1a030:	11003fcc 	andi	r4,r2,255
   1a034:	d0a85344 	addi	r2,gp,-24243
   1a038:	2085883a 	add	r2,r4,r2
   1a03c:	10800003 	ldbu	r2,0(r2)
   1a040:	1009883a 	mov	r4,r2
   1a044:	e0bff817 	ldw	r2,-32(fp)
   1a048:	10800d43 	ldbu	r2,53(r2)
   1a04c:	0084303a 	nor	r2,zero,r2
   1a050:	2084703a 	and	r2,r4,r2
   1a054:	1009883a 	mov	r4,r2
   1a058:	d0a85344 	addi	r2,gp,-24243
   1a05c:	1885883a 	add	r2,r3,r2
   1a060:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   1a064:	e0bff817 	ldw	r2,-32(fp)
   1a068:	10800d03 	ldbu	r2,52(r2)
   1a06c:	10c03fcc 	andi	r3,r2,255
   1a070:	d0a85344 	addi	r2,gp,-24243
   1a074:	1885883a 	add	r2,r3,r2
   1a078:	10800003 	ldbu	r2,0(r2)
   1a07c:	10803fcc 	andi	r2,r2,255
   1a080:	1000071e 	bne	r2,zero,1a0a0 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   1a084:	e0bff817 	ldw	r2,-32(fp)
   1a088:	10800d83 	ldbu	r2,54(r2)
   1a08c:	0084303a 	nor	r2,zero,r2
   1a090:	1007883a 	mov	r3,r2
   1a094:	d0a85303 	ldbu	r2,-24244(gp)
   1a098:	1884703a 	and	r2,r3,r2
   1a09c:	d0a85305 	stb	r2,-24244(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   1a0a0:	e0bff817 	ldw	r2,-32(fp)
   1a0a4:	10800717 	ldw	r2,28(r2)
   1a0a8:	10000526 	beq	r2,zero,1a0c0 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   1a0ac:	e0bff817 	ldw	r2,-32(fp)
   1a0b0:	10800717 	ldw	r2,28(r2)
   1a0b4:	100b883a 	mov	r5,r2
   1a0b8:	e13ff817 	ldw	r4,-32(fp)
   1a0bc:	0014e080 	call	14e08 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   1a0c0:	e0bff817 	ldw	r2,-32(fp)
   1a0c4:	10800817 	ldw	r2,32(r2)
   1a0c8:	10000526 	beq	r2,zero,1a0e0 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1a0cc:	e0bff817 	ldw	r2,-32(fp)
   1a0d0:	10800817 	ldw	r2,32(r2)
   1a0d4:	100b883a 	mov	r5,r2
   1a0d8:	e13ff817 	ldw	r4,-32(fp)
   1a0dc:	0014ec00 	call	14ec0 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   1a0e0:	e0bff817 	ldw	r2,-32(fp)
   1a0e4:	10800a17 	ldw	r2,40(r2)
   1a0e8:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   1a0ec:	e0bffb17 	ldw	r2,-20(fp)
   1a0f0:	10000226 	beq	r2,zero,1a0fc <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   1a0f4:	e13ffb17 	ldw	r4,-20(fp)
   1a0f8:	00173400 	call	17340 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   1a0fc:	e0bff817 	ldw	r2,-32(fp)
   1a100:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   1a104:	e0bff817 	ldw	r2,-32(fp)
   1a108:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   1a10c:	e0bff817 	ldw	r2,-32(fp)
   1a110:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   1a114:	d0a84703 	ldbu	r2,-24292(gp)
   1a118:	10803fcc 	andi	r2,r2,255
   1a11c:	10803fe0 	cmpeqi	r2,r2,255
   1a120:	1000031e 	bne	r2,zero,1a130 <OSTaskDel+0x214>
        OSLockNesting++;
   1a124:	d0a84703 	ldbu	r2,-24292(gp)
   1a128:	10800044 	addi	r2,r2,1
   1a12c:	d0a84705 	stb	r2,-24292(gp)
   1a130:	e0bff617 	ldw	r2,-40(fp)
   1a134:	e0bffd15 	stw	r2,-12(fp)
   1a138:	e0bffd17 	ldw	r2,-12(fp)
   1a13c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   1a140:	00149f00 	call	149f0 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a144:	0005303a 	rdctl	r2,status
   1a148:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a14c:	e0fffa17 	ldw	r3,-24(fp)
   1a150:	00bfff84 	movi	r2,-2
   1a154:	1884703a 	and	r2,r3,r2
   1a158:	1001703a 	wrctl	status,r2
  
  return context;
   1a15c:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   1a160:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   1a164:	d0a84703 	ldbu	r2,-24292(gp)
   1a168:	10803fcc 	andi	r2,r2,255
   1a16c:	10000326 	beq	r2,zero,1a17c <OSTaskDel+0x260>
        OSLockNesting--;
   1a170:	d0a84703 	ldbu	r2,-24292(gp)
   1a174:	10bfffc4 	addi	r2,r2,-1
   1a178:	d0a84705 	stb	r2,-24292(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   1a17c:	e13ff817 	ldw	r4,-32(fp)
   1a180:	001e92c0 	call	1e92c <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   1a184:	d0a84f43 	ldbu	r2,-24259(gp)
   1a188:	10bfffc4 	addi	r2,r2,-1
   1a18c:	d0a84f45 	stb	r2,-24259(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   1a190:	e0ffff03 	ldbu	r3,-4(fp)
   1a194:	008000f4 	movhi	r2,3
   1a198:	10b5aa04 	addi	r2,r2,-10584
   1a19c:	18c7883a 	add	r3,r3,r3
   1a1a0:	18c7883a 	add	r3,r3,r3
   1a1a4:	10c5883a 	add	r2,r2,r3
   1a1a8:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   1a1ac:	e0bff817 	ldw	r2,-32(fp)
   1a1b0:	10800617 	ldw	r2,24(r2)
   1a1b4:	1000071e 	bne	r2,zero,1a1d4 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   1a1b8:	e0bff817 	ldw	r2,-32(fp)
   1a1bc:	10800517 	ldw	r2,20(r2)
   1a1c0:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   1a1c4:	e0bff817 	ldw	r2,-32(fp)
   1a1c8:	10800517 	ldw	r2,20(r2)
   1a1cc:	d0a84a15 	stw	r2,-24280(gp)
   1a1d0:	00000a06 	br	1a1fc <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   1a1d4:	e0bff817 	ldw	r2,-32(fp)
   1a1d8:	10800617 	ldw	r2,24(r2)
   1a1dc:	e0fff817 	ldw	r3,-32(fp)
   1a1e0:	18c00517 	ldw	r3,20(r3)
   1a1e4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   1a1e8:	e0bff817 	ldw	r2,-32(fp)
   1a1ec:	10800517 	ldw	r2,20(r2)
   1a1f0:	e0fff817 	ldw	r3,-32(fp)
   1a1f4:	18c00617 	ldw	r3,24(r3)
   1a1f8:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   1a1fc:	d0e84e17 	ldw	r3,-24264(gp)
   1a200:	e0bff817 	ldw	r2,-32(fp)
   1a204:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   1a208:	e0bff817 	ldw	r2,-32(fp)
   1a20c:	d0a84e15 	stw	r2,-24264(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   1a210:	e0bff817 	ldw	r2,-32(fp)
   1a214:	00c00fc4 	movi	r3,63
   1a218:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1a21c:	e0bff817 	ldw	r2,-32(fp)
   1a220:	10001345 	stb	zero,77(r2)
   1a224:	e0bff617 	ldw	r2,-40(fp)
   1a228:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a22c:	e0bffc17 	ldw	r2,-16(fp)
   1a230:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1a234:	d0a84743 	ldbu	r2,-24291(gp)
   1a238:	10803fcc 	andi	r2,r2,255
   1a23c:	10800058 	cmpnei	r2,r2,1
   1a240:	1000011e 	bne	r2,zero,1a248 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   1a244:	001545c0 	call	1545c <OS_Sched>
    }
    return (OS_ERR_NONE);
   1a248:	0005883a 	mov	r2,zero
}
   1a24c:	e037883a 	mov	sp,fp
   1a250:	dfc00117 	ldw	ra,4(sp)
   1a254:	df000017 	ldw	fp,0(sp)
   1a258:	dec00204 	addi	sp,sp,8
   1a25c:	f800283a 	ret

0001a260 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   1a260:	defff504 	addi	sp,sp,-44
   1a264:	df000a15 	stw	fp,40(sp)
   1a268:	df000a04 	addi	fp,sp,40
   1a26c:	2005883a 	mov	r2,r4
   1a270:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a274:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   1a278:	e0bfff03 	ldbu	r2,-4(fp)
   1a27c:	10800518 	cmpnei	r2,r2,20
   1a280:	1000021e 	bne	r2,zero,1a28c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   1a284:	00800f84 	movi	r2,62
   1a288:	00004506 	br	1a3a0 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1a28c:	e0bfff03 	ldbu	r2,-4(fp)
   1a290:	10800530 	cmpltui	r2,r2,20
   1a294:	1000051e 	bne	r2,zero,1a2ac <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   1a298:	e0bfff03 	ldbu	r2,-4(fp)
   1a29c:	10803fe0 	cmpeqi	r2,r2,255
   1a2a0:	1000021e 	bne	r2,zero,1a2ac <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   1a2a4:	00800a84 	movi	r2,42
   1a2a8:	00003d06 	br	1a3a0 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   1a2ac:	e0bfff03 	ldbu	r2,-4(fp)
   1a2b0:	10803fd8 	cmpnei	r2,r2,255
   1a2b4:	1000111e 	bne	r2,zero,1a2fc <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a2b8:	0005303a 	rdctl	r2,status
   1a2bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a2c0:	e0fff917 	ldw	r3,-28(fp)
   1a2c4:	00bfff84 	movi	r2,-2
   1a2c8:	1884703a 	and	r2,r3,r2
   1a2cc:	1001703a 	wrctl	status,r2
  
  return context;
   1a2d0:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   1a2d4:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   1a2d8:	d0a85617 	ldw	r2,-24232(gp)
   1a2dc:	10800dc3 	ldbu	r2,55(r2)
   1a2e0:	e0bff805 	stb	r2,-32(fp)
   1a2e4:	e0bff617 	ldw	r2,-40(fp)
   1a2e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a2ec:	e0bffe17 	ldw	r2,-8(fp)
   1a2f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   1a2f4:	e0bff803 	ldbu	r2,-32(fp)
   1a2f8:	00002906 	br	1a3a0 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a2fc:	0005303a 	rdctl	r2,status
   1a300:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a304:	e0fff717 	ldw	r3,-36(fp)
   1a308:	00bfff84 	movi	r2,-2
   1a30c:	1884703a 	and	r2,r3,r2
   1a310:	1001703a 	wrctl	status,r2
  
  return context;
   1a314:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   1a318:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1a31c:	e0ffff03 	ldbu	r3,-4(fp)
   1a320:	008000f4 	movhi	r2,3
   1a324:	10b5aa04 	addi	r2,r2,-10584
   1a328:	18c7883a 	add	r3,r3,r3
   1a32c:	18c7883a 	add	r3,r3,r3
   1a330:	10c5883a 	add	r2,r2,r3
   1a334:	10800017 	ldw	r2,0(r2)
   1a338:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   1a33c:	e0bffb17 	ldw	r2,-20(fp)
   1a340:	1000061e 	bne	r2,zero,1a35c <OSTaskDelReq+0xfc>
   1a344:	e0bff617 	ldw	r2,-40(fp)
   1a348:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a34c:	e0bffa17 	ldw	r2,-24(fp)
   1a350:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   1a354:	008010c4 	movi	r2,67
   1a358:	00001106 	br	1a3a0 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   1a35c:	e0bffb17 	ldw	r2,-20(fp)
   1a360:	10800058 	cmpnei	r2,r2,1
   1a364:	1000061e 	bne	r2,zero,1a380 <OSTaskDelReq+0x120>
   1a368:	e0bff617 	ldw	r2,-40(fp)
   1a36c:	e0bffc15 	stw	r2,-16(fp)
   1a370:	e0bffc17 	ldw	r2,-16(fp)
   1a374:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1a378:	00800f44 	movi	r2,61
   1a37c:	00000806 	br	1a3a0 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   1a380:	e0bffb17 	ldw	r2,-20(fp)
   1a384:	00c00fc4 	movi	r3,63
   1a388:	10c00dc5 	stb	r3,55(r2)
   1a38c:	e0bff617 	ldw	r2,-40(fp)
   1a390:	e0bffd15 	stw	r2,-12(fp)
   1a394:	e0bffd17 	ldw	r2,-12(fp)
   1a398:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1a39c:	0005883a 	mov	r2,zero
}
   1a3a0:	e037883a 	mov	sp,fp
   1a3a4:	df000017 	ldw	fp,0(sp)
   1a3a8:	dec00104 	addi	sp,sp,4
   1a3ac:	f800283a 	ret

0001a3b0 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1a3b0:	defff404 	addi	sp,sp,-48
   1a3b4:	dfc00b15 	stw	ra,44(sp)
   1a3b8:	df000a15 	stw	fp,40(sp)
   1a3bc:	df000a04 	addi	fp,sp,40
   1a3c0:	2005883a 	mov	r2,r4
   1a3c4:	e17ffe15 	stw	r5,-8(fp)
   1a3c8:	e1bfff15 	stw	r6,-4(fp)
   1a3cc:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   1a3d0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   1a3d4:	e0bfff17 	ldw	r2,-4(fp)
   1a3d8:	1000021e 	bne	r2,zero,1a3e4 <OSTaskNameGet+0x34>
        return (0);
   1a3dc:	0005883a 	mov	r2,zero
   1a3e0:	00005406 	br	1a534 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   1a3e4:	e0bffd03 	ldbu	r2,-12(fp)
   1a3e8:	10800570 	cmpltui	r2,r2,21
   1a3ec:	1000081e 	bne	r2,zero,1a410 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   1a3f0:	e0bffd03 	ldbu	r2,-12(fp)
   1a3f4:	10803fe0 	cmpeqi	r2,r2,255
   1a3f8:	1000051e 	bne	r2,zero,1a410 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   1a3fc:	e0bfff17 	ldw	r2,-4(fp)
   1a400:	00c00a84 	movi	r3,42
   1a404:	10c00005 	stb	r3,0(r2)
            return (0);
   1a408:	0005883a 	mov	r2,zero
   1a40c:	00004906 	br	1a534 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   1a410:	e0bffe17 	ldw	r2,-8(fp)
   1a414:	1000051e 	bne	r2,zero,1a42c <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   1a418:	e0bfff17 	ldw	r2,-4(fp)
   1a41c:	00c00304 	movi	r3,12
   1a420:	10c00005 	stb	r3,0(r2)
        return (0);
   1a424:	0005883a 	mov	r2,zero
   1a428:	00004206 	br	1a534 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   1a42c:	d0a85503 	ldbu	r2,-24236(gp)
   1a430:	10803fcc 	andi	r2,r2,255
   1a434:	10000526 	beq	r2,zero,1a44c <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   1a438:	e0bfff17 	ldw	r2,-4(fp)
   1a43c:	00c00444 	movi	r3,17
   1a440:	10c00005 	stb	r3,0(r2)
        return (0);
   1a444:	0005883a 	mov	r2,zero
   1a448:	00003a06 	br	1a534 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a44c:	0005303a 	rdctl	r2,status
   1a450:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a454:	e0fffc17 	ldw	r3,-16(fp)
   1a458:	00bfff84 	movi	r2,-2
   1a45c:	1884703a 	and	r2,r3,r2
   1a460:	1001703a 	wrctl	status,r2
  
  return context;
   1a464:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1a468:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   1a46c:	e0bffd03 	ldbu	r2,-12(fp)
   1a470:	10803fd8 	cmpnei	r2,r2,255
   1a474:	1000031e 	bne	r2,zero,1a484 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   1a478:	d0a85617 	ldw	r2,-24232(gp)
   1a47c:	10800c83 	ldbu	r2,50(r2)
   1a480:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1a484:	e0fffd03 	ldbu	r3,-12(fp)
   1a488:	008000f4 	movhi	r2,3
   1a48c:	10b5aa04 	addi	r2,r2,-10584
   1a490:	18c7883a 	add	r3,r3,r3
   1a494:	18c7883a 	add	r3,r3,r3
   1a498:	10c5883a 	add	r2,r2,r3
   1a49c:	10800017 	ldw	r2,0(r2)
   1a4a0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   1a4a4:	e0bff817 	ldw	r2,-32(fp)
   1a4a8:	1000091e 	bne	r2,zero,1a4d0 <OSTaskNameGet+0x120>
   1a4ac:	e0bff617 	ldw	r2,-40(fp)
   1a4b0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a4b4:	e0bff717 	ldw	r2,-36(fp)
   1a4b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1a4bc:	e0bfff17 	ldw	r2,-4(fp)
   1a4c0:	00c010c4 	movi	r3,67
   1a4c4:	10c00005 	stb	r3,0(r2)
        return (0);
   1a4c8:	0005883a 	mov	r2,zero
   1a4cc:	00001906 	br	1a534 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   1a4d0:	e0bff817 	ldw	r2,-32(fp)
   1a4d4:	10800058 	cmpnei	r2,r2,1
   1a4d8:	1000091e 	bne	r2,zero,1a500 <OSTaskNameGet+0x150>
   1a4dc:	e0bff617 	ldw	r2,-40(fp)
   1a4e0:	e0bff915 	stw	r2,-28(fp)
   1a4e4:	e0bff917 	ldw	r2,-28(fp)
   1a4e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1a4ec:	e0bfff17 	ldw	r2,-4(fp)
   1a4f0:	00c010c4 	movi	r3,67
   1a4f4:	10c00005 	stb	r3,0(r2)
        return (0);
   1a4f8:	0005883a 	mov	r2,zero
   1a4fc:	00000d06 	br	1a534 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   1a500:	e0bff817 	ldw	r2,-32(fp)
   1a504:	10801304 	addi	r2,r2,76
   1a508:	100b883a 	mov	r5,r2
   1a50c:	e13ffe17 	ldw	r4,-8(fp)
   1a510:	00155a00 	call	155a0 <OS_StrCopy>
   1a514:	e0bffb05 	stb	r2,-20(fp)
   1a518:	e0bff617 	ldw	r2,-40(fp)
   1a51c:	e0bffa15 	stw	r2,-24(fp)
   1a520:	e0bffa17 	ldw	r2,-24(fp)
   1a524:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1a528:	e0bfff17 	ldw	r2,-4(fp)
   1a52c:	10000005 	stb	zero,0(r2)
    return (len);
   1a530:	e0bffb03 	ldbu	r2,-20(fp)
}
   1a534:	e037883a 	mov	sp,fp
   1a538:	dfc00117 	ldw	ra,4(sp)
   1a53c:	df000017 	ldw	fp,0(sp)
   1a540:	dec00204 	addi	sp,sp,8
   1a544:	f800283a 	ret

0001a548 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1a548:	defff304 	addi	sp,sp,-52
   1a54c:	dfc00c15 	stw	ra,48(sp)
   1a550:	df000b15 	stw	fp,44(sp)
   1a554:	df000b04 	addi	fp,sp,44
   1a558:	2005883a 	mov	r2,r4
   1a55c:	e17ffe15 	stw	r5,-8(fp)
   1a560:	e1bfff15 	stw	r6,-4(fp)
   1a564:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1a568:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1a56c:	e0bfff17 	ldw	r2,-4(fp)
   1a570:	10005c26 	beq	r2,zero,1a6e4 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   1a574:	e0bffd03 	ldbu	r2,-12(fp)
   1a578:	10800570 	cmpltui	r2,r2,21
   1a57c:	1000071e 	bne	r2,zero,1a59c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   1a580:	e0bffd03 	ldbu	r2,-12(fp)
   1a584:	10803fe0 	cmpeqi	r2,r2,255
   1a588:	1000041e 	bne	r2,zero,1a59c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   1a58c:	e0bfff17 	ldw	r2,-4(fp)
   1a590:	00c00a84 	movi	r3,42
   1a594:	10c00005 	stb	r3,0(r2)
            return;
   1a598:	00005306 	br	1a6e8 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   1a59c:	e0bffe17 	ldw	r2,-8(fp)
   1a5a0:	1000041e 	bne	r2,zero,1a5b4 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   1a5a4:	e0bfff17 	ldw	r2,-4(fp)
   1a5a8:	00c00304 	movi	r3,12
   1a5ac:	10c00005 	stb	r3,0(r2)
        return;
   1a5b0:	00004d06 	br	1a6e8 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   1a5b4:	d0a85503 	ldbu	r2,-24236(gp)
   1a5b8:	10803fcc 	andi	r2,r2,255
   1a5bc:	10000426 	beq	r2,zero,1a5d0 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   1a5c0:	e0bfff17 	ldw	r2,-4(fp)
   1a5c4:	00c00484 	movi	r3,18
   1a5c8:	10c00005 	stb	r3,0(r2)
        return;
   1a5cc:	00004606 	br	1a6e8 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a5d0:	0005303a 	rdctl	r2,status
   1a5d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a5d8:	e0fffc17 	ldw	r3,-16(fp)
   1a5dc:	00bfff84 	movi	r2,-2
   1a5e0:	1884703a 	and	r2,r3,r2
   1a5e4:	1001703a 	wrctl	status,r2
  
  return context;
   1a5e8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1a5ec:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   1a5f0:	e0bffd03 	ldbu	r2,-12(fp)
   1a5f4:	10803fd8 	cmpnei	r2,r2,255
   1a5f8:	1000031e 	bne	r2,zero,1a608 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   1a5fc:	d0a85617 	ldw	r2,-24232(gp)
   1a600:	10800c83 	ldbu	r2,50(r2)
   1a604:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1a608:	e0fffd03 	ldbu	r3,-12(fp)
   1a60c:	008000f4 	movhi	r2,3
   1a610:	10b5aa04 	addi	r2,r2,-10584
   1a614:	18c7883a 	add	r3,r3,r3
   1a618:	18c7883a 	add	r3,r3,r3
   1a61c:	10c5883a 	add	r2,r2,r3
   1a620:	10800017 	ldw	r2,0(r2)
   1a624:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   1a628:	e0bff717 	ldw	r2,-36(fp)
   1a62c:	1000081e 	bne	r2,zero,1a650 <OSTaskNameSet+0x108>
   1a630:	e0bff517 	ldw	r2,-44(fp)
   1a634:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a638:	e0bff617 	ldw	r2,-40(fp)
   1a63c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1a640:	e0bfff17 	ldw	r2,-4(fp)
   1a644:	00c010c4 	movi	r3,67
   1a648:	10c00005 	stb	r3,0(r2)
        return;
   1a64c:	00002606 	br	1a6e8 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   1a650:	e0bff717 	ldw	r2,-36(fp)
   1a654:	10800058 	cmpnei	r2,r2,1
   1a658:	1000081e 	bne	r2,zero,1a67c <OSTaskNameSet+0x134>
   1a65c:	e0bff517 	ldw	r2,-44(fp)
   1a660:	e0bff815 	stw	r2,-32(fp)
   1a664:	e0bff817 	ldw	r2,-32(fp)
   1a668:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1a66c:	e0bfff17 	ldw	r2,-4(fp)
   1a670:	00c010c4 	movi	r3,67
   1a674:	10c00005 	stb	r3,0(r2)
        return;
   1a678:	00001b06 	br	1a6e8 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   1a67c:	e13ffe17 	ldw	r4,-8(fp)
   1a680:	00156140 	call	15614 <OS_StrLen>
   1a684:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   1a688:	e0bffa03 	ldbu	r2,-24(fp)
   1a68c:	10800830 	cmpltui	r2,r2,32
   1a690:	1000081e 	bne	r2,zero,1a6b4 <OSTaskNameSet+0x16c>
   1a694:	e0bff517 	ldw	r2,-44(fp)
   1a698:	e0bff915 	stw	r2,-28(fp)
   1a69c:	e0bff917 	ldw	r2,-28(fp)
   1a6a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   1a6a4:	e0bfff17 	ldw	r2,-4(fp)
   1a6a8:	00c01044 	movi	r3,65
   1a6ac:	10c00005 	stb	r3,0(r2)
        return;
   1a6b0:	00000d06 	br	1a6e8 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   1a6b4:	e0bff717 	ldw	r2,-36(fp)
   1a6b8:	10801304 	addi	r2,r2,76
   1a6bc:	e17ffe17 	ldw	r5,-8(fp)
   1a6c0:	1009883a 	mov	r4,r2
   1a6c4:	00155a00 	call	155a0 <OS_StrCopy>
   1a6c8:	e0bff517 	ldw	r2,-44(fp)
   1a6cc:	e0bffb15 	stw	r2,-20(fp)
   1a6d0:	e0bffb17 	ldw	r2,-20(fp)
   1a6d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1a6d8:	e0bfff17 	ldw	r2,-4(fp)
   1a6dc:	10000005 	stb	zero,0(r2)
   1a6e0:	00000106 	br	1a6e8 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   1a6e4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   1a6e8:	e037883a 	mov	sp,fp
   1a6ec:	dfc00117 	ldw	ra,4(sp)
   1a6f0:	df000017 	ldw	fp,0(sp)
   1a6f4:	dec00204 	addi	sp,sp,8
   1a6f8:	f800283a 	ret

0001a6fc <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   1a6fc:	defff404 	addi	sp,sp,-48
   1a700:	dfc00b15 	stw	ra,44(sp)
   1a704:	df000a15 	stw	fp,40(sp)
   1a708:	df000a04 	addi	fp,sp,40
   1a70c:	2005883a 	mov	r2,r4
   1a710:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1a714:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   1a718:	e0bfff03 	ldbu	r2,-4(fp)
   1a71c:	10800530 	cmpltui	r2,r2,20
   1a720:	1000021e 	bne	r2,zero,1a72c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1a724:	00800a84 	movi	r2,42
   1a728:	00006406 	br	1a8bc <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a72c:	0005303a 	rdctl	r2,status
   1a730:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a734:	e0fffe17 	ldw	r3,-8(fp)
   1a738:	00bfff84 	movi	r2,-2
   1a73c:	1884703a 	and	r2,r3,r2
   1a740:	1001703a 	wrctl	status,r2
  
  return context;
   1a744:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1a748:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1a74c:	e0ffff03 	ldbu	r3,-4(fp)
   1a750:	008000f4 	movhi	r2,3
   1a754:	10b5aa04 	addi	r2,r2,-10584
   1a758:	18c7883a 	add	r3,r3,r3
   1a75c:	18c7883a 	add	r3,r3,r3
   1a760:	10c5883a 	add	r2,r2,r3
   1a764:	10800017 	ldw	r2,0(r2)
   1a768:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   1a76c:	e0bff817 	ldw	r2,-32(fp)
   1a770:	1000061e 	bne	r2,zero,1a78c <OSTaskResume+0x90>
   1a774:	e0bff617 	ldw	r2,-40(fp)
   1a778:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a77c:	e0bff717 	ldw	r2,-36(fp)
   1a780:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   1a784:	00801184 	movi	r2,70
   1a788:	00004c06 	br	1a8bc <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   1a78c:	e0bff817 	ldw	r2,-32(fp)
   1a790:	10800058 	cmpnei	r2,r2,1
   1a794:	1000061e 	bne	r2,zero,1a7b0 <OSTaskResume+0xb4>
   1a798:	e0bff617 	ldw	r2,-40(fp)
   1a79c:	e0bff915 	stw	r2,-28(fp)
   1a7a0:	e0bff917 	ldw	r2,-28(fp)
   1a7a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a7a8:	008010c4 	movi	r2,67
   1a7ac:	00004306 	br	1a8bc <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   1a7b0:	e0bff817 	ldw	r2,-32(fp)
   1a7b4:	10800c03 	ldbu	r2,48(r2)
   1a7b8:	10803fcc 	andi	r2,r2,255
   1a7bc:	1080020c 	andi	r2,r2,8
   1a7c0:	10003926 	beq	r2,zero,1a8a8 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   1a7c4:	e0bff817 	ldw	r2,-32(fp)
   1a7c8:	10c00c03 	ldbu	r3,48(r2)
   1a7cc:	00bffdc4 	movi	r2,-9
   1a7d0:	1884703a 	and	r2,r3,r2
   1a7d4:	1007883a 	mov	r3,r2
   1a7d8:	e0bff817 	ldw	r2,-32(fp)
   1a7dc:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   1a7e0:	e0bff817 	ldw	r2,-32(fp)
   1a7e4:	10800c03 	ldbu	r2,48(r2)
   1a7e8:	10803fcc 	andi	r2,r2,255
   1a7ec:	1000281e 	bne	r2,zero,1a890 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   1a7f0:	e0bff817 	ldw	r2,-32(fp)
   1a7f4:	10800b8b 	ldhu	r2,46(r2)
   1a7f8:	10bfffcc 	andi	r2,r2,65535
   1a7fc:	10001f1e 	bne	r2,zero,1a87c <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   1a800:	e0bff817 	ldw	r2,-32(fp)
   1a804:	10c00d83 	ldbu	r3,54(r2)
   1a808:	d0a85303 	ldbu	r2,-24244(gp)
   1a80c:	1884b03a 	or	r2,r3,r2
   1a810:	d0a85305 	stb	r2,-24244(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1a814:	e0bff817 	ldw	r2,-32(fp)
   1a818:	10800d03 	ldbu	r2,52(r2)
   1a81c:	10c03fcc 	andi	r3,r2,255
   1a820:	e0bff817 	ldw	r2,-32(fp)
   1a824:	10800d03 	ldbu	r2,52(r2)
   1a828:	11003fcc 	andi	r4,r2,255
   1a82c:	d0a85344 	addi	r2,gp,-24243
   1a830:	2085883a 	add	r2,r4,r2
   1a834:	11000003 	ldbu	r4,0(r2)
   1a838:	e0bff817 	ldw	r2,-32(fp)
   1a83c:	10800d43 	ldbu	r2,53(r2)
   1a840:	2084b03a 	or	r2,r4,r2
   1a844:	1009883a 	mov	r4,r2
   1a848:	d0a85344 	addi	r2,gp,-24243
   1a84c:	1885883a 	add	r2,r3,r2
   1a850:	11000005 	stb	r4,0(r2)
   1a854:	e0bff617 	ldw	r2,-40(fp)
   1a858:	e0bffa15 	stw	r2,-24(fp)
   1a85c:	e0bffa17 	ldw	r2,-24(fp)
   1a860:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   1a864:	d0a84743 	ldbu	r2,-24291(gp)
   1a868:	10803fcc 	andi	r2,r2,255
   1a86c:	10800058 	cmpnei	r2,r2,1
   1a870:	10000b1e 	bne	r2,zero,1a8a0 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   1a874:	001545c0 	call	1545c <OS_Sched>
   1a878:	00000906 	br	1a8a0 <OSTaskResume+0x1a4>
   1a87c:	e0bff617 	ldw	r2,-40(fp)
   1a880:	e0bffb15 	stw	r2,-20(fp)
   1a884:	e0bffb17 	ldw	r2,-20(fp)
   1a888:	1001703a 	wrctl	status,r2
   1a88c:	00000406 	br	1a8a0 <OSTaskResume+0x1a4>
   1a890:	e0bff617 	ldw	r2,-40(fp)
   1a894:	e0bffc15 	stw	r2,-16(fp)
   1a898:	e0bffc17 	ldw	r2,-16(fp)
   1a89c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   1a8a0:	0005883a 	mov	r2,zero
   1a8a4:	00000506 	br	1a8bc <OSTaskResume+0x1c0>
   1a8a8:	e0bff617 	ldw	r2,-40(fp)
   1a8ac:	e0bffd15 	stw	r2,-12(fp)
   1a8b0:	e0bffd17 	ldw	r2,-12(fp)
   1a8b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   1a8b8:	00801104 	movi	r2,68
}
   1a8bc:	e037883a 	mov	sp,fp
   1a8c0:	dfc00117 	ldw	ra,4(sp)
   1a8c4:	df000017 	ldw	fp,0(sp)
   1a8c8:	dec00204 	addi	sp,sp,8
   1a8cc:	f800283a 	ret

0001a8d0 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   1a8d0:	defff304 	addi	sp,sp,-52
   1a8d4:	df000c15 	stw	fp,48(sp)
   1a8d8:	df000c04 	addi	fp,sp,48
   1a8dc:	2005883a 	mov	r2,r4
   1a8e0:	e17fff15 	stw	r5,-4(fp)
   1a8e4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1a8e8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   1a8ec:	e0bffe03 	ldbu	r2,-8(fp)
   1a8f0:	10800570 	cmpltui	r2,r2,21
   1a8f4:	1000051e 	bne	r2,zero,1a90c <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   1a8f8:	e0bffe03 	ldbu	r2,-8(fp)
   1a8fc:	10803fe0 	cmpeqi	r2,r2,255
   1a900:	1000021e 	bne	r2,zero,1a90c <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   1a904:	00800a84 	movi	r2,42
   1a908:	00005d06 	br	1aa80 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   1a90c:	e0bfff17 	ldw	r2,-4(fp)
   1a910:	1000021e 	bne	r2,zero,1a91c <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   1a914:	00800244 	movi	r2,9
   1a918:	00005906 	br	1aa80 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   1a91c:	e0bfff17 	ldw	r2,-4(fp)
   1a920:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   1a924:	e0bfff17 	ldw	r2,-4(fp)
   1a928:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a92c:	0005303a 	rdctl	r2,status
   1a930:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a934:	e0fffd17 	ldw	r3,-12(fp)
   1a938:	00bfff84 	movi	r2,-2
   1a93c:	1884703a 	and	r2,r3,r2
   1a940:	1001703a 	wrctl	status,r2
  
  return context;
   1a944:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   1a948:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   1a94c:	e0bffe03 	ldbu	r2,-8(fp)
   1a950:	10803fd8 	cmpnei	r2,r2,255
   1a954:	1000031e 	bne	r2,zero,1a964 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   1a958:	d0a85617 	ldw	r2,-24232(gp)
   1a95c:	10800c83 	ldbu	r2,50(r2)
   1a960:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1a964:	e0fffe03 	ldbu	r3,-8(fp)
   1a968:	008000f4 	movhi	r2,3
   1a96c:	10b5aa04 	addi	r2,r2,-10584
   1a970:	18c7883a 	add	r3,r3,r3
   1a974:	18c7883a 	add	r3,r3,r3
   1a978:	10c5883a 	add	r2,r2,r3
   1a97c:	10800017 	ldw	r2,0(r2)
   1a980:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   1a984:	e0bff817 	ldw	r2,-32(fp)
   1a988:	1000061e 	bne	r2,zero,1a9a4 <OSTaskStkChk+0xd4>
   1a98c:	e0bff617 	ldw	r2,-40(fp)
   1a990:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a994:	e0bff717 	ldw	r2,-36(fp)
   1a998:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a99c:	008010c4 	movi	r2,67
   1a9a0:	00003706 	br	1aa80 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1a9a4:	e0bff817 	ldw	r2,-32(fp)
   1a9a8:	10800058 	cmpnei	r2,r2,1
   1a9ac:	1000061e 	bne	r2,zero,1a9c8 <OSTaskStkChk+0xf8>
   1a9b0:	e0bff617 	ldw	r2,-40(fp)
   1a9b4:	e0bff915 	stw	r2,-28(fp)
   1a9b8:	e0bff917 	ldw	r2,-28(fp)
   1a9bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1a9c0:	008010c4 	movi	r2,67
   1a9c4:	00002e06 	br	1aa80 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   1a9c8:	e0bff817 	ldw	r2,-32(fp)
   1a9cc:	1080040b 	ldhu	r2,16(r2)
   1a9d0:	10bfffcc 	andi	r2,r2,65535
   1a9d4:	1080004c 	andi	r2,r2,1
   1a9d8:	1000061e 	bne	r2,zero,1a9f4 <OSTaskStkChk+0x124>
   1a9dc:	e0bff617 	ldw	r2,-40(fp)
   1a9e0:	e0bffa15 	stw	r2,-24(fp)
   1a9e4:	e0bffa17 	ldw	r2,-24(fp)
   1a9e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   1a9ec:	00801144 	movi	r2,69
   1a9f0:	00002306 	br	1aa80 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   1a9f4:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   1a9f8:	e0bff817 	ldw	r2,-32(fp)
   1a9fc:	10800317 	ldw	r2,12(r2)
   1aa00:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   1aa04:	e0bff817 	ldw	r2,-32(fp)
   1aa08:	10800217 	ldw	r2,8(r2)
   1aa0c:	e0bff415 	stw	r2,-48(fp)
   1aa10:	e0bff617 	ldw	r2,-40(fp)
   1aa14:	e0bffb15 	stw	r2,-20(fp)
   1aa18:	e0bffb17 	ldw	r2,-20(fp)
   1aa1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1aa20:	00000306 	br	1aa30 <OSTaskStkChk+0x160>
        nfree++;
   1aa24:	e0bff517 	ldw	r2,-44(fp)
   1aa28:	10800044 	addi	r2,r2,1
   1aa2c:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1aa30:	e0bff417 	ldw	r2,-48(fp)
   1aa34:	10c00104 	addi	r3,r2,4
   1aa38:	e0fff415 	stw	r3,-48(fp)
   1aa3c:	10800017 	ldw	r2,0(r2)
   1aa40:	103ff826 	beq	r2,zero,1aa24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701aa24>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   1aa44:	e0bff517 	ldw	r2,-44(fp)
   1aa48:	1085883a 	add	r2,r2,r2
   1aa4c:	1085883a 	add	r2,r2,r2
   1aa50:	1007883a 	mov	r3,r2
   1aa54:	e0bfff17 	ldw	r2,-4(fp)
   1aa58:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   1aa5c:	e0fffc17 	ldw	r3,-16(fp)
   1aa60:	e0bff517 	ldw	r2,-44(fp)
   1aa64:	1885c83a 	sub	r2,r3,r2
   1aa68:	1085883a 	add	r2,r2,r2
   1aa6c:	1085883a 	add	r2,r2,r2
   1aa70:	1007883a 	mov	r3,r2
   1aa74:	e0bfff17 	ldw	r2,-4(fp)
   1aa78:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   1aa7c:	0005883a 	mov	r2,zero
}
   1aa80:	e037883a 	mov	sp,fp
   1aa84:	df000017 	ldw	fp,0(sp)
   1aa88:	dec00104 	addi	sp,sp,4
   1aa8c:	f800283a 	ret

0001aa90 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   1aa90:	defff504 	addi	sp,sp,-44
   1aa94:	dfc00a15 	stw	ra,40(sp)
   1aa98:	df000915 	stw	fp,36(sp)
   1aa9c:	df000904 	addi	fp,sp,36
   1aaa0:	2005883a 	mov	r2,r4
   1aaa4:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1aaa8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   1aaac:	e0bfff03 	ldbu	r2,-4(fp)
   1aab0:	10800518 	cmpnei	r2,r2,20
   1aab4:	1000021e 	bne	r2,zero,1aac0 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   1aab8:	008011c4 	movi	r2,71
   1aabc:	00006806 	br	1ac60 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1aac0:	e0bfff03 	ldbu	r2,-4(fp)
   1aac4:	10800530 	cmpltui	r2,r2,20
   1aac8:	1000051e 	bne	r2,zero,1aae0 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   1aacc:	e0bfff03 	ldbu	r2,-4(fp)
   1aad0:	10803fe0 	cmpeqi	r2,r2,255
   1aad4:	1000021e 	bne	r2,zero,1aae0 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   1aad8:	00800a84 	movi	r2,42
   1aadc:	00006006 	br	1ac60 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aae0:	0005303a 	rdctl	r2,status
   1aae4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aae8:	e0fffe17 	ldw	r3,-8(fp)
   1aaec:	00bfff84 	movi	r2,-2
   1aaf0:	1884703a 	and	r2,r3,r2
   1aaf4:	1001703a 	wrctl	status,r2
  
  return context;
   1aaf8:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1aafc:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   1ab00:	e0bfff03 	ldbu	r2,-4(fp)
   1ab04:	10803fd8 	cmpnei	r2,r2,255
   1ab08:	1000061e 	bne	r2,zero,1ab24 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   1ab0c:	d0a85617 	ldw	r2,-24232(gp)
   1ab10:	10800c83 	ldbu	r2,50(r2)
   1ab14:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   1ab18:	00800044 	movi	r2,1
   1ab1c:	e0bff705 	stb	r2,-36(fp)
   1ab20:	00000906 	br	1ab48 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   1ab24:	d0a85617 	ldw	r2,-24232(gp)
   1ab28:	10800c83 	ldbu	r2,50(r2)
   1ab2c:	10c03fcc 	andi	r3,r2,255
   1ab30:	e0bfff03 	ldbu	r2,-4(fp)
   1ab34:	1880031e 	bne	r3,r2,1ab44 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   1ab38:	00800044 	movi	r2,1
   1ab3c:	e0bff705 	stb	r2,-36(fp)
   1ab40:	00000106 	br	1ab48 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   1ab44:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1ab48:	e0ffff03 	ldbu	r3,-4(fp)
   1ab4c:	008000f4 	movhi	r2,3
   1ab50:	10b5aa04 	addi	r2,r2,-10584
   1ab54:	18c7883a 	add	r3,r3,r3
   1ab58:	18c7883a 	add	r3,r3,r3
   1ab5c:	10c5883a 	add	r2,r2,r3
   1ab60:	10800017 	ldw	r2,0(r2)
   1ab64:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   1ab68:	e0bffa17 	ldw	r2,-24(fp)
   1ab6c:	1000061e 	bne	r2,zero,1ab88 <OSTaskSuspend+0xf8>
   1ab70:	e0bff817 	ldw	r2,-32(fp)
   1ab74:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ab78:	e0bff917 	ldw	r2,-28(fp)
   1ab7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   1ab80:	00801204 	movi	r2,72
   1ab84:	00003606 	br	1ac60 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   1ab88:	e0bffa17 	ldw	r2,-24(fp)
   1ab8c:	10800058 	cmpnei	r2,r2,1
   1ab90:	1000061e 	bne	r2,zero,1abac <OSTaskSuspend+0x11c>
   1ab94:	e0bff817 	ldw	r2,-32(fp)
   1ab98:	e0bffb15 	stw	r2,-20(fp)
   1ab9c:	e0bffb17 	ldw	r2,-20(fp)
   1aba0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1aba4:	008010c4 	movi	r2,67
   1aba8:	00002d06 	br	1ac60 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   1abac:	e0bffa17 	ldw	r2,-24(fp)
   1abb0:	10800d03 	ldbu	r2,52(r2)
   1abb4:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   1abb8:	e0fffd03 	ldbu	r3,-12(fp)
   1abbc:	e13ffd03 	ldbu	r4,-12(fp)
   1abc0:	d0a85344 	addi	r2,gp,-24243
   1abc4:	2085883a 	add	r2,r4,r2
   1abc8:	10800003 	ldbu	r2,0(r2)
   1abcc:	1009883a 	mov	r4,r2
   1abd0:	e0bffa17 	ldw	r2,-24(fp)
   1abd4:	10800d43 	ldbu	r2,53(r2)
   1abd8:	0084303a 	nor	r2,zero,r2
   1abdc:	2084703a 	and	r2,r4,r2
   1abe0:	1009883a 	mov	r4,r2
   1abe4:	d0a85344 	addi	r2,gp,-24243
   1abe8:	1885883a 	add	r2,r3,r2
   1abec:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1abf0:	e0fffd03 	ldbu	r3,-12(fp)
   1abf4:	d0a85344 	addi	r2,gp,-24243
   1abf8:	1885883a 	add	r2,r3,r2
   1abfc:	10800003 	ldbu	r2,0(r2)
   1ac00:	10803fcc 	andi	r2,r2,255
   1ac04:	1000071e 	bne	r2,zero,1ac24 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   1ac08:	e0bffa17 	ldw	r2,-24(fp)
   1ac0c:	10800d83 	ldbu	r2,54(r2)
   1ac10:	0084303a 	nor	r2,zero,r2
   1ac14:	1007883a 	mov	r3,r2
   1ac18:	d0a85303 	ldbu	r2,-24244(gp)
   1ac1c:	1884703a 	and	r2,r3,r2
   1ac20:	d0a85305 	stb	r2,-24244(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   1ac24:	e0bffa17 	ldw	r2,-24(fp)
   1ac28:	10800c03 	ldbu	r2,48(r2)
   1ac2c:	10800214 	ori	r2,r2,8
   1ac30:	1007883a 	mov	r3,r2
   1ac34:	e0bffa17 	ldw	r2,-24(fp)
   1ac38:	10c00c05 	stb	r3,48(r2)
   1ac3c:	e0bff817 	ldw	r2,-32(fp)
   1ac40:	e0bffc15 	stw	r2,-16(fp)
   1ac44:	e0bffc17 	ldw	r2,-16(fp)
   1ac48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   1ac4c:	e0bff703 	ldbu	r2,-36(fp)
   1ac50:	10800058 	cmpnei	r2,r2,1
   1ac54:	1000011e 	bne	r2,zero,1ac5c <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   1ac58:	001545c0 	call	1545c <OS_Sched>
    }
    return (OS_ERR_NONE);
   1ac5c:	0005883a 	mov	r2,zero
}
   1ac60:	e037883a 	mov	sp,fp
   1ac64:	dfc00117 	ldw	ra,4(sp)
   1ac68:	df000017 	ldw	fp,0(sp)
   1ac6c:	dec00204 	addi	sp,sp,8
   1ac70:	f800283a 	ret

0001ac74 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   1ac74:	defff604 	addi	sp,sp,-40
   1ac78:	dfc00915 	stw	ra,36(sp)
   1ac7c:	df000815 	stw	fp,32(sp)
   1ac80:	df000804 	addi	fp,sp,32
   1ac84:	2005883a 	mov	r2,r4
   1ac88:	e17fff15 	stw	r5,-4(fp)
   1ac8c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1ac90:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   1ac94:	e0bffe03 	ldbu	r2,-8(fp)
   1ac98:	10800570 	cmpltui	r2,r2,21
   1ac9c:	1000051e 	bne	r2,zero,1acb4 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   1aca0:	e0bffe03 	ldbu	r2,-8(fp)
   1aca4:	10803fe0 	cmpeqi	r2,r2,255
   1aca8:	1000021e 	bne	r2,zero,1acb4 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1acac:	00800a84 	movi	r2,42
   1acb0:	00003406 	br	1ad84 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   1acb4:	e0bfff17 	ldw	r2,-4(fp)
   1acb8:	1000021e 	bne	r2,zero,1acc4 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1acbc:	00800244 	movi	r2,9
   1acc0:	00003006 	br	1ad84 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1acc4:	0005303a 	rdctl	r2,status
   1acc8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1accc:	e0fffd17 	ldw	r3,-12(fp)
   1acd0:	00bfff84 	movi	r2,-2
   1acd4:	1884703a 	and	r2,r3,r2
   1acd8:	1001703a 	wrctl	status,r2
  
  return context;
   1acdc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1ace0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   1ace4:	e0bffe03 	ldbu	r2,-8(fp)
   1ace8:	10803fd8 	cmpnei	r2,r2,255
   1acec:	1000031e 	bne	r2,zero,1acfc <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   1acf0:	d0a85617 	ldw	r2,-24232(gp)
   1acf4:	10800c83 	ldbu	r2,50(r2)
   1acf8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1acfc:	e0fffe03 	ldbu	r3,-8(fp)
   1ad00:	008000f4 	movhi	r2,3
   1ad04:	10b5aa04 	addi	r2,r2,-10584
   1ad08:	18c7883a 	add	r3,r3,r3
   1ad0c:	18c7883a 	add	r3,r3,r3
   1ad10:	10c5883a 	add	r2,r2,r3
   1ad14:	10800017 	ldw	r2,0(r2)
   1ad18:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   1ad1c:	e0bffa17 	ldw	r2,-24(fp)
   1ad20:	1000061e 	bne	r2,zero,1ad3c <OSTaskQuery+0xc8>
   1ad24:	e0bff817 	ldw	r2,-32(fp)
   1ad28:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ad2c:	e0bff917 	ldw	r2,-28(fp)
   1ad30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1ad34:	00800a44 	movi	r2,41
   1ad38:	00001206 	br	1ad84 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   1ad3c:	e0bffa17 	ldw	r2,-24(fp)
   1ad40:	10800058 	cmpnei	r2,r2,1
   1ad44:	1000061e 	bne	r2,zero,1ad60 <OSTaskQuery+0xec>
   1ad48:	e0bff817 	ldw	r2,-32(fp)
   1ad4c:	e0bffb15 	stw	r2,-20(fp)
   1ad50:	e0bffb17 	ldw	r2,-20(fp)
   1ad54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1ad58:	008010c4 	movi	r2,67
   1ad5c:	00000906 	br	1ad84 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   1ad60:	01801b04 	movi	r6,108
   1ad64:	e17ffa17 	ldw	r5,-24(fp)
   1ad68:	e13fff17 	ldw	r4,-4(fp)
   1ad6c:	00153f40 	call	153f4 <OS_MemCopy>
   1ad70:	e0bff817 	ldw	r2,-32(fp)
   1ad74:	e0bffc15 	stw	r2,-16(fp)
   1ad78:	e0bffc17 	ldw	r2,-16(fp)
   1ad7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1ad80:	0005883a 	mov	r2,zero
}
   1ad84:	e037883a 	mov	sp,fp
   1ad88:	dfc00117 	ldw	ra,4(sp)
   1ad8c:	df000017 	ldw	fp,0(sp)
   1ad90:	dec00204 	addi	sp,sp,8
   1ad94:	f800283a 	ret

0001ad98 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1ad98:	defffc04 	addi	sp,sp,-16
   1ad9c:	df000315 	stw	fp,12(sp)
   1ada0:	df000304 	addi	fp,sp,12
   1ada4:	e13ffd15 	stw	r4,-12(fp)
   1ada8:	e17ffe15 	stw	r5,-8(fp)
   1adac:	3005883a 	mov	r2,r6
   1adb0:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1adb4:	e0bfff0b 	ldhu	r2,-4(fp)
   1adb8:	1080004c 	andi	r2,r2,1
   1adbc:	10000d26 	beq	r2,zero,1adf4 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   1adc0:	e0bfff0b 	ldhu	r2,-4(fp)
   1adc4:	1080008c 	andi	r2,r2,2
   1adc8:	10000a26 	beq	r2,zero,1adf4 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1adcc:	00000706 	br	1adec <OS_TaskStkClr+0x54>
                size--;
   1add0:	e0bffe17 	ldw	r2,-8(fp)
   1add4:	10bfffc4 	addi	r2,r2,-1
   1add8:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1addc:	e0bffd17 	ldw	r2,-12(fp)
   1ade0:	10c00104 	addi	r3,r2,4
   1ade4:	e0fffd15 	stw	r3,-12(fp)
   1ade8:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1adec:	e0bffe17 	ldw	r2,-8(fp)
   1adf0:	103ff71e 	bne	r2,zero,1add0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701add0>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   1adf4:	0001883a 	nop
   1adf8:	e037883a 	mov	sp,fp
   1adfc:	df000017 	ldw	fp,0(sp)
   1ae00:	dec00104 	addi	sp,sp,4
   1ae04:	f800283a 	ret

0001ae08 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1ae08:	defff904 	addi	sp,sp,-28
   1ae0c:	dfc00615 	stw	ra,24(sp)
   1ae10:	df000515 	stw	fp,20(sp)
   1ae14:	df000504 	addi	fp,sp,20
   1ae18:	2005883a 	mov	r2,r4
   1ae1c:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1ae20:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1ae24:	d0a85503 	ldbu	r2,-24236(gp)
   1ae28:	10803fcc 	andi	r2,r2,255
   1ae2c:	1000311e 	bne	r2,zero,1aef4 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   1ae30:	e0bfff0b 	ldhu	r2,-4(fp)
   1ae34:	10003026 	beq	r2,zero,1aef8 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ae38:	0005303a 	rdctl	r2,status
   1ae3c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ae40:	e0fffe17 	ldw	r3,-8(fp)
   1ae44:	00bfff84 	movi	r2,-2
   1ae48:	1884703a 	and	r2,r3,r2
   1ae4c:	1001703a 	wrctl	status,r2
  
  return context;
   1ae50:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   1ae54:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   1ae58:	d0a85617 	ldw	r2,-24232(gp)
   1ae5c:	10800d03 	ldbu	r2,52(r2)
   1ae60:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1ae64:	e0fffd03 	ldbu	r3,-12(fp)
   1ae68:	e13ffd03 	ldbu	r4,-12(fp)
   1ae6c:	d0a85344 	addi	r2,gp,-24243
   1ae70:	2085883a 	add	r2,r4,r2
   1ae74:	10800003 	ldbu	r2,0(r2)
   1ae78:	1009883a 	mov	r4,r2
   1ae7c:	d0a85617 	ldw	r2,-24232(gp)
   1ae80:	10800d43 	ldbu	r2,53(r2)
   1ae84:	0084303a 	nor	r2,zero,r2
   1ae88:	2084703a 	and	r2,r4,r2
   1ae8c:	1009883a 	mov	r4,r2
   1ae90:	d0a85344 	addi	r2,gp,-24243
   1ae94:	1885883a 	add	r2,r3,r2
   1ae98:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   1ae9c:	e0fffd03 	ldbu	r3,-12(fp)
   1aea0:	d0a85344 	addi	r2,gp,-24243
   1aea4:	1885883a 	add	r2,r3,r2
   1aea8:	10800003 	ldbu	r2,0(r2)
   1aeac:	10803fcc 	andi	r2,r2,255
   1aeb0:	1000071e 	bne	r2,zero,1aed0 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1aeb4:	d0a85617 	ldw	r2,-24232(gp)
   1aeb8:	10800d83 	ldbu	r2,54(r2)
   1aebc:	0084303a 	nor	r2,zero,r2
   1aec0:	1007883a 	mov	r3,r2
   1aec4:	d0a85303 	ldbu	r2,-24244(gp)
   1aec8:	1884703a 	and	r2,r3,r2
   1aecc:	d0a85305 	stb	r2,-24244(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   1aed0:	d0a85617 	ldw	r2,-24232(gp)
   1aed4:	e0ffff0b 	ldhu	r3,-4(fp)
   1aed8:	10c00b8d 	sth	r3,46(r2)
   1aedc:	e0bffb17 	ldw	r2,-20(fp)
   1aee0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1aee4:	e0bffc17 	ldw	r2,-16(fp)
   1aee8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1aeec:	001545c0 	call	1545c <OS_Sched>
   1aef0:	00000106 	br	1aef8 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   1aef4:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   1aef8:	e037883a 	mov	sp,fp
   1aefc:	dfc00117 	ldw	ra,4(sp)
   1af00:	df000017 	ldw	fp,0(sp)
   1af04:	dec00204 	addi	sp,sp,8
   1af08:	f800283a 	ret

0001af0c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   1af0c:	defff804 	addi	sp,sp,-32
   1af10:	dfc00715 	stw	ra,28(sp)
   1af14:	df000615 	stw	fp,24(sp)
   1af18:	df000604 	addi	fp,sp,24
   1af1c:	2015883a 	mov	r10,r4
   1af20:	2809883a 	mov	r4,r5
   1af24:	3007883a 	mov	r3,r6
   1af28:	3805883a 	mov	r2,r7
   1af2c:	e2bffc05 	stb	r10,-16(fp)
   1af30:	e13ffd05 	stb	r4,-12(fp)
   1af34:	e0fffe05 	stb	r3,-8(fp)
   1af38:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1af3c:	d0a85503 	ldbu	r2,-24236(gp)
   1af40:	10803fcc 	andi	r2,r2,255
   1af44:	10000226 	beq	r2,zero,1af50 <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
   1af48:	00801544 	movi	r2,85
   1af4c:	00004206 	br	1b058 <OSTimeDlyHMSM+0x14c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   1af50:	e0bffc03 	ldbu	r2,-16(fp)
   1af54:	1000081e 	bne	r2,zero,1af78 <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
   1af58:	e0bffd03 	ldbu	r2,-12(fp)
   1af5c:	1000061e 	bne	r2,zero,1af78 <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
   1af60:	e0bffe03 	ldbu	r2,-8(fp)
   1af64:	1000041e 	bne	r2,zero,1af78 <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
   1af68:	e0bfff0b 	ldhu	r2,-4(fp)
   1af6c:	1000021e 	bne	r2,zero,1af78 <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
   1af70:	00801504 	movi	r2,84
   1af74:	00003806 	br	1b058 <OSTimeDlyHMSM+0x14c>
                }
            }
        }
    }
    if (minutes > 59) {
   1af78:	e0bffd03 	ldbu	r2,-12(fp)
   1af7c:	10800f30 	cmpltui	r2,r2,60
   1af80:	1000021e 	bne	r2,zero,1af8c <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   1af84:	00801444 	movi	r2,81
   1af88:	00003306 	br	1b058 <OSTimeDlyHMSM+0x14c>
    }
    if (seconds > 59) {
   1af8c:	e0bffe03 	ldbu	r2,-8(fp)
   1af90:	10800f30 	cmpltui	r2,r2,60
   1af94:	1000021e 	bne	r2,zero,1afa0 <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
   1af98:	00801484 	movi	r2,82
   1af9c:	00002e06 	br	1b058 <OSTimeDlyHMSM+0x14c>
    }
    if (ms > 999) {
   1afa0:	e0bfff0b 	ldhu	r2,-4(fp)
   1afa4:	1080fa30 	cmpltui	r2,r2,1000
   1afa8:	1000021e 	bne	r2,zero,1afb4 <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
   1afac:	008014c4 	movi	r2,83
   1afb0:	00002906 	br	1b058 <OSTimeDlyHMSM+0x14c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1afb4:	e0bffc03 	ldbu	r2,-16(fp)
   1afb8:	10c38424 	muli	r3,r2,3600
   1afbc:	e0bffd03 	ldbu	r2,-12(fp)
   1afc0:	10800f24 	muli	r2,r2,60
   1afc4:	1887883a 	add	r3,r3,r2
   1afc8:	e0bffe03 	ldbu	r2,-8(fp)
   1afcc:	1885883a 	add	r2,r3,r2
   1afd0:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   1afd4:	e0bfff0b 	ldhu	r2,-4(fp)
   1afd8:	10800f84 	addi	r2,r2,62
   1afdc:	100690fa 	slli	r3,r2,3
   1afe0:	008418b4 	movhi	r2,4194
   1afe4:	109374c4 	addi	r2,r2,19923
   1afe8:	188a383a 	mulxuu	r5,r3,r2
   1afec:	1885383a 	mul	r2,r3,r2
   1aff0:	1011883a 	mov	r8,r2
   1aff4:	2813883a 	mov	r9,r5
   1aff8:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1affc:	2085883a 	add	r2,r4,r2
   1b000:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   1b004:	e0bffb17 	ldw	r2,-20(fp)
   1b008:	1004d43a 	srli	r2,r2,16
   1b00c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   1b010:	e0bffb17 	ldw	r2,-20(fp)
   1b014:	10bfffcc 	andi	r2,r2,65535
   1b018:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   1b01c:	e0bffb17 	ldw	r2,-20(fp)
   1b020:	10bfffcc 	andi	r2,r2,65535
   1b024:	1009883a 	mov	r4,r2
   1b028:	001ae080 	call	1ae08 <OSTimeDly>
    while (loops > 0) {
   1b02c:	00000706 	br	1b04c <OSTimeDlyHMSM+0x140>
        OSTimeDly((INT16U)32768u);
   1b030:	01200014 	movui	r4,32768
   1b034:	001ae080 	call	1ae08 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   1b038:	01200014 	movui	r4,32768
   1b03c:	001ae080 	call	1ae08 <OSTimeDly>
        loops--;
   1b040:	e0bffa0b 	ldhu	r2,-24(fp)
   1b044:	10bfffc4 	addi	r2,r2,-1
   1b048:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   1b04c:	e0bffa0b 	ldhu	r2,-24(fp)
   1b050:	103ff71e 	bne	r2,zero,1b030 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b030>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1b054:	0005883a 	mov	r2,zero
}
   1b058:	e037883a 	mov	sp,fp
   1b05c:	dfc00117 	ldw	ra,4(sp)
   1b060:	df000017 	ldw	fp,0(sp)
   1b064:	dec00204 	addi	sp,sp,8
   1b068:	f800283a 	ret

0001b06c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1b06c:	defff504 	addi	sp,sp,-44
   1b070:	dfc00a15 	stw	ra,40(sp)
   1b074:	df000915 	stw	fp,36(sp)
   1b078:	df000904 	addi	fp,sp,36
   1b07c:	2005883a 	mov	r2,r4
   1b080:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1b084:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   1b088:	e0bfff03 	ldbu	r2,-4(fp)
   1b08c:	10800530 	cmpltui	r2,r2,20
   1b090:	1000021e 	bne	r2,zero,1b09c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1b094:	00800a84 	movi	r2,42
   1b098:	00006406 	br	1b22c <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b09c:	0005303a 	rdctl	r2,status
   1b0a0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b0a4:	e0fffe17 	ldw	r3,-8(fp)
   1b0a8:	00bfff84 	movi	r2,-2
   1b0ac:	1884703a 	and	r2,r3,r2
   1b0b0:	1001703a 	wrctl	status,r2
  
  return context;
   1b0b4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1b0b8:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1b0bc:	e0ffff03 	ldbu	r3,-4(fp)
   1b0c0:	008000f4 	movhi	r2,3
   1b0c4:	10b5aa04 	addi	r2,r2,-10584
   1b0c8:	18c7883a 	add	r3,r3,r3
   1b0cc:	18c7883a 	add	r3,r3,r3
   1b0d0:	10c5883a 	add	r2,r2,r3
   1b0d4:	10800017 	ldw	r2,0(r2)
   1b0d8:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   1b0dc:	e0bff917 	ldw	r2,-28(fp)
   1b0e0:	1000061e 	bne	r2,zero,1b0fc <OSTimeDlyResume+0x90>
   1b0e4:	e0bff717 	ldw	r2,-36(fp)
   1b0e8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b0ec:	e0bff817 	ldw	r2,-32(fp)
   1b0f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1b0f4:	008010c4 	movi	r2,67
   1b0f8:	00004c06 	br	1b22c <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1b0fc:	e0bff917 	ldw	r2,-28(fp)
   1b100:	10800058 	cmpnei	r2,r2,1
   1b104:	1000061e 	bne	r2,zero,1b120 <OSTimeDlyResume+0xb4>
   1b108:	e0bff717 	ldw	r2,-36(fp)
   1b10c:	e0bffa15 	stw	r2,-24(fp)
   1b110:	e0bffa17 	ldw	r2,-24(fp)
   1b114:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1b118:	008010c4 	movi	r2,67
   1b11c:	00004306 	br	1b22c <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   1b120:	e0bff917 	ldw	r2,-28(fp)
   1b124:	10800b8b 	ldhu	r2,46(r2)
   1b128:	10bfffcc 	andi	r2,r2,65535
   1b12c:	1000061e 	bne	r2,zero,1b148 <OSTimeDlyResume+0xdc>
   1b130:	e0bff717 	ldw	r2,-36(fp)
   1b134:	e0bffb15 	stw	r2,-20(fp)
   1b138:	e0bffb17 	ldw	r2,-20(fp)
   1b13c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1b140:	00801404 	movi	r2,80
   1b144:	00003906 	br	1b22c <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   1b148:	e0bff917 	ldw	r2,-28(fp)
   1b14c:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1b150:	e0bff917 	ldw	r2,-28(fp)
   1b154:	10800c03 	ldbu	r2,48(r2)
   1b158:	10803fcc 	andi	r2,r2,255
   1b15c:	10800dcc 	andi	r2,r2,55
   1b160:	10000b26 	beq	r2,zero,1b190 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   1b164:	e0bff917 	ldw	r2,-28(fp)
   1b168:	10c00c03 	ldbu	r3,48(r2)
   1b16c:	00bff204 	movi	r2,-56
   1b170:	1884703a 	and	r2,r3,r2
   1b174:	1007883a 	mov	r3,r2
   1b178:	e0bff917 	ldw	r2,-28(fp)
   1b17c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1b180:	e0bff917 	ldw	r2,-28(fp)
   1b184:	00c00044 	movi	r3,1
   1b188:	10c00c45 	stb	r3,49(r2)
   1b18c:	00000206 	br	1b198 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1b190:	e0bff917 	ldw	r2,-28(fp)
   1b194:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   1b198:	e0bff917 	ldw	r2,-28(fp)
   1b19c:	10800c03 	ldbu	r2,48(r2)
   1b1a0:	10803fcc 	andi	r2,r2,255
   1b1a4:	1080020c 	andi	r2,r2,8
   1b1a8:	10001b1e 	bne	r2,zero,1b218 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1b1ac:	e0bff917 	ldw	r2,-28(fp)
   1b1b0:	10c00d83 	ldbu	r3,54(r2)
   1b1b4:	d0a85303 	ldbu	r2,-24244(gp)
   1b1b8:	1884b03a 	or	r2,r3,r2
   1b1bc:	d0a85305 	stb	r2,-24244(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1b1c0:	e0bff917 	ldw	r2,-28(fp)
   1b1c4:	10800d03 	ldbu	r2,52(r2)
   1b1c8:	10c03fcc 	andi	r3,r2,255
   1b1cc:	e0bff917 	ldw	r2,-28(fp)
   1b1d0:	10800d03 	ldbu	r2,52(r2)
   1b1d4:	11003fcc 	andi	r4,r2,255
   1b1d8:	d0a85344 	addi	r2,gp,-24243
   1b1dc:	2085883a 	add	r2,r4,r2
   1b1e0:	11000003 	ldbu	r4,0(r2)
   1b1e4:	e0bff917 	ldw	r2,-28(fp)
   1b1e8:	10800d43 	ldbu	r2,53(r2)
   1b1ec:	2084b03a 	or	r2,r4,r2
   1b1f0:	1009883a 	mov	r4,r2
   1b1f4:	d0a85344 	addi	r2,gp,-24243
   1b1f8:	1885883a 	add	r2,r3,r2
   1b1fc:	11000005 	stb	r4,0(r2)
   1b200:	e0bff717 	ldw	r2,-36(fp)
   1b204:	e0bffc15 	stw	r2,-16(fp)
   1b208:	e0bffc17 	ldw	r2,-16(fp)
   1b20c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   1b210:	001545c0 	call	1545c <OS_Sched>
   1b214:	00000406 	br	1b228 <OSTimeDlyResume+0x1bc>
   1b218:	e0bff717 	ldw	r2,-36(fp)
   1b21c:	e0bffd15 	stw	r2,-12(fp)
   1b220:	e0bffd17 	ldw	r2,-12(fp)
   1b224:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   1b228:	0005883a 	mov	r2,zero
}
   1b22c:	e037883a 	mov	sp,fp
   1b230:	dfc00117 	ldw	ra,4(sp)
   1b234:	df000017 	ldw	fp,0(sp)
   1b238:	dec00204 	addi	sp,sp,8
   1b23c:	f800283a 	ret

0001b240 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1b240:	defffb04 	addi	sp,sp,-20
   1b244:	df000415 	stw	fp,16(sp)
   1b248:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b24c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b250:	0005303a 	rdctl	r2,status
   1b254:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b258:	e0fffe17 	ldw	r3,-8(fp)
   1b25c:	00bfff84 	movi	r2,-2
   1b260:	1884703a 	and	r2,r3,r2
   1b264:	1001703a 	wrctl	status,r2
  
  return context;
   1b268:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1b26c:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1b270:	d0a85717 	ldw	r2,-24228(gp)
   1b274:	e0bffd15 	stw	r2,-12(fp)
   1b278:	e0bffc17 	ldw	r2,-16(fp)
   1b27c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b280:	e0bfff17 	ldw	r2,-4(fp)
   1b284:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1b288:	e0bffd17 	ldw	r2,-12(fp)
}
   1b28c:	e037883a 	mov	sp,fp
   1b290:	df000017 	ldw	fp,0(sp)
   1b294:	dec00104 	addi	sp,sp,4
   1b298:	f800283a 	ret

0001b29c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   1b29c:	defffb04 	addi	sp,sp,-20
   1b2a0:	df000415 	stw	fp,16(sp)
   1b2a4:	df000404 	addi	fp,sp,16
   1b2a8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b2ac:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b2b0:	0005303a 	rdctl	r2,status
   1b2b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b2b8:	e0fffd17 	ldw	r3,-12(fp)
   1b2bc:	00bfff84 	movi	r2,-2
   1b2c0:	1884703a 	and	r2,r3,r2
   1b2c4:	1001703a 	wrctl	status,r2
  
  return context;
   1b2c8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   1b2cc:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   1b2d0:	e0bfff17 	ldw	r2,-4(fp)
   1b2d4:	d0a85715 	stw	r2,-24228(gp)
   1b2d8:	e0bffc17 	ldw	r2,-16(fp)
   1b2dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b2e0:	e0bffe17 	ldw	r2,-8(fp)
   1b2e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1b2e8:	0001883a 	nop
   1b2ec:	e037883a 	mov	sp,fp
   1b2f0:	df000017 	ldw	fp,0(sp)
   1b2f4:	dec00104 	addi	sp,sp,4
   1b2f8:	f800283a 	ret

0001b2fc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1b2fc:	defffd04 	addi	sp,sp,-12
   1b300:	dfc00215 	stw	ra,8(sp)
   1b304:	df000115 	stw	fp,4(sp)
   1b308:	df000104 	addi	fp,sp,4
   1b30c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1b310:	d1601e04 	addi	r5,gp,-32648
   1b314:	e13fff17 	ldw	r4,-4(fp)
   1b318:	001ddd80 	call	1ddd8 <alt_dev_llist_insert>
}
   1b31c:	e037883a 	mov	sp,fp
   1b320:	dfc00117 	ldw	ra,4(sp)
   1b324:	df000017 	ldw	fp,0(sp)
   1b328:	dec00204 	addi	sp,sp,8
   1b32c:	f800283a 	ret

0001b330 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1b330:	defffd04 	addi	sp,sp,-12
   1b334:	dfc00215 	stw	ra,8(sp)
   1b338:	df000115 	stw	fp,4(sp)
   1b33c:	df000104 	addi	fp,sp,4
   1b340:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   1b344:	001e6b80 	call	1e6b8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1b348:	00800044 	movi	r2,1
   1b34c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1b350:	0001883a 	nop
   1b354:	e037883a 	mov	sp,fp
   1b358:	dfc00117 	ldw	ra,4(sp)
   1b35c:	df000017 	ldw	fp,0(sp)
   1b360:	dec00204 	addi	sp,sp,8
   1b364:	f800283a 	ret

0001b368 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1b368:	defffc04 	addi	sp,sp,-16
   1b36c:	dfc00315 	stw	ra,12(sp)
   1b370:	df000215 	stw	fp,8(sp)
   1b374:	df000204 	addi	fp,sp,8
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   1b378:	01c00204 	movi	r7,8
   1b37c:	000d883a 	mov	r6,zero
   1b380:	000b883a 	mov	r5,zero
   1b384:	01040034 	movhi	r4,4096
   1b388:	21080004 	addi	r4,r4,8192
   1b38c:	001c91c0 	call	1c91c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   1b390:	01800204 	movi	r6,8
   1b394:	000b883a 	mov	r5,zero
   1b398:	010000b4 	movhi	r4,2
   1b39c:	2103bb04 	addi	r4,r4,3820
   1b3a0:	001bce00 	call	1bce0 <altera_avalon_jtag_uart_init>
   1b3a4:	010000b4 	movhi	r4,2
   1b3a8:	2103b104 	addi	r4,r4,3780
   1b3ac:	001b2fc0 	call	1b2fc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   1b3b0:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   1b3b4:	010000b4 	movhi	r4,2
   1b3b8:	2107cc04 	addi	r4,r4,7984
   1b3bc:	001b2fc0 	call	1b2fc <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   1b3c0:	010000b4 	movhi	r4,2
   1b3c4:	2107d804 	addi	r4,r4,8032
   1b3c8:	001b2fc0 	call	1b2fc <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   1b3cc:	010000b4 	movhi	r4,2
   1b3d0:	2107e404 	addi	r4,r4,8080
   1b3d4:	001ca440 	call	1ca44 <alt_up_character_lcd_init>
   1b3d8:	010000b4 	movhi	r4,2
   1b3dc:	2107e404 	addi	r4,r4,8080
   1b3e0:	001b2fc0 	call	1b2fc <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   1b3e4:	010000b4 	movhi	r4,2
   1b3e8:	2107ef04 	addi	r4,r4,8124
   1b3ec:	001b2fc0 	call	1b2fc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   1b3f0:	010000b4 	movhi	r4,2
   1b3f4:	2107fa04 	addi	r4,r4,8168
   1b3f8:	001b2fc0 	call	1b2fc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   1b3fc:	010000b4 	movhi	r4,2
   1b400:	21080504 	addi	r4,r4,8212
   1b404:	001b2fc0 	call	1b2fc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   1b408:	010000b4 	movhi	r4,2
   1b40c:	21081004 	addi	r4,r4,8256
   1b410:	001b2fc0 	call	1b2fc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   1b414:	010000b4 	movhi	r4,2
   1b418:	21081b04 	addi	r4,r4,8300
   1b41c:	001b2fc0 	call	1b2fc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   1b420:	010000b4 	movhi	r4,2
   1b424:	21082604 	addi	r4,r4,8344
   1b428:	001b2fc0 	call	1b2fc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   1b42c:	010000b4 	movhi	r4,2
   1b430:	21083104 	addi	r4,r4,8388
   1b434:	001b2fc0 	call	1b2fc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   1b438:	010000b4 	movhi	r4,2
   1b43c:	21083c04 	addi	r4,r4,8432
   1b440:	001b2fc0 	call	1b2fc <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   1b444:	010000b4 	movhi	r4,2
   1b448:	21084704 	addi	r4,r4,8476
   1b44c:	001d3380 	call	1d338 <alt_up_ps2_init>
   1b450:	010000b4 	movhi	r4,2
   1b454:	21084704 	addi	r4,r4,8476
   1b458:	001b2fc0 	call	1b2fc <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   1b45c:	010000b4 	movhi	r4,2
   1b460:	21085504 	addi	r4,r4,8532
   1b464:	001d3380 	call	1d338 <alt_up_ps2_init>
   1b468:	010000b4 	movhi	r4,2
   1b46c:	21085504 	addi	r4,r4,8532
   1b470:	001b2fc0 	call	1b2fc <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   1b474:	010000b4 	movhi	r4,2
   1b478:	21086304 	addi	r4,r4,8588
   1b47c:	001b2fc0 	call	1b2fc <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   1b480:	010000b4 	movhi	r4,2
   1b484:	21086e04 	addi	r4,r4,8632
   1b488:	001b2fc0 	call	1b2fc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
   1b48c:	008000b4 	movhi	r2,2
   1b490:	10887b04 	addi	r2,r2,8684
   1b494:	10800a17 	ldw	r2,40(r2)
   1b498:	10800017 	ldw	r2,0(r2)
   1b49c:	1007883a 	mov	r3,r2
   1b4a0:	008000b4 	movhi	r2,2
   1b4a4:	10887b04 	addi	r2,r2,8684
   1b4a8:	10c00b15 	stw	r3,44(r2)
   1b4ac:	008000b4 	movhi	r2,2
   1b4b0:	10887b04 	addi	r2,r2,8684
   1b4b4:	10800a17 	ldw	r2,40(r2)
   1b4b8:	10800104 	addi	r2,r2,4
   1b4bc:	10800017 	ldw	r2,0(r2)
   1b4c0:	1007883a 	mov	r3,r2
   1b4c4:	008000b4 	movhi	r2,2
   1b4c8:	10887b04 	addi	r2,r2,8684
   1b4cc:	10c00c15 	stw	r3,48(r2)
   1b4d0:	008000b4 	movhi	r2,2
   1b4d4:	10887b04 	addi	r2,r2,8684
   1b4d8:	10800a17 	ldw	r2,40(r2)
   1b4dc:	10800204 	addi	r2,r2,8
   1b4e0:	10800017 	ldw	r2,0(r2)
   1b4e4:	10ffffcc 	andi	r3,r2,65535
   1b4e8:	008000b4 	movhi	r2,2
   1b4ec:	10887b04 	addi	r2,r2,8684
   1b4f0:	10c01115 	stw	r3,68(r2)
   1b4f4:	008000b4 	movhi	r2,2
   1b4f8:	10887b04 	addi	r2,r2,8684
   1b4fc:	10800a17 	ldw	r2,40(r2)
   1b500:	10800204 	addi	r2,r2,8
   1b504:	10800017 	ldw	r2,0(r2)
   1b508:	1006d43a 	srli	r3,r2,16
   1b50c:	008000b4 	movhi	r2,2
   1b510:	10887b04 	addi	r2,r2,8684
   1b514:	10c01215 	stw	r3,72(r2)
   1b518:	008000b4 	movhi	r2,2
   1b51c:	10887b04 	addi	r2,r2,8684
   1b520:	10800a17 	ldw	r2,40(r2)
   1b524:	10800304 	addi	r2,r2,12
   1b528:	10800017 	ldw	r2,0(r2)
   1b52c:	1005d07a 	srai	r2,r2,1
   1b530:	10c0004c 	andi	r3,r2,1
   1b534:	008000b4 	movhi	r2,2
   1b538:	10887b04 	addi	r2,r2,8684
   1b53c:	10c00d15 	stw	r3,52(r2)
   1b540:	008000b4 	movhi	r2,2
   1b544:	10887b04 	addi	r2,r2,8684
   1b548:	10800a17 	ldw	r2,40(r2)
   1b54c:	10800304 	addi	r2,r2,12
   1b550:	10800017 	ldw	r2,0(r2)
   1b554:	1005d23a 	srai	r2,r2,8
   1b558:	10c003cc 	andi	r3,r2,15
   1b55c:	008000b4 	movhi	r2,2
   1b560:	10887b04 	addi	r2,r2,8684
   1b564:	10c00e15 	stw	r3,56(r2)
   1b568:	008000b4 	movhi	r2,2
   1b56c:	10887b04 	addi	r2,r2,8684
   1b570:	10800a17 	ldw	r2,40(r2)
   1b574:	10800304 	addi	r2,r2,12
   1b578:	10800017 	ldw	r2,0(r2)
   1b57c:	1005d1ba 	srai	r2,r2,6
   1b580:	10c000cc 	andi	r3,r2,3
   1b584:	008000b4 	movhi	r2,2
   1b588:	10887b04 	addi	r2,r2,8684
   1b58c:	10c00f15 	stw	r3,60(r2)
   1b590:	008000b4 	movhi	r2,2
   1b594:	10887b04 	addi	r2,r2,8684
   1b598:	10800e17 	ldw	r2,56(r2)
   1b59c:	1007883a 	mov	r3,r2
   1b5a0:	008000b4 	movhi	r2,2
   1b5a4:	10887b04 	addi	r2,r2,8684
   1b5a8:	10800f17 	ldw	r2,60(r2)
   1b5ac:	1885383a 	mul	r2,r3,r2
   1b5b0:	e0bffe05 	stb	r2,-8(fp)
   1b5b4:	e0bffe03 	ldbu	r2,-8(fp)
   1b5b8:	10800268 	cmpgeui	r2,r2,9
   1b5bc:	1000051e 	bne	r2,zero,1b5d4 <alt_sys_init+0x26c>
   1b5c0:	008000b4 	movhi	r2,2
   1b5c4:	10887b04 	addi	r2,r2,8684
   1b5c8:	00c00044 	movi	r3,1
   1b5cc:	10c01015 	stw	r3,64(r2)
   1b5d0:	00000c06 	br	1b604 <alt_sys_init+0x29c>
   1b5d4:	e0bffe03 	ldbu	r2,-8(fp)
   1b5d8:	10800468 	cmpgeui	r2,r2,17
   1b5dc:	1000051e 	bne	r2,zero,1b5f4 <alt_sys_init+0x28c>
   1b5e0:	008000b4 	movhi	r2,2
   1b5e4:	10887b04 	addi	r2,r2,8684
   1b5e8:	00c00084 	movi	r3,2
   1b5ec:	10c01015 	stw	r3,64(r2)
   1b5f0:	00000406 	br	1b604 <alt_sys_init+0x29c>
   1b5f4:	008000b4 	movhi	r2,2
   1b5f8:	10887b04 	addi	r2,r2,8684
   1b5fc:	00c00104 	movi	r3,4
   1b600:	10c01015 	stw	r3,64(r2)
   1b604:	008000b4 	movhi	r2,2
   1b608:	10887b04 	addi	r2,r2,8684
   1b60c:	10800a17 	ldw	r2,40(r2)
   1b610:	10800304 	addi	r2,r2,12
   1b614:	10800017 	ldw	r2,0(r2)
   1b618:	1005d43a 	srai	r2,r2,16
   1b61c:	e0bffe45 	stb	r2,-7(fp)
   1b620:	008000b4 	movhi	r2,2
   1b624:	10887b04 	addi	r2,r2,8684
   1b628:	10800a17 	ldw	r2,40(r2)
   1b62c:	10800304 	addi	r2,r2,12
   1b630:	10800017 	ldw	r2,0(r2)
   1b634:	1004d63a 	srli	r2,r2,24
   1b638:	e0bffe85 	stb	r2,-6(fp)
   1b63c:	008000b4 	movhi	r2,2
   1b640:	10887b04 	addi	r2,r2,8684
   1b644:	10801017 	ldw	r2,64(r2)
   1b648:	10800058 	cmpnei	r2,r2,1
   1b64c:	1000041e 	bne	r2,zero,1b660 <alt_sys_init+0x2f8>
   1b650:	008000b4 	movhi	r2,2
   1b654:	10887b04 	addi	r2,r2,8684
   1b658:	10001315 	stw	zero,76(r2)
   1b65c:	00000e06 	br	1b698 <alt_sys_init+0x330>
   1b660:	008000b4 	movhi	r2,2
   1b664:	10887b04 	addi	r2,r2,8684
   1b668:	10801017 	ldw	r2,64(r2)
   1b66c:	10800098 	cmpnei	r2,r2,2
   1b670:	1000051e 	bne	r2,zero,1b688 <alt_sys_init+0x320>
   1b674:	008000b4 	movhi	r2,2
   1b678:	10887b04 	addi	r2,r2,8684
   1b67c:	00c00044 	movi	r3,1
   1b680:	10c01315 	stw	r3,76(r2)
   1b684:	00000406 	br	1b698 <alt_sys_init+0x330>
   1b688:	008000b4 	movhi	r2,2
   1b68c:	10887b04 	addi	r2,r2,8684
   1b690:	00c00084 	movi	r3,2
   1b694:	10c01315 	stw	r3,76(r2)
   1b698:	e0bffe43 	ldbu	r2,-7(fp)
   1b69c:	00c00804 	movi	r3,32
   1b6a0:	1885c83a 	sub	r2,r3,r2
   1b6a4:	00ffffc4 	movi	r3,-1
   1b6a8:	1886d83a 	srl	r3,r3,r2
   1b6ac:	008000b4 	movhi	r2,2
   1b6b0:	10887b04 	addi	r2,r2,8684
   1b6b4:	10c01415 	stw	r3,80(r2)
   1b6b8:	e0fffe43 	ldbu	r3,-7(fp)
   1b6bc:	008000b4 	movhi	r2,2
   1b6c0:	10887b04 	addi	r2,r2,8684
   1b6c4:	10801317 	ldw	r2,76(r2)
   1b6c8:	1887883a 	add	r3,r3,r2
   1b6cc:	008000b4 	movhi	r2,2
   1b6d0:	10887b04 	addi	r2,r2,8684
   1b6d4:	10c01515 	stw	r3,84(r2)
   1b6d8:	e0bffe83 	ldbu	r2,-6(fp)
   1b6dc:	00c00804 	movi	r3,32
   1b6e0:	1885c83a 	sub	r2,r3,r2
   1b6e4:	00ffffc4 	movi	r3,-1
   1b6e8:	1886d83a 	srl	r3,r3,r2
   1b6ec:	008000b4 	movhi	r2,2
   1b6f0:	10887b04 	addi	r2,r2,8684
   1b6f4:	10c01615 	stw	r3,88(r2)
   1b6f8:	010000b4 	movhi	r4,2
   1b6fc:	21087b04 	addi	r4,r4,8684
   1b700:	001b2fc0 	call	1b2fc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
   1b704:	008000b4 	movhi	r2,2
   1b708:	10889204 	addi	r2,r2,8776
   1b70c:	10800a17 	ldw	r2,40(r2)
   1b710:	10800017 	ldw	r2,0(r2)
   1b714:	1007883a 	mov	r3,r2
   1b718:	008000b4 	movhi	r2,2
   1b71c:	10889204 	addi	r2,r2,8776
   1b720:	10c00b15 	stw	r3,44(r2)
   1b724:	008000b4 	movhi	r2,2
   1b728:	10889204 	addi	r2,r2,8776
   1b72c:	10800a17 	ldw	r2,40(r2)
   1b730:	10800104 	addi	r2,r2,4
   1b734:	10800017 	ldw	r2,0(r2)
   1b738:	1007883a 	mov	r3,r2
   1b73c:	008000b4 	movhi	r2,2
   1b740:	10889204 	addi	r2,r2,8776
   1b744:	10c00c15 	stw	r3,48(r2)
   1b748:	008000b4 	movhi	r2,2
   1b74c:	10889204 	addi	r2,r2,8776
   1b750:	10800a17 	ldw	r2,40(r2)
   1b754:	10800204 	addi	r2,r2,8
   1b758:	10800017 	ldw	r2,0(r2)
   1b75c:	10ffffcc 	andi	r3,r2,65535
   1b760:	008000b4 	movhi	r2,2
   1b764:	10889204 	addi	r2,r2,8776
   1b768:	10c01115 	stw	r3,68(r2)
   1b76c:	008000b4 	movhi	r2,2
   1b770:	10889204 	addi	r2,r2,8776
   1b774:	10800a17 	ldw	r2,40(r2)
   1b778:	10800204 	addi	r2,r2,8
   1b77c:	10800017 	ldw	r2,0(r2)
   1b780:	1006d43a 	srli	r3,r2,16
   1b784:	008000b4 	movhi	r2,2
   1b788:	10889204 	addi	r2,r2,8776
   1b78c:	10c01215 	stw	r3,72(r2)
   1b790:	008000b4 	movhi	r2,2
   1b794:	10889204 	addi	r2,r2,8776
   1b798:	10800a17 	ldw	r2,40(r2)
   1b79c:	10800304 	addi	r2,r2,12
   1b7a0:	10800017 	ldw	r2,0(r2)
   1b7a4:	1005d07a 	srai	r2,r2,1
   1b7a8:	10c0004c 	andi	r3,r2,1
   1b7ac:	008000b4 	movhi	r2,2
   1b7b0:	10889204 	addi	r2,r2,8776
   1b7b4:	10c00d15 	stw	r3,52(r2)
   1b7b8:	008000b4 	movhi	r2,2
   1b7bc:	10889204 	addi	r2,r2,8776
   1b7c0:	10800a17 	ldw	r2,40(r2)
   1b7c4:	10800304 	addi	r2,r2,12
   1b7c8:	10800017 	ldw	r2,0(r2)
   1b7cc:	1005d23a 	srai	r2,r2,8
   1b7d0:	10c003cc 	andi	r3,r2,15
   1b7d4:	008000b4 	movhi	r2,2
   1b7d8:	10889204 	addi	r2,r2,8776
   1b7dc:	10c00e15 	stw	r3,56(r2)
   1b7e0:	008000b4 	movhi	r2,2
   1b7e4:	10889204 	addi	r2,r2,8776
   1b7e8:	10800a17 	ldw	r2,40(r2)
   1b7ec:	10800304 	addi	r2,r2,12
   1b7f0:	10800017 	ldw	r2,0(r2)
   1b7f4:	1005d1ba 	srai	r2,r2,6
   1b7f8:	10c000cc 	andi	r3,r2,3
   1b7fc:	008000b4 	movhi	r2,2
   1b800:	10889204 	addi	r2,r2,8776
   1b804:	10c00f15 	stw	r3,60(r2)
   1b808:	008000b4 	movhi	r2,2
   1b80c:	10889204 	addi	r2,r2,8776
   1b810:	10800e17 	ldw	r2,56(r2)
   1b814:	1007883a 	mov	r3,r2
   1b818:	008000b4 	movhi	r2,2
   1b81c:	10889204 	addi	r2,r2,8776
   1b820:	10800f17 	ldw	r2,60(r2)
   1b824:	1885383a 	mul	r2,r3,r2
   1b828:	e0bffec5 	stb	r2,-5(fp)
   1b82c:	e0bffec3 	ldbu	r2,-5(fp)
   1b830:	10800268 	cmpgeui	r2,r2,9
   1b834:	1000051e 	bne	r2,zero,1b84c <alt_sys_init+0x4e4>
   1b838:	008000b4 	movhi	r2,2
   1b83c:	10889204 	addi	r2,r2,8776
   1b840:	00c00044 	movi	r3,1
   1b844:	10c01015 	stw	r3,64(r2)
   1b848:	00000c06 	br	1b87c <alt_sys_init+0x514>
   1b84c:	e0bffec3 	ldbu	r2,-5(fp)
   1b850:	10800468 	cmpgeui	r2,r2,17
   1b854:	1000051e 	bne	r2,zero,1b86c <alt_sys_init+0x504>
   1b858:	008000b4 	movhi	r2,2
   1b85c:	10889204 	addi	r2,r2,8776
   1b860:	00c00084 	movi	r3,2
   1b864:	10c01015 	stw	r3,64(r2)
   1b868:	00000406 	br	1b87c <alt_sys_init+0x514>
   1b86c:	008000b4 	movhi	r2,2
   1b870:	10889204 	addi	r2,r2,8776
   1b874:	00c00104 	movi	r3,4
   1b878:	10c01015 	stw	r3,64(r2)
   1b87c:	008000b4 	movhi	r2,2
   1b880:	10889204 	addi	r2,r2,8776
   1b884:	10800a17 	ldw	r2,40(r2)
   1b888:	10800304 	addi	r2,r2,12
   1b88c:	10800017 	ldw	r2,0(r2)
   1b890:	1005d43a 	srai	r2,r2,16
   1b894:	e0bfff05 	stb	r2,-4(fp)
   1b898:	008000b4 	movhi	r2,2
   1b89c:	10889204 	addi	r2,r2,8776
   1b8a0:	10800a17 	ldw	r2,40(r2)
   1b8a4:	10800304 	addi	r2,r2,12
   1b8a8:	10800017 	ldw	r2,0(r2)
   1b8ac:	1004d63a 	srli	r2,r2,24
   1b8b0:	e0bfff45 	stb	r2,-3(fp)
   1b8b4:	008000b4 	movhi	r2,2
   1b8b8:	10889204 	addi	r2,r2,8776
   1b8bc:	10801017 	ldw	r2,64(r2)
   1b8c0:	10800058 	cmpnei	r2,r2,1
   1b8c4:	1000041e 	bne	r2,zero,1b8d8 <alt_sys_init+0x570>
   1b8c8:	008000b4 	movhi	r2,2
   1b8cc:	10889204 	addi	r2,r2,8776
   1b8d0:	10001315 	stw	zero,76(r2)
   1b8d4:	00000e06 	br	1b910 <alt_sys_init+0x5a8>
   1b8d8:	008000b4 	movhi	r2,2
   1b8dc:	10889204 	addi	r2,r2,8776
   1b8e0:	10801017 	ldw	r2,64(r2)
   1b8e4:	10800098 	cmpnei	r2,r2,2
   1b8e8:	1000051e 	bne	r2,zero,1b900 <alt_sys_init+0x598>
   1b8ec:	008000b4 	movhi	r2,2
   1b8f0:	10889204 	addi	r2,r2,8776
   1b8f4:	00c00044 	movi	r3,1
   1b8f8:	10c01315 	stw	r3,76(r2)
   1b8fc:	00000406 	br	1b910 <alt_sys_init+0x5a8>
   1b900:	008000b4 	movhi	r2,2
   1b904:	10889204 	addi	r2,r2,8776
   1b908:	00c00084 	movi	r3,2
   1b90c:	10c01315 	stw	r3,76(r2)
   1b910:	e0bfff03 	ldbu	r2,-4(fp)
   1b914:	00c00804 	movi	r3,32
   1b918:	1885c83a 	sub	r2,r3,r2
   1b91c:	00ffffc4 	movi	r3,-1
   1b920:	1886d83a 	srl	r3,r3,r2
   1b924:	008000b4 	movhi	r2,2
   1b928:	10889204 	addi	r2,r2,8776
   1b92c:	10c01415 	stw	r3,80(r2)
   1b930:	e0ffff03 	ldbu	r3,-4(fp)
   1b934:	008000b4 	movhi	r2,2
   1b938:	10889204 	addi	r2,r2,8776
   1b93c:	10801317 	ldw	r2,76(r2)
   1b940:	1887883a 	add	r3,r3,r2
   1b944:	008000b4 	movhi	r2,2
   1b948:	10889204 	addi	r2,r2,8776
   1b94c:	10c01515 	stw	r3,84(r2)
   1b950:	e0bfff43 	ldbu	r2,-3(fp)
   1b954:	00c00804 	movi	r3,32
   1b958:	1885c83a 	sub	r2,r3,r2
   1b95c:	00ffffc4 	movi	r3,-1
   1b960:	1886d83a 	srl	r3,r3,r2
   1b964:	008000b4 	movhi	r2,2
   1b968:	10889204 	addi	r2,r2,8776
   1b96c:	10c01615 	stw	r3,88(r2)
   1b970:	010000b4 	movhi	r4,2
   1b974:	21089204 	addi	r4,r4,8776
   1b978:	001b2fc0 	call	1b2fc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   1b97c:	008000b4 	movhi	r2,2
   1b980:	1088a904 	addi	r2,r2,8868
   1b984:	10800a17 	ldw	r2,40(r2)
   1b988:	10800017 	ldw	r2,0(r2)
   1b98c:	1007883a 	mov	r3,r2
   1b990:	008000b4 	movhi	r2,2
   1b994:	1088a904 	addi	r2,r2,8868
   1b998:	10c00b15 	stw	r3,44(r2)
   1b99c:	008000b4 	movhi	r2,2
   1b9a0:	1088a904 	addi	r2,r2,8868
   1b9a4:	10800a17 	ldw	r2,40(r2)
   1b9a8:	10800104 	addi	r2,r2,4
   1b9ac:	10800017 	ldw	r2,0(r2)
   1b9b0:	1007883a 	mov	r3,r2
   1b9b4:	008000b4 	movhi	r2,2
   1b9b8:	1088a904 	addi	r2,r2,8868
   1b9bc:	10c00c15 	stw	r3,48(r2)
   1b9c0:	008000b4 	movhi	r2,2
   1b9c4:	1088a904 	addi	r2,r2,8868
   1b9c8:	10800a17 	ldw	r2,40(r2)
   1b9cc:	10800204 	addi	r2,r2,8
   1b9d0:	10800017 	ldw	r2,0(r2)
   1b9d4:	10ffffcc 	andi	r3,r2,65535
   1b9d8:	008000b4 	movhi	r2,2
   1b9dc:	1088a904 	addi	r2,r2,8868
   1b9e0:	10c00f15 	stw	r3,60(r2)
   1b9e4:	008000b4 	movhi	r2,2
   1b9e8:	1088a904 	addi	r2,r2,8868
   1b9ec:	10800a17 	ldw	r2,40(r2)
   1b9f0:	10800204 	addi	r2,r2,8
   1b9f4:	10800017 	ldw	r2,0(r2)
   1b9f8:	1006d43a 	srli	r3,r2,16
   1b9fc:	008000b4 	movhi	r2,2
   1ba00:	1088a904 	addi	r2,r2,8868
   1ba04:	10c01015 	stw	r3,64(r2)
   1ba08:	008000b4 	movhi	r2,2
   1ba0c:	1088a904 	addi	r2,r2,8868
   1ba10:	10800a17 	ldw	r2,40(r2)
   1ba14:	10800304 	addi	r2,r2,12
   1ba18:	10800017 	ldw	r2,0(r2)
   1ba1c:	1005d07a 	srai	r2,r2,1
   1ba20:	10c0004c 	andi	r3,r2,1
   1ba24:	008000b4 	movhi	r2,2
   1ba28:	1088a904 	addi	r2,r2,8868
   1ba2c:	10c00d15 	stw	r3,52(r2)
   1ba30:	008000b4 	movhi	r2,2
   1ba34:	1088a904 	addi	r2,r2,8868
   1ba38:	10800a17 	ldw	r2,40(r2)
   1ba3c:	10800304 	addi	r2,r2,12
   1ba40:	10800017 	ldw	r2,0(r2)
   1ba44:	1005d13a 	srai	r2,r2,4
   1ba48:	10c003cc 	andi	r3,r2,15
   1ba4c:	008000b4 	movhi	r2,2
   1ba50:	1088a904 	addi	r2,r2,8868
   1ba54:	10c00e15 	stw	r3,56(r2)
   1ba58:	008000b4 	movhi	r2,2
   1ba5c:	1088a904 	addi	r2,r2,8868
   1ba60:	10800a17 	ldw	r2,40(r2)
   1ba64:	10800304 	addi	r2,r2,12
   1ba68:	10800017 	ldw	r2,0(r2)
   1ba6c:	1005d43a 	srai	r2,r2,16
   1ba70:	e0bfff85 	stb	r2,-2(fp)
   1ba74:	008000b4 	movhi	r2,2
   1ba78:	1088a904 	addi	r2,r2,8868
   1ba7c:	10800a17 	ldw	r2,40(r2)
   1ba80:	10800304 	addi	r2,r2,12
   1ba84:	10800017 	ldw	r2,0(r2)
   1ba88:	1004d63a 	srli	r2,r2,24
   1ba8c:	e0bfffc5 	stb	r2,-1(fp)
   1ba90:	008000b4 	movhi	r2,2
   1ba94:	1088a904 	addi	r2,r2,8868
   1ba98:	10800e17 	ldw	r2,56(r2)
   1ba9c:	10800058 	cmpnei	r2,r2,1
   1baa0:	1000041e 	bne	r2,zero,1bab4 <alt_sys_init+0x74c>
   1baa4:	008000b4 	movhi	r2,2
   1baa8:	1088a904 	addi	r2,r2,8868
   1baac:	10001115 	stw	zero,68(r2)
   1bab0:	00000e06 	br	1baec <alt_sys_init+0x784>
   1bab4:	008000b4 	movhi	r2,2
   1bab8:	1088a904 	addi	r2,r2,8868
   1babc:	10800e17 	ldw	r2,56(r2)
   1bac0:	10800098 	cmpnei	r2,r2,2
   1bac4:	1000051e 	bne	r2,zero,1badc <alt_sys_init+0x774>
   1bac8:	008000b4 	movhi	r2,2
   1bacc:	1088a904 	addi	r2,r2,8868
   1bad0:	00c00044 	movi	r3,1
   1bad4:	10c01115 	stw	r3,68(r2)
   1bad8:	00000406 	br	1baec <alt_sys_init+0x784>
   1badc:	008000b4 	movhi	r2,2
   1bae0:	1088a904 	addi	r2,r2,8868
   1bae4:	00c00084 	movi	r3,2
   1bae8:	10c01115 	stw	r3,68(r2)
   1baec:	e0bfff83 	ldbu	r2,-2(fp)
   1baf0:	00c00804 	movi	r3,32
   1baf4:	1885c83a 	sub	r2,r3,r2
   1baf8:	00ffffc4 	movi	r3,-1
   1bafc:	1886d83a 	srl	r3,r3,r2
   1bb00:	008000b4 	movhi	r2,2
   1bb04:	1088a904 	addi	r2,r2,8868
   1bb08:	10c01215 	stw	r3,72(r2)
   1bb0c:	e0ffff83 	ldbu	r3,-2(fp)
   1bb10:	008000b4 	movhi	r2,2
   1bb14:	1088a904 	addi	r2,r2,8868
   1bb18:	10801117 	ldw	r2,68(r2)
   1bb1c:	1887883a 	add	r3,r3,r2
   1bb20:	008000b4 	movhi	r2,2
   1bb24:	1088a904 	addi	r2,r2,8868
   1bb28:	10c01315 	stw	r3,76(r2)
   1bb2c:	e0bfffc3 	ldbu	r2,-1(fp)
   1bb30:	00c00804 	movi	r3,32
   1bb34:	1885c83a 	sub	r2,r3,r2
   1bb38:	00ffffc4 	movi	r3,-1
   1bb3c:	1886d83a 	srl	r3,r3,r2
   1bb40:	008000b4 	movhi	r2,2
   1bb44:	1088a904 	addi	r2,r2,8868
   1bb48:	10c01415 	stw	r3,80(r2)
   1bb4c:	010000b4 	movhi	r4,2
   1bb50:	2108a904 	addi	r4,r4,8868
   1bb54:	001b2fc0 	call	1b2fc <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   1bb58:	010000b4 	movhi	r4,2
   1bb5c:	2108be04 	addi	r4,r4,8952
   1bb60:	001b2fc0 	call	1b2fc <alt_dev_reg>
}
   1bb64:	0001883a 	nop
   1bb68:	e037883a 	mov	sp,fp
   1bb6c:	dfc00117 	ldw	ra,4(sp)
   1bb70:	df000017 	ldw	fp,0(sp)
   1bb74:	dec00204 	addi	sp,sp,8
   1bb78:	f800283a 	ret

0001bb7c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1bb7c:	defffa04 	addi	sp,sp,-24
   1bb80:	dfc00515 	stw	ra,20(sp)
   1bb84:	df000415 	stw	fp,16(sp)
   1bb88:	df000404 	addi	fp,sp,16
   1bb8c:	e13ffd15 	stw	r4,-12(fp)
   1bb90:	e17ffe15 	stw	r5,-8(fp)
   1bb94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1bb98:	e0bffd17 	ldw	r2,-12(fp)
   1bb9c:	10800017 	ldw	r2,0(r2)
   1bba0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1bba4:	e0bffc17 	ldw	r2,-16(fp)
   1bba8:	10c00a04 	addi	r3,r2,40
   1bbac:	e0bffd17 	ldw	r2,-12(fp)
   1bbb0:	10800217 	ldw	r2,8(r2)
   1bbb4:	100f883a 	mov	r7,r2
   1bbb8:	e1bfff17 	ldw	r6,-4(fp)
   1bbbc:	e17ffe17 	ldw	r5,-8(fp)
   1bbc0:	1809883a 	mov	r4,r3
   1bbc4:	001c3200 	call	1c320 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1bbc8:	e037883a 	mov	sp,fp
   1bbcc:	dfc00117 	ldw	ra,4(sp)
   1bbd0:	df000017 	ldw	fp,0(sp)
   1bbd4:	dec00204 	addi	sp,sp,8
   1bbd8:	f800283a 	ret

0001bbdc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   1bbdc:	defffa04 	addi	sp,sp,-24
   1bbe0:	dfc00515 	stw	ra,20(sp)
   1bbe4:	df000415 	stw	fp,16(sp)
   1bbe8:	df000404 	addi	fp,sp,16
   1bbec:	e13ffd15 	stw	r4,-12(fp)
   1bbf0:	e17ffe15 	stw	r5,-8(fp)
   1bbf4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1bbf8:	e0bffd17 	ldw	r2,-12(fp)
   1bbfc:	10800017 	ldw	r2,0(r2)
   1bc00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   1bc04:	e0bffc17 	ldw	r2,-16(fp)
   1bc08:	10c00a04 	addi	r3,r2,40
   1bc0c:	e0bffd17 	ldw	r2,-12(fp)
   1bc10:	10800217 	ldw	r2,8(r2)
   1bc14:	100f883a 	mov	r7,r2
   1bc18:	e1bfff17 	ldw	r6,-4(fp)
   1bc1c:	e17ffe17 	ldw	r5,-8(fp)
   1bc20:	1809883a 	mov	r4,r3
   1bc24:	001c5dc0 	call	1c5dc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1bc28:	e037883a 	mov	sp,fp
   1bc2c:	dfc00117 	ldw	ra,4(sp)
   1bc30:	df000017 	ldw	fp,0(sp)
   1bc34:	dec00204 	addi	sp,sp,8
   1bc38:	f800283a 	ret

0001bc3c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   1bc3c:	defffc04 	addi	sp,sp,-16
   1bc40:	dfc00315 	stw	ra,12(sp)
   1bc44:	df000215 	stw	fp,8(sp)
   1bc48:	df000204 	addi	fp,sp,8
   1bc4c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1bc50:	e0bfff17 	ldw	r2,-4(fp)
   1bc54:	10800017 	ldw	r2,0(r2)
   1bc58:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1bc5c:	e0bffe17 	ldw	r2,-8(fp)
   1bc60:	10c00a04 	addi	r3,r2,40
   1bc64:	e0bfff17 	ldw	r2,-4(fp)
   1bc68:	10800217 	ldw	r2,8(r2)
   1bc6c:	100b883a 	mov	r5,r2
   1bc70:	1809883a 	mov	r4,r3
   1bc74:	001c1c80 	call	1c1c8 <altera_avalon_jtag_uart_close>
}
   1bc78:	e037883a 	mov	sp,fp
   1bc7c:	dfc00117 	ldw	ra,4(sp)
   1bc80:	df000017 	ldw	fp,0(sp)
   1bc84:	dec00204 	addi	sp,sp,8
   1bc88:	f800283a 	ret

0001bc8c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   1bc8c:	defffa04 	addi	sp,sp,-24
   1bc90:	dfc00515 	stw	ra,20(sp)
   1bc94:	df000415 	stw	fp,16(sp)
   1bc98:	df000404 	addi	fp,sp,16
   1bc9c:	e13ffd15 	stw	r4,-12(fp)
   1bca0:	e17ffe15 	stw	r5,-8(fp)
   1bca4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   1bca8:	e0bffd17 	ldw	r2,-12(fp)
   1bcac:	10800017 	ldw	r2,0(r2)
   1bcb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1bcb4:	e0bffc17 	ldw	r2,-16(fp)
   1bcb8:	10800a04 	addi	r2,r2,40
   1bcbc:	e1bfff17 	ldw	r6,-4(fp)
   1bcc0:	e17ffe17 	ldw	r5,-8(fp)
   1bcc4:	1009883a 	mov	r4,r2
   1bcc8:	001c2300 	call	1c230 <altera_avalon_jtag_uart_ioctl>
}
   1bccc:	e037883a 	mov	sp,fp
   1bcd0:	dfc00117 	ldw	ra,4(sp)
   1bcd4:	df000017 	ldw	fp,0(sp)
   1bcd8:	dec00204 	addi	sp,sp,8
   1bcdc:	f800283a 	ret

0001bce0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   1bce0:	defff204 	addi	sp,sp,-56
   1bce4:	dfc00d15 	stw	ra,52(sp)
   1bce8:	df000c15 	stw	fp,48(sp)
   1bcec:	df000c04 	addi	fp,sp,48
   1bcf0:	e13ff915 	stw	r4,-28(fp)
   1bcf4:	e17ffa15 	stw	r5,-24(fp)
   1bcf8:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   1bcfc:	e0bff917 	ldw	r2,-28(fp)
   1bd00:	10800c04 	addi	r2,r2,48
   1bd04:	e0bff415 	stw	r2,-48(fp)
   1bd08:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   1bd0c:	e0bff80b 	ldhu	r2,-32(fp)
   1bd10:	e0fff884 	addi	r3,fp,-30
   1bd14:	180b883a 	mov	r5,r3
   1bd18:	1009883a 	mov	r4,r2
   1bd1c:	0015fd80 	call	15fd8 <OSFlagCreate>
   1bd20:	1007883a 	mov	r3,r2
   1bd24:	e0bff417 	ldw	r2,-48(fp)
   1bd28:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   1bd2c:	e0bff917 	ldw	r2,-28(fp)
   1bd30:	10800a04 	addi	r2,r2,40
   1bd34:	e0bff515 	stw	r2,-44(fp)
   1bd38:	00800044 	movi	r2,1
   1bd3c:	e0bff78d 	sth	r2,-34(fp)
   1bd40:	e0bff78b 	ldhu	r2,-34(fp)
   1bd44:	1009883a 	mov	r4,r2
   1bd48:	0018cec0 	call	18cec <OSSemCreate>
   1bd4c:	1007883a 	mov	r3,r2
   1bd50:	e0bff517 	ldw	r2,-44(fp)
   1bd54:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   1bd58:	e0bff917 	ldw	r2,-28(fp)
   1bd5c:	10800b04 	addi	r2,r2,44
   1bd60:	e0bff615 	stw	r2,-40(fp)
   1bd64:	00800044 	movi	r2,1
   1bd68:	e0bff70d 	sth	r2,-36(fp)
   1bd6c:	e0bff70b 	ldhu	r2,-36(fp)
   1bd70:	1009883a 	mov	r4,r2
   1bd74:	0018cec0 	call	18cec <OSSemCreate>
   1bd78:	1007883a 	mov	r3,r2
   1bd7c:	e0bff617 	ldw	r2,-40(fp)
   1bd80:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1bd84:	e0bff917 	ldw	r2,-28(fp)
   1bd88:	00c00044 	movi	r3,1
   1bd8c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   1bd90:	e0bff917 	ldw	r2,-28(fp)
   1bd94:	10800017 	ldw	r2,0(r2)
   1bd98:	10800104 	addi	r2,r2,4
   1bd9c:	1007883a 	mov	r3,r2
   1bda0:	e0bff917 	ldw	r2,-28(fp)
   1bda4:	10800817 	ldw	r2,32(r2)
   1bda8:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   1bdac:	e0bffb17 	ldw	r2,-20(fp)
   1bdb0:	018000b4 	movhi	r6,2
   1bdb4:	31af8704 	addi	r6,r6,-16868
   1bdb8:	e17ff917 	ldw	r5,-28(fp)
   1bdbc:	1009883a 	mov	r4,r2
   1bdc0:	001e1400 	call	1e140 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1bdc4:	e0bff917 	ldw	r2,-28(fp)
   1bdc8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   1bdcc:	e0bff917 	ldw	r2,-28(fp)
   1bdd0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1bdd4:	d0e85c17 	ldw	r3,-24208(gp)
   1bdd8:	e1fff917 	ldw	r7,-28(fp)
   1bddc:	018000b4 	movhi	r6,2
   1bde0:	31b03104 	addi	r6,r6,-16188
   1bde4:	180b883a 	mov	r5,r3
   1bde8:	1009883a 	mov	r4,r2
   1bdec:	001dc500 	call	1dc50 <alt_alarm_start>
   1bdf0:	1000040e 	bge	r2,zero,1be04 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   1bdf4:	e0fff917 	ldw	r3,-28(fp)
   1bdf8:	00a00034 	movhi	r2,32768
   1bdfc:	10bfffc4 	addi	r2,r2,-1
   1be00:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   1be04:	0001883a 	nop
   1be08:	e037883a 	mov	sp,fp
   1be0c:	dfc00117 	ldw	ra,4(sp)
   1be10:	df000017 	ldw	fp,0(sp)
   1be14:	dec00204 	addi	sp,sp,8
   1be18:	f800283a 	ret

0001be1c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   1be1c:	defff104 	addi	sp,sp,-60
   1be20:	dfc00e15 	stw	ra,56(sp)
   1be24:	df000d15 	stw	fp,52(sp)
   1be28:	df000d04 	addi	fp,sp,52
   1be2c:	e13ffe15 	stw	r4,-8(fp)
   1be30:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   1be34:	e0bffe17 	ldw	r2,-8(fp)
   1be38:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   1be3c:	e0bff517 	ldw	r2,-44(fp)
   1be40:	10800017 	ldw	r2,0(r2)
   1be44:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1be48:	e0bff617 	ldw	r2,-40(fp)
   1be4c:	10800104 	addi	r2,r2,4
   1be50:	10800037 	ldwio	r2,0(r2)
   1be54:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1be58:	e0bff717 	ldw	r2,-36(fp)
   1be5c:	1080c00c 	andi	r2,r2,768
   1be60:	10009126 	beq	r2,zero,1c0a8 <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1be64:	e0bff717 	ldw	r2,-36(fp)
   1be68:	1080400c 	andi	r2,r2,256
   1be6c:	10004726 	beq	r2,zero,1bf8c <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1be70:	00800074 	movhi	r2,1
   1be74:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1be78:	e0bff517 	ldw	r2,-44(fp)
   1be7c:	10800d17 	ldw	r2,52(r2)
   1be80:	10800044 	addi	r2,r2,1
   1be84:	1081ffcc 	andi	r2,r2,2047
   1be88:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   1be8c:	e0bff517 	ldw	r2,-44(fp)
   1be90:	10c00e17 	ldw	r3,56(r2)
   1be94:	e0bff817 	ldw	r2,-32(fp)
   1be98:	18802726 	beq	r3,r2,1bf38 <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1be9c:	e0bff617 	ldw	r2,-40(fp)
   1bea0:	10800037 	ldwio	r2,0(r2)
   1bea4:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   1bea8:	e0bff317 	ldw	r2,-52(fp)
   1beac:	10a0000c 	andi	r2,r2,32768
   1beb0:	10002326 	beq	r2,zero,1bf40 <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   1beb4:	e0bff517 	ldw	r2,-44(fp)
   1beb8:	10800d17 	ldw	r2,52(r2)
   1bebc:	e0fff317 	ldw	r3,-52(fp)
   1bec0:	1809883a 	mov	r4,r3
   1bec4:	e0fff517 	ldw	r3,-44(fp)
   1bec8:	1885883a 	add	r2,r3,r2
   1becc:	10801104 	addi	r2,r2,68
   1bed0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1bed4:	e0bff517 	ldw	r2,-44(fp)
   1bed8:	10800d17 	ldw	r2,52(r2)
   1bedc:	10800044 	addi	r2,r2,1
   1bee0:	10c1ffcc 	andi	r3,r2,2047
   1bee4:	e0bff517 	ldw	r2,-44(fp)
   1bee8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   1beec:	e0bff517 	ldw	r2,-44(fp)
   1bef0:	10800c17 	ldw	r2,48(r2)
   1bef4:	e0bffa15 	stw	r2,-24(fp)
   1bef8:	00800044 	movi	r2,1
   1befc:	e0bffb0d 	sth	r2,-20(fp)
   1bf00:	00800044 	movi	r2,1
   1bf04:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1bf08:	d0a84743 	ldbu	r2,-24291(gp)
   1bf0c:	10803fcc 	andi	r2,r2,255
   1bf10:	103fd926 	beq	r2,zero,1be78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701be78>
  {
    OSFlagPost (group, flags, opt, &err);
   1bf14:	e0bffb0b 	ldhu	r2,-20(fp)
   1bf18:	e0fffb83 	ldbu	r3,-18(fp)
   1bf1c:	e13ffcc4 	addi	r4,fp,-13
   1bf20:	200f883a 	mov	r7,r4
   1bf24:	180d883a 	mov	r6,r3
   1bf28:	100b883a 	mov	r5,r2
   1bf2c:	e13ffa17 	ldw	r4,-24(fp)
   1bf30:	0016bb40 	call	16bb4 <OSFlagPost>
      }
   1bf34:	003fd006 	br	1be78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701be78>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   1bf38:	0001883a 	nop
   1bf3c:	00000106 	br	1bf44 <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   1bf40:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   1bf44:	e0bff317 	ldw	r2,-52(fp)
   1bf48:	10bfffec 	andhi	r2,r2,65535
   1bf4c:	10000f26 	beq	r2,zero,1bf8c <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1bf50:	e0bff517 	ldw	r2,-44(fp)
   1bf54:	10c00817 	ldw	r3,32(r2)
   1bf58:	00bfff84 	movi	r2,-2
   1bf5c:	1886703a 	and	r3,r3,r2
   1bf60:	e0bff517 	ldw	r2,-44(fp)
   1bf64:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1bf68:	e0bff617 	ldw	r2,-40(fp)
   1bf6c:	10800104 	addi	r2,r2,4
   1bf70:	1007883a 	mov	r3,r2
   1bf74:	e0bff517 	ldw	r2,-44(fp)
   1bf78:	10800817 	ldw	r2,32(r2)
   1bf7c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1bf80:	e0bff617 	ldw	r2,-40(fp)
   1bf84:	10800104 	addi	r2,r2,4
   1bf88:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   1bf8c:	e0bff717 	ldw	r2,-36(fp)
   1bf90:	1080800c 	andi	r2,r2,512
   1bf94:	103fac26 	beq	r2,zero,1be48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701be48>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   1bf98:	e0bff717 	ldw	r2,-36(fp)
   1bf9c:	1004d43a 	srli	r2,r2,16
   1bfa0:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   1bfa4:	00002606 	br	1c040 <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   1bfa8:	e0bff617 	ldw	r2,-40(fp)
   1bfac:	e0fff517 	ldw	r3,-44(fp)
   1bfb0:	18c01017 	ldw	r3,64(r3)
   1bfb4:	e13ff517 	ldw	r4,-44(fp)
   1bfb8:	20c7883a 	add	r3,r4,r3
   1bfbc:	18c21104 	addi	r3,r3,2116
   1bfc0:	18c00003 	ldbu	r3,0(r3)
   1bfc4:	18c03fcc 	andi	r3,r3,255
   1bfc8:	18c0201c 	xori	r3,r3,128
   1bfcc:	18ffe004 	addi	r3,r3,-128
   1bfd0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1bfd4:	e0bff517 	ldw	r2,-44(fp)
   1bfd8:	10801017 	ldw	r2,64(r2)
   1bfdc:	10800044 	addi	r2,r2,1
   1bfe0:	10c1ffcc 	andi	r3,r2,2047
   1bfe4:	e0bff517 	ldw	r2,-44(fp)
   1bfe8:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   1bfec:	e0bff517 	ldw	r2,-44(fp)
   1bff0:	10800c17 	ldw	r2,48(r2)
   1bff4:	e0bff915 	stw	r2,-28(fp)
   1bff8:	00800084 	movi	r2,2
   1bffc:	e0bffc0d 	sth	r2,-16(fp)
   1c000:	00800044 	movi	r2,1
   1c004:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1c008:	d0a84743 	ldbu	r2,-24291(gp)
   1c00c:	10803fcc 	andi	r2,r2,255
   1c010:	10000826 	beq	r2,zero,1c034 <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
   1c014:	e0bffc0b 	ldhu	r2,-16(fp)
   1c018:	e0fffc83 	ldbu	r3,-14(fp)
   1c01c:	e13ffd04 	addi	r4,fp,-12
   1c020:	200f883a 	mov	r7,r4
   1c024:	180d883a 	mov	r6,r3
   1c028:	100b883a 	mov	r5,r2
   1c02c:	e13ff917 	ldw	r4,-28(fp)
   1c030:	0016bb40 	call	16bb4 <OSFlagPost>

        space--;
   1c034:	e0bff417 	ldw	r2,-48(fp)
   1c038:	10bfffc4 	addi	r2,r2,-1
   1c03c:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1c040:	e0bff417 	ldw	r2,-48(fp)
   1c044:	10000526 	beq	r2,zero,1c05c <altera_avalon_jtag_uart_irq+0x240>
   1c048:	e0bff517 	ldw	r2,-44(fp)
   1c04c:	10c01017 	ldw	r3,64(r2)
   1c050:	e0bff517 	ldw	r2,-44(fp)
   1c054:	10800f17 	ldw	r2,60(r2)
   1c058:	18bfd31e 	bne	r3,r2,1bfa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701bfa8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1c05c:	e0bff417 	ldw	r2,-48(fp)
   1c060:	103f7926 	beq	r2,zero,1be48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701be48>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1c064:	e0bff517 	ldw	r2,-44(fp)
   1c068:	10c00817 	ldw	r3,32(r2)
   1c06c:	00bfff44 	movi	r2,-3
   1c070:	1886703a 	and	r3,r3,r2
   1c074:	e0bff517 	ldw	r2,-44(fp)
   1c078:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1c07c:	e0bff517 	ldw	r2,-44(fp)
   1c080:	10800017 	ldw	r2,0(r2)
   1c084:	10800104 	addi	r2,r2,4
   1c088:	1007883a 	mov	r3,r2
   1c08c:	e0bff517 	ldw	r2,-44(fp)
   1c090:	10800817 	ldw	r2,32(r2)
   1c094:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1c098:	e0bff617 	ldw	r2,-40(fp)
   1c09c:	10800104 	addi	r2,r2,4
   1c0a0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1c0a4:	003f6806 	br	1be48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701be48>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   1c0a8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1c0ac:	0001883a 	nop
   1c0b0:	e037883a 	mov	sp,fp
   1c0b4:	dfc00117 	ldw	ra,4(sp)
   1c0b8:	df000017 	ldw	fp,0(sp)
   1c0bc:	dec00204 	addi	sp,sp,8
   1c0c0:	f800283a 	ret

0001c0c4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1c0c4:	defff904 	addi	sp,sp,-28
   1c0c8:	dfc00615 	stw	ra,24(sp)
   1c0cc:	df000515 	stw	fp,20(sp)
   1c0d0:	df000504 	addi	fp,sp,20
   1c0d4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1c0d8:	e0bfff17 	ldw	r2,-4(fp)
   1c0dc:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   1c0e0:	e0bffb17 	ldw	r2,-20(fp)
   1c0e4:	10800017 	ldw	r2,0(r2)
   1c0e8:	10800104 	addi	r2,r2,4
   1c0ec:	10800037 	ldwio	r2,0(r2)
   1c0f0:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1c0f4:	e0bffc17 	ldw	r2,-16(fp)
   1c0f8:	1081000c 	andi	r2,r2,1024
   1c0fc:	10000b26 	beq	r2,zero,1c12c <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1c100:	e0bffb17 	ldw	r2,-20(fp)
   1c104:	10800017 	ldw	r2,0(r2)
   1c108:	10800104 	addi	r2,r2,4
   1c10c:	1007883a 	mov	r3,r2
   1c110:	e0bffb17 	ldw	r2,-20(fp)
   1c114:	10800817 	ldw	r2,32(r2)
   1c118:	10810014 	ori	r2,r2,1024
   1c11c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   1c120:	e0bffb17 	ldw	r2,-20(fp)
   1c124:	10000915 	stw	zero,36(r2)
   1c128:	00002106 	br	1c1b0 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1c12c:	e0bffb17 	ldw	r2,-20(fp)
   1c130:	10c00917 	ldw	r3,36(r2)
   1c134:	00a00034 	movhi	r2,32768
   1c138:	10bfff04 	addi	r2,r2,-4
   1c13c:	10c01c36 	bltu	r2,r3,1c1b0 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   1c140:	e0bffb17 	ldw	r2,-20(fp)
   1c144:	10800917 	ldw	r2,36(r2)
   1c148:	10c00044 	addi	r3,r2,1
   1c14c:	e0bffb17 	ldw	r2,-20(fp)
   1c150:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   1c154:	e0bffb17 	ldw	r2,-20(fp)
   1c158:	10c00917 	ldw	r3,36(r2)
   1c15c:	e0bffb17 	ldw	r2,-20(fp)
   1c160:	10800117 	ldw	r2,4(r2)
   1c164:	18801236 	bltu	r3,r2,1c1b0 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   1c168:	e0bffb17 	ldw	r2,-20(fp)
   1c16c:	10800c17 	ldw	r2,48(r2)
   1c170:	e0bffd15 	stw	r2,-12(fp)
   1c174:	00800104 	movi	r2,4
   1c178:	e0bffe0d 	sth	r2,-8(fp)
   1c17c:	00800044 	movi	r2,1
   1c180:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   1c184:	d0a84743 	ldbu	r2,-24291(gp)
   1c188:	10803fcc 	andi	r2,r2,255
   1c18c:	10000826 	beq	r2,zero,1c1b0 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   1c190:	e0bffe0b 	ldhu	r2,-8(fp)
   1c194:	e0fffe83 	ldbu	r3,-6(fp)
   1c198:	e13ffec4 	addi	r4,fp,-5
   1c19c:	200f883a 	mov	r7,r4
   1c1a0:	180d883a 	mov	r6,r3
   1c1a4:	100b883a 	mov	r5,r2
   1c1a8:	e13ffd17 	ldw	r4,-12(fp)
   1c1ac:	0016bb40 	call	16bb4 <OSFlagPost>
   1c1b0:	d0a85c17 	ldw	r2,-24208(gp)
    }
  }

  return alt_ticks_per_second();
}
   1c1b4:	e037883a 	mov	sp,fp
   1c1b8:	dfc00117 	ldw	ra,4(sp)
   1c1bc:	df000017 	ldw	fp,0(sp)
   1c1c0:	dec00204 	addi	sp,sp,8
   1c1c4:	f800283a 	ret

0001c1c8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1c1c8:	defffd04 	addi	sp,sp,-12
   1c1cc:	df000215 	stw	fp,8(sp)
   1c1d0:	df000204 	addi	fp,sp,8
   1c1d4:	e13ffe15 	stw	r4,-8(fp)
   1c1d8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1c1dc:	00000506 	br	1c1f4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   1c1e0:	e0bfff17 	ldw	r2,-4(fp)
   1c1e4:	1090000c 	andi	r2,r2,16384
   1c1e8:	10000226 	beq	r2,zero,1c1f4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   1c1ec:	00bffd44 	movi	r2,-11
   1c1f0:	00000b06 	br	1c220 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1c1f4:	e0bffe17 	ldw	r2,-8(fp)
   1c1f8:	10c01017 	ldw	r3,64(r2)
   1c1fc:	e0bffe17 	ldw	r2,-8(fp)
   1c200:	10800f17 	ldw	r2,60(r2)
   1c204:	18800526 	beq	r3,r2,1c21c <altera_avalon_jtag_uart_close+0x54>
   1c208:	e0bffe17 	ldw	r2,-8(fp)
   1c20c:	10c00917 	ldw	r3,36(r2)
   1c210:	e0bffe17 	ldw	r2,-8(fp)
   1c214:	10800117 	ldw	r2,4(r2)
   1c218:	18bff136 	bltu	r3,r2,1c1e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701c1e0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1c21c:	0005883a 	mov	r2,zero
}
   1c220:	e037883a 	mov	sp,fp
   1c224:	df000017 	ldw	fp,0(sp)
   1c228:	dec00104 	addi	sp,sp,4
   1c22c:	f800283a 	ret

0001c230 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   1c230:	defffa04 	addi	sp,sp,-24
   1c234:	df000515 	stw	fp,20(sp)
   1c238:	df000504 	addi	fp,sp,20
   1c23c:	e13ffd15 	stw	r4,-12(fp)
   1c240:	e17ffe15 	stw	r5,-8(fp)
   1c244:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   1c248:	00bff9c4 	movi	r2,-25
   1c24c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   1c250:	e0bffe17 	ldw	r2,-8(fp)
   1c254:	10da8060 	cmpeqi	r3,r2,27137
   1c258:	1800031e 	bne	r3,zero,1c268 <altera_avalon_jtag_uart_ioctl+0x38>
   1c25c:	109a80a0 	cmpeqi	r2,r2,27138
   1c260:	1000181e 	bne	r2,zero,1c2c4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   1c264:	00002906 	br	1c30c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   1c268:	e0bffd17 	ldw	r2,-12(fp)
   1c26c:	10c00117 	ldw	r3,4(r2)
   1c270:	00a00034 	movhi	r2,32768
   1c274:	10bfffc4 	addi	r2,r2,-1
   1c278:	18802126 	beq	r3,r2,1c300 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   1c27c:	e0bfff17 	ldw	r2,-4(fp)
   1c280:	10800017 	ldw	r2,0(r2)
   1c284:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   1c288:	e0bffc17 	ldw	r2,-16(fp)
   1c28c:	10800090 	cmplti	r2,r2,2
   1c290:	1000061e 	bne	r2,zero,1c2ac <altera_avalon_jtag_uart_ioctl+0x7c>
   1c294:	e0fffc17 	ldw	r3,-16(fp)
   1c298:	00a00034 	movhi	r2,32768
   1c29c:	10bfffc4 	addi	r2,r2,-1
   1c2a0:	18800226 	beq	r3,r2,1c2ac <altera_avalon_jtag_uart_ioctl+0x7c>
   1c2a4:	e0bffc17 	ldw	r2,-16(fp)
   1c2a8:	00000206 	br	1c2b4 <altera_avalon_jtag_uart_ioctl+0x84>
   1c2ac:	00a00034 	movhi	r2,32768
   1c2b0:	10bfff84 	addi	r2,r2,-2
   1c2b4:	e0fffd17 	ldw	r3,-12(fp)
   1c2b8:	18800115 	stw	r2,4(r3)
      rc = 0;
   1c2bc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1c2c0:	00000f06 	br	1c300 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   1c2c4:	e0bffd17 	ldw	r2,-12(fp)
   1c2c8:	10c00117 	ldw	r3,4(r2)
   1c2cc:	00a00034 	movhi	r2,32768
   1c2d0:	10bfffc4 	addi	r2,r2,-1
   1c2d4:	18800c26 	beq	r3,r2,1c308 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   1c2d8:	e0bffd17 	ldw	r2,-12(fp)
   1c2dc:	10c00917 	ldw	r3,36(r2)
   1c2e0:	e0bffd17 	ldw	r2,-12(fp)
   1c2e4:	10800117 	ldw	r2,4(r2)
   1c2e8:	1885803a 	cmpltu	r2,r3,r2
   1c2ec:	10c03fcc 	andi	r3,r2,255
   1c2f0:	e0bfff17 	ldw	r2,-4(fp)
   1c2f4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   1c2f8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   1c2fc:	00000206 	br	1c308 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   1c300:	0001883a 	nop
   1c304:	00000106 	br	1c30c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   1c308:	0001883a 	nop

  default:
    break;
  }

  return rc;
   1c30c:	e0bffb17 	ldw	r2,-20(fp)
}
   1c310:	e037883a 	mov	sp,fp
   1c314:	df000017 	ldw	fp,0(sp)
   1c318:	dec00104 	addi	sp,sp,4
   1c31c:	f800283a 	ret

0001c320 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   1c320:	deffed04 	addi	sp,sp,-76
   1c324:	dfc01215 	stw	ra,72(sp)
   1c328:	df001115 	stw	fp,68(sp)
   1c32c:	df001104 	addi	fp,sp,68
   1c330:	e13ffc15 	stw	r4,-16(fp)
   1c334:	e17ffd15 	stw	r5,-12(fp)
   1c338:	e1bffe15 	stw	r6,-8(fp)
   1c33c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   1c340:	e0bffd17 	ldw	r2,-12(fp)
   1c344:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   1c348:	e0bffc17 	ldw	r2,-16(fp)
   1c34c:	10800a17 	ldw	r2,40(r2)
   1c350:	e0bff815 	stw	r2,-32(fp)
   1c354:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   1c358:	e0bff90b 	ldhu	r2,-28(fp)
   1c35c:	e0fffb04 	addi	r3,fp,-20
   1c360:	180d883a 	mov	r6,r3
   1c364:	100b883a 	mov	r5,r2
   1c368:	e13ff817 	ldw	r4,-32(fp)
   1c36c:	00190040 	call	19004 <OSSemPend>

  while (space > 0)
   1c370:	00006106 	br	1c4f8 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   1c374:	e0bffc17 	ldw	r2,-16(fp)
   1c378:	10800d17 	ldw	r2,52(r2)
   1c37c:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   1c380:	e0bffc17 	ldw	r2,-16(fp)
   1c384:	10800e17 	ldw	r2,56(r2)
   1c388:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   1c38c:	e0fff317 	ldw	r3,-52(fp)
   1c390:	e0bff417 	ldw	r2,-48(fp)
   1c394:	18800536 	bltu	r3,r2,1c3ac <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   1c398:	e0fff317 	ldw	r3,-52(fp)
   1c39c:	e0bff417 	ldw	r2,-48(fp)
   1c3a0:	1885c83a 	sub	r2,r3,r2
   1c3a4:	e0bff115 	stw	r2,-60(fp)
   1c3a8:	00000406 	br	1c3bc <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1c3ac:	00c20004 	movi	r3,2048
   1c3b0:	e0bff417 	ldw	r2,-48(fp)
   1c3b4:	1885c83a 	sub	r2,r3,r2
   1c3b8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1c3bc:	e0bff117 	ldw	r2,-60(fp)
   1c3c0:	10001e26 	beq	r2,zero,1c43c <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   1c3c4:	e0fffe17 	ldw	r3,-8(fp)
   1c3c8:	e0bff117 	ldw	r2,-60(fp)
   1c3cc:	1880022e 	bgeu	r3,r2,1c3d8 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   1c3d0:	e0bffe17 	ldw	r2,-8(fp)
   1c3d4:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1c3d8:	e0bffc17 	ldw	r2,-16(fp)
   1c3dc:	10c01104 	addi	r3,r2,68
   1c3e0:	e0bff417 	ldw	r2,-48(fp)
   1c3e4:	1885883a 	add	r2,r3,r2
   1c3e8:	e1bff117 	ldw	r6,-60(fp)
   1c3ec:	100b883a 	mov	r5,r2
   1c3f0:	e13ff017 	ldw	r4,-64(fp)
   1c3f4:	00073640 	call	7364 <memcpy>
      ptr   += n;
   1c3f8:	e0fff017 	ldw	r3,-64(fp)
   1c3fc:	e0bff117 	ldw	r2,-60(fp)
   1c400:	1885883a 	add	r2,r3,r2
   1c404:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   1c408:	e0fffe17 	ldw	r3,-8(fp)
   1c40c:	e0bff117 	ldw	r2,-60(fp)
   1c410:	1885c83a 	sub	r2,r3,r2
   1c414:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c418:	e0fff417 	ldw	r3,-48(fp)
   1c41c:	e0bff117 	ldw	r2,-60(fp)
   1c420:	1885883a 	add	r2,r3,r2
   1c424:	10c1ffcc 	andi	r3,r2,2047
   1c428:	e0bffc17 	ldw	r2,-16(fp)
   1c42c:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   1c430:	e0bffe17 	ldw	r2,-8(fp)
   1c434:	00bfcf16 	blt	zero,r2,1c374 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701c374>
   1c438:	00000106 	br	1c440 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1c43c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   1c440:	e0fff017 	ldw	r3,-64(fp)
   1c444:	e0bffd17 	ldw	r2,-12(fp)
   1c448:	18802e1e 	bne	r3,r2,1c504 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1c44c:	e0bfff17 	ldw	r2,-4(fp)
   1c450:	1090000c 	andi	r2,r2,16384
   1c454:	10002d1e 	bne	r2,zero,1c50c <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   1c458:	d0a84743 	ldbu	r2,-24291(gp)
   1c45c:	10803fcc 	andi	r2,r2,255
   1c460:	10800058 	cmpnei	r2,r2,1
   1c464:	1000161e 	bne	r2,zero,1c4c0 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   1c468:	e0bffc17 	ldw	r2,-16(fp)
   1c46c:	10800c17 	ldw	r2,48(r2)
   1c470:	e0bff215 	stw	r2,-56(fp)
   1c474:	00800144 	movi	r2,5
   1c478:	e0bff98d 	sth	r2,-26(fp)
   1c47c:	00bfe0c4 	movi	r2,-125
   1c480:	e0bffa05 	stb	r2,-24(fp)
   1c484:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1c488:	d0a84743 	ldbu	r2,-24291(gp)
   1c48c:	10803fcc 	andi	r2,r2,255
   1c490:	10001526 	beq	r2,zero,1c4e8 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1c494:	e0fff98b 	ldhu	r3,-26(fp)
   1c498:	e13ffa03 	ldbu	r4,-24(fp)
   1c49c:	e17ffa8b 	ldhu	r5,-22(fp)
   1c4a0:	e0bffb44 	addi	r2,fp,-19
   1c4a4:	d8800015 	stw	r2,0(sp)
   1c4a8:	280f883a 	mov	r7,r5
   1c4ac:	200d883a 	mov	r6,r4
   1c4b0:	180b883a 	mov	r5,r3
   1c4b4:	e13ff217 	ldw	r4,-56(fp)
   1c4b8:	001659c0 	call	1659c <OSFlagPend>
   1c4bc:	00000a06 	br	1c4e8 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   1c4c0:	0001883a 	nop
   1c4c4:	e0bffc17 	ldw	r2,-16(fp)
   1c4c8:	10c00d17 	ldw	r3,52(r2)
   1c4cc:	e0bff317 	ldw	r2,-52(fp)
   1c4d0:	1880051e 	bne	r3,r2,1c4e8 <altera_avalon_jtag_uart_read+0x1c8>
   1c4d4:	e0bffc17 	ldw	r2,-16(fp)
   1c4d8:	10c00917 	ldw	r3,36(r2)
   1c4dc:	e0bffc17 	ldw	r2,-16(fp)
   1c4e0:	10800117 	ldw	r2,4(r2)
   1c4e4:	18bff736 	bltu	r3,r2,1c4c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701c4c4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   1c4e8:	e0bffc17 	ldw	r2,-16(fp)
   1c4ec:	10c00d17 	ldw	r3,52(r2)
   1c4f0:	e0bff317 	ldw	r2,-52(fp)
   1c4f4:	18800726 	beq	r3,r2,1c514 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   1c4f8:	e0bffe17 	ldw	r2,-8(fp)
   1c4fc:	00bf9d16 	blt	zero,r2,1c374 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701c374>
   1c500:	00000506 	br	1c518 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1c504:	0001883a 	nop
   1c508:	00000306 	br	1c518 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   1c50c:	0001883a 	nop
   1c510:	00000106 	br	1c518 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   1c514:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   1c518:	e0bffc17 	ldw	r2,-16(fp)
   1c51c:	10800a17 	ldw	r2,40(r2)
   1c520:	1009883a 	mov	r4,r2
   1c524:	001937c0 	call	1937c <OSSemPost>

  if (ptr != buffer)
   1c528:	e0fff017 	ldw	r3,-64(fp)
   1c52c:	e0bffd17 	ldw	r2,-12(fp)
   1c530:	18801826 	beq	r3,r2,1c594 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c534:	0005303a 	rdctl	r2,status
   1c538:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c53c:	e0fff717 	ldw	r3,-36(fp)
   1c540:	00bfff84 	movi	r2,-2
   1c544:	1884703a 	and	r2,r3,r2
   1c548:	1001703a 	wrctl	status,r2
  
  return context;
   1c54c:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   1c550:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1c554:	e0bffc17 	ldw	r2,-16(fp)
   1c558:	10800817 	ldw	r2,32(r2)
   1c55c:	10c00054 	ori	r3,r2,1
   1c560:	e0bffc17 	ldw	r2,-16(fp)
   1c564:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1c568:	e0bffc17 	ldw	r2,-16(fp)
   1c56c:	10800017 	ldw	r2,0(r2)
   1c570:	10800104 	addi	r2,r2,4
   1c574:	1007883a 	mov	r3,r2
   1c578:	e0bffc17 	ldw	r2,-16(fp)
   1c57c:	10800817 	ldw	r2,32(r2)
   1c580:	18800035 	stwio	r2,0(r3)
   1c584:	e0bff617 	ldw	r2,-40(fp)
   1c588:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c58c:	e0bff517 	ldw	r2,-44(fp)
   1c590:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1c594:	e0fff017 	ldw	r3,-64(fp)
   1c598:	e0bffd17 	ldw	r2,-12(fp)
   1c59c:	18800426 	beq	r3,r2,1c5b0 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   1c5a0:	e0fff017 	ldw	r3,-64(fp)
   1c5a4:	e0bffd17 	ldw	r2,-12(fp)
   1c5a8:	1885c83a 	sub	r2,r3,r2
   1c5ac:	00000606 	br	1c5c8 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   1c5b0:	e0bfff17 	ldw	r2,-4(fp)
   1c5b4:	1090000c 	andi	r2,r2,16384
   1c5b8:	10000226 	beq	r2,zero,1c5c4 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   1c5bc:	00bffd44 	movi	r2,-11
   1c5c0:	00000106 	br	1c5c8 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   1c5c4:	00bffec4 	movi	r2,-5
}
   1c5c8:	e037883a 	mov	sp,fp
   1c5cc:	dfc00117 	ldw	ra,4(sp)
   1c5d0:	df000017 	ldw	fp,0(sp)
   1c5d4:	dec00204 	addi	sp,sp,8
   1c5d8:	f800283a 	ret

0001c5dc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1c5dc:	deffed04 	addi	sp,sp,-76
   1c5e0:	dfc01215 	stw	ra,72(sp)
   1c5e4:	df001115 	stw	fp,68(sp)
   1c5e8:	df001104 	addi	fp,sp,68
   1c5ec:	e13ffc15 	stw	r4,-16(fp)
   1c5f0:	e17ffd15 	stw	r5,-12(fp)
   1c5f4:	e1bffe15 	stw	r6,-8(fp)
   1c5f8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1c5fc:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   1c600:	e0bffd17 	ldw	r2,-12(fp)
   1c604:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   1c608:	e0bffc17 	ldw	r2,-16(fp)
   1c60c:	10800b17 	ldw	r2,44(r2)
   1c610:	e0bff815 	stw	r2,-32(fp)
   1c614:	e03ff90d 	sth	zero,-28(fp)
   1c618:	e0bff90b 	ldhu	r2,-28(fp)
   1c61c:	e0fffb44 	addi	r3,fp,-19
   1c620:	180d883a 	mov	r6,r3
   1c624:	100b883a 	mov	r5,r2
   1c628:	e13ff817 	ldw	r4,-32(fp)
   1c62c:	00190040 	call	19004 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1c630:	00003706 	br	1c710 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1c634:	e0bffc17 	ldw	r2,-16(fp)
   1c638:	10800f17 	ldw	r2,60(r2)
   1c63c:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   1c640:	e0bffc17 	ldw	r2,-16(fp)
   1c644:	10801017 	ldw	r2,64(r2)
   1c648:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   1c64c:	e0fff417 	ldw	r3,-48(fp)
   1c650:	e0bff017 	ldw	r2,-64(fp)
   1c654:	1880062e 	bgeu	r3,r2,1c670 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   1c658:	e0fff017 	ldw	r3,-64(fp)
   1c65c:	e0bff417 	ldw	r2,-48(fp)
   1c660:	1885c83a 	sub	r2,r3,r2
   1c664:	10bfffc4 	addi	r2,r2,-1
   1c668:	e0bff115 	stw	r2,-60(fp)
   1c66c:	00000b06 	br	1c69c <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   1c670:	e0bff017 	ldw	r2,-64(fp)
   1c674:	10000526 	beq	r2,zero,1c68c <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   1c678:	00c20004 	movi	r3,2048
   1c67c:	e0bff417 	ldw	r2,-48(fp)
   1c680:	1885c83a 	sub	r2,r3,r2
   1c684:	e0bff115 	stw	r2,-60(fp)
   1c688:	00000406 	br	1c69c <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   1c68c:	00c1ffc4 	movi	r3,2047
   1c690:	e0bff417 	ldw	r2,-48(fp)
   1c694:	1885c83a 	sub	r2,r3,r2
   1c698:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   1c69c:	e0bff117 	ldw	r2,-60(fp)
   1c6a0:	10001e26 	beq	r2,zero,1c71c <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   1c6a4:	e0fffe17 	ldw	r3,-8(fp)
   1c6a8:	e0bff117 	ldw	r2,-60(fp)
   1c6ac:	1880022e 	bgeu	r3,r2,1c6b8 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   1c6b0:	e0bffe17 	ldw	r2,-8(fp)
   1c6b4:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   1c6b8:	e0bffc17 	ldw	r2,-16(fp)
   1c6bc:	10c21104 	addi	r3,r2,2116
   1c6c0:	e0bff417 	ldw	r2,-48(fp)
   1c6c4:	1885883a 	add	r2,r3,r2
   1c6c8:	e1bff117 	ldw	r6,-60(fp)
   1c6cc:	e17ffd17 	ldw	r5,-12(fp)
   1c6d0:	1009883a 	mov	r4,r2
   1c6d4:	00073640 	call	7364 <memcpy>
      ptr   += n;
   1c6d8:	e0fffd17 	ldw	r3,-12(fp)
   1c6dc:	e0bff117 	ldw	r2,-60(fp)
   1c6e0:	1885883a 	add	r2,r3,r2
   1c6e4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   1c6e8:	e0fffe17 	ldw	r3,-8(fp)
   1c6ec:	e0bff117 	ldw	r2,-60(fp)
   1c6f0:	1885c83a 	sub	r2,r3,r2
   1c6f4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1c6f8:	e0fff417 	ldw	r3,-48(fp)
   1c6fc:	e0bff117 	ldw	r2,-60(fp)
   1c700:	1885883a 	add	r2,r3,r2
   1c704:	10c1ffcc 	andi	r3,r2,2047
   1c708:	e0bffc17 	ldw	r2,-16(fp)
   1c70c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   1c710:	e0bffe17 	ldw	r2,-8(fp)
   1c714:	00bfc716 	blt	zero,r2,1c634 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701c634>
   1c718:	00000106 	br	1c720 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1c71c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c720:	0005303a 	rdctl	r2,status
   1c724:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c728:	e0fff717 	ldw	r3,-36(fp)
   1c72c:	00bfff84 	movi	r2,-2
   1c730:	1884703a 	and	r2,r3,r2
   1c734:	1001703a 	wrctl	status,r2
  
  return context;
   1c738:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1c73c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   1c740:	e0bffc17 	ldw	r2,-16(fp)
   1c744:	10800817 	ldw	r2,32(r2)
   1c748:	10c00094 	ori	r3,r2,2
   1c74c:	e0bffc17 	ldw	r2,-16(fp)
   1c750:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1c754:	e0bffc17 	ldw	r2,-16(fp)
   1c758:	10800017 	ldw	r2,0(r2)
   1c75c:	10800104 	addi	r2,r2,4
   1c760:	1007883a 	mov	r3,r2
   1c764:	e0bffc17 	ldw	r2,-16(fp)
   1c768:	10800817 	ldw	r2,32(r2)
   1c76c:	18800035 	stwio	r2,0(r3)
   1c770:	e0bff617 	ldw	r2,-40(fp)
   1c774:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c778:	e0bff317 	ldw	r2,-52(fp)
   1c77c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   1c780:	e0bffe17 	ldw	r2,-8(fp)
   1c784:	00802a0e 	bge	zero,r2,1c830 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   1c788:	e0bfff17 	ldw	r2,-4(fp)
   1c78c:	1090000c 	andi	r2,r2,16384
   1c790:	10002a1e 	bne	r2,zero,1c83c <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   1c794:	d0a84743 	ldbu	r2,-24291(gp)
   1c798:	10803fcc 	andi	r2,r2,255
   1c79c:	10800058 	cmpnei	r2,r2,1
   1c7a0:	1000161e 	bne	r2,zero,1c7fc <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   1c7a4:	e0bffc17 	ldw	r2,-16(fp)
   1c7a8:	10800c17 	ldw	r2,48(r2)
   1c7ac:	e0bff515 	stw	r2,-44(fp)
   1c7b0:	00800184 	movi	r2,6
   1c7b4:	e0bff98d 	sth	r2,-26(fp)
   1c7b8:	00bfe0c4 	movi	r2,-125
   1c7bc:	e0bffa05 	stb	r2,-24(fp)
   1c7c0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   1c7c4:	d0a84743 	ldbu	r2,-24291(gp)
   1c7c8:	10803fcc 	andi	r2,r2,255
   1c7cc:	10001526 	beq	r2,zero,1c824 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   1c7d0:	e0fff98b 	ldhu	r3,-26(fp)
   1c7d4:	e13ffa03 	ldbu	r4,-24(fp)
   1c7d8:	e17ffa8b 	ldhu	r5,-22(fp)
   1c7dc:	e0bffb04 	addi	r2,fp,-20
   1c7e0:	d8800015 	stw	r2,0(sp)
   1c7e4:	280f883a 	mov	r7,r5
   1c7e8:	200d883a 	mov	r6,r4
   1c7ec:	180b883a 	mov	r5,r3
   1c7f0:	e13ff517 	ldw	r4,-44(fp)
   1c7f4:	001659c0 	call	1659c <OSFlagPend>
   1c7f8:	00000a06 	br	1c824 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   1c7fc:	0001883a 	nop
   1c800:	e0bffc17 	ldw	r2,-16(fp)
   1c804:	10c01017 	ldw	r3,64(r2)
   1c808:	e0bff017 	ldw	r2,-64(fp)
   1c80c:	1880051e 	bne	r3,r2,1c824 <altera_avalon_jtag_uart_write+0x248>
   1c810:	e0bffc17 	ldw	r2,-16(fp)
   1c814:	10c00917 	ldw	r3,36(r2)
   1c818:	e0bffc17 	ldw	r2,-16(fp)
   1c81c:	10800117 	ldw	r2,4(r2)
   1c820:	18bff736 	bltu	r3,r2,1c800 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701c800>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1c824:	e0bffc17 	ldw	r2,-16(fp)
   1c828:	10800917 	ldw	r2,36(r2)
   1c82c:	1000051e 	bne	r2,zero,1c844 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   1c830:	e0bffe17 	ldw	r2,-8(fp)
   1c834:	00bfb616 	blt	zero,r2,1c710 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701c710>
   1c838:	00000306 	br	1c848 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   1c83c:	0001883a 	nop
   1c840:	00000106 	br	1c848 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   1c844:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   1c848:	e0bffc17 	ldw	r2,-16(fp)
   1c84c:	10800b17 	ldw	r2,44(r2)
   1c850:	1009883a 	mov	r4,r2
   1c854:	001937c0 	call	1937c <OSSemPost>

  if (ptr != start)
   1c858:	e0fffd17 	ldw	r3,-12(fp)
   1c85c:	e0bff217 	ldw	r2,-56(fp)
   1c860:	18800426 	beq	r3,r2,1c874 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   1c864:	e0fffd17 	ldw	r3,-12(fp)
   1c868:	e0bff217 	ldw	r2,-56(fp)
   1c86c:	1885c83a 	sub	r2,r3,r2
   1c870:	00000606 	br	1c88c <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   1c874:	e0bfff17 	ldw	r2,-4(fp)
   1c878:	1090000c 	andi	r2,r2,16384
   1c87c:	10000226 	beq	r2,zero,1c888 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   1c880:	00bffd44 	movi	r2,-11
   1c884:	00000106 	br	1c88c <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1c888:	00bffec4 	movi	r2,-5
}
   1c88c:	e037883a 	mov	sp,fp
   1c890:	dfc00117 	ldw	ra,4(sp)
   1c894:	df000017 	ldw	fp,0(sp)
   1c898:	dec00204 	addi	sp,sp,8
   1c89c:	f800283a 	ret

0001c8a0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1c8a0:	defff904 	addi	sp,sp,-28
   1c8a4:	dfc00615 	stw	ra,24(sp)
   1c8a8:	df000515 	stw	fp,20(sp)
   1c8ac:	df000504 	addi	fp,sp,20
   1c8b0:	e13ffe15 	stw	r4,-8(fp)
   1c8b4:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   1c8b8:	0007883a 	mov	r3,zero
   1c8bc:	e0bffe17 	ldw	r2,-8(fp)
   1c8c0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   1c8c4:	e0bffe17 	ldw	r2,-8(fp)
   1c8c8:	10800104 	addi	r2,r2,4
   1c8cc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c8d0:	0005303a 	rdctl	r2,status
   1c8d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c8d8:	e0fffc17 	ldw	r3,-16(fp)
   1c8dc:	00bfff84 	movi	r2,-2
   1c8e0:	1884703a 	and	r2,r3,r2
   1c8e4:	1001703a 	wrctl	status,r2
  
  return context;
   1c8e8:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   1c8ec:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   1c8f0:	001e5b00 	call	1e5b0 <alt_tick>
   1c8f4:	e0bffb17 	ldw	r2,-20(fp)
   1c8f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c8fc:	e0bffd17 	ldw	r2,-12(fp)
   1c900:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   1c904:	0001883a 	nop
   1c908:	e037883a 	mov	sp,fp
   1c90c:	dfc00117 	ldw	ra,4(sp)
   1c910:	df000017 	ldw	fp,0(sp)
   1c914:	dec00204 	addi	sp,sp,8
   1c918:	f800283a 	ret

0001c91c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1c91c:	defff904 	addi	sp,sp,-28
   1c920:	dfc00615 	stw	ra,24(sp)
   1c924:	df000515 	stw	fp,20(sp)
   1c928:	df000504 	addi	fp,sp,20
   1c92c:	e13ffc15 	stw	r4,-16(fp)
   1c930:	e17ffd15 	stw	r5,-12(fp)
   1c934:	e1bffe15 	stw	r6,-8(fp)
   1c938:	e1ffff15 	stw	r7,-4(fp)
   1c93c:	e0bfff17 	ldw	r2,-4(fp)
   1c940:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   1c944:	d0a85c17 	ldw	r2,-24208(gp)
   1c948:	1000021e 	bne	r2,zero,1c954 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   1c94c:	e0bffb17 	ldw	r2,-20(fp)
   1c950:	d0a85c15 	stw	r2,-24208(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   1c954:	e0bffc17 	ldw	r2,-16(fp)
   1c958:	10800104 	addi	r2,r2,4
   1c95c:	00c001c4 	movi	r3,7
   1c960:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   1c964:	018000b4 	movhi	r6,2
   1c968:	31b22804 	addi	r6,r6,-14176
   1c96c:	e17ffc17 	ldw	r5,-16(fp)
   1c970:	e13ffe17 	ldw	r4,-8(fp)
   1c974:	001e1400 	call	1e140 <alt_irq_register>
#endif  
}
   1c978:	0001883a 	nop
   1c97c:	e037883a 	mov	sp,fp
   1c980:	dfc00117 	ldw	ra,4(sp)
   1c984:	df000017 	ldw	fp,0(sp)
   1c988:	dec00204 	addi	sp,sp,8
   1c98c:	f800283a 	ret

0001c990 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   1c990:	defffc04 	addi	sp,sp,-16
   1c994:	df000315 	stw	fp,12(sp)
   1c998:	df000304 	addi	fp,sp,12
   1c99c:	e13ffe15 	stw	r4,-8(fp)
   1c9a0:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   1c9a4:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   1c9a8:	e0bfff17 	ldw	r2,-4(fp)
   1c9ac:	1000061e 	bne	r2,zero,1c9c8 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   1c9b0:	e0bffe17 	ldw	r2,-8(fp)
   1c9b4:	1007883a 	mov	r3,r2
   1c9b8:	e0bffd03 	ldbu	r2,-12(fp)
   1c9bc:	1884b03a 	or	r2,r3,r2
   1c9c0:	e0bffd05 	stb	r2,-12(fp)
   1c9c4:	00000806 	br	1c9e8 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   1c9c8:	e0bffe17 	ldw	r2,-8(fp)
   1c9cc:	1007883a 	mov	r3,r2
   1c9d0:	e0bffd03 	ldbu	r2,-12(fp)
   1c9d4:	1884b03a 	or	r2,r3,r2
   1c9d8:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   1c9dc:	e0bffd03 	ldbu	r2,-12(fp)
   1c9e0:	10801014 	ori	r2,r2,64
   1c9e4:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   1c9e8:	e0fffd03 	ldbu	r3,-12(fp)
   1c9ec:	00bfe004 	movi	r2,-128
   1c9f0:	1884b03a 	or	r2,r3,r2
}
   1c9f4:	e037883a 	mov	sp,fp
   1c9f8:	df000017 	ldw	fp,0(sp)
   1c9fc:	dec00104 	addi	sp,sp,4
   1ca00:	f800283a 	ret

0001ca04 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   1ca04:	defffd04 	addi	sp,sp,-12
   1ca08:	df000215 	stw	fp,8(sp)
   1ca0c:	df000204 	addi	fp,sp,8
   1ca10:	e13ffe15 	stw	r4,-8(fp)
   1ca14:	2805883a 	mov	r2,r5
   1ca18:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   1ca1c:	e0bffe17 	ldw	r2,-8(fp)
   1ca20:	10800a17 	ldw	r2,40(r2)
   1ca24:	1007883a 	mov	r3,r2
   1ca28:	e0bfff03 	ldbu	r2,-4(fp)
   1ca2c:	18800025 	stbio	r2,0(r3)
}
   1ca30:	0001883a 	nop
   1ca34:	e037883a 	mov	sp,fp
   1ca38:	df000017 	ldw	fp,0(sp)
   1ca3c:	dec00104 	addi	sp,sp,4
   1ca40:	f800283a 	ret

0001ca44 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   1ca44:	defffe04 	addi	sp,sp,-8
   1ca48:	df000115 	stw	fp,4(sp)
   1ca4c:	df000104 	addi	fp,sp,4
   1ca50:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   1ca54:	e0bfff17 	ldw	r2,-4(fp)
   1ca58:	10800a17 	ldw	r2,40(r2)
   1ca5c:	1007883a 	mov	r3,r2
   1ca60:	00800044 	movi	r2,1
   1ca64:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   1ca68:	0001883a 	nop
   1ca6c:	e037883a 	mov	sp,fp
   1ca70:	df000017 	ldw	fp,0(sp)
   1ca74:	dec00104 	addi	sp,sp,4
   1ca78:	f800283a 	ret

0001ca7c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   1ca7c:	defffc04 	addi	sp,sp,-16
   1ca80:	dfc00315 	stw	ra,12(sp)
   1ca84:	df000215 	stw	fp,8(sp)
   1ca88:	df000204 	addi	fp,sp,8
   1ca8c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   1ca90:	d1601e04 	addi	r5,gp,-32648
   1ca94:	e13fff17 	ldw	r4,-4(fp)
   1ca98:	001df3c0 	call	1df3c <alt_find_dev>
   1ca9c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1caa0:	e0bffe17 	ldw	r2,-8(fp)
}
   1caa4:	e037883a 	mov	sp,fp
   1caa8:	dfc00117 	ldw	ra,4(sp)
   1caac:	df000017 	ldw	fp,0(sp)
   1cab0:	dec00204 	addi	sp,sp,8
   1cab4:	f800283a 	ret

0001cab8 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   1cab8:	defffb04 	addi	sp,sp,-20
   1cabc:	df000415 	stw	fp,16(sp)
   1cac0:	df000404 	addi	fp,sp,16
   1cac4:	e13ffd15 	stw	r4,-12(fp)
   1cac8:	e17ffe15 	stw	r5,-8(fp)
   1cacc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   1cad0:	e03ffc15 	stw	zero,-16(fp)
   1cad4:	00000f06 	br	1cb14 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   1cad8:	e0bffd17 	ldw	r2,-12(fp)
   1cadc:	10800a17 	ldw	r2,40(r2)
   1cae0:	10800044 	addi	r2,r2,1
   1cae4:	1009883a 	mov	r4,r2
   1cae8:	e0fffe17 	ldw	r3,-8(fp)
   1caec:	e0bffc17 	ldw	r2,-16(fp)
   1caf0:	1885883a 	add	r2,r3,r2
   1caf4:	10800003 	ldbu	r2,0(r2)
   1caf8:	10803fcc 	andi	r2,r2,255
   1cafc:	1080201c 	xori	r2,r2,128
   1cb00:	10bfe004 	addi	r2,r2,-128
   1cb04:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   1cb08:	e0bffc17 	ldw	r2,-16(fp)
   1cb0c:	10800044 	addi	r2,r2,1
   1cb10:	e0bffc15 	stw	r2,-16(fp)
   1cb14:	e0fffc17 	ldw	r3,-16(fp)
   1cb18:	e0bfff17 	ldw	r2,-4(fp)
   1cb1c:	18bfee36 	bltu	r3,r2,1cad8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701cad8>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   1cb20:	0001883a 	nop
   1cb24:	e037883a 	mov	sp,fp
   1cb28:	df000017 	ldw	fp,0(sp)
   1cb2c:	dec00104 	addi	sp,sp,4
   1cb30:	f800283a 	ret

0001cb34 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   1cb34:	defffd04 	addi	sp,sp,-12
   1cb38:	df000215 	stw	fp,8(sp)
   1cb3c:	df000204 	addi	fp,sp,8
   1cb40:	e13ffe15 	stw	r4,-8(fp)
   1cb44:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   1cb48:	00000d06 	br	1cb80 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   1cb4c:	e0bffe17 	ldw	r2,-8(fp)
   1cb50:	10800a17 	ldw	r2,40(r2)
   1cb54:	10800044 	addi	r2,r2,1
   1cb58:	1007883a 	mov	r3,r2
   1cb5c:	e0bfff17 	ldw	r2,-4(fp)
   1cb60:	10800003 	ldbu	r2,0(r2)
   1cb64:	10803fcc 	andi	r2,r2,255
   1cb68:	1080201c 	xori	r2,r2,128
   1cb6c:	10bfe004 	addi	r2,r2,-128
   1cb70:	18800025 	stbio	r2,0(r3)
		++ptr;
   1cb74:	e0bfff17 	ldw	r2,-4(fp)
   1cb78:	10800044 	addi	r2,r2,1
   1cb7c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   1cb80:	e0bfff17 	ldw	r2,-4(fp)
   1cb84:	10800003 	ldbu	r2,0(r2)
   1cb88:	10803fcc 	andi	r2,r2,255
   1cb8c:	1080201c 	xori	r2,r2,128
   1cb90:	10bfe004 	addi	r2,r2,-128
   1cb94:	103fed1e 	bne	r2,zero,1cb4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701cb4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   1cb98:	0001883a 	nop
   1cb9c:	e037883a 	mov	sp,fp
   1cba0:	df000017 	ldw	fp,0(sp)
   1cba4:	dec00104 	addi	sp,sp,4
   1cba8:	f800283a 	ret

0001cbac <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   1cbac:	defffb04 	addi	sp,sp,-20
   1cbb0:	dfc00415 	stw	ra,16(sp)
   1cbb4:	df000315 	stw	fp,12(sp)
   1cbb8:	df000304 	addi	fp,sp,12
   1cbbc:	e13ffd15 	stw	r4,-12(fp)
   1cbc0:	e17ffe15 	stw	r5,-8(fp)
   1cbc4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   1cbc8:	e0bffd17 	ldw	r2,-12(fp)
   1cbcc:	10800017 	ldw	r2,0(r2)
   1cbd0:	e0ffff17 	ldw	r3,-4(fp)
   1cbd4:	180d883a 	mov	r6,r3
   1cbd8:	e17ffe17 	ldw	r5,-8(fp)
   1cbdc:	1009883a 	mov	r4,r2
   1cbe0:	001cab80 	call	1cab8 <alt_up_character_lcd_write>
	return 0;
   1cbe4:	0005883a 	mov	r2,zero
}
   1cbe8:	e037883a 	mov	sp,fp
   1cbec:	dfc00117 	ldw	ra,4(sp)
   1cbf0:	df000017 	ldw	fp,0(sp)
   1cbf4:	dec00204 	addi	sp,sp,8
   1cbf8:	f800283a 	ret

0001cbfc <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   1cbfc:	defffa04 	addi	sp,sp,-24
   1cc00:	dfc00515 	stw	ra,20(sp)
   1cc04:	df000415 	stw	fp,16(sp)
   1cc08:	df000404 	addi	fp,sp,16
   1cc0c:	e13ffd15 	stw	r4,-12(fp)
   1cc10:	e17ffe15 	stw	r5,-8(fp)
   1cc14:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   1cc18:	e0bffe17 	ldw	r2,-8(fp)
   1cc1c:	10800a28 	cmpgeui	r2,r2,40
   1cc20:	1000031e 	bne	r2,zero,1cc30 <alt_up_character_lcd_set_cursor_pos+0x34>
   1cc24:	e0bfff17 	ldw	r2,-4(fp)
   1cc28:	108000b0 	cmpltui	r2,r2,2
   1cc2c:	1000021e 	bne	r2,zero,1cc38 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   1cc30:	00bfffc4 	movi	r2,-1
   1cc34:	00000906 	br	1cc5c <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1cc38:	e17fff17 	ldw	r5,-4(fp)
   1cc3c:	e13ffe17 	ldw	r4,-8(fp)
   1cc40:	001c9900 	call	1c990 <get_DDRAM_addr>
   1cc44:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   1cc48:	e0bffc03 	ldbu	r2,-16(fp)
   1cc4c:	100b883a 	mov	r5,r2
   1cc50:	e13ffd17 	ldw	r4,-12(fp)
   1cc54:	001ca040 	call	1ca04 <alt_up_character_lcd_send_cmd>
	return 0;
   1cc58:	0005883a 	mov	r2,zero
}
   1cc5c:	e037883a 	mov	sp,fp
   1cc60:	dfc00117 	ldw	ra,4(sp)
   1cc64:	df000017 	ldw	fp,0(sp)
   1cc68:	dec00204 	addi	sp,sp,8
   1cc6c:	f800283a 	ret

0001cc70 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1cc70:	defffb04 	addi	sp,sp,-20
   1cc74:	dfc00415 	stw	ra,16(sp)
   1cc78:	df000315 	stw	fp,12(sp)
   1cc7c:	df000304 	addi	fp,sp,12
   1cc80:	e13ffe15 	stw	r4,-8(fp)
   1cc84:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1cc88:	e0bfff17 	ldw	r2,-4(fp)
   1cc8c:	10001526 	beq	r2,zero,1cce4 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1cc90:	e0bfff17 	ldw	r2,-4(fp)
   1cc94:	0080020e 	bge	zero,r2,1cca0 <alt_up_character_lcd_shift_cursor+0x30>
   1cc98:	00800504 	movi	r2,20
   1cc9c:	00000106 	br	1cca4 <alt_up_character_lcd_shift_cursor+0x34>
   1cca0:	00800404 	movi	r2,16
   1cca4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1cca8:	e0bfff17 	ldw	r2,-4(fp)
   1ccac:	1000010e 	bge	r2,zero,1ccb4 <alt_up_character_lcd_shift_cursor+0x44>
   1ccb0:	0085c83a 	sub	r2,zero,r2
   1ccb4:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1ccb8:	00000406 	br	1cccc <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1ccbc:	e0bffd43 	ldbu	r2,-11(fp)
   1ccc0:	100b883a 	mov	r5,r2
   1ccc4:	e13ffe17 	ldw	r4,-8(fp)
   1ccc8:	001ca040 	call	1ca04 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1cccc:	e0bffd03 	ldbu	r2,-12(fp)
   1ccd0:	10ffffc4 	addi	r3,r2,-1
   1ccd4:	e0fffd05 	stb	r3,-12(fp)
   1ccd8:	10803fcc 	andi	r2,r2,255
   1ccdc:	103ff71e 	bne	r2,zero,1ccbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701ccbc>
   1cce0:	00000106 	br	1cce8 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   1cce4:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1cce8:	e037883a 	mov	sp,fp
   1ccec:	dfc00117 	ldw	ra,4(sp)
   1ccf0:	df000017 	ldw	fp,0(sp)
   1ccf4:	dec00204 	addi	sp,sp,8
   1ccf8:	f800283a 	ret

0001ccfc <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   1ccfc:	defffb04 	addi	sp,sp,-20
   1cd00:	dfc00415 	stw	ra,16(sp)
   1cd04:	df000315 	stw	fp,12(sp)
   1cd08:	df000304 	addi	fp,sp,12
   1cd0c:	e13ffe15 	stw	r4,-8(fp)
   1cd10:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   1cd14:	e0bfff17 	ldw	r2,-4(fp)
   1cd18:	10001526 	beq	r2,zero,1cd70 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   1cd1c:	e0bfff17 	ldw	r2,-4(fp)
   1cd20:	0080020e 	bge	zero,r2,1cd2c <alt_up_character_lcd_shift_display+0x30>
   1cd24:	00800704 	movi	r2,28
   1cd28:	00000106 	br	1cd30 <alt_up_character_lcd_shift_display+0x34>
   1cd2c:	00800604 	movi	r2,24
   1cd30:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   1cd34:	e0bfff17 	ldw	r2,-4(fp)
   1cd38:	1000010e 	bge	r2,zero,1cd40 <alt_up_character_lcd_shift_display+0x44>
   1cd3c:	0085c83a 	sub	r2,zero,r2
   1cd40:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1cd44:	00000406 	br	1cd58 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   1cd48:	e0bffd43 	ldbu	r2,-11(fp)
   1cd4c:	100b883a 	mov	r5,r2
   1cd50:	e13ffe17 	ldw	r4,-8(fp)
   1cd54:	001ca040 	call	1ca04 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   1cd58:	e0bffd03 	ldbu	r2,-12(fp)
   1cd5c:	10ffffc4 	addi	r3,r2,-1
   1cd60:	e0fffd05 	stb	r3,-12(fp)
   1cd64:	10803fcc 	andi	r2,r2,255
   1cd68:	103ff71e 	bne	r2,zero,1cd48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701cd48>
   1cd6c:	00000106 	br	1cd74 <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   1cd70:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   1cd74:	e037883a 	mov	sp,fp
   1cd78:	dfc00117 	ldw	ra,4(sp)
   1cd7c:	df000017 	ldw	fp,0(sp)
   1cd80:	dec00204 	addi	sp,sp,8
   1cd84:	f800283a 	ret

0001cd88 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   1cd88:	defffa04 	addi	sp,sp,-24
   1cd8c:	dfc00515 	stw	ra,20(sp)
   1cd90:	df000415 	stw	fp,16(sp)
   1cd94:	df000404 	addi	fp,sp,16
   1cd98:	e13ffd15 	stw	r4,-12(fp)
   1cd9c:	e17ffe15 	stw	r5,-8(fp)
   1cda0:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   1cda4:	e0bffe17 	ldw	r2,-8(fp)
   1cda8:	10800a28 	cmpgeui	r2,r2,40
   1cdac:	1000031e 	bne	r2,zero,1cdbc <alt_up_character_lcd_erase_pos+0x34>
   1cdb0:	e0bfff17 	ldw	r2,-4(fp)
   1cdb4:	108000b0 	cmpltui	r2,r2,2
   1cdb8:	1000021e 	bne	r2,zero,1cdc4 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   1cdbc:	00bfffc4 	movi	r2,-1
   1cdc0:	00000f06 	br	1ce00 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   1cdc4:	e17fff17 	ldw	r5,-4(fp)
   1cdc8:	e13ffe17 	ldw	r4,-8(fp)
   1cdcc:	001c9900 	call	1c990 <get_DDRAM_addr>
   1cdd0:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   1cdd4:	e0bffc03 	ldbu	r2,-16(fp)
   1cdd8:	100b883a 	mov	r5,r2
   1cddc:	e13ffd17 	ldw	r4,-12(fp)
   1cde0:	001ca040 	call	1ca04 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   1cde4:	e0bffd17 	ldw	r2,-12(fp)
   1cde8:	10800a17 	ldw	r2,40(r2)
   1cdec:	10800044 	addi	r2,r2,1
   1cdf0:	1007883a 	mov	r3,r2
   1cdf4:	00800084 	movi	r2,2
   1cdf8:	18800025 	stbio	r2,0(r3)
	return 0;
   1cdfc:	0005883a 	mov	r2,zero
}
   1ce00:	e037883a 	mov	sp,fp
   1ce04:	dfc00117 	ldw	ra,4(sp)
   1ce08:	df000017 	ldw	fp,0(sp)
   1ce0c:	dec00204 	addi	sp,sp,8
   1ce10:	f800283a 	ret

0001ce14 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   1ce14:	defffd04 	addi	sp,sp,-12
   1ce18:	dfc00215 	stw	ra,8(sp)
   1ce1c:	df000115 	stw	fp,4(sp)
   1ce20:	df000104 	addi	fp,sp,4
   1ce24:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   1ce28:	01400304 	movi	r5,12
   1ce2c:	e13fff17 	ldw	r4,-4(fp)
   1ce30:	001ca040 	call	1ca04 <alt_up_character_lcd_send_cmd>
}
   1ce34:	0001883a 	nop
   1ce38:	e037883a 	mov	sp,fp
   1ce3c:	dfc00117 	ldw	ra,4(sp)
   1ce40:	df000017 	ldw	fp,0(sp)
   1ce44:	dec00204 	addi	sp,sp,8
   1ce48:	f800283a 	ret

0001ce4c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   1ce4c:	defffd04 	addi	sp,sp,-12
   1ce50:	dfc00215 	stw	ra,8(sp)
   1ce54:	df000115 	stw	fp,4(sp)
   1ce58:	df000104 	addi	fp,sp,4
   1ce5c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   1ce60:	014003c4 	movi	r5,15
   1ce64:	e13fff17 	ldw	r4,-4(fp)
   1ce68:	001ca040 	call	1ca04 <alt_up_character_lcd_send_cmd>
}
   1ce6c:	0001883a 	nop
   1ce70:	e037883a 	mov	sp,fp
   1ce74:	dfc00117 	ldw	ra,4(sp)
   1ce78:	df000017 	ldw	fp,0(sp)
   1ce7c:	dec00204 	addi	sp,sp,8
   1ce80:	f800283a 	ret

0001ce84 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   1ce84:	defffd04 	addi	sp,sp,-12
   1ce88:	df000215 	stw	fp,8(sp)
   1ce8c:	df000204 	addi	fp,sp,8
   1ce90:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1ce94:	e0bfff17 	ldw	r2,-4(fp)
   1ce98:	10800a17 	ldw	r2,40(r2)
   1ce9c:	10800104 	addi	r2,r2,4
   1cea0:	10800037 	ldwio	r2,0(r2)
   1cea4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   1cea8:	e0bffe17 	ldw	r2,-8(fp)
   1ceac:	10800054 	ori	r2,r2,1
   1ceb0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1ceb4:	e0bfff17 	ldw	r2,-4(fp)
   1ceb8:	10800a17 	ldw	r2,40(r2)
   1cebc:	10800104 	addi	r2,r2,4
   1cec0:	1007883a 	mov	r3,r2
   1cec4:	e0bffe17 	ldw	r2,-8(fp)
   1cec8:	18800035 	stwio	r2,0(r3)
}
   1cecc:	0001883a 	nop
   1ced0:	e037883a 	mov	sp,fp
   1ced4:	df000017 	ldw	fp,0(sp)
   1ced8:	dec00104 	addi	sp,sp,4
   1cedc:	f800283a 	ret

0001cee0 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   1cee0:	defffd04 	addi	sp,sp,-12
   1cee4:	df000215 	stw	fp,8(sp)
   1cee8:	df000204 	addi	fp,sp,8
   1ceec:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1cef0:	e0bfff17 	ldw	r2,-4(fp)
   1cef4:	10800a17 	ldw	r2,40(r2)
   1cef8:	10800104 	addi	r2,r2,4
   1cefc:	10800037 	ldwio	r2,0(r2)
   1cf00:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   1cf04:	e0fffe17 	ldw	r3,-8(fp)
   1cf08:	00bfff84 	movi	r2,-2
   1cf0c:	1884703a 	and	r2,r3,r2
   1cf10:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   1cf14:	e0bfff17 	ldw	r2,-4(fp)
   1cf18:	10800a17 	ldw	r2,40(r2)
   1cf1c:	10800104 	addi	r2,r2,4
   1cf20:	1007883a 	mov	r3,r2
   1cf24:	e0bffe17 	ldw	r2,-8(fp)
   1cf28:	18800035 	stwio	r2,0(r3)
}
   1cf2c:	0001883a 	nop
   1cf30:	e037883a 	mov	sp,fp
   1cf34:	df000017 	ldw	fp,0(sp)
   1cf38:	dec00104 	addi	sp,sp,4
   1cf3c:	f800283a 	ret

0001cf40 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   1cf40:	defffd04 	addi	sp,sp,-12
   1cf44:	df000215 	stw	fp,8(sp)
   1cf48:	df000204 	addi	fp,sp,8
   1cf4c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1cf50:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   1cf54:	e0bfff17 	ldw	r2,-4(fp)
   1cf58:	10800a17 	ldw	r2,40(r2)
   1cf5c:	10800084 	addi	r2,r2,2
   1cf60:	1080002b 	ldhuio	r2,0(r2)
   1cf64:	10bfffcc 	andi	r2,r2,65535
   1cf68:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   1cf6c:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1cf70:	e037883a 	mov	sp,fp
   1cf74:	df000017 	ldw	fp,0(sp)
   1cf78:	dec00104 	addi	sp,sp,4
   1cf7c:	f800283a 	ret

0001cf80 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   1cf80:	defffd04 	addi	sp,sp,-12
   1cf84:	df000215 	stw	fp,8(sp)
   1cf88:	df000204 	addi	fp,sp,8
   1cf8c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   1cf90:	e0bfff17 	ldw	r2,-4(fp)
   1cf94:	10800a17 	ldw	r2,40(r2)
   1cf98:	10800104 	addi	r2,r2,4
   1cf9c:	10800037 	ldwio	r2,0(r2)
   1cfa0:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   1cfa4:	e0bffe17 	ldw	r2,-8(fp)
   1cfa8:	1004d43a 	srli	r2,r2,16
}
   1cfac:	e037883a 	mov	sp,fp
   1cfb0:	df000017 	ldw	fp,0(sp)
   1cfb4:	dec00104 	addi	sp,sp,4
   1cfb8:	f800283a 	ret

0001cfbc <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   1cfbc:	defffd04 	addi	sp,sp,-12
   1cfc0:	df000215 	stw	fp,8(sp)
   1cfc4:	df000204 	addi	fp,sp,8
   1cfc8:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   1cfcc:	e0bfff17 	ldw	r2,-4(fp)
   1cfd0:	1080800c 	andi	r2,r2,512
   1cfd4:	1004d27a 	srli	r2,r2,9
   1cfd8:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1cfdc:	e0bffe17 	ldw	r2,-8(fp)
   1cfe0:	10000226 	beq	r2,zero,1cfec <alt_up_irda_check_parity+0x30>
   1cfe4:	00bfffc4 	movi	r2,-1
   1cfe8:	00000106 	br	1cff0 <alt_up_irda_check_parity+0x34>
   1cfec:	0005883a 	mov	r2,zero
}
   1cff0:	e037883a 	mov	sp,fp
   1cff4:	df000017 	ldw	fp,0(sp)
   1cff8:	dec00104 	addi	sp,sp,4
   1cffc:	f800283a 	ret

0001d000 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   1d000:	defffd04 	addi	sp,sp,-12
   1d004:	df000215 	stw	fp,8(sp)
   1d008:	df000204 	addi	fp,sp,8
   1d00c:	e13ffe15 	stw	r4,-8(fp)
   1d010:	2805883a 	mov	r2,r5
   1d014:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   1d018:	e0bffe17 	ldw	r2,-8(fp)
   1d01c:	10800a17 	ldw	r2,40(r2)
   1d020:	1007883a 	mov	r3,r2
   1d024:	e0bfff03 	ldbu	r2,-4(fp)
   1d028:	18800035 	stwio	r2,0(r3)
	return 0;
   1d02c:	0005883a 	mov	r2,zero
}
   1d030:	e037883a 	mov	sp,fp
   1d034:	df000017 	ldw	fp,0(sp)
   1d038:	dec00104 	addi	sp,sp,4
   1d03c:	f800283a 	ret

0001d040 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   1d040:	defffa04 	addi	sp,sp,-24
   1d044:	dfc00515 	stw	ra,20(sp)
   1d048:	df000415 	stw	fp,16(sp)
   1d04c:	df000404 	addi	fp,sp,16
   1d050:	e13ffd15 	stw	r4,-12(fp)
   1d054:	e17ffe15 	stw	r5,-8(fp)
   1d058:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   1d05c:	e0bffd17 	ldw	r2,-12(fp)
   1d060:	10800a17 	ldw	r2,40(r2)
   1d064:	10800037 	ldwio	r2,0(r2)
   1d068:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   1d06c:	e0bffc17 	ldw	r2,-16(fp)
   1d070:	1007883a 	mov	r3,r2
   1d074:	e0bffe17 	ldw	r2,-8(fp)
   1d078:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   1d07c:	e13ffc17 	ldw	r4,-16(fp)
   1d080:	001cfbc0 	call	1cfbc <alt_up_irda_check_parity>
   1d084:	1007883a 	mov	r3,r2
   1d088:	e0bfff17 	ldw	r2,-4(fp)
   1d08c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   1d090:	e0bffc17 	ldw	r2,-16(fp)
   1d094:	10a0000c 	andi	r2,r2,32768
   1d098:	1004d3fa 	srli	r2,r2,15
   1d09c:	10bfffc4 	addi	r2,r2,-1
}
   1d0a0:	e037883a 	mov	sp,fp
   1d0a4:	dfc00117 	ldw	ra,4(sp)
   1d0a8:	df000017 	ldw	fp,0(sp)
   1d0ac:	dec00204 	addi	sp,sp,8
   1d0b0:	f800283a 	ret

0001d0b4 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   1d0b4:	defff804 	addi	sp,sp,-32
   1d0b8:	dfc00715 	stw	ra,28(sp)
   1d0bc:	df000615 	stw	fp,24(sp)
   1d0c0:	df000604 	addi	fp,sp,24
   1d0c4:	e13ffd15 	stw	r4,-12(fp)
   1d0c8:	e17ffe15 	stw	r5,-8(fp)
   1d0cc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1d0d0:	e0bffd17 	ldw	r2,-12(fp)
   1d0d4:	10800017 	ldw	r2,0(r2)
   1d0d8:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1d0dc:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1d0e0:	00000c06 	br	1d114 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   1d0e4:	e0bffe17 	ldw	r2,-8(fp)
   1d0e8:	10c00044 	addi	r3,r2,1
   1d0ec:	e0fffe15 	stw	r3,-8(fp)
   1d0f0:	e0fffc04 	addi	r3,fp,-16
   1d0f4:	180d883a 	mov	r6,r3
   1d0f8:	100b883a 	mov	r5,r2
   1d0fc:	e13ffb17 	ldw	r4,-20(fp)
   1d100:	001d0400 	call	1d040 <alt_up_irda_read_data>
   1d104:	1000081e 	bne	r2,zero,1d128 <alt_up_irda_read_fd+0x74>
			count++;
   1d108:	e0bffa17 	ldw	r2,-24(fp)
   1d10c:	10800044 	addi	r2,r2,1
   1d110:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1d114:	e0bfff17 	ldw	r2,-4(fp)
   1d118:	10ffffc4 	addi	r3,r2,-1
   1d11c:	e0ffff15 	stw	r3,-4(fp)
   1d120:	103ff01e 	bne	r2,zero,1d0e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701d0e4>
   1d124:	00000106 	br	1d12c <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   1d128:	0001883a 	nop
	}
	return count;
   1d12c:	e0bffa17 	ldw	r2,-24(fp)
}
   1d130:	e037883a 	mov	sp,fp
   1d134:	dfc00117 	ldw	ra,4(sp)
   1d138:	df000017 	ldw	fp,0(sp)
   1d13c:	dec00204 	addi	sp,sp,8
   1d140:	f800283a 	ret

0001d144 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1d144:	defff904 	addi	sp,sp,-28
   1d148:	dfc00615 	stw	ra,24(sp)
   1d14c:	df000515 	stw	fp,20(sp)
   1d150:	df000504 	addi	fp,sp,20
   1d154:	e13ffd15 	stw	r4,-12(fp)
   1d158:	e17ffe15 	stw	r5,-8(fp)
   1d15c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   1d160:	e0bffd17 	ldw	r2,-12(fp)
   1d164:	10800017 	ldw	r2,0(r2)
   1d168:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1d16c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1d170:	00000c06 	br	1d1a4 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   1d174:	e0bffe17 	ldw	r2,-8(fp)
   1d178:	10c00044 	addi	r3,r2,1
   1d17c:	e0fffe15 	stw	r3,-8(fp)
   1d180:	10800003 	ldbu	r2,0(r2)
   1d184:	10803fcc 	andi	r2,r2,255
   1d188:	100b883a 	mov	r5,r2
   1d18c:	e13ffc17 	ldw	r4,-16(fp)
   1d190:	001d0000 	call	1d000 <alt_up_irda_write_data>
   1d194:	1000081e 	bne	r2,zero,1d1b8 <alt_up_irda_write_fd+0x74>
			count++;
   1d198:	e0bffb17 	ldw	r2,-20(fp)
   1d19c:	10800044 	addi	r2,r2,1
   1d1a0:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   1d1a4:	e0bfff17 	ldw	r2,-4(fp)
   1d1a8:	10ffffc4 	addi	r3,r2,-1
   1d1ac:	e0ffff15 	stw	r3,-4(fp)
   1d1b0:	103ff01e 	bne	r2,zero,1d174 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701d174>
   1d1b4:	00000106 	br	1d1bc <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
   1d1b8:	0001883a 	nop
	}
	return count;
   1d1bc:	e0bffb17 	ldw	r2,-20(fp)
}
   1d1c0:	e037883a 	mov	sp,fp
   1d1c4:	dfc00117 	ldw	ra,4(sp)
   1d1c8:	df000017 	ldw	fp,0(sp)
   1d1cc:	dec00204 	addi	sp,sp,8
   1d1d0:	f800283a 	ret

0001d1d4 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   1d1d4:	defffc04 	addi	sp,sp,-16
   1d1d8:	dfc00315 	stw	ra,12(sp)
   1d1dc:	df000215 	stw	fp,8(sp)
   1d1e0:	df000204 	addi	fp,sp,8
   1d1e4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   1d1e8:	d1601e04 	addi	r5,gp,-32648
   1d1ec:	e13fff17 	ldw	r4,-4(fp)
   1d1f0:	001df3c0 	call	1df3c <alt_find_dev>
   1d1f4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1d1f8:	e0bffe17 	ldw	r2,-8(fp)
}
   1d1fc:	e037883a 	mov	sp,fp
   1d200:	dfc00117 	ldw	ra,4(sp)
   1d204:	df000017 	ldw	fp,0(sp)
   1d208:	dec00204 	addi	sp,sp,8
   1d20c:	f800283a 	ret

0001d210 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   1d210:	defffd04 	addi	sp,sp,-12
   1d214:	df000215 	stw	fp,8(sp)
   1d218:	df000204 	addi	fp,sp,8
   1d21c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   1d220:	e0bfff17 	ldw	r2,-4(fp)
   1d224:	1080400c 	andi	r2,r2,256
   1d228:	1004d23a 	srli	r2,r2,8
   1d22c:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   1d230:	e0bffe03 	ldbu	r2,-8(fp)
}
   1d234:	e037883a 	mov	sp,fp
   1d238:	df000017 	ldw	fp,0(sp)
   1d23c:	dec00104 	addi	sp,sp,4
   1d240:	f800283a 	ret

0001d244 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   1d244:	defffd04 	addi	sp,sp,-12
   1d248:	df000215 	stw	fp,8(sp)
   1d24c:	df000204 	addi	fp,sp,8
   1d250:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   1d254:	e0bfff17 	ldw	r2,-4(fp)
   1d258:	1080004c 	andi	r2,r2,1
   1d25c:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1d260:	e0bffe03 	ldbu	r2,-8(fp)
}
   1d264:	e037883a 	mov	sp,fp
   1d268:	df000017 	ldw	fp,0(sp)
   1d26c:	dec00104 	addi	sp,sp,4
   1d270:	f800283a 	ret

0001d274 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   1d274:	defffd04 	addi	sp,sp,-12
   1d278:	df000215 	stw	fp,8(sp)
   1d27c:	df000204 	addi	fp,sp,8
   1d280:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   1d284:	e0bfff17 	ldw	r2,-4(fp)
   1d288:	1081000c 	andi	r2,r2,1024
   1d28c:	1004d2ba 	srli	r2,r2,10
   1d290:	e0bffe05 	stb	r2,-8(fp)
	return re;
   1d294:	e0bffe03 	ldbu	r2,-8(fp)
}
   1d298:	e037883a 	mov	sp,fp
   1d29c:	df000017 	ldw	fp,0(sp)
   1d2a0:	dec00104 	addi	sp,sp,4
   1d2a4:	f800283a 	ret

0001d2a8 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   1d2a8:	defffd04 	addi	sp,sp,-12
   1d2ac:	df000215 	stw	fp,8(sp)
   1d2b0:	df000204 	addi	fp,sp,8
   1d2b4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   1d2b8:	e0bfff17 	ldw	r2,-4(fp)
   1d2bc:	1004d43a 	srli	r2,r2,16
   1d2c0:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   1d2c4:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1d2c8:	e037883a 	mov	sp,fp
   1d2cc:	df000017 	ldw	fp,0(sp)
   1d2d0:	dec00104 	addi	sp,sp,4
   1d2d4:	f800283a 	ret

0001d2d8 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   1d2d8:	defffd04 	addi	sp,sp,-12
   1d2dc:	df000215 	stw	fp,8(sp)
   1d2e0:	df000204 	addi	fp,sp,8
   1d2e4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   1d2e8:	e0bfff17 	ldw	r2,-4(fp)
   1d2ec:	10a0000c 	andi	r2,r2,32768
   1d2f0:	1004d3fa 	srli	r2,r2,15
   1d2f4:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   1d2f8:	e0bffe03 	ldbu	r2,-8(fp)
}
   1d2fc:	e037883a 	mov	sp,fp
   1d300:	df000017 	ldw	fp,0(sp)
   1d304:	dec00104 	addi	sp,sp,4
   1d308:	f800283a 	ret

0001d30c <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   1d30c:	defffd04 	addi	sp,sp,-12
   1d310:	df000215 	stw	fp,8(sp)
   1d314:	df000204 	addi	fp,sp,8
   1d318:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   1d31c:	e0bfff17 	ldw	r2,-4(fp)
   1d320:	e0bffe05 	stb	r2,-8(fp)
	return data;
   1d324:	e0bffe03 	ldbu	r2,-8(fp)
}
   1d328:	e037883a 	mov	sp,fp
   1d32c:	df000017 	ldw	fp,0(sp)
   1d330:	dec00104 	addi	sp,sp,4
   1d334:	f800283a 	ret

0001d338 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   1d338:	defffb04 	addi	sp,sp,-20
   1d33c:	dfc00415 	stw	ra,16(sp)
   1d340:	df000315 	stw	fp,12(sp)
   1d344:	df000304 	addi	fp,sp,12
   1d348:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   1d34c:	01403fc4 	movi	r5,255
   1d350:	e13fff17 	ldw	r4,-4(fp)
   1d354:	001d5980 	call	1d598 <alt_up_ps2_write_data_byte_with_ack>
   1d358:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   1d35c:	e0bffd17 	ldw	r2,-12(fp)
   1d360:	1000211e 	bne	r2,zero,1d3e8 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1d364:	e0bffe04 	addi	r2,fp,-8
   1d368:	100b883a 	mov	r5,r2
   1d36c:	e13fff17 	ldw	r4,-4(fp)
   1d370:	001d5fc0 	call	1d5fc <alt_up_ps2_read_data_byte_timeout>
   1d374:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   1d378:	e0bffd17 	ldw	r2,-12(fp)
   1d37c:	10001a1e 	bne	r2,zero,1d3e8 <alt_up_ps2_init+0xb0>
   1d380:	e0bffe03 	ldbu	r2,-8(fp)
   1d384:	10803fcc 	andi	r2,r2,255
   1d388:	10802a98 	cmpnei	r2,r2,170
   1d38c:	1000161e 	bne	r2,zero,1d3e8 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   1d390:	e0bffe04 	addi	r2,fp,-8
   1d394:	100b883a 	mov	r5,r2
   1d398:	e13fff17 	ldw	r4,-4(fp)
   1d39c:	001d5fc0 	call	1d5fc <alt_up_ps2_read_data_byte_timeout>
   1d3a0:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   1d3a4:	e0bffd17 	ldw	r2,-12(fp)
   1d3a8:	10bfe318 	cmpnei	r2,r2,-116
   1d3ac:	1000041e 	bne	r2,zero,1d3c0 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   1d3b0:	e0bfff17 	ldw	r2,-4(fp)
   1d3b4:	00c00044 	movi	r3,1
   1d3b8:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
   1d3bc:	00000a06 	br	1d3e8 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
   1d3c0:	e0bffd17 	ldw	r2,-12(fp)
   1d3c4:	1000081e 	bne	r2,zero,1d3e8 <alt_up_ps2_init+0xb0>
   1d3c8:	e0bffe03 	ldbu	r2,-8(fp)
   1d3cc:	10803fcc 	andi	r2,r2,255
   1d3d0:	1000051e 	bne	r2,zero,1d3e8 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   1d3d4:	e0bfff17 	ldw	r2,-4(fp)
   1d3d8:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   1d3dc:	01403d04 	movi	r5,244
   1d3e0:	e13fff17 	ldw	r4,-4(fp)
   1d3e4:	001d4bc0 	call	1d4bc <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   1d3e8:	0001883a 	nop
   1d3ec:	e037883a 	mov	sp,fp
   1d3f0:	dfc00117 	ldw	ra,4(sp)
   1d3f4:	df000017 	ldw	fp,0(sp)
   1d3f8:	dec00204 	addi	sp,sp,8
   1d3fc:	f800283a 	ret

0001d400 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1d400:	defffd04 	addi	sp,sp,-12
   1d404:	df000215 	stw	fp,8(sp)
   1d408:	df000204 	addi	fp,sp,8
   1d40c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1d410:	e0bfff17 	ldw	r2,-4(fp)
   1d414:	10800a17 	ldw	r2,40(r2)
   1d418:	10800104 	addi	r2,r2,4
   1d41c:	10800037 	ldwio	r2,0(r2)
   1d420:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1d424:	e0bffe17 	ldw	r2,-8(fp)
   1d428:	10800054 	ori	r2,r2,1
   1d42c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1d430:	e0bfff17 	ldw	r2,-4(fp)
   1d434:	10800a17 	ldw	r2,40(r2)
   1d438:	10800104 	addi	r2,r2,4
   1d43c:	1007883a 	mov	r3,r2
   1d440:	e0bffe17 	ldw	r2,-8(fp)
   1d444:	18800035 	stwio	r2,0(r3)
}
   1d448:	0001883a 	nop
   1d44c:	e037883a 	mov	sp,fp
   1d450:	df000017 	ldw	fp,0(sp)
   1d454:	dec00104 	addi	sp,sp,4
   1d458:	f800283a 	ret

0001d45c <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   1d45c:	defffd04 	addi	sp,sp,-12
   1d460:	df000215 	stw	fp,8(sp)
   1d464:	df000204 	addi	fp,sp,8
   1d468:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   1d46c:	e0bfff17 	ldw	r2,-4(fp)
   1d470:	10800a17 	ldw	r2,40(r2)
   1d474:	10800104 	addi	r2,r2,4
   1d478:	10800037 	ldwio	r2,0(r2)
   1d47c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   1d480:	e0fffe17 	ldw	r3,-8(fp)
   1d484:	00bfff84 	movi	r2,-2
   1d488:	1884703a 	and	r2,r3,r2
   1d48c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   1d490:	e0bfff17 	ldw	r2,-4(fp)
   1d494:	10800a17 	ldw	r2,40(r2)
   1d498:	10800104 	addi	r2,r2,4
   1d49c:	1007883a 	mov	r3,r2
   1d4a0:	e0bffe17 	ldw	r2,-8(fp)
   1d4a4:	18800035 	stwio	r2,0(r3)
}
   1d4a8:	0001883a 	nop
   1d4ac:	e037883a 	mov	sp,fp
   1d4b0:	df000017 	ldw	fp,0(sp)
   1d4b4:	dec00104 	addi	sp,sp,4
   1d4b8:	f800283a 	ret

0001d4bc <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1d4bc:	defffb04 	addi	sp,sp,-20
   1d4c0:	dfc00415 	stw	ra,16(sp)
   1d4c4:	df000315 	stw	fp,12(sp)
   1d4c8:	df000304 	addi	fp,sp,12
   1d4cc:	e13ffe15 	stw	r4,-8(fp)
   1d4d0:	2805883a 	mov	r2,r5
   1d4d4:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   1d4d8:	e0bffe17 	ldw	r2,-8(fp)
   1d4dc:	10800a17 	ldw	r2,40(r2)
   1d4e0:	1007883a 	mov	r3,r2
   1d4e4:	e0bfff03 	ldbu	r2,-4(fp)
   1d4e8:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   1d4ec:	e0bffe17 	ldw	r2,-8(fp)
   1d4f0:	10800a17 	ldw	r2,40(r2)
   1d4f4:	10800104 	addi	r2,r2,4
   1d4f8:	10800037 	ldwio	r2,0(r2)
   1d4fc:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   1d500:	e13ffd17 	ldw	r4,-12(fp)
   1d504:	001d2740 	call	1d274 <read_CE_bit>
   1d508:	10803fcc 	andi	r2,r2,255
   1d50c:	10000226 	beq	r2,zero,1d518 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   1d510:	00bffec4 	movi	r2,-5
   1d514:	00000106 	br	1d51c <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   1d518:	0005883a 	mov	r2,zero
}
   1d51c:	e037883a 	mov	sp,fp
   1d520:	dfc00117 	ldw	ra,4(sp)
   1d524:	df000017 	ldw	fp,0(sp)
   1d528:	dec00204 	addi	sp,sp,8
   1d52c:	f800283a 	ret

0001d530 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   1d530:	defffc04 	addi	sp,sp,-16
   1d534:	dfc00315 	stw	ra,12(sp)
   1d538:	df000215 	stw	fp,8(sp)
   1d53c:	df000204 	addi	fp,sp,8
   1d540:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   1d544:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   1d548:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   1d54c:	e0bffe44 	addi	r2,fp,-7
   1d550:	100b883a 	mov	r5,r2
   1d554:	e13fff17 	ldw	r4,-4(fp)
   1d558:	001d5fc0 	call	1d5fc <alt_up_ps2_read_data_byte_timeout>
   1d55c:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   1d560:	e0bffe03 	ldbu	r2,-8(fp)
   1d564:	1000061e 	bne	r2,zero,1d580 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   1d568:	e0bffe43 	ldbu	r2,-7(fp)
   1d56c:	10803fcc 	andi	r2,r2,255
   1d570:	10803e98 	cmpnei	r2,r2,250
   1d574:	103ff51e 	bne	r2,zero,1d54c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701d54c>
				return 0;
   1d578:	0005883a 	mov	r2,zero
   1d57c:	00000106 	br	1d584 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
   1d580:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   1d584:	e037883a 	mov	sp,fp
   1d588:	dfc00117 	ldw	ra,4(sp)
   1d58c:	df000017 	ldw	fp,0(sp)
   1d590:	dec00204 	addi	sp,sp,8
   1d594:	f800283a 	ret

0001d598 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   1d598:	defffa04 	addi	sp,sp,-24
   1d59c:	dfc00515 	stw	ra,20(sp)
   1d5a0:	df000415 	stw	fp,16(sp)
   1d5a4:	df000404 	addi	fp,sp,16
   1d5a8:	e13ffe15 	stw	r4,-8(fp)
   1d5ac:	2805883a 	mov	r2,r5
   1d5b0:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   1d5b4:	e0bfff03 	ldbu	r2,-4(fp)
   1d5b8:	100b883a 	mov	r5,r2
   1d5bc:	e13ffe17 	ldw	r4,-8(fp)
   1d5c0:	001d4bc0 	call	1d4bc <alt_up_ps2_write_data_byte>
   1d5c4:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   1d5c8:	e0bffc17 	ldw	r2,-16(fp)
   1d5cc:	10000226 	beq	r2,zero,1d5d8 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   1d5d0:	e0bffc17 	ldw	r2,-16(fp)
   1d5d4:	00000406 	br	1d5e8 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   1d5d8:	e13ffe17 	ldw	r4,-8(fp)
   1d5dc:	001d5300 	call	1d530 <alt_up_ps2_wait_for_ack>
   1d5e0:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   1d5e4:	e0bffd17 	ldw	r2,-12(fp)
}
   1d5e8:	e037883a 	mov	sp,fp
   1d5ec:	dfc00117 	ldw	ra,4(sp)
   1d5f0:	df000017 	ldw	fp,0(sp)
   1d5f4:	dec00204 	addi	sp,sp,8
   1d5f8:	f800283a 	ret

0001d5fc <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1d5fc:	defffa04 	addi	sp,sp,-24
   1d600:	dfc00515 	stw	ra,20(sp)
   1d604:	df000415 	stw	fp,16(sp)
   1d608:	df000404 	addi	fp,sp,16
   1d60c:	e13ffe15 	stw	r4,-8(fp)
   1d610:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1d614:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   1d618:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   1d61c:	e0bffc17 	ldw	r2,-16(fp)
   1d620:	10800044 	addi	r2,r2,1
   1d624:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1d628:	e0bffe17 	ldw	r2,-8(fp)
   1d62c:	10800a17 	ldw	r2,40(r2)
   1d630:	10800037 	ldwio	r2,0(r2)
   1d634:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   1d638:	e13ffd17 	ldw	r4,-12(fp)
   1d63c:	001d2d80 	call	1d2d8 <read_data_valid>
   1d640:	10803fcc 	andi	r2,r2,255
   1d644:	10000726 	beq	r2,zero,1d664 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   1d648:	e13ffd17 	ldw	r4,-12(fp)
   1d64c:	001d30c0 	call	1d30c <read_data_byte>
   1d650:	1007883a 	mov	r3,r2
   1d654:	e0bfff17 	ldw	r2,-4(fp)
   1d658:	10c00005 	stb	r3,0(r2)
			return 0;
   1d65c:	0005883a 	mov	r2,zero
   1d660:	00000806 	br	1d684 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   1d664:	e0bffe17 	ldw	r2,-8(fp)
   1d668:	10800c17 	ldw	r2,48(r2)
   1d66c:	103feb26 	beq	r2,zero,1d61c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701d61c>
   1d670:	e0bffe17 	ldw	r2,-8(fp)
   1d674:	10c00c17 	ldw	r3,48(r2)
   1d678:	e0bffc17 	ldw	r2,-16(fp)
   1d67c:	18bfe72e 	bgeu	r3,r2,1d61c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701d61c>
		{
			return -ETIMEDOUT;
   1d680:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
   1d684:	e037883a 	mov	sp,fp
   1d688:	dfc00117 	ldw	ra,4(sp)
   1d68c:	df000017 	ldw	fp,0(sp)
   1d690:	dec00204 	addi	sp,sp,8
   1d694:	f800283a 	ret

0001d698 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   1d698:	defffb04 	addi	sp,sp,-20
   1d69c:	dfc00415 	stw	ra,16(sp)
   1d6a0:	df000315 	stw	fp,12(sp)
   1d6a4:	df000304 	addi	fp,sp,12
   1d6a8:	e13ffe15 	stw	r4,-8(fp)
   1d6ac:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   1d6b0:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1d6b4:	e0bffe17 	ldw	r2,-8(fp)
   1d6b8:	10800a17 	ldw	r2,40(r2)
   1d6bc:	10800037 	ldwio	r2,0(r2)
   1d6c0:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   1d6c4:	e13ffd17 	ldw	r4,-12(fp)
   1d6c8:	001d2d80 	call	1d2d8 <read_data_valid>
   1d6cc:	10803fcc 	andi	r2,r2,255
   1d6d0:	10000726 	beq	r2,zero,1d6f0 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   1d6d4:	e13ffd17 	ldw	r4,-12(fp)
   1d6d8:	001d30c0 	call	1d30c <read_data_byte>
   1d6dc:	1007883a 	mov	r3,r2
   1d6e0:	e0bfff17 	ldw	r2,-4(fp)
   1d6e4:	10c00005 	stb	r3,0(r2)
		return 0;
   1d6e8:	0005883a 	mov	r2,zero
   1d6ec:	00000106 	br	1d6f4 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   1d6f0:	00bfffc4 	movi	r2,-1
}
   1d6f4:	e037883a 	mov	sp,fp
   1d6f8:	dfc00117 	ldw	ra,4(sp)
   1d6fc:	df000017 	ldw	fp,0(sp)
   1d700:	dec00204 	addi	sp,sp,8
   1d704:	f800283a 	ret

0001d708 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   1d708:	defffb04 	addi	sp,sp,-20
   1d70c:	dfc00415 	stw	ra,16(sp)
   1d710:	df000315 	stw	fp,12(sp)
   1d714:	df000304 	addi	fp,sp,12
   1d718:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   1d71c:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   1d720:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   1d724:	e0bfff17 	ldw	r2,-4(fp)
   1d728:	10800a17 	ldw	r2,40(r2)
   1d72c:	10800037 	ldwio	r2,0(r2)
   1d730:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   1d734:	e13ffe17 	ldw	r4,-8(fp)
   1d738:	001d2a80 	call	1d2a8 <read_num_bytes_available>
   1d73c:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   1d740:	e0bffd0b 	ldhu	r2,-12(fp)
   1d744:	103ff71e 	bne	r2,zero,1d724 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701d724>
}
   1d748:	0001883a 	nop
   1d74c:	e037883a 	mov	sp,fp
   1d750:	dfc00117 	ldw	ra,4(sp)
   1d754:	df000017 	ldw	fp,0(sp)
   1d758:	dec00204 	addi	sp,sp,8
   1d75c:	f800283a 	ret

0001d760 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   1d760:	defff804 	addi	sp,sp,-32
   1d764:	dfc00715 	stw	ra,28(sp)
   1d768:	df000615 	stw	fp,24(sp)
   1d76c:	df000604 	addi	fp,sp,24
   1d770:	e13ffd15 	stw	r4,-12(fp)
   1d774:	e17ffe15 	stw	r5,-8(fp)
   1d778:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1d77c:	e0bffd17 	ldw	r2,-12(fp)
   1d780:	10800017 	ldw	r2,0(r2)
   1d784:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   1d788:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   1d78c:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   1d790:	e0fffc17 	ldw	r3,-16(fp)
   1d794:	e0bfff17 	ldw	r2,-4(fp)
   1d798:	18bffd16 	blt	r3,r2,1d790 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701d790>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   1d79c:	e0bffe17 	ldw	r2,-8(fp)
   1d7a0:	10c00044 	addi	r3,r2,1
   1d7a4:	e0fffe15 	stw	r3,-8(fp)
   1d7a8:	100b883a 	mov	r5,r2
   1d7ac:	e13ffa17 	ldw	r4,-24(fp)
   1d7b0:	001d5fc0 	call	1d5fc <alt_up_ps2_read_data_byte_timeout>
   1d7b4:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   1d7b8:	e0bffb17 	ldw	r2,-20(fp)
   1d7bc:	10000226 	beq	r2,zero,1d7c8 <alt_up_ps2_read_fd+0x68>
			return count;
   1d7c0:	e0bffc17 	ldw	r2,-16(fp)
   1d7c4:	00000406 	br	1d7d8 <alt_up_ps2_read_fd+0x78>
		count++;
   1d7c8:	e0bffc17 	ldw	r2,-16(fp)
   1d7cc:	10800044 	addi	r2,r2,1
   1d7d0:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   1d7d4:	e0bffc17 	ldw	r2,-16(fp)
}
   1d7d8:	e037883a 	mov	sp,fp
   1d7dc:	dfc00117 	ldw	ra,4(sp)
   1d7e0:	df000017 	ldw	fp,0(sp)
   1d7e4:	dec00204 	addi	sp,sp,8
   1d7e8:	f800283a 	ret

0001d7ec <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1d7ec:	defff804 	addi	sp,sp,-32
   1d7f0:	dfc00715 	stw	ra,28(sp)
   1d7f4:	df000615 	stw	fp,24(sp)
   1d7f8:	df000604 	addi	fp,sp,24
   1d7fc:	e13ffd15 	stw	r4,-12(fp)
   1d800:	e17ffe15 	stw	r5,-8(fp)
   1d804:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   1d808:	e0bffd17 	ldw	r2,-12(fp)
   1d80c:	10800017 	ldw	r2,0(r2)
   1d810:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   1d814:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   1d818:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   1d81c:	00001006 	br	1d860 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   1d820:	e0bffe17 	ldw	r2,-8(fp)
   1d824:	10c00044 	addi	r3,r2,1
   1d828:	e0fffe15 	stw	r3,-8(fp)
   1d82c:	10800003 	ldbu	r2,0(r2)
   1d830:	10803fcc 	andi	r2,r2,255
   1d834:	100b883a 	mov	r5,r2
   1d838:	e13ffb17 	ldw	r4,-20(fp)
   1d83c:	001d4bc0 	call	1d4bc <alt_up_ps2_write_data_byte>
   1d840:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   1d844:	e0bffc17 	ldw	r2,-16(fp)
   1d848:	10000226 	beq	r2,zero,1d854 <alt_up_ps2_write_fd+0x68>
			return count;
   1d84c:	e0bffa17 	ldw	r2,-24(fp)
   1d850:	00000706 	br	1d870 <alt_up_ps2_write_fd+0x84>
		count++;
   1d854:	e0bffa17 	ldw	r2,-24(fp)
   1d858:	10800044 	addi	r2,r2,1
   1d85c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   1d860:	e0fffa17 	ldw	r3,-24(fp)
   1d864:	e0bfff17 	ldw	r2,-4(fp)
   1d868:	18bfed16 	blt	r3,r2,1d820 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701d820>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   1d86c:	e0bffa17 	ldw	r2,-24(fp)
}
   1d870:	e037883a 	mov	sp,fp
   1d874:	dfc00117 	ldw	ra,4(sp)
   1d878:	df000017 	ldw	fp,0(sp)
   1d87c:	dec00204 	addi	sp,sp,8
   1d880:	f800283a 	ret

0001d884 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   1d884:	defffc04 	addi	sp,sp,-16
   1d888:	dfc00315 	stw	ra,12(sp)
   1d88c:	df000215 	stw	fp,8(sp)
   1d890:	df000204 	addi	fp,sp,8
   1d894:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   1d898:	d1601e04 	addi	r5,gp,-32648
   1d89c:	e13fff17 	ldw	r4,-4(fp)
   1d8a0:	001df3c0 	call	1df3c <alt_find_dev>
   1d8a4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1d8a8:	e0bffe17 	ldw	r2,-8(fp)
}
   1d8ac:	e037883a 	mov	sp,fp
   1d8b0:	dfc00117 	ldw	ra,4(sp)
   1d8b4:	df000017 	ldw	fp,0(sp)
   1d8b8:	dec00204 	addi	sp,sp,8
   1d8bc:	f800283a 	ret

0001d8c0 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1d8c0:	defffd04 	addi	sp,sp,-12
   1d8c4:	df000215 	stw	fp,8(sp)
   1d8c8:	df000204 	addi	fp,sp,8
   1d8cc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1d8d0:	e0bfff17 	ldw	r2,-4(fp)
   1d8d4:	10800a17 	ldw	r2,40(r2)
   1d8d8:	10800104 	addi	r2,r2,4
   1d8dc:	10800037 	ldwio	r2,0(r2)
   1d8e0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   1d8e4:	e0bffe17 	ldw	r2,-8(fp)
   1d8e8:	10800054 	ori	r2,r2,1
   1d8ec:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1d8f0:	e0bfff17 	ldw	r2,-4(fp)
   1d8f4:	10800a17 	ldw	r2,40(r2)
   1d8f8:	10800104 	addi	r2,r2,4
   1d8fc:	1007883a 	mov	r3,r2
   1d900:	e0bffe17 	ldw	r2,-8(fp)
   1d904:	18800035 	stwio	r2,0(r3)
}
   1d908:	0001883a 	nop
   1d90c:	e037883a 	mov	sp,fp
   1d910:	df000017 	ldw	fp,0(sp)
   1d914:	dec00104 	addi	sp,sp,4
   1d918:	f800283a 	ret

0001d91c <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   1d91c:	defffd04 	addi	sp,sp,-12
   1d920:	df000215 	stw	fp,8(sp)
   1d924:	df000204 	addi	fp,sp,8
   1d928:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1d92c:	e0bfff17 	ldw	r2,-4(fp)
   1d930:	10800a17 	ldw	r2,40(r2)
   1d934:	10800104 	addi	r2,r2,4
   1d938:	10800037 	ldwio	r2,0(r2)
   1d93c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   1d940:	e0fffe17 	ldw	r3,-8(fp)
   1d944:	00bfff84 	movi	r2,-2
   1d948:	1884703a 	and	r2,r3,r2
   1d94c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   1d950:	e0bfff17 	ldw	r2,-4(fp)
   1d954:	10800a17 	ldw	r2,40(r2)
   1d958:	10800104 	addi	r2,r2,4
   1d95c:	1007883a 	mov	r3,r2
   1d960:	e0bffe17 	ldw	r2,-8(fp)
   1d964:	18800035 	stwio	r2,0(r3)
}
   1d968:	0001883a 	nop
   1d96c:	e037883a 	mov	sp,fp
   1d970:	df000017 	ldw	fp,0(sp)
   1d974:	dec00104 	addi	sp,sp,4
   1d978:	f800283a 	ret

0001d97c <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   1d97c:	defffd04 	addi	sp,sp,-12
   1d980:	df000215 	stw	fp,8(sp)
   1d984:	df000204 	addi	fp,sp,8
   1d988:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   1d98c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   1d990:	e0bfff17 	ldw	r2,-4(fp)
   1d994:	10800a17 	ldw	r2,40(r2)
   1d998:	10800084 	addi	r2,r2,2
   1d99c:	1080002b 	ldhuio	r2,0(r2)
   1d9a0:	10bfffcc 	andi	r2,r2,65535
   1d9a4:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   1d9a8:	e0bffe0b 	ldhu	r2,-8(fp)
}
   1d9ac:	e037883a 	mov	sp,fp
   1d9b0:	df000017 	ldw	fp,0(sp)
   1d9b4:	dec00104 	addi	sp,sp,4
   1d9b8:	f800283a 	ret

0001d9bc <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   1d9bc:	defffd04 	addi	sp,sp,-12
   1d9c0:	df000215 	stw	fp,8(sp)
   1d9c4:	df000204 	addi	fp,sp,8
   1d9c8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   1d9cc:	e0bfff17 	ldw	r2,-4(fp)
   1d9d0:	10800a17 	ldw	r2,40(r2)
   1d9d4:	10800104 	addi	r2,r2,4
   1d9d8:	10800037 	ldwio	r2,0(r2)
   1d9dc:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   1d9e0:	e0bffe17 	ldw	r2,-8(fp)
   1d9e4:	1004d43a 	srli	r2,r2,16
}
   1d9e8:	e037883a 	mov	sp,fp
   1d9ec:	df000017 	ldw	fp,0(sp)
   1d9f0:	dec00104 	addi	sp,sp,4
   1d9f4:	f800283a 	ret

0001d9f8 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   1d9f8:	defffd04 	addi	sp,sp,-12
   1d9fc:	df000215 	stw	fp,8(sp)
   1da00:	df000204 	addi	fp,sp,8
   1da04:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   1da08:	e0bfff17 	ldw	r2,-4(fp)
   1da0c:	1080800c 	andi	r2,r2,512
   1da10:	1004d27a 	srli	r2,r2,9
   1da14:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   1da18:	e0bffe17 	ldw	r2,-8(fp)
   1da1c:	10000226 	beq	r2,zero,1da28 <alt_up_rs232_check_parity+0x30>
   1da20:	00bfffc4 	movi	r2,-1
   1da24:	00000106 	br	1da2c <alt_up_rs232_check_parity+0x34>
   1da28:	0005883a 	mov	r2,zero
}
   1da2c:	e037883a 	mov	sp,fp
   1da30:	df000017 	ldw	fp,0(sp)
   1da34:	dec00104 	addi	sp,sp,4
   1da38:	f800283a 	ret

0001da3c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   1da3c:	defffd04 	addi	sp,sp,-12
   1da40:	df000215 	stw	fp,8(sp)
   1da44:	df000204 	addi	fp,sp,8
   1da48:	e13ffe15 	stw	r4,-8(fp)
   1da4c:	2805883a 	mov	r2,r5
   1da50:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   1da54:	e0bffe17 	ldw	r2,-8(fp)
   1da58:	10800a17 	ldw	r2,40(r2)
   1da5c:	1007883a 	mov	r3,r2
   1da60:	e0bfff03 	ldbu	r2,-4(fp)
   1da64:	18800035 	stwio	r2,0(r3)
	return 0;
   1da68:	0005883a 	mov	r2,zero
}
   1da6c:	e037883a 	mov	sp,fp
   1da70:	df000017 	ldw	fp,0(sp)
   1da74:	dec00104 	addi	sp,sp,4
   1da78:	f800283a 	ret

0001da7c <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   1da7c:	defffa04 	addi	sp,sp,-24
   1da80:	dfc00515 	stw	ra,20(sp)
   1da84:	df000415 	stw	fp,16(sp)
   1da88:	df000404 	addi	fp,sp,16
   1da8c:	e13ffd15 	stw	r4,-12(fp)
   1da90:	e17ffe15 	stw	r5,-8(fp)
   1da94:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   1da98:	e0bffd17 	ldw	r2,-12(fp)
   1da9c:	10800a17 	ldw	r2,40(r2)
   1daa0:	10800037 	ldwio	r2,0(r2)
   1daa4:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   1daa8:	e0bffc17 	ldw	r2,-16(fp)
   1daac:	1007883a 	mov	r3,r2
   1dab0:	e0bffe17 	ldw	r2,-8(fp)
   1dab4:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   1dab8:	e13ffc17 	ldw	r4,-16(fp)
   1dabc:	001d9f80 	call	1d9f8 <alt_up_rs232_check_parity>
   1dac0:	1007883a 	mov	r3,r2
   1dac4:	e0bfff17 	ldw	r2,-4(fp)
   1dac8:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   1dacc:	e0bffc17 	ldw	r2,-16(fp)
   1dad0:	10a0000c 	andi	r2,r2,32768
   1dad4:	1004d3fa 	srli	r2,r2,15
   1dad8:	10bfffc4 	addi	r2,r2,-1
}
   1dadc:	e037883a 	mov	sp,fp
   1dae0:	dfc00117 	ldw	ra,4(sp)
   1dae4:	df000017 	ldw	fp,0(sp)
   1dae8:	dec00204 	addi	sp,sp,8
   1daec:	f800283a 	ret

0001daf0 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   1daf0:	defff804 	addi	sp,sp,-32
   1daf4:	dfc00715 	stw	ra,28(sp)
   1daf8:	df000615 	stw	fp,24(sp)
   1dafc:	df000604 	addi	fp,sp,24
   1db00:	e13ffd15 	stw	r4,-12(fp)
   1db04:	e17ffe15 	stw	r5,-8(fp)
   1db08:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1db0c:	e0bffd17 	ldw	r2,-12(fp)
   1db10:	10800017 	ldw	r2,0(r2)
   1db14:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   1db18:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   1db1c:	00000c06 	br	1db50 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   1db20:	e0bffe17 	ldw	r2,-8(fp)
   1db24:	10c00044 	addi	r3,r2,1
   1db28:	e0fffe15 	stw	r3,-8(fp)
   1db2c:	e0fffc04 	addi	r3,fp,-16
   1db30:	180d883a 	mov	r6,r3
   1db34:	100b883a 	mov	r5,r2
   1db38:	e13ffb17 	ldw	r4,-20(fp)
   1db3c:	001da7c0 	call	1da7c <alt_up_rs232_read_data>
   1db40:	1000081e 	bne	r2,zero,1db64 <alt_up_rs232_read_fd+0x74>
			count++;
   1db44:	e0bffa17 	ldw	r2,-24(fp)
   1db48:	10800044 	addi	r2,r2,1
   1db4c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   1db50:	e0bfff17 	ldw	r2,-4(fp)
   1db54:	10ffffc4 	addi	r3,r2,-1
   1db58:	e0ffff15 	stw	r3,-4(fp)
   1db5c:	103ff01e 	bne	r2,zero,1db20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701db20>
   1db60:	00000106 	br	1db68 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   1db64:	0001883a 	nop
	}
	return count;
   1db68:	e0bffa17 	ldw	r2,-24(fp)
}
   1db6c:	e037883a 	mov	sp,fp
   1db70:	dfc00117 	ldw	ra,4(sp)
   1db74:	df000017 	ldw	fp,0(sp)
   1db78:	dec00204 	addi	sp,sp,8
   1db7c:	f800283a 	ret

0001db80 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   1db80:	defff904 	addi	sp,sp,-28
   1db84:	dfc00615 	stw	ra,24(sp)
   1db88:	df000515 	stw	fp,20(sp)
   1db8c:	df000504 	addi	fp,sp,20
   1db90:	e13ffd15 	stw	r4,-12(fp)
   1db94:	e17ffe15 	stw	r5,-8(fp)
   1db98:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   1db9c:	e0bffd17 	ldw	r2,-12(fp)
   1dba0:	10800017 	ldw	r2,0(r2)
   1dba4:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   1dba8:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   1dbac:	00000d06 	br	1dbe4 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   1dbb0:	e0bffe17 	ldw	r2,-8(fp)
   1dbb4:	10800003 	ldbu	r2,0(r2)
   1dbb8:	10803fcc 	andi	r2,r2,255
   1dbbc:	100b883a 	mov	r5,r2
   1dbc0:	e13ffc17 	ldw	r4,-16(fp)
   1dbc4:	001da3c0 	call	1da3c <alt_up_rs232_write_data>
   1dbc8:	10000b1e 	bne	r2,zero,1dbf8 <alt_up_rs232_write_fd+0x78>
		{
			count++;
   1dbcc:	e0bffb17 	ldw	r2,-20(fp)
   1dbd0:	10800044 	addi	r2,r2,1
   1dbd4:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   1dbd8:	e0bffe17 	ldw	r2,-8(fp)
   1dbdc:	10800044 	addi	r2,r2,1
   1dbe0:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   1dbe4:	e0bfff17 	ldw	r2,-4(fp)
   1dbe8:	10ffffc4 	addi	r3,r2,-1
   1dbec:	e0ffff15 	stw	r3,-4(fp)
   1dbf0:	103fef1e 	bne	r2,zero,1dbb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701dbb0>
   1dbf4:	00000106 	br	1dbfc <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
   1dbf8:	0001883a 	nop
	}
	return count;
   1dbfc:	e0bffb17 	ldw	r2,-20(fp)
}
   1dc00:	e037883a 	mov	sp,fp
   1dc04:	dfc00117 	ldw	ra,4(sp)
   1dc08:	df000017 	ldw	fp,0(sp)
   1dc0c:	dec00204 	addi	sp,sp,8
   1dc10:	f800283a 	ret

0001dc14 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   1dc14:	defffc04 	addi	sp,sp,-16
   1dc18:	dfc00315 	stw	ra,12(sp)
   1dc1c:	df000215 	stw	fp,8(sp)
   1dc20:	df000204 	addi	fp,sp,8
   1dc24:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   1dc28:	d1601e04 	addi	r5,gp,-32648
   1dc2c:	e13fff17 	ldw	r4,-4(fp)
   1dc30:	001df3c0 	call	1df3c <alt_find_dev>
   1dc34:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   1dc38:	e0bffe17 	ldw	r2,-8(fp)
}
   1dc3c:	e037883a 	mov	sp,fp
   1dc40:	dfc00117 	ldw	ra,4(sp)
   1dc44:	df000017 	ldw	fp,0(sp)
   1dc48:	dec00204 	addi	sp,sp,8
   1dc4c:	f800283a 	ret

0001dc50 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1dc50:	defff504 	addi	sp,sp,-44
   1dc54:	df000a15 	stw	fp,40(sp)
   1dc58:	df000a04 	addi	fp,sp,40
   1dc5c:	e13ffc15 	stw	r4,-16(fp)
   1dc60:	e17ffd15 	stw	r5,-12(fp)
   1dc64:	e1bffe15 	stw	r6,-8(fp)
   1dc68:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   1dc6c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1dc70:	d0a85c17 	ldw	r2,-24208(gp)
  
  if (alt_ticks_per_second ())
   1dc74:	10003c26 	beq	r2,zero,1dd68 <alt_alarm_start+0x118>
  {
    if (alarm)
   1dc78:	e0bffc17 	ldw	r2,-16(fp)
   1dc7c:	10003826 	beq	r2,zero,1dd60 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   1dc80:	e0bffc17 	ldw	r2,-16(fp)
   1dc84:	e0fffe17 	ldw	r3,-8(fp)
   1dc88:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   1dc8c:	e0bffc17 	ldw	r2,-16(fp)
   1dc90:	e0ffff17 	ldw	r3,-4(fp)
   1dc94:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1dc98:	0005303a 	rdctl	r2,status
   1dc9c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1dca0:	e0fff917 	ldw	r3,-28(fp)
   1dca4:	00bfff84 	movi	r2,-2
   1dca8:	1884703a 	and	r2,r3,r2
   1dcac:	1001703a 	wrctl	status,r2
  
  return context;
   1dcb0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   1dcb4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   1dcb8:	d0a85d17 	ldw	r2,-24204(gp)
      
      current_nticks = alt_nticks();
   1dcbc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   1dcc0:	e0fffd17 	ldw	r3,-12(fp)
   1dcc4:	e0bff617 	ldw	r2,-40(fp)
   1dcc8:	1885883a 	add	r2,r3,r2
   1dccc:	10c00044 	addi	r3,r2,1
   1dcd0:	e0bffc17 	ldw	r2,-16(fp)
   1dcd4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1dcd8:	e0bffc17 	ldw	r2,-16(fp)
   1dcdc:	10c00217 	ldw	r3,8(r2)
   1dce0:	e0bff617 	ldw	r2,-40(fp)
   1dce4:	1880042e 	bgeu	r3,r2,1dcf8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   1dce8:	e0bffc17 	ldw	r2,-16(fp)
   1dcec:	00c00044 	movi	r3,1
   1dcf0:	10c00405 	stb	r3,16(r2)
   1dcf4:	00000206 	br	1dd00 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   1dcf8:	e0bffc17 	ldw	r2,-16(fp)
   1dcfc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   1dd00:	e0bffc17 	ldw	r2,-16(fp)
   1dd04:	d0e04304 	addi	r3,gp,-32500
   1dd08:	e0fffa15 	stw	r3,-24(fp)
   1dd0c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1dd10:	e0bffb17 	ldw	r2,-20(fp)
   1dd14:	e0fffa17 	ldw	r3,-24(fp)
   1dd18:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1dd1c:	e0bffa17 	ldw	r2,-24(fp)
   1dd20:	10c00017 	ldw	r3,0(r2)
   1dd24:	e0bffb17 	ldw	r2,-20(fp)
   1dd28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1dd2c:	e0bffa17 	ldw	r2,-24(fp)
   1dd30:	10800017 	ldw	r2,0(r2)
   1dd34:	e0fffb17 	ldw	r3,-20(fp)
   1dd38:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1dd3c:	e0bffa17 	ldw	r2,-24(fp)
   1dd40:	e0fffb17 	ldw	r3,-20(fp)
   1dd44:	10c00015 	stw	r3,0(r2)
   1dd48:	e0bff817 	ldw	r2,-32(fp)
   1dd4c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1dd50:	e0bff717 	ldw	r2,-36(fp)
   1dd54:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1dd58:	0005883a 	mov	r2,zero
   1dd5c:	00000306 	br	1dd6c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   1dd60:	00bffa84 	movi	r2,-22
   1dd64:	00000106 	br	1dd6c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   1dd68:	00bfde84 	movi	r2,-134
  }
}
   1dd6c:	e037883a 	mov	sp,fp
   1dd70:	df000017 	ldw	fp,0(sp)
   1dd74:	dec00104 	addi	sp,sp,4
   1dd78:	f800283a 	ret

0001dd7c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1dd7c:	deffff04 	addi	sp,sp,-4
   1dd80:	df000015 	stw	fp,0(sp)
   1dd84:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   1dd88:	0001883a 	nop
   1dd8c:	e037883a 	mov	sp,fp
   1dd90:	df000017 	ldw	fp,0(sp)
   1dd94:	dec00104 	addi	sp,sp,4
   1dd98:	f800283a 	ret

0001dd9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1dd9c:	defffe04 	addi	sp,sp,-8
   1dda0:	dfc00115 	stw	ra,4(sp)
   1dda4:	df000015 	stw	fp,0(sp)
   1dda8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1ddac:	d0a02117 	ldw	r2,-32636(gp)
   1ddb0:	10000326 	beq	r2,zero,1ddc0 <alt_get_errno+0x24>
   1ddb4:	d0a02117 	ldw	r2,-32636(gp)
   1ddb8:	103ee83a 	callr	r2
   1ddbc:	00000106 	br	1ddc4 <alt_get_errno+0x28>
   1ddc0:	d0a83b04 	addi	r2,gp,-24340
}
   1ddc4:	e037883a 	mov	sp,fp
   1ddc8:	dfc00117 	ldw	ra,4(sp)
   1ddcc:	df000017 	ldw	fp,0(sp)
   1ddd0:	dec00204 	addi	sp,sp,8
   1ddd4:	f800283a 	ret

0001ddd8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   1ddd8:	defffa04 	addi	sp,sp,-24
   1dddc:	dfc00515 	stw	ra,20(sp)
   1dde0:	df000415 	stw	fp,16(sp)
   1dde4:	df000404 	addi	fp,sp,16
   1dde8:	e13ffe15 	stw	r4,-8(fp)
   1ddec:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1ddf0:	e0bffe17 	ldw	r2,-8(fp)
   1ddf4:	10000326 	beq	r2,zero,1de04 <alt_dev_llist_insert+0x2c>
   1ddf8:	e0bffe17 	ldw	r2,-8(fp)
   1ddfc:	10800217 	ldw	r2,8(r2)
   1de00:	1000061e 	bne	r2,zero,1de1c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   1de04:	001dd9c0 	call	1dd9c <alt_get_errno>
   1de08:	1007883a 	mov	r3,r2
   1de0c:	00800584 	movi	r2,22
   1de10:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   1de14:	00bffa84 	movi	r2,-22
   1de18:	00001306 	br	1de68 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   1de1c:	e0bffe17 	ldw	r2,-8(fp)
   1de20:	e0ffff17 	ldw	r3,-4(fp)
   1de24:	e0fffc15 	stw	r3,-16(fp)
   1de28:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   1de2c:	e0bffd17 	ldw	r2,-12(fp)
   1de30:	e0fffc17 	ldw	r3,-16(fp)
   1de34:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   1de38:	e0bffc17 	ldw	r2,-16(fp)
   1de3c:	10c00017 	ldw	r3,0(r2)
   1de40:	e0bffd17 	ldw	r2,-12(fp)
   1de44:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   1de48:	e0bffc17 	ldw	r2,-16(fp)
   1de4c:	10800017 	ldw	r2,0(r2)
   1de50:	e0fffd17 	ldw	r3,-12(fp)
   1de54:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   1de58:	e0bffc17 	ldw	r2,-16(fp)
   1de5c:	e0fffd17 	ldw	r3,-12(fp)
   1de60:	10c00015 	stw	r3,0(r2)

  return 0;  
   1de64:	0005883a 	mov	r2,zero
}
   1de68:	e037883a 	mov	sp,fp
   1de6c:	dfc00117 	ldw	ra,4(sp)
   1de70:	df000017 	ldw	fp,0(sp)
   1de74:	dec00204 	addi	sp,sp,8
   1de78:	f800283a 	ret

0001de7c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   1de7c:	defffd04 	addi	sp,sp,-12
   1de80:	dfc00215 	stw	ra,8(sp)
   1de84:	df000115 	stw	fp,4(sp)
   1de88:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1de8c:	008000b4 	movhi	r2,2
   1de90:	10bc3704 	addi	r2,r2,-3876
   1de94:	e0bfff15 	stw	r2,-4(fp)
   1de98:	00000606 	br	1deb4 <_do_ctors+0x38>
        (*ctor) (); 
   1de9c:	e0bfff17 	ldw	r2,-4(fp)
   1dea0:	10800017 	ldw	r2,0(r2)
   1dea4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1dea8:	e0bfff17 	ldw	r2,-4(fp)
   1deac:	10bfff04 	addi	r2,r2,-4
   1deb0:	e0bfff15 	stw	r2,-4(fp)
   1deb4:	e0ffff17 	ldw	r3,-4(fp)
   1deb8:	008000b4 	movhi	r2,2
   1debc:	10bc3704 	addi	r2,r2,-3876
   1dec0:	18bff62e 	bgeu	r3,r2,1de9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701de9c>
        (*ctor) (); 
}
   1dec4:	0001883a 	nop
   1dec8:	e037883a 	mov	sp,fp
   1decc:	dfc00117 	ldw	ra,4(sp)
   1ded0:	df000017 	ldw	fp,0(sp)
   1ded4:	dec00204 	addi	sp,sp,8
   1ded8:	f800283a 	ret

0001dedc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1dedc:	defffd04 	addi	sp,sp,-12
   1dee0:	dfc00215 	stw	ra,8(sp)
   1dee4:	df000115 	stw	fp,4(sp)
   1dee8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1deec:	008000b4 	movhi	r2,2
   1def0:	10bc3704 	addi	r2,r2,-3876
   1def4:	e0bfff15 	stw	r2,-4(fp)
   1def8:	00000606 	br	1df14 <_do_dtors+0x38>
        (*dtor) (); 
   1defc:	e0bfff17 	ldw	r2,-4(fp)
   1df00:	10800017 	ldw	r2,0(r2)
   1df04:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1df08:	e0bfff17 	ldw	r2,-4(fp)
   1df0c:	10bfff04 	addi	r2,r2,-4
   1df10:	e0bfff15 	stw	r2,-4(fp)
   1df14:	e0ffff17 	ldw	r3,-4(fp)
   1df18:	008000b4 	movhi	r2,2
   1df1c:	10bc3804 	addi	r2,r2,-3872
   1df20:	18bff62e 	bgeu	r3,r2,1defc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701defc>
        (*dtor) (); 
}
   1df24:	0001883a 	nop
   1df28:	e037883a 	mov	sp,fp
   1df2c:	dfc00117 	ldw	ra,4(sp)
   1df30:	df000017 	ldw	fp,0(sp)
   1df34:	dec00204 	addi	sp,sp,8
   1df38:	f800283a 	ret

0001df3c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   1df3c:	defffa04 	addi	sp,sp,-24
   1df40:	dfc00515 	stw	ra,20(sp)
   1df44:	df000415 	stw	fp,16(sp)
   1df48:	df000404 	addi	fp,sp,16
   1df4c:	e13ffe15 	stw	r4,-8(fp)
   1df50:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   1df54:	e0bfff17 	ldw	r2,-4(fp)
   1df58:	10800017 	ldw	r2,0(r2)
   1df5c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1df60:	e13ffe17 	ldw	r4,-8(fp)
   1df64:	0007b480 	call	7b48 <strlen>
   1df68:	10800044 	addi	r2,r2,1
   1df6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1df70:	00000d06 	br	1dfa8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   1df74:	e0bffc17 	ldw	r2,-16(fp)
   1df78:	10800217 	ldw	r2,8(r2)
   1df7c:	e0fffd17 	ldw	r3,-12(fp)
   1df80:	180d883a 	mov	r6,r3
   1df84:	e17ffe17 	ldw	r5,-8(fp)
   1df88:	1009883a 	mov	r4,r2
   1df8c:	001ed900 	call	1ed90 <memcmp>
   1df90:	1000021e 	bne	r2,zero,1df9c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   1df94:	e0bffc17 	ldw	r2,-16(fp)
   1df98:	00000706 	br	1dfb8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   1df9c:	e0bffc17 	ldw	r2,-16(fp)
   1dfa0:	10800017 	ldw	r2,0(r2)
   1dfa4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1dfa8:	e0fffc17 	ldw	r3,-16(fp)
   1dfac:	e0bfff17 	ldw	r2,-4(fp)
   1dfb0:	18bff01e 	bne	r3,r2,1df74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701df74>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   1dfb4:	0005883a 	mov	r2,zero
}
   1dfb8:	e037883a 	mov	sp,fp
   1dfbc:	dfc00117 	ldw	ra,4(sp)
   1dfc0:	df000017 	ldw	fp,0(sp)
   1dfc4:	dec00204 	addi	sp,sp,8
   1dfc8:	f800283a 	ret

0001dfcc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1dfcc:	defffe04 	addi	sp,sp,-8
   1dfd0:	dfc00115 	stw	ra,4(sp)
   1dfd4:	df000015 	stw	fp,0(sp)
   1dfd8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1dfdc:	01440004 	movi	r5,4096
   1dfe0:	0009883a 	mov	r4,zero
   1dfe4:	001ec180 	call	1ec18 <alt_icache_flush>
#endif
}
   1dfe8:	0001883a 	nop
   1dfec:	e037883a 	mov	sp,fp
   1dff0:	dfc00117 	ldw	ra,4(sp)
   1dff4:	df000017 	ldw	fp,0(sp)
   1dff8:	dec00204 	addi	sp,sp,8
   1dffc:	f800283a 	ret

0001e000 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1e000:	defff904 	addi	sp,sp,-28
   1e004:	dfc00615 	stw	ra,24(sp)
   1e008:	df000515 	stw	fp,20(sp)
   1e00c:	df000504 	addi	fp,sp,20
   1e010:	e13ffc15 	stw	r4,-16(fp)
   1e014:	e17ffd15 	stw	r5,-12(fp)
   1e018:	e1bffe15 	stw	r6,-8(fp)
   1e01c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1e020:	e1bfff17 	ldw	r6,-4(fp)
   1e024:	e17ffe17 	ldw	r5,-8(fp)
   1e028:	e13ffd17 	ldw	r4,-12(fp)
   1e02c:	001e3c00 	call	1e3c0 <open>
   1e030:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1e034:	e0bffb17 	ldw	r2,-20(fp)
   1e038:	10001c16 	blt	r2,zero,1e0ac <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   1e03c:	008000b4 	movhi	r2,2
   1e040:	10835104 	addi	r2,r2,3396
   1e044:	e0fffb17 	ldw	r3,-20(fp)
   1e048:	18c00324 	muli	r3,r3,12
   1e04c:	10c5883a 	add	r2,r2,r3
   1e050:	10c00017 	ldw	r3,0(r2)
   1e054:	e0bffc17 	ldw	r2,-16(fp)
   1e058:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1e05c:	008000b4 	movhi	r2,2
   1e060:	10835104 	addi	r2,r2,3396
   1e064:	e0fffb17 	ldw	r3,-20(fp)
   1e068:	18c00324 	muli	r3,r3,12
   1e06c:	10c5883a 	add	r2,r2,r3
   1e070:	10800104 	addi	r2,r2,4
   1e074:	10c00017 	ldw	r3,0(r2)
   1e078:	e0bffc17 	ldw	r2,-16(fp)
   1e07c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   1e080:	008000b4 	movhi	r2,2
   1e084:	10835104 	addi	r2,r2,3396
   1e088:	e0fffb17 	ldw	r3,-20(fp)
   1e08c:	18c00324 	muli	r3,r3,12
   1e090:	10c5883a 	add	r2,r2,r3
   1e094:	10800204 	addi	r2,r2,8
   1e098:	10c00017 	ldw	r3,0(r2)
   1e09c:	e0bffc17 	ldw	r2,-16(fp)
   1e0a0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   1e0a4:	e13ffb17 	ldw	r4,-20(fp)
   1e0a8:	00135c40 	call	135c4 <alt_release_fd>
  }
} 
   1e0ac:	0001883a 	nop
   1e0b0:	e037883a 	mov	sp,fp
   1e0b4:	dfc00117 	ldw	ra,4(sp)
   1e0b8:	df000017 	ldw	fp,0(sp)
   1e0bc:	dec00204 	addi	sp,sp,8
   1e0c0:	f800283a 	ret

0001e0c4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1e0c4:	defffb04 	addi	sp,sp,-20
   1e0c8:	dfc00415 	stw	ra,16(sp)
   1e0cc:	df000315 	stw	fp,12(sp)
   1e0d0:	df000304 	addi	fp,sp,12
   1e0d4:	e13ffd15 	stw	r4,-12(fp)
   1e0d8:	e17ffe15 	stw	r5,-8(fp)
   1e0dc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1e0e0:	01c07fc4 	movi	r7,511
   1e0e4:	01800044 	movi	r6,1
   1e0e8:	e17ffd17 	ldw	r5,-12(fp)
   1e0ec:	010000b4 	movhi	r4,2
   1e0f0:	21035404 	addi	r4,r4,3408
   1e0f4:	001e0000 	call	1e000 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   1e0f8:	01c07fc4 	movi	r7,511
   1e0fc:	000d883a 	mov	r6,zero
   1e100:	e17ffe17 	ldw	r5,-8(fp)
   1e104:	010000b4 	movhi	r4,2
   1e108:	21035104 	addi	r4,r4,3396
   1e10c:	001e0000 	call	1e000 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1e110:	01c07fc4 	movi	r7,511
   1e114:	01800044 	movi	r6,1
   1e118:	e17fff17 	ldw	r5,-4(fp)
   1e11c:	010000b4 	movhi	r4,2
   1e120:	21035704 	addi	r4,r4,3420
   1e124:	001e0000 	call	1e000 <alt_open_fd>
}  
   1e128:	0001883a 	nop
   1e12c:	e037883a 	mov	sp,fp
   1e130:	dfc00117 	ldw	ra,4(sp)
   1e134:	df000017 	ldw	fp,0(sp)
   1e138:	dec00204 	addi	sp,sp,8
   1e13c:	f800283a 	ret

0001e140 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   1e140:	defff004 	addi	sp,sp,-64
   1e144:	df000f15 	stw	fp,60(sp)
   1e148:	df000f04 	addi	fp,sp,60
   1e14c:	e13ffd15 	stw	r4,-12(fp)
   1e150:	e17ffe15 	stw	r5,-8(fp)
   1e154:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   1e158:	00bffa84 	movi	r2,-22
   1e15c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   1e160:	e0bffd17 	ldw	r2,-12(fp)
   1e164:	10800828 	cmpgeui	r2,r2,32
   1e168:	1000501e 	bne	r2,zero,1e2ac <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e16c:	0005303a 	rdctl	r2,status
   1e170:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e174:	e0fff617 	ldw	r3,-40(fp)
   1e178:	00bfff84 	movi	r2,-2
   1e17c:	1884703a 	and	r2,r3,r2
   1e180:	1001703a 	wrctl	status,r2
  
  return context;
   1e184:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   1e188:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   1e18c:	008000f4 	movhi	r2,3
   1e190:	10b5bf04 	addi	r2,r2,-10500
   1e194:	e0fffd17 	ldw	r3,-12(fp)
   1e198:	180690fa 	slli	r3,r3,3
   1e19c:	10c5883a 	add	r2,r2,r3
   1e1a0:	e0ffff17 	ldw	r3,-4(fp)
   1e1a4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   1e1a8:	008000f4 	movhi	r2,3
   1e1ac:	10b5bf04 	addi	r2,r2,-10500
   1e1b0:	e0fffd17 	ldw	r3,-12(fp)
   1e1b4:	180690fa 	slli	r3,r3,3
   1e1b8:	10c5883a 	add	r2,r2,r3
   1e1bc:	10800104 	addi	r2,r2,4
   1e1c0:	e0fffe17 	ldw	r3,-8(fp)
   1e1c4:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   1e1c8:	e0bfff17 	ldw	r2,-4(fp)
   1e1cc:	10001926 	beq	r2,zero,1e234 <alt_irq_register+0xf4>
   1e1d0:	e0bffd17 	ldw	r2,-12(fp)
   1e1d4:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e1d8:	0005303a 	rdctl	r2,status
   1e1dc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e1e0:	e0fff717 	ldw	r3,-36(fp)
   1e1e4:	00bfff84 	movi	r2,-2
   1e1e8:	1884703a 	and	r2,r3,r2
   1e1ec:	1001703a 	wrctl	status,r2
  
  return context;
   1e1f0:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1e1f4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   1e1f8:	00c00044 	movi	r3,1
   1e1fc:	e0bff217 	ldw	r2,-56(fp)
   1e200:	1884983a 	sll	r2,r3,r2
   1e204:	1007883a 	mov	r3,r2
   1e208:	d0a85b17 	ldw	r2,-24212(gp)
   1e20c:	1884b03a 	or	r2,r3,r2
   1e210:	d0a85b15 	stw	r2,-24212(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1e214:	d0a85b17 	ldw	r2,-24212(gp)
   1e218:	100170fa 	wrctl	ienable,r2
   1e21c:	e0bff817 	ldw	r2,-32(fp)
   1e220:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e224:	e0bff917 	ldw	r2,-28(fp)
   1e228:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1e22c:	0005883a 	mov	r2,zero
   1e230:	00001906 	br	1e298 <alt_irq_register+0x158>
   1e234:	e0bffd17 	ldw	r2,-12(fp)
   1e238:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e23c:	0005303a 	rdctl	r2,status
   1e240:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e244:	e0fffa17 	ldw	r3,-24(fp)
   1e248:	00bfff84 	movi	r2,-2
   1e24c:	1884703a 	and	r2,r3,r2
   1e250:	1001703a 	wrctl	status,r2
  
  return context;
   1e254:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   1e258:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   1e25c:	00c00044 	movi	r3,1
   1e260:	e0bff417 	ldw	r2,-48(fp)
   1e264:	1884983a 	sll	r2,r3,r2
   1e268:	0084303a 	nor	r2,zero,r2
   1e26c:	1007883a 	mov	r3,r2
   1e270:	d0a85b17 	ldw	r2,-24212(gp)
   1e274:	1884703a 	and	r2,r3,r2
   1e278:	d0a85b15 	stw	r2,-24212(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   1e27c:	d0a85b17 	ldw	r2,-24212(gp)
   1e280:	100170fa 	wrctl	ienable,r2
   1e284:	e0bffb17 	ldw	r2,-20(fp)
   1e288:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e28c:	e0bffc17 	ldw	r2,-16(fp)
   1e290:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   1e294:	0005883a 	mov	r2,zero
   1e298:	e0bff115 	stw	r2,-60(fp)
   1e29c:	e0bff317 	ldw	r2,-52(fp)
   1e2a0:	e0bff515 	stw	r2,-44(fp)
   1e2a4:	e0bff517 	ldw	r2,-44(fp)
   1e2a8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   1e2ac:	e0bff117 	ldw	r2,-60(fp)
}
   1e2b0:	e037883a 	mov	sp,fp
   1e2b4:	df000017 	ldw	fp,0(sp)
   1e2b8:	dec00104 	addi	sp,sp,4
   1e2bc:	f800283a 	ret

0001e2c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1e2c0:	defffe04 	addi	sp,sp,-8
   1e2c4:	dfc00115 	stw	ra,4(sp)
   1e2c8:	df000015 	stw	fp,0(sp)
   1e2cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1e2d0:	d0a02117 	ldw	r2,-32636(gp)
   1e2d4:	10000326 	beq	r2,zero,1e2e4 <alt_get_errno+0x24>
   1e2d8:	d0a02117 	ldw	r2,-32636(gp)
   1e2dc:	103ee83a 	callr	r2
   1e2e0:	00000106 	br	1e2e8 <alt_get_errno+0x28>
   1e2e4:	d0a83b04 	addi	r2,gp,-24340
}
   1e2e8:	e037883a 	mov	sp,fp
   1e2ec:	dfc00117 	ldw	ra,4(sp)
   1e2f0:	df000017 	ldw	fp,0(sp)
   1e2f4:	dec00204 	addi	sp,sp,8
   1e2f8:	f800283a 	ret

0001e2fc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   1e2fc:	defffd04 	addi	sp,sp,-12
   1e300:	df000215 	stw	fp,8(sp)
   1e304:	df000204 	addi	fp,sp,8
   1e308:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   1e30c:	e0bfff17 	ldw	r2,-4(fp)
   1e310:	10800217 	ldw	r2,8(r2)
   1e314:	10d00034 	orhi	r3,r2,16384
   1e318:	e0bfff17 	ldw	r2,-4(fp)
   1e31c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1e320:	e03ffe15 	stw	zero,-8(fp)
   1e324:	00001d06 	br	1e39c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1e328:	008000b4 	movhi	r2,2
   1e32c:	10835104 	addi	r2,r2,3396
   1e330:	e0fffe17 	ldw	r3,-8(fp)
   1e334:	18c00324 	muli	r3,r3,12
   1e338:	10c5883a 	add	r2,r2,r3
   1e33c:	10c00017 	ldw	r3,0(r2)
   1e340:	e0bfff17 	ldw	r2,-4(fp)
   1e344:	10800017 	ldw	r2,0(r2)
   1e348:	1880111e 	bne	r3,r2,1e390 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1e34c:	008000b4 	movhi	r2,2
   1e350:	10835104 	addi	r2,r2,3396
   1e354:	e0fffe17 	ldw	r3,-8(fp)
   1e358:	18c00324 	muli	r3,r3,12
   1e35c:	10c5883a 	add	r2,r2,r3
   1e360:	10800204 	addi	r2,r2,8
   1e364:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   1e368:	1000090e 	bge	r2,zero,1e390 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   1e36c:	e0bffe17 	ldw	r2,-8(fp)
   1e370:	10c00324 	muli	r3,r2,12
   1e374:	008000b4 	movhi	r2,2
   1e378:	10835104 	addi	r2,r2,3396
   1e37c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   1e380:	e0bfff17 	ldw	r2,-4(fp)
   1e384:	18800226 	beq	r3,r2,1e390 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1e388:	00bffcc4 	movi	r2,-13
   1e38c:	00000806 	br	1e3b0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1e390:	e0bffe17 	ldw	r2,-8(fp)
   1e394:	10800044 	addi	r2,r2,1
   1e398:	e0bffe15 	stw	r2,-8(fp)
   1e39c:	d0a02017 	ldw	r2,-32640(gp)
   1e3a0:	1007883a 	mov	r3,r2
   1e3a4:	e0bffe17 	ldw	r2,-8(fp)
   1e3a8:	18bfdf2e 	bgeu	r3,r2,1e328 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701e328>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1e3ac:	0005883a 	mov	r2,zero
}
   1e3b0:	e037883a 	mov	sp,fp
   1e3b4:	df000017 	ldw	fp,0(sp)
   1e3b8:	dec00104 	addi	sp,sp,4
   1e3bc:	f800283a 	ret

0001e3c0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   1e3c0:	defff604 	addi	sp,sp,-40
   1e3c4:	dfc00915 	stw	ra,36(sp)
   1e3c8:	df000815 	stw	fp,32(sp)
   1e3cc:	df000804 	addi	fp,sp,32
   1e3d0:	e13ffd15 	stw	r4,-12(fp)
   1e3d4:	e17ffe15 	stw	r5,-8(fp)
   1e3d8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1e3dc:	00bfffc4 	movi	r2,-1
   1e3e0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   1e3e4:	00bffb44 	movi	r2,-19
   1e3e8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   1e3ec:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   1e3f0:	d1601e04 	addi	r5,gp,-32648
   1e3f4:	e13ffd17 	ldw	r4,-12(fp)
   1e3f8:	001df3c0 	call	1df3c <alt_find_dev>
   1e3fc:	e0bff815 	stw	r2,-32(fp)
   1e400:	e0bff817 	ldw	r2,-32(fp)
   1e404:	1000051e 	bne	r2,zero,1e41c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1e408:	e13ffd17 	ldw	r4,-12(fp)
   1e40c:	001ea340 	call	1ea34 <alt_find_file>
   1e410:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   1e414:	00800044 	movi	r2,1
   1e418:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   1e41c:	e0bff817 	ldw	r2,-32(fp)
   1e420:	10002926 	beq	r2,zero,1e4c8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   1e424:	e13ff817 	ldw	r4,-32(fp)
   1e428:	001eb3c0 	call	1eb3c <alt_get_fd>
   1e42c:	e0bff915 	stw	r2,-28(fp)
   1e430:	e0bff917 	ldw	r2,-28(fp)
   1e434:	1000030e 	bge	r2,zero,1e444 <open+0x84>
    {
      status = index;
   1e438:	e0bff917 	ldw	r2,-28(fp)
   1e43c:	e0bffa15 	stw	r2,-24(fp)
   1e440:	00002306 	br	1e4d0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   1e444:	e0bff917 	ldw	r2,-28(fp)
   1e448:	10c00324 	muli	r3,r2,12
   1e44c:	008000b4 	movhi	r2,2
   1e450:	10835104 	addi	r2,r2,3396
   1e454:	1885883a 	add	r2,r3,r2
   1e458:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   1e45c:	e0fffe17 	ldw	r3,-8(fp)
   1e460:	00900034 	movhi	r2,16384
   1e464:	10bfffc4 	addi	r2,r2,-1
   1e468:	1886703a 	and	r3,r3,r2
   1e46c:	e0bffc17 	ldw	r2,-16(fp)
   1e470:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1e474:	e0bffb17 	ldw	r2,-20(fp)
   1e478:	1000051e 	bne	r2,zero,1e490 <open+0xd0>
   1e47c:	e13ffc17 	ldw	r4,-16(fp)
   1e480:	001e2fc0 	call	1e2fc <alt_file_locked>
   1e484:	e0bffa15 	stw	r2,-24(fp)
   1e488:	e0bffa17 	ldw	r2,-24(fp)
   1e48c:	10001016 	blt	r2,zero,1e4d0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1e490:	e0bff817 	ldw	r2,-32(fp)
   1e494:	10800317 	ldw	r2,12(r2)
   1e498:	10000826 	beq	r2,zero,1e4bc <open+0xfc>
   1e49c:	e0bff817 	ldw	r2,-32(fp)
   1e4a0:	10800317 	ldw	r2,12(r2)
   1e4a4:	e1ffff17 	ldw	r7,-4(fp)
   1e4a8:	e1bffe17 	ldw	r6,-8(fp)
   1e4ac:	e17ffd17 	ldw	r5,-12(fp)
   1e4b0:	e13ffc17 	ldw	r4,-16(fp)
   1e4b4:	103ee83a 	callr	r2
   1e4b8:	00000106 	br	1e4c0 <open+0x100>
   1e4bc:	0005883a 	mov	r2,zero
   1e4c0:	e0bffa15 	stw	r2,-24(fp)
   1e4c4:	00000206 	br	1e4d0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   1e4c8:	00bffb44 	movi	r2,-19
   1e4cc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1e4d0:	e0bffa17 	ldw	r2,-24(fp)
   1e4d4:	1000090e 	bge	r2,zero,1e4fc <open+0x13c>
  {
    alt_release_fd (index);  
   1e4d8:	e13ff917 	ldw	r4,-28(fp)
   1e4dc:	00135c40 	call	135c4 <alt_release_fd>
    ALT_ERRNO = -status;
   1e4e0:	001e2c00 	call	1e2c0 <alt_get_errno>
   1e4e4:	1007883a 	mov	r3,r2
   1e4e8:	e0bffa17 	ldw	r2,-24(fp)
   1e4ec:	0085c83a 	sub	r2,zero,r2
   1e4f0:	18800015 	stw	r2,0(r3)
    return -1;
   1e4f4:	00bfffc4 	movi	r2,-1
   1e4f8:	00000106 	br	1e500 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   1e4fc:	e0bff917 	ldw	r2,-28(fp)
}
   1e500:	e037883a 	mov	sp,fp
   1e504:	dfc00117 	ldw	ra,4(sp)
   1e508:	df000017 	ldw	fp,0(sp)
   1e50c:	dec00204 	addi	sp,sp,8
   1e510:	f800283a 	ret

0001e514 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1e514:	defffa04 	addi	sp,sp,-24
   1e518:	df000515 	stw	fp,20(sp)
   1e51c:	df000504 	addi	fp,sp,20
   1e520:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e524:	0005303a 	rdctl	r2,status
   1e528:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e52c:	e0fffc17 	ldw	r3,-16(fp)
   1e530:	00bfff84 	movi	r2,-2
   1e534:	1884703a 	and	r2,r3,r2
   1e538:	1001703a 	wrctl	status,r2
  
  return context;
   1e53c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1e540:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   1e544:	e0bfff17 	ldw	r2,-4(fp)
   1e548:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   1e54c:	e0bffd17 	ldw	r2,-12(fp)
   1e550:	10800017 	ldw	r2,0(r2)
   1e554:	e0fffd17 	ldw	r3,-12(fp)
   1e558:	18c00117 	ldw	r3,4(r3)
   1e55c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   1e560:	e0bffd17 	ldw	r2,-12(fp)
   1e564:	10800117 	ldw	r2,4(r2)
   1e568:	e0fffd17 	ldw	r3,-12(fp)
   1e56c:	18c00017 	ldw	r3,0(r3)
   1e570:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   1e574:	e0bffd17 	ldw	r2,-12(fp)
   1e578:	e0fffd17 	ldw	r3,-12(fp)
   1e57c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   1e580:	e0bffd17 	ldw	r2,-12(fp)
   1e584:	e0fffd17 	ldw	r3,-12(fp)
   1e588:	10c00015 	stw	r3,0(r2)
   1e58c:	e0bffb17 	ldw	r2,-20(fp)
   1e590:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e594:	e0bffe17 	ldw	r2,-8(fp)
   1e598:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   1e59c:	0001883a 	nop
   1e5a0:	e037883a 	mov	sp,fp
   1e5a4:	df000017 	ldw	fp,0(sp)
   1e5a8:	dec00104 	addi	sp,sp,4
   1e5ac:	f800283a 	ret

0001e5b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1e5b0:	defffb04 	addi	sp,sp,-20
   1e5b4:	dfc00415 	stw	ra,16(sp)
   1e5b8:	df000315 	stw	fp,12(sp)
   1e5bc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1e5c0:	d0a04317 	ldw	r2,-32500(gp)
   1e5c4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1e5c8:	d0a85d17 	ldw	r2,-24204(gp)
   1e5cc:	10800044 	addi	r2,r2,1
   1e5d0:	d0a85d15 	stw	r2,-24204(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1e5d4:	00002e06 	br	1e690 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   1e5d8:	e0bffd17 	ldw	r2,-12(fp)
   1e5dc:	10800017 	ldw	r2,0(r2)
   1e5e0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   1e5e4:	e0bffd17 	ldw	r2,-12(fp)
   1e5e8:	10800403 	ldbu	r2,16(r2)
   1e5ec:	10803fcc 	andi	r2,r2,255
   1e5f0:	10000426 	beq	r2,zero,1e604 <alt_tick+0x54>
   1e5f4:	d0a85d17 	ldw	r2,-24204(gp)
   1e5f8:	1000021e 	bne	r2,zero,1e604 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   1e5fc:	e0bffd17 	ldw	r2,-12(fp)
   1e600:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   1e604:	e0bffd17 	ldw	r2,-12(fp)
   1e608:	10800217 	ldw	r2,8(r2)
   1e60c:	d0e85d17 	ldw	r3,-24204(gp)
   1e610:	18801d36 	bltu	r3,r2,1e688 <alt_tick+0xd8>
   1e614:	e0bffd17 	ldw	r2,-12(fp)
   1e618:	10800403 	ldbu	r2,16(r2)
   1e61c:	10803fcc 	andi	r2,r2,255
   1e620:	1000191e 	bne	r2,zero,1e688 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   1e624:	e0bffd17 	ldw	r2,-12(fp)
   1e628:	10800317 	ldw	r2,12(r2)
   1e62c:	e0fffd17 	ldw	r3,-12(fp)
   1e630:	18c00517 	ldw	r3,20(r3)
   1e634:	1809883a 	mov	r4,r3
   1e638:	103ee83a 	callr	r2
   1e63c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1e640:	e0bfff17 	ldw	r2,-4(fp)
   1e644:	1000031e 	bne	r2,zero,1e654 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   1e648:	e13ffd17 	ldw	r4,-12(fp)
   1e64c:	001e5140 	call	1e514 <alt_alarm_stop>
   1e650:	00000d06 	br	1e688 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   1e654:	e0bffd17 	ldw	r2,-12(fp)
   1e658:	10c00217 	ldw	r3,8(r2)
   1e65c:	e0bfff17 	ldw	r2,-4(fp)
   1e660:	1887883a 	add	r3,r3,r2
   1e664:	e0bffd17 	ldw	r2,-12(fp)
   1e668:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   1e66c:	e0bffd17 	ldw	r2,-12(fp)
   1e670:	10c00217 	ldw	r3,8(r2)
   1e674:	d0a85d17 	ldw	r2,-24204(gp)
   1e678:	1880032e 	bgeu	r3,r2,1e688 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   1e67c:	e0bffd17 	ldw	r2,-12(fp)
   1e680:	00c00044 	movi	r3,1
   1e684:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   1e688:	e0bffe17 	ldw	r2,-8(fp)
   1e68c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   1e690:	e0fffd17 	ldw	r3,-12(fp)
   1e694:	d0a04304 	addi	r2,gp,-32500
   1e698:	18bfcf1e 	bne	r3,r2,1e5d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701e5d8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   1e69c:	00147b00 	call	147b0 <OSTimeTick>
}
   1e6a0:	0001883a 	nop
   1e6a4:	e037883a 	mov	sp,fp
   1e6a8:	dfc00117 	ldw	ra,4(sp)
   1e6ac:	df000017 	ldw	fp,0(sp)
   1e6b0:	dec00204 	addi	sp,sp,8
   1e6b4:	f800283a 	ret

0001e6b8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   1e6b8:	deffff04 	addi	sp,sp,-4
   1e6bc:	df000015 	stw	fp,0(sp)
   1e6c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1e6c4:	000170fa 	wrctl	ienable,zero
}
   1e6c8:	0001883a 	nop
   1e6cc:	e037883a 	mov	sp,fp
   1e6d0:	df000017 	ldw	fp,0(sp)
   1e6d4:	dec00104 	addi	sp,sp,4
   1e6d8:	f800283a 	ret

0001e6dc <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   1e6dc:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   1e6e0:	d0e01917 	ldw	r3,-32668(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   1e6e4:	d1285617 	ldw	r4,-24232(gp)

      stw ra,  0(sp)
   1e6e8:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   1e6ec:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   1e6f0:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   1e6f4:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   1e6f8:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   1e6fc:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   1e700:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   1e704:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   1e708:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   1e70c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   1e710:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   1e714:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1e718:	001e9500 	call	1e950 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   1e71c:	d1285117 	ldw	r4,-24252(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   1e720:	d1684907 	ldb	r5,-24284(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   1e724:	d1285615 	stw	r4,-24232(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   1e728:	d1684945 	stb	r5,-24283(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   1e72c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   1e730:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   1e734:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   1e738:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   1e73c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   1e740:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   1e744:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   1e748:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   1e74c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   1e750:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   1e754:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   1e758:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   1e75c:	d0e01915 	stw	r3,-32668(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   1e760:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   1e764:	f800283a 	ret

0001e768 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   1e768:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   1e76c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   1e770:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   1e774:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   1e778:	001e9500 	call	1e950 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   1e77c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   1e780:	d4a84745 	stb	r18,-24291(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   1e784:	003fe506 	br	1e71c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701e71c>

0001e788 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   1e788:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   1e78c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   1e790:	10800054 	ori	r2,r2,1
      wrctl status, r2
   1e794:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   1e798:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   1e79c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   1e7a0:	dec00204 	addi	sp,sp,8

      callr r2
   1e7a4:	103ee83a 	callr	r2

      nop
   1e7a8:	0001883a 	nop

0001e7ac <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   1e7ac:	defff704 	addi	sp,sp,-36
   1e7b0:	dfc00815 	stw	ra,32(sp)
   1e7b4:	df000715 	stw	fp,28(sp)
   1e7b8:	df000704 	addi	fp,sp,28
   1e7bc:	e13ffc15 	stw	r4,-16(fp)
   1e7c0:	e17ffd15 	stw	r5,-12(fp)
   1e7c4:	e1bffe15 	stw	r6,-8(fp)
   1e7c8:	3805883a 	mov	r2,r7
   1e7cc:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   1e7d0:	e0fffe17 	ldw	r3,-8(fp)
   1e7d4:	00bfff04 	movi	r2,-4
   1e7d8:	1884703a 	and	r2,r3,r2
   1e7dc:	10bef704 	addi	r2,r2,-1060
   1e7e0:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   1e7e4:	01810904 	movi	r6,1060
   1e7e8:	000b883a 	mov	r5,zero
   1e7ec:	e13ff917 	ldw	r4,-28(fp)
   1e7f0:	00074ac0 	call	74ac <memset>
   1e7f4:	e0bff917 	ldw	r2,-28(fp)
   1e7f8:	10c0bb04 	addi	r3,r2,748
   1e7fc:	e0bff917 	ldw	r2,-28(fp)
   1e800:	10c00115 	stw	r3,4(r2)
   1e804:	e0bff917 	ldw	r2,-28(fp)
   1e808:	10c0d504 	addi	r3,r2,852
   1e80c:	e0bff917 	ldw	r2,-28(fp)
   1e810:	10c00215 	stw	r3,8(r2)
   1e814:	e0bff917 	ldw	r2,-28(fp)
   1e818:	10c0ef04 	addi	r3,r2,956
   1e81c:	e0bff917 	ldw	r2,-28(fp)
   1e820:	10c00315 	stw	r3,12(r2)
   1e824:	e0fff917 	ldw	r3,-28(fp)
   1e828:	008000b4 	movhi	r2,2
   1e82c:	10811d04 	addi	r2,r2,1140
   1e830:	18800d15 	stw	r2,52(r3)
   1e834:	e0bff917 	ldw	r2,-28(fp)
   1e838:	00c00044 	movi	r3,1
   1e83c:	10c02915 	stw	r3,164(r2)
   1e840:	10002a15 	stw	zero,168(r2)
   1e844:	e0bff917 	ldw	r2,-28(fp)
   1e848:	00ccc384 	movi	r3,13070
   1e84c:	10c02b0d 	sth	r3,172(r2)
   1e850:	e0bff917 	ldw	r2,-28(fp)
   1e854:	00eaf344 	movi	r3,-21555
   1e858:	10c02b8d 	sth	r3,174(r2)
   1e85c:	e0bff917 	ldw	r2,-28(fp)
   1e860:	00c48d04 	movi	r3,4660
   1e864:	10c02c0d 	sth	r3,176(r2)
   1e868:	e0bff917 	ldw	r2,-28(fp)
   1e86c:	00f99b44 	movi	r3,-6547
   1e870:	10c02c8d 	sth	r3,178(r2)
   1e874:	e0bff917 	ldw	r2,-28(fp)
   1e878:	00f7bb04 	movi	r3,-8468
   1e87c:	10c02d0d 	sth	r3,180(r2)
   1e880:	e0bff917 	ldw	r2,-28(fp)
   1e884:	00c00144 	movi	r3,5
   1e888:	10c02d8d 	sth	r3,182(r2)
   1e88c:	e0bff917 	ldw	r2,-28(fp)
   1e890:	00c002c4 	movi	r3,11
   1e894:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   1e898:	e0bff917 	ldw	r2,-28(fp)
   1e89c:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   1e8a0:	e0bffa17 	ldw	r2,-24(fp)
   1e8a4:	10bff304 	addi	r2,r2,-52
   1e8a8:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   1e8ac:	e0bffb17 	ldw	r2,-20(fp)
   1e8b0:	10800c04 	addi	r2,r2,48
   1e8b4:	e0fffc17 	ldw	r3,-16(fp)
   1e8b8:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   1e8bc:	e0bffb17 	ldw	r2,-20(fp)
   1e8c0:	10800b04 	addi	r2,r2,44
   1e8c4:	e0fffd17 	ldw	r3,-12(fp)
   1e8c8:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   1e8cc:	e0bffb17 	ldw	r2,-20(fp)
   1e8d0:	10800a04 	addi	r2,r2,40
   1e8d4:	e0fff917 	ldw	r3,-28(fp)
   1e8d8:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   1e8dc:	008000b4 	movhi	r2,2
   1e8e0:	10b9e204 	addi	r2,r2,-6264
   1e8e4:	10c00104 	addi	r3,r2,4
   1e8e8:	e0bffb17 	ldw	r2,-20(fp)
   1e8ec:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   1e8f0:	e0bffb17 	ldw	r2,-20(fp)
}
   1e8f4:	e037883a 	mov	sp,fp
   1e8f8:	dfc00117 	ldw	ra,4(sp)
   1e8fc:	df000017 	ldw	fp,0(sp)
   1e900:	dec00204 	addi	sp,sp,8
   1e904:	f800283a 	ret

0001e908 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   1e908:	defffe04 	addi	sp,sp,-8
   1e90c:	df000115 	stw	fp,4(sp)
   1e910:	df000104 	addi	fp,sp,4
   1e914:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   1e918:	0001883a 	nop
   1e91c:	e037883a 	mov	sp,fp
   1e920:	df000017 	ldw	fp,0(sp)
   1e924:	dec00104 	addi	sp,sp,4
   1e928:	f800283a 	ret

0001e92c <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   1e92c:	defffe04 	addi	sp,sp,-8
   1e930:	df000115 	stw	fp,4(sp)
   1e934:	df000104 	addi	fp,sp,4
   1e938:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   1e93c:	0001883a 	nop
   1e940:	e037883a 	mov	sp,fp
   1e944:	df000017 	ldw	fp,0(sp)
   1e948:	dec00104 	addi	sp,sp,4
   1e94c:	f800283a 	ret

0001e950 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   1e950:	deffff04 	addi	sp,sp,-4
   1e954:	df000015 	stw	fp,0(sp)
   1e958:	d839883a 	mov	fp,sp
}
   1e95c:	0001883a 	nop
   1e960:	e037883a 	mov	sp,fp
   1e964:	df000017 	ldw	fp,0(sp)
   1e968:	dec00104 	addi	sp,sp,4
   1e96c:	f800283a 	ret

0001e970 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   1e970:	deffff04 	addi	sp,sp,-4
   1e974:	df000015 	stw	fp,0(sp)
   1e978:	d839883a 	mov	fp,sp
}
   1e97c:	0001883a 	nop
   1e980:	e037883a 	mov	sp,fp
   1e984:	df000017 	ldw	fp,0(sp)
   1e988:	dec00104 	addi	sp,sp,4
   1e98c:	f800283a 	ret

0001e990 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   1e990:	deffff04 	addi	sp,sp,-4
   1e994:	df000015 	stw	fp,0(sp)
   1e998:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   1e99c:	0001883a 	nop
   1e9a0:	e037883a 	mov	sp,fp
   1e9a4:	df000017 	ldw	fp,0(sp)
   1e9a8:	dec00104 	addi	sp,sp,4
   1e9ac:	f800283a 	ret

0001e9b0 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   1e9b0:	deffff04 	addi	sp,sp,-4
   1e9b4:	df000015 	stw	fp,0(sp)
   1e9b8:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   1e9bc:	0001883a 	nop
   1e9c0:	e037883a 	mov	sp,fp
   1e9c4:	df000017 	ldw	fp,0(sp)
   1e9c8:	dec00104 	addi	sp,sp,4
   1e9cc:	f800283a 	ret

0001e9d0 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   1e9d0:	deffff04 	addi	sp,sp,-4
   1e9d4:	df000015 	stw	fp,0(sp)
   1e9d8:	d839883a 	mov	fp,sp
}
   1e9dc:	0001883a 	nop
   1e9e0:	e037883a 	mov	sp,fp
   1e9e4:	df000017 	ldw	fp,0(sp)
   1e9e8:	dec00104 	addi	sp,sp,4
   1e9ec:	f800283a 	ret

0001e9f0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   1e9f0:	deffff04 	addi	sp,sp,-4
   1e9f4:	df000015 	stw	fp,0(sp)
   1e9f8:	d839883a 	mov	fp,sp
}
   1e9fc:	0001883a 	nop
   1ea00:	e037883a 	mov	sp,fp
   1ea04:	df000017 	ldw	fp,0(sp)
   1ea08:	dec00104 	addi	sp,sp,4
   1ea0c:	f800283a 	ret

0001ea10 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   1ea10:	defffe04 	addi	sp,sp,-8
   1ea14:	df000115 	stw	fp,4(sp)
   1ea18:	df000104 	addi	fp,sp,4
   1ea1c:	e13fff15 	stw	r4,-4(fp)
}
   1ea20:	0001883a 	nop
   1ea24:	e037883a 	mov	sp,fp
   1ea28:	df000017 	ldw	fp,0(sp)
   1ea2c:	dec00104 	addi	sp,sp,4
   1ea30:	f800283a 	ret

0001ea34 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   1ea34:	defffb04 	addi	sp,sp,-20
   1ea38:	dfc00415 	stw	ra,16(sp)
   1ea3c:	df000315 	stw	fp,12(sp)
   1ea40:	df000304 	addi	fp,sp,12
   1ea44:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   1ea48:	d0a01c17 	ldw	r2,-32656(gp)
   1ea4c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1ea50:	00003106 	br	1eb18 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   1ea54:	e0bffd17 	ldw	r2,-12(fp)
   1ea58:	10800217 	ldw	r2,8(r2)
   1ea5c:	1009883a 	mov	r4,r2
   1ea60:	0007b480 	call	7b48 <strlen>
   1ea64:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   1ea68:	e0bffd17 	ldw	r2,-12(fp)
   1ea6c:	10c00217 	ldw	r3,8(r2)
   1ea70:	e0bffe17 	ldw	r2,-8(fp)
   1ea74:	10bfffc4 	addi	r2,r2,-1
   1ea78:	1885883a 	add	r2,r3,r2
   1ea7c:	10800003 	ldbu	r2,0(r2)
   1ea80:	10803fcc 	andi	r2,r2,255
   1ea84:	1080201c 	xori	r2,r2,128
   1ea88:	10bfe004 	addi	r2,r2,-128
   1ea8c:	10800bd8 	cmpnei	r2,r2,47
   1ea90:	1000031e 	bne	r2,zero,1eaa0 <alt_find_file+0x6c>
    {
      len -= 1;
   1ea94:	e0bffe17 	ldw	r2,-8(fp)
   1ea98:	10bfffc4 	addi	r2,r2,-1
   1ea9c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1eaa0:	e0bffe17 	ldw	r2,-8(fp)
   1eaa4:	e0ffff17 	ldw	r3,-4(fp)
   1eaa8:	1885883a 	add	r2,r3,r2
   1eaac:	10800003 	ldbu	r2,0(r2)
   1eab0:	10803fcc 	andi	r2,r2,255
   1eab4:	1080201c 	xori	r2,r2,128
   1eab8:	10bfe004 	addi	r2,r2,-128
   1eabc:	10800be0 	cmpeqi	r2,r2,47
   1eac0:	1000081e 	bne	r2,zero,1eae4 <alt_find_file+0xb0>
   1eac4:	e0bffe17 	ldw	r2,-8(fp)
   1eac8:	e0ffff17 	ldw	r3,-4(fp)
   1eacc:	1885883a 	add	r2,r3,r2
   1ead0:	10800003 	ldbu	r2,0(r2)
   1ead4:	10803fcc 	andi	r2,r2,255
   1ead8:	1080201c 	xori	r2,r2,128
   1eadc:	10bfe004 	addi	r2,r2,-128
   1eae0:	10000a1e 	bne	r2,zero,1eb0c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   1eae4:	e0bffd17 	ldw	r2,-12(fp)
   1eae8:	10800217 	ldw	r2,8(r2)
   1eaec:	e0fffe17 	ldw	r3,-8(fp)
   1eaf0:	180d883a 	mov	r6,r3
   1eaf4:	e17fff17 	ldw	r5,-4(fp)
   1eaf8:	1009883a 	mov	r4,r2
   1eafc:	001ed900 	call	1ed90 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   1eb00:	1000021e 	bne	r2,zero,1eb0c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   1eb04:	e0bffd17 	ldw	r2,-12(fp)
   1eb08:	00000706 	br	1eb28 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   1eb0c:	e0bffd17 	ldw	r2,-12(fp)
   1eb10:	10800017 	ldw	r2,0(r2)
   1eb14:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   1eb18:	e0fffd17 	ldw	r3,-12(fp)
   1eb1c:	d0a01c04 	addi	r2,gp,-32656
   1eb20:	18bfcc1e 	bne	r3,r2,1ea54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701ea54>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   1eb24:	0005883a 	mov	r2,zero
}
   1eb28:	e037883a 	mov	sp,fp
   1eb2c:	dfc00117 	ldw	ra,4(sp)
   1eb30:	df000017 	ldw	fp,0(sp)
   1eb34:	dec00204 	addi	sp,sp,8
   1eb38:	f800283a 	ret

0001eb3c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   1eb3c:	defff904 	addi	sp,sp,-28
   1eb40:	dfc00615 	stw	ra,24(sp)
   1eb44:	df000515 	stw	fp,20(sp)
   1eb48:	df000504 	addi	fp,sp,20
   1eb4c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   1eb50:	00bffa04 	movi	r2,-24
   1eb54:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   1eb58:	d0a83f17 	ldw	r2,-24324(gp)
   1eb5c:	e0bffd15 	stw	r2,-12(fp)
   1eb60:	e03ffe0d 	sth	zero,-8(fp)
   1eb64:	e0bffe0b 	ldhu	r2,-8(fp)
   1eb68:	e0fffe84 	addi	r3,fp,-6
   1eb6c:	180d883a 	mov	r6,r3
   1eb70:	100b883a 	mov	r5,r2
   1eb74:	e13ffd17 	ldw	r4,-12(fp)
   1eb78:	00190040 	call	19004 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1eb7c:	e03ffb15 	stw	zero,-20(fp)
   1eb80:	00001906 	br	1ebe8 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   1eb84:	008000b4 	movhi	r2,2
   1eb88:	10835104 	addi	r2,r2,3396
   1eb8c:	e0fffb17 	ldw	r3,-20(fp)
   1eb90:	18c00324 	muli	r3,r3,12
   1eb94:	10c5883a 	add	r2,r2,r3
   1eb98:	10800017 	ldw	r2,0(r2)
   1eb9c:	10000f1e 	bne	r2,zero,1ebdc <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   1eba0:	008000b4 	movhi	r2,2
   1eba4:	10835104 	addi	r2,r2,3396
   1eba8:	e0fffb17 	ldw	r3,-20(fp)
   1ebac:	18c00324 	muli	r3,r3,12
   1ebb0:	10c5883a 	add	r2,r2,r3
   1ebb4:	e0ffff17 	ldw	r3,-4(fp)
   1ebb8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   1ebbc:	d0e02017 	ldw	r3,-32640(gp)
   1ebc0:	e0bffb17 	ldw	r2,-20(fp)
   1ebc4:	1880020e 	bge	r3,r2,1ebd0 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   1ebc8:	e0bffb17 	ldw	r2,-20(fp)
   1ebcc:	d0a02015 	stw	r2,-32640(gp)
      }
      rc = i;
   1ebd0:	e0bffb17 	ldw	r2,-20(fp)
   1ebd4:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   1ebd8:	00000606 	br	1ebf4 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1ebdc:	e0bffb17 	ldw	r2,-20(fp)
   1ebe0:	10800044 	addi	r2,r2,1
   1ebe4:	e0bffb15 	stw	r2,-20(fp)
   1ebe8:	e0bffb17 	ldw	r2,-20(fp)
   1ebec:	10800810 	cmplti	r2,r2,32
   1ebf0:	103fe41e 	bne	r2,zero,1eb84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701eb84>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   1ebf4:	d0a83f17 	ldw	r2,-24324(gp)
   1ebf8:	1009883a 	mov	r4,r2
   1ebfc:	001937c0 	call	1937c <OSSemPost>

  return rc;
   1ec00:	e0bffc17 	ldw	r2,-16(fp)
}
   1ec04:	e037883a 	mov	sp,fp
   1ec08:	dfc00117 	ldw	ra,4(sp)
   1ec0c:	df000017 	ldw	fp,0(sp)
   1ec10:	dec00204 	addi	sp,sp,8
   1ec14:	f800283a 	ret

0001ec18 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1ec18:	defffb04 	addi	sp,sp,-20
   1ec1c:	df000415 	stw	fp,16(sp)
   1ec20:	df000404 	addi	fp,sp,16
   1ec24:	e13ffe15 	stw	r4,-8(fp)
   1ec28:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   1ec2c:	e0bfff17 	ldw	r2,-4(fp)
   1ec30:	10840070 	cmpltui	r2,r2,4097
   1ec34:	1000021e 	bne	r2,zero,1ec40 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1ec38:	00840004 	movi	r2,4096
   1ec3c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   1ec40:	e0fffe17 	ldw	r3,-8(fp)
   1ec44:	e0bfff17 	ldw	r2,-4(fp)
   1ec48:	1885883a 	add	r2,r3,r2
   1ec4c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1ec50:	e0bffe17 	ldw	r2,-8(fp)
   1ec54:	e0bffc15 	stw	r2,-16(fp)
   1ec58:	00000506 	br	1ec70 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   1ec5c:	e0bffc17 	ldw	r2,-16(fp)
   1ec60:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   1ec64:	e0bffc17 	ldw	r2,-16(fp)
   1ec68:	10800804 	addi	r2,r2,32
   1ec6c:	e0bffc15 	stw	r2,-16(fp)
   1ec70:	e0fffc17 	ldw	r3,-16(fp)
   1ec74:	e0bffd17 	ldw	r2,-12(fp)
   1ec78:	18bff836 	bltu	r3,r2,1ec5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701ec5c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   1ec7c:	e0bffe17 	ldw	r2,-8(fp)
   1ec80:	108007cc 	andi	r2,r2,31
   1ec84:	10000226 	beq	r2,zero,1ec90 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   1ec88:	e0bffc17 	ldw	r2,-16(fp)
   1ec8c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   1ec90:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   1ec94:	0001883a 	nop
   1ec98:	e037883a 	mov	sp,fp
   1ec9c:	df000017 	ldw	fp,0(sp)
   1eca0:	dec00104 	addi	sp,sp,4
   1eca4:	f800283a 	ret

0001eca8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   1eca8:	defffe04 	addi	sp,sp,-8
   1ecac:	df000115 	stw	fp,4(sp)
   1ecb0:	df000104 	addi	fp,sp,4
   1ecb4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   1ecb8:	e0bfff17 	ldw	r2,-4(fp)
   1ecbc:	10bffe84 	addi	r2,r2,-6
   1ecc0:	10c00428 	cmpgeui	r3,r2,16
   1ecc4:	18001a1e 	bne	r3,zero,1ed30 <alt_exception_cause_generated_bad_addr+0x88>
   1ecc8:	100690ba 	slli	r3,r2,2
   1eccc:	008000b4 	movhi	r2,2
   1ecd0:	10bb3804 	addi	r2,r2,-4896
   1ecd4:	1885883a 	add	r2,r3,r2
   1ecd8:	10800017 	ldw	r2,0(r2)
   1ecdc:	1000683a 	jmp	r2
   1ece0:	0001ed20 	cmpeqi	zero,zero,1972
   1ece4:	0001ed20 	cmpeqi	zero,zero,1972
   1ece8:	0001ed30 	cmpltui	zero,zero,1972
   1ecec:	0001ed30 	cmpltui	zero,zero,1972
   1ecf0:	0001ed30 	cmpltui	zero,zero,1972
   1ecf4:	0001ed20 	cmpeqi	zero,zero,1972
   1ecf8:	0001ed28 	cmpgeui	zero,zero,1972
   1ecfc:	0001ed30 	cmpltui	zero,zero,1972
   1ed00:	0001ed20 	cmpeqi	zero,zero,1972
   1ed04:	0001ed20 	cmpeqi	zero,zero,1972
   1ed08:	0001ed30 	cmpltui	zero,zero,1972
   1ed0c:	0001ed20 	cmpeqi	zero,zero,1972
   1ed10:	0001ed28 	cmpgeui	zero,zero,1972
   1ed14:	0001ed30 	cmpltui	zero,zero,1972
   1ed18:	0001ed30 	cmpltui	zero,zero,1972
   1ed1c:	0001ed20 	cmpeqi	zero,zero,1972
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1ed20:	00800044 	movi	r2,1
   1ed24:	00000306 	br	1ed34 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   1ed28:	0005883a 	mov	r2,zero
   1ed2c:	00000106 	br	1ed34 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1ed30:	0005883a 	mov	r2,zero
  }
}
   1ed34:	e037883a 	mov	sp,fp
   1ed38:	df000017 	ldw	fp,0(sp)
   1ed3c:	dec00104 	addi	sp,sp,4
   1ed40:	f800283a 	ret

0001ed44 <atexit>:
   1ed44:	200b883a 	mov	r5,r4
   1ed48:	000f883a 	mov	r7,zero
   1ed4c:	000d883a 	mov	r6,zero
   1ed50:	0009883a 	mov	r4,zero
   1ed54:	001ee0c1 	jmpi	1ee0c <__register_exitproc>

0001ed58 <exit>:
   1ed58:	defffe04 	addi	sp,sp,-8
   1ed5c:	000b883a 	mov	r5,zero
   1ed60:	dc000015 	stw	r16,0(sp)
   1ed64:	dfc00115 	stw	ra,4(sp)
   1ed68:	2021883a 	mov	r16,r4
   1ed6c:	001ef240 	call	1ef24 <__call_exitprocs>
   1ed70:	008000b4 	movhi	r2,2
   1ed74:	1088e104 	addi	r2,r2,9092
   1ed78:	11000017 	ldw	r4,0(r2)
   1ed7c:	20800f17 	ldw	r2,60(r4)
   1ed80:	10000126 	beq	r2,zero,1ed88 <exit+0x30>
   1ed84:	103ee83a 	callr	r2
   1ed88:	8009883a 	mov	r4,r16
   1ed8c:	0012e480 	call	12e48 <_exit>

0001ed90 <memcmp>:
   1ed90:	01c000c4 	movi	r7,3
   1ed94:	3980192e 	bgeu	r7,r6,1edfc <memcmp+0x6c>
   1ed98:	2144b03a 	or	r2,r4,r5
   1ed9c:	11c4703a 	and	r2,r2,r7
   1eda0:	10000f26 	beq	r2,zero,1ede0 <memcmp+0x50>
   1eda4:	20800003 	ldbu	r2,0(r4)
   1eda8:	28c00003 	ldbu	r3,0(r5)
   1edac:	10c0151e 	bne	r2,r3,1ee04 <memcmp+0x74>
   1edb0:	31bfff84 	addi	r6,r6,-2
   1edb4:	01ffffc4 	movi	r7,-1
   1edb8:	00000406 	br	1edcc <memcmp+0x3c>
   1edbc:	20800003 	ldbu	r2,0(r4)
   1edc0:	28c00003 	ldbu	r3,0(r5)
   1edc4:	31bfffc4 	addi	r6,r6,-1
   1edc8:	10c00e1e 	bne	r2,r3,1ee04 <memcmp+0x74>
   1edcc:	21000044 	addi	r4,r4,1
   1edd0:	29400044 	addi	r5,r5,1
   1edd4:	31fff91e 	bne	r6,r7,1edbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701edbc>
   1edd8:	0005883a 	mov	r2,zero
   1eddc:	f800283a 	ret
   1ede0:	20c00017 	ldw	r3,0(r4)
   1ede4:	28800017 	ldw	r2,0(r5)
   1ede8:	18bfee1e 	bne	r3,r2,1eda4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701eda4>
   1edec:	31bfff04 	addi	r6,r6,-4
   1edf0:	21000104 	addi	r4,r4,4
   1edf4:	29400104 	addi	r5,r5,4
   1edf8:	39bff936 	bltu	r7,r6,1ede0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701ede0>
   1edfc:	303fe91e 	bne	r6,zero,1eda4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701eda4>
   1ee00:	003ff506 	br	1edd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701edd8>
   1ee04:	10c5c83a 	sub	r2,r2,r3
   1ee08:	f800283a 	ret

0001ee0c <__register_exitproc>:
   1ee0c:	defffa04 	addi	sp,sp,-24
   1ee10:	dc000315 	stw	r16,12(sp)
   1ee14:	040000b4 	movhi	r16,2
   1ee18:	8408e104 	addi	r16,r16,9092
   1ee1c:	80c00017 	ldw	r3,0(r16)
   1ee20:	dc400415 	stw	r17,16(sp)
   1ee24:	dfc00515 	stw	ra,20(sp)
   1ee28:	18805217 	ldw	r2,328(r3)
   1ee2c:	2023883a 	mov	r17,r4
   1ee30:	10003726 	beq	r2,zero,1ef10 <__register_exitproc+0x104>
   1ee34:	10c00117 	ldw	r3,4(r2)
   1ee38:	010007c4 	movi	r4,31
   1ee3c:	20c00e16 	blt	r4,r3,1ee78 <__register_exitproc+0x6c>
   1ee40:	1a000044 	addi	r8,r3,1
   1ee44:	8800221e 	bne	r17,zero,1eed0 <__register_exitproc+0xc4>
   1ee48:	18c00084 	addi	r3,r3,2
   1ee4c:	18c7883a 	add	r3,r3,r3
   1ee50:	18c7883a 	add	r3,r3,r3
   1ee54:	12000115 	stw	r8,4(r2)
   1ee58:	10c7883a 	add	r3,r2,r3
   1ee5c:	19400015 	stw	r5,0(r3)
   1ee60:	0005883a 	mov	r2,zero
   1ee64:	dfc00517 	ldw	ra,20(sp)
   1ee68:	dc400417 	ldw	r17,16(sp)
   1ee6c:	dc000317 	ldw	r16,12(sp)
   1ee70:	dec00604 	addi	sp,sp,24
   1ee74:	f800283a 	ret
   1ee78:	00800034 	movhi	r2,0
   1ee7c:	109acc04 	addi	r2,r2,27440
   1ee80:	10002626 	beq	r2,zero,1ef1c <__register_exitproc+0x110>
   1ee84:	01006404 	movi	r4,400
   1ee88:	d9400015 	stw	r5,0(sp)
   1ee8c:	d9800115 	stw	r6,4(sp)
   1ee90:	d9c00215 	stw	r7,8(sp)
   1ee94:	0006b300 	call	6b30 <malloc>
   1ee98:	d9400017 	ldw	r5,0(sp)
   1ee9c:	d9800117 	ldw	r6,4(sp)
   1eea0:	d9c00217 	ldw	r7,8(sp)
   1eea4:	10001d26 	beq	r2,zero,1ef1c <__register_exitproc+0x110>
   1eea8:	81000017 	ldw	r4,0(r16)
   1eeac:	10000115 	stw	zero,4(r2)
   1eeb0:	02000044 	movi	r8,1
   1eeb4:	22405217 	ldw	r9,328(r4)
   1eeb8:	0007883a 	mov	r3,zero
   1eebc:	12400015 	stw	r9,0(r2)
   1eec0:	20805215 	stw	r2,328(r4)
   1eec4:	10006215 	stw	zero,392(r2)
   1eec8:	10006315 	stw	zero,396(r2)
   1eecc:	883fde26 	beq	r17,zero,1ee48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701ee48>
   1eed0:	18c9883a 	add	r4,r3,r3
   1eed4:	2109883a 	add	r4,r4,r4
   1eed8:	1109883a 	add	r4,r2,r4
   1eedc:	21802215 	stw	r6,136(r4)
   1eee0:	01800044 	movi	r6,1
   1eee4:	12406217 	ldw	r9,392(r2)
   1eee8:	30cc983a 	sll	r6,r6,r3
   1eeec:	4992b03a 	or	r9,r9,r6
   1eef0:	12406215 	stw	r9,392(r2)
   1eef4:	21c04215 	stw	r7,264(r4)
   1eef8:	01000084 	movi	r4,2
   1eefc:	893fd21e 	bne	r17,r4,1ee48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701ee48>
   1ef00:	11006317 	ldw	r4,396(r2)
   1ef04:	218cb03a 	or	r6,r4,r6
   1ef08:	11806315 	stw	r6,396(r2)
   1ef0c:	003fce06 	br	1ee48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701ee48>
   1ef10:	18805304 	addi	r2,r3,332
   1ef14:	18805215 	stw	r2,328(r3)
   1ef18:	003fc606 	br	1ee34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701ee34>
   1ef1c:	00bfffc4 	movi	r2,-1
   1ef20:	003fd006 	br	1ee64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701ee64>

0001ef24 <__call_exitprocs>:
   1ef24:	defff504 	addi	sp,sp,-44
   1ef28:	df000915 	stw	fp,36(sp)
   1ef2c:	dd400615 	stw	r21,24(sp)
   1ef30:	dc800315 	stw	r18,12(sp)
   1ef34:	dfc00a15 	stw	ra,40(sp)
   1ef38:	ddc00815 	stw	r23,32(sp)
   1ef3c:	dd800715 	stw	r22,28(sp)
   1ef40:	dd000515 	stw	r20,20(sp)
   1ef44:	dcc00415 	stw	r19,16(sp)
   1ef48:	dc400215 	stw	r17,8(sp)
   1ef4c:	dc000115 	stw	r16,4(sp)
   1ef50:	d9000015 	stw	r4,0(sp)
   1ef54:	2839883a 	mov	fp,r5
   1ef58:	04800044 	movi	r18,1
   1ef5c:	057fffc4 	movi	r21,-1
   1ef60:	008000b4 	movhi	r2,2
   1ef64:	1088e104 	addi	r2,r2,9092
   1ef68:	12000017 	ldw	r8,0(r2)
   1ef6c:	45005217 	ldw	r20,328(r8)
   1ef70:	44c05204 	addi	r19,r8,328
   1ef74:	a0001c26 	beq	r20,zero,1efe8 <__call_exitprocs+0xc4>
   1ef78:	a0800117 	ldw	r2,4(r20)
   1ef7c:	15ffffc4 	addi	r23,r2,-1
   1ef80:	b8000d16 	blt	r23,zero,1efb8 <__call_exitprocs+0x94>
   1ef84:	14000044 	addi	r16,r2,1
   1ef88:	8421883a 	add	r16,r16,r16
   1ef8c:	8421883a 	add	r16,r16,r16
   1ef90:	84402004 	addi	r17,r16,128
   1ef94:	a463883a 	add	r17,r20,r17
   1ef98:	a421883a 	add	r16,r20,r16
   1ef9c:	e0001e26 	beq	fp,zero,1f018 <__call_exitprocs+0xf4>
   1efa0:	80804017 	ldw	r2,256(r16)
   1efa4:	e0801c26 	beq	fp,r2,1f018 <__call_exitprocs+0xf4>
   1efa8:	bdffffc4 	addi	r23,r23,-1
   1efac:	843fff04 	addi	r16,r16,-4
   1efb0:	8c7fff04 	addi	r17,r17,-4
   1efb4:	bd7ff91e 	bne	r23,r21,1ef9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701ef9c>
   1efb8:	00800034 	movhi	r2,0
   1efbc:	109ad104 	addi	r2,r2,27460
   1efc0:	10000926 	beq	r2,zero,1efe8 <__call_exitprocs+0xc4>
   1efc4:	a0800117 	ldw	r2,4(r20)
   1efc8:	1000301e 	bne	r2,zero,1f08c <__call_exitprocs+0x168>
   1efcc:	a0800017 	ldw	r2,0(r20)
   1efd0:	10003226 	beq	r2,zero,1f09c <__call_exitprocs+0x178>
   1efd4:	a009883a 	mov	r4,r20
   1efd8:	98800015 	stw	r2,0(r19)
   1efdc:	0006b440 	call	6b44 <free>
   1efe0:	9d000017 	ldw	r20,0(r19)
   1efe4:	a03fe41e 	bne	r20,zero,1ef78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701ef78>
   1efe8:	dfc00a17 	ldw	ra,40(sp)
   1efec:	df000917 	ldw	fp,36(sp)
   1eff0:	ddc00817 	ldw	r23,32(sp)
   1eff4:	dd800717 	ldw	r22,28(sp)
   1eff8:	dd400617 	ldw	r21,24(sp)
   1effc:	dd000517 	ldw	r20,20(sp)
   1f000:	dcc00417 	ldw	r19,16(sp)
   1f004:	dc800317 	ldw	r18,12(sp)
   1f008:	dc400217 	ldw	r17,8(sp)
   1f00c:	dc000117 	ldw	r16,4(sp)
   1f010:	dec00b04 	addi	sp,sp,44
   1f014:	f800283a 	ret
   1f018:	a0800117 	ldw	r2,4(r20)
   1f01c:	80c00017 	ldw	r3,0(r16)
   1f020:	10bfffc4 	addi	r2,r2,-1
   1f024:	15c01426 	beq	r2,r23,1f078 <__call_exitprocs+0x154>
   1f028:	80000015 	stw	zero,0(r16)
   1f02c:	183fde26 	beq	r3,zero,1efa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701efa8>
   1f030:	95c8983a 	sll	r4,r18,r23
   1f034:	a0806217 	ldw	r2,392(r20)
   1f038:	a5800117 	ldw	r22,4(r20)
   1f03c:	2084703a 	and	r2,r4,r2
   1f040:	10000b26 	beq	r2,zero,1f070 <__call_exitprocs+0x14c>
   1f044:	a0806317 	ldw	r2,396(r20)
   1f048:	2088703a 	and	r4,r4,r2
   1f04c:	20000c1e 	bne	r4,zero,1f080 <__call_exitprocs+0x15c>
   1f050:	89400017 	ldw	r5,0(r17)
   1f054:	d9000017 	ldw	r4,0(sp)
   1f058:	183ee83a 	callr	r3
   1f05c:	a0800117 	ldw	r2,4(r20)
   1f060:	15bfbf1e 	bne	r2,r22,1ef60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701ef60>
   1f064:	98800017 	ldw	r2,0(r19)
   1f068:	153fcf26 	beq	r2,r20,1efa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701efa8>
   1f06c:	003fbc06 	br	1ef60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701ef60>
   1f070:	183ee83a 	callr	r3
   1f074:	003ff906 	br	1f05c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701f05c>
   1f078:	a5c00115 	stw	r23,4(r20)
   1f07c:	003feb06 	br	1f02c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701f02c>
   1f080:	89000017 	ldw	r4,0(r17)
   1f084:	183ee83a 	callr	r3
   1f088:	003ff406 	br	1f05c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701f05c>
   1f08c:	a0800017 	ldw	r2,0(r20)
   1f090:	a027883a 	mov	r19,r20
   1f094:	1029883a 	mov	r20,r2
   1f098:	003fb606 	br	1ef74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701ef74>
   1f09c:	0005883a 	mov	r2,zero
   1f0a0:	003ffb06 	br	1f090 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701f090>
   1f0a4:	01110bff 	0x1110bff
   1f0a8:	01010004 	movi	r4,1024
   1f0ac:	7f000105 	stb	fp,4(r15)
   1f0b0:	007d0000 	call	7d000 <__alt_heap_start+0x4f804>
   1f0b4:	00000000 	call	0 <__alt_mem_SDRAM>
   1f0b8:	01883a00 	call	1883a0 <__alt_heap_start+0x15aba4>
   1f0bc:	010d0bff 	0x10d0bff
   1f0c0:	01010002 	0x1010002
	...
   1f0cc:	010d0bff 	0x10d0bff
   1f0d0:	01010004 	movi	r4,1024
   1f0d4:	00000100 	call	10 <__alt_mem_SDRAM+0x10>
   1f0d8:	00000000 	call	0 <__alt_mem_SDRAM>
   1f0dc:	0000506c 	andhi	zero,zero,321
