
Pac-Man.elf:     file format elf32-littlenios2
Pac-Man.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0002879c memsz 0x0002879c flags r-x
    LOAD off    0x000297bc vaddr 0x000287bc paddr 0x0002a788 align 2**12
         filesz 0x00001fcc memsz 0x00001fcc flags rw-
    LOAD off    0x0002c754 vaddr 0x0002c754 paddr 0x0002c754 align 2**12
         filesz 0x00000000 memsz 0x0000f404 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00026858  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001d1c  00026aa0  00026aa0  00027aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001fcc  000287bc  0002a788  000297bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000f404  0002c754  0002c754  0002c754  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  0003bb58  0003bb58  0002b788  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  0002b788  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0002b788  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001950  00000000  00000000  0002b7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0004436b  00000000  00000000  0002d100  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0001178e  00000000  00000000  0007146b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016b61  00000000  00000000  00082bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000550c  00000000  00000000  0009975c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00009d90  00000000  00000000  0009ec68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00023d55  00000000  00000000  000a89f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  000cc750  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002750  00000000  00000000  000cc770  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000d756a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000d7570  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000d7575  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000d7576  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000d7577  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000d757b  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000d757f  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000d7583  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000d758c  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000d7595  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000d759e  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000061  00000000  00000000  000d75a9  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abe3  00000000  00000000  000d760a  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001ae257  00000000  00000000  000e21ed  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
00026aa0 l    d  .rodata	00000000 .rodata
000287bc l    d  .rwdata	00000000 .rwdata
0002c754 l    d  .bss	00000000 .bss
0003bb58 l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Pac-Man_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ControllerInterface.cpp
00000000 l    df *ABS*	00000000 Entity.cpp
00000000 l    df *ABS*	00000000 Game.cpp
00000720 l     F .text	00000078 _ZL11buttonToDir8button_t
00000798 l     F .text	000001a0 _ZL23distanceBetweenEntitiesP6EntityS0_
00000f60 l     F .text	00000064 _ZL14resetAvailableP5E_DIR
00000fc4 l     F .text	0000008c _ZL15appendAvailableP5E_DIRS_
00001050 l     F .text	000000bc _ZL19chooseFromAvailableP5E_DIR
00000000 l    df *ABS*	00000000 Ghost.cpp
00003d40 l     F .text	00000068 _ZL12withinBoundsiiiiii
00000000 l    df *ABS*	00000000 Keyboard.cpp
00000000 l    df *ABS*	00000000 PacMan.cpp
00000000 l    df *ABS*	00000000 VGA.cpp
00000000 l    df *ABS*	00000000 VideoInterface.cpp
00000000 l    df *ABS*	00000000 font.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
00006068 l     F .text	000000a4 _ZL21size_of_encoded_valueh
0000610c l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
00006318 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
0000636c l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
000063f8 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0000652c l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
000065b4 l     F .text	000001c0 _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
00006774 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
000071dc l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0000738c l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
000387fc l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
00007444 l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
000075f4 l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
0002c754 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 s_round.c
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_pow.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
000281b0 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0000c3ec l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
0002c75c l     O .bss	00000004 fc_static
0000c504 l     F .text	000000c0 _Unwind_RaiseException_Phase2
0000c5c4 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
000287bc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002830a l     O .rodata	00000010 zeroes.4389
0002831a l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
0002832a l     O .rodata	00000010 zeroes.4404
00012124 l     F .text	000000bc __sbprintf
0002833a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00012334 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00013e64 l     F .text	00000008 __fp_unlock
00013e78 l     F .text	0000019c __sinit.part.1
00014014 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00029008 l     O .rwdata	00000020 lc_ctype_charset
00028fe8 l     O .rwdata	00000020 lc_message_charset
00029028 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00028368 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002849c l     O .rodata	00000010 blanks.4332
0002848c l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
00017bfc l     F .text	000000fc __sprint_r.part.0
000284bc l     O .rodata	00000010 blanks.4348
000284ac l     O .rodata	00000010 zeroes.4349
00019188 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0001a6d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0001a7dc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0001a83c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0001a948 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0001aa28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0001ab94 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0001ac80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0001ae4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0002a6fc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0001b098 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0002a700 l     O .rwdata	00000004 lockid
0002c78c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0002a704 l     O .rwdata	00000004 lockid
0002c794 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0001cac8 l     F .text	00000048 OS_InitMisc
0001cb10 l     F .text	0000006c OS_InitRdyList
0001cc7c l     F .text	000000e4 OS_InitTCBList
0001c9e8 l     F .text	000000e0 OS_InitEventList
0001cb7c l     F .text	00000080 OS_InitTaskIdle
0001cbfc l     F .text	00000080 OS_InitTaskStat
0001ceec l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0001ec0c l     F .text	000000f4 OS_FlagTaskRdy
0001e9cc l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00022cbc l     F .text	00000034 alt_dev_reg
00029208 l     O .rwdata	0000106c JTAG_UART
0002a274 l     O .rwdata	00000030 AV_Config
0002a2a4 l     O .rwdata	00000030 Audio_Subsystem_Audio
0002a2d4 l     O .rwdata	0000002c Char_LCD_16x2
0002a300 l     O .rwdata	0000002c IrDA
0002a32c l     O .rwdata	0000002c Expansion_JP5
0002a358 l     O .rwdata	0000002c Green_LEDs
0002a384 l     O .rwdata	0000002c HEX3_HEX0
0002a3b0 l     O .rwdata	0000002c HEX7_HEX4
0002a3dc l     O .rwdata	0000002c Pushbuttons
0002a408 l     O .rwdata	0000002c Red_LEDs
0002a434 l     O .rwdata	0000002c Slider_Switches
0002a460 l     O .rwdata	00000038 PS2_Port
0002a498 l     O .rwdata	00000038 PS2_Port_Dual
0002a4d0 l     O .rwdata	0000002c Serial_Port
0002a4fc l     O .rwdata	00000034 USB
0002a530 l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
0002a58c l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
0002a5e8 l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
0002a63c l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000237dc l     F .text	000002a8 altera_avalon_jtag_uart_irq
00023a84 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00024260 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002575c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000259c0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00025c80 l     F .text	0000003c alt_get_errno
00025cbc l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0002c7f8 g     O .bss	00000004 alt_instruction_exception_handler
0000754c g     F .text	00000028 __cxa_free_exception
00005e84 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00015fd8 g     F .text	00000074 _mprec_log10
00004d54 g     F .text	00000054 _ZN14VideoInterface9drawPixelEii
00006008 g     F .text	00000018 _ZSt10unexpectedv
0000290c g     F .text	000001a4 _ZN4Game9drawScoreEv
0002a752 g     O .rwdata	00000002 OSTaskNameSize
000160c4 g     F .text	0000008c __any_on
00019724 g     F .text	00000054 _isatty_r
00028374 g     O .rodata	00000028 __mprec_tinytens
00002628 g     F .text	000000a4 _ZN4Game8drawTextEiiPc
0001ad90 g     F .text	000000bc alt_main
0000d65c g     F .text	000000c0 _puts_r
0003ba58 g     O .bss	00000100 alt_irq
00024e1c g     F .text	00000060 alt_up_ps2_disable_read_interrupt
00007678 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
00009144 g     F .text	00000014 fabs
00019778 g     F .text	00000060 _lseek_r
0001f42c g     F .text	000000cc OS_MemInit
00007ce8 g     F .text	00000130 sqrt
0000c680 g     F .text	00000020 .hidden _Unwind_GetIPInfo
0002a788 g       *ABS*	00000000 __flash_rwdata_start
00022c5c g     F .text	00000060 OSTimeSet
000243c4 g     F .text	00000040 alt_up_character_lcd_send_cmd
0000af14 g     F .text	00000088 .hidden __eqdf2
000072b0 g     F .text	00000084 __cxa_rethrow
000275ec  w    O .rodata	0000000c _ZTI5Ghost
0000c60c g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
00006044 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
0001b73c g     F .text	00000610 OSEventPendMulti
00005860 g     F .text	00000054 _Z9inputLoopPv
0000c670 g     F .text	00000010 .hidden _Unwind_GetIP
0003bb58 g       *ABS*	00000000 __alt_heap_start
000262c8 g     F .text	00000024 OSTaskCreateHook
0002c7fc g     O .bss	00004000 task1_stk
0000daa0 g     F .text	0000005c _kill_r
0000d620 g     F .text	0000003c printf
0002a72a g     O .rwdata	00000002 OSMboxEn
0001bda4 g     F .text	0000004c OSIntEnter
00019990 g     F .text	0000009c _wcrtomb_r
0000d868 g     F .text	00000084 _signal_r
0001678c g     F .text	0000005c __sseek
000141b4 g     F .text	00000010 __sinit
00019838 g     F .text	00000140 __swbuf_r
00024c34 g     F .text	00000034 read_CE_bit
000075c8 g     F .text	0000002c __cxa_free_dependent_exception
0002a73a g     O .rwdata	00000002 OSQEn
000058f4 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
00014c7c g     F .text	0000007c _setlocale_r
00027f94  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
0001401c g     F .text	00000068 __sfmoreglue
0001b410 g     F .text	000000cc __malloc_unlock
000076a0 g     F .text	00000100 round
000005f0 g     F .text	00000130 _ZN4GameC1EP19ControllerInterfaceP14VideoInterface
00026330 g     F .text	00000020 OSTaskStatHook
00024fbc g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
000254b0 g     F .text	00000090 alt_up_rs232_read_fd
00007678 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
0002c79c g     O .bss	00000001 OSLockNesting
000071bc g     F .text	00000020 _ZSt18uncaught_exceptionv
0002a778 g     O .rwdata	00000002 OSDataSize
0002c79d g     O .bss	00000001 OSRunning
0002a680  w    O .rwdata	00000007 _ZTS5Ghost
00005efc g     F .text	00000020 __cxa_deleted_virtual
00014ff8 g     F .text	0000015c memmove
00026370 g     F .text	00000020 OSInitHookBegin
000045e0 g     F .text	000000d0 _ZN6PacManC2Ev
0002a770 g     O .rwdata	00000002 OSTmrSize
00007650 g     F .text	00000004 _ZNSt9exceptionD2Ev
0001419c g     F .text	00000018 _cleanup
00015154 g     F .text	000000a8 _Balloc
00009bec g     F .text	00000070 .hidden __fixsfsi
00004f8c g     F .text	00000064 _ZN14VideoInterface8drawLineEiiii
0002c7a0 g     O .bss	00000004 OSIdleCtr
0000af9c g     F .text	000000dc .hidden __gtdf2
00028168  w    O .rodata	00000014 _ZTVSt13bad_exception
00026078 g     F .text	00000024 altera_nios2_gen2_irq_init
00026148 g       .text	00000000 OSStartTsk
0000cb3c g     F .text	00000010 __errno
00024350 g     F .text	00000074 get_DDRAM_addr
0001d22c g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
0000c6bc g     F .text	00000008 .hidden _Unwind_GetRegionStart
0002a776 g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
0002a716 g     O .rwdata	00000002 OSEventSize
00005368 g     F .text	0000034c _ZN14VideoInterface18_drawLineBRESENHAMEiiiit
0002c7a4 g     O .bss	00000001 OSPrioHighRdy
000196c8 g     F .text	0000005c _fstat_r
000262ec g     F .text	00000024 OSTaskDelHook
0002c76c g     O .bss	00000004 errno
00016708 g     F .text	00000008 __seofread
00026128 g       .text	00000000 OSStartHighRdy
000216f8 g     F .text	000001e4 OSTaskCreateExt
000169c0 g     F .text	0000123c ___svfiprintf_internal_r
0001e514 g     F .text	00000060 OSFlagPendGetFlagsRdy
0002a756 g     O .rwdata	00000002 OSTaskStatStkSize
0000c898 g     F .text	00000074 .hidden _Unwind_Backtrace
0001d690 g     F .text	00000308 OSFlagAccept
0001fa64 g     F .text	000000b8 OSQFlush
0001f4f8 g     F .text	00000140 OSQAccept
0002c784 g     O .bss	00000004 alt_argv
00032668 g       *ABS*	00000000 _gp
000002c0 g     F .text	00000038 _ZN19ControllerInterface15getActiveButtonEv
00004ea0 g     F .text	000000b8 _ZN14VideoInterface5clearEt
0002154c g     F .text	000001ac OSTaskCreate
0002105c g     F .text	000004f0 OSTaskChangePrio
0002c798 g     O .bss	00000004 alt_heapsem
0001a928 g     F .text	00000020 getpid
00027664  w    O .rodata	0000000a _ZTS8Keyboard
0001d500 g     F .text	00000190 OSDebugInit
00006e1c g     F .text	00000230 __cxa_call_unexpected
000218dc g     F .text	00000344 OSTaskDel
0000704c g     F .text	00000008 __cxa_get_exception_ptr
00004298 g     F .text	00000088 _ZN5Ghost7_updateEi
00001a3c g     F .text	00000058 _ZN4Game14drawHomescreenEv
00029088 g     O .rwdata	00000180 alt_fd_list
0000405c g     F .text	00000028 _ZN5Ghost8isJailedEv
00038834 g     O .bss	00000370 OSFlagTbl
0000c7ac g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
0001c7c8 g     F .text	000000b8 OS_EventTaskRemove
0000c63c g     F .text	00000018 .hidden _Unwind_GetCFA
00006020 g     F .text	00000014 _ZSt13set_terminatePFvvE
000258fc g     F .text	00000090 alt_find_dev
0000d380 g     F .text	00000148 memcpy
00004878 g     F .text	00000214 _ZN6PacMan5_drawEP14VideoInterface
0002a740 g     O .rwdata	00000002 OSRdyTblSize
0002456c g     F .text	00000050 alt_up_character_lcd_write_fd
00007574 g     F .text	00000054 __cxa_allocate_dependent_exception
00002ab0 g     F .text	00001188 _ZN4Game7drawMapEv
00013e6c g     F .text	0000000c _cleanup_r
00005c30 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0000c200 g     F .text	000000dc .hidden __floatsidf
00025a84 g     F .text	0000007c alt_io_redirect
0000b078 g     F .text	000000f4 .hidden __ltdf2
00026aa0 g       *ABS*	00000000 __DTOR_END__
00005c48 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00024b04 g     F .text	00000090 alt_up_irda_write_fd
0002543c g     F .text	00000074 alt_up_rs232_read_data
0000d71c g     F .text	00000014 puts
00026668 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000037c g     F .text	0000007c _ZN6Entity6updateEi
0001b4dc g     F .text	00000120 OSEventNameGet
0002a724 g     O .rwdata	00000002 OSFlagMax
00005094 g     F .text	00000064 _ZN14VideoInterface8drawRectEiiii
00009174 g     F .text	00000074 __fpclassifyd
00015f34 g     F .text	000000a4 __ratio
0001bdf0 g     F .text	000000f8 OSIntExit
0001916c g     F .text	0000001c __vfiprintf_internal
00004a8c g     F .text	000000ec _ZN6PacMan7_updateEi
0002a75e g     O .rwdata	00000002 OSTCBSize
0002c7a5 g     O .bss	00000001 OSPrioCur
00024900 g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
00023ce0 g     F .text	000002bc altera_avalon_jtag_uart_read
0000cb4c g     F .text	00000014 malloc
0000d5f0 g     F .text	00000030 _printf_r
0000ca68 g     F .text	00000064 .hidden __udivsi3
000077a0 g     F .text	00000084 roundf
0001a984 g     F .text	000000a4 isatty
0000d8ec g     F .text	000000bc _raise_r
0002a744 g     O .rwdata	00000002 OSStkWidth
000283c4 g     O .rodata	000000c8 __mprec_tens
0002a738 g     O .rwdata	00000002 OSPtrSize
00001aec g     F .text	000002b0 _ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_
00014cf8 g     F .text	0000000c __locale_charset
00009b24 g     F .text	000000c8 .hidden __lesf2
0002a718 g     O .rwdata	00000002 OSEventTblSize
000248a0 g     F .text	00000060 alt_up_irda_disable_read_interrupt
00004be4 g     F .text	00000070 _ZN3VGA18_internalDrawPixelEiit
0002609c g       .text	00000000 OSCtxSw
000265d8 g     F .text	00000090 alt_icache_flush
0002c768 g     O .bss	00000004 __malloc_top_pad
0002c7a8 g     O .bss	00000004 OSTCBList
0000dafc g     F .text	00000004 _getpid_r
0002c77c g     O .bss	00000004 alt_fd_list_lock
0002a6dc g     O .rwdata	00000004 __mb_cur_max
00014d28 g     F .text	0000000c _localeconv_r
000019ec g     F .text	00000050 _ZN4Game4jailEP5Ghost
00015560 g     F .text	0000003c __i2b
00014638 g     F .text	000004bc __sfvwrite_r
00005dc8 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0000d9a8 g     F .text	000000a8 __sigtramp_r
00038ba4 g     O .bss	00000c30 OSMemTbl
0002c7ac g     O .bss	00000001 OSTickStepState
00004b78 g     F .text	0000006c _ZN3VGAC2EPsiii
0000d7a8 g     F .text	00000054 _sbrk_r
000043e4 g     F .text	000001fc _ZN8Keyboard6updateEv
00028060  w    O .rodata	00000020 _ZTVSt9type_info
0002a73c g     O .rwdata	00000002 OSQMax
000397d4 g     O .bss	00000800 OSTaskStatStk
0001f068 g     F .text	000000f0 OSMemNameGet
0002a71c g     O .rwdata	00000002 OSFlagEn
000197d8 g     F .text	00000060 _read_r
00007658 g     F .text	0000000c _ZNKSt9exception4whatEv
0002a762 g     O .rwdata	00000002 OSTimeTickHookEn
0001ff14 g     F .text	00000168 OSQPost
0001ed00 g     F .text	000000a4 OS_FlagUnlink
0002a6f4 g     O .rwdata	00000004 alt_max_fd
000253b8 g     F .text	00000044 alt_up_rs232_check_parity
0001cdb4 g     F .text	00000068 OS_MemCopy
00004e68 g     F .text	00000038 _ZN14VideoInterface8setColorEt
0001ce1c g     F .text	000000d0 OS_Sched
000193bc g     F .text	000000f0 _fclose_r
0001ef78 g     F .text	000000f0 OSMemGet
00021f08 g     F .text	000001b4 OSTaskNameSet
00024c68 g     F .text	00000030 read_num_bytes_available
00013e34 g     F .text	00000030 fflush
0002c764 g     O .bss	00000004 __malloc_max_sbrked_mem
0002c7b0 g     O .bss	00000004 OSCtxSwCtr
00026350 g     F .text	00000020 OSTimeTickHook
00025b00 g     F .text	00000180 alt_irq_register
0002a726 g     O .rwdata	00000002 OSFlagNameSize
00024bd0 g     F .text	00000034 read_RI_bit
0000c2dc g     F .text	00000110 .hidden __extendsfdf2
0001c880 g     F .text	00000100 OS_EventTaskRemoveMulti
00009d80 g     F .text	000008ac .hidden __adddf3
00027fc8  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
0001c678 g     F .text	00000150 OS_EventTaskWaitMulti
00015cdc g     F .text	0000010c __b2d
0002a73e g     O .rwdata	00000002 OSQSize
00027874 g     O .rodata	000004fa bmp_letters
0001a0f0 g     F .text	00000538 .hidden __umoddi3
0001acbc g     F .text	000000d4 lseek
000209c4 g     F .text	0000020c OSSemPend
0002a6c8 g     O .rwdata	00000004 __fdlib_version
00005c8c g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00005f1c g     F .text	00000004 _ZdlPv
0002a6cc g     O .rwdata	00000004 _global_impure_ptr
00016150 g     F .text	00000564 _realloc_r
0002a728 g     O .rwdata	00000002 OSLowestPrio
0003bb58 g       *ABS*	00000000 __bss_end
000263d0 g     F .text	00000024 OSTCBInitHook
0002a76e g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00025f70 g     F .text	00000108 alt_tick
0000c5f4 g     F .text	00000018 .hidden _Unwind_SjLj_Register
00019b78 g     F .text	00000578 .hidden __udivdi3
00004c54 g     F .text	00000080 _ZN14VideoInterfaceC2Eiii
00019624 g     F .text	00000024 _fputwc_r
0002a710 g     O .rwdata	00000002 OSEventEn
0002839c g     O .rodata	00000028 __mprec_bigtens
00015344 g     F .text	00000104 __s2b
0002a76a g     O .rwdata	00000002 OSTmrCfgNameSize
0000cb24 g     F .text	00000018 abort
0001a628 g     F .text	000000a8 .hidden __floatunsidf
00015a1c g     F .text	00000060 __mcmp
00024ccc g     F .text	0000002c read_data_byte
00007108 g     F .text	000000b4 __cxa_end_catch
000141d4 g     F .text	00000018 __fp_lock_all
00007654 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
0001eb2c g     F .text	000000e0 OS_FlagInit
0000199c g     F .text	00000050 _ZN4Game6unJailEP5Ghost
00025ed4 g     F .text	0000009c alt_alarm_stop
00024c04 g     F .text	00000030 read_RE_bit
0002a74c g     O .rwdata	00000002 OSTaskIdleStkSize
0002c7ec g     O .bss	00000004 alt_irq_active
000205fc g     F .text	000000b0 OSSemAccept
00005fe0 g     F .text	00000018 _ZSt9terminatev
0001f26c g     F .text	000000d8 OSMemPut
0001eda4 g     F .text	000001d4 OSMemCreate
0002c7b4 g     O .bss	00000004 OSIdleCtrMax
00024940 g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
00029060 g     O .rwdata	00000028 alt_dev_null
0002a760 g     O .rwdata	00000002 OSTicksPerSec
000003f8 g     F .text	00000060 _ZN6Entity4drawEP14VideoInterface
00007680 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
000091fc g     F .text	000001ec rint
0002a690  w    O .rwdata	00000005 _ZTS3VGA
0002480c g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
00002564 g     F .text	000000c4 _ZN4Game8drawCharEiic
0002609c g       .text	00000000 OSIntCtxSw
00027ff4  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
00024e7c g     F .text	00000074 alt_up_ps2_write_data_byte
0002573c g     F .text	00000020 alt_dcache_flush_all
00015448 g     F .text	00000068 __hi0bits
0002a6b0  w    O .rwdata	00000008 _ZTISt9exception
0000c180 g     F .text	00000080 .hidden __fixdfsi
0002c7b8 g     O .bss	00000004 OSTCBFreeList
0002a788 g       *ABS*	00000000 __ram_rwdata_end
00020bd0 g     F .text	0000016c OSSemPendAbort
00005e80 g     F .text	00000004 _ZNSt9type_infoD1Ev
0002a6ec g     O .rwdata	00000008 alt_dev_list
00007680 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
0001b0d4 g     F .text	000000f8 write
0002a764 g     O .rwdata	00000002 OSVersionNbr
00005e94 g     F .text	00000004 _ZNSt9type_infoD0Ev
00009a68 g     F .text	000000bc .hidden __gtsf2
00027830  w    O .rodata	0000000c _ZTI6PacMan
000002f8 g     F .text	00000084 _ZN6EntityC2Eii
000287bc g       *ABS*	00000000 __ram_rodata_end
0001a878 g     F .text	000000b0 fstat
000005a0 g     F .text	00000028 _ZN6Entity10getCurrDirEv
00025540 g     F .text	00000094 alt_up_rs232_write_fd
0001aa64 g     F .text	00000130 kill
000056b4 g     F .text	0000008c _Z4JTAGPKc
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
0000b078 g     F .text	000000f4 .hidden __ledf2
0002a70c g     O .rwdata	00000004 OSEndiannessTest
00015794 g     F .text	00000140 __pow5mult
000004d8 g     F .text	00000050 _ZN6Entity6setPosEii
00017d10 g     F .text	0000145c ___vfiprintf_internal_r
0002c778 g     O .bss	00000004 __nlocale_changed
00004084 g     F .text	00000214 _ZN5Ghost5_drawEP14VideoInterface
0000cacc g     F .text	00000058 .hidden __umodsi3
00005e8c g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
0002a71e g     O .rwdata	00000002 OSFlagGrpSize
00006034 g     F .text	00000010 _ZSt13get_terminatev
0003bb58 g       *ABS*	00000000 end
000251ac g     F .text	00000098 alt_up_ps2_write_fd
00000528 g     F .text	00000028 _ZN6Entity11getVelocityEv
0002497c g     F .text	00000044 alt_up_irda_check_parity
0000c880 g     F .text	00000018 .hidden _Unwind_DeleteException
000236a0 g     F .text	0000013c altera_avalon_jtag_uart_init
0001d084 g     F .text	000000dc OS_TaskStat
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
00005cf8 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
00026a9c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
000242dc g     F .text	00000074 alt_avalon_timer_sc_init
0000c90c g     F .text	00000064 .hidden __clzsi2
00005bb8 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
00023f9c g     F .text	000002c4 altera_avalon_jtag_uart_write
000141c4 g     F .text	00000004 __sfp_lock_acquire
000280f0  w    O .rodata	00000012 _ZTSSt13bad_exception
00014f14 g     F .text	000000e4 memchr
0001cd60 g     F .text	00000054 OS_MemClr
00024478 g     F .text	0000007c alt_up_character_lcd_write
0000ff10 g     F .text	000021f8 ___vfprintf_internal_r
0002616c g     F .text	0000015c OSTaskStkInit
0000db00 g     F .text	00000058 _sprintf_r
00014328 g     F .text	00000310 _free_r
00014d04 g     F .text	00000010 __locale_mb_cur_max
0001c3d0 g     F .text	00000198 OS_EventTaskRdy
000268e4 g     F .text	00000180 __call_exitprocs
0002c7bc g     O .bss	00000001 OSCPUUsage
0002c774 g     O .bss	00000004 __mlocale_changed
00004320 g     F .text	000000c4 _ZN8KeyboardC1Ev
0002a6d4 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
0002c7f0 g     O .bss	00000004 _alt_tick_rate
0001fb1c g     F .text	0000028c OSQPend
00004ff0 g     F .text	000000a4 _ZN14VideoInterface8drawLineEiiiit
00028050  w    O .rodata	0000000d _ZTSSt9type_info
000227c8 g     F .text	00000104 OSTimeDly
0000d748 g     F .text	00000060 rand
00005edc g     F .text	00000020 __cxa_pure_virtual
000158d4 g     F .text	00000148 __lshift
00004c54 g     F .text	00000080 _ZN14VideoInterfaceC1Eiii
0002c7f4 g     O .bss	00000004 _alt_nticks
0000da64 g     F .text	00000018 signal
0001ae88 g     F .text	000000fc read
00027658  w    O .rodata	0000000c _ZTI8Keyboard
00022d28 g     F .text	00000814 alt_sys_init
000246bc g     F .text	0000008c alt_up_character_lcd_shift_display
00009c5c g     F .text	00000124 .hidden __floatsisf
0002a678  w    O .rwdata	00000008 _ZTS6Entity
000167f0 g     F .text	000001d0 __ssprint_r
000051a8 g     F .text	000001c0 _ZN14VideoInterface12_drawLineDDAEiiiit
00000284 g     F .text	0000003c _ZN19ControllerInterfaceC2Ev
000267cc g     F .text	00000118 __register_exitproc
0002c7bd g     O .bss	00000001 OSTaskCtr
00005938 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
000250c8 g     F .text	00000058 alt_up_ps2_clear_fifo
0002537c g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
000228cc g     F .text	00000160 OSTimeDlyHMSM
0001559c g     F .text	000001f8 __multiply
00024748 g     F .text	0000008c alt_up_character_lcd_erase_pos
00007e18 g     F .text	000010a4 __ieee754_pow
00023b88 g     F .text	00000068 altera_avalon_jtag_uart_close
00007824 g     F .text	000004c4 pow
000287bc g       *ABS*	00000000 __ram_rwdata_start
0000c6dc g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
00026aa0 g       *ABS*	00000000 __ram_rodata_start
0003880c g     O .bss	00000028 __malloc_current_mallinfo
0000c7f0 g     F .text	00000044 .hidden _Unwind_SjLj_Resume
0002a712 g     O .rwdata	00000002 OSEventMax
00015de8 g     F .text	0000014c __d2b
00028190  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
00020d3c g     F .text	00000110 OSSemPost
00005e80 g     F .text	00000004 _ZNSt9type_infoD2Ev
0002783c  w    O .rodata	0000000c _ZTV3VGA
00007684 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
0001bf74 g     F .text	000000dc OSSchedUnlock
00005b34 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
0002353c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000264fc g     F .text	000000dc alt_get_fd
0002c7c0 g     O .bss	00000004 OSMemFreeList
0001c0c0 g     F .text	000000b0 OSStatInit
0001e908 g     F .text	000000c4 OSFlagQuery
0002a6c0  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
0002a748 g     O .rwdata	00000002 OSTaskCreateExtEn
000192a4 g     F .text	00000054 _close_r
00026aac  w    O .rodata	00000016 _ZTS19ControllerInterface
00027848  w    O .rodata	0000000c _ZTI3VGA
00026750 g     F .text	0000007c memcmp
0001c3b0 g     F .text	00000020 OS_Dummy
000235fc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0003bb58 g       *ABS*	00000000 __alt_stack_base
0002364c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000058f4 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
00024844 g     F .text	0000005c alt_up_irda_enable_read_interrupt
000121e0 g     F .text	00000154 __swsetup_r
00039fd4 g     O .bss	000001e0 OSQTbl
0000c834 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
0000a62c g     F .text	000008e8 .hidden __divdf3
00014084 g     F .text	00000118 __sfp
0001604c g     F .text	00000078 __copybits
00005e84 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
00028be0 g     O .rwdata	00000408 __malloc_av_
000141d0 g     F .text	00000004 __sinit_lock_release
0002c7c4 g     O .bss	00000004 OSTCBHighRdy
0000b16c g     F .text	00000718 .hidden __muldf3
000166b4 g     F .text	00000054 __sread
00028154  w    O .rodata	00000014 _ZTVSt9exception
0000767c g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
00027820  w    O .rodata	00000010 _ZTV6PacMan
0002c7c8 g     O .bss	00000004 OSQFreeList
000252dc g     F .text	00000060 alt_up_rs232_disable_read_interrupt
000263f4 g     F .text	00000108 alt_find_file
0000234c g     F .text	0000002c _ZN4Game8walkableE10map_item_t
00025798 g     F .text	000000a4 alt_dev_llist_insert
0001b2f0 g     F .text	00000120 __malloc_lock
0001afe8 g     F .text	000000b0 sbrk
0000dd38 g     F .text	000021d8 ___svfprintf_internal_r
00028024  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
00007220 g     F .text	00000090 __cxa_throw
0001b5fc g     F .text	00000140 OSEventNameSet
00013dd8 g     F .text	0000005c _fflush_r
0000c6a0 g     F .text	00000010 .hidden _Unwind_SetIP
000192f8 g     F .text	000000c4 _calloc_r
0002c7cc g     O .bss	00000001 OSRdyGrp
00000458 g     F .text	00000040 _ZN6Entity10setNextDirE5E_DIR
0002c754 g       *ABS*	00000000 __bss_start
00027854  w    O .rodata	00000011 _ZTS14VideoInterface
00000578 g     F .text	00000028 _ZN6Entity4getYEv
0000d4c8 g     F .text	00000128 memset
00026aa0  w    O .rodata	0000000c _ZTV19ControllerInterface
00005740 g     F .text	000000d8 main
00004d18 g     F .text	0000003c _ZN14VideoInterface11resetOffsetEv
0002c788 g     O .bss	00000004 alt_envp
0002c760 g     O .bss	00000004 __malloc_max_total_mem
0002359c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00026ac4  w    O .rodata	00000010 _ZTV6Entity
00019978 g     F .text	00000018 __swbuf
0000d730 g     F .text	00000018 srand
00007688 g     F .text	0000000c __cxa_get_globals_fast
000284e8 g     O .rodata	00000100 OSUnMapTbl
00009b24 g     F .text	000000c8 .hidden __ltsf2
0002a742 g     O .rwdata	00000002 OSSemEn
00024630 g     F .text	0000008c alt_up_character_lcd_shift_cursor
0001e574 g     F .text	00000394 OSFlagPost
000167e8 g     F .text	00000008 __sclose
000091e8 g     F .text	00000008 matherr
04000000 g       *ABS*	00000000 __alt_heap_limit
000194ac g     F .text	00000014 fclose
0001c568 g     F .text	00000110 OS_EventTaskWait
000307fc g     O .bss	00004000 task2_stk
00004320 g     F .text	000000c4 _ZN8KeyboardC2Ev
00025058 g     F .text	00000070 alt_up_ps2_read_data_byte
0001d160 g     F .text	000000cc OS_TaskStatStkChk
00021c20 g     F .text	00000150 OSTaskDelReq
00012534 g     F .text	00001688 _dtoa_r
0000cb74 g     F .text	0000080c _malloc_r
00019aec g     F .text	00000030 __ascii_wctomb
00007664 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
0002a6f8 g     O .rwdata	00000004 alt_errno
0001c050 g     F .text	00000070 OSStart
000347fc g     O .bss	00004000 task3_stk
0000da7c g     F .text	00000010 _init_signal
0001b290 g     F .text	00000060 __env_unlock
00028018  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
00014af4 g     F .text	000000c4 _fwalk
000220bc g     F .text	000001d4 OSTaskResume
0001f344 g     F .text	000000e8 OSMemQuery
0002a754 g     O .rwdata	00000002 OSTaskStatEn
000249c0 g     F .text	00000040 alt_up_irda_write_data
0002a72e g     O .rwdata	00000002 OSMemMax
0002007c g     F .text	00000170 OSQPostFront
00007654 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
00027868  w    O .rodata	0000000c _ZTV14VideoInterface
00025244 g     F .text	0000003c alt_up_ps2_open_dev
0000c970 g     F .text	00000084 .hidden __divsi3
0002c7cd g     O .bss	00000003 OSRdyTbl
0002a708 g     O .rwdata	00000002 OSDebugEn
0002443c g     F .text	0000003c alt_up_character_lcd_open_dev
00014204 g     F .text	00000124 _malloc_trim_r
00024dc0 g     F .text	0000005c alt_up_ps2_enable_read_interrupt
0002a668  w    O .rwdata	00000008 _ZTI19ControllerInterface
00026aa0 g       *ABS*	00000000 __CTOR_END__
00009158 g     F .text	0000001c finite
0002a720 g     O .rwdata	00000002 OSFlagNodeSize
0002a768 g     O .rwdata	00000002 OSTmrCfgMax
00024404 g     F .text	00000038 alt_up_character_lcd_init
0000dbc4 g     F .text	000000dc strcmp
0001f638 g     F .text	000001ac OSQCreate
00021d70 g     F .text	00000198 OSTaskNameGet
00026aa0 g       *ABS*	00000000 __flash_rodata_start
000201ec g     F .text	0000020c OSQPostOpt
0001c170 g     F .text	00000220 OSTimeTick
0002817c  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
0002a750 g     O .rwdata	00000002 OSTaskMax
00026aa0 g       *ABS*	00000000 __DTOR_LIST__
000206ac g     F .text	000000d8 OSSemCreate
0002a774 g     O .rwdata	00000002 OSTmrWheelSize
00003da8 g     F .text	0000027c _ZN5Ghost8getColorEi5E_DIRii
000255d4 g     F .text	0000003c alt_up_rs232_open_dev
00009584 g     F .text	0000001c copysign
0000af14 g     F .text	00000088 .hidden __nedf2
0002a74a g     O .rwdata	00000002 OSTaskDelEn
00020e4c g     F .text	00000110 OSSemQuery
0001f7e4 g     F .text	00000280 OSQDel
0001fda8 g     F .text	0000016c OSQPendAbort
00022cf0 g     F .text	00000038 alt_irq_init
0001af84 g     F .text	00000064 alt_release_fd
00005904 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00024c98 g     F .text	00000034 read_data_valid
0000db58 g     F .text	0000006c sprintf
000247d4 g     F .text	00000038 alt_up_character_lcd_cursor_off
000281c0 g     O .rodata	00000100 .hidden __clz_tab
0000110c g     F .text	000005c8 _ZN4Game19randomWalkAlgorithmEP5Ghost
0002c770 g     O .bss	00000004 _PathLocale
00004cd4 g     F .text	00000044 _ZN14VideoInterface9setOffsetEii
00024f58 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00026704 g     F .text	00000014 atexit
00009a68 g     F .text	000000bc .hidden __gesf2
00019244 g     F .text	00000060 _write_r
0001bee8 g     F .text	0000008c OSSchedLock
00014d34 g     F .text	00000018 setlocale
00000498 g     F .text	00000040 _ZN6Entity10setCurrDirE5E_DIR
0000c6d4 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
00007334 g     F .text	00000058 __cxa_call_terminate
0001d998 g     F .text	00000108 OSFlagCreate
00004f58 g     F .text	00000034 _ZN14VideoInterface10setLineAlgE9viLineAlg
0002a6d0 g     O .rwdata	00000004 _impure_ptr
0002a6b8  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
0002c780 g     O .bss	00000004 alt_argc
00013bbc g     F .text	0000021c __sflush_r
000093e8 g     F .text	0000019c scalbn
0002589c g     F .text	00000060 _do_dtors
0002a698  w    O .rwdata	00000008 _ZTI14VideoInterface
00014d20 g     F .text	00000008 __locale_cjk_lang
00000550 g     F .text	00000028 _ZN6Entity4getXEv
0002a71a g     O .rwdata	00000002 OSEventMultiEn
000050f8 g     F .text	000000b0 _ZN14VideoInterface8drawRectEiiiit
0002a670  w    O .rwdata	00000008 _ZTI6Entity
00003c38 g     F .text	00000108 _ZN5GhostC1Et
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
0001daa0 g     F .text	00000248 OSFlagDel
0002c7d0 g     O .bss	00000004 OSEventFreeList
00006058 g     F .text	00000010 _ZSt14get_unexpectedv
00000020 g       .exceptions	00000000 alt_irq_entry
00004b78 g     F .text	0000006c _ZN3VGAC1EPsiii
00015c78 g     F .text	00000064 __ulp
0000c6c4 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
0001df5c g     F .text	000005b8 OSFlagPend
0002a766 g     O .rwdata	00000002 OSTmrEn
000141ec g     F .text	00000018 __fp_unlock_all
00001d9c g     F .text	000002bc _ZN4Game15distanceToEntryEP6EntityPi
0002a6e4 g     O .rwdata	00000008 alt_fs_list
00028130  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
0001cf60 g     F .text	00000074 OS_StrCopy
00025280 g     F .text	0000005c alt_up_rs232_enable_read_interrupt
0000c6b0 g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
00027d6e g     O .rodata	000001ea bmp_numbers
000253fc g     F .text	00000040 alt_up_rs232_write_data
00007054 g     F .text	000000b4 __cxa_begin_catch
0002a730 g     O .rwdata	00000002 OSMemNameSize
00005c48 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
000091f0 g     F .text	0000000c nan
00005ff8 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00026390 g     F .text	00000020 OSInitHookEnd
0002a688  w    O .rwdata	00000008 _ZTS6PacMan
00000284 g     F .text	0000003c _ZN19ControllerInterfaceC1Ev
00000020 g       *ABS*	00000000 __ram_exceptions_start
0002a75c g     O .rwdata	00000002 OSTCBPrioTblMax
00014d4c g     F .text	0000000c localeconv
00008ebc g     F .text	00000288 __ieee754_sqrt
0002a758 g     O .rwdata	00000002 OSTaskStatStkChkEn
00007674 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
0002a6a8 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
0002a72c g     O .rwdata	00000002 OSMemEn
000074ec g     F .text	00000060 __cxa_allocate_exception
0002a736 g     O .rwdata	00000002 OSMutexEn
00027fbc  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0002a788 g       *ABS*	00000000 _edata
00004024 g     F .text	00000038 _ZN5Ghost9setJailedEb
000005f0 g     F .text	00000130 _ZN4GameC2EP19ControllerInterfaceP14VideoInterface
0003bb58 g       *ABS*	00000000 _end
0002c7d4 g     O .bss	00000001 OSIntNesting
0000681c g     F .text	00000600 __gxx_personality_sj0
000194c0 g     F .text	00000164 __fputwc
00000248 g       *ABS*	00000000 __ram_exceptions_end
00000938 g     F .text	00000628 _ZN4Game6updateEi
00023bf0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00022a2c g     F .text	000001d4 OSTimeDlyResume
0002764c  w    O .rodata	0000000c _ZTV8Keyboard
0001de10 g     F .text	0000014c OSFlagNameSet
00002058 g     F .text	000002f4 _ZN4Game14updateMovementEP6Entityi
00007650 g     F .text	00000004 _ZNSt9exceptionD1Ev
00022290 g     F .text	000001c0 OSTaskStkChk
000046b0 g     F .text	000001c8 _ZN6PacMan8getColorEi5E_DIRii
0002a732 g     O .rwdata	00000002 OSMemSize
00016710 g     F .text	0000007c __swrite
00002378 g     F .text	000001ec _ZN4Game12getCharPixelEcii
0002a6d8 g     O .rwdata	00000004 __malloc_trim_threshold
00014d14 g     F .text	0000000c __locale_msgcharset
0002c7d8 g     O .bss	00000004 OSTCBCur
00026718 g     F .text	00000038 exit
0000c654 g     F .text	0000001c .hidden _Unwind_SetGR
00024a00 g     F .text	00000074 alt_up_irda_read_data
0002a734 g     O .rwdata	00000002 OSMemTblSize
00014bb8 g     F .text	000000c4 _fwalk_reent
00005a98 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
00024cf8 g     F .text	000000c8 alt_up_ps2_init
00015a7c g     F .text	000001fc __mdiff
00005f20 g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
00004da8 g     F .text	000000c0 _ZN14VideoInterface9drawPixelEiit
0000c9f4 g     F .text	00000074 .hidden __modsi3
000016d4 g     F .text	000002c8 _ZN4Game4drawEv
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000141c8 g     F .text	00000004 __sfp_lock_release
0001bd4c g     F .text	00000058 OSInit
00028104  w    O .rodata	0000000c _ZTISt13bad_exception
00022634 g     F .text	00000124 OSTaskQuery
000244f4 g     F .text	00000078 alt_up_character_lcd_string
00020554 g     F .text	000000a8 OS_QInit
0001cfd4 g     F .text	00000054 OS_StrLen
00024b94 g     F .text	0000003c alt_up_irda_open_dev
0001f158 g     F .text	00000114 OSMemNameSet
0002a74e g     O .rwdata	00000002 OSTaskProfileEn
0002c7dc g     O .bss	00000004 OSTime
000002f8 g     F .text	00000084 _ZN6EntityC1Eii
0003a1b4 g     O .bss	00000800 OSTaskIdleStk
0001a808 g     F .text	00000034 _exit
00025610 g     F .text	0000012c alt_alarm_start
0001dce8 g     F .text	00000128 OSFlagNameGet
000058b4 g     F .text	00000040 _Z8GameLoopPv
00022c00 g     F .text	0000005c OSTimeGet
0000c620 g     F .text	0000001c .hidden _Unwind_GetGR
00007694 g     F .text	0000000c __cxa_get_globals
00014d58 g     F .text	000001bc __smakebuf_r
0002a6ac g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
00024ef0 g     F .text	00000068 alt_up_ps2_wait_for_ack
0000dca0 g     F .text	00000098 strlen
0000d7fc g     F .text	0000006c _init_signal_r
0002a6a0  w    O .rwdata	00000008 _ZTISt9type_info
00026310 g     F .text	00000020 OSTaskSwHook
00025d80 g     F .text	00000154 open
0003a9b4 g     O .bss	00000b40 OSEventTbl
0000af9c g     F .text	000000dc .hidden __gedf2
000280e0  w    O .rodata	0000000d _ZTSSt9exception
0003b4f4 g     O .bss	00000510 OSTCBTbl
00020f5c g     F .text	00000100 OSSemSet
000275dc  w    O .rodata	00000010 _ZTV5Ghost
0002a6e0 g     O .rwdata	00000004 __wctomb
00007670 g     F .text	00000004 _ZNSt9exceptionD0Ev
000045e0 g     F .text	000000d0 _ZN6PacManC1Ev
00017cf8 g     F .text	00000018 __sprint_r
0002598c g     F .text	00000034 alt_icache_flush_all
00002874 g     F .text	00000098 _ZN4Game13drawScoreTextEv
0000c6cc g     F .text	00000008 .hidden _Unwind_GetDataRelBase
000245bc g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0002a77c g     O .rwdata	00000004 alt_priority_mask
00003c38 g     F .text	00000108 _ZN5GhostC2Et
00020784 g     F .text	00000240 OSSemDel
0002c7e0 g     O .bss	00000004 OSFlagFreeList
0002a714 g     O .rwdata	00000002 OSEventNameSize
00012108 g     F .text	0000001c __vfprintf_internal
0002c7e4 g     O .bss	00000001 OSStatRdy
0003ba04 g     O .bss	00000054 OSTCBPrioTbl
00019b1c g     F .text	0000005c _wctomb_r
0001b1cc g     F .text	000000c4 __env_lock
00025120 g     F .text	0000008c alt_up_ps2_read_fd
0002a75a g     O .rwdata	00000002 OSTaskSwHookEn
0000b884 g     F .text	000008fc .hidden __subdf3
00024a74 g     F .text	00000090 alt_up_irda_read_fd
00005818 g     F .text	00000048 _Z7gfxLoopPv
000154b0 g     F .text	000000b0 __lo0bits
0002a780 g     O .rwdata	00000008 alt_alarm_list
0002a722 g     O .rwdata	00000002 OSFlagWidth
0002583c g     F .text	00000060 _do_ctors
0000da8c g     F .text	00000014 __sigtramp
0002533c g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00019a2c g     F .text	000000c0 wcrtomb
0001a70c g     F .text	000000d0 close
000095a0 g     F .text	000004c8 .hidden __addsf3
0002c790 g     O .bss	00000004 alt_envsem
0002c7e8 g     O .bss	00000004 OSIdleCtrRun
000026cc g     F .text	000001a8 _ZN4Game18drawTextDifferenceEiiPcS0_
00001a94 g     F .text	00000058 _ZN4Game11setInSquareEP6Entityii
0001c390 g     F .text	00000020 OSVersion
0002a76c g     O .rwdata	00000002 OSTmrCfgWheelSize
00028110  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
0001abfc g     F .text	00000084 alt_load
00022758 g     F .text	00000070 OS_TaskStkClr
0002a746 g     O .rwdata	00000002 OSTaskCreateEn
000005c8 g     F .text	00000028 _ZN6Entity10getNextDirEv
00005e98 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
0001c980 g     F .text	00000068 OS_EventWaitListInit
00019648 g     F .text	00000080 fputwc
0000da50 g     F .text	00000014 raise
000263b0 g     F .text	00000020 OSTaskIdleHook
0000cb60 g     F .text	00000014 free
000141cc g     F .text	00000004 __sinit_lock_acquire
00015224 g     F .text	00000120 __multadd
00005c58 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
00022450 g     F .text	000001e4 OSTaskSuspend
000151fc g     F .text	00000028 _Bfree
0001d028 g     F .text	0000005c OS_TaskIdle
0002a772 g     O .rwdata	00000002 OSTmrTblSize
000203f8 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	001bda40 	call	1bda4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800134 	movhi	r2,4
 140:	10ae9604 	addi	r2,r2,-17832
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800134 	movhi	r2,4
 158:	10ae9604 	addi	r2,r2,-17832
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	001bdf00 	call	1bdf0 <OSIntExit>
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a86417 	ldw	r2,-24176(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a86417 	ldw	r2,-24176(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
     254:	d6899a14 	ori	gp,gp,9832
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     25c:	10b1d514 	ori	r2,r2,51028

    movhi r3, %hi(__bss_end)
     260:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     264:	18eed614 	ori	r3,r3,47960

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700026c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	001abfc0 	call	1abfc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	001ad900 	call	1ad90 <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000280>

00000284 <_ZN19ControllerInterfaceC1Ev>:
 *      Author: natha
 */

#include "ControllerInterface.h"

ControllerInterface::ControllerInterface(){
     284:	defffe04 	addi	sp,sp,-8
     288:	df000115 	stw	fp,4(sp)
     28c:	df000104 	addi	fp,sp,4
     290:	e13fff15 	stw	r4,-4(fp)
     294:	008000b4 	movhi	r2,2
     298:	109aaa04 	addi	r2,r2,27304
     29c:	e0ffff17 	ldw	r3,-4(fp)
     2a0:	18800015 	stw	r2,0(r3)
     2a4:	e0bfff17 	ldw	r2,-4(fp)
     2a8:	10000115 	stw	zero,4(r2)

};
     2ac:	0001883a 	nop
     2b0:	e037883a 	mov	sp,fp
     2b4:	df000017 	ldw	fp,0(sp)
     2b8:	dec00104 	addi	sp,sp,4
     2bc:	f800283a 	ret

000002c0 <_ZN19ControllerInterface15getActiveButtonEv>:

button_t ControllerInterface::getActiveButton(){
     2c0:	defffd04 	addi	sp,sp,-12
     2c4:	df000215 	stw	fp,8(sp)
     2c8:	df000204 	addi	fp,sp,8
     2cc:	e13fff15 	stw	r4,-4(fp)
	button_t temp = this->activeButton;
     2d0:	e0bfff17 	ldw	r2,-4(fp)
     2d4:	10800117 	ldw	r2,4(r2)
     2d8:	e0bffe15 	stw	r2,-8(fp)
	this->activeButton = BUTTON_NO_BUTTON;
     2dc:	e0bfff17 	ldw	r2,-4(fp)
     2e0:	10000115 	stw	zero,4(r2)
	return temp;
     2e4:	e0bffe17 	ldw	r2,-8(fp)
};
     2e8:	e037883a 	mov	sp,fp
     2ec:	df000017 	ldw	fp,0(sp)
     2f0:	dec00104 	addi	sp,sp,4
     2f4:	f800283a 	ret

000002f8 <_ZN6EntityC1Eii>:
 *      Author: natha
 */

#include "Entity.h"

Entity::Entity(int x, int y) : x(x), y(y) {
     2f8:	defffc04 	addi	sp,sp,-16
     2fc:	df000315 	stw	fp,12(sp)
     300:	df000304 	addi	fp,sp,12
     304:	e13ffd15 	stw	r4,-12(fp)
     308:	e17ffe15 	stw	r5,-8(fp)
     30c:	e1bfff15 	stw	r6,-4(fp)
     310:	008000b4 	movhi	r2,2
     314:	109ab304 	addi	r2,r2,27340
     318:	e0fffd17 	ldw	r3,-12(fp)
     31c:	18800015 	stw	r2,0(r3)
     320:	e0bffd17 	ldw	r2,-12(fp)
     324:	e0fffe17 	ldw	r3,-8(fp)
     328:	10c00115 	stw	r3,4(r2)
     32c:	e0bffd17 	ldw	r2,-12(fp)
     330:	e0ffff17 	ldw	r3,-4(fp)
     334:	10c00215 	stw	r3,8(r2)
     338:	e0bffd17 	ldw	r2,-12(fp)
     33c:	00c00044 	movi	r3,1
     340:	10c00805 	stb	r3,32(r2)
     344:	e0bffd17 	ldw	r2,-12(fp)
     348:	00c00104 	movi	r3,4
     34c:	10c00915 	stw	r3,36(r2)
     350:	e0bffd17 	ldw	r2,-12(fp)
     354:	00c00104 	movi	r3,4
     358:	10c00a15 	stw	r3,40(r2)
     35c:	e0bffd17 	ldw	r2,-12(fp)
     360:	00c00104 	movi	r3,4
     364:	10c00b15 	stw	r3,44(r2)

};
     368:	0001883a 	nop
     36c:	e037883a 	mov	sp,fp
     370:	df000017 	ldw	fp,0(sp)
     374:	dec00104 	addi	sp,sp,4
     378:	f800283a 	ret

0000037c <_ZN6Entity6updateEi>:

void Entity::update(int elapsedTime){
     37c:	defffc04 	addi	sp,sp,-16
     380:	dfc00315 	stw	ra,12(sp)
     384:	df000215 	stw	fp,8(sp)
     388:	df000204 	addi	fp,sp,8
     38c:	e13ffe15 	stw	r4,-8(fp)
     390:	e17fff15 	stw	r5,-4(fp)
	this->prev_dir = this->curr_dir;
     394:	e0bffe17 	ldw	r2,-8(fp)
     398:	10c00917 	ldw	r3,36(r2)
     39c:	e0bffe17 	ldw	r2,-8(fp)
     3a0:	10c00a15 	stw	r3,40(r2)
	this->prev_x = this->x;
     3a4:	e0bffe17 	ldw	r2,-8(fp)
     3a8:	10c00117 	ldw	r3,4(r2)
     3ac:	e0bffe17 	ldw	r2,-8(fp)
     3b0:	10c00315 	stw	r3,12(r2)
	this->prev_y = this->y;
     3b4:	e0bffe17 	ldw	r2,-8(fp)
     3b8:	10c00217 	ldw	r3,8(r2)
     3bc:	e0bffe17 	ldw	r2,-8(fp)
     3c0:	10c00415 	stw	r3,16(r2)
	this->_update(elapsedTime);
     3c4:	e0bffe17 	ldw	r2,-8(fp)
     3c8:	10800017 	ldw	r2,0(r2)
     3cc:	10800104 	addi	r2,r2,4
     3d0:	10800017 	ldw	r2,0(r2)
     3d4:	e17fff17 	ldw	r5,-4(fp)
     3d8:	e13ffe17 	ldw	r4,-8(fp)
     3dc:	103ee83a 	callr	r2
};
     3e0:	0001883a 	nop
     3e4:	e037883a 	mov	sp,fp
     3e8:	dfc00117 	ldw	ra,4(sp)
     3ec:	df000017 	ldw	fp,0(sp)
     3f0:	dec00204 	addi	sp,sp,8
     3f4:	f800283a 	ret

000003f8 <_ZN6Entity4drawEP14VideoInterface>:

void Entity::draw(VideoInterface* vi){
     3f8:	defffc04 	addi	sp,sp,-16
     3fc:	dfc00315 	stw	ra,12(sp)
     400:	df000215 	stw	fp,8(sp)
     404:	df000204 	addi	fp,sp,8
     408:	e13ffe15 	stw	r4,-8(fp)
     40c:	e17fff15 	stw	r5,-4(fp)
	if(this->redraw){
     410:	e0bffe17 	ldw	r2,-8(fp)
     414:	10800803 	ldbu	r2,32(r2)
     418:	10803fcc 	andi	r2,r2,255
     41c:	10000826 	beq	r2,zero,440 <_ZN6Entity4drawEP14VideoInterface+0x48>
		this->_draw(vi);
     420:	e0bffe17 	ldw	r2,-8(fp)
     424:	10800017 	ldw	r2,0(r2)
     428:	10800017 	ldw	r2,0(r2)
     42c:	e17fff17 	ldw	r5,-4(fp)
     430:	e13ffe17 	ldw	r4,-8(fp)
     434:	103ee83a 	callr	r2
		this->redraw = 0;
     438:	e0bffe17 	ldw	r2,-8(fp)
     43c:	10000805 	stb	zero,32(r2)
	}
}
     440:	0001883a 	nop
     444:	e037883a 	mov	sp,fp
     448:	dfc00117 	ldw	ra,4(sp)
     44c:	df000017 	ldw	fp,0(sp)
     450:	dec00204 	addi	sp,sp,8
     454:	f800283a 	ret

00000458 <_ZN6Entity10setNextDirE5E_DIR>:

void Entity::setNextDir(e_dir_t dir){
     458:	defffd04 	addi	sp,sp,-12
     45c:	df000215 	stw	fp,8(sp)
     460:	df000204 	addi	fp,sp,8
     464:	e13ffe15 	stw	r4,-8(fp)
     468:	e17fff15 	stw	r5,-4(fp)
	this->next_dir = dir;
     46c:	e0bffe17 	ldw	r2,-8(fp)
     470:	e0ffff17 	ldw	r3,-4(fp)
     474:	10c00b15 	stw	r3,44(r2)
	this->redraw = 1;
     478:	e0bffe17 	ldw	r2,-8(fp)
     47c:	00c00044 	movi	r3,1
     480:	10c00805 	stb	r3,32(r2)
};
     484:	0001883a 	nop
     488:	e037883a 	mov	sp,fp
     48c:	df000017 	ldw	fp,0(sp)
     490:	dec00104 	addi	sp,sp,4
     494:	f800283a 	ret

00000498 <_ZN6Entity10setCurrDirE5E_DIR>:

void Entity::setCurrDir(e_dir_t dir){
     498:	defffd04 	addi	sp,sp,-12
     49c:	df000215 	stw	fp,8(sp)
     4a0:	df000204 	addi	fp,sp,8
     4a4:	e13ffe15 	stw	r4,-8(fp)
     4a8:	e17fff15 	stw	r5,-4(fp)
	this->curr_dir = dir;
     4ac:	e0bffe17 	ldw	r2,-8(fp)
     4b0:	e0ffff17 	ldw	r3,-4(fp)
     4b4:	10c00915 	stw	r3,36(r2)
	this->redraw = 1;
     4b8:	e0bffe17 	ldw	r2,-8(fp)
     4bc:	00c00044 	movi	r3,1
     4c0:	10c00805 	stb	r3,32(r2)
};
     4c4:	0001883a 	nop
     4c8:	e037883a 	mov	sp,fp
     4cc:	df000017 	ldw	fp,0(sp)
     4d0:	dec00104 	addi	sp,sp,4
     4d4:	f800283a 	ret

000004d8 <_ZN6Entity6setPosEii>:

void Entity::setPos(int x, int y){
     4d8:	defffc04 	addi	sp,sp,-16
     4dc:	df000315 	stw	fp,12(sp)
     4e0:	df000304 	addi	fp,sp,12
     4e4:	e13ffd15 	stw	r4,-12(fp)
     4e8:	e17ffe15 	stw	r5,-8(fp)
     4ec:	e1bfff15 	stw	r6,-4(fp)
	this->x = x;
     4f0:	e0bffd17 	ldw	r2,-12(fp)
     4f4:	e0fffe17 	ldw	r3,-8(fp)
     4f8:	10c00115 	stw	r3,4(r2)
	this->y = y;
     4fc:	e0bffd17 	ldw	r2,-12(fp)
     500:	e0ffff17 	ldw	r3,-4(fp)
     504:	10c00215 	stw	r3,8(r2)
	this->redraw = 1;
     508:	e0bffd17 	ldw	r2,-12(fp)
     50c:	00c00044 	movi	r3,1
     510:	10c00805 	stb	r3,32(r2)
};
     514:	0001883a 	nop
     518:	e037883a 	mov	sp,fp
     51c:	df000017 	ldw	fp,0(sp)
     520:	dec00104 	addi	sp,sp,4
     524:	f800283a 	ret

00000528 <_ZN6Entity11getVelocityEv>:

int Entity::getVelocity(){
     528:	defffe04 	addi	sp,sp,-8
     52c:	df000115 	stw	fp,4(sp)
     530:	df000104 	addi	fp,sp,4
     534:	e13fff15 	stw	r4,-4(fp)
	return velocity;
     538:	e0bfff17 	ldw	r2,-4(fp)
     53c:	10800717 	ldw	r2,28(r2)
};
     540:	e037883a 	mov	sp,fp
     544:	df000017 	ldw	fp,0(sp)
     548:	dec00104 	addi	sp,sp,4
     54c:	f800283a 	ret

00000550 <_ZN6Entity4getXEv>:

int Entity::getX(){
     550:	defffe04 	addi	sp,sp,-8
     554:	df000115 	stw	fp,4(sp)
     558:	df000104 	addi	fp,sp,4
     55c:	e13fff15 	stw	r4,-4(fp)
	return x;
     560:	e0bfff17 	ldw	r2,-4(fp)
     564:	10800117 	ldw	r2,4(r2)
};
     568:	e037883a 	mov	sp,fp
     56c:	df000017 	ldw	fp,0(sp)
     570:	dec00104 	addi	sp,sp,4
     574:	f800283a 	ret

00000578 <_ZN6Entity4getYEv>:

int Entity::getY(){
     578:	defffe04 	addi	sp,sp,-8
     57c:	df000115 	stw	fp,4(sp)
     580:	df000104 	addi	fp,sp,4
     584:	e13fff15 	stw	r4,-4(fp)
	return y;
     588:	e0bfff17 	ldw	r2,-4(fp)
     58c:	10800217 	ldw	r2,8(r2)
};
     590:	e037883a 	mov	sp,fp
     594:	df000017 	ldw	fp,0(sp)
     598:	dec00104 	addi	sp,sp,4
     59c:	f800283a 	ret

000005a0 <_ZN6Entity10getCurrDirEv>:

e_dir_t Entity::getCurrDir(){
     5a0:	defffe04 	addi	sp,sp,-8
     5a4:	df000115 	stw	fp,4(sp)
     5a8:	df000104 	addi	fp,sp,4
     5ac:	e13fff15 	stw	r4,-4(fp)
	return curr_dir;
     5b0:	e0bfff17 	ldw	r2,-4(fp)
     5b4:	10800917 	ldw	r2,36(r2)
};
     5b8:	e037883a 	mov	sp,fp
     5bc:	df000017 	ldw	fp,0(sp)
     5c0:	dec00104 	addi	sp,sp,4
     5c4:	f800283a 	ret

000005c8 <_ZN6Entity10getNextDirEv>:

e_dir_t Entity::getNextDir(){
     5c8:	defffe04 	addi	sp,sp,-8
     5cc:	df000115 	stw	fp,4(sp)
     5d0:	df000104 	addi	fp,sp,4
     5d4:	e13fff15 	stw	r4,-4(fp)
	return next_dir;
     5d8:	e0bfff17 	ldw	r2,-4(fp)
     5dc:	10800b17 	ldw	r2,44(r2)
};
     5e0:	e037883a 	mov	sp,fp
     5e4:	df000017 	ldw	fp,0(sp)
     5e8:	dec00104 	addi	sp,sp,4
     5ec:	f800283a 	ret

000005f0 <_ZN4GameC1EP19ControllerInterfaceP14VideoInterface>:
 */

#include "Game.h"


Game::Game(ControllerInterface* control, VideoInterface* video) : ci(control), vi(video){
     5f0:	defffb04 	addi	sp,sp,-20
     5f4:	dfc00415 	stw	ra,16(sp)
     5f8:	df000315 	stw	fp,12(sp)
     5fc:	df000304 	addi	fp,sp,12
     600:	e13ffd15 	stw	r4,-12(fp)
     604:	e17ffe15 	stw	r5,-8(fp)
     608:	e1bfff15 	stw	r6,-4(fp)
     60c:	e0bffd17 	ldw	r2,-12(fp)
     610:	10000015 	stw	zero,0(r2)
     614:	e0bffd17 	ldw	r2,-12(fp)
     618:	e0fffe17 	ldw	r3,-8(fp)
     61c:	10c00115 	stw	r3,4(r2)
     620:	e0bffd17 	ldw	r2,-12(fp)
     624:	e0ffff17 	ldw	r3,-4(fp)
     628:	10c00215 	stw	r3,8(r2)
     62c:	e0bffd17 	ldw	r2,-12(fp)
     630:	10800304 	addi	r2,r2,12
     634:	1009883a 	mov	r4,r2
     638:	00045e00 	call	45e0 <_ZN6PacManC1Ev>
     63c:	e0bffd17 	ldw	r2,-12(fp)
     640:	10807f04 	addi	r2,r2,508
     644:	01560004 	movi	r5,22528
     648:	1009883a 	mov	r4,r2
     64c:	0003c380 	call	3c38 <_ZN5GhostC1Et>
     650:	e0bffd17 	ldw	r2,-12(fp)
     654:	1080da04 	addi	r2,r2,872
     658:	017777d4 	movui	r5,56799
     65c:	1009883a 	mov	r4,r2
     660:	0003c380 	call	3c38 <_ZN5GhostC1Et>
     664:	e0bffd17 	ldw	r2,-12(fp)
     668:	10813504 	addi	r2,r2,1236
     66c:	014f57c4 	movi	r5,15711
     670:	1009883a 	mov	r4,r2
     674:	0003c380 	call	3c38 <_ZN5GhostC1Et>
     678:	e0bffd17 	ldw	r2,-12(fp)
     67c:	10819004 	addi	r2,r2,1600
     680:	016ca814 	movui	r5,45728
     684:	1009883a 	mov	r4,r2
     688:	0003c380 	call	3c38 <_ZN5GhostC1Et>
     68c:	e0bffd17 	ldw	r2,-12(fp)
     690:	1001eb15 	stw	zero,1964(r2)
     694:	e0bffd17 	ldw	r2,-12(fp)
     698:	1001ec05 	stb	zero,1968(r2)
     69c:	e0bffd17 	ldw	r2,-12(fp)
     6a0:	1001ed15 	stw	zero,1972(r2)
     6a4:	e0bffd17 	ldw	r2,-12(fp)
     6a8:	1001ee15 	stw	zero,1976(r2)
     6ac:	e0bffd17 	ldw	r2,-12(fp)
     6b0:	1001ef15 	stw	zero,1980(r2)
     6b4:	e0bffd17 	ldw	r2,-12(fp)
     6b8:	1001f015 	stw	zero,1984(r2)
     6bc:	e0bffd17 	ldw	r2,-12(fp)
     6c0:	1001f115 	stw	zero,1988(r2)
     6c4:	e0bffd17 	ldw	r2,-12(fp)
     6c8:	1001f215 	stw	zero,1992(r2)
     6cc:	e0fffd17 	ldw	r3,-12(fp)
     6d0:	008000b4 	movhi	r2,2
     6d4:	109ab504 	addi	r2,r2,27348
     6d8:	18c1f304 	addi	r3,r3,1996
     6dc:	1009883a 	mov	r4,r2
     6e0:	00823704 	movi	r2,2268
     6e4:	100d883a 	mov	r6,r2
     6e8:	200b883a 	mov	r5,r4
     6ec:	1809883a 	mov	r4,r3
     6f0:	000d3800 	call	d380 <memcpy>
	vi->clear(0);
     6f4:	e0bffd17 	ldw	r2,-12(fp)
     6f8:	10800217 	ldw	r2,8(r2)
     6fc:	000b883a 	mov	r5,zero
     700:	1009883a 	mov	r4,r2
     704:	0004ea00 	call	4ea0 <_ZN14VideoInterface5clearEt>
};
     708:	0001883a 	nop
     70c:	e037883a 	mov	sp,fp
     710:	dfc00117 	ldw	ra,4(sp)
     714:	df000017 	ldw	fp,0(sp)
     718:	dec00204 	addi	sp,sp,8
     71c:	f800283a 	ret

00000720 <_ZL11buttonToDir8button_t>:

static e_dir_t buttonToDir(button_t button){
     720:	defffe04 	addi	sp,sp,-8
     724:	df000115 	stw	fp,4(sp)
     728:	df000104 	addi	fp,sp,4
     72c:	e13fff15 	stw	r4,-4(fp)
	switch(button){
     730:	e0bfff17 	ldw	r2,-4(fp)
     734:	10c000a0 	cmpeqi	r3,r2,2
     738:	18000c1e 	bne	r3,zero,76c <_ZL11buttonToDir8button_t+0x4c>
     73c:	10c000c8 	cmpgei	r3,r2,3
     740:	1800031e 	bne	r3,zero,750 <_ZL11buttonToDir8button_t+0x30>
     744:	10800060 	cmpeqi	r2,r2,1
     748:	1000061e 	bne	r2,zero,764 <_ZL11buttonToDir8button_t+0x44>
     74c:	00000d06 	br	784 <_ZL11buttonToDir8button_t+0x64>
     750:	10c000e0 	cmpeqi	r3,r2,3
     754:	1800071e 	bne	r3,zero,774 <_ZL11buttonToDir8button_t+0x54>
     758:	10800120 	cmpeqi	r2,r2,4
     75c:	1000071e 	bne	r2,zero,77c <_ZL11buttonToDir8button_t+0x5c>
     760:	00000806 	br	784 <_ZL11buttonToDir8button_t+0x64>
		case BUTTON_UP: 	return DIR_UP;
     764:	0005883a 	mov	r2,zero
     768:	00000706 	br	788 <_ZL11buttonToDir8button_t+0x68>
		case BUTTON_DOWN: 	return DIR_DOWN;
     76c:	00800044 	movi	r2,1
     770:	00000506 	br	788 <_ZL11buttonToDir8button_t+0x68>
		case BUTTON_LEFT: 	return DIR_LEFT;
     774:	00800084 	movi	r2,2
     778:	00000306 	br	788 <_ZL11buttonToDir8button_t+0x68>
		case BUTTON_RIGHT: 	return DIR_RIGHT;
     77c:	008000c4 	movi	r2,3
     780:	00000106 	br	788 <_ZL11buttonToDir8button_t+0x68>
		default: 			return DIR_NO_DIR;
     784:	00800104 	movi	r2,4
	}
}
     788:	e037883a 	mov	sp,fp
     78c:	df000017 	ldw	fp,0(sp)
     790:	dec00104 	addi	sp,sp,4
     794:	f800283a 	ret

00000798 <_ZL23distanceBetweenEntitiesP6EntityS0_>:

static double distanceBetweenEntities(Entity *en1, Entity *en2){
     798:	defff004 	addi	sp,sp,-64
     79c:	dfc00f15 	stw	ra,60(sp)
     7a0:	df000e15 	stw	fp,56(sp)
     7a4:	dc400d15 	stw	r17,52(sp)
     7a8:	dc000c15 	stw	r16,48(sp)
     7ac:	df000e04 	addi	fp,sp,56
     7b0:	e13ffc15 	stw	r4,-16(fp)
     7b4:	e17ffd15 	stw	r5,-12(fp)
	double x1 = (double)en1->getX();
     7b8:	e13ffc17 	ldw	r4,-16(fp)
     7bc:	00005500 	call	550 <_ZN6Entity4getXEv>
     7c0:	1009883a 	mov	r4,r2
     7c4:	000c2000 	call	c200 <__floatsidf>
     7c8:	1009883a 	mov	r4,r2
     7cc:	180b883a 	mov	r5,r3
     7d0:	e13ff215 	stw	r4,-56(fp)
     7d4:	e17ff315 	stw	r5,-52(fp)
	double y1 = (double)en1->getY();
     7d8:	e13ffc17 	ldw	r4,-16(fp)
     7dc:	00005780 	call	578 <_ZN6Entity4getYEv>
     7e0:	1009883a 	mov	r4,r2
     7e4:	000c2000 	call	c200 <__floatsidf>
     7e8:	1009883a 	mov	r4,r2
     7ec:	180b883a 	mov	r5,r3
     7f0:	e13ff415 	stw	r4,-48(fp)
     7f4:	e17ff515 	stw	r5,-44(fp)
	double x2 = (double)en2->getX();
     7f8:	e13ffd17 	ldw	r4,-12(fp)
     7fc:	00005500 	call	550 <_ZN6Entity4getXEv>
     800:	1009883a 	mov	r4,r2
     804:	000c2000 	call	c200 <__floatsidf>
     808:	1009883a 	mov	r4,r2
     80c:	180b883a 	mov	r5,r3
     810:	e13ff615 	stw	r4,-40(fp)
     814:	e17ff715 	stw	r5,-36(fp)
	double y2 = (double)en2->getY();
     818:	e13ffd17 	ldw	r4,-12(fp)
     81c:	00005780 	call	578 <_ZN6Entity4getYEv>
     820:	1009883a 	mov	r4,r2
     824:	000c2000 	call	c200 <__floatsidf>
     828:	1009883a 	mov	r4,r2
     82c:	180b883a 	mov	r5,r3
     830:	e13ff815 	stw	r4,-32(fp)
     834:	e17ff915 	stw	r5,-28(fp)
	double ans = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2));
     838:	e1bff217 	ldw	r6,-56(fp)
     83c:	e1fff317 	ldw	r7,-52(fp)
     840:	e13ff617 	ldw	r4,-40(fp)
     844:	e17ff717 	ldw	r5,-36(fp)
     848:	000b8840 	call	b884 <__subdf3>
     84c:	1009883a 	mov	r4,r2
     850:	180b883a 	mov	r5,r3
     854:	2005883a 	mov	r2,r4
     858:	2807883a 	mov	r3,r5
     85c:	000d883a 	mov	r6,zero
     860:	01d00034 	movhi	r7,16384
     864:	1009883a 	mov	r4,r2
     868:	180b883a 	mov	r5,r3
     86c:	00078240 	call	7824 <pow>
     870:	1021883a 	mov	r16,r2
     874:	1823883a 	mov	r17,r3
     878:	e1bff417 	ldw	r6,-48(fp)
     87c:	e1fff517 	ldw	r7,-44(fp)
     880:	e13ff817 	ldw	r4,-32(fp)
     884:	e17ff917 	ldw	r5,-28(fp)
     888:	000b8840 	call	b884 <__subdf3>
     88c:	1009883a 	mov	r4,r2
     890:	180b883a 	mov	r5,r3
     894:	2005883a 	mov	r2,r4
     898:	2807883a 	mov	r3,r5
     89c:	000d883a 	mov	r6,zero
     8a0:	01d00034 	movhi	r7,16384
     8a4:	1009883a 	mov	r4,r2
     8a8:	180b883a 	mov	r5,r3
     8ac:	00078240 	call	7824 <pow>
     8b0:	1009883a 	mov	r4,r2
     8b4:	180b883a 	mov	r5,r3
     8b8:	200d883a 	mov	r6,r4
     8bc:	280f883a 	mov	r7,r5
     8c0:	8009883a 	mov	r4,r16
     8c4:	880b883a 	mov	r5,r17
     8c8:	0009d800 	call	9d80 <__adddf3>
     8cc:	1009883a 	mov	r4,r2
     8d0:	180b883a 	mov	r5,r3
     8d4:	2005883a 	mov	r2,r4
     8d8:	2807883a 	mov	r3,r5
     8dc:	1009883a 	mov	r4,r2
     8e0:	180b883a 	mov	r5,r3
     8e4:	0007ce80 	call	7ce8 <sqrt>
     8e8:	e0bffa15 	stw	r2,-24(fp)
     8ec:	e0fffb15 	stw	r3,-20(fp)
	printf("Distance: %f \n\r", ans);
     8f0:	e17ffa17 	ldw	r5,-24(fp)
     8f4:	e1bffb17 	ldw	r6,-20(fp)
     8f8:	010000b4 	movhi	r4,2
     8fc:	211cec04 	addi	r4,r4,29616
     900:	000d6200 	call	d620 <printf>
	return ans;
     904:	e0bffa17 	ldw	r2,-24(fp)
     908:	e0fffb17 	ldw	r3,-20(fp)
     90c:	1009883a 	mov	r4,r2
     910:	180b883a 	mov	r5,r3
}
     914:	2005883a 	mov	r2,r4
     918:	2807883a 	mov	r3,r5
     91c:	e6fffe04 	addi	sp,fp,-8
     920:	dfc00317 	ldw	ra,12(sp)
     924:	df000217 	ldw	fp,8(sp)
     928:	dc400117 	ldw	r17,4(sp)
     92c:	dc000017 	ldw	r16,0(sp)
     930:	dec00404 	addi	sp,sp,16
     934:	f800283a 	ret

00000938 <_ZN4Game6updateEi>:

void Game::update(int elapsedTime){
     938:	defff104 	addi	sp,sp,-60
     93c:	dfc00e15 	stw	ra,56(sp)
     940:	df000d15 	stw	fp,52(sp)
     944:	dc000c15 	stw	r16,48(sp)
     948:	df000d04 	addi	fp,sp,52
     94c:	e13ffd15 	stw	r4,-12(fp)
     950:	e17ffe15 	stw	r5,-8(fp)
	button_t button = ci->getActiveButton();
     954:	e0bffd17 	ldw	r2,-12(fp)
     958:	10800117 	ldw	r2,4(r2)
     95c:	1009883a 	mov	r4,r2
     960:	00002c00 	call	2c0 <_ZN19ControllerInterface15getActiveButtonEv>
     964:	e0bff915 	stw	r2,-28(fp)

	if(button == BUTTON_RESET){
     968:	e0bff917 	ldw	r2,-28(fp)
     96c:	108001d8 	cmpnei	r2,r2,7
     970:	1000031e 	bne	r2,zero,980 <_ZN4Game6updateEi+0x48>
		state = LEVEL_RESET;
     974:	e0bffd17 	ldw	r2,-12(fp)
     978:	00c000c4 	movi	r3,3
     97c:	10c1eb15 	stw	r3,1964(r2)
	}
	switch(state){
     980:	e0bffd17 	ldw	r2,-12(fp)
     984:	1081eb17 	ldw	r2,1964(r2)
     988:	10c00228 	cmpgeui	r3,r2,8
     98c:	18016d1e 	bne	r3,zero,f44 <_ZN4Game6updateEi+0x60c>
     990:	100690ba 	slli	r3,r2,2
     994:	00800034 	movhi	r2,0
     998:	10826a04 	addi	r2,r2,2472
     99c:	1885883a 	add	r2,r3,r2
     9a0:	10800017 	ldw	r2,0(r2)
     9a4:	1000683a 	jmp	r2
     9a8:	000009c8 	cmpgei	zero,zero,39
     9ac:	00000f44 	movi	zero,61
     9b0:	00000a80 	call	a8 <OSCtxSw_SWITCH_PC+0x68>
     9b4:	00000e4c 	andi	zero,zero,57
     9b8:	00000a9c 	xori	zero,zero,42
     9bc:	00000f44 	movi	zero,61
     9c0:	00000b34 	movhi	zero,44
     9c4:	00000e28 	cmpgeui	zero,zero,56
		case GAME_INIT: {
			printf("Game: Initializing\n\r");
     9c8:	010000b4 	movhi	r4,2
     9cc:	211cf004 	addi	r4,r4,29632
     9d0:	000d6200 	call	d620 <printf>
			// Count pacdots in on map
			for(int h = 0; h < 21; h++){
     9d4:	e03ff315 	stw	zero,-52(fp)
     9d8:	e0bff317 	ldw	r2,-52(fp)
     9dc:	10800548 	cmpgei	r2,r2,21
     9e0:	10001d1e 	bne	r2,zero,a58 <_ZN4Game6updateEi+0x120>
				for(int v = 0; v < 27; v++){
     9e4:	e03ff415 	stw	zero,-48(fp)
     9e8:	e0bff417 	ldw	r2,-48(fp)
     9ec:	108006c8 	cmpgei	r2,r2,27
     9f0:	1000151e 	bne	r2,zero,a48 <_ZN4Game6updateEi+0x110>
					if(map[v][h] == pd)
     9f4:	e0fffd17 	ldw	r3,-12(fp)
     9f8:	e0bff417 	ldw	r2,-48(fp)
     9fc:	11000564 	muli	r4,r2,21
     a00:	e0bff317 	ldw	r2,-52(fp)
     a04:	2085883a 	add	r2,r4,r2
     a08:	10807cc4 	addi	r2,r2,499
     a0c:	1085883a 	add	r2,r2,r2
     a10:	1085883a 	add	r2,r2,r2
     a14:	1885883a 	add	r2,r3,r2
     a18:	10800017 	ldw	r2,0(r2)
     a1c:	10800058 	cmpnei	r2,r2,1
     a20:	1000051e 	bne	r2,zero,a38 <_ZN4Game6updateEi+0x100>
						max_pds++;
     a24:	e0bffd17 	ldw	r2,-12(fp)
     a28:	1081f117 	ldw	r2,1988(r2)
     a2c:	10c00044 	addi	r3,r2,1
     a30:	e0bffd17 	ldw	r2,-12(fp)
     a34:	10c1f115 	stw	r3,1988(r2)
	switch(state){
		case GAME_INIT: {
			printf("Game: Initializing\n\r");
			// Count pacdots in on map
			for(int h = 0; h < 21; h++){
				for(int v = 0; v < 27; v++){
     a38:	e0bff417 	ldw	r2,-48(fp)
     a3c:	10800044 	addi	r2,r2,1
     a40:	e0bff415 	stw	r2,-48(fp)
     a44:	003fe806 	br	9e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009e8>
	}
	switch(state){
		case GAME_INIT: {
			printf("Game: Initializing\n\r");
			// Count pacdots in on map
			for(int h = 0; h < 21; h++){
     a48:	e0bff317 	ldw	r2,-52(fp)
     a4c:	10800044 	addi	r2,r2,1
     a50:	e0bff315 	stw	r2,-52(fp)
     a54:	003fe006 	br	9d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70009d8>
				for(int v = 0; v < 27; v++){
					if(map[v][h] == pd)
						max_pds++;
				}
			}
			printf("Max PacDot count in maze: %d \n\r", max_pds);
     a58:	e0bffd17 	ldw	r2,-12(fp)
     a5c:	1081f117 	ldw	r2,1988(r2)
     a60:	100b883a 	mov	r5,r2
     a64:	010000b4 	movhi	r4,2
     a68:	211cf604 	addi	r4,r4,29656
     a6c:	000d6200 	call	d620 <printf>

			state = HOMESCREEN_INIT; // FIRST DRAW
     a70:	e0bffd17 	ldw	r2,-12(fp)
     a74:	00c00044 	movi	r3,1
     a78:	10c1eb15 	stw	r3,1964(r2)
			break;
     a7c:	00013106 	br	f44 <_ZN4Game6updateEi+0x60c>
		}
		case HOMESCREEN: {
			if(button == BUTTON_ENTER){
     a80:	e0bff917 	ldw	r2,-28(fp)
     a84:	10800218 	cmpnei	r2,r2,8
     a88:	10012b1e 	bne	r2,zero,f38 <_ZN4Game6updateEi+0x600>
				state = LEVEL_START;
     a8c:	e0bffd17 	ldw	r2,-12(fp)
     a90:	00c00104 	movi	r3,4
     a94:	10c1eb15 	stw	r3,1964(r2)
			}
//			state = LEVEL_START;
			break;
     a98:	00012706 	br	f38 <_ZN4Game6updateEi+0x600>
		}
		case LEVEL_START: {
			printf("Game: Level started\n\r");
     a9c:	010000b4 	movhi	r4,2
     aa0:	211cfe04 	addi	r4,r4,29688
     aa4:	000d6200 	call	d620 <printf>

			// Spawn in field
			setInSquare(&player, 10, 20);
     aa8:	e0bffd17 	ldw	r2,-12(fp)
     aac:	10800304 	addi	r2,r2,12
     ab0:	01c00504 	movi	r7,20
     ab4:	01800284 	movi	r6,10
     ab8:	100b883a 	mov	r5,r2
     abc:	e13ffd17 	ldw	r4,-12(fp)
     ac0:	0001a940 	call	1a94 <_ZN4Game11setInSquareEP6Entityii>
			unJail(&ghosts[0]);
     ac4:	e0bffd17 	ldw	r2,-12(fp)
     ac8:	10807f04 	addi	r2,r2,508
     acc:	100b883a 	mov	r5,r2
     ad0:	e13ffd17 	ldw	r4,-12(fp)
     ad4:	000199c0 	call	199c <_ZN4Game6unJailEP5Ghost>

			// Jailed
			jail(&ghosts[1]);
     ad8:	e0bffd17 	ldw	r2,-12(fp)
     adc:	1080da04 	addi	r2,r2,872
     ae0:	100b883a 	mov	r5,r2
     ae4:	e13ffd17 	ldw	r4,-12(fp)
     ae8:	00019ec0 	call	19ec <_ZN4Game4jailEP5Ghost>
			jail(&ghosts[2]);
     aec:	e0bffd17 	ldw	r2,-12(fp)
     af0:	10813504 	addi	r2,r2,1236
     af4:	100b883a 	mov	r5,r2
     af8:	e13ffd17 	ldw	r4,-12(fp)
     afc:	00019ec0 	call	19ec <_ZN4Game4jailEP5Ghost>
			jail(&ghosts[3]);
     b00:	e0bffd17 	ldw	r2,-12(fp)
     b04:	10819004 	addi	r2,r2,1600
     b08:	100b883a 	mov	r5,r2
     b0c:	e13ffd17 	ldw	r4,-12(fp)
     b10:	00019ec0 	call	19ec <_ZN4Game4jailEP5Ghost>

			old_hscore = 0; // redraw
     b14:	e0bffd17 	ldw	r2,-12(fp)
     b18:	1001f015 	stw	zero,1984(r2)
			time = 0;
     b1c:	e0bffd17 	ldw	r2,-12(fp)
     b20:	10000015 	stw	zero,0(r2)

			state = LEVEL_FIRST_DRAW;
     b24:	e0bffd17 	ldw	r2,-12(fp)
     b28:	00c00144 	movi	r3,5
     b2c:	10c1eb15 	stw	r3,1964(r2)
			break;
     b30:	00010406 	br	f44 <_ZN4Game6updateEi+0x60c>
		}
		case LEVEL_RUN: {
			time += elapsedTime;
     b34:	e0bffd17 	ldw	r2,-12(fp)
     b38:	10c00017 	ldw	r3,0(r2)
     b3c:	e0bffe17 	ldw	r2,-8(fp)
     b40:	1887883a 	add	r3,r3,r2
     b44:	e0bffd17 	ldw	r2,-12(fp)
     b48:	10c00015 	stw	r3,0(r2)

			e_dir_t next = buttonToDir(button);
     b4c:	e13ff917 	ldw	r4,-28(fp)
     b50:	00007200 	call	720 <_ZL11buttonToDir8button_t>
     b54:	e0bffa15 	stw	r2,-24(fp)
			if(next != DIR_NO_DIR){
     b58:	e0bffa17 	ldw	r2,-24(fp)
     b5c:	10800120 	cmpeqi	r2,r2,4
     b60:	10000a1e 	bne	r2,zero,b8c <_ZN4Game6updateEi+0x254>
				printf("press '%d' \n\r", next);
     b64:	e0bffa17 	ldw	r2,-24(fp)
     b68:	100b883a 	mov	r5,r2
     b6c:	010000b4 	movhi	r4,2
     b70:	211d0404 	addi	r4,r4,29712
     b74:	000d6200 	call	d620 <printf>
				player.setNextDir(next);
     b78:	e0bffd17 	ldw	r2,-12(fp)
     b7c:	10800304 	addi	r2,r2,12
     b80:	e17ffa17 	ldw	r5,-24(fp)
     b84:	1009883a 	mov	r4,r2
     b88:	00004580 	call	458 <_ZN6Entity10setNextDirE5E_DIR>
			}

			updateMovement(&player, elapsedTime);
     b8c:	e0bffd17 	ldw	r2,-12(fp)
     b90:	10800304 	addi	r2,r2,12
     b94:	e1bffe17 	ldw	r6,-8(fp)
     b98:	100b883a 	mov	r5,r2
     b9c:	e13ffd17 	ldw	r4,-12(fp)
     ba0:	00020580 	call	2058 <_ZN4Game14updateMovementEP6Entityi>

			for(int g = 0; g < 4; g++){
     ba4:	e03ff515 	stw	zero,-44(fp)
     ba8:	e0bff517 	ldw	r2,-44(fp)
     bac:	10800108 	cmpgei	r2,r2,4
     bb0:	1000371e 	bne	r2,zero,c90 <_ZN4Game6updateEi+0x358>
				if(distanceBetweenEntities(&player, &ghosts[g]) < 10.0){
     bb4:	e0bffd17 	ldw	r2,-12(fp)
     bb8:	11000304 	addi	r4,r2,12
     bbc:	e0bff517 	ldw	r2,-44(fp)
     bc0:	10805b24 	muli	r2,r2,364
     bc4:	10807f04 	addi	r2,r2,508
     bc8:	e0fffd17 	ldw	r3,-12(fp)
     bcc:	1885883a 	add	r2,r3,r2
     bd0:	100b883a 	mov	r5,r2
     bd4:	00007980 	call	798 <_ZL23distanceBetweenEntitiesP6EntityS0_>
     bd8:	1011883a 	mov	r8,r2
     bdc:	1813883a 	mov	r9,r3
     be0:	04000044 	movi	r16,1
     be4:	000d883a 	mov	r6,zero
     be8:	01d00934 	movhi	r7,16420
     bec:	4009883a 	mov	r4,r8
     bf0:	480b883a 	mov	r5,r9
     bf4:	000b0780 	call	b078 <__ledf2>
     bf8:	10000116 	blt	r2,zero,c00 <_ZN4Game6updateEi+0x2c8>
     bfc:	0021883a 	mov	r16,zero
     c00:	80803fcc 	andi	r2,r16,255
     c04:	10000326 	beq	r2,zero,c14 <_ZN4Game6updateEi+0x2dc>
					state = LEVEL_DIED;
     c08:	e0bffd17 	ldw	r2,-12(fp)
     c0c:	00c001c4 	movi	r3,7
     c10:	10c1eb15 	stw	r3,1964(r2)
				}
				if(!ghosts[g].isJailed())
     c14:	e0bff517 	ldw	r2,-44(fp)
     c18:	10805b24 	muli	r2,r2,364
     c1c:	10807f04 	addi	r2,r2,508
     c20:	e0fffd17 	ldw	r3,-12(fp)
     c24:	1885883a 	add	r2,r3,r2
     c28:	1009883a 	mov	r4,r2
     c2c:	000405c0 	call	405c <_ZN5Ghost8isJailedEv>
     c30:	1080005c 	xori	r2,r2,1
     c34:	10803fcc 	andi	r2,r2,255
     c38:	10000826 	beq	r2,zero,c5c <_ZN4Game6updateEi+0x324>
					randomWalkAlgorithm(&ghosts[g]);
     c3c:	e0bff517 	ldw	r2,-44(fp)
     c40:	10805b24 	muli	r2,r2,364
     c44:	10807f04 	addi	r2,r2,508
     c48:	e0fffd17 	ldw	r3,-12(fp)
     c4c:	1885883a 	add	r2,r3,r2
     c50:	100b883a 	mov	r5,r2
     c54:	e13ffd17 	ldw	r4,-12(fp)
     c58:	000110c0 	call	110c <_ZN4Game19randomWalkAlgorithmEP5Ghost>
				updateMovement(&ghosts[g], elapsedTime);
     c5c:	e0bff517 	ldw	r2,-44(fp)
     c60:	10805b24 	muli	r2,r2,364
     c64:	10807f04 	addi	r2,r2,508
     c68:	e0fffd17 	ldw	r3,-12(fp)
     c6c:	1885883a 	add	r2,r3,r2
     c70:	e1bffe17 	ldw	r6,-8(fp)
     c74:	100b883a 	mov	r5,r2
     c78:	e13ffd17 	ldw	r4,-12(fp)
     c7c:	00020580 	call	2058 <_ZN4Game14updateMovementEP6Entityi>
				player.setNextDir(next);
			}

			updateMovement(&player, elapsedTime);

			for(int g = 0; g < 4; g++){
     c80:	e0bff517 	ldw	r2,-44(fp)
     c84:	10800044 	addi	r2,r2,1
     c88:	e0bff515 	stw	r2,-44(fp)
     c8c:	003fc606 	br	ba8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000ba8>
				if(!ghosts[g].isJailed())
					randomWalkAlgorithm(&ghosts[g]);
				updateMovement(&ghosts[g], elapsedTime);
			}

			for(int g = 1; g < 4; g++){
     c90:	00800044 	movi	r2,1
     c94:	e0bff615 	stw	r2,-40(fp)
     c98:	e0bff617 	ldw	r2,-40(fp)
     c9c:	10800108 	cmpgei	r2,r2,4
     ca0:	10001f1e 	bne	r2,zero,d20 <_ZN4Game6updateEi+0x3e8>
				if(time > (10000 * g) && ghosts[g].isJailed()) // each 10 seconds release new ghost
     ca4:	e0bffd17 	ldw	r2,-12(fp)
     ca8:	10800017 	ldw	r2,0(r2)
     cac:	e0fff617 	ldw	r3,-40(fp)
     cb0:	18c9c424 	muli	r3,r3,10000
     cb4:	18800b0e 	bge	r3,r2,ce4 <_ZN4Game6updateEi+0x3ac>
     cb8:	e0bff617 	ldw	r2,-40(fp)
     cbc:	10805b24 	muli	r2,r2,364
     cc0:	10807f04 	addi	r2,r2,508
     cc4:	e0fffd17 	ldw	r3,-12(fp)
     cc8:	1885883a 	add	r2,r3,r2
     ccc:	1009883a 	mov	r4,r2
     cd0:	000405c0 	call	405c <_ZN5Ghost8isJailedEv>
     cd4:	10803fcc 	andi	r2,r2,255
     cd8:	10000226 	beq	r2,zero,ce4 <_ZN4Game6updateEi+0x3ac>
     cdc:	00800044 	movi	r2,1
     ce0:	00000106 	br	ce8 <_ZN4Game6updateEi+0x3b0>
     ce4:	0005883a 	mov	r2,zero
     ce8:	10803fcc 	andi	r2,r2,255
     cec:	10000826 	beq	r2,zero,d10 <_ZN4Game6updateEi+0x3d8>
					unJail(&ghosts[g]);
     cf0:	e0bff617 	ldw	r2,-40(fp)
     cf4:	10805b24 	muli	r2,r2,364
     cf8:	10807f04 	addi	r2,r2,508
     cfc:	e0fffd17 	ldw	r3,-12(fp)
     d00:	1885883a 	add	r2,r3,r2
     d04:	100b883a 	mov	r5,r2
     d08:	e13ffd17 	ldw	r4,-12(fp)
     d0c:	000199c0 	call	199c <_ZN4Game6unJailEP5Ghost>
				if(!ghosts[g].isJailed())
					randomWalkAlgorithm(&ghosts[g]);
				updateMovement(&ghosts[g], elapsedTime);
			}

			for(int g = 1; g < 4; g++){
     d10:	e0bff617 	ldw	r2,-40(fp)
     d14:	10800044 	addi	r2,r2,1
     d18:	e0bff615 	stw	r2,-40(fp)
     d1c:	003fde06 	br	c98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000c98>
				if(time > (10000 * g) && ghosts[g].isJailed()) // each 10 seconds release new ghost
					unJail(&ghosts[g]);
			}


			int xs = player.getX() / 8.0;
     d20:	e0bffd17 	ldw	r2,-12(fp)
     d24:	10800304 	addi	r2,r2,12
     d28:	1009883a 	mov	r4,r2
     d2c:	00005500 	call	550 <_ZN6Entity4getXEv>
     d30:	1009883a 	mov	r4,r2
     d34:	0009c5c0 	call	9c5c <__floatsisf>
     d38:	1007883a 	mov	r3,r2
     d3c:	00904034 	movhi	r2,16640
     d40:	1885fff2 	custom	255,r2,r3,r2
     d44:	1009883a 	mov	r4,r2
     d48:	0009bec0 	call	9bec <__fixsfsi>
     d4c:	e0bffb15 	stw	r2,-20(fp)
			int ys = player.getY() / 8.0;
     d50:	e0bffd17 	ldw	r2,-12(fp)
     d54:	10800304 	addi	r2,r2,12
     d58:	1009883a 	mov	r4,r2
     d5c:	00005780 	call	578 <_ZN6Entity4getYEv>
     d60:	1009883a 	mov	r4,r2
     d64:	0009c5c0 	call	9c5c <__floatsisf>
     d68:	1007883a 	mov	r3,r2
     d6c:	00904034 	movhi	r2,16640
     d70:	1885fff2 	custom	255,r2,r3,r2
     d74:	1009883a 	mov	r4,r2
     d78:	0009bec0 	call	9bec <__fixsfsi>
     d7c:	e0bffc15 	stw	r2,-16(fp)
			if(map[ys][xs] == pd){
     d80:	e0fffd17 	ldw	r3,-12(fp)
     d84:	e0bffc17 	ldw	r2,-16(fp)
     d88:	11000564 	muli	r4,r2,21
     d8c:	e0bffb17 	ldw	r2,-20(fp)
     d90:	2085883a 	add	r2,r4,r2
     d94:	10807cc4 	addi	r2,r2,499
     d98:	1085883a 	add	r2,r2,r2
     d9c:	1085883a 	add	r2,r2,r2
     da0:	1885883a 	add	r2,r3,r2
     da4:	10800017 	ldw	r2,0(r2)
     da8:	10800058 	cmpnei	r2,r2,1
     dac:	1000151e 	bne	r2,zero,e04 <_ZN4Game6updateEi+0x4cc>
				cur_score += PAC_DOT_POINTS;
     db0:	e0bffd17 	ldw	r2,-12(fp)
     db4:	1081ed17 	ldw	r2,1972(r2)
     db8:	10c00284 	addi	r3,r2,10
     dbc:	e0bffd17 	ldw	r2,-12(fp)
     dc0:	10c1ed15 	stw	r3,1972(r2)
				cur_pds++;
     dc4:	e0bffd17 	ldw	r2,-12(fp)
     dc8:	1081f217 	ldw	r2,1992(r2)
     dcc:	10c00044 	addi	r3,r2,1
     dd0:	e0bffd17 	ldw	r2,-12(fp)
     dd4:	10c1f215 	stw	r3,1992(r2)
				map[ys][xs] = ed;
     dd8:	e0fffd17 	ldw	r3,-12(fp)
     ddc:	e0bffc17 	ldw	r2,-16(fp)
     de0:	11000564 	muli	r4,r2,21
     de4:	e0bffb17 	ldw	r2,-20(fp)
     de8:	2085883a 	add	r2,r4,r2
     dec:	10807cc4 	addi	r2,r2,499
     df0:	1085883a 	add	r2,r2,r2
     df4:	1085883a 	add	r2,r2,r2
     df8:	1885883a 	add	r2,r3,r2
     dfc:	00c00084 	movi	r3,2
     e00:	10c00015 	stw	r3,0(r2)
			}
			if(cur_pds >= max_pds){
     e04:	e0bffd17 	ldw	r2,-12(fp)
     e08:	10c1f217 	ldw	r3,1992(r2)
     e0c:	e0bffd17 	ldw	r2,-12(fp)
     e10:	1081f117 	ldw	r2,1988(r2)
     e14:	18804a16 	blt	r3,r2,f40 <_ZN4Game6updateEi+0x608>
				state = LEVEL_RESET;
     e18:	e0bffd17 	ldw	r2,-12(fp)
     e1c:	00c000c4 	movi	r3,3
     e20:	10c1eb15 	stw	r3,1964(r2)
			}
			break;
     e24:	00004606 	br	f40 <_ZN4Game6updateEi+0x608>
		}
		case LEVEL_DIED: {
			printf("Died \n\r");
     e28:	010000b4 	movhi	r4,2
     e2c:	211d0804 	addi	r4,r4,29728
     e30:	000d6200 	call	d620 <printf>
			cur_score = 0;
     e34:	e0bffd17 	ldw	r2,-12(fp)
     e38:	1001ed15 	stw	zero,1972(r2)
			state = LEVEL_RESET;
     e3c:	e0bffd17 	ldw	r2,-12(fp)
     e40:	00c000c4 	movi	r3,3
     e44:	10c1eb15 	stw	r3,1964(r2)
			break;
     e48:	00003e06 	br	f44 <_ZN4Game6updateEi+0x60c>
		}
		case LEVEL_RESET: {
			printf("Game: Level reset\n\r");
     e4c:	010000b4 	movhi	r4,2
     e50:	211d0a04 	addi	r4,r4,29736
     e54:	000d6200 	call	d620 <printf>
			for(int h = 0; h < 21; h++){
     e58:	e03ff715 	stw	zero,-36(fp)
     e5c:	e0bff717 	ldw	r2,-36(fp)
     e60:	10800548 	cmpgei	r2,r2,21
     e64:	1000231e 	bne	r2,zero,ef4 <_ZN4Game6updateEi+0x5bc>
				for(int v = 0; v < 27; v++){
     e68:	e03ff815 	stw	zero,-32(fp)
     e6c:	e0bff817 	ldw	r2,-32(fp)
     e70:	108006c8 	cmpgei	r2,r2,27
     e74:	10001b1e 	bne	r2,zero,ee4 <_ZN4Game6updateEi+0x5ac>
					if(map[v][h] == ed)
     e78:	e0fffd17 	ldw	r3,-12(fp)
     e7c:	e0bff817 	ldw	r2,-32(fp)
     e80:	11000564 	muli	r4,r2,21
     e84:	e0bff717 	ldw	r2,-36(fp)
     e88:	2085883a 	add	r2,r4,r2
     e8c:	10807cc4 	addi	r2,r2,499
     e90:	1085883a 	add	r2,r2,r2
     e94:	1085883a 	add	r2,r2,r2
     e98:	1885883a 	add	r2,r3,r2
     e9c:	10800017 	ldw	r2,0(r2)
     ea0:	10800098 	cmpnei	r2,r2,2
     ea4:	10000b1e 	bne	r2,zero,ed4 <_ZN4Game6updateEi+0x59c>
						map[v][h] = pd;
     ea8:	e0fffd17 	ldw	r3,-12(fp)
     eac:	e0bff817 	ldw	r2,-32(fp)
     eb0:	11000564 	muli	r4,r2,21
     eb4:	e0bff717 	ldw	r2,-36(fp)
     eb8:	2085883a 	add	r2,r4,r2
     ebc:	10807cc4 	addi	r2,r2,499
     ec0:	1085883a 	add	r2,r2,r2
     ec4:	1085883a 	add	r2,r2,r2
     ec8:	1885883a 	add	r2,r3,r2
     ecc:	00c00044 	movi	r3,1
     ed0:	10c00015 	stw	r3,0(r2)
			break;
		}
		case LEVEL_RESET: {
			printf("Game: Level reset\n\r");
			for(int h = 0; h < 21; h++){
				for(int v = 0; v < 27; v++){
     ed4:	e0bff817 	ldw	r2,-32(fp)
     ed8:	10800044 	addi	r2,r2,1
     edc:	e0bff815 	stw	r2,-32(fp)
     ee0:	003fe206 	br	e6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e6c>
			state = LEVEL_RESET;
			break;
		}
		case LEVEL_RESET: {
			printf("Game: Level reset\n\r");
			for(int h = 0; h < 21; h++){
     ee4:	e0bff717 	ldw	r2,-36(fp)
     ee8:	10800044 	addi	r2,r2,1
     eec:	e0bff715 	stw	r2,-36(fp)
     ef0:	003fda06 	br	e5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e5c>
				for(int v = 0; v < 27; v++){
					if(map[v][h] == ed)
						map[v][h] = pd;
				}
			}
			cur_pds = 0;
     ef4:	e0bffd17 	ldw	r2,-12(fp)
     ef8:	1001f215 	stw	zero,1992(r2)
			player.setCurrDir(DIR_NO_DIR);
     efc:	e0bffd17 	ldw	r2,-12(fp)
     f00:	10800304 	addi	r2,r2,12
     f04:	01400104 	movi	r5,4
     f08:	1009883a 	mov	r4,r2
     f0c:	00004980 	call	498 <_ZN6Entity10setCurrDirE5E_DIR>
			updateMovement(&player, 0);
     f10:	e0bffd17 	ldw	r2,-12(fp)
     f14:	10800304 	addi	r2,r2,12
     f18:	000d883a 	mov	r6,zero
     f1c:	100b883a 	mov	r5,r2
     f20:	e13ffd17 	ldw	r4,-12(fp)
     f24:	00020580 	call	2058 <_ZN4Game14updateMovementEP6Entityi>
			state = LEVEL_START;
     f28:	e0bffd17 	ldw	r2,-12(fp)
     f2c:	00c00104 	movi	r3,4
     f30:	10c1eb15 	stw	r3,1964(r2)
			break;
     f34:	00000306 	br	f44 <_ZN4Game6updateEi+0x60c>
		case HOMESCREEN: {
			if(button == BUTTON_ENTER){
				state = LEVEL_START;
			}
//			state = LEVEL_START;
			break;
     f38:	0001883a 	nop
     f3c:	00000106 	br	f44 <_ZN4Game6updateEi+0x60c>
				map[ys][xs] = ed;
			}
			if(cur_pds >= max_pds){
				state = LEVEL_RESET;
			}
			break;
     f40:	0001883a 	nop
			updateMovement(&player, 0);
			state = LEVEL_START;
			break;
		}
	}
};
     f44:	0001883a 	nop
     f48:	e6ffff04 	addi	sp,fp,-4
     f4c:	dfc00217 	ldw	ra,8(sp)
     f50:	df000117 	ldw	fp,4(sp)
     f54:	dc000017 	ldw	r16,0(sp)
     f58:	dec00304 	addi	sp,sp,12
     f5c:	f800283a 	ret

00000f60 <_ZL14resetAvailableP5E_DIR>:

static void resetAvailable(e_dir_t *a){
     f60:	defffd04 	addi	sp,sp,-12
     f64:	df000215 	stw	fp,8(sp)
     f68:	df000204 	addi	fp,sp,8
     f6c:	e13fff15 	stw	r4,-4(fp)
	for(int i = 0; i < 4; i++)
     f70:	e03ffe15 	stw	zero,-8(fp)
     f74:	e0bffe17 	ldw	r2,-8(fp)
     f78:	10800108 	cmpgei	r2,r2,4
     f7c:	10000c1e 	bne	r2,zero,fb0 <_ZL14resetAvailableP5E_DIR+0x50>
		a[i] = DIR_NO_DIR;
     f80:	e0bffe17 	ldw	r2,-8(fp)
     f84:	1085883a 	add	r2,r2,r2
     f88:	1085883a 	add	r2,r2,r2
     f8c:	1007883a 	mov	r3,r2
     f90:	e0bfff17 	ldw	r2,-4(fp)
     f94:	10c5883a 	add	r2,r2,r3
     f98:	00c00104 	movi	r3,4
     f9c:	10c00015 	stw	r3,0(r2)
		}
	}
};

static void resetAvailable(e_dir_t *a){
	for(int i = 0; i < 4; i++)
     fa0:	e0bffe17 	ldw	r2,-8(fp)
     fa4:	10800044 	addi	r2,r2,1
     fa8:	e0bffe15 	stw	r2,-8(fp)
     fac:	003ff106 	br	f74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000f74>
		a[i] = DIR_NO_DIR;
};
     fb0:	0001883a 	nop
     fb4:	e037883a 	mov	sp,fp
     fb8:	df000017 	ldw	fp,0(sp)
     fbc:	dec00104 	addi	sp,sp,4
     fc0:	f800283a 	ret

00000fc4 <_ZL15appendAvailableP5E_DIRS_>:
static void appendAvailable(e_dir_t *a, e_dir_t dir){
     fc4:	defffc04 	addi	sp,sp,-16
     fc8:	df000315 	stw	fp,12(sp)
     fcc:	df000304 	addi	fp,sp,12
     fd0:	e13ffe15 	stw	r4,-8(fp)
     fd4:	e17fff15 	stw	r5,-4(fp)
	for(int i = 0; i < 4; i++){
     fd8:	e03ffd15 	stw	zero,-12(fp)
     fdc:	e0bffd17 	ldw	r2,-12(fp)
     fe0:	10800108 	cmpgei	r2,r2,4
     fe4:	1000161e 	bne	r2,zero,1040 <_ZL15appendAvailableP5E_DIRS_+0x7c>
		if(a[i] == DIR_NO_DIR){
     fe8:	e0bffd17 	ldw	r2,-12(fp)
     fec:	1085883a 	add	r2,r2,r2
     ff0:	1085883a 	add	r2,r2,r2
     ff4:	1007883a 	mov	r3,r2
     ff8:	e0bffe17 	ldw	r2,-8(fp)
     ffc:	10c5883a 	add	r2,r2,r3
    1000:	10800017 	ldw	r2,0(r2)
    1004:	10800118 	cmpnei	r2,r2,4
    1008:	1000091e 	bne	r2,zero,1030 <_ZL15appendAvailableP5E_DIRS_+0x6c>
			a[i] = dir;
    100c:	e0bffd17 	ldw	r2,-12(fp)
    1010:	1085883a 	add	r2,r2,r2
    1014:	1085883a 	add	r2,r2,r2
    1018:	1007883a 	mov	r3,r2
    101c:	e0bffe17 	ldw	r2,-8(fp)
    1020:	10c5883a 	add	r2,r2,r3
    1024:	e0ffff17 	ldw	r3,-4(fp)
    1028:	10c00015 	stw	r3,0(r2)
			return;
    102c:	00000406 	br	1040 <_ZL15appendAvailableP5E_DIRS_+0x7c>
static void resetAvailable(e_dir_t *a){
	for(int i = 0; i < 4; i++)
		a[i] = DIR_NO_DIR;
};
static void appendAvailable(e_dir_t *a, e_dir_t dir){
	for(int i = 0; i < 4; i++){
    1030:	e0bffd17 	ldw	r2,-12(fp)
    1034:	10800044 	addi	r2,r2,1
    1038:	e0bffd15 	stw	r2,-12(fp)
    103c:	003fe706 	br	fdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000fdc>
		if(a[i] == DIR_NO_DIR){
			a[i] = dir;
			return;
		}
	}
};
    1040:	e037883a 	mov	sp,fp
    1044:	df000017 	ldw	fp,0(sp)
    1048:	dec00104 	addi	sp,sp,4
    104c:	f800283a 	ret

00001050 <_ZL19chooseFromAvailableP5E_DIR>:
static e_dir_t chooseFromAvailable(e_dir_t *a){
    1050:	defffb04 	addi	sp,sp,-20
    1054:	dfc00415 	stw	ra,16(sp)
    1058:	df000315 	stw	fp,12(sp)
    105c:	df000304 	addi	fp,sp,12
    1060:	e13fff15 	stw	r4,-4(fp)
	int count = 0;
    1064:	e03ffd15 	stw	zero,-12(fp)
	for(int i = 0; i < 4; i++){
    1068:	e03ffe15 	stw	zero,-8(fp)
    106c:	e0bffe17 	ldw	r2,-8(fp)
    1070:	10800108 	cmpgei	r2,r2,4
    1074:	1000101e 	bne	r2,zero,10b8 <_ZL19chooseFromAvailableP5E_DIR+0x68>
		if(a[i] != DIR_NO_DIR){
    1078:	e0bffe17 	ldw	r2,-8(fp)
    107c:	1085883a 	add	r2,r2,r2
    1080:	1085883a 	add	r2,r2,r2
    1084:	1007883a 	mov	r3,r2
    1088:	e0bfff17 	ldw	r2,-4(fp)
    108c:	10c5883a 	add	r2,r2,r3
    1090:	10800017 	ldw	r2,0(r2)
    1094:	10800120 	cmpeqi	r2,r2,4
    1098:	1000031e 	bne	r2,zero,10a8 <_ZL19chooseFromAvailableP5E_DIR+0x58>
			count++;
    109c:	e0bffd17 	ldw	r2,-12(fp)
    10a0:	10800044 	addi	r2,r2,1
    10a4:	e0bffd15 	stw	r2,-12(fp)
		}
	}
};
static e_dir_t chooseFromAvailable(e_dir_t *a){
	int count = 0;
	for(int i = 0; i < 4; i++){
    10a8:	e0bffe17 	ldw	r2,-8(fp)
    10ac:	10800044 	addi	r2,r2,1
    10b0:	e0bffe15 	stw	r2,-8(fp)
    10b4:	003fed06 	br	106c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700106c>
		if(a[i] != DIR_NO_DIR){
			count++;
		}
	}
	if(count == 0)
    10b8:	e0bffd17 	ldw	r2,-12(fp)
    10bc:	1000021e 	bne	r2,zero,10c8 <_ZL19chooseFromAvailableP5E_DIR+0x78>
		return DIR_NO_DIR;
    10c0:	00800104 	movi	r2,4
    10c4:	00000c06 	br	10f8 <_ZL19chooseFromAvailableP5E_DIR+0xa8>

	return a[rand() % count];
    10c8:	000d7480 	call	d748 <rand>
    10cc:	e0fffd17 	ldw	r3,-12(fp)
    10d0:	10c9283a 	div	r4,r2,r3
    10d4:	e0fffd17 	ldw	r3,-12(fp)
    10d8:	20c7383a 	mul	r3,r4,r3
    10dc:	10c5c83a 	sub	r2,r2,r3
    10e0:	1085883a 	add	r2,r2,r2
    10e4:	1085883a 	add	r2,r2,r2
    10e8:	1007883a 	mov	r3,r2
    10ec:	e0bfff17 	ldw	r2,-4(fp)
    10f0:	10c5883a 	add	r2,r2,r3
    10f4:	10800017 	ldw	r2,0(r2)
};
    10f8:	e037883a 	mov	sp,fp
    10fc:	dfc00117 	ldw	ra,4(sp)
    1100:	df000017 	ldw	fp,0(sp)
    1104:	dec00204 	addi	sp,sp,8
    1108:	f800283a 	ret

0000110c <_ZN4Game19randomWalkAlgorithmEP5Ghost>:

void Game::randomWalkAlgorithm(Ghost *g){
    110c:	defff104 	addi	sp,sp,-60
    1110:	dfc00e15 	stw	ra,56(sp)
    1114:	df000d15 	stw	fp,52(sp)
    1118:	dc000c15 	stw	r16,48(sp)
    111c:	df000d04 	addi	fp,sp,52
    1120:	e13ffd15 	stw	r4,-12(fp)
    1124:	e17ffe15 	stw	r5,-8(fp)
	int xSq = g->getX() / 8.0;
    1128:	e0bffe17 	ldw	r2,-8(fp)
    112c:	1009883a 	mov	r4,r2
    1130:	00005500 	call	550 <_ZN6Entity4getXEv>
    1134:	1009883a 	mov	r4,r2
    1138:	0009c5c0 	call	9c5c <__floatsisf>
    113c:	1007883a 	mov	r3,r2
    1140:	00904034 	movhi	r2,16640
    1144:	1885fff2 	custom	255,r2,r3,r2
    1148:	1009883a 	mov	r4,r2
    114c:	0009bec0 	call	9bec <__fixsfsi>
    1150:	e0bff615 	stw	r2,-40(fp)
	int ySq = g->getY() / 8.0;
    1154:	e0bffe17 	ldw	r2,-8(fp)
    1158:	1009883a 	mov	r4,r2
    115c:	00005780 	call	578 <_ZN6Entity4getYEv>
    1160:	1009883a 	mov	r4,r2
    1164:	0009c5c0 	call	9c5c <__floatsisf>
    1168:	1007883a 	mov	r3,r2
    116c:	00904034 	movhi	r2,16640
    1170:	1885fff2 	custom	255,r2,r3,r2
    1174:	1009883a 	mov	r4,r2
    1178:	0009bec0 	call	9bec <__fixsfsi>
    117c:	e0bff715 	stw	r2,-36(fp)

	e_dir_t avail[4];
	if(g->getCurrDir() == DIR_NO_DIR){
    1180:	e0bffe17 	ldw	r2,-8(fp)
    1184:	1009883a 	mov	r4,r2
    1188:	00005a00 	call	5a0 <_ZN6Entity10getCurrDirEv>
    118c:	10800120 	cmpeqi	r2,r2,4
    1190:	10803fcc 	andi	r2,r2,255
    1194:	10005a26 	beq	r2,zero,1300 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x1f4>
		resetAvailable(avail);
    1198:	e0bff904 	addi	r2,fp,-28
    119c:	1009883a 	mov	r4,r2
    11a0:	0000f600 	call	f60 <_ZL14resetAvailableP5E_DIR>
		if(walkable(map[ySq - 1][xSq]))
    11a4:	e0bff717 	ldw	r2,-36(fp)
    11a8:	10bfffc4 	addi	r2,r2,-1
    11ac:	e0fffd17 	ldw	r3,-12(fp)
    11b0:	11000564 	muli	r4,r2,21
    11b4:	e0bff617 	ldw	r2,-40(fp)
    11b8:	2085883a 	add	r2,r4,r2
    11bc:	10807cc4 	addi	r2,r2,499
    11c0:	1085883a 	add	r2,r2,r2
    11c4:	1085883a 	add	r2,r2,r2
    11c8:	1885883a 	add	r2,r3,r2
    11cc:	10800017 	ldw	r2,0(r2)
    11d0:	100b883a 	mov	r5,r2
    11d4:	e13ffd17 	ldw	r4,-12(fp)
    11d8:	000234c0 	call	234c <_ZN4Game8walkableE10map_item_t>
    11dc:	10803fcc 	andi	r2,r2,255
    11e0:	10000426 	beq	r2,zero,11f4 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0xe8>
			appendAvailable(avail, DIR_UP);
    11e4:	e0bff904 	addi	r2,fp,-28
    11e8:	000b883a 	mov	r5,zero
    11ec:	1009883a 	mov	r4,r2
    11f0:	0000fc40 	call	fc4 <_ZL15appendAvailableP5E_DIRS_>
		if(walkable(map[ySq][xSq + 1]))
    11f4:	e0bff617 	ldw	r2,-40(fp)
    11f8:	10800044 	addi	r2,r2,1
    11fc:	e0fffd17 	ldw	r3,-12(fp)
    1200:	e13ff717 	ldw	r4,-36(fp)
    1204:	21000564 	muli	r4,r4,21
    1208:	2085883a 	add	r2,r4,r2
    120c:	10807cc4 	addi	r2,r2,499
    1210:	1085883a 	add	r2,r2,r2
    1214:	1085883a 	add	r2,r2,r2
    1218:	1885883a 	add	r2,r3,r2
    121c:	10800017 	ldw	r2,0(r2)
    1220:	100b883a 	mov	r5,r2
    1224:	e13ffd17 	ldw	r4,-12(fp)
    1228:	000234c0 	call	234c <_ZN4Game8walkableE10map_item_t>
    122c:	10803fcc 	andi	r2,r2,255
    1230:	10000426 	beq	r2,zero,1244 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x138>
			appendAvailable(avail, DIR_RIGHT);
    1234:	e0bff904 	addi	r2,fp,-28
    1238:	014000c4 	movi	r5,3
    123c:	1009883a 	mov	r4,r2
    1240:	0000fc40 	call	fc4 <_ZL15appendAvailableP5E_DIRS_>
		if(walkable(map[ySq + 1][xSq]))
    1244:	e0bff717 	ldw	r2,-36(fp)
    1248:	10800044 	addi	r2,r2,1
    124c:	e0fffd17 	ldw	r3,-12(fp)
    1250:	11000564 	muli	r4,r2,21
    1254:	e0bff617 	ldw	r2,-40(fp)
    1258:	2085883a 	add	r2,r4,r2
    125c:	10807cc4 	addi	r2,r2,499
    1260:	1085883a 	add	r2,r2,r2
    1264:	1085883a 	add	r2,r2,r2
    1268:	1885883a 	add	r2,r3,r2
    126c:	10800017 	ldw	r2,0(r2)
    1270:	100b883a 	mov	r5,r2
    1274:	e13ffd17 	ldw	r4,-12(fp)
    1278:	000234c0 	call	234c <_ZN4Game8walkableE10map_item_t>
    127c:	10803fcc 	andi	r2,r2,255
    1280:	10000426 	beq	r2,zero,1294 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x188>
			appendAvailable(avail, DIR_DOWN);
    1284:	e0bff904 	addi	r2,fp,-28
    1288:	01400044 	movi	r5,1
    128c:	1009883a 	mov	r4,r2
    1290:	0000fc40 	call	fc4 <_ZL15appendAvailableP5E_DIRS_>
		if(walkable(map[ySq][xSq - 1]))
    1294:	e0bff617 	ldw	r2,-40(fp)
    1298:	10bfffc4 	addi	r2,r2,-1
    129c:	e0fffd17 	ldw	r3,-12(fp)
    12a0:	e13ff717 	ldw	r4,-36(fp)
    12a4:	21000564 	muli	r4,r4,21
    12a8:	2085883a 	add	r2,r4,r2
    12ac:	10807cc4 	addi	r2,r2,499
    12b0:	1085883a 	add	r2,r2,r2
    12b4:	1085883a 	add	r2,r2,r2
    12b8:	1885883a 	add	r2,r3,r2
    12bc:	10800017 	ldw	r2,0(r2)
    12c0:	100b883a 	mov	r5,r2
    12c4:	e13ffd17 	ldw	r4,-12(fp)
    12c8:	000234c0 	call	234c <_ZN4Game8walkableE10map_item_t>
    12cc:	10803fcc 	andi	r2,r2,255
    12d0:	10000426 	beq	r2,zero,12e4 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x1d8>
			appendAvailable(avail, DIR_LEFT);
    12d4:	e0bff904 	addi	r2,fp,-28
    12d8:	01400084 	movi	r5,2
    12dc:	1009883a 	mov	r4,r2
    12e0:	0000fc40 	call	fc4 <_ZL15appendAvailableP5E_DIRS_>

		g->setNextDir(chooseFromAvailable(avail));
    12e4:	e43ffe17 	ldw	r16,-8(fp)
    12e8:	e0bff904 	addi	r2,fp,-28
    12ec:	1009883a 	mov	r4,r2
    12f0:	00010500 	call	1050 <_ZL19chooseFromAvailableP5E_DIR>
    12f4:	100b883a 	mov	r5,r2
    12f8:	8009883a 	mov	r4,r16
    12fc:	00004580 	call	458 <_ZN6Entity10setNextDirE5E_DIR>
	}

	e_dir_t going = g->getCurrDir();
    1300:	e0bffe17 	ldw	r2,-8(fp)
    1304:	1009883a 	mov	r4,r2
    1308:	00005a00 	call	5a0 <_ZN6Entity10getCurrDirEv>
    130c:	e0bff815 	stw	r2,-32(fp)
	e_dir_t ignore;

	int x_offset = 0;
    1310:	e03ff415 	stw	zero,-48(fp)
	int y_offset = 0;
    1314:	e03ff515 	stw	zero,-44(fp)
	switch(going){
    1318:	e0bff817 	ldw	r2,-32(fp)
    131c:	10c00060 	cmpeqi	r3,r2,1
    1320:	1800331e 	bne	r3,zero,13f0 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x2e4>
    1324:	10c00088 	cmpgei	r3,r2,2
    1328:	1800021e 	bne	r3,zero,1334 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x228>
    132c:	10000626 	beq	r2,zero,1348 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x23c>
    1330:	00005806 	br	1494 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x388>
    1334:	10c000a0 	cmpeqi	r3,r2,2
    1338:	1800411e 	bne	r3,zero,1440 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x334>
    133c:	108000e0 	cmpeqi	r2,r2,3
    1340:	1000161e 	bne	r2,zero,139c <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x290>
    1344:	00005306 	br	1494 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x388>
	case DIR_UP:
		if(walkable(map[ySq - 1][xSq]))
    1348:	e0bff717 	ldw	r2,-36(fp)
    134c:	10bfffc4 	addi	r2,r2,-1
    1350:	e0fffd17 	ldw	r3,-12(fp)
    1354:	11000564 	muli	r4,r2,21
    1358:	e0bff617 	ldw	r2,-40(fp)
    135c:	2085883a 	add	r2,r4,r2
    1360:	10807cc4 	addi	r2,r2,499
    1364:	1085883a 	add	r2,r2,r2
    1368:	1085883a 	add	r2,r2,r2
    136c:	1885883a 	add	r2,r3,r2
    1370:	10800017 	ldw	r2,0(r2)
    1374:	100b883a 	mov	r5,r2
    1378:	e13ffd17 	ldw	r4,-12(fp)
    137c:	000234c0 	call	234c <_ZN4Game8walkableE10map_item_t>
    1380:	10803fcc 	andi	r2,r2,255
    1384:	10000226 	beq	r2,zero,1390 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x284>
			y_offset = -1;
    1388:	00bfffc4 	movi	r2,-1
    138c:	e0bff515 	stw	r2,-44(fp)
		ignore = DIR_DOWN;
    1390:	00800044 	movi	r2,1
    1394:	e0bff315 	stw	r2,-52(fp)
		break;
    1398:	00003e06 	br	1494 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x388>
	case DIR_RIGHT:
		if(walkable(map[ySq][xSq + 1]))
    139c:	e0bff617 	ldw	r2,-40(fp)
    13a0:	10800044 	addi	r2,r2,1
    13a4:	e0fffd17 	ldw	r3,-12(fp)
    13a8:	e13ff717 	ldw	r4,-36(fp)
    13ac:	21000564 	muli	r4,r4,21
    13b0:	2085883a 	add	r2,r4,r2
    13b4:	10807cc4 	addi	r2,r2,499
    13b8:	1085883a 	add	r2,r2,r2
    13bc:	1085883a 	add	r2,r2,r2
    13c0:	1885883a 	add	r2,r3,r2
    13c4:	10800017 	ldw	r2,0(r2)
    13c8:	100b883a 	mov	r5,r2
    13cc:	e13ffd17 	ldw	r4,-12(fp)
    13d0:	000234c0 	call	234c <_ZN4Game8walkableE10map_item_t>
    13d4:	10803fcc 	andi	r2,r2,255
    13d8:	10000226 	beq	r2,zero,13e4 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x2d8>
			x_offset = 1;
    13dc:	00800044 	movi	r2,1
    13e0:	e0bff415 	stw	r2,-48(fp)
		ignore = DIR_LEFT;
    13e4:	00800084 	movi	r2,2
    13e8:	e0bff315 	stw	r2,-52(fp)
		break;
    13ec:	00002906 	br	1494 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x388>
	case DIR_DOWN:
		if(walkable(map[ySq + 1][xSq]))
    13f0:	e0bff717 	ldw	r2,-36(fp)
    13f4:	10800044 	addi	r2,r2,1
    13f8:	e0fffd17 	ldw	r3,-12(fp)
    13fc:	11000564 	muli	r4,r2,21
    1400:	e0bff617 	ldw	r2,-40(fp)
    1404:	2085883a 	add	r2,r4,r2
    1408:	10807cc4 	addi	r2,r2,499
    140c:	1085883a 	add	r2,r2,r2
    1410:	1085883a 	add	r2,r2,r2
    1414:	1885883a 	add	r2,r3,r2
    1418:	10800017 	ldw	r2,0(r2)
    141c:	100b883a 	mov	r5,r2
    1420:	e13ffd17 	ldw	r4,-12(fp)
    1424:	000234c0 	call	234c <_ZN4Game8walkableE10map_item_t>
    1428:	10803fcc 	andi	r2,r2,255
    142c:	10000226 	beq	r2,zero,1438 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x32c>
			y_offset = 1;
    1430:	00800044 	movi	r2,1
    1434:	e0bff515 	stw	r2,-44(fp)
		ignore = DIR_UP;
    1438:	e03ff315 	stw	zero,-52(fp)
		break;
    143c:	00001506 	br	1494 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x388>
	case DIR_LEFT:
		if(walkable(map[ySq][xSq - 1]))
    1440:	e0bff617 	ldw	r2,-40(fp)
    1444:	10bfffc4 	addi	r2,r2,-1
    1448:	e0fffd17 	ldw	r3,-12(fp)
    144c:	e13ff717 	ldw	r4,-36(fp)
    1450:	21000564 	muli	r4,r4,21
    1454:	2085883a 	add	r2,r4,r2
    1458:	10807cc4 	addi	r2,r2,499
    145c:	1085883a 	add	r2,r2,r2
    1460:	1085883a 	add	r2,r2,r2
    1464:	1885883a 	add	r2,r3,r2
    1468:	10800017 	ldw	r2,0(r2)
    146c:	100b883a 	mov	r5,r2
    1470:	e13ffd17 	ldw	r4,-12(fp)
    1474:	000234c0 	call	234c <_ZN4Game8walkableE10map_item_t>
    1478:	10803fcc 	andi	r2,r2,255
    147c:	10000226 	beq	r2,zero,1488 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x37c>
			x_offset = -1;
    1480:	00bfffc4 	movi	r2,-1
    1484:	e0bff415 	stw	r2,-48(fp)
		ignore = DIR_RIGHT;
    1488:	008000c4 	movi	r2,3
    148c:	e0bff315 	stw	r2,-52(fp)
		break;
    1490:	0001883a 	nop
	}

	resetAvailable(avail);
    1494:	e0bff904 	addi	r2,fp,-28
    1498:	1009883a 	mov	r4,r2
    149c:	0000f600 	call	f60 <_ZL14resetAvailableP5E_DIR>

	if(ignore != DIR_UP 	&& walkable(map[ySq + y_offset - 1][xSq + x_offset]))
    14a0:	e0bff317 	ldw	r2,-52(fp)
    14a4:	10001626 	beq	r2,zero,1500 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x3f4>
    14a8:	e0fff717 	ldw	r3,-36(fp)
    14ac:	e0bff517 	ldw	r2,-44(fp)
    14b0:	1885883a 	add	r2,r3,r2
    14b4:	113fffc4 	addi	r4,r2,-1
    14b8:	e0fff617 	ldw	r3,-40(fp)
    14bc:	e0bff417 	ldw	r2,-48(fp)
    14c0:	1885883a 	add	r2,r3,r2
    14c4:	e0fffd17 	ldw	r3,-12(fp)
    14c8:	21000564 	muli	r4,r4,21
    14cc:	2085883a 	add	r2,r4,r2
    14d0:	10807cc4 	addi	r2,r2,499
    14d4:	1085883a 	add	r2,r2,r2
    14d8:	1085883a 	add	r2,r2,r2
    14dc:	1885883a 	add	r2,r3,r2
    14e0:	10800017 	ldw	r2,0(r2)
    14e4:	100b883a 	mov	r5,r2
    14e8:	e13ffd17 	ldw	r4,-12(fp)
    14ec:	000234c0 	call	234c <_ZN4Game8walkableE10map_item_t>
    14f0:	10803fcc 	andi	r2,r2,255
    14f4:	10000226 	beq	r2,zero,1500 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x3f4>
    14f8:	00800044 	movi	r2,1
    14fc:	00000106 	br	1504 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x3f8>
    1500:	0005883a 	mov	r2,zero
    1504:	10803fcc 	andi	r2,r2,255
    1508:	10000426 	beq	r2,zero,151c <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x410>
		appendAvailable(avail, DIR_UP);
    150c:	e0bff904 	addi	r2,fp,-28
    1510:	000b883a 	mov	r5,zero
    1514:	1009883a 	mov	r4,r2
    1518:	0000fc40 	call	fc4 <_ZL15appendAvailableP5E_DIRS_>

	if(ignore != DIR_RIGHT 	&& walkable(map[ySq + y_offset][xSq + x_offset + 1]))
    151c:	e0bff317 	ldw	r2,-52(fp)
    1520:	108000e0 	cmpeqi	r2,r2,3
    1524:	1000161e 	bne	r2,zero,1580 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x474>
    1528:	e0fff717 	ldw	r3,-36(fp)
    152c:	e0bff517 	ldw	r2,-44(fp)
    1530:	1889883a 	add	r4,r3,r2
    1534:	e0fff617 	ldw	r3,-40(fp)
    1538:	e0bff417 	ldw	r2,-48(fp)
    153c:	1885883a 	add	r2,r3,r2
    1540:	10800044 	addi	r2,r2,1
    1544:	e0fffd17 	ldw	r3,-12(fp)
    1548:	21000564 	muli	r4,r4,21
    154c:	2085883a 	add	r2,r4,r2
    1550:	10807cc4 	addi	r2,r2,499
    1554:	1085883a 	add	r2,r2,r2
    1558:	1085883a 	add	r2,r2,r2
    155c:	1885883a 	add	r2,r3,r2
    1560:	10800017 	ldw	r2,0(r2)
    1564:	100b883a 	mov	r5,r2
    1568:	e13ffd17 	ldw	r4,-12(fp)
    156c:	000234c0 	call	234c <_ZN4Game8walkableE10map_item_t>
    1570:	10803fcc 	andi	r2,r2,255
    1574:	10000226 	beq	r2,zero,1580 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x474>
    1578:	00800044 	movi	r2,1
    157c:	00000106 	br	1584 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x478>
    1580:	0005883a 	mov	r2,zero
    1584:	10803fcc 	andi	r2,r2,255
    1588:	10000426 	beq	r2,zero,159c <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x490>
		appendAvailable(avail, DIR_RIGHT);
    158c:	e0bff904 	addi	r2,fp,-28
    1590:	014000c4 	movi	r5,3
    1594:	1009883a 	mov	r4,r2
    1598:	0000fc40 	call	fc4 <_ZL15appendAvailableP5E_DIRS_>

	if(ignore != DIR_DOWN 	&& walkable(map[ySq + y_offset + 1][xSq + x_offset]))
    159c:	e0bff317 	ldw	r2,-52(fp)
    15a0:	10800060 	cmpeqi	r2,r2,1
    15a4:	1000161e 	bne	r2,zero,1600 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x4f4>
    15a8:	e0fff717 	ldw	r3,-36(fp)
    15ac:	e0bff517 	ldw	r2,-44(fp)
    15b0:	1885883a 	add	r2,r3,r2
    15b4:	11000044 	addi	r4,r2,1
    15b8:	e0fff617 	ldw	r3,-40(fp)
    15bc:	e0bff417 	ldw	r2,-48(fp)
    15c0:	1885883a 	add	r2,r3,r2
    15c4:	e0fffd17 	ldw	r3,-12(fp)
    15c8:	21000564 	muli	r4,r4,21
    15cc:	2085883a 	add	r2,r4,r2
    15d0:	10807cc4 	addi	r2,r2,499
    15d4:	1085883a 	add	r2,r2,r2
    15d8:	1085883a 	add	r2,r2,r2
    15dc:	1885883a 	add	r2,r3,r2
    15e0:	10800017 	ldw	r2,0(r2)
    15e4:	100b883a 	mov	r5,r2
    15e8:	e13ffd17 	ldw	r4,-12(fp)
    15ec:	000234c0 	call	234c <_ZN4Game8walkableE10map_item_t>
    15f0:	10803fcc 	andi	r2,r2,255
    15f4:	10000226 	beq	r2,zero,1600 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x4f4>
    15f8:	00800044 	movi	r2,1
    15fc:	00000106 	br	1604 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x4f8>
    1600:	0005883a 	mov	r2,zero
    1604:	10803fcc 	andi	r2,r2,255
    1608:	10000426 	beq	r2,zero,161c <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x510>
		appendAvailable(avail, DIR_DOWN);
    160c:	e0bff904 	addi	r2,fp,-28
    1610:	01400044 	movi	r5,1
    1614:	1009883a 	mov	r4,r2
    1618:	0000fc40 	call	fc4 <_ZL15appendAvailableP5E_DIRS_>

	if(ignore != DIR_LEFT	&& walkable(map[ySq + y_offset][xSq + x_offset - 1]))
    161c:	e0bff317 	ldw	r2,-52(fp)
    1620:	108000a0 	cmpeqi	r2,r2,2
    1624:	1000161e 	bne	r2,zero,1680 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x574>
    1628:	e0fff717 	ldw	r3,-36(fp)
    162c:	e0bff517 	ldw	r2,-44(fp)
    1630:	1889883a 	add	r4,r3,r2
    1634:	e0fff617 	ldw	r3,-40(fp)
    1638:	e0bff417 	ldw	r2,-48(fp)
    163c:	1885883a 	add	r2,r3,r2
    1640:	10bfffc4 	addi	r2,r2,-1
    1644:	e0fffd17 	ldw	r3,-12(fp)
    1648:	21000564 	muli	r4,r4,21
    164c:	2085883a 	add	r2,r4,r2
    1650:	10807cc4 	addi	r2,r2,499
    1654:	1085883a 	add	r2,r2,r2
    1658:	1085883a 	add	r2,r2,r2
    165c:	1885883a 	add	r2,r3,r2
    1660:	10800017 	ldw	r2,0(r2)
    1664:	100b883a 	mov	r5,r2
    1668:	e13ffd17 	ldw	r4,-12(fp)
    166c:	000234c0 	call	234c <_ZN4Game8walkableE10map_item_t>
    1670:	10803fcc 	andi	r2,r2,255
    1674:	10000226 	beq	r2,zero,1680 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x574>
    1678:	00800044 	movi	r2,1
    167c:	00000106 	br	1684 <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x578>
    1680:	0005883a 	mov	r2,zero
    1684:	10803fcc 	andi	r2,r2,255
    1688:	10000426 	beq	r2,zero,169c <_ZN4Game19randomWalkAlgorithmEP5Ghost+0x590>
		appendAvailable(avail, DIR_LEFT);
    168c:	e0bff904 	addi	r2,fp,-28
    1690:	01400084 	movi	r5,2
    1694:	1009883a 	mov	r4,r2
    1698:	0000fc40 	call	fc4 <_ZL15appendAvailableP5E_DIRS_>

	g->setNextDir(chooseFromAvailable(avail));
    169c:	e43ffe17 	ldw	r16,-8(fp)
    16a0:	e0bff904 	addi	r2,fp,-28
    16a4:	1009883a 	mov	r4,r2
    16a8:	00010500 	call	1050 <_ZL19chooseFromAvailableP5E_DIR>
    16ac:	100b883a 	mov	r5,r2
    16b0:	8009883a 	mov	r4,r16
    16b4:	00004580 	call	458 <_ZN6Entity10setNextDirE5E_DIR>
};
    16b8:	0001883a 	nop
    16bc:	e6ffff04 	addi	sp,fp,-4
    16c0:	dfc00217 	ldw	ra,8(sp)
    16c4:	df000117 	ldw	fp,4(sp)
    16c8:	dc000017 	ldw	r16,0(sp)
    16cc:	dec00304 	addi	sp,sp,12
    16d0:	f800283a 	ret

000016d4 <_ZN4Game4drawEv>:


void Game::draw(){
    16d4:	defff604 	addi	sp,sp,-40
    16d8:	dfc00915 	stw	ra,36(sp)
    16dc:	df000815 	stw	fp,32(sp)
    16e0:	df000804 	addi	fp,sp,32
    16e4:	e13fff15 	stw	r4,-4(fp)
	switch(state){
    16e8:	e0bfff17 	ldw	r2,-4(fp)
    16ec:	1081eb17 	ldw	r2,1964(r2)
    16f0:	10c000a0 	cmpeqi	r3,r2,2
    16f4:	1800a01e 	bne	r3,zero,1978 <_ZN4Game4drawEv+0x2a4>
    16f8:	10c000c8 	cmpgei	r3,r2,3
    16fc:	1800031e 	bne	r3,zero,170c <_ZN4Game4drawEv+0x38>
    1700:	10800060 	cmpeqi	r2,r2,1
    1704:	1000061e 	bne	r2,zero,1720 <_ZN4Game4drawEv+0x4c>
				drawScore();

			break;
		}
	}
};
    1708:	00009e06 	br	1984 <_ZN4Game4drawEv+0x2b0>
	g->setNextDir(chooseFromAvailable(avail));
};


void Game::draw(){
	switch(state){
    170c:	10c00160 	cmpeqi	r3,r2,5
    1710:	1800091e 	bne	r3,zero,1738 <_ZN4Game4drawEv+0x64>
    1714:	108001a0 	cmpeqi	r2,r2,6
    1718:	1000191e 	bne	r2,zero,1780 <_ZN4Game4drawEv+0xac>
				drawScore();

			break;
		}
	}
};
    171c:	00009906 	br	1984 <_ZN4Game4drawEv+0x2b0>


void Game::draw(){
	switch(state){
		case HOMESCREEN_INIT: {
			drawHomescreen();
    1720:	e13fff17 	ldw	r4,-4(fp)
    1724:	0001a3c0 	call	1a3c <_ZN4Game14drawHomescreenEv>
			state = HOMESCREEN;
    1728:	e0bfff17 	ldw	r2,-4(fp)
    172c:	00c00084 	movi	r3,2
    1730:	10c1eb15 	stw	r3,1964(r2)
			break;
    1734:	00009306 	br	1984 <_ZN4Game4drawEv+0x2b0>
		case HOMESCREEN: {

			break;
		}
		case LEVEL_FIRST_DRAW: {
			printf("Game: First draw\n\r");
    1738:	010000b4 	movhi	r4,2
    173c:	211d0f04 	addi	r4,r4,29756
    1740:	000d6200 	call	d620 <printf>
			vi->clear(0);
    1744:	e0bfff17 	ldw	r2,-4(fp)
    1748:	10800217 	ldw	r2,8(r2)
    174c:	000b883a 	mov	r5,zero
    1750:	1009883a 	mov	r4,r2
    1754:	0004ea00 	call	4ea0 <_ZN14VideoInterface5clearEt>
			drawMap();
    1758:	e13fff17 	ldw	r4,-4(fp)
    175c:	0002ab00 	call	2ab0 <_ZN4Game7drawMapEv>
			drawScoreText();
    1760:	e13fff17 	ldw	r4,-4(fp)
    1764:	00028740 	call	2874 <_ZN4Game13drawScoreTextEv>
			drawScore();
    1768:	e13fff17 	ldw	r4,-4(fp)
    176c:	000290c0 	call	290c <_ZN4Game9drawScoreEv>
			state = LEVEL_RUN;
    1770:	e0bfff17 	ldw	r2,-4(fp)
    1774:	00c00184 	movi	r3,6
    1778:	10c1eb15 	stw	r3,1964(r2)
			break;
    177c:	00008106 	br	1984 <_ZN4Game4drawEv+0x2b0>
		}
		case LEVEL_RUN: {
			vi->setOffset(MAP_OFFSET_X, MAP_OFFSET_Y);
    1780:	e0bfff17 	ldw	r2,-4(fp)
    1784:	10800217 	ldw	r2,8(r2)
    1788:	01800304 	movi	r6,12
    178c:	01400b84 	movi	r5,46
    1790:	1009883a 	mov	r4,r2
    1794:	0004cd40 	call	4cd4 <_ZN14VideoInterface9setOffsetEii>
			player.draw(vi);
    1798:	e0bfff17 	ldw	r2,-4(fp)
    179c:	10c00304 	addi	r3,r2,12
    17a0:	e0bfff17 	ldw	r2,-4(fp)
    17a4:	10800217 	ldw	r2,8(r2)
    17a8:	100b883a 	mov	r5,r2
    17ac:	1809883a 	mov	r4,r3
    17b0:	00003f80 	call	3f8 <_ZN6Entity4drawEP14VideoInterface>

			for(int g = 0; g < 4; g++){
    17b4:	e03ffa15 	stw	zero,-24(fp)
    17b8:	e0bffa17 	ldw	r2,-24(fp)
    17bc:	10800108 	cmpgei	r2,r2,4
    17c0:	1000611e 	bne	r2,zero,1948 <_ZN4Game4drawEv+0x274>
				int xSq = ghosts[g].getX() / 8.0;
    17c4:	e0bffa17 	ldw	r2,-24(fp)
    17c8:	10805b24 	muli	r2,r2,364
    17cc:	10807f04 	addi	r2,r2,508
    17d0:	e0ffff17 	ldw	r3,-4(fp)
    17d4:	1885883a 	add	r2,r3,r2
    17d8:	1009883a 	mov	r4,r2
    17dc:	00005500 	call	550 <_ZN6Entity4getXEv>
    17e0:	1009883a 	mov	r4,r2
    17e4:	0009c5c0 	call	9c5c <__floatsisf>
    17e8:	1007883a 	mov	r3,r2
    17ec:	00904034 	movhi	r2,16640
    17f0:	1885fff2 	custom	255,r2,r3,r2
    17f4:	1009883a 	mov	r4,r2
    17f8:	0009bec0 	call	9bec <__fixsfsi>
    17fc:	e0bffd15 	stw	r2,-12(fp)
				int ySq = ghosts[g].getY() / 8.0;
    1800:	e0bffa17 	ldw	r2,-24(fp)
    1804:	10805b24 	muli	r2,r2,364
    1808:	10807f04 	addi	r2,r2,508
    180c:	e0ffff17 	ldw	r3,-4(fp)
    1810:	1885883a 	add	r2,r3,r2
    1814:	1009883a 	mov	r4,r2
    1818:	00005780 	call	578 <_ZN6Entity4getYEv>
    181c:	1009883a 	mov	r4,r2
    1820:	0009c5c0 	call	9c5c <__floatsisf>
    1824:	1007883a 	mov	r3,r2
    1828:	00904034 	movhi	r2,16640
    182c:	1885fff2 	custom	255,r2,r3,r2
    1830:	1009883a 	mov	r4,r2
    1834:	0009bec0 	call	9bec <__fixsfsi>
    1838:	e0bffe15 	stw	r2,-8(fp)
				for(int mapy = -2; mapy < 3; mapy++){
    183c:	00bfff84 	movi	r2,-2
    1840:	e0bffb15 	stw	r2,-20(fp)
    1844:	e0bffb17 	ldw	r2,-20(fp)
    1848:	108000c8 	cmpgei	r2,r2,3
    184c:	1000301e 	bne	r2,zero,1910 <_ZN4Game4drawEv+0x23c>
					for(int mapx = -2; mapx < 3; mapx++){
    1850:	00bfff84 	movi	r2,-2
    1854:	e0bffc15 	stw	r2,-16(fp)
    1858:	e0bffc17 	ldw	r2,-16(fp)
    185c:	108000c8 	cmpgei	r2,r2,3
    1860:	1000271e 	bne	r2,zero,1900 <_ZN4Game4drawEv+0x22c>
						if(map[ySq + mapy][xSq + mapx] == pd){
    1864:	e0fffe17 	ldw	r3,-8(fp)
    1868:	e0bffb17 	ldw	r2,-20(fp)
    186c:	1889883a 	add	r4,r3,r2
    1870:	e0fffd17 	ldw	r3,-12(fp)
    1874:	e0bffc17 	ldw	r2,-16(fp)
    1878:	1885883a 	add	r2,r3,r2
    187c:	e0ffff17 	ldw	r3,-4(fp)
    1880:	21000564 	muli	r4,r4,21
    1884:	2085883a 	add	r2,r4,r2
    1888:	10807cc4 	addi	r2,r2,499
    188c:	1085883a 	add	r2,r2,r2
    1890:	1085883a 	add	r2,r2,r2
    1894:	1885883a 	add	r2,r3,r2
    1898:	10800017 	ldw	r2,0(r2)
    189c:	10800058 	cmpnei	r2,r2,1
    18a0:	1000131e 	bne	r2,zero,18f0 <_ZN4Game4drawEv+0x21c>
							vi->drawRect(((xSq + mapx) * 8) + 3, ((ySq + mapy) * 8) + 3, 2, 2, PAC_DOT_COLOR);
    18a4:	e0bfff17 	ldw	r2,-4(fp)
    18a8:	11000217 	ldw	r4,8(r2)
    18ac:	e0fffd17 	ldw	r3,-12(fp)
    18b0:	e0bffc17 	ldw	r2,-16(fp)
    18b4:	1885883a 	add	r2,r3,r2
    18b8:	100490fa 	slli	r2,r2,3
    18bc:	114000c4 	addi	r5,r2,3
    18c0:	e0fffe17 	ldw	r3,-8(fp)
    18c4:	e0bffb17 	ldw	r2,-20(fp)
    18c8:	1885883a 	add	r2,r3,r2
    18cc:	100490fa 	slli	r2,r2,3
    18d0:	10c000c4 	addi	r3,r2,3
    18d4:	00bf4814 	movui	r2,64800
    18d8:	d8800115 	stw	r2,4(sp)
    18dc:	00800084 	movi	r2,2
    18e0:	d8800015 	stw	r2,0(sp)
    18e4:	01c00084 	movi	r7,2
    18e8:	180d883a 	mov	r6,r3
    18ec:	00050f80 	call	50f8 <_ZN14VideoInterface8drawRectEiiiit>

			for(int g = 0; g < 4; g++){
				int xSq = ghosts[g].getX() / 8.0;
				int ySq = ghosts[g].getY() / 8.0;
				for(int mapy = -2; mapy < 3; mapy++){
					for(int mapx = -2; mapx < 3; mapx++){
    18f0:	e0bffc17 	ldw	r2,-16(fp)
    18f4:	10800044 	addi	r2,r2,1
    18f8:	e0bffc15 	stw	r2,-16(fp)
    18fc:	003fd606 	br	1858 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001858>
			player.draw(vi);

			for(int g = 0; g < 4; g++){
				int xSq = ghosts[g].getX() / 8.0;
				int ySq = ghosts[g].getY() / 8.0;
				for(int mapy = -2; mapy < 3; mapy++){
    1900:	e0bffb17 	ldw	r2,-20(fp)
    1904:	10800044 	addi	r2,r2,1
    1908:	e0bffb15 	stw	r2,-20(fp)
    190c:	003fcd06 	br	1844 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001844>
						if(map[ySq + mapy][xSq + mapx] == pd){
							vi->drawRect(((xSq + mapx) * 8) + 3, ((ySq + mapy) * 8) + 3, 2, 2, PAC_DOT_COLOR);
						}
					}
				}
				ghosts[g].draw(vi);
    1910:	e0bffa17 	ldw	r2,-24(fp)
    1914:	10805b24 	muli	r2,r2,364
    1918:	10807f04 	addi	r2,r2,508
    191c:	e0ffff17 	ldw	r3,-4(fp)
    1920:	1887883a 	add	r3,r3,r2
    1924:	e0bfff17 	ldw	r2,-4(fp)
    1928:	10800217 	ldw	r2,8(r2)
    192c:	100b883a 	mov	r5,r2
    1930:	1809883a 	mov	r4,r3
    1934:	00003f80 	call	3f8 <_ZN6Entity4drawEP14VideoInterface>
		}
		case LEVEL_RUN: {
			vi->setOffset(MAP_OFFSET_X, MAP_OFFSET_Y);
			player.draw(vi);

			for(int g = 0; g < 4; g++){
    1938:	e0bffa17 	ldw	r2,-24(fp)
    193c:	10800044 	addi	r2,r2,1
    1940:	e0bffa15 	stw	r2,-24(fp)
    1944:	003f9c06 	br	17b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70017b8>
					}
				}
				ghosts[g].draw(vi);
			}

			vi->resetOffset();
    1948:	e0bfff17 	ldw	r2,-4(fp)
    194c:	10800217 	ldw	r2,8(r2)
    1950:	1009883a 	mov	r4,r2
    1954:	0004d180 	call	4d18 <_ZN14VideoInterface11resetOffsetEv>

			if(cur_score != old_score)
    1958:	e0bfff17 	ldw	r2,-4(fp)
    195c:	10c1ed17 	ldw	r3,1972(r2)
    1960:	e0bfff17 	ldw	r2,-4(fp)
    1964:	1081ee17 	ldw	r2,1976(r2)
    1968:	18800526 	beq	r3,r2,1980 <_ZN4Game4drawEv+0x2ac>
				drawScore();
    196c:	e13fff17 	ldw	r4,-4(fp)
    1970:	000290c0 	call	290c <_ZN4Game9drawScoreEv>

			break;
    1974:	00000206 	br	1980 <_ZN4Game4drawEv+0x2ac>
			state = HOMESCREEN;
			break;
		}
		case HOMESCREEN: {

			break;
    1978:	0001883a 	nop
    197c:	00000106 	br	1984 <_ZN4Game4drawEv+0x2b0>
			vi->resetOffset();

			if(cur_score != old_score)
				drawScore();

			break;
    1980:	0001883a 	nop
		}
	}
};
    1984:	0001883a 	nop
    1988:	e037883a 	mov	sp,fp
    198c:	dfc00117 	ldw	ra,4(sp)
    1990:	df000017 	ldw	fp,0(sp)
    1994:	dec00204 	addi	sp,sp,8
    1998:	f800283a 	ret

0000199c <_ZN4Game6unJailEP5Ghost>:

void Game::unJail(Ghost *g){
    199c:	defffc04 	addi	sp,sp,-16
    19a0:	dfc00315 	stw	ra,12(sp)
    19a4:	df000215 	stw	fp,8(sp)
    19a8:	df000204 	addi	fp,sp,8
    19ac:	e13ffe15 	stw	r4,-8(fp)
    19b0:	e17fff15 	stw	r5,-4(fp)
	g->setJailed(false);
    19b4:	000b883a 	mov	r5,zero
    19b8:	e13fff17 	ldw	r4,-4(fp)
    19bc:	00040240 	call	4024 <_ZN5Ghost9setJailedEb>
	setInSquare(g, 10, 10);
    19c0:	01c00284 	movi	r7,10
    19c4:	01800284 	movi	r6,10
    19c8:	e17fff17 	ldw	r5,-4(fp)
    19cc:	e13ffe17 	ldw	r4,-8(fp)
    19d0:	0001a940 	call	1a94 <_ZN4Game11setInSquareEP6Entityii>
}
    19d4:	0001883a 	nop
    19d8:	e037883a 	mov	sp,fp
    19dc:	dfc00117 	ldw	ra,4(sp)
    19e0:	df000017 	ldw	fp,0(sp)
    19e4:	dec00204 	addi	sp,sp,8
    19e8:	f800283a 	ret

000019ec <_ZN4Game4jailEP5Ghost>:
void Game::jail(Ghost *g){
    19ec:	defffc04 	addi	sp,sp,-16
    19f0:	dfc00315 	stw	ra,12(sp)
    19f4:	df000215 	stw	fp,8(sp)
    19f8:	df000204 	addi	fp,sp,8
    19fc:	e13ffe15 	stw	r4,-8(fp)
    1a00:	e17fff15 	stw	r5,-4(fp)
	g->setJailed(true);
    1a04:	01400044 	movi	r5,1
    1a08:	e13fff17 	ldw	r4,-4(fp)
    1a0c:	00040240 	call	4024 <_ZN5Ghost9setJailedEb>
	setInSquare(g, 10, 13);
    1a10:	01c00344 	movi	r7,13
    1a14:	01800284 	movi	r6,10
    1a18:	e17fff17 	ldw	r5,-4(fp)
    1a1c:	e13ffe17 	ldw	r4,-8(fp)
    1a20:	0001a940 	call	1a94 <_ZN4Game11setInSquareEP6Entityii>
}
    1a24:	0001883a 	nop
    1a28:	e037883a 	mov	sp,fp
    1a2c:	dfc00117 	ldw	ra,4(sp)
    1a30:	df000017 	ldw	fp,0(sp)
    1a34:	dec00204 	addi	sp,sp,8
    1a38:	f800283a 	ret

00001a3c <_ZN4Game14drawHomescreenEv>:

void Game::drawHomescreen(){
    1a3c:	defffd04 	addi	sp,sp,-12
    1a40:	dfc00215 	stw	ra,8(sp)
    1a44:	df000115 	stw	fp,4(sp)
    1a48:	df000104 	addi	fp,sp,4
    1a4c:	e13fff15 	stw	r4,-4(fp)
	vi->setColor(RGB565(255, 165, 0));
    1a50:	e0bfff17 	ldw	r2,-4(fp)
    1a54:	10800217 	ldw	r2,8(r2)
    1a58:	017f4814 	movui	r5,64800
    1a5c:	1009883a 	mov	r4,r2
    1a60:	0004e680 	call	4e68 <_ZN14VideoInterface8setColorEt>
	drawText(70, 100, "PRESS ENTER TO START!");
    1a64:	01c000b4 	movhi	r7,2
    1a68:	39dd1404 	addi	r7,r7,29776
    1a6c:	01801904 	movi	r6,100
    1a70:	01401184 	movi	r5,70
    1a74:	e13fff17 	ldw	r4,-4(fp)
    1a78:	00026280 	call	2628 <_ZN4Game8drawTextEiiPc>
};
    1a7c:	0001883a 	nop
    1a80:	e037883a 	mov	sp,fp
    1a84:	dfc00117 	ldw	ra,4(sp)
    1a88:	df000017 	ldw	fp,0(sp)
    1a8c:	dec00204 	addi	sp,sp,8
    1a90:	f800283a 	ret

00001a94 <_ZN4Game11setInSquareEP6Entityii>:

void Game::setInSquare(Entity* en, int xs, int ys){
    1a94:	defffa04 	addi	sp,sp,-24
    1a98:	dfc00515 	stw	ra,20(sp)
    1a9c:	df000415 	stw	fp,16(sp)
    1aa0:	df000404 	addi	fp,sp,16
    1aa4:	e13ffc15 	stw	r4,-16(fp)
    1aa8:	e17ffd15 	stw	r5,-12(fp)
    1aac:	e1bffe15 	stw	r6,-8(fp)
    1ab0:	e1ffff15 	stw	r7,-4(fp)
	en->setPos(xs*8, ys*8);
    1ab4:	e0bffe17 	ldw	r2,-8(fp)
    1ab8:	100690fa 	slli	r3,r2,3
    1abc:	e0bfff17 	ldw	r2,-4(fp)
    1ac0:	100490fa 	slli	r2,r2,3
    1ac4:	100d883a 	mov	r6,r2
    1ac8:	180b883a 	mov	r5,r3
    1acc:	e13ffd17 	ldw	r4,-12(fp)
    1ad0:	00004d80 	call	4d8 <_ZN6Entity6setPosEii>
};
    1ad4:	0001883a 	nop
    1ad8:	e037883a 	mov	sp,fp
    1adc:	dfc00117 	ldw	ra,4(sp)
    1ae0:	df000017 	ldw	fp,0(sp)
    1ae4:	dec00204 	addi	sp,sp,8
    1ae8:	f800283a 	ret

00001aec <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_>:

void Game::distanceToWalls(Entity* en, int* up, int* down, int* left, int* right){
    1aec:	defff004 	addi	sp,sp,-64
    1af0:	dfc00f15 	stw	ra,60(sp)
    1af4:	df000e15 	stw	fp,56(sp)
    1af8:	df000e04 	addi	fp,sp,56
    1afc:	e13ffc15 	stw	r4,-16(fp)
    1b00:	e17ffd15 	stw	r5,-12(fp)
    1b04:	e1bffe15 	stw	r6,-8(fp)
    1b08:	e1ffff15 	stw	r7,-4(fp)
	int x = en->getX();
    1b0c:	e13ffd17 	ldw	r4,-12(fp)
    1b10:	00005500 	call	550 <_ZN6Entity4getXEv>
    1b14:	e0bff615 	stw	r2,-40(fp)
	int y = en->getY();
    1b18:	e13ffd17 	ldw	r4,-12(fp)
    1b1c:	00005780 	call	578 <_ZN6Entity4getYEv>
    1b20:	e0bff715 	stw	r2,-36(fp)
	int xSq = en->getX() / 8.0;
    1b24:	e13ffd17 	ldw	r4,-12(fp)
    1b28:	00005500 	call	550 <_ZN6Entity4getXEv>
    1b2c:	1009883a 	mov	r4,r2
    1b30:	0009c5c0 	call	9c5c <__floatsisf>
    1b34:	1007883a 	mov	r3,r2
    1b38:	00904034 	movhi	r2,16640
    1b3c:	1885fff2 	custom	255,r2,r3,r2
    1b40:	1009883a 	mov	r4,r2
    1b44:	0009bec0 	call	9bec <__fixsfsi>
    1b48:	e0bff815 	stw	r2,-32(fp)
	int ySq = en->getY() / 8.0;
    1b4c:	e13ffd17 	ldw	r4,-12(fp)
    1b50:	00005780 	call	578 <_ZN6Entity4getYEv>
    1b54:	1009883a 	mov	r4,r2
    1b58:	0009c5c0 	call	9c5c <__floatsisf>
    1b5c:	1007883a 	mov	r3,r2
    1b60:	00904034 	movhi	r2,16640
    1b64:	1885fff2 	custom	255,r2,r3,r2
    1b68:	1009883a 	mov	r4,r2
    1b6c:	0009bec0 	call	9bec <__fixsfsi>
    1b70:	e0bff915 	stw	r2,-28(fp)

	int upSq = 0, downSq = 0, leftSq = 0, rightSq = 0;
    1b74:	e03ff215 	stw	zero,-56(fp)
    1b78:	e03ff315 	stw	zero,-52(fp)
    1b7c:	e03ff415 	stw	zero,-48(fp)
    1b80:	e03ff515 	stw	zero,-44(fp)
	if(x % 8 == 0){
    1b84:	e0bff617 	ldw	r2,-40(fp)
    1b88:	108001cc 	andi	r2,r2,7
    1b8c:	10002c1e 	bne	r2,zero,1c40 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x154>
		while(walkable(map[ySq - upSq - 1][xSq])) 	 upSq++;
    1b90:	e0fff917 	ldw	r3,-28(fp)
    1b94:	e0bff217 	ldw	r2,-56(fp)
    1b98:	1885c83a 	sub	r2,r3,r2
    1b9c:	10bfffc4 	addi	r2,r2,-1
    1ba0:	e0fffc17 	ldw	r3,-16(fp)
    1ba4:	11000564 	muli	r4,r2,21
    1ba8:	e0bff817 	ldw	r2,-32(fp)
    1bac:	2085883a 	add	r2,r4,r2
    1bb0:	10807cc4 	addi	r2,r2,499
    1bb4:	1085883a 	add	r2,r2,r2
    1bb8:	1085883a 	add	r2,r2,r2
    1bbc:	1885883a 	add	r2,r3,r2
    1bc0:	10800017 	ldw	r2,0(r2)
    1bc4:	100b883a 	mov	r5,r2
    1bc8:	e13ffc17 	ldw	r4,-16(fp)
    1bcc:	000234c0 	call	234c <_ZN4Game8walkableE10map_item_t>
    1bd0:	10803fcc 	andi	r2,r2,255
    1bd4:	10000426 	beq	r2,zero,1be8 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0xfc>
    1bd8:	e0bff217 	ldw	r2,-56(fp)
    1bdc:	10800044 	addi	r2,r2,1
    1be0:	e0bff215 	stw	r2,-56(fp)
    1be4:	003fea06 	br	1b90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001b90>
		while(walkable(map[ySq + downSq + 1][xSq]))  downSq++;
    1be8:	e0fff917 	ldw	r3,-28(fp)
    1bec:	e0bff317 	ldw	r2,-52(fp)
    1bf0:	1885883a 	add	r2,r3,r2
    1bf4:	10800044 	addi	r2,r2,1
    1bf8:	e0fffc17 	ldw	r3,-16(fp)
    1bfc:	11000564 	muli	r4,r2,21
    1c00:	e0bff817 	ldw	r2,-32(fp)
    1c04:	2085883a 	add	r2,r4,r2
    1c08:	10807cc4 	addi	r2,r2,499
    1c0c:	1085883a 	add	r2,r2,r2
    1c10:	1085883a 	add	r2,r2,r2
    1c14:	1885883a 	add	r2,r3,r2
    1c18:	10800017 	ldw	r2,0(r2)
    1c1c:	100b883a 	mov	r5,r2
    1c20:	e13ffc17 	ldw	r4,-16(fp)
    1c24:	000234c0 	call	234c <_ZN4Game8walkableE10map_item_t>
    1c28:	10803fcc 	andi	r2,r2,255
    1c2c:	10000426 	beq	r2,zero,1c40 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x154>
    1c30:	e0bff317 	ldw	r2,-52(fp)
    1c34:	10800044 	addi	r2,r2,1
    1c38:	e0bff315 	stw	r2,-52(fp)
    1c3c:	003fea06 	br	1be8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001be8>
	}
	if(y % 8 == 0){
    1c40:	e0bff717 	ldw	r2,-36(fp)
    1c44:	108001cc 	andi	r2,r2,7
    1c48:	10002c1e 	bne	r2,zero,1cfc <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x210>
		while(walkable(map[ySq][xSq - leftSq - 1]))  leftSq++;
    1c4c:	e0fff817 	ldw	r3,-32(fp)
    1c50:	e0bff417 	ldw	r2,-48(fp)
    1c54:	1885c83a 	sub	r2,r3,r2
    1c58:	10bfffc4 	addi	r2,r2,-1
    1c5c:	e0fffc17 	ldw	r3,-16(fp)
    1c60:	e13ff917 	ldw	r4,-28(fp)
    1c64:	21000564 	muli	r4,r4,21
    1c68:	2085883a 	add	r2,r4,r2
    1c6c:	10807cc4 	addi	r2,r2,499
    1c70:	1085883a 	add	r2,r2,r2
    1c74:	1085883a 	add	r2,r2,r2
    1c78:	1885883a 	add	r2,r3,r2
    1c7c:	10800017 	ldw	r2,0(r2)
    1c80:	100b883a 	mov	r5,r2
    1c84:	e13ffc17 	ldw	r4,-16(fp)
    1c88:	000234c0 	call	234c <_ZN4Game8walkableE10map_item_t>
    1c8c:	10803fcc 	andi	r2,r2,255
    1c90:	10000426 	beq	r2,zero,1ca4 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x1b8>
    1c94:	e0bff417 	ldw	r2,-48(fp)
    1c98:	10800044 	addi	r2,r2,1
    1c9c:	e0bff415 	stw	r2,-48(fp)
    1ca0:	003fea06 	br	1c4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001c4c>
		while(walkable(map[ySq][xSq + rightSq + 1])) rightSq++;
    1ca4:	e0fff817 	ldw	r3,-32(fp)
    1ca8:	e0bff517 	ldw	r2,-44(fp)
    1cac:	1885883a 	add	r2,r3,r2
    1cb0:	10800044 	addi	r2,r2,1
    1cb4:	e0fffc17 	ldw	r3,-16(fp)
    1cb8:	e13ff917 	ldw	r4,-28(fp)
    1cbc:	21000564 	muli	r4,r4,21
    1cc0:	2085883a 	add	r2,r4,r2
    1cc4:	10807cc4 	addi	r2,r2,499
    1cc8:	1085883a 	add	r2,r2,r2
    1ccc:	1085883a 	add	r2,r2,r2
    1cd0:	1885883a 	add	r2,r3,r2
    1cd4:	10800017 	ldw	r2,0(r2)
    1cd8:	100b883a 	mov	r5,r2
    1cdc:	e13ffc17 	ldw	r4,-16(fp)
    1ce0:	000234c0 	call	234c <_ZN4Game8walkableE10map_item_t>
    1ce4:	10803fcc 	andi	r2,r2,255
    1ce8:	10000426 	beq	r2,zero,1cfc <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x210>
    1cec:	e0bff517 	ldw	r2,-44(fp)
    1cf0:	10800044 	addi	r2,r2,1
    1cf4:	e0bff515 	stw	r2,-44(fp)
    1cf8:	003fea06 	br	1ca4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001ca4>
	}

	int xPixel = (xSq * 8) - x;
    1cfc:	e0bff817 	ldw	r2,-32(fp)
    1d00:	100690fa 	slli	r3,r2,3
    1d04:	e0bff617 	ldw	r2,-40(fp)
    1d08:	1885c83a 	sub	r2,r3,r2
    1d0c:	e0bffa15 	stw	r2,-24(fp)
	int yPixel = (ySq * 8) - y;
    1d10:	e0bff917 	ldw	r2,-28(fp)
    1d14:	100690fa 	slli	r3,r2,3
    1d18:	e0bff717 	ldw	r2,-36(fp)
    1d1c:	1885c83a 	sub	r2,r3,r2
    1d20:	e0bffb15 	stw	r2,-20(fp)

	*up 	= (upSq * 8) - yPixel;
    1d24:	e0bff217 	ldw	r2,-56(fp)
    1d28:	100690fa 	slli	r3,r2,3
    1d2c:	e0bffb17 	ldw	r2,-20(fp)
    1d30:	1887c83a 	sub	r3,r3,r2
    1d34:	e0bffe17 	ldw	r2,-8(fp)
    1d38:	10c00015 	stw	r3,0(r2)
	*down 	= (downSq * 8) + yPixel;
    1d3c:	e0bff317 	ldw	r2,-52(fp)
    1d40:	100690fa 	slli	r3,r2,3
    1d44:	e0bffb17 	ldw	r2,-20(fp)
    1d48:	1887883a 	add	r3,r3,r2
    1d4c:	e0bfff17 	ldw	r2,-4(fp)
    1d50:	10c00015 	stw	r3,0(r2)
	*left 	= (leftSq * 8) - xPixel;
    1d54:	e0bff417 	ldw	r2,-48(fp)
    1d58:	100690fa 	slli	r3,r2,3
    1d5c:	e0bffa17 	ldw	r2,-24(fp)
    1d60:	1887c83a 	sub	r3,r3,r2
    1d64:	e0800217 	ldw	r2,8(fp)
    1d68:	10c00015 	stw	r3,0(r2)
	*right 	= (rightSq * 8) + xPixel;
    1d6c:	e0bff517 	ldw	r2,-44(fp)
    1d70:	100690fa 	slli	r3,r2,3
    1d74:	e0bffa17 	ldw	r2,-24(fp)
    1d78:	1887883a 	add	r3,r3,r2
    1d7c:	e0800317 	ldw	r2,12(fp)
    1d80:	10c00015 	stw	r3,0(r2)
};
    1d84:	0001883a 	nop
    1d88:	e037883a 	mov	sp,fp
    1d8c:	dfc00117 	ldw	ra,4(sp)
    1d90:	df000017 	ldw	fp,0(sp)
    1d94:	dec00204 	addi	sp,sp,8
    1d98:	f800283a 	ret

00001d9c <_ZN4Game15distanceToEntryEP6EntityPi>:

bool Game::distanceToEntry(Entity* en, int* distance){
    1d9c:	defff104 	addi	sp,sp,-60
    1da0:	dfc00e15 	stw	ra,56(sp)
    1da4:	df000d15 	stw	fp,52(sp)
    1da8:	df000d04 	addi	fp,sp,52
    1dac:	e13ffd15 	stw	r4,-12(fp)
    1db0:	e17ffe15 	stw	r5,-8(fp)
    1db4:	e1bfff15 	stw	r6,-4(fp)
	int x = en->getX();
    1db8:	e13ffe17 	ldw	r4,-8(fp)
    1dbc:	00005500 	call	550 <_ZN6Entity4getXEv>
    1dc0:	e0bff915 	stw	r2,-28(fp)
	int y = en->getY();
    1dc4:	e13ffe17 	ldw	r4,-8(fp)
    1dc8:	00005780 	call	578 <_ZN6Entity4getYEv>
    1dcc:	e0bffa15 	stw	r2,-24(fp)
	int xSq = en->getX() / 8.0;
    1dd0:	e13ffe17 	ldw	r4,-8(fp)
    1dd4:	00005500 	call	550 <_ZN6Entity4getXEv>
    1dd8:	1009883a 	mov	r4,r2
    1ddc:	0009c5c0 	call	9c5c <__floatsisf>
    1de0:	1007883a 	mov	r3,r2
    1de4:	00904034 	movhi	r2,16640
    1de8:	1885fff2 	custom	255,r2,r3,r2
    1dec:	1009883a 	mov	r4,r2
    1df0:	0009bec0 	call	9bec <__fixsfsi>
    1df4:	e0bff315 	stw	r2,-52(fp)
	int ySq = en->getY() / 8.0;
    1df8:	e13ffe17 	ldw	r4,-8(fp)
    1dfc:	00005780 	call	578 <_ZN6Entity4getYEv>
    1e00:	1009883a 	mov	r4,r2
    1e04:	0009c5c0 	call	9c5c <__floatsisf>
    1e08:	1007883a 	mov	r3,r2
    1e0c:	00904034 	movhi	r2,16640
    1e10:	1885fff2 	custom	255,r2,r3,r2
    1e14:	1009883a 	mov	r4,r2
    1e18:	0009bec0 	call	9bec <__fixsfsi>
    1e1c:	e0bff415 	stw	r2,-48(fp)

	e_dir_t curr_dir = en->getCurrDir();
    1e20:	e13ffe17 	ldw	r4,-8(fp)
    1e24:	00005a00 	call	5a0 <_ZN6Entity10getCurrDirEv>
    1e28:	e0bffb15 	stw	r2,-20(fp)
	e_dir_t next_dir = en->getNextDir();
    1e2c:	e13ffe17 	ldw	r4,-8(fp)
    1e30:	00005c80 	call	5c8 <_ZN6Entity10getNextDirEv>
    1e34:	e0bffc15 	stw	r2,-16(fp)

	int walk_x = 0, walk_y = 0;
    1e38:	e03ff515 	stw	zero,-44(fp)
    1e3c:	e03ff615 	stw	zero,-40(fp)
	int check_x = 0, check_y = 0;
    1e40:	e03ff715 	stw	zero,-36(fp)
    1e44:	e03ff815 	stw	zero,-32(fp)

	switch(curr_dir){
    1e48:	e0bffb17 	ldw	r2,-20(fp)
    1e4c:	10c00060 	cmpeqi	r3,r2,1
    1e50:	18000c1e 	bne	r3,zero,1e84 <_ZN4Game15distanceToEntryEP6EntityPi+0xe8>
    1e54:	10c00088 	cmpgei	r3,r2,2
    1e58:	1800021e 	bne	r3,zero,1e64 <_ZN4Game15distanceToEntryEP6EntityPi+0xc8>
    1e5c:	10000626 	beq	r2,zero,1e78 <_ZN4Game15distanceToEntryEP6EntityPi+0xdc>
    1e60:	00001106 	br	1ea8 <_ZN4Game15distanceToEntryEP6EntityPi+0x10c>
    1e64:	10c000a0 	cmpeqi	r3,r2,2
    1e68:	1800091e 	bne	r3,zero,1e90 <_ZN4Game15distanceToEntryEP6EntityPi+0xf4>
    1e6c:	108000e0 	cmpeqi	r2,r2,3
    1e70:	10000a1e 	bne	r2,zero,1e9c <_ZN4Game15distanceToEntryEP6EntityPi+0x100>
    1e74:	00000c06 	br	1ea8 <_ZN4Game15distanceToEntryEP6EntityPi+0x10c>
	case DIR_UP: 	walk_y = -1; break;
    1e78:	00bfffc4 	movi	r2,-1
    1e7c:	e0bff615 	stw	r2,-40(fp)
    1e80:	00000b06 	br	1eb0 <_ZN4Game15distanceToEntryEP6EntityPi+0x114>
	case DIR_DOWN: 	walk_y = 1; break;
    1e84:	00800044 	movi	r2,1
    1e88:	e0bff615 	stw	r2,-40(fp)
    1e8c:	00000806 	br	1eb0 <_ZN4Game15distanceToEntryEP6EntityPi+0x114>
	case DIR_LEFT: 	walk_x = -1; break;
    1e90:	00bfffc4 	movi	r2,-1
    1e94:	e0bff515 	stw	r2,-44(fp)
    1e98:	00000506 	br	1eb0 <_ZN4Game15distanceToEntryEP6EntityPi+0x114>
	case DIR_RIGHT: walk_x = 1; break;
    1e9c:	00800044 	movi	r2,1
    1ea0:	e0bff515 	stw	r2,-44(fp)
    1ea4:	00000206 	br	1eb0 <_ZN4Game15distanceToEntryEP6EntityPi+0x114>
	default: return false;
    1ea8:	0005883a 	mov	r2,zero
    1eac:	00006506 	br	2044 <_ZN4Game15distanceToEntryEP6EntityPi+0x2a8>
	}

	switch(next_dir){
    1eb0:	e0bffc17 	ldw	r2,-16(fp)
    1eb4:	10c00060 	cmpeqi	r3,r2,1
    1eb8:	18000c1e 	bne	r3,zero,1eec <_ZN4Game15distanceToEntryEP6EntityPi+0x150>
    1ebc:	10c00088 	cmpgei	r3,r2,2
    1ec0:	1800021e 	bne	r3,zero,1ecc <_ZN4Game15distanceToEntryEP6EntityPi+0x130>
    1ec4:	10000626 	beq	r2,zero,1ee0 <_ZN4Game15distanceToEntryEP6EntityPi+0x144>
    1ec8:	00001106 	br	1f10 <_ZN4Game15distanceToEntryEP6EntityPi+0x174>
    1ecc:	10c000a0 	cmpeqi	r3,r2,2
    1ed0:	1800091e 	bne	r3,zero,1ef8 <_ZN4Game15distanceToEntryEP6EntityPi+0x15c>
    1ed4:	108000e0 	cmpeqi	r2,r2,3
    1ed8:	10000a1e 	bne	r2,zero,1f04 <_ZN4Game15distanceToEntryEP6EntityPi+0x168>
    1edc:	00000c06 	br	1f10 <_ZN4Game15distanceToEntryEP6EntityPi+0x174>
	case DIR_UP: 	check_y = -1; break;
    1ee0:	00bfffc4 	movi	r2,-1
    1ee4:	e0bff815 	stw	r2,-32(fp)
    1ee8:	00000b06 	br	1f18 <_ZN4Game15distanceToEntryEP6EntityPi+0x17c>
	case DIR_DOWN: 	check_y = 1; break;
    1eec:	00800044 	movi	r2,1
    1ef0:	e0bff815 	stw	r2,-32(fp)
    1ef4:	00000806 	br	1f18 <_ZN4Game15distanceToEntryEP6EntityPi+0x17c>
	case DIR_LEFT: 	check_x = -1; break;
    1ef8:	00bfffc4 	movi	r2,-1
    1efc:	e0bff715 	stw	r2,-36(fp)
    1f00:	00000506 	br	1f18 <_ZN4Game15distanceToEntryEP6EntityPi+0x17c>
	case DIR_RIGHT: check_x = 1; break;
    1f04:	00800044 	movi	r2,1
    1f08:	e0bff715 	stw	r2,-36(fp)
    1f0c:	00000206 	br	1f18 <_ZN4Game15distanceToEntryEP6EntityPi+0x17c>
	default: return false;
    1f10:	0005883a 	mov	r2,zero
    1f14:	00004b06 	br	2044 <_ZN4Game15distanceToEntryEP6EntityPi+0x2a8>
	}

	while(walkable(map[ySq][xSq])){ // walk current direction per square
    1f18:	e0fffd17 	ldw	r3,-12(fp)
    1f1c:	e0bff417 	ldw	r2,-48(fp)
    1f20:	11000564 	muli	r4,r2,21
    1f24:	e0bff317 	ldw	r2,-52(fp)
    1f28:	2085883a 	add	r2,r4,r2
    1f2c:	10807cc4 	addi	r2,r2,499
    1f30:	1085883a 	add	r2,r2,r2
    1f34:	1085883a 	add	r2,r2,r2
    1f38:	1885883a 	add	r2,r3,r2
    1f3c:	10800017 	ldw	r2,0(r2)
    1f40:	100b883a 	mov	r5,r2
    1f44:	e13ffd17 	ldw	r4,-12(fp)
    1f48:	000234c0 	call	234c <_ZN4Game8walkableE10map_item_t>
    1f4c:	10803fcc 	andi	r2,r2,255
    1f50:	10003b26 	beq	r2,zero,2040 <_ZN4Game15distanceToEntryEP6EntityPi+0x2a4>
		if(walkable(map[ySq + check_y][xSq + check_x])){ // check per walkable square if it's walkable in the direction we wish to go
    1f54:	e0fff417 	ldw	r3,-48(fp)
    1f58:	e0bff817 	ldw	r2,-32(fp)
    1f5c:	1889883a 	add	r4,r3,r2
    1f60:	e0fff317 	ldw	r3,-52(fp)
    1f64:	e0bff717 	ldw	r2,-36(fp)
    1f68:	1885883a 	add	r2,r3,r2
    1f6c:	e0fffd17 	ldw	r3,-12(fp)
    1f70:	21000564 	muli	r4,r4,21
    1f74:	2085883a 	add	r2,r4,r2
    1f78:	10807cc4 	addi	r2,r2,499
    1f7c:	1085883a 	add	r2,r2,r2
    1f80:	1085883a 	add	r2,r2,r2
    1f84:	1885883a 	add	r2,r3,r2
    1f88:	10800017 	ldw	r2,0(r2)
    1f8c:	100b883a 	mov	r5,r2
    1f90:	e13ffd17 	ldw	r4,-12(fp)
    1f94:	000234c0 	call	234c <_ZN4Game8walkableE10map_item_t>
    1f98:	10803fcc 	andi	r2,r2,255
    1f9c:	10001f26 	beq	r2,zero,201c <_ZN4Game15distanceToEntryEP6EntityPi+0x280>
			switch(next_dir){
    1fa0:	e0bffc17 	ldw	r2,-16(fp)
    1fa4:	10001916 	blt	r2,zero,200c <_ZN4Game15distanceToEntryEP6EntityPi+0x270>
    1fa8:	10c00090 	cmplti	r3,r2,2
    1fac:	1800031e 	bne	r3,zero,1fbc <_ZN4Game15distanceToEntryEP6EntityPi+0x220>
    1fb0:	10800108 	cmpgei	r2,r2,4
    1fb4:	1000151e 	bne	r2,zero,200c <_ZN4Game15distanceToEntryEP6EntityPi+0x270>
    1fb8:	00000a06 	br	1fe4 <_ZN4Game15distanceToEntryEP6EntityPi+0x248>
			case DIR_UP:
			case DIR_DOWN:
				*distance = abs((xSq * 8) - x);
    1fbc:	e0bff317 	ldw	r2,-52(fp)
    1fc0:	100690fa 	slli	r3,r2,3
    1fc4:	e0bff917 	ldw	r2,-28(fp)
    1fc8:	1885c83a 	sub	r2,r3,r2
    1fcc:	1000010e 	bge	r2,zero,1fd4 <_ZN4Game15distanceToEntryEP6EntityPi+0x238>
    1fd0:	0085c83a 	sub	r2,zero,r2
    1fd4:	1007883a 	mov	r3,r2
    1fd8:	e0bfff17 	ldw	r2,-4(fp)
    1fdc:	10c00015 	stw	r3,0(r2)
				break;
    1fe0:	00000c06 	br	2014 <_ZN4Game15distanceToEntryEP6EntityPi+0x278>
			case DIR_LEFT:
			case DIR_RIGHT:
				*distance = abs((ySq * 8) - y);
    1fe4:	e0bff417 	ldw	r2,-48(fp)
    1fe8:	100690fa 	slli	r3,r2,3
    1fec:	e0bffa17 	ldw	r2,-24(fp)
    1ff0:	1885c83a 	sub	r2,r3,r2
    1ff4:	1000010e 	bge	r2,zero,1ffc <_ZN4Game15distanceToEntryEP6EntityPi+0x260>
    1ff8:	0085c83a 	sub	r2,zero,r2
    1ffc:	1007883a 	mov	r3,r2
    2000:	e0bfff17 	ldw	r2,-4(fp)
    2004:	10c00015 	stw	r3,0(r2)
				break;
    2008:	00000206 	br	2014 <_ZN4Game15distanceToEntryEP6EntityPi+0x278>
			default: return false;
    200c:	0005883a 	mov	r2,zero
    2010:	00000c06 	br	2044 <_ZN4Game15distanceToEntryEP6EntityPi+0x2a8>
			}
			return true;
    2014:	00800044 	movi	r2,1
    2018:	00000a06 	br	2044 <_ZN4Game15distanceToEntryEP6EntityPi+0x2a8>
		}
		xSq += walk_x;
    201c:	e0fff317 	ldw	r3,-52(fp)
    2020:	e0bff517 	ldw	r2,-44(fp)
    2024:	1885883a 	add	r2,r3,r2
    2028:	e0bff315 	stw	r2,-52(fp)
		ySq += walk_y;
    202c:	e0fff417 	ldw	r3,-48(fp)
    2030:	e0bff617 	ldw	r2,-40(fp)
    2034:	1885883a 	add	r2,r3,r2
    2038:	e0bff415 	stw	r2,-48(fp)
	case DIR_LEFT: 	check_x = -1; break;
	case DIR_RIGHT: check_x = 1; break;
	default: return false;
	}

	while(walkable(map[ySq][xSq])){ // walk current direction per square
    203c:	003fb606 	br	1f18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001f18>
		}
		xSq += walk_x;
		ySq += walk_y;
	}

	return false;
    2040:	0005883a 	mov	r2,zero
}
    2044:	e037883a 	mov	sp,fp
    2048:	dfc00117 	ldw	ra,4(sp)
    204c:	df000017 	ldw	fp,0(sp)
    2050:	dec00204 	addi	sp,sp,8
    2054:	f800283a 	ret

00002058 <_ZN4Game14updateMovementEP6Entityi>:


void Game::updateMovement(Entity* en, int elapsedTime){
    2058:	deffef04 	addi	sp,sp,-68
    205c:	dfc01015 	stw	ra,64(sp)
    2060:	df000f15 	stw	fp,60(sp)
    2064:	dc000e15 	stw	r16,56(sp)
    2068:	df000f04 	addi	fp,sp,60
    206c:	e13ffc15 	stw	r4,-16(fp)
    2070:	e17ffd15 	stw	r5,-12(fp)
    2074:	e1bffe15 	stw	r6,-8(fp)
	en->update(elapsedTime);
    2078:	e17ffe17 	ldw	r5,-8(fp)
    207c:	e13ffd17 	ldw	r4,-12(fp)
    2080:	000037c0 	call	37c <_ZN6Entity6updateEi>

	// Calculate maximum travelable distance
	float timeFraction = (float)elapsedTime / 1000;
    2084:	e13ffe17 	ldw	r4,-8(fp)
    2088:	0009c5c0 	call	9c5c <__floatsisf>
    208c:	1007883a 	mov	r3,r2
    2090:	00911eb4 	movhi	r2,17530
    2094:	1885fff2 	custom	255,r2,r3,r2
    2098:	e0bff515 	stw	r2,-44(fp)
	int walk = roundf(timeFraction * en->getVelocity());
    209c:	e13ffd17 	ldw	r4,-12(fp)
    20a0:	00005280 	call	528 <_ZN6Entity11getVelocityEv>
    20a4:	1009883a 	mov	r4,r2
    20a8:	0009c5c0 	call	9c5c <__floatsisf>
    20ac:	1007883a 	mov	r3,r2
    20b0:	e0bff517 	ldw	r2,-44(fp)
    20b4:	1885ff32 	custom	252,r2,r3,r2
    20b8:	1009883a 	mov	r4,r2
    20bc:	00077a00 	call	77a0 <roundf>
    20c0:	1007883a 	mov	r3,r2
    20c4:	1809883a 	mov	r4,r3
    20c8:	0009bec0 	call	9bec <__fixsfsi>
    20cc:	e0bff315 	stw	r2,-52(fp)

	int up, down, left, right;
	distanceToWalls(en, &up, &down, &left, &right);
    20d0:	e13ff804 	addi	r4,fp,-32
    20d4:	e0fff704 	addi	r3,fp,-36
    20d8:	e0bffa04 	addi	r2,fp,-24
    20dc:	d8800115 	stw	r2,4(sp)
    20e0:	e0bff904 	addi	r2,fp,-28
    20e4:	d8800015 	stw	r2,0(sp)
    20e8:	200f883a 	mov	r7,r4
    20ec:	180d883a 	mov	r6,r3
    20f0:	e17ffd17 	ldw	r5,-12(fp)
    20f4:	e13ffc17 	ldw	r4,-16(fp)
    20f8:	0001aec0 	call	1aec <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_>

	if(en->getNextDir() != en->getCurrDir()){
    20fc:	e13ffd17 	ldw	r4,-12(fp)
    2100:	00005c80 	call	5c8 <_ZN6Entity10getNextDirEv>
    2104:	1021883a 	mov	r16,r2
    2108:	e13ffd17 	ldw	r4,-12(fp)
    210c:	00005a00 	call	5a0 <_ZN6Entity10getCurrDirEv>
    2110:	8084c03a 	cmpne	r2,r16,r2
    2114:	10803fcc 	andi	r2,r2,255
    2118:	10003226 	beq	r2,zero,21e4 <_ZN4Game14updateMovementEP6Entityi+0x18c>
		e_dir_t next = en->getNextDir();
    211c:	e13ffd17 	ldw	r4,-12(fp)
    2120:	00005c80 	call	5c8 <_ZN6Entity10getNextDirEv>
    2124:	e0bff615 	stw	r2,-40(fp)

		// Check if next direction is valid through maximum distance in that direction
		bool valid = false;
    2128:	e03ff405 	stb	zero,-48(fp)
		switch(next){
    212c:	e0bff617 	ldw	r2,-40(fp)
    2130:	10c00060 	cmpeqi	r3,r2,1
    2134:	18000d1e 	bne	r3,zero,216c <_ZN4Game14updateMovementEP6Entityi+0x114>
    2138:	10c00088 	cmpgei	r3,r2,2
    213c:	1800021e 	bne	r3,zero,2148 <_ZN4Game14updateMovementEP6Entityi+0xf0>
    2140:	10000626 	beq	r2,zero,215c <_ZN4Game14updateMovementEP6Entityi+0x104>
		case DIR_UP: valid = up > 0; break;
		case DIR_DOWN: valid = down > 0; break;
		case DIR_LEFT: valid = left > 0; break;
		case DIR_RIGHT: valid = right > 0; break;
		default: break;
    2144:	00001506 	br	219c <_ZN4Game14updateMovementEP6Entityi+0x144>
	if(en->getNextDir() != en->getCurrDir()){
		e_dir_t next = en->getNextDir();

		// Check if next direction is valid through maximum distance in that direction
		bool valid = false;
		switch(next){
    2148:	10c000a0 	cmpeqi	r3,r2,2
    214c:	18000b1e 	bne	r3,zero,217c <_ZN4Game14updateMovementEP6Entityi+0x124>
    2150:	108000e0 	cmpeqi	r2,r2,3
    2154:	10000d1e 	bne	r2,zero,218c <_ZN4Game14updateMovementEP6Entityi+0x134>
		case DIR_UP: valid = up > 0; break;
		case DIR_DOWN: valid = down > 0; break;
		case DIR_LEFT: valid = left > 0; break;
		case DIR_RIGHT: valid = right > 0; break;
		default: break;
    2158:	00001006 	br	219c <_ZN4Game14updateMovementEP6Entityi+0x144>
		e_dir_t next = en->getNextDir();

		// Check if next direction is valid through maximum distance in that direction
		bool valid = false;
		switch(next){
		case DIR_UP: valid = up > 0; break;
    215c:	e0bff717 	ldw	r2,-36(fp)
    2160:	0084803a 	cmplt	r2,zero,r2
    2164:	e0bff405 	stb	r2,-48(fp)
    2168:	00000c06 	br	219c <_ZN4Game14updateMovementEP6Entityi+0x144>
		case DIR_DOWN: valid = down > 0; break;
    216c:	e0bff817 	ldw	r2,-32(fp)
    2170:	0084803a 	cmplt	r2,zero,r2
    2174:	e0bff405 	stb	r2,-48(fp)
    2178:	00000806 	br	219c <_ZN4Game14updateMovementEP6Entityi+0x144>
		case DIR_LEFT: valid = left > 0; break;
    217c:	e0bff917 	ldw	r2,-28(fp)
    2180:	0084803a 	cmplt	r2,zero,r2
    2184:	e0bff405 	stb	r2,-48(fp)
    2188:	00000406 	br	219c <_ZN4Game14updateMovementEP6Entityi+0x144>
		case DIR_RIGHT: valid = right > 0; break;
    218c:	e0bffa17 	ldw	r2,-24(fp)
    2190:	0084803a 	cmplt	r2,zero,r2
    2194:	e0bff405 	stb	r2,-48(fp)
    2198:	0001883a 	nop
		default: break;
		}

		if(valid){
    219c:	e0bff403 	ldbu	r2,-48(fp)
    21a0:	10000426 	beq	r2,zero,21b4 <_ZN4Game14updateMovementEP6Entityi+0x15c>
			// If distance in next direction isn't zero then there is a free path
			en->setCurrDir(next);
    21a4:	e17ff617 	ldw	r5,-40(fp)
    21a8:	e13ffd17 	ldw	r4,-12(fp)
    21ac:	00004980 	call	498 <_ZN6Entity10setCurrDirE5E_DIR>
    21b0:	00000c06 	br	21e4 <_ZN4Game14updateMovementEP6Entityi+0x18c>
		}else{
			// Or if the distance to the next available entry is less then the walk distance
			// then trim the walk distance so the character is exactly in front on next update
			int distance;
			if(distanceToEntry(en, &distance)){
    21b4:	e0bffb04 	addi	r2,fp,-20
    21b8:	100d883a 	mov	r6,r2
    21bc:	e17ffd17 	ldw	r5,-12(fp)
    21c0:	e13ffc17 	ldw	r4,-16(fp)
    21c4:	0001d9c0 	call	1d9c <_ZN4Game15distanceToEntryEP6EntityPi>
    21c8:	10803fcc 	andi	r2,r2,255
    21cc:	10000526 	beq	r2,zero,21e4 <_ZN4Game14updateMovementEP6Entityi+0x18c>
				if(walk > distance){
    21d0:	e0fffb17 	ldw	r3,-20(fp)
    21d4:	e0bff317 	ldw	r2,-52(fp)
    21d8:	1880020e 	bge	r3,r2,21e4 <_ZN4Game14updateMovementEP6Entityi+0x18c>
					walk = distance;
    21dc:	e0bffb17 	ldw	r2,-20(fp)
    21e0:	e0bff315 	stw	r2,-52(fp)
			}
		}
	}

	// Update place
	switch(en->getCurrDir()){
    21e4:	e13ffd17 	ldw	r4,-12(fp)
    21e8:	00005a00 	call	5a0 <_ZN6Entity10getCurrDirEv>
    21ec:	10c00060 	cmpeqi	r3,r2,1
    21f0:	18001b1e 	bne	r3,zero,2260 <_ZN4Game14updateMovementEP6Entityi+0x208>
    21f4:	10c00088 	cmpgei	r3,r2,2
    21f8:	1800021e 	bne	r3,zero,2204 <_ZN4Game14updateMovementEP6Entityi+0x1ac>
    21fc:	10000626 	beq	r2,zero,2218 <_ZN4Game14updateMovementEP6Entityi+0x1c0>
		case DIR_UP: 	en->setPos(en->getX(), en->getY() - SHORTEST(walk, up)); break;
		case DIR_DOWN: 	en->setPos(en->getX(), en->getY() + SHORTEST(walk, down)); break;
		case DIR_LEFT: 	en->setPos(en->getX() - SHORTEST(walk, left), en->getY()); break;
		case DIR_RIGHT: en->setPos(en->getX() + SHORTEST(walk, right), en->getY()); break;
		default: break;
    2200:	00004b06 	br	2330 <_ZN4Game14updateMovementEP6Entityi+0x2d8>
			}
		}
	}

	// Update place
	switch(en->getCurrDir()){
    2204:	10c000a0 	cmpeqi	r3,r2,2
    2208:	1800271e 	bne	r3,zero,22a8 <_ZN4Game14updateMovementEP6Entityi+0x250>
    220c:	108000e0 	cmpeqi	r2,r2,3
    2210:	1000361e 	bne	r2,zero,22ec <_ZN4Game14updateMovementEP6Entityi+0x294>
		case DIR_UP: 	en->setPos(en->getX(), en->getY() - SHORTEST(walk, up)); break;
		case DIR_DOWN: 	en->setPos(en->getX(), en->getY() + SHORTEST(walk, down)); break;
		case DIR_LEFT: 	en->setPos(en->getX() - SHORTEST(walk, left), en->getY()); break;
		case DIR_RIGHT: en->setPos(en->getX() + SHORTEST(walk, right), en->getY()); break;
		default: break;
    2214:	00004606 	br	2330 <_ZN4Game14updateMovementEP6Entityi+0x2d8>
		}
	}

	// Update place
	switch(en->getCurrDir()){
		case DIR_UP: 	en->setPos(en->getX(), en->getY() - SHORTEST(walk, up)); break;
    2218:	e13ffd17 	ldw	r4,-12(fp)
    221c:	00005500 	call	550 <_ZN6Entity4getXEv>
    2220:	1021883a 	mov	r16,r2
    2224:	e13ffd17 	ldw	r4,-12(fp)
    2228:	00005780 	call	578 <_ZN6Entity4getYEv>
    222c:	1009883a 	mov	r4,r2
    2230:	e0fff717 	ldw	r3,-36(fp)
    2234:	e0bff317 	ldw	r2,-52(fp)
    2238:	1880020e 	bge	r3,r2,2244 <_ZN4Game14updateMovementEP6Entityi+0x1ec>
    223c:	e0bff717 	ldw	r2,-36(fp)
    2240:	00000106 	br	2248 <_ZN4Game14updateMovementEP6Entityi+0x1f0>
    2244:	e0bff317 	ldw	r2,-52(fp)
    2248:	2085c83a 	sub	r2,r4,r2
    224c:	100d883a 	mov	r6,r2
    2250:	800b883a 	mov	r5,r16
    2254:	e13ffd17 	ldw	r4,-12(fp)
    2258:	00004d80 	call	4d8 <_ZN6Entity6setPosEii>
    225c:	00003406 	br	2330 <_ZN4Game14updateMovementEP6Entityi+0x2d8>
		case DIR_DOWN: 	en->setPos(en->getX(), en->getY() + SHORTEST(walk, down)); break;
    2260:	e13ffd17 	ldw	r4,-12(fp)
    2264:	00005500 	call	550 <_ZN6Entity4getXEv>
    2268:	1021883a 	mov	r16,r2
    226c:	e13ffd17 	ldw	r4,-12(fp)
    2270:	00005780 	call	578 <_ZN6Entity4getYEv>
    2274:	1009883a 	mov	r4,r2
    2278:	e0fff817 	ldw	r3,-32(fp)
    227c:	e0bff317 	ldw	r2,-52(fp)
    2280:	1880020e 	bge	r3,r2,228c <_ZN4Game14updateMovementEP6Entityi+0x234>
    2284:	e0bff817 	ldw	r2,-32(fp)
    2288:	00000106 	br	2290 <_ZN4Game14updateMovementEP6Entityi+0x238>
    228c:	e0bff317 	ldw	r2,-52(fp)
    2290:	2085883a 	add	r2,r4,r2
    2294:	100d883a 	mov	r6,r2
    2298:	800b883a 	mov	r5,r16
    229c:	e13ffd17 	ldw	r4,-12(fp)
    22a0:	00004d80 	call	4d8 <_ZN6Entity6setPosEii>
    22a4:	00002206 	br	2330 <_ZN4Game14updateMovementEP6Entityi+0x2d8>
		case DIR_LEFT: 	en->setPos(en->getX() - SHORTEST(walk, left), en->getY()); break;
    22a8:	e13ffd17 	ldw	r4,-12(fp)
    22ac:	00005500 	call	550 <_ZN6Entity4getXEv>
    22b0:	1009883a 	mov	r4,r2
    22b4:	e0fff917 	ldw	r3,-28(fp)
    22b8:	e0bff317 	ldw	r2,-52(fp)
    22bc:	1880020e 	bge	r3,r2,22c8 <_ZN4Game14updateMovementEP6Entityi+0x270>
    22c0:	e0bff917 	ldw	r2,-28(fp)
    22c4:	00000106 	br	22cc <_ZN4Game14updateMovementEP6Entityi+0x274>
    22c8:	e0bff317 	ldw	r2,-52(fp)
    22cc:	20a1c83a 	sub	r16,r4,r2
    22d0:	e13ffd17 	ldw	r4,-12(fp)
    22d4:	00005780 	call	578 <_ZN6Entity4getYEv>
    22d8:	100d883a 	mov	r6,r2
    22dc:	800b883a 	mov	r5,r16
    22e0:	e13ffd17 	ldw	r4,-12(fp)
    22e4:	00004d80 	call	4d8 <_ZN6Entity6setPosEii>
    22e8:	00001106 	br	2330 <_ZN4Game14updateMovementEP6Entityi+0x2d8>
		case DIR_RIGHT: en->setPos(en->getX() + SHORTEST(walk, right), en->getY()); break;
    22ec:	e13ffd17 	ldw	r4,-12(fp)
    22f0:	00005500 	call	550 <_ZN6Entity4getXEv>
    22f4:	1009883a 	mov	r4,r2
    22f8:	e0fffa17 	ldw	r3,-24(fp)
    22fc:	e0bff317 	ldw	r2,-52(fp)
    2300:	1880020e 	bge	r3,r2,230c <_ZN4Game14updateMovementEP6Entityi+0x2b4>
    2304:	e0bffa17 	ldw	r2,-24(fp)
    2308:	00000106 	br	2310 <_ZN4Game14updateMovementEP6Entityi+0x2b8>
    230c:	e0bff317 	ldw	r2,-52(fp)
    2310:	20a1883a 	add	r16,r4,r2
    2314:	e13ffd17 	ldw	r4,-12(fp)
    2318:	00005780 	call	578 <_ZN6Entity4getYEv>
    231c:	100d883a 	mov	r6,r2
    2320:	800b883a 	mov	r5,r16
    2324:	e13ffd17 	ldw	r4,-12(fp)
    2328:	00004d80 	call	4d8 <_ZN6Entity6setPosEii>
    232c:	0001883a 	nop
		default: break;
	};
};
    2330:	0001883a 	nop
    2334:	e6ffff04 	addi	sp,fp,-4
    2338:	dfc00217 	ldw	ra,8(sp)
    233c:	df000117 	ldw	fp,4(sp)
    2340:	dc000017 	ldw	r16,0(sp)
    2344:	dec00304 	addi	sp,sp,12
    2348:	f800283a 	ret

0000234c <_ZN4Game8walkableE10map_item_t>:

bool Game::walkable(map_item_t item){
    234c:	defffd04 	addi	sp,sp,-12
    2350:	df000215 	stw	fp,8(sp)
    2354:	df000204 	addi	fp,sp,8
    2358:	e13ffe15 	stw	r4,-8(fp)
    235c:	e17fff15 	stw	r5,-4(fp)
	return (item < walk_tag);
    2360:	e0bfff17 	ldw	r2,-4(fp)
    2364:	108000d0 	cmplti	r2,r2,3
};
    2368:	e037883a 	mov	sp,fp
    236c:	df000017 	ldw	fp,0(sp)
    2370:	dec00104 	addi	sp,sp,4
    2374:	f800283a 	ret

00002378 <_ZN4Game12getCharPixelEcii>:

bool Game::getCharPixel(char c, int x, int y){
    2378:	deffed04 	addi	sp,sp,-76
    237c:	dfc01215 	stw	ra,72(sp)
    2380:	df001115 	stw	fp,68(sp)
    2384:	df001104 	addi	fp,sp,68
    2388:	e13ffc15 	stw	r4,-16(fp)
    238c:	2805883a 	mov	r2,r5
    2390:	e1bffe15 	stw	r6,-8(fp)
    2394:	e1ffff15 	stw	r7,-4(fp)
    2398:	e0bffd05 	stb	r2,-12(fp)
	if(x < 0 || x > 7)
    239c:	e0bffe17 	ldw	r2,-8(fp)
    23a0:	10000316 	blt	r2,zero,23b0 <_ZN4Game12getCharPixelEcii+0x38>
    23a4:	e0bffe17 	ldw	r2,-8(fp)
    23a8:	10800210 	cmplti	r2,r2,8
    23ac:	1000021e 	bne	r2,zero,23b8 <_ZN4Game12getCharPixelEcii+0x40>
		return false;
    23b0:	0005883a 	mov	r2,zero
    23b4:	00006606 	br	2550 <_ZN4Game12getCharPixelEcii+0x1d8>
	if(y < 0 || y > 7)
    23b8:	e0bfff17 	ldw	r2,-4(fp)
    23bc:	10000316 	blt	r2,zero,23cc <_ZN4Game12getCharPixelEcii+0x54>
    23c0:	e0bfff17 	ldw	r2,-4(fp)
    23c4:	10800210 	cmplti	r2,r2,8
    23c8:	1000021e 	bne	r2,zero,23d4 <_ZN4Game12getCharPixelEcii+0x5c>
		return false;
    23cc:	0005883a 	mov	r2,zero
    23d0:	00005f06 	br	2550 <_ZN4Game12getCharPixelEcii+0x1d8>

	if(c >= 'A' && c <= 'Z'){
    23d4:	e0bffd07 	ldb	r2,-12(fp)
    23d8:	10801050 	cmplti	r2,r2,65
    23dc:	1000101e 	bne	r2,zero,2420 <_ZN4Game12getCharPixelEcii+0xa8>
    23e0:	e0bffd07 	ldb	r2,-12(fp)
    23e4:	108016c8 	cmpgei	r2,r2,91
    23e8:	10000d1e 	bne	r2,zero,2420 <_ZN4Game12getCharPixelEcii+0xa8>
		return bmp_letters[c - 'A'][y][x];
    23ec:	e0bffd07 	ldb	r2,-12(fp)
    23f0:	10ffefc4 	addi	r3,r2,-65
    23f4:	008000b4 	movhi	r2,2
    23f8:	109e1d04 	addi	r2,r2,30836
    23fc:	e13fff17 	ldw	r4,-4(fp)
    2400:	210001e4 	muli	r4,r4,7
    2404:	18c00c64 	muli	r3,r3,49
    2408:	20c7883a 	add	r3,r4,r3
    240c:	10c7883a 	add	r3,r2,r3
    2410:	e0bffe17 	ldw	r2,-8(fp)
    2414:	1885883a 	add	r2,r3,r2
    2418:	10800003 	ldbu	r2,0(r2)
    241c:	00004c06 	br	2550 <_ZN4Game12getCharPixelEcii+0x1d8>
	}
	if(c >= '0' && c <= '9'){
    2420:	e0bffd07 	ldb	r2,-12(fp)
    2424:	10800c10 	cmplti	r2,r2,48
    2428:	1000101e 	bne	r2,zero,246c <_ZN4Game12getCharPixelEcii+0xf4>
    242c:	e0bffd07 	ldb	r2,-12(fp)
    2430:	10800e88 	cmpgei	r2,r2,58
    2434:	10000d1e 	bne	r2,zero,246c <_ZN4Game12getCharPixelEcii+0xf4>
		return bmp_numbers[c - '0'][y][x];
    2438:	e0bffd07 	ldb	r2,-12(fp)
    243c:	10fff404 	addi	r3,r2,-48
    2440:	008000b4 	movhi	r2,2
    2444:	109f5b84 	addi	r2,r2,32110
    2448:	e13fff17 	ldw	r4,-4(fp)
    244c:	210001e4 	muli	r4,r4,7
    2450:	18c00c64 	muli	r3,r3,49
    2454:	20c7883a 	add	r3,r4,r3
    2458:	10c7883a 	add	r3,r2,r3
    245c:	e0bffe17 	ldw	r2,-8(fp)
    2460:	1885883a 	add	r2,r3,r2
    2464:	10800003 	ldbu	r2,0(r2)
    2468:	00003906 	br	2550 <_ZN4Game12getCharPixelEcii+0x1d8>
	}
	if(c == '-'){
    246c:	e0bffd07 	ldb	r2,-12(fp)
    2470:	10800b58 	cmpnei	r2,r2,45
    2474:	1000211e 	bne	r2,zero,24fc <_ZN4Game12getCharPixelEcii+0x184>
			{0,0,0,0,0,0,0},
			{1,1,1,1,1,1,0},
			{0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0}
		};
    2478:	e03fef15 	stw	zero,-68(fp)
    247c:	e03ff015 	stw	zero,-64(fp)
    2480:	e03ff115 	stw	zero,-60(fp)
    2484:	e03ff215 	stw	zero,-56(fp)
    2488:	e03ff315 	stw	zero,-52(fp)
    248c:	e03ff415 	stw	zero,-48(fp)
    2490:	e03ff515 	stw	zero,-44(fp)
    2494:	e03ff615 	stw	zero,-40(fp)
    2498:	e03ff715 	stw	zero,-36(fp)
    249c:	e03ff815 	stw	zero,-32(fp)
    24a0:	e03ff915 	stw	zero,-28(fp)
    24a4:	e03ffa15 	stw	zero,-24(fp)
    24a8:	e03ffb05 	stb	zero,-20(fp)
    24ac:	00800044 	movi	r2,1
    24b0:	e0bff445 	stb	r2,-47(fp)
    24b4:	00800044 	movi	r2,1
    24b8:	e0bff485 	stb	r2,-46(fp)
    24bc:	00800044 	movi	r2,1
    24c0:	e0bff4c5 	stb	r2,-45(fp)
    24c4:	00800044 	movi	r2,1
    24c8:	e0bff505 	stb	r2,-44(fp)
    24cc:	00800044 	movi	r2,1
    24d0:	e0bff545 	stb	r2,-43(fp)
    24d4:	00800044 	movi	r2,1
    24d8:	e0bff585 	stb	r2,-42(fp)
		return dash[y][x];
    24dc:	e0bfff17 	ldw	r2,-4(fp)
    24e0:	108001e4 	muli	r2,r2,7
    24e4:	e13fef04 	addi	r4,fp,-68
    24e8:	2087883a 	add	r3,r4,r2
    24ec:	e0bffe17 	ldw	r2,-8(fp)
    24f0:	1885883a 	add	r2,r3,r2
    24f4:	10800003 	ldbu	r2,0(r2)
    24f8:	00001506 	br	2550 <_ZN4Game12getCharPixelEcii+0x1d8>
	}
	if(c == '!'){
    24fc:	e0bffd07 	ldb	r2,-12(fp)
    2500:	10800858 	cmpnei	r2,r2,33
    2504:	1000111e 	bne	r2,zero,254c <_ZN4Game12getCharPixelEcii+0x1d4>
			{0,0,1,1,1,0,0},
			{0,0,1,1,0,0,0},
			{0,0,1,0,0,0,0},
			{0,0,0,0,0,0,0},
			{0,1,0,0,0,0,0}
		};
    2508:	008000b4 	movhi	r2,2
    250c:	109d1984 	addi	r2,r2,29798
    2510:	e0ffef04 	addi	r3,fp,-68
    2514:	1009883a 	mov	r4,r2
    2518:	00800c44 	movi	r2,49
    251c:	100d883a 	mov	r6,r2
    2520:	200b883a 	mov	r5,r4
    2524:	1809883a 	mov	r4,r3
    2528:	000d3800 	call	d380 <memcpy>
		return excl[y][x];
    252c:	e0bfff17 	ldw	r2,-4(fp)
    2530:	108001e4 	muli	r2,r2,7
    2534:	e13fef04 	addi	r4,fp,-68
    2538:	2087883a 	add	r3,r4,r2
    253c:	e0bffe17 	ldw	r2,-8(fp)
    2540:	1885883a 	add	r2,r3,r2
    2544:	10800003 	ldbu	r2,0(r2)
    2548:	00000106 	br	2550 <_ZN4Game12getCharPixelEcii+0x1d8>
	}
	return false;
    254c:	0005883a 	mov	r2,zero
};
    2550:	e037883a 	mov	sp,fp
    2554:	dfc00117 	ldw	ra,4(sp)
    2558:	df000017 	ldw	fp,0(sp)
    255c:	dec00204 	addi	sp,sp,8
    2560:	f800283a 	ret

00002564 <_ZN4Game8drawCharEiic>:

void Game::drawChar(int x, int y, char c){
    2564:	defff804 	addi	sp,sp,-32
    2568:	dfc00715 	stw	ra,28(sp)
    256c:	df000615 	stw	fp,24(sp)
    2570:	df000604 	addi	fp,sp,24
    2574:	e13ffc15 	stw	r4,-16(fp)
    2578:	e17ffd15 	stw	r5,-12(fp)
    257c:	e1bffe15 	stw	r6,-8(fp)
    2580:	3805883a 	mov	r2,r7
    2584:	e0bfff05 	stb	r2,-4(fp)
	for(int py = 0; py < 7; py++){
    2588:	e03ffa15 	stw	zero,-24(fp)
    258c:	e0bffa17 	ldw	r2,-24(fp)
    2590:	108001c8 	cmpgei	r2,r2,7
    2594:	10001e1e 	bne	r2,zero,2610 <_ZN4Game8drawCharEiic+0xac>
		for(int px = 0; px < 7; px++){
    2598:	e03ffb15 	stw	zero,-20(fp)
    259c:	e0bffb17 	ldw	r2,-20(fp)
    25a0:	108001c8 	cmpgei	r2,r2,7
    25a4:	1000161e 	bne	r2,zero,2600 <_ZN4Game8drawCharEiic+0x9c>
			if(getCharPixel(c, px, py)){
    25a8:	e0bfff07 	ldb	r2,-4(fp)
    25ac:	e1fffa17 	ldw	r7,-24(fp)
    25b0:	e1bffb17 	ldw	r6,-20(fp)
    25b4:	100b883a 	mov	r5,r2
    25b8:	e13ffc17 	ldw	r4,-16(fp)
    25bc:	00023780 	call	2378 <_ZN4Game12getCharPixelEcii>
    25c0:	10803fcc 	andi	r2,r2,255
    25c4:	10000a26 	beq	r2,zero,25f0 <_ZN4Game8drawCharEiic+0x8c>
				vi->drawPixel(x + px, y + py);
    25c8:	e0bffc17 	ldw	r2,-16(fp)
    25cc:	11000217 	ldw	r4,8(r2)
    25d0:	e0fffd17 	ldw	r3,-12(fp)
    25d4:	e0bffb17 	ldw	r2,-20(fp)
    25d8:	188b883a 	add	r5,r3,r2
    25dc:	e0fffe17 	ldw	r3,-8(fp)
    25e0:	e0bffa17 	ldw	r2,-24(fp)
    25e4:	1885883a 	add	r2,r3,r2
    25e8:	100d883a 	mov	r6,r2
    25ec:	0004d540 	call	4d54 <_ZN14VideoInterface9drawPixelEii>
	return false;
};

void Game::drawChar(int x, int y, char c){
	for(int py = 0; py < 7; py++){
		for(int px = 0; px < 7; px++){
    25f0:	e0bffb17 	ldw	r2,-20(fp)
    25f4:	10800044 	addi	r2,r2,1
    25f8:	e0bffb15 	stw	r2,-20(fp)
    25fc:	003fe706 	br	259c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700259c>
	}
	return false;
};

void Game::drawChar(int x, int y, char c){
	for(int py = 0; py < 7; py++){
    2600:	e0bffa17 	ldw	r2,-24(fp)
    2604:	10800044 	addi	r2,r2,1
    2608:	e0bffa15 	stw	r2,-24(fp)
    260c:	003fdf06 	br	258c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700258c>
			if(getCharPixel(c, px, py)){
				vi->drawPixel(x + px, y + py);
			}
		}
	}
};
    2610:	0001883a 	nop
    2614:	e037883a 	mov	sp,fp
    2618:	dfc00117 	ldw	ra,4(sp)
    261c:	df000017 	ldw	fp,0(sp)
    2620:	dec00204 	addi	sp,sp,8
    2624:	f800283a 	ret

00002628 <_ZN4Game8drawTextEiiPc>:

void Game::drawText(int x, int y, char *text){
    2628:	defff804 	addi	sp,sp,-32
    262c:	dfc00715 	stw	ra,28(sp)
    2630:	df000615 	stw	fp,24(sp)
    2634:	df000604 	addi	fp,sp,24
    2638:	e13ffc15 	stw	r4,-16(fp)
    263c:	e17ffd15 	stw	r5,-12(fp)
    2640:	e1bffe15 	stw	r6,-8(fp)
    2644:	e1ffff15 	stw	r7,-4(fp)
	int place = 0;
    2648:	e03ffa15 	stw	zero,-24(fp)

	char c = text[place];
    264c:	e0bffa17 	ldw	r2,-24(fp)
    2650:	e0ffff17 	ldw	r3,-4(fp)
    2654:	1885883a 	add	r2,r3,r2
    2658:	10800003 	ldbu	r2,0(r2)
    265c:	e0bffb05 	stb	r2,-20(fp)
	while(c){
    2660:	e0bffb07 	ldb	r2,-20(fp)
    2664:	10001326 	beq	r2,zero,26b4 <_ZN4Game8drawTextEiiPc+0x8c>
		drawChar((place * 8) + x, y, c);
    2668:	e0bffa17 	ldw	r2,-24(fp)
    266c:	100690fa 	slli	r3,r2,3
    2670:	e0bffd17 	ldw	r2,-12(fp)
    2674:	1885883a 	add	r2,r3,r2
    2678:	e0fffb07 	ldb	r3,-20(fp)
    267c:	180f883a 	mov	r7,r3
    2680:	e1bffe17 	ldw	r6,-8(fp)
    2684:	100b883a 	mov	r5,r2
    2688:	e13ffc17 	ldw	r4,-16(fp)
    268c:	00025640 	call	2564 <_ZN4Game8drawCharEiic>

		c = text[++place];
    2690:	e0bffa17 	ldw	r2,-24(fp)
    2694:	10800044 	addi	r2,r2,1
    2698:	e0bffa15 	stw	r2,-24(fp)
    269c:	e0bffa17 	ldw	r2,-24(fp)
    26a0:	e0ffff17 	ldw	r3,-4(fp)
    26a4:	1885883a 	add	r2,r3,r2
    26a8:	10800003 	ldbu	r2,0(r2)
    26ac:	e0bffb05 	stb	r2,-20(fp)

void Game::drawText(int x, int y, char *text){
	int place = 0;

	char c = text[place];
	while(c){
    26b0:	003feb06 	br	2660 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002660>
		drawChar((place * 8) + x, y, c);

		c = text[++place];
	}
};
    26b4:	0001883a 	nop
    26b8:	e037883a 	mov	sp,fp
    26bc:	dfc00117 	ldw	ra,4(sp)
    26c0:	df000017 	ldw	fp,0(sp)
    26c4:	dec00204 	addi	sp,sp,8
    26c8:	f800283a 	ret

000026cc <_ZN4Game18drawTextDifferenceEiiPcS0_>:

void Game::drawTextDifference(int x, int y, char *t1, char *t2){
    26cc:	defff504 	addi	sp,sp,-44
    26d0:	dfc00a15 	stw	ra,40(sp)
    26d4:	df000915 	stw	fp,36(sp)
    26d8:	df000904 	addi	fp,sp,36
    26dc:	e13ffc15 	stw	r4,-16(fp)
    26e0:	e17ffd15 	stw	r5,-12(fp)
    26e4:	e1bffe15 	stw	r6,-8(fp)
    26e8:	e1ffff15 	stw	r7,-4(fp)
	int place = 0;
    26ec:	e03ff715 	stw	zero,-36(fp)

	char c1 = t1[place];
    26f0:	e0bff717 	ldw	r2,-36(fp)
    26f4:	e0ffff17 	ldw	r3,-4(fp)
    26f8:	1885883a 	add	r2,r3,r2
    26fc:	10800003 	ldbu	r2,0(r2)
    2700:	e0bff805 	stb	r2,-32(fp)
	char c2 = t2[place];
    2704:	e0bff717 	ldw	r2,-36(fp)
    2708:	e0c00217 	ldw	r3,8(fp)
    270c:	1885883a 	add	r2,r3,r2
    2710:	10800003 	ldbu	r2,0(r2)
    2714:	e0bff845 	stb	r2,-31(fp)
	while(c1){
    2718:	e0bff807 	ldb	r2,-32(fp)
    271c:	10004f26 	beq	r2,zero,285c <_ZN4Game18drawTextDifferenceEiiPcS0_+0x190>
//		if(c1 != c2){
			bool p1, p2;
			for(int py = 0; py < 7; py++){
    2720:	e03ff915 	stw	zero,-28(fp)
    2724:	e0bff917 	ldw	r2,-28(fp)
    2728:	108001c8 	cmpgei	r2,r2,7
    272c:	10003d1e 	bne	r2,zero,2824 <_ZN4Game18drawTextDifferenceEiiPcS0_+0x158>
				for(int px = 0; px < 7; px++){
    2730:	e03ffa15 	stw	zero,-24(fp)
    2734:	e0bffa17 	ldw	r2,-24(fp)
    2738:	108001c8 	cmpgei	r2,r2,7
    273c:	1000351e 	bne	r2,zero,2814 <_ZN4Game18drawTextDifferenceEiiPcS0_+0x148>
					p1 = getCharPixel(c1, px, py);
    2740:	e0bff807 	ldb	r2,-32(fp)
    2744:	e1fff917 	ldw	r7,-28(fp)
    2748:	e1bffa17 	ldw	r6,-24(fp)
    274c:	100b883a 	mov	r5,r2
    2750:	e13ffc17 	ldw	r4,-16(fp)
    2754:	00023780 	call	2378 <_ZN4Game12getCharPixelEcii>
    2758:	e0bffb05 	stb	r2,-20(fp)
					p2 = getCharPixel(c2, px, py);
    275c:	e0bff847 	ldb	r2,-31(fp)
    2760:	e1fff917 	ldw	r7,-28(fp)
    2764:	e1bffa17 	ldw	r6,-24(fp)
    2768:	100b883a 	mov	r5,r2
    276c:	e13ffc17 	ldw	r4,-16(fp)
    2770:	00023780 	call	2378 <_ZN4Game12getCharPixelEcii>
    2774:	e0bffb45 	stb	r2,-19(fp)
					if(p1 && !p2)
    2778:	e0bffb03 	ldbu	r2,-20(fp)
    277c:	10001226 	beq	r2,zero,27c8 <_ZN4Game18drawTextDifferenceEiiPcS0_+0xfc>
    2780:	e0bffb43 	ldbu	r2,-19(fp)
    2784:	1080005c 	xori	r2,r2,1
    2788:	10803fcc 	andi	r2,r2,255
    278c:	10000e26 	beq	r2,zero,27c8 <_ZN4Game18drawTextDifferenceEiiPcS0_+0xfc>
						vi->drawPixel((x + (place * 8) + px), (y + py), 0);
    2790:	e0bffc17 	ldw	r2,-16(fp)
    2794:	11000217 	ldw	r4,8(r2)
    2798:	e0bff717 	ldw	r2,-36(fp)
    279c:	100690fa 	slli	r3,r2,3
    27a0:	e0bffd17 	ldw	r2,-12(fp)
    27a4:	1887883a 	add	r3,r3,r2
    27a8:	e0bffa17 	ldw	r2,-24(fp)
    27ac:	188b883a 	add	r5,r3,r2
    27b0:	e0fffe17 	ldw	r3,-8(fp)
    27b4:	e0bff917 	ldw	r2,-28(fp)
    27b8:	1885883a 	add	r2,r3,r2
    27bc:	000f883a 	mov	r7,zero
    27c0:	100d883a 	mov	r6,r2
    27c4:	0004da80 	call	4da8 <_ZN14VideoInterface9drawPixelEiit>
					if(p2)
    27c8:	e0bffb43 	ldbu	r2,-19(fp)
    27cc:	10000d26 	beq	r2,zero,2804 <_ZN4Game18drawTextDifferenceEiiPcS0_+0x138>
						vi->drawPixel((x + (place * 8) + px), (y + py));
    27d0:	e0bffc17 	ldw	r2,-16(fp)
    27d4:	11000217 	ldw	r4,8(r2)
    27d8:	e0bff717 	ldw	r2,-36(fp)
    27dc:	100690fa 	slli	r3,r2,3
    27e0:	e0bffd17 	ldw	r2,-12(fp)
    27e4:	1887883a 	add	r3,r3,r2
    27e8:	e0bffa17 	ldw	r2,-24(fp)
    27ec:	188b883a 	add	r5,r3,r2
    27f0:	e0fffe17 	ldw	r3,-8(fp)
    27f4:	e0bff917 	ldw	r2,-28(fp)
    27f8:	1885883a 	add	r2,r3,r2
    27fc:	100d883a 	mov	r6,r2
    2800:	0004d540 	call	4d54 <_ZN14VideoInterface9drawPixelEii>
	char c2 = t2[place];
	while(c1){
//		if(c1 != c2){
			bool p1, p2;
			for(int py = 0; py < 7; py++){
				for(int px = 0; px < 7; px++){
    2804:	e0bffa17 	ldw	r2,-24(fp)
    2808:	10800044 	addi	r2,r2,1
    280c:	e0bffa15 	stw	r2,-24(fp)
    2810:	003fc806 	br	2734 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002734>
	char c1 = t1[place];
	char c2 = t2[place];
	while(c1){
//		if(c1 != c2){
			bool p1, p2;
			for(int py = 0; py < 7; py++){
    2814:	e0bff917 	ldw	r2,-28(fp)
    2818:	10800044 	addi	r2,r2,1
    281c:	e0bff915 	stw	r2,-28(fp)
    2820:	003fc006 	br	2724 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002724>
						vi->drawPixel((x + (place * 8) + px), (y + py));
				}
			}
//		}

		place++;
    2824:	e0bff717 	ldw	r2,-36(fp)
    2828:	10800044 	addi	r2,r2,1
    282c:	e0bff715 	stw	r2,-36(fp)
		c1 = t1[place];
    2830:	e0bff717 	ldw	r2,-36(fp)
    2834:	e0ffff17 	ldw	r3,-4(fp)
    2838:	1885883a 	add	r2,r3,r2
    283c:	10800003 	ldbu	r2,0(r2)
    2840:	e0bff805 	stb	r2,-32(fp)
		c2 = t2[place];
    2844:	e0bff717 	ldw	r2,-36(fp)
    2848:	e0c00217 	ldw	r3,8(fp)
    284c:	1885883a 	add	r2,r3,r2
    2850:	10800003 	ldbu	r2,0(r2)
    2854:	e0bff845 	stb	r2,-31(fp)
void Game::drawTextDifference(int x, int y, char *t1, char *t2){
	int place = 0;

	char c1 = t1[place];
	char c2 = t2[place];
	while(c1){
    2858:	003faf06 	br	2718 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002718>

		place++;
		c1 = t1[place];
		c2 = t2[place];
	}
};
    285c:	0001883a 	nop
    2860:	e037883a 	mov	sp,fp
    2864:	dfc00117 	ldw	ra,4(sp)
    2868:	df000017 	ldw	fp,0(sp)
    286c:	dec00204 	addi	sp,sp,8
    2870:	f800283a 	ret

00002874 <_ZN4Game13drawScoreTextEv>:

void Game::drawScoreText(){
    2874:	defffd04 	addi	sp,sp,-12
    2878:	dfc00215 	stw	ra,8(sp)
    287c:	df000115 	stw	fp,4(sp)
    2880:	df000104 	addi	fp,sp,4
    2884:	e13fff15 	stw	r4,-4(fp)
	vi->setOffset(SCORE_OFFSET_X, SCORE_OFFSET_Y);
    2888:	e0bfff17 	ldw	r2,-4(fp)
    288c:	10800217 	ldw	r2,8(r2)
    2890:	01800504 	movi	r6,20
    2894:	014035c4 	movi	r5,215
    2898:	1009883a 	mov	r4,r2
    289c:	0004cd40 	call	4cd4 <_ZN14VideoInterface9setOffsetEii>
	vi->setColor(SCORE_TEXT_COLOR);
    28a0:	e0bfff17 	ldw	r2,-4(fp)
    28a4:	10800217 	ldw	r2,8(r2)
    28a8:	016a2814 	movui	r5,43168
    28ac:	1009883a 	mov	r4,r2
    28b0:	0004e680 	call	4e68 <_ZN14VideoInterface8setColorEt>

	drawText(0, 0, "HI-SCORE");
    28b4:	01c000b4 	movhi	r7,2
    28b8:	39dd2604 	addi	r7,r7,29848
    28bc:	000d883a 	mov	r6,zero
    28c0:	000b883a 	mov	r5,zero
    28c4:	e13fff17 	ldw	r4,-4(fp)
    28c8:	00026280 	call	2628 <_ZN4Game8drawTextEiiPc>
	drawText(8 , 32, "1UP");
    28cc:	01c000b4 	movhi	r7,2
    28d0:	39dd2904 	addi	r7,r7,29860
    28d4:	01800804 	movi	r6,32
    28d8:	01400204 	movi	r5,8
    28dc:	e13fff17 	ldw	r4,-4(fp)
    28e0:	00026280 	call	2628 <_ZN4Game8drawTextEiiPc>

	vi->resetOffset();
    28e4:	e0bfff17 	ldw	r2,-4(fp)
    28e8:	10800217 	ldw	r2,8(r2)
    28ec:	1009883a 	mov	r4,r2
    28f0:	0004d180 	call	4d18 <_ZN14VideoInterface11resetOffsetEv>
};
    28f4:	0001883a 	nop
    28f8:	e037883a 	mov	sp,fp
    28fc:	dfc00117 	ldw	ra,4(sp)
    2900:	df000017 	ldw	fp,0(sp)
    2904:	dec00204 	addi	sp,sp,8
    2908:	f800283a 	ret

0000290c <_ZN4Game9drawScoreEv>:

void Game::drawScore(){
    290c:	defff804 	addi	sp,sp,-32
    2910:	dfc00715 	stw	ra,28(sp)
    2914:	df000615 	stw	fp,24(sp)
    2918:	df000604 	addi	fp,sp,24
    291c:	e13fff15 	stw	r4,-4(fp)
	vi->setOffset(SCORE_OFFSET_X, SCORE_OFFSET_Y);
    2920:	e0bfff17 	ldw	r2,-4(fp)
    2924:	10800217 	ldw	r2,8(r2)
    2928:	01800504 	movi	r6,20
    292c:	014035c4 	movi	r5,215
    2930:	1009883a 	mov	r4,r2
    2934:	0004cd40 	call	4cd4 <_ZN14VideoInterface9setOffsetEii>
	vi->setColor(SCORE_COLOR);
    2938:	e0bfff17 	ldw	r2,-4(fp)
    293c:	10800217 	ldw	r2,8(r2)
    2940:	017fffd4 	movui	r5,65535
    2944:	1009883a 	mov	r4,r2
    2948:	0004e680 	call	4e68 <_ZN14VideoInterface8setColorEt>

	char text_old[8] = { 0 };
    294c:	e03ffb15 	stw	zero,-20(fp)
    2950:	e03ffc15 	stw	zero,-16(fp)
	char text_new[8] = { 0 };
    2954:	e03ffd15 	stw	zero,-12(fp)
    2958:	e03ffe15 	stw	zero,-8(fp)

	if(cur_score > cur_hscore){
    295c:	e0bfff17 	ldw	r2,-4(fp)
    2960:	1081ed17 	ldw	r2,1972(r2)
    2964:	e0ffff17 	ldw	r3,-4(fp)
    2968:	18c1ef17 	ldw	r3,1980(r3)
    296c:	1880040e 	bge	r3,r2,2980 <_ZN4Game9drawScoreEv+0x74>
		cur_hscore = cur_score;
    2970:	e0bfff17 	ldw	r2,-4(fp)
    2974:	10c1ed17 	ldw	r3,1972(r2)
    2978:	e0bfff17 	ldw	r2,-4(fp)
    297c:	10c1ef15 	stw	r3,1980(r2)
	}

	if(cur_hscore != old_hscore){
    2980:	e0bfff17 	ldw	r2,-4(fp)
    2984:	10c1ef17 	ldw	r3,1980(r2)
    2988:	e0bfff17 	ldw	r2,-4(fp)
    298c:	1081f017 	ldw	r2,1984(r2)
    2990:	18801c26 	beq	r3,r2,2a04 <_ZN4Game9drawScoreEv+0xf8>
		sprintf(text_old, "%*d", 7, old_hscore);
    2994:	e0bfff17 	ldw	r2,-4(fp)
    2998:	1081f017 	ldw	r2,1984(r2)
    299c:	100f883a 	mov	r7,r2
    29a0:	018001c4 	movi	r6,7
    29a4:	014000b4 	movhi	r5,2
    29a8:	295d2a04 	addi	r5,r5,29864
    29ac:	e13ffb04 	addi	r4,fp,-20
    29b0:	000db580 	call	db58 <sprintf>
		sprintf(text_new, "%*d", 7, cur_hscore);
    29b4:	e0bfff17 	ldw	r2,-4(fp)
    29b8:	10c1ef17 	ldw	r3,1980(r2)
    29bc:	e0bffd04 	addi	r2,fp,-12
    29c0:	180f883a 	mov	r7,r3
    29c4:	018001c4 	movi	r6,7
    29c8:	014000b4 	movhi	r5,2
    29cc:	295d2a04 	addi	r5,r5,29864
    29d0:	1009883a 	mov	r4,r2
    29d4:	000db580 	call	db58 <sprintf>
		drawTextDifference(0, 16, text_old, text_new);
    29d8:	e0bffd04 	addi	r2,fp,-12
    29dc:	d8800015 	stw	r2,0(sp)
    29e0:	e1fffb04 	addi	r7,fp,-20
    29e4:	01800404 	movi	r6,16
    29e8:	000b883a 	mov	r5,zero
    29ec:	e13fff17 	ldw	r4,-4(fp)
    29f0:	00026cc0 	call	26cc <_ZN4Game18drawTextDifferenceEiiPcS0_>
		old_hscore = cur_hscore;
    29f4:	e0bfff17 	ldw	r2,-4(fp)
    29f8:	10c1ef17 	ldw	r3,1980(r2)
    29fc:	e0bfff17 	ldw	r2,-4(fp)
    2a00:	10c1f015 	stw	r3,1984(r2)
	}

	if(cur_score != old_score){
    2a04:	e0bfff17 	ldw	r2,-4(fp)
    2a08:	10c1ed17 	ldw	r3,1972(r2)
    2a0c:	e0bfff17 	ldw	r2,-4(fp)
    2a10:	1081ee17 	ldw	r2,1976(r2)
    2a14:	18801c26 	beq	r3,r2,2a88 <_ZN4Game9drawScoreEv+0x17c>
		sprintf(text_old, "%*d", 7, old_score);
    2a18:	e0bfff17 	ldw	r2,-4(fp)
    2a1c:	1081ee17 	ldw	r2,1976(r2)
    2a20:	100f883a 	mov	r7,r2
    2a24:	018001c4 	movi	r6,7
    2a28:	014000b4 	movhi	r5,2
    2a2c:	295d2a04 	addi	r5,r5,29864
    2a30:	e13ffb04 	addi	r4,fp,-20
    2a34:	000db580 	call	db58 <sprintf>
		sprintf(text_new, "%*d", 7, cur_score);
    2a38:	e0bfff17 	ldw	r2,-4(fp)
    2a3c:	10c1ed17 	ldw	r3,1972(r2)
    2a40:	e0bffd04 	addi	r2,fp,-12
    2a44:	180f883a 	mov	r7,r3
    2a48:	018001c4 	movi	r6,7
    2a4c:	014000b4 	movhi	r5,2
    2a50:	295d2a04 	addi	r5,r5,29864
    2a54:	1009883a 	mov	r4,r2
    2a58:	000db580 	call	db58 <sprintf>
		drawTextDifference(0, 48, text_old, text_new);
    2a5c:	e0bffd04 	addi	r2,fp,-12
    2a60:	d8800015 	stw	r2,0(sp)
    2a64:	e1fffb04 	addi	r7,fp,-20
    2a68:	01800c04 	movi	r6,48
    2a6c:	000b883a 	mov	r5,zero
    2a70:	e13fff17 	ldw	r4,-4(fp)
    2a74:	00026cc0 	call	26cc <_ZN4Game18drawTextDifferenceEiiPcS0_>
		old_score = cur_score;
    2a78:	e0bfff17 	ldw	r2,-4(fp)
    2a7c:	10c1ed17 	ldw	r3,1972(r2)
    2a80:	e0bfff17 	ldw	r2,-4(fp)
    2a84:	10c1ee15 	stw	r3,1976(r2)
	}

	vi->resetOffset();
    2a88:	e0bfff17 	ldw	r2,-4(fp)
    2a8c:	10800217 	ldw	r2,8(r2)
    2a90:	1009883a 	mov	r4,r2
    2a94:	0004d180 	call	4d18 <_ZN14VideoInterface11resetOffsetEv>
};
    2a98:	0001883a 	nop
    2a9c:	e037883a 	mov	sp,fp
    2aa0:	dfc00117 	ldw	ra,4(sp)
    2aa4:	df000017 	ldw	fp,0(sp)
    2aa8:	dec00204 	addi	sp,sp,8
    2aac:	f800283a 	ret

00002ab0 <_ZN4Game7drawMapEv>:

void Game::drawMap(){
    2ab0:	defff904 	addi	sp,sp,-28
    2ab4:	dfc00615 	stw	ra,24(sp)
    2ab8:	df000515 	stw	fp,20(sp)
    2abc:	df000504 	addi	fp,sp,20
    2ac0:	e13fff15 	stw	r4,-4(fp)
	vi->setOffset(MAP_OFFSET_X, MAP_OFFSET_Y);
    2ac4:	e0bfff17 	ldw	r2,-4(fp)
    2ac8:	10800217 	ldw	r2,8(r2)
    2acc:	01800304 	movi	r6,12
    2ad0:	01400b84 	movi	r5,46
    2ad4:	1009883a 	mov	r4,r2
    2ad8:	0004cd40 	call	4cd4 <_ZN14VideoInterface9setOffsetEii>
	for(int v = 0; v < 27; v++){
    2adc:	e03ffd15 	stw	zero,-12(fp)
    2ae0:	e0bffd17 	ldw	r2,-12(fp)
    2ae4:	108006c8 	cmpgei	r2,r2,27
    2ae8:	1004491e 	bne	r2,zero,3c10 <_ZN4Game7drawMapEv+0x1160>
		for(int h = 0; h < 21; h++){
    2aec:	e03ffe15 	stw	zero,-8(fp)
    2af0:	e0bffe17 	ldw	r2,-8(fp)
    2af4:	10800548 	cmpgei	r2,r2,21
    2af8:	1004411e 	bne	r2,zero,3c00 <_ZN4Game7drawMapEv+0x1150>
			if(simpleMap){ // for testing
    2afc:	e0bfff17 	ldw	r2,-4(fp)
    2b00:	1081ec03 	ldbu	r2,1968(r2)
    2b04:	10803fcc 	andi	r2,r2,255
    2b08:	10002026 	beq	r2,zero,2b8c <_ZN4Game7drawMapEv+0xdc>
				if(!walkable(map[v][h]))
    2b0c:	e0ffff17 	ldw	r3,-4(fp)
    2b10:	e0bffd17 	ldw	r2,-12(fp)
    2b14:	11000564 	muli	r4,r2,21
    2b18:	e0bffe17 	ldw	r2,-8(fp)
    2b1c:	2085883a 	add	r2,r4,r2
    2b20:	10807cc4 	addi	r2,r2,499
    2b24:	1085883a 	add	r2,r2,r2
    2b28:	1085883a 	add	r2,r2,r2
    2b2c:	1885883a 	add	r2,r3,r2
    2b30:	10800017 	ldw	r2,0(r2)
    2b34:	100b883a 	mov	r5,r2
    2b38:	e13fff17 	ldw	r4,-4(fp)
    2b3c:	000234c0 	call	234c <_ZN4Game8walkableE10map_item_t>
    2b40:	1080005c 	xori	r2,r2,1
    2b44:	10803fcc 	andi	r2,r2,255
    2b48:	10042926 	beq	r2,zero,3bf0 <_ZN4Game7drawMapEv+0x1140>
					vi->drawRect(H(0), V(0), 8, 8, WALL_COLOR);
    2b4c:	e0bfff17 	ldw	r2,-4(fp)
    2b50:	10c00217 	ldw	r3,8(r2)
    2b54:	e0bffe17 	ldw	r2,-8(fp)
    2b58:	100890fa 	slli	r4,r2,3
    2b5c:	e0bffd17 	ldw	r2,-12(fp)
    2b60:	100a90fa 	slli	r5,r2,3
    2b64:	00809784 	movi	r2,606
    2b68:	d8800115 	stw	r2,4(sp)
    2b6c:	00800204 	movi	r2,8
    2b70:	d8800015 	stw	r2,0(sp)
    2b74:	01c00204 	movi	r7,8
    2b78:	280d883a 	mov	r6,r5
    2b7c:	200b883a 	mov	r5,r4
    2b80:	1809883a 	mov	r4,r3
    2b84:	00050f80 	call	50f8 <_ZN14VideoInterface8drawRectEiiiit>
    2b88:	00041906 	br	3bf0 <_ZN4Game7drawMapEv+0x1140>
			}else{
				switch(map[v][h]){
    2b8c:	e0ffff17 	ldw	r3,-4(fp)
    2b90:	e0bffd17 	ldw	r2,-12(fp)
    2b94:	11000564 	muli	r4,r2,21
    2b98:	e0bffe17 	ldw	r2,-8(fp)
    2b9c:	2085883a 	add	r2,r4,r2
    2ba0:	10807cc4 	addi	r2,r2,499
    2ba4:	1085883a 	add	r2,r2,r2
    2ba8:	1085883a 	add	r2,r2,r2
    2bac:	1885883a 	add	r2,r3,r2
    2bb0:	10800017 	ldw	r2,0(r2)
    2bb4:	10c004e8 	cmpgeui	r3,r2,19
    2bb8:	18040c1e 	bne	r3,zero,3bec <_ZN4Game7drawMapEv+0x113c>
    2bbc:	100690ba 	slli	r3,r2,2
    2bc0:	00800034 	movhi	r2,0
    2bc4:	108af504 	addi	r2,r2,11220
    2bc8:	1885883a 	add	r2,r3,r2
    2bcc:	10800017 	ldw	r2,0(r2)
    2bd0:	1000683a 	jmp	r2
    2bd4:	00003bec 	andhi	zero,zero,239
    2bd8:	00002c20 	cmpeqi	zero,zero,176
    2bdc:	00003bec 	andhi	zero,zero,239
    2be0:	00003bec 	andhi	zero,zero,239
    2be4:	00002c68 	cmpgeui	zero,zero,177
    2be8:	00002dc0 	call	2dc <_ZN19ControllerInterface15getActiveButtonEv+0x1c>
    2bec:	00002f10 	cmplti	zero,zero,188
    2bf0:	00003060 	cmpeqi	zero,zero,193
    2bf4:	000031a8 	cmpgeui	zero,zero,198
    2bf8:	00003234 	movhi	zero,200
    2bfc:	000032c0 	call	32c <_ZN6EntityC1Eii+0x34>
    2c00:	0000341c 	xori	zero,zero,208
    2c04:	00003580 	call	358 <_ZN6EntityC1Eii+0x60>
    2c08:	000036dc 	xori	zero,zero,219
    2c0c:	00003840 	call	384 <_ZN6Entity6updateEi+0x8>
    2c10:	00003914 	movui	zero,228
    2c14:	000039f0 	cmpltui	zero,zero,231
    2c18:	00003ac4 	movi	zero,235
    2c1c:	00003ba0 	cmpeqi	zero,zero,238
					case pd:
						vi->drawRect(H(3), V(3), 2, 2, PAC_DOT_COLOR);
    2c20:	e0bfff17 	ldw	r2,-4(fp)
    2c24:	10c00217 	ldw	r3,8(r2)
    2c28:	e0bffe17 	ldw	r2,-8(fp)
    2c2c:	100490fa 	slli	r2,r2,3
    2c30:	110000c4 	addi	r4,r2,3
    2c34:	e0bffd17 	ldw	r2,-12(fp)
    2c38:	100490fa 	slli	r2,r2,3
    2c3c:	114000c4 	addi	r5,r2,3
    2c40:	00bf4814 	movui	r2,64800
    2c44:	d8800115 	stw	r2,4(sp)
    2c48:	00800084 	movi	r2,2
    2c4c:	d8800015 	stw	r2,0(sp)
    2c50:	01c00084 	movi	r7,2
    2c54:	280d883a 	mov	r6,r5
    2c58:	200b883a 	mov	r5,r4
    2c5c:	1809883a 	mov	r4,r3
    2c60:	00050f80 	call	50f8 <_ZN14VideoInterface8drawRectEiiiit>
						break;
    2c64:	0003e206 	br	3bf0 <_ZN4Game7drawMapEv+0x1140>
					case c1:
						vi->drawLine(H(4), V(2), H(7), V(2), WALL_COLOR);
    2c68:	e0bfff17 	ldw	r2,-4(fp)
    2c6c:	11000217 	ldw	r4,8(r2)
    2c70:	e0bffe17 	ldw	r2,-8(fp)
    2c74:	100490fa 	slli	r2,r2,3
    2c78:	11400104 	addi	r5,r2,4
    2c7c:	e0bffd17 	ldw	r2,-12(fp)
    2c80:	100490fa 	slli	r2,r2,3
    2c84:	11800084 	addi	r6,r2,2
    2c88:	e0bffe17 	ldw	r2,-8(fp)
    2c8c:	100490fa 	slli	r2,r2,3
    2c90:	11c001c4 	addi	r7,r2,7
    2c94:	e0bffd17 	ldw	r2,-12(fp)
    2c98:	100490fa 	slli	r2,r2,3
    2c9c:	10800084 	addi	r2,r2,2
    2ca0:	00c09784 	movi	r3,606
    2ca4:	d8c00115 	stw	r3,4(sp)
    2ca8:	d8800015 	stw	r2,0(sp)
    2cac:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(2), V(4), H(2), V(7), WALL_COLOR);
    2cb0:	e0bfff17 	ldw	r2,-4(fp)
    2cb4:	11000217 	ldw	r4,8(r2)
    2cb8:	e0bffe17 	ldw	r2,-8(fp)
    2cbc:	100490fa 	slli	r2,r2,3
    2cc0:	11400084 	addi	r5,r2,2
    2cc4:	e0bffd17 	ldw	r2,-12(fp)
    2cc8:	100490fa 	slli	r2,r2,3
    2ccc:	11800104 	addi	r6,r2,4
    2cd0:	e0bffe17 	ldw	r2,-8(fp)
    2cd4:	100490fa 	slli	r2,r2,3
    2cd8:	11c00084 	addi	r7,r2,2
    2cdc:	e0bffd17 	ldw	r2,-12(fp)
    2ce0:	100490fa 	slli	r2,r2,3
    2ce4:	108001c4 	addi	r2,r2,7
    2ce8:	00c09784 	movi	r3,606
    2cec:	d8c00115 	stw	r3,4(sp)
    2cf0:	d8800015 	stw	r2,0(sp)
    2cf4:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawPixel(H(3), V(3), WALL_COLOR);
    2cf8:	e0bfff17 	ldw	r2,-4(fp)
    2cfc:	10c00217 	ldw	r3,8(r2)
    2d00:	e0bffe17 	ldw	r2,-8(fp)
    2d04:	100490fa 	slli	r2,r2,3
    2d08:	110000c4 	addi	r4,r2,3
    2d0c:	e0bffd17 	ldw	r2,-12(fp)
    2d10:	100490fa 	slli	r2,r2,3
    2d14:	108000c4 	addi	r2,r2,3
    2d18:	01c09784 	movi	r7,606
    2d1c:	100d883a 	mov	r6,r2
    2d20:	200b883a 	mov	r5,r4
    2d24:	1809883a 	mov	r4,r3
    2d28:	0004da80 	call	4da8 <_ZN14VideoInterface9drawPixelEiit>
						vi->drawLine(H(6), V(5), H(7), V(5), WALL_COLOR);
    2d2c:	e0bfff17 	ldw	r2,-4(fp)
    2d30:	11000217 	ldw	r4,8(r2)
    2d34:	e0bffe17 	ldw	r2,-8(fp)
    2d38:	100490fa 	slli	r2,r2,3
    2d3c:	11400184 	addi	r5,r2,6
    2d40:	e0bffd17 	ldw	r2,-12(fp)
    2d44:	100490fa 	slli	r2,r2,3
    2d48:	11800144 	addi	r6,r2,5
    2d4c:	e0bffe17 	ldw	r2,-8(fp)
    2d50:	100490fa 	slli	r2,r2,3
    2d54:	11c001c4 	addi	r7,r2,7
    2d58:	e0bffd17 	ldw	r2,-12(fp)
    2d5c:	100490fa 	slli	r2,r2,3
    2d60:	10800144 	addi	r2,r2,5
    2d64:	00c09784 	movi	r3,606
    2d68:	d8c00115 	stw	r3,4(sp)
    2d6c:	d8800015 	stw	r2,0(sp)
    2d70:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(5), V(6), H(5), V(7), WALL_COLOR);
    2d74:	e0bfff17 	ldw	r2,-4(fp)
    2d78:	11000217 	ldw	r4,8(r2)
    2d7c:	e0bffe17 	ldw	r2,-8(fp)
    2d80:	100490fa 	slli	r2,r2,3
    2d84:	11400144 	addi	r5,r2,5
    2d88:	e0bffd17 	ldw	r2,-12(fp)
    2d8c:	100490fa 	slli	r2,r2,3
    2d90:	11800184 	addi	r6,r2,6
    2d94:	e0bffe17 	ldw	r2,-8(fp)
    2d98:	100490fa 	slli	r2,r2,3
    2d9c:	11c00144 	addi	r7,r2,5
    2da0:	e0bffd17 	ldw	r2,-12(fp)
    2da4:	100490fa 	slli	r2,r2,3
    2da8:	108001c4 	addi	r2,r2,7
    2dac:	00c09784 	movi	r3,606
    2db0:	d8c00115 	stw	r3,4(sp)
    2db4:	d8800015 	stw	r2,0(sp)
    2db8:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						break;
    2dbc:	00038c06 	br	3bf0 <_ZN4Game7drawMapEv+0x1140>
					case c2:
						vi->drawLine(H(0), V(2), H(3), V(2), WALL_COLOR);
    2dc0:	e0bfff17 	ldw	r2,-4(fp)
    2dc4:	11000217 	ldw	r4,8(r2)
    2dc8:	e0bffe17 	ldw	r2,-8(fp)
    2dcc:	100a90fa 	slli	r5,r2,3
    2dd0:	e0bffd17 	ldw	r2,-12(fp)
    2dd4:	100490fa 	slli	r2,r2,3
    2dd8:	11800084 	addi	r6,r2,2
    2ddc:	e0bffe17 	ldw	r2,-8(fp)
    2de0:	100490fa 	slli	r2,r2,3
    2de4:	11c000c4 	addi	r7,r2,3
    2de8:	e0bffd17 	ldw	r2,-12(fp)
    2dec:	100490fa 	slli	r2,r2,3
    2df0:	10800084 	addi	r2,r2,2
    2df4:	00c09784 	movi	r3,606
    2df8:	d8c00115 	stw	r3,4(sp)
    2dfc:	d8800015 	stw	r2,0(sp)
    2e00:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(5), V(4), H(5), V(7), WALL_COLOR);
    2e04:	e0bfff17 	ldw	r2,-4(fp)
    2e08:	11000217 	ldw	r4,8(r2)
    2e0c:	e0bffe17 	ldw	r2,-8(fp)
    2e10:	100490fa 	slli	r2,r2,3
    2e14:	11400144 	addi	r5,r2,5
    2e18:	e0bffd17 	ldw	r2,-12(fp)
    2e1c:	100490fa 	slli	r2,r2,3
    2e20:	11800104 	addi	r6,r2,4
    2e24:	e0bffe17 	ldw	r2,-8(fp)
    2e28:	100490fa 	slli	r2,r2,3
    2e2c:	11c00144 	addi	r7,r2,5
    2e30:	e0bffd17 	ldw	r2,-12(fp)
    2e34:	100490fa 	slli	r2,r2,3
    2e38:	108001c4 	addi	r2,r2,7
    2e3c:	00c09784 	movi	r3,606
    2e40:	d8c00115 	stw	r3,4(sp)
    2e44:	d8800015 	stw	r2,0(sp)
    2e48:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawPixel(H(4), V(3), WALL_COLOR);
    2e4c:	e0bfff17 	ldw	r2,-4(fp)
    2e50:	10c00217 	ldw	r3,8(r2)
    2e54:	e0bffe17 	ldw	r2,-8(fp)
    2e58:	100490fa 	slli	r2,r2,3
    2e5c:	11000104 	addi	r4,r2,4
    2e60:	e0bffd17 	ldw	r2,-12(fp)
    2e64:	100490fa 	slli	r2,r2,3
    2e68:	108000c4 	addi	r2,r2,3
    2e6c:	01c09784 	movi	r7,606
    2e70:	100d883a 	mov	r6,r2
    2e74:	200b883a 	mov	r5,r4
    2e78:	1809883a 	mov	r4,r3
    2e7c:	0004da80 	call	4da8 <_ZN14VideoInterface9drawPixelEiit>
						vi->drawLine(H(0), V(5), H(1), V(5), WALL_COLOR);
    2e80:	e0bfff17 	ldw	r2,-4(fp)
    2e84:	11000217 	ldw	r4,8(r2)
    2e88:	e0bffe17 	ldw	r2,-8(fp)
    2e8c:	100a90fa 	slli	r5,r2,3
    2e90:	e0bffd17 	ldw	r2,-12(fp)
    2e94:	100490fa 	slli	r2,r2,3
    2e98:	11800144 	addi	r6,r2,5
    2e9c:	e0bffe17 	ldw	r2,-8(fp)
    2ea0:	100490fa 	slli	r2,r2,3
    2ea4:	11c00044 	addi	r7,r2,1
    2ea8:	e0bffd17 	ldw	r2,-12(fp)
    2eac:	100490fa 	slli	r2,r2,3
    2eb0:	10800144 	addi	r2,r2,5
    2eb4:	00c09784 	movi	r3,606
    2eb8:	d8c00115 	stw	r3,4(sp)
    2ebc:	d8800015 	stw	r2,0(sp)
    2ec0:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(2), V(5), H(2), V(7), WALL_COLOR);
    2ec4:	e0bfff17 	ldw	r2,-4(fp)
    2ec8:	11000217 	ldw	r4,8(r2)
    2ecc:	e0bffe17 	ldw	r2,-8(fp)
    2ed0:	100490fa 	slli	r2,r2,3
    2ed4:	11400084 	addi	r5,r2,2
    2ed8:	e0bffd17 	ldw	r2,-12(fp)
    2edc:	100490fa 	slli	r2,r2,3
    2ee0:	11800144 	addi	r6,r2,5
    2ee4:	e0bffe17 	ldw	r2,-8(fp)
    2ee8:	100490fa 	slli	r2,r2,3
    2eec:	11c00084 	addi	r7,r2,2
    2ef0:	e0bffd17 	ldw	r2,-12(fp)
    2ef4:	100490fa 	slli	r2,r2,3
    2ef8:	108001c4 	addi	r2,r2,7
    2efc:	00c09784 	movi	r3,606
    2f00:	d8c00115 	stw	r3,4(sp)
    2f04:	d8800015 	stw	r2,0(sp)
    2f08:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						break;
    2f0c:	00033806 	br	3bf0 <_ZN4Game7drawMapEv+0x1140>
					case c3:
						vi->drawLine(H(2), V(0), H(2), V(3), WALL_COLOR);
    2f10:	e0bfff17 	ldw	r2,-4(fp)
    2f14:	11000217 	ldw	r4,8(r2)
    2f18:	e0bffe17 	ldw	r2,-8(fp)
    2f1c:	100490fa 	slli	r2,r2,3
    2f20:	11400084 	addi	r5,r2,2
    2f24:	e0bffd17 	ldw	r2,-12(fp)
    2f28:	100c90fa 	slli	r6,r2,3
    2f2c:	e0bffe17 	ldw	r2,-8(fp)
    2f30:	100490fa 	slli	r2,r2,3
    2f34:	11c00084 	addi	r7,r2,2
    2f38:	e0bffd17 	ldw	r2,-12(fp)
    2f3c:	100490fa 	slli	r2,r2,3
    2f40:	108000c4 	addi	r2,r2,3
    2f44:	00c09784 	movi	r3,606
    2f48:	d8c00115 	stw	r3,4(sp)
    2f4c:	d8800015 	stw	r2,0(sp)
    2f50:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(4), V(5), H(7), V(5), WALL_COLOR);
    2f54:	e0bfff17 	ldw	r2,-4(fp)
    2f58:	11000217 	ldw	r4,8(r2)
    2f5c:	e0bffe17 	ldw	r2,-8(fp)
    2f60:	100490fa 	slli	r2,r2,3
    2f64:	11400104 	addi	r5,r2,4
    2f68:	e0bffd17 	ldw	r2,-12(fp)
    2f6c:	100490fa 	slli	r2,r2,3
    2f70:	11800144 	addi	r6,r2,5
    2f74:	e0bffe17 	ldw	r2,-8(fp)
    2f78:	100490fa 	slli	r2,r2,3
    2f7c:	11c001c4 	addi	r7,r2,7
    2f80:	e0bffd17 	ldw	r2,-12(fp)
    2f84:	100490fa 	slli	r2,r2,3
    2f88:	10800144 	addi	r2,r2,5
    2f8c:	00c09784 	movi	r3,606
    2f90:	d8c00115 	stw	r3,4(sp)
    2f94:	d8800015 	stw	r2,0(sp)
    2f98:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawPixel(H(3), V(4), WALL_COLOR);
    2f9c:	e0bfff17 	ldw	r2,-4(fp)
    2fa0:	10c00217 	ldw	r3,8(r2)
    2fa4:	e0bffe17 	ldw	r2,-8(fp)
    2fa8:	100490fa 	slli	r2,r2,3
    2fac:	110000c4 	addi	r4,r2,3
    2fb0:	e0bffd17 	ldw	r2,-12(fp)
    2fb4:	100490fa 	slli	r2,r2,3
    2fb8:	10800104 	addi	r2,r2,4
    2fbc:	01c09784 	movi	r7,606
    2fc0:	100d883a 	mov	r6,r2
    2fc4:	200b883a 	mov	r5,r4
    2fc8:	1809883a 	mov	r4,r3
    2fcc:	0004da80 	call	4da8 <_ZN14VideoInterface9drawPixelEiit>
						vi->drawLine(H(5), V(0), H(5), V(1), WALL_COLOR);
    2fd0:	e0bfff17 	ldw	r2,-4(fp)
    2fd4:	11000217 	ldw	r4,8(r2)
    2fd8:	e0bffe17 	ldw	r2,-8(fp)
    2fdc:	100490fa 	slli	r2,r2,3
    2fe0:	11400144 	addi	r5,r2,5
    2fe4:	e0bffd17 	ldw	r2,-12(fp)
    2fe8:	100c90fa 	slli	r6,r2,3
    2fec:	e0bffe17 	ldw	r2,-8(fp)
    2ff0:	100490fa 	slli	r2,r2,3
    2ff4:	11c00144 	addi	r7,r2,5
    2ff8:	e0bffd17 	ldw	r2,-12(fp)
    2ffc:	100490fa 	slli	r2,r2,3
    3000:	10800044 	addi	r2,r2,1
    3004:	00c09784 	movi	r3,606
    3008:	d8c00115 	stw	r3,4(sp)
    300c:	d8800015 	stw	r2,0(sp)
    3010:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(6), V(2), H(7), V(2), WALL_COLOR);
    3014:	e0bfff17 	ldw	r2,-4(fp)
    3018:	11000217 	ldw	r4,8(r2)
    301c:	e0bffe17 	ldw	r2,-8(fp)
    3020:	100490fa 	slli	r2,r2,3
    3024:	11400184 	addi	r5,r2,6
    3028:	e0bffd17 	ldw	r2,-12(fp)
    302c:	100490fa 	slli	r2,r2,3
    3030:	11800084 	addi	r6,r2,2
    3034:	e0bffe17 	ldw	r2,-8(fp)
    3038:	100490fa 	slli	r2,r2,3
    303c:	11c001c4 	addi	r7,r2,7
    3040:	e0bffd17 	ldw	r2,-12(fp)
    3044:	100490fa 	slli	r2,r2,3
    3048:	10800084 	addi	r2,r2,2
    304c:	00c09784 	movi	r3,606
    3050:	d8c00115 	stw	r3,4(sp)
    3054:	d8800015 	stw	r2,0(sp)
    3058:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						break;
    305c:	0002e406 	br	3bf0 <_ZN4Game7drawMapEv+0x1140>
					case c4:
						vi->drawLine(H(5), V(0), H(5), V(3), WALL_COLOR);
    3060:	e0bfff17 	ldw	r2,-4(fp)
    3064:	11000217 	ldw	r4,8(r2)
    3068:	e0bffe17 	ldw	r2,-8(fp)
    306c:	100490fa 	slli	r2,r2,3
    3070:	11400144 	addi	r5,r2,5
    3074:	e0bffd17 	ldw	r2,-12(fp)
    3078:	100c90fa 	slli	r6,r2,3
    307c:	e0bffe17 	ldw	r2,-8(fp)
    3080:	100490fa 	slli	r2,r2,3
    3084:	11c00144 	addi	r7,r2,5
    3088:	e0bffd17 	ldw	r2,-12(fp)
    308c:	100490fa 	slli	r2,r2,3
    3090:	108000c4 	addi	r2,r2,3
    3094:	00c09784 	movi	r3,606
    3098:	d8c00115 	stw	r3,4(sp)
    309c:	d8800015 	stw	r2,0(sp)
    30a0:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(0), V(5), H(3), V(5), WALL_COLOR);
    30a4:	e0bfff17 	ldw	r2,-4(fp)
    30a8:	11000217 	ldw	r4,8(r2)
    30ac:	e0bffe17 	ldw	r2,-8(fp)
    30b0:	100a90fa 	slli	r5,r2,3
    30b4:	e0bffd17 	ldw	r2,-12(fp)
    30b8:	100490fa 	slli	r2,r2,3
    30bc:	11800144 	addi	r6,r2,5
    30c0:	e0bffe17 	ldw	r2,-8(fp)
    30c4:	100490fa 	slli	r2,r2,3
    30c8:	11c000c4 	addi	r7,r2,3
    30cc:	e0bffd17 	ldw	r2,-12(fp)
    30d0:	100490fa 	slli	r2,r2,3
    30d4:	10800144 	addi	r2,r2,5
    30d8:	00c09784 	movi	r3,606
    30dc:	d8c00115 	stw	r3,4(sp)
    30e0:	d8800015 	stw	r2,0(sp)
    30e4:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawPixel(H(4), V(4), WALL_COLOR);
    30e8:	e0bfff17 	ldw	r2,-4(fp)
    30ec:	10c00217 	ldw	r3,8(r2)
    30f0:	e0bffe17 	ldw	r2,-8(fp)
    30f4:	100490fa 	slli	r2,r2,3
    30f8:	11000104 	addi	r4,r2,4
    30fc:	e0bffd17 	ldw	r2,-12(fp)
    3100:	100490fa 	slli	r2,r2,3
    3104:	10800104 	addi	r2,r2,4
    3108:	01c09784 	movi	r7,606
    310c:	100d883a 	mov	r6,r2
    3110:	200b883a 	mov	r5,r4
    3114:	1809883a 	mov	r4,r3
    3118:	0004da80 	call	4da8 <_ZN14VideoInterface9drawPixelEiit>
						vi->drawLine(H(2), V(0), H(2), V(1), WALL_COLOR);
    311c:	e0bfff17 	ldw	r2,-4(fp)
    3120:	11000217 	ldw	r4,8(r2)
    3124:	e0bffe17 	ldw	r2,-8(fp)
    3128:	100490fa 	slli	r2,r2,3
    312c:	11400084 	addi	r5,r2,2
    3130:	e0bffd17 	ldw	r2,-12(fp)
    3134:	100c90fa 	slli	r6,r2,3
    3138:	e0bffe17 	ldw	r2,-8(fp)
    313c:	100490fa 	slli	r2,r2,3
    3140:	11c00084 	addi	r7,r2,2
    3144:	e0bffd17 	ldw	r2,-12(fp)
    3148:	100490fa 	slli	r2,r2,3
    314c:	10800044 	addi	r2,r2,1
    3150:	00c09784 	movi	r3,606
    3154:	d8c00115 	stw	r3,4(sp)
    3158:	d8800015 	stw	r2,0(sp)
    315c:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(0), V(2), H(1), V(2), WALL_COLOR);
    3160:	e0bfff17 	ldw	r2,-4(fp)
    3164:	11000217 	ldw	r4,8(r2)
    3168:	e0bffe17 	ldw	r2,-8(fp)
    316c:	100a90fa 	slli	r5,r2,3
    3170:	e0bffd17 	ldw	r2,-12(fp)
    3174:	100490fa 	slli	r2,r2,3
    3178:	11800084 	addi	r6,r2,2
    317c:	e0bffe17 	ldw	r2,-8(fp)
    3180:	100490fa 	slli	r2,r2,3
    3184:	11c00044 	addi	r7,r2,1
    3188:	e0bffd17 	ldw	r2,-12(fp)
    318c:	100490fa 	slli	r2,r2,3
    3190:	10800084 	addi	r2,r2,2
    3194:	00c09784 	movi	r3,606
    3198:	d8c00115 	stw	r3,4(sp)
    319c:	d8800015 	stw	r2,0(sp)
    31a0:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						break;
    31a4:	00029206 	br	3bf0 <_ZN4Game7drawMapEv+0x1140>
					case ph:
						vi->drawLine(H(0), V(2), H(7), V(2), WALL_COLOR);
    31a8:	e0bfff17 	ldw	r2,-4(fp)
    31ac:	11000217 	ldw	r4,8(r2)
    31b0:	e0bffe17 	ldw	r2,-8(fp)
    31b4:	100a90fa 	slli	r5,r2,3
    31b8:	e0bffd17 	ldw	r2,-12(fp)
    31bc:	100490fa 	slli	r2,r2,3
    31c0:	11800084 	addi	r6,r2,2
    31c4:	e0bffe17 	ldw	r2,-8(fp)
    31c8:	100490fa 	slli	r2,r2,3
    31cc:	11c001c4 	addi	r7,r2,7
    31d0:	e0bffd17 	ldw	r2,-12(fp)
    31d4:	100490fa 	slli	r2,r2,3
    31d8:	10800084 	addi	r2,r2,2
    31dc:	00c09784 	movi	r3,606
    31e0:	d8c00115 	stw	r3,4(sp)
    31e4:	d8800015 	stw	r2,0(sp)
    31e8:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(0), V(5), H(7), V(5), WALL_COLOR);
    31ec:	e0bfff17 	ldw	r2,-4(fp)
    31f0:	11000217 	ldw	r4,8(r2)
    31f4:	e0bffe17 	ldw	r2,-8(fp)
    31f8:	100a90fa 	slli	r5,r2,3
    31fc:	e0bffd17 	ldw	r2,-12(fp)
    3200:	100490fa 	slli	r2,r2,3
    3204:	11800144 	addi	r6,r2,5
    3208:	e0bffe17 	ldw	r2,-8(fp)
    320c:	100490fa 	slli	r2,r2,3
    3210:	11c001c4 	addi	r7,r2,7
    3214:	e0bffd17 	ldw	r2,-12(fp)
    3218:	100490fa 	slli	r2,r2,3
    321c:	10800144 	addi	r2,r2,5
    3220:	00c09784 	movi	r3,606
    3224:	d8c00115 	stw	r3,4(sp)
    3228:	d8800015 	stw	r2,0(sp)
    322c:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						break;
    3230:	00026f06 	br	3bf0 <_ZN4Game7drawMapEv+0x1140>
					case pv:
						vi->drawLine(H(2), V(0), H(2), V(7), WALL_COLOR);
    3234:	e0bfff17 	ldw	r2,-4(fp)
    3238:	11000217 	ldw	r4,8(r2)
    323c:	e0bffe17 	ldw	r2,-8(fp)
    3240:	100490fa 	slli	r2,r2,3
    3244:	11400084 	addi	r5,r2,2
    3248:	e0bffd17 	ldw	r2,-12(fp)
    324c:	100c90fa 	slli	r6,r2,3
    3250:	e0bffe17 	ldw	r2,-8(fp)
    3254:	100490fa 	slli	r2,r2,3
    3258:	11c00084 	addi	r7,r2,2
    325c:	e0bffd17 	ldw	r2,-12(fp)
    3260:	100490fa 	slli	r2,r2,3
    3264:	108001c4 	addi	r2,r2,7
    3268:	00c09784 	movi	r3,606
    326c:	d8c00115 	stw	r3,4(sp)
    3270:	d8800015 	stw	r2,0(sp)
    3274:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(5), V(0), H(5), V(7), WALL_COLOR);
    3278:	e0bfff17 	ldw	r2,-4(fp)
    327c:	11000217 	ldw	r4,8(r2)
    3280:	e0bffe17 	ldw	r2,-8(fp)
    3284:	100490fa 	slli	r2,r2,3
    3288:	11400144 	addi	r5,r2,5
    328c:	e0bffd17 	ldw	r2,-12(fp)
    3290:	100c90fa 	slli	r6,r2,3
    3294:	e0bffe17 	ldw	r2,-8(fp)
    3298:	100490fa 	slli	r2,r2,3
    329c:	11c00144 	addi	r7,r2,5
    32a0:	e0bffd17 	ldw	r2,-12(fp)
    32a4:	100490fa 	slli	r2,r2,3
    32a8:	108001c4 	addi	r2,r2,7
    32ac:	00c09784 	movi	r3,606
    32b0:	d8c00115 	stw	r3,4(sp)
    32b4:	d8800015 	stw	r2,0(sp)
    32b8:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						break;
    32bc:	00024c06 	br	3bf0 <_ZN4Game7drawMapEv+0x1140>
					case tu:
						vi->drawLine(H(0), V(5), H(7), V(5), WALL_COLOR);
    32c0:	e0bfff17 	ldw	r2,-4(fp)
    32c4:	11000217 	ldw	r4,8(r2)
    32c8:	e0bffe17 	ldw	r2,-8(fp)
    32cc:	100a90fa 	slli	r5,r2,3
    32d0:	e0bffd17 	ldw	r2,-12(fp)
    32d4:	100490fa 	slli	r2,r2,3
    32d8:	11800144 	addi	r6,r2,5
    32dc:	e0bffe17 	ldw	r2,-8(fp)
    32e0:	100490fa 	slli	r2,r2,3
    32e4:	11c001c4 	addi	r7,r2,7
    32e8:	e0bffd17 	ldw	r2,-12(fp)
    32ec:	100490fa 	slli	r2,r2,3
    32f0:	10800144 	addi	r2,r2,5
    32f4:	00c09784 	movi	r3,606
    32f8:	d8c00115 	stw	r3,4(sp)
    32fc:	d8800015 	stw	r2,0(sp)
    3300:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(0), V(2), H(1), V(2), WALL_COLOR);
    3304:	e0bfff17 	ldw	r2,-4(fp)
    3308:	11000217 	ldw	r4,8(r2)
    330c:	e0bffe17 	ldw	r2,-8(fp)
    3310:	100a90fa 	slli	r5,r2,3
    3314:	e0bffd17 	ldw	r2,-12(fp)
    3318:	100490fa 	slli	r2,r2,3
    331c:	11800084 	addi	r6,r2,2
    3320:	e0bffe17 	ldw	r2,-8(fp)
    3324:	100490fa 	slli	r2,r2,3
    3328:	11c00044 	addi	r7,r2,1
    332c:	e0bffd17 	ldw	r2,-12(fp)
    3330:	100490fa 	slli	r2,r2,3
    3334:	10800084 	addi	r2,r2,2
    3338:	00c09784 	movi	r3,606
    333c:	d8c00115 	stw	r3,4(sp)
    3340:	d8800015 	stw	r2,0(sp)
    3344:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(6), V(2), H(7), V(2), WALL_COLOR);
    3348:	e0bfff17 	ldw	r2,-4(fp)
    334c:	11000217 	ldw	r4,8(r2)
    3350:	e0bffe17 	ldw	r2,-8(fp)
    3354:	100490fa 	slli	r2,r2,3
    3358:	11400184 	addi	r5,r2,6
    335c:	e0bffd17 	ldw	r2,-12(fp)
    3360:	100490fa 	slli	r2,r2,3
    3364:	11800084 	addi	r6,r2,2
    3368:	e0bffe17 	ldw	r2,-8(fp)
    336c:	100490fa 	slli	r2,r2,3
    3370:	11c001c4 	addi	r7,r2,7
    3374:	e0bffd17 	ldw	r2,-12(fp)
    3378:	100490fa 	slli	r2,r2,3
    337c:	10800084 	addi	r2,r2,2
    3380:	00c09784 	movi	r3,606
    3384:	d8c00115 	stw	r3,4(sp)
    3388:	d8800015 	stw	r2,0(sp)
    338c:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(2), V(0), H(2), V(1), WALL_COLOR);
    3390:	e0bfff17 	ldw	r2,-4(fp)
    3394:	11000217 	ldw	r4,8(r2)
    3398:	e0bffe17 	ldw	r2,-8(fp)
    339c:	100490fa 	slli	r2,r2,3
    33a0:	11400084 	addi	r5,r2,2
    33a4:	e0bffd17 	ldw	r2,-12(fp)
    33a8:	100c90fa 	slli	r6,r2,3
    33ac:	e0bffe17 	ldw	r2,-8(fp)
    33b0:	100490fa 	slli	r2,r2,3
    33b4:	11c00084 	addi	r7,r2,2
    33b8:	e0bffd17 	ldw	r2,-12(fp)
    33bc:	100490fa 	slli	r2,r2,3
    33c0:	10800044 	addi	r2,r2,1
    33c4:	00c09784 	movi	r3,606
    33c8:	d8c00115 	stw	r3,4(sp)
    33cc:	d8800015 	stw	r2,0(sp)
    33d0:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(5), V(0), H(5), V(1), WALL_COLOR);
    33d4:	e0bfff17 	ldw	r2,-4(fp)
    33d8:	11000217 	ldw	r4,8(r2)
    33dc:	e0bffe17 	ldw	r2,-8(fp)
    33e0:	100490fa 	slli	r2,r2,3
    33e4:	11400144 	addi	r5,r2,5
    33e8:	e0bffd17 	ldw	r2,-12(fp)
    33ec:	100c90fa 	slli	r6,r2,3
    33f0:	e0bffe17 	ldw	r2,-8(fp)
    33f4:	100490fa 	slli	r2,r2,3
    33f8:	11c00144 	addi	r7,r2,5
    33fc:	e0bffd17 	ldw	r2,-12(fp)
    3400:	100490fa 	slli	r2,r2,3
    3404:	10800044 	addi	r2,r2,1
    3408:	00c09784 	movi	r3,606
    340c:	d8c00115 	stw	r3,4(sp)
    3410:	d8800015 	stw	r2,0(sp)
    3414:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						break;
    3418:	0001f506 	br	3bf0 <_ZN4Game7drawMapEv+0x1140>
					case td:
						vi->drawLine(H(0), V(2), H(7), V(2), WALL_COLOR);
    341c:	e0bfff17 	ldw	r2,-4(fp)
    3420:	11000217 	ldw	r4,8(r2)
    3424:	e0bffe17 	ldw	r2,-8(fp)
    3428:	100a90fa 	slli	r5,r2,3
    342c:	e0bffd17 	ldw	r2,-12(fp)
    3430:	100490fa 	slli	r2,r2,3
    3434:	11800084 	addi	r6,r2,2
    3438:	e0bffe17 	ldw	r2,-8(fp)
    343c:	100490fa 	slli	r2,r2,3
    3440:	11c001c4 	addi	r7,r2,7
    3444:	e0bffd17 	ldw	r2,-12(fp)
    3448:	100490fa 	slli	r2,r2,3
    344c:	10800084 	addi	r2,r2,2
    3450:	00c09784 	movi	r3,606
    3454:	d8c00115 	stw	r3,4(sp)
    3458:	d8800015 	stw	r2,0(sp)
    345c:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(0), V(5), H(1), V(5), WALL_COLOR);
    3460:	e0bfff17 	ldw	r2,-4(fp)
    3464:	11000217 	ldw	r4,8(r2)
    3468:	e0bffe17 	ldw	r2,-8(fp)
    346c:	100a90fa 	slli	r5,r2,3
    3470:	e0bffd17 	ldw	r2,-12(fp)
    3474:	100490fa 	slli	r2,r2,3
    3478:	11800144 	addi	r6,r2,5
    347c:	e0bffe17 	ldw	r2,-8(fp)
    3480:	100490fa 	slli	r2,r2,3
    3484:	11c00044 	addi	r7,r2,1
    3488:	e0bffd17 	ldw	r2,-12(fp)
    348c:	100490fa 	slli	r2,r2,3
    3490:	10800144 	addi	r2,r2,5
    3494:	00c09784 	movi	r3,606
    3498:	d8c00115 	stw	r3,4(sp)
    349c:	d8800015 	stw	r2,0(sp)
    34a0:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(6), V(5), H(7), V(5), WALL_COLOR);
    34a4:	e0bfff17 	ldw	r2,-4(fp)
    34a8:	11000217 	ldw	r4,8(r2)
    34ac:	e0bffe17 	ldw	r2,-8(fp)
    34b0:	100490fa 	slli	r2,r2,3
    34b4:	11400184 	addi	r5,r2,6
    34b8:	e0bffd17 	ldw	r2,-12(fp)
    34bc:	100490fa 	slli	r2,r2,3
    34c0:	11800144 	addi	r6,r2,5
    34c4:	e0bffe17 	ldw	r2,-8(fp)
    34c8:	100490fa 	slli	r2,r2,3
    34cc:	11c001c4 	addi	r7,r2,7
    34d0:	e0bffd17 	ldw	r2,-12(fp)
    34d4:	100490fa 	slli	r2,r2,3
    34d8:	10800144 	addi	r2,r2,5
    34dc:	00c09784 	movi	r3,606
    34e0:	d8c00115 	stw	r3,4(sp)
    34e4:	d8800015 	stw	r2,0(sp)
    34e8:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(2), V(6), H(2), V(7), WALL_COLOR);
    34ec:	e0bfff17 	ldw	r2,-4(fp)
    34f0:	11000217 	ldw	r4,8(r2)
    34f4:	e0bffe17 	ldw	r2,-8(fp)
    34f8:	100490fa 	slli	r2,r2,3
    34fc:	11400084 	addi	r5,r2,2
    3500:	e0bffd17 	ldw	r2,-12(fp)
    3504:	100490fa 	slli	r2,r2,3
    3508:	11800184 	addi	r6,r2,6
    350c:	e0bffe17 	ldw	r2,-8(fp)
    3510:	100490fa 	slli	r2,r2,3
    3514:	11c00084 	addi	r7,r2,2
    3518:	e0bffd17 	ldw	r2,-12(fp)
    351c:	100490fa 	slli	r2,r2,3
    3520:	108001c4 	addi	r2,r2,7
    3524:	00c09784 	movi	r3,606
    3528:	d8c00115 	stw	r3,4(sp)
    352c:	d8800015 	stw	r2,0(sp)
    3530:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(5), V(6), H(5), V(7), WALL_COLOR);
    3534:	e0bfff17 	ldw	r2,-4(fp)
    3538:	11000217 	ldw	r4,8(r2)
    353c:	e0bffe17 	ldw	r2,-8(fp)
    3540:	100490fa 	slli	r2,r2,3
    3544:	11400144 	addi	r5,r2,5
    3548:	e0bffd17 	ldw	r2,-12(fp)
    354c:	100490fa 	slli	r2,r2,3
    3550:	11800184 	addi	r6,r2,6
    3554:	e0bffe17 	ldw	r2,-8(fp)
    3558:	100490fa 	slli	r2,r2,3
    355c:	11c00144 	addi	r7,r2,5
    3560:	e0bffd17 	ldw	r2,-12(fp)
    3564:	100490fa 	slli	r2,r2,3
    3568:	108001c4 	addi	r2,r2,7
    356c:	00c09784 	movi	r3,606
    3570:	d8c00115 	stw	r3,4(sp)
    3574:	d8800015 	stw	r2,0(sp)
    3578:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						break;
    357c:	00019c06 	br	3bf0 <_ZN4Game7drawMapEv+0x1140>
					case tl:
						vi->drawLine(H(5), V(0), H(5), V(7), WALL_COLOR);
    3580:	e0bfff17 	ldw	r2,-4(fp)
    3584:	11000217 	ldw	r4,8(r2)
    3588:	e0bffe17 	ldw	r2,-8(fp)
    358c:	100490fa 	slli	r2,r2,3
    3590:	11400144 	addi	r5,r2,5
    3594:	e0bffd17 	ldw	r2,-12(fp)
    3598:	100c90fa 	slli	r6,r2,3
    359c:	e0bffe17 	ldw	r2,-8(fp)
    35a0:	100490fa 	slli	r2,r2,3
    35a4:	11c00144 	addi	r7,r2,5
    35a8:	e0bffd17 	ldw	r2,-12(fp)
    35ac:	100490fa 	slli	r2,r2,3
    35b0:	108001c4 	addi	r2,r2,7
    35b4:	00c09784 	movi	r3,606
    35b8:	d8c00115 	stw	r3,4(sp)
    35bc:	d8800015 	stw	r2,0(sp)
    35c0:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(2), V(0), H(2), V(1), WALL_COLOR);
    35c4:	e0bfff17 	ldw	r2,-4(fp)
    35c8:	11000217 	ldw	r4,8(r2)
    35cc:	e0bffe17 	ldw	r2,-8(fp)
    35d0:	100490fa 	slli	r2,r2,3
    35d4:	11400084 	addi	r5,r2,2
    35d8:	e0bffd17 	ldw	r2,-12(fp)
    35dc:	100c90fa 	slli	r6,r2,3
    35e0:	e0bffe17 	ldw	r2,-8(fp)
    35e4:	100490fa 	slli	r2,r2,3
    35e8:	11c00084 	addi	r7,r2,2
    35ec:	e0bffd17 	ldw	r2,-12(fp)
    35f0:	100490fa 	slli	r2,r2,3
    35f4:	10800044 	addi	r2,r2,1
    35f8:	00c09784 	movi	r3,606
    35fc:	d8c00115 	stw	r3,4(sp)
    3600:	d8800015 	stw	r2,0(sp)
    3604:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(0), V(2), H(1), V(2), WALL_COLOR);
    3608:	e0bfff17 	ldw	r2,-4(fp)
    360c:	11000217 	ldw	r4,8(r2)
    3610:	e0bffe17 	ldw	r2,-8(fp)
    3614:	100a90fa 	slli	r5,r2,3
    3618:	e0bffd17 	ldw	r2,-12(fp)
    361c:	100490fa 	slli	r2,r2,3
    3620:	11800084 	addi	r6,r2,2
    3624:	e0bffe17 	ldw	r2,-8(fp)
    3628:	100490fa 	slli	r2,r2,3
    362c:	11c00044 	addi	r7,r2,1
    3630:	e0bffd17 	ldw	r2,-12(fp)
    3634:	100490fa 	slli	r2,r2,3
    3638:	10800084 	addi	r2,r2,2
    363c:	00c09784 	movi	r3,606
    3640:	d8c00115 	stw	r3,4(sp)
    3644:	d8800015 	stw	r2,0(sp)
    3648:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(0), V(5), H(1), V(5), WALL_COLOR);
    364c:	e0bfff17 	ldw	r2,-4(fp)
    3650:	11000217 	ldw	r4,8(r2)
    3654:	e0bffe17 	ldw	r2,-8(fp)
    3658:	100a90fa 	slli	r5,r2,3
    365c:	e0bffd17 	ldw	r2,-12(fp)
    3660:	100490fa 	slli	r2,r2,3
    3664:	11800144 	addi	r6,r2,5
    3668:	e0bffe17 	ldw	r2,-8(fp)
    366c:	100490fa 	slli	r2,r2,3
    3670:	11c00044 	addi	r7,r2,1
    3674:	e0bffd17 	ldw	r2,-12(fp)
    3678:	100490fa 	slli	r2,r2,3
    367c:	10800144 	addi	r2,r2,5
    3680:	00c09784 	movi	r3,606
    3684:	d8c00115 	stw	r3,4(sp)
    3688:	d8800015 	stw	r2,0(sp)
    368c:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(2), V(6), H(2), V(7), WALL_COLOR);
    3690:	e0bfff17 	ldw	r2,-4(fp)
    3694:	11000217 	ldw	r4,8(r2)
    3698:	e0bffe17 	ldw	r2,-8(fp)
    369c:	100490fa 	slli	r2,r2,3
    36a0:	11400084 	addi	r5,r2,2
    36a4:	e0bffd17 	ldw	r2,-12(fp)
    36a8:	100490fa 	slli	r2,r2,3
    36ac:	11800184 	addi	r6,r2,6
    36b0:	e0bffe17 	ldw	r2,-8(fp)
    36b4:	100490fa 	slli	r2,r2,3
    36b8:	11c00084 	addi	r7,r2,2
    36bc:	e0bffd17 	ldw	r2,-12(fp)
    36c0:	100490fa 	slli	r2,r2,3
    36c4:	108001c4 	addi	r2,r2,7
    36c8:	00c09784 	movi	r3,606
    36cc:	d8c00115 	stw	r3,4(sp)
    36d0:	d8800015 	stw	r2,0(sp)
    36d4:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						break;
    36d8:	00014506 	br	3bf0 <_ZN4Game7drawMapEv+0x1140>
					case tr:
						vi->drawLine(H(2), V(0), H(2), V(7), WALL_COLOR);
    36dc:	e0bfff17 	ldw	r2,-4(fp)
    36e0:	11000217 	ldw	r4,8(r2)
    36e4:	e0bffe17 	ldw	r2,-8(fp)
    36e8:	100490fa 	slli	r2,r2,3
    36ec:	11400084 	addi	r5,r2,2
    36f0:	e0bffd17 	ldw	r2,-12(fp)
    36f4:	100c90fa 	slli	r6,r2,3
    36f8:	e0bffe17 	ldw	r2,-8(fp)
    36fc:	100490fa 	slli	r2,r2,3
    3700:	11c00084 	addi	r7,r2,2
    3704:	e0bffd17 	ldw	r2,-12(fp)
    3708:	100490fa 	slli	r2,r2,3
    370c:	108001c4 	addi	r2,r2,7
    3710:	00c09784 	movi	r3,606
    3714:	d8c00115 	stw	r3,4(sp)
    3718:	d8800015 	stw	r2,0(sp)
    371c:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(5), V(0), H(5), V(1), WALL_COLOR);
    3720:	e0bfff17 	ldw	r2,-4(fp)
    3724:	11000217 	ldw	r4,8(r2)
    3728:	e0bffe17 	ldw	r2,-8(fp)
    372c:	100490fa 	slli	r2,r2,3
    3730:	11400144 	addi	r5,r2,5
    3734:	e0bffd17 	ldw	r2,-12(fp)
    3738:	100c90fa 	slli	r6,r2,3
    373c:	e0bffe17 	ldw	r2,-8(fp)
    3740:	100490fa 	slli	r2,r2,3
    3744:	11c00144 	addi	r7,r2,5
    3748:	e0bffd17 	ldw	r2,-12(fp)
    374c:	100490fa 	slli	r2,r2,3
    3750:	10800044 	addi	r2,r2,1
    3754:	00c09784 	movi	r3,606
    3758:	d8c00115 	stw	r3,4(sp)
    375c:	d8800015 	stw	r2,0(sp)
    3760:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(6), V(2), H(7), V(2), WALL_COLOR);
    3764:	e0bfff17 	ldw	r2,-4(fp)
    3768:	11000217 	ldw	r4,8(r2)
    376c:	e0bffe17 	ldw	r2,-8(fp)
    3770:	100490fa 	slli	r2,r2,3
    3774:	11400184 	addi	r5,r2,6
    3778:	e0bffd17 	ldw	r2,-12(fp)
    377c:	100490fa 	slli	r2,r2,3
    3780:	11800084 	addi	r6,r2,2
    3784:	e0bffe17 	ldw	r2,-8(fp)
    3788:	100490fa 	slli	r2,r2,3
    378c:	11c001c4 	addi	r7,r2,7
    3790:	e0bffd17 	ldw	r2,-12(fp)
    3794:	100490fa 	slli	r2,r2,3
    3798:	10800084 	addi	r2,r2,2
    379c:	00c09784 	movi	r3,606
    37a0:	d8c00115 	stw	r3,4(sp)
    37a4:	d8800015 	stw	r2,0(sp)
    37a8:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(6), V(5), H(7), V(5), WALL_COLOR);
    37ac:	e0bfff17 	ldw	r2,-4(fp)
    37b0:	11000217 	ldw	r4,8(r2)
    37b4:	e0bffe17 	ldw	r2,-8(fp)
    37b8:	100490fa 	slli	r2,r2,3
    37bc:	11400184 	addi	r5,r2,6
    37c0:	e0bffd17 	ldw	r2,-12(fp)
    37c4:	100490fa 	slli	r2,r2,3
    37c8:	11800144 	addi	r6,r2,5
    37cc:	e0bffe17 	ldw	r2,-8(fp)
    37d0:	100490fa 	slli	r2,r2,3
    37d4:	11c001c4 	addi	r7,r2,7
    37d8:	e0bffd17 	ldw	r2,-12(fp)
    37dc:	100490fa 	slli	r2,r2,3
    37e0:	10800144 	addi	r2,r2,5
    37e4:	00c09784 	movi	r3,606
    37e8:	d8c00115 	stw	r3,4(sp)
    37ec:	d8800015 	stw	r2,0(sp)
    37f0:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(5), V(6), H(5), V(7), WALL_COLOR);
    37f4:	e0bfff17 	ldw	r2,-4(fp)
    37f8:	11000217 	ldw	r4,8(r2)
    37fc:	e0bffe17 	ldw	r2,-8(fp)
    3800:	100490fa 	slli	r2,r2,3
    3804:	11400144 	addi	r5,r2,5
    3808:	e0bffd17 	ldw	r2,-12(fp)
    380c:	100490fa 	slli	r2,r2,3
    3810:	11800184 	addi	r6,r2,6
    3814:	e0bffe17 	ldw	r2,-8(fp)
    3818:	100490fa 	slli	r2,r2,3
    381c:	11c00144 	addi	r7,r2,5
    3820:	e0bffd17 	ldw	r2,-12(fp)
    3824:	100490fa 	slli	r2,r2,3
    3828:	108001c4 	addi	r2,r2,7
    382c:	00c09784 	movi	r3,606
    3830:	d8c00115 	stw	r3,4(sp)
    3834:	d8800015 	stw	r2,0(sp)
    3838:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						break;
    383c:	0000ec06 	br	3bf0 <_ZN4Game7drawMapEv+0x1140>
					case cu:
						vi->drawLine(H(2), V(0), H(2), V(3), WALL_COLOR);
    3840:	e0bfff17 	ldw	r2,-4(fp)
    3844:	11000217 	ldw	r4,8(r2)
    3848:	e0bffe17 	ldw	r2,-8(fp)
    384c:	100490fa 	slli	r2,r2,3
    3850:	11400084 	addi	r5,r2,2
    3854:	e0bffd17 	ldw	r2,-12(fp)
    3858:	100c90fa 	slli	r6,r2,3
    385c:	e0bffe17 	ldw	r2,-8(fp)
    3860:	100490fa 	slli	r2,r2,3
    3864:	11c00084 	addi	r7,r2,2
    3868:	e0bffd17 	ldw	r2,-12(fp)
    386c:	100490fa 	slli	r2,r2,3
    3870:	108000c4 	addi	r2,r2,3
    3874:	00c09784 	movi	r3,606
    3878:	d8c00115 	stw	r3,4(sp)
    387c:	d8800015 	stw	r2,0(sp)
    3880:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(5), V(0), H(5), V(3), WALL_COLOR);
    3884:	e0bfff17 	ldw	r2,-4(fp)
    3888:	11000217 	ldw	r4,8(r2)
    388c:	e0bffe17 	ldw	r2,-8(fp)
    3890:	100490fa 	slli	r2,r2,3
    3894:	11400144 	addi	r5,r2,5
    3898:	e0bffd17 	ldw	r2,-12(fp)
    389c:	100c90fa 	slli	r6,r2,3
    38a0:	e0bffe17 	ldw	r2,-8(fp)
    38a4:	100490fa 	slli	r2,r2,3
    38a8:	11c00144 	addi	r7,r2,5
    38ac:	e0bffd17 	ldw	r2,-12(fp)
    38b0:	100490fa 	slli	r2,r2,3
    38b4:	108000c4 	addi	r2,r2,3
    38b8:	00c09784 	movi	r3,606
    38bc:	d8c00115 	stw	r3,4(sp)
    38c0:	d8800015 	stw	r2,0(sp)
    38c4:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(3), V(4), H(4), V(4), WALL_COLOR);
    38c8:	e0bfff17 	ldw	r2,-4(fp)
    38cc:	11000217 	ldw	r4,8(r2)
    38d0:	e0bffe17 	ldw	r2,-8(fp)
    38d4:	100490fa 	slli	r2,r2,3
    38d8:	114000c4 	addi	r5,r2,3
    38dc:	e0bffd17 	ldw	r2,-12(fp)
    38e0:	100490fa 	slli	r2,r2,3
    38e4:	11800104 	addi	r6,r2,4
    38e8:	e0bffe17 	ldw	r2,-8(fp)
    38ec:	100490fa 	slli	r2,r2,3
    38f0:	11c00104 	addi	r7,r2,4
    38f4:	e0bffd17 	ldw	r2,-12(fp)
    38f8:	100490fa 	slli	r2,r2,3
    38fc:	10800104 	addi	r2,r2,4
    3900:	00c09784 	movi	r3,606
    3904:	d8c00115 	stw	r3,4(sp)
    3908:	d8800015 	stw	r2,0(sp)
    390c:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						break;
    3910:	0000b706 	br	3bf0 <_ZN4Game7drawMapEv+0x1140>
					case cd:
						vi->drawLine(H(2), V(4), H(2), V(7), WALL_COLOR);
    3914:	e0bfff17 	ldw	r2,-4(fp)
    3918:	11000217 	ldw	r4,8(r2)
    391c:	e0bffe17 	ldw	r2,-8(fp)
    3920:	100490fa 	slli	r2,r2,3
    3924:	11400084 	addi	r5,r2,2
    3928:	e0bffd17 	ldw	r2,-12(fp)
    392c:	100490fa 	slli	r2,r2,3
    3930:	11800104 	addi	r6,r2,4
    3934:	e0bffe17 	ldw	r2,-8(fp)
    3938:	100490fa 	slli	r2,r2,3
    393c:	11c00084 	addi	r7,r2,2
    3940:	e0bffd17 	ldw	r2,-12(fp)
    3944:	100490fa 	slli	r2,r2,3
    3948:	108001c4 	addi	r2,r2,7
    394c:	00c09784 	movi	r3,606
    3950:	d8c00115 	stw	r3,4(sp)
    3954:	d8800015 	stw	r2,0(sp)
    3958:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(5), V(4), H(5), V(7), WALL_COLOR);
    395c:	e0bfff17 	ldw	r2,-4(fp)
    3960:	11000217 	ldw	r4,8(r2)
    3964:	e0bffe17 	ldw	r2,-8(fp)
    3968:	100490fa 	slli	r2,r2,3
    396c:	11400144 	addi	r5,r2,5
    3970:	e0bffd17 	ldw	r2,-12(fp)
    3974:	100490fa 	slli	r2,r2,3
    3978:	11800104 	addi	r6,r2,4
    397c:	e0bffe17 	ldw	r2,-8(fp)
    3980:	100490fa 	slli	r2,r2,3
    3984:	11c00144 	addi	r7,r2,5
    3988:	e0bffd17 	ldw	r2,-12(fp)
    398c:	100490fa 	slli	r2,r2,3
    3990:	108001c4 	addi	r2,r2,7
    3994:	00c09784 	movi	r3,606
    3998:	d8c00115 	stw	r3,4(sp)
    399c:	d8800015 	stw	r2,0(sp)
    39a0:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(3), V(3), H(4), V(3), WALL_COLOR);
    39a4:	e0bfff17 	ldw	r2,-4(fp)
    39a8:	11000217 	ldw	r4,8(r2)
    39ac:	e0bffe17 	ldw	r2,-8(fp)
    39b0:	100490fa 	slli	r2,r2,3
    39b4:	114000c4 	addi	r5,r2,3
    39b8:	e0bffd17 	ldw	r2,-12(fp)
    39bc:	100490fa 	slli	r2,r2,3
    39c0:	118000c4 	addi	r6,r2,3
    39c4:	e0bffe17 	ldw	r2,-8(fp)
    39c8:	100490fa 	slli	r2,r2,3
    39cc:	11c00104 	addi	r7,r2,4
    39d0:	e0bffd17 	ldw	r2,-12(fp)
    39d4:	100490fa 	slli	r2,r2,3
    39d8:	108000c4 	addi	r2,r2,3
    39dc:	00c09784 	movi	r3,606
    39e0:	d8c00115 	stw	r3,4(sp)
    39e4:	d8800015 	stw	r2,0(sp)
    39e8:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						break;
    39ec:	00008006 	br	3bf0 <_ZN4Game7drawMapEv+0x1140>
					case cl:
						vi->drawLine(H(0), V(2), H(3), V(2), WALL_COLOR);
    39f0:	e0bfff17 	ldw	r2,-4(fp)
    39f4:	11000217 	ldw	r4,8(r2)
    39f8:	e0bffe17 	ldw	r2,-8(fp)
    39fc:	100a90fa 	slli	r5,r2,3
    3a00:	e0bffd17 	ldw	r2,-12(fp)
    3a04:	100490fa 	slli	r2,r2,3
    3a08:	11800084 	addi	r6,r2,2
    3a0c:	e0bffe17 	ldw	r2,-8(fp)
    3a10:	100490fa 	slli	r2,r2,3
    3a14:	11c000c4 	addi	r7,r2,3
    3a18:	e0bffd17 	ldw	r2,-12(fp)
    3a1c:	100490fa 	slli	r2,r2,3
    3a20:	10800084 	addi	r2,r2,2
    3a24:	00c09784 	movi	r3,606
    3a28:	d8c00115 	stw	r3,4(sp)
    3a2c:	d8800015 	stw	r2,0(sp)
    3a30:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(0), V(5), H(3), V(5), WALL_COLOR);
    3a34:	e0bfff17 	ldw	r2,-4(fp)
    3a38:	11000217 	ldw	r4,8(r2)
    3a3c:	e0bffe17 	ldw	r2,-8(fp)
    3a40:	100a90fa 	slli	r5,r2,3
    3a44:	e0bffd17 	ldw	r2,-12(fp)
    3a48:	100490fa 	slli	r2,r2,3
    3a4c:	11800144 	addi	r6,r2,5
    3a50:	e0bffe17 	ldw	r2,-8(fp)
    3a54:	100490fa 	slli	r2,r2,3
    3a58:	11c000c4 	addi	r7,r2,3
    3a5c:	e0bffd17 	ldw	r2,-12(fp)
    3a60:	100490fa 	slli	r2,r2,3
    3a64:	10800144 	addi	r2,r2,5
    3a68:	00c09784 	movi	r3,606
    3a6c:	d8c00115 	stw	r3,4(sp)
    3a70:	d8800015 	stw	r2,0(sp)
    3a74:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(4), V(3), H(4), V(4), WALL_COLOR);
    3a78:	e0bfff17 	ldw	r2,-4(fp)
    3a7c:	11000217 	ldw	r4,8(r2)
    3a80:	e0bffe17 	ldw	r2,-8(fp)
    3a84:	100490fa 	slli	r2,r2,3
    3a88:	11400104 	addi	r5,r2,4
    3a8c:	e0bffd17 	ldw	r2,-12(fp)
    3a90:	100490fa 	slli	r2,r2,3
    3a94:	118000c4 	addi	r6,r2,3
    3a98:	e0bffe17 	ldw	r2,-8(fp)
    3a9c:	100490fa 	slli	r2,r2,3
    3aa0:	11c00104 	addi	r7,r2,4
    3aa4:	e0bffd17 	ldw	r2,-12(fp)
    3aa8:	100490fa 	slli	r2,r2,3
    3aac:	10800104 	addi	r2,r2,4
    3ab0:	00c09784 	movi	r3,606
    3ab4:	d8c00115 	stw	r3,4(sp)
    3ab8:	d8800015 	stw	r2,0(sp)
    3abc:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						break;
    3ac0:	00004b06 	br	3bf0 <_ZN4Game7drawMapEv+0x1140>
					case cr:
						vi->drawLine(H(4), V(2), H(7), V(2), WALL_COLOR);
    3ac4:	e0bfff17 	ldw	r2,-4(fp)
    3ac8:	11000217 	ldw	r4,8(r2)
    3acc:	e0bffe17 	ldw	r2,-8(fp)
    3ad0:	100490fa 	slli	r2,r2,3
    3ad4:	11400104 	addi	r5,r2,4
    3ad8:	e0bffd17 	ldw	r2,-12(fp)
    3adc:	100490fa 	slli	r2,r2,3
    3ae0:	11800084 	addi	r6,r2,2
    3ae4:	e0bffe17 	ldw	r2,-8(fp)
    3ae8:	100490fa 	slli	r2,r2,3
    3aec:	11c001c4 	addi	r7,r2,7
    3af0:	e0bffd17 	ldw	r2,-12(fp)
    3af4:	100490fa 	slli	r2,r2,3
    3af8:	10800084 	addi	r2,r2,2
    3afc:	00c09784 	movi	r3,606
    3b00:	d8c00115 	stw	r3,4(sp)
    3b04:	d8800015 	stw	r2,0(sp)
    3b08:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(4), V(5), H(7), V(5), WALL_COLOR);
    3b0c:	e0bfff17 	ldw	r2,-4(fp)
    3b10:	11000217 	ldw	r4,8(r2)
    3b14:	e0bffe17 	ldw	r2,-8(fp)
    3b18:	100490fa 	slli	r2,r2,3
    3b1c:	11400104 	addi	r5,r2,4
    3b20:	e0bffd17 	ldw	r2,-12(fp)
    3b24:	100490fa 	slli	r2,r2,3
    3b28:	11800144 	addi	r6,r2,5
    3b2c:	e0bffe17 	ldw	r2,-8(fp)
    3b30:	100490fa 	slli	r2,r2,3
    3b34:	11c001c4 	addi	r7,r2,7
    3b38:	e0bffd17 	ldw	r2,-12(fp)
    3b3c:	100490fa 	slli	r2,r2,3
    3b40:	10800144 	addi	r2,r2,5
    3b44:	00c09784 	movi	r3,606
    3b48:	d8c00115 	stw	r3,4(sp)
    3b4c:	d8800015 	stw	r2,0(sp)
    3b50:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(3), V(3), H(3), V(4), WALL_COLOR);
    3b54:	e0bfff17 	ldw	r2,-4(fp)
    3b58:	11000217 	ldw	r4,8(r2)
    3b5c:	e0bffe17 	ldw	r2,-8(fp)
    3b60:	100490fa 	slli	r2,r2,3
    3b64:	114000c4 	addi	r5,r2,3
    3b68:	e0bffd17 	ldw	r2,-12(fp)
    3b6c:	100490fa 	slli	r2,r2,3
    3b70:	118000c4 	addi	r6,r2,3
    3b74:	e0bffe17 	ldw	r2,-8(fp)
    3b78:	100490fa 	slli	r2,r2,3
    3b7c:	11c000c4 	addi	r7,r2,3
    3b80:	e0bffd17 	ldw	r2,-12(fp)
    3b84:	100490fa 	slli	r2,r2,3
    3b88:	10800104 	addi	r2,r2,4
    3b8c:	00c09784 	movi	r3,606
    3b90:	d8c00115 	stw	r3,4(sp)
    3b94:	d8800015 	stw	r2,0(sp)
    3b98:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						break;
    3b9c:	00001406 	br	3bf0 <_ZN4Game7drawMapEv+0x1140>
					case gc:
						vi->drawLine(H(-3), V(4), H(10), V(4), WALL_COLOR);
    3ba0:	e0bfff17 	ldw	r2,-4(fp)
    3ba4:	11000217 	ldw	r4,8(r2)
    3ba8:	e0bffe17 	ldw	r2,-8(fp)
    3bac:	100490fa 	slli	r2,r2,3
    3bb0:	117fff44 	addi	r5,r2,-3
    3bb4:	e0bffd17 	ldw	r2,-12(fp)
    3bb8:	100490fa 	slli	r2,r2,3
    3bbc:	11800104 	addi	r6,r2,4
    3bc0:	e0bffe17 	ldw	r2,-8(fp)
    3bc4:	100490fa 	slli	r2,r2,3
    3bc8:	11c00284 	addi	r7,r2,10
    3bcc:	e0bffd17 	ldw	r2,-12(fp)
    3bd0:	100490fa 	slli	r2,r2,3
    3bd4:	10800104 	addi	r2,r2,4
    3bd8:	00c09784 	movi	r3,606
    3bdc:	d8c00115 	stw	r3,4(sp)
    3be0:	d8800015 	stw	r2,0(sp)
    3be4:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
						break;
    3be8:	00000106 	br	3bf0 <_ZN4Game7drawMapEv+0x1140>
					default: break;
    3bec:	0001883a 	nop
};

void Game::drawMap(){
	vi->setOffset(MAP_OFFSET_X, MAP_OFFSET_Y);
	for(int v = 0; v < 27; v++){
		for(int h = 0; h < 21; h++){
    3bf0:	e0bffe17 	ldw	r2,-8(fp)
    3bf4:	10800044 	addi	r2,r2,1
    3bf8:	e0bffe15 	stw	r2,-8(fp)
    3bfc:	003bbc06 	br	2af0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002af0>
	vi->resetOffset();
};

void Game::drawMap(){
	vi->setOffset(MAP_OFFSET_X, MAP_OFFSET_Y);
	for(int v = 0; v < 27; v++){
    3c00:	e0bffd17 	ldw	r2,-12(fp)
    3c04:	10800044 	addi	r2,r2,1
    3c08:	e0bffd15 	stw	r2,-12(fp)
    3c0c:	003bb406 	br	2ae0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002ae0>
				}
			}

		}
	}
	vi->resetOffset();
    3c10:	e0bfff17 	ldw	r2,-4(fp)
    3c14:	10800217 	ldw	r2,8(r2)
    3c18:	1009883a 	mov	r4,r2
    3c1c:	0004d180 	call	4d18 <_ZN14VideoInterface11resetOffsetEv>
};
    3c20:	0001883a 	nop
    3c24:	e037883a 	mov	sp,fp
    3c28:	dfc00117 	ldw	ra,4(sp)
    3c2c:	df000017 	ldw	fp,0(sp)
    3c30:	dec00204 	addi	sp,sp,8
    3c34:	f800283a 	ret

00003c38 <_ZN5GhostC1Et>:
 *      Author: natha
 */

#include "Ghost.h"

Ghost::Ghost(uint16_t color) : Entity(8, 8) {
    3c38:	defffc04 	addi	sp,sp,-16
    3c3c:	dfc00315 	stw	ra,12(sp)
    3c40:	df000215 	stw	fp,8(sp)
    3c44:	df000204 	addi	fp,sp,8
    3c48:	e13ffe15 	stw	r4,-8(fp)
    3c4c:	2805883a 	mov	r2,r5
    3c50:	e0bfff0d 	sth	r2,-4(fp)
    3c54:	e0bffe17 	ldw	r2,-8(fp)
    3c58:	01800204 	movi	r6,8
    3c5c:	01400204 	movi	r5,8
    3c60:	1009883a 	mov	r4,r2
    3c64:	00002f80 	call	2f8 <_ZN6EntityC1Eii>
    3c68:	008000b4 	movhi	r2,2
    3c6c:	109d7904 	addi	r2,r2,30180
    3c70:	e0fffe17 	ldw	r3,-8(fp)
    3c74:	18800015 	stw	r2,0(r3)
    3c78:	e0bffe17 	ldw	r2,-8(fp)
    3c7c:	10000c15 	stw	zero,48(r2)
    3c80:	e0bffe17 	ldw	r2,-8(fp)
    3c84:	10000d15 	stw	zero,52(r2)
    3c88:	e0bffe17 	ldw	r2,-8(fp)
    3c8c:	10000e85 	stb	zero,58(r2)
    3c90:	e0bffe17 	ldw	r2,-8(fp)
    3c94:	00c00044 	movi	r3,1
    3c98:	10c00ec5 	stb	r3,59(r2)
    3c9c:	e0fffe17 	ldw	r3,-8(fp)
    3ca0:	008000b4 	movhi	r2,2
    3ca4:	109d2b04 	addi	r2,r2,29868
    3ca8:	18c00f04 	addi	r3,r3,60
    3cac:	1009883a 	mov	r4,r2
    3cb0:	00804804 	movi	r2,288
    3cb4:	100d883a 	mov	r6,r2
    3cb8:	200b883a 	mov	r5,r4
    3cbc:	1809883a 	mov	r4,r3
    3cc0:	000d3800 	call	d380 <memcpy>
    3cc4:	e0fffe17 	ldw	r3,-8(fp)
    3cc8:	008000b4 	movhi	r2,2
    3ccc:	109d7304 	addi	r2,r2,30156
    3cd0:	18c05704 	addi	r3,r3,348
    3cd4:	1009883a 	mov	r4,r2
    3cd8:	00800404 	movi	r2,16
    3cdc:	100d883a 	mov	r6,r2
    3ce0:	200b883a 	mov	r5,r4
    3ce4:	1809883a 	mov	r4,r3
    3ce8:	000d3800 	call	d380 <memcpy>
	this->color = color;
    3cec:	e0bffe17 	ldw	r2,-8(fp)
    3cf0:	e0ffff0b 	ldhu	r3,-4(fp)
    3cf4:	10c00e0d 	sth	r3,56(r2)
	this->width = 12;
    3cf8:	e0bffe17 	ldw	r2,-8(fp)
    3cfc:	00c00304 	movi	r3,12
    3d00:	10c00515 	stw	r3,20(r2)
	this->height = 12;
    3d04:	e0bffe17 	ldw	r2,-8(fp)
    3d08:	00c00304 	movi	r3,12
    3d0c:	10c00615 	stw	r3,24(r2)
	this->curr_dir = DIR_NO_DIR;
    3d10:	e0bffe17 	ldw	r2,-8(fp)
    3d14:	00c00104 	movi	r3,4
    3d18:	10c00915 	stw	r3,36(r2)
	this->velocity = 50;
    3d1c:	e0bffe17 	ldw	r2,-8(fp)
    3d20:	00c00c84 	movi	r3,50
    3d24:	10c00715 	stw	r3,28(r2)
};
    3d28:	0001883a 	nop
    3d2c:	e037883a 	mov	sp,fp
    3d30:	dfc00117 	ldw	ra,4(sp)
    3d34:	df000017 	ldw	fp,0(sp)
    3d38:	dec00204 	addi	sp,sp,8
    3d3c:	f800283a 	ret

00003d40 <_ZL12withinBoundsiiiiii>:

static bool withinBounds(int x, int y, int xmin, int xmax, int ymin, int ymax){
    3d40:	defffb04 	addi	sp,sp,-20
    3d44:	df000415 	stw	fp,16(sp)
    3d48:	df000404 	addi	fp,sp,16
    3d4c:	e13ffc15 	stw	r4,-16(fp)
    3d50:	e17ffd15 	stw	r5,-12(fp)
    3d54:	e1bffe15 	stw	r6,-8(fp)
    3d58:	e1ffff15 	stw	r7,-4(fp)
	return (x >= xmin && x <= xmax) && (y >= ymin && y <= ymax);
    3d5c:	e0fffc17 	ldw	r3,-16(fp)
    3d60:	e0bffe17 	ldw	r2,-8(fp)
    3d64:	18800b16 	blt	r3,r2,3d94 <_ZL12withinBoundsiiiiii+0x54>
    3d68:	e0bffc17 	ldw	r2,-16(fp)
    3d6c:	e0ffff17 	ldw	r3,-4(fp)
    3d70:	18800816 	blt	r3,r2,3d94 <_ZL12withinBoundsiiiiii+0x54>
    3d74:	e0fffd17 	ldw	r3,-12(fp)
    3d78:	e0800117 	ldw	r2,4(fp)
    3d7c:	18800516 	blt	r3,r2,3d94 <_ZL12withinBoundsiiiiii+0x54>
    3d80:	e0bffd17 	ldw	r2,-12(fp)
    3d84:	e0c00217 	ldw	r3,8(fp)
    3d88:	18800216 	blt	r3,r2,3d94 <_ZL12withinBoundsiiiiii+0x54>
    3d8c:	00800044 	movi	r2,1
    3d90:	00000106 	br	3d98 <_ZL12withinBoundsiiiiii+0x58>
    3d94:	0005883a 	mov	r2,zero
}
    3d98:	e037883a 	mov	sp,fp
    3d9c:	df000017 	ldw	fp,0(sp)
    3da0:	dec00104 	addi	sp,sp,4
    3da4:	f800283a 	ret

00003da8 <_ZN5Ghost8getColorEi5E_DIRii>:


uint16_t Ghost::getColor(int frame, e_dir_t dir, int x, int y){
    3da8:	defff704 	addi	sp,sp,-36
    3dac:	dfc00815 	stw	ra,32(sp)
    3db0:	df000715 	stw	fp,28(sp)
    3db4:	df000704 	addi	fp,sp,28
    3db8:	e13ffc15 	stw	r4,-16(fp)
    3dbc:	e17ffd15 	stw	r5,-12(fp)
    3dc0:	e1bffe15 	stw	r6,-8(fp)
    3dc4:	e1ffff15 	stw	r7,-4(fp)
	if(x < 0 || x > this->width - 1)
    3dc8:	e0bfff17 	ldw	r2,-4(fp)
    3dcc:	10000516 	blt	r2,zero,3de4 <_ZN5Ghost8getColorEi5E_DIRii+0x3c>
    3dd0:	e0bffc17 	ldw	r2,-16(fp)
    3dd4:	10800517 	ldw	r2,20(r2)
    3dd8:	10ffffc4 	addi	r3,r2,-1
    3ddc:	e0bfff17 	ldw	r2,-4(fp)
    3de0:	1880020e 	bge	r3,r2,3dec <_ZN5Ghost8getColorEi5E_DIRii+0x44>
		return 0;
    3de4:	0005883a 	mov	r2,zero
    3de8:	00008906 	br	4010 <_ZN5Ghost8getColorEi5E_DIRii+0x268>
	if(y < 0 || y > this->height - 1)
    3dec:	e0800217 	ldw	r2,8(fp)
    3df0:	10000516 	blt	r2,zero,3e08 <_ZN5Ghost8getColorEi5E_DIRii+0x60>
    3df4:	e0bffc17 	ldw	r2,-16(fp)
    3df8:	10800617 	ldw	r2,24(r2)
    3dfc:	10ffffc4 	addi	r3,r2,-1
    3e00:	e0800217 	ldw	r2,8(fp)
    3e04:	1880020e 	bge	r3,r2,3e10 <_ZN5Ghost8getColorEi5E_DIRii+0x68>
		return 0;
    3e08:	0005883a 	mov	r2,zero
    3e0c:	00008006 	br	4010 <_ZN5Ghost8getColorEi5E_DIRii+0x268>

	if(bmp[frame][y][x])
    3e10:	e0fffc17 	ldw	r3,-16(fp)
    3e14:	e1000217 	ldw	r4,8(fp)
    3e18:	e0bffd17 	ldw	r2,-12(fp)
    3e1c:	21000324 	muli	r4,r4,12
    3e20:	10802424 	muli	r2,r2,144
    3e24:	2085883a 	add	r2,r4,r2
    3e28:	1887883a 	add	r3,r3,r2
    3e2c:	e0bfff17 	ldw	r2,-4(fp)
    3e30:	1885883a 	add	r2,r3,r2
    3e34:	10800f04 	addi	r2,r2,60
    3e38:	10800003 	ldbu	r2,0(r2)
    3e3c:	10803fcc 	andi	r2,r2,255
    3e40:	10000326 	beq	r2,zero,3e50 <_ZN5Ghost8getColorEi5E_DIRii+0xa8>
		return color;
    3e44:	e0bffc17 	ldw	r2,-16(fp)
    3e48:	10800e0b 	ldhu	r2,56(r2)
    3e4c:	00007006 	br	4010 <_ZN5Ghost8getColorEi5E_DIRii+0x268>

	for(int eyenum = 0; eyenum < 2; eyenum++){
    3e50:	e03ffb15 	stw	zero,-20(fp)
    3e54:	e0bffb17 	ldw	r2,-20(fp)
    3e58:	10800088 	cmpgei	r2,r2,2
    3e5c:	10006b1e 	bne	r2,zero,400c <_ZN5Ghost8getColorEi5E_DIRii+0x264>
		if(withinBounds(x, y, 1 + (eyenum * 6), 4 + (eyenum * 6), 3, 6)){
    3e60:	e0bffb17 	ldw	r2,-20(fp)
    3e64:	108001a4 	muli	r2,r2,6
    3e68:	10c00044 	addi	r3,r2,1
    3e6c:	e0bffb17 	ldw	r2,-20(fp)
    3e70:	108001a4 	muli	r2,r2,6
    3e74:	11000104 	addi	r4,r2,4
    3e78:	00800184 	movi	r2,6
    3e7c:	d8800115 	stw	r2,4(sp)
    3e80:	008000c4 	movi	r2,3
    3e84:	d8800015 	stw	r2,0(sp)
    3e88:	200f883a 	mov	r7,r4
    3e8c:	180d883a 	mov	r6,r3
    3e90:	e1400217 	ldw	r5,8(fp)
    3e94:	e13fff17 	ldw	r4,-4(fp)
    3e98:	0003d400 	call	3d40 <_ZL12withinBoundsiiiiii>
    3e9c:	10803fcc 	andi	r2,r2,255
    3ea0:	10005626 	beq	r2,zero,3ffc <_ZN5Ghost8getColorEi5E_DIRii+0x254>
			x -= 1 + (eyenum * 6);
    3ea4:	e0bffb17 	ldw	r2,-20(fp)
    3ea8:	108001a4 	muli	r2,r2,6
    3eac:	10800044 	addi	r2,r2,1
    3eb0:	e0ffff17 	ldw	r3,-4(fp)
    3eb4:	1885c83a 	sub	r2,r3,r2
    3eb8:	e0bfff15 	stw	r2,-4(fp)
			y -= 3;
    3ebc:	e0800217 	ldw	r2,8(fp)
    3ec0:	10bfff44 	addi	r2,r2,-3
    3ec4:	e0800215 	stw	r2,8(fp)
			switch(dir){
    3ec8:	e0bffe17 	ldw	r2,-8(fp)
    3ecc:	10c00168 	cmpgeui	r3,r2,5
    3ed0:	18004a1e 	bne	r3,zero,3ffc <_ZN5Ghost8getColorEi5E_DIRii+0x254>
    3ed4:	100690ba 	slli	r3,r2,2
    3ed8:	00800034 	movhi	r2,0
    3edc:	108fbb04 	addi	r2,r2,16108
    3ee0:	1885883a 	add	r2,r3,r2
    3ee4:	10800017 	ldw	r2,0(r2)
    3ee8:	1000683a 	jmp	r2
    3eec:	00003fa4 	muli	zero,zero,254
    3ef0:	00003f70 	cmpltui	zero,zero,253
    3ef4:	00003f34 	movhi	zero,252
    3ef8:	00003f00 	call	3f0 <_ZN6Entity6updateEi+0x74>
    3efc:	00003f00 	call	3f0 <_ZN6Entity6updateEi+0x74>
			case DIR_NO_DIR:
			case DIR_RIGHT:
				if(this->eye[y][x])
    3f00:	e0fffc17 	ldw	r3,-16(fp)
    3f04:	e0800217 	ldw	r2,8(fp)
    3f08:	1085883a 	add	r2,r2,r2
    3f0c:	1085883a 	add	r2,r2,r2
    3f10:	1887883a 	add	r3,r3,r2
    3f14:	e0bfff17 	ldw	r2,-4(fp)
    3f18:	1885883a 	add	r2,r3,r2
    3f1c:	10805704 	addi	r2,r2,348
    3f20:	10800003 	ldbu	r2,0(r2)
    3f24:	10803fcc 	andi	r2,r2,255
    3f28:	10002d26 	beq	r2,zero,3fe0 <_ZN5Ghost8getColorEi5E_DIRii+0x238>
					return RGB565(255, 255, 255);
    3f2c:	00bfffc4 	movi	r2,-1
    3f30:	00003706 	br	4010 <_ZN5Ghost8getColorEi5E_DIRii+0x268>
				break;
			case DIR_LEFT:
				if(this->eye[y][3 - x])
    3f34:	00c000c4 	movi	r3,3
    3f38:	e0bfff17 	ldw	r2,-4(fp)
    3f3c:	1887c83a 	sub	r3,r3,r2
    3f40:	e13ffc17 	ldw	r4,-16(fp)
    3f44:	e0800217 	ldw	r2,8(fp)
    3f48:	1085883a 	add	r2,r2,r2
    3f4c:	1085883a 	add	r2,r2,r2
    3f50:	2085883a 	add	r2,r4,r2
    3f54:	10c5883a 	add	r2,r2,r3
    3f58:	10805704 	addi	r2,r2,348
    3f5c:	10800003 	ldbu	r2,0(r2)
    3f60:	10803fcc 	andi	r2,r2,255
    3f64:	10002026 	beq	r2,zero,3fe8 <_ZN5Ghost8getColorEi5E_DIRii+0x240>
					return RGB565(255, 255, 255);
    3f68:	00bfffc4 	movi	r2,-1
    3f6c:	00002806 	br	4010 <_ZN5Ghost8getColorEi5E_DIRii+0x268>
				break;
			case DIR_DOWN:
				if(this->eye[x][y])
    3f70:	e0fffc17 	ldw	r3,-16(fp)
    3f74:	e0bfff17 	ldw	r2,-4(fp)
    3f78:	1085883a 	add	r2,r2,r2
    3f7c:	1085883a 	add	r2,r2,r2
    3f80:	1887883a 	add	r3,r3,r2
    3f84:	e0800217 	ldw	r2,8(fp)
    3f88:	1885883a 	add	r2,r3,r2
    3f8c:	10805704 	addi	r2,r2,348
    3f90:	10800003 	ldbu	r2,0(r2)
    3f94:	10803fcc 	andi	r2,r2,255
    3f98:	10001526 	beq	r2,zero,3ff0 <_ZN5Ghost8getColorEi5E_DIRii+0x248>
					return RGB565(255, 255, 255);
    3f9c:	00bfffc4 	movi	r2,-1
    3fa0:	00001b06 	br	4010 <_ZN5Ghost8getColorEi5E_DIRii+0x268>
				break;
			case DIR_UP:
				if(this->eye[x][3 - y])
    3fa4:	00c000c4 	movi	r3,3
    3fa8:	e0800217 	ldw	r2,8(fp)
    3fac:	1887c83a 	sub	r3,r3,r2
    3fb0:	e13ffc17 	ldw	r4,-16(fp)
    3fb4:	e0bfff17 	ldw	r2,-4(fp)
    3fb8:	1085883a 	add	r2,r2,r2
    3fbc:	1085883a 	add	r2,r2,r2
    3fc0:	2085883a 	add	r2,r4,r2
    3fc4:	10c5883a 	add	r2,r2,r3
    3fc8:	10805704 	addi	r2,r2,348
    3fcc:	10800003 	ldbu	r2,0(r2)
    3fd0:	10803fcc 	andi	r2,r2,255
    3fd4:	10000826 	beq	r2,zero,3ff8 <_ZN5Ghost8getColorEi5E_DIRii+0x250>
					return RGB565(255, 255, 255);
    3fd8:	00bfffc4 	movi	r2,-1
    3fdc:	00000c06 	br	4010 <_ZN5Ghost8getColorEi5E_DIRii+0x268>
			switch(dir){
			case DIR_NO_DIR:
			case DIR_RIGHT:
				if(this->eye[y][x])
					return RGB565(255, 255, 255);
				break;
    3fe0:	0001883a 	nop
    3fe4:	00000506 	br	3ffc <_ZN5Ghost8getColorEi5E_DIRii+0x254>
			case DIR_LEFT:
				if(this->eye[y][3 - x])
					return RGB565(255, 255, 255);
				break;
    3fe8:	0001883a 	nop
    3fec:	00000306 	br	3ffc <_ZN5Ghost8getColorEi5E_DIRii+0x254>
			case DIR_DOWN:
				if(this->eye[x][y])
					return RGB565(255, 255, 255);
				break;
    3ff0:	0001883a 	nop
    3ff4:	00000106 	br	3ffc <_ZN5Ghost8getColorEi5E_DIRii+0x254>
			case DIR_UP:
				if(this->eye[x][3 - y])
					return RGB565(255, 255, 255);
				break;
    3ff8:	0001883a 	nop
		return 0;

	if(bmp[frame][y][x])
		return color;

	for(int eyenum = 0; eyenum < 2; eyenum++){
    3ffc:	e0bffb17 	ldw	r2,-20(fp)
    4000:	10800044 	addi	r2,r2,1
    4004:	e0bffb15 	stw	r2,-20(fp)
    4008:	003f9206 	br	3e54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003e54>

		}
	}


	return 0;
    400c:	0005883a 	mov	r2,zero
}
    4010:	e037883a 	mov	sp,fp
    4014:	dfc00117 	ldw	ra,4(sp)
    4018:	df000017 	ldw	fp,0(sp)
    401c:	dec00204 	addi	sp,sp,8
    4020:	f800283a 	ret

00004024 <_ZN5Ghost9setJailedEb>:

void Ghost::setJailed(bool jailed){
    4024:	defffd04 	addi	sp,sp,-12
    4028:	df000215 	stw	fp,8(sp)
    402c:	df000204 	addi	fp,sp,8
    4030:	e13ffe15 	stw	r4,-8(fp)
    4034:	2805883a 	mov	r2,r5
    4038:	e0bfff05 	stb	r2,-4(fp)
	this->jailed = jailed;
    403c:	e0bffe17 	ldw	r2,-8(fp)
    4040:	e0ffff03 	ldbu	r3,-4(fp)
    4044:	10c00ec5 	stb	r3,59(r2)
};
    4048:	0001883a 	nop
    404c:	e037883a 	mov	sp,fp
    4050:	df000017 	ldw	fp,0(sp)
    4054:	dec00104 	addi	sp,sp,4
    4058:	f800283a 	ret

0000405c <_ZN5Ghost8isJailedEv>:

bool Ghost::isJailed(){
    405c:	defffe04 	addi	sp,sp,-8
    4060:	df000115 	stw	fp,4(sp)
    4064:	df000104 	addi	fp,sp,4
    4068:	e13fff15 	stw	r4,-4(fp)
	return this->jailed;
    406c:	e0bfff17 	ldw	r2,-4(fp)
    4070:	10800ec3 	ldbu	r2,59(r2)
};
    4074:	e037883a 	mov	sp,fp
    4078:	df000017 	ldw	fp,0(sp)
    407c:	dec00104 	addi	sp,sp,4
    4080:	f800283a 	ret

00004084 <_ZN5Ghost5_drawEP14VideoInterface>:

void Ghost::_draw(VideoInterface* vi){
    4084:	defff604 	addi	sp,sp,-40
    4088:	dfc00915 	stw	ra,36(sp)
    408c:	df000815 	stw	fp,32(sp)
    4090:	df000804 	addi	fp,sp,32
    4094:	e13ffe15 	stw	r4,-8(fp)
    4098:	e17fff15 	stw	r5,-4(fp)
	uint16_t color1;
	uint16_t color2;
	for(int y = 0; y < this->width; y++){
    409c:	e03ff915 	stw	zero,-28(fp)
    40a0:	e0bffe17 	ldw	r2,-8(fp)
    40a4:	10800517 	ldw	r2,20(r2)
    40a8:	e0fff917 	ldw	r3,-28(fp)
    40ac:	1880440e 	bge	r3,r2,41c0 <_ZN5Ghost5_drawEP14VideoInterface+0x13c>
		for(int x = 0; x < this->width; x++){
    40b0:	e03ffa15 	stw	zero,-24(fp)
    40b4:	e0bffe17 	ldw	r2,-8(fp)
    40b8:	10800517 	ldw	r2,20(r2)
    40bc:	e0fffa17 	ldw	r3,-24(fp)
    40c0:	18803b0e 	bge	r3,r2,41b0 <_ZN5Ghost5_drawEP14VideoInterface+0x12c>
			color1 = getColor(this->last_frame, this->prev_dir, x, y);
    40c4:	e0bffe17 	ldw	r2,-8(fp)
    40c8:	10c00d17 	ldw	r3,52(r2)
    40cc:	e0bffe17 	ldw	r2,-8(fp)
    40d0:	11000a17 	ldw	r4,40(r2)
    40d4:	e0bff917 	ldw	r2,-28(fp)
    40d8:	d8800015 	stw	r2,0(sp)
    40dc:	e1fffa17 	ldw	r7,-24(fp)
    40e0:	200d883a 	mov	r6,r4
    40e4:	180b883a 	mov	r5,r3
    40e8:	e13ffe17 	ldw	r4,-8(fp)
    40ec:	0003da80 	call	3da8 <_ZN5Ghost8getColorEi5E_DIRii>
    40f0:	e0bffd0d 	sth	r2,-12(fp)
			color2 = getColor(this->curr_frame, this->curr_dir, (this->prev_x - this->x) + x, (this->prev_y - this->y) + y);
    40f4:	e0bffe17 	ldw	r2,-8(fp)
    40f8:	11000c17 	ldw	r4,48(r2)
    40fc:	e0bffe17 	ldw	r2,-8(fp)
    4100:	11400917 	ldw	r5,36(r2)
    4104:	e0bffe17 	ldw	r2,-8(fp)
    4108:	10c00317 	ldw	r3,12(r2)
    410c:	e0bffe17 	ldw	r2,-8(fp)
    4110:	10800117 	ldw	r2,4(r2)
    4114:	1887c83a 	sub	r3,r3,r2
    4118:	e0bffa17 	ldw	r2,-24(fp)
    411c:	188d883a 	add	r6,r3,r2
    4120:	e0bffe17 	ldw	r2,-8(fp)
    4124:	10c00417 	ldw	r3,16(r2)
    4128:	e0bffe17 	ldw	r2,-8(fp)
    412c:	10800217 	ldw	r2,8(r2)
    4130:	1887c83a 	sub	r3,r3,r2
    4134:	e0bff917 	ldw	r2,-28(fp)
    4138:	1885883a 	add	r2,r3,r2
    413c:	d8800015 	stw	r2,0(sp)
    4140:	300f883a 	mov	r7,r6
    4144:	280d883a 	mov	r6,r5
    4148:	200b883a 	mov	r5,r4
    414c:	e13ffe17 	ldw	r4,-8(fp)
    4150:	0003da80 	call	3da8 <_ZN5Ghost8getColorEi5E_DIRii>
    4154:	e0bffd8d 	sth	r2,-10(fp)
			if(color1 != color2)
    4158:	e0fffd0b 	ldhu	r3,-12(fp)
    415c:	e0bffd8b 	ldhu	r2,-10(fp)
    4160:	18800f26 	beq	r3,r2,41a0 <_ZN5Ghost5_drawEP14VideoInterface+0x11c>
				vi->drawPixel(this->prev_x + x - 2, this->prev_y + y - 2, 0);
    4164:	e0bffe17 	ldw	r2,-8(fp)
    4168:	10c00317 	ldw	r3,12(r2)
    416c:	e0bffa17 	ldw	r2,-24(fp)
    4170:	1885883a 	add	r2,r3,r2
    4174:	113fff84 	addi	r4,r2,-2
    4178:	e0bffe17 	ldw	r2,-8(fp)
    417c:	10c00417 	ldw	r3,16(r2)
    4180:	e0bff917 	ldw	r2,-28(fp)
    4184:	1885883a 	add	r2,r3,r2
    4188:	10bfff84 	addi	r2,r2,-2
    418c:	000f883a 	mov	r7,zero
    4190:	100d883a 	mov	r6,r2
    4194:	200b883a 	mov	r5,r4
    4198:	e13fff17 	ldw	r4,-4(fp)
    419c:	0004da80 	call	4da8 <_ZN14VideoInterface9drawPixelEiit>

void Ghost::_draw(VideoInterface* vi){
	uint16_t color1;
	uint16_t color2;
	for(int y = 0; y < this->width; y++){
		for(int x = 0; x < this->width; x++){
    41a0:	e0bffa17 	ldw	r2,-24(fp)
    41a4:	10800044 	addi	r2,r2,1
    41a8:	e0bffa15 	stw	r2,-24(fp)
    41ac:	003fc106 	br	40b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040b4>
};

void Ghost::_draw(VideoInterface* vi){
	uint16_t color1;
	uint16_t color2;
	for(int y = 0; y < this->width; y++){
    41b0:	e0bff917 	ldw	r2,-28(fp)
    41b4:	10800044 	addi	r2,r2,1
    41b8:	e0bff915 	stw	r2,-28(fp)
    41bc:	003fb806 	br	40a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040a0>
			if(color1 != color2)
				vi->drawPixel(this->prev_x + x - 2, this->prev_y + y - 2, 0);
		}
	}

	for(int y = 0; y < this->width; y++){
    41c0:	e03ffb15 	stw	zero,-20(fp)
    41c4:	e0bffe17 	ldw	r2,-8(fp)
    41c8:	10800517 	ldw	r2,20(r2)
    41cc:	e0fffb17 	ldw	r3,-20(fp)
    41d0:	18802b0e 	bge	r3,r2,4280 <_ZN5Ghost5_drawEP14VideoInterface+0x1fc>
		for(int x = 0; x < this->width; x++){
    41d4:	e03ffc15 	stw	zero,-16(fp)
    41d8:	e0bffe17 	ldw	r2,-8(fp)
    41dc:	10800517 	ldw	r2,20(r2)
    41e0:	e0fffc17 	ldw	r3,-16(fp)
    41e4:	1880220e 	bge	r3,r2,4270 <_ZN5Ghost5_drawEP14VideoInterface+0x1ec>
			color1 = getColor(this->curr_frame, this->curr_dir, x, y);
    41e8:	e0bffe17 	ldw	r2,-8(fp)
    41ec:	10c00c17 	ldw	r3,48(r2)
    41f0:	e0bffe17 	ldw	r2,-8(fp)
    41f4:	11000917 	ldw	r4,36(r2)
    41f8:	e0bffb17 	ldw	r2,-20(fp)
    41fc:	d8800015 	stw	r2,0(sp)
    4200:	e1fffc17 	ldw	r7,-16(fp)
    4204:	200d883a 	mov	r6,r4
    4208:	180b883a 	mov	r5,r3
    420c:	e13ffe17 	ldw	r4,-8(fp)
    4210:	0003da80 	call	3da8 <_ZN5Ghost8getColorEi5E_DIRii>
    4214:	e0bffd0d 	sth	r2,-12(fp)
			if(color1 != NULL)
    4218:	e0bffd0b 	ldhu	r2,-12(fp)
    421c:	10001026 	beq	r2,zero,4260 <_ZN5Ghost5_drawEP14VideoInterface+0x1dc>
				vi->drawPixel(this->x + x - 2, this->y + y - 2, color1);
    4220:	e0bffe17 	ldw	r2,-8(fp)
    4224:	10c00117 	ldw	r3,4(r2)
    4228:	e0bffc17 	ldw	r2,-16(fp)
    422c:	1885883a 	add	r2,r3,r2
    4230:	113fff84 	addi	r4,r2,-2
    4234:	e0bffe17 	ldw	r2,-8(fp)
    4238:	10c00217 	ldw	r3,8(r2)
    423c:	e0bffb17 	ldw	r2,-20(fp)
    4240:	1885883a 	add	r2,r3,r2
    4244:	10bfff84 	addi	r2,r2,-2
    4248:	e0fffd0b 	ldhu	r3,-12(fp)
    424c:	180f883a 	mov	r7,r3
    4250:	100d883a 	mov	r6,r2
    4254:	200b883a 	mov	r5,r4
    4258:	e13fff17 	ldw	r4,-4(fp)
    425c:	0004da80 	call	4da8 <_ZN14VideoInterface9drawPixelEiit>
				vi->drawPixel(this->prev_x + x - 2, this->prev_y + y - 2, 0);
		}
	}

	for(int y = 0; y < this->width; y++){
		for(int x = 0; x < this->width; x++){
    4260:	e0bffc17 	ldw	r2,-16(fp)
    4264:	10800044 	addi	r2,r2,1
    4268:	e0bffc15 	stw	r2,-16(fp)
    426c:	003fda06 	br	41d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041d8>
			if(color1 != color2)
				vi->drawPixel(this->prev_x + x - 2, this->prev_y + y - 2, 0);
		}
	}

	for(int y = 0; y < this->width; y++){
    4270:	e0bffb17 	ldw	r2,-20(fp)
    4274:	10800044 	addi	r2,r2,1
    4278:	e0bffb15 	stw	r2,-20(fp)
    427c:	003fd106 	br	41c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041c4>
			color1 = getColor(this->curr_frame, this->curr_dir, x, y);
			if(color1 != NULL)
				vi->drawPixel(this->x + x - 2, this->y + y - 2, color1);
		}
	}
};
    4280:	0001883a 	nop
    4284:	e037883a 	mov	sp,fp
    4288:	dfc00117 	ldw	ra,4(sp)
    428c:	df000017 	ldw	fp,0(sp)
    4290:	dec00204 	addi	sp,sp,8
    4294:	f800283a 	ret

00004298 <_ZN5Ghost7_updateEi>:

void Ghost::_update(int elapsedTime){
    4298:	defffd04 	addi	sp,sp,-12
    429c:	df000215 	stw	fp,8(sp)
    42a0:	df000204 	addi	fp,sp,8
    42a4:	e13ffe15 	stw	r4,-8(fp)
    42a8:	e17fff15 	stw	r5,-4(fp)
	if(curr_dir == DIR_NO_DIR){
    42ac:	e0bffe17 	ldw	r2,-8(fp)
    42b0:	10800917 	ldw	r2,36(r2)
    42b4:	10800118 	cmpnei	r2,r2,4
    42b8:	1000031e 	bne	r2,zero,42c8 <_ZN5Ghost7_updateEi+0x30>
		curr_dir = DIR_RIGHT;
    42bc:	e0bffe17 	ldw	r2,-8(fp)
    42c0:	00c000c4 	movi	r3,3
    42c4:	10c00915 	stw	r3,36(r2)
	}

	this->last_frame = this->curr_frame;
    42c8:	e0bffe17 	ldw	r2,-8(fp)
    42cc:	10c00c17 	ldw	r3,48(r2)
    42d0:	e0bffe17 	ldw	r2,-8(fp)
    42d4:	10c00d15 	stw	r3,52(r2)

	if(this->curr_dir != DIR_NO_DIR){
    42d8:	e0bffe17 	ldw	r2,-8(fp)
    42dc:	10800917 	ldw	r2,36(r2)
    42e0:	10800120 	cmpeqi	r2,r2,4
    42e4:	1000061e 	bne	r2,zero,4300 <_ZN5Ghost7_updateEi+0x68>
		curr_frame = curr_frame ? 0 : 1;
    42e8:	e0bffe17 	ldw	r2,-8(fp)
    42ec:	10800c17 	ldw	r2,48(r2)
    42f0:	1005003a 	cmpeq	r2,r2,zero
    42f4:	10c03fcc 	andi	r3,r2,255
    42f8:	e0bffe17 	ldw	r2,-8(fp)
    42fc:	10c00c15 	stw	r3,48(r2)
	}
	this->redraw = 1;
    4300:	e0bffe17 	ldw	r2,-8(fp)
    4304:	00c00044 	movi	r3,1
    4308:	10c00805 	stb	r3,32(r2)
};
    430c:	0001883a 	nop
    4310:	e037883a 	mov	sp,fp
    4314:	df000017 	ldw	fp,0(sp)
    4318:	dec00104 	addi	sp,sp,4
    431c:	f800283a 	ret

00004320 <_ZN8KeyboardC1Ev>:
 *      Author: natha
 */

#include "Keyboard.h"

Keyboard::Keyboard(){
    4320:	defffd04 	addi	sp,sp,-12
    4324:	dfc00215 	stw	ra,8(sp)
    4328:	df000115 	stw	fp,4(sp)
    432c:	df000104 	addi	fp,sp,4
    4330:	e13fff15 	stw	r4,-4(fp)
    4334:	e0bfff17 	ldw	r2,-4(fp)
    4338:	1009883a 	mov	r4,r2
    433c:	00002840 	call	284 <_ZN19ControllerInterfaceC1Ev>
    4340:	008000b4 	movhi	r2,2
    4344:	109d9504 	addi	r2,r2,30292
    4348:	e0ffff17 	ldw	r3,-4(fp)
    434c:	18800015 	stw	r2,0(r3)
	this->PS2_dev = alt_up_ps2_open_dev ("/dev/PS2_Port");
    4350:	010000b4 	movhi	r4,2
    4354:	211d7e04 	addi	r4,r4,30200
    4358:	00252440 	call	25244 <alt_up_ps2_open_dev>
    435c:	1007883a 	mov	r3,r2
    4360:	e0bfff17 	ldw	r2,-4(fp)
    4364:	10c00215 	stw	r3,8(r2)
	if (this->PS2_dev == NULL)
    4368:	e0bfff17 	ldw	r2,-4(fp)
    436c:	10800217 	ldw	r2,8(r2)
    4370:	1000041e 	bne	r2,zero,4384 <_ZN8KeyboardC1Ev+0x64>
		printf("Error: could not open PS2 device\n");
    4374:	010000b4 	movhi	r4,2
    4378:	211d8204 	addi	r4,r4,30216
    437c:	000d71c0 	call	d71c <puts>
    4380:	00000306 	br	4390 <_ZN8KeyboardC1Ev+0x70>
	else
		printf("Opened PS2 device\n");
    4384:	010000b4 	movhi	r4,2
    4388:	211d8b04 	addi	r4,r4,30252
    438c:	000d71c0 	call	d71c <puts>

	alt_up_ps2_write_data_byte (this->PS2_dev, 0xFF);
    4390:	e0bfff17 	ldw	r2,-4(fp)
    4394:	10800217 	ldw	r2,8(r2)
    4398:	01403fc4 	movi	r5,255
    439c:	1009883a 	mov	r4,r2
    43a0:	0024e7c0 	call	24e7c <alt_up_ps2_write_data_byte>
	alt_up_ps2_enable_read_interrupt(this->PS2_dev);
    43a4:	e0bfff17 	ldw	r2,-4(fp)
    43a8:	10800217 	ldw	r2,8(r2)
    43ac:	1009883a 	mov	r4,r2
    43b0:	0024dc00 	call	24dc0 <alt_up_ps2_enable_read_interrupt>

	byte1 = 0, byte2 = 0, byte3 = 0;
    43b4:	e0bfff17 	ldw	r2,-4(fp)
    43b8:	10000305 	stb	zero,12(r2)
    43bc:	e0bfff17 	ldw	r2,-4(fp)
    43c0:	10000345 	stb	zero,13(r2)
    43c4:	e0bfff17 	ldw	r2,-4(fp)
    43c8:	10000385 	stb	zero,14(r2)
};
    43cc:	0001883a 	nop
    43d0:	e037883a 	mov	sp,fp
    43d4:	dfc00117 	ldw	ra,4(sp)
    43d8:	df000017 	ldw	fp,0(sp)
    43dc:	dec00204 	addi	sp,sp,8
    43e0:	f800283a 	ret

000043e4 <_ZN8Keyboard6updateEv>:

void Keyboard::update(){
    43e4:	defffd04 	addi	sp,sp,-12
    43e8:	dfc00215 	stw	ra,8(sp)
    43ec:	df000115 	stw	fp,4(sp)
    43f0:	df000104 	addi	fp,sp,4
    43f4:	e13fff15 	stw	r4,-4(fp)
	while(alt_up_ps2_read_data_byte (PS2_dev, &PS2_data) == 0)
    43f8:	e0bfff17 	ldw	r2,-4(fp)
    43fc:	10c00217 	ldw	r3,8(r2)
    4400:	e0bfff17 	ldw	r2,-4(fp)
    4404:	108003c4 	addi	r2,r2,15
    4408:	100b883a 	mov	r5,r2
    440c:	1809883a 	mov	r4,r3
    4410:	00250580 	call	25058 <alt_up_ps2_read_data_byte>
    4414:	1005003a 	cmpeq	r2,r2,zero
    4418:	10803fcc 	andi	r2,r2,255
    441c:	10006a26 	beq	r2,zero,45c8 <_ZN8Keyboard6updateEv+0x1e4>
	{
		/* shift the next data byte into the display */
		byte1 = byte2;
    4420:	e0bfff17 	ldw	r2,-4(fp)
    4424:	10c00343 	ldbu	r3,13(r2)
    4428:	e0bfff17 	ldw	r2,-4(fp)
    442c:	10c00305 	stb	r3,12(r2)
		byte2 = byte3;
    4430:	e0bfff17 	ldw	r2,-4(fp)
    4434:	10c00383 	ldbu	r3,14(r2)
    4438:	e0bfff17 	ldw	r2,-4(fp)
    443c:	10c00345 	stb	r3,13(r2)
		byte3 = PS2_data;
    4440:	e0bfff17 	ldw	r2,-4(fp)
    4444:	10c003c3 	ldbu	r3,15(r2)
    4448:	e0bfff17 	ldw	r2,-4(fp)
    444c:	10c00385 	stb	r3,14(r2)

		printf("%d-%d-%d \n\r", byte1, byte2, byte3);
    4450:	e0bfff17 	ldw	r2,-4(fp)
    4454:	10800303 	ldbu	r2,12(r2)
    4458:	10c03fcc 	andi	r3,r2,255
    445c:	e0bfff17 	ldw	r2,-4(fp)
    4460:	10800343 	ldbu	r2,13(r2)
    4464:	11003fcc 	andi	r4,r2,255
    4468:	e0bfff17 	ldw	r2,-4(fp)
    446c:	10800383 	ldbu	r2,14(r2)
    4470:	10803fcc 	andi	r2,r2,255
    4474:	100f883a 	mov	r7,r2
    4478:	200d883a 	mov	r6,r4
    447c:	180b883a 	mov	r5,r3
    4480:	010000b4 	movhi	r4,2
    4484:	211d9004 	addi	r4,r4,30272
    4488:	000d6200 	call	d620 <printf>
		if(byte2 == 224 && byte3 == 107)
    448c:	e0bfff17 	ldw	r2,-4(fp)
    4490:	10800343 	ldbu	r2,13(r2)
    4494:	10803fcc 	andi	r2,r2,255
    4498:	10803818 	cmpnei	r2,r2,224
    449c:	1000081e 	bne	r2,zero,44c0 <_ZN8Keyboard6updateEv+0xdc>
    44a0:	e0bfff17 	ldw	r2,-4(fp)
    44a4:	10800383 	ldbu	r2,14(r2)
    44a8:	10803fcc 	andi	r2,r2,255
    44ac:	10801ad8 	cmpnei	r2,r2,107
    44b0:	1000031e 	bne	r2,zero,44c0 <_ZN8Keyboard6updateEv+0xdc>
			this->activeButton = BUTTON_LEFT;
    44b4:	e0bfff17 	ldw	r2,-4(fp)
    44b8:	00c000c4 	movi	r3,3
    44bc:	10c00115 	stw	r3,4(r2)
		if(byte2 == 224 && byte3 == 117)
    44c0:	e0bfff17 	ldw	r2,-4(fp)
    44c4:	10800343 	ldbu	r2,13(r2)
    44c8:	10803fcc 	andi	r2,r2,255
    44cc:	10803818 	cmpnei	r2,r2,224
    44d0:	1000081e 	bne	r2,zero,44f4 <_ZN8Keyboard6updateEv+0x110>
    44d4:	e0bfff17 	ldw	r2,-4(fp)
    44d8:	10800383 	ldbu	r2,14(r2)
    44dc:	10803fcc 	andi	r2,r2,255
    44e0:	10801d58 	cmpnei	r2,r2,117
    44e4:	1000031e 	bne	r2,zero,44f4 <_ZN8Keyboard6updateEv+0x110>
			this->activeButton = BUTTON_UP;
    44e8:	e0bfff17 	ldw	r2,-4(fp)
    44ec:	00c00044 	movi	r3,1
    44f0:	10c00115 	stw	r3,4(r2)
		if(byte2 == 224 && byte3 == 116)
    44f4:	e0bfff17 	ldw	r2,-4(fp)
    44f8:	10800343 	ldbu	r2,13(r2)
    44fc:	10803fcc 	andi	r2,r2,255
    4500:	10803818 	cmpnei	r2,r2,224
    4504:	1000081e 	bne	r2,zero,4528 <_ZN8Keyboard6updateEv+0x144>
    4508:	e0bfff17 	ldw	r2,-4(fp)
    450c:	10800383 	ldbu	r2,14(r2)
    4510:	10803fcc 	andi	r2,r2,255
    4514:	10801d18 	cmpnei	r2,r2,116
    4518:	1000031e 	bne	r2,zero,4528 <_ZN8Keyboard6updateEv+0x144>
			this->activeButton = BUTTON_RIGHT;
    451c:	e0bfff17 	ldw	r2,-4(fp)
    4520:	00c00104 	movi	r3,4
    4524:	10c00115 	stw	r3,4(r2)
		if(byte2 == 224 && byte3 == 114)
    4528:	e0bfff17 	ldw	r2,-4(fp)
    452c:	10800343 	ldbu	r2,13(r2)
    4530:	10803fcc 	andi	r2,r2,255
    4534:	10803818 	cmpnei	r2,r2,224
    4538:	1000081e 	bne	r2,zero,455c <_ZN8Keyboard6updateEv+0x178>
    453c:	e0bfff17 	ldw	r2,-4(fp)
    4540:	10800383 	ldbu	r2,14(r2)
    4544:	10803fcc 	andi	r2,r2,255
    4548:	10801c98 	cmpnei	r2,r2,114
    454c:	1000031e 	bne	r2,zero,455c <_ZN8Keyboard6updateEv+0x178>
			this->activeButton = BUTTON_DOWN;
    4550:	e0bfff17 	ldw	r2,-4(fp)
    4554:	00c00084 	movi	r3,2
    4558:	10c00115 	stw	r3,4(r2)
		if(byte2 == 45  && byte3 == 45 )
    455c:	e0bfff17 	ldw	r2,-4(fp)
    4560:	10800343 	ldbu	r2,13(r2)
    4564:	10803fcc 	andi	r2,r2,255
    4568:	10800b58 	cmpnei	r2,r2,45
    456c:	1000081e 	bne	r2,zero,4590 <_ZN8Keyboard6updateEv+0x1ac>
    4570:	e0bfff17 	ldw	r2,-4(fp)
    4574:	10800383 	ldbu	r2,14(r2)
    4578:	10803fcc 	andi	r2,r2,255
    457c:	10800b58 	cmpnei	r2,r2,45
    4580:	1000031e 	bne	r2,zero,4590 <_ZN8Keyboard6updateEv+0x1ac>
			this->activeButton = BUTTON_RESET;
    4584:	e0bfff17 	ldw	r2,-4(fp)
    4588:	00c001c4 	movi	r3,7
    458c:	10c00115 	stw	r3,4(r2)
		if(byte2 == 90  && byte3 == 90 )
    4590:	e0bfff17 	ldw	r2,-4(fp)
    4594:	10800343 	ldbu	r2,13(r2)
    4598:	10803fcc 	andi	r2,r2,255
    459c:	10801698 	cmpnei	r2,r2,90
    45a0:	103f951e 	bne	r2,zero,43f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70043f8>
    45a4:	e0bfff17 	ldw	r2,-4(fp)
    45a8:	10800383 	ldbu	r2,14(r2)
    45ac:	10803fcc 	andi	r2,r2,255
    45b0:	10801698 	cmpnei	r2,r2,90
    45b4:	103f901e 	bne	r2,zero,43f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70043f8>
			this->activeButton = BUTTON_ENTER;
    45b8:	e0bfff17 	ldw	r2,-4(fp)
    45bc:	00c00204 	movi	r3,8
    45c0:	10c00115 	stw	r3,4(r2)

	byte1 = 0, byte2 = 0, byte3 = 0;
};

void Keyboard::update(){
	while(alt_up_ps2_read_data_byte (PS2_dev, &PS2_data) == 0)
    45c4:	003f8c06 	br	43f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70043f8>
		if(byte2 == 90  && byte3 == 90 )
			this->activeButton = BUTTON_ENTER;
//		if(byte2 == 41 && byte3 == 41) // SPACE
//			pm->setDir(DIR_NO_DIR);
	}
};
    45c8:	0001883a 	nop
    45cc:	e037883a 	mov	sp,fp
    45d0:	dfc00117 	ldw	ra,4(sp)
    45d4:	df000017 	ldw	fp,0(sp)
    45d8:	dec00204 	addi	sp,sp,8
    45dc:	f800283a 	ret

000045e0 <_ZN6PacManC1Ev>:
 *      Author: natha
 */

#include "PacMan.h"

PacMan::PacMan() : Entity(8, 8) {
    45e0:	defffd04 	addi	sp,sp,-12
    45e4:	dfc00215 	stw	ra,8(sp)
    45e8:	df000115 	stw	fp,4(sp)
    45ec:	df000104 	addi	fp,sp,4
    45f0:	e13fff15 	stw	r4,-4(fp)
    45f4:	e0bfff17 	ldw	r2,-4(fp)
    45f8:	01800204 	movi	r6,8
    45fc:	01400204 	movi	r5,8
    4600:	1009883a 	mov	r4,r2
    4604:	00002f80 	call	2f8 <_ZN6EntityC1Eii>
    4608:	008000b4 	movhi	r2,2
    460c:	109e0a04 	addi	r2,r2,30760
    4610:	e0ffff17 	ldw	r3,-4(fp)
    4614:	18800015 	stw	r2,0(r3)
    4618:	e0bfff17 	ldw	r2,-4(fp)
    461c:	10000c15 	stw	zero,48(r2)
    4620:	e0bfff17 	ldw	r2,-4(fp)
    4624:	10000d15 	stw	zero,52(r2)
    4628:	e0bfff17 	ldw	r2,-4(fp)
    462c:	00c00044 	movi	r3,1
    4630:	10c00e15 	stw	r3,56(r2)
    4634:	e0bfff17 	ldw	r2,-4(fp)
    4638:	00ff4804 	movi	r3,-736
    463c:	10c00f0d 	sth	r3,60(r2)
    4640:	e0ffff17 	ldw	r3,-4(fp)
    4644:	008000b4 	movhi	r2,2
    4648:	109d9b84 	addi	r2,r2,30318
    464c:	18c00f84 	addi	r3,r3,62
    4650:	1009883a 	mov	r4,r2
    4654:	00806c04 	movi	r2,432
    4658:	100d883a 	mov	r6,r2
    465c:	200b883a 	mov	r5,r4
    4660:	1809883a 	mov	r4,r3
    4664:	000d3800 	call	d380 <memcpy>
	this->width = 12;
    4668:	e0bfff17 	ldw	r2,-4(fp)
    466c:	00c00304 	movi	r3,12
    4670:	10c00515 	stw	r3,20(r2)
	this->height = 12;
    4674:	e0bfff17 	ldw	r2,-4(fp)
    4678:	00c00304 	movi	r3,12
    467c:	10c00615 	stw	r3,24(r2)
	this->curr_dir = DIR_NO_DIR;
    4680:	e0bfff17 	ldw	r2,-4(fp)
    4684:	00c00104 	movi	r3,4
    4688:	10c00915 	stw	r3,36(r2)
	this->velocity = 50;
    468c:	e0bfff17 	ldw	r2,-4(fp)
    4690:	00c00c84 	movi	r3,50
    4694:	10c00715 	stw	r3,28(r2)
};
    4698:	0001883a 	nop
    469c:	e037883a 	mov	sp,fp
    46a0:	dfc00117 	ldw	ra,4(sp)
    46a4:	df000017 	ldw	fp,0(sp)
    46a8:	dec00204 	addi	sp,sp,8
    46ac:	f800283a 	ret

000046b0 <_ZN6PacMan8getColorEi5E_DIRii>:


uint16_t PacMan::getColor(int frame, e_dir_t dir, int x, int y){
    46b0:	defffa04 	addi	sp,sp,-24
    46b4:	df000515 	stw	fp,20(sp)
    46b8:	df000504 	addi	fp,sp,20
    46bc:	e13ffc15 	stw	r4,-16(fp)
    46c0:	e17ffd15 	stw	r5,-12(fp)
    46c4:	e1bffe15 	stw	r6,-8(fp)
    46c8:	e1ffff15 	stw	r7,-4(fp)
	if(x < 0 || x > this->width - 1)
    46cc:	e0bfff17 	ldw	r2,-4(fp)
    46d0:	10000516 	blt	r2,zero,46e8 <_ZN6PacMan8getColorEi5E_DIRii+0x38>
    46d4:	e0bffc17 	ldw	r2,-16(fp)
    46d8:	10800517 	ldw	r2,20(r2)
    46dc:	10ffffc4 	addi	r3,r2,-1
    46e0:	e0bfff17 	ldw	r2,-4(fp)
    46e4:	1880020e 	bge	r3,r2,46f0 <_ZN6PacMan8getColorEi5E_DIRii+0x40>
		return NULL;
    46e8:	0005883a 	mov	r2,zero
    46ec:	00005e06 	br	4868 <_ZN6PacMan8getColorEi5E_DIRii+0x1b8>
	if(y < 0 || y > this->height - 1)
    46f0:	e0800117 	ldw	r2,4(fp)
    46f4:	10000516 	blt	r2,zero,470c <_ZN6PacMan8getColorEi5E_DIRii+0x5c>
    46f8:	e0bffc17 	ldw	r2,-16(fp)
    46fc:	10800617 	ldw	r2,24(r2)
    4700:	10ffffc4 	addi	r3,r2,-1
    4704:	e0800117 	ldw	r2,4(fp)
    4708:	1880020e 	bge	r3,r2,4714 <_ZN6PacMan8getColorEi5E_DIRii+0x64>
		return NULL;
    470c:	0005883a 	mov	r2,zero
    4710:	00005506 	br	4868 <_ZN6PacMan8getColorEi5E_DIRii+0x1b8>

	uint8_t color_num;
	switch(dir){
    4714:	e0bffe17 	ldw	r2,-8(fp)
    4718:	10c00168 	cmpgeui	r3,r2,5
    471c:	1800471e 	bne	r3,zero,483c <_ZN6PacMan8getColorEi5E_DIRii+0x18c>
    4720:	100690ba 	slli	r3,r2,2
    4724:	00800034 	movhi	r2,0
    4728:	1091ce04 	addi	r2,r2,18232
    472c:	1885883a 	add	r2,r3,r2
    4730:	10800017 	ldw	r2,0(r2)
    4734:	1000683a 	jmp	r2
    4738:	000047f8 	rdprs	zero,zero,287
    473c:	000047c4 	movi	zero,287
    4740:	00004780 	call	478 <_ZN6Entity10setNextDirE5E_DIR+0x20>
    4744:	0000474c 	andi	zero,zero,285
    4748:	0000474c 	andi	zero,zero,285
	case DIR_NO_DIR:
	case DIR_RIGHT:
		color_num = this->bmp[frame][y][x]; break;
    474c:	e0fffc17 	ldw	r3,-16(fp)
    4750:	e1000117 	ldw	r4,4(fp)
    4754:	e0bffd17 	ldw	r2,-12(fp)
    4758:	21000324 	muli	r4,r4,12
    475c:	10802424 	muli	r2,r2,144
    4760:	2085883a 	add	r2,r4,r2
    4764:	1887883a 	add	r3,r3,r2
    4768:	e0bfff17 	ldw	r2,-4(fp)
    476c:	1885883a 	add	r2,r3,r2
    4770:	10800f84 	addi	r2,r2,62
    4774:	10800003 	ldbu	r2,0(r2)
    4778:	e0bffb05 	stb	r2,-20(fp)
    477c:	00002f06 	br	483c <_ZN6PacMan8getColorEi5E_DIRii+0x18c>
	case DIR_LEFT:
		color_num = this->bmp[frame][y][this->width - 1 - x]; break;
    4780:	e0bffc17 	ldw	r2,-16(fp)
    4784:	10800517 	ldw	r2,20(r2)
    4788:	10ffffc4 	addi	r3,r2,-1
    478c:	e0bfff17 	ldw	r2,-4(fp)
    4790:	1885c83a 	sub	r2,r3,r2
    4794:	e13ffc17 	ldw	r4,-16(fp)
    4798:	e1400117 	ldw	r5,4(fp)
    479c:	e0fffd17 	ldw	r3,-12(fp)
    47a0:	29400324 	muli	r5,r5,12
    47a4:	18c02424 	muli	r3,r3,144
    47a8:	28c7883a 	add	r3,r5,r3
    47ac:	20c7883a 	add	r3,r4,r3
    47b0:	1885883a 	add	r2,r3,r2
    47b4:	10800f84 	addi	r2,r2,62
    47b8:	10800003 	ldbu	r2,0(r2)
    47bc:	e0bffb05 	stb	r2,-20(fp)
    47c0:	00001e06 	br	483c <_ZN6PacMan8getColorEi5E_DIRii+0x18c>
	case DIR_DOWN:
		color_num = this->bmp[frame][x][y]; break;
    47c4:	e0fffc17 	ldw	r3,-16(fp)
    47c8:	e13fff17 	ldw	r4,-4(fp)
    47cc:	e0bffd17 	ldw	r2,-12(fp)
    47d0:	21000324 	muli	r4,r4,12
    47d4:	10802424 	muli	r2,r2,144
    47d8:	2085883a 	add	r2,r4,r2
    47dc:	1887883a 	add	r3,r3,r2
    47e0:	e0800117 	ldw	r2,4(fp)
    47e4:	1885883a 	add	r2,r3,r2
    47e8:	10800f84 	addi	r2,r2,62
    47ec:	10800003 	ldbu	r2,0(r2)
    47f0:	e0bffb05 	stb	r2,-20(fp)
    47f4:	00001106 	br	483c <_ZN6PacMan8getColorEi5E_DIRii+0x18c>
	case DIR_UP:
		color_num = this->bmp[frame][x][this->height - 1 - y]; break;
    47f8:	e0bffc17 	ldw	r2,-16(fp)
    47fc:	10800617 	ldw	r2,24(r2)
    4800:	10ffffc4 	addi	r3,r2,-1
    4804:	e0800117 	ldw	r2,4(fp)
    4808:	1885c83a 	sub	r2,r3,r2
    480c:	e13ffc17 	ldw	r4,-16(fp)
    4810:	e17fff17 	ldw	r5,-4(fp)
    4814:	e0fffd17 	ldw	r3,-12(fp)
    4818:	29400324 	muli	r5,r5,12
    481c:	18c02424 	muli	r3,r3,144
    4820:	28c7883a 	add	r3,r5,r3
    4824:	20c7883a 	add	r3,r4,r3
    4828:	1885883a 	add	r2,r3,r2
    482c:	10800f84 	addi	r2,r2,62
    4830:	10800003 	ldbu	r2,0(r2)
    4834:	e0bffb05 	stb	r2,-20(fp)
    4838:	0001883a 	nop
	}
	if(color_num)
    483c:	e0bffb03 	ldbu	r2,-20(fp)
    4840:	10000826 	beq	r2,zero,4864 <_ZN6PacMan8getColorEi5E_DIRii+0x1b4>
		return this->bmp_colors[color_num - 1];
    4844:	e0bffb03 	ldbu	r2,-20(fp)
    4848:	10bfffc4 	addi	r2,r2,-1
    484c:	e0fffc17 	ldw	r3,-16(fp)
    4850:	10800784 	addi	r2,r2,30
    4854:	1085883a 	add	r2,r2,r2
    4858:	1885883a 	add	r2,r3,r2
    485c:	1080000b 	ldhu	r2,0(r2)
    4860:	00000106 	br	4868 <_ZN6PacMan8getColorEi5E_DIRii+0x1b8>

	return NULL;
    4864:	0005883a 	mov	r2,zero
}
    4868:	e037883a 	mov	sp,fp
    486c:	df000017 	ldw	fp,0(sp)
    4870:	dec00104 	addi	sp,sp,4
    4874:	f800283a 	ret

00004878 <_ZN6PacMan5_drawEP14VideoInterface>:

void PacMan::_draw(VideoInterface* vi){
    4878:	defff604 	addi	sp,sp,-40
    487c:	dfc00915 	stw	ra,36(sp)
    4880:	df000815 	stw	fp,32(sp)
    4884:	df000804 	addi	fp,sp,32
    4888:	e13ffe15 	stw	r4,-8(fp)
    488c:	e17fff15 	stw	r5,-4(fp)
	uint16_t color1;
	uint16_t color2;
	for(int y = 0; y < this->width; y++){
    4890:	e03ff915 	stw	zero,-28(fp)
    4894:	e0bffe17 	ldw	r2,-8(fp)
    4898:	10800517 	ldw	r2,20(r2)
    489c:	e0fff917 	ldw	r3,-28(fp)
    48a0:	1880440e 	bge	r3,r2,49b4 <_ZN6PacMan5_drawEP14VideoInterface+0x13c>
		for(int x = 0; x < this->width; x++){
    48a4:	e03ffa15 	stw	zero,-24(fp)
    48a8:	e0bffe17 	ldw	r2,-8(fp)
    48ac:	10800517 	ldw	r2,20(r2)
    48b0:	e0fffa17 	ldw	r3,-24(fp)
    48b4:	18803b0e 	bge	r3,r2,49a4 <_ZN6PacMan5_drawEP14VideoInterface+0x12c>
			color1 = getColor(this->last_frame, this->prev_dir, x, y);
    48b8:	e0bffe17 	ldw	r2,-8(fp)
    48bc:	10c00d17 	ldw	r3,52(r2)
    48c0:	e0bffe17 	ldw	r2,-8(fp)
    48c4:	11000a17 	ldw	r4,40(r2)
    48c8:	e0bff917 	ldw	r2,-28(fp)
    48cc:	d8800015 	stw	r2,0(sp)
    48d0:	e1fffa17 	ldw	r7,-24(fp)
    48d4:	200d883a 	mov	r6,r4
    48d8:	180b883a 	mov	r5,r3
    48dc:	e13ffe17 	ldw	r4,-8(fp)
    48e0:	00046b00 	call	46b0 <_ZN6PacMan8getColorEi5E_DIRii>
    48e4:	e0bffd0d 	sth	r2,-12(fp)
			color2 = getColor(this->curr_frame, this->curr_dir, (this->prev_x - this->x) + x, (this->prev_y - this->y) + y);
    48e8:	e0bffe17 	ldw	r2,-8(fp)
    48ec:	11000c17 	ldw	r4,48(r2)
    48f0:	e0bffe17 	ldw	r2,-8(fp)
    48f4:	11400917 	ldw	r5,36(r2)
    48f8:	e0bffe17 	ldw	r2,-8(fp)
    48fc:	10c00317 	ldw	r3,12(r2)
    4900:	e0bffe17 	ldw	r2,-8(fp)
    4904:	10800117 	ldw	r2,4(r2)
    4908:	1887c83a 	sub	r3,r3,r2
    490c:	e0bffa17 	ldw	r2,-24(fp)
    4910:	188d883a 	add	r6,r3,r2
    4914:	e0bffe17 	ldw	r2,-8(fp)
    4918:	10c00417 	ldw	r3,16(r2)
    491c:	e0bffe17 	ldw	r2,-8(fp)
    4920:	10800217 	ldw	r2,8(r2)
    4924:	1887c83a 	sub	r3,r3,r2
    4928:	e0bff917 	ldw	r2,-28(fp)
    492c:	1885883a 	add	r2,r3,r2
    4930:	d8800015 	stw	r2,0(sp)
    4934:	300f883a 	mov	r7,r6
    4938:	280d883a 	mov	r6,r5
    493c:	200b883a 	mov	r5,r4
    4940:	e13ffe17 	ldw	r4,-8(fp)
    4944:	00046b00 	call	46b0 <_ZN6PacMan8getColorEi5E_DIRii>
    4948:	e0bffd8d 	sth	r2,-10(fp)
			if(color1 != color2)
    494c:	e0fffd0b 	ldhu	r3,-12(fp)
    4950:	e0bffd8b 	ldhu	r2,-10(fp)
    4954:	18800f26 	beq	r3,r2,4994 <_ZN6PacMan5_drawEP14VideoInterface+0x11c>
				vi->drawPixel(this->prev_x + x - 2, this->prev_y + y - 2, 0);
    4958:	e0bffe17 	ldw	r2,-8(fp)
    495c:	10c00317 	ldw	r3,12(r2)
    4960:	e0bffa17 	ldw	r2,-24(fp)
    4964:	1885883a 	add	r2,r3,r2
    4968:	113fff84 	addi	r4,r2,-2
    496c:	e0bffe17 	ldw	r2,-8(fp)
    4970:	10c00417 	ldw	r3,16(r2)
    4974:	e0bff917 	ldw	r2,-28(fp)
    4978:	1885883a 	add	r2,r3,r2
    497c:	10bfff84 	addi	r2,r2,-2
    4980:	000f883a 	mov	r7,zero
    4984:	100d883a 	mov	r6,r2
    4988:	200b883a 	mov	r5,r4
    498c:	e13fff17 	ldw	r4,-4(fp)
    4990:	0004da80 	call	4da8 <_ZN14VideoInterface9drawPixelEiit>

void PacMan::_draw(VideoInterface* vi){
	uint16_t color1;
	uint16_t color2;
	for(int y = 0; y < this->width; y++){
		for(int x = 0; x < this->width; x++){
    4994:	e0bffa17 	ldw	r2,-24(fp)
    4998:	10800044 	addi	r2,r2,1
    499c:	e0bffa15 	stw	r2,-24(fp)
    49a0:	003fc106 	br	48a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70048a8>
}

void PacMan::_draw(VideoInterface* vi){
	uint16_t color1;
	uint16_t color2;
	for(int y = 0; y < this->width; y++){
    49a4:	e0bff917 	ldw	r2,-28(fp)
    49a8:	10800044 	addi	r2,r2,1
    49ac:	e0bff915 	stw	r2,-28(fp)
    49b0:	003fb806 	br	4894 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004894>
			if(color1 != color2)
				vi->drawPixel(this->prev_x + x - 2, this->prev_y + y - 2, 0);
		}
	}

	for(int y = 0; y < this->width; y++){
    49b4:	e03ffb15 	stw	zero,-20(fp)
    49b8:	e0bffe17 	ldw	r2,-8(fp)
    49bc:	10800517 	ldw	r2,20(r2)
    49c0:	e0fffb17 	ldw	r3,-20(fp)
    49c4:	18802b0e 	bge	r3,r2,4a74 <_ZN6PacMan5_drawEP14VideoInterface+0x1fc>
		for(int x = 0; x < this->width; x++){
    49c8:	e03ffc15 	stw	zero,-16(fp)
    49cc:	e0bffe17 	ldw	r2,-8(fp)
    49d0:	10800517 	ldw	r2,20(r2)
    49d4:	e0fffc17 	ldw	r3,-16(fp)
    49d8:	1880220e 	bge	r3,r2,4a64 <_ZN6PacMan5_drawEP14VideoInterface+0x1ec>
			color1 = getColor(this->curr_frame, this->curr_dir, x, y);
    49dc:	e0bffe17 	ldw	r2,-8(fp)
    49e0:	10c00c17 	ldw	r3,48(r2)
    49e4:	e0bffe17 	ldw	r2,-8(fp)
    49e8:	11000917 	ldw	r4,36(r2)
    49ec:	e0bffb17 	ldw	r2,-20(fp)
    49f0:	d8800015 	stw	r2,0(sp)
    49f4:	e1fffc17 	ldw	r7,-16(fp)
    49f8:	200d883a 	mov	r6,r4
    49fc:	180b883a 	mov	r5,r3
    4a00:	e13ffe17 	ldw	r4,-8(fp)
    4a04:	00046b00 	call	46b0 <_ZN6PacMan8getColorEi5E_DIRii>
    4a08:	e0bffd0d 	sth	r2,-12(fp)
			if(color1 != NULL)
    4a0c:	e0bffd0b 	ldhu	r2,-12(fp)
    4a10:	10001026 	beq	r2,zero,4a54 <_ZN6PacMan5_drawEP14VideoInterface+0x1dc>
				vi->drawPixel(this->x + x - 2, this->y + y - 2, color1);
    4a14:	e0bffe17 	ldw	r2,-8(fp)
    4a18:	10c00117 	ldw	r3,4(r2)
    4a1c:	e0bffc17 	ldw	r2,-16(fp)
    4a20:	1885883a 	add	r2,r3,r2
    4a24:	113fff84 	addi	r4,r2,-2
    4a28:	e0bffe17 	ldw	r2,-8(fp)
    4a2c:	10c00217 	ldw	r3,8(r2)
    4a30:	e0bffb17 	ldw	r2,-20(fp)
    4a34:	1885883a 	add	r2,r3,r2
    4a38:	10bfff84 	addi	r2,r2,-2
    4a3c:	e0fffd0b 	ldhu	r3,-12(fp)
    4a40:	180f883a 	mov	r7,r3
    4a44:	100d883a 	mov	r6,r2
    4a48:	200b883a 	mov	r5,r4
    4a4c:	e13fff17 	ldw	r4,-4(fp)
    4a50:	0004da80 	call	4da8 <_ZN14VideoInterface9drawPixelEiit>
				vi->drawPixel(this->prev_x + x - 2, this->prev_y + y - 2, 0);
		}
	}

	for(int y = 0; y < this->width; y++){
		for(int x = 0; x < this->width; x++){
    4a54:	e0bffc17 	ldw	r2,-16(fp)
    4a58:	10800044 	addi	r2,r2,1
    4a5c:	e0bffc15 	stw	r2,-16(fp)
    4a60:	003fda06 	br	49cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70049cc>
			if(color1 != color2)
				vi->drawPixel(this->prev_x + x - 2, this->prev_y + y - 2, 0);
		}
	}

	for(int y = 0; y < this->width; y++){
    4a64:	e0bffb17 	ldw	r2,-20(fp)
    4a68:	10800044 	addi	r2,r2,1
    4a6c:	e0bffb15 	stw	r2,-20(fp)
    4a70:	003fd106 	br	49b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70049b8>
			color1 = getColor(this->curr_frame, this->curr_dir, x, y);
			if(color1 != NULL)
				vi->drawPixel(this->x + x - 2, this->y + y - 2, color1);
		}
	}
};
    4a74:	0001883a 	nop
    4a78:	e037883a 	mov	sp,fp
    4a7c:	dfc00117 	ldw	ra,4(sp)
    4a80:	df000017 	ldw	fp,0(sp)
    4a84:	dec00204 	addi	sp,sp,8
    4a88:	f800283a 	ret

00004a8c <_ZN6PacMan7_updateEi>:

void PacMan::_update(int elapsedTime){
    4a8c:	defffd04 	addi	sp,sp,-12
    4a90:	df000215 	stw	fp,8(sp)
    4a94:	df000204 	addi	fp,sp,8
    4a98:	e13ffe15 	stw	r4,-8(fp)
    4a9c:	e17fff15 	stw	r5,-4(fp)
	this->last_frame = this->curr_frame;
    4aa0:	e0bffe17 	ldw	r2,-8(fp)
    4aa4:	10c00c17 	ldw	r3,48(r2)
    4aa8:	e0bffe17 	ldw	r2,-8(fp)
    4aac:	10c00d15 	stw	r3,52(r2)

	if(this->curr_dir != DIR_NO_DIR){
    4ab0:	e0bffe17 	ldw	r2,-8(fp)
    4ab4:	10800917 	ldw	r2,36(r2)
    4ab8:	10800120 	cmpeqi	r2,r2,4
    4abc:	1000261e 	bne	r2,zero,4b58 <_ZN6PacMan7_updateEi+0xcc>
		if(this->frame_dir){
    4ac0:	e0bffe17 	ldw	r2,-8(fp)
    4ac4:	10800e17 	ldw	r2,56(r2)
    4ac8:	10001226 	beq	r2,zero,4b14 <_ZN6PacMan7_updateEi+0x88>
			if(this->curr_frame < 2){
    4acc:	e0bffe17 	ldw	r2,-8(fp)
    4ad0:	10800c17 	ldw	r2,48(r2)
    4ad4:	10800088 	cmpgei	r2,r2,2
    4ad8:	1000061e 	bne	r2,zero,4af4 <_ZN6PacMan7_updateEi+0x68>
				this->curr_frame++;
    4adc:	e0bffe17 	ldw	r2,-8(fp)
    4ae0:	10800c17 	ldw	r2,48(r2)
    4ae4:	10c00044 	addi	r3,r2,1
    4ae8:	e0bffe17 	ldw	r2,-8(fp)
    4aec:	10c00c15 	stw	r3,48(r2)
    4af0:	00001906 	br	4b58 <_ZN6PacMan7_updateEi+0xcc>
			}else{
				this->curr_frame--;
    4af4:	e0bffe17 	ldw	r2,-8(fp)
    4af8:	10800c17 	ldw	r2,48(r2)
    4afc:	10ffffc4 	addi	r3,r2,-1
    4b00:	e0bffe17 	ldw	r2,-8(fp)
    4b04:	10c00c15 	stw	r3,48(r2)
				this->frame_dir = 0;
    4b08:	e0bffe17 	ldw	r2,-8(fp)
    4b0c:	10000e15 	stw	zero,56(r2)
    4b10:	00001106 	br	4b58 <_ZN6PacMan7_updateEi+0xcc>
			}
		}else{
			if(this->curr_frame > 0){
    4b14:	e0bffe17 	ldw	r2,-8(fp)
    4b18:	10800c17 	ldw	r2,48(r2)
    4b1c:	0080060e 	bge	zero,r2,4b38 <_ZN6PacMan7_updateEi+0xac>
				this->curr_frame--;
    4b20:	e0bffe17 	ldw	r2,-8(fp)
    4b24:	10800c17 	ldw	r2,48(r2)
    4b28:	10ffffc4 	addi	r3,r2,-1
    4b2c:	e0bffe17 	ldw	r2,-8(fp)
    4b30:	10c00c15 	stw	r3,48(r2)
    4b34:	00000806 	br	4b58 <_ZN6PacMan7_updateEi+0xcc>
			}else{
				this->curr_frame++;
    4b38:	e0bffe17 	ldw	r2,-8(fp)
    4b3c:	10800c17 	ldw	r2,48(r2)
    4b40:	10c00044 	addi	r3,r2,1
    4b44:	e0bffe17 	ldw	r2,-8(fp)
    4b48:	10c00c15 	stw	r3,48(r2)
				this->frame_dir = 1;
    4b4c:	e0bffe17 	ldw	r2,-8(fp)
    4b50:	00c00044 	movi	r3,1
    4b54:	10c00e15 	stw	r3,56(r2)
			}
		}
	}
	this->redraw = 1;
    4b58:	e0bffe17 	ldw	r2,-8(fp)
    4b5c:	00c00044 	movi	r3,1
    4b60:	10c00805 	stb	r3,32(r2)
};
    4b64:	0001883a 	nop
    4b68:	e037883a 	mov	sp,fp
    4b6c:	df000017 	ldw	fp,0(sp)
    4b70:	dec00104 	addi	sp,sp,4
    4b74:	f800283a 	ret

00004b78 <_ZN3VGAC1EPsiii>:
 *      Author: natha
 */

#include "VGA.h"

VGA::VGA(short* pixel_buffer, int width, int height, int scale) : VideoInterface(width, height, scale) {
    4b78:	defffa04 	addi	sp,sp,-24
    4b7c:	dfc00515 	stw	ra,20(sp)
    4b80:	df000415 	stw	fp,16(sp)
    4b84:	df000404 	addi	fp,sp,16
    4b88:	e13ffc15 	stw	r4,-16(fp)
    4b8c:	e17ffd15 	stw	r5,-12(fp)
    4b90:	e1bffe15 	stw	r6,-8(fp)
    4b94:	e1ffff15 	stw	r7,-4(fp)
    4b98:	e0bffc17 	ldw	r2,-16(fp)
    4b9c:	e1c00217 	ldw	r7,8(fp)
    4ba0:	e1bfff17 	ldw	r6,-4(fp)
    4ba4:	e17ffe17 	ldw	r5,-8(fp)
    4ba8:	1009883a 	mov	r4,r2
    4bac:	0004c540 	call	4c54 <_ZN14VideoInterfaceC1Eiii>
    4bb0:	008000b4 	movhi	r2,2
    4bb4:	109e1104 	addi	r2,r2,30788
    4bb8:	e0fffc17 	ldw	r3,-16(fp)
    4bbc:	18800015 	stw	r2,0(r3)
	this->pbuffer = pixel_buffer;
    4bc0:	e0bffc17 	ldw	r2,-16(fp)
    4bc4:	e0fffd17 	ldw	r3,-12(fp)
    4bc8:	10c00815 	stw	r3,32(r2)
};
    4bcc:	0001883a 	nop
    4bd0:	e037883a 	mov	sp,fp
    4bd4:	dfc00117 	ldw	ra,4(sp)
    4bd8:	df000017 	ldw	fp,0(sp)
    4bdc:	dec00204 	addi	sp,sp,8
    4be0:	f800283a 	ret

00004be4 <_ZN3VGA18_internalDrawPixelEiit>:

void VGA::_internalDrawPixel(int x, int y, uint16_t color){
    4be4:	defff904 	addi	sp,sp,-28
    4be8:	df000615 	stw	fp,24(sp)
    4bec:	df000604 	addi	fp,sp,24
    4bf0:	e13ffc15 	stw	r4,-16(fp)
    4bf4:	e17ffd15 	stw	r5,-12(fp)
    4bf8:	e1bffe15 	stw	r6,-8(fp)
    4bfc:	3805883a 	mov	r2,r7
    4c00:	e0bfff0d 	sth	r2,-4(fp)
	volatile short* pbuff = this->pbuffer;
    4c04:	e0bffc17 	ldw	r2,-16(fp)
    4c08:	10800817 	ldw	r2,32(r2)
    4c0c:	e0bffa15 	stw	r2,-24(fp)

	int offset = (y << 9) + x;
    4c10:	e0bffe17 	ldw	r2,-8(fp)
    4c14:	1006927a 	slli	r3,r2,9
    4c18:	e0bffd17 	ldw	r2,-12(fp)
    4c1c:	1885883a 	add	r2,r3,r2
    4c20:	e0bffb15 	stw	r2,-20(fp)
	*(pbuff + offset) = (short)color;
    4c24:	e0bffb17 	ldw	r2,-20(fp)
    4c28:	1085883a 	add	r2,r2,r2
    4c2c:	1007883a 	mov	r3,r2
    4c30:	e0bffa17 	ldw	r2,-24(fp)
    4c34:	10c5883a 	add	r2,r2,r3
    4c38:	e0ffff0b 	ldhu	r3,-4(fp)
    4c3c:	10c0000d 	sth	r3,0(r2)
};
    4c40:	0001883a 	nop
    4c44:	e037883a 	mov	sp,fp
    4c48:	df000017 	ldw	fp,0(sp)
    4c4c:	dec00104 	addi	sp,sp,4
    4c50:	f800283a 	ret

00004c54 <_ZN14VideoInterfaceC1Eiii>:
 *      Author: natha
 */

#include "VideoInterface.h"

VideoInterface::VideoInterface(int width, int height, int scale){
    4c54:	defffb04 	addi	sp,sp,-20
    4c58:	df000415 	stw	fp,16(sp)
    4c5c:	df000404 	addi	fp,sp,16
    4c60:	e13ffc15 	stw	r4,-16(fp)
    4c64:	e17ffd15 	stw	r5,-12(fp)
    4c68:	e1bffe15 	stw	r6,-8(fp)
    4c6c:	e1ffff15 	stw	r7,-4(fp)
    4c70:	008000b4 	movhi	r2,2
    4c74:	109e1c04 	addi	r2,r2,30832
    4c78:	e0fffc17 	ldw	r3,-16(fp)
    4c7c:	18800015 	stw	r2,0(r3)
	this->width = width;
    4c80:	e0bffc17 	ldw	r2,-16(fp)
    4c84:	e0fffd17 	ldw	r3,-12(fp)
    4c88:	10c00315 	stw	r3,12(r2)
	this->height = height;
    4c8c:	e0bffc17 	ldw	r2,-16(fp)
    4c90:	e0fffe17 	ldw	r3,-8(fp)
    4c94:	10c00415 	stw	r3,16(r2)
	this->scale = scale;
    4c98:	e0bffc17 	ldw	r2,-16(fp)
    4c9c:	e0ffff17 	ldw	r3,-4(fp)
    4ca0:	10c00515 	stw	r3,20(r2)
	this->viLA = BRESENHAM;
    4ca4:	e0bffc17 	ldw	r2,-16(fp)
    4ca8:	00c00044 	movi	r3,1
    4cac:	10c00115 	stw	r3,4(r2)
	this->x_offset = 0;
    4cb0:	e0bffc17 	ldw	r2,-16(fp)
    4cb4:	10000615 	stw	zero,24(r2)
	this->y_offset = 0;
    4cb8:	e0bffc17 	ldw	r2,-16(fp)
    4cbc:	10000715 	stw	zero,28(r2)
};
    4cc0:	0001883a 	nop
    4cc4:	e037883a 	mov	sp,fp
    4cc8:	df000017 	ldw	fp,0(sp)
    4ccc:	dec00104 	addi	sp,sp,4
    4cd0:	f800283a 	ret

00004cd4 <_ZN14VideoInterface9setOffsetEii>:

void VideoInterface::setOffset(int x, int y){
    4cd4:	defffc04 	addi	sp,sp,-16
    4cd8:	df000315 	stw	fp,12(sp)
    4cdc:	df000304 	addi	fp,sp,12
    4ce0:	e13ffd15 	stw	r4,-12(fp)
    4ce4:	e17ffe15 	stw	r5,-8(fp)
    4ce8:	e1bfff15 	stw	r6,-4(fp)
	this->x_offset = x;
    4cec:	e0bffd17 	ldw	r2,-12(fp)
    4cf0:	e0fffe17 	ldw	r3,-8(fp)
    4cf4:	10c00615 	stw	r3,24(r2)
	this->y_offset = y;
    4cf8:	e0bffd17 	ldw	r2,-12(fp)
    4cfc:	e0ffff17 	ldw	r3,-4(fp)
    4d00:	10c00715 	stw	r3,28(r2)
};
    4d04:	0001883a 	nop
    4d08:	e037883a 	mov	sp,fp
    4d0c:	df000017 	ldw	fp,0(sp)
    4d10:	dec00104 	addi	sp,sp,4
    4d14:	f800283a 	ret

00004d18 <_ZN14VideoInterface11resetOffsetEv>:

void VideoInterface::resetOffset(){
    4d18:	defffd04 	addi	sp,sp,-12
    4d1c:	dfc00215 	stw	ra,8(sp)
    4d20:	df000115 	stw	fp,4(sp)
    4d24:	df000104 	addi	fp,sp,4
    4d28:	e13fff15 	stw	r4,-4(fp)
	setOffset(0, 0);
    4d2c:	000d883a 	mov	r6,zero
    4d30:	000b883a 	mov	r5,zero
    4d34:	e13fff17 	ldw	r4,-4(fp)
    4d38:	0004cd40 	call	4cd4 <_ZN14VideoInterface9setOffsetEii>
};
    4d3c:	0001883a 	nop
    4d40:	e037883a 	mov	sp,fp
    4d44:	dfc00117 	ldw	ra,4(sp)
    4d48:	df000017 	ldw	fp,0(sp)
    4d4c:	dec00204 	addi	sp,sp,8
    4d50:	f800283a 	ret

00004d54 <_ZN14VideoInterface9drawPixelEii>:

void VideoInterface::drawPixel(int x, int y){
    4d54:	defffb04 	addi	sp,sp,-20
    4d58:	dfc00415 	stw	ra,16(sp)
    4d5c:	df000315 	stw	fp,12(sp)
    4d60:	df000304 	addi	fp,sp,12
    4d64:	e13ffd15 	stw	r4,-12(fp)
    4d68:	e17ffe15 	stw	r5,-8(fp)
    4d6c:	e1bfff15 	stw	r6,-4(fp)
	this->drawPixel(x, y, this->color);
    4d70:	e0bffd17 	ldw	r2,-12(fp)
    4d74:	1080020b 	ldhu	r2,8(r2)
    4d78:	10bfffcc 	andi	r2,r2,65535
    4d7c:	100f883a 	mov	r7,r2
    4d80:	e1bfff17 	ldw	r6,-4(fp)
    4d84:	e17ffe17 	ldw	r5,-8(fp)
    4d88:	e13ffd17 	ldw	r4,-12(fp)
    4d8c:	0004da80 	call	4da8 <_ZN14VideoInterface9drawPixelEiit>
};
    4d90:	0001883a 	nop
    4d94:	e037883a 	mov	sp,fp
    4d98:	dfc00117 	ldw	ra,4(sp)
    4d9c:	df000017 	ldw	fp,0(sp)
    4da0:	dec00204 	addi	sp,sp,8
    4da4:	f800283a 	ret

00004da8 <_ZN14VideoInterface9drawPixelEiit>:

void VideoInterface::drawPixel(int x, int y, uint16_t color){
    4da8:	defffa04 	addi	sp,sp,-24
    4dac:	dfc00515 	stw	ra,20(sp)
    4db0:	df000415 	stw	fp,16(sp)
    4db4:	df000404 	addi	fp,sp,16
    4db8:	e13ffc15 	stw	r4,-16(fp)
    4dbc:	e17ffd15 	stw	r5,-12(fp)
    4dc0:	e1bffe15 	stw	r6,-8(fp)
    4dc4:	3805883a 	mov	r2,r7
    4dc8:	e0bfff0d 	sth	r2,-4(fp)
	if(x < 0 || x > this->width - 1) return;
    4dcc:	e0bffd17 	ldw	r2,-12(fp)
    4dd0:	10001d16 	blt	r2,zero,4e48 <_ZN14VideoInterface9drawPixelEiit+0xa0>
    4dd4:	e0bffc17 	ldw	r2,-16(fp)
    4dd8:	10800317 	ldw	r2,12(r2)
    4ddc:	10ffffc4 	addi	r3,r2,-1
    4de0:	e0bffd17 	ldw	r2,-12(fp)
    4de4:	18801816 	blt	r3,r2,4e48 <_ZN14VideoInterface9drawPixelEiit+0xa0>
	if(y < 0 || y > this->height - 1) return;
    4de8:	e0bffe17 	ldw	r2,-8(fp)
    4dec:	10001816 	blt	r2,zero,4e50 <_ZN14VideoInterface9drawPixelEiit+0xa8>
    4df0:	e0bffc17 	ldw	r2,-16(fp)
    4df4:	10800417 	ldw	r2,16(r2)
    4df8:	10ffffc4 	addi	r3,r2,-1
    4dfc:	e0bffe17 	ldw	r2,-8(fp)
    4e00:	18801316 	blt	r3,r2,4e50 <_ZN14VideoInterface9drawPixelEiit+0xa8>
	this->_internalDrawPixel(this->x_offset + x, this->y_offset + y, color);
    4e04:	e0bffc17 	ldw	r2,-16(fp)
    4e08:	10800017 	ldw	r2,0(r2)
    4e0c:	10800017 	ldw	r2,0(r2)
    4e10:	e0fffc17 	ldw	r3,-16(fp)
    4e14:	19000617 	ldw	r4,24(r3)
    4e18:	e0fffd17 	ldw	r3,-12(fp)
    4e1c:	20cb883a 	add	r5,r4,r3
    4e20:	e0fffc17 	ldw	r3,-16(fp)
    4e24:	19000717 	ldw	r4,28(r3)
    4e28:	e0fffe17 	ldw	r3,-8(fp)
    4e2c:	20c7883a 	add	r3,r4,r3
    4e30:	e13fff0b 	ldhu	r4,-4(fp)
    4e34:	200f883a 	mov	r7,r4
    4e38:	180d883a 	mov	r6,r3
    4e3c:	e13ffc17 	ldw	r4,-16(fp)
    4e40:	103ee83a 	callr	r2
    4e44:	00000306 	br	4e54 <_ZN14VideoInterface9drawPixelEiit+0xac>
void VideoInterface::drawPixel(int x, int y){
	this->drawPixel(x, y, this->color);
};

void VideoInterface::drawPixel(int x, int y, uint16_t color){
	if(x < 0 || x > this->width - 1) return;
    4e48:	0001883a 	nop
    4e4c:	00000106 	br	4e54 <_ZN14VideoInterface9drawPixelEiit+0xac>
	if(y < 0 || y > this->height - 1) return;
    4e50:	0001883a 	nop
	this->_internalDrawPixel(this->x_offset + x, this->y_offset + y, color);
};
    4e54:	e037883a 	mov	sp,fp
    4e58:	dfc00117 	ldw	ra,4(sp)
    4e5c:	df000017 	ldw	fp,0(sp)
    4e60:	dec00204 	addi	sp,sp,8
    4e64:	f800283a 	ret

00004e68 <_ZN14VideoInterface8setColorEt>:

void VideoInterface::setColor(uint16_t color){
    4e68:	defffd04 	addi	sp,sp,-12
    4e6c:	df000215 	stw	fp,8(sp)
    4e70:	df000204 	addi	fp,sp,8
    4e74:	e13ffe15 	stw	r4,-8(fp)
    4e78:	2805883a 	mov	r2,r5
    4e7c:	e0bfff0d 	sth	r2,-4(fp)
	this->color = color;
    4e80:	e0bffe17 	ldw	r2,-8(fp)
    4e84:	e0ffff0b 	ldhu	r3,-4(fp)
    4e88:	10c0020d 	sth	r3,8(r2)
};
    4e8c:	0001883a 	nop
    4e90:	e037883a 	mov	sp,fp
    4e94:	df000017 	ldw	fp,0(sp)
    4e98:	dec00104 	addi	sp,sp,4
    4e9c:	f800283a 	ret

00004ea0 <_ZN14VideoInterface5clearEt>:

void VideoInterface::clear(uint16_t color){
    4ea0:	defff904 	addi	sp,sp,-28
    4ea4:	dfc00615 	stw	ra,24(sp)
    4ea8:	df000515 	stw	fp,20(sp)
    4eac:	df000504 	addi	fp,sp,20
    4eb0:	e13ffe15 	stw	r4,-8(fp)
    4eb4:	2805883a 	mov	r2,r5
    4eb8:	e0bfff0d 	sth	r2,-4(fp)
	uint16_t tcol = this->color;
    4ebc:	e0bffe17 	ldw	r2,-8(fp)
    4ec0:	1080020b 	ldhu	r2,8(r2)
    4ec4:	e0bffd0d 	sth	r2,-12(fp)
	this->setColor(color);
    4ec8:	e0bfff0b 	ldhu	r2,-4(fp)
    4ecc:	100b883a 	mov	r5,r2
    4ed0:	e13ffe17 	ldw	r4,-8(fp)
    4ed4:	0004e680 	call	4e68 <_ZN14VideoInterface8setColorEt>
	for(int y = 0; y < height; y++){
    4ed8:	e03ffb15 	stw	zero,-20(fp)
    4edc:	e0bffe17 	ldw	r2,-8(fp)
    4ee0:	10800417 	ldw	r2,16(r2)
    4ee4:	e0fffb17 	ldw	r3,-20(fp)
    4ee8:	1880110e 	bge	r3,r2,4f30 <_ZN14VideoInterface5clearEt+0x90>
		for(int x = 0; x < width; x++){
    4eec:	e03ffc15 	stw	zero,-16(fp)
    4ef0:	e0bffe17 	ldw	r2,-8(fp)
    4ef4:	10800317 	ldw	r2,12(r2)
    4ef8:	e0fffc17 	ldw	r3,-16(fp)
    4efc:	1880080e 	bge	r3,r2,4f20 <_ZN14VideoInterface5clearEt+0x80>
			this->drawPixel(x, y);
    4f00:	e1bffb17 	ldw	r6,-20(fp)
    4f04:	e17ffc17 	ldw	r5,-16(fp)
    4f08:	e13ffe17 	ldw	r4,-8(fp)
    4f0c:	0004d540 	call	4d54 <_ZN14VideoInterface9drawPixelEii>

void VideoInterface::clear(uint16_t color){
	uint16_t tcol = this->color;
	this->setColor(color);
	for(int y = 0; y < height; y++){
		for(int x = 0; x < width; x++){
    4f10:	e0bffc17 	ldw	r2,-16(fp)
    4f14:	10800044 	addi	r2,r2,1
    4f18:	e0bffc15 	stw	r2,-16(fp)
    4f1c:	003ff406 	br	4ef0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004ef0>
};

void VideoInterface::clear(uint16_t color){
	uint16_t tcol = this->color;
	this->setColor(color);
	for(int y = 0; y < height; y++){
    4f20:	e0bffb17 	ldw	r2,-20(fp)
    4f24:	10800044 	addi	r2,r2,1
    4f28:	e0bffb15 	stw	r2,-20(fp)
    4f2c:	003feb06 	br	4edc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004edc>
		for(int x = 0; x < width; x++){
			this->drawPixel(x, y);
		}
	}
	this->setColor(tcol);
    4f30:	e0bffd0b 	ldhu	r2,-12(fp)
    4f34:	100b883a 	mov	r5,r2
    4f38:	e13ffe17 	ldw	r4,-8(fp)
    4f3c:	0004e680 	call	4e68 <_ZN14VideoInterface8setColorEt>
};
    4f40:	0001883a 	nop
    4f44:	e037883a 	mov	sp,fp
    4f48:	dfc00117 	ldw	ra,4(sp)
    4f4c:	df000017 	ldw	fp,0(sp)
    4f50:	dec00204 	addi	sp,sp,8
    4f54:	f800283a 	ret

00004f58 <_ZN14VideoInterface10setLineAlgE9viLineAlg>:

void VideoInterface::setLineAlg(enum viLineAlg viLA){
    4f58:	defffd04 	addi	sp,sp,-12
    4f5c:	df000215 	stw	fp,8(sp)
    4f60:	df000204 	addi	fp,sp,8
    4f64:	e13ffe15 	stw	r4,-8(fp)
    4f68:	e17fff15 	stw	r5,-4(fp)
	this->viLA = viLA;
    4f6c:	e0bffe17 	ldw	r2,-8(fp)
    4f70:	e0ffff17 	ldw	r3,-4(fp)
    4f74:	10c00115 	stw	r3,4(r2)
};
    4f78:	0001883a 	nop
    4f7c:	e037883a 	mov	sp,fp
    4f80:	df000017 	ldw	fp,0(sp)
    4f84:	dec00104 	addi	sp,sp,4
    4f88:	f800283a 	ret

00004f8c <_ZN14VideoInterface8drawLineEiiii>:

void VideoInterface::drawLine(int x0, int y0, int x1, int y1){
    4f8c:	defff804 	addi	sp,sp,-32
    4f90:	dfc00715 	stw	ra,28(sp)
    4f94:	df000615 	stw	fp,24(sp)
    4f98:	df000604 	addi	fp,sp,24
    4f9c:	e13ffc15 	stw	r4,-16(fp)
    4fa0:	e17ffd15 	stw	r5,-12(fp)
    4fa4:	e1bffe15 	stw	r6,-8(fp)
    4fa8:	e1ffff15 	stw	r7,-4(fp)
	this->drawLine(x0, y0, x1, y1, this->color);
    4fac:	e0bffc17 	ldw	r2,-16(fp)
    4fb0:	1080020b 	ldhu	r2,8(r2)
    4fb4:	10bfffcc 	andi	r2,r2,65535
    4fb8:	d8800115 	stw	r2,4(sp)
    4fbc:	e0800217 	ldw	r2,8(fp)
    4fc0:	d8800015 	stw	r2,0(sp)
    4fc4:	e1ffff17 	ldw	r7,-4(fp)
    4fc8:	e1bffe17 	ldw	r6,-8(fp)
    4fcc:	e17ffd17 	ldw	r5,-12(fp)
    4fd0:	e13ffc17 	ldw	r4,-16(fp)
    4fd4:	0004ff00 	call	4ff0 <_ZN14VideoInterface8drawLineEiiiit>
};
    4fd8:	0001883a 	nop
    4fdc:	e037883a 	mov	sp,fp
    4fe0:	dfc00117 	ldw	ra,4(sp)
    4fe4:	df000017 	ldw	fp,0(sp)
    4fe8:	dec00204 	addi	sp,sp,8
    4fec:	f800283a 	ret

00004ff0 <_ZN14VideoInterface8drawLineEiiiit>:

void VideoInterface::drawLine(int x0, int y0, int x1, int y1, uint16_t color){
    4ff0:	defff704 	addi	sp,sp,-36
    4ff4:	dfc00815 	stw	ra,32(sp)
    4ff8:	df000715 	stw	fp,28(sp)
    4ffc:	df000704 	addi	fp,sp,28
    5000:	e13ffb15 	stw	r4,-20(fp)
    5004:	e17ffc15 	stw	r5,-16(fp)
    5008:	e1bffd15 	stw	r6,-12(fp)
    500c:	e1fffe15 	stw	r7,-8(fp)
    5010:	e0800317 	ldw	r2,12(fp)
    5014:	e0bfff0d 	sth	r2,-4(fp)
	if(this->viLA == DDA) this->_drawLineDDA(x0, y0, x1, y1, color);
    5018:	e0bffb17 	ldw	r2,-20(fp)
    501c:	10800117 	ldw	r2,4(r2)
    5020:	1000091e 	bne	r2,zero,5048 <_ZN14VideoInterface8drawLineEiiiit+0x58>
    5024:	e0bfff0b 	ldhu	r2,-4(fp)
    5028:	d8800115 	stw	r2,4(sp)
    502c:	e0800217 	ldw	r2,8(fp)
    5030:	d8800015 	stw	r2,0(sp)
    5034:	e1fffe17 	ldw	r7,-8(fp)
    5038:	e1bffd17 	ldw	r6,-12(fp)
    503c:	e17ffc17 	ldw	r5,-16(fp)
    5040:	e13ffb17 	ldw	r4,-20(fp)
    5044:	00051a80 	call	51a8 <_ZN14VideoInterface12_drawLineDDAEiiiit>
	if(this->viLA == BRESENHAM) this->_drawLineBRESENHAM(x0, y0, x1, y1, color);
    5048:	e0bffb17 	ldw	r2,-20(fp)
    504c:	10800117 	ldw	r2,4(r2)
    5050:	10800058 	cmpnei	r2,r2,1
    5054:	1000091e 	bne	r2,zero,507c <_ZN14VideoInterface8drawLineEiiiit+0x8c>
    5058:	e0bfff0b 	ldhu	r2,-4(fp)
    505c:	d8800115 	stw	r2,4(sp)
    5060:	e0800217 	ldw	r2,8(fp)
    5064:	d8800015 	stw	r2,0(sp)
    5068:	e1fffe17 	ldw	r7,-8(fp)
    506c:	e1bffd17 	ldw	r6,-12(fp)
    5070:	e17ffc17 	ldw	r5,-16(fp)
    5074:	e13ffb17 	ldw	r4,-20(fp)
    5078:	00053680 	call	5368 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit>
};
    507c:	0001883a 	nop
    5080:	e037883a 	mov	sp,fp
    5084:	dfc00117 	ldw	ra,4(sp)
    5088:	df000017 	ldw	fp,0(sp)
    508c:	dec00204 	addi	sp,sp,8
    5090:	f800283a 	ret

00005094 <_ZN14VideoInterface8drawRectEiiii>:

void VideoInterface::drawRect(int x, int y, int width, int height){
    5094:	defff804 	addi	sp,sp,-32
    5098:	dfc00715 	stw	ra,28(sp)
    509c:	df000615 	stw	fp,24(sp)
    50a0:	df000604 	addi	fp,sp,24
    50a4:	e13ffc15 	stw	r4,-16(fp)
    50a8:	e17ffd15 	stw	r5,-12(fp)
    50ac:	e1bffe15 	stw	r6,-8(fp)
    50b0:	e1ffff15 	stw	r7,-4(fp)
	this->drawRect(x, y, width, height, this->color);
    50b4:	e0bffc17 	ldw	r2,-16(fp)
    50b8:	1080020b 	ldhu	r2,8(r2)
    50bc:	10bfffcc 	andi	r2,r2,65535
    50c0:	d8800115 	stw	r2,4(sp)
    50c4:	e0800217 	ldw	r2,8(fp)
    50c8:	d8800015 	stw	r2,0(sp)
    50cc:	e1ffff17 	ldw	r7,-4(fp)
    50d0:	e1bffe17 	ldw	r6,-8(fp)
    50d4:	e17ffd17 	ldw	r5,-12(fp)
    50d8:	e13ffc17 	ldw	r4,-16(fp)
    50dc:	00050f80 	call	50f8 <_ZN14VideoInterface8drawRectEiiiit>
};
    50e0:	0001883a 	nop
    50e4:	e037883a 	mov	sp,fp
    50e8:	dfc00117 	ldw	ra,4(sp)
    50ec:	df000017 	ldw	fp,0(sp)
    50f0:	dec00204 	addi	sp,sp,8
    50f4:	f800283a 	ret

000050f8 <_ZN14VideoInterface8drawRectEiiiit>:

void VideoInterface::drawRect(int x, int y, int width, int height, uint16_t color){
    50f8:	defff704 	addi	sp,sp,-36
    50fc:	dfc00815 	stw	ra,32(sp)
    5100:	df000715 	stw	fp,28(sp)
    5104:	df000704 	addi	fp,sp,28
    5108:	e13ffb15 	stw	r4,-20(fp)
    510c:	e17ffc15 	stw	r5,-16(fp)
    5110:	e1bffd15 	stw	r6,-12(fp)
    5114:	e1fffe15 	stw	r7,-8(fp)
    5118:	e0800317 	ldw	r2,12(fp)
    511c:	e0bfff0d 	sth	r2,-4(fp)
	for(int _y = 0; _y < height; _y++){
    5120:	e03ff915 	stw	zero,-28(fp)
    5124:	e0fff917 	ldw	r3,-28(fp)
    5128:	e0800217 	ldw	r2,8(fp)
    512c:	1880180e 	bge	r3,r2,5190 <_ZN14VideoInterface8drawRectEiiiit+0x98>
		for(int _x = 0; _x < width; _x++){
    5130:	e03ffa15 	stw	zero,-24(fp)
    5134:	e0fffa17 	ldw	r3,-24(fp)
    5138:	e0bffe17 	ldw	r2,-8(fp)
    513c:	1880100e 	bge	r3,r2,5180 <_ZN14VideoInterface8drawRectEiiiit+0x88>
			this->drawPixel(x + _x, y + _y, color);
    5140:	e0fffc17 	ldw	r3,-16(fp)
    5144:	e0bffa17 	ldw	r2,-24(fp)
    5148:	1889883a 	add	r4,r3,r2
    514c:	e0fffd17 	ldw	r3,-12(fp)
    5150:	e0bff917 	ldw	r2,-28(fp)
    5154:	1885883a 	add	r2,r3,r2
    5158:	e0ffff0b 	ldhu	r3,-4(fp)
    515c:	180f883a 	mov	r7,r3
    5160:	100d883a 	mov	r6,r2
    5164:	200b883a 	mov	r5,r4
    5168:	e13ffb17 	ldw	r4,-20(fp)
    516c:	0004da80 	call	4da8 <_ZN14VideoInterface9drawPixelEiit>
	this->drawRect(x, y, width, height, this->color);
};

void VideoInterface::drawRect(int x, int y, int width, int height, uint16_t color){
	for(int _y = 0; _y < height; _y++){
		for(int _x = 0; _x < width; _x++){
    5170:	e0bffa17 	ldw	r2,-24(fp)
    5174:	10800044 	addi	r2,r2,1
    5178:	e0bffa15 	stw	r2,-24(fp)
    517c:	003fed06 	br	5134 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005134>
void VideoInterface::drawRect(int x, int y, int width, int height){
	this->drawRect(x, y, width, height, this->color);
};

void VideoInterface::drawRect(int x, int y, int width, int height, uint16_t color){
	for(int _y = 0; _y < height; _y++){
    5180:	e0bff917 	ldw	r2,-28(fp)
    5184:	10800044 	addi	r2,r2,1
    5188:	e0bff915 	stw	r2,-28(fp)
    518c:	003fe506 	br	5124 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005124>
		for(int _x = 0; _x < width; _x++){
			this->drawPixel(x + _x, y + _y, color);
		}
	}
};
    5190:	0001883a 	nop
    5194:	e037883a 	mov	sp,fp
    5198:	dfc00117 	ldw	ra,4(sp)
    519c:	df000017 	ldw	fp,0(sp)
    51a0:	dec00204 	addi	sp,sp,8
    51a4:	f800283a 	ret

000051a8 <_ZN14VideoInterface12_drawLineDDAEiiiit>:

void VideoInterface::_drawLineDDA(int x0, int y0, int x1, int y1, uint16_t color){
    51a8:	defff204 	addi	sp,sp,-56
    51ac:	dfc00d15 	stw	ra,52(sp)
    51b0:	df000c15 	stw	fp,48(sp)
    51b4:	dc000b15 	stw	r16,44(sp)
    51b8:	df000c04 	addi	fp,sp,48
    51bc:	e13ffa15 	stw	r4,-24(fp)
    51c0:	e17ffb15 	stw	r5,-20(fp)
    51c4:	e1bffc15 	stw	r6,-16(fp)
    51c8:	e1fffd15 	stw	r7,-12(fp)
    51cc:	e0800317 	ldw	r2,12(fp)
    51d0:	e0bffe0d 	sth	r2,-8(fp)
	float x, y, dx, dy, step;

	dx = (float)abs(x1 - x0);
    51d4:	e0fffd17 	ldw	r3,-12(fp)
    51d8:	e0bffb17 	ldw	r2,-20(fp)
    51dc:	1885c83a 	sub	r2,r3,r2
    51e0:	1000010e 	bge	r2,zero,51e8 <_ZN14VideoInterface12_drawLineDDAEiiiit+0x40>
    51e4:	0085c83a 	sub	r2,zero,r2
    51e8:	1009883a 	mov	r4,r2
    51ec:	0009c5c0 	call	9c5c <__floatsisf>
    51f0:	1007883a 	mov	r3,r2
    51f4:	e0fff715 	stw	r3,-36(fp)
	dy = (float)abs(y1 - y0);
    51f8:	e0c00217 	ldw	r3,8(fp)
    51fc:	e0bffc17 	ldw	r2,-16(fp)
    5200:	1885c83a 	sub	r2,r3,r2
    5204:	1000010e 	bge	r2,zero,520c <_ZN14VideoInterface12_drawLineDDAEiiiit+0x64>
    5208:	0085c83a 	sub	r2,zero,r2
    520c:	1009883a 	mov	r4,r2
    5210:	0009c5c0 	call	9c5c <__floatsisf>
    5214:	1007883a 	mov	r3,r2
    5218:	e0fff815 	stw	r3,-32(fp)

	step = (dx >= dy) ? dx : dy;
    521c:	e17ff817 	ldw	r5,-32(fp)
    5220:	e13ff717 	ldw	r4,-36(fp)
    5224:	0009a680 	call	9a68 <__gesf2>
    5228:	10000216 	blt	r2,zero,5234 <_ZN14VideoInterface12_drawLineDDAEiiiit+0x8c>
    522c:	e0bff717 	ldw	r2,-36(fp)
    5230:	00000106 	br	5238 <_ZN14VideoInterface12_drawLineDDAEiiiit+0x90>
    5234:	e0bff817 	ldw	r2,-32(fp)
    5238:	e0bff915 	stw	r2,-28(fp)

	dx = dx / step;
    523c:	e0fff717 	ldw	r3,-36(fp)
    5240:	e0bff917 	ldw	r2,-28(fp)
    5244:	1885fff2 	custom	255,r2,r3,r2
    5248:	e0bff715 	stw	r2,-36(fp)
	dy = dy / step;
    524c:	e0fff817 	ldw	r3,-32(fp)
    5250:	e0bff917 	ldw	r2,-28(fp)
    5254:	1885fff2 	custom	255,r2,r3,r2
    5258:	e0bff815 	stw	r2,-32(fp)

	x = x0;
    525c:	e13ffb17 	ldw	r4,-20(fp)
    5260:	0009c5c0 	call	9c5c <__floatsisf>
    5264:	1007883a 	mov	r3,r2
    5268:	e0fff415 	stw	r3,-48(fp)
	y = y0;
    526c:	e13ffc17 	ldw	r4,-16(fp)
    5270:	0009c5c0 	call	9c5c <__floatsisf>
    5274:	1007883a 	mov	r3,r2
    5278:	e0fff515 	stw	r3,-44(fp)

	for(int i = 0; i < step; i++){
    527c:	e03ff615 	stw	zero,-40(fp)
    5280:	e13ff617 	ldw	r4,-40(fp)
    5284:	0009c5c0 	call	9c5c <__floatsisf>
    5288:	1007883a 	mov	r3,r2
    528c:	e17ff917 	ldw	r5,-28(fp)
    5290:	1809883a 	mov	r4,r3
    5294:	0009b240 	call	9b24 <__lesf2>
    5298:	10000116 	blt	r2,zero,52a0 <_ZN14VideoInterface12_drawLineDDAEiiiit+0xf8>
		this->drawPixel(round(x), round(y), color);
		x += dx;
		y += dy;
	}
};
    529c:	00002c06 	br	5350 <_ZN14VideoInterface12_drawLineDDAEiiiit+0x1a8>

	x = x0;
	y = y0;

	for(int i = 0; i < step; i++){
		this->drawPixel(round(x), round(y), color);
    52a0:	e13ff417 	ldw	r4,-48(fp)
    52a4:	000c2dc0 	call	c2dc <__extendsfdf2>
    52a8:	100b883a 	mov	r5,r2
    52ac:	180d883a 	mov	r6,r3
    52b0:	2809883a 	mov	r4,r5
    52b4:	300b883a 	mov	r5,r6
    52b8:	00076a00 	call	76a0 <round>
    52bc:	100b883a 	mov	r5,r2
    52c0:	180d883a 	mov	r6,r3
    52c4:	2809883a 	mov	r4,r5
    52c8:	300b883a 	mov	r5,r6
    52cc:	000c1800 	call	c180 <__fixdfsi>
    52d0:	1021883a 	mov	r16,r2
    52d4:	e13ff517 	ldw	r4,-44(fp)
    52d8:	000c2dc0 	call	c2dc <__extendsfdf2>
    52dc:	100b883a 	mov	r5,r2
    52e0:	180d883a 	mov	r6,r3
    52e4:	2809883a 	mov	r4,r5
    52e8:	300b883a 	mov	r5,r6
    52ec:	00076a00 	call	76a0 <round>
    52f0:	100b883a 	mov	r5,r2
    52f4:	180d883a 	mov	r6,r3
    52f8:	2809883a 	mov	r4,r5
    52fc:	300b883a 	mov	r5,r6
    5300:	000c1800 	call	c180 <__fixdfsi>
    5304:	1007883a 	mov	r3,r2
    5308:	e0bffe0b 	ldhu	r2,-8(fp)
    530c:	100f883a 	mov	r7,r2
    5310:	180d883a 	mov	r6,r3
    5314:	800b883a 	mov	r5,r16
    5318:	e13ffa17 	ldw	r4,-24(fp)
    531c:	0004da80 	call	4da8 <_ZN14VideoInterface9drawPixelEiit>
		x += dx;
    5320:	e0fff417 	ldw	r3,-48(fp)
    5324:	e0bff717 	ldw	r2,-36(fp)
    5328:	1885ff72 	custom	253,r2,r3,r2
    532c:	e0bff415 	stw	r2,-48(fp)
		y += dy;
    5330:	e0fff517 	ldw	r3,-44(fp)
    5334:	e0bff817 	ldw	r2,-32(fp)
    5338:	1885ff72 	custom	253,r2,r3,r2
    533c:	e0bff515 	stw	r2,-44(fp)
	dy = dy / step;

	x = x0;
	y = y0;

	for(int i = 0; i < step; i++){
    5340:	e0bff617 	ldw	r2,-40(fp)
    5344:	10800044 	addi	r2,r2,1
    5348:	e0bff615 	stw	r2,-40(fp)
    534c:	003fcc06 	br	5280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005280>
		this->drawPixel(round(x), round(y), color);
		x += dx;
		y += dy;
	}
};
    5350:	e6ffff04 	addi	sp,fp,-4
    5354:	dfc00217 	ldw	ra,8(sp)
    5358:	df000117 	ldw	fp,4(sp)
    535c:	dc000017 	ldw	r16,0(sp)
    5360:	dec00304 	addi	sp,sp,12
    5364:	f800283a 	ret

00005368 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit>:

void VideoInterface::_drawLineBRESENHAM(int x0, int y0, int x1, int y1, uint16_t color){
    5368:	deffea04 	addi	sp,sp,-88
    536c:	dfc01515 	stw	ra,84(sp)
    5370:	df001415 	stw	fp,80(sp)
    5374:	dcc01315 	stw	r19,76(sp)
    5378:	dc801215 	stw	r18,72(sp)
    537c:	dc401115 	stw	r17,68(sp)
    5380:	dc001015 	stw	r16,64(sp)
    5384:	df001404 	addi	fp,sp,80
    5388:	e13ff715 	stw	r4,-36(fp)
    538c:	e17ff815 	stw	r5,-32(fp)
    5390:	e1bff915 	stw	r6,-28(fp)
    5394:	e1fffa15 	stw	r7,-24(fp)
    5398:	e0800317 	ldw	r2,12(fp)
    539c:	e0bffb0d 	sth	r2,-20(fp)
	int x, y, dx, dy, dx1, dy1, px, py, xe, ye, i;
	dx = x1 - x0;
    53a0:	e0fffa17 	ldw	r3,-24(fp)
    53a4:	e0bff817 	ldw	r2,-32(fp)
    53a8:	1885c83a 	sub	r2,r3,r2
    53ac:	e0bff315 	stw	r2,-52(fp)
	dy = y1 - y0;
    53b0:	e0c00217 	ldw	r3,8(fp)
    53b4:	e0bff917 	ldw	r2,-28(fp)
    53b8:	1885c83a 	sub	r2,r3,r2
    53bc:	e0bff415 	stw	r2,-48(fp)
	dx1 = fabs(dx);
    53c0:	e13ff317 	ldw	r4,-52(fp)
    53c4:	000c2000 	call	c200 <__floatsidf>
    53c8:	1009883a 	mov	r4,r2
    53cc:	180b883a 	mov	r5,r3
    53d0:	2025883a 	mov	r18,r4
    53d4:	00a00034 	movhi	r2,32768
    53d8:	10bfffc4 	addi	r2,r2,-1
    53dc:	28a6703a 	and	r19,r5,r2
    53e0:	9009883a 	mov	r4,r18
    53e4:	980b883a 	mov	r5,r19
    53e8:	000c1800 	call	c180 <__fixdfsi>
    53ec:	e0bff515 	stw	r2,-44(fp)
	dy1 = fabs(dy);
    53f0:	e13ff417 	ldw	r4,-48(fp)
    53f4:	000c2000 	call	c200 <__floatsidf>
    53f8:	1009883a 	mov	r4,r2
    53fc:	180b883a 	mov	r5,r3
    5400:	2021883a 	mov	r16,r4
    5404:	00a00034 	movhi	r2,32768
    5408:	10bfffc4 	addi	r2,r2,-1
    540c:	28a2703a 	and	r17,r5,r2
    5410:	8009883a 	mov	r4,r16
    5414:	880b883a 	mov	r5,r17
    5418:	000c1800 	call	c180 <__fixdfsi>
    541c:	e0bff615 	stw	r2,-40(fp)
	px = 2*dy1 - dx1;
    5420:	e0bff617 	ldw	r2,-40(fp)
    5424:	1085883a 	add	r2,r2,r2
    5428:	1007883a 	mov	r3,r2
    542c:	e0bff517 	ldw	r2,-44(fp)
    5430:	1885c83a 	sub	r2,r3,r2
    5434:	e0bfee15 	stw	r2,-72(fp)
	py = 2*dx1 - dy1;
    5438:	e0bff517 	ldw	r2,-44(fp)
    543c:	1085883a 	add	r2,r2,r2
    5440:	1007883a 	mov	r3,r2
    5444:	e0bff617 	ldw	r2,-40(fp)
    5448:	1885c83a 	sub	r2,r3,r2
    544c:	e0bfef15 	stw	r2,-68(fp)
	if(dy1 <= dx1 ){
    5450:	e0bff617 	ldw	r2,-40(fp)
    5454:	e0fff517 	ldw	r3,-44(fp)
    5458:	18804616 	blt	r3,r2,5574 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x20c>
		if(dx >= 0){
    545c:	e0bff317 	ldw	r2,-52(fp)
    5460:	10000716 	blt	r2,zero,5480 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x118>
			x = x0;
    5464:	e0bff817 	ldw	r2,-32(fp)
    5468:	e0bfec15 	stw	r2,-80(fp)
			y = y0;
    546c:	e0bff917 	ldw	r2,-28(fp)
    5470:	e0bfed15 	stw	r2,-76(fp)
			xe = x1;
    5474:	e0bffa17 	ldw	r2,-24(fp)
    5478:	e0bff015 	stw	r2,-64(fp)
    547c:	00000606 	br	5498 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x130>
		}else{
			x = x1;
    5480:	e0bffa17 	ldw	r2,-24(fp)
    5484:	e0bfec15 	stw	r2,-80(fp)
			y = y1;
    5488:	e0800217 	ldw	r2,8(fp)
    548c:	e0bfed15 	stw	r2,-76(fp)
			xe = x0;
    5490:	e0bff817 	ldw	r2,-32(fp)
    5494:	e0bff015 	stw	r2,-64(fp)
		}
		this->drawPixel(x, y, color);
    5498:	e0bffb0b 	ldhu	r2,-20(fp)
    549c:	100f883a 	mov	r7,r2
    54a0:	e1bfed17 	ldw	r6,-76(fp)
    54a4:	e17fec17 	ldw	r5,-80(fp)
    54a8:	e13ff717 	ldw	r4,-36(fp)
    54ac:	0004da80 	call	4da8 <_ZN14VideoInterface9drawPixelEiit>
		for(i = 0; x < xe; i++){
    54b0:	e03ff215 	stw	zero,-56(fp)
    54b4:	e0ffec17 	ldw	r3,-80(fp)
    54b8:	e0bff017 	ldw	r2,-64(fp)
    54bc:	1880730e 	bge	r3,r2,568c <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x324>
			x += 1;
    54c0:	e0bfec17 	ldw	r2,-80(fp)
    54c4:	10800044 	addi	r2,r2,1
    54c8:	e0bfec15 	stw	r2,-80(fp)
			if(px < 0){
    54cc:	e0bfee17 	ldw	r2,-72(fp)
    54d0:	1000070e 	bge	r2,zero,54f0 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x188>
				px += 2*dy1;
    54d4:	e0bff617 	ldw	r2,-40(fp)
    54d8:	1085883a 	add	r2,r2,r2
    54dc:	1007883a 	mov	r3,r2
    54e0:	e0bfee17 	ldw	r2,-72(fp)
    54e4:	10c5883a 	add	r2,r2,r3
    54e8:	e0bfee15 	stw	r2,-72(fp)
    54ec:	00001706 	br	554c <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x1e4>
			}else{
				if((dx < 0 && dy < 0)||(dx > 0 && dy > 0)){
    54f0:	e0bff317 	ldw	r2,-52(fp)
    54f4:	1000020e 	bge	r2,zero,5500 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x198>
    54f8:	e0bff417 	ldw	r2,-48(fp)
    54fc:	10000416 	blt	r2,zero,5510 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x1a8>
    5500:	e0bff317 	ldw	r2,-52(fp)
    5504:	0080060e 	bge	zero,r2,5520 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x1b8>
    5508:	e0bff417 	ldw	r2,-48(fp)
    550c:	0080040e 	bge	zero,r2,5520 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x1b8>
					y += 1;
    5510:	e0bfed17 	ldw	r2,-76(fp)
    5514:	10800044 	addi	r2,r2,1
    5518:	e0bfed15 	stw	r2,-76(fp)
    551c:	00000306 	br	552c <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x1c4>
				}else{
					y -= 1;
    5520:	e0bfed17 	ldw	r2,-76(fp)
    5524:	10bfffc4 	addi	r2,r2,-1
    5528:	e0bfed15 	stw	r2,-76(fp)
				}
				px = px + 2*(dy1 - dx1);
    552c:	e0fff617 	ldw	r3,-40(fp)
    5530:	e0bff517 	ldw	r2,-44(fp)
    5534:	1885c83a 	sub	r2,r3,r2
    5538:	1085883a 	add	r2,r2,r2
    553c:	1007883a 	mov	r3,r2
    5540:	e0bfee17 	ldw	r2,-72(fp)
    5544:	10c5883a 	add	r2,r2,r3
    5548:	e0bfee15 	stw	r2,-72(fp)
			}
			this->drawPixel(x, y, color);
    554c:	e0bffb0b 	ldhu	r2,-20(fp)
    5550:	100f883a 	mov	r7,r2
    5554:	e1bfed17 	ldw	r6,-76(fp)
    5558:	e17fec17 	ldw	r5,-80(fp)
    555c:	e13ff717 	ldw	r4,-36(fp)
    5560:	0004da80 	call	4da8 <_ZN14VideoInterface9drawPixelEiit>
			x = x1;
			y = y1;
			xe = x0;
		}
		this->drawPixel(x, y, color);
		for(i = 0; x < xe; i++){
    5564:	e0bff217 	ldw	r2,-56(fp)
    5568:	10800044 	addi	r2,r2,1
    556c:	e0bff215 	stw	r2,-56(fp)
    5570:	003fd006 	br	54b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70054b4>
				px = px + 2*(dy1 - dx1);
			}
			this->drawPixel(x, y, color);
		}
	}else{
		if(dy >= 0){
    5574:	e0bff417 	ldw	r2,-48(fp)
    5578:	10000716 	blt	r2,zero,5598 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x230>
			x = x0;
    557c:	e0bff817 	ldw	r2,-32(fp)
    5580:	e0bfec15 	stw	r2,-80(fp)
			y = y0;
    5584:	e0bff917 	ldw	r2,-28(fp)
    5588:	e0bfed15 	stw	r2,-76(fp)
			ye = y1;
    558c:	e0800217 	ldw	r2,8(fp)
    5590:	e0bff115 	stw	r2,-60(fp)
    5594:	00000606 	br	55b0 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x248>
		}else{
			x = x1;
    5598:	e0bffa17 	ldw	r2,-24(fp)
    559c:	e0bfec15 	stw	r2,-80(fp)
			y = y1;
    55a0:	e0800217 	ldw	r2,8(fp)
    55a4:	e0bfed15 	stw	r2,-76(fp)
			ye = y0;
    55a8:	e0bff917 	ldw	r2,-28(fp)
    55ac:	e0bff115 	stw	r2,-60(fp)
		}
		this->drawPixel(x, y, color);
    55b0:	e0bffb0b 	ldhu	r2,-20(fp)
    55b4:	100f883a 	mov	r7,r2
    55b8:	e1bfed17 	ldw	r6,-76(fp)
    55bc:	e17fec17 	ldw	r5,-80(fp)
    55c0:	e13ff717 	ldw	r4,-36(fp)
    55c4:	0004da80 	call	4da8 <_ZN14VideoInterface9drawPixelEiit>
		for(i = 0;y < ye; i++){
    55c8:	e03ff215 	stw	zero,-56(fp)
    55cc:	e0ffed17 	ldw	r3,-76(fp)
    55d0:	e0bff117 	ldw	r2,-60(fp)
    55d4:	18802d0e 	bge	r3,r2,568c <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x324>
			y += 1;
    55d8:	e0bfed17 	ldw	r2,-76(fp)
    55dc:	10800044 	addi	r2,r2,1
    55e0:	e0bfed15 	stw	r2,-76(fp)
			if(py <= 0){
    55e4:	e0bfef17 	ldw	r2,-68(fp)
    55e8:	00800716 	blt	zero,r2,5608 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x2a0>
				py = py + 2*dx1;
    55ec:	e0bff517 	ldw	r2,-44(fp)
    55f0:	1085883a 	add	r2,r2,r2
    55f4:	1007883a 	mov	r3,r2
    55f8:	e0bfef17 	ldw	r2,-68(fp)
    55fc:	10c5883a 	add	r2,r2,r3
    5600:	e0bfef15 	stw	r2,-68(fp)
    5604:	00001706 	br	5664 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x2fc>
			}else{
				if((dx < 0 && dy < 0)||(dx > 0 && dy > 0)){
    5608:	e0bff317 	ldw	r2,-52(fp)
    560c:	1000020e 	bge	r2,zero,5618 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x2b0>
    5610:	e0bff417 	ldw	r2,-48(fp)
    5614:	10000416 	blt	r2,zero,5628 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x2c0>
    5618:	e0bff317 	ldw	r2,-52(fp)
    561c:	0080060e 	bge	zero,r2,5638 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x2d0>
    5620:	e0bff417 	ldw	r2,-48(fp)
    5624:	0080040e 	bge	zero,r2,5638 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x2d0>
					x += 1;
    5628:	e0bfec17 	ldw	r2,-80(fp)
    562c:	10800044 	addi	r2,r2,1
    5630:	e0bfec15 	stw	r2,-80(fp)
    5634:	00000306 	br	5644 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x2dc>
				}else{
					x -= 1;
    5638:	e0bfec17 	ldw	r2,-80(fp)
    563c:	10bfffc4 	addi	r2,r2,-1
    5640:	e0bfec15 	stw	r2,-80(fp)
				}
				py = py + 2*(dx1 - dy1);
    5644:	e0fff517 	ldw	r3,-44(fp)
    5648:	e0bff617 	ldw	r2,-40(fp)
    564c:	1885c83a 	sub	r2,r3,r2
    5650:	1085883a 	add	r2,r2,r2
    5654:	1007883a 	mov	r3,r2
    5658:	e0bfef17 	ldw	r2,-68(fp)
    565c:	10c5883a 	add	r2,r2,r3
    5660:	e0bfef15 	stw	r2,-68(fp)
			}
			this->drawPixel(x, y, color);
    5664:	e0bffb0b 	ldhu	r2,-20(fp)
    5668:	100f883a 	mov	r7,r2
    566c:	e1bfed17 	ldw	r6,-76(fp)
    5670:	e17fec17 	ldw	r5,-80(fp)
    5674:	e13ff717 	ldw	r4,-36(fp)
    5678:	0004da80 	call	4da8 <_ZN14VideoInterface9drawPixelEiit>
			x = x1;
			y = y1;
			ye = y0;
		}
		this->drawPixel(x, y, color);
		for(i = 0;y < ye; i++){
    567c:	e0bff217 	ldw	r2,-56(fp)
    5680:	10800044 	addi	r2,r2,1
    5684:	e0bff215 	stw	r2,-56(fp)
    5688:	003fd006 	br	55cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70055cc>
				py = py + 2*(dx1 - dy1);
			}
			this->drawPixel(x, y, color);
		}
	}
};
    568c:	0001883a 	nop
    5690:	e6fffc04 	addi	sp,fp,-16
    5694:	dfc00517 	ldw	ra,20(sp)
    5698:	df000417 	ldw	fp,16(sp)
    569c:	dcc00317 	ldw	r19,12(sp)
    56a0:	dc800217 	ldw	r18,8(sp)
    56a4:	dc400117 	ldw	r17,4(sp)
    56a8:	dc000017 	ldw	r16,0(sp)
    56ac:	dec00604 	addi	sp,sp,24
    56b0:	f800283a 	ret

000056b4 <_Z4JTAGPKc>:
#define TASK1_PRIORITY      1
#define TASK2_PRIORITY      2
#define TASK3_PRIORITY      3

void JTAG(const char* str)
{
    56b4:	defffc04 	addi	sp,sp,-16
    56b8:	df000315 	stw	fp,12(sp)
    56bc:	df000304 	addi	fp,sp,12
    56c0:	e13fff15 	stw	r4,-4(fp)
	volatile int * JTAG_UART_ptr 	= (int *) 0x10001000;
    56c4:	00840034 	movhi	r2,4096
    56c8:	10840004 	addi	r2,r2,4096
    56cc:	e0bffd15 	stw	r2,-12(fp)
	int control = *(JTAG_UART_ptr + 1);
    56d0:	e0bffd17 	ldw	r2,-12(fp)
    56d4:	10800104 	addi	r2,r2,4
    56d8:	10800017 	ldw	r2,0(r2)
    56dc:	e0bffe15 	stw	r2,-8(fp)
	while(*(str)){
    56e0:	e0bfff17 	ldw	r2,-4(fp)
    56e4:	10800003 	ldbu	r2,0(r2)
    56e8:	10803fcc 	andi	r2,r2,255
    56ec:	1080201c 	xori	r2,r2,128
    56f0:	10bfe004 	addi	r2,r2,-128
    56f4:	10000d26 	beq	r2,zero,572c <_Z4JTAGPKc+0x78>
		if (control & 0xFFFF0000)
    56f8:	e0bffe17 	ldw	r2,-8(fp)
    56fc:	10bfffec 	andhi	r2,r2,65535
    5700:	103ff726 	beq	r2,zero,56e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056e0>
			*(JTAG_UART_ptr) = *(str++);
    5704:	e0bfff17 	ldw	r2,-4(fp)
    5708:	10c00044 	addi	r3,r2,1
    570c:	e0ffff15 	stw	r3,-4(fp)
    5710:	10800003 	ldbu	r2,0(r2)
    5714:	10c03fcc 	andi	r3,r2,255
    5718:	18c0201c 	xori	r3,r3,128
    571c:	18ffe004 	addi	r3,r3,-128
    5720:	e0bffd17 	ldw	r2,-12(fp)
    5724:	10c00015 	stw	r3,0(r2)

void JTAG(const char* str)
{
	volatile int * JTAG_UART_ptr 	= (int *) 0x10001000;
	int control = *(JTAG_UART_ptr + 1);
	while(*(str)){
    5728:	003fed06 	br	56e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70056e0>
		if (control & 0xFFFF0000)
			*(JTAG_UART_ptr) = *(str++);
	}
}
    572c:	0001883a 	nop
    5730:	e037883a 	mov	sp,fp
    5734:	df000017 	ldw	fp,0(sp)
    5738:	dec00104 	addi	sp,sp,4
    573c:	f800283a 	ret

00005740 <main>:

void GameLoop(void* pdata);
void gfxLoop(void* pdata);
void inputLoop(void* pdata);

int main(void){
    5740:	defbc604 	addi	sp,sp,-4328
    5744:	dfc43915 	stw	ra,4324(sp)
    5748:	df043815 	stw	fp,4320(sp)
    574c:	df043804 	addi	fp,sp,4320
	JTAG("Starting App\r\n");
    5750:	010000b4 	movhi	r4,2
    5754:	211fd604 	addi	r4,r4,32600
    5758:	00056b40 	call	56b4 <_Z4JTAGPKc>

	VGA vga((short*)0x08000000, 320, 240, 1);
    575c:	00800044 	movi	r2,1
    5760:	d8800015 	stw	r2,0(sp)
    5764:	01c03c04 	movi	r7,240
    5768:	01805004 	movi	r6,320
    576c:	01420034 	movhi	r5,2048
    5770:	e13bc904 	addi	r4,fp,-4316
    5774:	0004b780 	call	4b78 <_ZN3VGAC1EPsiii>
	Keyboard kb;
    5778:	e0bbd204 	addi	r2,fp,-4280
    577c:	1009883a 	mov	r4,r2
    5780:	00043200 	call	4320 <_ZN8KeyboardC1Ev>
	Game game(&kb, &vga);
    5784:	e0fbd204 	addi	r3,fp,-4280
    5788:	e0bbd604 	addi	r2,fp,-4264
    578c:	e1bbc904 	addi	r6,fp,-4316
    5790:	180b883a 	mov	r5,r3
    5794:	1009883a 	mov	r4,r2
    5798:	00005f00 	call	5f0 <_ZN4GameC1EP19ControllerInterfaceP14VideoInterface>

	OSTaskCreate(GameLoop, (void*) &game, &task3_stk[TASK_STACKSIZE-1],  TASK1_PRIORITY);
    579c:	e0bbd604 	addi	r2,fp,-4264
    57a0:	01c00044 	movi	r7,1
    57a4:	01800134 	movhi	r6,4
    57a8:	31a1fe04 	addi	r6,r6,-30728
    57ac:	100b883a 	mov	r5,r2
    57b0:	01000034 	movhi	r4,0
    57b4:	21162d04 	addi	r4,r4,22708
    57b8:	002154c0 	call	2154c <OSTaskCreate>
	OSTaskCreate(gfxLoop,  (void*) &game, &task1_stk[TASK_STACKSIZE-1],  TASK2_PRIORITY);
    57bc:	e0bbd604 	addi	r2,fp,-4264
    57c0:	01c00084 	movi	r7,2
    57c4:	018000f4 	movhi	r6,3
    57c8:	3181fe04 	addi	r6,r6,2040
    57cc:	100b883a 	mov	r5,r2
    57d0:	01000034 	movhi	r4,0
    57d4:	21160604 	addi	r4,r4,22552
    57d8:	002154c0 	call	2154c <OSTaskCreate>
	OSTaskCreate(inputLoop,(void*) &kb, &task2_stk[TASK_STACKSIZE-1],  TASK3_PRIORITY);
    57dc:	e0bbd204 	addi	r2,fp,-4280
    57e0:	01c000c4 	movi	r7,3
    57e4:	018000f4 	movhi	r6,3
    57e8:	3191fe04 	addi	r6,r6,18424
    57ec:	100b883a 	mov	r5,r2
    57f0:	01000034 	movhi	r4,0
    57f4:	21161804 	addi	r4,r4,22624
    57f8:	002154c0 	call	2154c <OSTaskCreate>

	OSStart();
    57fc:	001c0500 	call	1c050 <OSStart>
	return 0;
    5800:	0005883a 	mov	r2,zero
}
    5804:	e037883a 	mov	sp,fp
    5808:	dfc00117 	ldw	ra,4(sp)
    580c:	df000017 	ldw	fp,0(sp)
    5810:	dec00204 	addi	sp,sp,8
    5814:	f800283a 	ret

00005818 <_Z7gfxLoopPv>:

void gfxLoop(void* pdata){
    5818:	defffc04 	addi	sp,sp,-16
    581c:	dfc00315 	stw	ra,12(sp)
    5820:	df000215 	stw	fp,8(sp)
    5824:	df000204 	addi	fp,sp,8
    5828:	e13fff15 	stw	r4,-4(fp)
	JTAG("GFX Started\r\n");
    582c:	010000b4 	movhi	r4,2
    5830:	211fda04 	addi	r4,r4,32616
    5834:	00056b40 	call	56b4 <_Z4JTAGPKc>

	Game* game = (Game*) pdata;
    5838:	e0bfff17 	ldw	r2,-4(fp)
    583c:	e0bffe15 	stw	r2,-8(fp)
	while(1){
		game->draw();
    5840:	e13ffe17 	ldw	r4,-8(fp)
    5844:	00016d40 	call	16d4 <_ZN4Game4drawEv>
		OSTimeDlyHMSM(0, 0, 0, 100);
    5848:	01c01904 	movi	r7,100
    584c:	000d883a 	mov	r6,zero
    5850:	000b883a 	mov	r5,zero
    5854:	0009883a 	mov	r4,zero
    5858:	00228cc0 	call	228cc <OSTimeDlyHMSM>

void gfxLoop(void* pdata){
	JTAG("GFX Started\r\n");

	Game* game = (Game*) pdata;
	while(1){
    585c:	003ff806 	br	5840 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005840>

00005860 <_Z9inputLoopPv>:
		game->draw();
		OSTimeDlyHMSM(0, 0, 0, 100);
	}
}

void inputLoop(void* pdata){
    5860:	defffc04 	addi	sp,sp,-16
    5864:	dfc00315 	stw	ra,12(sp)
    5868:	df000215 	stw	fp,8(sp)
    586c:	df000204 	addi	fp,sp,8
    5870:	e13fff15 	stw	r4,-4(fp)
	JTAG("Input polling started \r\n");
    5874:	010000b4 	movhi	r4,2
    5878:	211fde04 	addi	r4,r4,32632
    587c:	00056b40 	call	56b4 <_Z4JTAGPKc>

	Keyboard* kb = (Keyboard*) pdata;
    5880:	e0bfff17 	ldw	r2,-4(fp)
    5884:	e0bffe15 	stw	r2,-8(fp)


	while(1)
	{
		kb->update();
    5888:	e0bffe17 	ldw	r2,-8(fp)
    588c:	10800017 	ldw	r2,0(r2)
    5890:	10800017 	ldw	r2,0(r2)
    5894:	e13ffe17 	ldw	r4,-8(fp)
    5898:	103ee83a 	callr	r2
		OSTimeDlyHMSM(0, 0, 0, 100);
    589c:	01c01904 	movi	r7,100
    58a0:	000d883a 	mov	r6,zero
    58a4:	000b883a 	mov	r5,zero
    58a8:	0009883a 	mov	r4,zero
    58ac:	00228cc0 	call	228cc <OSTimeDlyHMSM>
	JTAG("Input polling started \r\n");

	Keyboard* kb = (Keyboard*) pdata;


	while(1)
    58b0:	003ff506 	br	5888 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005888>

000058b4 <_Z8GameLoopPv>:
		kb->update();
		OSTimeDlyHMSM(0, 0, 0, 100);
	}
}

void GameLoop(void* pdata){
    58b4:	defffc04 	addi	sp,sp,-16
    58b8:	dfc00315 	stw	ra,12(sp)
    58bc:	df000215 	stw	fp,8(sp)
    58c0:	df000204 	addi	fp,sp,8
    58c4:	e13fff15 	stw	r4,-4(fp)
	Game* game = (Game*) pdata;
    58c8:	e0bfff17 	ldw	r2,-4(fp)
    58cc:	e0bffe15 	stw	r2,-8(fp)

	while (1)
	{
		game->update(100);
    58d0:	01401904 	movi	r5,100
    58d4:	e13ffe17 	ldw	r4,-8(fp)
    58d8:	00009380 	call	938 <_ZN4Game6updateEi>
		OSTimeDlyHMSM(0, 0, 0, 100);
    58dc:	01c01904 	movi	r7,100
    58e0:	000d883a 	mov	r6,zero
    58e4:	000b883a 	mov	r5,zero
    58e8:	0009883a 	mov	r4,zero
    58ec:	00228cc0 	call	228cc <OSTimeDlyHMSM>
}

void GameLoop(void* pdata){
	Game* game = (Game*) pdata;

	while (1)
    58f0:	003ff706 	br	58d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70058d0>

000058f4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    58f4:	008000b4 	movhi	r2,2
    58f8:	109ff404 	addi	r2,r2,32720
    58fc:	20800015 	stw	r2,0(r4)
    5900:	0005c481 	jmpi	5c48 <_ZN10__cxxabiv117__class_type_infoD1Ev>

00005904 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    5904:	defffe04 	addi	sp,sp,-8
    5908:	008000b4 	movhi	r2,2
    590c:	dc000015 	stw	r16,0(sp)
    5910:	dfc00115 	stw	ra,4(sp)
    5914:	109ff404 	addi	r2,r2,32720
    5918:	20800015 	stw	r2,0(r4)
    591c:	2021883a 	mov	r16,r4
    5920:	0005c480 	call	5c48 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    5924:	8009883a 	mov	r4,r16
    5928:	dfc00117 	ldw	ra,4(sp)
    592c:	dc000017 	ldw	r16,0(sp)
    5930:	dec00204 	addi	sp,sp,8
    5934:	0005f1c1 	jmpi	5f1c <_ZdlPv>

00005938 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    5938:	defff504 	addi	sp,sp,-44
    593c:	dc000115 	stw	r16,4(sp)
    5940:	38800117 	ldw	r2,4(r7)
    5944:	24000117 	ldw	r16,4(r4)
    5948:	df000915 	stw	fp,36(sp)
    594c:	ddc00815 	stw	r23,32(sp)
    5950:	dd800715 	stw	r22,28(sp)
    5954:	dcc00415 	stw	r19,16(sp)
    5958:	dc800315 	stw	r18,12(sp)
    595c:	dc400215 	stw	r17,8(sp)
    5960:	dfc00a15 	stw	ra,40(sp)
    5964:	dd400615 	stw	r21,24(sp)
    5968:	dd000515 	stw	r20,20(sp)
    596c:	2823883a 	mov	r17,r5
    5970:	3039883a 	mov	fp,r6
    5974:	dcc00b17 	ldw	r19,44(sp)
    5978:	ddc00c17 	ldw	r23,48(sp)
    597c:	dd800d17 	ldw	r22,52(sp)
    5980:	dc800e17 	ldw	r18,56(sp)
    5984:	80800b26 	beq	r16,r2,59b4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
    5988:	80c00007 	ldb	r3,0(r16)
    598c:	2029883a 	mov	r20,r4
    5990:	01000a84 	movi	r4,42
    5994:	382b883a 	mov	r21,r7
    5998:	19001a26 	beq	r3,r4,5a04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    599c:	100b883a 	mov	r5,r2
    59a0:	8009883a 	mov	r4,r16
    59a4:	d8c00015 	stw	r3,0(sp)
    59a8:	000dbc40 	call	dbc4 <strcmp>
    59ac:	d8c00017 	ldw	r3,0(sp)
    59b0:	1000141e 	bne	r2,zero,5a04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    59b4:	94c00015 	stw	r19,0(r18)
    59b8:	97000115 	stw	fp,4(r18)
    59bc:	88002816 	blt	r17,zero,5a60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
    59c0:	9c63883a 	add	r17,r19,r17
    59c4:	b4403226 	beq	r22,r17,5a90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
    59c8:	00800044 	movi	r2,1
    59cc:	90800315 	stw	r2,12(r18)
    59d0:	0005883a 	mov	r2,zero
    59d4:	dfc00a17 	ldw	ra,40(sp)
    59d8:	df000917 	ldw	fp,36(sp)
    59dc:	ddc00817 	ldw	r23,32(sp)
    59e0:	dd800717 	ldw	r22,28(sp)
    59e4:	dd400617 	ldw	r21,24(sp)
    59e8:	dd000517 	ldw	r20,20(sp)
    59ec:	dcc00417 	ldw	r19,16(sp)
    59f0:	dc800317 	ldw	r18,12(sp)
    59f4:	dc400217 	ldw	r17,8(sp)
    59f8:	dc000117 	ldw	r16,4(sp)
    59fc:	dec00b04 	addi	sp,sp,44
    5a00:	f800283a 	ret
    5a04:	9d801926 	beq	r19,r22,5a6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
    5a08:	a1000217 	ldw	r4,8(r20)
    5a0c:	a80f883a 	mov	r7,r21
    5a10:	e00d883a 	mov	r6,fp
    5a14:	20800017 	ldw	r2,0(r4)
    5a18:	dc800e15 	stw	r18,56(sp)
    5a1c:	dd800d15 	stw	r22,52(sp)
    5a20:	ddc00c15 	stw	r23,48(sp)
    5a24:	dcc00b15 	stw	r19,44(sp)
    5a28:	10800717 	ldw	r2,28(r2)
    5a2c:	880b883a 	mov	r5,r17
    5a30:	dfc00a17 	ldw	ra,40(sp)
    5a34:	df000917 	ldw	fp,36(sp)
    5a38:	ddc00817 	ldw	r23,32(sp)
    5a3c:	dd800717 	ldw	r22,28(sp)
    5a40:	dd400617 	ldw	r21,24(sp)
    5a44:	dd000517 	ldw	r20,20(sp)
    5a48:	dcc00417 	ldw	r19,16(sp)
    5a4c:	dc800317 	ldw	r18,12(sp)
    5a50:	dc400217 	ldw	r17,8(sp)
    5a54:	dc000117 	ldw	r16,4(sp)
    5a58:	dec00b04 	addi	sp,sp,44
    5a5c:	1000683a 	jmp	r2
    5a60:	00bfff84 	movi	r2,-2
    5a64:	88bfda1e 	bne	r17,r2,59d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059d0>
    5a68:	003fd706 	br	59c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059c8>
    5a6c:	b9400117 	ldw	r5,4(r23)
    5a70:	81400526 	beq	r16,r5,5a88 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
    5a74:	00800a84 	movi	r2,42
    5a78:	18bfe326 	beq	r3,r2,5a08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a08>
    5a7c:	8009883a 	mov	r4,r16
    5a80:	000dbc40 	call	dbc4 <strcmp>
    5a84:	103fe01e 	bne	r2,zero,5a08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005a08>
    5a88:	97000215 	stw	fp,8(r18)
    5a8c:	003fd006 	br	59d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059d0>
    5a90:	00800184 	movi	r2,6
    5a94:	003fcd06 	br	59cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70059cc>

00005a98 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    5a98:	defffa04 	addi	sp,sp,-24
    5a9c:	dc000215 	stw	r16,8(sp)
    5aa0:	dc000617 	ldw	r16,24(sp)
    5aa4:	dc800415 	stw	r18,16(sp)
    5aa8:	dc400315 	stw	r17,12(sp)
    5aac:	dfc00515 	stw	ra,20(sp)
    5ab0:	2023883a 	mov	r17,r4
    5ab4:	2825883a 	mov	r18,r5
    5ab8:	81800b26 	beq	r16,r6,5ae8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
    5abc:	89000217 	ldw	r4,8(r17)
    5ac0:	900b883a 	mov	r5,r18
    5ac4:	20800017 	ldw	r2,0(r4)
    5ac8:	dc000615 	stw	r16,24(sp)
    5acc:	10800817 	ldw	r2,32(r2)
    5ad0:	dfc00517 	ldw	ra,20(sp)
    5ad4:	dc800417 	ldw	r18,16(sp)
    5ad8:	dc400317 	ldw	r17,12(sp)
    5adc:	dc000217 	ldw	r16,8(sp)
    5ae0:	dec00604 	addi	sp,sp,24
    5ae4:	1000683a 	jmp	r2
    5ae8:	21000117 	ldw	r4,4(r4)
    5aec:	39400117 	ldw	r5,4(r7)
    5af0:	21400926 	beq	r4,r5,5b18 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
    5af4:	20c00007 	ldb	r3,0(r4)
    5af8:	00800a84 	movi	r2,42
    5afc:	18bfef26 	beq	r3,r2,5abc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005abc>
    5b00:	d9800015 	stw	r6,0(sp)
    5b04:	d9c00115 	stw	r7,4(sp)
    5b08:	000dbc40 	call	dbc4 <strcmp>
    5b0c:	d9800017 	ldw	r6,0(sp)
    5b10:	d9c00117 	ldw	r7,4(sp)
    5b14:	103fe91e 	bne	r2,zero,5abc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005abc>
    5b18:	00800184 	movi	r2,6
    5b1c:	dfc00517 	ldw	ra,20(sp)
    5b20:	dc800417 	ldw	r18,16(sp)
    5b24:	dc400317 	ldw	r17,12(sp)
    5b28:	dc000217 	ldw	r16,8(sp)
    5b2c:	dec00604 	addi	sp,sp,24
    5b30:	f800283a 	ret

00005b34 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    5b34:	defffb04 	addi	sp,sp,-20
    5b38:	dcc00315 	stw	r19,12(sp)
    5b3c:	dc800215 	stw	r18,8(sp)
    5b40:	dc400115 	stw	r17,4(sp)
    5b44:	dc000015 	stw	r16,0(sp)
    5b48:	dfc00415 	stw	ra,16(sp)
    5b4c:	2027883a 	mov	r19,r4
    5b50:	2821883a 	mov	r16,r5
    5b54:	3023883a 	mov	r17,r6
    5b58:	3825883a 	mov	r18,r7
    5b5c:	0005c8c0 	call	5c8c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    5b60:	10c03fcc 	andi	r3,r2,255
    5b64:	18000726 	beq	r3,zero,5b84 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
    5b68:	dfc00417 	ldw	ra,16(sp)
    5b6c:	dcc00317 	ldw	r19,12(sp)
    5b70:	dc800217 	ldw	r18,8(sp)
    5b74:	dc400117 	ldw	r17,4(sp)
    5b78:	dc000017 	ldw	r16,0(sp)
    5b7c:	dec00504 	addi	sp,sp,20
    5b80:	f800283a 	ret
    5b84:	99000217 	ldw	r4,8(r19)
    5b88:	900f883a 	mov	r7,r18
    5b8c:	880d883a 	mov	r6,r17
    5b90:	20800017 	ldw	r2,0(r4)
    5b94:	800b883a 	mov	r5,r16
    5b98:	10800617 	ldw	r2,24(r2)
    5b9c:	dfc00417 	ldw	ra,16(sp)
    5ba0:	dcc00317 	ldw	r19,12(sp)
    5ba4:	dc800217 	ldw	r18,8(sp)
    5ba8:	dc400117 	ldw	r17,4(sp)
    5bac:	dc000017 	ldw	r16,0(sp)
    5bb0:	dec00504 	addi	sp,sp,20
    5bb4:	1000683a 	jmp	r2

00005bb8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    5bb8:	20800017 	ldw	r2,0(r4)
    5bbc:	defffa04 	addi	sp,sp,-24
    5bc0:	dc000415 	stw	r16,16(sp)
    5bc4:	10800617 	ldw	r2,24(r2)
    5bc8:	3021883a 	mov	r16,r6
    5bcc:	31800017 	ldw	r6,0(r6)
    5bd0:	00c00404 	movi	r3,16
    5bd4:	d8c00215 	stw	r3,8(sp)
    5bd8:	dfc00515 	stw	ra,20(sp)
    5bdc:	d8000015 	stw	zero,0(sp)
    5be0:	d8000115 	stw	zero,4(sp)
    5be4:	d8000315 	stw	zero,12(sp)
    5be8:	d80f883a 	mov	r7,sp
    5bec:	103ee83a 	callr	r2
    5bf0:	d8800117 	ldw	r2,4(sp)
    5bf4:	00c00184 	movi	r3,6
    5bf8:	1080018c 	andi	r2,r2,6
    5bfc:	10c00526 	beq	r2,r3,5c14 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
    5c00:	0005883a 	mov	r2,zero
    5c04:	dfc00517 	ldw	ra,20(sp)
    5c08:	dc000417 	ldw	r16,16(sp)
    5c0c:	dec00604 	addi	sp,sp,24
    5c10:	f800283a 	ret
    5c14:	d8c00017 	ldw	r3,0(sp)
    5c18:	00800044 	movi	r2,1
    5c1c:	80c00015 	stw	r3,0(r16)
    5c20:	dfc00517 	ldw	ra,20(sp)
    5c24:	dc000417 	ldw	r16,16(sp)
    5c28:	dec00604 	addi	sp,sp,24
    5c2c:	f800283a 	ret

00005c30 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    5c30:	d8800017 	ldw	r2,0(sp)
    5c34:	11800226 	beq	r2,r6,5c40 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
    5c38:	00800044 	movi	r2,1
    5c3c:	f800283a 	ret
    5c40:	00800184 	movi	r2,6
    5c44:	f800283a 	ret

00005c48 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    5c48:	008000f4 	movhi	r2,3
    5c4c:	10a00b04 	addi	r2,r2,-32724
    5c50:	20800015 	stw	r2,0(r4)
    5c54:	0005e801 	jmpi	5e80 <_ZNSt9type_infoD1Ev>

00005c58 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    5c58:	defffe04 	addi	sp,sp,-8
    5c5c:	008000f4 	movhi	r2,3
    5c60:	dc000015 	stw	r16,0(sp)
    5c64:	dfc00115 	stw	ra,4(sp)
    5c68:	10a00b04 	addi	r2,r2,-32724
    5c6c:	20800015 	stw	r2,0(r4)
    5c70:	2021883a 	mov	r16,r4
    5c74:	0005e800 	call	5e80 <_ZNSt9type_infoD1Ev>
    5c78:	8009883a 	mov	r4,r16
    5c7c:	dfc00117 	ldw	ra,4(sp)
    5c80:	dc000017 	ldw	r16,0(sp)
    5c84:	dec00204 	addi	sp,sp,8
    5c88:	0005f1c1 	jmpi	5f1c <_ZdlPv>

00005c8c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    5c8c:	21000117 	ldw	r4,4(r4)
    5c90:	29400117 	ldw	r5,4(r5)
    5c94:	defffd04 	addi	sp,sp,-12
    5c98:	dc400115 	stw	r17,4(sp)
    5c9c:	dc000015 	stw	r16,0(sp)
    5ca0:	dfc00215 	stw	ra,8(sp)
    5ca4:	3023883a 	mov	r17,r6
    5ca8:	3821883a 	mov	r16,r7
    5cac:	21400526 	beq	r4,r5,5cc4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
    5cb0:	20c00007 	ldb	r3,0(r4)
    5cb4:	00800a84 	movi	r2,42
    5cb8:	18800d26 	beq	r3,r2,5cf0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    5cbc:	000dbc40 	call	dbc4 <strcmp>
    5cc0:	10000b1e 	bne	r2,zero,5cf0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    5cc4:	00800204 	movi	r2,8
    5cc8:	80800315 	stw	r2,12(r16)
    5ccc:	00800184 	movi	r2,6
    5cd0:	80800115 	stw	r2,4(r16)
    5cd4:	84400015 	stw	r17,0(r16)
    5cd8:	00800044 	movi	r2,1
    5cdc:	dfc00217 	ldw	ra,8(sp)
    5ce0:	dc400117 	ldw	r17,4(sp)
    5ce4:	dc000017 	ldw	r16,0(sp)
    5ce8:	dec00304 	addi	sp,sp,12
    5cec:	f800283a 	ret
    5cf0:	0005883a 	mov	r2,zero
    5cf4:	003ff906 	br	5cdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005cdc>

00005cf8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    5cf8:	defffa04 	addi	sp,sp,-24
    5cfc:	dc800415 	stw	r18,16(sp)
    5d00:	d8800817 	ldw	r2,32(sp)
    5d04:	dc800617 	ldw	r18,24(sp)
    5d08:	dc400315 	stw	r17,12(sp)
    5d0c:	dc000215 	stw	r16,8(sp)
    5d10:	dfc00515 	stw	ra,20(sp)
    5d14:	dc400917 	ldw	r17,36(sp)
    5d18:	24000117 	ldw	r16,4(r4)
    5d1c:	90801526 	beq	r18,r2,5d74 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
    5d20:	39400117 	ldw	r5,4(r7)
    5d24:	2c000826 	beq	r5,r16,5d48 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
    5d28:	80c00007 	ldb	r3,0(r16)
    5d2c:	00800a84 	movi	r2,42
    5d30:	18800926 	beq	r3,r2,5d58 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    5d34:	8009883a 	mov	r4,r16
    5d38:	d9800115 	stw	r6,4(sp)
    5d3c:	000dbc40 	call	dbc4 <strcmp>
    5d40:	d9800117 	ldw	r6,4(sp)
    5d44:	1000041e 	bne	r2,zero,5d58 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    5d48:	00800044 	movi	r2,1
    5d4c:	8c800015 	stw	r18,0(r17)
    5d50:	89800115 	stw	r6,4(r17)
    5d54:	88800315 	stw	r2,12(r17)
    5d58:	0005883a 	mov	r2,zero
    5d5c:	dfc00517 	ldw	ra,20(sp)
    5d60:	dc800417 	ldw	r18,16(sp)
    5d64:	dc400317 	ldw	r17,12(sp)
    5d68:	dc000217 	ldw	r16,8(sp)
    5d6c:	dec00604 	addi	sp,sp,24
    5d70:	f800283a 	ret
    5d74:	d8800717 	ldw	r2,28(sp)
    5d78:	11400117 	ldw	r5,4(r2)
    5d7c:	81400a26 	beq	r16,r5,5da8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
    5d80:	80c00007 	ldb	r3,0(r16)
    5d84:	00800a84 	movi	r2,42
    5d88:	18800c26 	beq	r3,r2,5dbc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
    5d8c:	8009883a 	mov	r4,r16
    5d90:	d9800115 	stw	r6,4(sp)
    5d94:	d9c00015 	stw	r7,0(sp)
    5d98:	000dbc40 	call	dbc4 <strcmp>
    5d9c:	d9800117 	ldw	r6,4(sp)
    5da0:	d9c00017 	ldw	r7,0(sp)
    5da4:	1000021e 	bne	r2,zero,5db0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
    5da8:	89800215 	stw	r6,8(r17)
    5dac:	003fea06 	br	5d58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d58>
    5db0:	39400117 	ldw	r5,4(r7)
    5db4:	817fdf1e 	bne	r16,r5,5d34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d34>
    5db8:	003fe306 	br	5d48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d48>
    5dbc:	38800117 	ldw	r2,4(r7)
    5dc0:	80bfe51e 	bne	r16,r2,5d58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d58>
    5dc4:	003fe006 	br	5d48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d48>

00005dc8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    5dc8:	20800117 	ldw	r2,4(r4)
    5dcc:	28c00117 	ldw	r3,4(r5)
    5dd0:	10c02926 	beq	r2,r3,5e78 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
    5dd4:	defffb04 	addi	sp,sp,-20
    5dd8:	dcc00315 	stw	r19,12(sp)
    5ddc:	dc800215 	stw	r18,8(sp)
    5de0:	dc400115 	stw	r17,4(sp)
    5de4:	dc000015 	stw	r16,0(sp)
    5de8:	dfc00415 	stw	ra,16(sp)
    5dec:	2821883a 	mov	r16,r5
    5df0:	11400007 	ldb	r5,0(r2)
    5df4:	2025883a 	mov	r18,r4
    5df8:	01000a84 	movi	r4,42
    5dfc:	3823883a 	mov	r17,r7
    5e00:	3027883a 	mov	r19,r6
    5e04:	29000626 	beq	r5,r4,5e20 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    5e08:	180b883a 	mov	r5,r3
    5e0c:	1009883a 	mov	r4,r2
    5e10:	000dbc40 	call	dbc4 <strcmp>
    5e14:	1000021e 	bne	r2,zero,5e20 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    5e18:	00800044 	movi	r2,1
    5e1c:	00000306 	br	5e2c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
    5e20:	008000c4 	movi	r2,3
    5e24:	1440082e 	bgeu	r2,r17,5e48 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
    5e28:	0005883a 	mov	r2,zero
    5e2c:	dfc00417 	ldw	ra,16(sp)
    5e30:	dcc00317 	ldw	r19,12(sp)
    5e34:	dc800217 	ldw	r18,8(sp)
    5e38:	dc400117 	ldw	r17,4(sp)
    5e3c:	dc000017 	ldw	r16,0(sp)
    5e40:	dec00504 	addi	sp,sp,20
    5e44:	f800283a 	ret
    5e48:	80800017 	ldw	r2,0(r16)
    5e4c:	980d883a 	mov	r6,r19
    5e50:	900b883a 	mov	r5,r18
    5e54:	10800517 	ldw	r2,20(r2)
    5e58:	8009883a 	mov	r4,r16
    5e5c:	dfc00417 	ldw	ra,16(sp)
    5e60:	dcc00317 	ldw	r19,12(sp)
    5e64:	dc800217 	ldw	r18,8(sp)
    5e68:	dc400117 	ldw	r17,4(sp)
    5e6c:	dc000017 	ldw	r16,0(sp)
    5e70:	dec00504 	addi	sp,sp,20
    5e74:	1000683a 	jmp	r2
    5e78:	00800044 	movi	r2,1
    5e7c:	f800283a 	ret

00005e80 <_ZNSt9type_infoD1Ev>:
    5e80:	f800283a 	ret

00005e84 <_ZNKSt9type_info14__is_pointer_pEv>:
    5e84:	0005883a 	mov	r2,zero
    5e88:	f800283a 	ret

00005e8c <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
    5e8c:	0005883a 	mov	r2,zero
    5e90:	f800283a 	ret

00005e94 <_ZNSt9type_infoD0Ev>:
    5e94:	0005f1c1 	jmpi	5f1c <_ZdlPv>

00005e98 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
    5e98:	21000117 	ldw	r4,4(r4)
    5e9c:	29400117 	ldw	r5,4(r5)
    5ea0:	21400c26 	beq	r4,r5,5ed4 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
    5ea4:	20c00007 	ldb	r3,0(r4)
    5ea8:	00800a84 	movi	r2,42
    5eac:	18800726 	beq	r3,r2,5ecc <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
    5eb0:	deffff04 	addi	sp,sp,-4
    5eb4:	dfc00015 	stw	ra,0(sp)
    5eb8:	000dbc40 	call	dbc4 <strcmp>
    5ebc:	1005003a 	cmpeq	r2,r2,zero
    5ec0:	dfc00017 	ldw	ra,0(sp)
    5ec4:	dec00104 	addi	sp,sp,4
    5ec8:	f800283a 	ret
    5ecc:	0005883a 	mov	r2,zero
    5ed0:	f800283a 	ret
    5ed4:	00800044 	movi	r2,1
    5ed8:	f800283a 	ret

00005edc <__cxa_pure_virtual>:
    5edc:	014000f4 	movhi	r5,3
    5ee0:	deffff04 	addi	sp,sp,-4
    5ee4:	29602004 	addi	r5,r5,-32640
    5ee8:	018006c4 	movi	r6,27
    5eec:	01000084 	movi	r4,2
    5ef0:	dfc00015 	stw	ra,0(sp)
    5ef4:	001b0d40 	call	1b0d4 <write>
    5ef8:	0005fe00 	call	5fe0 <_ZSt9terminatev>

00005efc <__cxa_deleted_virtual>:
    5efc:	014000f4 	movhi	r5,3
    5f00:	deffff04 	addi	sp,sp,-4
    5f04:	29602704 	addi	r5,r5,-32612
    5f08:	01800784 	movi	r6,30
    5f0c:	01000084 	movi	r4,2
    5f10:	dfc00015 	stw	ra,0(sp)
    5f14:	001b0d40 	call	1b0d4 <write>
    5f18:	0005fe00 	call	5fe0 <_ZSt9terminatev>

00005f1c <_ZdlPv>:
    5f1c:	000cb601 	jmpi	cb60 <free>

00005f20 <_ZN10__cxxabiv111__terminateEPFvvE>:
    5f20:	00800034 	movhi	r2,0
    5f24:	deffef04 	addi	sp,sp,-68
    5f28:	109a0704 	addi	r2,r2,26652
    5f2c:	d8800615 	stw	r2,24(sp)
    5f30:	008000b4 	movhi	r2,2
    5f34:	109a9904 	addi	r2,r2,27236
    5f38:	d8800715 	stw	r2,28(sp)
    5f3c:	00800034 	movhi	r2,0
    5f40:	1097de04 	addi	r2,r2,24440
    5f44:	d9000d15 	stw	r4,52(sp)
    5f48:	d809883a 	mov	r4,sp
    5f4c:	d8800915 	stw	r2,36(sp)
    5f50:	dfc01015 	stw	ra,64(sp)
    5f54:	df000f15 	stw	fp,60(sp)
    5f58:	dec00815 	stw	sp,32(sp)
    5f5c:	dec00a15 	stw	sp,40(sp)
    5f60:	000c5f40 	call	c5f4 <_Unwind_SjLj_Register>
    5f64:	00800044 	movi	r2,1
    5f68:	d8800115 	stw	r2,4(sp)
    5f6c:	d8800d17 	ldw	r2,52(sp)
    5f70:	103ee83a 	callr	r2
    5f74:	000cb240 	call	cb24 <abort>
    5f78:	d8c00217 	ldw	r3,8(sp)
    5f7c:	d8800117 	ldw	r2,4(sp)
    5f80:	d8c00d15 	stw	r3,52(sp)
    5f84:	d8c00317 	ldw	r3,12(sp)
    5f88:	d8c00e15 	stw	r3,56(sp)
    5f8c:	10000b26 	beq	r2,zero,5fbc <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
    5f90:	10bfffc4 	addi	r2,r2,-1
    5f94:	10000126 	beq	r2,zero,5f9c <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
    5f98:	003b68fa 	trap	3
    5f9c:	d8000115 	stw	zero,4(sp)
    5fa0:	00071080 	call	7108 <__cxa_end_catch>
    5fa4:	d8c00e17 	ldw	r3,56(sp)
    5fa8:	00bfffc4 	movi	r2,-1
    5fac:	18800826 	beq	r3,r2,5fd0 <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
    5fb0:	d9000d17 	ldw	r4,52(sp)
    5fb4:	d8800115 	stw	r2,4(sp)
    5fb8:	000c7f00 	call	c7f0 <_Unwind_SjLj_Resume>
    5fbc:	d9000d17 	ldw	r4,52(sp)
    5fc0:	00070540 	call	7054 <__cxa_begin_catch>
    5fc4:	00800084 	movi	r2,2
    5fc8:	d8800115 	stw	r2,4(sp)
    5fcc:	000cb240 	call	cb24 <abort>
    5fd0:	d8800e17 	ldw	r2,56(sp)
    5fd4:	d9000d17 	ldw	r4,52(sp)
    5fd8:	d8800115 	stw	r2,4(sp)
    5fdc:	0006e1c0 	call	6e1c <__cxa_call_unexpected>

00005fe0 <_ZSt9terminatev>:
    5fe0:	008000f4 	movhi	r2,3
    5fe4:	10a9aa04 	addi	r2,r2,-22872
    5fe8:	11000017 	ldw	r4,0(r2)
    5fec:	deffff04 	addi	sp,sp,-4
    5ff0:	dfc00015 	stw	ra,0(sp)
    5ff4:	0005f200 	call	5f20 <_ZN10__cxxabiv111__terminateEPFvvE>

00005ff8 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    5ff8:	deffff04 	addi	sp,sp,-4
    5ffc:	dfc00015 	stw	ra,0(sp)
    6000:	203ee83a 	callr	r4
    6004:	0005fe00 	call	5fe0 <_ZSt9terminatev>

00006008 <_ZSt10unexpectedv>:
    6008:	008000f4 	movhi	r2,3
    600c:	10a9ab04 	addi	r2,r2,-22868
    6010:	11000017 	ldw	r4,0(r2)
    6014:	deffff04 	addi	sp,sp,-4
    6018:	dfc00015 	stw	ra,0(sp)
    601c:	0005ff80 	call	5ff8 <_ZN10__cxxabiv112__unexpectedEPFvvE>

00006020 <_ZSt13set_terminatePFvvE>:
    6020:	00c000f4 	movhi	r3,3
    6024:	18e9aa04 	addi	r3,r3,-22872
    6028:	18800017 	ldw	r2,0(r3)
    602c:	19000015 	stw	r4,0(r3)
    6030:	f800283a 	ret

00006034 <_ZSt13get_terminatev>:
    6034:	008000f4 	movhi	r2,3
    6038:	10a9aa04 	addi	r2,r2,-22872
    603c:	10800017 	ldw	r2,0(r2)
    6040:	f800283a 	ret

00006044 <_ZSt14set_unexpectedPFvvE>:
    6044:	00c000f4 	movhi	r3,3
    6048:	18e9ab04 	addi	r3,r3,-22868
    604c:	18800017 	ldw	r2,0(r3)
    6050:	19000015 	stw	r4,0(r3)
    6054:	f800283a 	ret

00006058 <_ZSt14get_unexpectedv>:
    6058:	008000f4 	movhi	r2,3
    605c:	10a9ab04 	addi	r2,r2,-22868
    6060:	10800017 	ldw	r2,0(r2)
    6064:	f800283a 	ret

00006068 <_ZL21size_of_encoded_valueh>:
    6068:	deffff04 	addi	sp,sp,-4
    606c:	dfc00015 	stw	ra,0(sp)
    6070:	20c03fcc 	andi	r3,r4,255
    6074:	00803fc4 	movi	r2,255
    6078:	18802026 	beq	r3,r2,60fc <_ZL21size_of_encoded_valueh+0x94>
    607c:	210001cc 	andi	r4,r4,7
    6080:	00800144 	movi	r2,5
    6084:	11001c36 	bltu	r2,r4,60f8 <_ZL21size_of_encoded_valueh+0x90>
    6088:	200890ba 	slli	r4,r4,2
    608c:	00800034 	movhi	r2,0
    6090:	10982804 	addi	r2,r2,24736
    6094:	2089883a 	add	r4,r4,r2
    6098:	20800017 	ldw	r2,0(r4)
    609c:	1000683a 	jmp	r2
    60a0:	000060b8 	rdprs	zero,zero,386
    60a4:	000060f8 	rdprs	zero,zero,387
    60a8:	000060c8 	cmpgei	zero,zero,387
    60ac:	000060b8 	rdprs	zero,zero,386
    60b0:	000060e8 	cmpgeui	zero,zero,387
    60b4:	000060d8 	cmpnei	zero,zero,387
    60b8:	00800104 	movi	r2,4
    60bc:	dfc00017 	ldw	ra,0(sp)
    60c0:	dec00104 	addi	sp,sp,4
    60c4:	f800283a 	ret
    60c8:	00800084 	movi	r2,2
    60cc:	dfc00017 	ldw	ra,0(sp)
    60d0:	dec00104 	addi	sp,sp,4
    60d4:	f800283a 	ret
    60d8:	00800044 	movi	r2,1
    60dc:	dfc00017 	ldw	ra,0(sp)
    60e0:	dec00104 	addi	sp,sp,4
    60e4:	f800283a 	ret
    60e8:	00800204 	movi	r2,8
    60ec:	dfc00017 	ldw	ra,0(sp)
    60f0:	dec00104 	addi	sp,sp,4
    60f4:	f800283a 	ret
    60f8:	000cb240 	call	cb24 <abort>
    60fc:	0005883a 	mov	r2,zero
    6100:	dfc00017 	ldw	ra,0(sp)
    6104:	dec00104 	addi	sp,sp,4
    6108:	f800283a 	ret

0000610c <_ZL28read_encoded_value_with_basehjPKhPj>:
    610c:	deffff04 	addi	sp,sp,-4
    6110:	dfc00015 	stw	ra,0(sp)
    6114:	20c03fcc 	andi	r3,r4,255
    6118:	00801404 	movi	r2,80
    611c:	18807326 	beq	r3,r2,62ec <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
    6120:	20c003cc 	andi	r3,r4,15
    6124:	00800304 	movi	r2,12
    6128:	10c06f36 	bltu	r2,r3,62e8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
    612c:	180690ba 	slli	r3,r3,2
    6130:	02000034 	movhi	r8,0
    6134:	42185104 	addi	r8,r8,24900
    6138:	1a07883a 	add	r3,r3,r8
    613c:	18800017 	ldw	r2,0(r3)
    6140:	1000683a 	jmp	r2
    6144:	00006178 	rdprs	zero,zero,389
    6148:	00006294 	movui	zero,394
    614c:	000062d0 	cmplti	zero,zero,395
    6150:	00006178 	rdprs	zero,zero,389
    6154:	000061dc 	xori	zero,zero,391
    6158:	00006230 	cmpltui	zero,zero,392
    615c:	000062e8 	cmpgeui	zero,zero,395
    6160:	000062e8 	cmpgeui	zero,zero,395
    6164:	000062e8 	cmpgeui	zero,zero,395
    6168:	0000623c 	xorhi	zero,zero,392
    616c:	0000620c 	andi	zero,zero,392
    6170:	00006178 	rdprs	zero,zero,389
    6174:	000061dc 	xori	zero,zero,391
    6178:	30800043 	ldbu	r2,1(r6)
    617c:	30c00083 	ldbu	r3,2(r6)
    6180:	324000c3 	ldbu	r9,3(r6)
    6184:	32000003 	ldbu	r8,0(r6)
    6188:	1004923a 	slli	r2,r2,8
    618c:	1806943a 	slli	r3,r3,16
    6190:	4812963a 	slli	r9,r9,24
    6194:	1204b03a 	or	r2,r2,r8
    6198:	1884b03a 	or	r2,r3,r2
    619c:	4886b03a 	or	r3,r9,r2
    61a0:	30800104 	addi	r2,r6,4
    61a4:	18000926 	beq	r3,zero,61cc <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    61a8:	22001c0c 	andi	r8,r4,112
    61ac:	02400404 	movi	r9,16
    61b0:	42405726 	beq	r8,r9,6310 <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
    61b4:	21003fcc 	andi	r4,r4,255
    61b8:	2100201c 	xori	r4,r4,128
    61bc:	213fe004 	addi	r4,r4,-128
    61c0:	1947883a 	add	r3,r3,r5
    61c4:	2000010e 	bge	r4,zero,61cc <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    61c8:	18c00017 	ldw	r3,0(r3)
    61cc:	38c00015 	stw	r3,0(r7)
    61d0:	dfc00017 	ldw	ra,0(sp)
    61d4:	dec00104 	addi	sp,sp,4
    61d8:	f800283a 	ret
    61dc:	30800043 	ldbu	r2,1(r6)
    61e0:	30c00083 	ldbu	r3,2(r6)
    61e4:	324000c3 	ldbu	r9,3(r6)
    61e8:	32000003 	ldbu	r8,0(r6)
    61ec:	1004923a 	slli	r2,r2,8
    61f0:	1806943a 	slli	r3,r3,16
    61f4:	4812963a 	slli	r9,r9,24
    61f8:	1204b03a 	or	r2,r2,r8
    61fc:	1884b03a 	or	r2,r3,r2
    6200:	4886b03a 	or	r3,r9,r2
    6204:	30800204 	addi	r2,r6,8
    6208:	003fe606 	br	61a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061a4>
    620c:	30c00043 	ldbu	r3,1(r6)
    6210:	32000003 	ldbu	r8,0(r6)
    6214:	30800084 	addi	r2,r6,2
    6218:	1806923a 	slli	r3,r3,8
    621c:	1a06b03a 	or	r3,r3,r8
    6220:	18ffffcc 	andi	r3,r3,65535
    6224:	18e0001c 	xori	r3,r3,32768
    6228:	18e00004 	addi	r3,r3,-32768
    622c:	003fdd06 	br	61a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061a4>
    6230:	30c00003 	ldbu	r3,0(r6)
    6234:	30800044 	addi	r2,r6,1
    6238:	003fda06 	br	61a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061a4>
    623c:	3017883a 	mov	r11,r6
    6240:	0007883a 	mov	r3,zero
    6244:	0013883a 	mov	r9,zero
    6248:	5a800003 	ldbu	r10,0(r11)
    624c:	58800044 	addi	r2,r11,1
    6250:	1017883a 	mov	r11,r2
    6254:	52001fcc 	andi	r8,r10,127
    6258:	4250983a 	sll	r8,r8,r9
    625c:	53003fcc 	andi	r12,r10,255
    6260:	6300201c 	xori	r12,r12,128
    6264:	633fe004 	addi	r12,r12,-128
    6268:	1a06b03a 	or	r3,r3,r8
    626c:	4a4001c4 	addi	r9,r9,7
    6270:	603ff516 	blt	r12,zero,6248 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006248>
    6274:	020007c4 	movi	r8,31
    6278:	427fca36 	bltu	r8,r9,61a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061a4>
    627c:	5280100c 	andi	r10,r10,64
    6280:	503fc826 	beq	r10,zero,61a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061a4>
    6284:	023fffc4 	movi	r8,-1
    6288:	4252983a 	sll	r9,r8,r9
    628c:	1a46b03a 	or	r3,r3,r9
    6290:	003fc506 	br	61a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061a8>
    6294:	3017883a 	mov	r11,r6
    6298:	0007883a 	mov	r3,zero
    629c:	0015883a 	mov	r10,zero
    62a0:	5a000003 	ldbu	r8,0(r11)
    62a4:	58800044 	addi	r2,r11,1
    62a8:	1017883a 	mov	r11,r2
    62ac:	42401fcc 	andi	r9,r8,127
    62b0:	4a92983a 	sll	r9,r9,r10
    62b4:	42003fcc 	andi	r8,r8,255
    62b8:	4200201c 	xori	r8,r8,128
    62bc:	423fe004 	addi	r8,r8,-128
    62c0:	1a46b03a 	or	r3,r3,r9
    62c4:	528001c4 	addi	r10,r10,7
    62c8:	403ff516 	blt	r8,zero,62a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70062a0>
    62cc:	003fb506 	br	61a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061a4>
    62d0:	30c00043 	ldbu	r3,1(r6)
    62d4:	32000003 	ldbu	r8,0(r6)
    62d8:	30800084 	addi	r2,r6,2
    62dc:	1806923a 	slli	r3,r3,8
    62e0:	1a06b03a 	or	r3,r3,r8
    62e4:	003faf06 	br	61a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061a4>
    62e8:	000cb240 	call	cb24 <abort>
    62ec:	308000c4 	addi	r2,r6,3
    62f0:	00ffff04 	movi	r3,-4
    62f4:	10c4703a 	and	r2,r2,r3
    62f8:	10c00017 	ldw	r3,0(r2)
    62fc:	10800104 	addi	r2,r2,4
    6300:	38c00015 	stw	r3,0(r7)
    6304:	dfc00017 	ldw	ra,0(sp)
    6308:	dec00104 	addi	sp,sp,4
    630c:	f800283a 	ret
    6310:	300b883a 	mov	r5,r6
    6314:	003fa706 	br	61b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061b4>

00006318 <_ZL15get_ttype_entryP16lsda_header_infom>:
    6318:	defffc04 	addi	sp,sp,-16
    631c:	dfc00315 	stw	ra,12(sp)
    6320:	dc400215 	stw	r17,8(sp)
    6324:	dc000115 	stw	r16,4(sp)
    6328:	2021883a 	mov	r16,r4
    632c:	21000503 	ldbu	r4,20(r4)
    6330:	2823883a 	mov	r17,r5
    6334:	00060680 	call	6068 <_ZL21size_of_encoded_valueh>
    6338:	1445383a 	mul	r2,r2,r17
    633c:	81800317 	ldw	r6,12(r16)
    6340:	81400217 	ldw	r5,8(r16)
    6344:	81000503 	ldbu	r4,20(r16)
    6348:	d80f883a 	mov	r7,sp
    634c:	308dc83a 	sub	r6,r6,r2
    6350:	000610c0 	call	610c <_ZL28read_encoded_value_with_basehjPKhPj>
    6354:	d8800017 	ldw	r2,0(sp)
    6358:	dfc00317 	ldw	ra,12(sp)
    635c:	dc400217 	ldw	r17,8(sp)
    6360:	dc000117 	ldw	r16,4(sp)
    6364:	dec00404 	addi	sp,sp,16
    6368:	f800283a 	ret

0000636c <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    636c:	deffff04 	addi	sp,sp,-4
    6370:	dfc00015 	stw	ra,0(sp)
    6374:	20c03fcc 	andi	r3,r4,255
    6378:	00803fc4 	movi	r2,255
    637c:	18800e26 	beq	r3,r2,63b8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    6380:	20801c0c 	andi	r2,r4,112
    6384:	00c00804 	movi	r3,32
    6388:	10c01726 	beq	r2,r3,63e8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
    638c:	18800e2e 	bgeu	r3,r2,63c8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
    6390:	00c01004 	movi	r3,64
    6394:	10c01026 	beq	r2,r3,63d8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
    6398:	00c01404 	movi	r3,80
    639c:	10c00626 	beq	r2,r3,63b8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    63a0:	00c00c04 	movi	r3,48
    63a4:	10c00b1e 	bne	r2,r3,63d4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
    63a8:	2809883a 	mov	r4,r5
    63ac:	dfc00017 	ldw	ra,0(sp)
    63b0:	dec00104 	addi	sp,sp,4
    63b4:	000c6cc1 	jmpi	c6cc <_Unwind_GetDataRelBase>
    63b8:	0005883a 	mov	r2,zero
    63bc:	dfc00017 	ldw	ra,0(sp)
    63c0:	dec00104 	addi	sp,sp,4
    63c4:	f800283a 	ret
    63c8:	103ffb26 	beq	r2,zero,63b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70063b8>
    63cc:	00c00404 	movi	r3,16
    63d0:	10fff926 	beq	r2,r3,63b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70063b8>
    63d4:	000cb240 	call	cb24 <abort>
    63d8:	2809883a 	mov	r4,r5
    63dc:	dfc00017 	ldw	ra,0(sp)
    63e0:	dec00104 	addi	sp,sp,4
    63e4:	000c6bc1 	jmpi	c6bc <_Unwind_GetRegionStart>
    63e8:	2809883a 	mov	r4,r5
    63ec:	dfc00017 	ldw	ra,0(sp)
    63f0:	dec00104 	addi	sp,sp,4
    63f4:	000c6d41 	jmpi	c6d4 <_Unwind_GetTextRelBase>

000063f8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    63f8:	defffb04 	addi	sp,sp,-20
    63fc:	dcc00315 	stw	r19,12(sp)
    6400:	dc400115 	stw	r17,4(sp)
    6404:	dc000015 	stw	r16,0(sp)
    6408:	dfc00415 	stw	ra,16(sp)
    640c:	dc800215 	stw	r18,8(sp)
    6410:	2027883a 	mov	r19,r4
    6414:	2821883a 	mov	r16,r5
    6418:	3023883a 	mov	r17,r6
    641c:	20003f26 	beq	r4,zero,651c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
    6420:	000c6bc0 	call	c6bc <_Unwind_GetRegionStart>
    6424:	88800015 	stw	r2,0(r17)
    6428:	84800003 	ldbu	r18,0(r16)
    642c:	00c03fc4 	movi	r3,255
    6430:	84000044 	addi	r16,r16,1
    6434:	90c03726 	beq	r18,r3,6514 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
    6438:	980b883a 	mov	r5,r19
    643c:	9009883a 	mov	r4,r18
    6440:	000636c0 	call	636c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    6444:	800d883a 	mov	r6,r16
    6448:	89c00104 	addi	r7,r17,4
    644c:	100b883a 	mov	r5,r2
    6450:	9009883a 	mov	r4,r18
    6454:	000610c0 	call	610c <_ZL28read_encoded_value_with_basehjPKhPj>
    6458:	1021883a 	mov	r16,r2
    645c:	80c00003 	ldbu	r3,0(r16)
    6460:	01003fc4 	movi	r4,255
    6464:	80800044 	addi	r2,r16,1
    6468:	88c00505 	stb	r3,20(r17)
    646c:	18c03fcc 	andi	r3,r3,255
    6470:	19002c26 	beq	r3,r4,6524 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
    6474:	100f883a 	mov	r7,r2
    6478:	000d883a 	mov	r6,zero
    647c:	000b883a 	mov	r5,zero
    6480:	38c00003 	ldbu	r3,0(r7)
    6484:	10800044 	addi	r2,r2,1
    6488:	100f883a 	mov	r7,r2
    648c:	19001fcc 	andi	r4,r3,127
    6490:	2148983a 	sll	r4,r4,r5
    6494:	18c03fcc 	andi	r3,r3,255
    6498:	18c0201c 	xori	r3,r3,128
    649c:	18ffe004 	addi	r3,r3,-128
    64a0:	310cb03a 	or	r6,r6,r4
    64a4:	294001c4 	addi	r5,r5,7
    64a8:	183ff516 	blt	r3,zero,6480 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006480>
    64ac:	118d883a 	add	r6,r2,r6
    64b0:	89800315 	stw	r6,12(r17)
    64b4:	10c00003 	ldbu	r3,0(r2)
    64b8:	000d883a 	mov	r6,zero
    64bc:	10800044 	addi	r2,r2,1
    64c0:	88c00545 	stb	r3,21(r17)
    64c4:	000b883a 	mov	r5,zero
    64c8:	10c00003 	ldbu	r3,0(r2)
    64cc:	10800044 	addi	r2,r2,1
    64d0:	19001fcc 	andi	r4,r3,127
    64d4:	2148983a 	sll	r4,r4,r5
    64d8:	18c03fcc 	andi	r3,r3,255
    64dc:	18c0201c 	xori	r3,r3,128
    64e0:	18ffe004 	addi	r3,r3,-128
    64e4:	310cb03a 	or	r6,r6,r4
    64e8:	294001c4 	addi	r5,r5,7
    64ec:	183ff616 	blt	r3,zero,64c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70064c8>
    64f0:	118d883a 	add	r6,r2,r6
    64f4:	89800415 	stw	r6,16(r17)
    64f8:	dfc00417 	ldw	ra,16(sp)
    64fc:	dcc00317 	ldw	r19,12(sp)
    6500:	dc800217 	ldw	r18,8(sp)
    6504:	dc400117 	ldw	r17,4(sp)
    6508:	dc000017 	ldw	r16,0(sp)
    650c:	dec00504 	addi	sp,sp,20
    6510:	f800283a 	ret
    6514:	88800115 	stw	r2,4(r17)
    6518:	003fd006 	br	645c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700645c>
    651c:	0005883a 	mov	r2,zero
    6520:	003fc006 	br	6424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006424>
    6524:	88000315 	stw	zero,12(r17)
    6528:	003fe206 	br	64b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70064b4>

0000652c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
    652c:	28800017 	ldw	r2,0(r5)
    6530:	30c00017 	ldw	r3,0(r6)
    6534:	defffb04 	addi	sp,sp,-20
    6538:	10800217 	ldw	r2,8(r2)
    653c:	dc400315 	stw	r17,12(sp)
    6540:	dc000215 	stw	r16,8(sp)
    6544:	d9400115 	stw	r5,4(sp)
    6548:	dfc00415 	stw	ra,16(sp)
    654c:	2021883a 	mov	r16,r4
    6550:	d8c00015 	stw	r3,0(sp)
    6554:	2809883a 	mov	r4,r5
    6558:	3023883a 	mov	r17,r6
    655c:	103ee83a 	callr	r2
    6560:	10803fcc 	andi	r2,r2,255
    6564:	d9400117 	ldw	r5,4(sp)
    6568:	10000326 	beq	r2,zero,6578 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
    656c:	d8800017 	ldw	r2,0(sp)
    6570:	10800017 	ldw	r2,0(r2)
    6574:	d8800015 	stw	r2,0(sp)
    6578:	80800017 	ldw	r2,0(r16)
    657c:	01c00044 	movi	r7,1
    6580:	d80d883a 	mov	r6,sp
    6584:	10800417 	ldw	r2,16(r2)
    6588:	8009883a 	mov	r4,r16
    658c:	103ee83a 	callr	r2
    6590:	10c03fcc 	andi	r3,r2,255
    6594:	18000226 	beq	r3,zero,65a0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
    6598:	d8c00017 	ldw	r3,0(sp)
    659c:	88c00015 	stw	r3,0(r17)
    65a0:	dfc00417 	ldw	ra,16(sp)
    65a4:	dc400317 	ldw	r17,12(sp)
    65a8:	dc000217 	ldw	r16,8(sp)
    65ac:	dec00504 	addi	sp,sp,20
    65b0:	f800283a 	ret

000065b4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
    65b4:	defff604 	addi	sp,sp,-40
    65b8:	dc000415 	stw	r16,16(sp)
    65bc:	3821d23a 	srai	r16,r7,8
    65c0:	dc800615 	stw	r18,24(sp)
    65c4:	dc400515 	stw	r17,20(sp)
    65c8:	dfc00915 	stw	ra,36(sp)
    65cc:	dd000815 	stw	r20,32(sp)
    65d0:	dcc00715 	stw	r19,28(sp)
    65d4:	d9400215 	stw	r5,8(sp)
    65d8:	3825883a 	mov	r18,r7
    65dc:	2023883a 	mov	r17,r4
    65e0:	8000010e 	bge	r16,zero,65e8 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x34>
    65e4:	0421c83a 	sub	r16,zero,r16
    65e8:	000b883a 	mov	r5,zero
    65ec:	01000144 	movi	r4,5
    65f0:	d9800315 	stw	r6,12(sp)
    65f4:	000636c0 	call	636c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    65f8:	d9800317 	ldw	r6,12(sp)
    65fc:	d9c00104 	addi	r7,sp,4
    6600:	100b883a 	mov	r5,r2
    6604:	01000144 	movi	r4,5
    6608:	000610c0 	call	610c <_ZL28read_encoded_value_with_basehjPKhPj>
    660c:	11fffe64 	muli	r7,r2,-7
    6610:	0007883a 	mov	r3,zero
    6614:	11400003 	ldbu	r5,0(r2)
    6618:	110001e4 	muli	r4,r2,7
    661c:	10800044 	addi	r2,r2,1
    6620:	29801fcc 	andi	r6,r5,127
    6624:	21c9883a 	add	r4,r4,r7
    6628:	3108983a 	sll	r4,r6,r4
    662c:	29403fcc 	andi	r5,r5,255
    6630:	2940201c 	xori	r5,r5,128
    6634:	297fe004 	addi	r5,r5,-128
    6638:	1906b03a 	or	r3,r3,r4
    663c:	283ff516 	blt	r5,zero,6614 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006614>
    6640:	10c5883a 	add	r2,r2,r3
    6644:	11fffe64 	muli	r7,r2,-7
    6648:	0009883a 	mov	r4,zero
    664c:	11400003 	ldbu	r5,0(r2)
    6650:	10c001e4 	muli	r3,r2,7
    6654:	10800044 	addi	r2,r2,1
    6658:	29801fcc 	andi	r6,r5,127
    665c:	19c7883a 	add	r3,r3,r7
    6660:	30c6983a 	sll	r3,r6,r3
    6664:	29403fcc 	andi	r5,r5,255
    6668:	2940201c 	xori	r5,r5,128
    666c:	297fe004 	addi	r5,r5,-128
    6670:	20c8b03a 	or	r4,r4,r3
    6674:	283ff516 	blt	r5,zero,664c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700664c>
    6678:	80c03fcc 	andi	r3,r16,255
    667c:	18ffffc4 	addi	r3,r3,-1
    6680:	10c7883a 	add	r3,r2,r3
    6684:	210000c4 	addi	r4,r4,3
    6688:	197ffe64 	muli	r5,r3,-7
    668c:	2085883a 	add	r2,r4,r2
    6690:	04ffff04 	movi	r19,-4
    6694:	14e6703a 	and	r19,r2,r19
    6698:	0021883a 	mov	r16,zero
    669c:	18800003 	ldbu	r2,0(r3)
    66a0:	190001e4 	muli	r4,r3,7
    66a4:	1d000044 	addi	r20,r3,1
    66a8:	10c01fcc 	andi	r3,r2,127
    66ac:	2149883a 	add	r4,r4,r5
    66b0:	1908983a 	sll	r4,r3,r4
    66b4:	10803fcc 	andi	r2,r2,255
    66b8:	1080201c 	xori	r2,r2,128
    66bc:	10bfe004 	addi	r2,r2,-128
    66c0:	a007883a 	mov	r3,r20
    66c4:	8120b03a 	or	r16,r16,r4
    66c8:	103ff416 	blt	r2,zero,669c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700669c>
    66cc:	94803fcc 	andi	r18,r18,255
    66d0:	80001f26 	beq	r16,zero,6750 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x19c>
    66d4:	9009883a 	mov	r4,r18
    66d8:	00060680 	call	6068 <_ZL21size_of_encoded_valueh>
    66dc:	81bfffc4 	addi	r6,r16,-1
    66e0:	308d383a 	mul	r6,r6,r2
    66e4:	d9400a17 	ldw	r5,40(sp)
    66e8:	d80f883a 	mov	r7,sp
    66ec:	9009883a 	mov	r4,r18
    66f0:	34cd883a 	add	r6,r6,r19
    66f4:	000610c0 	call	610c <_ZL28read_encoded_value_with_basehjPKhPj>
    66f8:	d9000017 	ldw	r4,0(sp)
    66fc:	d9800204 	addi	r6,sp,8
    6700:	880b883a 	mov	r5,r17
    6704:	000652c0 	call	652c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    6708:	10c03fcc 	andi	r3,r2,255
    670c:	1800111e 	bne	r3,zero,6754 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1a0>
    6710:	a17ffe64 	muli	r5,r20,-7
    6714:	a007883a 	mov	r3,r20
    6718:	0021883a 	mov	r16,zero
    671c:	19000003 	ldbu	r4,0(r3)
    6720:	18c001e4 	muli	r3,r3,7
    6724:	a5000044 	addi	r20,r20,1
    6728:	20801fcc 	andi	r2,r4,127
    672c:	1947883a 	add	r3,r3,r5
    6730:	10c4983a 	sll	r2,r2,r3
    6734:	21003fcc 	andi	r4,r4,255
    6738:	2100201c 	xori	r4,r4,128
    673c:	213fe004 	addi	r4,r4,-128
    6740:	a007883a 	mov	r3,r20
    6744:	80a0b03a 	or	r16,r16,r2
    6748:	203ff416 	blt	r4,zero,671c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700671c>
    674c:	003fe006 	br	66d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70066d0>
    6750:	0005883a 	mov	r2,zero
    6754:	dfc00917 	ldw	ra,36(sp)
    6758:	dd000817 	ldw	r20,32(sp)
    675c:	dcc00717 	ldw	r19,28(sp)
    6760:	dc800617 	ldw	r18,24(sp)
    6764:	dc400517 	ldw	r17,20(sp)
    6768:	dc000417 	ldw	r16,16(sp)
    676c:	dec00a04 	addi	sp,sp,40
    6770:	f800283a 	ret

00006774 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
    6774:	defffb04 	addi	sp,sp,-20
    6778:	dc000115 	stw	r16,4(sp)
    677c:	24000317 	ldw	r16,12(r4)
    6780:	01ce303a 	nor	r7,zero,r7
    6784:	dc800315 	stw	r18,12(sp)
    6788:	dc400215 	stw	r17,8(sp)
    678c:	dfc00415 	stw	ra,16(sp)
    6790:	2023883a 	mov	r17,r4
    6794:	2825883a 	mov	r18,r5
    6798:	d9800015 	stw	r6,0(sp)
    679c:	81e1883a 	add	r16,r16,r7
    67a0:	800d883a 	mov	r6,r16
    67a4:	000b883a 	mov	r5,zero
    67a8:	0009883a 	mov	r4,zero
    67ac:	30800003 	ldbu	r2,0(r6)
    67b0:	84000044 	addi	r16,r16,1
    67b4:	800d883a 	mov	r6,r16
    67b8:	10c01fcc 	andi	r3,r2,127
    67bc:	1906983a 	sll	r3,r3,r4
    67c0:	10803fcc 	andi	r2,r2,255
    67c4:	1080201c 	xori	r2,r2,128
    67c8:	10bfe004 	addi	r2,r2,-128
    67cc:	28cab03a 	or	r5,r5,r3
    67d0:	210001c4 	addi	r4,r4,7
    67d4:	103ff516 	blt	r2,zero,67ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70067ac>
    67d8:	28000e26 	beq	r5,zero,6814 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
    67dc:	8809883a 	mov	r4,r17
    67e0:	00063180 	call	6318 <_ZL15get_ttype_entryP16lsda_header_infom>
    67e4:	d80d883a 	mov	r6,sp
    67e8:	900b883a 	mov	r5,r18
    67ec:	1009883a 	mov	r4,r2
    67f0:	000652c0 	call	652c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    67f4:	10c03fcc 	andi	r3,r2,255
    67f8:	183fe926 	beq	r3,zero,67a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70067a0>
    67fc:	dfc00417 	ldw	ra,16(sp)
    6800:	dc800317 	ldw	r18,12(sp)
    6804:	dc400217 	ldw	r17,8(sp)
    6808:	dc000117 	ldw	r16,4(sp)
    680c:	dec00504 	addi	sp,sp,20
    6810:	f800283a 	ret
    6814:	0005883a 	mov	r2,zero
    6818:	003ff806 	br	67fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70067fc>

0000681c <__gxx_personality_sj0>:
    681c:	00800034 	movhi	r2,0
    6820:	deffdd04 	addi	sp,sp,-140
    6824:	109a0704 	addi	r2,r2,26652
    6828:	d8800e15 	stw	r2,56(sp)
    682c:	008000b4 	movhi	r2,2
    6830:	109a9f04 	addi	r2,r2,27260
    6834:	d8800f15 	stw	r2,60(sp)
    6838:	00800034 	movhi	r2,0
    683c:	109b7d04 	addi	r2,r2,28148
    6840:	d9001515 	stw	r4,84(sp)
    6844:	d9000804 	addi	r4,sp,32
    6848:	d8801115 	stw	r2,68(sp)
    684c:	dfc02215 	stw	ra,136(sp)
    6850:	df002115 	stw	fp,132(sp)
    6854:	dec01015 	stw	sp,64(sp)
    6858:	dec01215 	stw	sp,72(sp)
    685c:	d9401915 	stw	r5,100(sp)
    6860:	d9801615 	stw	r6,88(sp)
    6864:	d9c01715 	stw	r7,92(sp)
    6868:	000c5f40 	call	c5f4 <_Unwind_SjLj_Register>
    686c:	d8c01517 	ldw	r3,84(sp)
    6870:	d8000715 	stw	zero,28(sp)
    6874:	d8000615 	stw	zero,24(sp)
    6878:	00800044 	movi	r2,1
    687c:	18800926 	beq	r3,r2,68a4 <__gxx_personality_sj0+0x88>
    6880:	01c000c4 	movi	r7,3
    6884:	d9c01515 	stw	r7,84(sp)
    6888:	d9000804 	addi	r4,sp,32
    688c:	000c60c0 	call	c60c <_Unwind_SjLj_Unregister>
    6890:	d8801517 	ldw	r2,84(sp)
    6894:	dfc02217 	ldw	ra,136(sp)
    6898:	df002117 	ldw	fp,132(sp)
    689c:	dec02304 	addi	sp,sp,140
    68a0:	f800283a 	ret
    68a4:	d9001617 	ldw	r4,88(sp)
    68a8:	00af3574 	movhi	r2,48341
    68ac:	d9c01717 	ldw	r7,92(sp)
    68b0:	10b54004 	addi	r2,r2,-11008
    68b4:	00ee2cb4 	movhi	r3,47282
    68b8:	2085883a 	add	r2,r4,r2
    68bc:	18eaaf04 	addi	r3,r3,-21828
    68c0:	d8801b15 	stw	r2,108(sp)
    68c4:	38c7883a 	add	r3,r7,r3
    68c8:	1105803a 	cmpltu	r2,r2,r4
    68cc:	10c7883a 	add	r3,r2,r3
    68d0:	d8c01c15 	stw	r3,112(sp)
    68d4:	d8c01917 	ldw	r3,100(sp)
    68d8:	00800184 	movi	r2,6
    68dc:	18805426 	beq	r3,r2,6a30 <__gxx_personality_sj0+0x214>
    68e0:	d9002417 	ldw	r4,144(sp)
    68e4:	00bfffc4 	movi	r2,-1
    68e8:	d8800915 	stw	r2,36(sp)
    68ec:	000c6b00 	call	c6b0 <_Unwind_GetLanguageSpecificData>
    68f0:	d8801a15 	stw	r2,104(sp)
    68f4:	1000c926 	beq	r2,zero,6c1c <__gxx_personality_sj0+0x400>
    68f8:	d9002417 	ldw	r4,144(sp)
    68fc:	d80d883a 	mov	r6,sp
    6900:	100b883a 	mov	r5,r2
    6904:	00063f80 	call	63f8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    6908:	d9402417 	ldw	r5,144(sp)
    690c:	d9000503 	ldbu	r4,20(sp)
    6910:	d8801515 	stw	r2,84(sp)
    6914:	000636c0 	call	636c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    6918:	d9002417 	ldw	r4,144(sp)
    691c:	d9400604 	addi	r5,sp,24
    6920:	d8800215 	stw	r2,8(sp)
    6924:	000c6800 	call	c680 <_Unwind_GetIPInfo>
    6928:	d8c00617 	ldw	r3,24(sp)
    692c:	18006126 	beq	r3,zero,6ab4 <__gxx_personality_sj0+0x298>
    6930:	1000ba16 	blt	r2,zero,6c1c <__gxx_personality_sj0+0x400>
    6934:	10002f1e 	bne	r2,zero,69f4 <__gxx_personality_sj0+0x1d8>
    6938:	d8001515 	stw	zero,84(sp)
    693c:	d8001f15 	stw	zero,124(sp)
    6940:	d8001815 	stw	zero,96(sp)
    6944:	00c00044 	movi	r3,1
    6948:	d9001917 	ldw	r4,100(sp)
    694c:	2080004c 	andi	r2,r4,1
    6950:	1000b51e 	bne	r2,zero,6c28 <__gxx_personality_sj0+0x40c>
    6954:	d9001917 	ldw	r4,100(sp)
    6958:	2080020c 	andi	r2,r4,8
    695c:	1000b71e 	bne	r2,zero,6c3c <__gxx_personality_sj0+0x420>
    6960:	d9c01c17 	ldw	r7,112(sp)
    6964:	3800b826 	beq	r7,zero,6c48 <__gxx_personality_sj0+0x42c>
    6968:	00800044 	movi	r2,1
    696c:	1880b526 	beq	r3,r2,6c44 <__gxx_personality_sj0+0x428>
    6970:	d9c01517 	ldw	r7,84(sp)
    6974:	3800f516 	blt	r7,zero,6d4c <__gxx_personality_sj0+0x530>
    6978:	d9002417 	ldw	r4,144(sp)
    697c:	d9802317 	ldw	r6,140(sp)
    6980:	00bfffc4 	movi	r2,-1
    6984:	000b883a 	mov	r5,zero
    6988:	d8800915 	stw	r2,36(sp)
    698c:	000c6540 	call	c654 <_Unwind_SetGR>
    6990:	d9801517 	ldw	r6,84(sp)
    6994:	d9002417 	ldw	r4,144(sp)
    6998:	01400044 	movi	r5,1
    699c:	000c6540 	call	c654 <_Unwind_SetGR>
    69a0:	d9002417 	ldw	r4,144(sp)
    69a4:	d9401f17 	ldw	r5,124(sp)
    69a8:	000c6a00 	call	c6a0 <_Unwind_SetIP>
    69ac:	010001c4 	movi	r4,7
    69b0:	d9001515 	stw	r4,84(sp)
    69b4:	003fb406 	br	6888 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006888>
    69b8:	000f883a 	mov	r7,zero
    69bc:	000d883a 	mov	r6,zero
    69c0:	19000003 	ldbu	r4,0(r3)
    69c4:	18c00044 	addi	r3,r3,1
    69c8:	d8c01515 	stw	r3,84(sp)
    69cc:	21401fcc 	andi	r5,r4,127
    69d0:	298a983a 	sll	r5,r5,r6
    69d4:	21003fcc 	andi	r4,r4,255
    69d8:	2100201c 	xori	r4,r4,128
    69dc:	213fe004 	addi	r4,r4,-128
    69e0:	394eb03a 	or	r7,r7,r5
    69e4:	318001c4 	addi	r6,r6,7
    69e8:	203ff516 	blt	r4,zero,69c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70069c0>
    69ec:	10bfffc4 	addi	r2,r2,-1
    69f0:	10003226 	beq	r2,zero,6abc <__gxx_personality_sj0+0x2a0>
    69f4:	d9c01517 	ldw	r7,84(sp)
    69f8:	0011883a 	mov	r8,zero
    69fc:	000d883a 	mov	r6,zero
    6a00:	39000003 	ldbu	r4,0(r7)
    6a04:	38c00044 	addi	r3,r7,1
    6a08:	180f883a 	mov	r7,r3
    6a0c:	21401fcc 	andi	r5,r4,127
    6a10:	298a983a 	sll	r5,r5,r6
    6a14:	21003fcc 	andi	r4,r4,255
    6a18:	2100201c 	xori	r4,r4,128
    6a1c:	213fe004 	addi	r4,r4,-128
    6a20:	4150b03a 	or	r8,r8,r5
    6a24:	318001c4 	addi	r6,r6,7
    6a28:	203ff516 	blt	r4,zero,6a00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a00>
    6a2c:	003fe206 	br	69b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70069b8>
    6a30:	d9001c17 	ldw	r4,112(sp)
    6a34:	203faa1e 	bne	r4,zero,68e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70068e0>
    6a38:	d9c01517 	ldw	r7,84(sp)
    6a3c:	d8801b17 	ldw	r2,108(sp)
    6a40:	38bfa736 	bltu	r7,r2,68e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70068e0>
    6a44:	d8c02317 	ldw	r3,140(sp)
    6a48:	18fffe17 	ldw	r3,-8(r3)
    6a4c:	d8c01f15 	stw	r3,124(sp)
    6a50:	18008226 	beq	r3,zero,6c5c <__gxx_personality_sj0+0x440>
    6a54:	d9002317 	ldw	r4,140(sp)
    6a58:	d9c02317 	ldw	r7,140(sp)
    6a5c:	213ffb17 	ldw	r4,-20(r4)
    6a60:	39fffd17 	ldw	r7,-12(r7)
    6a64:	d9001515 	stw	r4,84(sp)
    6a68:	d9c01a15 	stw	r7,104(sp)
    6a6c:	d8801517 	ldw	r2,84(sp)
    6a70:	103fc10e 	bge	r2,zero,6978 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006978>
    6a74:	d9002417 	ldw	r4,144(sp)
    6a78:	d9401a17 	ldw	r5,104(sp)
    6a7c:	d80d883a 	mov	r6,sp
    6a80:	00bfffc4 	movi	r2,-1
    6a84:	d8800915 	stw	r2,36(sp)
    6a88:	00063f80 	call	63f8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    6a8c:	d9402417 	ldw	r5,144(sp)
    6a90:	d9000503 	ldbu	r4,20(sp)
    6a94:	000636c0 	call	636c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    6a98:	d9000503 	ldbu	r4,20(sp)
    6a9c:	d9402417 	ldw	r5,144(sp)
    6aa0:	d8800215 	stw	r2,8(sp)
    6aa4:	000636c0 	call	636c <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    6aa8:	d8c02317 	ldw	r3,140(sp)
    6aac:	18bffe15 	stw	r2,-8(r3)
    6ab0:	003fb106 	br	6978 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006978>
    6ab4:	10bfffc4 	addi	r2,r2,-1
    6ab8:	003f9d06 	br	6930 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006930>
    6abc:	42000044 	addi	r8,r8,1
    6ac0:	da001f15 	stw	r8,124(sp)
    6ac4:	38005326 	beq	r7,zero,6c14 <__gxx_personality_sj0+0x3f8>
    6ac8:	d8800417 	ldw	r2,16(sp)
    6acc:	39ffffc4 	addi	r7,r7,-1
    6ad0:	11c5883a 	add	r2,r2,r7
    6ad4:	d8801815 	stw	r2,96(sp)
    6ad8:	40005026 	beq	r8,zero,6c1c <__gxx_personality_sj0+0x400>
    6adc:	10007426 	beq	r2,zero,6cb0 <__gxx_personality_sj0+0x494>
    6ae0:	d8801917 	ldw	r2,100(sp)
    6ae4:	1080020c 	andi	r2,r2,8
    6ae8:	d8802015 	stw	r2,128(sp)
    6aec:	1000a21e 	bne	r2,zero,6d78 <__gxx_personality_sj0+0x55c>
    6af0:	d8c01c17 	ldw	r3,112(sp)
    6af4:	1800b026 	beq	r3,zero,6db8 <__gxx_personality_sj0+0x59c>
    6af8:	01c000f4 	movhi	r7,3
    6afc:	39e9b004 	addi	r7,r7,-22848
    6b00:	d9c01e15 	stw	r7,120(sp)
    6b04:	d8001d05 	stb	zero,116(sp)
    6b08:	d8c01817 	ldw	r3,96(sp)
    6b0c:	d8001515 	stw	zero,84(sp)
    6b10:	0009883a 	mov	r4,zero
    6b14:	19400003 	ldbu	r5,0(r3)
    6b18:	18800044 	addi	r2,r3,1
    6b1c:	d9c01517 	ldw	r7,84(sp)
    6b20:	28c01fcc 	andi	r3,r5,127
    6b24:	1906983a 	sll	r3,r3,r4
    6b28:	29803fcc 	andi	r6,r5,255
    6b2c:	3180201c 	xori	r6,r6,128
    6b30:	38ceb03a 	or	r7,r7,r3
    6b34:	d8801715 	stw	r2,92(sp)
    6b38:	31bfe004 	addi	r6,r6,-128
    6b3c:	d9c01515 	stw	r7,84(sp)
    6b40:	210001c4 	addi	r4,r4,7
    6b44:	1007883a 	mov	r3,r2
    6b48:	303ff216 	blt	r6,zero,6b14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b14>
    6b4c:	00c007c4 	movi	r3,31
    6b50:	19000836 	bltu	r3,r4,6b74 <__gxx_personality_sj0+0x358>
    6b54:	2940100c 	andi	r5,r5,64
    6b58:	28000626 	beq	r5,zero,6b74 <__gxx_personality_sj0+0x358>
    6b5c:	01c00044 	movi	r7,1
    6b60:	3908983a 	sll	r4,r7,r4
    6b64:	d8c01517 	ldw	r3,84(sp)
    6b68:	0109c83a 	sub	r4,zero,r4
    6b6c:	1906b03a 	or	r3,r3,r4
    6b70:	d8c01515 	stw	r3,84(sp)
    6b74:	d8001615 	stw	zero,88(sp)
    6b78:	0009883a 	mov	r4,zero
    6b7c:	11400003 	ldbu	r5,0(r2)
    6b80:	d9c01617 	ldw	r7,88(sp)
    6b84:	10800044 	addi	r2,r2,1
    6b88:	28c01fcc 	andi	r3,r5,127
    6b8c:	1906983a 	sll	r3,r3,r4
    6b90:	29803fcc 	andi	r6,r5,255
    6b94:	3180201c 	xori	r6,r6,128
    6b98:	38ceb03a 	or	r7,r7,r3
    6b9c:	31bfe004 	addi	r6,r6,-128
    6ba0:	d9c01615 	stw	r7,88(sp)
    6ba4:	210001c4 	addi	r4,r4,7
    6ba8:	303ff416 	blt	r6,zero,6b7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b7c>
    6bac:	008007c4 	movi	r2,31
    6bb0:	11000736 	bltu	r2,r4,6bd0 <__gxx_personality_sj0+0x3b4>
    6bb4:	2940100c 	andi	r5,r5,64
    6bb8:	28000526 	beq	r5,zero,6bd0 <__gxx_personality_sj0+0x3b4>
    6bbc:	00c00044 	movi	r3,1
    6bc0:	1908983a 	sll	r4,r3,r4
    6bc4:	0109c83a 	sub	r4,zero,r4
    6bc8:	390eb03a 	or	r7,r7,r4
    6bcc:	d9c01615 	stw	r7,88(sp)
    6bd0:	d9001517 	ldw	r4,84(sp)
    6bd4:	20003c26 	beq	r4,zero,6cc8 <__gxx_personality_sj0+0x4ac>
    6bd8:	01003e0e 	bge	zero,r4,6cd4 <__gxx_personality_sj0+0x4b8>
    6bdc:	01ffffc4 	movi	r7,-1
    6be0:	200b883a 	mov	r5,r4
    6be4:	d809883a 	mov	r4,sp
    6be8:	d9c00915 	stw	r7,36(sp)
    6bec:	00063180 	call	6318 <_ZL15get_ttype_entryP16lsda_header_infom>
    6bf0:	10005f26 	beq	r2,zero,6d70 <__gxx_personality_sj0+0x554>
    6bf4:	d8c01e17 	ldw	r3,120(sp)
    6bf8:	1800571e 	bne	r3,zero,6d58 <__gxx_personality_sj0+0x53c>
    6bfc:	d9001617 	ldw	r4,88(sp)
    6c00:	20002926 	beq	r4,zero,6ca8 <__gxx_personality_sj0+0x48c>
    6c04:	d9c01717 	ldw	r7,92(sp)
    6c08:	390f883a 	add	r7,r7,r4
    6c0c:	d9c01815 	stw	r7,96(sp)
    6c10:	003fbd06 	br	6b08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b08>
    6c14:	d8c01f17 	ldw	r3,124(sp)
    6c18:	1800251e 	bne	r3,zero,6cb0 <__gxx_personality_sj0+0x494>
    6c1c:	01000204 	movi	r4,8
    6c20:	d9001515 	stw	r4,84(sp)
    6c24:	003f1806 	br	6888 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006888>
    6c28:	d8801c17 	ldw	r2,112(sp)
    6c2c:	10000d26 	beq	r2,zero,6c64 <__gxx_personality_sj0+0x448>
    6c30:	00800184 	movi	r2,6
    6c34:	d8801515 	stw	r2,84(sp)
    6c38:	003f1306 	br	6888 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006888>
    6c3c:	00800044 	movi	r2,1
    6c40:	18bf4d1e 	bne	r3,r2,6978 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006978>
    6c44:	0005fe00 	call	5fe0 <_ZSt9terminatev>
    6c48:	d9001b17 	ldw	r4,108(sp)
    6c4c:	00800044 	movi	r2,1
    6c50:	113f4536 	bltu	r2,r4,6968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006968>
    6c54:	00800044 	movi	r2,1
    6c58:	18bf841e 	bne	r3,r2,6a6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a6c>
    6c5c:	d9002317 	ldw	r4,140(sp)
    6c60:	00073340 	call	7334 <__cxa_call_terminate>
    6c64:	d8c01b17 	ldw	r3,108(sp)
    6c68:	00800044 	movi	r2,1
    6c6c:	10fff036 	bltu	r2,r3,6c30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c30>
    6c70:	d9002317 	ldw	r4,140(sp)
    6c74:	d8801817 	ldw	r2,96(sp)
    6c78:	d9c01517 	ldw	r7,84(sp)
    6c7c:	d8c01a17 	ldw	r3,104(sp)
    6c80:	20bffc15 	stw	r2,-16(r4)
    6c84:	d8800717 	ldw	r2,28(sp)
    6c88:	21fffb15 	stw	r7,-20(r4)
    6c8c:	d9c01f17 	ldw	r7,124(sp)
    6c90:	20bfff15 	stw	r2,-4(r4)
    6c94:	00800184 	movi	r2,6
    6c98:	20fffd15 	stw	r3,-12(r4)
    6c9c:	21fffe15 	stw	r7,-8(r4)
    6ca0:	d8801515 	stw	r2,84(sp)
    6ca4:	003ef806 	br	6888 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006888>
    6ca8:	d8801d03 	ldbu	r2,116(sp)
    6cac:	103fdb26 	beq	r2,zero,6c1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c1c>
    6cb0:	d8c01917 	ldw	r3,100(sp)
    6cb4:	1880004c 	andi	r2,r3,1
    6cb8:	103fd81e 	bne	r2,zero,6c1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c1c>
    6cbc:	d8001515 	stw	zero,84(sp)
    6cc0:	00c00084 	movi	r3,2
    6cc4:	003f2306 	br	6954 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006954>
    6cc8:	00c00044 	movi	r3,1
    6ccc:	d8c01d05 	stb	r3,116(sp)
    6cd0:	003fca06 	br	6bfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006bfc>
    6cd4:	d9001e17 	ldw	r4,120(sp)
    6cd8:	20000426 	beq	r4,zero,6cec <__gxx_personality_sj0+0x4d0>
    6cdc:	d9c02017 	ldw	r7,128(sp)
    6ce0:	3800021e 	bne	r7,zero,6cec <__gxx_personality_sj0+0x4d0>
    6ce4:	d8801c17 	ldw	r2,112(sp)
    6ce8:	10002726 	beq	r2,zero,6d88 <__gxx_personality_sj0+0x56c>
    6cec:	d8801517 	ldw	r2,84(sp)
    6cf0:	000d883a 	mov	r6,zero
    6cf4:	000b883a 	mov	r5,zero
    6cf8:	0088303a 	nor	r4,zero,r2
    6cfc:	d8800317 	ldw	r2,12(sp)
    6d00:	1109883a 	add	r4,r2,r4
    6d04:	20800003 	ldbu	r2,0(r4)
    6d08:	21000044 	addi	r4,r4,1
    6d0c:	10c01fcc 	andi	r3,r2,127
    6d10:	1946983a 	sll	r3,r3,r5
    6d14:	10803fcc 	andi	r2,r2,255
    6d18:	1080201c 	xori	r2,r2,128
    6d1c:	10bfe004 	addi	r2,r2,-128
    6d20:	30ccb03a 	or	r6,r6,r3
    6d24:	294001c4 	addi	r5,r5,7
    6d28:	103ff616 	blt	r2,zero,6d04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006d04>
    6d2c:	3005003a 	cmpeq	r2,r6,zero
    6d30:	10803fcc 	andi	r2,r2,255
    6d34:	103fb126 	beq	r2,zero,6bfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006bfc>
    6d38:	d9c01917 	ldw	r7,100(sp)
    6d3c:	3880004c 	andi	r2,r7,1
    6d40:	103fb91e 	bne	r2,zero,6c28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c28>
    6d44:	d8802017 	ldw	r2,128(sp)
    6d48:	10002d26 	beq	r2,zero,6e00 <__gxx_personality_sj0+0x5e4>
    6d4c:	00800044 	movi	r2,1
    6d50:	d8800915 	stw	r2,36(sp)
    6d54:	00060080 	call	6008 <_ZSt10unexpectedv>
    6d58:	d9800704 	addi	r6,sp,28
    6d5c:	180b883a 	mov	r5,r3
    6d60:	1009883a 	mov	r4,r2
    6d64:	000652c0 	call	652c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    6d68:	10803fcc 	andi	r2,r2,255
    6d6c:	103fa326 	beq	r2,zero,6bfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006bfc>
    6d70:	00c000c4 	movi	r3,3
    6d74:	003ef406 	br	6948 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006948>
    6d78:	010000f4 	movhi	r4,3
    6d7c:	2129ae04 	addi	r4,r4,-22856
    6d80:	d9001e15 	stw	r4,120(sp)
    6d84:	003f5f06 	br	6b04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b04>
    6d88:	d9001b17 	ldw	r4,108(sp)
    6d8c:	00c00044 	movi	r3,1
    6d90:	193fd636 	bltu	r3,r4,6cec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006cec>
    6d94:	01ffffc4 	movi	r7,-1
    6d98:	d9c00915 	stw	r7,36(sp)
    6d9c:	d9800717 	ldw	r6,28(sp)
    6da0:	d9c01517 	ldw	r7,84(sp)
    6da4:	d9401e17 	ldw	r5,120(sp)
    6da8:	d809883a 	mov	r4,sp
    6dac:	00067740 	call	6774 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    6db0:	1080005c 	xori	r2,r2,1
    6db4:	003fde06 	br	6d30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006d30>
    6db8:	d9001b17 	ldw	r4,108(sp)
    6dbc:	00800044 	movi	r2,1
    6dc0:	113f4d36 	bltu	r2,r4,6af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006af8>
    6dc4:	d9c02317 	ldw	r7,140(sp)
    6dc8:	38800017 	ldw	r2,0(r7)
    6dcc:	1080004c 	andi	r2,r2,1
    6dd0:	1000061e 	bne	r2,zero,6dec <__gxx_personality_sj0+0x5d0>
    6dd4:	d8c02317 	ldw	r3,140(sp)
    6dd8:	18800504 	addi	r2,r3,20
    6ddc:	d8800715 	stw	r2,28(sp)
    6de0:	10bff017 	ldw	r2,-64(r2)
    6de4:	d8801e15 	stw	r2,120(sp)
    6de8:	003f4606 	br	6b04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006b04>
    6dec:	38bff517 	ldw	r2,-44(r7)
    6df0:	003ffa06 	br	6ddc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ddc>
    6df4:	d9000a17 	ldw	r4,40(sp)
    6df8:	00070540 	call	7054 <__cxa_begin_catch>
    6dfc:	003f9106 	br	6c44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c44>
    6e00:	d9c01c17 	ldw	r7,112(sp)
    6e04:	383eda1e 	bne	r7,zero,6970 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006970>
    6e08:	d8c01b17 	ldw	r3,108(sp)
    6e0c:	00800044 	movi	r2,1
    6e10:	10fed736 	bltu	r2,r3,6970 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006970>
    6e14:	00c000c4 	movi	r3,3
    6e18:	003f8e06 	br	6c54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c54>

00006e1c <__cxa_call_unexpected>:
    6e1c:	00800034 	movhi	r2,0
    6e20:	deffe604 	addi	sp,sp,-104
    6e24:	109a0704 	addi	r2,r2,26652
    6e28:	d8800d15 	stw	r2,52(sp)
    6e2c:	008000b4 	movhi	r2,2
    6e30:	109aa304 	addi	r2,r2,27276
    6e34:	d8800e15 	stw	r2,56(sp)
    6e38:	d8800104 	addi	r2,sp,4
    6e3c:	d8800f15 	stw	r2,60(sp)
    6e40:	00800034 	movhi	r2,0
    6e44:	109baa04 	addi	r2,r2,28328
    6e48:	d9001415 	stw	r4,80(sp)
    6e4c:	d9000704 	addi	r4,sp,28
    6e50:	dfc01915 	stw	ra,100(sp)
    6e54:	d8801015 	stw	r2,64(sp)
    6e58:	df001815 	stw	fp,96(sp)
    6e5c:	dec01115 	stw	sp,68(sp)
    6e60:	000c5f40 	call	c5f4 <_Unwind_SjLj_Register>
    6e64:	d9001417 	ldw	r4,80(sp)
    6e68:	00070540 	call	7054 <__cxa_begin_catch>
    6e6c:	d8c01417 	ldw	r3,80(sp)
    6e70:	18bffe17 	ldw	r2,-8(r3)
    6e74:	193ff717 	ldw	r4,-36(r3)
    6e78:	18fffd17 	ldw	r3,-12(r3)
    6e7c:	d8800315 	stw	r2,12(sp)
    6e80:	d8c01615 	stw	r3,88(sp)
    6e84:	d8c01417 	ldw	r3,80(sp)
    6e88:	18fffb17 	ldw	r3,-20(r3)
    6e8c:	d8c01515 	stw	r3,84(sp)
    6e90:	d8c01417 	ldw	r3,80(sp)
    6e94:	18fff817 	ldw	r3,-32(r3)
    6e98:	d8c01415 	stw	r3,80(sp)
    6e9c:	00c00044 	movi	r3,1
    6ea0:	d8c00815 	stw	r3,32(sp)
    6ea4:	0005ff80 	call	5ff8 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    6ea8:	d8c00917 	ldw	r3,36(sp)
    6eac:	d8800817 	ldw	r2,32(sp)
    6eb0:	d8c01715 	stw	r3,92(sp)
    6eb4:	10000a26 	beq	r2,zero,6ee0 <__cxa_call_unexpected+0xc4>
    6eb8:	10bfffc4 	addi	r2,r2,-1
    6ebc:	10000126 	beq	r2,zero,6ec4 <__cxa_call_unexpected+0xa8>
    6ec0:	003b68fa 	trap	3
    6ec4:	d8000815 	stw	zero,32(sp)
    6ec8:	00071080 	call	7108 <__cxa_end_catch>
    6ecc:	00071080 	call	7108 <__cxa_end_catch>
    6ed0:	d9001717 	ldw	r4,92(sp)
    6ed4:	00bfffc4 	movi	r2,-1
    6ed8:	d8800815 	stw	r2,32(sp)
    6edc:	000c7f00 	call	c7f0 <_Unwind_SjLj_Resume>
    6ee0:	d9001717 	ldw	r4,92(sp)
    6ee4:	00070540 	call	7054 <__cxa_begin_catch>
    6ee8:	00076880 	call	7688 <__cxa_get_globals_fast>
    6eec:	10800017 	ldw	r2,0(r2)
    6ef0:	10c00b17 	ldw	r3,44(r2)
    6ef4:	18c0004c 	andi	r3,r3,1
    6ef8:	18001e26 	beq	r3,zero,6f74 <__cxa_call_unexpected+0x158>
    6efc:	10800017 	ldw	r2,0(r2)
    6f00:	d8801715 	stw	r2,92(sp)
    6f04:	d8801517 	ldw	r2,84(sp)
    6f08:	00802b0e 	bge	zero,r2,6fb8 <__cxa_call_unexpected+0x19c>
    6f0c:	d8c01717 	ldw	r3,92(sp)
    6f10:	d8800317 	ldw	r2,12(sp)
    6f14:	d9c01517 	ldw	r7,84(sp)
    6f18:	193ff017 	ldw	r4,-64(r3)
    6f1c:	d9801617 	ldw	r6,88(sp)
    6f20:	d8800015 	stw	r2,0(sp)
    6f24:	180b883a 	mov	r5,r3
    6f28:	00800084 	movi	r2,2
    6f2c:	d8800815 	stw	r2,32(sp)
    6f30:	00065b40 	call	65b4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    6f34:	10803fcc 	andi	r2,r2,255
    6f38:	10001e1e 	bne	r2,zero,6fb4 <__cxa_call_unexpected+0x198>
    6f3c:	d8800317 	ldw	r2,12(sp)
    6f40:	d9c01517 	ldw	r7,84(sp)
    6f44:	d9801617 	ldw	r6,88(sp)
    6f48:	010000f4 	movhi	r4,3
    6f4c:	d8800015 	stw	r2,0(sp)
    6f50:	21204104 	addi	r4,r4,-32508
    6f54:	00800084 	movi	r2,2
    6f58:	000b883a 	mov	r5,zero
    6f5c:	d8800815 	stw	r2,32(sp)
    6f60:	00065b40 	call	65b4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    6f64:	10803fcc 	andi	r2,r2,255
    6f68:	1000051e 	bne	r2,zero,6f80 <__cxa_call_unexpected+0x164>
    6f6c:	d9001417 	ldw	r4,80(sp)
    6f70:	0005f200 	call	5f20 <_ZN10__cxxabiv111__terminateEPFvvE>
    6f74:	10801004 	addi	r2,r2,64
    6f78:	d8801715 	stw	r2,92(sp)
    6f7c:	003fe106 	br	6f04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f04>
    6f80:	01000104 	movi	r4,4
    6f84:	00074ec0 	call	74ec <__cxa_allocate_exception>
    6f88:	00c000f4 	movhi	r3,3
    6f8c:	18e05c04 	addi	r3,r3,-32400
    6f90:	01800034 	movhi	r6,0
    6f94:	014000f4 	movhi	r5,3
    6f98:	10c00015 	stw	r3,0(r2)
    6f9c:	319d9504 	addi	r6,r6,30292
    6fa0:	00c00084 	movi	r3,2
    6fa4:	29604104 	addi	r5,r5,-32508
    6fa8:	1009883a 	mov	r4,r2
    6fac:	d8c00815 	stw	r3,32(sp)
    6fb0:	00072200 	call	7220 <__cxa_throw>
    6fb4:	00072b00 	call	72b0 <__cxa_rethrow>
    6fb8:	d9401617 	ldw	r5,88(sp)
    6fbc:	00800084 	movi	r2,2
    6fc0:	d9800104 	addi	r6,sp,4
    6fc4:	0009883a 	mov	r4,zero
    6fc8:	d8800815 	stw	r2,32(sp)
    6fcc:	00063f80 	call	63f8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    6fd0:	d9801717 	ldw	r6,92(sp)
    6fd4:	d9c01517 	ldw	r7,84(sp)
    6fd8:	d9000104 	addi	r4,sp,4
    6fdc:	317ff017 	ldw	r5,-64(r6)
    6fe0:	00067740 	call	6774 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    6fe4:	10803fcc 	andi	r2,r2,255
    6fe8:	1000171e 	bne	r2,zero,7048 <__cxa_call_unexpected+0x22c>
    6fec:	d9c01517 	ldw	r7,84(sp)
    6ff0:	014000f4 	movhi	r5,3
    6ff4:	00800084 	movi	r2,2
    6ff8:	29604104 	addi	r5,r5,-32508
    6ffc:	000d883a 	mov	r6,zero
    7000:	d9000104 	addi	r4,sp,4
    7004:	d8800815 	stw	r2,32(sp)
    7008:	00067740 	call	6774 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    700c:	10803fcc 	andi	r2,r2,255
    7010:	103fd626 	beq	r2,zero,6f6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f6c>
    7014:	01000104 	movi	r4,4
    7018:	00074ec0 	call	74ec <__cxa_allocate_exception>
    701c:	00c000f4 	movhi	r3,3
    7020:	18e05c04 	addi	r3,r3,-32400
    7024:	01800034 	movhi	r6,0
    7028:	014000f4 	movhi	r5,3
    702c:	10c00015 	stw	r3,0(r2)
    7030:	319d9504 	addi	r6,r6,30292
    7034:	00c00084 	movi	r3,2
    7038:	29604104 	addi	r5,r5,-32508
    703c:	1009883a 	mov	r4,r2
    7040:	d8c00815 	stw	r3,32(sp)
    7044:	00072200 	call	7220 <__cxa_throw>
    7048:	00072b00 	call	72b0 <__cxa_rethrow>

0000704c <__cxa_get_exception_ptr>:
    704c:	20bfff17 	ldw	r2,-4(r4)
    7050:	f800283a 	ret

00007054 <__cxa_begin_catch>:
    7054:	defffe04 	addi	sp,sp,-8
    7058:	dc000015 	stw	r16,0(sp)
    705c:	dfc00115 	stw	ra,4(sp)
    7060:	2021883a 	mov	r16,r4
    7064:	00076940 	call	7694 <__cxa_get_globals>
    7068:	81000017 	ldw	r4,0(r16)
    706c:	80c00117 	ldw	r3,4(r16)
    7070:	01af3574 	movhi	r6,48341
    7074:	31b54004 	addi	r6,r6,-11008
    7078:	016e2cb4 	movhi	r5,47282
    707c:	296aaf04 	addi	r5,r5,-21828
    7080:	218d883a 	add	r6,r4,r6
    7084:	3109803a 	cmpltu	r4,r6,r4
    7088:	1947883a 	add	r3,r3,r5
    708c:	20c7883a 	add	r3,r4,r3
    7090:	817ff504 	addi	r5,r16,-44
    7094:	11000017 	ldw	r4,0(r2)
    7098:	18000726 	beq	r3,zero,70b8 <__cxa_begin_catch+0x64>
    709c:	2000191e 	bne	r4,zero,7104 <__cxa_begin_catch+0xb0>
    70a0:	11400015 	stw	r5,0(r2)
    70a4:	0005883a 	mov	r2,zero
    70a8:	dfc00117 	ldw	ra,4(sp)
    70ac:	dc000017 	ldw	r16,0(sp)
    70b0:	dec00204 	addi	sp,sp,8
    70b4:	f800283a 	ret
    70b8:	01c00044 	movi	r7,1
    70bc:	39bff736 	bltu	r7,r6,709c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700709c>
    70c0:	80fffa17 	ldw	r3,-24(r16)
    70c4:	18000d16 	blt	r3,zero,70fc <__cxa_begin_catch+0xa8>
    70c8:	18c00044 	addi	r3,r3,1
    70cc:	11800117 	ldw	r6,4(r2)
    70d0:	80fffa15 	stw	r3,-24(r16)
    70d4:	30ffffc4 	addi	r3,r6,-1
    70d8:	10c00115 	stw	r3,4(r2)
    70dc:	21400226 	beq	r4,r5,70e8 <__cxa_begin_catch+0x94>
    70e0:	813ff915 	stw	r4,-28(r16)
    70e4:	11400015 	stw	r5,0(r2)
    70e8:	80bfff17 	ldw	r2,-4(r16)
    70ec:	dfc00117 	ldw	ra,4(sp)
    70f0:	dc000017 	ldw	r16,0(sp)
    70f4:	dec00204 	addi	sp,sp,8
    70f8:	f800283a 	ret
    70fc:	38c7c83a 	sub	r3,r7,r3
    7100:	003ff206 	br	70cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70070cc>
    7104:	0005fe00 	call	5fe0 <_ZSt9terminatev>

00007108 <__cxa_end_catch>:
    7108:	deffff04 	addi	sp,sp,-4
    710c:	dfc00015 	stw	ra,0(sp)
    7110:	00076880 	call	7688 <__cxa_get_globals_fast>
    7114:	11000017 	ldw	r4,0(r2)
    7118:	20001426 	beq	r4,zero,716c <__cxa_end_catch+0x64>
    711c:	21400b17 	ldw	r5,44(r4)
    7120:	01ef3574 	movhi	r7,48341
    7124:	39f54004 	addi	r7,r7,-11008
    7128:	29cf883a 	add	r7,r5,r7
    712c:	20c00c17 	ldw	r3,48(r4)
    7130:	394d803a 	cmpltu	r6,r7,r5
    7134:	016e2cb4 	movhi	r5,47282
    7138:	296aaf04 	addi	r5,r5,-21828
    713c:	1947883a 	add	r3,r3,r5
    7140:	30c7883a 	add	r3,r6,r3
    7144:	18000c1e 	bne	r3,zero,7178 <__cxa_end_catch+0x70>
    7148:	00c00044 	movi	r3,1
    714c:	19c00a36 	bltu	r3,r7,7178 <__cxa_end_catch+0x70>
    7150:	20c00517 	ldw	r3,20(r4)
    7154:	18000d16 	blt	r3,zero,718c <__cxa_end_catch+0x84>
    7158:	18ffffc4 	addi	r3,r3,-1
    715c:	18001026 	beq	r3,zero,71a0 <__cxa_end_catch+0x98>
    7160:	00bfffc4 	movi	r2,-1
    7164:	18801426 	beq	r3,r2,71b8 <__cxa_end_catch+0xb0>
    7168:	20c00515 	stw	r3,20(r4)
    716c:	dfc00017 	ldw	ra,0(sp)
    7170:	dec00104 	addi	sp,sp,4
    7174:	f800283a 	ret
    7178:	21000b04 	addi	r4,r4,44
    717c:	10000015 	stw	zero,0(r2)
    7180:	dfc00017 	ldw	ra,0(sp)
    7184:	dec00104 	addi	sp,sp,4
    7188:	000c8801 	jmpi	c880 <_Unwind_DeleteException>
    718c:	18c00044 	addi	r3,r3,1
    7190:	183ff51e 	bne	r3,zero,7168 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007168>
    7194:	21400417 	ldw	r5,16(r4)
    7198:	11400015 	stw	r5,0(r2)
    719c:	003ff206 	br	7168 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007168>
    71a0:	20c00417 	ldw	r3,16(r4)
    71a4:	21000b04 	addi	r4,r4,44
    71a8:	10c00015 	stw	r3,0(r2)
    71ac:	dfc00017 	ldw	ra,0(sp)
    71b0:	dec00104 	addi	sp,sp,4
    71b4:	000c8801 	jmpi	c880 <_Unwind_DeleteException>
    71b8:	0005fe00 	call	5fe0 <_ZSt9terminatev>

000071bc <_ZSt18uncaught_exceptionv>:
    71bc:	deffff04 	addi	sp,sp,-4
    71c0:	dfc00015 	stw	ra,0(sp)
    71c4:	00076940 	call	7694 <__cxa_get_globals>
    71c8:	10800117 	ldw	r2,4(r2)
    71cc:	1004c03a 	cmpne	r2,r2,zero
    71d0:	dfc00017 	ldw	ra,0(sp)
    71d4:	dec00104 	addi	sp,sp,4
    71d8:	f800283a 	ret

000071dc <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
    71dc:	defffe04 	addi	sp,sp,-8
    71e0:	dfc00115 	stw	ra,4(sp)
    71e4:	dc000015 	stw	r16,0(sp)
    71e8:	00800044 	movi	r2,1
    71ec:	11000a36 	bltu	r2,r4,7218 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
    71f0:	28bff617 	ldw	r2,-40(r5)
    71f4:	2c000504 	addi	r16,r5,20
    71f8:	10000226 	beq	r2,zero,7204 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
    71fc:	8009883a 	mov	r4,r16
    7200:	103ee83a 	callr	r2
    7204:	8009883a 	mov	r4,r16
    7208:	dfc00117 	ldw	ra,4(sp)
    720c:	dc000017 	ldw	r16,0(sp)
    7210:	dec00204 	addi	sp,sp,8
    7214:	000754c1 	jmpi	754c <__cxa_free_exception>
    7218:	293ff817 	ldw	r4,-32(r5)
    721c:	0005f200 	call	5f20 <_ZN10__cxxabiv111__terminateEPFvvE>

00007220 <__cxa_throw>:
    7220:	defffb04 	addi	sp,sp,-20
    7224:	dfc00415 	stw	ra,16(sp)
    7228:	dcc00315 	stw	r19,12(sp)
    722c:	dc800215 	stw	r18,8(sp)
    7230:	2827883a 	mov	r19,r5
    7234:	3025883a 	mov	r18,r6
    7238:	dc400115 	stw	r17,4(sp)
    723c:	dc000015 	stw	r16,0(sp)
    7240:	2021883a 	mov	r16,r4
    7244:	00076940 	call	7694 <__cxa_get_globals>
    7248:	10c00117 	ldw	r3,4(r2)
    724c:	847ffb04 	addi	r17,r16,-20
    7250:	18c00044 	addi	r3,r3,1
    7254:	10c00115 	stw	r3,4(r2)
    7258:	00800044 	movi	r2,1
    725c:	80bfef15 	stw	r2,-68(r16)
    7260:	84fff015 	stw	r19,-64(r16)
    7264:	84bff115 	stw	r18,-60(r16)
    7268:	00060580 	call	6058 <_ZSt14get_unexpectedv>
    726c:	80bff215 	stw	r2,-56(r16)
    7270:	00060340 	call	6034 <_ZSt13get_terminatev>
    7274:	80bff315 	stw	r2,-52(r16)
    7278:	0090caf4 	movhi	r2,17195
    727c:	108ac004 	addi	r2,r2,11008
    7280:	80bffb15 	stw	r2,-20(r16)
    7284:	0091d3b4 	movhi	r2,18254
    7288:	109550c4 	addi	r2,r2,21827
    728c:	80bffc15 	stw	r2,-16(r16)
    7290:	00800034 	movhi	r2,0
    7294:	109c7704 	addi	r2,r2,29148
    7298:	8809883a 	mov	r4,r17
    729c:	80bffd15 	stw	r2,-12(r16)
    72a0:	000c6dc0 	call	c6dc <_Unwind_SjLj_RaiseException>
    72a4:	8809883a 	mov	r4,r17
    72a8:	00070540 	call	7054 <__cxa_begin_catch>
    72ac:	0005fe00 	call	5fe0 <_ZSt9terminatev>

000072b0 <__cxa_rethrow>:
    72b0:	defffe04 	addi	sp,sp,-8
    72b4:	dfc00115 	stw	ra,4(sp)
    72b8:	dc000015 	stw	r16,0(sp)
    72bc:	00076940 	call	7694 <__cxa_get_globals>
    72c0:	10c00117 	ldw	r3,4(r2)
    72c4:	11000017 	ldw	r4,0(r2)
    72c8:	18c00044 	addi	r3,r3,1
    72cc:	10c00115 	stw	r3,4(r2)
    72d0:	20001126 	beq	r4,zero,7318 <__cxa_rethrow+0x68>
    72d4:	21400b17 	ldw	r5,44(r4)
    72d8:	01ef3574 	movhi	r7,48341
    72dc:	39f54004 	addi	r7,r7,-11008
    72e0:	29cf883a 	add	r7,r5,r7
    72e4:	20c00c17 	ldw	r3,48(r4)
    72e8:	394d803a 	cmpltu	r6,r7,r5
    72ec:	016e2cb4 	movhi	r5,47282
    72f0:	296aaf04 	addi	r5,r5,-21828
    72f4:	1947883a 	add	r3,r3,r5
    72f8:	30c7883a 	add	r3,r6,r3
    72fc:	18000726 	beq	r3,zero,731c <__cxa_rethrow+0x6c>
    7300:	10000015 	stw	zero,0(r2)
    7304:	24000b04 	addi	r16,r4,44
    7308:	8009883a 	mov	r4,r16
    730c:	000c8340 	call	c834 <_Unwind_SjLj_Resume_or_Rethrow>
    7310:	8009883a 	mov	r4,r16
    7314:	00070540 	call	7054 <__cxa_begin_catch>
    7318:	0005fe00 	call	5fe0 <_ZSt9terminatev>
    731c:	00c00044 	movi	r3,1
    7320:	19fff736 	bltu	r3,r7,7300 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007300>
    7324:	20800517 	ldw	r2,20(r4)
    7328:	0085c83a 	sub	r2,zero,r2
    732c:	20800515 	stw	r2,20(r4)
    7330:	003ff406 	br	7304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007304>

00007334 <__cxa_call_terminate>:
    7334:	defffe04 	addi	sp,sp,-8
    7338:	dfc00115 	stw	ra,4(sp)
    733c:	dc000015 	stw	r16,0(sp)
    7340:	20000d26 	beq	r4,zero,7378 <__cxa_call_terminate+0x44>
    7344:	2021883a 	mov	r16,r4
    7348:	00070540 	call	7054 <__cxa_begin_catch>
    734c:	80c00017 	ldw	r3,0(r16)
    7350:	016f3574 	movhi	r5,48341
    7354:	29754004 	addi	r5,r5,-11008
    7358:	194b883a 	add	r5,r3,r5
    735c:	80800117 	ldw	r2,4(r16)
    7360:	28c9803a 	cmpltu	r4,r5,r3
    7364:	00ee2cb4 	movhi	r3,47282
    7368:	18eaaf04 	addi	r3,r3,-21828
    736c:	10c5883a 	add	r2,r2,r3
    7370:	2085883a 	add	r2,r4,r2
    7374:	10000126 	beq	r2,zero,737c <__cxa_call_terminate+0x48>
    7378:	0005fe00 	call	5fe0 <_ZSt9terminatev>
    737c:	00800044 	movi	r2,1
    7380:	117ffd36 	bltu	r2,r5,7378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007378>
    7384:	813ff817 	ldw	r4,-32(r16)
    7388:	0005f200 	call	5f20 <_ZN10__cxxabiv111__terminateEPFvvE>

0000738c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
    738c:	01800134 	movhi	r6,4
    7390:	31a1ff04 	addi	r6,r6,-30724
    7394:	31400117 	ldw	r5,4(r6)
    7398:	223fff04 	addi	r8,r4,-4
    739c:	227fff17 	ldw	r9,-4(r4)
    73a0:	28001326 	beq	r5,zero,73f0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
    73a4:	424f883a 	add	r7,r8,r9
    73a8:	29c01426 	beq	r5,r7,73fc <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
    73ac:	28c00117 	ldw	r3,4(r5)
    73b0:	18001c26 	beq	r3,zero,7424 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
    73b4:	38c00336 	bltu	r7,r3,73c4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
    73b8:	00001e06 	br	7434 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
    73bc:	3880052e 	bgeu	r7,r2,73d4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
    73c0:	1007883a 	mov	r3,r2
    73c4:	18800117 	ldw	r2,4(r3)
    73c8:	29800104 	addi	r6,r5,4
    73cc:	180b883a 	mov	r5,r3
    73d0:	103ffa1e 	bne	r2,zero,73bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70073bc>
    73d4:	19400017 	ldw	r5,0(r3)
    73d8:	194f883a 	add	r7,r3,r5
    73dc:	41c00e26 	beq	r8,r7,7418 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
    73e0:	20800015 	stw	r2,0(r4)
    73e4:	30800017 	ldw	r2,0(r6)
    73e8:	12000115 	stw	r8,4(r2)
    73ec:	f800283a 	ret
    73f0:	20000015 	stw	zero,0(r4)
    73f4:	32000115 	stw	r8,4(r6)
    73f8:	f800283a 	ret
    73fc:	28c00017 	ldw	r3,0(r5)
    7400:	28800117 	ldw	r2,4(r5)
    7404:	1a53883a 	add	r9,r3,r9
    7408:	227fff15 	stw	r9,-4(r4)
    740c:	20800015 	stw	r2,0(r4)
    7410:	32000115 	stw	r8,4(r6)
    7414:	f800283a 	ret
    7418:	494b883a 	add	r5,r9,r5
    741c:	19400015 	stw	r5,0(r3)
    7420:	f800283a 	ret
    7424:	0005883a 	mov	r2,zero
    7428:	2807883a 	mov	r3,r5
    742c:	31800104 	addi	r6,r6,4
    7430:	003fe806 	br	73d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70073d4>
    7434:	1805883a 	mov	r2,r3
    7438:	31800104 	addi	r6,r6,4
    743c:	2807883a 	mov	r3,r5
    7440:	003fe406 	br	73d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70073d4>

00007444 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
    7444:	20800104 	addi	r2,r4,4
    7448:	00c001c4 	movi	r3,7
    744c:	1880112e 	bgeu	r3,r2,7494 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
    7450:	20c9883a 	add	r4,r4,r3
    7454:	00bfff04 	movi	r2,-4
    7458:	208a703a 	and	r5,r4,r2
    745c:	01800134 	movhi	r6,4
    7460:	31a1ff04 	addi	r6,r6,-30724
    7464:	30c00117 	ldw	r3,4(r6)
    7468:	18000826 	beq	r3,zero,748c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
    746c:	19000017 	ldw	r4,0(r3)
    7470:	21400436 	bltu	r4,r5,7484 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
    7474:	00001a06 	br	74e0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
    7478:	11000017 	ldw	r4,0(r2)
    747c:	2140072e 	bgeu	r4,r5,749c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
    7480:	1007883a 	mov	r3,r2
    7484:	18800117 	ldw	r2,4(r3)
    7488:	103ffb1e 	bne	r2,zero,7478 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007478>
    748c:	0005883a 	mov	r2,zero
    7490:	f800283a 	ret
    7494:	01400204 	movi	r5,8
    7498:	003ff006 	br	745c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700745c>
    749c:	18c00104 	addi	r3,r3,4
    74a0:	2149c83a 	sub	r4,r4,r5
    74a4:	018001c4 	movi	r6,7
    74a8:	3100092e 	bgeu	r6,r4,74d0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
    74ac:	11c00117 	ldw	r7,4(r2)
    74b0:	114d883a 	add	r6,r2,r5
    74b4:	31000015 	stw	r4,0(r6)
    74b8:	31c00115 	stw	r7,4(r6)
    74bc:	18800017 	ldw	r2,0(r3)
    74c0:	11400015 	stw	r5,0(r2)
    74c4:	19800015 	stw	r6,0(r3)
    74c8:	10800104 	addi	r2,r2,4
    74cc:	f800283a 	ret
    74d0:	11000117 	ldw	r4,4(r2)
    74d4:	10800104 	addi	r2,r2,4
    74d8:	19000015 	stw	r4,0(r3)
    74dc:	f800283a 	ret
    74e0:	1805883a 	mov	r2,r3
    74e4:	30c00104 	addi	r3,r6,4
    74e8:	003fed06 	br	74a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70074a0>

000074ec <__cxa_allocate_exception>:
    74ec:	defffd04 	addi	sp,sp,-12
    74f0:	dc400115 	stw	r17,4(sp)
    74f4:	24401104 	addi	r17,r4,68
    74f8:	8809883a 	mov	r4,r17
    74fc:	dc000015 	stw	r16,0(sp)
    7500:	dfc00215 	stw	ra,8(sp)
    7504:	000cb4c0 	call	cb4c <malloc>
    7508:	1021883a 	mov	r16,r2
    750c:	10000a26 	beq	r2,zero,7538 <__cxa_allocate_exception+0x4c>
    7510:	01801104 	movi	r6,68
    7514:	000b883a 	mov	r5,zero
    7518:	8009883a 	mov	r4,r16
    751c:	000d4c80 	call	d4c8 <memset>
    7520:	80801104 	addi	r2,r16,68
    7524:	dfc00217 	ldw	ra,8(sp)
    7528:	dc400117 	ldw	r17,4(sp)
    752c:	dc000017 	ldw	r16,0(sp)
    7530:	dec00304 	addi	sp,sp,12
    7534:	f800283a 	ret
    7538:	8809883a 	mov	r4,r17
    753c:	00074440 	call	7444 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    7540:	1021883a 	mov	r16,r2
    7544:	103ff21e 	bne	r2,zero,7510 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007510>
    7548:	0005fe00 	call	5fe0 <_ZSt9terminatev>

0000754c <__cxa_free_exception>:
    754c:	00c00134 	movhi	r3,4
    7550:	18e1ff04 	addi	r3,r3,-30724
    7554:	18800217 	ldw	r2,8(r3)
    7558:	213fef04 	addi	r4,r4,-68
    755c:	1100042e 	bgeu	r2,r4,7570 <__cxa_free_exception+0x24>
    7560:	18c00317 	ldw	r3,12(r3)
    7564:	10c5883a 	add	r2,r2,r3
    7568:	2080012e 	bgeu	r4,r2,7570 <__cxa_free_exception+0x24>
    756c:	000738c1 	jmpi	738c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    7570:	000cb601 	jmpi	cb60 <free>

00007574 <__cxa_allocate_dependent_exception>:
    7574:	defffe04 	addi	sp,sp,-8
    7578:	01001004 	movi	r4,64
    757c:	dc000015 	stw	r16,0(sp)
    7580:	dfc00115 	stw	ra,4(sp)
    7584:	000cb4c0 	call	cb4c <malloc>
    7588:	1021883a 	mov	r16,r2
    758c:	10000926 	beq	r2,zero,75b4 <__cxa_allocate_dependent_exception+0x40>
    7590:	01801004 	movi	r6,64
    7594:	000b883a 	mov	r5,zero
    7598:	8009883a 	mov	r4,r16
    759c:	000d4c80 	call	d4c8 <memset>
    75a0:	8005883a 	mov	r2,r16
    75a4:	dfc00117 	ldw	ra,4(sp)
    75a8:	dc000017 	ldw	r16,0(sp)
    75ac:	dec00204 	addi	sp,sp,8
    75b0:	f800283a 	ret
    75b4:	01001004 	movi	r4,64
    75b8:	00074440 	call	7444 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    75bc:	1021883a 	mov	r16,r2
    75c0:	103ff31e 	bne	r2,zero,7590 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007590>
    75c4:	0005fe00 	call	5fe0 <_ZSt9terminatev>

000075c8 <__cxa_free_dependent_exception>:
    75c8:	01400134 	movhi	r5,4
    75cc:	2961ff04 	addi	r5,r5,-30724
    75d0:	28c00217 	ldw	r3,8(r5)
    75d4:	2005883a 	mov	r2,r4
    75d8:	1900042e 	bgeu	r3,r4,75ec <__cxa_free_dependent_exception+0x24>
    75dc:	29400317 	ldw	r5,12(r5)
    75e0:	1947883a 	add	r3,r3,r5
    75e4:	20c0012e 	bgeu	r4,r3,75ec <__cxa_free_dependent_exception+0x24>
    75e8:	000738c1 	jmpi	738c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    75ec:	1009883a 	mov	r4,r2
    75f0:	000cb601 	jmpi	cb60 <free>

000075f4 <_GLOBAL__sub_I___cxa_allocate_exception>:
    75f4:	defffd04 	addi	sp,sp,-12
    75f8:	dc400115 	stw	r17,4(sp)
    75fc:	dc000015 	stw	r16,0(sp)
    7600:	04424004 	movi	r17,2304
    7604:	04000134 	movhi	r16,4
    7608:	8421ff04 	addi	r16,r16,-30724
    760c:	8809883a 	mov	r4,r17
    7610:	dfc00215 	stw	ra,8(sp)
    7614:	84400315 	stw	r17,12(r16)
    7618:	000cb4c0 	call	cb4c <malloc>
    761c:	80800215 	stw	r2,8(r16)
    7620:	10000826 	beq	r2,zero,7644 <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
    7624:	80800115 	stw	r2,4(r16)
    7628:	14400015 	stw	r17,0(r2)
    762c:	10000115 	stw	zero,4(r2)
    7630:	dfc00217 	ldw	ra,8(sp)
    7634:	dc400117 	ldw	r17,4(sp)
    7638:	dc000017 	ldw	r16,0(sp)
    763c:	dec00304 	addi	sp,sp,12
    7640:	f800283a 	ret
    7644:	80000315 	stw	zero,12(r16)
    7648:	80000115 	stw	zero,4(r16)
    764c:	003ff806 	br	7630 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007630>

00007650 <_ZNSt9exceptionD1Ev>:
    7650:	f800283a 	ret

00007654 <_ZNSt13bad_exceptionD1Ev>:
    7654:	f800283a 	ret

00007658 <_ZNKSt9exception4whatEv>:
    7658:	008000f4 	movhi	r2,3
    765c:	10a02f04 	addi	r2,r2,-32580
    7660:	f800283a 	ret

00007664 <_ZNKSt13bad_exception4whatEv>:
    7664:	008000f4 	movhi	r2,3
    7668:	10a03304 	addi	r2,r2,-32564
    766c:	f800283a 	ret

00007670 <_ZNSt9exceptionD0Ev>:
    7670:	0005f1c1 	jmpi	5f1c <_ZdlPv>

00007674 <_ZNSt13bad_exceptionD0Ev>:
    7674:	0005f1c1 	jmpi	5f1c <_ZdlPv>

00007678 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
    7678:	f800283a 	ret

0000767c <_ZN10__cxxabiv115__forced_unwindD0Ev>:
    767c:	0005f1c1 	jmpi	5f1c <_ZdlPv>

00007680 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
    7680:	f800283a 	ret

00007684 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
    7684:	0005f1c1 	jmpi	5f1c <_ZdlPv>

00007688 <__cxa_get_globals_fast>:
    7688:	008000f4 	movhi	r2,3
    768c:	10b1d504 	addi	r2,r2,-14508
    7690:	f800283a 	ret

00007694 <__cxa_get_globals>:
    7694:	008000f4 	movhi	r2,3
    7698:	10b1d504 	addi	r2,r2,-14508
    769c:	f800283a 	ret

000076a0 <round>:
    76a0:	289ffc2c 	andhi	r2,r5,32752
    76a4:	1005d53a 	srai	r2,r2,20
    76a8:	024004c4 	movi	r9,19
    76ac:	2807883a 	mov	r3,r5
    76b0:	123f0044 	addi	r8,r2,-1023
    76b4:	200d883a 	mov	r6,r4
    76b8:	280f883a 	mov	r7,r5
    76bc:	4a000916 	blt	r9,r8,76e4 <round+0x44>
    76c0:	40002516 	blt	r8,zero,7758 <round+0xb8>
    76c4:	00800434 	movhi	r2,16
    76c8:	10bfffc4 	addi	r2,r2,-1
    76cc:	1205d83a 	sra	r2,r2,r8
    76d0:	2888703a 	and	r4,r5,r2
    76d4:	2000181e 	bne	r4,zero,7738 <round+0x98>
    76d8:	3000171e 	bne	r6,zero,7738 <round+0x98>
    76dc:	0005883a 	mov	r2,zero
    76e0:	f800283a 	ret
    76e4:	02400cc4 	movi	r9,51
    76e8:	4a00040e 	bge	r9,r8,76fc <round+0x5c>
    76ec:	00810004 	movi	r2,1024
    76f0:	40802126 	beq	r8,r2,7778 <round+0xd8>
    76f4:	3005883a 	mov	r2,r6
    76f8:	f800283a 	ret
    76fc:	013fffc4 	movi	r4,-1
    7700:	10befb44 	addi	r2,r2,-1043
    7704:	2084d83a 	srl	r2,r4,r2
    7708:	3088703a 	and	r4,r6,r2
    770c:	20001726 	beq	r4,zero,776c <round+0xcc>
    7710:	4a11c83a 	sub	r8,r9,r8
    7714:	02400044 	movi	r9,1
    7718:	4a10983a 	sll	r8,r9,r8
    771c:	4191883a 	add	r8,r8,r6
    7720:	4180012e 	bgeu	r8,r6,7728 <round+0x88>
    7724:	2a47883a 	add	r3,r5,r9
    7728:	0084303a 	nor	r2,zero,r2
    772c:	120c703a 	and	r6,r2,r8
    7730:	3005883a 	mov	r2,r6
    7734:	f800283a 	ret
    7738:	00c00234 	movhi	r3,8
    773c:	1a07d83a 	sra	r3,r3,r8
    7740:	0084303a 	nor	r2,zero,r2
    7744:	000d883a 	mov	r6,zero
    7748:	19c7883a 	add	r3,r3,r7
    774c:	1886703a 	and	r3,r3,r2
    7750:	3005883a 	mov	r2,r6
    7754:	f800283a 	ret
    7758:	00bfffc4 	movi	r2,-1
    775c:	28e0002c 	andhi	r3,r5,32768
    7760:	40800c26 	beq	r8,r2,7794 <round+0xf4>
    7764:	000d883a 	mov	r6,zero
    7768:	003fe206 	br	76f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70076f4>
    776c:	3005883a 	mov	r2,r6
    7770:	2807883a 	mov	r3,r5
    7774:	f800283a 	ret
    7778:	deffff04 	addi	sp,sp,-4
    777c:	280f883a 	mov	r7,r5
    7780:	dfc00015 	stw	ra,0(sp)
    7784:	0009d800 	call	9d80 <__adddf3>
    7788:	dfc00017 	ldw	ra,0(sp)
    778c:	dec00104 	addi	sp,sp,4
    7790:	f800283a 	ret
    7794:	18cffc34 	orhi	r3,r3,16368
    7798:	000d883a 	mov	r6,zero
    779c:	003fd506 	br	76f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70076f4>

000077a0 <roundf>:
    77a0:	20dfe02c 	andhi	r3,r4,32640
    77a4:	1806d5fa 	srli	r3,r3,23
    77a8:	01400584 	movi	r5,22
    77ac:	2005883a 	mov	r2,r4
    77b0:	18ffe044 	addi	r3,r3,-127
    77b4:	28c00c16 	blt	r5,r3,77e8 <roundf+0x48>
    77b8:	18001516 	blt	r3,zero,7810 <roundf+0x70>
    77bc:	01002034 	movhi	r4,128
    77c0:	213fffc4 	addi	r4,r4,-1
    77c4:	20c9d83a 	sra	r4,r4,r3
    77c8:	208a703a 	and	r5,r4,r2
    77cc:	28000826 	beq	r5,zero,77f0 <roundf+0x50>
    77d0:	01401034 	movhi	r5,64
    77d4:	28c7d83a 	sra	r3,r5,r3
    77d8:	0108303a 	nor	r4,zero,r4
    77dc:	1885883a 	add	r2,r3,r2
    77e0:	2084703a 	and	r2,r4,r2
    77e4:	f800283a 	ret
    77e8:	01402004 	movi	r5,128
    77ec:	19400126 	beq	r3,r5,77f4 <roundf+0x54>
    77f0:	f800283a 	ret
    77f4:	deffff04 	addi	sp,sp,-4
    77f8:	200b883a 	mov	r5,r4
    77fc:	dfc00015 	stw	ra,0(sp)
    7800:	00095a00 	call	95a0 <__addsf3>
    7804:	dfc00017 	ldw	ra,0(sp)
    7808:	dec00104 	addi	sp,sp,4
    780c:	f800283a 	ret
    7810:	20a0002c 	andhi	r2,r4,32768
    7814:	013fffc4 	movi	r4,-1
    7818:	193ff51e 	bne	r3,r4,77f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70077f0>
    781c:	108fe034 	orhi	r2,r2,16256
    7820:	f800283a 	ret

00007824 <pow>:
    7824:	deffee04 	addi	sp,sp,-72
    7828:	dc800b15 	stw	r18,44(sp)
    782c:	048000f4 	movhi	r18,3
    7830:	ddc01015 	stw	r23,64(sp)
    7834:	dd800f15 	stw	r22,60(sp)
    7838:	dd400e15 	stw	r21,56(sp)
    783c:	dd000d15 	stw	r20,52(sp)
    7840:	dcc00c15 	stw	r19,48(sp)
    7844:	dc400a15 	stw	r17,40(sp)
    7848:	dc000915 	stw	r16,36(sp)
    784c:	dfc01115 	stw	ra,68(sp)
    7850:	94a9b204 	addi	r18,r18,-22840
    7854:	202f883a 	mov	r23,r4
    7858:	282d883a 	mov	r22,r5
    785c:	302b883a 	mov	r21,r6
    7860:	3829883a 	mov	r20,r7
    7864:	0007e180 	call	7e18 <__ieee754_pow>
    7868:	1023883a 	mov	r17,r2
    786c:	90800017 	ldw	r2,0(r18)
    7870:	04ffffc4 	movi	r19,-1
    7874:	1821883a 	mov	r16,r3
    7878:	14c00426 	beq	r2,r19,788c <pow+0x68>
    787c:	a809883a 	mov	r4,r21
    7880:	a00b883a 	mov	r5,r20
    7884:	00091740 	call	9174 <__fpclassifyd>
    7888:	10000d1e 	bne	r2,zero,78c0 <pow+0x9c>
    788c:	8805883a 	mov	r2,r17
    7890:	8007883a 	mov	r3,r16
    7894:	dfc01117 	ldw	ra,68(sp)
    7898:	ddc01017 	ldw	r23,64(sp)
    789c:	dd800f17 	ldw	r22,60(sp)
    78a0:	dd400e17 	ldw	r21,56(sp)
    78a4:	dd000d17 	ldw	r20,52(sp)
    78a8:	dcc00c17 	ldw	r19,48(sp)
    78ac:	dc800b17 	ldw	r18,44(sp)
    78b0:	dc400a17 	ldw	r17,40(sp)
    78b4:	dc000917 	ldw	r16,36(sp)
    78b8:	dec01204 	addi	sp,sp,72
    78bc:	f800283a 	ret
    78c0:	b809883a 	mov	r4,r23
    78c4:	b00b883a 	mov	r5,r22
    78c8:	00091740 	call	9174 <__fpclassifyd>
    78cc:	000d883a 	mov	r6,zero
    78d0:	000f883a 	mov	r7,zero
    78d4:	1000201e 	bne	r2,zero,7958 <pow+0x134>
    78d8:	a809883a 	mov	r4,r21
    78dc:	a00b883a 	mov	r5,r20
    78e0:	000af140 	call	af14 <__eqdf2>
    78e4:	103fe91e 	bne	r2,zero,788c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700788c>
    78e8:	01000044 	movi	r4,1
    78ec:	d9000015 	stw	r4,0(sp)
    78f0:	90800017 	ldw	r2,0(r18)
    78f4:	010000f4 	movhi	r4,3
    78f8:	00cffc34 	movhi	r3,16368
    78fc:	21206904 	addi	r4,r4,-32348
    7900:	d9000115 	stw	r4,4(sp)
    7904:	d8000815 	stw	zero,32(sp)
    7908:	ddc00215 	stw	r23,8(sp)
    790c:	dd800315 	stw	r22,12(sp)
    7910:	dd400415 	stw	r21,16(sp)
    7914:	dd000515 	stw	r20,20(sp)
    7918:	d8000615 	stw	zero,24(sp)
    791c:	d8c00715 	stw	r3,28(sp)
    7920:	14c02826 	beq	r2,r19,79c4 <pow+0x1a0>
    7924:	01000084 	movi	r4,2
    7928:	11002626 	beq	r2,r4,79c4 <pow+0x1a0>
    792c:	d809883a 	mov	r4,sp
    7930:	00091e80 	call	91e8 <matherr>
    7934:	10006b26 	beq	r2,zero,7ae4 <pow+0x2c0>
    7938:	d8800817 	ldw	r2,32(sp)
    793c:	10000326 	beq	r2,zero,794c <pow+0x128>
    7940:	000cb3c0 	call	cb3c <__errno>
    7944:	d8c00817 	ldw	r3,32(sp)
    7948:	10c00015 	stw	r3,0(r2)
    794c:	d8800617 	ldw	r2,24(sp)
    7950:	d8c00717 	ldw	r3,28(sp)
    7954:	003fcf06 	br	7894 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007894>
    7958:	b809883a 	mov	r4,r23
    795c:	b00b883a 	mov	r5,r22
    7960:	000af140 	call	af14 <__eqdf2>
    7964:	1000191e 	bne	r2,zero,79cc <pow+0x1a8>
    7968:	000d883a 	mov	r6,zero
    796c:	000f883a 	mov	r7,zero
    7970:	a809883a 	mov	r4,r21
    7974:	a00b883a 	mov	r5,r20
    7978:	000af140 	call	af14 <__eqdf2>
    797c:	10003a1e 	bne	r2,zero,7a68 <pow+0x244>
    7980:	00c00044 	movi	r3,1
    7984:	d8c00015 	stw	r3,0(sp)
    7988:	90800017 	ldw	r2,0(r18)
    798c:	00c000f4 	movhi	r3,3
    7990:	18e06904 	addi	r3,r3,-32348
    7994:	d8c00115 	stw	r3,4(sp)
    7998:	d8000815 	stw	zero,32(sp)
    799c:	ddc00215 	stw	r23,8(sp)
    79a0:	dd800315 	stw	r22,12(sp)
    79a4:	dd400415 	stw	r21,16(sp)
    79a8:	dd000515 	stw	r20,20(sp)
    79ac:	d8000615 	stw	zero,24(sp)
    79b0:	d8000715 	stw	zero,28(sp)
    79b4:	103fdd26 	beq	r2,zero,792c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700792c>
    79b8:	0005883a 	mov	r2,zero
    79bc:	00cffc34 	movhi	r3,16368
    79c0:	003fb406 	br	7894 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007894>
    79c4:	0005883a 	mov	r2,zero
    79c8:	003fb206 	br	7894 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007894>
    79cc:	8809883a 	mov	r4,r17
    79d0:	800b883a 	mov	r5,r16
    79d4:	00091580 	call	9158 <finite>
    79d8:	10004626 	beq	r2,zero,7af4 <pow+0x2d0>
    79dc:	000d883a 	mov	r6,zero
    79e0:	000f883a 	mov	r7,zero
    79e4:	8809883a 	mov	r4,r17
    79e8:	800b883a 	mov	r5,r16
    79ec:	000af140 	call	af14 <__eqdf2>
    79f0:	103fa61e 	bne	r2,zero,788c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700788c>
    79f4:	b809883a 	mov	r4,r23
    79f8:	b00b883a 	mov	r5,r22
    79fc:	00091580 	call	9158 <finite>
    7a00:	103fa226 	beq	r2,zero,788c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700788c>
    7a04:	a809883a 	mov	r4,r21
    7a08:	a00b883a 	mov	r5,r20
    7a0c:	00091580 	call	9158 <finite>
    7a10:	103f9e26 	beq	r2,zero,788c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700788c>
    7a14:	00800104 	movi	r2,4
    7a18:	d8800015 	stw	r2,0(sp)
    7a1c:	90c00017 	ldw	r3,0(r18)
    7a20:	008000f4 	movhi	r2,3
    7a24:	10a06904 	addi	r2,r2,-32348
    7a28:	d8800115 	stw	r2,4(sp)
    7a2c:	d8000815 	stw	zero,32(sp)
    7a30:	ddc00215 	stw	r23,8(sp)
    7a34:	dd800315 	stw	r22,12(sp)
    7a38:	dd400415 	stw	r21,16(sp)
    7a3c:	dd000515 	stw	r20,20(sp)
    7a40:	d8000615 	stw	zero,24(sp)
    7a44:	d8000715 	stw	zero,28(sp)
    7a48:	00800084 	movi	r2,2
    7a4c:	18804726 	beq	r3,r2,7b6c <pow+0x348>
    7a50:	d809883a 	mov	r4,sp
    7a54:	00091e80 	call	91e8 <matherr>
    7a58:	10004426 	beq	r2,zero,7b6c <pow+0x348>
    7a5c:	d8800817 	ldw	r2,32(sp)
    7a60:	103fba26 	beq	r2,zero,794c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700794c>
    7a64:	003fb606 	br	7940 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007940>
    7a68:	a809883a 	mov	r4,r21
    7a6c:	a00b883a 	mov	r5,r20
    7a70:	00091580 	call	9158 <finite>
    7a74:	103f8526 	beq	r2,zero,788c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700788c>
    7a78:	000d883a 	mov	r6,zero
    7a7c:	000f883a 	mov	r7,zero
    7a80:	a809883a 	mov	r4,r21
    7a84:	a00b883a 	mov	r5,r20
    7a88:	000b0780 	call	b078 <__ledf2>
    7a8c:	103f7f0e 	bge	r2,zero,788c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700788c>
    7a90:	00c00044 	movi	r3,1
    7a94:	d8c00015 	stw	r3,0(sp)
    7a98:	90800017 	ldw	r2,0(r18)
    7a9c:	00c000f4 	movhi	r3,3
    7aa0:	18e06904 	addi	r3,r3,-32348
    7aa4:	d8c00115 	stw	r3,4(sp)
    7aa8:	d8000815 	stw	zero,32(sp)
    7aac:	ddc00215 	stw	r23,8(sp)
    7ab0:	dd800315 	stw	r22,12(sp)
    7ab4:	dd400415 	stw	r21,16(sp)
    7ab8:	dd000515 	stw	r20,20(sp)
    7abc:	d8000615 	stw	zero,24(sp)
    7ac0:	10002526 	beq	r2,zero,7b58 <pow+0x334>
    7ac4:	00fffc34 	movhi	r3,65520
    7ac8:	d8c00715 	stw	r3,28(sp)
    7acc:	00c00084 	movi	r3,2
    7ad0:	10c0221e 	bne	r2,r3,7b5c <pow+0x338>
    7ad4:	000cb3c0 	call	cb3c <__errno>
    7ad8:	00c00844 	movi	r3,33
    7adc:	10c00015 	stw	r3,0(r2)
    7ae0:	003fde06 	br	7a5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a5c>
    7ae4:	000cb3c0 	call	cb3c <__errno>
    7ae8:	00c00844 	movi	r3,33
    7aec:	10c00015 	stw	r3,0(r2)
    7af0:	003f9106 	br	7938 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007938>
    7af4:	b809883a 	mov	r4,r23
    7af8:	b00b883a 	mov	r5,r22
    7afc:	00091580 	call	9158 <finite>
    7b00:	103fb626 	beq	r2,zero,79dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70079dc>
    7b04:	a809883a 	mov	r4,r21
    7b08:	a00b883a 	mov	r5,r20
    7b0c:	00091580 	call	9158 <finite>
    7b10:	103fb226 	beq	r2,zero,79dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70079dc>
    7b14:	8809883a 	mov	r4,r17
    7b18:	800b883a 	mov	r5,r16
    7b1c:	00091740 	call	9174 <__fpclassifyd>
    7b20:	1000161e 	bne	r2,zero,7b7c <pow+0x358>
    7b24:	00800044 	movi	r2,1
    7b28:	d8800015 	stw	r2,0(sp)
    7b2c:	94000017 	ldw	r16,0(r18)
    7b30:	008000f4 	movhi	r2,3
    7b34:	10a06904 	addi	r2,r2,-32348
    7b38:	d8800115 	stw	r2,4(sp)
    7b3c:	d8000815 	stw	zero,32(sp)
    7b40:	ddc00215 	stw	r23,8(sp)
    7b44:	dd800315 	stw	r22,12(sp)
    7b48:	dd400415 	stw	r21,16(sp)
    7b4c:	dd000515 	stw	r20,20(sp)
    7b50:	8000281e 	bne	r16,zero,7bf4 <pow+0x3d0>
    7b54:	d8000615 	stw	zero,24(sp)
    7b58:	d8000715 	stw	zero,28(sp)
    7b5c:	d809883a 	mov	r4,sp
    7b60:	00091e80 	call	91e8 <matherr>
    7b64:	103fbd1e 	bne	r2,zero,7a5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a5c>
    7b68:	003fda06 	br	7ad4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007ad4>
    7b6c:	000cb3c0 	call	cb3c <__errno>
    7b70:	00c00884 	movi	r3,34
    7b74:	10c00015 	stw	r3,0(r2)
    7b78:	003fb806 	br	7a5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a5c>
    7b7c:	00c000c4 	movi	r3,3
    7b80:	d8c00015 	stw	r3,0(sp)
    7b84:	90800017 	ldw	r2,0(r18)
    7b88:	00c000f4 	movhi	r3,3
    7b8c:	18e06904 	addi	r3,r3,-32348
    7b90:	d8c00115 	stw	r3,4(sp)
    7b94:	d8000815 	stw	zero,32(sp)
    7b98:	ddc00215 	stw	r23,8(sp)
    7b9c:	dd800315 	stw	r22,12(sp)
    7ba0:	dd400415 	stw	r21,16(sp)
    7ba4:	dd000515 	stw	r20,20(sp)
    7ba8:	000d883a 	mov	r6,zero
    7bac:	000f883a 	mov	r7,zero
    7bb0:	b809883a 	mov	r4,r23
    7bb4:	b00b883a 	mov	r5,r22
    7bb8:	1000181e 	bne	r2,zero,7c1c <pow+0x3f8>
    7bbc:	00b80034 	movhi	r2,57344
    7bc0:	d8800615 	stw	r2,24(sp)
    7bc4:	0091fc34 	movhi	r2,18416
    7bc8:	10bfffc4 	addi	r2,r2,-1
    7bcc:	d8800715 	stw	r2,28(sp)
    7bd0:	000b0780 	call	b078 <__ledf2>
    7bd4:	10001a16 	blt	r2,zero,7c40 <pow+0x41c>
    7bd8:	d809883a 	mov	r4,sp
    7bdc:	00091e80 	call	91e8 <matherr>
    7be0:	103f551e 	bne	r2,zero,7938 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007938>
    7be4:	000cb3c0 	call	cb3c <__errno>
    7be8:	00c00884 	movi	r3,34
    7bec:	10c00015 	stw	r3,0(r2)
    7bf0:	003f5106 	br	7938 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007938>
    7bf4:	000d883a 	mov	r6,zero
    7bf8:	000f883a 	mov	r7,zero
    7bfc:	0009883a 	mov	r4,zero
    7c00:	000b883a 	mov	r5,zero
    7c04:	000a62c0 	call	a62c <__divdf3>
    7c08:	d8800615 	stw	r2,24(sp)
    7c0c:	d8c00715 	stw	r3,28(sp)
    7c10:	00800084 	movi	r2,2
    7c14:	80bfaf26 	beq	r16,r2,7ad4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007ad4>
    7c18:	003fd006 	br	7b5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b5c>
    7c1c:	009ffc34 	movhi	r2,32752
    7c20:	d8000615 	stw	zero,24(sp)
    7c24:	d8800715 	stw	r2,28(sp)
    7c28:	000b0780 	call	b078 <__ledf2>
    7c2c:	10001a16 	blt	r2,zero,7c98 <pow+0x474>
    7c30:	90c00017 	ldw	r3,0(r18)
    7c34:	00800084 	movi	r2,2
    7c38:	18bfe71e 	bne	r3,r2,7bd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007bd8>
    7c3c:	003fe906 	br	7be4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007be4>
    7c40:	000d883a 	mov	r6,zero
    7c44:	01cff834 	movhi	r7,16352
    7c48:	a809883a 	mov	r4,r21
    7c4c:	a00b883a 	mov	r5,r20
    7c50:	000b16c0 	call	b16c <__muldf3>
    7c54:	1009883a 	mov	r4,r2
    7c58:	180b883a 	mov	r5,r3
    7c5c:	1023883a 	mov	r17,r2
    7c60:	1821883a 	mov	r16,r3
    7c64:	00091fc0 	call	91fc <rint>
    7c68:	100d883a 	mov	r6,r2
    7c6c:	180f883a 	mov	r7,r3
    7c70:	8809883a 	mov	r4,r17
    7c74:	800b883a 	mov	r5,r16
    7c78:	000af140 	call	af14 <__eqdf2>
    7c7c:	103fec26 	beq	r2,zero,7c30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c30>
    7c80:	00b80034 	movhi	r2,57344
    7c84:	d8800615 	stw	r2,24(sp)
    7c88:	00b1fc34 	movhi	r2,51184
    7c8c:	10bfffc4 	addi	r2,r2,-1
    7c90:	d8800715 	stw	r2,28(sp)
    7c94:	003fe606 	br	7c30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c30>
    7c98:	000d883a 	mov	r6,zero
    7c9c:	01cff834 	movhi	r7,16352
    7ca0:	a809883a 	mov	r4,r21
    7ca4:	a00b883a 	mov	r5,r20
    7ca8:	000b16c0 	call	b16c <__muldf3>
    7cac:	1009883a 	mov	r4,r2
    7cb0:	180b883a 	mov	r5,r3
    7cb4:	1023883a 	mov	r17,r2
    7cb8:	1821883a 	mov	r16,r3
    7cbc:	00091fc0 	call	91fc <rint>
    7cc0:	100d883a 	mov	r6,r2
    7cc4:	180f883a 	mov	r7,r3
    7cc8:	8809883a 	mov	r4,r17
    7ccc:	800b883a 	mov	r5,r16
    7cd0:	000af140 	call	af14 <__eqdf2>
    7cd4:	103fd626 	beq	r2,zero,7c30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c30>
    7cd8:	00bffc34 	movhi	r2,65520
    7cdc:	d8000615 	stw	zero,24(sp)
    7ce0:	d8800715 	stw	r2,28(sp)
    7ce4:	003fd206 	br	7c30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c30>

00007ce8 <sqrt>:
    7ce8:	defff104 	addi	sp,sp,-60
    7cec:	dd000d15 	stw	r20,52(sp)
    7cf0:	050000f4 	movhi	r20,3
    7cf4:	dcc00c15 	stw	r19,48(sp)
    7cf8:	dc800b15 	stw	r18,44(sp)
    7cfc:	dc400a15 	stw	r17,40(sp)
    7d00:	dc000915 	stw	r16,36(sp)
    7d04:	dfc00e15 	stw	ra,56(sp)
    7d08:	a529b204 	addi	r20,r20,-22840
    7d0c:	2027883a 	mov	r19,r4
    7d10:	2825883a 	mov	r18,r5
    7d14:	0008ebc0 	call	8ebc <__ieee754_sqrt>
    7d18:	1821883a 	mov	r16,r3
    7d1c:	a0c00017 	ldw	r3,0(r20)
    7d20:	1023883a 	mov	r17,r2
    7d24:	00bfffc4 	movi	r2,-1
    7d28:	18800a26 	beq	r3,r2,7d54 <sqrt+0x6c>
    7d2c:	9809883a 	mov	r4,r19
    7d30:	900b883a 	mov	r5,r18
    7d34:	00091740 	call	9174 <__fpclassifyd>
    7d38:	10000626 	beq	r2,zero,7d54 <sqrt+0x6c>
    7d3c:	000d883a 	mov	r6,zero
    7d40:	000f883a 	mov	r7,zero
    7d44:	9809883a 	mov	r4,r19
    7d48:	900b883a 	mov	r5,r18
    7d4c:	000b0780 	call	b078 <__ledf2>
    7d50:	10000a16 	blt	r2,zero,7d7c <sqrt+0x94>
    7d54:	8805883a 	mov	r2,r17
    7d58:	8007883a 	mov	r3,r16
    7d5c:	dfc00e17 	ldw	ra,56(sp)
    7d60:	dd000d17 	ldw	r20,52(sp)
    7d64:	dcc00c17 	ldw	r19,48(sp)
    7d68:	dc800b17 	ldw	r18,44(sp)
    7d6c:	dc400a17 	ldw	r17,40(sp)
    7d70:	dc000917 	ldw	r16,36(sp)
    7d74:	dec00f04 	addi	sp,sp,60
    7d78:	f800283a 	ret
    7d7c:	00800044 	movi	r2,1
    7d80:	d8800015 	stw	r2,0(sp)
    7d84:	a4000017 	ldw	r16,0(r20)
    7d88:	008000f4 	movhi	r2,3
    7d8c:	10a06a04 	addi	r2,r2,-32344
    7d90:	d8800115 	stw	r2,4(sp)
    7d94:	d8000815 	stw	zero,32(sp)
    7d98:	dcc00415 	stw	r19,16(sp)
    7d9c:	dc800515 	stw	r18,20(sp)
    7da0:	dcc00215 	stw	r19,8(sp)
    7da4:	dc800315 	stw	r18,12(sp)
    7da8:	80000a1e 	bne	r16,zero,7dd4 <sqrt+0xec>
    7dac:	d8000615 	stw	zero,24(sp)
    7db0:	d8000715 	stw	zero,28(sp)
    7db4:	d809883a 	mov	r4,sp
    7db8:	00091e80 	call	91e8 <matherr>
    7dbc:	10000e26 	beq	r2,zero,7df8 <sqrt+0x110>
    7dc0:	d8800817 	ldw	r2,32(sp)
    7dc4:	1000101e 	bne	r2,zero,7e08 <sqrt+0x120>
    7dc8:	d8800617 	ldw	r2,24(sp)
    7dcc:	d8c00717 	ldw	r3,28(sp)
    7dd0:	003fe206 	br	7d5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d5c>
    7dd4:	000d883a 	mov	r6,zero
    7dd8:	000f883a 	mov	r7,zero
    7ddc:	0009883a 	mov	r4,zero
    7de0:	000b883a 	mov	r5,zero
    7de4:	000a62c0 	call	a62c <__divdf3>
    7de8:	d8800615 	stw	r2,24(sp)
    7dec:	d8c00715 	stw	r3,28(sp)
    7df0:	00800084 	movi	r2,2
    7df4:	80bfef1e 	bne	r16,r2,7db4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007db4>
    7df8:	000cb3c0 	call	cb3c <__errno>
    7dfc:	00c00844 	movi	r3,33
    7e00:	10c00015 	stw	r3,0(r2)
    7e04:	003fee06 	br	7dc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007dc0>
    7e08:	000cb3c0 	call	cb3c <__errno>
    7e0c:	d8c00817 	ldw	r3,32(sp)
    7e10:	10c00015 	stw	r3,0(r2)
    7e14:	003fec06 	br	7dc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007dc8>

00007e18 <__ieee754_pow>:
    7e18:	00a00034 	movhi	r2,32768
    7e1c:	deffea04 	addi	sp,sp,-88
    7e20:	10bfffc4 	addi	r2,r2,-1
    7e24:	dc800e15 	stw	r18,56(sp)
    7e28:	38a4703a 	and	r18,r7,r2
    7e2c:	dfc01515 	stw	ra,84(sp)
    7e30:	df001415 	stw	fp,80(sp)
    7e34:	ddc01315 	stw	r23,76(sp)
    7e38:	dd801215 	stw	r22,72(sp)
    7e3c:	dd401115 	stw	r21,68(sp)
    7e40:	dd001015 	stw	r20,64(sp)
    7e44:	dcc00f15 	stw	r19,60(sp)
    7e48:	dc400d15 	stw	r17,52(sp)
    7e4c:	dc000c15 	stw	r16,48(sp)
    7e50:	9186b03a 	or	r3,r18,r6
    7e54:	18002a26 	beq	r3,zero,7f00 <__ieee754_pow+0xe8>
    7e58:	28a2703a 	and	r17,r5,r2
    7e5c:	009ffc34 	movhi	r2,32752
    7e60:	14402316 	blt	r2,r17,7ef0 <__ieee754_pow+0xd8>
    7e64:	88802126 	beq	r17,r2,7eec <__ieee754_pow+0xd4>
    7e68:	14802116 	blt	r2,r18,7ef0 <__ieee754_pow+0xd8>
    7e6c:	009ffc34 	movhi	r2,32752
    7e70:	90807326 	beq	r18,r2,8040 <__ieee754_pow+0x228>
    7e74:	2827883a 	mov	r19,r5
    7e78:	2021883a 	mov	r16,r4
    7e7c:	302d883a 	mov	r22,r6
    7e80:	3839883a 	mov	fp,r7
    7e84:	28007016 	blt	r5,zero,8048 <__ieee754_pow+0x230>
    7e88:	002b883a 	mov	r21,zero
    7e8c:	b0003a1e 	bne	r22,zero,7f78 <__ieee754_pow+0x160>
    7e90:	009ffc34 	movhi	r2,32752
    7e94:	90807f26 	beq	r18,r2,8094 <__ieee754_pow+0x27c>
    7e98:	008ffc34 	movhi	r2,16368
    7e9c:	90805426 	beq	r18,r2,7ff0 <__ieee754_pow+0x1d8>
    7ea0:	00900034 	movhi	r2,16384
    7ea4:	e0833b26 	beq	fp,r2,8b94 <__ieee754_pow+0xd7c>
    7ea8:	008ff834 	movhi	r2,16352
    7eac:	e080321e 	bne	fp,r2,7f78 <__ieee754_pow+0x160>
    7eb0:	98003116 	blt	r19,zero,7f78 <__ieee754_pow+0x160>
    7eb4:	8009883a 	mov	r4,r16
    7eb8:	980b883a 	mov	r5,r19
    7ebc:	dfc01517 	ldw	ra,84(sp)
    7ec0:	df001417 	ldw	fp,80(sp)
    7ec4:	ddc01317 	ldw	r23,76(sp)
    7ec8:	dd801217 	ldw	r22,72(sp)
    7ecc:	dd401117 	ldw	r21,68(sp)
    7ed0:	dd001017 	ldw	r20,64(sp)
    7ed4:	dcc00f17 	ldw	r19,60(sp)
    7ed8:	dc800e17 	ldw	r18,56(sp)
    7edc:	dc400d17 	ldw	r17,52(sp)
    7ee0:	dc000c17 	ldw	r16,48(sp)
    7ee4:	dec01604 	addi	sp,sp,88
    7ee8:	0008ebc1 	jmpi	8ebc <__ieee754_sqrt>
    7eec:	20001226 	beq	r4,zero,7f38 <__ieee754_pow+0x120>
    7ef0:	00b00434 	movhi	r2,49168
    7ef4:	8885883a 	add	r2,r17,r2
    7ef8:	1108b03a 	or	r4,r2,r4
    7efc:	20000f1e 	bne	r4,zero,7f3c <__ieee754_pow+0x124>
    7f00:	0005883a 	mov	r2,zero
    7f04:	00cffc34 	movhi	r3,16368
    7f08:	dfc01517 	ldw	ra,84(sp)
    7f0c:	df001417 	ldw	fp,80(sp)
    7f10:	ddc01317 	ldw	r23,76(sp)
    7f14:	dd801217 	ldw	r22,72(sp)
    7f18:	dd401117 	ldw	r21,68(sp)
    7f1c:	dd001017 	ldw	r20,64(sp)
    7f20:	dcc00f17 	ldw	r19,60(sp)
    7f24:	dc800e17 	ldw	r18,56(sp)
    7f28:	dc400d17 	ldw	r17,52(sp)
    7f2c:	dc000c17 	ldw	r16,48(sp)
    7f30:	dec01604 	addi	sp,sp,88
    7f34:	f800283a 	ret
    7f38:	8cbfcc0e 	bge	r17,r18,7e6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007e6c>
    7f3c:	010000f4 	movhi	r4,3
    7f40:	2120ba04 	addi	r4,r4,-32024
    7f44:	dfc01517 	ldw	ra,84(sp)
    7f48:	df001417 	ldw	fp,80(sp)
    7f4c:	ddc01317 	ldw	r23,76(sp)
    7f50:	dd801217 	ldw	r22,72(sp)
    7f54:	dd401117 	ldw	r21,68(sp)
    7f58:	dd001017 	ldw	r20,64(sp)
    7f5c:	dcc00f17 	ldw	r19,60(sp)
    7f60:	dc800e17 	ldw	r18,56(sp)
    7f64:	dc400d17 	ldw	r17,52(sp)
    7f68:	dc000c17 	ldw	r16,48(sp)
    7f6c:	dec01604 	addi	sp,sp,88
    7f70:	00091f01 	jmpi	91f0 <nan>
    7f74:	002b883a 	mov	r21,zero
    7f78:	8009883a 	mov	r4,r16
    7f7c:	980b883a 	mov	r5,r19
    7f80:	00091440 	call	9144 <fabs>
    7f84:	102f883a 	mov	r23,r2
    7f88:	80000f26 	beq	r16,zero,7fc8 <__ieee754_pow+0x1b0>
    7f8c:	9816d7fa 	srli	r11,r19,31
    7f90:	5affffc4 	addi	r11,r11,-1
    7f94:	aac4b03a 	or	r2,r21,r11
    7f98:	10004b26 	beq	r2,zero,80c8 <__ieee754_pow+0x2b0>
    7f9c:	00907834 	movhi	r2,16864
    7fa0:	1480540e 	bge	r2,r18,80f4 <__ieee754_pow+0x2dc>
    7fa4:	0090fc34 	movhi	r2,17392
    7fa8:	14832d0e 	bge	r2,r18,8c60 <__ieee754_pow+0xe48>
    7fac:	008ffc34 	movhi	r2,16368
    7fb0:	10bfffc4 	addi	r2,r2,-1
    7fb4:	14401916 	blt	r2,r17,801c <__ieee754_pow+0x204>
    7fb8:	e0001916 	blt	fp,zero,8020 <__ieee754_pow+0x208>
    7fbc:	0005883a 	mov	r2,zero
    7fc0:	0007883a 	mov	r3,zero
    7fc4:	003fd006 	br	7f08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f08>
    7fc8:	88000526 	beq	r17,zero,7fe0 <__ieee754_pow+0x1c8>
    7fcc:	00900034 	movhi	r2,16384
    7fd0:	10bfffc4 	addi	r2,r2,-1
    7fd4:	9884703a 	and	r2,r19,r2
    7fd8:	010ffc34 	movhi	r4,16368
    7fdc:	113feb1e 	bne	r2,r4,7f8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f8c>
    7fe0:	e0000716 	blt	fp,zero,8000 <__ieee754_pow+0x1e8>
    7fe4:	9802e216 	blt	r19,zero,8b70 <__ieee754_pow+0xd58>
    7fe8:	b805883a 	mov	r2,r23
    7fec:	003fc606 	br	7f08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f08>
    7ff0:	e0037516 	blt	fp,zero,8dc8 <__ieee754_pow+0xfb0>
    7ff4:	8005883a 	mov	r2,r16
    7ff8:	9807883a 	mov	r3,r19
    7ffc:	003fc206 	br	7f08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f08>
    8000:	b80d883a 	mov	r6,r23
    8004:	180f883a 	mov	r7,r3
    8008:	0009883a 	mov	r4,zero
    800c:	014ffc34 	movhi	r5,16368
    8010:	000a62c0 	call	a62c <__divdf3>
    8014:	102f883a 	mov	r23,r2
    8018:	003ff206 	br	7fe4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe4>
    801c:	073fe70e 	bge	zero,fp,7fbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fbc>
    8020:	01a20034 	movhi	r6,34816
    8024:	01df8e34 	movhi	r7,32312
    8028:	319d6704 	addi	r6,r6,30108
    802c:	39f90f04 	addi	r7,r7,-7108
    8030:	3009883a 	mov	r4,r6
    8034:	380b883a 	mov	r5,r7
    8038:	000b16c0 	call	b16c <__muldf3>
    803c:	003fb206 	br	7f08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f08>
    8040:	303f8c26 	beq	r6,zero,7e74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007e74>
    8044:	003faa06 	br	7ef0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007ef0>
    8048:	0090d034 	movhi	r2,17216
    804c:	10bfffc4 	addi	r2,r2,-1
    8050:	14801b16 	blt	r2,r18,80c0 <__ieee754_pow+0x2a8>
    8054:	008ffc34 	movhi	r2,16368
    8058:	10bfffc4 	addi	r2,r2,-1
    805c:	14bf8a0e 	bge	r2,r18,7e88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007e88>
    8060:	9005d53a 	srai	r2,r18,20
    8064:	00c00504 	movi	r3,20
    8068:	10bf0044 	addi	r2,r2,-1023
    806c:	18836b0e 	bge	r3,r2,8e1c <__ieee754_pow+0x1004>
    8070:	00c00d04 	movi	r3,52
    8074:	1885c83a 	sub	r2,r3,r2
    8078:	3086d83a 	srl	r3,r6,r2
    807c:	1884983a 	sll	r2,r3,r2
    8080:	30bf811e 	bne	r6,r2,7e88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007e88>
    8084:	18c0004c 	andi	r3,r3,1
    8088:	02800084 	movi	r10,2
    808c:	50ebc83a 	sub	r21,r10,r3
    8090:	003f7e06 	br	7e8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007e8c>
    8094:	01300434 	movhi	r4,49168
    8098:	8909883a 	add	r4,r17,r4
    809c:	2408b03a 	or	r4,r4,r16
    80a0:	203f9726 	beq	r4,zero,7f00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f00>
    80a4:	008ffc34 	movhi	r2,16368
    80a8:	10bfffc4 	addi	r2,r2,-1
    80ac:	1442e60e 	bge	r2,r17,8c48 <__ieee754_pow+0xe30>
    80b0:	e03fc216 	blt	fp,zero,7fbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fbc>
    80b4:	0005883a 	mov	r2,zero
    80b8:	e007883a 	mov	r3,fp
    80bc:	003f9206 	br	7f08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f08>
    80c0:	05400084 	movi	r21,2
    80c4:	003f7106 	br	7e8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007e8c>
    80c8:	800d883a 	mov	r6,r16
    80cc:	980f883a 	mov	r7,r19
    80d0:	3009883a 	mov	r4,r6
    80d4:	380b883a 	mov	r5,r7
    80d8:	000b8840 	call	b884 <__subdf3>
    80dc:	100d883a 	mov	r6,r2
    80e0:	180f883a 	mov	r7,r3
    80e4:	1009883a 	mov	r4,r2
    80e8:	180b883a 	mov	r5,r3
    80ec:	000a62c0 	call	a62c <__divdf3>
    80f0:	003f8506 	br	7f08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f08>
    80f4:	00800434 	movhi	r2,16
    80f8:	10bfffc4 	addi	r2,r2,-1
    80fc:	1442d616 	blt	r2,r17,8c58 <__ieee754_pow+0xe40>
    8100:	b809883a 	mov	r4,r23
    8104:	000d883a 	mov	r6,zero
    8108:	01d0d034 	movhi	r7,17216
    810c:	180b883a 	mov	r5,r3
    8110:	dac00b15 	stw	r11,44(sp)
    8114:	000b16c0 	call	b16c <__muldf3>
    8118:	dac00b17 	ldw	r11,44(sp)
    811c:	102f883a 	mov	r23,r2
    8120:	1823883a 	mov	r17,r3
    8124:	033ff2c4 	movi	r12,-53
    8128:	8807d53a 	srai	r3,r17,20
    812c:	00800434 	movhi	r2,16
    8130:	10bfffc4 	addi	r2,r2,-1
    8134:	18ff0044 	addi	r3,r3,-1023
    8138:	1b19883a 	add	r12,r3,r12
    813c:	00c00134 	movhi	r3,4
    8140:	8884703a 	and	r2,r17,r2
    8144:	18e62384 	addi	r3,r3,-26482
    8148:	150ffc34 	orhi	r20,r2,16368
    814c:	1880060e 	bge	r3,r2,8168 <__ieee754_pow+0x350>
    8150:	00c00334 	movhi	r3,12
    8154:	18ed9e44 	addi	r3,r3,-18823
    8158:	18833f0e 	bge	r3,r2,8e58 <__ieee754_pow+0x1040>
    815c:	00bffc34 	movhi	r2,65520
    8160:	63000044 	addi	r12,r12,1
    8164:	a0a9883a 	add	r20,r20,r2
    8168:	0027883a 	mov	r19,zero
    816c:	d8000215 	stw	zero,8(sp)
    8170:	0013883a 	mov	r9,zero
    8174:	0011883a 	mov	r8,zero
    8178:	0015883a 	mov	r10,zero
    817c:	048ffc34 	movhi	r18,16368
    8180:	900f883a 	mov	r7,r18
    8184:	b809883a 	mov	r4,r23
    8188:	a00b883a 	mov	r5,r20
    818c:	000d883a 	mov	r6,zero
    8190:	da000a15 	stw	r8,40(sp)
    8194:	da400815 	stw	r9,32(sp)
    8198:	dac00b15 	stw	r11,44(sp)
    819c:	db000915 	stw	r12,36(sp)
    81a0:	da800515 	stw	r10,20(sp)
    81a4:	000b8840 	call	b884 <__subdf3>
    81a8:	b809883a 	mov	r4,r23
    81ac:	a00b883a 	mov	r5,r20
    81b0:	900f883a 	mov	r7,r18
    81b4:	000d883a 	mov	r6,zero
    81b8:	d8800015 	stw	r2,0(sp)
    81bc:	d8c00115 	stw	r3,4(sp)
    81c0:	0009d800 	call	9d80 <__adddf3>
    81c4:	100d883a 	mov	r6,r2
    81c8:	180f883a 	mov	r7,r3
    81cc:	0009883a 	mov	r4,zero
    81d0:	014ffc34 	movhi	r5,16368
    81d4:	000a62c0 	call	a62c <__divdf3>
    81d8:	d9000017 	ldw	r4,0(sp)
    81dc:	d9400117 	ldw	r5,4(sp)
    81e0:	100d883a 	mov	r6,r2
    81e4:	180f883a 	mov	r7,r3
    81e8:	d8c00715 	stw	r3,28(sp)
    81ec:	d8800615 	stw	r2,24(sp)
    81f0:	000b16c0 	call	b16c <__muldf3>
    81f4:	1023883a 	mov	r17,r2
    81f8:	a005d07a 	srai	r2,r20,1
    81fc:	da800517 	ldw	r10,20(sp)
    8200:	1821883a 	mov	r16,r3
    8204:	10c80034 	orhi	r3,r2,8192
    8208:	00800234 	movhi	r2,8
    820c:	1885883a 	add	r2,r3,r2
    8210:	1295883a 	add	r10,r2,r10
    8214:	500f883a 	mov	r7,r10
    8218:	800b883a 	mov	r5,r16
    821c:	000d883a 	mov	r6,zero
    8220:	0009883a 	mov	r4,zero
    8224:	da800515 	stw	r10,20(sp)
    8228:	000b16c0 	call	b16c <__muldf3>
    822c:	d9000017 	ldw	r4,0(sp)
    8230:	d9400117 	ldw	r5,4(sp)
    8234:	100d883a 	mov	r6,r2
    8238:	180f883a 	mov	r7,r3
    823c:	000b8840 	call	b884 <__subdf3>
    8240:	da800517 	ldw	r10,20(sp)
    8244:	900f883a 	mov	r7,r18
    8248:	000d883a 	mov	r6,zero
    824c:	500b883a 	mov	r5,r10
    8250:	0009883a 	mov	r4,zero
    8254:	d8800015 	stw	r2,0(sp)
    8258:	d8c00515 	stw	r3,20(sp)
    825c:	000b8840 	call	b884 <__subdf3>
    8260:	b809883a 	mov	r4,r23
    8264:	a00b883a 	mov	r5,r20
    8268:	100d883a 	mov	r6,r2
    826c:	180f883a 	mov	r7,r3
    8270:	000b8840 	call	b884 <__subdf3>
    8274:	800f883a 	mov	r7,r16
    8278:	000d883a 	mov	r6,zero
    827c:	1009883a 	mov	r4,r2
    8280:	180b883a 	mov	r5,r3
    8284:	000b16c0 	call	b16c <__muldf3>
    8288:	db400517 	ldw	r13,20(sp)
    828c:	d9000017 	ldw	r4,0(sp)
    8290:	100d883a 	mov	r6,r2
    8294:	680b883a 	mov	r5,r13
    8298:	180f883a 	mov	r7,r3
    829c:	000b8840 	call	b884 <__subdf3>
    82a0:	dbc00617 	ldw	r15,24(sp)
    82a4:	db800717 	ldw	r14,28(sp)
    82a8:	1009883a 	mov	r4,r2
    82ac:	780d883a 	mov	r6,r15
    82b0:	700f883a 	mov	r7,r14
    82b4:	180b883a 	mov	r5,r3
    82b8:	000b16c0 	call	b16c <__muldf3>
    82bc:	880d883a 	mov	r6,r17
    82c0:	800f883a 	mov	r7,r16
    82c4:	8809883a 	mov	r4,r17
    82c8:	800b883a 	mov	r5,r16
    82cc:	d8800015 	stw	r2,0(sp)
    82d0:	d8c00115 	stw	r3,4(sp)
    82d4:	000b16c0 	call	b16c <__muldf3>
    82d8:	01929174 	movhi	r6,19013
    82dc:	01cff2b4 	movhi	r7,16330
    82e0:	3193bbc4 	addi	r6,r6,20207
    82e4:	39df8a04 	addi	r7,r7,32296
    82e8:	1009883a 	mov	r4,r2
    82ec:	180b883a 	mov	r5,r3
    82f0:	102f883a 	mov	r23,r2
    82f4:	1829883a 	mov	r20,r3
    82f8:	000b16c0 	call	b16c <__muldf3>
    82fc:	01a4f2b4 	movhi	r6,37834
    8300:	01cff3b4 	movhi	r7,16334
    8304:	31b6d944 	addi	r6,r6,-9371
    8308:	39e19284 	addi	r7,r7,-31158
    830c:	1009883a 	mov	r4,r2
    8310:	180b883a 	mov	r5,r3
    8314:	0009d800 	call	9d80 <__adddf3>
    8318:	b80d883a 	mov	r6,r23
    831c:	a00f883a 	mov	r7,r20
    8320:	1009883a 	mov	r4,r2
    8324:	180b883a 	mov	r5,r3
    8328:	000b16c0 	call	b16c <__muldf3>
    832c:	01aa4774 	movhi	r6,43293
    8330:	01cff474 	movhi	r7,16337
    8334:	31904044 	addi	r6,r6,16641
    8338:	39dd1804 	addi	r7,r7,29792
    833c:	1009883a 	mov	r4,r2
    8340:	180b883a 	mov	r5,r3
    8344:	0009d800 	call	9d80 <__adddf3>
    8348:	b80d883a 	mov	r6,r23
    834c:	a00f883a 	mov	r7,r20
    8350:	1009883a 	mov	r4,r2
    8354:	180b883a 	mov	r5,r3
    8358:	000b16c0 	call	b16c <__muldf3>
    835c:	019463f4 	movhi	r6,20879
    8360:	01cff574 	movhi	r7,16341
    8364:	31899344 	addi	r6,r6,9805
    8368:	39d55544 	addi	r7,r7,21845
    836c:	1009883a 	mov	r4,r2
    8370:	180b883a 	mov	r5,r3
    8374:	0009d800 	call	9d80 <__adddf3>
    8378:	b80d883a 	mov	r6,r23
    837c:	a00f883a 	mov	r7,r20
    8380:	1009883a 	mov	r4,r2
    8384:	180b883a 	mov	r5,r3
    8388:	000b16c0 	call	b16c <__muldf3>
    838c:	01b6dc34 	movhi	r6,56176
    8390:	01cff6f4 	movhi	r7,16347
    8394:	31aaffc4 	addi	r6,r6,-21505
    8398:	39db6d84 	addi	r7,r7,28086
    839c:	1009883a 	mov	r4,r2
    83a0:	180b883a 	mov	r5,r3
    83a4:	0009d800 	call	9d80 <__adddf3>
    83a8:	b80d883a 	mov	r6,r23
    83ac:	a00f883a 	mov	r7,r20
    83b0:	1009883a 	mov	r4,r2
    83b4:	180b883a 	mov	r5,r3
    83b8:	000b16c0 	call	b16c <__muldf3>
    83bc:	018cccf4 	movhi	r6,13107
    83c0:	01cff8f4 	movhi	r7,16355
    83c4:	318cc0c4 	addi	r6,r6,13059
    83c8:	39ccccc4 	addi	r7,r7,13107
    83cc:	1009883a 	mov	r4,r2
    83d0:	180b883a 	mov	r5,r3
    83d4:	0009d800 	call	9d80 <__adddf3>
    83d8:	b80d883a 	mov	r6,r23
    83dc:	a00f883a 	mov	r7,r20
    83e0:	b809883a 	mov	r4,r23
    83e4:	a00b883a 	mov	r5,r20
    83e8:	1825883a 	mov	r18,r3
    83ec:	d8800515 	stw	r2,20(sp)
    83f0:	000b16c0 	call	b16c <__muldf3>
    83f4:	db400517 	ldw	r13,20(sp)
    83f8:	900b883a 	mov	r5,r18
    83fc:	100d883a 	mov	r6,r2
    8400:	6809883a 	mov	r4,r13
    8404:	180f883a 	mov	r7,r3
    8408:	000b16c0 	call	b16c <__muldf3>
    840c:	800f883a 	mov	r7,r16
    8410:	8809883a 	mov	r4,r17
    8414:	800b883a 	mov	r5,r16
    8418:	000d883a 	mov	r6,zero
    841c:	102f883a 	mov	r23,r2
    8420:	1829883a 	mov	r20,r3
    8424:	0009d800 	call	9d80 <__adddf3>
    8428:	d9800017 	ldw	r6,0(sp)
    842c:	d9c00117 	ldw	r7,4(sp)
    8430:	1009883a 	mov	r4,r2
    8434:	180b883a 	mov	r5,r3
    8438:	000b16c0 	call	b16c <__muldf3>
    843c:	b80d883a 	mov	r6,r23
    8440:	a00f883a 	mov	r7,r20
    8444:	1009883a 	mov	r4,r2
    8448:	180b883a 	mov	r5,r3
    844c:	0009d800 	call	9d80 <__adddf3>
    8450:	800f883a 	mov	r7,r16
    8454:	800b883a 	mov	r5,r16
    8458:	000d883a 	mov	r6,zero
    845c:	0009883a 	mov	r4,zero
    8460:	1025883a 	mov	r18,r2
    8464:	182f883a 	mov	r23,r3
    8468:	000b16c0 	call	b16c <__muldf3>
    846c:	000d883a 	mov	r6,zero
    8470:	01d00234 	movhi	r7,16392
    8474:	1009883a 	mov	r4,r2
    8478:	180b883a 	mov	r5,r3
    847c:	d8c00715 	stw	r3,28(sp)
    8480:	d8800615 	stw	r2,24(sp)
    8484:	0009d800 	call	9d80 <__adddf3>
    8488:	900d883a 	mov	r6,r18
    848c:	b80f883a 	mov	r7,r23
    8490:	1009883a 	mov	r4,r2
    8494:	180b883a 	mov	r5,r3
    8498:	0009d800 	call	9d80 <__adddf3>
    849c:	800b883a 	mov	r5,r16
    84a0:	000d883a 	mov	r6,zero
    84a4:	180f883a 	mov	r7,r3
    84a8:	0009883a 	mov	r4,zero
    84ac:	1829883a 	mov	r20,r3
    84b0:	000b16c0 	call	b16c <__muldf3>
    84b4:	a00b883a 	mov	r5,r20
    84b8:	000d883a 	mov	r6,zero
    84bc:	01d00234 	movhi	r7,16392
    84c0:	0009883a 	mov	r4,zero
    84c4:	d8800315 	stw	r2,12(sp)
    84c8:	d8c00415 	stw	r3,16(sp)
    84cc:	000b8840 	call	b884 <__subdf3>
    84d0:	dbc00617 	ldw	r15,24(sp)
    84d4:	db800717 	ldw	r14,28(sp)
    84d8:	1009883a 	mov	r4,r2
    84dc:	780d883a 	mov	r6,r15
    84e0:	700f883a 	mov	r7,r14
    84e4:	180b883a 	mov	r5,r3
    84e8:	000b8840 	call	b884 <__subdf3>
    84ec:	9009883a 	mov	r4,r18
    84f0:	b80b883a 	mov	r5,r23
    84f4:	100d883a 	mov	r6,r2
    84f8:	180f883a 	mov	r7,r3
    84fc:	000b8840 	call	b884 <__subdf3>
    8500:	880d883a 	mov	r6,r17
    8504:	800f883a 	mov	r7,r16
    8508:	1009883a 	mov	r4,r2
    850c:	180b883a 	mov	r5,r3
    8510:	000b16c0 	call	b16c <__muldf3>
    8514:	d9000017 	ldw	r4,0(sp)
    8518:	d9400117 	ldw	r5,4(sp)
    851c:	a00f883a 	mov	r7,r20
    8520:	000d883a 	mov	r6,zero
    8524:	1023883a 	mov	r17,r2
    8528:	1821883a 	mov	r16,r3
    852c:	000b16c0 	call	b16c <__muldf3>
    8530:	8809883a 	mov	r4,r17
    8534:	800b883a 	mov	r5,r16
    8538:	100d883a 	mov	r6,r2
    853c:	180f883a 	mov	r7,r3
    8540:	0009d800 	call	9d80 <__adddf3>
    8544:	d9000317 	ldw	r4,12(sp)
    8548:	d9400417 	ldw	r5,16(sp)
    854c:	100d883a 	mov	r6,r2
    8550:	180f883a 	mov	r7,r3
    8554:	102f883a 	mov	r23,r2
    8558:	1823883a 	mov	r17,r3
    855c:	0009d800 	call	9d80 <__adddf3>
    8560:	01cffbf4 	movhi	r7,16367
    8564:	39f1c244 	addi	r7,r7,-14583
    8568:	0009883a 	mov	r4,zero
    856c:	180b883a 	mov	r5,r3
    8570:	01b80034 	movhi	r6,57344
    8574:	1821883a 	mov	r16,r3
    8578:	000b16c0 	call	b16c <__muldf3>
    857c:	d9800317 	ldw	r6,12(sp)
    8580:	d9c00417 	ldw	r7,16(sp)
    8584:	800b883a 	mov	r5,r16
    8588:	0009883a 	mov	r4,zero
    858c:	1825883a 	mov	r18,r3
    8590:	d8800015 	stw	r2,0(sp)
    8594:	000b8840 	call	b884 <__subdf3>
    8598:	b809883a 	mov	r4,r23
    859c:	880b883a 	mov	r5,r17
    85a0:	100d883a 	mov	r6,r2
    85a4:	180f883a 	mov	r7,r3
    85a8:	000b8840 	call	b884 <__subdf3>
    85ac:	01b70eb4 	movhi	r6,56378
    85b0:	01cffbf4 	movhi	r7,16367
    85b4:	3180ff44 	addi	r6,r6,1021
    85b8:	39f1c244 	addi	r7,r7,-14583
    85bc:	1009883a 	mov	r4,r2
    85c0:	180b883a 	mov	r5,r3
    85c4:	000b16c0 	call	b16c <__muldf3>
    85c8:	018516f4 	movhi	r6,5211
    85cc:	01ef8fb4 	movhi	r7,48702
    85d0:	800b883a 	mov	r5,r16
    85d4:	31807d44 	addi	r6,r6,501
    85d8:	39cbf804 	addi	r7,r7,12256
    85dc:	0009883a 	mov	r4,zero
    85e0:	1029883a 	mov	r20,r2
    85e4:	1823883a 	mov	r17,r3
    85e8:	000b16c0 	call	b16c <__muldf3>
    85ec:	a009883a 	mov	r4,r20
    85f0:	880b883a 	mov	r5,r17
    85f4:	100d883a 	mov	r6,r2
    85f8:	180f883a 	mov	r7,r3
    85fc:	0009d800 	call	9d80 <__adddf3>
    8600:	da400817 	ldw	r9,32(sp)
    8604:	da000a17 	ldw	r8,40(sp)
    8608:	180b883a 	mov	r5,r3
    860c:	480d883a 	mov	r6,r9
    8610:	400f883a 	mov	r7,r8
    8614:	1009883a 	mov	r4,r2
    8618:	0009d800 	call	9d80 <__adddf3>
    861c:	db000917 	ldw	r12,36(sp)
    8620:	1029883a 	mov	r20,r2
    8624:	1823883a 	mov	r17,r3
    8628:	6009883a 	mov	r4,r12
    862c:	000c2000 	call	c200 <__floatsidf>
    8630:	d9000017 	ldw	r4,0(sp)
    8634:	a00d883a 	mov	r6,r20
    8638:	880f883a 	mov	r7,r17
    863c:	900b883a 	mov	r5,r18
    8640:	182f883a 	mov	r23,r3
    8644:	d8800115 	stw	r2,4(sp)
    8648:	0009d800 	call	9d80 <__adddf3>
    864c:	d9c00217 	ldw	r7,8(sp)
    8650:	980d883a 	mov	r6,r19
    8654:	1009883a 	mov	r4,r2
    8658:	180b883a 	mov	r5,r3
    865c:	0009d800 	call	9d80 <__adddf3>
    8660:	d9800117 	ldw	r6,4(sp)
    8664:	b80f883a 	mov	r7,r23
    8668:	1009883a 	mov	r4,r2
    866c:	180b883a 	mov	r5,r3
    8670:	0009d800 	call	9d80 <__adddf3>
    8674:	d9800117 	ldw	r6,4(sp)
    8678:	b80f883a 	mov	r7,r23
    867c:	0009883a 	mov	r4,zero
    8680:	180b883a 	mov	r5,r3
    8684:	1821883a 	mov	r16,r3
    8688:	000b8840 	call	b884 <__subdf3>
    868c:	d9c00217 	ldw	r7,8(sp)
    8690:	980d883a 	mov	r6,r19
    8694:	1009883a 	mov	r4,r2
    8698:	180b883a 	mov	r5,r3
    869c:	000b8840 	call	b884 <__subdf3>
    86a0:	d9800017 	ldw	r6,0(sp)
    86a4:	900f883a 	mov	r7,r18
    86a8:	1009883a 	mov	r4,r2
    86ac:	180b883a 	mov	r5,r3
    86b0:	000b8840 	call	b884 <__subdf3>
    86b4:	880b883a 	mov	r5,r17
    86b8:	100d883a 	mov	r6,r2
    86bc:	180f883a 	mov	r7,r3
    86c0:	a009883a 	mov	r4,r20
    86c4:	000b8840 	call	b884 <__subdf3>
    86c8:	dac00b17 	ldw	r11,44(sp)
    86cc:	aabfffc4 	addi	r10,r21,-1
    86d0:	1025883a 	mov	r18,r2
    86d4:	52d6b03a 	or	r11,r10,r11
    86d8:	1823883a 	mov	r17,r3
    86dc:	58015826 	beq	r11,zero,8c40 <__ieee754_pow+0xe28>
    86e0:	04cffc34 	movhi	r19,16368
    86e4:	b009883a 	mov	r4,r22
    86e8:	000d883a 	mov	r6,zero
    86ec:	e00f883a 	mov	r7,fp
    86f0:	e00b883a 	mov	r5,fp
    86f4:	000b8840 	call	b884 <__subdf3>
    86f8:	800f883a 	mov	r7,r16
    86fc:	000d883a 	mov	r6,zero
    8700:	1009883a 	mov	r4,r2
    8704:	180b883a 	mov	r5,r3
    8708:	000b16c0 	call	b16c <__muldf3>
    870c:	b00d883a 	mov	r6,r22
    8710:	9009883a 	mov	r4,r18
    8714:	880b883a 	mov	r5,r17
    8718:	e00f883a 	mov	r7,fp
    871c:	1829883a 	mov	r20,r3
    8720:	102b883a 	mov	r21,r2
    8724:	000b16c0 	call	b16c <__muldf3>
    8728:	a00b883a 	mov	r5,r20
    872c:	100d883a 	mov	r6,r2
    8730:	180f883a 	mov	r7,r3
    8734:	a809883a 	mov	r4,r21
    8738:	0009d800 	call	9d80 <__adddf3>
    873c:	800b883a 	mov	r5,r16
    8740:	000d883a 	mov	r6,zero
    8744:	e00f883a 	mov	r7,fp
    8748:	0009883a 	mov	r4,zero
    874c:	102d883a 	mov	r22,r2
    8750:	1829883a 	mov	r20,r3
    8754:	000b16c0 	call	b16c <__muldf3>
    8758:	100d883a 	mov	r6,r2
    875c:	180f883a 	mov	r7,r3
    8760:	b009883a 	mov	r4,r22
    8764:	a00b883a 	mov	r5,r20
    8768:	1025883a 	mov	r18,r2
    876c:	1823883a 	mov	r17,r3
    8770:	0009d800 	call	9d80 <__adddf3>
    8774:	102f883a 	mov	r23,r2
    8778:	00902434 	movhi	r2,16528
    877c:	10bfffc4 	addi	r2,r2,-1
    8780:	1821883a 	mov	r16,r3
    8784:	9013883a 	mov	r9,r18
    8788:	8811883a 	mov	r8,r17
    878c:	10c1070e 	bge	r2,r3,8bac <__ieee754_pow+0xd94>
    8790:	00afdc34 	movhi	r2,49008
    8794:	1885883a 	add	r2,r3,r2
    8798:	15c4b03a 	or	r2,r2,r23
    879c:	1001901e 	bne	r2,zero,8de0 <__ieee754_pow+0xfc8>
    87a0:	01994b34 	movhi	r6,25900
    87a4:	01cf25f4 	movhi	r7,15511
    87a8:	31a0bf84 	addi	r6,r6,-32002
    87ac:	39c551c4 	addi	r7,r7,5447
    87b0:	b009883a 	mov	r4,r22
    87b4:	a00b883a 	mov	r5,r20
    87b8:	0009d800 	call	9d80 <__adddf3>
    87bc:	900d883a 	mov	r6,r18
    87c0:	880f883a 	mov	r7,r17
    87c4:	b809883a 	mov	r4,r23
    87c8:	800b883a 	mov	r5,r16
    87cc:	1039883a 	mov	fp,r2
    87d0:	182b883a 	mov	r21,r3
    87d4:	000b8840 	call	b884 <__subdf3>
    87d8:	100d883a 	mov	r6,r2
    87dc:	180f883a 	mov	r7,r3
    87e0:	e009883a 	mov	r4,fp
    87e4:	a80b883a 	mov	r5,r21
    87e8:	000af9c0 	call	af9c <__gedf2>
    87ec:	00817c16 	blt	zero,r2,8de0 <__ieee754_pow+0xfc8>
    87f0:	802b883a 	mov	r21,r16
    87f4:	a805d53a 	srai	r2,r21,20
    87f8:	00c00434 	movhi	r3,16
    87fc:	01000434 	movhi	r4,16
    8800:	10bf0084 	addi	r2,r2,-1022
    8804:	1885d83a 	sra	r2,r3,r2
    8808:	213fffc4 	addi	r4,r4,-1
    880c:	1405883a 	add	r2,r2,r16
    8810:	1006907a 	slli	r3,r2,1
    8814:	112a703a 	and	r21,r2,r4
    8818:	ad400434 	orhi	r21,r21,16
    881c:	1806d57a 	srli	r3,r3,21
    8820:	18ff0044 	addi	r3,r3,-1023
    8824:	20cfd83a 	sra	r7,r4,r3
    8828:	01000504 	movi	r4,20
    882c:	20c7c83a 	sub	r3,r4,r3
    8830:	a8c7d83a 	sra	r3,r21,r3
    8834:	01ce303a 	nor	r7,zero,r7
    8838:	388e703a 	and	r7,r7,r2
    883c:	d8c00015 	stw	r3,0(sp)
    8840:	80019016 	blt	r16,zero,8e84 <__ieee754_pow+0x106c>
    8844:	000d883a 	mov	r6,zero
    8848:	9009883a 	mov	r4,r18
    884c:	880b883a 	mov	r5,r17
    8850:	000b8840 	call	b884 <__subdf3>
    8854:	100d883a 	mov	r6,r2
    8858:	180f883a 	mov	r7,r3
    885c:	b009883a 	mov	r4,r22
    8860:	a00b883a 	mov	r5,r20
    8864:	d8c00a15 	stw	r3,40(sp)
    8868:	d8800815 	stw	r2,32(sp)
    886c:	0009d800 	call	9d80 <__adddf3>
    8870:	d8800017 	ldw	r2,0(sp)
    8874:	da000a17 	ldw	r8,40(sp)
    8878:	da400817 	ldw	r9,32(sp)
    887c:	1004953a 	slli	r2,r2,20
    8880:	1821883a 	mov	r16,r3
    8884:	d8800215 	stw	r2,8(sp)
    8888:	01cff9b4 	movhi	r7,16358
    888c:	800b883a 	mov	r5,r16
    8890:	39cb90c4 	addi	r7,r7,11843
    8894:	0009883a 	mov	r4,zero
    8898:	000d883a 	mov	r6,zero
    889c:	da000a15 	stw	r8,40(sp)
    88a0:	da400815 	stw	r9,32(sp)
    88a4:	000b16c0 	call	b16c <__muldf3>
    88a8:	da400817 	ldw	r9,32(sp)
    88ac:	da000a17 	ldw	r8,40(sp)
    88b0:	800b883a 	mov	r5,r16
    88b4:	480d883a 	mov	r6,r9
    88b8:	400f883a 	mov	r7,r8
    88bc:	0009883a 	mov	r4,zero
    88c0:	1039883a 	mov	fp,r2
    88c4:	182f883a 	mov	r23,r3
    88c8:	000b8840 	call	b884 <__subdf3>
    88cc:	b009883a 	mov	r4,r22
    88d0:	a00b883a 	mov	r5,r20
    88d4:	100d883a 	mov	r6,r2
    88d8:	180f883a 	mov	r7,r3
    88dc:	000b8840 	call	b884 <__subdf3>
    88e0:	01bfbeb4 	movhi	r6,65274
    88e4:	01cff9b4 	movhi	r7,16358
    88e8:	318e7bc4 	addi	r6,r6,14831
    88ec:	39cb9084 	addi	r7,r7,11842
    88f0:	1009883a 	mov	r4,r2
    88f4:	180b883a 	mov	r5,r3
    88f8:	000b16c0 	call	b16c <__muldf3>
    88fc:	01832a34 	movhi	r6,3240
    8900:	01ef8834 	movhi	r7,48672
    8904:	800b883a 	mov	r5,r16
    8908:	319b0e44 	addi	r6,r6,27705
    890c:	39d71844 	addi	r7,r7,23649
    8910:	0009883a 	mov	r4,zero
    8914:	1029883a 	mov	r20,r2
    8918:	1823883a 	mov	r17,r3
    891c:	000b16c0 	call	b16c <__muldf3>
    8920:	a009883a 	mov	r4,r20
    8924:	880b883a 	mov	r5,r17
    8928:	100d883a 	mov	r6,r2
    892c:	180f883a 	mov	r7,r3
    8930:	0009d800 	call	9d80 <__adddf3>
    8934:	e009883a 	mov	r4,fp
    8938:	b80b883a 	mov	r5,r23
    893c:	100d883a 	mov	r6,r2
    8940:	180f883a 	mov	r7,r3
    8944:	102d883a 	mov	r22,r2
    8948:	1829883a 	mov	r20,r3
    894c:	0009d800 	call	9d80 <__adddf3>
    8950:	e00d883a 	mov	r6,fp
    8954:	b80f883a 	mov	r7,r23
    8958:	1009883a 	mov	r4,r2
    895c:	180b883a 	mov	r5,r3
    8960:	1023883a 	mov	r17,r2
    8964:	1821883a 	mov	r16,r3
    8968:	000b8840 	call	b884 <__subdf3>
    896c:	b009883a 	mov	r4,r22
    8970:	a00b883a 	mov	r5,r20
    8974:	100d883a 	mov	r6,r2
    8978:	180f883a 	mov	r7,r3
    897c:	000b8840 	call	b884 <__subdf3>
    8980:	880d883a 	mov	r6,r17
    8984:	800f883a 	mov	r7,r16
    8988:	8809883a 	mov	r4,r17
    898c:	800b883a 	mov	r5,r16
    8990:	1039883a 	mov	fp,r2
    8994:	182f883a 	mov	r23,r3
    8998:	000b16c0 	call	b16c <__muldf3>
    899c:	019caff4 	movhi	r6,29375
    89a0:	01cf99b4 	movhi	r7,15974
    89a4:	31a93404 	addi	r6,r6,-23344
    89a8:	39cdda44 	addi	r7,r7,14185
    89ac:	1009883a 	mov	r4,r2
    89b0:	180b883a 	mov	r5,r3
    89b4:	102d883a 	mov	r22,r2
    89b8:	1829883a 	mov	r20,r3
    89bc:	000b16c0 	call	b16c <__muldf3>
    89c0:	01b174b4 	movhi	r6,50642
    89c4:	01cfaf34 	movhi	r7,16060
    89c8:	319afc44 	addi	r6,r6,27633
    89cc:	39ef5044 	addi	r7,r7,-17087
    89d0:	1009883a 	mov	r4,r2
    89d4:	180b883a 	mov	r5,r3
    89d8:	000b8840 	call	b884 <__subdf3>
    89dc:	b00d883a 	mov	r6,r22
    89e0:	a00f883a 	mov	r7,r20
    89e4:	1009883a 	mov	r4,r2
    89e8:	180b883a 	mov	r5,r3
    89ec:	000b16c0 	call	b16c <__muldf3>
    89f0:	01abc9b4 	movhi	r6,44838
    89f4:	01cfc474 	movhi	r7,16145
    89f8:	31b78b04 	addi	r6,r6,-8660
    89fc:	39d59a84 	addi	r7,r7,22122
    8a00:	1009883a 	mov	r4,r2
    8a04:	180b883a 	mov	r5,r3
    8a08:	0009d800 	call	9d80 <__adddf3>
    8a0c:	b00d883a 	mov	r6,r22
    8a10:	a00f883a 	mov	r7,r20
    8a14:	1009883a 	mov	r4,r2
    8a18:	180b883a 	mov	r5,r3
    8a1c:	000b16c0 	call	b16c <__muldf3>
    8a20:	0185aff4 	movhi	r6,5823
    8a24:	01cfd9f4 	movhi	r7,16231
    8a28:	31af64c4 	addi	r6,r6,-17005
    8a2c:	39f05b04 	addi	r7,r7,-16020
    8a30:	1009883a 	mov	r4,r2
    8a34:	180b883a 	mov	r5,r3
    8a38:	000b8840 	call	b884 <__subdf3>
    8a3c:	b00d883a 	mov	r6,r22
    8a40:	a00f883a 	mov	r7,r20
    8a44:	1009883a 	mov	r4,r2
    8a48:	180b883a 	mov	r5,r3
    8a4c:	000b16c0 	call	b16c <__muldf3>
    8a50:	01955574 	movhi	r6,21845
    8a54:	01cff174 	movhi	r7,16325
    8a58:	31954f84 	addi	r6,r6,21822
    8a5c:	39d55544 	addi	r7,r7,21845
    8a60:	1009883a 	mov	r4,r2
    8a64:	180b883a 	mov	r5,r3
    8a68:	0009d800 	call	9d80 <__adddf3>
    8a6c:	b00d883a 	mov	r6,r22
    8a70:	a00f883a 	mov	r7,r20
    8a74:	1009883a 	mov	r4,r2
    8a78:	180b883a 	mov	r5,r3
    8a7c:	000b16c0 	call	b16c <__muldf3>
    8a80:	100d883a 	mov	r6,r2
    8a84:	180f883a 	mov	r7,r3
    8a88:	8809883a 	mov	r4,r17
    8a8c:	800b883a 	mov	r5,r16
    8a90:	000b8840 	call	b884 <__subdf3>
    8a94:	100d883a 	mov	r6,r2
    8a98:	180f883a 	mov	r7,r3
    8a9c:	8809883a 	mov	r4,r17
    8aa0:	800b883a 	mov	r5,r16
    8aa4:	102d883a 	mov	r22,r2
    8aa8:	1829883a 	mov	r20,r3
    8aac:	000b16c0 	call	b16c <__muldf3>
    8ab0:	b009883a 	mov	r4,r22
    8ab4:	a00b883a 	mov	r5,r20
    8ab8:	000d883a 	mov	r6,zero
    8abc:	01d00034 	movhi	r7,16384
    8ac0:	1025883a 	mov	r18,r2
    8ac4:	182b883a 	mov	r21,r3
    8ac8:	000b8840 	call	b884 <__subdf3>
    8acc:	100d883a 	mov	r6,r2
    8ad0:	180f883a 	mov	r7,r3
    8ad4:	9009883a 	mov	r4,r18
    8ad8:	a80b883a 	mov	r5,r21
    8adc:	000a62c0 	call	a62c <__divdf3>
    8ae0:	e00d883a 	mov	r6,fp
    8ae4:	b80f883a 	mov	r7,r23
    8ae8:	8809883a 	mov	r4,r17
    8aec:	800b883a 	mov	r5,r16
    8af0:	102d883a 	mov	r22,r2
    8af4:	1829883a 	mov	r20,r3
    8af8:	000b16c0 	call	b16c <__muldf3>
    8afc:	e00d883a 	mov	r6,fp
    8b00:	b80f883a 	mov	r7,r23
    8b04:	1009883a 	mov	r4,r2
    8b08:	180b883a 	mov	r5,r3
    8b0c:	0009d800 	call	9d80 <__adddf3>
    8b10:	100d883a 	mov	r6,r2
    8b14:	180f883a 	mov	r7,r3
    8b18:	b009883a 	mov	r4,r22
    8b1c:	a00b883a 	mov	r5,r20
    8b20:	000b8840 	call	b884 <__subdf3>
    8b24:	880d883a 	mov	r6,r17
    8b28:	800f883a 	mov	r7,r16
    8b2c:	1009883a 	mov	r4,r2
    8b30:	180b883a 	mov	r5,r3
    8b34:	000b8840 	call	b884 <__subdf3>
    8b38:	0009883a 	mov	r4,zero
    8b3c:	014ffc34 	movhi	r5,16368
    8b40:	100d883a 	mov	r6,r2
    8b44:	180f883a 	mov	r7,r3
    8b48:	000b8840 	call	b884 <__subdf3>
    8b4c:	d9000217 	ldw	r4,8(sp)
    8b50:	190b883a 	add	r5,r3,r4
    8b54:	2809d53a 	srai	r4,r5,20
    8b58:	0100cd0e 	bge	zero,r4,8e90 <__ieee754_pow+0x1078>
    8b5c:	1009883a 	mov	r4,r2
    8b60:	000d883a 	mov	r6,zero
    8b64:	980f883a 	mov	r7,r19
    8b68:	000b16c0 	call	b16c <__muldf3>
    8b6c:	003ce606 	br	7f08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f08>
    8b70:	00b00434 	movhi	r2,49168
    8b74:	8885883a 	add	r2,r17,r2
    8b78:	1544b03a 	or	r2,r2,r21
    8b7c:	1000b326 	beq	r2,zero,8e4c <__ieee754_pow+0x1034>
    8b80:	00800044 	movi	r2,1
    8b84:	a8bd181e 	bne	r21,r2,7fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fe8>
    8b88:	18e0003c 	xorhi	r3,r3,32768
    8b8c:	b805883a 	mov	r2,r23
    8b90:	003cdd06 	br	7f08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f08>
    8b94:	800d883a 	mov	r6,r16
    8b98:	980f883a 	mov	r7,r19
    8b9c:	8009883a 	mov	r4,r16
    8ba0:	980b883a 	mov	r5,r19
    8ba4:	000b16c0 	call	b16c <__muldf3>
    8ba8:	003cd706 	br	7f08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f08>
    8bac:	05600034 	movhi	r21,32768
    8bb0:	ad7fffc4 	addi	r21,r21,-1
    8bb4:	00902474 	movhi	r2,16529
    8bb8:	1d6a703a 	and	r21,r3,r21
    8bbc:	10b2ffc4 	addi	r2,r2,-13313
    8bc0:	15409d0e 	bge	r2,r21,8e38 <__ieee754_pow+0x1020>
    8bc4:	008fdbf4 	movhi	r2,16239
    8bc8:	108d0004 	addi	r2,r2,13312
    8bcc:	1885883a 	add	r2,r3,r2
    8bd0:	15c4b03a 	or	r2,r2,r23
    8bd4:	10000b1e 	bne	r2,zero,8c04 <__ieee754_pow+0xdec>
    8bd8:	900d883a 	mov	r6,r18
    8bdc:	880f883a 	mov	r7,r17
    8be0:	b809883a 	mov	r4,r23
    8be4:	180b883a 	mov	r5,r3
    8be8:	000b8840 	call	b884 <__subdf3>
    8bec:	100d883a 	mov	r6,r2
    8bf0:	180f883a 	mov	r7,r3
    8bf4:	b009883a 	mov	r4,r22
    8bf8:	a00b883a 	mov	r5,r20
    8bfc:	000b0780 	call	b078 <__ledf2>
    8c00:	00befc16 	blt	zero,r2,87f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70087f4>
    8c04:	01b0be74 	movhi	r6,49913
    8c08:	01c06974 	movhi	r7,421
    8c0c:	980b883a 	mov	r5,r19
    8c10:	31bcd644 	addi	r6,r6,-3239
    8c14:	39db87c4 	addi	r7,r7,28191
    8c18:	0009883a 	mov	r4,zero
    8c1c:	000b16c0 	call	b16c <__muldf3>
    8c20:	01b0be74 	movhi	r6,49913
    8c24:	01c06974 	movhi	r7,421
    8c28:	31bcd644 	addi	r6,r6,-3239
    8c2c:	39db87c4 	addi	r7,r7,28191
    8c30:	1009883a 	mov	r4,r2
    8c34:	180b883a 	mov	r5,r3
    8c38:	000b16c0 	call	b16c <__muldf3>
    8c3c:	003cb206 	br	7f08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f08>
    8c40:	04effc34 	movhi	r19,49136
    8c44:	003ea706 	br	86e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70086e4>
    8c48:	e03cdc0e 	bge	fp,zero,7fbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fbc>
    8c4c:	0005883a 	mov	r2,zero
    8c50:	e0e0003c 	xorhi	r3,fp,32768
    8c54:	003cac06 	br	7f08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f08>
    8c58:	0019883a 	mov	r12,zero
    8c5c:	003d3206 	br	8128 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008128>
    8c60:	008ffc34 	movhi	r2,16368
    8c64:	10bfff84 	addi	r2,r2,-2
    8c68:	147cd30e 	bge	r2,r17,7fb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007fb8>
    8c6c:	01cffc34 	movhi	r7,16368
    8c70:	3c7cea16 	blt	r7,r17,801c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700801c>
    8c74:	b809883a 	mov	r4,r23
    8c78:	000d883a 	mov	r6,zero
    8c7c:	180b883a 	mov	r5,r3
    8c80:	dac00b15 	stw	r11,44(sp)
    8c84:	000b8840 	call	b884 <__subdf3>
    8c88:	01cffdf4 	movhi	r7,16375
    8c8c:	39c551c4 	addi	r7,r7,5447
    8c90:	01980034 	movhi	r6,24576
    8c94:	1009883a 	mov	r4,r2
    8c98:	180b883a 	mov	r5,r3
    8c9c:	1023883a 	mov	r17,r2
    8ca0:	1821883a 	mov	r16,r3
    8ca4:	000b16c0 	call	b16c <__muldf3>
    8ca8:	01be17b4 	movhi	r6,63582
    8cac:	01cf9574 	movhi	r7,15957
    8cb0:	8809883a 	mov	r4,r17
    8cb4:	800b883a 	mov	r5,r16
    8cb8:	31b7d104 	addi	r6,r6,-8380
    8cbc:	39eb82c4 	addi	r7,r7,-20981
    8cc0:	1027883a 	mov	r19,r2
    8cc4:	1825883a 	mov	r18,r3
    8cc8:	000b16c0 	call	b16c <__muldf3>
    8ccc:	8809883a 	mov	r4,r17
    8cd0:	800b883a 	mov	r5,r16
    8cd4:	000d883a 	mov	r6,zero
    8cd8:	01cff434 	movhi	r7,16336
    8cdc:	1829883a 	mov	r20,r3
    8ce0:	d8800a15 	stw	r2,40(sp)
    8ce4:	000b16c0 	call	b16c <__muldf3>
    8ce8:	01155574 	movhi	r4,21845
    8cec:	014ff574 	movhi	r5,16341
    8cf0:	100d883a 	mov	r6,r2
    8cf4:	180f883a 	mov	r7,r3
    8cf8:	21155544 	addi	r4,r4,21845
    8cfc:	29555544 	addi	r5,r5,21845
    8d00:	000b8840 	call	b884 <__subdf3>
    8d04:	880d883a 	mov	r6,r17
    8d08:	800f883a 	mov	r7,r16
    8d0c:	1009883a 	mov	r4,r2
    8d10:	180b883a 	mov	r5,r3
    8d14:	000b16c0 	call	b16c <__muldf3>
    8d18:	100d883a 	mov	r6,r2
    8d1c:	180f883a 	mov	r7,r3
    8d20:	0009883a 	mov	r4,zero
    8d24:	014ff834 	movhi	r5,16352
    8d28:	000b8840 	call	b884 <__subdf3>
    8d2c:	880d883a 	mov	r6,r17
    8d30:	800f883a 	mov	r7,r16
    8d34:	8809883a 	mov	r4,r17
    8d38:	800b883a 	mov	r5,r16
    8d3c:	102f883a 	mov	r23,r2
    8d40:	d8c00815 	stw	r3,32(sp)
    8d44:	000b16c0 	call	b16c <__muldf3>
    8d48:	da400817 	ldw	r9,32(sp)
    8d4c:	100d883a 	mov	r6,r2
    8d50:	180f883a 	mov	r7,r3
    8d54:	480b883a 	mov	r5,r9
    8d58:	b809883a 	mov	r4,r23
    8d5c:	000b16c0 	call	b16c <__muldf3>
    8d60:	01994b34 	movhi	r6,25900
    8d64:	01cffdf4 	movhi	r7,16375
    8d68:	31a0bf84 	addi	r6,r6,-32002
    8d6c:	39c551c4 	addi	r7,r7,5447
    8d70:	1009883a 	mov	r4,r2
    8d74:	180b883a 	mov	r5,r3
    8d78:	000b16c0 	call	b16c <__muldf3>
    8d7c:	da000a17 	ldw	r8,40(sp)
    8d80:	a00b883a 	mov	r5,r20
    8d84:	100d883a 	mov	r6,r2
    8d88:	4009883a 	mov	r4,r8
    8d8c:	180f883a 	mov	r7,r3
    8d90:	000b8840 	call	b884 <__subdf3>
    8d94:	100d883a 	mov	r6,r2
    8d98:	180f883a 	mov	r7,r3
    8d9c:	9809883a 	mov	r4,r19
    8da0:	900b883a 	mov	r5,r18
    8da4:	1029883a 	mov	r20,r2
    8da8:	1823883a 	mov	r17,r3
    8dac:	0009d800 	call	9d80 <__adddf3>
    8db0:	1821883a 	mov	r16,r3
    8db4:	980d883a 	mov	r6,r19
    8db8:	900f883a 	mov	r7,r18
    8dbc:	0009883a 	mov	r4,zero
    8dc0:	180b883a 	mov	r5,r3
    8dc4:	003e3a06 	br	86b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70086b0>
    8dc8:	800d883a 	mov	r6,r16
    8dcc:	980f883a 	mov	r7,r19
    8dd0:	0009883a 	mov	r4,zero
    8dd4:	900b883a 	mov	r5,r18
    8dd8:	000a62c0 	call	a62c <__divdf3>
    8ddc:	003c4a06 	br	7f08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f08>
    8de0:	01a20034 	movhi	r6,34816
    8de4:	01df8e34 	movhi	r7,32312
    8de8:	980b883a 	mov	r5,r19
    8dec:	319d6704 	addi	r6,r6,30108
    8df0:	39f90f04 	addi	r7,r7,-7108
    8df4:	0009883a 	mov	r4,zero
    8df8:	000b16c0 	call	b16c <__muldf3>
    8dfc:	01a20034 	movhi	r6,34816
    8e00:	01df8e34 	movhi	r7,32312
    8e04:	319d6704 	addi	r6,r6,30108
    8e08:	39f90f04 	addi	r7,r7,-7108
    8e0c:	1009883a 	mov	r4,r2
    8e10:	180b883a 	mov	r5,r3
    8e14:	000b16c0 	call	b16c <__muldf3>
    8e18:	003c3b06 	br	7f08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f08>
    8e1c:	303c551e 	bne	r6,zero,7f74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f74>
    8e20:	1885c83a 	sub	r2,r3,r2
    8e24:	9087d83a 	sra	r3,r18,r2
    8e28:	1884983a 	sll	r2,r3,r2
    8e2c:	90801f26 	beq	r18,r2,8eac <__ieee754_pow+0x1094>
    8e30:	002b883a 	mov	r21,zero
    8e34:	003c1806 	br	7e98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007e98>
    8e38:	008ff834 	movhi	r2,16352
    8e3c:	157e6d16 	blt	r2,r21,87f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70087f4>
    8e40:	d8000215 	stw	zero,8(sp)
    8e44:	d8000015 	stw	zero,0(sp)
    8e48:	003e8f06 	br	8888 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008888>
    8e4c:	b80d883a 	mov	r6,r23
    8e50:	180f883a 	mov	r7,r3
    8e54:	003c9e06 	br	80d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70080d0>
    8e58:	008ff8f4 	movhi	r2,16355
    8e5c:	10ae00c4 	addi	r2,r2,-18429
    8e60:	0250f434 	movhi	r9,17360
    8e64:	020f9374 	movhi	r8,15949
    8e68:	d8800215 	stw	r2,8(sp)
    8e6c:	4a740184 	addi	r9,r9,-12282
    8e70:	423f7ac4 	addi	r8,r8,-533
    8e74:	04d00034 	movhi	r19,16384
    8e78:	02800134 	movhi	r10,4
    8e7c:	048ffe34 	movhi	r18,16376
    8e80:	003cbf06 	br	8180 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008180>
    8e84:	00c9c83a 	sub	r4,zero,r3
    8e88:	d9000015 	stw	r4,0(sp)
    8e8c:	003e6d06 	br	8844 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008844>
    8e90:	d9800017 	ldw	r6,0(sp)
    8e94:	1009883a 	mov	r4,r2
    8e98:	180b883a 	mov	r5,r3
    8e9c:	00093e80 	call	93e8 <scalbn>
    8ea0:	1009883a 	mov	r4,r2
    8ea4:	180b883a 	mov	r5,r3
    8ea8:	003f2d06 	br	8b60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b60>
    8eac:	18c0004c 	andi	r3,r3,1
    8eb0:	02800084 	movi	r10,2
    8eb4:	50ebc83a 	sub	r21,r10,r3
    8eb8:	003bf706 	br	7e98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007e98>

00008ebc <__ieee754_sqrt>:
    8ebc:	defffd04 	addi	sp,sp,-12
    8ec0:	dc400115 	stw	r17,4(sp)
    8ec4:	dc000015 	stw	r16,0(sp)
    8ec8:	dfc00215 	stw	ra,8(sp)
    8ecc:	28dffc2c 	andhi	r3,r5,32752
    8ed0:	009ffc34 	movhi	r2,32752
    8ed4:	2821883a 	mov	r16,r5
    8ed8:	2023883a 	mov	r17,r4
    8edc:	200d883a 	mov	r6,r4
    8ee0:	18807b26 	beq	r3,r2,90d0 <__ieee754_sqrt+0x214>
    8ee4:	01405f0e 	bge	zero,r5,9064 <__ieee754_sqrt+0x1a8>
    8ee8:	2815d53a 	srai	r10,r5,20
    8eec:	50006a26 	beq	r10,zero,9098 <__ieee754_sqrt+0x1dc>
    8ef0:	00c00434 	movhi	r3,16
    8ef4:	52bf0044 	addi	r10,r10,-1023
    8ef8:	18ffffc4 	addi	r3,r3,-1
    8efc:	80c6703a 	and	r3,r16,r3
    8f00:	5080004c 	andi	r2,r10,1
    8f04:	18c00434 	orhi	r3,r3,16
    8f08:	1000511e 	bne	r2,zero,9050 <__ieee754_sqrt+0x194>
    8f0c:	3004d7fa 	srli	r2,r6,31
    8f10:	5015d07a 	srai	r10,r10,1
    8f14:	18c7883a 	add	r3,r3,r3
    8f18:	10c5883a 	add	r2,r2,r3
    8f1c:	01400584 	movi	r5,22
    8f20:	3187883a 	add	r3,r6,r6
    8f24:	0013883a 	mov	r9,zero
    8f28:	000f883a 	mov	r7,zero
    8f2c:	01000834 	movhi	r4,32
    8f30:	390d883a 	add	r6,r7,r4
    8f34:	1810d7fa 	srli	r8,r3,31
    8f38:	297fffc4 	addi	r5,r5,-1
    8f3c:	11800316 	blt	r2,r6,8f4c <__ieee754_sqrt+0x90>
    8f40:	1185c83a 	sub	r2,r2,r6
    8f44:	310f883a 	add	r7,r6,r4
    8f48:	4913883a 	add	r9,r9,r4
    8f4c:	1085883a 	add	r2,r2,r2
    8f50:	4085883a 	add	r2,r8,r2
    8f54:	18c7883a 	add	r3,r3,r3
    8f58:	2008d07a 	srli	r4,r4,1
    8f5c:	283ff41e 	bne	r5,zero,8f30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f30>
    8f60:	01200034 	movhi	r4,32768
    8f64:	01800804 	movi	r6,32
    8f68:	0011883a 	mov	r8,zero
    8f6c:	0019883a 	mov	r12,zero
    8f70:	201b883a 	mov	r13,r4
    8f74:	00000806 	br	8f98 <__ieee754_sqrt+0xdc>
    8f78:	38801726 	beq	r7,r2,8fd8 <__ieee754_sqrt+0x11c>
    8f7c:	180ad7fa 	srli	r5,r3,31
    8f80:	1085883a 	add	r2,r2,r2
    8f84:	31bfffc4 	addi	r6,r6,-1
    8f88:	2885883a 	add	r2,r5,r2
    8f8c:	18c7883a 	add	r3,r3,r3
    8f90:	2008d07a 	srli	r4,r4,1
    8f94:	30001726 	beq	r6,zero,8ff4 <__ieee754_sqrt+0x138>
    8f98:	230b883a 	add	r5,r4,r12
    8f9c:	38bff60e 	bge	r7,r2,8f78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f78>
    8fa0:	2ae0002c 	andhi	r11,r5,32768
    8fa4:	2919883a 	add	r12,r5,r4
    8fa8:	5b400826 	beq	r11,r13,8fcc <__ieee754_sqrt+0x110>
    8fac:	3817883a 	mov	r11,r7
    8fb0:	11c5c83a 	sub	r2,r2,r7
    8fb4:	1940012e 	bgeu	r3,r5,8fbc <__ieee754_sqrt+0x100>
    8fb8:	10bfffc4 	addi	r2,r2,-1
    8fbc:	1947c83a 	sub	r3,r3,r5
    8fc0:	4111883a 	add	r8,r8,r4
    8fc4:	580f883a 	mov	r7,r11
    8fc8:	003fec06 	br	8f7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f7c>
    8fcc:	603ff716 	blt	r12,zero,8fac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fac>
    8fd0:	3ac00044 	addi	r11,r7,1
    8fd4:	003ff606 	br	8fb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fb0>
    8fd8:	19401936 	bltu	r3,r5,9040 <__ieee754_sqrt+0x184>
    8fdc:	2ae0002c 	andhi	r11,r5,32768
    8fe0:	2919883a 	add	r12,r5,r4
    8fe4:	5b404526 	beq	r11,r13,90fc <__ieee754_sqrt+0x240>
    8fe8:	1017883a 	mov	r11,r2
    8fec:	0005883a 	mov	r2,zero
    8ff0:	003ff206 	br	8fbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fbc>
    8ff4:	10c4b03a 	or	r2,r2,r3
    8ff8:	10000426 	beq	r2,zero,900c <__ieee754_sqrt+0x150>
    8ffc:	00bfffc4 	movi	r2,-1
    9000:	40804026 	beq	r8,r2,9104 <__ieee754_sqrt+0x248>
    9004:	4080004c 	andi	r2,r8,1
    9008:	4091883a 	add	r8,r8,r2
    900c:	4004d07a 	srli	r2,r8,1
    9010:	4807d07a 	srai	r3,r9,1
    9014:	010ff834 	movhi	r4,16352
    9018:	4a40004c 	andi	r9,r9,1
    901c:	1909883a 	add	r4,r3,r4
    9020:	4800091e 	bne	r9,zero,9048 <__ieee754_sqrt+0x18c>
    9024:	5006953a 	slli	r3,r10,20
    9028:	1907883a 	add	r3,r3,r4
    902c:	dfc00217 	ldw	ra,8(sp)
    9030:	dc400117 	ldw	r17,4(sp)
    9034:	dc000017 	ldw	r16,0(sp)
    9038:	dec00304 	addi	sp,sp,12
    903c:	f800283a 	ret
    9040:	3805883a 	mov	r2,r7
    9044:	003fcd06 	br	8f7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f7c>
    9048:	10a00034 	orhi	r2,r2,32768
    904c:	003ff506 	br	9024 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009024>
    9050:	3004d7fa 	srli	r2,r6,31
    9054:	18c7883a 	add	r3,r3,r3
    9058:	318d883a 	add	r6,r6,r6
    905c:	10c7883a 	add	r3,r2,r3
    9060:	003faa06 	br	8f0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f0c>
    9064:	00a00034 	movhi	r2,32768
    9068:	10bfffc4 	addi	r2,r2,-1
    906c:	2884703a 	and	r2,r5,r2
    9070:	1104b03a 	or	r2,r2,r4
    9074:	10001e26 	beq	r2,zero,90f0 <__ieee754_sqrt+0x234>
    9078:	2800291e 	bne	r5,zero,9120 <__ieee754_sqrt+0x264>
    907c:	0015883a 	mov	r10,zero
    9080:	3020d2fa 	srli	r16,r6,11
    9084:	52bffac4 	addi	r10,r10,-21
    9088:	300c957a 	slli	r6,r6,21
    908c:	803ffc26 	beq	r16,zero,9080 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009080>
    9090:	8080042c 	andhi	r2,r16,16
    9094:	10001e1e 	bne	r2,zero,9110 <__ieee754_sqrt+0x254>
    9098:	0005883a 	mov	r2,zero
    909c:	00000106 	br	90a4 <__ieee754_sqrt+0x1e8>
    90a0:	1805883a 	mov	r2,r3
    90a4:	8421883a 	add	r16,r16,r16
    90a8:	8100042c 	andhi	r4,r16,16
    90ac:	10c00044 	addi	r3,r2,1
    90b0:	203ffb26 	beq	r4,zero,90a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090a0>
    90b4:	01000804 	movi	r4,32
    90b8:	20c9c83a 	sub	r4,r4,r3
    90bc:	3108d83a 	srl	r4,r6,r4
    90c0:	5095c83a 	sub	r10,r10,r2
    90c4:	30cc983a 	sll	r6,r6,r3
    90c8:	2420b03a 	or	r16,r4,r16
    90cc:	003f8806 	br	8ef0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ef0>
    90d0:	280f883a 	mov	r7,r5
    90d4:	000b16c0 	call	b16c <__muldf3>
    90d8:	880d883a 	mov	r6,r17
    90dc:	800f883a 	mov	r7,r16
    90e0:	1009883a 	mov	r4,r2
    90e4:	180b883a 	mov	r5,r3
    90e8:	0009d800 	call	9d80 <__adddf3>
    90ec:	003fcf06 	br	902c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700902c>
    90f0:	2005883a 	mov	r2,r4
    90f4:	2807883a 	mov	r3,r5
    90f8:	003fcc06 	br	902c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700902c>
    90fc:	603fba16 	blt	r12,zero,8fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fe8>
    9100:	003fb306 	br	8fd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fd0>
    9104:	4a400044 	addi	r9,r9,1
    9108:	0005883a 	mov	r2,zero
    910c:	003fc006 	br	9010 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009010>
    9110:	01000804 	movi	r4,32
    9114:	00bfffc4 	movi	r2,-1
    9118:	0007883a 	mov	r3,zero
    911c:	003fe706 	br	90bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090bc>
    9120:	200d883a 	mov	r6,r4
    9124:	280f883a 	mov	r7,r5
    9128:	000b8840 	call	b884 <__subdf3>
    912c:	100d883a 	mov	r6,r2
    9130:	180f883a 	mov	r7,r3
    9134:	1009883a 	mov	r4,r2
    9138:	180b883a 	mov	r5,r3
    913c:	000a62c0 	call	a62c <__divdf3>
    9140:	003fba06 	br	902c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700902c>

00009144 <fabs>:
    9144:	00e00034 	movhi	r3,32768
    9148:	18ffffc4 	addi	r3,r3,-1
    914c:	2005883a 	mov	r2,r4
    9150:	28c6703a 	and	r3,r5,r3
    9154:	f800283a 	ret

00009158 <finite>:
    9158:	00a00034 	movhi	r2,32768
    915c:	10bfffc4 	addi	r2,r2,-1
    9160:	288a703a 	and	r5,r5,r2
    9164:	00e00434 	movhi	r3,32784
    9168:	28c5883a 	add	r2,r5,r3
    916c:	1004d7fa 	srli	r2,r2,31
    9170:	f800283a 	ret

00009174 <__fpclassifyd>:
    9174:	00a00034 	movhi	r2,32768
    9178:	10bfffc4 	addi	r2,r2,-1
    917c:	2884703a 	and	r2,r5,r2
    9180:	10000726 	beq	r2,zero,91a0 <__fpclassifyd+0x2c>
    9184:	00fffc34 	movhi	r3,65520
    9188:	019ff834 	movhi	r6,32736
    918c:	28c7883a 	add	r3,r5,r3
    9190:	31bfffc4 	addi	r6,r6,-1
    9194:	30c00536 	bltu	r6,r3,91ac <__fpclassifyd+0x38>
    9198:	00800104 	movi	r2,4
    919c:	f800283a 	ret
    91a0:	2000021e 	bne	r4,zero,91ac <__fpclassifyd+0x38>
    91a4:	00800084 	movi	r2,2
    91a8:	f800283a 	ret
    91ac:	00dffc34 	movhi	r3,32752
    91b0:	019ff834 	movhi	r6,32736
    91b4:	28cb883a 	add	r5,r5,r3
    91b8:	31bfffc4 	addi	r6,r6,-1
    91bc:	317ff62e 	bgeu	r6,r5,9198 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009198>
    91c0:	01400434 	movhi	r5,16
    91c4:	297fffc4 	addi	r5,r5,-1
    91c8:	28800236 	bltu	r5,r2,91d4 <__fpclassifyd+0x60>
    91cc:	008000c4 	movi	r2,3
    91d0:	f800283a 	ret
    91d4:	10c00226 	beq	r2,r3,91e0 <__fpclassifyd+0x6c>
    91d8:	0005883a 	mov	r2,zero
    91dc:	f800283a 	ret
    91e0:	2005003a 	cmpeq	r2,r4,zero
    91e4:	f800283a 	ret

000091e8 <matherr>:
    91e8:	0005883a 	mov	r2,zero
    91ec:	f800283a 	ret

000091f0 <nan>:
    91f0:	0005883a 	mov	r2,zero
    91f4:	00dffe34 	movhi	r3,32760
    91f8:	f800283a 	ret

000091fc <rint>:
    91fc:	2813d53a 	srai	r9,r5,20
    9200:	defff904 	addi	sp,sp,-28
    9204:	dc000215 	stw	r16,8(sp)
    9208:	4a41ffcc 	andi	r9,r9,2047
    920c:	dfc00615 	stw	ra,24(sp)
    9210:	dcc00515 	stw	r19,20(sp)
    9214:	dc800415 	stw	r18,16(sp)
    9218:	dc400315 	stw	r17,12(sp)
    921c:	01c004c4 	movi	r7,19
    9220:	49bf0044 	addi	r6,r9,-1023
    9224:	2811883a 	mov	r8,r5
    9228:	2005883a 	mov	r2,r4
    922c:	2807883a 	mov	r3,r5
    9230:	2015883a 	mov	r10,r4
    9234:	2820d7fa 	srli	r16,r5,31
    9238:	39801316 	blt	r7,r6,9288 <rint+0x8c>
    923c:	30003d16 	blt	r6,zero,9334 <rint+0x138>
    9240:	01000434 	movhi	r4,16
    9244:	213fffc4 	addi	r4,r4,-1
    9248:	2189d83a 	sra	r4,r4,r6
    924c:	290a703a 	and	r5,r5,r4
    9250:	288ab03a 	or	r5,r5,r2
    9254:	28001026 	beq	r5,zero,9298 <rint+0x9c>
    9258:	2008d07a 	srli	r4,r4,1
    925c:	4104703a 	and	r2,r8,r4
    9260:	1294b03a 	or	r10,r2,r10
    9264:	50005626 	beq	r10,zero,93c0 <rint+0x1c4>
    9268:	31c05d26 	beq	r6,r7,93e0 <rint+0x1e4>
    926c:	0015883a 	mov	r10,zero
    9270:	00c00134 	movhi	r3,4
    9274:	1987d83a 	sra	r3,r3,r6
    9278:	0108303a 	nor	r4,zero,r4
    927c:	2210703a 	and	r8,r4,r8
    9280:	40c6b03a 	or	r3,r8,r3
    9284:	00001806 	br	92e8 <rint+0xec>
    9288:	01c00cc4 	movi	r7,51
    928c:	3980090e 	bge	r7,r6,92b4 <rint+0xb8>
    9290:	01c10004 	movi	r7,1024
    9294:	31c04e26 	beq	r6,r7,93d0 <rint+0x1d4>
    9298:	dfc00617 	ldw	ra,24(sp)
    929c:	dcc00517 	ldw	r19,20(sp)
    92a0:	dc800417 	ldw	r18,16(sp)
    92a4:	dc400317 	ldw	r17,12(sp)
    92a8:	dc000217 	ldw	r16,8(sp)
    92ac:	dec00704 	addi	sp,sp,28
    92b0:	f800283a 	ret
    92b4:	4a7efb44 	addi	r9,r9,-1043
    92b8:	013fffc4 	movi	r4,-1
    92bc:	2248d83a 	srl	r4,r4,r9
    92c0:	110a703a 	and	r5,r2,r4
    92c4:	28004026 	beq	r5,zero,93c8 <rint+0x1cc>
    92c8:	2008d07a 	srli	r4,r4,1
    92cc:	1104703a 	and	r2,r2,r4
    92d0:	10000526 	beq	r2,zero,92e8 <rint+0xec>
    92d4:	00900034 	movhi	r2,16384
    92d8:	1253d83a 	sra	r9,r2,r9
    92dc:	0108303a 	nor	r4,zero,r4
    92e0:	2294703a 	and	r10,r4,r10
    92e4:	4a94b03a 	or	r10,r9,r10
    92e8:	802090fa 	slli	r16,r16,3
    92ec:	180b883a 	mov	r5,r3
    92f0:	00c000f4 	movhi	r3,3
    92f4:	18e06c04 	addi	r3,r3,-32336
    92f8:	1c21883a 	add	r16,r3,r16
    92fc:	84400017 	ldw	r17,0(r16)
    9300:	84000117 	ldw	r16,4(r16)
    9304:	5009883a 	mov	r4,r10
    9308:	880d883a 	mov	r6,r17
    930c:	800f883a 	mov	r7,r16
    9310:	0009d800 	call	9d80 <__adddf3>
    9314:	d8800015 	stw	r2,0(sp)
    9318:	d8c00115 	stw	r3,4(sp)
    931c:	d9000017 	ldw	r4,0(sp)
    9320:	d9400117 	ldw	r5,4(sp)
    9324:	880d883a 	mov	r6,r17
    9328:	800f883a 	mov	r7,r16
    932c:	000b8840 	call	b884 <__subdf3>
    9330:	003fd906 	br	9298 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009298>
    9334:	04600034 	movhi	r17,32768
    9338:	8c7fffc4 	addi	r17,r17,-1
    933c:	2c46703a 	and	r3,r5,r17
    9340:	1906b03a 	or	r3,r3,r4
    9344:	18002026 	beq	r3,zero,93c8 <rint+0x1cc>
    9348:	01800434 	movhi	r6,16
    934c:	31bfffc4 	addi	r6,r6,-1
    9350:	298c703a 	and	r6,r5,r6
    9354:	3104b03a 	or	r2,r6,r4
    9358:	008bc83a 	sub	r5,zero,r2
    935c:	800690fa 	slli	r3,r16,3
    9360:	2884b03a 	or	r2,r5,r2
    9364:	014000f4 	movhi	r5,3
    9368:	29606c04 	addi	r5,r5,-32336
    936c:	28c7883a 	add	r3,r5,r3
    9370:	1004d33a 	srli	r2,r2,12
    9374:	1cc00017 	ldw	r19,0(r3)
    9378:	1c800117 	ldw	r18,4(r3)
    937c:	417fffac 	andhi	r5,r8,65534
    9380:	1080022c 	andhi	r2,r2,8
    9384:	980d883a 	mov	r6,r19
    9388:	900f883a 	mov	r7,r18
    938c:	114ab03a 	or	r5,r2,r5
    9390:	0009d800 	call	9d80 <__adddf3>
    9394:	d8800015 	stw	r2,0(sp)
    9398:	d8c00115 	stw	r3,4(sp)
    939c:	d9000017 	ldw	r4,0(sp)
    93a0:	d9400117 	ldw	r5,4(sp)
    93a4:	980d883a 	mov	r6,r19
    93a8:	900f883a 	mov	r7,r18
    93ac:	000b8840 	call	b884 <__subdf3>
    93b0:	800897fa 	slli	r4,r16,31
    93b4:	1c46703a 	and	r3,r3,r17
    93b8:	1906b03a 	or	r3,r3,r4
    93bc:	003fb606 	br	9298 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009298>
    93c0:	0015883a 	mov	r10,zero
    93c4:	003fc806 	br	92e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70092e8>
    93c8:	4007883a 	mov	r3,r8
    93cc:	003fb206 	br	9298 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009298>
    93d0:	200d883a 	mov	r6,r4
    93d4:	280f883a 	mov	r7,r5
    93d8:	0009d800 	call	9d80 <__adddf3>
    93dc:	003fae06 	br	9298 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009298>
    93e0:	02a00034 	movhi	r10,32768
    93e4:	003fa206 	br	9270 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009270>

000093e8 <scalbn>:
    93e8:	2a1ffc2c 	andhi	r8,r5,32752
    93ec:	4011d53a 	srai	r8,r8,20
    93f0:	defffe04 	addi	sp,sp,-8
    93f4:	dc000015 	stw	r16,0(sp)
    93f8:	dfc00115 	stw	ra,4(sp)
    93fc:	280f883a 	mov	r7,r5
    9400:	2015883a 	mov	r10,r4
    9404:	3021883a 	mov	r16,r6
    9408:	40001e1e 	bne	r8,zero,9484 <scalbn+0x9c>
    940c:	00a00034 	movhi	r2,32768
    9410:	10bfffc4 	addi	r2,r2,-1
    9414:	2884703a 	and	r2,r5,r2
    9418:	1104b03a 	or	r2,r2,r4
    941c:	10002226 	beq	r2,zero,94a8 <scalbn+0xc0>
    9420:	01d0d434 	movhi	r7,17232
    9424:	000d883a 	mov	r6,zero
    9428:	000b16c0 	call	b16c <__muldf3>
    942c:	013ffff4 	movhi	r4,65535
    9430:	210f2c04 	addi	r4,r4,15536
    9434:	1015883a 	mov	r10,r2
    9438:	180f883a 	mov	r7,r3
    943c:	81002a16 	blt	r16,r4,94e8 <scalbn+0x100>
    9440:	191ffc2c 	andhi	r4,r3,32752
    9444:	2009d53a 	srai	r4,r4,20
    9448:	223ff284 	addi	r8,r4,-54
    944c:	8211883a 	add	r8,r16,r8
    9450:	0081ff84 	movi	r2,2046
    9454:	12002f16 	blt	r2,r8,9514 <scalbn+0x12c>
    9458:	0200190e 	bge	zero,r8,94c0 <scalbn+0xd8>
    945c:	4010953a 	slli	r8,r8,20
    9460:	01600434 	movhi	r5,32784
    9464:	297fffc4 	addi	r5,r5,-1
    9468:	194e703a 	and	r7,r3,r5
    946c:	5005883a 	mov	r2,r10
    9470:	3a06b03a 	or	r3,r7,r8
    9474:	dfc00117 	ldw	ra,4(sp)
    9478:	dc000017 	ldw	r16,0(sp)
    947c:	dec00204 	addi	sp,sp,8
    9480:	f800283a 	ret
    9484:	0081ffc4 	movi	r2,2047
    9488:	2807883a 	mov	r3,r5
    948c:	40bfef1e 	bne	r8,r2,944c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700944c>
    9490:	200d883a 	mov	r6,r4
    9494:	0009d800 	call	9d80 <__adddf3>
    9498:	dfc00117 	ldw	ra,4(sp)
    949c:	dc000017 	ldw	r16,0(sp)
    94a0:	dec00204 	addi	sp,sp,8
    94a4:	f800283a 	ret
    94a8:	2005883a 	mov	r2,r4
    94ac:	2807883a 	mov	r3,r5
    94b0:	dfc00117 	ldw	ra,4(sp)
    94b4:	dc000017 	ldw	r16,0(sp)
    94b8:	dec00204 	addi	sp,sp,8
    94bc:	f800283a 	ret
    94c0:	00bff2c4 	movi	r2,-53
    94c4:	4080240e 	bge	r8,r2,9558 <scalbn+0x170>
    94c8:	00b0d414 	movui	r2,50000
    94cc:	14001116 	blt	r2,r16,9514 <scalbn+0x12c>
    94d0:	0130be74 	movhi	r4,49913
    94d4:	01406974 	movhi	r5,421
    94d8:	213cd644 	addi	r4,r4,-3239
    94dc:	295b87c4 	addi	r5,r5,28191
    94e0:	500d883a 	mov	r6,r10
    94e4:	00095840 	call	9584 <copysign>
    94e8:	01b0be74 	movhi	r6,49913
    94ec:	01c06974 	movhi	r7,421
    94f0:	31bcd644 	addi	r6,r6,-3239
    94f4:	39db87c4 	addi	r7,r7,28191
    94f8:	1009883a 	mov	r4,r2
    94fc:	180b883a 	mov	r5,r3
    9500:	000b16c0 	call	b16c <__muldf3>
    9504:	dfc00117 	ldw	ra,4(sp)
    9508:	dc000017 	ldw	r16,0(sp)
    950c:	dec00204 	addi	sp,sp,8
    9510:	f800283a 	ret
    9514:	01220034 	movhi	r4,34816
    9518:	015f8e34 	movhi	r5,32312
    951c:	500d883a 	mov	r6,r10
    9520:	211d6704 	addi	r4,r4,30108
    9524:	29790f04 	addi	r5,r5,-7108
    9528:	00095840 	call	9584 <copysign>
    952c:	01a20034 	movhi	r6,34816
    9530:	01df8e34 	movhi	r7,32312
    9534:	319d6704 	addi	r6,r6,30108
    9538:	39f90f04 	addi	r7,r7,-7108
    953c:	1009883a 	mov	r4,r2
    9540:	180b883a 	mov	r5,r3
    9544:	000b16c0 	call	b16c <__muldf3>
    9548:	dfc00117 	ldw	ra,4(sp)
    954c:	dc000017 	ldw	r16,0(sp)
    9550:	dec00204 	addi	sp,sp,8
    9554:	f800283a 	ret
    9558:	42000d84 	addi	r8,r8,54
    955c:	4012953a 	slli	r9,r8,20
    9560:	01e00434 	movhi	r7,32784
    9564:	39ffffc4 	addi	r7,r7,-1
    9568:	19ca703a 	and	r5,r3,r7
    956c:	000d883a 	mov	r6,zero
    9570:	01cf2434 	movhi	r7,15504
    9574:	5009883a 	mov	r4,r10
    9578:	494ab03a 	or	r5,r9,r5
    957c:	000b16c0 	call	b16c <__muldf3>
    9580:	003fbc06 	br	9474 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009474>

00009584 <copysign>:
    9584:	2005883a 	mov	r2,r4
    9588:	01200034 	movhi	r4,32768
    958c:	213fffc4 	addi	r4,r4,-1
    9590:	38e0002c 	andhi	r3,r7,32768
    9594:	290a703a 	and	r5,r5,r4
    9598:	28c6b03a 	or	r3,r5,r3
    959c:	f800283a 	ret

000095a0 <__addsf3>:
    95a0:	defffc04 	addi	sp,sp,-16
    95a4:	2004d7fa 	srli	r2,r4,31
    95a8:	280cd5fa 	srli	r6,r5,23
    95ac:	dc000015 	stw	r16,0(sp)
    95b0:	00c02034 	movhi	r3,128
    95b4:	2020d5fa 	srli	r16,r4,23
    95b8:	280ed7fa 	srli	r7,r5,31
    95bc:	18ffffc4 	addi	r3,r3,-1
    95c0:	dc400115 	stw	r17,4(sp)
    95c4:	1908703a 	and	r4,r3,r4
    95c8:	194a703a 	and	r5,r3,r5
    95cc:	dfc00315 	stw	ra,12(sp)
    95d0:	dc800215 	stw	r18,8(sp)
    95d4:	14403fcc 	andi	r17,r2,255
    95d8:	84003fcc 	andi	r16,r16,255
    95dc:	200890fa 	slli	r4,r4,3
    95e0:	31803fcc 	andi	r6,r6,255
    95e4:	280a90fa 	slli	r5,r5,3
    95e8:	89c05026 	beq	r17,r7,972c <__addsf3+0x18c>
    95ec:	8185c83a 	sub	r2,r16,r6
    95f0:	00807a0e 	bge	zero,r2,97dc <__addsf3+0x23c>
    95f4:	30001e1e 	bne	r6,zero,9670 <__addsf3+0xd0>
    95f8:	28006d1e 	bne	r5,zero,97b0 <__addsf3+0x210>
    95fc:	208001cc 	andi	r2,r4,7
    9600:	10000426 	beq	r2,zero,9614 <__addsf3+0x74>
    9604:	208003cc 	andi	r2,r4,15
    9608:	00c00104 	movi	r3,4
    960c:	10c00126 	beq	r2,r3,9614 <__addsf3+0x74>
    9610:	20c9883a 	add	r4,r4,r3
    9614:	2081002c 	andhi	r2,r4,1024
    9618:	10003926 	beq	r2,zero,9700 <__addsf3+0x160>
    961c:	84000044 	addi	r16,r16,1
    9620:	00803fc4 	movi	r2,255
    9624:	80807826 	beq	r16,r2,9808 <__addsf3+0x268>
    9628:	200891ba 	slli	r4,r4,6
    962c:	8805883a 	mov	r2,r17
    9630:	2008d27a 	srli	r4,r4,9
    9634:	84003fcc 	andi	r16,r16,255
    9638:	800695fa 	slli	r3,r16,23
    963c:	10803fcc 	andi	r2,r2,255
    9640:	04002034 	movhi	r16,128
    9644:	843fffc4 	addi	r16,r16,-1
    9648:	100497fa 	slli	r2,r2,31
    964c:	2408703a 	and	r4,r4,r16
    9650:	20e0b03a 	or	r16,r4,r3
    9654:	8084b03a 	or	r2,r16,r2
    9658:	dfc00317 	ldw	ra,12(sp)
    965c:	dc800217 	ldw	r18,8(sp)
    9660:	dc400117 	ldw	r17,4(sp)
    9664:	dc000017 	ldw	r16,0(sp)
    9668:	dec00404 	addi	sp,sp,16
    966c:	f800283a 	ret
    9670:	00c03fc4 	movi	r3,255
    9674:	80ffe126 	beq	r16,r3,95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    9678:	29410034 	orhi	r5,r5,1024
    967c:	00c006c4 	movi	r3,27
    9680:	18807516 	blt	r3,r2,9858 <__addsf3+0x2b8>
    9684:	00c00804 	movi	r3,32
    9688:	1887c83a 	sub	r3,r3,r2
    968c:	28c6983a 	sll	r3,r5,r3
    9690:	288ad83a 	srl	r5,r5,r2
    9694:	1804c03a 	cmpne	r2,r3,zero
    9698:	288ab03a 	or	r5,r5,r2
    969c:	2149c83a 	sub	r4,r4,r5
    96a0:	2081002c 	andhi	r2,r4,1024
    96a4:	10001426 	beq	r2,zero,96f8 <__addsf3+0x158>
    96a8:	04810034 	movhi	r18,1024
    96ac:	94bfffc4 	addi	r18,r18,-1
    96b0:	24a4703a 	and	r18,r4,r18
    96b4:	9009883a 	mov	r4,r18
    96b8:	000c90c0 	call	c90c <__clzsi2>
    96bc:	10bffec4 	addi	r2,r2,-5
    96c0:	90a4983a 	sll	r18,r18,r2
    96c4:	14005416 	blt	r2,r16,9818 <__addsf3+0x278>
    96c8:	1405c83a 	sub	r2,r2,r16
    96cc:	11000044 	addi	r4,r2,1
    96d0:	00800804 	movi	r2,32
    96d4:	1105c83a 	sub	r2,r2,r4
    96d8:	9084983a 	sll	r2,r18,r2
    96dc:	9124d83a 	srl	r18,r18,r4
    96e0:	0021883a 	mov	r16,zero
    96e4:	1008c03a 	cmpne	r4,r2,zero
    96e8:	9108b03a 	or	r4,r18,r4
    96ec:	003fc306 	br	95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    96f0:	1000db26 	beq	r2,zero,9a60 <__addsf3+0x4c0>
    96f4:	1009883a 	mov	r4,r2
    96f8:	208001cc 	andi	r2,r4,7
    96fc:	103fc11e 	bne	r2,zero,9604 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009604>
    9700:	2006d0fa 	srli	r3,r4,3
    9704:	01003fc4 	movi	r4,255
    9708:	8805883a 	mov	r2,r17
    970c:	8100241e 	bne	r16,r4,97a0 <__addsf3+0x200>
    9710:	18006e26 	beq	r3,zero,98cc <__addsf3+0x32c>
    9714:	19001034 	orhi	r4,r3,64
    9718:	00c02034 	movhi	r3,128
    971c:	18ffffc4 	addi	r3,r3,-1
    9720:	043fffc4 	movi	r16,-1
    9724:	20c8703a 	and	r4,r4,r3
    9728:	003fc206 	br	9634 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009634>
    972c:	8187c83a 	sub	r3,r16,r6
    9730:	00c03e0e 	bge	zero,r3,982c <__addsf3+0x28c>
    9734:	30002326 	beq	r6,zero,97c4 <__addsf3+0x224>
    9738:	01803fc4 	movi	r6,255
    973c:	81bfaf26 	beq	r16,r6,95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    9740:	29410034 	orhi	r5,r5,1024
    9744:	018006c4 	movi	r6,27
    9748:	30c07416 	blt	r6,r3,991c <__addsf3+0x37c>
    974c:	01800804 	movi	r6,32
    9750:	30cdc83a 	sub	r6,r6,r3
    9754:	298c983a 	sll	r6,r5,r6
    9758:	28cad83a 	srl	r5,r5,r3
    975c:	3006c03a 	cmpne	r3,r6,zero
    9760:	28cab03a 	or	r5,r5,r3
    9764:	2149883a 	add	r4,r4,r5
    9768:	20c1002c 	andhi	r3,r4,1024
    976c:	183fe226 	beq	r3,zero,96f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70096f8>
    9770:	84000044 	addi	r16,r16,1
    9774:	00c03fc4 	movi	r3,255
    9778:	80c05426 	beq	r16,r3,98cc <__addsf3+0x32c>
    977c:	00bf0034 	movhi	r2,64512
    9780:	10bfffc4 	addi	r2,r2,-1
    9784:	20c0004c 	andi	r3,r4,1
    9788:	2088703a 	and	r4,r4,r2
    978c:	2008d07a 	srli	r4,r4,1
    9790:	20c8b03a 	or	r4,r4,r3
    9794:	003f9906 	br	95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    9798:	0007883a 	mov	r3,zero
    979c:	0005883a 	mov	r2,zero
    97a0:	01002034 	movhi	r4,128
    97a4:	213fffc4 	addi	r4,r4,-1
    97a8:	1908703a 	and	r4,r3,r4
    97ac:	003fa106 	br	9634 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009634>
    97b0:	10bfffc4 	addi	r2,r2,-1
    97b4:	103fb926 	beq	r2,zero,969c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700969c>
    97b8:	00c03fc4 	movi	r3,255
    97bc:	80ffaf1e 	bne	r16,r3,967c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700967c>
    97c0:	003f8e06 	br	95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    97c4:	283f8d26 	beq	r5,zero,95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    97c8:	18ffffc4 	addi	r3,r3,-1
    97cc:	183fe526 	beq	r3,zero,9764 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009764>
    97d0:	01803fc4 	movi	r6,255
    97d4:	81bfdb1e 	bne	r16,r6,9744 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009744>
    97d8:	003f8806 	br	95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    97dc:	1000201e 	bne	r2,zero,9860 <__addsf3+0x2c0>
    97e0:	80800044 	addi	r2,r16,1
    97e4:	10803fcc 	andi	r2,r2,255
    97e8:	01800044 	movi	r6,1
    97ec:	3080450e 	bge	r6,r2,9904 <__addsf3+0x364>
    97f0:	2165c83a 	sub	r18,r4,r5
    97f4:	90c1002c 	andhi	r3,r18,1024
    97f8:	18002b26 	beq	r3,zero,98a8 <__addsf3+0x308>
    97fc:	2925c83a 	sub	r18,r5,r4
    9800:	3823883a 	mov	r17,r7
    9804:	003fab06 	br	96b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70096b4>
    9808:	8805883a 	mov	r2,r17
    980c:	043fffc4 	movi	r16,-1
    9810:	0009883a 	mov	r4,zero
    9814:	003f8706 	br	9634 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009634>
    9818:	013f0034 	movhi	r4,64512
    981c:	213fffc4 	addi	r4,r4,-1
    9820:	80a1c83a 	sub	r16,r16,r2
    9824:	9108703a 	and	r4,r18,r4
    9828:	003f7406 	br	95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    982c:	1800411e 	bne	r3,zero,9934 <__addsf3+0x394>
    9830:	80c00044 	addi	r3,r16,1
    9834:	19c03fcc 	andi	r7,r3,255
    9838:	01800044 	movi	r6,1
    983c:	31c0260e 	bge	r6,r7,98d8 <__addsf3+0x338>
    9840:	01803fc4 	movi	r6,255
    9844:	19802126 	beq	r3,r6,98cc <__addsf3+0x32c>
    9848:	2149883a 	add	r4,r4,r5
    984c:	2008d07a 	srli	r4,r4,1
    9850:	1821883a 	mov	r16,r3
    9854:	003f6906 	br	95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    9858:	01400044 	movi	r5,1
    985c:	003f8f06 	br	969c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700969c>
    9860:	8000151e 	bne	r16,zero,98b8 <__addsf3+0x318>
    9864:	20002f26 	beq	r4,zero,9924 <__addsf3+0x384>
    9868:	0084303a 	nor	r2,zero,r2
    986c:	10000a26 	beq	r2,zero,9898 <__addsf3+0x2f8>
    9870:	00c03fc4 	movi	r3,255
    9874:	30c02b26 	beq	r6,r3,9924 <__addsf3+0x384>
    9878:	00c006c4 	movi	r3,27
    987c:	18806d16 	blt	r3,r2,9a34 <__addsf3+0x494>
    9880:	00c00804 	movi	r3,32
    9884:	1887c83a 	sub	r3,r3,r2
    9888:	20c6983a 	sll	r3,r4,r3
    988c:	2084d83a 	srl	r2,r4,r2
    9890:	1808c03a 	cmpne	r4,r3,zero
    9894:	1108b03a 	or	r4,r2,r4
    9898:	2909c83a 	sub	r4,r5,r4
    989c:	3021883a 	mov	r16,r6
    98a0:	3823883a 	mov	r17,r7
    98a4:	003f7e06 	br	96a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70096a0>
    98a8:	903f821e 	bne	r18,zero,96b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70096b4>
    98ac:	0005883a 	mov	r2,zero
    98b0:	0021883a 	mov	r16,zero
    98b4:	003fba06 	br	97a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70097a0>
    98b8:	00c03fc4 	movi	r3,255
    98bc:	30c01926 	beq	r6,r3,9924 <__addsf3+0x384>
    98c0:	0085c83a 	sub	r2,zero,r2
    98c4:	21010034 	orhi	r4,r4,1024
    98c8:	003feb06 	br	9878 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009878>
    98cc:	043fffc4 	movi	r16,-1
    98d0:	0009883a 	mov	r4,zero
    98d4:	003f5706 	br	9634 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009634>
    98d8:	80004a1e 	bne	r16,zero,9a04 <__addsf3+0x464>
    98dc:	20005926 	beq	r4,zero,9a44 <__addsf3+0x4a4>
    98e0:	283f4626 	beq	r5,zero,95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    98e4:	2149883a 	add	r4,r4,r5
    98e8:	2081002c 	andhi	r2,r4,1024
    98ec:	103f8226 	beq	r2,zero,96f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70096f8>
    98f0:	00bf0034 	movhi	r2,64512
    98f4:	10bfffc4 	addi	r2,r2,-1
    98f8:	3021883a 	mov	r16,r6
    98fc:	2088703a 	and	r4,r4,r2
    9900:	003f3e06 	br	95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    9904:	8000121e 	bne	r16,zero,9950 <__addsf3+0x3b0>
    9908:	2000261e 	bne	r4,zero,99a4 <__addsf3+0x404>
    990c:	283fa226 	beq	r5,zero,9798 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009798>
    9910:	2809883a 	mov	r4,r5
    9914:	3823883a 	mov	r17,r7
    9918:	003f3806 	br	95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    991c:	01400044 	movi	r5,1
    9920:	003f9006 	br	9764 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009764>
    9924:	2809883a 	mov	r4,r5
    9928:	3021883a 	mov	r16,r6
    992c:	3823883a 	mov	r17,r7
    9930:	003f3206 	br	95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    9934:	80000c1e 	bne	r16,zero,9968 <__addsf3+0x3c8>
    9938:	20002f26 	beq	r4,zero,99f8 <__addsf3+0x458>
    993c:	00c6303a 	nor	r3,zero,r3
    9940:	18002b1e 	bne	r3,zero,99f0 <__addsf3+0x450>
    9944:	2149883a 	add	r4,r4,r5
    9948:	3021883a 	mov	r16,r6
    994c:	003f8606 	br	9768 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009768>
    9950:	20001b1e 	bne	r4,zero,99c0 <__addsf3+0x420>
    9954:	28003926 	beq	r5,zero,9a3c <__addsf3+0x49c>
    9958:	2809883a 	mov	r4,r5
    995c:	3823883a 	mov	r17,r7
    9960:	04003fc4 	movi	r16,255
    9964:	003f2506 	br	95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    9968:	01c03fc4 	movi	r7,255
    996c:	31c02226 	beq	r6,r7,99f8 <__addsf3+0x458>
    9970:	00c7c83a 	sub	r3,zero,r3
    9974:	21010034 	orhi	r4,r4,1024
    9978:	01c006c4 	movi	r7,27
    997c:	38c03616 	blt	r7,r3,9a58 <__addsf3+0x4b8>
    9980:	01c00804 	movi	r7,32
    9984:	38cfc83a 	sub	r7,r7,r3
    9988:	21ce983a 	sll	r7,r4,r7
    998c:	20c6d83a 	srl	r3,r4,r3
    9990:	3808c03a 	cmpne	r4,r7,zero
    9994:	1906b03a 	or	r3,r3,r4
    9998:	1949883a 	add	r4,r3,r5
    999c:	3021883a 	mov	r16,r6
    99a0:	003f7106 	br	9768 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009768>
    99a4:	283f1526 	beq	r5,zero,95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    99a8:	2145c83a 	sub	r2,r4,r5
    99ac:	10c1002c 	andhi	r3,r2,1024
    99b0:	183f4f26 	beq	r3,zero,96f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70096f0>
    99b4:	2909c83a 	sub	r4,r5,r4
    99b8:	3823883a 	mov	r17,r7
    99bc:	003f0f06 	br	95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    99c0:	28001a26 	beq	r5,zero,9a2c <__addsf3+0x48c>
    99c4:	2008d0fa 	srli	r4,r4,3
    99c8:	2080102c 	andhi	r2,r4,64
    99cc:	10000526 	beq	r2,zero,99e4 <__addsf3+0x444>
    99d0:	280ad0fa 	srli	r5,r5,3
    99d4:	2880102c 	andhi	r2,r5,64
    99d8:	1000021e 	bne	r2,zero,99e4 <__addsf3+0x444>
    99dc:	2809883a 	mov	r4,r5
    99e0:	3823883a 	mov	r17,r7
    99e4:	200890fa 	slli	r4,r4,3
    99e8:	04003fc4 	movi	r16,255
    99ec:	003f0306 	br	95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    99f0:	01c03fc4 	movi	r7,255
    99f4:	31ffe01e 	bne	r6,r7,9978 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009978>
    99f8:	2809883a 	mov	r4,r5
    99fc:	3021883a 	mov	r16,r6
    9a00:	003efe06 	br	95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    9a04:	20001126 	beq	r4,zero,9a4c <__addsf3+0x4ac>
    9a08:	28000826 	beq	r5,zero,9a2c <__addsf3+0x48c>
    9a0c:	2008d0fa 	srli	r4,r4,3
    9a10:	2080102c 	andhi	r2,r4,64
    9a14:	103ff326 	beq	r2,zero,99e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70099e4>
    9a18:	280ad0fa 	srli	r5,r5,3
    9a1c:	2880102c 	andhi	r2,r5,64
    9a20:	103ff01e 	bne	r2,zero,99e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70099e4>
    9a24:	2809883a 	mov	r4,r5
    9a28:	003fee06 	br	99e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70099e4>
    9a2c:	04003fc4 	movi	r16,255
    9a30:	003ef206 	br	95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    9a34:	01000044 	movi	r4,1
    9a38:	003f9706 	br	9898 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009898>
    9a3c:	0005883a 	mov	r2,zero
    9a40:	003f3406 	br	9714 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009714>
    9a44:	2809883a 	mov	r4,r5
    9a48:	003eec06 	br	95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    9a4c:	2809883a 	mov	r4,r5
    9a50:	04003fc4 	movi	r16,255
    9a54:	003ee906 	br	95fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095fc>
    9a58:	00c00044 	movi	r3,1
    9a5c:	003fce06 	br	9998 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009998>
    9a60:	0005883a 	mov	r2,zero
    9a64:	003f4e06 	br	97a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70097a0>

00009a68 <__gesf2>:
    9a68:	2004d5fa 	srli	r2,r4,23
    9a6c:	2806d5fa 	srli	r3,r5,23
    9a70:	01802034 	movhi	r6,128
    9a74:	31bfffc4 	addi	r6,r6,-1
    9a78:	10803fcc 	andi	r2,r2,255
    9a7c:	01c03fc4 	movi	r7,255
    9a80:	3110703a 	and	r8,r6,r4
    9a84:	18c03fcc 	andi	r3,r3,255
    9a88:	314c703a 	and	r6,r6,r5
    9a8c:	2008d7fa 	srli	r4,r4,31
    9a90:	280ad7fa 	srli	r5,r5,31
    9a94:	11c01926 	beq	r2,r7,9afc <__gesf2+0x94>
    9a98:	01c03fc4 	movi	r7,255
    9a9c:	19c00f26 	beq	r3,r7,9adc <__gesf2+0x74>
    9aa0:	1000061e 	bne	r2,zero,9abc <__gesf2+0x54>
    9aa4:	400f003a 	cmpeq	r7,r8,zero
    9aa8:	1800071e 	bne	r3,zero,9ac8 <__gesf2+0x60>
    9aac:	3000061e 	bne	r6,zero,9ac8 <__gesf2+0x60>
    9ab0:	0005883a 	mov	r2,zero
    9ab4:	40000e1e 	bne	r8,zero,9af0 <__gesf2+0x88>
    9ab8:	f800283a 	ret
    9abc:	18000a1e 	bne	r3,zero,9ae8 <__gesf2+0x80>
    9ac0:	30000b26 	beq	r6,zero,9af0 <__gesf2+0x88>
    9ac4:	000f883a 	mov	r7,zero
    9ac8:	29403fcc 	andi	r5,r5,255
    9acc:	38000726 	beq	r7,zero,9aec <__gesf2+0x84>
    9ad0:	28000826 	beq	r5,zero,9af4 <__gesf2+0x8c>
    9ad4:	00800044 	movi	r2,1
    9ad8:	f800283a 	ret
    9adc:	303ff026 	beq	r6,zero,9aa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009aa0>
    9ae0:	00bfff84 	movi	r2,-2
    9ae4:	f800283a 	ret
    9ae8:	29403fcc 	andi	r5,r5,255
    9aec:	21400526 	beq	r4,r5,9b04 <__gesf2+0x9c>
    9af0:	203ff826 	beq	r4,zero,9ad4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ad4>
    9af4:	00bfffc4 	movi	r2,-1
    9af8:	f800283a 	ret
    9afc:	403fe626 	beq	r8,zero,9a98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a98>
    9b00:	003ff706 	br	9ae0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ae0>
    9b04:	18bffa16 	blt	r3,r2,9af0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009af0>
    9b08:	10c00216 	blt	r2,r3,9b14 <__gesf2+0xac>
    9b0c:	323ff836 	bltu	r6,r8,9af0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009af0>
    9b10:	4180022e 	bgeu	r8,r6,9b1c <__gesf2+0xb4>
    9b14:	203fef1e 	bne	r4,zero,9ad4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ad4>
    9b18:	003ff606 	br	9af4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009af4>
    9b1c:	0005883a 	mov	r2,zero
    9b20:	f800283a 	ret

00009b24 <__lesf2>:
    9b24:	2004d5fa 	srli	r2,r4,23
    9b28:	280cd5fa 	srli	r6,r5,23
    9b2c:	00c02034 	movhi	r3,128
    9b30:	18ffffc4 	addi	r3,r3,-1
    9b34:	10803fcc 	andi	r2,r2,255
    9b38:	01c03fc4 	movi	r7,255
    9b3c:	1910703a 	and	r8,r3,r4
    9b40:	31803fcc 	andi	r6,r6,255
    9b44:	1946703a 	and	r3,r3,r5
    9b48:	2008d7fa 	srli	r4,r4,31
    9b4c:	280ad7fa 	srli	r5,r5,31
    9b50:	11c01b26 	beq	r2,r7,9bc0 <__lesf2+0x9c>
    9b54:	01c03fc4 	movi	r7,255
    9b58:	31c01126 	beq	r6,r7,9ba0 <__lesf2+0x7c>
    9b5c:	1000071e 	bne	r2,zero,9b7c <__lesf2+0x58>
    9b60:	400f003a 	cmpeq	r7,r8,zero
    9b64:	21003fcc 	andi	r4,r4,255
    9b68:	3000081e 	bne	r6,zero,9b8c <__lesf2+0x68>
    9b6c:	1800071e 	bne	r3,zero,9b8c <__lesf2+0x68>
    9b70:	0005883a 	mov	r2,zero
    9b74:	40000f1e 	bne	r8,zero,9bb4 <__lesf2+0x90>
    9b78:	f800283a 	ret
    9b7c:	21003fcc 	andi	r4,r4,255
    9b80:	30000a1e 	bne	r6,zero,9bac <__lesf2+0x88>
    9b84:	18000b26 	beq	r3,zero,9bb4 <__lesf2+0x90>
    9b88:	000f883a 	mov	r7,zero
    9b8c:	29403fcc 	andi	r5,r5,255
    9b90:	38000726 	beq	r7,zero,9bb0 <__lesf2+0x8c>
    9b94:	28000826 	beq	r5,zero,9bb8 <__lesf2+0x94>
    9b98:	00800044 	movi	r2,1
    9b9c:	f800283a 	ret
    9ba0:	183fee26 	beq	r3,zero,9b5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b5c>
    9ba4:	00800084 	movi	r2,2
    9ba8:	f800283a 	ret
    9bac:	29403fcc 	andi	r5,r5,255
    9bb0:	21400626 	beq	r4,r5,9bcc <__lesf2+0xa8>
    9bb4:	203ff826 	beq	r4,zero,9b98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b98>
    9bb8:	00bfffc4 	movi	r2,-1
    9bbc:	f800283a 	ret
    9bc0:	403fe426 	beq	r8,zero,9b54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b54>
    9bc4:	00800084 	movi	r2,2
    9bc8:	f800283a 	ret
    9bcc:	30bff916 	blt	r6,r2,9bb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009bb4>
    9bd0:	11800216 	blt	r2,r6,9bdc <__lesf2+0xb8>
    9bd4:	1a3ff736 	bltu	r3,r8,9bb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009bb4>
    9bd8:	40c0022e 	bgeu	r8,r3,9be4 <__lesf2+0xc0>
    9bdc:	203fee1e 	bne	r4,zero,9b98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b98>
    9be0:	003ff506 	br	9bb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009bb8>
    9be4:	0005883a 	mov	r2,zero
    9be8:	f800283a 	ret

00009bec <__fixsfsi>:
    9bec:	200ad5fa 	srli	r5,r4,23
    9bf0:	00c02034 	movhi	r3,128
    9bf4:	18ffffc4 	addi	r3,r3,-1
    9bf8:	29403fcc 	andi	r5,r5,255
    9bfc:	00801f84 	movi	r2,126
    9c00:	1906703a 	and	r3,r3,r4
    9c04:	2008d7fa 	srli	r4,r4,31
    9c08:	11400e0e 	bge	r2,r5,9c44 <__fixsfsi+0x58>
    9c0c:	00802744 	movi	r2,157
    9c10:	11400816 	blt	r2,r5,9c34 <__fixsfsi+0x48>
    9c14:	00802544 	movi	r2,149
    9c18:	18c02034 	orhi	r3,r3,128
    9c1c:	11400b0e 	bge	r2,r5,9c4c <__fixsfsi+0x60>
    9c20:	28bfda84 	addi	r2,r5,-150
    9c24:	1884983a 	sll	r2,r3,r2
    9c28:	20000726 	beq	r4,zero,9c48 <__fixsfsi+0x5c>
    9c2c:	0085c83a 	sub	r2,zero,r2
    9c30:	f800283a 	ret
    9c34:	00a00034 	movhi	r2,32768
    9c38:	10bfffc4 	addi	r2,r2,-1
    9c3c:	2085883a 	add	r2,r4,r2
    9c40:	f800283a 	ret
    9c44:	0005883a 	mov	r2,zero
    9c48:	f800283a 	ret
    9c4c:	00802584 	movi	r2,150
    9c50:	1145c83a 	sub	r2,r2,r5
    9c54:	1884d83a 	srl	r2,r3,r2
    9c58:	003ff306 	br	9c28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009c28>

00009c5c <__floatsisf>:
    9c5c:	defffd04 	addi	sp,sp,-12
    9c60:	dfc00215 	stw	ra,8(sp)
    9c64:	dc400115 	stw	r17,4(sp)
    9c68:	dc000015 	stw	r16,0(sp)
    9c6c:	20003526 	beq	r4,zero,9d44 <__floatsisf+0xe8>
    9c70:	2021883a 	mov	r16,r4
    9c74:	2022d7fa 	srli	r17,r4,31
    9c78:	20003616 	blt	r4,zero,9d54 <__floatsisf+0xf8>
    9c7c:	8009883a 	mov	r4,r16
    9c80:	000c90c0 	call	c90c <__clzsi2>
    9c84:	00c02784 	movi	r3,158
    9c88:	1887c83a 	sub	r3,r3,r2
    9c8c:	01002584 	movi	r4,150
    9c90:	20c01416 	blt	r4,r3,9ce4 <__floatsisf+0x88>
    9c94:	20c9c83a 	sub	r4,r4,r3
    9c98:	8120983a 	sll	r16,r16,r4
    9c9c:	00802034 	movhi	r2,128
    9ca0:	10bfffc4 	addi	r2,r2,-1
    9ca4:	8809883a 	mov	r4,r17
    9ca8:	80a0703a 	and	r16,r16,r2
    9cac:	18803fcc 	andi	r2,r3,255
    9cb0:	100695fa 	slli	r3,r2,23
    9cb4:	20803fcc 	andi	r2,r4,255
    9cb8:	100897fa 	slli	r4,r2,31
    9cbc:	00802034 	movhi	r2,128
    9cc0:	10bfffc4 	addi	r2,r2,-1
    9cc4:	8084703a 	and	r2,r16,r2
    9cc8:	10c4b03a 	or	r2,r2,r3
    9ccc:	1104b03a 	or	r2,r2,r4
    9cd0:	dfc00217 	ldw	ra,8(sp)
    9cd4:	dc400117 	ldw	r17,4(sp)
    9cd8:	dc000017 	ldw	r16,0(sp)
    9cdc:	dec00304 	addi	sp,sp,12
    9ce0:	f800283a 	ret
    9ce4:	01002644 	movi	r4,153
    9ce8:	20c01c16 	blt	r4,r3,9d5c <__floatsisf+0x100>
    9cec:	20c9c83a 	sub	r4,r4,r3
    9cf0:	8120983a 	sll	r16,r16,r4
    9cf4:	013f0034 	movhi	r4,64512
    9cf8:	213fffc4 	addi	r4,r4,-1
    9cfc:	814001cc 	andi	r5,r16,7
    9d00:	8108703a 	and	r4,r16,r4
    9d04:	28000426 	beq	r5,zero,9d18 <__floatsisf+0xbc>
    9d08:	840003cc 	andi	r16,r16,15
    9d0c:	01400104 	movi	r5,4
    9d10:	81400126 	beq	r16,r5,9d18 <__floatsisf+0xbc>
    9d14:	2149883a 	add	r4,r4,r5
    9d18:	2141002c 	andhi	r5,r4,1024
    9d1c:	28000526 	beq	r5,zero,9d34 <__floatsisf+0xd8>
    9d20:	00c027c4 	movi	r3,159
    9d24:	1887c83a 	sub	r3,r3,r2
    9d28:	00bf0034 	movhi	r2,64512
    9d2c:	10bfffc4 	addi	r2,r2,-1
    9d30:	2088703a 	and	r4,r4,r2
    9d34:	202091ba 	slli	r16,r4,6
    9d38:	8809883a 	mov	r4,r17
    9d3c:	8020d27a 	srli	r16,r16,9
    9d40:	003fda06 	br	9cac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009cac>
    9d44:	0009883a 	mov	r4,zero
    9d48:	0007883a 	mov	r3,zero
    9d4c:	0021883a 	mov	r16,zero
    9d50:	003fd606 	br	9cac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009cac>
    9d54:	0121c83a 	sub	r16,zero,r4
    9d58:	003fc806 	br	9c7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009c7c>
    9d5c:	01002e44 	movi	r4,185
    9d60:	20c9c83a 	sub	r4,r4,r3
    9d64:	01400144 	movi	r5,5
    9d68:	8108983a 	sll	r4,r16,r4
    9d6c:	288bc83a 	sub	r5,r5,r2
    9d70:	8160d83a 	srl	r16,r16,r5
    9d74:	2008c03a 	cmpne	r4,r4,zero
    9d78:	8120b03a 	or	r16,r16,r4
    9d7c:	003fdd06 	br	9cf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009cf4>

00009d80 <__adddf3>:
    9d80:	02c00434 	movhi	r11,16
    9d84:	5affffc4 	addi	r11,r11,-1
    9d88:	2806d7fa 	srli	r3,r5,31
    9d8c:	2ad4703a 	and	r10,r5,r11
    9d90:	3ad2703a 	and	r9,r7,r11
    9d94:	3804d53a 	srli	r2,r7,20
    9d98:	3018d77a 	srli	r12,r6,29
    9d9c:	280ad53a 	srli	r5,r5,20
    9da0:	501490fa 	slli	r10,r10,3
    9da4:	2010d77a 	srli	r8,r4,29
    9da8:	481290fa 	slli	r9,r9,3
    9dac:	380ed7fa 	srli	r7,r7,31
    9db0:	defffb04 	addi	sp,sp,-20
    9db4:	dc800215 	stw	r18,8(sp)
    9db8:	dc400115 	stw	r17,4(sp)
    9dbc:	dc000015 	stw	r16,0(sp)
    9dc0:	dfc00415 	stw	ra,16(sp)
    9dc4:	dcc00315 	stw	r19,12(sp)
    9dc8:	1c803fcc 	andi	r18,r3,255
    9dcc:	2c01ffcc 	andi	r16,r5,2047
    9dd0:	5210b03a 	or	r8,r10,r8
    9dd4:	202290fa 	slli	r17,r4,3
    9dd8:	1081ffcc 	andi	r2,r2,2047
    9ddc:	4b12b03a 	or	r9,r9,r12
    9de0:	300c90fa 	slli	r6,r6,3
    9de4:	91c07526 	beq	r18,r7,9fbc <__adddf3+0x23c>
    9de8:	8087c83a 	sub	r3,r16,r2
    9dec:	00c0ab0e 	bge	zero,r3,a09c <__adddf3+0x31c>
    9df0:	10002a1e 	bne	r2,zero,9e9c <__adddf3+0x11c>
    9df4:	4984b03a 	or	r2,r9,r6
    9df8:	1000961e 	bne	r2,zero,a054 <__adddf3+0x2d4>
    9dfc:	888001cc 	andi	r2,r17,7
    9e00:	10000726 	beq	r2,zero,9e20 <__adddf3+0xa0>
    9e04:	888003cc 	andi	r2,r17,15
    9e08:	00c00104 	movi	r3,4
    9e0c:	10c00426 	beq	r2,r3,9e20 <__adddf3+0xa0>
    9e10:	88c7883a 	add	r3,r17,r3
    9e14:	1c63803a 	cmpltu	r17,r3,r17
    9e18:	4451883a 	add	r8,r8,r17
    9e1c:	1823883a 	mov	r17,r3
    9e20:	4080202c 	andhi	r2,r8,128
    9e24:	10005926 	beq	r2,zero,9f8c <__adddf3+0x20c>
    9e28:	84000044 	addi	r16,r16,1
    9e2c:	0081ffc4 	movi	r2,2047
    9e30:	8080ba26 	beq	r16,r2,a11c <__adddf3+0x39c>
    9e34:	00bfe034 	movhi	r2,65408
    9e38:	10bfffc4 	addi	r2,r2,-1
    9e3c:	4090703a 	and	r8,r8,r2
    9e40:	4004977a 	slli	r2,r8,29
    9e44:	4010927a 	slli	r8,r8,9
    9e48:	8822d0fa 	srli	r17,r17,3
    9e4c:	8401ffcc 	andi	r16,r16,2047
    9e50:	4010d33a 	srli	r8,r8,12
    9e54:	9007883a 	mov	r3,r18
    9e58:	1444b03a 	or	r2,r2,r17
    9e5c:	8401ffcc 	andi	r16,r16,2047
    9e60:	8020953a 	slli	r16,r16,20
    9e64:	18c03fcc 	andi	r3,r3,255
    9e68:	01000434 	movhi	r4,16
    9e6c:	213fffc4 	addi	r4,r4,-1
    9e70:	180697fa 	slli	r3,r3,31
    9e74:	4110703a 	and	r8,r8,r4
    9e78:	4410b03a 	or	r8,r8,r16
    9e7c:	40c6b03a 	or	r3,r8,r3
    9e80:	dfc00417 	ldw	ra,16(sp)
    9e84:	dcc00317 	ldw	r19,12(sp)
    9e88:	dc800217 	ldw	r18,8(sp)
    9e8c:	dc400117 	ldw	r17,4(sp)
    9e90:	dc000017 	ldw	r16,0(sp)
    9e94:	dec00504 	addi	sp,sp,20
    9e98:	f800283a 	ret
    9e9c:	0081ffc4 	movi	r2,2047
    9ea0:	80bfd626 	beq	r16,r2,9dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009dfc>
    9ea4:	4a402034 	orhi	r9,r9,128
    9ea8:	00800e04 	movi	r2,56
    9eac:	10c09f16 	blt	r2,r3,a12c <__adddf3+0x3ac>
    9eb0:	008007c4 	movi	r2,31
    9eb4:	10c0c216 	blt	r2,r3,a1c0 <__adddf3+0x440>
    9eb8:	00800804 	movi	r2,32
    9ebc:	10c5c83a 	sub	r2,r2,r3
    9ec0:	488a983a 	sll	r5,r9,r2
    9ec4:	30c8d83a 	srl	r4,r6,r3
    9ec8:	3084983a 	sll	r2,r6,r2
    9ecc:	48c6d83a 	srl	r3,r9,r3
    9ed0:	290cb03a 	or	r6,r5,r4
    9ed4:	1004c03a 	cmpne	r2,r2,zero
    9ed8:	308cb03a 	or	r6,r6,r2
    9edc:	898dc83a 	sub	r6,r17,r6
    9ee0:	89a3803a 	cmpltu	r17,r17,r6
    9ee4:	40d1c83a 	sub	r8,r8,r3
    9ee8:	4451c83a 	sub	r8,r8,r17
    9eec:	3023883a 	mov	r17,r6
    9ef0:	4080202c 	andhi	r2,r8,128
    9ef4:	10002326 	beq	r2,zero,9f84 <__adddf3+0x204>
    9ef8:	04c02034 	movhi	r19,128
    9efc:	9cffffc4 	addi	r19,r19,-1
    9f00:	44e6703a 	and	r19,r8,r19
    9f04:	98007626 	beq	r19,zero,a0e0 <__adddf3+0x360>
    9f08:	9809883a 	mov	r4,r19
    9f0c:	000c90c0 	call	c90c <__clzsi2>
    9f10:	10fffe04 	addi	r3,r2,-8
    9f14:	010007c4 	movi	r4,31
    9f18:	20c07716 	blt	r4,r3,a0f8 <__adddf3+0x378>
    9f1c:	00800804 	movi	r2,32
    9f20:	10c5c83a 	sub	r2,r2,r3
    9f24:	8884d83a 	srl	r2,r17,r2
    9f28:	98d0983a 	sll	r8,r19,r3
    9f2c:	88e2983a 	sll	r17,r17,r3
    9f30:	1204b03a 	or	r2,r2,r8
    9f34:	1c007416 	blt	r3,r16,a108 <__adddf3+0x388>
    9f38:	1c21c83a 	sub	r16,r3,r16
    9f3c:	82000044 	addi	r8,r16,1
    9f40:	00c007c4 	movi	r3,31
    9f44:	1a009116 	blt	r3,r8,a18c <__adddf3+0x40c>
    9f48:	00c00804 	movi	r3,32
    9f4c:	1a07c83a 	sub	r3,r3,r8
    9f50:	8a08d83a 	srl	r4,r17,r8
    9f54:	88e2983a 	sll	r17,r17,r3
    9f58:	10c6983a 	sll	r3,r2,r3
    9f5c:	1210d83a 	srl	r8,r2,r8
    9f60:	8804c03a 	cmpne	r2,r17,zero
    9f64:	1906b03a 	or	r3,r3,r4
    9f68:	18a2b03a 	or	r17,r3,r2
    9f6c:	0021883a 	mov	r16,zero
    9f70:	003fa206 	br	9dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009dfc>
    9f74:	1890b03a 	or	r8,r3,r2
    9f78:	40017d26 	beq	r8,zero,a570 <__adddf3+0x7f0>
    9f7c:	1011883a 	mov	r8,r2
    9f80:	1823883a 	mov	r17,r3
    9f84:	888001cc 	andi	r2,r17,7
    9f88:	103f9e1e 	bne	r2,zero,9e04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e04>
    9f8c:	4004977a 	slli	r2,r8,29
    9f90:	8822d0fa 	srli	r17,r17,3
    9f94:	4010d0fa 	srli	r8,r8,3
    9f98:	9007883a 	mov	r3,r18
    9f9c:	1444b03a 	or	r2,r2,r17
    9fa0:	0101ffc4 	movi	r4,2047
    9fa4:	81002426 	beq	r16,r4,a038 <__adddf3+0x2b8>
    9fa8:	8120703a 	and	r16,r16,r4
    9fac:	01000434 	movhi	r4,16
    9fb0:	213fffc4 	addi	r4,r4,-1
    9fb4:	4110703a 	and	r8,r8,r4
    9fb8:	003fa806 	br	9e5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e5c>
    9fbc:	8089c83a 	sub	r4,r16,r2
    9fc0:	01005e0e 	bge	zero,r4,a13c <__adddf3+0x3bc>
    9fc4:	10002b26 	beq	r2,zero,a074 <__adddf3+0x2f4>
    9fc8:	0081ffc4 	movi	r2,2047
    9fcc:	80bf8b26 	beq	r16,r2,9dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009dfc>
    9fd0:	4a402034 	orhi	r9,r9,128
    9fd4:	00800e04 	movi	r2,56
    9fd8:	1100a40e 	bge	r2,r4,a26c <__adddf3+0x4ec>
    9fdc:	498cb03a 	or	r6,r9,r6
    9fe0:	300ac03a 	cmpne	r5,r6,zero
    9fe4:	0013883a 	mov	r9,zero
    9fe8:	2c4b883a 	add	r5,r5,r17
    9fec:	2c63803a 	cmpltu	r17,r5,r17
    9ff0:	4a11883a 	add	r8,r9,r8
    9ff4:	8a11883a 	add	r8,r17,r8
    9ff8:	2823883a 	mov	r17,r5
    9ffc:	4080202c 	andhi	r2,r8,128
    a000:	103fe026 	beq	r2,zero,9f84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f84>
    a004:	84000044 	addi	r16,r16,1
    a008:	0081ffc4 	movi	r2,2047
    a00c:	8080d226 	beq	r16,r2,a358 <__adddf3+0x5d8>
    a010:	00bfe034 	movhi	r2,65408
    a014:	10bfffc4 	addi	r2,r2,-1
    a018:	4090703a 	and	r8,r8,r2
    a01c:	880ad07a 	srli	r5,r17,1
    a020:	400897fa 	slli	r4,r8,31
    a024:	88c0004c 	andi	r3,r17,1
    a028:	28e2b03a 	or	r17,r5,r3
    a02c:	4010d07a 	srli	r8,r8,1
    a030:	2462b03a 	or	r17,r4,r17
    a034:	003f7106 	br	9dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009dfc>
    a038:	4088b03a 	or	r4,r8,r2
    a03c:	20014526 	beq	r4,zero,a554 <__adddf3+0x7d4>
    a040:	01000434 	movhi	r4,16
    a044:	42000234 	orhi	r8,r8,8
    a048:	213fffc4 	addi	r4,r4,-1
    a04c:	4110703a 	and	r8,r8,r4
    a050:	003f8206 	br	9e5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e5c>
    a054:	18ffffc4 	addi	r3,r3,-1
    a058:	1800491e 	bne	r3,zero,a180 <__adddf3+0x400>
    a05c:	898bc83a 	sub	r5,r17,r6
    a060:	8963803a 	cmpltu	r17,r17,r5
    a064:	4251c83a 	sub	r8,r8,r9
    a068:	4451c83a 	sub	r8,r8,r17
    a06c:	2823883a 	mov	r17,r5
    a070:	003f9f06 	br	9ef0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ef0>
    a074:	4984b03a 	or	r2,r9,r6
    a078:	103f6026 	beq	r2,zero,9dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009dfc>
    a07c:	213fffc4 	addi	r4,r4,-1
    a080:	2000931e 	bne	r4,zero,a2d0 <__adddf3+0x550>
    a084:	898d883a 	add	r6,r17,r6
    a088:	3463803a 	cmpltu	r17,r6,r17
    a08c:	4251883a 	add	r8,r8,r9
    a090:	8a11883a 	add	r8,r17,r8
    a094:	3023883a 	mov	r17,r6
    a098:	003fd806 	br	9ffc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ffc>
    a09c:	1800541e 	bne	r3,zero,a1f0 <__adddf3+0x470>
    a0a0:	80800044 	addi	r2,r16,1
    a0a4:	1081ffcc 	andi	r2,r2,2047
    a0a8:	00c00044 	movi	r3,1
    a0ac:	1880a00e 	bge	r3,r2,a330 <__adddf3+0x5b0>
    a0b0:	8989c83a 	sub	r4,r17,r6
    a0b4:	8905803a 	cmpltu	r2,r17,r4
    a0b8:	4267c83a 	sub	r19,r8,r9
    a0bc:	98a7c83a 	sub	r19,r19,r2
    a0c0:	9880202c 	andhi	r2,r19,128
    a0c4:	10006326 	beq	r2,zero,a254 <__adddf3+0x4d4>
    a0c8:	3463c83a 	sub	r17,r6,r17
    a0cc:	4a07c83a 	sub	r3,r9,r8
    a0d0:	344d803a 	cmpltu	r6,r6,r17
    a0d4:	19a7c83a 	sub	r19,r3,r6
    a0d8:	3825883a 	mov	r18,r7
    a0dc:	983f8a1e 	bne	r19,zero,9f08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f08>
    a0e0:	8809883a 	mov	r4,r17
    a0e4:	000c90c0 	call	c90c <__clzsi2>
    a0e8:	10800804 	addi	r2,r2,32
    a0ec:	10fffe04 	addi	r3,r2,-8
    a0f0:	010007c4 	movi	r4,31
    a0f4:	20ff890e 	bge	r4,r3,9f1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f1c>
    a0f8:	10bff604 	addi	r2,r2,-40
    a0fc:	8884983a 	sll	r2,r17,r2
    a100:	0023883a 	mov	r17,zero
    a104:	1c3f8c0e 	bge	r3,r16,9f38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f38>
    a108:	023fe034 	movhi	r8,65408
    a10c:	423fffc4 	addi	r8,r8,-1
    a110:	80e1c83a 	sub	r16,r16,r3
    a114:	1210703a 	and	r8,r2,r8
    a118:	003f3806 	br	9dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009dfc>
    a11c:	9007883a 	mov	r3,r18
    a120:	0011883a 	mov	r8,zero
    a124:	0005883a 	mov	r2,zero
    a128:	003f4c06 	br	9e5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e5c>
    a12c:	498cb03a 	or	r6,r9,r6
    a130:	300cc03a 	cmpne	r6,r6,zero
    a134:	0007883a 	mov	r3,zero
    a138:	003f6806 	br	9edc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009edc>
    a13c:	20009c1e 	bne	r4,zero,a3b0 <__adddf3+0x630>
    a140:	80800044 	addi	r2,r16,1
    a144:	1141ffcc 	andi	r5,r2,2047
    a148:	01000044 	movi	r4,1
    a14c:	2140670e 	bge	r4,r5,a2ec <__adddf3+0x56c>
    a150:	0101ffc4 	movi	r4,2047
    a154:	11007f26 	beq	r2,r4,a354 <__adddf3+0x5d4>
    a158:	898d883a 	add	r6,r17,r6
    a15c:	4247883a 	add	r3,r8,r9
    a160:	3451803a 	cmpltu	r8,r6,r17
    a164:	40d1883a 	add	r8,r8,r3
    a168:	402297fa 	slli	r17,r8,31
    a16c:	300cd07a 	srli	r6,r6,1
    a170:	4010d07a 	srli	r8,r8,1
    a174:	1021883a 	mov	r16,r2
    a178:	89a2b03a 	or	r17,r17,r6
    a17c:	003f1f06 	br	9dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009dfc>
    a180:	0081ffc4 	movi	r2,2047
    a184:	80bf481e 	bne	r16,r2,9ea8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ea8>
    a188:	003f1c06 	br	9dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009dfc>
    a18c:	843ff844 	addi	r16,r16,-31
    a190:	01000804 	movi	r4,32
    a194:	1406d83a 	srl	r3,r2,r16
    a198:	41005026 	beq	r8,r4,a2dc <__adddf3+0x55c>
    a19c:	01001004 	movi	r4,64
    a1a0:	2211c83a 	sub	r8,r4,r8
    a1a4:	1204983a 	sll	r2,r2,r8
    a1a8:	88a2b03a 	or	r17,r17,r2
    a1ac:	8822c03a 	cmpne	r17,r17,zero
    a1b0:	1c62b03a 	or	r17,r3,r17
    a1b4:	0011883a 	mov	r8,zero
    a1b8:	0021883a 	mov	r16,zero
    a1bc:	003f7106 	br	9f84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f84>
    a1c0:	193ff804 	addi	r4,r3,-32
    a1c4:	00800804 	movi	r2,32
    a1c8:	4908d83a 	srl	r4,r9,r4
    a1cc:	18804526 	beq	r3,r2,a2e4 <__adddf3+0x564>
    a1d0:	00801004 	movi	r2,64
    a1d4:	10c5c83a 	sub	r2,r2,r3
    a1d8:	4886983a 	sll	r3,r9,r2
    a1dc:	198cb03a 	or	r6,r3,r6
    a1e0:	300cc03a 	cmpne	r6,r6,zero
    a1e4:	218cb03a 	or	r6,r4,r6
    a1e8:	0007883a 	mov	r3,zero
    a1ec:	003f3b06 	br	9edc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009edc>
    a1f0:	80002a26 	beq	r16,zero,a29c <__adddf3+0x51c>
    a1f4:	0101ffc4 	movi	r4,2047
    a1f8:	11006826 	beq	r2,r4,a39c <__adddf3+0x61c>
    a1fc:	00c7c83a 	sub	r3,zero,r3
    a200:	42002034 	orhi	r8,r8,128
    a204:	01000e04 	movi	r4,56
    a208:	20c07c16 	blt	r4,r3,a3fc <__adddf3+0x67c>
    a20c:	010007c4 	movi	r4,31
    a210:	20c0da16 	blt	r4,r3,a57c <__adddf3+0x7fc>
    a214:	01000804 	movi	r4,32
    a218:	20c9c83a 	sub	r4,r4,r3
    a21c:	4114983a 	sll	r10,r8,r4
    a220:	88cad83a 	srl	r5,r17,r3
    a224:	8908983a 	sll	r4,r17,r4
    a228:	40c6d83a 	srl	r3,r8,r3
    a22c:	5162b03a 	or	r17,r10,r5
    a230:	2008c03a 	cmpne	r4,r4,zero
    a234:	8922b03a 	or	r17,r17,r4
    a238:	3463c83a 	sub	r17,r6,r17
    a23c:	48c7c83a 	sub	r3,r9,r3
    a240:	344d803a 	cmpltu	r6,r6,r17
    a244:	1991c83a 	sub	r8,r3,r6
    a248:	1021883a 	mov	r16,r2
    a24c:	3825883a 	mov	r18,r7
    a250:	003f2706 	br	9ef0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ef0>
    a254:	24d0b03a 	or	r8,r4,r19
    a258:	40001b1e 	bne	r8,zero,a2c8 <__adddf3+0x548>
    a25c:	0005883a 	mov	r2,zero
    a260:	0007883a 	mov	r3,zero
    a264:	0021883a 	mov	r16,zero
    a268:	003f4d06 	br	9fa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009fa0>
    a26c:	008007c4 	movi	r2,31
    a270:	11003c16 	blt	r2,r4,a364 <__adddf3+0x5e4>
    a274:	00800804 	movi	r2,32
    a278:	1105c83a 	sub	r2,r2,r4
    a27c:	488e983a 	sll	r7,r9,r2
    a280:	310ad83a 	srl	r5,r6,r4
    a284:	3084983a 	sll	r2,r6,r2
    a288:	4912d83a 	srl	r9,r9,r4
    a28c:	394ab03a 	or	r5,r7,r5
    a290:	1004c03a 	cmpne	r2,r2,zero
    a294:	288ab03a 	or	r5,r5,r2
    a298:	003f5306 	br	9fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009fe8>
    a29c:	4448b03a 	or	r4,r8,r17
    a2a0:	20003e26 	beq	r4,zero,a39c <__adddf3+0x61c>
    a2a4:	00c6303a 	nor	r3,zero,r3
    a2a8:	18003a1e 	bne	r3,zero,a394 <__adddf3+0x614>
    a2ac:	3463c83a 	sub	r17,r6,r17
    a2b0:	4a07c83a 	sub	r3,r9,r8
    a2b4:	344d803a 	cmpltu	r6,r6,r17
    a2b8:	1991c83a 	sub	r8,r3,r6
    a2bc:	1021883a 	mov	r16,r2
    a2c0:	3825883a 	mov	r18,r7
    a2c4:	003f0a06 	br	9ef0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ef0>
    a2c8:	2023883a 	mov	r17,r4
    a2cc:	003f0d06 	br	9f04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f04>
    a2d0:	0081ffc4 	movi	r2,2047
    a2d4:	80bf3f1e 	bne	r16,r2,9fd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009fd4>
    a2d8:	003ec806 	br	9dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009dfc>
    a2dc:	0005883a 	mov	r2,zero
    a2e0:	003fb106 	br	a1a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a1a8>
    a2e4:	0007883a 	mov	r3,zero
    a2e8:	003fbc06 	br	a1dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a1dc>
    a2ec:	4444b03a 	or	r2,r8,r17
    a2f0:	8000871e 	bne	r16,zero,a510 <__adddf3+0x790>
    a2f4:	1000ba26 	beq	r2,zero,a5e0 <__adddf3+0x860>
    a2f8:	4984b03a 	or	r2,r9,r6
    a2fc:	103ebf26 	beq	r2,zero,9dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009dfc>
    a300:	8985883a 	add	r2,r17,r6
    a304:	4247883a 	add	r3,r8,r9
    a308:	1451803a 	cmpltu	r8,r2,r17
    a30c:	40d1883a 	add	r8,r8,r3
    a310:	40c0202c 	andhi	r3,r8,128
    a314:	1023883a 	mov	r17,r2
    a318:	183f1a26 	beq	r3,zero,9f84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f84>
    a31c:	00bfe034 	movhi	r2,65408
    a320:	10bfffc4 	addi	r2,r2,-1
    a324:	2021883a 	mov	r16,r4
    a328:	4090703a 	and	r8,r8,r2
    a32c:	003eb306 	br	9dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009dfc>
    a330:	4444b03a 	or	r2,r8,r17
    a334:	8000291e 	bne	r16,zero,a3dc <__adddf3+0x65c>
    a338:	10004b1e 	bne	r2,zero,a468 <__adddf3+0x6e8>
    a33c:	4990b03a 	or	r8,r9,r6
    a340:	40008b26 	beq	r8,zero,a570 <__adddf3+0x7f0>
    a344:	4811883a 	mov	r8,r9
    a348:	3023883a 	mov	r17,r6
    a34c:	3825883a 	mov	r18,r7
    a350:	003eaa06 	br	9dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009dfc>
    a354:	1021883a 	mov	r16,r2
    a358:	0011883a 	mov	r8,zero
    a35c:	0005883a 	mov	r2,zero
    a360:	003f0f06 	br	9fa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009fa0>
    a364:	217ff804 	addi	r5,r4,-32
    a368:	00800804 	movi	r2,32
    a36c:	494ad83a 	srl	r5,r9,r5
    a370:	20807d26 	beq	r4,r2,a568 <__adddf3+0x7e8>
    a374:	00801004 	movi	r2,64
    a378:	1109c83a 	sub	r4,r2,r4
    a37c:	4912983a 	sll	r9,r9,r4
    a380:	498cb03a 	or	r6,r9,r6
    a384:	300cc03a 	cmpne	r6,r6,zero
    a388:	298ab03a 	or	r5,r5,r6
    a38c:	0013883a 	mov	r9,zero
    a390:	003f1506 	br	9fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009fe8>
    a394:	0101ffc4 	movi	r4,2047
    a398:	113f9a1e 	bne	r2,r4,a204 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a204>
    a39c:	4811883a 	mov	r8,r9
    a3a0:	3023883a 	mov	r17,r6
    a3a4:	1021883a 	mov	r16,r2
    a3a8:	3825883a 	mov	r18,r7
    a3ac:	003e9306 	br	9dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009dfc>
    a3b0:	8000161e 	bne	r16,zero,a40c <__adddf3+0x68c>
    a3b4:	444ab03a 	or	r5,r8,r17
    a3b8:	28005126 	beq	r5,zero,a500 <__adddf3+0x780>
    a3bc:	0108303a 	nor	r4,zero,r4
    a3c0:	20004d1e 	bne	r4,zero,a4f8 <__adddf3+0x778>
    a3c4:	89a3883a 	add	r17,r17,r6
    a3c8:	4253883a 	add	r9,r8,r9
    a3cc:	898d803a 	cmpltu	r6,r17,r6
    a3d0:	3251883a 	add	r8,r6,r9
    a3d4:	1021883a 	mov	r16,r2
    a3d8:	003f0806 	br	9ffc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ffc>
    a3dc:	1000301e 	bne	r2,zero,a4a0 <__adddf3+0x720>
    a3e0:	4984b03a 	or	r2,r9,r6
    a3e4:	10007126 	beq	r2,zero,a5ac <__adddf3+0x82c>
    a3e8:	4811883a 	mov	r8,r9
    a3ec:	3023883a 	mov	r17,r6
    a3f0:	3825883a 	mov	r18,r7
    a3f4:	0401ffc4 	movi	r16,2047
    a3f8:	003e8006 	br	9dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009dfc>
    a3fc:	4462b03a 	or	r17,r8,r17
    a400:	8822c03a 	cmpne	r17,r17,zero
    a404:	0007883a 	mov	r3,zero
    a408:	003f8b06 	br	a238 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a238>
    a40c:	0141ffc4 	movi	r5,2047
    a410:	11403b26 	beq	r2,r5,a500 <__adddf3+0x780>
    a414:	0109c83a 	sub	r4,zero,r4
    a418:	42002034 	orhi	r8,r8,128
    a41c:	01400e04 	movi	r5,56
    a420:	29006716 	blt	r5,r4,a5c0 <__adddf3+0x840>
    a424:	014007c4 	movi	r5,31
    a428:	29007016 	blt	r5,r4,a5ec <__adddf3+0x86c>
    a42c:	01400804 	movi	r5,32
    a430:	290bc83a 	sub	r5,r5,r4
    a434:	4154983a 	sll	r10,r8,r5
    a438:	890ed83a 	srl	r7,r17,r4
    a43c:	894a983a 	sll	r5,r17,r5
    a440:	4108d83a 	srl	r4,r8,r4
    a444:	51e2b03a 	or	r17,r10,r7
    a448:	280ac03a 	cmpne	r5,r5,zero
    a44c:	8962b03a 	or	r17,r17,r5
    a450:	89a3883a 	add	r17,r17,r6
    a454:	2253883a 	add	r9,r4,r9
    a458:	898d803a 	cmpltu	r6,r17,r6
    a45c:	3251883a 	add	r8,r6,r9
    a460:	1021883a 	mov	r16,r2
    a464:	003ee506 	br	9ffc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ffc>
    a468:	4984b03a 	or	r2,r9,r6
    a46c:	103e6326 	beq	r2,zero,9dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009dfc>
    a470:	8987c83a 	sub	r3,r17,r6
    a474:	88c9803a 	cmpltu	r4,r17,r3
    a478:	4245c83a 	sub	r2,r8,r9
    a47c:	1105c83a 	sub	r2,r2,r4
    a480:	1100202c 	andhi	r4,r2,128
    a484:	203ebb26 	beq	r4,zero,9f74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f74>
    a488:	3463c83a 	sub	r17,r6,r17
    a48c:	4a07c83a 	sub	r3,r9,r8
    a490:	344d803a 	cmpltu	r6,r6,r17
    a494:	1991c83a 	sub	r8,r3,r6
    a498:	3825883a 	mov	r18,r7
    a49c:	003e5706 	br	9dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009dfc>
    a4a0:	4984b03a 	or	r2,r9,r6
    a4a4:	10002e26 	beq	r2,zero,a560 <__adddf3+0x7e0>
    a4a8:	4004d0fa 	srli	r2,r8,3
    a4ac:	8822d0fa 	srli	r17,r17,3
    a4b0:	4010977a 	slli	r8,r8,29
    a4b4:	10c0022c 	andhi	r3,r2,8
    a4b8:	4462b03a 	or	r17,r8,r17
    a4bc:	18000826 	beq	r3,zero,a4e0 <__adddf3+0x760>
    a4c0:	4808d0fa 	srli	r4,r9,3
    a4c4:	20c0022c 	andhi	r3,r4,8
    a4c8:	1800051e 	bne	r3,zero,a4e0 <__adddf3+0x760>
    a4cc:	300cd0fa 	srli	r6,r6,3
    a4d0:	4806977a 	slli	r3,r9,29
    a4d4:	2005883a 	mov	r2,r4
    a4d8:	3825883a 	mov	r18,r7
    a4dc:	19a2b03a 	or	r17,r3,r6
    a4e0:	8810d77a 	srli	r8,r17,29
    a4e4:	100490fa 	slli	r2,r2,3
    a4e8:	882290fa 	slli	r17,r17,3
    a4ec:	0401ffc4 	movi	r16,2047
    a4f0:	4090b03a 	or	r8,r8,r2
    a4f4:	003e4106 	br	9dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009dfc>
    a4f8:	0141ffc4 	movi	r5,2047
    a4fc:	117fc71e 	bne	r2,r5,a41c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a41c>
    a500:	4811883a 	mov	r8,r9
    a504:	3023883a 	mov	r17,r6
    a508:	1021883a 	mov	r16,r2
    a50c:	003e3b06 	br	9dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009dfc>
    a510:	10002f26 	beq	r2,zero,a5d0 <__adddf3+0x850>
    a514:	4984b03a 	or	r2,r9,r6
    a518:	10001126 	beq	r2,zero,a560 <__adddf3+0x7e0>
    a51c:	4004d0fa 	srli	r2,r8,3
    a520:	8822d0fa 	srli	r17,r17,3
    a524:	4010977a 	slli	r8,r8,29
    a528:	10c0022c 	andhi	r3,r2,8
    a52c:	4462b03a 	or	r17,r8,r17
    a530:	183feb26 	beq	r3,zero,a4e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a4e0>
    a534:	4808d0fa 	srli	r4,r9,3
    a538:	20c0022c 	andhi	r3,r4,8
    a53c:	183fe81e 	bne	r3,zero,a4e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a4e0>
    a540:	300cd0fa 	srli	r6,r6,3
    a544:	4806977a 	slli	r3,r9,29
    a548:	2005883a 	mov	r2,r4
    a54c:	19a2b03a 	or	r17,r3,r6
    a550:	003fe306 	br	a4e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a4e0>
    a554:	0011883a 	mov	r8,zero
    a558:	0005883a 	mov	r2,zero
    a55c:	003e3f06 	br	9e5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e5c>
    a560:	0401ffc4 	movi	r16,2047
    a564:	003e2506 	br	9dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009dfc>
    a568:	0013883a 	mov	r9,zero
    a56c:	003f8406 	br	a380 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a380>
    a570:	0005883a 	mov	r2,zero
    a574:	0007883a 	mov	r3,zero
    a578:	003e8906 	br	9fa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009fa0>
    a57c:	197ff804 	addi	r5,r3,-32
    a580:	01000804 	movi	r4,32
    a584:	414ad83a 	srl	r5,r8,r5
    a588:	19002426 	beq	r3,r4,a61c <__adddf3+0x89c>
    a58c:	01001004 	movi	r4,64
    a590:	20c7c83a 	sub	r3,r4,r3
    a594:	40c6983a 	sll	r3,r8,r3
    a598:	1c46b03a 	or	r3,r3,r17
    a59c:	1806c03a 	cmpne	r3,r3,zero
    a5a0:	28e2b03a 	or	r17,r5,r3
    a5a4:	0007883a 	mov	r3,zero
    a5a8:	003f2306 	br	a238 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a238>
    a5ac:	0007883a 	mov	r3,zero
    a5b0:	5811883a 	mov	r8,r11
    a5b4:	00bfffc4 	movi	r2,-1
    a5b8:	0401ffc4 	movi	r16,2047
    a5bc:	003e7806 	br	9fa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009fa0>
    a5c0:	4462b03a 	or	r17,r8,r17
    a5c4:	8822c03a 	cmpne	r17,r17,zero
    a5c8:	0009883a 	mov	r4,zero
    a5cc:	003fa006 	br	a450 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a450>
    a5d0:	4811883a 	mov	r8,r9
    a5d4:	3023883a 	mov	r17,r6
    a5d8:	0401ffc4 	movi	r16,2047
    a5dc:	003e0706 	br	9dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009dfc>
    a5e0:	4811883a 	mov	r8,r9
    a5e4:	3023883a 	mov	r17,r6
    a5e8:	003e0406 	br	9dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009dfc>
    a5ec:	21fff804 	addi	r7,r4,-32
    a5f0:	01400804 	movi	r5,32
    a5f4:	41ced83a 	srl	r7,r8,r7
    a5f8:	21400a26 	beq	r4,r5,a624 <__adddf3+0x8a4>
    a5fc:	01401004 	movi	r5,64
    a600:	2909c83a 	sub	r4,r5,r4
    a604:	4108983a 	sll	r4,r8,r4
    a608:	2448b03a 	or	r4,r4,r17
    a60c:	2008c03a 	cmpne	r4,r4,zero
    a610:	3922b03a 	or	r17,r7,r4
    a614:	0009883a 	mov	r4,zero
    a618:	003f8d06 	br	a450 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a450>
    a61c:	0007883a 	mov	r3,zero
    a620:	003fdd06 	br	a598 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a598>
    a624:	0009883a 	mov	r4,zero
    a628:	003ff706 	br	a608 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a608>

0000a62c <__divdf3>:
    a62c:	defff204 	addi	sp,sp,-56
    a630:	dd400915 	stw	r21,36(sp)
    a634:	282ad53a 	srli	r21,r5,20
    a638:	dd000815 	stw	r20,32(sp)
    a63c:	2828d7fa 	srli	r20,r5,31
    a640:	dc000415 	stw	r16,16(sp)
    a644:	04000434 	movhi	r16,16
    a648:	df000c15 	stw	fp,48(sp)
    a64c:	843fffc4 	addi	r16,r16,-1
    a650:	dfc00d15 	stw	ra,52(sp)
    a654:	ddc00b15 	stw	r23,44(sp)
    a658:	dd800a15 	stw	r22,40(sp)
    a65c:	dcc00715 	stw	r19,28(sp)
    a660:	dc800615 	stw	r18,24(sp)
    a664:	dc400515 	stw	r17,20(sp)
    a668:	ad41ffcc 	andi	r21,r21,2047
    a66c:	2c20703a 	and	r16,r5,r16
    a670:	a7003fcc 	andi	fp,r20,255
    a674:	a8006126 	beq	r21,zero,a7fc <__divdf3+0x1d0>
    a678:	0081ffc4 	movi	r2,2047
    a67c:	2025883a 	mov	r18,r4
    a680:	a8803726 	beq	r21,r2,a760 <__divdf3+0x134>
    a684:	80800434 	orhi	r2,r16,16
    a688:	100490fa 	slli	r2,r2,3
    a68c:	2020d77a 	srli	r16,r4,29
    a690:	202490fa 	slli	r18,r4,3
    a694:	ad7f0044 	addi	r21,r21,-1023
    a698:	80a0b03a 	or	r16,r16,r2
    a69c:	0027883a 	mov	r19,zero
    a6a0:	0013883a 	mov	r9,zero
    a6a4:	3804d53a 	srli	r2,r7,20
    a6a8:	382cd7fa 	srli	r22,r7,31
    a6ac:	04400434 	movhi	r17,16
    a6b0:	8c7fffc4 	addi	r17,r17,-1
    a6b4:	1081ffcc 	andi	r2,r2,2047
    a6b8:	3011883a 	mov	r8,r6
    a6bc:	3c62703a 	and	r17,r7,r17
    a6c0:	b5c03fcc 	andi	r23,r22,255
    a6c4:	10006c26 	beq	r2,zero,a878 <__divdf3+0x24c>
    a6c8:	00c1ffc4 	movi	r3,2047
    a6cc:	10c06426 	beq	r2,r3,a860 <__divdf3+0x234>
    a6d0:	88c00434 	orhi	r3,r17,16
    a6d4:	180690fa 	slli	r3,r3,3
    a6d8:	3022d77a 	srli	r17,r6,29
    a6dc:	301090fa 	slli	r8,r6,3
    a6e0:	10bf0044 	addi	r2,r2,-1023
    a6e4:	88e2b03a 	or	r17,r17,r3
    a6e8:	000f883a 	mov	r7,zero
    a6ec:	a58cf03a 	xor	r6,r20,r22
    a6f0:	3cc8b03a 	or	r4,r7,r19
    a6f4:	a8abc83a 	sub	r21,r21,r2
    a6f8:	008003c4 	movi	r2,15
    a6fc:	3007883a 	mov	r3,r6
    a700:	34c03fcc 	andi	r19,r6,255
    a704:	11009036 	bltu	r2,r4,a948 <__divdf3+0x31c>
    a708:	200890ba 	slli	r4,r4,2
    a70c:	00800074 	movhi	r2,1
    a710:	10a9c804 	addi	r2,r2,-22752
    a714:	2089883a 	add	r4,r4,r2
    a718:	20800017 	ldw	r2,0(r4)
    a71c:	1000683a 	jmp	r2
    a720:	0000a948 	cmpgei	zero,zero,677
    a724:	0000a798 	cmpnei	zero,zero,670
    a728:	0000a938 	rdprs	zero,zero,676
    a72c:	0000a78c 	andi	zero,zero,670
    a730:	0000a938 	rdprs	zero,zero,676
    a734:	0000a90c 	andi	zero,zero,676
    a738:	0000a938 	rdprs	zero,zero,676
    a73c:	0000a78c 	andi	zero,zero,670
    a740:	0000a798 	cmpnei	zero,zero,670
    a744:	0000a798 	cmpnei	zero,zero,670
    a748:	0000a90c 	andi	zero,zero,676
    a74c:	0000a78c 	andi	zero,zero,670
    a750:	0000a77c 	xorhi	zero,zero,669
    a754:	0000a77c 	xorhi	zero,zero,669
    a758:	0000a77c 	xorhi	zero,zero,669
    a75c:	0000ac2c 	andhi	zero,zero,688
    a760:	2404b03a 	or	r2,r4,r16
    a764:	1000661e 	bne	r2,zero,a900 <__divdf3+0x2d4>
    a768:	04c00204 	movi	r19,8
    a76c:	0021883a 	mov	r16,zero
    a770:	0025883a 	mov	r18,zero
    a774:	02400084 	movi	r9,2
    a778:	003fca06 	br	a6a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a6a4>
    a77c:	8023883a 	mov	r17,r16
    a780:	9011883a 	mov	r8,r18
    a784:	e02f883a 	mov	r23,fp
    a788:	480f883a 	mov	r7,r9
    a78c:	00800084 	movi	r2,2
    a790:	3881311e 	bne	r7,r2,ac58 <__divdf3+0x62c>
    a794:	b827883a 	mov	r19,r23
    a798:	98c0004c 	andi	r3,r19,1
    a79c:	0081ffc4 	movi	r2,2047
    a7a0:	000b883a 	mov	r5,zero
    a7a4:	0025883a 	mov	r18,zero
    a7a8:	1004953a 	slli	r2,r2,20
    a7ac:	18c03fcc 	andi	r3,r3,255
    a7b0:	04400434 	movhi	r17,16
    a7b4:	8c7fffc4 	addi	r17,r17,-1
    a7b8:	180697fa 	slli	r3,r3,31
    a7bc:	2c4a703a 	and	r5,r5,r17
    a7c0:	288ab03a 	or	r5,r5,r2
    a7c4:	28c6b03a 	or	r3,r5,r3
    a7c8:	9005883a 	mov	r2,r18
    a7cc:	dfc00d17 	ldw	ra,52(sp)
    a7d0:	df000c17 	ldw	fp,48(sp)
    a7d4:	ddc00b17 	ldw	r23,44(sp)
    a7d8:	dd800a17 	ldw	r22,40(sp)
    a7dc:	dd400917 	ldw	r21,36(sp)
    a7e0:	dd000817 	ldw	r20,32(sp)
    a7e4:	dcc00717 	ldw	r19,28(sp)
    a7e8:	dc800617 	ldw	r18,24(sp)
    a7ec:	dc400517 	ldw	r17,20(sp)
    a7f0:	dc000417 	ldw	r16,16(sp)
    a7f4:	dec00e04 	addi	sp,sp,56
    a7f8:	f800283a 	ret
    a7fc:	2404b03a 	or	r2,r4,r16
    a800:	2027883a 	mov	r19,r4
    a804:	10003926 	beq	r2,zero,a8ec <__divdf3+0x2c0>
    a808:	80012e26 	beq	r16,zero,acc4 <__divdf3+0x698>
    a80c:	8009883a 	mov	r4,r16
    a810:	d9800315 	stw	r6,12(sp)
    a814:	d9c00215 	stw	r7,8(sp)
    a818:	000c90c0 	call	c90c <__clzsi2>
    a81c:	d9800317 	ldw	r6,12(sp)
    a820:	d9c00217 	ldw	r7,8(sp)
    a824:	113ffd44 	addi	r4,r2,-11
    a828:	00c00704 	movi	r3,28
    a82c:	19012116 	blt	r3,r4,acb4 <__divdf3+0x688>
    a830:	00c00744 	movi	r3,29
    a834:	147ffe04 	addi	r17,r2,-8
    a838:	1907c83a 	sub	r3,r3,r4
    a83c:	8460983a 	sll	r16,r16,r17
    a840:	98c6d83a 	srl	r3,r19,r3
    a844:	9c64983a 	sll	r18,r19,r17
    a848:	1c20b03a 	or	r16,r3,r16
    a84c:	1080fcc4 	addi	r2,r2,1011
    a850:	00abc83a 	sub	r21,zero,r2
    a854:	0027883a 	mov	r19,zero
    a858:	0013883a 	mov	r9,zero
    a85c:	003f9106 	br	a6a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a6a4>
    a860:	3446b03a 	or	r3,r6,r17
    a864:	18001f1e 	bne	r3,zero,a8e4 <__divdf3+0x2b8>
    a868:	0023883a 	mov	r17,zero
    a86c:	0011883a 	mov	r8,zero
    a870:	01c00084 	movi	r7,2
    a874:	003f9d06 	br	a6ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a6ec>
    a878:	3446b03a 	or	r3,r6,r17
    a87c:	18001526 	beq	r3,zero,a8d4 <__divdf3+0x2a8>
    a880:	88011b26 	beq	r17,zero,acf0 <__divdf3+0x6c4>
    a884:	8809883a 	mov	r4,r17
    a888:	d9800315 	stw	r6,12(sp)
    a88c:	da400115 	stw	r9,4(sp)
    a890:	000c90c0 	call	c90c <__clzsi2>
    a894:	d9800317 	ldw	r6,12(sp)
    a898:	da400117 	ldw	r9,4(sp)
    a89c:	113ffd44 	addi	r4,r2,-11
    a8a0:	00c00704 	movi	r3,28
    a8a4:	19010e16 	blt	r3,r4,ace0 <__divdf3+0x6b4>
    a8a8:	00c00744 	movi	r3,29
    a8ac:	123ffe04 	addi	r8,r2,-8
    a8b0:	1907c83a 	sub	r3,r3,r4
    a8b4:	8a22983a 	sll	r17,r17,r8
    a8b8:	30c6d83a 	srl	r3,r6,r3
    a8bc:	3210983a 	sll	r8,r6,r8
    a8c0:	1c62b03a 	or	r17,r3,r17
    a8c4:	1080fcc4 	addi	r2,r2,1011
    a8c8:	0085c83a 	sub	r2,zero,r2
    a8cc:	000f883a 	mov	r7,zero
    a8d0:	003f8606 	br	a6ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a6ec>
    a8d4:	0023883a 	mov	r17,zero
    a8d8:	0011883a 	mov	r8,zero
    a8dc:	01c00044 	movi	r7,1
    a8e0:	003f8206 	br	a6ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a6ec>
    a8e4:	01c000c4 	movi	r7,3
    a8e8:	003f8006 	br	a6ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a6ec>
    a8ec:	04c00104 	movi	r19,4
    a8f0:	0021883a 	mov	r16,zero
    a8f4:	0025883a 	mov	r18,zero
    a8f8:	02400044 	movi	r9,1
    a8fc:	003f6906 	br	a6a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a6a4>
    a900:	04c00304 	movi	r19,12
    a904:	024000c4 	movi	r9,3
    a908:	003f6606 	br	a6a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a6a4>
    a90c:	01400434 	movhi	r5,16
    a910:	0007883a 	mov	r3,zero
    a914:	297fffc4 	addi	r5,r5,-1
    a918:	04bfffc4 	movi	r18,-1
    a91c:	0081ffc4 	movi	r2,2047
    a920:	003fa106 	br	a7a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a7a8>
    a924:	00c00044 	movi	r3,1
    a928:	1887c83a 	sub	r3,r3,r2
    a92c:	01000e04 	movi	r4,56
    a930:	20c1210e 	bge	r4,r3,adb8 <__divdf3+0x78c>
    a934:	98c0004c 	andi	r3,r19,1
    a938:	0005883a 	mov	r2,zero
    a93c:	000b883a 	mov	r5,zero
    a940:	0025883a 	mov	r18,zero
    a944:	003f9806 	br	a7a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a7a8>
    a948:	8c00fd36 	bltu	r17,r16,ad40 <__divdf3+0x714>
    a94c:	8440fb26 	beq	r16,r17,ad3c <__divdf3+0x710>
    a950:	8007883a 	mov	r3,r16
    a954:	ad7fffc4 	addi	r21,r21,-1
    a958:	0021883a 	mov	r16,zero
    a95c:	4004d63a 	srli	r2,r8,24
    a960:	8822923a 	slli	r17,r17,8
    a964:	1809883a 	mov	r4,r3
    a968:	402c923a 	slli	r22,r8,8
    a96c:	88b8b03a 	or	fp,r17,r2
    a970:	e028d43a 	srli	r20,fp,16
    a974:	d8c00015 	stw	r3,0(sp)
    a978:	e5ffffcc 	andi	r23,fp,65535
    a97c:	a00b883a 	mov	r5,r20
    a980:	000ca680 	call	ca68 <__udivsi3>
    a984:	d8c00017 	ldw	r3,0(sp)
    a988:	a00b883a 	mov	r5,r20
    a98c:	d8800315 	stw	r2,12(sp)
    a990:	1809883a 	mov	r4,r3
    a994:	000cacc0 	call	cacc <__umodsi3>
    a998:	d9800317 	ldw	r6,12(sp)
    a99c:	1006943a 	slli	r3,r2,16
    a9a0:	9004d43a 	srli	r2,r18,16
    a9a4:	b9a3383a 	mul	r17,r23,r6
    a9a8:	10c4b03a 	or	r2,r2,r3
    a9ac:	1440062e 	bgeu	r2,r17,a9c8 <__divdf3+0x39c>
    a9b0:	1705883a 	add	r2,r2,fp
    a9b4:	30ffffc4 	addi	r3,r6,-1
    a9b8:	1700ee36 	bltu	r2,fp,ad74 <__divdf3+0x748>
    a9bc:	1440ed2e 	bgeu	r2,r17,ad74 <__divdf3+0x748>
    a9c0:	31bfff84 	addi	r6,r6,-2
    a9c4:	1705883a 	add	r2,r2,fp
    a9c8:	1463c83a 	sub	r17,r2,r17
    a9cc:	a00b883a 	mov	r5,r20
    a9d0:	8809883a 	mov	r4,r17
    a9d4:	d9800315 	stw	r6,12(sp)
    a9d8:	000ca680 	call	ca68 <__udivsi3>
    a9dc:	a00b883a 	mov	r5,r20
    a9e0:	8809883a 	mov	r4,r17
    a9e4:	d8800215 	stw	r2,8(sp)
    a9e8:	000cacc0 	call	cacc <__umodsi3>
    a9ec:	d9c00217 	ldw	r7,8(sp)
    a9f0:	1004943a 	slli	r2,r2,16
    a9f4:	94bfffcc 	andi	r18,r18,65535
    a9f8:	b9d1383a 	mul	r8,r23,r7
    a9fc:	90a4b03a 	or	r18,r18,r2
    aa00:	d9800317 	ldw	r6,12(sp)
    aa04:	9200062e 	bgeu	r18,r8,aa20 <__divdf3+0x3f4>
    aa08:	9725883a 	add	r18,r18,fp
    aa0c:	38bfffc4 	addi	r2,r7,-1
    aa10:	9700d636 	bltu	r18,fp,ad6c <__divdf3+0x740>
    aa14:	9200d52e 	bgeu	r18,r8,ad6c <__divdf3+0x740>
    aa18:	39ffff84 	addi	r7,r7,-2
    aa1c:	9725883a 	add	r18,r18,fp
    aa20:	3004943a 	slli	r2,r6,16
    aa24:	b012d43a 	srli	r9,r22,16
    aa28:	b1bfffcc 	andi	r6,r22,65535
    aa2c:	11e2b03a 	or	r17,r2,r7
    aa30:	8806d43a 	srli	r3,r17,16
    aa34:	893fffcc 	andi	r4,r17,65535
    aa38:	218b383a 	mul	r5,r4,r6
    aa3c:	30c5383a 	mul	r2,r6,r3
    aa40:	2249383a 	mul	r4,r4,r9
    aa44:	280ed43a 	srli	r7,r5,16
    aa48:	9225c83a 	sub	r18,r18,r8
    aa4c:	2089883a 	add	r4,r4,r2
    aa50:	3909883a 	add	r4,r7,r4
    aa54:	1a47383a 	mul	r3,r3,r9
    aa58:	2080022e 	bgeu	r4,r2,aa64 <__divdf3+0x438>
    aa5c:	00800074 	movhi	r2,1
    aa60:	1887883a 	add	r3,r3,r2
    aa64:	2004d43a 	srli	r2,r4,16
    aa68:	2008943a 	slli	r4,r4,16
    aa6c:	297fffcc 	andi	r5,r5,65535
    aa70:	10c7883a 	add	r3,r2,r3
    aa74:	2149883a 	add	r4,r4,r5
    aa78:	90c0a536 	bltu	r18,r3,ad10 <__divdf3+0x6e4>
    aa7c:	90c0bf26 	beq	r18,r3,ad7c <__divdf3+0x750>
    aa80:	90c7c83a 	sub	r3,r18,r3
    aa84:	810fc83a 	sub	r7,r16,r4
    aa88:	81e5803a 	cmpltu	r18,r16,r7
    aa8c:	1ca5c83a 	sub	r18,r3,r18
    aa90:	e480c126 	beq	fp,r18,ad98 <__divdf3+0x76c>
    aa94:	a00b883a 	mov	r5,r20
    aa98:	9009883a 	mov	r4,r18
    aa9c:	d9800315 	stw	r6,12(sp)
    aaa0:	d9c00215 	stw	r7,8(sp)
    aaa4:	da400115 	stw	r9,4(sp)
    aaa8:	000ca680 	call	ca68 <__udivsi3>
    aaac:	a00b883a 	mov	r5,r20
    aab0:	9009883a 	mov	r4,r18
    aab4:	d8800015 	stw	r2,0(sp)
    aab8:	000cacc0 	call	cacc <__umodsi3>
    aabc:	d9c00217 	ldw	r7,8(sp)
    aac0:	da000017 	ldw	r8,0(sp)
    aac4:	1006943a 	slli	r3,r2,16
    aac8:	3804d43a 	srli	r2,r7,16
    aacc:	ba21383a 	mul	r16,r23,r8
    aad0:	d9800317 	ldw	r6,12(sp)
    aad4:	10c4b03a 	or	r2,r2,r3
    aad8:	da400117 	ldw	r9,4(sp)
    aadc:	1400062e 	bgeu	r2,r16,aaf8 <__divdf3+0x4cc>
    aae0:	1705883a 	add	r2,r2,fp
    aae4:	40ffffc4 	addi	r3,r8,-1
    aae8:	1700ad36 	bltu	r2,fp,ada0 <__divdf3+0x774>
    aaec:	1400ac2e 	bgeu	r2,r16,ada0 <__divdf3+0x774>
    aaf0:	423fff84 	addi	r8,r8,-2
    aaf4:	1705883a 	add	r2,r2,fp
    aaf8:	1421c83a 	sub	r16,r2,r16
    aafc:	a00b883a 	mov	r5,r20
    ab00:	8009883a 	mov	r4,r16
    ab04:	d9800315 	stw	r6,12(sp)
    ab08:	d9c00215 	stw	r7,8(sp)
    ab0c:	da000015 	stw	r8,0(sp)
    ab10:	da400115 	stw	r9,4(sp)
    ab14:	000ca680 	call	ca68 <__udivsi3>
    ab18:	8009883a 	mov	r4,r16
    ab1c:	a00b883a 	mov	r5,r20
    ab20:	1025883a 	mov	r18,r2
    ab24:	000cacc0 	call	cacc <__umodsi3>
    ab28:	d9c00217 	ldw	r7,8(sp)
    ab2c:	1004943a 	slli	r2,r2,16
    ab30:	bcaf383a 	mul	r23,r23,r18
    ab34:	393fffcc 	andi	r4,r7,65535
    ab38:	2088b03a 	or	r4,r4,r2
    ab3c:	d9800317 	ldw	r6,12(sp)
    ab40:	da000017 	ldw	r8,0(sp)
    ab44:	da400117 	ldw	r9,4(sp)
    ab48:	25c0062e 	bgeu	r4,r23,ab64 <__divdf3+0x538>
    ab4c:	2709883a 	add	r4,r4,fp
    ab50:	90bfffc4 	addi	r2,r18,-1
    ab54:	27009436 	bltu	r4,fp,ada8 <__divdf3+0x77c>
    ab58:	25c0932e 	bgeu	r4,r23,ada8 <__divdf3+0x77c>
    ab5c:	94bfff84 	addi	r18,r18,-2
    ab60:	2709883a 	add	r4,r4,fp
    ab64:	4004943a 	slli	r2,r8,16
    ab68:	25efc83a 	sub	r23,r4,r23
    ab6c:	1490b03a 	or	r8,r2,r18
    ab70:	4008d43a 	srli	r4,r8,16
    ab74:	40ffffcc 	andi	r3,r8,65535
    ab78:	30c5383a 	mul	r2,r6,r3
    ab7c:	1a47383a 	mul	r3,r3,r9
    ab80:	310d383a 	mul	r6,r6,r4
    ab84:	100ad43a 	srli	r5,r2,16
    ab88:	4913383a 	mul	r9,r9,r4
    ab8c:	1987883a 	add	r3,r3,r6
    ab90:	28c7883a 	add	r3,r5,r3
    ab94:	1980022e 	bgeu	r3,r6,aba0 <__divdf3+0x574>
    ab98:	01000074 	movhi	r4,1
    ab9c:	4913883a 	add	r9,r9,r4
    aba0:	1808d43a 	srli	r4,r3,16
    aba4:	1806943a 	slli	r3,r3,16
    aba8:	10bfffcc 	andi	r2,r2,65535
    abac:	2253883a 	add	r9,r4,r9
    abb0:	1887883a 	add	r3,r3,r2
    abb4:	ba403836 	bltu	r23,r9,ac98 <__divdf3+0x66c>
    abb8:	ba403626 	beq	r23,r9,ac94 <__divdf3+0x668>
    abbc:	42000054 	ori	r8,r8,1
    abc0:	a880ffc4 	addi	r2,r21,1023
    abc4:	00bf570e 	bge	zero,r2,a924 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a924>
    abc8:	40c001cc 	andi	r3,r8,7
    abcc:	18000726 	beq	r3,zero,abec <__divdf3+0x5c0>
    abd0:	40c003cc 	andi	r3,r8,15
    abd4:	01000104 	movi	r4,4
    abd8:	19000426 	beq	r3,r4,abec <__divdf3+0x5c0>
    abdc:	4107883a 	add	r3,r8,r4
    abe0:	1a11803a 	cmpltu	r8,r3,r8
    abe4:	8a23883a 	add	r17,r17,r8
    abe8:	1811883a 	mov	r8,r3
    abec:	88c0402c 	andhi	r3,r17,256
    abf0:	18000426 	beq	r3,zero,ac04 <__divdf3+0x5d8>
    abf4:	00ffc034 	movhi	r3,65280
    abf8:	18ffffc4 	addi	r3,r3,-1
    abfc:	a8810004 	addi	r2,r21,1024
    ac00:	88e2703a 	and	r17,r17,r3
    ac04:	00c1ff84 	movi	r3,2046
    ac08:	18bee316 	blt	r3,r2,a798 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a798>
    ac0c:	8824977a 	slli	r18,r17,29
    ac10:	4010d0fa 	srli	r8,r8,3
    ac14:	8822927a 	slli	r17,r17,9
    ac18:	1081ffcc 	andi	r2,r2,2047
    ac1c:	9224b03a 	or	r18,r18,r8
    ac20:	880ad33a 	srli	r5,r17,12
    ac24:	98c0004c 	andi	r3,r19,1
    ac28:	003edf06 	br	a7a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a7a8>
    ac2c:	8080022c 	andhi	r2,r16,8
    ac30:	10001226 	beq	r2,zero,ac7c <__divdf3+0x650>
    ac34:	8880022c 	andhi	r2,r17,8
    ac38:	1000101e 	bne	r2,zero,ac7c <__divdf3+0x650>
    ac3c:	00800434 	movhi	r2,16
    ac40:	89400234 	orhi	r5,r17,8
    ac44:	10bfffc4 	addi	r2,r2,-1
    ac48:	b007883a 	mov	r3,r22
    ac4c:	288a703a 	and	r5,r5,r2
    ac50:	4025883a 	mov	r18,r8
    ac54:	003f3106 	br	a91c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a91c>
    ac58:	008000c4 	movi	r2,3
    ac5c:	3880a626 	beq	r7,r2,aef8 <__divdf3+0x8cc>
    ac60:	00800044 	movi	r2,1
    ac64:	3880521e 	bne	r7,r2,adb0 <__divdf3+0x784>
    ac68:	b807883a 	mov	r3,r23
    ac6c:	0005883a 	mov	r2,zero
    ac70:	000b883a 	mov	r5,zero
    ac74:	0025883a 	mov	r18,zero
    ac78:	003ecb06 	br	a7a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a7a8>
    ac7c:	00800434 	movhi	r2,16
    ac80:	81400234 	orhi	r5,r16,8
    ac84:	10bfffc4 	addi	r2,r2,-1
    ac88:	a007883a 	mov	r3,r20
    ac8c:	288a703a 	and	r5,r5,r2
    ac90:	003f2206 	br	a91c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a91c>
    ac94:	183fca26 	beq	r3,zero,abc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700abc0>
    ac98:	e5ef883a 	add	r23,fp,r23
    ac9c:	40bfffc4 	addi	r2,r8,-1
    aca0:	bf00392e 	bgeu	r23,fp,ad88 <__divdf3+0x75c>
    aca4:	1011883a 	mov	r8,r2
    aca8:	ba7fc41e 	bne	r23,r9,abbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700abbc>
    acac:	b0ffc31e 	bne	r22,r3,abbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700abbc>
    acb0:	003fc306 	br	abc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700abc0>
    acb4:	143ff604 	addi	r16,r2,-40
    acb8:	9c20983a 	sll	r16,r19,r16
    acbc:	0025883a 	mov	r18,zero
    acc0:	003ee206 	br	a84c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a84c>
    acc4:	d9800315 	stw	r6,12(sp)
    acc8:	d9c00215 	stw	r7,8(sp)
    accc:	000c90c0 	call	c90c <__clzsi2>
    acd0:	10800804 	addi	r2,r2,32
    acd4:	d9c00217 	ldw	r7,8(sp)
    acd8:	d9800317 	ldw	r6,12(sp)
    acdc:	003ed106 	br	a824 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a824>
    ace0:	147ff604 	addi	r17,r2,-40
    ace4:	3462983a 	sll	r17,r6,r17
    ace8:	0011883a 	mov	r8,zero
    acec:	003ef506 	br	a8c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8c4>
    acf0:	3009883a 	mov	r4,r6
    acf4:	d9800315 	stw	r6,12(sp)
    acf8:	da400115 	stw	r9,4(sp)
    acfc:	000c90c0 	call	c90c <__clzsi2>
    ad00:	10800804 	addi	r2,r2,32
    ad04:	da400117 	ldw	r9,4(sp)
    ad08:	d9800317 	ldw	r6,12(sp)
    ad0c:	003ee306 	br	a89c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a89c>
    ad10:	85a1883a 	add	r16,r16,r22
    ad14:	8585803a 	cmpltu	r2,r16,r22
    ad18:	1705883a 	add	r2,r2,fp
    ad1c:	14a5883a 	add	r18,r2,r18
    ad20:	88bfffc4 	addi	r2,r17,-1
    ad24:	e4800c2e 	bgeu	fp,r18,ad58 <__divdf3+0x72c>
    ad28:	90c03e36 	bltu	r18,r3,ae24 <__divdf3+0x7f8>
    ad2c:	1c806926 	beq	r3,r18,aed4 <__divdf3+0x8a8>
    ad30:	90c7c83a 	sub	r3,r18,r3
    ad34:	1023883a 	mov	r17,r2
    ad38:	003f5206 	br	aa84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aa84>
    ad3c:	923f0436 	bltu	r18,r8,a950 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a950>
    ad40:	800897fa 	slli	r4,r16,31
    ad44:	9004d07a 	srli	r2,r18,1
    ad48:	8006d07a 	srli	r3,r16,1
    ad4c:	902097fa 	slli	r16,r18,31
    ad50:	20a4b03a 	or	r18,r4,r2
    ad54:	003f0106 	br	a95c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a95c>
    ad58:	e4bff51e 	bne	fp,r18,ad30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad30>
    ad5c:	85bff22e 	bgeu	r16,r22,ad28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad28>
    ad60:	e0c7c83a 	sub	r3,fp,r3
    ad64:	1023883a 	mov	r17,r2
    ad68:	003f4606 	br	aa84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aa84>
    ad6c:	100f883a 	mov	r7,r2
    ad70:	003f2b06 	br	aa20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aa20>
    ad74:	180d883a 	mov	r6,r3
    ad78:	003f1306 	br	a9c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a9c8>
    ad7c:	813fe436 	bltu	r16,r4,ad10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad10>
    ad80:	0007883a 	mov	r3,zero
    ad84:	003f3f06 	br	aa84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aa84>
    ad88:	ba402c36 	bltu	r23,r9,ae3c <__divdf3+0x810>
    ad8c:	4dc05426 	beq	r9,r23,aee0 <__divdf3+0x8b4>
    ad90:	1011883a 	mov	r8,r2
    ad94:	003f8906 	br	abbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700abbc>
    ad98:	023fffc4 	movi	r8,-1
    ad9c:	003f8806 	br	abc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700abc0>
    ada0:	1811883a 	mov	r8,r3
    ada4:	003f5406 	br	aaf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aaf8>
    ada8:	1025883a 	mov	r18,r2
    adac:	003f6d06 	br	ab64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ab64>
    adb0:	b827883a 	mov	r19,r23
    adb4:	003f8206 	br	abc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700abc0>
    adb8:	010007c4 	movi	r4,31
    adbc:	20c02616 	blt	r4,r3,ae58 <__divdf3+0x82c>
    adc0:	00800804 	movi	r2,32
    adc4:	10c5c83a 	sub	r2,r2,r3
    adc8:	888a983a 	sll	r5,r17,r2
    adcc:	40c8d83a 	srl	r4,r8,r3
    add0:	4084983a 	sll	r2,r8,r2
    add4:	88e2d83a 	srl	r17,r17,r3
    add8:	2906b03a 	or	r3,r5,r4
    addc:	1004c03a 	cmpne	r2,r2,zero
    ade0:	1886b03a 	or	r3,r3,r2
    ade4:	188001cc 	andi	r2,r3,7
    ade8:	10000726 	beq	r2,zero,ae08 <__divdf3+0x7dc>
    adec:	188003cc 	andi	r2,r3,15
    adf0:	01000104 	movi	r4,4
    adf4:	11000426 	beq	r2,r4,ae08 <__divdf3+0x7dc>
    adf8:	1805883a 	mov	r2,r3
    adfc:	10c00104 	addi	r3,r2,4
    ae00:	1885803a 	cmpltu	r2,r3,r2
    ae04:	88a3883a 	add	r17,r17,r2
    ae08:	8880202c 	andhi	r2,r17,128
    ae0c:	10002726 	beq	r2,zero,aeac <__divdf3+0x880>
    ae10:	98c0004c 	andi	r3,r19,1
    ae14:	00800044 	movi	r2,1
    ae18:	000b883a 	mov	r5,zero
    ae1c:	0025883a 	mov	r18,zero
    ae20:	003e6106 	br	a7a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a7a8>
    ae24:	85a1883a 	add	r16,r16,r22
    ae28:	8585803a 	cmpltu	r2,r16,r22
    ae2c:	1705883a 	add	r2,r2,fp
    ae30:	14a5883a 	add	r18,r2,r18
    ae34:	8c7fff84 	addi	r17,r17,-2
    ae38:	003f1106 	br	aa80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aa80>
    ae3c:	b589883a 	add	r4,r22,r22
    ae40:	25ad803a 	cmpltu	r22,r4,r22
    ae44:	b739883a 	add	fp,r22,fp
    ae48:	40bfff84 	addi	r2,r8,-2
    ae4c:	bf2f883a 	add	r23,r23,fp
    ae50:	202d883a 	mov	r22,r4
    ae54:	003f9306 	br	aca4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aca4>
    ae58:	013ff844 	movi	r4,-31
    ae5c:	2085c83a 	sub	r2,r4,r2
    ae60:	8888d83a 	srl	r4,r17,r2
    ae64:	00800804 	movi	r2,32
    ae68:	18802126 	beq	r3,r2,aef0 <__divdf3+0x8c4>
    ae6c:	00801004 	movi	r2,64
    ae70:	10c5c83a 	sub	r2,r2,r3
    ae74:	8884983a 	sll	r2,r17,r2
    ae78:	1204b03a 	or	r2,r2,r8
    ae7c:	1004c03a 	cmpne	r2,r2,zero
    ae80:	2084b03a 	or	r2,r4,r2
    ae84:	144001cc 	andi	r17,r2,7
    ae88:	88000d1e 	bne	r17,zero,aec0 <__divdf3+0x894>
    ae8c:	000b883a 	mov	r5,zero
    ae90:	1024d0fa 	srli	r18,r2,3
    ae94:	98c0004c 	andi	r3,r19,1
    ae98:	0005883a 	mov	r2,zero
    ae9c:	9464b03a 	or	r18,r18,r17
    aea0:	003e4106 	br	a7a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a7a8>
    aea4:	1007883a 	mov	r3,r2
    aea8:	0023883a 	mov	r17,zero
    aeac:	880a927a 	slli	r5,r17,9
    aeb0:	1805883a 	mov	r2,r3
    aeb4:	8822977a 	slli	r17,r17,29
    aeb8:	280ad33a 	srli	r5,r5,12
    aebc:	003ff406 	br	ae90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae90>
    aec0:	10c003cc 	andi	r3,r2,15
    aec4:	01000104 	movi	r4,4
    aec8:	193ff626 	beq	r3,r4,aea4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aea4>
    aecc:	0023883a 	mov	r17,zero
    aed0:	003fca06 	br	adfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700adfc>
    aed4:	813fd336 	bltu	r16,r4,ae24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae24>
    aed8:	1023883a 	mov	r17,r2
    aedc:	003fa806 	br	ad80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad80>
    aee0:	b0ffd636 	bltu	r22,r3,ae3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae3c>
    aee4:	1011883a 	mov	r8,r2
    aee8:	b0ff341e 	bne	r22,r3,abbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700abbc>
    aeec:	003f3406 	br	abc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700abc0>
    aef0:	0005883a 	mov	r2,zero
    aef4:	003fe006 	br	ae78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ae78>
    aef8:	00800434 	movhi	r2,16
    aefc:	89400234 	orhi	r5,r17,8
    af00:	10bfffc4 	addi	r2,r2,-1
    af04:	b807883a 	mov	r3,r23
    af08:	288a703a 	and	r5,r5,r2
    af0c:	4025883a 	mov	r18,r8
    af10:	003e8206 	br	a91c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a91c>

0000af14 <__eqdf2>:
    af14:	2804d53a 	srli	r2,r5,20
    af18:	3806d53a 	srli	r3,r7,20
    af1c:	02000434 	movhi	r8,16
    af20:	423fffc4 	addi	r8,r8,-1
    af24:	1081ffcc 	andi	r2,r2,2047
    af28:	0281ffc4 	movi	r10,2047
    af2c:	2a12703a 	and	r9,r5,r8
    af30:	18c1ffcc 	andi	r3,r3,2047
    af34:	3a10703a 	and	r8,r7,r8
    af38:	280ad7fa 	srli	r5,r5,31
    af3c:	380ed7fa 	srli	r7,r7,31
    af40:	12801026 	beq	r2,r10,af84 <__eqdf2+0x70>
    af44:	0281ffc4 	movi	r10,2047
    af48:	1a800a26 	beq	r3,r10,af74 <__eqdf2+0x60>
    af4c:	10c00226 	beq	r2,r3,af58 <__eqdf2+0x44>
    af50:	00800044 	movi	r2,1
    af54:	f800283a 	ret
    af58:	4a3ffd1e 	bne	r9,r8,af50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af50>
    af5c:	21bffc1e 	bne	r4,r6,af50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af50>
    af60:	29c00c26 	beq	r5,r7,af94 <__eqdf2+0x80>
    af64:	103ffa1e 	bne	r2,zero,af50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af50>
    af68:	2244b03a 	or	r2,r4,r9
    af6c:	1004c03a 	cmpne	r2,r2,zero
    af70:	f800283a 	ret
    af74:	3214b03a 	or	r10,r6,r8
    af78:	503ff426 	beq	r10,zero,af4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af4c>
    af7c:	00800044 	movi	r2,1
    af80:	f800283a 	ret
    af84:	2254b03a 	or	r10,r4,r9
    af88:	503fee26 	beq	r10,zero,af44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af44>
    af8c:	00800044 	movi	r2,1
    af90:	f800283a 	ret
    af94:	0005883a 	mov	r2,zero
    af98:	f800283a 	ret

0000af9c <__gedf2>:
    af9c:	2804d53a 	srli	r2,r5,20
    afa0:	3806d53a 	srli	r3,r7,20
    afa4:	02000434 	movhi	r8,16
    afa8:	423fffc4 	addi	r8,r8,-1
    afac:	1081ffcc 	andi	r2,r2,2047
    afb0:	0241ffc4 	movi	r9,2047
    afb4:	2a14703a 	and	r10,r5,r8
    afb8:	18c1ffcc 	andi	r3,r3,2047
    afbc:	3a10703a 	and	r8,r7,r8
    afc0:	280ad7fa 	srli	r5,r5,31
    afc4:	380ed7fa 	srli	r7,r7,31
    afc8:	12401d26 	beq	r2,r9,b040 <__gedf2+0xa4>
    afcc:	0241ffc4 	movi	r9,2047
    afd0:	1a401226 	beq	r3,r9,b01c <__gedf2+0x80>
    afd4:	1000081e 	bne	r2,zero,aff8 <__gedf2+0x5c>
    afd8:	2296b03a 	or	r11,r4,r10
    afdc:	5813003a 	cmpeq	r9,r11,zero
    afe0:	1800091e 	bne	r3,zero,b008 <__gedf2+0x6c>
    afe4:	3218b03a 	or	r12,r6,r8
    afe8:	6000071e 	bne	r12,zero,b008 <__gedf2+0x6c>
    afec:	0005883a 	mov	r2,zero
    aff0:	5800101e 	bne	r11,zero,b034 <__gedf2+0x98>
    aff4:	f800283a 	ret
    aff8:	18000c1e 	bne	r3,zero,b02c <__gedf2+0x90>
    affc:	3212b03a 	or	r9,r6,r8
    b000:	48000c26 	beq	r9,zero,b034 <__gedf2+0x98>
    b004:	0013883a 	mov	r9,zero
    b008:	39c03fcc 	andi	r7,r7,255
    b00c:	48000826 	beq	r9,zero,b030 <__gedf2+0x94>
    b010:	38000926 	beq	r7,zero,b038 <__gedf2+0x9c>
    b014:	00800044 	movi	r2,1
    b018:	f800283a 	ret
    b01c:	3212b03a 	or	r9,r6,r8
    b020:	483fec26 	beq	r9,zero,afd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700afd4>
    b024:	00bfff84 	movi	r2,-2
    b028:	f800283a 	ret
    b02c:	39c03fcc 	andi	r7,r7,255
    b030:	29c00626 	beq	r5,r7,b04c <__gedf2+0xb0>
    b034:	283ff726 	beq	r5,zero,b014 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b014>
    b038:	00bfffc4 	movi	r2,-1
    b03c:	f800283a 	ret
    b040:	2292b03a 	or	r9,r4,r10
    b044:	483fe126 	beq	r9,zero,afcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700afcc>
    b048:	003ff606 	br	b024 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b024>
    b04c:	18bff916 	blt	r3,r2,b034 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b034>
    b050:	10c00316 	blt	r2,r3,b060 <__gedf2+0xc4>
    b054:	42bff736 	bltu	r8,r10,b034 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b034>
    b058:	52000326 	beq	r10,r8,b068 <__gedf2+0xcc>
    b05c:	5200042e 	bgeu	r10,r8,b070 <__gedf2+0xd4>
    b060:	283fec1e 	bne	r5,zero,b014 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b014>
    b064:	003ff406 	br	b038 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b038>
    b068:	313ff236 	bltu	r6,r4,b034 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b034>
    b06c:	21bffc36 	bltu	r4,r6,b060 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b060>
    b070:	0005883a 	mov	r2,zero
    b074:	f800283a 	ret

0000b078 <__ledf2>:
    b078:	2804d53a 	srli	r2,r5,20
    b07c:	3810d53a 	srli	r8,r7,20
    b080:	00c00434 	movhi	r3,16
    b084:	18ffffc4 	addi	r3,r3,-1
    b088:	1081ffcc 	andi	r2,r2,2047
    b08c:	0241ffc4 	movi	r9,2047
    b090:	28d4703a 	and	r10,r5,r3
    b094:	4201ffcc 	andi	r8,r8,2047
    b098:	38c6703a 	and	r3,r7,r3
    b09c:	280ad7fa 	srli	r5,r5,31
    b0a0:	380ed7fa 	srli	r7,r7,31
    b0a4:	12401f26 	beq	r2,r9,b124 <__ledf2+0xac>
    b0a8:	0241ffc4 	movi	r9,2047
    b0ac:	42401426 	beq	r8,r9,b100 <__ledf2+0x88>
    b0b0:	1000091e 	bne	r2,zero,b0d8 <__ledf2+0x60>
    b0b4:	2296b03a 	or	r11,r4,r10
    b0b8:	5813003a 	cmpeq	r9,r11,zero
    b0bc:	29403fcc 	andi	r5,r5,255
    b0c0:	40000a1e 	bne	r8,zero,b0ec <__ledf2+0x74>
    b0c4:	30d8b03a 	or	r12,r6,r3
    b0c8:	6000081e 	bne	r12,zero,b0ec <__ledf2+0x74>
    b0cc:	0005883a 	mov	r2,zero
    b0d0:	5800111e 	bne	r11,zero,b118 <__ledf2+0xa0>
    b0d4:	f800283a 	ret
    b0d8:	29403fcc 	andi	r5,r5,255
    b0dc:	40000c1e 	bne	r8,zero,b110 <__ledf2+0x98>
    b0e0:	30d2b03a 	or	r9,r6,r3
    b0e4:	48000c26 	beq	r9,zero,b118 <__ledf2+0xa0>
    b0e8:	0013883a 	mov	r9,zero
    b0ec:	39c03fcc 	andi	r7,r7,255
    b0f0:	48000826 	beq	r9,zero,b114 <__ledf2+0x9c>
    b0f4:	38001126 	beq	r7,zero,b13c <__ledf2+0xc4>
    b0f8:	00800044 	movi	r2,1
    b0fc:	f800283a 	ret
    b100:	30d2b03a 	or	r9,r6,r3
    b104:	483fea26 	beq	r9,zero,b0b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b0b0>
    b108:	00800084 	movi	r2,2
    b10c:	f800283a 	ret
    b110:	39c03fcc 	andi	r7,r7,255
    b114:	39400726 	beq	r7,r5,b134 <__ledf2+0xbc>
    b118:	2800081e 	bne	r5,zero,b13c <__ledf2+0xc4>
    b11c:	00800044 	movi	r2,1
    b120:	f800283a 	ret
    b124:	2292b03a 	or	r9,r4,r10
    b128:	483fdf26 	beq	r9,zero,b0a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b0a8>
    b12c:	00800084 	movi	r2,2
    b130:	f800283a 	ret
    b134:	4080030e 	bge	r8,r2,b144 <__ledf2+0xcc>
    b138:	383fef26 	beq	r7,zero,b0f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b0f8>
    b13c:	00bfffc4 	movi	r2,-1
    b140:	f800283a 	ret
    b144:	123feb16 	blt	r2,r8,b0f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b0f4>
    b148:	1abff336 	bltu	r3,r10,b118 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b118>
    b14c:	50c00326 	beq	r10,r3,b15c <__ledf2+0xe4>
    b150:	50c0042e 	bgeu	r10,r3,b164 <__ledf2+0xec>
    b154:	283fe81e 	bne	r5,zero,b0f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b0f8>
    b158:	003ff806 	br	b13c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b13c>
    b15c:	313fee36 	bltu	r6,r4,b118 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b118>
    b160:	21bffc36 	bltu	r4,r6,b154 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b154>
    b164:	0005883a 	mov	r2,zero
    b168:	f800283a 	ret

0000b16c <__muldf3>:
    b16c:	defff304 	addi	sp,sp,-52
    b170:	2804d53a 	srli	r2,r5,20
    b174:	dd800915 	stw	r22,36(sp)
    b178:	282cd7fa 	srli	r22,r5,31
    b17c:	dc000315 	stw	r16,12(sp)
    b180:	04000434 	movhi	r16,16
    b184:	dd400815 	stw	r21,32(sp)
    b188:	dc800515 	stw	r18,20(sp)
    b18c:	843fffc4 	addi	r16,r16,-1
    b190:	dfc00c15 	stw	ra,48(sp)
    b194:	df000b15 	stw	fp,44(sp)
    b198:	ddc00a15 	stw	r23,40(sp)
    b19c:	dd000715 	stw	r20,28(sp)
    b1a0:	dcc00615 	stw	r19,24(sp)
    b1a4:	dc400415 	stw	r17,16(sp)
    b1a8:	1481ffcc 	andi	r18,r2,2047
    b1ac:	2c20703a 	and	r16,r5,r16
    b1b0:	b02b883a 	mov	r21,r22
    b1b4:	b2403fcc 	andi	r9,r22,255
    b1b8:	90006026 	beq	r18,zero,b33c <__muldf3+0x1d0>
    b1bc:	0081ffc4 	movi	r2,2047
    b1c0:	2029883a 	mov	r20,r4
    b1c4:	90803626 	beq	r18,r2,b2a0 <__muldf3+0x134>
    b1c8:	80800434 	orhi	r2,r16,16
    b1cc:	100490fa 	slli	r2,r2,3
    b1d0:	2020d77a 	srli	r16,r4,29
    b1d4:	202890fa 	slli	r20,r4,3
    b1d8:	94bf0044 	addi	r18,r18,-1023
    b1dc:	80a0b03a 	or	r16,r16,r2
    b1e0:	0027883a 	mov	r19,zero
    b1e4:	0039883a 	mov	fp,zero
    b1e8:	3804d53a 	srli	r2,r7,20
    b1ec:	382ed7fa 	srli	r23,r7,31
    b1f0:	04400434 	movhi	r17,16
    b1f4:	8c7fffc4 	addi	r17,r17,-1
    b1f8:	1081ffcc 	andi	r2,r2,2047
    b1fc:	3011883a 	mov	r8,r6
    b200:	3c62703a 	and	r17,r7,r17
    b204:	ba803fcc 	andi	r10,r23,255
    b208:	10006d26 	beq	r2,zero,b3c0 <__muldf3+0x254>
    b20c:	00c1ffc4 	movi	r3,2047
    b210:	10c06526 	beq	r2,r3,b3a8 <__muldf3+0x23c>
    b214:	88c00434 	orhi	r3,r17,16
    b218:	180690fa 	slli	r3,r3,3
    b21c:	3022d77a 	srli	r17,r6,29
    b220:	301090fa 	slli	r8,r6,3
    b224:	10bf0044 	addi	r2,r2,-1023
    b228:	88e2b03a 	or	r17,r17,r3
    b22c:	000b883a 	mov	r5,zero
    b230:	9085883a 	add	r2,r18,r2
    b234:	2cc8b03a 	or	r4,r5,r19
    b238:	00c003c4 	movi	r3,15
    b23c:	bdacf03a 	xor	r22,r23,r22
    b240:	12c00044 	addi	r11,r2,1
    b244:	19009936 	bltu	r3,r4,b4ac <__muldf3+0x340>
    b248:	200890ba 	slli	r4,r4,2
    b24c:	00c00074 	movhi	r3,1
    b250:	18ec9804 	addi	r3,r3,-19872
    b254:	20c9883a 	add	r4,r4,r3
    b258:	20c00017 	ldw	r3,0(r4)
    b25c:	1800683a 	jmp	r3
    b260:	0000b4ac 	andhi	zero,zero,722
    b264:	0000b2c0 	call	b2c <_ZN4Game6updateEi+0x1f4>
    b268:	0000b2c0 	call	b2c <_ZN4Game6updateEi+0x1f4>
    b26c:	0000b2bc 	xorhi	zero,zero,714
    b270:	0000b488 	cmpgei	zero,zero,722
    b274:	0000b488 	cmpgei	zero,zero,722
    b278:	0000b470 	cmpltui	zero,zero,721
    b27c:	0000b2bc 	xorhi	zero,zero,714
    b280:	0000b488 	cmpgei	zero,zero,722
    b284:	0000b470 	cmpltui	zero,zero,721
    b288:	0000b488 	cmpgei	zero,zero,722
    b28c:	0000b2bc 	xorhi	zero,zero,714
    b290:	0000b498 	cmpnei	zero,zero,722
    b294:	0000b498 	cmpnei	zero,zero,722
    b298:	0000b498 	cmpnei	zero,zero,722
    b29c:	0000b6b4 	movhi	zero,730
    b2a0:	2404b03a 	or	r2,r4,r16
    b2a4:	10006f1e 	bne	r2,zero,b464 <__muldf3+0x2f8>
    b2a8:	04c00204 	movi	r19,8
    b2ac:	0021883a 	mov	r16,zero
    b2b0:	0029883a 	mov	r20,zero
    b2b4:	07000084 	movi	fp,2
    b2b8:	003fcb06 	br	b1e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b1e8>
    b2bc:	502d883a 	mov	r22,r10
    b2c0:	00800084 	movi	r2,2
    b2c4:	28805726 	beq	r5,r2,b424 <__muldf3+0x2b8>
    b2c8:	008000c4 	movi	r2,3
    b2cc:	28816626 	beq	r5,r2,b868 <__muldf3+0x6fc>
    b2d0:	00800044 	movi	r2,1
    b2d4:	2881411e 	bne	r5,r2,b7dc <__muldf3+0x670>
    b2d8:	b02b883a 	mov	r21,r22
    b2dc:	0005883a 	mov	r2,zero
    b2e0:	000b883a 	mov	r5,zero
    b2e4:	0029883a 	mov	r20,zero
    b2e8:	1004953a 	slli	r2,r2,20
    b2ec:	a8c03fcc 	andi	r3,r21,255
    b2f0:	04400434 	movhi	r17,16
    b2f4:	8c7fffc4 	addi	r17,r17,-1
    b2f8:	180697fa 	slli	r3,r3,31
    b2fc:	2c4a703a 	and	r5,r5,r17
    b300:	288ab03a 	or	r5,r5,r2
    b304:	28c6b03a 	or	r3,r5,r3
    b308:	a005883a 	mov	r2,r20
    b30c:	dfc00c17 	ldw	ra,48(sp)
    b310:	df000b17 	ldw	fp,44(sp)
    b314:	ddc00a17 	ldw	r23,40(sp)
    b318:	dd800917 	ldw	r22,36(sp)
    b31c:	dd400817 	ldw	r21,32(sp)
    b320:	dd000717 	ldw	r20,28(sp)
    b324:	dcc00617 	ldw	r19,24(sp)
    b328:	dc800517 	ldw	r18,20(sp)
    b32c:	dc400417 	ldw	r17,16(sp)
    b330:	dc000317 	ldw	r16,12(sp)
    b334:	dec00d04 	addi	sp,sp,52
    b338:	f800283a 	ret
    b33c:	2404b03a 	or	r2,r4,r16
    b340:	2027883a 	mov	r19,r4
    b344:	10004226 	beq	r2,zero,b450 <__muldf3+0x2e4>
    b348:	8000fc26 	beq	r16,zero,b73c <__muldf3+0x5d0>
    b34c:	8009883a 	mov	r4,r16
    b350:	d9800215 	stw	r6,8(sp)
    b354:	d9c00015 	stw	r7,0(sp)
    b358:	da400115 	stw	r9,4(sp)
    b35c:	000c90c0 	call	c90c <__clzsi2>
    b360:	d9800217 	ldw	r6,8(sp)
    b364:	d9c00017 	ldw	r7,0(sp)
    b368:	da400117 	ldw	r9,4(sp)
    b36c:	113ffd44 	addi	r4,r2,-11
    b370:	00c00704 	movi	r3,28
    b374:	1900ed16 	blt	r3,r4,b72c <__muldf3+0x5c0>
    b378:	00c00744 	movi	r3,29
    b37c:	147ffe04 	addi	r17,r2,-8
    b380:	1907c83a 	sub	r3,r3,r4
    b384:	8460983a 	sll	r16,r16,r17
    b388:	98c6d83a 	srl	r3,r19,r3
    b38c:	9c68983a 	sll	r20,r19,r17
    b390:	1c20b03a 	or	r16,r3,r16
    b394:	1080fcc4 	addi	r2,r2,1011
    b398:	00a5c83a 	sub	r18,zero,r2
    b39c:	0027883a 	mov	r19,zero
    b3a0:	0039883a 	mov	fp,zero
    b3a4:	003f9006 	br	b1e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b1e8>
    b3a8:	3446b03a 	or	r3,r6,r17
    b3ac:	1800261e 	bne	r3,zero,b448 <__muldf3+0x2dc>
    b3b0:	0023883a 	mov	r17,zero
    b3b4:	0011883a 	mov	r8,zero
    b3b8:	01400084 	movi	r5,2
    b3bc:	003f9c06 	br	b230 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b230>
    b3c0:	3446b03a 	or	r3,r6,r17
    b3c4:	18001c26 	beq	r3,zero,b438 <__muldf3+0x2cc>
    b3c8:	8800ce26 	beq	r17,zero,b704 <__muldf3+0x598>
    b3cc:	8809883a 	mov	r4,r17
    b3d0:	d9800215 	stw	r6,8(sp)
    b3d4:	da400115 	stw	r9,4(sp)
    b3d8:	da800015 	stw	r10,0(sp)
    b3dc:	000c90c0 	call	c90c <__clzsi2>
    b3e0:	d9800217 	ldw	r6,8(sp)
    b3e4:	da400117 	ldw	r9,4(sp)
    b3e8:	da800017 	ldw	r10,0(sp)
    b3ec:	113ffd44 	addi	r4,r2,-11
    b3f0:	00c00704 	movi	r3,28
    b3f4:	1900bf16 	blt	r3,r4,b6f4 <__muldf3+0x588>
    b3f8:	00c00744 	movi	r3,29
    b3fc:	123ffe04 	addi	r8,r2,-8
    b400:	1907c83a 	sub	r3,r3,r4
    b404:	8a22983a 	sll	r17,r17,r8
    b408:	30c6d83a 	srl	r3,r6,r3
    b40c:	3210983a 	sll	r8,r6,r8
    b410:	1c62b03a 	or	r17,r3,r17
    b414:	1080fcc4 	addi	r2,r2,1011
    b418:	0085c83a 	sub	r2,zero,r2
    b41c:	000b883a 	mov	r5,zero
    b420:	003f8306 	br	b230 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b230>
    b424:	b02b883a 	mov	r21,r22
    b428:	0081ffc4 	movi	r2,2047
    b42c:	000b883a 	mov	r5,zero
    b430:	0029883a 	mov	r20,zero
    b434:	003fac06 	br	b2e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2e8>
    b438:	0023883a 	mov	r17,zero
    b43c:	0011883a 	mov	r8,zero
    b440:	01400044 	movi	r5,1
    b444:	003f7a06 	br	b230 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b230>
    b448:	014000c4 	movi	r5,3
    b44c:	003f7806 	br	b230 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b230>
    b450:	04c00104 	movi	r19,4
    b454:	0021883a 	mov	r16,zero
    b458:	0029883a 	mov	r20,zero
    b45c:	07000044 	movi	fp,1
    b460:	003f6106 	br	b1e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b1e8>
    b464:	04c00304 	movi	r19,12
    b468:	070000c4 	movi	fp,3
    b46c:	003f5e06 	br	b1e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b1e8>
    b470:	01400434 	movhi	r5,16
    b474:	002b883a 	mov	r21,zero
    b478:	297fffc4 	addi	r5,r5,-1
    b47c:	053fffc4 	movi	r20,-1
    b480:	0081ffc4 	movi	r2,2047
    b484:	003f9806 	br	b2e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2e8>
    b488:	8023883a 	mov	r17,r16
    b48c:	a011883a 	mov	r8,r20
    b490:	e00b883a 	mov	r5,fp
    b494:	003f8a06 	br	b2c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2c0>
    b498:	8023883a 	mov	r17,r16
    b49c:	a011883a 	mov	r8,r20
    b4a0:	482d883a 	mov	r22,r9
    b4a4:	e00b883a 	mov	r5,fp
    b4a8:	003f8506 	br	b2c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2c0>
    b4ac:	a00ad43a 	srli	r5,r20,16
    b4b0:	401ad43a 	srli	r13,r8,16
    b4b4:	a53fffcc 	andi	r20,r20,65535
    b4b8:	423fffcc 	andi	r8,r8,65535
    b4bc:	4519383a 	mul	r12,r8,r20
    b4c0:	4147383a 	mul	r3,r8,r5
    b4c4:	6d09383a 	mul	r4,r13,r20
    b4c8:	600cd43a 	srli	r6,r12,16
    b4cc:	2b5d383a 	mul	r14,r5,r13
    b4d0:	20c9883a 	add	r4,r4,r3
    b4d4:	310d883a 	add	r6,r6,r4
    b4d8:	30c0022e 	bgeu	r6,r3,b4e4 <__muldf3+0x378>
    b4dc:	00c00074 	movhi	r3,1
    b4e0:	70dd883a 	add	r14,r14,r3
    b4e4:	8826d43a 	srli	r19,r17,16
    b4e8:	8bffffcc 	andi	r15,r17,65535
    b4ec:	7d23383a 	mul	r17,r15,r20
    b4f0:	7949383a 	mul	r4,r15,r5
    b4f4:	9d29383a 	mul	r20,r19,r20
    b4f8:	8814d43a 	srli	r10,r17,16
    b4fc:	3012943a 	slli	r9,r6,16
    b500:	a129883a 	add	r20,r20,r4
    b504:	633fffcc 	andi	r12,r12,65535
    b508:	5515883a 	add	r10,r10,r20
    b50c:	3006d43a 	srli	r3,r6,16
    b510:	4b13883a 	add	r9,r9,r12
    b514:	2ccb383a 	mul	r5,r5,r19
    b518:	5100022e 	bgeu	r10,r4,b524 <__muldf3+0x3b8>
    b51c:	01000074 	movhi	r4,1
    b520:	290b883a 	add	r5,r5,r4
    b524:	802ad43a 	srli	r21,r16,16
    b528:	843fffcc 	andi	r16,r16,65535
    b52c:	440d383a 	mul	r6,r8,r16
    b530:	4565383a 	mul	r18,r8,r21
    b534:	8349383a 	mul	r4,r16,r13
    b538:	500e943a 	slli	r7,r10,16
    b53c:	3010d43a 	srli	r8,r6,16
    b540:	5028d43a 	srli	r20,r10,16
    b544:	2489883a 	add	r4,r4,r18
    b548:	8abfffcc 	andi	r10,r17,65535
    b54c:	3a95883a 	add	r10,r7,r10
    b550:	4119883a 	add	r12,r8,r4
    b554:	a169883a 	add	r20,r20,r5
    b558:	1a87883a 	add	r3,r3,r10
    b55c:	6d5b383a 	mul	r13,r13,r21
    b560:	6480022e 	bgeu	r12,r18,b56c <__muldf3+0x400>
    b564:	01000074 	movhi	r4,1
    b568:	691b883a 	add	r13,r13,r4
    b56c:	7c25383a 	mul	r18,r15,r16
    b570:	7d4b383a 	mul	r5,r15,r21
    b574:	84cf383a 	mul	r7,r16,r19
    b578:	901ed43a 	srli	r15,r18,16
    b57c:	6008d43a 	srli	r4,r12,16
    b580:	6010943a 	slli	r8,r12,16
    b584:	394f883a 	add	r7,r7,r5
    b588:	333fffcc 	andi	r12,r6,65535
    b58c:	79df883a 	add	r15,r15,r7
    b590:	235b883a 	add	r13,r4,r13
    b594:	9d63383a 	mul	r17,r19,r21
    b598:	4309883a 	add	r4,r8,r12
    b59c:	7940022e 	bgeu	r15,r5,b5a8 <__muldf3+0x43c>
    b5a0:	01400074 	movhi	r5,1
    b5a4:	8963883a 	add	r17,r17,r5
    b5a8:	780a943a 	slli	r5,r15,16
    b5ac:	91bfffcc 	andi	r6,r18,65535
    b5b0:	70c7883a 	add	r3,r14,r3
    b5b4:	298d883a 	add	r6,r5,r6
    b5b8:	1a8f803a 	cmpltu	r7,r3,r10
    b5bc:	350b883a 	add	r5,r6,r20
    b5c0:	20c7883a 	add	r3,r4,r3
    b5c4:	3955883a 	add	r10,r7,r5
    b5c8:	1909803a 	cmpltu	r4,r3,r4
    b5cc:	6a91883a 	add	r8,r13,r10
    b5d0:	780cd43a 	srli	r6,r15,16
    b5d4:	2219883a 	add	r12,r4,r8
    b5d8:	2d0b803a 	cmpltu	r5,r5,r20
    b5dc:	51cf803a 	cmpltu	r7,r10,r7
    b5e0:	29ceb03a 	or	r7,r5,r7
    b5e4:	4351803a 	cmpltu	r8,r8,r13
    b5e8:	610b803a 	cmpltu	r5,r12,r4
    b5ec:	4148b03a 	or	r4,r8,r5
    b5f0:	398f883a 	add	r7,r7,r6
    b5f4:	3909883a 	add	r4,r7,r4
    b5f8:	1810927a 	slli	r8,r3,9
    b5fc:	2449883a 	add	r4,r4,r17
    b600:	2008927a 	slli	r4,r4,9
    b604:	6022d5fa 	srli	r17,r12,23
    b608:	1806d5fa 	srli	r3,r3,23
    b60c:	4252b03a 	or	r9,r8,r9
    b610:	600a927a 	slli	r5,r12,9
    b614:	4810c03a 	cmpne	r8,r9,zero
    b618:	2462b03a 	or	r17,r4,r17
    b61c:	40c6b03a 	or	r3,r8,r3
    b620:	8900402c 	andhi	r4,r17,256
    b624:	1950b03a 	or	r8,r3,r5
    b628:	20000726 	beq	r4,zero,b648 <__muldf3+0x4dc>
    b62c:	4006d07a 	srli	r3,r8,1
    b630:	880497fa 	slli	r2,r17,31
    b634:	4200004c 	andi	r8,r8,1
    b638:	8822d07a 	srli	r17,r17,1
    b63c:	1a10b03a 	or	r8,r3,r8
    b640:	1210b03a 	or	r8,r2,r8
    b644:	5805883a 	mov	r2,r11
    b648:	1140ffc4 	addi	r5,r2,1023
    b64c:	0140440e 	bge	zero,r5,b760 <__muldf3+0x5f4>
    b650:	40c001cc 	andi	r3,r8,7
    b654:	18000726 	beq	r3,zero,b674 <__muldf3+0x508>
    b658:	40c003cc 	andi	r3,r8,15
    b65c:	01000104 	movi	r4,4
    b660:	19000426 	beq	r3,r4,b674 <__muldf3+0x508>
    b664:	4107883a 	add	r3,r8,r4
    b668:	1a11803a 	cmpltu	r8,r3,r8
    b66c:	8a23883a 	add	r17,r17,r8
    b670:	1811883a 	mov	r8,r3
    b674:	88c0402c 	andhi	r3,r17,256
    b678:	18000426 	beq	r3,zero,b68c <__muldf3+0x520>
    b67c:	11410004 	addi	r5,r2,1024
    b680:	00bfc034 	movhi	r2,65280
    b684:	10bfffc4 	addi	r2,r2,-1
    b688:	88a2703a 	and	r17,r17,r2
    b68c:	0081ff84 	movi	r2,2046
    b690:	117f6416 	blt	r2,r5,b424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b424>
    b694:	8828977a 	slli	r20,r17,29
    b698:	4010d0fa 	srli	r8,r8,3
    b69c:	8822927a 	slli	r17,r17,9
    b6a0:	2881ffcc 	andi	r2,r5,2047
    b6a4:	a228b03a 	or	r20,r20,r8
    b6a8:	880ad33a 	srli	r5,r17,12
    b6ac:	b02b883a 	mov	r21,r22
    b6b0:	003f0d06 	br	b2e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2e8>
    b6b4:	8080022c 	andhi	r2,r16,8
    b6b8:	10000926 	beq	r2,zero,b6e0 <__muldf3+0x574>
    b6bc:	8880022c 	andhi	r2,r17,8
    b6c0:	1000071e 	bne	r2,zero,b6e0 <__muldf3+0x574>
    b6c4:	00800434 	movhi	r2,16
    b6c8:	89400234 	orhi	r5,r17,8
    b6cc:	10bfffc4 	addi	r2,r2,-1
    b6d0:	b82b883a 	mov	r21,r23
    b6d4:	288a703a 	and	r5,r5,r2
    b6d8:	4029883a 	mov	r20,r8
    b6dc:	003f6806 	br	b480 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b480>
    b6e0:	00800434 	movhi	r2,16
    b6e4:	81400234 	orhi	r5,r16,8
    b6e8:	10bfffc4 	addi	r2,r2,-1
    b6ec:	288a703a 	and	r5,r5,r2
    b6f0:	003f6306 	br	b480 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b480>
    b6f4:	147ff604 	addi	r17,r2,-40
    b6f8:	3462983a 	sll	r17,r6,r17
    b6fc:	0011883a 	mov	r8,zero
    b700:	003f4406 	br	b414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b414>
    b704:	3009883a 	mov	r4,r6
    b708:	d9800215 	stw	r6,8(sp)
    b70c:	da400115 	stw	r9,4(sp)
    b710:	da800015 	stw	r10,0(sp)
    b714:	000c90c0 	call	c90c <__clzsi2>
    b718:	10800804 	addi	r2,r2,32
    b71c:	da800017 	ldw	r10,0(sp)
    b720:	da400117 	ldw	r9,4(sp)
    b724:	d9800217 	ldw	r6,8(sp)
    b728:	003f3006 	br	b3ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b3ec>
    b72c:	143ff604 	addi	r16,r2,-40
    b730:	9c20983a 	sll	r16,r19,r16
    b734:	0029883a 	mov	r20,zero
    b738:	003f1606 	br	b394 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b394>
    b73c:	d9800215 	stw	r6,8(sp)
    b740:	d9c00015 	stw	r7,0(sp)
    b744:	da400115 	stw	r9,4(sp)
    b748:	000c90c0 	call	c90c <__clzsi2>
    b74c:	10800804 	addi	r2,r2,32
    b750:	da400117 	ldw	r9,4(sp)
    b754:	d9c00017 	ldw	r7,0(sp)
    b758:	d9800217 	ldw	r6,8(sp)
    b75c:	003f0306 	br	b36c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b36c>
    b760:	00c00044 	movi	r3,1
    b764:	1947c83a 	sub	r3,r3,r5
    b768:	00800e04 	movi	r2,56
    b76c:	10feda16 	blt	r2,r3,b2d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2d8>
    b770:	008007c4 	movi	r2,31
    b774:	10c01b16 	blt	r2,r3,b7e4 <__muldf3+0x678>
    b778:	00800804 	movi	r2,32
    b77c:	10c5c83a 	sub	r2,r2,r3
    b780:	888a983a 	sll	r5,r17,r2
    b784:	40c8d83a 	srl	r4,r8,r3
    b788:	4084983a 	sll	r2,r8,r2
    b78c:	88e2d83a 	srl	r17,r17,r3
    b790:	2906b03a 	or	r3,r5,r4
    b794:	1004c03a 	cmpne	r2,r2,zero
    b798:	1886b03a 	or	r3,r3,r2
    b79c:	188001cc 	andi	r2,r3,7
    b7a0:	10000726 	beq	r2,zero,b7c0 <__muldf3+0x654>
    b7a4:	188003cc 	andi	r2,r3,15
    b7a8:	01000104 	movi	r4,4
    b7ac:	11000426 	beq	r2,r4,b7c0 <__muldf3+0x654>
    b7b0:	1805883a 	mov	r2,r3
    b7b4:	10c00104 	addi	r3,r2,4
    b7b8:	1885803a 	cmpltu	r2,r3,r2
    b7bc:	88a3883a 	add	r17,r17,r2
    b7c0:	8880202c 	andhi	r2,r17,128
    b7c4:	10001c26 	beq	r2,zero,b838 <__muldf3+0x6cc>
    b7c8:	b02b883a 	mov	r21,r22
    b7cc:	00800044 	movi	r2,1
    b7d0:	000b883a 	mov	r5,zero
    b7d4:	0029883a 	mov	r20,zero
    b7d8:	003ec306 	br	b2e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2e8>
    b7dc:	5805883a 	mov	r2,r11
    b7e0:	003f9906 	br	b648 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b648>
    b7e4:	00bff844 	movi	r2,-31
    b7e8:	1145c83a 	sub	r2,r2,r5
    b7ec:	8888d83a 	srl	r4,r17,r2
    b7f0:	00800804 	movi	r2,32
    b7f4:	18801a26 	beq	r3,r2,b860 <__muldf3+0x6f4>
    b7f8:	00801004 	movi	r2,64
    b7fc:	10c5c83a 	sub	r2,r2,r3
    b800:	8884983a 	sll	r2,r17,r2
    b804:	1204b03a 	or	r2,r2,r8
    b808:	1004c03a 	cmpne	r2,r2,zero
    b80c:	2084b03a 	or	r2,r4,r2
    b810:	144001cc 	andi	r17,r2,7
    b814:	88000d1e 	bne	r17,zero,b84c <__muldf3+0x6e0>
    b818:	000b883a 	mov	r5,zero
    b81c:	1028d0fa 	srli	r20,r2,3
    b820:	b02b883a 	mov	r21,r22
    b824:	0005883a 	mov	r2,zero
    b828:	a468b03a 	or	r20,r20,r17
    b82c:	003eae06 	br	b2e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2e8>
    b830:	1007883a 	mov	r3,r2
    b834:	0023883a 	mov	r17,zero
    b838:	880a927a 	slli	r5,r17,9
    b83c:	1805883a 	mov	r2,r3
    b840:	8822977a 	slli	r17,r17,29
    b844:	280ad33a 	srli	r5,r5,12
    b848:	003ff406 	br	b81c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b81c>
    b84c:	10c003cc 	andi	r3,r2,15
    b850:	01000104 	movi	r4,4
    b854:	193ff626 	beq	r3,r4,b830 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b830>
    b858:	0023883a 	mov	r17,zero
    b85c:	003fd506 	br	b7b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b7b4>
    b860:	0005883a 	mov	r2,zero
    b864:	003fe706 	br	b804 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b804>
    b868:	00800434 	movhi	r2,16
    b86c:	89400234 	orhi	r5,r17,8
    b870:	10bfffc4 	addi	r2,r2,-1
    b874:	b02b883a 	mov	r21,r22
    b878:	288a703a 	and	r5,r5,r2
    b87c:	4029883a 	mov	r20,r8
    b880:	003eff06 	br	b480 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b480>

0000b884 <__subdf3>:
    b884:	02000434 	movhi	r8,16
    b888:	423fffc4 	addi	r8,r8,-1
    b88c:	defffb04 	addi	sp,sp,-20
    b890:	2a14703a 	and	r10,r5,r8
    b894:	3812d53a 	srli	r9,r7,20
    b898:	3a10703a 	and	r8,r7,r8
    b89c:	2006d77a 	srli	r3,r4,29
    b8a0:	3004d77a 	srli	r2,r6,29
    b8a4:	dc000015 	stw	r16,0(sp)
    b8a8:	501490fa 	slli	r10,r10,3
    b8ac:	2820d53a 	srli	r16,r5,20
    b8b0:	401090fa 	slli	r8,r8,3
    b8b4:	dc800215 	stw	r18,8(sp)
    b8b8:	dc400115 	stw	r17,4(sp)
    b8bc:	dfc00415 	stw	ra,16(sp)
    b8c0:	202290fa 	slli	r17,r4,3
    b8c4:	dcc00315 	stw	r19,12(sp)
    b8c8:	4a41ffcc 	andi	r9,r9,2047
    b8cc:	0101ffc4 	movi	r4,2047
    b8d0:	2824d7fa 	srli	r18,r5,31
    b8d4:	8401ffcc 	andi	r16,r16,2047
    b8d8:	50c6b03a 	or	r3,r10,r3
    b8dc:	380ed7fa 	srli	r7,r7,31
    b8e0:	408ab03a 	or	r5,r8,r2
    b8e4:	300c90fa 	slli	r6,r6,3
    b8e8:	49009626 	beq	r9,r4,bb44 <__subdf3+0x2c0>
    b8ec:	39c0005c 	xori	r7,r7,1
    b8f0:	8245c83a 	sub	r2,r16,r9
    b8f4:	3c807426 	beq	r7,r18,bac8 <__subdf3+0x244>
    b8f8:	0080af0e 	bge	zero,r2,bbb8 <__subdf3+0x334>
    b8fc:	48002a1e 	bne	r9,zero,b9a8 <__subdf3+0x124>
    b900:	2988b03a 	or	r4,r5,r6
    b904:	20009a1e 	bne	r4,zero,bb70 <__subdf3+0x2ec>
    b908:	888001cc 	andi	r2,r17,7
    b90c:	10000726 	beq	r2,zero,b92c <__subdf3+0xa8>
    b910:	888003cc 	andi	r2,r17,15
    b914:	01000104 	movi	r4,4
    b918:	11000426 	beq	r2,r4,b92c <__subdf3+0xa8>
    b91c:	890b883a 	add	r5,r17,r4
    b920:	2c63803a 	cmpltu	r17,r5,r17
    b924:	1c47883a 	add	r3,r3,r17
    b928:	2823883a 	mov	r17,r5
    b92c:	1880202c 	andhi	r2,r3,128
    b930:	10005926 	beq	r2,zero,ba98 <__subdf3+0x214>
    b934:	84000044 	addi	r16,r16,1
    b938:	0081ffc4 	movi	r2,2047
    b93c:	8080be26 	beq	r16,r2,bc38 <__subdf3+0x3b4>
    b940:	017fe034 	movhi	r5,65408
    b944:	297fffc4 	addi	r5,r5,-1
    b948:	1946703a 	and	r3,r3,r5
    b94c:	1804977a 	slli	r2,r3,29
    b950:	1806927a 	slli	r3,r3,9
    b954:	8822d0fa 	srli	r17,r17,3
    b958:	8401ffcc 	andi	r16,r16,2047
    b95c:	180ad33a 	srli	r5,r3,12
    b960:	9100004c 	andi	r4,r18,1
    b964:	1444b03a 	or	r2,r2,r17
    b968:	80c1ffcc 	andi	r3,r16,2047
    b96c:	1820953a 	slli	r16,r3,20
    b970:	20c03fcc 	andi	r3,r4,255
    b974:	180897fa 	slli	r4,r3,31
    b978:	00c00434 	movhi	r3,16
    b97c:	18ffffc4 	addi	r3,r3,-1
    b980:	28c6703a 	and	r3,r5,r3
    b984:	1c06b03a 	or	r3,r3,r16
    b988:	1906b03a 	or	r3,r3,r4
    b98c:	dfc00417 	ldw	ra,16(sp)
    b990:	dcc00317 	ldw	r19,12(sp)
    b994:	dc800217 	ldw	r18,8(sp)
    b998:	dc400117 	ldw	r17,4(sp)
    b99c:	dc000017 	ldw	r16,0(sp)
    b9a0:	dec00504 	addi	sp,sp,20
    b9a4:	f800283a 	ret
    b9a8:	0101ffc4 	movi	r4,2047
    b9ac:	813fd626 	beq	r16,r4,b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    b9b0:	29402034 	orhi	r5,r5,128
    b9b4:	01000e04 	movi	r4,56
    b9b8:	2080a316 	blt	r4,r2,bc48 <__subdf3+0x3c4>
    b9bc:	010007c4 	movi	r4,31
    b9c0:	2080c616 	blt	r4,r2,bcdc <__subdf3+0x458>
    b9c4:	01000804 	movi	r4,32
    b9c8:	2089c83a 	sub	r4,r4,r2
    b9cc:	2910983a 	sll	r8,r5,r4
    b9d0:	308ed83a 	srl	r7,r6,r2
    b9d4:	3108983a 	sll	r4,r6,r4
    b9d8:	2884d83a 	srl	r2,r5,r2
    b9dc:	41ccb03a 	or	r6,r8,r7
    b9e0:	2008c03a 	cmpne	r4,r4,zero
    b9e4:	310cb03a 	or	r6,r6,r4
    b9e8:	898dc83a 	sub	r6,r17,r6
    b9ec:	89a3803a 	cmpltu	r17,r17,r6
    b9f0:	1887c83a 	sub	r3,r3,r2
    b9f4:	1c47c83a 	sub	r3,r3,r17
    b9f8:	3023883a 	mov	r17,r6
    b9fc:	1880202c 	andhi	r2,r3,128
    ba00:	10002326 	beq	r2,zero,ba90 <__subdf3+0x20c>
    ba04:	04c02034 	movhi	r19,128
    ba08:	9cffffc4 	addi	r19,r19,-1
    ba0c:	1ce6703a 	and	r19,r3,r19
    ba10:	98007a26 	beq	r19,zero,bbfc <__subdf3+0x378>
    ba14:	9809883a 	mov	r4,r19
    ba18:	000c90c0 	call	c90c <__clzsi2>
    ba1c:	113ffe04 	addi	r4,r2,-8
    ba20:	00c007c4 	movi	r3,31
    ba24:	19007b16 	blt	r3,r4,bc14 <__subdf3+0x390>
    ba28:	00800804 	movi	r2,32
    ba2c:	1105c83a 	sub	r2,r2,r4
    ba30:	8884d83a 	srl	r2,r17,r2
    ba34:	9906983a 	sll	r3,r19,r4
    ba38:	8922983a 	sll	r17,r17,r4
    ba3c:	10c4b03a 	or	r2,r2,r3
    ba40:	24007816 	blt	r4,r16,bc24 <__subdf3+0x3a0>
    ba44:	2421c83a 	sub	r16,r4,r16
    ba48:	80c00044 	addi	r3,r16,1
    ba4c:	010007c4 	movi	r4,31
    ba50:	20c09516 	blt	r4,r3,bca8 <__subdf3+0x424>
    ba54:	01400804 	movi	r5,32
    ba58:	28cbc83a 	sub	r5,r5,r3
    ba5c:	88c8d83a 	srl	r4,r17,r3
    ba60:	8962983a 	sll	r17,r17,r5
    ba64:	114a983a 	sll	r5,r2,r5
    ba68:	10c6d83a 	srl	r3,r2,r3
    ba6c:	8804c03a 	cmpne	r2,r17,zero
    ba70:	290ab03a 	or	r5,r5,r4
    ba74:	28a2b03a 	or	r17,r5,r2
    ba78:	0021883a 	mov	r16,zero
    ba7c:	003fa206 	br	b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    ba80:	2090b03a 	or	r8,r4,r2
    ba84:	40018e26 	beq	r8,zero,c0c0 <__subdf3+0x83c>
    ba88:	1007883a 	mov	r3,r2
    ba8c:	2023883a 	mov	r17,r4
    ba90:	888001cc 	andi	r2,r17,7
    ba94:	103f9e1e 	bne	r2,zero,b910 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b910>
    ba98:	1804977a 	slli	r2,r3,29
    ba9c:	8822d0fa 	srli	r17,r17,3
    baa0:	1810d0fa 	srli	r8,r3,3
    baa4:	9100004c 	andi	r4,r18,1
    baa8:	1444b03a 	or	r2,r2,r17
    baac:	00c1ffc4 	movi	r3,2047
    bab0:	80c02826 	beq	r16,r3,bb54 <__subdf3+0x2d0>
    bab4:	01400434 	movhi	r5,16
    bab8:	297fffc4 	addi	r5,r5,-1
    babc:	80e0703a 	and	r16,r16,r3
    bac0:	414a703a 	and	r5,r8,r5
    bac4:	003fa806 	br	b968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b968>
    bac8:	0080630e 	bge	zero,r2,bc58 <__subdf3+0x3d4>
    bacc:	48003026 	beq	r9,zero,bb90 <__subdf3+0x30c>
    bad0:	0101ffc4 	movi	r4,2047
    bad4:	813f8c26 	beq	r16,r4,b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    bad8:	29402034 	orhi	r5,r5,128
    badc:	01000e04 	movi	r4,56
    bae0:	2080a90e 	bge	r4,r2,bd88 <__subdf3+0x504>
    bae4:	298cb03a 	or	r6,r5,r6
    bae8:	3012c03a 	cmpne	r9,r6,zero
    baec:	0005883a 	mov	r2,zero
    baf0:	4c53883a 	add	r9,r9,r17
    baf4:	4c63803a 	cmpltu	r17,r9,r17
    baf8:	10c7883a 	add	r3,r2,r3
    bafc:	88c7883a 	add	r3,r17,r3
    bb00:	4823883a 	mov	r17,r9
    bb04:	1880202c 	andhi	r2,r3,128
    bb08:	1000d026 	beq	r2,zero,be4c <__subdf3+0x5c8>
    bb0c:	84000044 	addi	r16,r16,1
    bb10:	0081ffc4 	movi	r2,2047
    bb14:	8080fe26 	beq	r16,r2,bf10 <__subdf3+0x68c>
    bb18:	00bfe034 	movhi	r2,65408
    bb1c:	10bfffc4 	addi	r2,r2,-1
    bb20:	1886703a 	and	r3,r3,r2
    bb24:	880ad07a 	srli	r5,r17,1
    bb28:	180497fa 	slli	r2,r3,31
    bb2c:	8900004c 	andi	r4,r17,1
    bb30:	2922b03a 	or	r17,r5,r4
    bb34:	1806d07a 	srli	r3,r3,1
    bb38:	1462b03a 	or	r17,r2,r17
    bb3c:	3825883a 	mov	r18,r7
    bb40:	003f7106 	br	b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    bb44:	2984b03a 	or	r2,r5,r6
    bb48:	103f6826 	beq	r2,zero,b8ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b8ec>
    bb4c:	39c03fcc 	andi	r7,r7,255
    bb50:	003f6706 	br	b8f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b8f0>
    bb54:	4086b03a 	or	r3,r8,r2
    bb58:	18015226 	beq	r3,zero,c0a4 <__subdf3+0x820>
    bb5c:	00c00434 	movhi	r3,16
    bb60:	41400234 	orhi	r5,r8,8
    bb64:	18ffffc4 	addi	r3,r3,-1
    bb68:	28ca703a 	and	r5,r5,r3
    bb6c:	003f7e06 	br	b968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b968>
    bb70:	10bfffc4 	addi	r2,r2,-1
    bb74:	1000491e 	bne	r2,zero,bc9c <__subdf3+0x418>
    bb78:	898fc83a 	sub	r7,r17,r6
    bb7c:	89e3803a 	cmpltu	r17,r17,r7
    bb80:	1947c83a 	sub	r3,r3,r5
    bb84:	1c47c83a 	sub	r3,r3,r17
    bb88:	3823883a 	mov	r17,r7
    bb8c:	003f9b06 	br	b9fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b9fc>
    bb90:	2988b03a 	or	r4,r5,r6
    bb94:	203f5c26 	beq	r4,zero,b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    bb98:	10bfffc4 	addi	r2,r2,-1
    bb9c:	1000931e 	bne	r2,zero,bdec <__subdf3+0x568>
    bba0:	898d883a 	add	r6,r17,r6
    bba4:	3463803a 	cmpltu	r17,r6,r17
    bba8:	1947883a 	add	r3,r3,r5
    bbac:	88c7883a 	add	r3,r17,r3
    bbb0:	3023883a 	mov	r17,r6
    bbb4:	003fd306 	br	bb04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bb04>
    bbb8:	1000541e 	bne	r2,zero,bd0c <__subdf3+0x488>
    bbbc:	80800044 	addi	r2,r16,1
    bbc0:	1081ffcc 	andi	r2,r2,2047
    bbc4:	01000044 	movi	r4,1
    bbc8:	2080a20e 	bge	r4,r2,be54 <__subdf3+0x5d0>
    bbcc:	8989c83a 	sub	r4,r17,r6
    bbd0:	8905803a 	cmpltu	r2,r17,r4
    bbd4:	1967c83a 	sub	r19,r3,r5
    bbd8:	98a7c83a 	sub	r19,r19,r2
    bbdc:	9880202c 	andhi	r2,r19,128
    bbe0:	10006326 	beq	r2,zero,bd70 <__subdf3+0x4ec>
    bbe4:	3463c83a 	sub	r17,r6,r17
    bbe8:	28c7c83a 	sub	r3,r5,r3
    bbec:	344d803a 	cmpltu	r6,r6,r17
    bbf0:	19a7c83a 	sub	r19,r3,r6
    bbf4:	3825883a 	mov	r18,r7
    bbf8:	983f861e 	bne	r19,zero,ba14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ba14>
    bbfc:	8809883a 	mov	r4,r17
    bc00:	000c90c0 	call	c90c <__clzsi2>
    bc04:	10800804 	addi	r2,r2,32
    bc08:	113ffe04 	addi	r4,r2,-8
    bc0c:	00c007c4 	movi	r3,31
    bc10:	193f850e 	bge	r3,r4,ba28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ba28>
    bc14:	10bff604 	addi	r2,r2,-40
    bc18:	8884983a 	sll	r2,r17,r2
    bc1c:	0023883a 	mov	r17,zero
    bc20:	243f880e 	bge	r4,r16,ba44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ba44>
    bc24:	00ffe034 	movhi	r3,65408
    bc28:	18ffffc4 	addi	r3,r3,-1
    bc2c:	8121c83a 	sub	r16,r16,r4
    bc30:	10c6703a 	and	r3,r2,r3
    bc34:	003f3406 	br	b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    bc38:	9100004c 	andi	r4,r18,1
    bc3c:	000b883a 	mov	r5,zero
    bc40:	0005883a 	mov	r2,zero
    bc44:	003f4806 	br	b968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b968>
    bc48:	298cb03a 	or	r6,r5,r6
    bc4c:	300cc03a 	cmpne	r6,r6,zero
    bc50:	0005883a 	mov	r2,zero
    bc54:	003f6406 	br	b9e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b9e8>
    bc58:	10009a1e 	bne	r2,zero,bec4 <__subdf3+0x640>
    bc5c:	82400044 	addi	r9,r16,1
    bc60:	4881ffcc 	andi	r2,r9,2047
    bc64:	02800044 	movi	r10,1
    bc68:	5080670e 	bge	r10,r2,be08 <__subdf3+0x584>
    bc6c:	0081ffc4 	movi	r2,2047
    bc70:	4880af26 	beq	r9,r2,bf30 <__subdf3+0x6ac>
    bc74:	898d883a 	add	r6,r17,r6
    bc78:	1945883a 	add	r2,r3,r5
    bc7c:	3447803a 	cmpltu	r3,r6,r17
    bc80:	1887883a 	add	r3,r3,r2
    bc84:	182297fa 	slli	r17,r3,31
    bc88:	300cd07a 	srli	r6,r6,1
    bc8c:	1806d07a 	srli	r3,r3,1
    bc90:	4821883a 	mov	r16,r9
    bc94:	89a2b03a 	or	r17,r17,r6
    bc98:	003f1b06 	br	b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    bc9c:	0101ffc4 	movi	r4,2047
    bca0:	813f441e 	bne	r16,r4,b9b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b9b4>
    bca4:	003f1806 	br	b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    bca8:	843ff844 	addi	r16,r16,-31
    bcac:	01400804 	movi	r5,32
    bcb0:	1408d83a 	srl	r4,r2,r16
    bcb4:	19405026 	beq	r3,r5,bdf8 <__subdf3+0x574>
    bcb8:	01401004 	movi	r5,64
    bcbc:	28c7c83a 	sub	r3,r5,r3
    bcc0:	10c4983a 	sll	r2,r2,r3
    bcc4:	88a2b03a 	or	r17,r17,r2
    bcc8:	8822c03a 	cmpne	r17,r17,zero
    bccc:	2462b03a 	or	r17,r4,r17
    bcd0:	0007883a 	mov	r3,zero
    bcd4:	0021883a 	mov	r16,zero
    bcd8:	003f6d06 	br	ba90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ba90>
    bcdc:	11fff804 	addi	r7,r2,-32
    bce0:	01000804 	movi	r4,32
    bce4:	29ced83a 	srl	r7,r5,r7
    bce8:	11004526 	beq	r2,r4,be00 <__subdf3+0x57c>
    bcec:	01001004 	movi	r4,64
    bcf0:	2089c83a 	sub	r4,r4,r2
    bcf4:	2904983a 	sll	r2,r5,r4
    bcf8:	118cb03a 	or	r6,r2,r6
    bcfc:	300cc03a 	cmpne	r6,r6,zero
    bd00:	398cb03a 	or	r6,r7,r6
    bd04:	0005883a 	mov	r2,zero
    bd08:	003f3706 	br	b9e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b9e8>
    bd0c:	80002a26 	beq	r16,zero,bdb8 <__subdf3+0x534>
    bd10:	0101ffc4 	movi	r4,2047
    bd14:	49006626 	beq	r9,r4,beb0 <__subdf3+0x62c>
    bd18:	0085c83a 	sub	r2,zero,r2
    bd1c:	18c02034 	orhi	r3,r3,128
    bd20:	01000e04 	movi	r4,56
    bd24:	20807e16 	blt	r4,r2,bf20 <__subdf3+0x69c>
    bd28:	010007c4 	movi	r4,31
    bd2c:	2080e716 	blt	r4,r2,c0cc <__subdf3+0x848>
    bd30:	01000804 	movi	r4,32
    bd34:	2089c83a 	sub	r4,r4,r2
    bd38:	1914983a 	sll	r10,r3,r4
    bd3c:	8890d83a 	srl	r8,r17,r2
    bd40:	8908983a 	sll	r4,r17,r4
    bd44:	1884d83a 	srl	r2,r3,r2
    bd48:	5222b03a 	or	r17,r10,r8
    bd4c:	2006c03a 	cmpne	r3,r4,zero
    bd50:	88e2b03a 	or	r17,r17,r3
    bd54:	3463c83a 	sub	r17,r6,r17
    bd58:	2885c83a 	sub	r2,r5,r2
    bd5c:	344d803a 	cmpltu	r6,r6,r17
    bd60:	1187c83a 	sub	r3,r2,r6
    bd64:	4821883a 	mov	r16,r9
    bd68:	3825883a 	mov	r18,r7
    bd6c:	003f2306 	br	b9fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b9fc>
    bd70:	24d0b03a 	or	r8,r4,r19
    bd74:	40001b1e 	bne	r8,zero,bde4 <__subdf3+0x560>
    bd78:	0005883a 	mov	r2,zero
    bd7c:	0009883a 	mov	r4,zero
    bd80:	0021883a 	mov	r16,zero
    bd84:	003f4906 	br	baac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700baac>
    bd88:	010007c4 	movi	r4,31
    bd8c:	20803a16 	blt	r4,r2,be78 <__subdf3+0x5f4>
    bd90:	01000804 	movi	r4,32
    bd94:	2089c83a 	sub	r4,r4,r2
    bd98:	2912983a 	sll	r9,r5,r4
    bd9c:	3090d83a 	srl	r8,r6,r2
    bda0:	3108983a 	sll	r4,r6,r4
    bda4:	2884d83a 	srl	r2,r5,r2
    bda8:	4a12b03a 	or	r9,r9,r8
    bdac:	2008c03a 	cmpne	r4,r4,zero
    bdb0:	4912b03a 	or	r9,r9,r4
    bdb4:	003f4e06 	br	baf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700baf0>
    bdb8:	1c48b03a 	or	r4,r3,r17
    bdbc:	20003c26 	beq	r4,zero,beb0 <__subdf3+0x62c>
    bdc0:	0084303a 	nor	r2,zero,r2
    bdc4:	1000381e 	bne	r2,zero,bea8 <__subdf3+0x624>
    bdc8:	3463c83a 	sub	r17,r6,r17
    bdcc:	28c5c83a 	sub	r2,r5,r3
    bdd0:	344d803a 	cmpltu	r6,r6,r17
    bdd4:	1187c83a 	sub	r3,r2,r6
    bdd8:	4821883a 	mov	r16,r9
    bddc:	3825883a 	mov	r18,r7
    bde0:	003f0606 	br	b9fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b9fc>
    bde4:	2023883a 	mov	r17,r4
    bde8:	003f0906 	br	ba10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ba10>
    bdec:	0101ffc4 	movi	r4,2047
    bdf0:	813f3a1e 	bne	r16,r4,badc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700badc>
    bdf4:	003ec406 	br	b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    bdf8:	0005883a 	mov	r2,zero
    bdfc:	003fb106 	br	bcc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcc4>
    be00:	0005883a 	mov	r2,zero
    be04:	003fbc06 	br	bcf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcf8>
    be08:	1c44b03a 	or	r2,r3,r17
    be0c:	80008e1e 	bne	r16,zero,c048 <__subdf3+0x7c4>
    be10:	1000c826 	beq	r2,zero,c134 <__subdf3+0x8b0>
    be14:	2984b03a 	or	r2,r5,r6
    be18:	103ebb26 	beq	r2,zero,b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    be1c:	8989883a 	add	r4,r17,r6
    be20:	1945883a 	add	r2,r3,r5
    be24:	2447803a 	cmpltu	r3,r4,r17
    be28:	1887883a 	add	r3,r3,r2
    be2c:	1880202c 	andhi	r2,r3,128
    be30:	2023883a 	mov	r17,r4
    be34:	103f1626 	beq	r2,zero,ba90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ba90>
    be38:	00bfe034 	movhi	r2,65408
    be3c:	10bfffc4 	addi	r2,r2,-1
    be40:	5021883a 	mov	r16,r10
    be44:	1886703a 	and	r3,r3,r2
    be48:	003eaf06 	br	b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    be4c:	3825883a 	mov	r18,r7
    be50:	003f0f06 	br	ba90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ba90>
    be54:	1c44b03a 	or	r2,r3,r17
    be58:	8000251e 	bne	r16,zero,bef0 <__subdf3+0x66c>
    be5c:	1000661e 	bne	r2,zero,bff8 <__subdf3+0x774>
    be60:	2990b03a 	or	r8,r5,r6
    be64:	40009626 	beq	r8,zero,c0c0 <__subdf3+0x83c>
    be68:	2807883a 	mov	r3,r5
    be6c:	3023883a 	mov	r17,r6
    be70:	3825883a 	mov	r18,r7
    be74:	003ea406 	br	b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    be78:	127ff804 	addi	r9,r2,-32
    be7c:	01000804 	movi	r4,32
    be80:	2a52d83a 	srl	r9,r5,r9
    be84:	11008c26 	beq	r2,r4,c0b8 <__subdf3+0x834>
    be88:	01001004 	movi	r4,64
    be8c:	2085c83a 	sub	r2,r4,r2
    be90:	2884983a 	sll	r2,r5,r2
    be94:	118cb03a 	or	r6,r2,r6
    be98:	300cc03a 	cmpne	r6,r6,zero
    be9c:	4992b03a 	or	r9,r9,r6
    bea0:	0005883a 	mov	r2,zero
    bea4:	003f1206 	br	baf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700baf0>
    bea8:	0101ffc4 	movi	r4,2047
    beac:	493f9c1e 	bne	r9,r4,bd20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd20>
    beb0:	2807883a 	mov	r3,r5
    beb4:	3023883a 	mov	r17,r6
    beb8:	4821883a 	mov	r16,r9
    bebc:	3825883a 	mov	r18,r7
    bec0:	003e9106 	br	b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    bec4:	80001f1e 	bne	r16,zero,bf44 <__subdf3+0x6c0>
    bec8:	1c48b03a 	or	r4,r3,r17
    becc:	20005a26 	beq	r4,zero,c038 <__subdf3+0x7b4>
    bed0:	0084303a 	nor	r2,zero,r2
    bed4:	1000561e 	bne	r2,zero,c030 <__subdf3+0x7ac>
    bed8:	89a3883a 	add	r17,r17,r6
    bedc:	1945883a 	add	r2,r3,r5
    bee0:	898d803a 	cmpltu	r6,r17,r6
    bee4:	3087883a 	add	r3,r6,r2
    bee8:	4821883a 	mov	r16,r9
    beec:	003f0506 	br	bb04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bb04>
    bef0:	10002b1e 	bne	r2,zero,bfa0 <__subdf3+0x71c>
    bef4:	2984b03a 	or	r2,r5,r6
    bef8:	10008026 	beq	r2,zero,c0fc <__subdf3+0x878>
    befc:	2807883a 	mov	r3,r5
    bf00:	3023883a 	mov	r17,r6
    bf04:	3825883a 	mov	r18,r7
    bf08:	0401ffc4 	movi	r16,2047
    bf0c:	003e7e06 	br	b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    bf10:	3809883a 	mov	r4,r7
    bf14:	0011883a 	mov	r8,zero
    bf18:	0005883a 	mov	r2,zero
    bf1c:	003ee306 	br	baac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700baac>
    bf20:	1c62b03a 	or	r17,r3,r17
    bf24:	8822c03a 	cmpne	r17,r17,zero
    bf28:	0005883a 	mov	r2,zero
    bf2c:	003f8906 	br	bd54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd54>
    bf30:	3809883a 	mov	r4,r7
    bf34:	4821883a 	mov	r16,r9
    bf38:	0011883a 	mov	r8,zero
    bf3c:	0005883a 	mov	r2,zero
    bf40:	003eda06 	br	baac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700baac>
    bf44:	0101ffc4 	movi	r4,2047
    bf48:	49003b26 	beq	r9,r4,c038 <__subdf3+0x7b4>
    bf4c:	0085c83a 	sub	r2,zero,r2
    bf50:	18c02034 	orhi	r3,r3,128
    bf54:	01000e04 	movi	r4,56
    bf58:	20806e16 	blt	r4,r2,c114 <__subdf3+0x890>
    bf5c:	010007c4 	movi	r4,31
    bf60:	20807716 	blt	r4,r2,c140 <__subdf3+0x8bc>
    bf64:	01000804 	movi	r4,32
    bf68:	2089c83a 	sub	r4,r4,r2
    bf6c:	1914983a 	sll	r10,r3,r4
    bf70:	8890d83a 	srl	r8,r17,r2
    bf74:	8908983a 	sll	r4,r17,r4
    bf78:	1884d83a 	srl	r2,r3,r2
    bf7c:	5222b03a 	or	r17,r10,r8
    bf80:	2006c03a 	cmpne	r3,r4,zero
    bf84:	88e2b03a 	or	r17,r17,r3
    bf88:	89a3883a 	add	r17,r17,r6
    bf8c:	1145883a 	add	r2,r2,r5
    bf90:	898d803a 	cmpltu	r6,r17,r6
    bf94:	3087883a 	add	r3,r6,r2
    bf98:	4821883a 	mov	r16,r9
    bf9c:	003ed906 	br	bb04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bb04>
    bfa0:	2984b03a 	or	r2,r5,r6
    bfa4:	10004226 	beq	r2,zero,c0b0 <__subdf3+0x82c>
    bfa8:	1808d0fa 	srli	r4,r3,3
    bfac:	8822d0fa 	srli	r17,r17,3
    bfb0:	1806977a 	slli	r3,r3,29
    bfb4:	2080022c 	andhi	r2,r4,8
    bfb8:	1c62b03a 	or	r17,r3,r17
    bfbc:	10000826 	beq	r2,zero,bfe0 <__subdf3+0x75c>
    bfc0:	2812d0fa 	srli	r9,r5,3
    bfc4:	4880022c 	andhi	r2,r9,8
    bfc8:	1000051e 	bne	r2,zero,bfe0 <__subdf3+0x75c>
    bfcc:	300cd0fa 	srli	r6,r6,3
    bfd0:	2804977a 	slli	r2,r5,29
    bfd4:	4809883a 	mov	r4,r9
    bfd8:	3825883a 	mov	r18,r7
    bfdc:	11a2b03a 	or	r17,r2,r6
    bfe0:	8806d77a 	srli	r3,r17,29
    bfe4:	200890fa 	slli	r4,r4,3
    bfe8:	882290fa 	slli	r17,r17,3
    bfec:	0401ffc4 	movi	r16,2047
    bff0:	1906b03a 	or	r3,r3,r4
    bff4:	003e4406 	br	b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    bff8:	2984b03a 	or	r2,r5,r6
    bffc:	103e4226 	beq	r2,zero,b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    c000:	8989c83a 	sub	r4,r17,r6
    c004:	8911803a 	cmpltu	r8,r17,r4
    c008:	1945c83a 	sub	r2,r3,r5
    c00c:	1205c83a 	sub	r2,r2,r8
    c010:	1200202c 	andhi	r8,r2,128
    c014:	403e9a26 	beq	r8,zero,ba80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ba80>
    c018:	3463c83a 	sub	r17,r6,r17
    c01c:	28c5c83a 	sub	r2,r5,r3
    c020:	344d803a 	cmpltu	r6,r6,r17
    c024:	1187c83a 	sub	r3,r2,r6
    c028:	3825883a 	mov	r18,r7
    c02c:	003e3606 	br	b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    c030:	0101ffc4 	movi	r4,2047
    c034:	493fc71e 	bne	r9,r4,bf54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf54>
    c038:	2807883a 	mov	r3,r5
    c03c:	3023883a 	mov	r17,r6
    c040:	4821883a 	mov	r16,r9
    c044:	003e3006 	br	b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    c048:	10003626 	beq	r2,zero,c124 <__subdf3+0x8a0>
    c04c:	2984b03a 	or	r2,r5,r6
    c050:	10001726 	beq	r2,zero,c0b0 <__subdf3+0x82c>
    c054:	1808d0fa 	srli	r4,r3,3
    c058:	8822d0fa 	srli	r17,r17,3
    c05c:	1806977a 	slli	r3,r3,29
    c060:	2080022c 	andhi	r2,r4,8
    c064:	1c62b03a 	or	r17,r3,r17
    c068:	10000726 	beq	r2,zero,c088 <__subdf3+0x804>
    c06c:	2812d0fa 	srli	r9,r5,3
    c070:	4880022c 	andhi	r2,r9,8
    c074:	1000041e 	bne	r2,zero,c088 <__subdf3+0x804>
    c078:	300cd0fa 	srli	r6,r6,3
    c07c:	2804977a 	slli	r2,r5,29
    c080:	4809883a 	mov	r4,r9
    c084:	11a2b03a 	or	r17,r2,r6
    c088:	8806d77a 	srli	r3,r17,29
    c08c:	200890fa 	slli	r4,r4,3
    c090:	882290fa 	slli	r17,r17,3
    c094:	3825883a 	mov	r18,r7
    c098:	1906b03a 	or	r3,r3,r4
    c09c:	0401ffc4 	movi	r16,2047
    c0a0:	003e1906 	br	b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    c0a4:	000b883a 	mov	r5,zero
    c0a8:	0005883a 	mov	r2,zero
    c0ac:	003e2e06 	br	b968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b968>
    c0b0:	0401ffc4 	movi	r16,2047
    c0b4:	003e1406 	br	b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    c0b8:	0005883a 	mov	r2,zero
    c0bc:	003f7506 	br	be94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be94>
    c0c0:	0005883a 	mov	r2,zero
    c0c4:	0009883a 	mov	r4,zero
    c0c8:	003e7806 	br	baac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700baac>
    c0cc:	123ff804 	addi	r8,r2,-32
    c0d0:	01000804 	movi	r4,32
    c0d4:	1a10d83a 	srl	r8,r3,r8
    c0d8:	11002526 	beq	r2,r4,c170 <__subdf3+0x8ec>
    c0dc:	01001004 	movi	r4,64
    c0e0:	2085c83a 	sub	r2,r4,r2
    c0e4:	1884983a 	sll	r2,r3,r2
    c0e8:	1444b03a 	or	r2,r2,r17
    c0ec:	1004c03a 	cmpne	r2,r2,zero
    c0f0:	40a2b03a 	or	r17,r8,r2
    c0f4:	0005883a 	mov	r2,zero
    c0f8:	003f1606 	br	bd54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bd54>
    c0fc:	02000434 	movhi	r8,16
    c100:	0009883a 	mov	r4,zero
    c104:	423fffc4 	addi	r8,r8,-1
    c108:	00bfffc4 	movi	r2,-1
    c10c:	0401ffc4 	movi	r16,2047
    c110:	003e6606 	br	baac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700baac>
    c114:	1c62b03a 	or	r17,r3,r17
    c118:	8822c03a 	cmpne	r17,r17,zero
    c11c:	0005883a 	mov	r2,zero
    c120:	003f9906 	br	bf88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf88>
    c124:	2807883a 	mov	r3,r5
    c128:	3023883a 	mov	r17,r6
    c12c:	0401ffc4 	movi	r16,2047
    c130:	003df506 	br	b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    c134:	2807883a 	mov	r3,r5
    c138:	3023883a 	mov	r17,r6
    c13c:	003df206 	br	b908 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b908>
    c140:	123ff804 	addi	r8,r2,-32
    c144:	01000804 	movi	r4,32
    c148:	1a10d83a 	srl	r8,r3,r8
    c14c:	11000a26 	beq	r2,r4,c178 <__subdf3+0x8f4>
    c150:	01001004 	movi	r4,64
    c154:	2085c83a 	sub	r2,r4,r2
    c158:	1884983a 	sll	r2,r3,r2
    c15c:	1444b03a 	or	r2,r2,r17
    c160:	1004c03a 	cmpne	r2,r2,zero
    c164:	40a2b03a 	or	r17,r8,r2
    c168:	0005883a 	mov	r2,zero
    c16c:	003f8606 	br	bf88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf88>
    c170:	0005883a 	mov	r2,zero
    c174:	003fdc06 	br	c0e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c0e8>
    c178:	0005883a 	mov	r2,zero
    c17c:	003ff706 	br	c15c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c15c>

0000c180 <__fixdfsi>:
    c180:	280cd53a 	srli	r6,r5,20
    c184:	00c00434 	movhi	r3,16
    c188:	18ffffc4 	addi	r3,r3,-1
    c18c:	3181ffcc 	andi	r6,r6,2047
    c190:	01c0ff84 	movi	r7,1022
    c194:	28c6703a 	and	r3,r5,r3
    c198:	280ad7fa 	srli	r5,r5,31
    c19c:	3980120e 	bge	r7,r6,c1e8 <__fixdfsi+0x68>
    c1a0:	00810744 	movi	r2,1053
    c1a4:	11800c16 	blt	r2,r6,c1d8 <__fixdfsi+0x58>
    c1a8:	00810cc4 	movi	r2,1075
    c1ac:	1185c83a 	sub	r2,r2,r6
    c1b0:	01c007c4 	movi	r7,31
    c1b4:	18c00434 	orhi	r3,r3,16
    c1b8:	38800d16 	blt	r7,r2,c1f0 <__fixdfsi+0x70>
    c1bc:	31befb44 	addi	r6,r6,-1043
    c1c0:	2084d83a 	srl	r2,r4,r2
    c1c4:	1986983a 	sll	r3,r3,r6
    c1c8:	1884b03a 	or	r2,r3,r2
    c1cc:	28000726 	beq	r5,zero,c1ec <__fixdfsi+0x6c>
    c1d0:	0085c83a 	sub	r2,zero,r2
    c1d4:	f800283a 	ret
    c1d8:	00a00034 	movhi	r2,32768
    c1dc:	10bfffc4 	addi	r2,r2,-1
    c1e0:	2885883a 	add	r2,r5,r2
    c1e4:	f800283a 	ret
    c1e8:	0005883a 	mov	r2,zero
    c1ec:	f800283a 	ret
    c1f0:	008104c4 	movi	r2,1043
    c1f4:	1185c83a 	sub	r2,r2,r6
    c1f8:	1884d83a 	srl	r2,r3,r2
    c1fc:	003ff306 	br	c1cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c1cc>

0000c200 <__floatsidf>:
    c200:	defffd04 	addi	sp,sp,-12
    c204:	dfc00215 	stw	ra,8(sp)
    c208:	dc400115 	stw	r17,4(sp)
    c20c:	dc000015 	stw	r16,0(sp)
    c210:	20002b26 	beq	r4,zero,c2c0 <__floatsidf+0xc0>
    c214:	2023883a 	mov	r17,r4
    c218:	2020d7fa 	srli	r16,r4,31
    c21c:	20002d16 	blt	r4,zero,c2d4 <__floatsidf+0xd4>
    c220:	8809883a 	mov	r4,r17
    c224:	000c90c0 	call	c90c <__clzsi2>
    c228:	01410784 	movi	r5,1054
    c22c:	288bc83a 	sub	r5,r5,r2
    c230:	01010cc4 	movi	r4,1075
    c234:	2149c83a 	sub	r4,r4,r5
    c238:	00c007c4 	movi	r3,31
    c23c:	1900160e 	bge	r3,r4,c298 <__floatsidf+0x98>
    c240:	00c104c4 	movi	r3,1043
    c244:	1947c83a 	sub	r3,r3,r5
    c248:	88c6983a 	sll	r3,r17,r3
    c24c:	00800434 	movhi	r2,16
    c250:	10bfffc4 	addi	r2,r2,-1
    c254:	1886703a 	and	r3,r3,r2
    c258:	2941ffcc 	andi	r5,r5,2047
    c25c:	800d883a 	mov	r6,r16
    c260:	0005883a 	mov	r2,zero
    c264:	280a953a 	slli	r5,r5,20
    c268:	31803fcc 	andi	r6,r6,255
    c26c:	01000434 	movhi	r4,16
    c270:	300c97fa 	slli	r6,r6,31
    c274:	213fffc4 	addi	r4,r4,-1
    c278:	1906703a 	and	r3,r3,r4
    c27c:	1946b03a 	or	r3,r3,r5
    c280:	1986b03a 	or	r3,r3,r6
    c284:	dfc00217 	ldw	ra,8(sp)
    c288:	dc400117 	ldw	r17,4(sp)
    c28c:	dc000017 	ldw	r16,0(sp)
    c290:	dec00304 	addi	sp,sp,12
    c294:	f800283a 	ret
    c298:	00c002c4 	movi	r3,11
    c29c:	1887c83a 	sub	r3,r3,r2
    c2a0:	88c6d83a 	srl	r3,r17,r3
    c2a4:	8904983a 	sll	r2,r17,r4
    c2a8:	01000434 	movhi	r4,16
    c2ac:	213fffc4 	addi	r4,r4,-1
    c2b0:	2941ffcc 	andi	r5,r5,2047
    c2b4:	1906703a 	and	r3,r3,r4
    c2b8:	800d883a 	mov	r6,r16
    c2bc:	003fe906 	br	c264 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c264>
    c2c0:	000d883a 	mov	r6,zero
    c2c4:	000b883a 	mov	r5,zero
    c2c8:	0007883a 	mov	r3,zero
    c2cc:	0005883a 	mov	r2,zero
    c2d0:	003fe406 	br	c264 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c264>
    c2d4:	0123c83a 	sub	r17,zero,r4
    c2d8:	003fd106 	br	c220 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c220>

0000c2dc <__extendsfdf2>:
    c2dc:	200ad5fa 	srli	r5,r4,23
    c2e0:	defffd04 	addi	sp,sp,-12
    c2e4:	dc400115 	stw	r17,4(sp)
    c2e8:	29403fcc 	andi	r5,r5,255
    c2ec:	29800044 	addi	r6,r5,1
    c2f0:	04402034 	movhi	r17,128
    c2f4:	dc000015 	stw	r16,0(sp)
    c2f8:	8c7fffc4 	addi	r17,r17,-1
    c2fc:	dfc00215 	stw	ra,8(sp)
    c300:	31803fcc 	andi	r6,r6,255
    c304:	00800044 	movi	r2,1
    c308:	8922703a 	and	r17,r17,r4
    c30c:	2020d7fa 	srli	r16,r4,31
    c310:	1180110e 	bge	r2,r6,c358 <__extendsfdf2+0x7c>
    c314:	880cd0fa 	srli	r6,r17,3
    c318:	8822977a 	slli	r17,r17,29
    c31c:	2940e004 	addi	r5,r5,896
    c320:	2941ffcc 	andi	r5,r5,2047
    c324:	2804953a 	slli	r2,r5,20
    c328:	01400434 	movhi	r5,16
    c32c:	800697fa 	slli	r3,r16,31
    c330:	297fffc4 	addi	r5,r5,-1
    c334:	314a703a 	and	r5,r6,r5
    c338:	288ab03a 	or	r5,r5,r2
    c33c:	28c6b03a 	or	r3,r5,r3
    c340:	8805883a 	mov	r2,r17
    c344:	dfc00217 	ldw	ra,8(sp)
    c348:	dc400117 	ldw	r17,4(sp)
    c34c:	dc000017 	ldw	r16,0(sp)
    c350:	dec00304 	addi	sp,sp,12
    c354:	f800283a 	ret
    c358:	2800111e 	bne	r5,zero,c3a0 <__extendsfdf2+0xc4>
    c35c:	88001c26 	beq	r17,zero,c3d0 <__extendsfdf2+0xf4>
    c360:	8809883a 	mov	r4,r17
    c364:	000c90c0 	call	c90c <__clzsi2>
    c368:	00c00284 	movi	r3,10
    c36c:	18801b16 	blt	r3,r2,c3dc <__extendsfdf2+0x100>
    c370:	018002c4 	movi	r6,11
    c374:	308dc83a 	sub	r6,r6,r2
    c378:	11000544 	addi	r4,r2,21
    c37c:	8986d83a 	srl	r3,r17,r6
    c380:	8922983a 	sll	r17,r17,r4
    c384:	0180e244 	movi	r6,905
    c388:	01400434 	movhi	r5,16
    c38c:	3085c83a 	sub	r2,r6,r2
    c390:	297fffc4 	addi	r5,r5,-1
    c394:	194c703a 	and	r6,r3,r5
    c398:	1141ffcc 	andi	r5,r2,2047
    c39c:	003fe006 	br	c320 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c320>
    c3a0:	88000826 	beq	r17,zero,c3c4 <__extendsfdf2+0xe8>
    c3a4:	880cd0fa 	srli	r6,r17,3
    c3a8:	00800434 	movhi	r2,16
    c3ac:	10bfffc4 	addi	r2,r2,-1
    c3b0:	31800234 	orhi	r6,r6,8
    c3b4:	8822977a 	slli	r17,r17,29
    c3b8:	308c703a 	and	r6,r6,r2
    c3bc:	0141ffc4 	movi	r5,2047
    c3c0:	003fd706 	br	c320 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c320>
    c3c4:	0141ffc4 	movi	r5,2047
    c3c8:	000d883a 	mov	r6,zero
    c3cc:	003fd406 	br	c320 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c320>
    c3d0:	000b883a 	mov	r5,zero
    c3d4:	000d883a 	mov	r6,zero
    c3d8:	003fd106 	br	c320 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c320>
    c3dc:	11bffd44 	addi	r6,r2,-11
    c3e0:	8986983a 	sll	r3,r17,r6
    c3e4:	0023883a 	mov	r17,zero
    c3e8:	003fe606 	br	c384 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c384>

0000c3ec <_Unwind_ForcedUnwind_Phase2>:
    c3ec:	defff404 	addi	sp,sp,-48
    c3f0:	dd800915 	stw	r22,36(sp)
    c3f4:	058000f4 	movhi	r22,3
    c3f8:	ddc00a15 	stw	r23,40(sp)
    c3fc:	dd400815 	stw	r21,32(sp)
    c400:	dd000715 	stw	r20,28(sp)
    c404:	dcc00615 	stw	r19,24(sp)
    c408:	dc400415 	stw	r17,16(sp)
    c40c:	dc000315 	stw	r16,12(sp)
    c410:	dfc00b15 	stw	ra,44(sp)
    c414:	dc800515 	stw	r18,20(sp)
    c418:	2021883a 	mov	r16,r4
    c41c:	2823883a 	mov	r17,r5
    c420:	24c00317 	ldw	r19,12(r4)
    c424:	25000417 	ldw	r20,16(r4)
    c428:	28c00017 	ldw	r3,0(r5)
    c42c:	b5b1d704 	addi	r22,r22,-14500
    c430:	054001c4 	movi	r21,7
    c434:	05c00204 	movi	r23,8
    c438:	00001606 	br	c494 <_Unwind_ForcedUnwind_Phase2+0xa8>
    c43c:	81800017 	ldw	r6,0(r16)
    c440:	81c00117 	ldw	r7,4(r16)
    c444:	1c800617 	ldw	r18,24(r3)
    c448:	dd000215 	stw	r20,8(sp)
    c44c:	dc400115 	stw	r17,4(sp)
    c450:	dc000015 	stw	r16,0(sp)
    c454:	983ee83a 	callr	r19
    c458:	01400284 	movi	r5,10
    c45c:	01000044 	movi	r4,1
    c460:	1000241e 	bne	r2,zero,c4f4 <_Unwind_ForcedUnwind_Phase2+0x108>
    c464:	90000726 	beq	r18,zero,c484 <_Unwind_ForcedUnwind_Phase2+0x98>
    c468:	81800017 	ldw	r6,0(r16)
    c46c:	81c00117 	ldw	r7,4(r16)
    c470:	dc400115 	stw	r17,4(sp)
    c474:	dc000015 	stw	r16,0(sp)
    c478:	903ee83a 	callr	r18
    c47c:	15401f26 	beq	r2,r21,c4fc <_Unwind_ForcedUnwind_Phase2+0x110>
    c480:	15c01c1e 	bne	r2,r23,c4f4 <_Unwind_ForcedUnwind_Phase2+0x108>
    c484:	88800017 	ldw	r2,0(r17)
    c488:	10c00017 	ldw	r3,0(r2)
    c48c:	b0c00015 	stw	r3,0(r22)
    c490:	88c00015 	stw	r3,0(r17)
    c494:	01400284 	movi	r5,10
    c498:	01000044 	movi	r4,1
    c49c:	183fe71e 	bne	r3,zero,c43c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c43c>
    c4a0:	81800017 	ldw	r6,0(r16)
    c4a4:	81c00117 	ldw	r7,4(r16)
    c4a8:	01400684 	movi	r5,26
    c4ac:	dd000215 	stw	r20,8(sp)
    c4b0:	dc400115 	stw	r17,4(sp)
    c4b4:	dc000015 	stw	r16,0(sp)
    c4b8:	01000044 	movi	r4,1
    c4bc:	983ee83a 	callr	r19
    c4c0:	10000c1e 	bne	r2,zero,c4f4 <_Unwind_ForcedUnwind_Phase2+0x108>
    c4c4:	00800144 	movi	r2,5
    c4c8:	dfc00b17 	ldw	ra,44(sp)
    c4cc:	ddc00a17 	ldw	r23,40(sp)
    c4d0:	dd800917 	ldw	r22,36(sp)
    c4d4:	dd400817 	ldw	r21,32(sp)
    c4d8:	dd000717 	ldw	r20,28(sp)
    c4dc:	dcc00617 	ldw	r19,24(sp)
    c4e0:	dc800517 	ldw	r18,20(sp)
    c4e4:	dc400417 	ldw	r17,16(sp)
    c4e8:	dc000317 	ldw	r16,12(sp)
    c4ec:	dec00c04 	addi	sp,sp,48
    c4f0:	f800283a 	ret
    c4f4:	00800084 	movi	r2,2
    c4f8:	003ff306 	br	c4c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c4c8>
    c4fc:	a805883a 	mov	r2,r21
    c500:	003ff106 	br	c4c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c4c8>

0000c504 <_Unwind_RaiseException_Phase2>:
    c504:	28c00017 	ldw	r3,0(r5)
    c508:	defff804 	addi	sp,sp,-32
    c50c:	dcc00515 	stw	r19,20(sp)
    c510:	dc800415 	stw	r18,16(sp)
    c514:	dc400315 	stw	r17,12(sp)
    c518:	dc000215 	stw	r16,8(sp)
    c51c:	dfc00715 	stw	ra,28(sp)
    c520:	dd000615 	stw	r20,24(sp)
    c524:	2823883a 	mov	r17,r5
    c528:	2021883a 	mov	r16,r4
    c52c:	048001c4 	movi	r18,7
    c530:	04c00204 	movi	r19,8
    c534:	18001326 	beq	r3,zero,c584 <_Unwind_RaiseException_Phase2+0x80>
    c538:	81000417 	ldw	r4,16(r16)
    c53c:	1a000617 	ldw	r8,24(r3)
    c540:	19001926 	beq	r3,r4,c5a8 <_Unwind_RaiseException_Phase2+0xa4>
    c544:	40000c26 	beq	r8,zero,c578 <_Unwind_RaiseException_Phase2+0x74>
    c548:	01400084 	movi	r5,2
    c54c:	0029883a 	mov	r20,zero
    c550:	81800017 	ldw	r6,0(r16)
    c554:	81c00117 	ldw	r7,4(r16)
    c558:	01000044 	movi	r4,1
    c55c:	dc400115 	stw	r17,4(sp)
    c560:	dc000015 	stw	r16,0(sp)
    c564:	403ee83a 	callr	r8
    c568:	14801326 	beq	r2,r18,c5b8 <_Unwind_RaiseException_Phase2+0xb4>
    c56c:	14c0051e 	bne	r2,r19,c584 <_Unwind_RaiseException_Phase2+0x80>
    c570:	a000131e 	bne	r20,zero,c5c0 <_Unwind_RaiseException_Phase2+0xbc>
    c574:	88c00017 	ldw	r3,0(r17)
    c578:	18c00017 	ldw	r3,0(r3)
    c57c:	88c00015 	stw	r3,0(r17)
    c580:	183fed1e 	bne	r3,zero,c538 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c538>
    c584:	00800084 	movi	r2,2
    c588:	dfc00717 	ldw	ra,28(sp)
    c58c:	dd000617 	ldw	r20,24(sp)
    c590:	dcc00517 	ldw	r19,20(sp)
    c594:	dc800417 	ldw	r18,16(sp)
    c598:	dc400317 	ldw	r17,12(sp)
    c59c:	dc000217 	ldw	r16,8(sp)
    c5a0:	dec00804 	addi	sp,sp,32
    c5a4:	f800283a 	ret
    c5a8:	40000526 	beq	r8,zero,c5c0 <_Unwind_RaiseException_Phase2+0xbc>
    c5ac:	01400184 	movi	r5,6
    c5b0:	05000104 	movi	r20,4
    c5b4:	003fe606 	br	c550 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c550>
    c5b8:	9005883a 	mov	r2,r18
    c5bc:	003ff206 	br	c588 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c588>
    c5c0:	000cb240 	call	cb24 <abort>

0000c5c4 <uw_install_context.isra.1>:
    c5c4:	20c00017 	ldw	r3,0(r4)
    c5c8:	deffff04 	addi	sp,sp,-4
    c5cc:	014000f4 	movhi	r5,3
    c5d0:	19000917 	ldw	r4,36(r3)
    c5d4:	df000015 	stw	fp,0(sp)
    c5d8:	18800804 	addi	r2,r3,32
    c5dc:	d839883a 	mov	fp,sp
    c5e0:	2971d704 	addi	r5,r5,-14500
    c5e4:	28c00015 	stw	r3,0(r5)
    c5e8:	17000017 	ldw	fp,0(r2)
    c5ec:	1ec00a17 	ldw	sp,40(r3)
    c5f0:	2000683a 	jmp	r4

0000c5f4 <_Unwind_SjLj_Register>:
    c5f4:	008000f4 	movhi	r2,3
    c5f8:	10b1d704 	addi	r2,r2,-14500
    c5fc:	10c00017 	ldw	r3,0(r2)
    c600:	11000015 	stw	r4,0(r2)
    c604:	20c00015 	stw	r3,0(r4)
    c608:	f800283a 	ret

0000c60c <_Unwind_SjLj_Unregister>:
    c60c:	20c00017 	ldw	r3,0(r4)
    c610:	008000f4 	movhi	r2,3
    c614:	10b1d704 	addi	r2,r2,-14500
    c618:	10c00015 	stw	r3,0(r2)
    c61c:	f800283a 	ret

0000c620 <_Unwind_GetGR>:
    c620:	20800017 	ldw	r2,0(r4)
    c624:	29400084 	addi	r5,r5,2
    c628:	294b883a 	add	r5,r5,r5
    c62c:	294b883a 	add	r5,r5,r5
    c630:	114b883a 	add	r5,r2,r5
    c634:	28800017 	ldw	r2,0(r5)
    c638:	f800283a 	ret

0000c63c <_Unwind_GetCFA>:
    c63c:	20800017 	ldw	r2,0(r4)
    c640:	10000226 	beq	r2,zero,c64c <_Unwind_GetCFA+0x10>
    c644:	10800a17 	ldw	r2,40(r2)
    c648:	f800283a 	ret
    c64c:	0005883a 	mov	r2,zero
    c650:	f800283a 	ret

0000c654 <_Unwind_SetGR>:
    c654:	20800017 	ldw	r2,0(r4)
    c658:	29400084 	addi	r5,r5,2
    c65c:	294b883a 	add	r5,r5,r5
    c660:	294b883a 	add	r5,r5,r5
    c664:	114b883a 	add	r5,r2,r5
    c668:	29800015 	stw	r6,0(r5)
    c66c:	f800283a 	ret

0000c670 <_Unwind_GetIP>:
    c670:	20800017 	ldw	r2,0(r4)
    c674:	10800117 	ldw	r2,4(r2)
    c678:	10800044 	addi	r2,r2,1
    c67c:	f800283a 	ret

0000c680 <_Unwind_GetIPInfo>:
    c680:	20800017 	ldw	r2,0(r4)
    c684:	28000015 	stw	zero,0(r5)
    c688:	10000326 	beq	r2,zero,c698 <_Unwind_GetIPInfo+0x18>
    c68c:	10800117 	ldw	r2,4(r2)
    c690:	10800044 	addi	r2,r2,1
    c694:	f800283a 	ret
    c698:	0005883a 	mov	r2,zero
    c69c:	f800283a 	ret

0000c6a0 <_Unwind_SetIP>:
    c6a0:	20800017 	ldw	r2,0(r4)
    c6a4:	297fffc4 	addi	r5,r5,-1
    c6a8:	11400115 	stw	r5,4(r2)
    c6ac:	f800283a 	ret

0000c6b0 <_Unwind_GetLanguageSpecificData>:
    c6b0:	20800017 	ldw	r2,0(r4)
    c6b4:	10800717 	ldw	r2,28(r2)
    c6b8:	f800283a 	ret

0000c6bc <_Unwind_GetRegionStart>:
    c6bc:	0005883a 	mov	r2,zero
    c6c0:	f800283a 	ret

0000c6c4 <_Unwind_FindEnclosingFunction>:
    c6c4:	0005883a 	mov	r2,zero
    c6c8:	f800283a 	ret

0000c6cc <_Unwind_GetDataRelBase>:
    c6cc:	0005883a 	mov	r2,zero
    c6d0:	f800283a 	ret

0000c6d4 <_Unwind_GetTextRelBase>:
    c6d4:	0005883a 	mov	r2,zero
    c6d8:	f800283a 	ret

0000c6dc <_Unwind_SjLj_RaiseException>:
    c6dc:	008000f4 	movhi	r2,3
    c6e0:	defff804 	addi	sp,sp,-32
    c6e4:	10b1d704 	addi	r2,r2,-14500
    c6e8:	dc800515 	stw	r18,20(sp)
    c6ec:	14800017 	ldw	r18,0(r2)
    c6f0:	dfc00715 	stw	ra,28(sp)
    c6f4:	dcc00615 	stw	r19,24(sp)
    c6f8:	dc400415 	stw	r17,16(sp)
    c6fc:	dc000315 	stw	r16,12(sp)
    c700:	dc800215 	stw	r18,8(sp)
    c704:	90001426 	beq	r18,zero,c758 <_Unwind_SjLj_RaiseException+0x7c>
    c708:	2021883a 	mov	r16,r4
    c70c:	9005883a 	mov	r2,r18
    c710:	04400184 	movi	r17,6
    c714:	04c00204 	movi	r19,8
    c718:	10800617 	ldw	r2,24(r2)
    c71c:	10000a26 	beq	r2,zero,c748 <_Unwind_SjLj_RaiseException+0x6c>
    c720:	81800017 	ldw	r6,0(r16)
    c724:	81c00117 	ldw	r7,4(r16)
    c728:	01400044 	movi	r5,1
    c72c:	d8c00204 	addi	r3,sp,8
    c730:	d8c00115 	stw	r3,4(sp)
    c734:	dc000015 	stw	r16,0(sp)
    c738:	2809883a 	mov	r4,r5
    c73c:	103ee83a 	callr	r2
    c740:	14400d26 	beq	r2,r17,c778 <_Unwind_SjLj_RaiseException+0x9c>
    c744:	14c0171e 	bne	r2,r19,c7a4 <_Unwind_SjLj_RaiseException+0xc8>
    c748:	d8800217 	ldw	r2,8(sp)
    c74c:	10800017 	ldw	r2,0(r2)
    c750:	d8800215 	stw	r2,8(sp)
    c754:	103ff01e 	bne	r2,zero,c718 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c718>
    c758:	00800144 	movi	r2,5
    c75c:	dfc00717 	ldw	ra,28(sp)
    c760:	dcc00617 	ldw	r19,24(sp)
    c764:	dc800517 	ldw	r18,20(sp)
    c768:	dc400417 	ldw	r17,16(sp)
    c76c:	dc000317 	ldw	r16,12(sp)
    c770:	dec00804 	addi	sp,sp,32
    c774:	f800283a 	ret
    c778:	d8800217 	ldw	r2,8(sp)
    c77c:	80000315 	stw	zero,12(r16)
    c780:	d9400204 	addi	r5,sp,8
    c784:	80800415 	stw	r2,16(r16)
    c788:	8009883a 	mov	r4,r16
    c78c:	dc800215 	stw	r18,8(sp)
    c790:	000c5040 	call	c504 <_Unwind_RaiseException_Phase2>
    c794:	00c001c4 	movi	r3,7
    c798:	10fff01e 	bne	r2,r3,c75c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c75c>
    c79c:	d9000204 	addi	r4,sp,8
    c7a0:	000c5c40 	call	c5c4 <uw_install_context.isra.1>
    c7a4:	008000c4 	movi	r2,3
    c7a8:	003fec06 	br	c75c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c75c>

0000c7ac <_Unwind_SjLj_ForcedUnwind>:
    c7ac:	00c000f4 	movhi	r3,3
    c7b0:	18f1d704 	addi	r3,r3,-14500
    c7b4:	defffe04 	addi	sp,sp,-8
    c7b8:	18c00017 	ldw	r3,0(r3)
    c7bc:	dfc00115 	stw	ra,4(sp)
    c7c0:	21400315 	stw	r5,12(r4)
    c7c4:	21800415 	stw	r6,16(r4)
    c7c8:	d80b883a 	mov	r5,sp
    c7cc:	d8c00015 	stw	r3,0(sp)
    c7d0:	000c3ec0 	call	c3ec <_Unwind_ForcedUnwind_Phase2>
    c7d4:	00c001c4 	movi	r3,7
    c7d8:	10c00326 	beq	r2,r3,c7e8 <_Unwind_SjLj_ForcedUnwind+0x3c>
    c7dc:	dfc00117 	ldw	ra,4(sp)
    c7e0:	dec00204 	addi	sp,sp,8
    c7e4:	f800283a 	ret
    c7e8:	d809883a 	mov	r4,sp
    c7ec:	000c5c40 	call	c5c4 <uw_install_context.isra.1>

0000c7f0 <_Unwind_SjLj_Resume>:
    c7f0:	00c000f4 	movhi	r3,3
    c7f4:	18f1d704 	addi	r3,r3,-14500
    c7f8:	18c00017 	ldw	r3,0(r3)
    c7fc:	20800317 	ldw	r2,12(r4)
    c800:	defffe04 	addi	sp,sp,-8
    c804:	dfc00115 	stw	ra,4(sp)
    c808:	d8c00015 	stw	r3,0(sp)
    c80c:	d80b883a 	mov	r5,sp
    c810:	1000041e 	bne	r2,zero,c824 <_Unwind_SjLj_Resume+0x34>
    c814:	000c5040 	call	c504 <_Unwind_RaiseException_Phase2>
    c818:	00c001c4 	movi	r3,7
    c81c:	10c00326 	beq	r2,r3,c82c <_Unwind_SjLj_Resume+0x3c>
    c820:	000cb240 	call	cb24 <abort>
    c824:	000c3ec0 	call	c3ec <_Unwind_ForcedUnwind_Phase2>
    c828:	003ffb06 	br	c818 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c818>
    c82c:	d809883a 	mov	r4,sp
    c830:	000c5c40 	call	c5c4 <uw_install_context.isra.1>

0000c834 <_Unwind_SjLj_Resume_or_Rethrow>:
    c834:	20800317 	ldw	r2,12(r4)
    c838:	defffe04 	addi	sp,sp,-8
    c83c:	dfc00115 	stw	ra,4(sp)
    c840:	1000041e 	bne	r2,zero,c854 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
    c844:	000c6dc0 	call	c6dc <_Unwind_SjLj_RaiseException>
    c848:	dfc00117 	ldw	ra,4(sp)
    c84c:	dec00204 	addi	sp,sp,8
    c850:	f800283a 	ret
    c854:	008000f4 	movhi	r2,3
    c858:	10b1d704 	addi	r2,r2,-14500
    c85c:	10800017 	ldw	r2,0(r2)
    c860:	d80b883a 	mov	r5,sp
    c864:	d8800015 	stw	r2,0(sp)
    c868:	000c3ec0 	call	c3ec <_Unwind_ForcedUnwind_Phase2>
    c86c:	00c001c4 	movi	r3,7
    c870:	10c00126 	beq	r2,r3,c878 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
    c874:	000cb240 	call	cb24 <abort>
    c878:	d809883a 	mov	r4,sp
    c87c:	000c5c40 	call	c5c4 <uw_install_context.isra.1>

0000c880 <_Unwind_DeleteException>:
    c880:	20800217 	ldw	r2,8(r4)
    c884:	10000326 	beq	r2,zero,c894 <_Unwind_DeleteException+0x14>
    c888:	200b883a 	mov	r5,r4
    c88c:	01000044 	movi	r4,1
    c890:	1000683a 	jmp	r2
    c894:	f800283a 	ret

0000c898 <_Unwind_Backtrace>:
    c898:	008000f4 	movhi	r2,3
    c89c:	10b1d704 	addi	r2,r2,-14500
    c8a0:	10800017 	ldw	r2,0(r2)
    c8a4:	defffc04 	addi	sp,sp,-16
    c8a8:	dc400215 	stw	r17,8(sp)
    c8ac:	dc000115 	stw	r16,4(sp)
    c8b0:	dfc00315 	stw	ra,12(sp)
    c8b4:	2023883a 	mov	r17,r4
    c8b8:	2821883a 	mov	r16,r5
    c8bc:	d8800015 	stw	r2,0(sp)
    c8c0:	00000506 	br	c8d8 <_Unwind_Backtrace+0x40>
    c8c4:	883ee83a 	callr	r17
    c8c8:	10000e1e 	bne	r2,zero,c904 <_Unwind_Backtrace+0x6c>
    c8cc:	d8800017 	ldw	r2,0(sp)
    c8d0:	10800017 	ldw	r2,0(r2)
    c8d4:	d8800015 	stw	r2,0(sp)
    c8d8:	800b883a 	mov	r5,r16
    c8dc:	d809883a 	mov	r4,sp
    c8e0:	103ff81e 	bne	r2,zero,c8c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c8c4>
    c8e4:	883ee83a 	callr	r17
    c8e8:	1000061e 	bne	r2,zero,c904 <_Unwind_Backtrace+0x6c>
    c8ec:	00800144 	movi	r2,5
    c8f0:	dfc00317 	ldw	ra,12(sp)
    c8f4:	dc400217 	ldw	r17,8(sp)
    c8f8:	dc000117 	ldw	r16,4(sp)
    c8fc:	dec00404 	addi	sp,sp,16
    c900:	f800283a 	ret
    c904:	008000c4 	movi	r2,3
    c908:	003ff906 	br	c8f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c8f0>

0000c90c <__clzsi2>:
    c90c:	00bfffd4 	movui	r2,65535
    c910:	11000536 	bltu	r2,r4,c928 <__clzsi2+0x1c>
    c914:	00803fc4 	movi	r2,255
    c918:	11000f36 	bltu	r2,r4,c958 <__clzsi2+0x4c>
    c91c:	00800804 	movi	r2,32
    c920:	0007883a 	mov	r3,zero
    c924:	00000506 	br	c93c <__clzsi2+0x30>
    c928:	00804034 	movhi	r2,256
    c92c:	10bfffc4 	addi	r2,r2,-1
    c930:	11000c2e 	bgeu	r2,r4,c964 <__clzsi2+0x58>
    c934:	00800204 	movi	r2,8
    c938:	00c00604 	movi	r3,24
    c93c:	20c8d83a 	srl	r4,r4,r3
    c940:	00c000f4 	movhi	r3,3
    c944:	18e07004 	addi	r3,r3,-32320
    c948:	1909883a 	add	r4,r3,r4
    c94c:	20c00003 	ldbu	r3,0(r4)
    c950:	10c5c83a 	sub	r2,r2,r3
    c954:	f800283a 	ret
    c958:	00800604 	movi	r2,24
    c95c:	00c00204 	movi	r3,8
    c960:	003ff606 	br	c93c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c93c>
    c964:	00800404 	movi	r2,16
    c968:	1007883a 	mov	r3,r2
    c96c:	003ff306 	br	c93c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c93c>

0000c970 <__divsi3>:
    c970:	20001b16 	blt	r4,zero,c9e0 <__divsi3+0x70>
    c974:	000f883a 	mov	r7,zero
    c978:	28001616 	blt	r5,zero,c9d4 <__divsi3+0x64>
    c97c:	200d883a 	mov	r6,r4
    c980:	29001a2e 	bgeu	r5,r4,c9ec <__divsi3+0x7c>
    c984:	00800804 	movi	r2,32
    c988:	00c00044 	movi	r3,1
    c98c:	00000106 	br	c994 <__divsi3+0x24>
    c990:	10000d26 	beq	r2,zero,c9c8 <__divsi3+0x58>
    c994:	294b883a 	add	r5,r5,r5
    c998:	10bfffc4 	addi	r2,r2,-1
    c99c:	18c7883a 	add	r3,r3,r3
    c9a0:	293ffb36 	bltu	r5,r4,c990 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c990>
    c9a4:	0005883a 	mov	r2,zero
    c9a8:	18000726 	beq	r3,zero,c9c8 <__divsi3+0x58>
    c9ac:	0005883a 	mov	r2,zero
    c9b0:	31400236 	bltu	r6,r5,c9bc <__divsi3+0x4c>
    c9b4:	314dc83a 	sub	r6,r6,r5
    c9b8:	10c4b03a 	or	r2,r2,r3
    c9bc:	1806d07a 	srli	r3,r3,1
    c9c0:	280ad07a 	srli	r5,r5,1
    c9c4:	183ffa1e 	bne	r3,zero,c9b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c9b0>
    c9c8:	38000126 	beq	r7,zero,c9d0 <__divsi3+0x60>
    c9cc:	0085c83a 	sub	r2,zero,r2
    c9d0:	f800283a 	ret
    c9d4:	014bc83a 	sub	r5,zero,r5
    c9d8:	39c0005c 	xori	r7,r7,1
    c9dc:	003fe706 	br	c97c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c97c>
    c9e0:	0109c83a 	sub	r4,zero,r4
    c9e4:	01c00044 	movi	r7,1
    c9e8:	003fe306 	br	c978 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c978>
    c9ec:	00c00044 	movi	r3,1
    c9f0:	003fee06 	br	c9ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c9ac>

0000c9f4 <__modsi3>:
    c9f4:	20001716 	blt	r4,zero,ca54 <__modsi3+0x60>
    c9f8:	000f883a 	mov	r7,zero
    c9fc:	2005883a 	mov	r2,r4
    ca00:	28001216 	blt	r5,zero,ca4c <__modsi3+0x58>
    ca04:	2900162e 	bgeu	r5,r4,ca60 <__modsi3+0x6c>
    ca08:	01800804 	movi	r6,32
    ca0c:	00c00044 	movi	r3,1
    ca10:	00000106 	br	ca18 <__modsi3+0x24>
    ca14:	30000a26 	beq	r6,zero,ca40 <__modsi3+0x4c>
    ca18:	294b883a 	add	r5,r5,r5
    ca1c:	31bfffc4 	addi	r6,r6,-1
    ca20:	18c7883a 	add	r3,r3,r3
    ca24:	293ffb36 	bltu	r5,r4,ca14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca14>
    ca28:	18000526 	beq	r3,zero,ca40 <__modsi3+0x4c>
    ca2c:	1806d07a 	srli	r3,r3,1
    ca30:	11400136 	bltu	r2,r5,ca38 <__modsi3+0x44>
    ca34:	1145c83a 	sub	r2,r2,r5
    ca38:	280ad07a 	srli	r5,r5,1
    ca3c:	183ffb1e 	bne	r3,zero,ca2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca2c>
    ca40:	38000126 	beq	r7,zero,ca48 <__modsi3+0x54>
    ca44:	0085c83a 	sub	r2,zero,r2
    ca48:	f800283a 	ret
    ca4c:	014bc83a 	sub	r5,zero,r5
    ca50:	003fec06 	br	ca04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca04>
    ca54:	0109c83a 	sub	r4,zero,r4
    ca58:	01c00044 	movi	r7,1
    ca5c:	003fe706 	br	c9fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c9fc>
    ca60:	00c00044 	movi	r3,1
    ca64:	003ff106 	br	ca2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca2c>

0000ca68 <__udivsi3>:
    ca68:	200d883a 	mov	r6,r4
    ca6c:	2900152e 	bgeu	r5,r4,cac4 <__udivsi3+0x5c>
    ca70:	28001416 	blt	r5,zero,cac4 <__udivsi3+0x5c>
    ca74:	00800804 	movi	r2,32
    ca78:	00c00044 	movi	r3,1
    ca7c:	00000206 	br	ca88 <__udivsi3+0x20>
    ca80:	10000e26 	beq	r2,zero,cabc <__udivsi3+0x54>
    ca84:	28000516 	blt	r5,zero,ca9c <__udivsi3+0x34>
    ca88:	294b883a 	add	r5,r5,r5
    ca8c:	10bfffc4 	addi	r2,r2,-1
    ca90:	18c7883a 	add	r3,r3,r3
    ca94:	293ffa36 	bltu	r5,r4,ca80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca80>
    ca98:	18000826 	beq	r3,zero,cabc <__udivsi3+0x54>
    ca9c:	0005883a 	mov	r2,zero
    caa0:	31400236 	bltu	r6,r5,caac <__udivsi3+0x44>
    caa4:	314dc83a 	sub	r6,r6,r5
    caa8:	10c4b03a 	or	r2,r2,r3
    caac:	1806d07a 	srli	r3,r3,1
    cab0:	280ad07a 	srli	r5,r5,1
    cab4:	183ffa1e 	bne	r3,zero,caa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700caa0>
    cab8:	f800283a 	ret
    cabc:	0005883a 	mov	r2,zero
    cac0:	f800283a 	ret
    cac4:	00c00044 	movi	r3,1
    cac8:	003ff406 	br	ca9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca9c>

0000cacc <__umodsi3>:
    cacc:	2005883a 	mov	r2,r4
    cad0:	2900122e 	bgeu	r5,r4,cb1c <__umodsi3+0x50>
    cad4:	28001116 	blt	r5,zero,cb1c <__umodsi3+0x50>
    cad8:	01800804 	movi	r6,32
    cadc:	00c00044 	movi	r3,1
    cae0:	00000206 	br	caec <__umodsi3+0x20>
    cae4:	30000c26 	beq	r6,zero,cb18 <__umodsi3+0x4c>
    cae8:	28000516 	blt	r5,zero,cb00 <__umodsi3+0x34>
    caec:	294b883a 	add	r5,r5,r5
    caf0:	31bfffc4 	addi	r6,r6,-1
    caf4:	18c7883a 	add	r3,r3,r3
    caf8:	293ffa36 	bltu	r5,r4,cae4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cae4>
    cafc:	18000626 	beq	r3,zero,cb18 <__umodsi3+0x4c>
    cb00:	1806d07a 	srli	r3,r3,1
    cb04:	11400136 	bltu	r2,r5,cb0c <__umodsi3+0x40>
    cb08:	1145c83a 	sub	r2,r2,r5
    cb0c:	280ad07a 	srli	r5,r5,1
    cb10:	183ffb1e 	bne	r3,zero,cb00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb00>
    cb14:	f800283a 	ret
    cb18:	f800283a 	ret
    cb1c:	00c00044 	movi	r3,1
    cb20:	003ff706 	br	cb00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb00>

0000cb24 <abort>:
    cb24:	deffff04 	addi	sp,sp,-4
    cb28:	01000184 	movi	r4,6
    cb2c:	dfc00015 	stw	ra,0(sp)
    cb30:	000da500 	call	da50 <raise>
    cb34:	01000044 	movi	r4,1
    cb38:	001a8080 	call	1a808 <_exit>

0000cb3c <__errno>:
    cb3c:	008000f4 	movhi	r2,3
    cb40:	10a9b404 	addi	r2,r2,-22832
    cb44:	10800017 	ldw	r2,0(r2)
    cb48:	f800283a 	ret

0000cb4c <malloc>:
    cb4c:	008000f4 	movhi	r2,3
    cb50:	10a9b404 	addi	r2,r2,-22832
    cb54:	200b883a 	mov	r5,r4
    cb58:	11000017 	ldw	r4,0(r2)
    cb5c:	000cb741 	jmpi	cb74 <_malloc_r>

0000cb60 <free>:
    cb60:	008000f4 	movhi	r2,3
    cb64:	10a9b404 	addi	r2,r2,-22832
    cb68:	200b883a 	mov	r5,r4
    cb6c:	11000017 	ldw	r4,0(r2)
    cb70:	00143281 	jmpi	14328 <_free_r>

0000cb74 <_malloc_r>:
    cb74:	defff504 	addi	sp,sp,-44
    cb78:	dc800315 	stw	r18,12(sp)
    cb7c:	dfc00a15 	stw	ra,40(sp)
    cb80:	df000915 	stw	fp,36(sp)
    cb84:	ddc00815 	stw	r23,32(sp)
    cb88:	dd800715 	stw	r22,28(sp)
    cb8c:	dd400615 	stw	r21,24(sp)
    cb90:	dd000515 	stw	r20,20(sp)
    cb94:	dcc00415 	stw	r19,16(sp)
    cb98:	dc400215 	stw	r17,8(sp)
    cb9c:	dc000115 	stw	r16,4(sp)
    cba0:	288002c4 	addi	r2,r5,11
    cba4:	00c00584 	movi	r3,22
    cba8:	2025883a 	mov	r18,r4
    cbac:	18807f2e 	bgeu	r3,r2,cdac <_malloc_r+0x238>
    cbb0:	047ffe04 	movi	r17,-8
    cbb4:	1462703a 	and	r17,r2,r17
    cbb8:	8800a316 	blt	r17,zero,ce48 <_malloc_r+0x2d4>
    cbbc:	8940a236 	bltu	r17,r5,ce48 <_malloc_r+0x2d4>
    cbc0:	001b2f00 	call	1b2f0 <__malloc_lock>
    cbc4:	00807dc4 	movi	r2,503
    cbc8:	1441e92e 	bgeu	r2,r17,d370 <_malloc_r+0x7fc>
    cbcc:	8804d27a 	srli	r2,r17,9
    cbd0:	1000a126 	beq	r2,zero,ce58 <_malloc_r+0x2e4>
    cbd4:	00c00104 	movi	r3,4
    cbd8:	18811e36 	bltu	r3,r2,d054 <_malloc_r+0x4e0>
    cbdc:	8804d1ba 	srli	r2,r17,6
    cbe0:	12000e44 	addi	r8,r2,57
    cbe4:	11c00e04 	addi	r7,r2,56
    cbe8:	4209883a 	add	r4,r8,r8
    cbec:	04c000f4 	movhi	r19,3
    cbf0:	2109883a 	add	r4,r4,r4
    cbf4:	9ce2f804 	addi	r19,r19,-29728
    cbf8:	2109883a 	add	r4,r4,r4
    cbfc:	9909883a 	add	r4,r19,r4
    cc00:	24000117 	ldw	r16,4(r4)
    cc04:	213ffe04 	addi	r4,r4,-8
    cc08:	24009726 	beq	r4,r16,ce68 <_malloc_r+0x2f4>
    cc0c:	80800117 	ldw	r2,4(r16)
    cc10:	01bfff04 	movi	r6,-4
    cc14:	014003c4 	movi	r5,15
    cc18:	1184703a 	and	r2,r2,r6
    cc1c:	1447c83a 	sub	r3,r2,r17
    cc20:	28c00716 	blt	r5,r3,cc40 <_malloc_r+0xcc>
    cc24:	1800920e 	bge	r3,zero,ce70 <_malloc_r+0x2fc>
    cc28:	84000317 	ldw	r16,12(r16)
    cc2c:	24008e26 	beq	r4,r16,ce68 <_malloc_r+0x2f4>
    cc30:	80800117 	ldw	r2,4(r16)
    cc34:	1184703a 	and	r2,r2,r6
    cc38:	1447c83a 	sub	r3,r2,r17
    cc3c:	28fff90e 	bge	r5,r3,cc24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc24>
    cc40:	3809883a 	mov	r4,r7
    cc44:	018000f4 	movhi	r6,3
    cc48:	9c000417 	ldw	r16,16(r19)
    cc4c:	31a2f804 	addi	r6,r6,-29728
    cc50:	32000204 	addi	r8,r6,8
    cc54:	82013426 	beq	r16,r8,d128 <_malloc_r+0x5b4>
    cc58:	80c00117 	ldw	r3,4(r16)
    cc5c:	00bfff04 	movi	r2,-4
    cc60:	188e703a 	and	r7,r3,r2
    cc64:	3c45c83a 	sub	r2,r7,r17
    cc68:	00c003c4 	movi	r3,15
    cc6c:	18811f16 	blt	r3,r2,d0ec <_malloc_r+0x578>
    cc70:	32000515 	stw	r8,20(r6)
    cc74:	32000415 	stw	r8,16(r6)
    cc78:	10007f0e 	bge	r2,zero,ce78 <_malloc_r+0x304>
    cc7c:	00807fc4 	movi	r2,511
    cc80:	11c0fd36 	bltu	r2,r7,d078 <_malloc_r+0x504>
    cc84:	3806d0fa 	srli	r3,r7,3
    cc88:	01c00044 	movi	r7,1
    cc8c:	30800117 	ldw	r2,4(r6)
    cc90:	19400044 	addi	r5,r3,1
    cc94:	294b883a 	add	r5,r5,r5
    cc98:	1807d0ba 	srai	r3,r3,2
    cc9c:	294b883a 	add	r5,r5,r5
    cca0:	294b883a 	add	r5,r5,r5
    cca4:	298b883a 	add	r5,r5,r6
    cca8:	38c6983a 	sll	r3,r7,r3
    ccac:	29c00017 	ldw	r7,0(r5)
    ccb0:	2a7ffe04 	addi	r9,r5,-8
    ccb4:	1886b03a 	or	r3,r3,r2
    ccb8:	82400315 	stw	r9,12(r16)
    ccbc:	81c00215 	stw	r7,8(r16)
    ccc0:	30c00115 	stw	r3,4(r6)
    ccc4:	2c000015 	stw	r16,0(r5)
    ccc8:	3c000315 	stw	r16,12(r7)
    cccc:	2005d0ba 	srai	r2,r4,2
    ccd0:	01400044 	movi	r5,1
    ccd4:	288a983a 	sll	r5,r5,r2
    ccd8:	19406f36 	bltu	r3,r5,ce98 <_malloc_r+0x324>
    ccdc:	28c4703a 	and	r2,r5,r3
    cce0:	10000a1e 	bne	r2,zero,cd0c <_malloc_r+0x198>
    cce4:	00bfff04 	movi	r2,-4
    cce8:	294b883a 	add	r5,r5,r5
    ccec:	2088703a 	and	r4,r4,r2
    ccf0:	28c4703a 	and	r2,r5,r3
    ccf4:	21000104 	addi	r4,r4,4
    ccf8:	1000041e 	bne	r2,zero,cd0c <_malloc_r+0x198>
    ccfc:	294b883a 	add	r5,r5,r5
    cd00:	28c4703a 	and	r2,r5,r3
    cd04:	21000104 	addi	r4,r4,4
    cd08:	103ffc26 	beq	r2,zero,ccfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ccfc>
    cd0c:	02bfff04 	movi	r10,-4
    cd10:	024003c4 	movi	r9,15
    cd14:	21800044 	addi	r6,r4,1
    cd18:	318d883a 	add	r6,r6,r6
    cd1c:	318d883a 	add	r6,r6,r6
    cd20:	318d883a 	add	r6,r6,r6
    cd24:	998d883a 	add	r6,r19,r6
    cd28:	333ffe04 	addi	r12,r6,-8
    cd2c:	2017883a 	mov	r11,r4
    cd30:	31800104 	addi	r6,r6,4
    cd34:	34000017 	ldw	r16,0(r6)
    cd38:	31fffd04 	addi	r7,r6,-12
    cd3c:	81c0041e 	bne	r16,r7,cd50 <_malloc_r+0x1dc>
    cd40:	0000fb06 	br	d130 <_malloc_r+0x5bc>
    cd44:	1801030e 	bge	r3,zero,d154 <_malloc_r+0x5e0>
    cd48:	84000317 	ldw	r16,12(r16)
    cd4c:	81c0f826 	beq	r16,r7,d130 <_malloc_r+0x5bc>
    cd50:	80800117 	ldw	r2,4(r16)
    cd54:	1284703a 	and	r2,r2,r10
    cd58:	1447c83a 	sub	r3,r2,r17
    cd5c:	48fff90e 	bge	r9,r3,cd44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cd44>
    cd60:	80800317 	ldw	r2,12(r16)
    cd64:	81000217 	ldw	r4,8(r16)
    cd68:	89400054 	ori	r5,r17,1
    cd6c:	81400115 	stw	r5,4(r16)
    cd70:	20800315 	stw	r2,12(r4)
    cd74:	11000215 	stw	r4,8(r2)
    cd78:	8463883a 	add	r17,r16,r17
    cd7c:	9c400515 	stw	r17,20(r19)
    cd80:	9c400415 	stw	r17,16(r19)
    cd84:	18800054 	ori	r2,r3,1
    cd88:	88800115 	stw	r2,4(r17)
    cd8c:	8a000315 	stw	r8,12(r17)
    cd90:	8a000215 	stw	r8,8(r17)
    cd94:	88e3883a 	add	r17,r17,r3
    cd98:	88c00015 	stw	r3,0(r17)
    cd9c:	9009883a 	mov	r4,r18
    cda0:	001b4100 	call	1b410 <__malloc_unlock>
    cda4:	80800204 	addi	r2,r16,8
    cda8:	00001b06 	br	ce18 <_malloc_r+0x2a4>
    cdac:	04400404 	movi	r17,16
    cdb0:	89402536 	bltu	r17,r5,ce48 <_malloc_r+0x2d4>
    cdb4:	001b2f00 	call	1b2f0 <__malloc_lock>
    cdb8:	00800184 	movi	r2,6
    cdbc:	01000084 	movi	r4,2
    cdc0:	04c000f4 	movhi	r19,3
    cdc4:	1085883a 	add	r2,r2,r2
    cdc8:	9ce2f804 	addi	r19,r19,-29728
    cdcc:	1085883a 	add	r2,r2,r2
    cdd0:	9885883a 	add	r2,r19,r2
    cdd4:	14000117 	ldw	r16,4(r2)
    cdd8:	10fffe04 	addi	r3,r2,-8
    cddc:	80c0d926 	beq	r16,r3,d144 <_malloc_r+0x5d0>
    cde0:	80c00117 	ldw	r3,4(r16)
    cde4:	81000317 	ldw	r4,12(r16)
    cde8:	00bfff04 	movi	r2,-4
    cdec:	1884703a 	and	r2,r3,r2
    cdf0:	81400217 	ldw	r5,8(r16)
    cdf4:	8085883a 	add	r2,r16,r2
    cdf8:	10c00117 	ldw	r3,4(r2)
    cdfc:	29000315 	stw	r4,12(r5)
    ce00:	21400215 	stw	r5,8(r4)
    ce04:	18c00054 	ori	r3,r3,1
    ce08:	10c00115 	stw	r3,4(r2)
    ce0c:	9009883a 	mov	r4,r18
    ce10:	001b4100 	call	1b410 <__malloc_unlock>
    ce14:	80800204 	addi	r2,r16,8
    ce18:	dfc00a17 	ldw	ra,40(sp)
    ce1c:	df000917 	ldw	fp,36(sp)
    ce20:	ddc00817 	ldw	r23,32(sp)
    ce24:	dd800717 	ldw	r22,28(sp)
    ce28:	dd400617 	ldw	r21,24(sp)
    ce2c:	dd000517 	ldw	r20,20(sp)
    ce30:	dcc00417 	ldw	r19,16(sp)
    ce34:	dc800317 	ldw	r18,12(sp)
    ce38:	dc400217 	ldw	r17,8(sp)
    ce3c:	dc000117 	ldw	r16,4(sp)
    ce40:	dec00b04 	addi	sp,sp,44
    ce44:	f800283a 	ret
    ce48:	00800304 	movi	r2,12
    ce4c:	90800015 	stw	r2,0(r18)
    ce50:	0005883a 	mov	r2,zero
    ce54:	003ff006 	br	ce18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce18>
    ce58:	01002004 	movi	r4,128
    ce5c:	02001004 	movi	r8,64
    ce60:	01c00fc4 	movi	r7,63
    ce64:	003f6106 	br	cbec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbec>
    ce68:	4009883a 	mov	r4,r8
    ce6c:	003f7506 	br	cc44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc44>
    ce70:	81000317 	ldw	r4,12(r16)
    ce74:	003fde06 	br	cdf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cdf0>
    ce78:	81c5883a 	add	r2,r16,r7
    ce7c:	11400117 	ldw	r5,4(r2)
    ce80:	9009883a 	mov	r4,r18
    ce84:	29400054 	ori	r5,r5,1
    ce88:	11400115 	stw	r5,4(r2)
    ce8c:	001b4100 	call	1b410 <__malloc_unlock>
    ce90:	80800204 	addi	r2,r16,8
    ce94:	003fe006 	br	ce18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce18>
    ce98:	9c000217 	ldw	r16,8(r19)
    ce9c:	00bfff04 	movi	r2,-4
    cea0:	85800117 	ldw	r22,4(r16)
    cea4:	b0ac703a 	and	r22,r22,r2
    cea8:	b4400336 	bltu	r22,r17,ceb8 <_malloc_r+0x344>
    ceac:	b445c83a 	sub	r2,r22,r17
    ceb0:	00c003c4 	movi	r3,15
    ceb4:	18805d16 	blt	r3,r2,d02c <_malloc_r+0x4b8>
    ceb8:	05c000f4 	movhi	r23,3
    cebc:	008000f4 	movhi	r2,3
    cec0:	10b1da04 	addi	r2,r2,-14488
    cec4:	bde9b504 	addi	r23,r23,-22828
    cec8:	15400017 	ldw	r21,0(r2)
    cecc:	b8c00017 	ldw	r3,0(r23)
    ced0:	00bfffc4 	movi	r2,-1
    ced4:	858d883a 	add	r6,r16,r22
    ced8:	8d6b883a 	add	r21,r17,r21
    cedc:	1880ea26 	beq	r3,r2,d288 <_malloc_r+0x714>
    cee0:	ad4403c4 	addi	r21,r21,4111
    cee4:	00bc0004 	movi	r2,-4096
    cee8:	a8aa703a 	and	r21,r21,r2
    ceec:	a80b883a 	mov	r5,r21
    cef0:	9009883a 	mov	r4,r18
    cef4:	d9800015 	stw	r6,0(sp)
    cef8:	000d7a80 	call	d7a8 <_sbrk_r>
    cefc:	1029883a 	mov	r20,r2
    cf00:	00bfffc4 	movi	r2,-1
    cf04:	d9800017 	ldw	r6,0(sp)
    cf08:	a080e826 	beq	r20,r2,d2ac <_malloc_r+0x738>
    cf0c:	a180a636 	bltu	r20,r6,d1a8 <_malloc_r+0x634>
    cf10:	07000134 	movhi	fp,4
    cf14:	e7220304 	addi	fp,fp,-30708
    cf18:	e0800017 	ldw	r2,0(fp)
    cf1c:	a887883a 	add	r3,r21,r2
    cf20:	e0c00015 	stw	r3,0(fp)
    cf24:	3500e626 	beq	r6,r20,d2c0 <_malloc_r+0x74c>
    cf28:	b9000017 	ldw	r4,0(r23)
    cf2c:	00bfffc4 	movi	r2,-1
    cf30:	2080ee26 	beq	r4,r2,d2ec <_malloc_r+0x778>
    cf34:	a185c83a 	sub	r2,r20,r6
    cf38:	10c5883a 	add	r2,r2,r3
    cf3c:	e0800015 	stw	r2,0(fp)
    cf40:	a0c001cc 	andi	r3,r20,7
    cf44:	1800bc26 	beq	r3,zero,d238 <_malloc_r+0x6c4>
    cf48:	a0e9c83a 	sub	r20,r20,r3
    cf4c:	00840204 	movi	r2,4104
    cf50:	a5000204 	addi	r20,r20,8
    cf54:	10c7c83a 	sub	r3,r2,r3
    cf58:	a545883a 	add	r2,r20,r21
    cf5c:	1083ffcc 	andi	r2,r2,4095
    cf60:	18abc83a 	sub	r21,r3,r2
    cf64:	a80b883a 	mov	r5,r21
    cf68:	9009883a 	mov	r4,r18
    cf6c:	000d7a80 	call	d7a8 <_sbrk_r>
    cf70:	00ffffc4 	movi	r3,-1
    cf74:	10c0e126 	beq	r2,r3,d2fc <_malloc_r+0x788>
    cf78:	1505c83a 	sub	r2,r2,r20
    cf7c:	1545883a 	add	r2,r2,r21
    cf80:	10800054 	ori	r2,r2,1
    cf84:	e0c00017 	ldw	r3,0(fp)
    cf88:	9d000215 	stw	r20,8(r19)
    cf8c:	a0800115 	stw	r2,4(r20)
    cf90:	a8c7883a 	add	r3,r21,r3
    cf94:	e0c00015 	stw	r3,0(fp)
    cf98:	84c00e26 	beq	r16,r19,cfd4 <_malloc_r+0x460>
    cf9c:	018003c4 	movi	r6,15
    cfa0:	3580a72e 	bgeu	r6,r22,d240 <_malloc_r+0x6cc>
    cfa4:	81400117 	ldw	r5,4(r16)
    cfa8:	013ffe04 	movi	r4,-8
    cfac:	b0bffd04 	addi	r2,r22,-12
    cfb0:	1104703a 	and	r2,r2,r4
    cfb4:	2900004c 	andi	r4,r5,1
    cfb8:	2088b03a 	or	r4,r4,r2
    cfbc:	81000115 	stw	r4,4(r16)
    cfc0:	01400144 	movi	r5,5
    cfc4:	8089883a 	add	r4,r16,r2
    cfc8:	21400115 	stw	r5,4(r4)
    cfcc:	21400215 	stw	r5,8(r4)
    cfd0:	3080cd36 	bltu	r6,r2,d308 <_malloc_r+0x794>
    cfd4:	008000f4 	movhi	r2,3
    cfd8:	10b1d904 	addi	r2,r2,-14492
    cfdc:	11000017 	ldw	r4,0(r2)
    cfe0:	20c0012e 	bgeu	r4,r3,cfe8 <_malloc_r+0x474>
    cfe4:	10c00015 	stw	r3,0(r2)
    cfe8:	008000f4 	movhi	r2,3
    cfec:	10b1d804 	addi	r2,r2,-14496
    cff0:	11000017 	ldw	r4,0(r2)
    cff4:	9c000217 	ldw	r16,8(r19)
    cff8:	20c0012e 	bgeu	r4,r3,d000 <_malloc_r+0x48c>
    cffc:	10c00015 	stw	r3,0(r2)
    d000:	80c00117 	ldw	r3,4(r16)
    d004:	00bfff04 	movi	r2,-4
    d008:	1886703a 	and	r3,r3,r2
    d00c:	1c45c83a 	sub	r2,r3,r17
    d010:	1c400236 	bltu	r3,r17,d01c <_malloc_r+0x4a8>
    d014:	00c003c4 	movi	r3,15
    d018:	18800416 	blt	r3,r2,d02c <_malloc_r+0x4b8>
    d01c:	9009883a 	mov	r4,r18
    d020:	001b4100 	call	1b410 <__malloc_unlock>
    d024:	0005883a 	mov	r2,zero
    d028:	003f7b06 	br	ce18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce18>
    d02c:	88c00054 	ori	r3,r17,1
    d030:	80c00115 	stw	r3,4(r16)
    d034:	8463883a 	add	r17,r16,r17
    d038:	10800054 	ori	r2,r2,1
    d03c:	9c400215 	stw	r17,8(r19)
    d040:	88800115 	stw	r2,4(r17)
    d044:	9009883a 	mov	r4,r18
    d048:	001b4100 	call	1b410 <__malloc_unlock>
    d04c:	80800204 	addi	r2,r16,8
    d050:	003f7106 	br	ce18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce18>
    d054:	00c00504 	movi	r3,20
    d058:	18804a2e 	bgeu	r3,r2,d184 <_malloc_r+0x610>
    d05c:	00c01504 	movi	r3,84
    d060:	18806e36 	bltu	r3,r2,d21c <_malloc_r+0x6a8>
    d064:	8804d33a 	srli	r2,r17,12
    d068:	12001bc4 	addi	r8,r2,111
    d06c:	11c01b84 	addi	r7,r2,110
    d070:	4209883a 	add	r4,r8,r8
    d074:	003edd06 	br	cbec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbec>
    d078:	3804d27a 	srli	r2,r7,9
    d07c:	00c00104 	movi	r3,4
    d080:	1880442e 	bgeu	r3,r2,d194 <_malloc_r+0x620>
    d084:	00c00504 	movi	r3,20
    d088:	18808136 	bltu	r3,r2,d290 <_malloc_r+0x71c>
    d08c:	11401704 	addi	r5,r2,92
    d090:	10c016c4 	addi	r3,r2,91
    d094:	294b883a 	add	r5,r5,r5
    d098:	294b883a 	add	r5,r5,r5
    d09c:	294b883a 	add	r5,r5,r5
    d0a0:	994b883a 	add	r5,r19,r5
    d0a4:	28800017 	ldw	r2,0(r5)
    d0a8:	018000f4 	movhi	r6,3
    d0ac:	297ffe04 	addi	r5,r5,-8
    d0b0:	31a2f804 	addi	r6,r6,-29728
    d0b4:	28806526 	beq	r5,r2,d24c <_malloc_r+0x6d8>
    d0b8:	01bfff04 	movi	r6,-4
    d0bc:	10c00117 	ldw	r3,4(r2)
    d0c0:	1986703a 	and	r3,r3,r6
    d0c4:	38c0022e 	bgeu	r7,r3,d0d0 <_malloc_r+0x55c>
    d0c8:	10800217 	ldw	r2,8(r2)
    d0cc:	28bffb1e 	bne	r5,r2,d0bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0bc>
    d0d0:	11400317 	ldw	r5,12(r2)
    d0d4:	98c00117 	ldw	r3,4(r19)
    d0d8:	81400315 	stw	r5,12(r16)
    d0dc:	80800215 	stw	r2,8(r16)
    d0e0:	2c000215 	stw	r16,8(r5)
    d0e4:	14000315 	stw	r16,12(r2)
    d0e8:	003ef806 	br	cccc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cccc>
    d0ec:	88c00054 	ori	r3,r17,1
    d0f0:	80c00115 	stw	r3,4(r16)
    d0f4:	8463883a 	add	r17,r16,r17
    d0f8:	34400515 	stw	r17,20(r6)
    d0fc:	34400415 	stw	r17,16(r6)
    d100:	10c00054 	ori	r3,r2,1
    d104:	8a000315 	stw	r8,12(r17)
    d108:	8a000215 	stw	r8,8(r17)
    d10c:	88c00115 	stw	r3,4(r17)
    d110:	88a3883a 	add	r17,r17,r2
    d114:	88800015 	stw	r2,0(r17)
    d118:	9009883a 	mov	r4,r18
    d11c:	001b4100 	call	1b410 <__malloc_unlock>
    d120:	80800204 	addi	r2,r16,8
    d124:	003f3c06 	br	ce18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce18>
    d128:	30c00117 	ldw	r3,4(r6)
    d12c:	003ee706 	br	cccc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cccc>
    d130:	5ac00044 	addi	r11,r11,1
    d134:	588000cc 	andi	r2,r11,3
    d138:	31800204 	addi	r6,r6,8
    d13c:	103efd1e 	bne	r2,zero,cd34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cd34>
    d140:	00002406 	br	d1d4 <_malloc_r+0x660>
    d144:	14000317 	ldw	r16,12(r2)
    d148:	143f251e 	bne	r2,r16,cde0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cde0>
    d14c:	21000084 	addi	r4,r4,2
    d150:	003ebc06 	br	cc44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc44>
    d154:	8085883a 	add	r2,r16,r2
    d158:	10c00117 	ldw	r3,4(r2)
    d15c:	81000317 	ldw	r4,12(r16)
    d160:	81400217 	ldw	r5,8(r16)
    d164:	18c00054 	ori	r3,r3,1
    d168:	10c00115 	stw	r3,4(r2)
    d16c:	29000315 	stw	r4,12(r5)
    d170:	21400215 	stw	r5,8(r4)
    d174:	9009883a 	mov	r4,r18
    d178:	001b4100 	call	1b410 <__malloc_unlock>
    d17c:	80800204 	addi	r2,r16,8
    d180:	003f2506 	br	ce18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce18>
    d184:	12001704 	addi	r8,r2,92
    d188:	11c016c4 	addi	r7,r2,91
    d18c:	4209883a 	add	r4,r8,r8
    d190:	003e9606 	br	cbec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbec>
    d194:	3804d1ba 	srli	r2,r7,6
    d198:	11400e44 	addi	r5,r2,57
    d19c:	10c00e04 	addi	r3,r2,56
    d1a0:	294b883a 	add	r5,r5,r5
    d1a4:	003fbc06 	br	d098 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d098>
    d1a8:	84ff5926 	beq	r16,r19,cf10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf10>
    d1ac:	008000f4 	movhi	r2,3
    d1b0:	10a2f804 	addi	r2,r2,-29728
    d1b4:	14000217 	ldw	r16,8(r2)
    d1b8:	00bfff04 	movi	r2,-4
    d1bc:	80c00117 	ldw	r3,4(r16)
    d1c0:	1886703a 	and	r3,r3,r2
    d1c4:	003f9106 	br	d00c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d00c>
    d1c8:	60800217 	ldw	r2,8(r12)
    d1cc:	213fffc4 	addi	r4,r4,-1
    d1d0:	1300651e 	bne	r2,r12,d368 <_malloc_r+0x7f4>
    d1d4:	208000cc 	andi	r2,r4,3
    d1d8:	633ffe04 	addi	r12,r12,-8
    d1dc:	103ffa1e 	bne	r2,zero,d1c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d1c8>
    d1e0:	98800117 	ldw	r2,4(r19)
    d1e4:	0146303a 	nor	r3,zero,r5
    d1e8:	1884703a 	and	r2,r3,r2
    d1ec:	98800115 	stw	r2,4(r19)
    d1f0:	294b883a 	add	r5,r5,r5
    d1f4:	117f2836 	bltu	r2,r5,ce98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce98>
    d1f8:	283f2726 	beq	r5,zero,ce98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce98>
    d1fc:	2886703a 	and	r3,r5,r2
    d200:	5809883a 	mov	r4,r11
    d204:	183ec31e 	bne	r3,zero,cd14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cd14>
    d208:	294b883a 	add	r5,r5,r5
    d20c:	2886703a 	and	r3,r5,r2
    d210:	21000104 	addi	r4,r4,4
    d214:	183ffc26 	beq	r3,zero,d208 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d208>
    d218:	003ebe06 	br	cd14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cd14>
    d21c:	00c05504 	movi	r3,340
    d220:	18801236 	bltu	r3,r2,d26c <_malloc_r+0x6f8>
    d224:	8804d3fa 	srli	r2,r17,15
    d228:	12001e04 	addi	r8,r2,120
    d22c:	11c01dc4 	addi	r7,r2,119
    d230:	4209883a 	add	r4,r8,r8
    d234:	003e6d06 	br	cbec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbec>
    d238:	00c40004 	movi	r3,4096
    d23c:	003f4606 	br	cf58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf58>
    d240:	00800044 	movi	r2,1
    d244:	a0800115 	stw	r2,4(r20)
    d248:	003f7406 	br	d01c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d01c>
    d24c:	1805d0ba 	srai	r2,r3,2
    d250:	01c00044 	movi	r7,1
    d254:	30c00117 	ldw	r3,4(r6)
    d258:	388e983a 	sll	r7,r7,r2
    d25c:	2805883a 	mov	r2,r5
    d260:	38c6b03a 	or	r3,r7,r3
    d264:	30c00115 	stw	r3,4(r6)
    d268:	003f9b06 	br	d0d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0d8>
    d26c:	00c15504 	movi	r3,1364
    d270:	18801a36 	bltu	r3,r2,d2dc <_malloc_r+0x768>
    d274:	8804d4ba 	srli	r2,r17,18
    d278:	12001f44 	addi	r8,r2,125
    d27c:	11c01f04 	addi	r7,r2,124
    d280:	4209883a 	add	r4,r8,r8
    d284:	003e5906 	br	cbec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbec>
    d288:	ad400404 	addi	r21,r21,16
    d28c:	003f1706 	br	ceec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ceec>
    d290:	00c01504 	movi	r3,84
    d294:	18802336 	bltu	r3,r2,d324 <_malloc_r+0x7b0>
    d298:	3804d33a 	srli	r2,r7,12
    d29c:	11401bc4 	addi	r5,r2,111
    d2a0:	10c01b84 	addi	r3,r2,110
    d2a4:	294b883a 	add	r5,r5,r5
    d2a8:	003f7b06 	br	d098 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d098>
    d2ac:	9c000217 	ldw	r16,8(r19)
    d2b0:	00bfff04 	movi	r2,-4
    d2b4:	80c00117 	ldw	r3,4(r16)
    d2b8:	1886703a 	and	r3,r3,r2
    d2bc:	003f5306 	br	d00c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d00c>
    d2c0:	3083ffcc 	andi	r2,r6,4095
    d2c4:	103f181e 	bne	r2,zero,cf28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf28>
    d2c8:	99000217 	ldw	r4,8(r19)
    d2cc:	b545883a 	add	r2,r22,r21
    d2d0:	10800054 	ori	r2,r2,1
    d2d4:	20800115 	stw	r2,4(r4)
    d2d8:	003f3e06 	br	cfd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cfd4>
    d2dc:	01003f84 	movi	r4,254
    d2e0:	02001fc4 	movi	r8,127
    d2e4:	01c01f84 	movi	r7,126
    d2e8:	003e4006 	br	cbec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbec>
    d2ec:	008000f4 	movhi	r2,3
    d2f0:	10a9b504 	addi	r2,r2,-22828
    d2f4:	15000015 	stw	r20,0(r2)
    d2f8:	003f1106 	br	cf40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf40>
    d2fc:	00800044 	movi	r2,1
    d300:	002b883a 	mov	r21,zero
    d304:	003f1f06 	br	cf84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf84>
    d308:	81400204 	addi	r5,r16,8
    d30c:	9009883a 	mov	r4,r18
    d310:	00143280 	call	14328 <_free_r>
    d314:	00800134 	movhi	r2,4
    d318:	10a20304 	addi	r2,r2,-30708
    d31c:	10c00017 	ldw	r3,0(r2)
    d320:	003f2c06 	br	cfd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cfd4>
    d324:	00c05504 	movi	r3,340
    d328:	18800536 	bltu	r3,r2,d340 <_malloc_r+0x7cc>
    d32c:	3804d3fa 	srli	r2,r7,15
    d330:	11401e04 	addi	r5,r2,120
    d334:	10c01dc4 	addi	r3,r2,119
    d338:	294b883a 	add	r5,r5,r5
    d33c:	003f5606 	br	d098 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d098>
    d340:	00c15504 	movi	r3,1364
    d344:	18800536 	bltu	r3,r2,d35c <_malloc_r+0x7e8>
    d348:	3804d4ba 	srli	r2,r7,18
    d34c:	11401f44 	addi	r5,r2,125
    d350:	10c01f04 	addi	r3,r2,124
    d354:	294b883a 	add	r5,r5,r5
    d358:	003f4f06 	br	d098 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d098>
    d35c:	01403f84 	movi	r5,254
    d360:	00c01f84 	movi	r3,126
    d364:	003f4c06 	br	d098 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d098>
    d368:	98800117 	ldw	r2,4(r19)
    d36c:	003fa006 	br	d1f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d1f0>
    d370:	8808d0fa 	srli	r4,r17,3
    d374:	20800044 	addi	r2,r4,1
    d378:	1085883a 	add	r2,r2,r2
    d37c:	003e9006 	br	cdc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cdc0>

0000d380 <memcpy>:
    d380:	defffd04 	addi	sp,sp,-12
    d384:	dfc00215 	stw	ra,8(sp)
    d388:	dc400115 	stw	r17,4(sp)
    d38c:	dc000015 	stw	r16,0(sp)
    d390:	00c003c4 	movi	r3,15
    d394:	2005883a 	mov	r2,r4
    d398:	1980452e 	bgeu	r3,r6,d4b0 <memcpy+0x130>
    d39c:	2906b03a 	or	r3,r5,r4
    d3a0:	18c000cc 	andi	r3,r3,3
    d3a4:	1800441e 	bne	r3,zero,d4b8 <memcpy+0x138>
    d3a8:	347ffc04 	addi	r17,r6,-16
    d3ac:	8822d13a 	srli	r17,r17,4
    d3b0:	28c00104 	addi	r3,r5,4
    d3b4:	23400104 	addi	r13,r4,4
    d3b8:	8820913a 	slli	r16,r17,4
    d3bc:	2b000204 	addi	r12,r5,8
    d3c0:	22c00204 	addi	r11,r4,8
    d3c4:	84000504 	addi	r16,r16,20
    d3c8:	2a800304 	addi	r10,r5,12
    d3cc:	22400304 	addi	r9,r4,12
    d3d0:	2c21883a 	add	r16,r5,r16
    d3d4:	2811883a 	mov	r8,r5
    d3d8:	200f883a 	mov	r7,r4
    d3dc:	41000017 	ldw	r4,0(r8)
    d3e0:	1fc00017 	ldw	ra,0(r3)
    d3e4:	63c00017 	ldw	r15,0(r12)
    d3e8:	39000015 	stw	r4,0(r7)
    d3ec:	53800017 	ldw	r14,0(r10)
    d3f0:	6fc00015 	stw	ra,0(r13)
    d3f4:	5bc00015 	stw	r15,0(r11)
    d3f8:	4b800015 	stw	r14,0(r9)
    d3fc:	18c00404 	addi	r3,r3,16
    d400:	39c00404 	addi	r7,r7,16
    d404:	42000404 	addi	r8,r8,16
    d408:	6b400404 	addi	r13,r13,16
    d40c:	63000404 	addi	r12,r12,16
    d410:	5ac00404 	addi	r11,r11,16
    d414:	52800404 	addi	r10,r10,16
    d418:	4a400404 	addi	r9,r9,16
    d41c:	1c3fef1e 	bne	r3,r16,d3dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d3dc>
    d420:	89c00044 	addi	r7,r17,1
    d424:	380e913a 	slli	r7,r7,4
    d428:	310003cc 	andi	r4,r6,15
    d42c:	02c000c4 	movi	r11,3
    d430:	11c7883a 	add	r3,r2,r7
    d434:	29cb883a 	add	r5,r5,r7
    d438:	5900212e 	bgeu	r11,r4,d4c0 <memcpy+0x140>
    d43c:	1813883a 	mov	r9,r3
    d440:	2811883a 	mov	r8,r5
    d444:	200f883a 	mov	r7,r4
    d448:	42800017 	ldw	r10,0(r8)
    d44c:	4a400104 	addi	r9,r9,4
    d450:	39ffff04 	addi	r7,r7,-4
    d454:	4abfff15 	stw	r10,-4(r9)
    d458:	42000104 	addi	r8,r8,4
    d45c:	59fffa36 	bltu	r11,r7,d448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d448>
    d460:	213fff04 	addi	r4,r4,-4
    d464:	2008d0ba 	srli	r4,r4,2
    d468:	318000cc 	andi	r6,r6,3
    d46c:	21000044 	addi	r4,r4,1
    d470:	2109883a 	add	r4,r4,r4
    d474:	2109883a 	add	r4,r4,r4
    d478:	1907883a 	add	r3,r3,r4
    d47c:	290b883a 	add	r5,r5,r4
    d480:	30000626 	beq	r6,zero,d49c <memcpy+0x11c>
    d484:	198d883a 	add	r6,r3,r6
    d488:	29c00003 	ldbu	r7,0(r5)
    d48c:	18c00044 	addi	r3,r3,1
    d490:	29400044 	addi	r5,r5,1
    d494:	19ffffc5 	stb	r7,-1(r3)
    d498:	19bffb1e 	bne	r3,r6,d488 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d488>
    d49c:	dfc00217 	ldw	ra,8(sp)
    d4a0:	dc400117 	ldw	r17,4(sp)
    d4a4:	dc000017 	ldw	r16,0(sp)
    d4a8:	dec00304 	addi	sp,sp,12
    d4ac:	f800283a 	ret
    d4b0:	2007883a 	mov	r3,r4
    d4b4:	003ff206 	br	d480 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d480>
    d4b8:	2007883a 	mov	r3,r4
    d4bc:	003ff106 	br	d484 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d484>
    d4c0:	200d883a 	mov	r6,r4
    d4c4:	003fee06 	br	d480 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d480>

0000d4c8 <memset>:
    d4c8:	20c000cc 	andi	r3,r4,3
    d4cc:	2005883a 	mov	r2,r4
    d4d0:	18004426 	beq	r3,zero,d5e4 <memset+0x11c>
    d4d4:	31ffffc4 	addi	r7,r6,-1
    d4d8:	30004026 	beq	r6,zero,d5dc <memset+0x114>
    d4dc:	2813883a 	mov	r9,r5
    d4e0:	200d883a 	mov	r6,r4
    d4e4:	2007883a 	mov	r3,r4
    d4e8:	00000406 	br	d4fc <memset+0x34>
    d4ec:	3a3fffc4 	addi	r8,r7,-1
    d4f0:	31800044 	addi	r6,r6,1
    d4f4:	38003926 	beq	r7,zero,d5dc <memset+0x114>
    d4f8:	400f883a 	mov	r7,r8
    d4fc:	18c00044 	addi	r3,r3,1
    d500:	32400005 	stb	r9,0(r6)
    d504:	1a0000cc 	andi	r8,r3,3
    d508:	403ff81e 	bne	r8,zero,d4ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d4ec>
    d50c:	010000c4 	movi	r4,3
    d510:	21c02d2e 	bgeu	r4,r7,d5c8 <memset+0x100>
    d514:	29003fcc 	andi	r4,r5,255
    d518:	200c923a 	slli	r6,r4,8
    d51c:	3108b03a 	or	r4,r6,r4
    d520:	200c943a 	slli	r6,r4,16
    d524:	218cb03a 	or	r6,r4,r6
    d528:	010003c4 	movi	r4,15
    d52c:	21c0182e 	bgeu	r4,r7,d590 <memset+0xc8>
    d530:	3b3ffc04 	addi	r12,r7,-16
    d534:	6018d13a 	srli	r12,r12,4
    d538:	1a000104 	addi	r8,r3,4
    d53c:	1ac00204 	addi	r11,r3,8
    d540:	6008913a 	slli	r4,r12,4
    d544:	1a800304 	addi	r10,r3,12
    d548:	1813883a 	mov	r9,r3
    d54c:	21000504 	addi	r4,r4,20
    d550:	1909883a 	add	r4,r3,r4
    d554:	49800015 	stw	r6,0(r9)
    d558:	41800015 	stw	r6,0(r8)
    d55c:	59800015 	stw	r6,0(r11)
    d560:	51800015 	stw	r6,0(r10)
    d564:	42000404 	addi	r8,r8,16
    d568:	4a400404 	addi	r9,r9,16
    d56c:	5ac00404 	addi	r11,r11,16
    d570:	52800404 	addi	r10,r10,16
    d574:	413ff71e 	bne	r8,r4,d554 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d554>
    d578:	63000044 	addi	r12,r12,1
    d57c:	6018913a 	slli	r12,r12,4
    d580:	39c003cc 	andi	r7,r7,15
    d584:	010000c4 	movi	r4,3
    d588:	1b07883a 	add	r3,r3,r12
    d58c:	21c00e2e 	bgeu	r4,r7,d5c8 <memset+0x100>
    d590:	1813883a 	mov	r9,r3
    d594:	3811883a 	mov	r8,r7
    d598:	010000c4 	movi	r4,3
    d59c:	49800015 	stw	r6,0(r9)
    d5a0:	423fff04 	addi	r8,r8,-4
    d5a4:	4a400104 	addi	r9,r9,4
    d5a8:	223ffc36 	bltu	r4,r8,d59c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d59c>
    d5ac:	393fff04 	addi	r4,r7,-4
    d5b0:	2008d0ba 	srli	r4,r4,2
    d5b4:	39c000cc 	andi	r7,r7,3
    d5b8:	21000044 	addi	r4,r4,1
    d5bc:	2109883a 	add	r4,r4,r4
    d5c0:	2109883a 	add	r4,r4,r4
    d5c4:	1907883a 	add	r3,r3,r4
    d5c8:	38000526 	beq	r7,zero,d5e0 <memset+0x118>
    d5cc:	19cf883a 	add	r7,r3,r7
    d5d0:	19400005 	stb	r5,0(r3)
    d5d4:	18c00044 	addi	r3,r3,1
    d5d8:	38fffd1e 	bne	r7,r3,d5d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d5d0>
    d5dc:	f800283a 	ret
    d5e0:	f800283a 	ret
    d5e4:	2007883a 	mov	r3,r4
    d5e8:	300f883a 	mov	r7,r6
    d5ec:	003fc706 	br	d50c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d50c>

0000d5f0 <_printf_r>:
    d5f0:	defffd04 	addi	sp,sp,-12
    d5f4:	2805883a 	mov	r2,r5
    d5f8:	dfc00015 	stw	ra,0(sp)
    d5fc:	d9800115 	stw	r6,4(sp)
    d600:	d9c00215 	stw	r7,8(sp)
    d604:	21400217 	ldw	r5,8(r4)
    d608:	d9c00104 	addi	r7,sp,4
    d60c:	100d883a 	mov	r6,r2
    d610:	000ff100 	call	ff10 <___vfprintf_internal_r>
    d614:	dfc00017 	ldw	ra,0(sp)
    d618:	dec00304 	addi	sp,sp,12
    d61c:	f800283a 	ret

0000d620 <printf>:
    d620:	defffc04 	addi	sp,sp,-16
    d624:	dfc00015 	stw	ra,0(sp)
    d628:	d9400115 	stw	r5,4(sp)
    d62c:	d9800215 	stw	r6,8(sp)
    d630:	d9c00315 	stw	r7,12(sp)
    d634:	008000f4 	movhi	r2,3
    d638:	10a9b404 	addi	r2,r2,-22832
    d63c:	10800017 	ldw	r2,0(r2)
    d640:	200b883a 	mov	r5,r4
    d644:	d9800104 	addi	r6,sp,4
    d648:	11000217 	ldw	r4,8(r2)
    d64c:	00121080 	call	12108 <__vfprintf_internal>
    d650:	dfc00017 	ldw	ra,0(sp)
    d654:	dec00404 	addi	sp,sp,16
    d658:	f800283a 	ret

0000d65c <_puts_r>:
    d65c:	defff604 	addi	sp,sp,-40
    d660:	dc000715 	stw	r16,28(sp)
    d664:	2021883a 	mov	r16,r4
    d668:	2809883a 	mov	r4,r5
    d66c:	dc400815 	stw	r17,32(sp)
    d670:	dfc00915 	stw	ra,36(sp)
    d674:	2823883a 	mov	r17,r5
    d678:	000dca00 	call	dca0 <strlen>
    d67c:	10c00044 	addi	r3,r2,1
    d680:	d8800115 	stw	r2,4(sp)
    d684:	008000f4 	movhi	r2,3
    d688:	10a0b104 	addi	r2,r2,-32060
    d68c:	d8800215 	stw	r2,8(sp)
    d690:	00800044 	movi	r2,1
    d694:	d8800315 	stw	r2,12(sp)
    d698:	00800084 	movi	r2,2
    d69c:	dc400015 	stw	r17,0(sp)
    d6a0:	d8c00615 	stw	r3,24(sp)
    d6a4:	dec00415 	stw	sp,16(sp)
    d6a8:	d8800515 	stw	r2,20(sp)
    d6ac:	80000226 	beq	r16,zero,d6b8 <_puts_r+0x5c>
    d6b0:	80800e17 	ldw	r2,56(r16)
    d6b4:	10001426 	beq	r2,zero,d708 <_puts_r+0xac>
    d6b8:	81400217 	ldw	r5,8(r16)
    d6bc:	2880030b 	ldhu	r2,12(r5)
    d6c0:	10c8000c 	andi	r3,r2,8192
    d6c4:	1800061e 	bne	r3,zero,d6e0 <_puts_r+0x84>
    d6c8:	29001917 	ldw	r4,100(r5)
    d6cc:	00f7ffc4 	movi	r3,-8193
    d6d0:	10880014 	ori	r2,r2,8192
    d6d4:	20c6703a 	and	r3,r4,r3
    d6d8:	2880030d 	sth	r2,12(r5)
    d6dc:	28c01915 	stw	r3,100(r5)
    d6e0:	d9800404 	addi	r6,sp,16
    d6e4:	8009883a 	mov	r4,r16
    d6e8:	00146380 	call	14638 <__sfvwrite_r>
    d6ec:	1000091e 	bne	r2,zero,d714 <_puts_r+0xb8>
    d6f0:	00800284 	movi	r2,10
    d6f4:	dfc00917 	ldw	ra,36(sp)
    d6f8:	dc400817 	ldw	r17,32(sp)
    d6fc:	dc000717 	ldw	r16,28(sp)
    d700:	dec00a04 	addi	sp,sp,40
    d704:	f800283a 	ret
    d708:	8009883a 	mov	r4,r16
    d70c:	00141b40 	call	141b4 <__sinit>
    d710:	003fe906 	br	d6b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d6b8>
    d714:	00bfffc4 	movi	r2,-1
    d718:	003ff606 	br	d6f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d6f4>

0000d71c <puts>:
    d71c:	008000f4 	movhi	r2,3
    d720:	10a9b404 	addi	r2,r2,-22832
    d724:	200b883a 	mov	r5,r4
    d728:	11000017 	ldw	r4,0(r2)
    d72c:	000d65c1 	jmpi	d65c <_puts_r>

0000d730 <srand>:
    d730:	008000f4 	movhi	r2,3
    d734:	10a9b404 	addi	r2,r2,-22832
    d738:	10800017 	ldw	r2,0(r2)
    d73c:	11002915 	stw	r4,164(r2)
    d740:	10002a15 	stw	zero,168(r2)
    d744:	f800283a 	ret

0000d748 <rand>:
    d748:	008000f4 	movhi	r2,3
    d74c:	10a9b404 	addi	r2,r2,-22832
    d750:	11c00017 	ldw	r7,0(r2)
    d754:	01532574 	movhi	r5,19605
    d758:	019614b4 	movhi	r6,22610
    d75c:	38c02917 	ldw	r3,164(r7)
    d760:	39002a17 	ldw	r4,168(r7)
    d764:	295fcb44 	addi	r5,r5,32557
    d768:	31bd0b44 	addi	r6,r6,-3027
    d76c:	1951383a 	mul	r8,r3,r5
    d770:	2149383a 	mul	r4,r4,r5
    d774:	198d383a 	mul	r6,r3,r6
    d778:	194a383a 	mulxuu	r5,r3,r5
    d77c:	40800044 	addi	r2,r8,1
    d780:	2187883a 	add	r3,r4,r6
    d784:	1949883a 	add	r4,r3,r5
    d788:	38802915 	stw	r2,164(r7)
    d78c:	1207803a 	cmpltu	r3,r2,r8
    d790:	00a00034 	movhi	r2,32768
    d794:	1907883a 	add	r3,r3,r4
    d798:	10bfffc4 	addi	r2,r2,-1
    d79c:	38c02a15 	stw	r3,168(r7)
    d7a0:	1884703a 	and	r2,r3,r2
    d7a4:	f800283a 	ret

0000d7a8 <_sbrk_r>:
    d7a8:	defffd04 	addi	sp,sp,-12
    d7ac:	dc000015 	stw	r16,0(sp)
    d7b0:	040000f4 	movhi	r16,3
    d7b4:	dc400115 	stw	r17,4(sp)
    d7b8:	8431db04 	addi	r16,r16,-14484
    d7bc:	2023883a 	mov	r17,r4
    d7c0:	2809883a 	mov	r4,r5
    d7c4:	dfc00215 	stw	ra,8(sp)
    d7c8:	80000015 	stw	zero,0(r16)
    d7cc:	001afe80 	call	1afe8 <sbrk>
    d7d0:	00ffffc4 	movi	r3,-1
    d7d4:	10c00526 	beq	r2,r3,d7ec <_sbrk_r+0x44>
    d7d8:	dfc00217 	ldw	ra,8(sp)
    d7dc:	dc400117 	ldw	r17,4(sp)
    d7e0:	dc000017 	ldw	r16,0(sp)
    d7e4:	dec00304 	addi	sp,sp,12
    d7e8:	f800283a 	ret
    d7ec:	80c00017 	ldw	r3,0(r16)
    d7f0:	183ff926 	beq	r3,zero,d7d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d7d8>
    d7f4:	88c00015 	stw	r3,0(r17)
    d7f8:	003ff706 	br	d7d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d7d8>

0000d7fc <_init_signal_r>:
    d7fc:	2080b717 	ldw	r2,732(r4)
    d800:	10000226 	beq	r2,zero,d80c <_init_signal_r+0x10>
    d804:	0005883a 	mov	r2,zero
    d808:	f800283a 	ret
    d80c:	defffe04 	addi	sp,sp,-8
    d810:	01402004 	movi	r5,128
    d814:	dc000015 	stw	r16,0(sp)
    d818:	dfc00115 	stw	ra,4(sp)
    d81c:	2021883a 	mov	r16,r4
    d820:	000cb740 	call	cb74 <_malloc_r>
    d824:	8080b715 	stw	r2,732(r16)
    d828:	10000d26 	beq	r2,zero,d860 <_init_signal_r+0x64>
    d82c:	0007883a 	mov	r3,zero
    d830:	01002004 	movi	r4,128
    d834:	00000106 	br	d83c <_init_signal_r+0x40>
    d838:	8080b717 	ldw	r2,732(r16)
    d83c:	10c5883a 	add	r2,r2,r3
    d840:	10000015 	stw	zero,0(r2)
    d844:	18c00104 	addi	r3,r3,4
    d848:	193ffb1e 	bne	r3,r4,d838 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d838>
    d84c:	0005883a 	mov	r2,zero
    d850:	dfc00117 	ldw	ra,4(sp)
    d854:	dc000017 	ldw	r16,0(sp)
    d858:	dec00204 	addi	sp,sp,8
    d85c:	f800283a 	ret
    d860:	00bfffc4 	movi	r2,-1
    d864:	003ffa06 	br	d850 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d850>

0000d868 <_signal_r>:
    d868:	00c007c4 	movi	r3,31
    d86c:	19401536 	bltu	r3,r5,d8c4 <_signal_r+0x5c>
    d870:	2080b717 	ldw	r2,732(r4)
    d874:	defffc04 	addi	sp,sp,-16
    d878:	dc800215 	stw	r18,8(sp)
    d87c:	dc400115 	stw	r17,4(sp)
    d880:	dc000015 	stw	r16,0(sp)
    d884:	dfc00315 	stw	ra,12(sp)
    d888:	3023883a 	mov	r17,r6
    d88c:	2021883a 	mov	r16,r4
    d890:	2825883a 	mov	r18,r5
    d894:	10000f26 	beq	r2,zero,d8d4 <_signal_r+0x6c>
    d898:	948b883a 	add	r5,r18,r18
    d89c:	294b883a 	add	r5,r5,r5
    d8a0:	114b883a 	add	r5,r2,r5
    d8a4:	28800017 	ldw	r2,0(r5)
    d8a8:	2c400015 	stw	r17,0(r5)
    d8ac:	dfc00317 	ldw	ra,12(sp)
    d8b0:	dc800217 	ldw	r18,8(sp)
    d8b4:	dc400117 	ldw	r17,4(sp)
    d8b8:	dc000017 	ldw	r16,0(sp)
    d8bc:	dec00404 	addi	sp,sp,16
    d8c0:	f800283a 	ret
    d8c4:	00c00584 	movi	r3,22
    d8c8:	20c00015 	stw	r3,0(r4)
    d8cc:	00bfffc4 	movi	r2,-1
    d8d0:	f800283a 	ret
    d8d4:	000d7fc0 	call	d7fc <_init_signal_r>
    d8d8:	1000021e 	bne	r2,zero,d8e4 <_signal_r+0x7c>
    d8dc:	8080b717 	ldw	r2,732(r16)
    d8e0:	003fed06 	br	d898 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d898>
    d8e4:	00bfffc4 	movi	r2,-1
    d8e8:	003ff006 	br	d8ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8ac>

0000d8ec <_raise_r>:
    d8ec:	008007c4 	movi	r2,31
    d8f0:	11402936 	bltu	r2,r5,d998 <_raise_r+0xac>
    d8f4:	20c0b717 	ldw	r3,732(r4)
    d8f8:	defffd04 	addi	sp,sp,-12
    d8fc:	dc400115 	stw	r17,4(sp)
    d900:	dc000015 	stw	r16,0(sp)
    d904:	dfc00215 	stw	ra,8(sp)
    d908:	2021883a 	mov	r16,r4
    d90c:	2823883a 	mov	r17,r5
    d910:	18001726 	beq	r3,zero,d970 <_raise_r+0x84>
    d914:	2945883a 	add	r2,r5,r5
    d918:	1085883a 	add	r2,r2,r2
    d91c:	1887883a 	add	r3,r3,r2
    d920:	19800017 	ldw	r6,0(r3)
    d924:	30001226 	beq	r6,zero,d970 <_raise_r+0x84>
    d928:	00800044 	movi	r2,1
    d92c:	30800e26 	beq	r6,r2,d968 <_raise_r+0x7c>
    d930:	013fffc4 	movi	r4,-1
    d934:	31000926 	beq	r6,r4,d95c <_raise_r+0x70>
    d938:	18000015 	stw	zero,0(r3)
    d93c:	2809883a 	mov	r4,r5
    d940:	303ee83a 	callr	r6
    d944:	0005883a 	mov	r2,zero
    d948:	dfc00217 	ldw	ra,8(sp)
    d94c:	dc400117 	ldw	r17,4(sp)
    d950:	dc000017 	ldw	r16,0(sp)
    d954:	dec00304 	addi	sp,sp,12
    d958:	f800283a 	ret
    d95c:	00c00584 	movi	r3,22
    d960:	80c00015 	stw	r3,0(r16)
    d964:	003ff806 	br	d948 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d948>
    d968:	0005883a 	mov	r2,zero
    d96c:	003ff606 	br	d948 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d948>
    d970:	8009883a 	mov	r4,r16
    d974:	000dafc0 	call	dafc <_getpid_r>
    d978:	880d883a 	mov	r6,r17
    d97c:	100b883a 	mov	r5,r2
    d980:	8009883a 	mov	r4,r16
    d984:	dfc00217 	ldw	ra,8(sp)
    d988:	dc400117 	ldw	r17,4(sp)
    d98c:	dc000017 	ldw	r16,0(sp)
    d990:	dec00304 	addi	sp,sp,12
    d994:	000daa01 	jmpi	daa0 <_kill_r>
    d998:	00800584 	movi	r2,22
    d99c:	20800015 	stw	r2,0(r4)
    d9a0:	00bfffc4 	movi	r2,-1
    d9a4:	f800283a 	ret

0000d9a8 <__sigtramp_r>:
    d9a8:	008007c4 	movi	r2,31
    d9ac:	11402436 	bltu	r2,r5,da40 <__sigtramp_r+0x98>
    d9b0:	20c0b717 	ldw	r3,732(r4)
    d9b4:	defffd04 	addi	sp,sp,-12
    d9b8:	dc400115 	stw	r17,4(sp)
    d9bc:	dc000015 	stw	r16,0(sp)
    d9c0:	dfc00215 	stw	ra,8(sp)
    d9c4:	2021883a 	mov	r16,r4
    d9c8:	2823883a 	mov	r17,r5
    d9cc:	18001826 	beq	r3,zero,da30 <__sigtramp_r+0x88>
    d9d0:	8c45883a 	add	r2,r17,r17
    d9d4:	1085883a 	add	r2,r2,r2
    d9d8:	1885883a 	add	r2,r3,r2
    d9dc:	10c00017 	ldw	r3,0(r2)
    d9e0:	18001126 	beq	r3,zero,da28 <__sigtramp_r+0x80>
    d9e4:	013fffc4 	movi	r4,-1
    d9e8:	19000d26 	beq	r3,r4,da20 <__sigtramp_r+0x78>
    d9ec:	01000044 	movi	r4,1
    d9f0:	19000926 	beq	r3,r4,da18 <__sigtramp_r+0x70>
    d9f4:	10000015 	stw	zero,0(r2)
    d9f8:	8809883a 	mov	r4,r17
    d9fc:	183ee83a 	callr	r3
    da00:	0005883a 	mov	r2,zero
    da04:	dfc00217 	ldw	ra,8(sp)
    da08:	dc400117 	ldw	r17,4(sp)
    da0c:	dc000017 	ldw	r16,0(sp)
    da10:	dec00304 	addi	sp,sp,12
    da14:	f800283a 	ret
    da18:	008000c4 	movi	r2,3
    da1c:	003ff906 	br	da04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da04>
    da20:	00800084 	movi	r2,2
    da24:	003ff706 	br	da04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da04>
    da28:	00800044 	movi	r2,1
    da2c:	003ff506 	br	da04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da04>
    da30:	000d7fc0 	call	d7fc <_init_signal_r>
    da34:	1000041e 	bne	r2,zero,da48 <__sigtramp_r+0xa0>
    da38:	80c0b717 	ldw	r3,732(r16)
    da3c:	003fe406 	br	d9d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d9d0>
    da40:	00bfffc4 	movi	r2,-1
    da44:	f800283a 	ret
    da48:	00bfffc4 	movi	r2,-1
    da4c:	003fed06 	br	da04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da04>

0000da50 <raise>:
    da50:	008000f4 	movhi	r2,3
    da54:	10a9b404 	addi	r2,r2,-22832
    da58:	200b883a 	mov	r5,r4
    da5c:	11000017 	ldw	r4,0(r2)
    da60:	000d8ec1 	jmpi	d8ec <_raise_r>

0000da64 <signal>:
    da64:	008000f4 	movhi	r2,3
    da68:	10a9b404 	addi	r2,r2,-22832
    da6c:	280d883a 	mov	r6,r5
    da70:	200b883a 	mov	r5,r4
    da74:	11000017 	ldw	r4,0(r2)
    da78:	000d8681 	jmpi	d868 <_signal_r>

0000da7c <_init_signal>:
    da7c:	008000f4 	movhi	r2,3
    da80:	10a9b404 	addi	r2,r2,-22832
    da84:	11000017 	ldw	r4,0(r2)
    da88:	000d7fc1 	jmpi	d7fc <_init_signal_r>

0000da8c <__sigtramp>:
    da8c:	008000f4 	movhi	r2,3
    da90:	10a9b404 	addi	r2,r2,-22832
    da94:	200b883a 	mov	r5,r4
    da98:	11000017 	ldw	r4,0(r2)
    da9c:	000d9a81 	jmpi	d9a8 <__sigtramp_r>

0000daa0 <_kill_r>:
    daa0:	defffd04 	addi	sp,sp,-12
    daa4:	2805883a 	mov	r2,r5
    daa8:	dc000015 	stw	r16,0(sp)
    daac:	040000f4 	movhi	r16,3
    dab0:	dc400115 	stw	r17,4(sp)
    dab4:	8431db04 	addi	r16,r16,-14484
    dab8:	2023883a 	mov	r17,r4
    dabc:	300b883a 	mov	r5,r6
    dac0:	1009883a 	mov	r4,r2
    dac4:	dfc00215 	stw	ra,8(sp)
    dac8:	80000015 	stw	zero,0(r16)
    dacc:	001aa640 	call	1aa64 <kill>
    dad0:	00ffffc4 	movi	r3,-1
    dad4:	10c00526 	beq	r2,r3,daec <_kill_r+0x4c>
    dad8:	dfc00217 	ldw	ra,8(sp)
    dadc:	dc400117 	ldw	r17,4(sp)
    dae0:	dc000017 	ldw	r16,0(sp)
    dae4:	dec00304 	addi	sp,sp,12
    dae8:	f800283a 	ret
    daec:	80c00017 	ldw	r3,0(r16)
    daf0:	183ff926 	beq	r3,zero,dad8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dad8>
    daf4:	88c00015 	stw	r3,0(r17)
    daf8:	003ff706 	br	dad8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dad8>

0000dafc <_getpid_r>:
    dafc:	001a9281 	jmpi	1a928 <getpid>

0000db00 <_sprintf_r>:
    db00:	deffe404 	addi	sp,sp,-112
    db04:	2807883a 	mov	r3,r5
    db08:	dfc01a15 	stw	ra,104(sp)
    db0c:	d9c01b15 	stw	r7,108(sp)
    db10:	00a00034 	movhi	r2,32768
    db14:	10bfffc4 	addi	r2,r2,-1
    db18:	02008204 	movi	r8,520
    db1c:	d8800215 	stw	r2,8(sp)
    db20:	d8800515 	stw	r2,20(sp)
    db24:	d9c01b04 	addi	r7,sp,108
    db28:	d80b883a 	mov	r5,sp
    db2c:	00bfffc4 	movi	r2,-1
    db30:	d8c00015 	stw	r3,0(sp)
    db34:	d8c00415 	stw	r3,16(sp)
    db38:	da00030d 	sth	r8,12(sp)
    db3c:	d880038d 	sth	r2,14(sp)
    db40:	000dd380 	call	dd38 <___svfprintf_internal_r>
    db44:	d8c00017 	ldw	r3,0(sp)
    db48:	18000005 	stb	zero,0(r3)
    db4c:	dfc01a17 	ldw	ra,104(sp)
    db50:	dec01c04 	addi	sp,sp,112
    db54:	f800283a 	ret

0000db58 <sprintf>:
    db58:	deffe304 	addi	sp,sp,-116
    db5c:	2007883a 	mov	r3,r4
    db60:	dfc01a15 	stw	ra,104(sp)
    db64:	d9801b15 	stw	r6,108(sp)
    db68:	d9c01c15 	stw	r7,112(sp)
    db6c:	010000f4 	movhi	r4,3
    db70:	2129b404 	addi	r4,r4,-22832
    db74:	21000017 	ldw	r4,0(r4)
    db78:	00a00034 	movhi	r2,32768
    db7c:	10bfffc4 	addi	r2,r2,-1
    db80:	280d883a 	mov	r6,r5
    db84:	02008204 	movi	r8,520
    db88:	d8800215 	stw	r2,8(sp)
    db8c:	d8800515 	stw	r2,20(sp)
    db90:	d9c01b04 	addi	r7,sp,108
    db94:	d80b883a 	mov	r5,sp
    db98:	00bfffc4 	movi	r2,-1
    db9c:	d8c00015 	stw	r3,0(sp)
    dba0:	d8c00415 	stw	r3,16(sp)
    dba4:	da00030d 	sth	r8,12(sp)
    dba8:	d880038d 	sth	r2,14(sp)
    dbac:	000dd380 	call	dd38 <___svfprintf_internal_r>
    dbb0:	d8c00017 	ldw	r3,0(sp)
    dbb4:	18000005 	stb	zero,0(r3)
    dbb8:	dfc01a17 	ldw	ra,104(sp)
    dbbc:	dec01d04 	addi	sp,sp,116
    dbc0:	f800283a 	ret

0000dbc4 <strcmp>:
    dbc4:	2144b03a 	or	r2,r4,r5
    dbc8:	108000cc 	andi	r2,r2,3
    dbcc:	1000171e 	bne	r2,zero,dc2c <strcmp+0x68>
    dbd0:	20800017 	ldw	r2,0(r4)
    dbd4:	28c00017 	ldw	r3,0(r5)
    dbd8:	10c0141e 	bne	r2,r3,dc2c <strcmp+0x68>
    dbdc:	027fbff4 	movhi	r9,65279
    dbe0:	4a7fbfc4 	addi	r9,r9,-257
    dbe4:	0086303a 	nor	r3,zero,r2
    dbe8:	02202074 	movhi	r8,32897
    dbec:	1245883a 	add	r2,r2,r9
    dbf0:	42202004 	addi	r8,r8,-32640
    dbf4:	10c4703a 	and	r2,r2,r3
    dbf8:	1204703a 	and	r2,r2,r8
    dbfc:	10000226 	beq	r2,zero,dc08 <strcmp+0x44>
    dc00:	00002306 	br	dc90 <strcmp+0xcc>
    dc04:	1000221e 	bne	r2,zero,dc90 <strcmp+0xcc>
    dc08:	21000104 	addi	r4,r4,4
    dc0c:	20c00017 	ldw	r3,0(r4)
    dc10:	29400104 	addi	r5,r5,4
    dc14:	29800017 	ldw	r6,0(r5)
    dc18:	1a4f883a 	add	r7,r3,r9
    dc1c:	00c4303a 	nor	r2,zero,r3
    dc20:	3884703a 	and	r2,r7,r2
    dc24:	1204703a 	and	r2,r2,r8
    dc28:	19bff626 	beq	r3,r6,dc04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dc04>
    dc2c:	20800003 	ldbu	r2,0(r4)
    dc30:	10c03fcc 	andi	r3,r2,255
    dc34:	18c0201c 	xori	r3,r3,128
    dc38:	18ffe004 	addi	r3,r3,-128
    dc3c:	18000c26 	beq	r3,zero,dc70 <strcmp+0xac>
    dc40:	29800007 	ldb	r6,0(r5)
    dc44:	19800326 	beq	r3,r6,dc54 <strcmp+0x90>
    dc48:	00001306 	br	dc98 <strcmp+0xd4>
    dc4c:	29800007 	ldb	r6,0(r5)
    dc50:	11800b1e 	bne	r2,r6,dc80 <strcmp+0xbc>
    dc54:	21000044 	addi	r4,r4,1
    dc58:	20c00003 	ldbu	r3,0(r4)
    dc5c:	29400044 	addi	r5,r5,1
    dc60:	18803fcc 	andi	r2,r3,255
    dc64:	1080201c 	xori	r2,r2,128
    dc68:	10bfe004 	addi	r2,r2,-128
    dc6c:	103ff71e 	bne	r2,zero,dc4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dc4c>
    dc70:	0007883a 	mov	r3,zero
    dc74:	28800003 	ldbu	r2,0(r5)
    dc78:	1885c83a 	sub	r2,r3,r2
    dc7c:	f800283a 	ret
    dc80:	28800003 	ldbu	r2,0(r5)
    dc84:	18c03fcc 	andi	r3,r3,255
    dc88:	1885c83a 	sub	r2,r3,r2
    dc8c:	f800283a 	ret
    dc90:	0005883a 	mov	r2,zero
    dc94:	f800283a 	ret
    dc98:	10c03fcc 	andi	r3,r2,255
    dc9c:	003ff506 	br	dc74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dc74>

0000dca0 <strlen>:
    dca0:	208000cc 	andi	r2,r4,3
    dca4:	10002026 	beq	r2,zero,dd28 <strlen+0x88>
    dca8:	20800007 	ldb	r2,0(r4)
    dcac:	10002026 	beq	r2,zero,dd30 <strlen+0x90>
    dcb0:	2005883a 	mov	r2,r4
    dcb4:	00000206 	br	dcc0 <strlen+0x20>
    dcb8:	10c00007 	ldb	r3,0(r2)
    dcbc:	18001826 	beq	r3,zero,dd20 <strlen+0x80>
    dcc0:	10800044 	addi	r2,r2,1
    dcc4:	10c000cc 	andi	r3,r2,3
    dcc8:	183ffb1e 	bne	r3,zero,dcb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dcb8>
    dccc:	10c00017 	ldw	r3,0(r2)
    dcd0:	01ffbff4 	movhi	r7,65279
    dcd4:	39ffbfc4 	addi	r7,r7,-257
    dcd8:	00ca303a 	nor	r5,zero,r3
    dcdc:	01a02074 	movhi	r6,32897
    dce0:	19c7883a 	add	r3,r3,r7
    dce4:	31a02004 	addi	r6,r6,-32640
    dce8:	1946703a 	and	r3,r3,r5
    dcec:	1986703a 	and	r3,r3,r6
    dcf0:	1800091e 	bne	r3,zero,dd18 <strlen+0x78>
    dcf4:	10800104 	addi	r2,r2,4
    dcf8:	10c00017 	ldw	r3,0(r2)
    dcfc:	19cb883a 	add	r5,r3,r7
    dd00:	00c6303a 	nor	r3,zero,r3
    dd04:	28c6703a 	and	r3,r5,r3
    dd08:	1986703a 	and	r3,r3,r6
    dd0c:	183ff926 	beq	r3,zero,dcf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dcf4>
    dd10:	00000106 	br	dd18 <strlen+0x78>
    dd14:	10800044 	addi	r2,r2,1
    dd18:	10c00007 	ldb	r3,0(r2)
    dd1c:	183ffd1e 	bne	r3,zero,dd14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dd14>
    dd20:	1105c83a 	sub	r2,r2,r4
    dd24:	f800283a 	ret
    dd28:	2005883a 	mov	r2,r4
    dd2c:	003fe706 	br	dccc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dccc>
    dd30:	0005883a 	mov	r2,zero
    dd34:	f800283a 	ret

0000dd38 <___svfprintf_internal_r>:
    dd38:	deffb704 	addi	sp,sp,-292
    dd3c:	dfc04815 	stw	ra,288(sp)
    dd40:	ddc04615 	stw	r23,280(sp)
    dd44:	d9402c15 	stw	r5,176(sp)
    dd48:	d9003915 	stw	r4,228(sp)
    dd4c:	302f883a 	mov	r23,r6
    dd50:	d9c02d15 	stw	r7,180(sp)
    dd54:	df004715 	stw	fp,284(sp)
    dd58:	dd804515 	stw	r22,276(sp)
    dd5c:	dd404415 	stw	r21,272(sp)
    dd60:	dd004315 	stw	r20,268(sp)
    dd64:	dcc04215 	stw	r19,264(sp)
    dd68:	dc804115 	stw	r18,260(sp)
    dd6c:	dc404015 	stw	r17,256(sp)
    dd70:	dc003f15 	stw	r16,252(sp)
    dd74:	0014d280 	call	14d28 <_localeconv_r>
    dd78:	10800017 	ldw	r2,0(r2)
    dd7c:	1009883a 	mov	r4,r2
    dd80:	d8803415 	stw	r2,208(sp)
    dd84:	000dca00 	call	dca0 <strlen>
    dd88:	d8c02c17 	ldw	r3,176(sp)
    dd8c:	d8803815 	stw	r2,224(sp)
    dd90:	1880030b 	ldhu	r2,12(r3)
    dd94:	1080200c 	andi	r2,r2,128
    dd98:	10000226 	beq	r2,zero,dda4 <___svfprintf_internal_r+0x6c>
    dd9c:	18800417 	ldw	r2,16(r3)
    dda0:	10067f26 	beq	r2,zero,f7a0 <___svfprintf_internal_r+0x1a68>
    dda4:	dcc03917 	ldw	r19,228(sp)
    dda8:	d8c00404 	addi	r3,sp,16
    ddac:	054000f4 	movhi	r21,3
    ddb0:	d9001e04 	addi	r4,sp,120
    ddb4:	ad60c284 	addi	r21,r21,-31990
    ddb8:	d8c01e15 	stw	r3,120(sp)
    ddbc:	d8002015 	stw	zero,128(sp)
    ddc0:	d8001f15 	stw	zero,124(sp)
    ddc4:	d8003315 	stw	zero,204(sp)
    ddc8:	d8003615 	stw	zero,216(sp)
    ddcc:	d8003715 	stw	zero,220(sp)
    ddd0:	1811883a 	mov	r8,r3
    ddd4:	d8003a15 	stw	zero,232(sp)
    ddd8:	d8003b15 	stw	zero,236(sp)
    dddc:	d8002f15 	stw	zero,188(sp)
    dde0:	d9002815 	stw	r4,160(sp)
    dde4:	b8800007 	ldb	r2,0(r23)
    dde8:	10026726 	beq	r2,zero,e788 <___svfprintf_internal_r+0xa50>
    ddec:	00c00944 	movi	r3,37
    ddf0:	b821883a 	mov	r16,r23
    ddf4:	10c0021e 	bne	r2,r3,de00 <___svfprintf_internal_r+0xc8>
    ddf8:	00001406 	br	de4c <___svfprintf_internal_r+0x114>
    ddfc:	10c00326 	beq	r2,r3,de0c <___svfprintf_internal_r+0xd4>
    de00:	84000044 	addi	r16,r16,1
    de04:	80800007 	ldb	r2,0(r16)
    de08:	103ffc1e 	bne	r2,zero,ddfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ddfc>
    de0c:	85e3c83a 	sub	r17,r16,r23
    de10:	88000e26 	beq	r17,zero,de4c <___svfprintf_internal_r+0x114>
    de14:	d8c02017 	ldw	r3,128(sp)
    de18:	d8801f17 	ldw	r2,124(sp)
    de1c:	45c00015 	stw	r23,0(r8)
    de20:	1c47883a 	add	r3,r3,r17
    de24:	10800044 	addi	r2,r2,1
    de28:	d8c02015 	stw	r3,128(sp)
    de2c:	44400115 	stw	r17,4(r8)
    de30:	d8801f15 	stw	r2,124(sp)
    de34:	00c001c4 	movi	r3,7
    de38:	18809716 	blt	r3,r2,e098 <___svfprintf_internal_r+0x360>
    de3c:	42000204 	addi	r8,r8,8
    de40:	d9402f17 	ldw	r5,188(sp)
    de44:	2c4b883a 	add	r5,r5,r17
    de48:	d9402f15 	stw	r5,188(sp)
    de4c:	80800007 	ldb	r2,0(r16)
    de50:	10009826 	beq	r2,zero,e0b4 <___svfprintf_internal_r+0x37c>
    de54:	84400047 	ldb	r17,1(r16)
    de58:	00bfffc4 	movi	r2,-1
    de5c:	85c00044 	addi	r23,r16,1
    de60:	d8002785 	stb	zero,158(sp)
    de64:	0007883a 	mov	r3,zero
    de68:	000f883a 	mov	r7,zero
    de6c:	d8802915 	stw	r2,164(sp)
    de70:	d8003115 	stw	zero,196(sp)
    de74:	0025883a 	mov	r18,zero
    de78:	01401604 	movi	r5,88
    de7c:	01800244 	movi	r6,9
    de80:	02800a84 	movi	r10,42
    de84:	02401b04 	movi	r9,108
    de88:	bdc00044 	addi	r23,r23,1
    de8c:	88bff804 	addi	r2,r17,-32
    de90:	2882f036 	bltu	r5,r2,ea54 <___svfprintf_internal_r+0xd1c>
    de94:	100490ba 	slli	r2,r2,2
    de98:	01000074 	movhi	r4,1
    de9c:	2137ab04 	addi	r4,r4,-8532
    dea0:	1105883a 	add	r2,r2,r4
    dea4:	10800017 	ldw	r2,0(r2)
    dea8:	1000683a 	jmp	r2
    deac:	0000e9bc 	xorhi	zero,zero,934
    deb0:	0000ea54 	movui	zero,937
    deb4:	0000ea54 	movui	zero,937
    deb8:	0000e9b0 	cmpltui	zero,zero,934
    debc:	0000ea54 	movui	zero,937
    dec0:	0000ea54 	movui	zero,937
    dec4:	0000ea54 	movui	zero,937
    dec8:	0000ea54 	movui	zero,937
    decc:	0000ea54 	movui	zero,937
    ded0:	0000ea54 	movui	zero,937
    ded4:	0000e110 	cmplti	zero,zero,900
    ded8:	0000e8ec 	andhi	zero,zero,931
    dedc:	0000ea54 	movui	zero,937
    dee0:	0000e020 	cmpeqi	zero,zero,896
    dee4:	0000e138 	rdprs	zero,zero,900
    dee8:	0000ea54 	movui	zero,937
    deec:	0000e1ac 	andhi	zero,zero,902
    def0:	0000e178 	rdprs	zero,zero,901
    def4:	0000e178 	rdprs	zero,zero,901
    def8:	0000e178 	rdprs	zero,zero,901
    defc:	0000e178 	rdprs	zero,zero,901
    df00:	0000e178 	rdprs	zero,zero,901
    df04:	0000e178 	rdprs	zero,zero,901
    df08:	0000e178 	rdprs	zero,zero,901
    df0c:	0000e178 	rdprs	zero,zero,901
    df10:	0000e178 	rdprs	zero,zero,901
    df14:	0000ea54 	movui	zero,937
    df18:	0000ea54 	movui	zero,937
    df1c:	0000ea54 	movui	zero,937
    df20:	0000ea54 	movui	zero,937
    df24:	0000ea54 	movui	zero,937
    df28:	0000ea54 	movui	zero,937
    df2c:	0000ea54 	movui	zero,937
    df30:	0000ea54 	movui	zero,937
    df34:	0000ea54 	movui	zero,937
    df38:	0000ea54 	movui	zero,937
    df3c:	0000e264 	muli	zero,zero,905
    df40:	0000e1b8 	rdprs	zero,zero,902
    df44:	0000ea54 	movui	zero,937
    df48:	0000e1b8 	rdprs	zero,zero,902
    df4c:	0000ea54 	movui	zero,937
    df50:	0000ea54 	movui	zero,937
    df54:	0000ea54 	movui	zero,937
    df58:	0000ea54 	movui	zero,937
    df5c:	0000e258 	cmpnei	zero,zero,905
    df60:	0000ea54 	movui	zero,937
    df64:	0000ea54 	movui	zero,937
    df68:	0000e320 	cmpeqi	zero,zero,908
    df6c:	0000ea54 	movui	zero,937
    df70:	0000ea54 	movui	zero,937
    df74:	0000ea54 	movui	zero,937
    df78:	0000ea54 	movui	zero,937
    df7c:	0000ea54 	movui	zero,937
    df80:	0000e790 	cmplti	zero,zero,926
    df84:	0000ea54 	movui	zero,937
    df88:	0000ea54 	movui	zero,937
    df8c:	0000e7f0 	cmpltui	zero,zero,927
    df90:	0000ea54 	movui	zero,937
    df94:	0000ea54 	movui	zero,937
    df98:	0000ea54 	movui	zero,937
    df9c:	0000ea54 	movui	zero,937
    dfa0:	0000ea54 	movui	zero,937
    dfa4:	0000ea54 	movui	zero,937
    dfa8:	0000ea54 	movui	zero,937
    dfac:	0000ea54 	movui	zero,937
    dfb0:	0000ea54 	movui	zero,937
    dfb4:	0000ea54 	movui	zero,937
    dfb8:	0000e8a0 	cmpeqi	zero,zero,930
    dfbc:	0000e9dc 	xori	zero,zero,935
    dfc0:	0000e1b8 	rdprs	zero,zero,902
    dfc4:	0000e1b8 	rdprs	zero,zero,902
    dfc8:	0000e1b8 	rdprs	zero,zero,902
    dfcc:	0000ea30 	cmpltui	zero,zero,936
    dfd0:	0000e9dc 	xori	zero,zero,935
    dfd4:	0000ea54 	movui	zero,937
    dfd8:	0000ea54 	movui	zero,937
    dfdc:	0000e9ec 	andhi	zero,zero,935
    dfe0:	0000ea54 	movui	zero,937
    dfe4:	0000e9fc 	xorhi	zero,zero,935
    dfe8:	0000e8dc 	xori	zero,zero,931
    dfec:	0000e02c 	andhi	zero,zero,896
    dff0:	0000e8fc 	xorhi	zero,zero,931
    dff4:	0000ea54 	movui	zero,937
    dff8:	0000e908 	cmpgei	zero,zero,932
    dffc:	0000ea54 	movui	zero,937
    e000:	0000e964 	muli	zero,zero,933
    e004:	0000ea54 	movui	zero,937
    e008:	0000ea54 	movui	zero,937
    e00c:	0000e974 	movhi	zero,933
    e010:	d9003117 	ldw	r4,196(sp)
    e014:	d8802d15 	stw	r2,180(sp)
    e018:	0109c83a 	sub	r4,zero,r4
    e01c:	d9003115 	stw	r4,196(sp)
    e020:	94800114 	ori	r18,r18,4
    e024:	bc400007 	ldb	r17,0(r23)
    e028:	003f9706 	br	de88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de88>
    e02c:	00800c04 	movi	r2,48
    e030:	d9002d17 	ldw	r4,180(sp)
    e034:	d9402917 	ldw	r5,164(sp)
    e038:	d8802705 	stb	r2,156(sp)
    e03c:	00801e04 	movi	r2,120
    e040:	d8802745 	stb	r2,157(sp)
    e044:	d8002785 	stb	zero,158(sp)
    e048:	20c00104 	addi	r3,r4,4
    e04c:	25000017 	ldw	r20,0(r4)
    e050:	002d883a 	mov	r22,zero
    e054:	90800094 	ori	r2,r18,2
    e058:	28028616 	blt	r5,zero,ea74 <___svfprintf_internal_r+0xd3c>
    e05c:	00bfdfc4 	movi	r2,-129
    e060:	90a4703a 	and	r18,r18,r2
    e064:	d8c02d15 	stw	r3,180(sp)
    e068:	94800094 	ori	r18,r18,2
    e06c:	a002731e 	bne	r20,zero,ea3c <___svfprintf_internal_r+0xd04>
    e070:	008000f4 	movhi	r2,3
    e074:	10a0bb04 	addi	r2,r2,-32020
    e078:	d8803a15 	stw	r2,232(sp)
    e07c:	04401e04 	movi	r17,120
    e080:	d8c02917 	ldw	r3,164(sp)
    e084:	0039883a 	mov	fp,zero
    e088:	1801d526 	beq	r3,zero,e7e0 <___svfprintf_internal_r+0xaa8>
    e08c:	0029883a 	mov	r20,zero
    e090:	002d883a 	mov	r22,zero
    e094:	0001f106 	br	e85c <___svfprintf_internal_r+0xb24>
    e098:	d9402c17 	ldw	r5,176(sp)
    e09c:	d9801e04 	addi	r6,sp,120
    e0a0:	9809883a 	mov	r4,r19
    e0a4:	00167f00 	call	167f0 <__ssprint_r>
    e0a8:	1000081e 	bne	r2,zero,e0cc <___svfprintf_internal_r+0x394>
    e0ac:	da000404 	addi	r8,sp,16
    e0b0:	003f6306 	br	de40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de40>
    e0b4:	d8802017 	ldw	r2,128(sp)
    e0b8:	10000426 	beq	r2,zero,e0cc <___svfprintf_internal_r+0x394>
    e0bc:	d9402c17 	ldw	r5,176(sp)
    e0c0:	d9003917 	ldw	r4,228(sp)
    e0c4:	d9801e04 	addi	r6,sp,120
    e0c8:	00167f00 	call	167f0 <__ssprint_r>
    e0cc:	d8802c17 	ldw	r2,176(sp)
    e0d0:	10c0030b 	ldhu	r3,12(r2)
    e0d4:	d8802f17 	ldw	r2,188(sp)
    e0d8:	18c0100c 	andi	r3,r3,64
    e0dc:	1805f51e 	bne	r3,zero,f8b4 <___svfprintf_internal_r+0x1b7c>
    e0e0:	dfc04817 	ldw	ra,288(sp)
    e0e4:	df004717 	ldw	fp,284(sp)
    e0e8:	ddc04617 	ldw	r23,280(sp)
    e0ec:	dd804517 	ldw	r22,276(sp)
    e0f0:	dd404417 	ldw	r21,272(sp)
    e0f4:	dd004317 	ldw	r20,268(sp)
    e0f8:	dcc04217 	ldw	r19,264(sp)
    e0fc:	dc804117 	ldw	r18,260(sp)
    e100:	dc404017 	ldw	r17,256(sp)
    e104:	dc003f17 	ldw	r16,252(sp)
    e108:	dec04904 	addi	sp,sp,292
    e10c:	f800283a 	ret
    e110:	d8802d17 	ldw	r2,180(sp)
    e114:	d9002d17 	ldw	r4,180(sp)
    e118:	10800017 	ldw	r2,0(r2)
    e11c:	d8803115 	stw	r2,196(sp)
    e120:	20800104 	addi	r2,r4,4
    e124:	d9003117 	ldw	r4,196(sp)
    e128:	203fb916 	blt	r4,zero,e010 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e010>
    e12c:	d8802d15 	stw	r2,180(sp)
    e130:	bc400007 	ldb	r17,0(r23)
    e134:	003f5406 	br	de88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de88>
    e138:	bc400007 	ldb	r17,0(r23)
    e13c:	bac00044 	addi	r11,r23,1
    e140:	8a873926 	beq	r17,r10,fe28 <___svfprintf_internal_r+0x20f0>
    e144:	88bff404 	addi	r2,r17,-48
    e148:	0009883a 	mov	r4,zero
    e14c:	30868836 	bltu	r6,r2,fb70 <___svfprintf_internal_r+0x1e38>
    e150:	5c400007 	ldb	r17,0(r11)
    e154:	210002a4 	muli	r4,r4,10
    e158:	5dc00044 	addi	r23,r11,1
    e15c:	b817883a 	mov	r11,r23
    e160:	2089883a 	add	r4,r4,r2
    e164:	88bff404 	addi	r2,r17,-48
    e168:	30bff92e 	bgeu	r6,r2,e150 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e150>
    e16c:	2005d716 	blt	r4,zero,f8cc <___svfprintf_internal_r+0x1b94>
    e170:	d9002915 	stw	r4,164(sp)
    e174:	003f4506 	br	de8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de8c>
    e178:	b809883a 	mov	r4,r23
    e17c:	d8003115 	stw	zero,196(sp)
    e180:	88bff404 	addi	r2,r17,-48
    e184:	0017883a 	mov	r11,zero
    e188:	24400007 	ldb	r17,0(r4)
    e18c:	5ac002a4 	muli	r11,r11,10
    e190:	bdc00044 	addi	r23,r23,1
    e194:	b809883a 	mov	r4,r23
    e198:	12d7883a 	add	r11,r2,r11
    e19c:	88bff404 	addi	r2,r17,-48
    e1a0:	30bff92e 	bgeu	r6,r2,e188 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e188>
    e1a4:	dac03115 	stw	r11,196(sp)
    e1a8:	003f3806 	br	de8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de8c>
    e1ac:	94802014 	ori	r18,r18,128
    e1b0:	bc400007 	ldb	r17,0(r23)
    e1b4:	003f3406 	br	de88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de88>
    e1b8:	18c03fcc 	andi	r3,r3,255
    e1bc:	1807471e 	bne	r3,zero,fedc <___svfprintf_internal_r+0x21a4>
    e1c0:	9080020c 	andi	r2,r18,8
    e1c4:	10047d26 	beq	r2,zero,f3bc <___svfprintf_internal_r+0x1684>
    e1c8:	d8c02d17 	ldw	r3,180(sp)
    e1cc:	d9002d17 	ldw	r4,180(sp)
    e1d0:	d9402d17 	ldw	r5,180(sp)
    e1d4:	18c00017 	ldw	r3,0(r3)
    e1d8:	21000117 	ldw	r4,4(r4)
    e1dc:	29400204 	addi	r5,r5,8
    e1e0:	d8c03615 	stw	r3,216(sp)
    e1e4:	d9003715 	stw	r4,220(sp)
    e1e8:	d9402d15 	stw	r5,180(sp)
    e1ec:	d9003617 	ldw	r4,216(sp)
    e1f0:	d9403717 	ldw	r5,220(sp)
    e1f4:	da003e15 	stw	r8,248(sp)
    e1f8:	04000044 	movi	r16,1
    e1fc:	00091740 	call	9174 <__fpclassifyd>
    e200:	da003e17 	ldw	r8,248(sp)
    e204:	14044b1e 	bne	r2,r16,f334 <___svfprintf_internal_r+0x15fc>
    e208:	d9003617 	ldw	r4,216(sp)
    e20c:	d9403717 	ldw	r5,220(sp)
    e210:	000d883a 	mov	r6,zero
    e214:	000f883a 	mov	r7,zero
    e218:	000b0780 	call	b078 <__ledf2>
    e21c:	da003e17 	ldw	r8,248(sp)
    e220:	1005f316 	blt	r2,zero,f9f0 <___svfprintf_internal_r+0x1cb8>
    e224:	df002783 	ldbu	fp,158(sp)
    e228:	008011c4 	movi	r2,71
    e22c:	1445590e 	bge	r2,r17,f794 <___svfprintf_internal_r+0x1a5c>
    e230:	040000f4 	movhi	r16,3
    e234:	8420b304 	addi	r16,r16,-32052
    e238:	00c000c4 	movi	r3,3
    e23c:	00bfdfc4 	movi	r2,-129
    e240:	d8c02a15 	stw	r3,168(sp)
    e244:	90a4703a 	and	r18,r18,r2
    e248:	d8c02e15 	stw	r3,184(sp)
    e24c:	d8002915 	stw	zero,164(sp)
    e250:	d8003215 	stw	zero,200(sp)
    e254:	00006606 	br	e3f0 <___svfprintf_internal_r+0x6b8>
    e258:	94800214 	ori	r18,r18,8
    e25c:	bc400007 	ldb	r17,0(r23)
    e260:	003f0906 	br	de88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de88>
    e264:	18c03fcc 	andi	r3,r3,255
    e268:	1807181e 	bne	r3,zero,fecc <___svfprintf_internal_r+0x2194>
    e26c:	94800414 	ori	r18,r18,16
    e270:	9080080c 	andi	r2,r18,32
    e274:	10039626 	beq	r2,zero,f0d0 <___svfprintf_internal_r+0x1398>
    e278:	d9402d17 	ldw	r5,180(sp)
    e27c:	28800117 	ldw	r2,4(r5)
    e280:	2d000017 	ldw	r20,0(r5)
    e284:	29400204 	addi	r5,r5,8
    e288:	d9402d15 	stw	r5,180(sp)
    e28c:	102d883a 	mov	r22,r2
    e290:	10039816 	blt	r2,zero,f0f4 <___svfprintf_internal_r+0x13bc>
    e294:	d9402917 	ldw	r5,164(sp)
    e298:	df002783 	ldbu	fp,158(sp)
    e29c:	2803ab16 	blt	r5,zero,f14c <___svfprintf_internal_r+0x1414>
    e2a0:	00ffdfc4 	movi	r3,-129
    e2a4:	a584b03a 	or	r2,r20,r22
    e2a8:	90e4703a 	and	r18,r18,r3
    e2ac:	10014a26 	beq	r2,zero,e7d8 <___svfprintf_internal_r+0xaa0>
    e2b0:	b0034b26 	beq	r22,zero,efe0 <___svfprintf_internal_r+0x12a8>
    e2b4:	dc402a15 	stw	r17,168(sp)
    e2b8:	dc001e04 	addi	r16,sp,120
    e2bc:	b023883a 	mov	r17,r22
    e2c0:	402d883a 	mov	r22,r8
    e2c4:	a009883a 	mov	r4,r20
    e2c8:	880b883a 	mov	r5,r17
    e2cc:	01800284 	movi	r6,10
    e2d0:	000f883a 	mov	r7,zero
    e2d4:	001a0f00 	call	1a0f0 <__umoddi3>
    e2d8:	10800c04 	addi	r2,r2,48
    e2dc:	843fffc4 	addi	r16,r16,-1
    e2e0:	a009883a 	mov	r4,r20
    e2e4:	880b883a 	mov	r5,r17
    e2e8:	80800005 	stb	r2,0(r16)
    e2ec:	01800284 	movi	r6,10
    e2f0:	000f883a 	mov	r7,zero
    e2f4:	0019b780 	call	19b78 <__udivdi3>
    e2f8:	1029883a 	mov	r20,r2
    e2fc:	10c4b03a 	or	r2,r2,r3
    e300:	1823883a 	mov	r17,r3
    e304:	103fef1e 	bne	r2,zero,e2c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e2c4>
    e308:	d8c02817 	ldw	r3,160(sp)
    e30c:	dc402a17 	ldw	r17,168(sp)
    e310:	b011883a 	mov	r8,r22
    e314:	1c07c83a 	sub	r3,r3,r16
    e318:	d8c02e15 	stw	r3,184(sp)
    e31c:	00002e06 	br	e3d8 <___svfprintf_internal_r+0x6a0>
    e320:	18c03fcc 	andi	r3,r3,255
    e324:	1806e71e 	bne	r3,zero,fec4 <___svfprintf_internal_r+0x218c>
    e328:	94800414 	ori	r18,r18,16
    e32c:	9080080c 	andi	r2,r18,32
    e330:	1002d426 	beq	r2,zero,ee84 <___svfprintf_internal_r+0x114c>
    e334:	d9402d17 	ldw	r5,180(sp)
    e338:	d8c02917 	ldw	r3,164(sp)
    e33c:	d8002785 	stb	zero,158(sp)
    e340:	28800204 	addi	r2,r5,8
    e344:	2d000017 	ldw	r20,0(r5)
    e348:	2d800117 	ldw	r22,4(r5)
    e34c:	18041516 	blt	r3,zero,f3a4 <___svfprintf_internal_r+0x166c>
    e350:	013fdfc4 	movi	r4,-129
    e354:	a586b03a 	or	r3,r20,r22
    e358:	d8802d15 	stw	r2,180(sp)
    e35c:	9124703a 	and	r18,r18,r4
    e360:	1802d51e 	bne	r3,zero,eeb8 <___svfprintf_internal_r+0x1180>
    e364:	d9402917 	ldw	r5,164(sp)
    e368:	0039883a 	mov	fp,zero
    e36c:	2806be26 	beq	r5,zero,fe68 <___svfprintf_internal_r+0x2130>
    e370:	0029883a 	mov	r20,zero
    e374:	002d883a 	mov	r22,zero
    e378:	dc001e04 	addi	r16,sp,120
    e37c:	a006d0fa 	srli	r3,r20,3
    e380:	b008977a 	slli	r4,r22,29
    e384:	b02cd0fa 	srli	r22,r22,3
    e388:	a50001cc 	andi	r20,r20,7
    e38c:	a0800c04 	addi	r2,r20,48
    e390:	843fffc4 	addi	r16,r16,-1
    e394:	20e8b03a 	or	r20,r4,r3
    e398:	80800005 	stb	r2,0(r16)
    e39c:	a586b03a 	or	r3,r20,r22
    e3a0:	183ff61e 	bne	r3,zero,e37c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e37c>
    e3a4:	90c0004c 	andi	r3,r18,1
    e3a8:	18013926 	beq	r3,zero,e890 <___svfprintf_internal_r+0xb58>
    e3ac:	10803fcc 	andi	r2,r2,255
    e3b0:	1080201c 	xori	r2,r2,128
    e3b4:	10bfe004 	addi	r2,r2,-128
    e3b8:	00c00c04 	movi	r3,48
    e3bc:	10c13426 	beq	r2,r3,e890 <___svfprintf_internal_r+0xb58>
    e3c0:	80ffffc5 	stb	r3,-1(r16)
    e3c4:	d8c02817 	ldw	r3,160(sp)
    e3c8:	80bfffc4 	addi	r2,r16,-1
    e3cc:	1021883a 	mov	r16,r2
    e3d0:	1887c83a 	sub	r3,r3,r2
    e3d4:	d8c02e15 	stw	r3,184(sp)
    e3d8:	d8802e17 	ldw	r2,184(sp)
    e3dc:	d9002917 	ldw	r4,164(sp)
    e3e0:	1100010e 	bge	r2,r4,e3e8 <___svfprintf_internal_r+0x6b0>
    e3e4:	2005883a 	mov	r2,r4
    e3e8:	d8802a15 	stw	r2,168(sp)
    e3ec:	d8003215 	stw	zero,200(sp)
    e3f0:	e7003fcc 	andi	fp,fp,255
    e3f4:	e700201c 	xori	fp,fp,128
    e3f8:	e73fe004 	addi	fp,fp,-128
    e3fc:	e0000326 	beq	fp,zero,e40c <___svfprintf_internal_r+0x6d4>
    e400:	d8c02a17 	ldw	r3,168(sp)
    e404:	18c00044 	addi	r3,r3,1
    e408:	d8c02a15 	stw	r3,168(sp)
    e40c:	90c0008c 	andi	r3,r18,2
    e410:	d8c02b15 	stw	r3,172(sp)
    e414:	18000326 	beq	r3,zero,e424 <___svfprintf_internal_r+0x6ec>
    e418:	d8c02a17 	ldw	r3,168(sp)
    e41c:	18c00084 	addi	r3,r3,2
    e420:	d8c02a15 	stw	r3,168(sp)
    e424:	90c0210c 	andi	r3,r18,132
    e428:	d8c03015 	stw	r3,192(sp)
    e42c:	1801a11e 	bne	r3,zero,eab4 <___svfprintf_internal_r+0xd7c>
    e430:	d9003117 	ldw	r4,196(sp)
    e434:	d8c02a17 	ldw	r3,168(sp)
    e438:	20e9c83a 	sub	r20,r4,r3
    e43c:	05019d0e 	bge	zero,r20,eab4 <___svfprintf_internal_r+0xd7c>
    e440:	02400404 	movi	r9,16
    e444:	d8c02017 	ldw	r3,128(sp)
    e448:	d8801f17 	ldw	r2,124(sp)
    e44c:	4d051b0e 	bge	r9,r20,f8bc <___svfprintf_internal_r+0x1b84>
    e450:	014000f4 	movhi	r5,3
    e454:	2960c684 	addi	r5,r5,-31974
    e458:	dc403c15 	stw	r17,240(sp)
    e45c:	d9403515 	stw	r5,212(sp)
    e460:	a023883a 	mov	r17,r20
    e464:	482d883a 	mov	r22,r9
    e468:	9029883a 	mov	r20,r18
    e46c:	070001c4 	movi	fp,7
    e470:	8025883a 	mov	r18,r16
    e474:	dc002c17 	ldw	r16,176(sp)
    e478:	00000306 	br	e488 <___svfprintf_internal_r+0x750>
    e47c:	8c7ffc04 	addi	r17,r17,-16
    e480:	42000204 	addi	r8,r8,8
    e484:	b440130e 	bge	r22,r17,e4d4 <___svfprintf_internal_r+0x79c>
    e488:	010000f4 	movhi	r4,3
    e48c:	18c00404 	addi	r3,r3,16
    e490:	10800044 	addi	r2,r2,1
    e494:	2120c684 	addi	r4,r4,-31974
    e498:	41000015 	stw	r4,0(r8)
    e49c:	45800115 	stw	r22,4(r8)
    e4a0:	d8c02015 	stw	r3,128(sp)
    e4a4:	d8801f15 	stw	r2,124(sp)
    e4a8:	e0bff40e 	bge	fp,r2,e47c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e47c>
    e4ac:	d9801e04 	addi	r6,sp,120
    e4b0:	800b883a 	mov	r5,r16
    e4b4:	9809883a 	mov	r4,r19
    e4b8:	00167f00 	call	167f0 <__ssprint_r>
    e4bc:	103f031e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    e4c0:	8c7ffc04 	addi	r17,r17,-16
    e4c4:	d8c02017 	ldw	r3,128(sp)
    e4c8:	d8801f17 	ldw	r2,124(sp)
    e4cc:	da000404 	addi	r8,sp,16
    e4d0:	b47fed16 	blt	r22,r17,e488 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e488>
    e4d4:	9021883a 	mov	r16,r18
    e4d8:	a025883a 	mov	r18,r20
    e4dc:	8829883a 	mov	r20,r17
    e4e0:	dc403c17 	ldw	r17,240(sp)
    e4e4:	d9403517 	ldw	r5,212(sp)
    e4e8:	a0c7883a 	add	r3,r20,r3
    e4ec:	10800044 	addi	r2,r2,1
    e4f0:	41400015 	stw	r5,0(r8)
    e4f4:	45000115 	stw	r20,4(r8)
    e4f8:	d8c02015 	stw	r3,128(sp)
    e4fc:	d8801f15 	stw	r2,124(sp)
    e500:	010001c4 	movi	r4,7
    e504:	20829f16 	blt	r4,r2,ef84 <___svfprintf_internal_r+0x124c>
    e508:	df002787 	ldb	fp,158(sp)
    e50c:	42000204 	addi	r8,r8,8
    e510:	e0000c26 	beq	fp,zero,e544 <___svfprintf_internal_r+0x80c>
    e514:	d8801f17 	ldw	r2,124(sp)
    e518:	d9002784 	addi	r4,sp,158
    e51c:	18c00044 	addi	r3,r3,1
    e520:	10800044 	addi	r2,r2,1
    e524:	41000015 	stw	r4,0(r8)
    e528:	01000044 	movi	r4,1
    e52c:	41000115 	stw	r4,4(r8)
    e530:	d8c02015 	stw	r3,128(sp)
    e534:	d8801f15 	stw	r2,124(sp)
    e538:	010001c4 	movi	r4,7
    e53c:	20823816 	blt	r4,r2,ee20 <___svfprintf_internal_r+0x10e8>
    e540:	42000204 	addi	r8,r8,8
    e544:	d8802b17 	ldw	r2,172(sp)
    e548:	10000c26 	beq	r2,zero,e57c <___svfprintf_internal_r+0x844>
    e54c:	d8801f17 	ldw	r2,124(sp)
    e550:	d9002704 	addi	r4,sp,156
    e554:	18c00084 	addi	r3,r3,2
    e558:	10800044 	addi	r2,r2,1
    e55c:	41000015 	stw	r4,0(r8)
    e560:	01000084 	movi	r4,2
    e564:	41000115 	stw	r4,4(r8)
    e568:	d8c02015 	stw	r3,128(sp)
    e56c:	d8801f15 	stw	r2,124(sp)
    e570:	010001c4 	movi	r4,7
    e574:	20823216 	blt	r4,r2,ee40 <___svfprintf_internal_r+0x1108>
    e578:	42000204 	addi	r8,r8,8
    e57c:	d9003017 	ldw	r4,192(sp)
    e580:	00802004 	movi	r2,128
    e584:	20819726 	beq	r4,r2,ebe4 <___svfprintf_internal_r+0xeac>
    e588:	d9402917 	ldw	r5,164(sp)
    e58c:	d8802e17 	ldw	r2,184(sp)
    e590:	28adc83a 	sub	r22,r5,r2
    e594:	05802f0e 	bge	zero,r22,e654 <___svfprintf_internal_r+0x91c>
    e598:	07000404 	movi	fp,16
    e59c:	d8801f17 	ldw	r2,124(sp)
    e5a0:	e583c00e 	bge	fp,r22,f4a4 <___svfprintf_internal_r+0x176c>
    e5a4:	014000f4 	movhi	r5,3
    e5a8:	2960c284 	addi	r5,r5,-31990
    e5ac:	dc402915 	stw	r17,164(sp)
    e5b0:	d9402b15 	stw	r5,172(sp)
    e5b4:	b023883a 	mov	r17,r22
    e5b8:	050001c4 	movi	r20,7
    e5bc:	902d883a 	mov	r22,r18
    e5c0:	8025883a 	mov	r18,r16
    e5c4:	dc002c17 	ldw	r16,176(sp)
    e5c8:	00000306 	br	e5d8 <___svfprintf_internal_r+0x8a0>
    e5cc:	8c7ffc04 	addi	r17,r17,-16
    e5d0:	42000204 	addi	r8,r8,8
    e5d4:	e440110e 	bge	fp,r17,e61c <___svfprintf_internal_r+0x8e4>
    e5d8:	18c00404 	addi	r3,r3,16
    e5dc:	10800044 	addi	r2,r2,1
    e5e0:	45400015 	stw	r21,0(r8)
    e5e4:	47000115 	stw	fp,4(r8)
    e5e8:	d8c02015 	stw	r3,128(sp)
    e5ec:	d8801f15 	stw	r2,124(sp)
    e5f0:	a0bff60e 	bge	r20,r2,e5cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e5cc>
    e5f4:	d9801e04 	addi	r6,sp,120
    e5f8:	800b883a 	mov	r5,r16
    e5fc:	9809883a 	mov	r4,r19
    e600:	00167f00 	call	167f0 <__ssprint_r>
    e604:	103eb11e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    e608:	8c7ffc04 	addi	r17,r17,-16
    e60c:	d8c02017 	ldw	r3,128(sp)
    e610:	d8801f17 	ldw	r2,124(sp)
    e614:	da000404 	addi	r8,sp,16
    e618:	e47fef16 	blt	fp,r17,e5d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e5d8>
    e61c:	9021883a 	mov	r16,r18
    e620:	b025883a 	mov	r18,r22
    e624:	882d883a 	mov	r22,r17
    e628:	dc402917 	ldw	r17,164(sp)
    e62c:	d9002b17 	ldw	r4,172(sp)
    e630:	1d87883a 	add	r3,r3,r22
    e634:	10800044 	addi	r2,r2,1
    e638:	41000015 	stw	r4,0(r8)
    e63c:	45800115 	stw	r22,4(r8)
    e640:	d8c02015 	stw	r3,128(sp)
    e644:	d8801f15 	stw	r2,124(sp)
    e648:	010001c4 	movi	r4,7
    e64c:	2081ec16 	blt	r4,r2,ee00 <___svfprintf_internal_r+0x10c8>
    e650:	42000204 	addi	r8,r8,8
    e654:	9080400c 	andi	r2,r18,256
    e658:	1001181e 	bne	r2,zero,eabc <___svfprintf_internal_r+0xd84>
    e65c:	d9402e17 	ldw	r5,184(sp)
    e660:	d8801f17 	ldw	r2,124(sp)
    e664:	44000015 	stw	r16,0(r8)
    e668:	1947883a 	add	r3,r3,r5
    e66c:	10800044 	addi	r2,r2,1
    e670:	41400115 	stw	r5,4(r8)
    e674:	d8c02015 	stw	r3,128(sp)
    e678:	d8801f15 	stw	r2,124(sp)
    e67c:	010001c4 	movi	r4,7
    e680:	2081d116 	blt	r4,r2,edc8 <___svfprintf_internal_r+0x1090>
    e684:	42000204 	addi	r8,r8,8
    e688:	9480010c 	andi	r18,r18,4
    e68c:	90003226 	beq	r18,zero,e758 <___svfprintf_internal_r+0xa20>
    e690:	d9403117 	ldw	r5,196(sp)
    e694:	d8802a17 	ldw	r2,168(sp)
    e698:	28a1c83a 	sub	r16,r5,r2
    e69c:	04002e0e 	bge	zero,r16,e758 <___svfprintf_internal_r+0xa20>
    e6a0:	04400404 	movi	r17,16
    e6a4:	d8801f17 	ldw	r2,124(sp)
    e6a8:	8c04b90e 	bge	r17,r16,f990 <___svfprintf_internal_r+0x1c58>
    e6ac:	014000f4 	movhi	r5,3
    e6b0:	2960c684 	addi	r5,r5,-31974
    e6b4:	d9403515 	stw	r5,212(sp)
    e6b8:	048001c4 	movi	r18,7
    e6bc:	dd002c17 	ldw	r20,176(sp)
    e6c0:	00000306 	br	e6d0 <___svfprintf_internal_r+0x998>
    e6c4:	843ffc04 	addi	r16,r16,-16
    e6c8:	42000204 	addi	r8,r8,8
    e6cc:	8c00130e 	bge	r17,r16,e71c <___svfprintf_internal_r+0x9e4>
    e6d0:	010000f4 	movhi	r4,3
    e6d4:	18c00404 	addi	r3,r3,16
    e6d8:	10800044 	addi	r2,r2,1
    e6dc:	2120c684 	addi	r4,r4,-31974
    e6e0:	41000015 	stw	r4,0(r8)
    e6e4:	44400115 	stw	r17,4(r8)
    e6e8:	d8c02015 	stw	r3,128(sp)
    e6ec:	d8801f15 	stw	r2,124(sp)
    e6f0:	90bff40e 	bge	r18,r2,e6c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e6c4>
    e6f4:	d9801e04 	addi	r6,sp,120
    e6f8:	a00b883a 	mov	r5,r20
    e6fc:	9809883a 	mov	r4,r19
    e700:	00167f00 	call	167f0 <__ssprint_r>
    e704:	103e711e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    e708:	843ffc04 	addi	r16,r16,-16
    e70c:	d8c02017 	ldw	r3,128(sp)
    e710:	d8801f17 	ldw	r2,124(sp)
    e714:	da000404 	addi	r8,sp,16
    e718:	8c3fed16 	blt	r17,r16,e6d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e6d0>
    e71c:	d9403517 	ldw	r5,212(sp)
    e720:	1c07883a 	add	r3,r3,r16
    e724:	10800044 	addi	r2,r2,1
    e728:	41400015 	stw	r5,0(r8)
    e72c:	44000115 	stw	r16,4(r8)
    e730:	d8c02015 	stw	r3,128(sp)
    e734:	d8801f15 	stw	r2,124(sp)
    e738:	010001c4 	movi	r4,7
    e73c:	2080060e 	bge	r4,r2,e758 <___svfprintf_internal_r+0xa20>
    e740:	d9402c17 	ldw	r5,176(sp)
    e744:	d9801e04 	addi	r6,sp,120
    e748:	9809883a 	mov	r4,r19
    e74c:	00167f00 	call	167f0 <__ssprint_r>
    e750:	103e5e1e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    e754:	d8c02017 	ldw	r3,128(sp)
    e758:	d8803117 	ldw	r2,196(sp)
    e75c:	d9002a17 	ldw	r4,168(sp)
    e760:	1100010e 	bge	r2,r4,e768 <___svfprintf_internal_r+0xa30>
    e764:	2005883a 	mov	r2,r4
    e768:	d9402f17 	ldw	r5,188(sp)
    e76c:	288b883a 	add	r5,r5,r2
    e770:	d9402f15 	stw	r5,188(sp)
    e774:	18019c1e 	bne	r3,zero,ede8 <___svfprintf_internal_r+0x10b0>
    e778:	b8800007 	ldb	r2,0(r23)
    e77c:	d8001f15 	stw	zero,124(sp)
    e780:	da000404 	addi	r8,sp,16
    e784:	103d991e 	bne	r2,zero,ddec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ddec>
    e788:	b821883a 	mov	r16,r23
    e78c:	003daf06 	br	de4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de4c>
    e790:	18c03fcc 	andi	r3,r3,255
    e794:	1805c71e 	bne	r3,zero,feb4 <___svfprintf_internal_r+0x217c>
    e798:	94800414 	ori	r18,r18,16
    e79c:	9080080c 	andi	r2,r18,32
    e7a0:	10020126 	beq	r2,zero,efa8 <___svfprintf_internal_r+0x1270>
    e7a4:	d8802d17 	ldw	r2,180(sp)
    e7a8:	d9002917 	ldw	r4,164(sp)
    e7ac:	d8002785 	stb	zero,158(sp)
    e7b0:	10c00204 	addi	r3,r2,8
    e7b4:	15000017 	ldw	r20,0(r2)
    e7b8:	15800117 	ldw	r22,4(r2)
    e7bc:	20038e16 	blt	r4,zero,f5f8 <___svfprintf_internal_r+0x18c0>
    e7c0:	013fdfc4 	movi	r4,-129
    e7c4:	a584b03a 	or	r2,r20,r22
    e7c8:	d8c02d15 	stw	r3,180(sp)
    e7cc:	9124703a 	and	r18,r18,r4
    e7d0:	0039883a 	mov	fp,zero
    e7d4:	103eb61e 	bne	r2,zero,e2b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e2b0>
    e7d8:	d8802917 	ldw	r2,164(sp)
    e7dc:	1002c81e 	bne	r2,zero,f300 <___svfprintf_internal_r+0x15c8>
    e7e0:	d8002915 	stw	zero,164(sp)
    e7e4:	d8002e15 	stw	zero,184(sp)
    e7e8:	dc001e04 	addi	r16,sp,120
    e7ec:	003efa06 	br	e3d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e3d8>
    e7f0:	18c03fcc 	andi	r3,r3,255
    e7f4:	1805ad1e 	bne	r3,zero,feac <___svfprintf_internal_r+0x2174>
    e7f8:	014000f4 	movhi	r5,3
    e7fc:	2960b604 	addi	r5,r5,-32040
    e800:	d9403a15 	stw	r5,232(sp)
    e804:	9080080c 	andi	r2,r18,32
    e808:	10006126 	beq	r2,zero,e990 <___svfprintf_internal_r+0xc58>
    e80c:	d8802d17 	ldw	r2,180(sp)
    e810:	15000017 	ldw	r20,0(r2)
    e814:	15800117 	ldw	r22,4(r2)
    e818:	10800204 	addi	r2,r2,8
    e81c:	d8802d15 	stw	r2,180(sp)
    e820:	9080004c 	andi	r2,r18,1
    e824:	10018e26 	beq	r2,zero,ee60 <___svfprintf_internal_r+0x1128>
    e828:	a584b03a 	or	r2,r20,r22
    e82c:	10030926 	beq	r2,zero,f454 <___svfprintf_internal_r+0x171c>
    e830:	d8c02917 	ldw	r3,164(sp)
    e834:	00800c04 	movi	r2,48
    e838:	d8802705 	stb	r2,156(sp)
    e83c:	dc402745 	stb	r17,157(sp)
    e840:	d8002785 	stb	zero,158(sp)
    e844:	90800094 	ori	r2,r18,2
    e848:	18048716 	blt	r3,zero,fa68 <___svfprintf_internal_r+0x1d30>
    e84c:	00bfdfc4 	movi	r2,-129
    e850:	90a4703a 	and	r18,r18,r2
    e854:	94800094 	ori	r18,r18,2
    e858:	0039883a 	mov	fp,zero
    e85c:	d9003a17 	ldw	r4,232(sp)
    e860:	dc001e04 	addi	r16,sp,120
    e864:	a08003cc 	andi	r2,r20,15
    e868:	b006973a 	slli	r3,r22,28
    e86c:	2085883a 	add	r2,r4,r2
    e870:	a028d13a 	srli	r20,r20,4
    e874:	10800003 	ldbu	r2,0(r2)
    e878:	b02cd13a 	srli	r22,r22,4
    e87c:	843fffc4 	addi	r16,r16,-1
    e880:	1d28b03a 	or	r20,r3,r20
    e884:	80800005 	stb	r2,0(r16)
    e888:	a584b03a 	or	r2,r20,r22
    e88c:	103ff51e 	bne	r2,zero,e864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e864>
    e890:	d8c02817 	ldw	r3,160(sp)
    e894:	1c07c83a 	sub	r3,r3,r16
    e898:	d8c02e15 	stw	r3,184(sp)
    e89c:	003ece06 	br	e3d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e3d8>
    e8a0:	d8c02d17 	ldw	r3,180(sp)
    e8a4:	d9002d17 	ldw	r4,180(sp)
    e8a8:	d8002785 	stb	zero,158(sp)
    e8ac:	18800017 	ldw	r2,0(r3)
    e8b0:	21000104 	addi	r4,r4,4
    e8b4:	00c00044 	movi	r3,1
    e8b8:	d8c02a15 	stw	r3,168(sp)
    e8bc:	d8801405 	stb	r2,80(sp)
    e8c0:	d9002d15 	stw	r4,180(sp)
    e8c4:	d8c02e15 	stw	r3,184(sp)
    e8c8:	d8002915 	stw	zero,164(sp)
    e8cc:	d8003215 	stw	zero,200(sp)
    e8d0:	dc001404 	addi	r16,sp,80
    e8d4:	0039883a 	mov	fp,zero
    e8d8:	003ecc06 	br	e40c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e40c>
    e8dc:	18c03fcc 	andi	r3,r3,255
    e8e0:	183e9226 	beq	r3,zero,e32c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e32c>
    e8e4:	d9c02785 	stb	r7,158(sp)
    e8e8:	003e9006 	br	e32c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e32c>
    e8ec:	00c00044 	movi	r3,1
    e8f0:	01c00ac4 	movi	r7,43
    e8f4:	bc400007 	ldb	r17,0(r23)
    e8f8:	003d6306 	br	de88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de88>
    e8fc:	94800814 	ori	r18,r18,32
    e900:	bc400007 	ldb	r17,0(r23)
    e904:	003d6006 	br	de88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de88>
    e908:	d8c02d17 	ldw	r3,180(sp)
    e90c:	d8002785 	stb	zero,158(sp)
    e910:	1c000017 	ldw	r16,0(r3)
    e914:	1d000104 	addi	r20,r3,4
    e918:	80040f26 	beq	r16,zero,f958 <___svfprintf_internal_r+0x1c20>
    e91c:	d9002917 	ldw	r4,164(sp)
    e920:	2003dc16 	blt	r4,zero,f894 <___svfprintf_internal_r+0x1b5c>
    e924:	200d883a 	mov	r6,r4
    e928:	000b883a 	mov	r5,zero
    e92c:	8009883a 	mov	r4,r16
    e930:	da003e15 	stw	r8,248(sp)
    e934:	0014f140 	call	14f14 <memchr>
    e938:	da003e17 	ldw	r8,248(sp)
    e93c:	10045826 	beq	r2,zero,faa0 <___svfprintf_internal_r+0x1d68>
    e940:	1405c83a 	sub	r2,r2,r16
    e944:	d8802e15 	stw	r2,184(sp)
    e948:	1003d816 	blt	r2,zero,f8ac <___svfprintf_internal_r+0x1b74>
    e94c:	df002783 	ldbu	fp,158(sp)
    e950:	d8802a15 	stw	r2,168(sp)
    e954:	dd002d15 	stw	r20,180(sp)
    e958:	d8002915 	stw	zero,164(sp)
    e95c:	d8003215 	stw	zero,200(sp)
    e960:	003ea306 	br	e3f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e3f0>
    e964:	18c03fcc 	andi	r3,r3,255
    e968:	183f8c26 	beq	r3,zero,e79c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e79c>
    e96c:	d9c02785 	stb	r7,158(sp)
    e970:	003f8a06 	br	e79c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e79c>
    e974:	18c03fcc 	andi	r3,r3,255
    e978:	1805631e 	bne	r3,zero,ff08 <___svfprintf_internal_r+0x21d0>
    e97c:	014000f4 	movhi	r5,3
    e980:	2960bb04 	addi	r5,r5,-32020
    e984:	d9403a15 	stw	r5,232(sp)
    e988:	9080080c 	andi	r2,r18,32
    e98c:	103f9f1e 	bne	r2,zero,e80c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e80c>
    e990:	9080040c 	andi	r2,r18,16
    e994:	10029c26 	beq	r2,zero,f408 <___svfprintf_internal_r+0x16d0>
    e998:	d8c02d17 	ldw	r3,180(sp)
    e99c:	002d883a 	mov	r22,zero
    e9a0:	1d000017 	ldw	r20,0(r3)
    e9a4:	18c00104 	addi	r3,r3,4
    e9a8:	d8c02d15 	stw	r3,180(sp)
    e9ac:	003f9c06 	br	e820 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e820>
    e9b0:	94800054 	ori	r18,r18,1
    e9b4:	bc400007 	ldb	r17,0(r23)
    e9b8:	003d3306 	br	de88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de88>
    e9bc:	38803fcc 	andi	r2,r7,255
    e9c0:	1080201c 	xori	r2,r2,128
    e9c4:	10bfe004 	addi	r2,r2,-128
    e9c8:	1002971e 	bne	r2,zero,f428 <___svfprintf_internal_r+0x16f0>
    e9cc:	00c00044 	movi	r3,1
    e9d0:	01c00804 	movi	r7,32
    e9d4:	bc400007 	ldb	r17,0(r23)
    e9d8:	003d2b06 	br	de88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de88>
    e9dc:	18c03fcc 	andi	r3,r3,255
    e9e0:	183e2326 	beq	r3,zero,e270 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e270>
    e9e4:	d9c02785 	stb	r7,158(sp)
    e9e8:	003e2106 	br	e270 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e270>
    e9ec:	bc400007 	ldb	r17,0(r23)
    e9f0:	8a430426 	beq	r17,r9,f604 <___svfprintf_internal_r+0x18cc>
    e9f4:	94800414 	ori	r18,r18,16
    e9f8:	003d2306 	br	de88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de88>
    e9fc:	18c03fcc 	andi	r3,r3,255
    ea00:	18053f1e 	bne	r3,zero,ff00 <___svfprintf_internal_r+0x21c8>
    ea04:	9080080c 	andi	r2,r18,32
    ea08:	10028926 	beq	r2,zero,f430 <___svfprintf_internal_r+0x16f8>
    ea0c:	d9402d17 	ldw	r5,180(sp)
    ea10:	d9002f17 	ldw	r4,188(sp)
    ea14:	28800017 	ldw	r2,0(r5)
    ea18:	2007d7fa 	srai	r3,r4,31
    ea1c:	29400104 	addi	r5,r5,4
    ea20:	d9402d15 	stw	r5,180(sp)
    ea24:	11000015 	stw	r4,0(r2)
    ea28:	10c00115 	stw	r3,4(r2)
    ea2c:	003ced06 	br	dde4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dde4>
    ea30:	94801014 	ori	r18,r18,64
    ea34:	bc400007 	ldb	r17,0(r23)
    ea38:	003d1306 	br	de88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de88>
    ea3c:	010000f4 	movhi	r4,3
    ea40:	2120bb04 	addi	r4,r4,-32020
    ea44:	0039883a 	mov	fp,zero
    ea48:	d9003a15 	stw	r4,232(sp)
    ea4c:	04401e04 	movi	r17,120
    ea50:	003f8206 	br	e85c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e85c>
    ea54:	18c03fcc 	andi	r3,r3,255
    ea58:	1805221e 	bne	r3,zero,fee4 <___svfprintf_internal_r+0x21ac>
    ea5c:	883d9526 	beq	r17,zero,e0b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0b4>
    ea60:	00c00044 	movi	r3,1
    ea64:	d8c02a15 	stw	r3,168(sp)
    ea68:	dc401405 	stb	r17,80(sp)
    ea6c:	d8002785 	stb	zero,158(sp)
    ea70:	003f9406 	br	e8c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e8c4>
    ea74:	010000f4 	movhi	r4,3
    ea78:	2120bb04 	addi	r4,r4,-32020
    ea7c:	d9003a15 	stw	r4,232(sp)
    ea80:	d8c02d15 	stw	r3,180(sp)
    ea84:	1025883a 	mov	r18,r2
    ea88:	04401e04 	movi	r17,120
    ea8c:	a584b03a 	or	r2,r20,r22
    ea90:	1000fa1e 	bne	r2,zero,ee7c <___svfprintf_internal_r+0x1144>
    ea94:	0039883a 	mov	fp,zero
    ea98:	00800084 	movi	r2,2
    ea9c:	10803fcc 	andi	r2,r2,255
    eaa0:	00c00044 	movi	r3,1
    eaa4:	10c21626 	beq	r2,r3,f300 <___svfprintf_internal_r+0x15c8>
    eaa8:	00c00084 	movi	r3,2
    eaac:	10fe301e 	bne	r2,r3,e370 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e370>
    eab0:	003d7606 	br	e08c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e08c>
    eab4:	d8c02017 	ldw	r3,128(sp)
    eab8:	003e9506 	br	e510 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e510>
    eabc:	00801944 	movi	r2,101
    eac0:	14407c0e 	bge	r2,r17,ecb4 <___svfprintf_internal_r+0xf7c>
    eac4:	d9003617 	ldw	r4,216(sp)
    eac8:	d9403717 	ldw	r5,220(sp)
    eacc:	000d883a 	mov	r6,zero
    ead0:	000f883a 	mov	r7,zero
    ead4:	d8c03d15 	stw	r3,244(sp)
    ead8:	da003e15 	stw	r8,248(sp)
    eadc:	000af140 	call	af14 <__eqdf2>
    eae0:	d8c03d17 	ldw	r3,244(sp)
    eae4:	da003e17 	ldw	r8,248(sp)
    eae8:	1000f51e 	bne	r2,zero,eec0 <___svfprintf_internal_r+0x1188>
    eaec:	d8801f17 	ldw	r2,124(sp)
    eaf0:	010000f4 	movhi	r4,3
    eaf4:	2120c204 	addi	r4,r4,-31992
    eaf8:	18c00044 	addi	r3,r3,1
    eafc:	10800044 	addi	r2,r2,1
    eb00:	41000015 	stw	r4,0(r8)
    eb04:	01000044 	movi	r4,1
    eb08:	41000115 	stw	r4,4(r8)
    eb0c:	d8c02015 	stw	r3,128(sp)
    eb10:	d8801f15 	stw	r2,124(sp)
    eb14:	010001c4 	movi	r4,7
    eb18:	20826616 	blt	r4,r2,f4b4 <___svfprintf_internal_r+0x177c>
    eb1c:	42000204 	addi	r8,r8,8
    eb20:	d8802617 	ldw	r2,152(sp)
    eb24:	d9403317 	ldw	r5,204(sp)
    eb28:	11400216 	blt	r2,r5,eb34 <___svfprintf_internal_r+0xdfc>
    eb2c:	9080004c 	andi	r2,r18,1
    eb30:	103ed526 	beq	r2,zero,e688 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e688>
    eb34:	d8803817 	ldw	r2,224(sp)
    eb38:	d9003417 	ldw	r4,208(sp)
    eb3c:	d9403817 	ldw	r5,224(sp)
    eb40:	1887883a 	add	r3,r3,r2
    eb44:	d8801f17 	ldw	r2,124(sp)
    eb48:	41000015 	stw	r4,0(r8)
    eb4c:	41400115 	stw	r5,4(r8)
    eb50:	10800044 	addi	r2,r2,1
    eb54:	d8c02015 	stw	r3,128(sp)
    eb58:	d8801f15 	stw	r2,124(sp)
    eb5c:	010001c4 	movi	r4,7
    eb60:	2082af16 	blt	r4,r2,f620 <___svfprintf_internal_r+0x18e8>
    eb64:	42000204 	addi	r8,r8,8
    eb68:	d8803317 	ldw	r2,204(sp)
    eb6c:	143fffc4 	addi	r16,r2,-1
    eb70:	043ec50e 	bge	zero,r16,e688 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e688>
    eb74:	04400404 	movi	r17,16
    eb78:	d8801f17 	ldw	r2,124(sp)
    eb7c:	8c00860e 	bge	r17,r16,ed98 <___svfprintf_internal_r+0x1060>
    eb80:	014000f4 	movhi	r5,3
    eb84:	2960c284 	addi	r5,r5,-31990
    eb88:	d9402b15 	stw	r5,172(sp)
    eb8c:	058001c4 	movi	r22,7
    eb90:	dd002c17 	ldw	r20,176(sp)
    eb94:	00000306 	br	eba4 <___svfprintf_internal_r+0xe6c>
    eb98:	42000204 	addi	r8,r8,8
    eb9c:	843ffc04 	addi	r16,r16,-16
    eba0:	8c00800e 	bge	r17,r16,eda4 <___svfprintf_internal_r+0x106c>
    eba4:	18c00404 	addi	r3,r3,16
    eba8:	10800044 	addi	r2,r2,1
    ebac:	45400015 	stw	r21,0(r8)
    ebb0:	44400115 	stw	r17,4(r8)
    ebb4:	d8c02015 	stw	r3,128(sp)
    ebb8:	d8801f15 	stw	r2,124(sp)
    ebbc:	b0bff60e 	bge	r22,r2,eb98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eb98>
    ebc0:	d9801e04 	addi	r6,sp,120
    ebc4:	a00b883a 	mov	r5,r20
    ebc8:	9809883a 	mov	r4,r19
    ebcc:	00167f00 	call	167f0 <__ssprint_r>
    ebd0:	103d3e1e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    ebd4:	d8c02017 	ldw	r3,128(sp)
    ebd8:	d8801f17 	ldw	r2,124(sp)
    ebdc:	da000404 	addi	r8,sp,16
    ebe0:	003fee06 	br	eb9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eb9c>
    ebe4:	d9403117 	ldw	r5,196(sp)
    ebe8:	d8802a17 	ldw	r2,168(sp)
    ebec:	28adc83a 	sub	r22,r5,r2
    ebf0:	05be650e 	bge	zero,r22,e588 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e588>
    ebf4:	07000404 	movi	fp,16
    ebf8:	d8801f17 	ldw	r2,124(sp)
    ebfc:	e583a20e 	bge	fp,r22,fa88 <___svfprintf_internal_r+0x1d50>
    ec00:	014000f4 	movhi	r5,3
    ec04:	2960c284 	addi	r5,r5,-31990
    ec08:	dc403015 	stw	r17,192(sp)
    ec0c:	d9402b15 	stw	r5,172(sp)
    ec10:	b023883a 	mov	r17,r22
    ec14:	050001c4 	movi	r20,7
    ec18:	902d883a 	mov	r22,r18
    ec1c:	8025883a 	mov	r18,r16
    ec20:	dc002c17 	ldw	r16,176(sp)
    ec24:	00000306 	br	ec34 <___svfprintf_internal_r+0xefc>
    ec28:	8c7ffc04 	addi	r17,r17,-16
    ec2c:	42000204 	addi	r8,r8,8
    ec30:	e440110e 	bge	fp,r17,ec78 <___svfprintf_internal_r+0xf40>
    ec34:	18c00404 	addi	r3,r3,16
    ec38:	10800044 	addi	r2,r2,1
    ec3c:	45400015 	stw	r21,0(r8)
    ec40:	47000115 	stw	fp,4(r8)
    ec44:	d8c02015 	stw	r3,128(sp)
    ec48:	d8801f15 	stw	r2,124(sp)
    ec4c:	a0bff60e 	bge	r20,r2,ec28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ec28>
    ec50:	d9801e04 	addi	r6,sp,120
    ec54:	800b883a 	mov	r5,r16
    ec58:	9809883a 	mov	r4,r19
    ec5c:	00167f00 	call	167f0 <__ssprint_r>
    ec60:	103d1a1e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    ec64:	8c7ffc04 	addi	r17,r17,-16
    ec68:	d8c02017 	ldw	r3,128(sp)
    ec6c:	d8801f17 	ldw	r2,124(sp)
    ec70:	da000404 	addi	r8,sp,16
    ec74:	e47fef16 	blt	fp,r17,ec34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ec34>
    ec78:	9021883a 	mov	r16,r18
    ec7c:	b025883a 	mov	r18,r22
    ec80:	882d883a 	mov	r22,r17
    ec84:	dc403017 	ldw	r17,192(sp)
    ec88:	d9002b17 	ldw	r4,172(sp)
    ec8c:	1d87883a 	add	r3,r3,r22
    ec90:	10800044 	addi	r2,r2,1
    ec94:	41000015 	stw	r4,0(r8)
    ec98:	45800115 	stw	r22,4(r8)
    ec9c:	d8c02015 	stw	r3,128(sp)
    eca0:	d8801f15 	stw	r2,124(sp)
    eca4:	010001c4 	movi	r4,7
    eca8:	20819a16 	blt	r4,r2,f314 <___svfprintf_internal_r+0x15dc>
    ecac:	42000204 	addi	r8,r8,8
    ecb0:	003e3506 	br	e588 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e588>
    ecb4:	d9403317 	ldw	r5,204(sp)
    ecb8:	00800044 	movi	r2,1
    ecbc:	18c00044 	addi	r3,r3,1
    ecc0:	1141710e 	bge	r2,r5,f288 <___svfprintf_internal_r+0x1550>
    ecc4:	dc401f17 	ldw	r17,124(sp)
    ecc8:	00800044 	movi	r2,1
    eccc:	40800115 	stw	r2,4(r8)
    ecd0:	8c400044 	addi	r17,r17,1
    ecd4:	44000015 	stw	r16,0(r8)
    ecd8:	d8c02015 	stw	r3,128(sp)
    ecdc:	dc401f15 	stw	r17,124(sp)
    ece0:	008001c4 	movi	r2,7
    ece4:	14417416 	blt	r2,r17,f2b8 <___svfprintf_internal_r+0x1580>
    ece8:	42000204 	addi	r8,r8,8
    ecec:	d8803817 	ldw	r2,224(sp)
    ecf0:	d9003417 	ldw	r4,208(sp)
    ecf4:	8c400044 	addi	r17,r17,1
    ecf8:	10c7883a 	add	r3,r2,r3
    ecfc:	40800115 	stw	r2,4(r8)
    ed00:	41000015 	stw	r4,0(r8)
    ed04:	d8c02015 	stw	r3,128(sp)
    ed08:	dc401f15 	stw	r17,124(sp)
    ed0c:	008001c4 	movi	r2,7
    ed10:	14417216 	blt	r2,r17,f2dc <___svfprintf_internal_r+0x15a4>
    ed14:	45800204 	addi	r22,r8,8
    ed18:	d9003617 	ldw	r4,216(sp)
    ed1c:	d9403717 	ldw	r5,220(sp)
    ed20:	000d883a 	mov	r6,zero
    ed24:	000f883a 	mov	r7,zero
    ed28:	d8c03d15 	stw	r3,244(sp)
    ed2c:	000af140 	call	af14 <__eqdf2>
    ed30:	d8c03d17 	ldw	r3,244(sp)
    ed34:	1000b326 	beq	r2,zero,f004 <___svfprintf_internal_r+0x12cc>
    ed38:	d9403317 	ldw	r5,204(sp)
    ed3c:	84000044 	addi	r16,r16,1
    ed40:	8c400044 	addi	r17,r17,1
    ed44:	28bfffc4 	addi	r2,r5,-1
    ed48:	1887883a 	add	r3,r3,r2
    ed4c:	b0800115 	stw	r2,4(r22)
    ed50:	b4000015 	stw	r16,0(r22)
    ed54:	d8c02015 	stw	r3,128(sp)
    ed58:	dc401f15 	stw	r17,124(sp)
    ed5c:	008001c4 	movi	r2,7
    ed60:	1440d216 	blt	r2,r17,f0ac <___svfprintf_internal_r+0x1374>
    ed64:	b5800204 	addi	r22,r22,8
    ed68:	d9003b17 	ldw	r4,236(sp)
    ed6c:	df0022c4 	addi	fp,sp,139
    ed70:	8c400044 	addi	r17,r17,1
    ed74:	20c7883a 	add	r3,r4,r3
    ed78:	b7000015 	stw	fp,0(r22)
    ed7c:	b1000115 	stw	r4,4(r22)
    ed80:	d8c02015 	stw	r3,128(sp)
    ed84:	dc401f15 	stw	r17,124(sp)
    ed88:	008001c4 	movi	r2,7
    ed8c:	14400e16 	blt	r2,r17,edc8 <___svfprintf_internal_r+0x1090>
    ed90:	b2000204 	addi	r8,r22,8
    ed94:	003e3c06 	br	e688 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e688>
    ed98:	010000f4 	movhi	r4,3
    ed9c:	2120c284 	addi	r4,r4,-31990
    eda0:	d9002b15 	stw	r4,172(sp)
    eda4:	d9002b17 	ldw	r4,172(sp)
    eda8:	1c07883a 	add	r3,r3,r16
    edac:	44000115 	stw	r16,4(r8)
    edb0:	41000015 	stw	r4,0(r8)
    edb4:	10800044 	addi	r2,r2,1
    edb8:	d8c02015 	stw	r3,128(sp)
    edbc:	d8801f15 	stw	r2,124(sp)
    edc0:	010001c4 	movi	r4,7
    edc4:	20be2f0e 	bge	r4,r2,e684 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e684>
    edc8:	d9402c17 	ldw	r5,176(sp)
    edcc:	d9801e04 	addi	r6,sp,120
    edd0:	9809883a 	mov	r4,r19
    edd4:	00167f00 	call	167f0 <__ssprint_r>
    edd8:	103cbc1e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    eddc:	d8c02017 	ldw	r3,128(sp)
    ede0:	da000404 	addi	r8,sp,16
    ede4:	003e2806 	br	e688 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e688>
    ede8:	d9402c17 	ldw	r5,176(sp)
    edec:	d9801e04 	addi	r6,sp,120
    edf0:	9809883a 	mov	r4,r19
    edf4:	00167f00 	call	167f0 <__ssprint_r>
    edf8:	103e5f26 	beq	r2,zero,e778 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e778>
    edfc:	003cb306 	br	e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    ee00:	d9402c17 	ldw	r5,176(sp)
    ee04:	d9801e04 	addi	r6,sp,120
    ee08:	9809883a 	mov	r4,r19
    ee0c:	00167f00 	call	167f0 <__ssprint_r>
    ee10:	103cae1e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    ee14:	d8c02017 	ldw	r3,128(sp)
    ee18:	da000404 	addi	r8,sp,16
    ee1c:	003e0d06 	br	e654 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e654>
    ee20:	d9402c17 	ldw	r5,176(sp)
    ee24:	d9801e04 	addi	r6,sp,120
    ee28:	9809883a 	mov	r4,r19
    ee2c:	00167f00 	call	167f0 <__ssprint_r>
    ee30:	103ca61e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    ee34:	d8c02017 	ldw	r3,128(sp)
    ee38:	da000404 	addi	r8,sp,16
    ee3c:	003dc106 	br	e544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e544>
    ee40:	d9402c17 	ldw	r5,176(sp)
    ee44:	d9801e04 	addi	r6,sp,120
    ee48:	9809883a 	mov	r4,r19
    ee4c:	00167f00 	call	167f0 <__ssprint_r>
    ee50:	103c9e1e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    ee54:	d8c02017 	ldw	r3,128(sp)
    ee58:	da000404 	addi	r8,sp,16
    ee5c:	003dc706 	br	e57c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e57c>
    ee60:	d8802917 	ldw	r2,164(sp)
    ee64:	d8002785 	stb	zero,158(sp)
    ee68:	103f0816 	blt	r2,zero,ea8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea8c>
    ee6c:	00ffdfc4 	movi	r3,-129
    ee70:	a584b03a 	or	r2,r20,r22
    ee74:	90e4703a 	and	r18,r18,r3
    ee78:	103c8126 	beq	r2,zero,e080 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e080>
    ee7c:	0039883a 	mov	fp,zero
    ee80:	003e7606 	br	e85c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e85c>
    ee84:	9080040c 	andi	r2,r18,16
    ee88:	10013d26 	beq	r2,zero,f380 <___svfprintf_internal_r+0x1648>
    ee8c:	d9002d17 	ldw	r4,180(sp)
    ee90:	d9402917 	ldw	r5,164(sp)
    ee94:	d8002785 	stb	zero,158(sp)
    ee98:	20800104 	addi	r2,r4,4
    ee9c:	25000017 	ldw	r20,0(r4)
    eea0:	002d883a 	mov	r22,zero
    eea4:	28013f16 	blt	r5,zero,f3a4 <___svfprintf_internal_r+0x166c>
    eea8:	00ffdfc4 	movi	r3,-129
    eeac:	d8802d15 	stw	r2,180(sp)
    eeb0:	90e4703a 	and	r18,r18,r3
    eeb4:	a03d2b26 	beq	r20,zero,e364 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e364>
    eeb8:	0039883a 	mov	fp,zero
    eebc:	003d2e06 	br	e378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e378>
    eec0:	dc402617 	ldw	r17,152(sp)
    eec4:	0441830e 	bge	zero,r17,f4d4 <___svfprintf_internal_r+0x179c>
    eec8:	dc403217 	ldw	r17,200(sp)
    eecc:	d8803317 	ldw	r2,204(sp)
    eed0:	1440010e 	bge	r2,r17,eed8 <___svfprintf_internal_r+0x11a0>
    eed4:	1023883a 	mov	r17,r2
    eed8:	04400a0e 	bge	zero,r17,ef04 <___svfprintf_internal_r+0x11cc>
    eedc:	d8801f17 	ldw	r2,124(sp)
    eee0:	1c47883a 	add	r3,r3,r17
    eee4:	44000015 	stw	r16,0(r8)
    eee8:	10800044 	addi	r2,r2,1
    eeec:	44400115 	stw	r17,4(r8)
    eef0:	d8c02015 	stw	r3,128(sp)
    eef4:	d8801f15 	stw	r2,124(sp)
    eef8:	010001c4 	movi	r4,7
    eefc:	20827516 	blt	r4,r2,f8d4 <___svfprintf_internal_r+0x1b9c>
    ef00:	42000204 	addi	r8,r8,8
    ef04:	88027b16 	blt	r17,zero,f8f4 <___svfprintf_internal_r+0x1bbc>
    ef08:	d9003217 	ldw	r4,200(sp)
    ef0c:	2463c83a 	sub	r17,r4,r17
    ef10:	0440990e 	bge	zero,r17,f178 <___svfprintf_internal_r+0x1440>
    ef14:	05800404 	movi	r22,16
    ef18:	d8801f17 	ldw	r2,124(sp)
    ef1c:	b441530e 	bge	r22,r17,f46c <___svfprintf_internal_r+0x1734>
    ef20:	010000f4 	movhi	r4,3
    ef24:	2120c284 	addi	r4,r4,-31990
    ef28:	d9002b15 	stw	r4,172(sp)
    ef2c:	070001c4 	movi	fp,7
    ef30:	dd002c17 	ldw	r20,176(sp)
    ef34:	00000306 	br	ef44 <___svfprintf_internal_r+0x120c>
    ef38:	42000204 	addi	r8,r8,8
    ef3c:	8c7ffc04 	addi	r17,r17,-16
    ef40:	b4414d0e 	bge	r22,r17,f478 <___svfprintf_internal_r+0x1740>
    ef44:	18c00404 	addi	r3,r3,16
    ef48:	10800044 	addi	r2,r2,1
    ef4c:	45400015 	stw	r21,0(r8)
    ef50:	45800115 	stw	r22,4(r8)
    ef54:	d8c02015 	stw	r3,128(sp)
    ef58:	d8801f15 	stw	r2,124(sp)
    ef5c:	e0bff60e 	bge	fp,r2,ef38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ef38>
    ef60:	d9801e04 	addi	r6,sp,120
    ef64:	a00b883a 	mov	r5,r20
    ef68:	9809883a 	mov	r4,r19
    ef6c:	00167f00 	call	167f0 <__ssprint_r>
    ef70:	103c561e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    ef74:	d8c02017 	ldw	r3,128(sp)
    ef78:	d8801f17 	ldw	r2,124(sp)
    ef7c:	da000404 	addi	r8,sp,16
    ef80:	003fee06 	br	ef3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ef3c>
    ef84:	d9402c17 	ldw	r5,176(sp)
    ef88:	d9801e04 	addi	r6,sp,120
    ef8c:	9809883a 	mov	r4,r19
    ef90:	00167f00 	call	167f0 <__ssprint_r>
    ef94:	103c4d1e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    ef98:	d8c02017 	ldw	r3,128(sp)
    ef9c:	df002787 	ldb	fp,158(sp)
    efa0:	da000404 	addi	r8,sp,16
    efa4:	003d5a06 	br	e510 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e510>
    efa8:	9080040c 	andi	r2,r18,16
    efac:	10005c26 	beq	r2,zero,f120 <___svfprintf_internal_r+0x13e8>
    efb0:	d9402d17 	ldw	r5,180(sp)
    efb4:	d8c02917 	ldw	r3,164(sp)
    efb8:	d8002785 	stb	zero,158(sp)
    efbc:	28800104 	addi	r2,r5,4
    efc0:	2d000017 	ldw	r20,0(r5)
    efc4:	002d883a 	mov	r22,zero
    efc8:	18005e16 	blt	r3,zero,f144 <___svfprintf_internal_r+0x140c>
    efcc:	00ffdfc4 	movi	r3,-129
    efd0:	d8802d15 	stw	r2,180(sp)
    efd4:	90e4703a 	and	r18,r18,r3
    efd8:	0039883a 	mov	fp,zero
    efdc:	a03dfe26 	beq	r20,zero,e7d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e7d8>
    efe0:	00800244 	movi	r2,9
    efe4:	153cb336 	bltu	r2,r20,e2b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e2b4>
    efe8:	a5000c04 	addi	r20,r20,48
    efec:	dc001dc4 	addi	r16,sp,119
    eff0:	dd001dc5 	stb	r20,119(sp)
    eff4:	d8c02817 	ldw	r3,160(sp)
    eff8:	1c07c83a 	sub	r3,r3,r16
    effc:	d8c02e15 	stw	r3,184(sp)
    f000:	003cf506 	br	e3d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e3d8>
    f004:	d8803317 	ldw	r2,204(sp)
    f008:	143fffc4 	addi	r16,r2,-1
    f00c:	043f560e 	bge	zero,r16,ed68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ed68>
    f010:	07000404 	movi	fp,16
    f014:	e403530e 	bge	fp,r16,fd64 <___svfprintf_internal_r+0x202c>
    f018:	014000f4 	movhi	r5,3
    f01c:	2960c284 	addi	r5,r5,-31990
    f020:	d9402b15 	stw	r5,172(sp)
    f024:	01c001c4 	movi	r7,7
    f028:	dd002c17 	ldw	r20,176(sp)
    f02c:	00000306 	br	f03c <___svfprintf_internal_r+0x1304>
    f030:	843ffc04 	addi	r16,r16,-16
    f034:	b5800204 	addi	r22,r22,8
    f038:	e400130e 	bge	fp,r16,f088 <___svfprintf_internal_r+0x1350>
    f03c:	18c00404 	addi	r3,r3,16
    f040:	8c400044 	addi	r17,r17,1
    f044:	b5400015 	stw	r21,0(r22)
    f048:	b7000115 	stw	fp,4(r22)
    f04c:	d8c02015 	stw	r3,128(sp)
    f050:	dc401f15 	stw	r17,124(sp)
    f054:	3c7ff60e 	bge	r7,r17,f030 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f030>
    f058:	d9801e04 	addi	r6,sp,120
    f05c:	a00b883a 	mov	r5,r20
    f060:	9809883a 	mov	r4,r19
    f064:	d9c03d15 	stw	r7,244(sp)
    f068:	00167f00 	call	167f0 <__ssprint_r>
    f06c:	d9c03d17 	ldw	r7,244(sp)
    f070:	103c161e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    f074:	843ffc04 	addi	r16,r16,-16
    f078:	d8c02017 	ldw	r3,128(sp)
    f07c:	dc401f17 	ldw	r17,124(sp)
    f080:	dd800404 	addi	r22,sp,16
    f084:	e43fed16 	blt	fp,r16,f03c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f03c>
    f088:	d8802b17 	ldw	r2,172(sp)
    f08c:	1c07883a 	add	r3,r3,r16
    f090:	8c400044 	addi	r17,r17,1
    f094:	b0800015 	stw	r2,0(r22)
    f098:	b4000115 	stw	r16,4(r22)
    f09c:	d8c02015 	stw	r3,128(sp)
    f0a0:	dc401f15 	stw	r17,124(sp)
    f0a4:	008001c4 	movi	r2,7
    f0a8:	147f2e0e 	bge	r2,r17,ed64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ed64>
    f0ac:	d9402c17 	ldw	r5,176(sp)
    f0b0:	d9801e04 	addi	r6,sp,120
    f0b4:	9809883a 	mov	r4,r19
    f0b8:	00167f00 	call	167f0 <__ssprint_r>
    f0bc:	103c031e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    f0c0:	d8c02017 	ldw	r3,128(sp)
    f0c4:	dc401f17 	ldw	r17,124(sp)
    f0c8:	dd800404 	addi	r22,sp,16
    f0cc:	003f2606 	br	ed68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ed68>
    f0d0:	9080040c 	andi	r2,r18,16
    f0d4:	1000c326 	beq	r2,zero,f3e4 <___svfprintf_internal_r+0x16ac>
    f0d8:	d8802d17 	ldw	r2,180(sp)
    f0dc:	15000017 	ldw	r20,0(r2)
    f0e0:	10800104 	addi	r2,r2,4
    f0e4:	d8802d15 	stw	r2,180(sp)
    f0e8:	a02dd7fa 	srai	r22,r20,31
    f0ec:	b005883a 	mov	r2,r22
    f0f0:	103c680e 	bge	r2,zero,e294 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e294>
    f0f4:	0529c83a 	sub	r20,zero,r20
    f0f8:	a004c03a 	cmpne	r2,r20,zero
    f0fc:	05adc83a 	sub	r22,zero,r22
    f100:	b0adc83a 	sub	r22,r22,r2
    f104:	d8802917 	ldw	r2,164(sp)
    f108:	07000b44 	movi	fp,45
    f10c:	df002785 	stb	fp,158(sp)
    f110:	10022e16 	blt	r2,zero,f9cc <___svfprintf_internal_r+0x1c94>
    f114:	00bfdfc4 	movi	r2,-129
    f118:	90a4703a 	and	r18,r18,r2
    f11c:	003c6406 	br	e2b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e2b0>
    f120:	9080100c 	andi	r2,r18,64
    f124:	d8002785 	stb	zero,158(sp)
    f128:	10012526 	beq	r2,zero,f5c0 <___svfprintf_internal_r+0x1888>
    f12c:	d9002d17 	ldw	r4,180(sp)
    f130:	d9402917 	ldw	r5,164(sp)
    f134:	002d883a 	mov	r22,zero
    f138:	20800104 	addi	r2,r4,4
    f13c:	2500000b 	ldhu	r20,0(r4)
    f140:	283fa20e 	bge	r5,zero,efcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700efcc>
    f144:	d8802d15 	stw	r2,180(sp)
    f148:	0039883a 	mov	fp,zero
    f14c:	a584b03a 	or	r2,r20,r22
    f150:	103c571e 	bne	r2,zero,e2b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e2b0>
    f154:	00800044 	movi	r2,1
    f158:	003e5006 	br	ea9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea9c>
    f15c:	d9402c17 	ldw	r5,176(sp)
    f160:	d9801e04 	addi	r6,sp,120
    f164:	9809883a 	mov	r4,r19
    f168:	00167f00 	call	167f0 <__ssprint_r>
    f16c:	103bd71e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    f170:	d8c02017 	ldw	r3,128(sp)
    f174:	da000404 	addi	r8,sp,16
    f178:	d9003217 	ldw	r4,200(sp)
    f17c:	d8802617 	ldw	r2,152(sp)
    f180:	d9403317 	ldw	r5,204(sp)
    f184:	8123883a 	add	r17,r16,r4
    f188:	11400216 	blt	r2,r5,f194 <___svfprintf_internal_r+0x145c>
    f18c:	9100004c 	andi	r4,r18,1
    f190:	20000d26 	beq	r4,zero,f1c8 <___svfprintf_internal_r+0x1490>
    f194:	d9003817 	ldw	r4,224(sp)
    f198:	d9403417 	ldw	r5,208(sp)
    f19c:	1907883a 	add	r3,r3,r4
    f1a0:	d9001f17 	ldw	r4,124(sp)
    f1a4:	41400015 	stw	r5,0(r8)
    f1a8:	d9403817 	ldw	r5,224(sp)
    f1ac:	21000044 	addi	r4,r4,1
    f1b0:	d8c02015 	stw	r3,128(sp)
    f1b4:	41400115 	stw	r5,4(r8)
    f1b8:	d9001f15 	stw	r4,124(sp)
    f1bc:	014001c4 	movi	r5,7
    f1c0:	2901dc16 	blt	r5,r4,f934 <___svfprintf_internal_r+0x1bfc>
    f1c4:	42000204 	addi	r8,r8,8
    f1c8:	d9003317 	ldw	r4,204(sp)
    f1cc:	8121883a 	add	r16,r16,r4
    f1d0:	2085c83a 	sub	r2,r4,r2
    f1d4:	8461c83a 	sub	r16,r16,r17
    f1d8:	1400010e 	bge	r2,r16,f1e0 <___svfprintf_internal_r+0x14a8>
    f1dc:	1021883a 	mov	r16,r2
    f1e0:	04000a0e 	bge	zero,r16,f20c <___svfprintf_internal_r+0x14d4>
    f1e4:	d9001f17 	ldw	r4,124(sp)
    f1e8:	1c07883a 	add	r3,r3,r16
    f1ec:	44400015 	stw	r17,0(r8)
    f1f0:	21000044 	addi	r4,r4,1
    f1f4:	44000115 	stw	r16,4(r8)
    f1f8:	d8c02015 	stw	r3,128(sp)
    f1fc:	d9001f15 	stw	r4,124(sp)
    f200:	014001c4 	movi	r5,7
    f204:	2901e616 	blt	r5,r4,f9a0 <___svfprintf_internal_r+0x1c68>
    f208:	42000204 	addi	r8,r8,8
    f20c:	8001f616 	blt	r16,zero,f9e8 <___svfprintf_internal_r+0x1cb0>
    f210:	1421c83a 	sub	r16,r2,r16
    f214:	043d1c0e 	bge	zero,r16,e688 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e688>
    f218:	04400404 	movi	r17,16
    f21c:	d8801f17 	ldw	r2,124(sp)
    f220:	8c3edd0e 	bge	r17,r16,ed98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ed98>
    f224:	014000f4 	movhi	r5,3
    f228:	2960c284 	addi	r5,r5,-31990
    f22c:	d9402b15 	stw	r5,172(sp)
    f230:	058001c4 	movi	r22,7
    f234:	dd002c17 	ldw	r20,176(sp)
    f238:	00000306 	br	f248 <___svfprintf_internal_r+0x1510>
    f23c:	42000204 	addi	r8,r8,8
    f240:	843ffc04 	addi	r16,r16,-16
    f244:	8c3ed70e 	bge	r17,r16,eda4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eda4>
    f248:	18c00404 	addi	r3,r3,16
    f24c:	10800044 	addi	r2,r2,1
    f250:	45400015 	stw	r21,0(r8)
    f254:	44400115 	stw	r17,4(r8)
    f258:	d8c02015 	stw	r3,128(sp)
    f25c:	d8801f15 	stw	r2,124(sp)
    f260:	b0bff60e 	bge	r22,r2,f23c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f23c>
    f264:	d9801e04 	addi	r6,sp,120
    f268:	a00b883a 	mov	r5,r20
    f26c:	9809883a 	mov	r4,r19
    f270:	00167f00 	call	167f0 <__ssprint_r>
    f274:	103b951e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    f278:	d8c02017 	ldw	r3,128(sp)
    f27c:	d8801f17 	ldw	r2,124(sp)
    f280:	da000404 	addi	r8,sp,16
    f284:	003fee06 	br	f240 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f240>
    f288:	9088703a 	and	r4,r18,r2
    f28c:	203e8d1e 	bne	r4,zero,ecc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ecc4>
    f290:	dc401f17 	ldw	r17,124(sp)
    f294:	40800115 	stw	r2,4(r8)
    f298:	44000015 	stw	r16,0(r8)
    f29c:	8c400044 	addi	r17,r17,1
    f2a0:	d8c02015 	stw	r3,128(sp)
    f2a4:	dc401f15 	stw	r17,124(sp)
    f2a8:	008001c4 	movi	r2,7
    f2ac:	147f7f16 	blt	r2,r17,f0ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f0ac>
    f2b0:	45800204 	addi	r22,r8,8
    f2b4:	003eac06 	br	ed68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ed68>
    f2b8:	d9402c17 	ldw	r5,176(sp)
    f2bc:	d9801e04 	addi	r6,sp,120
    f2c0:	9809883a 	mov	r4,r19
    f2c4:	00167f00 	call	167f0 <__ssprint_r>
    f2c8:	103b801e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    f2cc:	d8c02017 	ldw	r3,128(sp)
    f2d0:	dc401f17 	ldw	r17,124(sp)
    f2d4:	da000404 	addi	r8,sp,16
    f2d8:	003e8406 	br	ecec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ecec>
    f2dc:	d9402c17 	ldw	r5,176(sp)
    f2e0:	d9801e04 	addi	r6,sp,120
    f2e4:	9809883a 	mov	r4,r19
    f2e8:	00167f00 	call	167f0 <__ssprint_r>
    f2ec:	103b771e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    f2f0:	d8c02017 	ldw	r3,128(sp)
    f2f4:	dc401f17 	ldw	r17,124(sp)
    f2f8:	dd800404 	addi	r22,sp,16
    f2fc:	003e8606 	br	ed18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ed18>
    f300:	0029883a 	mov	r20,zero
    f304:	a5000c04 	addi	r20,r20,48
    f308:	dc001dc4 	addi	r16,sp,119
    f30c:	dd001dc5 	stb	r20,119(sp)
    f310:	003f3806 	br	eff4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eff4>
    f314:	d9402c17 	ldw	r5,176(sp)
    f318:	d9801e04 	addi	r6,sp,120
    f31c:	9809883a 	mov	r4,r19
    f320:	00167f00 	call	167f0 <__ssprint_r>
    f324:	103b691e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    f328:	d8c02017 	ldw	r3,128(sp)
    f32c:	da000404 	addi	r8,sp,16
    f330:	003c9506 	br	e588 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e588>
    f334:	d9003617 	ldw	r4,216(sp)
    f338:	d9403717 	ldw	r5,220(sp)
    f33c:	da003e15 	stw	r8,248(sp)
    f340:	00091740 	call	9174 <__fpclassifyd>
    f344:	da003e17 	ldw	r8,248(sp)
    f348:	1000bd1e 	bne	r2,zero,f640 <___svfprintf_internal_r+0x1908>
    f34c:	008011c4 	movi	r2,71
    f350:	14411e0e 	bge	r2,r17,f7cc <___svfprintf_internal_r+0x1a94>
    f354:	040000f4 	movhi	r16,3
    f358:	8420b504 	addi	r16,r16,-32044
    f35c:	00c000c4 	movi	r3,3
    f360:	00bfdfc4 	movi	r2,-129
    f364:	d8c02a15 	stw	r3,168(sp)
    f368:	90a4703a 	and	r18,r18,r2
    f36c:	df002783 	ldbu	fp,158(sp)
    f370:	d8c02e15 	stw	r3,184(sp)
    f374:	d8002915 	stw	zero,164(sp)
    f378:	d8003215 	stw	zero,200(sp)
    f37c:	003c1c06 	br	e3f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e3f0>
    f380:	9080100c 	andi	r2,r18,64
    f384:	d8002785 	stb	zero,158(sp)
    f388:	10009426 	beq	r2,zero,f5dc <___svfprintf_internal_r+0x18a4>
    f38c:	d8c02d17 	ldw	r3,180(sp)
    f390:	d9002917 	ldw	r4,164(sp)
    f394:	002d883a 	mov	r22,zero
    f398:	18800104 	addi	r2,r3,4
    f39c:	1d00000b 	ldhu	r20,0(r3)
    f3a0:	203ec10e 	bge	r4,zero,eea8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eea8>
    f3a4:	a586b03a 	or	r3,r20,r22
    f3a8:	d8802d15 	stw	r2,180(sp)
    f3ac:	183ec21e 	bne	r3,zero,eeb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eeb8>
    f3b0:	0039883a 	mov	fp,zero
    f3b4:	0005883a 	mov	r2,zero
    f3b8:	003db806 	br	ea9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea9c>
    f3bc:	d8802d17 	ldw	r2,180(sp)
    f3c0:	d8c02d17 	ldw	r3,180(sp)
    f3c4:	d9002d17 	ldw	r4,180(sp)
    f3c8:	10800017 	ldw	r2,0(r2)
    f3cc:	18c00117 	ldw	r3,4(r3)
    f3d0:	21000204 	addi	r4,r4,8
    f3d4:	d8803615 	stw	r2,216(sp)
    f3d8:	d8c03715 	stw	r3,220(sp)
    f3dc:	d9002d15 	stw	r4,180(sp)
    f3e0:	003b8206 	br	e1ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e1ec>
    f3e4:	9080100c 	andi	r2,r18,64
    f3e8:	10010726 	beq	r2,zero,f808 <___svfprintf_internal_r+0x1ad0>
    f3ec:	d8c02d17 	ldw	r3,180(sp)
    f3f0:	1d00000f 	ldh	r20,0(r3)
    f3f4:	18c00104 	addi	r3,r3,4
    f3f8:	d8c02d15 	stw	r3,180(sp)
    f3fc:	a02dd7fa 	srai	r22,r20,31
    f400:	b005883a 	mov	r2,r22
    f404:	003ba206 	br	e290 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e290>
    f408:	9080100c 	andi	r2,r18,64
    f40c:	10010526 	beq	r2,zero,f824 <___svfprintf_internal_r+0x1aec>
    f410:	d9002d17 	ldw	r4,180(sp)
    f414:	002d883a 	mov	r22,zero
    f418:	2500000b 	ldhu	r20,0(r4)
    f41c:	21000104 	addi	r4,r4,4
    f420:	d9002d15 	stw	r4,180(sp)
    f424:	003cfe06 	br	e820 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e820>
    f428:	bc400007 	ldb	r17,0(r23)
    f42c:	003a9606 	br	de88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de88>
    f430:	9080040c 	andi	r2,r18,16
    f434:	10010126 	beq	r2,zero,f83c <___svfprintf_internal_r+0x1b04>
    f438:	d9402d17 	ldw	r5,180(sp)
    f43c:	d8c02f17 	ldw	r3,188(sp)
    f440:	28800017 	ldw	r2,0(r5)
    f444:	29400104 	addi	r5,r5,4
    f448:	d9402d15 	stw	r5,180(sp)
    f44c:	10c00015 	stw	r3,0(r2)
    f450:	003a6406 	br	dde4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dde4>
    f454:	d9002917 	ldw	r4,164(sp)
    f458:	d8002785 	stb	zero,158(sp)
    f45c:	203d8d16 	blt	r4,zero,ea94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea94>
    f460:	00bfdfc4 	movi	r2,-129
    f464:	90a4703a 	and	r18,r18,r2
    f468:	003b0506 	br	e080 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e080>
    f46c:	014000f4 	movhi	r5,3
    f470:	2960c284 	addi	r5,r5,-31990
    f474:	d9402b15 	stw	r5,172(sp)
    f478:	d9402b17 	ldw	r5,172(sp)
    f47c:	1c47883a 	add	r3,r3,r17
    f480:	10800044 	addi	r2,r2,1
    f484:	41400015 	stw	r5,0(r8)
    f488:	44400115 	stw	r17,4(r8)
    f48c:	d8c02015 	stw	r3,128(sp)
    f490:	d8801f15 	stw	r2,124(sp)
    f494:	010001c4 	movi	r4,7
    f498:	20bf3016 	blt	r4,r2,f15c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f15c>
    f49c:	42000204 	addi	r8,r8,8
    f4a0:	003f3506 	br	f178 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f178>
    f4a4:	010000f4 	movhi	r4,3
    f4a8:	2120c284 	addi	r4,r4,-31990
    f4ac:	d9002b15 	stw	r4,172(sp)
    f4b0:	003c5e06 	br	e62c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e62c>
    f4b4:	d9402c17 	ldw	r5,176(sp)
    f4b8:	d9801e04 	addi	r6,sp,120
    f4bc:	9809883a 	mov	r4,r19
    f4c0:	00167f00 	call	167f0 <__ssprint_r>
    f4c4:	103b011e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    f4c8:	d8c02017 	ldw	r3,128(sp)
    f4cc:	da000404 	addi	r8,sp,16
    f4d0:	003d9306 	br	eb20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eb20>
    f4d4:	d8801f17 	ldw	r2,124(sp)
    f4d8:	014000f4 	movhi	r5,3
    f4dc:	01000044 	movi	r4,1
    f4e0:	18c00044 	addi	r3,r3,1
    f4e4:	10800044 	addi	r2,r2,1
    f4e8:	2960c204 	addi	r5,r5,-31992
    f4ec:	41000115 	stw	r4,4(r8)
    f4f0:	41400015 	stw	r5,0(r8)
    f4f4:	d8c02015 	stw	r3,128(sp)
    f4f8:	d8801f15 	stw	r2,124(sp)
    f4fc:	010001c4 	movi	r4,7
    f500:	2080b516 	blt	r4,r2,f7d8 <___svfprintf_internal_r+0x1aa0>
    f504:	42000204 	addi	r8,r8,8
    f508:	8800041e 	bne	r17,zero,f51c <___svfprintf_internal_r+0x17e4>
    f50c:	d8803317 	ldw	r2,204(sp)
    f510:	1000021e 	bne	r2,zero,f51c <___svfprintf_internal_r+0x17e4>
    f514:	9080004c 	andi	r2,r18,1
    f518:	103c5b26 	beq	r2,zero,e688 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e688>
    f51c:	d9003817 	ldw	r4,224(sp)
    f520:	d8801f17 	ldw	r2,124(sp)
    f524:	d9403417 	ldw	r5,208(sp)
    f528:	20c7883a 	add	r3,r4,r3
    f52c:	10800044 	addi	r2,r2,1
    f530:	41000115 	stw	r4,4(r8)
    f534:	41400015 	stw	r5,0(r8)
    f538:	d8c02015 	stw	r3,128(sp)
    f53c:	d8801f15 	stw	r2,124(sp)
    f540:	010001c4 	movi	r4,7
    f544:	20818016 	blt	r4,r2,fb48 <___svfprintf_internal_r+0x1e10>
    f548:	42000204 	addi	r8,r8,8
    f54c:	0463c83a 	sub	r17,zero,r17
    f550:	0440cb0e 	bge	zero,r17,f880 <___svfprintf_internal_r+0x1b48>
    f554:	05800404 	movi	r22,16
    f558:	b440e80e 	bge	r22,r17,f8fc <___svfprintf_internal_r+0x1bc4>
    f55c:	014000f4 	movhi	r5,3
    f560:	2960c284 	addi	r5,r5,-31990
    f564:	d9402b15 	stw	r5,172(sp)
    f568:	070001c4 	movi	fp,7
    f56c:	dd002c17 	ldw	r20,176(sp)
    f570:	00000306 	br	f580 <___svfprintf_internal_r+0x1848>
    f574:	42000204 	addi	r8,r8,8
    f578:	8c7ffc04 	addi	r17,r17,-16
    f57c:	b440e20e 	bge	r22,r17,f908 <___svfprintf_internal_r+0x1bd0>
    f580:	18c00404 	addi	r3,r3,16
    f584:	10800044 	addi	r2,r2,1
    f588:	45400015 	stw	r21,0(r8)
    f58c:	45800115 	stw	r22,4(r8)
    f590:	d8c02015 	stw	r3,128(sp)
    f594:	d8801f15 	stw	r2,124(sp)
    f598:	e0bff60e 	bge	fp,r2,f574 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f574>
    f59c:	d9801e04 	addi	r6,sp,120
    f5a0:	a00b883a 	mov	r5,r20
    f5a4:	9809883a 	mov	r4,r19
    f5a8:	00167f00 	call	167f0 <__ssprint_r>
    f5ac:	103ac71e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    f5b0:	d8c02017 	ldw	r3,128(sp)
    f5b4:	d8801f17 	ldw	r2,124(sp)
    f5b8:	da000404 	addi	r8,sp,16
    f5bc:	003fee06 	br	f578 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f578>
    f5c0:	d8c02d17 	ldw	r3,180(sp)
    f5c4:	d9002917 	ldw	r4,164(sp)
    f5c8:	002d883a 	mov	r22,zero
    f5cc:	18800104 	addi	r2,r3,4
    f5d0:	1d000017 	ldw	r20,0(r3)
    f5d4:	203e7d0e 	bge	r4,zero,efcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700efcc>
    f5d8:	003eda06 	br	f144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f144>
    f5dc:	d9402d17 	ldw	r5,180(sp)
    f5e0:	d8c02917 	ldw	r3,164(sp)
    f5e4:	002d883a 	mov	r22,zero
    f5e8:	28800104 	addi	r2,r5,4
    f5ec:	2d000017 	ldw	r20,0(r5)
    f5f0:	183e2d0e 	bge	r3,zero,eea8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eea8>
    f5f4:	003f6b06 	br	f3a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f3a4>
    f5f8:	d8c02d15 	stw	r3,180(sp)
    f5fc:	0039883a 	mov	fp,zero
    f600:	003ed206 	br	f14c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f14c>
    f604:	bc400043 	ldbu	r17,1(r23)
    f608:	94800814 	ori	r18,r18,32
    f60c:	bdc00044 	addi	r23,r23,1
    f610:	8c403fcc 	andi	r17,r17,255
    f614:	8c40201c 	xori	r17,r17,128
    f618:	8c7fe004 	addi	r17,r17,-128
    f61c:	003a1a06 	br	de88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de88>
    f620:	d9402c17 	ldw	r5,176(sp)
    f624:	d9801e04 	addi	r6,sp,120
    f628:	9809883a 	mov	r4,r19
    f62c:	00167f00 	call	167f0 <__ssprint_r>
    f630:	103aa61e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    f634:	d8c02017 	ldw	r3,128(sp)
    f638:	da000404 	addi	r8,sp,16
    f63c:	003d4a06 	br	eb68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eb68>
    f640:	d9002917 	ldw	r4,164(sp)
    f644:	05bff7c4 	movi	r22,-33
    f648:	00bfffc4 	movi	r2,-1
    f64c:	8dac703a 	and	r22,r17,r22
    f650:	20806a26 	beq	r4,r2,f7fc <___svfprintf_internal_r+0x1ac4>
    f654:	008011c4 	movi	r2,71
    f658:	b0813726 	beq	r22,r2,fb38 <___svfprintf_internal_r+0x1e00>
    f65c:	d9003717 	ldw	r4,220(sp)
    f660:	90c04014 	ori	r3,r18,256
    f664:	d8c02b15 	stw	r3,172(sp)
    f668:	20015d16 	blt	r4,zero,fbe0 <___svfprintf_internal_r+0x1ea8>
    f66c:	dd003717 	ldw	r20,220(sp)
    f670:	d8002a05 	stb	zero,168(sp)
    f674:	00801984 	movi	r2,102
    f678:	88814026 	beq	r17,r2,fb7c <___svfprintf_internal_r+0x1e44>
    f67c:	00801184 	movi	r2,70
    f680:	88817126 	beq	r17,r2,fc48 <___svfprintf_internal_r+0x1f10>
    f684:	00801144 	movi	r2,69
    f688:	b0816226 	beq	r22,r2,fc14 <___svfprintf_internal_r+0x1edc>
    f68c:	d8c02917 	ldw	r3,164(sp)
    f690:	d8802104 	addi	r2,sp,132
    f694:	d8800315 	stw	r2,12(sp)
    f698:	d9403617 	ldw	r5,216(sp)
    f69c:	d8802504 	addi	r2,sp,148
    f6a0:	d8800215 	stw	r2,8(sp)
    f6a4:	d8802604 	addi	r2,sp,152
    f6a8:	d8c00015 	stw	r3,0(sp)
    f6ac:	d8800115 	stw	r2,4(sp)
    f6b0:	01c00084 	movi	r7,2
    f6b4:	a00d883a 	mov	r6,r20
    f6b8:	9809883a 	mov	r4,r19
    f6bc:	d8c03d15 	stw	r3,244(sp)
    f6c0:	da003e15 	stw	r8,248(sp)
    f6c4:	00125340 	call	12534 <_dtoa_r>
    f6c8:	1021883a 	mov	r16,r2
    f6cc:	008019c4 	movi	r2,103
    f6d0:	d8c03d17 	ldw	r3,244(sp)
    f6d4:	da003e17 	ldw	r8,248(sp)
    f6d8:	8880e726 	beq	r17,r2,fa78 <___svfprintf_internal_r+0x1d40>
    f6dc:	008011c4 	movi	r2,71
    f6e0:	8880d426 	beq	r17,r2,fa34 <___svfprintf_internal_r+0x1cfc>
    f6e4:	80f9883a 	add	fp,r16,r3
    f6e8:	d9003617 	ldw	r4,216(sp)
    f6ec:	000d883a 	mov	r6,zero
    f6f0:	000f883a 	mov	r7,zero
    f6f4:	a00b883a 	mov	r5,r20
    f6f8:	da003e15 	stw	r8,248(sp)
    f6fc:	000af140 	call	af14 <__eqdf2>
    f700:	da003e17 	ldw	r8,248(sp)
    f704:	1000e426 	beq	r2,zero,fa98 <___svfprintf_internal_r+0x1d60>
    f708:	d8802117 	ldw	r2,132(sp)
    f70c:	1700062e 	bgeu	r2,fp,f728 <___svfprintf_internal_r+0x19f0>
    f710:	01000c04 	movi	r4,48
    f714:	10c00044 	addi	r3,r2,1
    f718:	d8c02115 	stw	r3,132(sp)
    f71c:	11000005 	stb	r4,0(r2)
    f720:	d8802117 	ldw	r2,132(sp)
    f724:	173ffb36 	bltu	r2,fp,f714 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f714>
    f728:	1405c83a 	sub	r2,r2,r16
    f72c:	d8803315 	stw	r2,204(sp)
    f730:	008011c4 	movi	r2,71
    f734:	b080c526 	beq	r22,r2,fa4c <___svfprintf_internal_r+0x1d14>
    f738:	00801944 	movi	r2,101
    f73c:	1441d90e 	bge	r2,r17,fea4 <___svfprintf_internal_r+0x216c>
    f740:	d8c02617 	ldw	r3,152(sp)
    f744:	00801984 	movi	r2,102
    f748:	d8c03215 	stw	r3,200(sp)
    f74c:	88813426 	beq	r17,r2,fc20 <___svfprintf_internal_r+0x1ee8>
    f750:	d8c03217 	ldw	r3,200(sp)
    f754:	d9003317 	ldw	r4,204(sp)
    f758:	19012516 	blt	r3,r4,fbf0 <___svfprintf_internal_r+0x1eb8>
    f75c:	9480004c 	andi	r18,r18,1
    f760:	9001841e 	bne	r18,zero,fd74 <___svfprintf_internal_r+0x203c>
    f764:	1805883a 	mov	r2,r3
    f768:	1801cc16 	blt	r3,zero,fe9c <___svfprintf_internal_r+0x2164>
    f76c:	d8c03217 	ldw	r3,200(sp)
    f770:	044019c4 	movi	r17,103
    f774:	d8c02e15 	stw	r3,184(sp)
    f778:	df002a07 	ldb	fp,168(sp)
    f77c:	e000a61e 	bne	fp,zero,fa18 <___svfprintf_internal_r+0x1ce0>
    f780:	df002783 	ldbu	fp,158(sp)
    f784:	d8802a15 	stw	r2,168(sp)
    f788:	dc802b17 	ldw	r18,172(sp)
    f78c:	d8002915 	stw	zero,164(sp)
    f790:	003b1706 	br	e3f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e3f0>
    f794:	040000f4 	movhi	r16,3
    f798:	8420b204 	addi	r16,r16,-32056
    f79c:	003aa606 	br	e238 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e238>
    f7a0:	d9003917 	ldw	r4,228(sp)
    f7a4:	04001004 	movi	r16,64
    f7a8:	800b883a 	mov	r5,r16
    f7ac:	000cb740 	call	cb74 <_malloc_r>
    f7b0:	d9002c17 	ldw	r4,176(sp)
    f7b4:	20800015 	stw	r2,0(r4)
    f7b8:	20800415 	stw	r2,16(r4)
    f7bc:	1001cb26 	beq	r2,zero,feec <___svfprintf_internal_r+0x21b4>
    f7c0:	d8802c17 	ldw	r2,176(sp)
    f7c4:	14000515 	stw	r16,20(r2)
    f7c8:	00397606 	br	dda4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dda4>
    f7cc:	040000f4 	movhi	r16,3
    f7d0:	8420b404 	addi	r16,r16,-32048
    f7d4:	003ee106 	br	f35c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f35c>
    f7d8:	d9402c17 	ldw	r5,176(sp)
    f7dc:	d9801e04 	addi	r6,sp,120
    f7e0:	9809883a 	mov	r4,r19
    f7e4:	00167f00 	call	167f0 <__ssprint_r>
    f7e8:	103a381e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    f7ec:	dc402617 	ldw	r17,152(sp)
    f7f0:	d8c02017 	ldw	r3,128(sp)
    f7f4:	da000404 	addi	r8,sp,16
    f7f8:	003f4306 	br	f508 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f508>
    f7fc:	01400184 	movi	r5,6
    f800:	d9402915 	stw	r5,164(sp)
    f804:	003f9506 	br	f65c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f65c>
    f808:	d9002d17 	ldw	r4,180(sp)
    f80c:	25000017 	ldw	r20,0(r4)
    f810:	21000104 	addi	r4,r4,4
    f814:	d9002d15 	stw	r4,180(sp)
    f818:	a02dd7fa 	srai	r22,r20,31
    f81c:	b005883a 	mov	r2,r22
    f820:	003a9b06 	br	e290 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e290>
    f824:	d9402d17 	ldw	r5,180(sp)
    f828:	002d883a 	mov	r22,zero
    f82c:	2d000017 	ldw	r20,0(r5)
    f830:	29400104 	addi	r5,r5,4
    f834:	d9402d15 	stw	r5,180(sp)
    f838:	003bf906 	br	e820 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e820>
    f83c:	9480100c 	andi	r18,r18,64
    f840:	90006e26 	beq	r18,zero,f9fc <___svfprintf_internal_r+0x1cc4>
    f844:	d9002d17 	ldw	r4,180(sp)
    f848:	d9402f17 	ldw	r5,188(sp)
    f84c:	20800017 	ldw	r2,0(r4)
    f850:	21000104 	addi	r4,r4,4
    f854:	d9002d15 	stw	r4,180(sp)
    f858:	1140000d 	sth	r5,0(r2)
    f85c:	00396106 	br	dde4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dde4>
    f860:	d9402c17 	ldw	r5,176(sp)
    f864:	d9801e04 	addi	r6,sp,120
    f868:	9809883a 	mov	r4,r19
    f86c:	00167f00 	call	167f0 <__ssprint_r>
    f870:	103a161e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    f874:	d8c02017 	ldw	r3,128(sp)
    f878:	d8801f17 	ldw	r2,124(sp)
    f87c:	da000404 	addi	r8,sp,16
    f880:	d9403317 	ldw	r5,204(sp)
    f884:	10800044 	addi	r2,r2,1
    f888:	44000015 	stw	r16,0(r8)
    f88c:	28c7883a 	add	r3,r5,r3
    f890:	003b7706 	br	e670 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e670>
    f894:	8009883a 	mov	r4,r16
    f898:	da003e15 	stw	r8,248(sp)
    f89c:	000dca00 	call	dca0 <strlen>
    f8a0:	d8802e15 	stw	r2,184(sp)
    f8a4:	da003e17 	ldw	r8,248(sp)
    f8a8:	103c280e 	bge	r2,zero,e94c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e94c>
    f8ac:	0005883a 	mov	r2,zero
    f8b0:	003c2606 	br	e94c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e94c>
    f8b4:	00bfffc4 	movi	r2,-1
    f8b8:	003a0906 	br	e0e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0e0>
    f8bc:	010000f4 	movhi	r4,3
    f8c0:	2120c684 	addi	r4,r4,-31974
    f8c4:	d9003515 	stw	r4,212(sp)
    f8c8:	003b0606 	br	e4e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e4e4>
    f8cc:	013fffc4 	movi	r4,-1
    f8d0:	003a2706 	br	e170 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e170>
    f8d4:	d9402c17 	ldw	r5,176(sp)
    f8d8:	d9801e04 	addi	r6,sp,120
    f8dc:	9809883a 	mov	r4,r19
    f8e0:	00167f00 	call	167f0 <__ssprint_r>
    f8e4:	1039f91e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    f8e8:	d8c02017 	ldw	r3,128(sp)
    f8ec:	da000404 	addi	r8,sp,16
    f8f0:	003d8406 	br	ef04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ef04>
    f8f4:	0023883a 	mov	r17,zero
    f8f8:	003d8306 	br	ef08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ef08>
    f8fc:	010000f4 	movhi	r4,3
    f900:	2120c284 	addi	r4,r4,-31990
    f904:	d9002b15 	stw	r4,172(sp)
    f908:	d9002b17 	ldw	r4,172(sp)
    f90c:	1c47883a 	add	r3,r3,r17
    f910:	10800044 	addi	r2,r2,1
    f914:	41000015 	stw	r4,0(r8)
    f918:	44400115 	stw	r17,4(r8)
    f91c:	d8c02015 	stw	r3,128(sp)
    f920:	d8801f15 	stw	r2,124(sp)
    f924:	010001c4 	movi	r4,7
    f928:	20bfcd16 	blt	r4,r2,f860 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f860>
    f92c:	42000204 	addi	r8,r8,8
    f930:	003fd306 	br	f880 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f880>
    f934:	d9402c17 	ldw	r5,176(sp)
    f938:	d9801e04 	addi	r6,sp,120
    f93c:	9809883a 	mov	r4,r19
    f940:	00167f00 	call	167f0 <__ssprint_r>
    f944:	1039e11e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    f948:	d8802617 	ldw	r2,152(sp)
    f94c:	d8c02017 	ldw	r3,128(sp)
    f950:	da000404 	addi	r8,sp,16
    f954:	003e1c06 	br	f1c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f1c8>
    f958:	d8802917 	ldw	r2,164(sp)
    f95c:	00c00184 	movi	r3,6
    f960:	1880012e 	bgeu	r3,r2,f968 <___svfprintf_internal_r+0x1c30>
    f964:	1805883a 	mov	r2,r3
    f968:	d8802e15 	stw	r2,184(sp)
    f96c:	1000f316 	blt	r2,zero,fd3c <___svfprintf_internal_r+0x2004>
    f970:	040000f4 	movhi	r16,3
    f974:	d8802a15 	stw	r2,168(sp)
    f978:	dd002d15 	stw	r20,180(sp)
    f97c:	d8002915 	stw	zero,164(sp)
    f980:	d8003215 	stw	zero,200(sp)
    f984:	8420c004 	addi	r16,r16,-32000
    f988:	0039883a 	mov	fp,zero
    f98c:	003a9f06 	br	e40c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e40c>
    f990:	010000f4 	movhi	r4,3
    f994:	2120c684 	addi	r4,r4,-31974
    f998:	d9003515 	stw	r4,212(sp)
    f99c:	003b5f06 	br	e71c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e71c>
    f9a0:	d9402c17 	ldw	r5,176(sp)
    f9a4:	d9801e04 	addi	r6,sp,120
    f9a8:	9809883a 	mov	r4,r19
    f9ac:	00167f00 	call	167f0 <__ssprint_r>
    f9b0:	1039c61e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    f9b4:	d8802617 	ldw	r2,152(sp)
    f9b8:	d9403317 	ldw	r5,204(sp)
    f9bc:	d8c02017 	ldw	r3,128(sp)
    f9c0:	da000404 	addi	r8,sp,16
    f9c4:	2885c83a 	sub	r2,r5,r2
    f9c8:	003e1006 	br	f20c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f20c>
    f9cc:	00800044 	movi	r2,1
    f9d0:	10803fcc 	andi	r2,r2,255
    f9d4:	00c00044 	movi	r3,1
    f9d8:	10fa3526 	beq	r2,r3,e2b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e2b0>
    f9dc:	00c00084 	movi	r3,2
    f9e0:	10fb9e26 	beq	r2,r3,e85c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e85c>
    f9e4:	003a6406 	br	e378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e378>
    f9e8:	0021883a 	mov	r16,zero
    f9ec:	003e0806 	br	f210 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f210>
    f9f0:	07000b44 	movi	fp,45
    f9f4:	df002785 	stb	fp,158(sp)
    f9f8:	003a0b06 	br	e228 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e228>
    f9fc:	d8c02d17 	ldw	r3,180(sp)
    fa00:	d9002f17 	ldw	r4,188(sp)
    fa04:	18800017 	ldw	r2,0(r3)
    fa08:	18c00104 	addi	r3,r3,4
    fa0c:	d8c02d15 	stw	r3,180(sp)
    fa10:	11000015 	stw	r4,0(r2)
    fa14:	0038f306 	br	dde4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dde4>
    fa18:	00c00b44 	movi	r3,45
    fa1c:	d8c02785 	stb	r3,158(sp)
    fa20:	d8802a15 	stw	r2,168(sp)
    fa24:	dc802b17 	ldw	r18,172(sp)
    fa28:	d8002915 	stw	zero,164(sp)
    fa2c:	07000b44 	movi	fp,45
    fa30:	003a7306 	br	e400 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e400>
    fa34:	9080004c 	andi	r2,r18,1
    fa38:	1000941e 	bne	r2,zero,fc8c <___svfprintf_internal_r+0x1f54>
    fa3c:	d8802117 	ldw	r2,132(sp)
    fa40:	1405c83a 	sub	r2,r2,r16
    fa44:	d8803315 	stw	r2,204(sp)
    fa48:	b441161e 	bne	r22,r17,fea4 <___svfprintf_internal_r+0x216c>
    fa4c:	dd802617 	ldw	r22,152(sp)
    fa50:	00bfff44 	movi	r2,-3
    fa54:	b0801a16 	blt	r22,r2,fac0 <___svfprintf_internal_r+0x1d88>
    fa58:	d9402917 	ldw	r5,164(sp)
    fa5c:	2d801816 	blt	r5,r22,fac0 <___svfprintf_internal_r+0x1d88>
    fa60:	dd803215 	stw	r22,200(sp)
    fa64:	003f3a06 	br	f750 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f750>
    fa68:	1025883a 	mov	r18,r2
    fa6c:	0039883a 	mov	fp,zero
    fa70:	00800084 	movi	r2,2
    fa74:	003fd606 	br	f9d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f9d0>
    fa78:	9080004c 	andi	r2,r18,1
    fa7c:	103f191e 	bne	r2,zero,f6e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f6e4>
    fa80:	d8802117 	ldw	r2,132(sp)
    fa84:	003f2806 	br	f728 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f728>
    fa88:	010000f4 	movhi	r4,3
    fa8c:	2120c284 	addi	r4,r4,-31990
    fa90:	d9002b15 	stw	r4,172(sp)
    fa94:	003c7c06 	br	ec88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ec88>
    fa98:	e005883a 	mov	r2,fp
    fa9c:	003f2206 	br	f728 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f728>
    faa0:	d9402917 	ldw	r5,164(sp)
    faa4:	df002783 	ldbu	fp,158(sp)
    faa8:	dd002d15 	stw	r20,180(sp)
    faac:	d9402a15 	stw	r5,168(sp)
    fab0:	d9402e15 	stw	r5,184(sp)
    fab4:	d8002915 	stw	zero,164(sp)
    fab8:	d8003215 	stw	zero,200(sp)
    fabc:	003a4c06 	br	e3f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e3f0>
    fac0:	8c7fff84 	addi	r17,r17,-2
    fac4:	b5bfffc4 	addi	r22,r22,-1
    fac8:	dd802615 	stw	r22,152(sp)
    facc:	dc4022c5 	stb	r17,139(sp)
    fad0:	b000c316 	blt	r22,zero,fde0 <___svfprintf_internal_r+0x20a8>
    fad4:	00800ac4 	movi	r2,43
    fad8:	d8802305 	stb	r2,140(sp)
    fadc:	00800244 	movi	r2,9
    fae0:	15806e16 	blt	r2,r22,fc9c <___svfprintf_internal_r+0x1f64>
    fae4:	00800c04 	movi	r2,48
    fae8:	b5800c04 	addi	r22,r22,48
    faec:	d8802345 	stb	r2,141(sp)
    faf0:	dd802385 	stb	r22,142(sp)
    faf4:	d88023c4 	addi	r2,sp,143
    faf8:	df0022c4 	addi	fp,sp,139
    fafc:	d8c03317 	ldw	r3,204(sp)
    fb00:	1739c83a 	sub	fp,r2,fp
    fb04:	d9003317 	ldw	r4,204(sp)
    fb08:	e0c7883a 	add	r3,fp,r3
    fb0c:	df003b15 	stw	fp,236(sp)
    fb10:	d8c02e15 	stw	r3,184(sp)
    fb14:	00800044 	movi	r2,1
    fb18:	1100b70e 	bge	r2,r4,fdf8 <___svfprintf_internal_r+0x20c0>
    fb1c:	d8c02e17 	ldw	r3,184(sp)
    fb20:	18c00044 	addi	r3,r3,1
    fb24:	d8c02e15 	stw	r3,184(sp)
    fb28:	1805883a 	mov	r2,r3
    fb2c:	1800b016 	blt	r3,zero,fdf0 <___svfprintf_internal_r+0x20b8>
    fb30:	d8003215 	stw	zero,200(sp)
    fb34:	003f1006 	br	f778 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f778>
    fb38:	d8802917 	ldw	r2,164(sp)
    fb3c:	103ec71e 	bne	r2,zero,f65c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f65c>
    fb40:	dc002915 	stw	r16,164(sp)
    fb44:	003ec506 	br	f65c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f65c>
    fb48:	d9402c17 	ldw	r5,176(sp)
    fb4c:	d9801e04 	addi	r6,sp,120
    fb50:	9809883a 	mov	r4,r19
    fb54:	00167f00 	call	167f0 <__ssprint_r>
    fb58:	10395c1e 	bne	r2,zero,e0cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0cc>
    fb5c:	dc402617 	ldw	r17,152(sp)
    fb60:	d8c02017 	ldw	r3,128(sp)
    fb64:	d8801f17 	ldw	r2,124(sp)
    fb68:	da000404 	addi	r8,sp,16
    fb6c:	003e7706 	br	f54c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f54c>
    fb70:	582f883a 	mov	r23,r11
    fb74:	d8002915 	stw	zero,164(sp)
    fb78:	0038c406 	br	de8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de8c>
    fb7c:	d8c02917 	ldw	r3,164(sp)
    fb80:	d8802104 	addi	r2,sp,132
    fb84:	d8800315 	stw	r2,12(sp)
    fb88:	d9403617 	ldw	r5,216(sp)
    fb8c:	d8802504 	addi	r2,sp,148
    fb90:	d8800215 	stw	r2,8(sp)
    fb94:	d8802604 	addi	r2,sp,152
    fb98:	d8c00015 	stw	r3,0(sp)
    fb9c:	9809883a 	mov	r4,r19
    fba0:	d8800115 	stw	r2,4(sp)
    fba4:	01c000c4 	movi	r7,3
    fba8:	a00d883a 	mov	r6,r20
    fbac:	da003e15 	stw	r8,248(sp)
    fbb0:	00125340 	call	12534 <_dtoa_r>
    fbb4:	d9002917 	ldw	r4,164(sp)
    fbb8:	da003e17 	ldw	r8,248(sp)
    fbbc:	1021883a 	mov	r16,r2
    fbc0:	1139883a 	add	fp,r2,r4
    fbc4:	2007883a 	mov	r3,r4
    fbc8:	81000007 	ldb	r4,0(r16)
    fbcc:	00800c04 	movi	r2,48
    fbd0:	20806f26 	beq	r4,r2,fd90 <___svfprintf_internal_r+0x2058>
    fbd4:	d8c02617 	ldw	r3,152(sp)
    fbd8:	e0f9883a 	add	fp,fp,r3
    fbdc:	003ec206 	br	f6e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f6e8>
    fbe0:	00c00b44 	movi	r3,45
    fbe4:	2520003c 	xorhi	r20,r4,32768
    fbe8:	d8c02a05 	stb	r3,168(sp)
    fbec:	003ea106 	br	f674 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f674>
    fbf0:	d8c03217 	ldw	r3,200(sp)
    fbf4:	00c0890e 	bge	zero,r3,fe1c <___svfprintf_internal_r+0x20e4>
    fbf8:	00800044 	movi	r2,1
    fbfc:	d9003317 	ldw	r4,204(sp)
    fc00:	1105883a 	add	r2,r2,r4
    fc04:	d8802e15 	stw	r2,184(sp)
    fc08:	10005f16 	blt	r2,zero,fd88 <___svfprintf_internal_r+0x2050>
    fc0c:	044019c4 	movi	r17,103
    fc10:	003ed906 	br	f778 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f778>
    fc14:	d9002917 	ldw	r4,164(sp)
    fc18:	20c00044 	addi	r3,r4,1
    fc1c:	003e9c06 	br	f690 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f690>
    fc20:	d9002917 	ldw	r4,164(sp)
    fc24:	00c0680e 	bge	zero,r3,fdc8 <___svfprintf_internal_r+0x2090>
    fc28:	2000461e 	bne	r4,zero,fd44 <___svfprintf_internal_r+0x200c>
    fc2c:	9480004c 	andi	r18,r18,1
    fc30:	9000441e 	bne	r18,zero,fd44 <___svfprintf_internal_r+0x200c>
    fc34:	1805883a 	mov	r2,r3
    fc38:	1800a016 	blt	r3,zero,febc <___svfprintf_internal_r+0x2184>
    fc3c:	d8c03217 	ldw	r3,200(sp)
    fc40:	d8c02e15 	stw	r3,184(sp)
    fc44:	003ecc06 	br	f778 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f778>
    fc48:	d9402917 	ldw	r5,164(sp)
    fc4c:	d8802104 	addi	r2,sp,132
    fc50:	d8800315 	stw	r2,12(sp)
    fc54:	d9400015 	stw	r5,0(sp)
    fc58:	d8802504 	addi	r2,sp,148
    fc5c:	d9403617 	ldw	r5,216(sp)
    fc60:	d8800215 	stw	r2,8(sp)
    fc64:	d8802604 	addi	r2,sp,152
    fc68:	d8800115 	stw	r2,4(sp)
    fc6c:	01c000c4 	movi	r7,3
    fc70:	a00d883a 	mov	r6,r20
    fc74:	9809883a 	mov	r4,r19
    fc78:	da003e15 	stw	r8,248(sp)
    fc7c:	00125340 	call	12534 <_dtoa_r>
    fc80:	d8c02917 	ldw	r3,164(sp)
    fc84:	da003e17 	ldw	r8,248(sp)
    fc88:	1021883a 	mov	r16,r2
    fc8c:	00801184 	movi	r2,70
    fc90:	80f9883a 	add	fp,r16,r3
    fc94:	88bfcc26 	beq	r17,r2,fbc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fbc8>
    fc98:	003e9306 	br	f6e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f6e8>
    fc9c:	df0022c4 	addi	fp,sp,139
    fca0:	dc002915 	stw	r16,164(sp)
    fca4:	9829883a 	mov	r20,r19
    fca8:	e021883a 	mov	r16,fp
    fcac:	4027883a 	mov	r19,r8
    fcb0:	b009883a 	mov	r4,r22
    fcb4:	01400284 	movi	r5,10
    fcb8:	000c9f40 	call	c9f4 <__modsi3>
    fcbc:	10800c04 	addi	r2,r2,48
    fcc0:	843fffc4 	addi	r16,r16,-1
    fcc4:	b009883a 	mov	r4,r22
    fcc8:	01400284 	movi	r5,10
    fccc:	80800005 	stb	r2,0(r16)
    fcd0:	000c9700 	call	c970 <__divsi3>
    fcd4:	102d883a 	mov	r22,r2
    fcd8:	00800244 	movi	r2,9
    fcdc:	15bff416 	blt	r2,r22,fcb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fcb0>
    fce0:	9811883a 	mov	r8,r19
    fce4:	b0800c04 	addi	r2,r22,48
    fce8:	a027883a 	mov	r19,r20
    fcec:	8029883a 	mov	r20,r16
    fcf0:	a17fffc4 	addi	r5,r20,-1
    fcf4:	a0bfffc5 	stb	r2,-1(r20)
    fcf8:	dc002917 	ldw	r16,164(sp)
    fcfc:	2f00752e 	bgeu	r5,fp,fed4 <___svfprintf_internal_r+0x219c>
    fd00:	d9c02384 	addi	r7,sp,142
    fd04:	3d0fc83a 	sub	r7,r7,r20
    fd08:	d9002344 	addi	r4,sp,141
    fd0c:	e1cf883a 	add	r7,fp,r7
    fd10:	00000106 	br	fd18 <___svfprintf_internal_r+0x1fe0>
    fd14:	28800003 	ldbu	r2,0(r5)
    fd18:	20800005 	stb	r2,0(r4)
    fd1c:	21000044 	addi	r4,r4,1
    fd20:	29400044 	addi	r5,r5,1
    fd24:	21fffb1e 	bne	r4,r7,fd14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fd14>
    fd28:	d8802304 	addi	r2,sp,140
    fd2c:	1505c83a 	sub	r2,r2,r20
    fd30:	d8c02344 	addi	r3,sp,141
    fd34:	1885883a 	add	r2,r3,r2
    fd38:	003f7006 	br	fafc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fafc>
    fd3c:	0005883a 	mov	r2,zero
    fd40:	003f0b06 	br	f970 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f970>
    fd44:	d9002917 	ldw	r4,164(sp)
    fd48:	d8c03217 	ldw	r3,200(sp)
    fd4c:	20800044 	addi	r2,r4,1
    fd50:	1885883a 	add	r2,r3,r2
    fd54:	d8802e15 	stw	r2,184(sp)
    fd58:	103e870e 	bge	r2,zero,f778 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f778>
    fd5c:	0005883a 	mov	r2,zero
    fd60:	003e8506 	br	f778 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f778>
    fd64:	010000f4 	movhi	r4,3
    fd68:	2120c284 	addi	r4,r4,-31990
    fd6c:	d9002b15 	stw	r4,172(sp)
    fd70:	003cc506 	br	f088 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f088>
    fd74:	d8c03217 	ldw	r3,200(sp)
    fd78:	18c00044 	addi	r3,r3,1
    fd7c:	d8c02e15 	stw	r3,184(sp)
    fd80:	1805883a 	mov	r2,r3
    fd84:	183fa10e 	bge	r3,zero,fc0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fc0c>
    fd88:	0005883a 	mov	r2,zero
    fd8c:	003f9f06 	br	fc0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fc0c>
    fd90:	d9003617 	ldw	r4,216(sp)
    fd94:	000d883a 	mov	r6,zero
    fd98:	000f883a 	mov	r7,zero
    fd9c:	a00b883a 	mov	r5,r20
    fda0:	d8c03d15 	stw	r3,244(sp)
    fda4:	da003e15 	stw	r8,248(sp)
    fda8:	000af140 	call	af14 <__eqdf2>
    fdac:	d8c03d17 	ldw	r3,244(sp)
    fdb0:	da003e17 	ldw	r8,248(sp)
    fdb4:	103f8726 	beq	r2,zero,fbd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fbd4>
    fdb8:	00800044 	movi	r2,1
    fdbc:	10c7c83a 	sub	r3,r2,r3
    fdc0:	d8c02615 	stw	r3,152(sp)
    fdc4:	003f8406 	br	fbd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fbd8>
    fdc8:	20000e1e 	bne	r4,zero,fe04 <___svfprintf_internal_r+0x20cc>
    fdcc:	9480004c 	andi	r18,r18,1
    fdd0:	90000c1e 	bne	r18,zero,fe04 <___svfprintf_internal_r+0x20cc>
    fdd4:	00800044 	movi	r2,1
    fdd8:	d8802e15 	stw	r2,184(sp)
    fddc:	003e6606 	br	f778 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f778>
    fde0:	00800b44 	movi	r2,45
    fde4:	05adc83a 	sub	r22,zero,r22
    fde8:	d8802305 	stb	r2,140(sp)
    fdec:	003f3b06 	br	fadc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fadc>
    fdf0:	0005883a 	mov	r2,zero
    fdf4:	003f4e06 	br	fb30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fb30>
    fdf8:	90a4703a 	and	r18,r18,r2
    fdfc:	903f4a26 	beq	r18,zero,fb28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fb28>
    fe00:	003f4606 	br	fb1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fb1c>
    fe04:	d8c02917 	ldw	r3,164(sp)
    fe08:	18c00084 	addi	r3,r3,2
    fe0c:	d8c02e15 	stw	r3,184(sp)
    fe10:	1805883a 	mov	r2,r3
    fe14:	183e580e 	bge	r3,zero,f778 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f778>
    fe18:	003fd006 	br	fd5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fd5c>
    fe1c:	00800084 	movi	r2,2
    fe20:	10c5c83a 	sub	r2,r2,r3
    fe24:	003f7506 	br	fbfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fbfc>
    fe28:	d8802d17 	ldw	r2,180(sp)
    fe2c:	d9002d17 	ldw	r4,180(sp)
    fe30:	bc400043 	ldbu	r17,1(r23)
    fe34:	10800017 	ldw	r2,0(r2)
    fe38:	582f883a 	mov	r23,r11
    fe3c:	d8802915 	stw	r2,164(sp)
    fe40:	20800104 	addi	r2,r4,4
    fe44:	d9002917 	ldw	r4,164(sp)
    fe48:	d8802d15 	stw	r2,180(sp)
    fe4c:	203df00e 	bge	r4,zero,f610 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f610>
    fe50:	8c403fcc 	andi	r17,r17,255
    fe54:	00bfffc4 	movi	r2,-1
    fe58:	8c40201c 	xori	r17,r17,128
    fe5c:	d8802915 	stw	r2,164(sp)
    fe60:	8c7fe004 	addi	r17,r17,-128
    fe64:	00380806 	br	de88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de88>
    fe68:	9080004c 	andi	r2,r18,1
    fe6c:	0039883a 	mov	fp,zero
    fe70:	10000726 	beq	r2,zero,fe90 <___svfprintf_internal_r+0x2158>
    fe74:	d8c02817 	ldw	r3,160(sp)
    fe78:	dc001dc4 	addi	r16,sp,119
    fe7c:	00800c04 	movi	r2,48
    fe80:	1c07c83a 	sub	r3,r3,r16
    fe84:	d8801dc5 	stb	r2,119(sp)
    fe88:	d8c02e15 	stw	r3,184(sp)
    fe8c:	00395206 	br	e3d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e3d8>
    fe90:	d8002e15 	stw	zero,184(sp)
    fe94:	dc001e04 	addi	r16,sp,120
    fe98:	00394f06 	br	e3d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e3d8>
    fe9c:	0005883a 	mov	r2,zero
    fea0:	003e3206 	br	f76c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f76c>
    fea4:	dd802617 	ldw	r22,152(sp)
    fea8:	003f0606 	br	fac4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fac4>
    feac:	d9c02785 	stb	r7,158(sp)
    feb0:	003a5106 	br	e7f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e7f8>
    feb4:	d9c02785 	stb	r7,158(sp)
    feb8:	003a3706 	br	e798 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e798>
    febc:	0005883a 	mov	r2,zero
    fec0:	003f5e06 	br	fc3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fc3c>
    fec4:	d9c02785 	stb	r7,158(sp)
    fec8:	00391706 	br	e328 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e328>
    fecc:	d9c02785 	stb	r7,158(sp)
    fed0:	0038e606 	br	e26c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e26c>
    fed4:	d8802344 	addi	r2,sp,141
    fed8:	003f0806 	br	fafc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fafc>
    fedc:	d9c02785 	stb	r7,158(sp)
    fee0:	0038b706 	br	e1c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e1c0>
    fee4:	d9c02785 	stb	r7,158(sp)
    fee8:	003adc06 	br	ea5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea5c>
    feec:	d9403917 	ldw	r5,228(sp)
    fef0:	00800304 	movi	r2,12
    fef4:	28800015 	stw	r2,0(r5)
    fef8:	00bfffc4 	movi	r2,-1
    fefc:	00387806 	br	e0e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0e0>
    ff00:	d9c02785 	stb	r7,158(sp)
    ff04:	003abf06 	br	ea04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea04>
    ff08:	d9c02785 	stb	r7,158(sp)
    ff0c:	003a9b06 	br	e97c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e97c>

0000ff10 <___vfprintf_internal_r>:
    ff10:	deffb804 	addi	sp,sp,-288
    ff14:	dfc04715 	stw	ra,284(sp)
    ff18:	ddc04515 	stw	r23,276(sp)
    ff1c:	dd404315 	stw	r21,268(sp)
    ff20:	d9002c15 	stw	r4,176(sp)
    ff24:	282f883a 	mov	r23,r5
    ff28:	302b883a 	mov	r21,r6
    ff2c:	d9c02d15 	stw	r7,180(sp)
    ff30:	df004615 	stw	fp,280(sp)
    ff34:	dd804415 	stw	r22,272(sp)
    ff38:	dd004215 	stw	r20,264(sp)
    ff3c:	dcc04115 	stw	r19,260(sp)
    ff40:	dc804015 	stw	r18,256(sp)
    ff44:	dc403f15 	stw	r17,252(sp)
    ff48:	dc003e15 	stw	r16,248(sp)
    ff4c:	0014d280 	call	14d28 <_localeconv_r>
    ff50:	10800017 	ldw	r2,0(r2)
    ff54:	1009883a 	mov	r4,r2
    ff58:	d8803415 	stw	r2,208(sp)
    ff5c:	000dca00 	call	dca0 <strlen>
    ff60:	d8803715 	stw	r2,220(sp)
    ff64:	d8802c17 	ldw	r2,176(sp)
    ff68:	10000226 	beq	r2,zero,ff74 <___vfprintf_internal_r+0x64>
    ff6c:	10800e17 	ldw	r2,56(r2)
    ff70:	1000f926 	beq	r2,zero,10358 <___vfprintf_internal_r+0x448>
    ff74:	b880030b 	ldhu	r2,12(r23)
    ff78:	10c8000c 	andi	r3,r2,8192
    ff7c:	1800061e 	bne	r3,zero,ff98 <___vfprintf_internal_r+0x88>
    ff80:	b9001917 	ldw	r4,100(r23)
    ff84:	00f7ffc4 	movi	r3,-8193
    ff88:	10880014 	ori	r2,r2,8192
    ff8c:	20c6703a 	and	r3,r4,r3
    ff90:	b880030d 	sth	r2,12(r23)
    ff94:	b8c01915 	stw	r3,100(r23)
    ff98:	10c0020c 	andi	r3,r2,8
    ff9c:	1800c126 	beq	r3,zero,102a4 <___vfprintf_internal_r+0x394>
    ffa0:	b8c00417 	ldw	r3,16(r23)
    ffa4:	1800bf26 	beq	r3,zero,102a4 <___vfprintf_internal_r+0x394>
    ffa8:	1080068c 	andi	r2,r2,26
    ffac:	00c00284 	movi	r3,10
    ffb0:	10c0c426 	beq	r2,r3,102c4 <___vfprintf_internal_r+0x3b4>
    ffb4:	d8c00404 	addi	r3,sp,16
    ffb8:	050000f4 	movhi	r20,3
    ffbc:	d9001e04 	addi	r4,sp,120
    ffc0:	a520ca84 	addi	r20,r20,-31958
    ffc4:	d8c01e15 	stw	r3,120(sp)
    ffc8:	d8002015 	stw	zero,128(sp)
    ffcc:	d8001f15 	stw	zero,124(sp)
    ffd0:	d8003315 	stw	zero,204(sp)
    ffd4:	d8003615 	stw	zero,216(sp)
    ffd8:	d8003815 	stw	zero,224(sp)
    ffdc:	1811883a 	mov	r8,r3
    ffe0:	d8003915 	stw	zero,228(sp)
    ffe4:	d8003a15 	stw	zero,232(sp)
    ffe8:	d8002f15 	stw	zero,188(sp)
    ffec:	d9002815 	stw	r4,160(sp)
    fff0:	a8800007 	ldb	r2,0(r21)
    fff4:	10027b26 	beq	r2,zero,109e4 <___vfprintf_internal_r+0xad4>
    fff8:	00c00944 	movi	r3,37
    fffc:	a821883a 	mov	r16,r21
   10000:	10c0021e 	bne	r2,r3,1000c <___vfprintf_internal_r+0xfc>
   10004:	00001406 	br	10058 <___vfprintf_internal_r+0x148>
   10008:	10c00326 	beq	r2,r3,10018 <___vfprintf_internal_r+0x108>
   1000c:	84000044 	addi	r16,r16,1
   10010:	80800007 	ldb	r2,0(r16)
   10014:	103ffc1e 	bne	r2,zero,10008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010008>
   10018:	8563c83a 	sub	r17,r16,r21
   1001c:	88000e26 	beq	r17,zero,10058 <___vfprintf_internal_r+0x148>
   10020:	d8c02017 	ldw	r3,128(sp)
   10024:	d8801f17 	ldw	r2,124(sp)
   10028:	45400015 	stw	r21,0(r8)
   1002c:	1c47883a 	add	r3,r3,r17
   10030:	10800044 	addi	r2,r2,1
   10034:	d8c02015 	stw	r3,128(sp)
   10038:	44400115 	stw	r17,4(r8)
   1003c:	d8801f15 	stw	r2,124(sp)
   10040:	00c001c4 	movi	r3,7
   10044:	1880a716 	blt	r3,r2,102e4 <___vfprintf_internal_r+0x3d4>
   10048:	42000204 	addi	r8,r8,8
   1004c:	d9402f17 	ldw	r5,188(sp)
   10050:	2c4b883a 	add	r5,r5,r17
   10054:	d9402f15 	stw	r5,188(sp)
   10058:	80800007 	ldb	r2,0(r16)
   1005c:	1000a826 	beq	r2,zero,10300 <___vfprintf_internal_r+0x3f0>
   10060:	84400047 	ldb	r17,1(r16)
   10064:	00bfffc4 	movi	r2,-1
   10068:	85400044 	addi	r21,r16,1
   1006c:	d8002785 	stb	zero,158(sp)
   10070:	0007883a 	mov	r3,zero
   10074:	000f883a 	mov	r7,zero
   10078:	d8802915 	stw	r2,164(sp)
   1007c:	d8003115 	stw	zero,196(sp)
   10080:	0025883a 	mov	r18,zero
   10084:	01401604 	movi	r5,88
   10088:	01800244 	movi	r6,9
   1008c:	02800a84 	movi	r10,42
   10090:	02401b04 	movi	r9,108
   10094:	ad400044 	addi	r21,r21,1
   10098:	88bff804 	addi	r2,r17,-32
   1009c:	28830436 	bltu	r5,r2,10cb0 <___vfprintf_internal_r+0xda0>
   100a0:	100490ba 	slli	r2,r2,2
   100a4:	01000074 	movhi	r4,1
   100a8:	21002e04 	addi	r4,r4,184
   100ac:	1105883a 	add	r2,r2,r4
   100b0:	10800017 	ldw	r2,0(r2)
   100b4:	1000683a 	jmp	r2
   100b8:	00010bd0 	cmplti	zero,zero,1071
   100bc:	00010cb0 	cmpltui	zero,zero,1074
   100c0:	00010cb0 	cmpltui	zero,zero,1074
   100c4:	00010bf0 	cmpltui	zero,zero,1071
   100c8:	00010cb0 	cmpltui	zero,zero,1074
   100cc:	00010cb0 	cmpltui	zero,zero,1074
   100d0:	00010cb0 	cmpltui	zero,zero,1074
   100d4:	00010cb0 	cmpltui	zero,zero,1074
   100d8:	00010cb0 	cmpltui	zero,zero,1074
   100dc:	00010cb0 	cmpltui	zero,zero,1074
   100e0:	00010364 	muli	zero,zero,1037
   100e4:	00010b0c 	andi	zero,zero,1068
   100e8:	00010cb0 	cmpltui	zero,zero,1074
   100ec:	0001022c 	andhi	zero,zero,1032
   100f0:	0001038c 	andi	zero,zero,1038
   100f4:	00010cb0 	cmpltui	zero,zero,1074
   100f8:	000103cc 	andi	zero,zero,1039
   100fc:	000103d8 	cmpnei	zero,zero,1039
   10100:	000103d8 	cmpnei	zero,zero,1039
   10104:	000103d8 	cmpnei	zero,zero,1039
   10108:	000103d8 	cmpnei	zero,zero,1039
   1010c:	000103d8 	cmpnei	zero,zero,1039
   10110:	000103d8 	cmpnei	zero,zero,1039
   10114:	000103d8 	cmpnei	zero,zero,1039
   10118:	000103d8 	cmpnei	zero,zero,1039
   1011c:	000103d8 	cmpnei	zero,zero,1039
   10120:	00010cb0 	cmpltui	zero,zero,1074
   10124:	00010cb0 	cmpltui	zero,zero,1074
   10128:	00010cb0 	cmpltui	zero,zero,1074
   1012c:	00010cb0 	cmpltui	zero,zero,1074
   10130:	00010cb0 	cmpltui	zero,zero,1074
   10134:	00010cb0 	cmpltui	zero,zero,1074
   10138:	00010cb0 	cmpltui	zero,zero,1074
   1013c:	00010cb0 	cmpltui	zero,zero,1074
   10140:	00010cb0 	cmpltui	zero,zero,1074
   10144:	00010cb0 	cmpltui	zero,zero,1074
   10148:	0001040c 	andi	zero,zero,1040
   1014c:	000104c8 	cmpgei	zero,zero,1043
   10150:	00010cb0 	cmpltui	zero,zero,1074
   10154:	000104c8 	cmpgei	zero,zero,1043
   10158:	00010cb0 	cmpltui	zero,zero,1074
   1015c:	00010cb0 	cmpltui	zero,zero,1074
   10160:	00010cb0 	cmpltui	zero,zero,1074
   10164:	00010cb0 	cmpltui	zero,zero,1074
   10168:	00010568 	cmpgeui	zero,zero,1045
   1016c:	00010cb0 	cmpltui	zero,zero,1074
   10170:	00010cb0 	cmpltui	zero,zero,1074
   10174:	00010574 	movhi	zero,1045
   10178:	00010cb0 	cmpltui	zero,zero,1074
   1017c:	00010cb0 	cmpltui	zero,zero,1074
   10180:	00010cb0 	cmpltui	zero,zero,1074
   10184:	00010cb0 	cmpltui	zero,zero,1074
   10188:	00010cb0 	cmpltui	zero,zero,1074
   1018c:	000109ec 	andhi	zero,zero,1063
   10190:	00010cb0 	cmpltui	zero,zero,1074
   10194:	00010cb0 	cmpltui	zero,zero,1074
   10198:	00010a4c 	andi	zero,zero,1065
   1019c:	00010cb0 	cmpltui	zero,zero,1074
   101a0:	00010cb0 	cmpltui	zero,zero,1074
   101a4:	00010cb0 	cmpltui	zero,zero,1074
   101a8:	00010cb0 	cmpltui	zero,zero,1074
   101ac:	00010cb0 	cmpltui	zero,zero,1074
   101b0:	00010cb0 	cmpltui	zero,zero,1074
   101b4:	00010cb0 	cmpltui	zero,zero,1074
   101b8:	00010cb0 	cmpltui	zero,zero,1074
   101bc:	00010cb0 	cmpltui	zero,zero,1074
   101c0:	00010cb0 	cmpltui	zero,zero,1074
   101c4:	00010c5c 	xori	zero,zero,1073
   101c8:	00010bfc 	xorhi	zero,zero,1071
   101cc:	000104c8 	cmpgei	zero,zero,1043
   101d0:	000104c8 	cmpgei	zero,zero,1043
   101d4:	000104c8 	cmpgei	zero,zero,1043
   101d8:	00010c0c 	andi	zero,zero,1072
   101dc:	00010bfc 	xorhi	zero,zero,1071
   101e0:	00010cb0 	cmpltui	zero,zero,1074
   101e4:	00010cb0 	cmpltui	zero,zero,1074
   101e8:	00010c18 	cmpnei	zero,zero,1072
   101ec:	00010cb0 	cmpltui	zero,zero,1074
   101f0:	00010c28 	cmpgeui	zero,zero,1072
   101f4:	00010afc 	xorhi	zero,zero,1067
   101f8:	00010238 	rdprs	zero,zero,1032
   101fc:	00010b1c 	xori	zero,zero,1068
   10200:	00010cb0 	cmpltui	zero,zero,1074
   10204:	00010b28 	cmpgeui	zero,zero,1068
   10208:	00010cb0 	cmpltui	zero,zero,1074
   1020c:	00010b84 	movi	zero,1070
   10210:	00010cb0 	cmpltui	zero,zero,1074
   10214:	00010cb0 	cmpltui	zero,zero,1074
   10218:	00010b94 	movui	zero,1070
   1021c:	d9003117 	ldw	r4,196(sp)
   10220:	d8802d15 	stw	r2,180(sp)
   10224:	0109c83a 	sub	r4,zero,r4
   10228:	d9003115 	stw	r4,196(sp)
   1022c:	94800114 	ori	r18,r18,4
   10230:	ac400007 	ldb	r17,0(r21)
   10234:	003f9706 	br	10094 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010094>
   10238:	00800c04 	movi	r2,48
   1023c:	d9002d17 	ldw	r4,180(sp)
   10240:	d9402917 	ldw	r5,164(sp)
   10244:	d8802705 	stb	r2,156(sp)
   10248:	00801e04 	movi	r2,120
   1024c:	d8802745 	stb	r2,157(sp)
   10250:	d8002785 	stb	zero,158(sp)
   10254:	20c00104 	addi	r3,r4,4
   10258:	24c00017 	ldw	r19,0(r4)
   1025c:	002d883a 	mov	r22,zero
   10260:	90800094 	ori	r2,r18,2
   10264:	28029a16 	blt	r5,zero,10cd0 <___vfprintf_internal_r+0xdc0>
   10268:	00bfdfc4 	movi	r2,-129
   1026c:	90a4703a 	and	r18,r18,r2
   10270:	d8c02d15 	stw	r3,180(sp)
   10274:	94800094 	ori	r18,r18,2
   10278:	9802871e 	bne	r19,zero,10c98 <___vfprintf_internal_r+0xd88>
   1027c:	008000f4 	movhi	r2,3
   10280:	10a0bb04 	addi	r2,r2,-32020
   10284:	d8803915 	stw	r2,228(sp)
   10288:	04401e04 	movi	r17,120
   1028c:	d8802917 	ldw	r2,164(sp)
   10290:	0039883a 	mov	fp,zero
   10294:	1001e926 	beq	r2,zero,10a3c <___vfprintf_internal_r+0xb2c>
   10298:	0027883a 	mov	r19,zero
   1029c:	002d883a 	mov	r22,zero
   102a0:	00020506 	br	10ab8 <___vfprintf_internal_r+0xba8>
   102a4:	d9002c17 	ldw	r4,176(sp)
   102a8:	b80b883a 	mov	r5,r23
   102ac:	00121e00 	call	121e0 <__swsetup_r>
   102b0:	1005ac1e 	bne	r2,zero,11964 <___vfprintf_internal_r+0x1a54>
   102b4:	b880030b 	ldhu	r2,12(r23)
   102b8:	00c00284 	movi	r3,10
   102bc:	1080068c 	andi	r2,r2,26
   102c0:	10ff3c1e 	bne	r2,r3,ffb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ffb4>
   102c4:	b880038f 	ldh	r2,14(r23)
   102c8:	103f3a16 	blt	r2,zero,ffb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ffb4>
   102cc:	d9c02d17 	ldw	r7,180(sp)
   102d0:	d9002c17 	ldw	r4,176(sp)
   102d4:	a80d883a 	mov	r6,r21
   102d8:	b80b883a 	mov	r5,r23
   102dc:	00121240 	call	12124 <__sbprintf>
   102e0:	00001106 	br	10328 <___vfprintf_internal_r+0x418>
   102e4:	d9002c17 	ldw	r4,176(sp)
   102e8:	d9801e04 	addi	r6,sp,120
   102ec:	b80b883a 	mov	r5,r23
   102f0:	0017cf80 	call	17cf8 <__sprint_r>
   102f4:	1000081e 	bne	r2,zero,10318 <___vfprintf_internal_r+0x408>
   102f8:	da000404 	addi	r8,sp,16
   102fc:	003f5306 	br	1004c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701004c>
   10300:	d8802017 	ldw	r2,128(sp)
   10304:	10000426 	beq	r2,zero,10318 <___vfprintf_internal_r+0x408>
   10308:	d9002c17 	ldw	r4,176(sp)
   1030c:	d9801e04 	addi	r6,sp,120
   10310:	b80b883a 	mov	r5,r23
   10314:	0017cf80 	call	17cf8 <__sprint_r>
   10318:	b880030b 	ldhu	r2,12(r23)
   1031c:	1080100c 	andi	r2,r2,64
   10320:	1005901e 	bne	r2,zero,11964 <___vfprintf_internal_r+0x1a54>
   10324:	d8802f17 	ldw	r2,188(sp)
   10328:	dfc04717 	ldw	ra,284(sp)
   1032c:	df004617 	ldw	fp,280(sp)
   10330:	ddc04517 	ldw	r23,276(sp)
   10334:	dd804417 	ldw	r22,272(sp)
   10338:	dd404317 	ldw	r21,268(sp)
   1033c:	dd004217 	ldw	r20,264(sp)
   10340:	dcc04117 	ldw	r19,260(sp)
   10344:	dc804017 	ldw	r18,256(sp)
   10348:	dc403f17 	ldw	r17,252(sp)
   1034c:	dc003e17 	ldw	r16,248(sp)
   10350:	dec04804 	addi	sp,sp,288
   10354:	f800283a 	ret
   10358:	d9002c17 	ldw	r4,176(sp)
   1035c:	00141b40 	call	141b4 <__sinit>
   10360:	003f0406 	br	ff74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ff74>
   10364:	d8802d17 	ldw	r2,180(sp)
   10368:	d9002d17 	ldw	r4,180(sp)
   1036c:	10800017 	ldw	r2,0(r2)
   10370:	d8803115 	stw	r2,196(sp)
   10374:	20800104 	addi	r2,r4,4
   10378:	d9003117 	ldw	r4,196(sp)
   1037c:	203fa716 	blt	r4,zero,1021c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701021c>
   10380:	d8802d15 	stw	r2,180(sp)
   10384:	ac400007 	ldb	r17,0(r21)
   10388:	003f4206 	br	10094 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010094>
   1038c:	ac400007 	ldb	r17,0(r21)
   10390:	aac00044 	addi	r11,r21,1
   10394:	8a872826 	beq	r17,r10,12038 <___vfprintf_internal_r+0x2128>
   10398:	88bff404 	addi	r2,r17,-48
   1039c:	0009883a 	mov	r4,zero
   103a0:	30867d36 	bltu	r6,r2,11d98 <___vfprintf_internal_r+0x1e88>
   103a4:	5c400007 	ldb	r17,0(r11)
   103a8:	210002a4 	muli	r4,r4,10
   103ac:	5d400044 	addi	r21,r11,1
   103b0:	a817883a 	mov	r11,r21
   103b4:	2089883a 	add	r4,r4,r2
   103b8:	88bff404 	addi	r2,r17,-48
   103bc:	30bff92e 	bgeu	r6,r2,103a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70103a4>
   103c0:	2005c916 	blt	r4,zero,11ae8 <___vfprintf_internal_r+0x1bd8>
   103c4:	d9002915 	stw	r4,164(sp)
   103c8:	003f3306 	br	10098 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010098>
   103cc:	94802014 	ori	r18,r18,128
   103d0:	ac400007 	ldb	r17,0(r21)
   103d4:	003f2f06 	br	10094 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010094>
   103d8:	a809883a 	mov	r4,r21
   103dc:	d8003115 	stw	zero,196(sp)
   103e0:	88bff404 	addi	r2,r17,-48
   103e4:	0017883a 	mov	r11,zero
   103e8:	24400007 	ldb	r17,0(r4)
   103ec:	5ac002a4 	muli	r11,r11,10
   103f0:	ad400044 	addi	r21,r21,1
   103f4:	a809883a 	mov	r4,r21
   103f8:	12d7883a 	add	r11,r2,r11
   103fc:	88bff404 	addi	r2,r17,-48
   10400:	30bff92e 	bgeu	r6,r2,103e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70103e8>
   10404:	dac03115 	stw	r11,196(sp)
   10408:	003f2306 	br	10098 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010098>
   1040c:	18c03fcc 	andi	r3,r3,255
   10410:	18072b1e 	bne	r3,zero,120c0 <___vfprintf_internal_r+0x21b0>
   10414:	94800414 	ori	r18,r18,16
   10418:	9080080c 	andi	r2,r18,32
   1041c:	10037b26 	beq	r2,zero,1120c <___vfprintf_internal_r+0x12fc>
   10420:	d9402d17 	ldw	r5,180(sp)
   10424:	28800117 	ldw	r2,4(r5)
   10428:	2cc00017 	ldw	r19,0(r5)
   1042c:	29400204 	addi	r5,r5,8
   10430:	d9402d15 	stw	r5,180(sp)
   10434:	102d883a 	mov	r22,r2
   10438:	10044b16 	blt	r2,zero,11568 <___vfprintf_internal_r+0x1658>
   1043c:	d9402917 	ldw	r5,164(sp)
   10440:	df002783 	ldbu	fp,158(sp)
   10444:	2803bc16 	blt	r5,zero,11338 <___vfprintf_internal_r+0x1428>
   10448:	00ffdfc4 	movi	r3,-129
   1044c:	9d84b03a 	or	r2,r19,r22
   10450:	90e4703a 	and	r18,r18,r3
   10454:	10017726 	beq	r2,zero,10a34 <___vfprintf_internal_r+0xb24>
   10458:	b0038326 	beq	r22,zero,11268 <___vfprintf_internal_r+0x1358>
   1045c:	dc402a15 	stw	r17,168(sp)
   10460:	dc001e04 	addi	r16,sp,120
   10464:	b023883a 	mov	r17,r22
   10468:	402d883a 	mov	r22,r8
   1046c:	9809883a 	mov	r4,r19
   10470:	880b883a 	mov	r5,r17
   10474:	01800284 	movi	r6,10
   10478:	000f883a 	mov	r7,zero
   1047c:	001a0f00 	call	1a0f0 <__umoddi3>
   10480:	10800c04 	addi	r2,r2,48
   10484:	843fffc4 	addi	r16,r16,-1
   10488:	9809883a 	mov	r4,r19
   1048c:	880b883a 	mov	r5,r17
   10490:	80800005 	stb	r2,0(r16)
   10494:	01800284 	movi	r6,10
   10498:	000f883a 	mov	r7,zero
   1049c:	0019b780 	call	19b78 <__udivdi3>
   104a0:	1027883a 	mov	r19,r2
   104a4:	10c4b03a 	or	r2,r2,r3
   104a8:	1823883a 	mov	r17,r3
   104ac:	103fef1e 	bne	r2,zero,1046c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701046c>
   104b0:	d8c02817 	ldw	r3,160(sp)
   104b4:	dc402a17 	ldw	r17,168(sp)
   104b8:	b011883a 	mov	r8,r22
   104bc:	1c07c83a 	sub	r3,r3,r16
   104c0:	d8c02e15 	stw	r3,184(sp)
   104c4:	00005906 	br	1062c <___vfprintf_internal_r+0x71c>
   104c8:	18c03fcc 	andi	r3,r3,255
   104cc:	1806fa1e 	bne	r3,zero,120b8 <___vfprintf_internal_r+0x21a8>
   104d0:	9080020c 	andi	r2,r18,8
   104d4:	10048a26 	beq	r2,zero,11700 <___vfprintf_internal_r+0x17f0>
   104d8:	d8c02d17 	ldw	r3,180(sp)
   104dc:	d9002d17 	ldw	r4,180(sp)
   104e0:	d9402d17 	ldw	r5,180(sp)
   104e4:	18c00017 	ldw	r3,0(r3)
   104e8:	21000117 	ldw	r4,4(r4)
   104ec:	29400204 	addi	r5,r5,8
   104f0:	d8c03615 	stw	r3,216(sp)
   104f4:	d9003815 	stw	r4,224(sp)
   104f8:	d9402d15 	stw	r5,180(sp)
   104fc:	d9003617 	ldw	r4,216(sp)
   10500:	d9403817 	ldw	r5,224(sp)
   10504:	da003d15 	stw	r8,244(sp)
   10508:	04000044 	movi	r16,1
   1050c:	00091740 	call	9174 <__fpclassifyd>
   10510:	da003d17 	ldw	r8,244(sp)
   10514:	14041f1e 	bne	r2,r16,11594 <___vfprintf_internal_r+0x1684>
   10518:	d9003617 	ldw	r4,216(sp)
   1051c:	d9403817 	ldw	r5,224(sp)
   10520:	000d883a 	mov	r6,zero
   10524:	000f883a 	mov	r7,zero
   10528:	000b0780 	call	b078 <__ledf2>
   1052c:	da003d17 	ldw	r8,244(sp)
   10530:	1005be16 	blt	r2,zero,11c2c <___vfprintf_internal_r+0x1d1c>
   10534:	df002783 	ldbu	fp,158(sp)
   10538:	008011c4 	movi	r2,71
   1053c:	1445330e 	bge	r2,r17,11a0c <___vfprintf_internal_r+0x1afc>
   10540:	040000f4 	movhi	r16,3
   10544:	8420b304 	addi	r16,r16,-32052
   10548:	00c000c4 	movi	r3,3
   1054c:	00bfdfc4 	movi	r2,-129
   10550:	d8c02a15 	stw	r3,168(sp)
   10554:	90a4703a 	and	r18,r18,r2
   10558:	d8c02e15 	stw	r3,184(sp)
   1055c:	d8002915 	stw	zero,164(sp)
   10560:	d8003215 	stw	zero,200(sp)
   10564:	00003706 	br	10644 <___vfprintf_internal_r+0x734>
   10568:	94800214 	ori	r18,r18,8
   1056c:	ac400007 	ldb	r17,0(r21)
   10570:	003ec806 	br	10094 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010094>
   10574:	18c03fcc 	andi	r3,r3,255
   10578:	1806db1e 	bne	r3,zero,120e8 <___vfprintf_internal_r+0x21d8>
   1057c:	94800414 	ori	r18,r18,16
   10580:	9080080c 	andi	r2,r18,32
   10584:	1002d826 	beq	r2,zero,110e8 <___vfprintf_internal_r+0x11d8>
   10588:	d9402d17 	ldw	r5,180(sp)
   1058c:	d8c02917 	ldw	r3,164(sp)
   10590:	d8002785 	stb	zero,158(sp)
   10594:	28800204 	addi	r2,r5,8
   10598:	2cc00017 	ldw	r19,0(r5)
   1059c:	2d800117 	ldw	r22,4(r5)
   105a0:	18048f16 	blt	r3,zero,117e0 <___vfprintf_internal_r+0x18d0>
   105a4:	013fdfc4 	movi	r4,-129
   105a8:	9d86b03a 	or	r3,r19,r22
   105ac:	d8802d15 	stw	r2,180(sp)
   105b0:	9124703a 	and	r18,r18,r4
   105b4:	1802d91e 	bne	r3,zero,1111c <___vfprintf_internal_r+0x120c>
   105b8:	d8c02917 	ldw	r3,164(sp)
   105bc:	0039883a 	mov	fp,zero
   105c0:	1805c326 	beq	r3,zero,11cd0 <___vfprintf_internal_r+0x1dc0>
   105c4:	0027883a 	mov	r19,zero
   105c8:	002d883a 	mov	r22,zero
   105cc:	dc001e04 	addi	r16,sp,120
   105d0:	9806d0fa 	srli	r3,r19,3
   105d4:	b008977a 	slli	r4,r22,29
   105d8:	b02cd0fa 	srli	r22,r22,3
   105dc:	9cc001cc 	andi	r19,r19,7
   105e0:	98800c04 	addi	r2,r19,48
   105e4:	843fffc4 	addi	r16,r16,-1
   105e8:	20e6b03a 	or	r19,r4,r3
   105ec:	80800005 	stb	r2,0(r16)
   105f0:	9d86b03a 	or	r3,r19,r22
   105f4:	183ff61e 	bne	r3,zero,105d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70105d0>
   105f8:	90c0004c 	andi	r3,r18,1
   105fc:	18013b26 	beq	r3,zero,10aec <___vfprintf_internal_r+0xbdc>
   10600:	10803fcc 	andi	r2,r2,255
   10604:	1080201c 	xori	r2,r2,128
   10608:	10bfe004 	addi	r2,r2,-128
   1060c:	00c00c04 	movi	r3,48
   10610:	10c13626 	beq	r2,r3,10aec <___vfprintf_internal_r+0xbdc>
   10614:	80ffffc5 	stb	r3,-1(r16)
   10618:	d8c02817 	ldw	r3,160(sp)
   1061c:	80bfffc4 	addi	r2,r16,-1
   10620:	1021883a 	mov	r16,r2
   10624:	1887c83a 	sub	r3,r3,r2
   10628:	d8c02e15 	stw	r3,184(sp)
   1062c:	d8802e17 	ldw	r2,184(sp)
   10630:	d9002917 	ldw	r4,164(sp)
   10634:	1100010e 	bge	r2,r4,1063c <___vfprintf_internal_r+0x72c>
   10638:	2005883a 	mov	r2,r4
   1063c:	d8802a15 	stw	r2,168(sp)
   10640:	d8003215 	stw	zero,200(sp)
   10644:	e7003fcc 	andi	fp,fp,255
   10648:	e700201c 	xori	fp,fp,128
   1064c:	e73fe004 	addi	fp,fp,-128
   10650:	e0000326 	beq	fp,zero,10660 <___vfprintf_internal_r+0x750>
   10654:	d8c02a17 	ldw	r3,168(sp)
   10658:	18c00044 	addi	r3,r3,1
   1065c:	d8c02a15 	stw	r3,168(sp)
   10660:	90c0008c 	andi	r3,r18,2
   10664:	d8c02b15 	stw	r3,172(sp)
   10668:	18000326 	beq	r3,zero,10678 <___vfprintf_internal_r+0x768>
   1066c:	d8c02a17 	ldw	r3,168(sp)
   10670:	18c00084 	addi	r3,r3,2
   10674:	d8c02a15 	stw	r3,168(sp)
   10678:	90c0210c 	andi	r3,r18,132
   1067c:	d8c03015 	stw	r3,192(sp)
   10680:	1801a31e 	bne	r3,zero,10d10 <___vfprintf_internal_r+0xe00>
   10684:	d9003117 	ldw	r4,196(sp)
   10688:	d8c02a17 	ldw	r3,168(sp)
   1068c:	20e7c83a 	sub	r19,r4,r3
   10690:	04c19f0e 	bge	zero,r19,10d10 <___vfprintf_internal_r+0xe00>
   10694:	02400404 	movi	r9,16
   10698:	d8c02017 	ldw	r3,128(sp)
   1069c:	d8801f17 	ldw	r2,124(sp)
   106a0:	4cc50d0e 	bge	r9,r19,11ad8 <___vfprintf_internal_r+0x1bc8>
   106a4:	014000f4 	movhi	r5,3
   106a8:	2960ce84 	addi	r5,r5,-31942
   106ac:	dc403b15 	stw	r17,236(sp)
   106b0:	d9403515 	stw	r5,212(sp)
   106b4:	9823883a 	mov	r17,r19
   106b8:	482d883a 	mov	r22,r9
   106bc:	9027883a 	mov	r19,r18
   106c0:	070001c4 	movi	fp,7
   106c4:	8025883a 	mov	r18,r16
   106c8:	dc002c17 	ldw	r16,176(sp)
   106cc:	00000306 	br	106dc <___vfprintf_internal_r+0x7cc>
   106d0:	8c7ffc04 	addi	r17,r17,-16
   106d4:	42000204 	addi	r8,r8,8
   106d8:	b440130e 	bge	r22,r17,10728 <___vfprintf_internal_r+0x818>
   106dc:	010000f4 	movhi	r4,3
   106e0:	18c00404 	addi	r3,r3,16
   106e4:	10800044 	addi	r2,r2,1
   106e8:	2120ce84 	addi	r4,r4,-31942
   106ec:	41000015 	stw	r4,0(r8)
   106f0:	45800115 	stw	r22,4(r8)
   106f4:	d8c02015 	stw	r3,128(sp)
   106f8:	d8801f15 	stw	r2,124(sp)
   106fc:	e0bff40e 	bge	fp,r2,106d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70106d0>
   10700:	d9801e04 	addi	r6,sp,120
   10704:	b80b883a 	mov	r5,r23
   10708:	8009883a 	mov	r4,r16
   1070c:	0017cf80 	call	17cf8 <__sprint_r>
   10710:	103f011e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   10714:	8c7ffc04 	addi	r17,r17,-16
   10718:	d8c02017 	ldw	r3,128(sp)
   1071c:	d8801f17 	ldw	r2,124(sp)
   10720:	da000404 	addi	r8,sp,16
   10724:	b47fed16 	blt	r22,r17,106dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70106dc>
   10728:	9021883a 	mov	r16,r18
   1072c:	9825883a 	mov	r18,r19
   10730:	8827883a 	mov	r19,r17
   10734:	dc403b17 	ldw	r17,236(sp)
   10738:	d9403517 	ldw	r5,212(sp)
   1073c:	98c7883a 	add	r3,r19,r3
   10740:	10800044 	addi	r2,r2,1
   10744:	41400015 	stw	r5,0(r8)
   10748:	44c00115 	stw	r19,4(r8)
   1074c:	d8c02015 	stw	r3,128(sp)
   10750:	d8801f15 	stw	r2,124(sp)
   10754:	010001c4 	movi	r4,7
   10758:	2082a316 	blt	r4,r2,111e8 <___vfprintf_internal_r+0x12d8>
   1075c:	df002787 	ldb	fp,158(sp)
   10760:	42000204 	addi	r8,r8,8
   10764:	e0000c26 	beq	fp,zero,10798 <___vfprintf_internal_r+0x888>
   10768:	d8801f17 	ldw	r2,124(sp)
   1076c:	d9002784 	addi	r4,sp,158
   10770:	18c00044 	addi	r3,r3,1
   10774:	10800044 	addi	r2,r2,1
   10778:	41000015 	stw	r4,0(r8)
   1077c:	01000044 	movi	r4,1
   10780:	41000115 	stw	r4,4(r8)
   10784:	d8c02015 	stw	r3,128(sp)
   10788:	d8801f15 	stw	r2,124(sp)
   1078c:	010001c4 	movi	r4,7
   10790:	20823c16 	blt	r4,r2,11084 <___vfprintf_internal_r+0x1174>
   10794:	42000204 	addi	r8,r8,8
   10798:	d8802b17 	ldw	r2,172(sp)
   1079c:	10000c26 	beq	r2,zero,107d0 <___vfprintf_internal_r+0x8c0>
   107a0:	d8801f17 	ldw	r2,124(sp)
   107a4:	d9002704 	addi	r4,sp,156
   107a8:	18c00084 	addi	r3,r3,2
   107ac:	10800044 	addi	r2,r2,1
   107b0:	41000015 	stw	r4,0(r8)
   107b4:	01000084 	movi	r4,2
   107b8:	41000115 	stw	r4,4(r8)
   107bc:	d8c02015 	stw	r3,128(sp)
   107c0:	d8801f15 	stw	r2,124(sp)
   107c4:	010001c4 	movi	r4,7
   107c8:	20823616 	blt	r4,r2,110a4 <___vfprintf_internal_r+0x1194>
   107cc:	42000204 	addi	r8,r8,8
   107d0:	d9003017 	ldw	r4,192(sp)
   107d4:	00802004 	movi	r2,128
   107d8:	20819926 	beq	r4,r2,10e40 <___vfprintf_internal_r+0xf30>
   107dc:	d9402917 	ldw	r5,164(sp)
   107e0:	d8802e17 	ldw	r2,184(sp)
   107e4:	28adc83a 	sub	r22,r5,r2
   107e8:	0580310e 	bge	zero,r22,108b0 <___vfprintf_internal_r+0x9a0>
   107ec:	07000404 	movi	fp,16
   107f0:	d8801f17 	ldw	r2,124(sp)
   107f4:	e584140e 	bge	fp,r22,11848 <___vfprintf_internal_r+0x1938>
   107f8:	014000f4 	movhi	r5,3
   107fc:	2960ca84 	addi	r5,r5,-31958
   10800:	dc402915 	stw	r17,164(sp)
   10804:	d9402b15 	stw	r5,172(sp)
   10808:	b023883a 	mov	r17,r22
   1080c:	04c001c4 	movi	r19,7
   10810:	a82d883a 	mov	r22,r21
   10814:	902b883a 	mov	r21,r18
   10818:	8025883a 	mov	r18,r16
   1081c:	dc002c17 	ldw	r16,176(sp)
   10820:	00000306 	br	10830 <___vfprintf_internal_r+0x920>
   10824:	8c7ffc04 	addi	r17,r17,-16
   10828:	42000204 	addi	r8,r8,8
   1082c:	e440110e 	bge	fp,r17,10874 <___vfprintf_internal_r+0x964>
   10830:	18c00404 	addi	r3,r3,16
   10834:	10800044 	addi	r2,r2,1
   10838:	45000015 	stw	r20,0(r8)
   1083c:	47000115 	stw	fp,4(r8)
   10840:	d8c02015 	stw	r3,128(sp)
   10844:	d8801f15 	stw	r2,124(sp)
   10848:	98bff60e 	bge	r19,r2,10824 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010824>
   1084c:	d9801e04 	addi	r6,sp,120
   10850:	b80b883a 	mov	r5,r23
   10854:	8009883a 	mov	r4,r16
   10858:	0017cf80 	call	17cf8 <__sprint_r>
   1085c:	103eae1e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   10860:	8c7ffc04 	addi	r17,r17,-16
   10864:	d8c02017 	ldw	r3,128(sp)
   10868:	d8801f17 	ldw	r2,124(sp)
   1086c:	da000404 	addi	r8,sp,16
   10870:	e47fef16 	blt	fp,r17,10830 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010830>
   10874:	9021883a 	mov	r16,r18
   10878:	a825883a 	mov	r18,r21
   1087c:	b02b883a 	mov	r21,r22
   10880:	882d883a 	mov	r22,r17
   10884:	dc402917 	ldw	r17,164(sp)
   10888:	d9002b17 	ldw	r4,172(sp)
   1088c:	1d87883a 	add	r3,r3,r22
   10890:	10800044 	addi	r2,r2,1
   10894:	41000015 	stw	r4,0(r8)
   10898:	45800115 	stw	r22,4(r8)
   1089c:	d8c02015 	stw	r3,128(sp)
   108a0:	d8801f15 	stw	r2,124(sp)
   108a4:	010001c4 	movi	r4,7
   108a8:	2081ee16 	blt	r4,r2,11064 <___vfprintf_internal_r+0x1154>
   108ac:	42000204 	addi	r8,r8,8
   108b0:	9080400c 	andi	r2,r18,256
   108b4:	1001181e 	bne	r2,zero,10d18 <___vfprintf_internal_r+0xe08>
   108b8:	d9402e17 	ldw	r5,184(sp)
   108bc:	d8801f17 	ldw	r2,124(sp)
   108c0:	44000015 	stw	r16,0(r8)
   108c4:	1947883a 	add	r3,r3,r5
   108c8:	10800044 	addi	r2,r2,1
   108cc:	41400115 	stw	r5,4(r8)
   108d0:	d8c02015 	stw	r3,128(sp)
   108d4:	d8801f15 	stw	r2,124(sp)
   108d8:	010001c4 	movi	r4,7
   108dc:	2081d316 	blt	r4,r2,1102c <___vfprintf_internal_r+0x111c>
   108e0:	42000204 	addi	r8,r8,8
   108e4:	9480010c 	andi	r18,r18,4
   108e8:	90003226 	beq	r18,zero,109b4 <___vfprintf_internal_r+0xaa4>
   108ec:	d9403117 	ldw	r5,196(sp)
   108f0:	d8802a17 	ldw	r2,168(sp)
   108f4:	28a1c83a 	sub	r16,r5,r2
   108f8:	04002e0e 	bge	zero,r16,109b4 <___vfprintf_internal_r+0xaa4>
   108fc:	04400404 	movi	r17,16
   10900:	d8801f17 	ldw	r2,124(sp)
   10904:	8c04a20e 	bge	r17,r16,11b90 <___vfprintf_internal_r+0x1c80>
   10908:	014000f4 	movhi	r5,3
   1090c:	2960ce84 	addi	r5,r5,-31942
   10910:	d9403515 	stw	r5,212(sp)
   10914:	048001c4 	movi	r18,7
   10918:	dcc02c17 	ldw	r19,176(sp)
   1091c:	00000306 	br	1092c <___vfprintf_internal_r+0xa1c>
   10920:	843ffc04 	addi	r16,r16,-16
   10924:	42000204 	addi	r8,r8,8
   10928:	8c00130e 	bge	r17,r16,10978 <___vfprintf_internal_r+0xa68>
   1092c:	010000f4 	movhi	r4,3
   10930:	18c00404 	addi	r3,r3,16
   10934:	10800044 	addi	r2,r2,1
   10938:	2120ce84 	addi	r4,r4,-31942
   1093c:	41000015 	stw	r4,0(r8)
   10940:	44400115 	stw	r17,4(r8)
   10944:	d8c02015 	stw	r3,128(sp)
   10948:	d8801f15 	stw	r2,124(sp)
   1094c:	90bff40e 	bge	r18,r2,10920 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010920>
   10950:	d9801e04 	addi	r6,sp,120
   10954:	b80b883a 	mov	r5,r23
   10958:	9809883a 	mov	r4,r19
   1095c:	0017cf80 	call	17cf8 <__sprint_r>
   10960:	103e6d1e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   10964:	843ffc04 	addi	r16,r16,-16
   10968:	d8c02017 	ldw	r3,128(sp)
   1096c:	d8801f17 	ldw	r2,124(sp)
   10970:	da000404 	addi	r8,sp,16
   10974:	8c3fed16 	blt	r17,r16,1092c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701092c>
   10978:	d9403517 	ldw	r5,212(sp)
   1097c:	1c07883a 	add	r3,r3,r16
   10980:	10800044 	addi	r2,r2,1
   10984:	41400015 	stw	r5,0(r8)
   10988:	44000115 	stw	r16,4(r8)
   1098c:	d8c02015 	stw	r3,128(sp)
   10990:	d8801f15 	stw	r2,124(sp)
   10994:	010001c4 	movi	r4,7
   10998:	2080060e 	bge	r4,r2,109b4 <___vfprintf_internal_r+0xaa4>
   1099c:	d9002c17 	ldw	r4,176(sp)
   109a0:	d9801e04 	addi	r6,sp,120
   109a4:	b80b883a 	mov	r5,r23
   109a8:	0017cf80 	call	17cf8 <__sprint_r>
   109ac:	103e5a1e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   109b0:	d8c02017 	ldw	r3,128(sp)
   109b4:	d8803117 	ldw	r2,196(sp)
   109b8:	d9002a17 	ldw	r4,168(sp)
   109bc:	1100010e 	bge	r2,r4,109c4 <___vfprintf_internal_r+0xab4>
   109c0:	2005883a 	mov	r2,r4
   109c4:	d9402f17 	ldw	r5,188(sp)
   109c8:	288b883a 	add	r5,r5,r2
   109cc:	d9402f15 	stw	r5,188(sp)
   109d0:	18019e1e 	bne	r3,zero,1104c <___vfprintf_internal_r+0x113c>
   109d4:	a8800007 	ldb	r2,0(r21)
   109d8:	d8001f15 	stw	zero,124(sp)
   109dc:	da000404 	addi	r8,sp,16
   109e0:	103d851e 	bne	r2,zero,fff8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fff8>
   109e4:	a821883a 	mov	r16,r21
   109e8:	003d9b06 	br	10058 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010058>
   109ec:	18c03fcc 	andi	r3,r3,255
   109f0:	1805c11e 	bne	r3,zero,120f8 <___vfprintf_internal_r+0x21e8>
   109f4:	94800414 	ori	r18,r18,16
   109f8:	9080080c 	andi	r2,r18,32
   109fc:	10020c26 	beq	r2,zero,11230 <___vfprintf_internal_r+0x1320>
   10a00:	d8802d17 	ldw	r2,180(sp)
   10a04:	d9002917 	ldw	r4,164(sp)
   10a08:	d8002785 	stb	zero,158(sp)
   10a0c:	10c00204 	addi	r3,r2,8
   10a10:	14c00017 	ldw	r19,0(r2)
   10a14:	15800117 	ldw	r22,4(r2)
   10a18:	20040f16 	blt	r4,zero,11a58 <___vfprintf_internal_r+0x1b48>
   10a1c:	013fdfc4 	movi	r4,-129
   10a20:	9d84b03a 	or	r2,r19,r22
   10a24:	d8c02d15 	stw	r3,180(sp)
   10a28:	9124703a 	and	r18,r18,r4
   10a2c:	0039883a 	mov	fp,zero
   10a30:	103e891e 	bne	r2,zero,10458 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010458>
   10a34:	d9002917 	ldw	r4,164(sp)
   10a38:	2002c11e 	bne	r4,zero,11540 <___vfprintf_internal_r+0x1630>
   10a3c:	d8002915 	stw	zero,164(sp)
   10a40:	d8002e15 	stw	zero,184(sp)
   10a44:	dc001e04 	addi	r16,sp,120
   10a48:	003ef806 	br	1062c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701062c>
   10a4c:	18c03fcc 	andi	r3,r3,255
   10a50:	18059d1e 	bne	r3,zero,120c8 <___vfprintf_internal_r+0x21b8>
   10a54:	014000f4 	movhi	r5,3
   10a58:	2960b604 	addi	r5,r5,-32040
   10a5c:	d9403915 	stw	r5,228(sp)
   10a60:	9080080c 	andi	r2,r18,32
   10a64:	10005226 	beq	r2,zero,10bb0 <___vfprintf_internal_r+0xca0>
   10a68:	d8802d17 	ldw	r2,180(sp)
   10a6c:	14c00017 	ldw	r19,0(r2)
   10a70:	15800117 	ldw	r22,4(r2)
   10a74:	10800204 	addi	r2,r2,8
   10a78:	d8802d15 	stw	r2,180(sp)
   10a7c:	9080004c 	andi	r2,r18,1
   10a80:	10019026 	beq	r2,zero,110c4 <___vfprintf_internal_r+0x11b4>
   10a84:	9d84b03a 	or	r2,r19,r22
   10a88:	10036926 	beq	r2,zero,11830 <___vfprintf_internal_r+0x1920>
   10a8c:	d8c02917 	ldw	r3,164(sp)
   10a90:	00800c04 	movi	r2,48
   10a94:	d8802705 	stb	r2,156(sp)
   10a98:	dc402745 	stb	r17,157(sp)
   10a9c:	d8002785 	stb	zero,158(sp)
   10aa0:	90800094 	ori	r2,r18,2
   10aa4:	18045d16 	blt	r3,zero,11c1c <___vfprintf_internal_r+0x1d0c>
   10aa8:	00bfdfc4 	movi	r2,-129
   10aac:	90a4703a 	and	r18,r18,r2
   10ab0:	94800094 	ori	r18,r18,2
   10ab4:	0039883a 	mov	fp,zero
   10ab8:	d9003917 	ldw	r4,228(sp)
   10abc:	dc001e04 	addi	r16,sp,120
   10ac0:	988003cc 	andi	r2,r19,15
   10ac4:	b006973a 	slli	r3,r22,28
   10ac8:	2085883a 	add	r2,r4,r2
   10acc:	9826d13a 	srli	r19,r19,4
   10ad0:	10800003 	ldbu	r2,0(r2)
   10ad4:	b02cd13a 	srli	r22,r22,4
   10ad8:	843fffc4 	addi	r16,r16,-1
   10adc:	1ce6b03a 	or	r19,r3,r19
   10ae0:	80800005 	stb	r2,0(r16)
   10ae4:	9d84b03a 	or	r2,r19,r22
   10ae8:	103ff51e 	bne	r2,zero,10ac0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010ac0>
   10aec:	d8c02817 	ldw	r3,160(sp)
   10af0:	1c07c83a 	sub	r3,r3,r16
   10af4:	d8c02e15 	stw	r3,184(sp)
   10af8:	003ecc06 	br	1062c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701062c>
   10afc:	18c03fcc 	andi	r3,r3,255
   10b00:	183e9f26 	beq	r3,zero,10580 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010580>
   10b04:	d9c02785 	stb	r7,158(sp)
   10b08:	003e9d06 	br	10580 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010580>
   10b0c:	00c00044 	movi	r3,1
   10b10:	01c00ac4 	movi	r7,43
   10b14:	ac400007 	ldb	r17,0(r21)
   10b18:	003d5e06 	br	10094 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010094>
   10b1c:	94800814 	ori	r18,r18,32
   10b20:	ac400007 	ldb	r17,0(r21)
   10b24:	003d5b06 	br	10094 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010094>
   10b28:	d8c02d17 	ldw	r3,180(sp)
   10b2c:	d8002785 	stb	zero,158(sp)
   10b30:	1c000017 	ldw	r16,0(r3)
   10b34:	1cc00104 	addi	r19,r3,4
   10b38:	80041926 	beq	r16,zero,11ba0 <___vfprintf_internal_r+0x1c90>
   10b3c:	d9002917 	ldw	r4,164(sp)
   10b40:	2003d016 	blt	r4,zero,11a84 <___vfprintf_internal_r+0x1b74>
   10b44:	200d883a 	mov	r6,r4
   10b48:	000b883a 	mov	r5,zero
   10b4c:	8009883a 	mov	r4,r16
   10b50:	da003d15 	stw	r8,244(sp)
   10b54:	0014f140 	call	14f14 <memchr>
   10b58:	da003d17 	ldw	r8,244(sp)
   10b5c:	10045426 	beq	r2,zero,11cb0 <___vfprintf_internal_r+0x1da0>
   10b60:	1405c83a 	sub	r2,r2,r16
   10b64:	d8802e15 	stw	r2,184(sp)
   10b68:	1003cc16 	blt	r2,zero,11a9c <___vfprintf_internal_r+0x1b8c>
   10b6c:	df002783 	ldbu	fp,158(sp)
   10b70:	d8802a15 	stw	r2,168(sp)
   10b74:	dcc02d15 	stw	r19,180(sp)
   10b78:	d8002915 	stw	zero,164(sp)
   10b7c:	d8003215 	stw	zero,200(sp)
   10b80:	003eb006 	br	10644 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010644>
   10b84:	18c03fcc 	andi	r3,r3,255
   10b88:	183f9b26 	beq	r3,zero,109f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70109f8>
   10b8c:	d9c02785 	stb	r7,158(sp)
   10b90:	003f9906 	br	109f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70109f8>
   10b94:	18c03fcc 	andi	r3,r3,255
   10b98:	1805551e 	bne	r3,zero,120f0 <___vfprintf_internal_r+0x21e0>
   10b9c:	014000f4 	movhi	r5,3
   10ba0:	2960bb04 	addi	r5,r5,-32020
   10ba4:	d9403915 	stw	r5,228(sp)
   10ba8:	9080080c 	andi	r2,r18,32
   10bac:	103fae1e 	bne	r2,zero,10a68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010a68>
   10bb0:	9080040c 	andi	r2,r18,16
   10bb4:	1002de26 	beq	r2,zero,11730 <___vfprintf_internal_r+0x1820>
   10bb8:	d8c02d17 	ldw	r3,180(sp)
   10bbc:	002d883a 	mov	r22,zero
   10bc0:	1cc00017 	ldw	r19,0(r3)
   10bc4:	18c00104 	addi	r3,r3,4
   10bc8:	d8c02d15 	stw	r3,180(sp)
   10bcc:	003fab06 	br	10a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010a7c>
   10bd0:	38803fcc 	andi	r2,r7,255
   10bd4:	1080201c 	xori	r2,r2,128
   10bd8:	10bfe004 	addi	r2,r2,-128
   10bdc:	1002d21e 	bne	r2,zero,11728 <___vfprintf_internal_r+0x1818>
   10be0:	00c00044 	movi	r3,1
   10be4:	01c00804 	movi	r7,32
   10be8:	ac400007 	ldb	r17,0(r21)
   10bec:	003d2906 	br	10094 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010094>
   10bf0:	94800054 	ori	r18,r18,1
   10bf4:	ac400007 	ldb	r17,0(r21)
   10bf8:	003d2606 	br	10094 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010094>
   10bfc:	18c03fcc 	andi	r3,r3,255
   10c00:	183e0526 	beq	r3,zero,10418 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010418>
   10c04:	d9c02785 	stb	r7,158(sp)
   10c08:	003e0306 	br	10418 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010418>
   10c0c:	94801014 	ori	r18,r18,64
   10c10:	ac400007 	ldb	r17,0(r21)
   10c14:	003d1f06 	br	10094 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010094>
   10c18:	ac400007 	ldb	r17,0(r21)
   10c1c:	8a438726 	beq	r17,r9,11a3c <___vfprintf_internal_r+0x1b2c>
   10c20:	94800414 	ori	r18,r18,16
   10c24:	003d1b06 	br	10094 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010094>
   10c28:	18c03fcc 	andi	r3,r3,255
   10c2c:	1805341e 	bne	r3,zero,12100 <___vfprintf_internal_r+0x21f0>
   10c30:	9080080c 	andi	r2,r18,32
   10c34:	1002cd26 	beq	r2,zero,1176c <___vfprintf_internal_r+0x185c>
   10c38:	d9402d17 	ldw	r5,180(sp)
   10c3c:	d9002f17 	ldw	r4,188(sp)
   10c40:	28800017 	ldw	r2,0(r5)
   10c44:	2007d7fa 	srai	r3,r4,31
   10c48:	29400104 	addi	r5,r5,4
   10c4c:	d9402d15 	stw	r5,180(sp)
   10c50:	11000015 	stw	r4,0(r2)
   10c54:	10c00115 	stw	r3,4(r2)
   10c58:	003ce506 	br	fff0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fff0>
   10c5c:	d8c02d17 	ldw	r3,180(sp)
   10c60:	d9002d17 	ldw	r4,180(sp)
   10c64:	d8002785 	stb	zero,158(sp)
   10c68:	18800017 	ldw	r2,0(r3)
   10c6c:	21000104 	addi	r4,r4,4
   10c70:	00c00044 	movi	r3,1
   10c74:	d8c02a15 	stw	r3,168(sp)
   10c78:	d8801405 	stb	r2,80(sp)
   10c7c:	d9002d15 	stw	r4,180(sp)
   10c80:	d8c02e15 	stw	r3,184(sp)
   10c84:	d8002915 	stw	zero,164(sp)
   10c88:	d8003215 	stw	zero,200(sp)
   10c8c:	dc001404 	addi	r16,sp,80
   10c90:	0039883a 	mov	fp,zero
   10c94:	003e7206 	br	10660 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010660>
   10c98:	010000f4 	movhi	r4,3
   10c9c:	2120bb04 	addi	r4,r4,-32020
   10ca0:	0039883a 	mov	fp,zero
   10ca4:	d9003915 	stw	r4,228(sp)
   10ca8:	04401e04 	movi	r17,120
   10cac:	003f8206 	br	10ab8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010ab8>
   10cb0:	18c03fcc 	andi	r3,r3,255
   10cb4:	1805061e 	bne	r3,zero,120d0 <___vfprintf_internal_r+0x21c0>
   10cb8:	883d9126 	beq	r17,zero,10300 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010300>
   10cbc:	00c00044 	movi	r3,1
   10cc0:	d8c02a15 	stw	r3,168(sp)
   10cc4:	dc401405 	stb	r17,80(sp)
   10cc8:	d8002785 	stb	zero,158(sp)
   10ccc:	003fec06 	br	10c80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010c80>
   10cd0:	014000f4 	movhi	r5,3
   10cd4:	2960bb04 	addi	r5,r5,-32020
   10cd8:	d9403915 	stw	r5,228(sp)
   10cdc:	d8c02d15 	stw	r3,180(sp)
   10ce0:	1025883a 	mov	r18,r2
   10ce4:	04401e04 	movi	r17,120
   10ce8:	9d84b03a 	or	r2,r19,r22
   10cec:	1000fc1e 	bne	r2,zero,110e0 <___vfprintf_internal_r+0x11d0>
   10cf0:	0039883a 	mov	fp,zero
   10cf4:	00800084 	movi	r2,2
   10cf8:	10803fcc 	andi	r2,r2,255
   10cfc:	00c00044 	movi	r3,1
   10d00:	10c20f26 	beq	r2,r3,11540 <___vfprintf_internal_r+0x1630>
   10d04:	00c00084 	movi	r3,2
   10d08:	10fd6326 	beq	r2,r3,10298 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010298>
   10d0c:	003e2d06 	br	105c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70105c4>
   10d10:	d8c02017 	ldw	r3,128(sp)
   10d14:	003e9306 	br	10764 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010764>
   10d18:	00801944 	movi	r2,101
   10d1c:	14407e0e 	bge	r2,r17,10f18 <___vfprintf_internal_r+0x1008>
   10d20:	d9003617 	ldw	r4,216(sp)
   10d24:	d9403817 	ldw	r5,224(sp)
   10d28:	000d883a 	mov	r6,zero
   10d2c:	000f883a 	mov	r7,zero
   10d30:	d8c03c15 	stw	r3,240(sp)
   10d34:	da003d15 	stw	r8,244(sp)
   10d38:	000af140 	call	af14 <__eqdf2>
   10d3c:	d8c03c17 	ldw	r3,240(sp)
   10d40:	da003d17 	ldw	r8,244(sp)
   10d44:	1000f71e 	bne	r2,zero,11124 <___vfprintf_internal_r+0x1214>
   10d48:	d8801f17 	ldw	r2,124(sp)
   10d4c:	010000f4 	movhi	r4,3
   10d50:	2120c204 	addi	r4,r4,-31992
   10d54:	18c00044 	addi	r3,r3,1
   10d58:	10800044 	addi	r2,r2,1
   10d5c:	41000015 	stw	r4,0(r8)
   10d60:	01000044 	movi	r4,1
   10d64:	41000115 	stw	r4,4(r8)
   10d68:	d8c02015 	stw	r3,128(sp)
   10d6c:	d8801f15 	stw	r2,124(sp)
   10d70:	010001c4 	movi	r4,7
   10d74:	2082b816 	blt	r4,r2,11858 <___vfprintf_internal_r+0x1948>
   10d78:	42000204 	addi	r8,r8,8
   10d7c:	d8802617 	ldw	r2,152(sp)
   10d80:	d9403317 	ldw	r5,204(sp)
   10d84:	11400216 	blt	r2,r5,10d90 <___vfprintf_internal_r+0xe80>
   10d88:	9080004c 	andi	r2,r18,1
   10d8c:	103ed526 	beq	r2,zero,108e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70108e4>
   10d90:	d8803717 	ldw	r2,220(sp)
   10d94:	d9003417 	ldw	r4,208(sp)
   10d98:	d9403717 	ldw	r5,220(sp)
   10d9c:	1887883a 	add	r3,r3,r2
   10da0:	d8801f17 	ldw	r2,124(sp)
   10da4:	41000015 	stw	r4,0(r8)
   10da8:	41400115 	stw	r5,4(r8)
   10dac:	10800044 	addi	r2,r2,1
   10db0:	d8c02015 	stw	r3,128(sp)
   10db4:	d8801f15 	stw	r2,124(sp)
   10db8:	010001c4 	movi	r4,7
   10dbc:	20832916 	blt	r4,r2,11a64 <___vfprintf_internal_r+0x1b54>
   10dc0:	42000204 	addi	r8,r8,8
   10dc4:	d8803317 	ldw	r2,204(sp)
   10dc8:	143fffc4 	addi	r16,r2,-1
   10dcc:	043ec50e 	bge	zero,r16,108e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70108e4>
   10dd0:	04400404 	movi	r17,16
   10dd4:	d8801f17 	ldw	r2,124(sp)
   10dd8:	8c00880e 	bge	r17,r16,10ffc <___vfprintf_internal_r+0x10ec>
   10ddc:	014000f4 	movhi	r5,3
   10de0:	2960ca84 	addi	r5,r5,-31958
   10de4:	d9402b15 	stw	r5,172(sp)
   10de8:	058001c4 	movi	r22,7
   10dec:	dcc02c17 	ldw	r19,176(sp)
   10df0:	00000306 	br	10e00 <___vfprintf_internal_r+0xef0>
   10df4:	42000204 	addi	r8,r8,8
   10df8:	843ffc04 	addi	r16,r16,-16
   10dfc:	8c00820e 	bge	r17,r16,11008 <___vfprintf_internal_r+0x10f8>
   10e00:	18c00404 	addi	r3,r3,16
   10e04:	10800044 	addi	r2,r2,1
   10e08:	45000015 	stw	r20,0(r8)
   10e0c:	44400115 	stw	r17,4(r8)
   10e10:	d8c02015 	stw	r3,128(sp)
   10e14:	d8801f15 	stw	r2,124(sp)
   10e18:	b0bff60e 	bge	r22,r2,10df4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010df4>
   10e1c:	d9801e04 	addi	r6,sp,120
   10e20:	b80b883a 	mov	r5,r23
   10e24:	9809883a 	mov	r4,r19
   10e28:	0017cf80 	call	17cf8 <__sprint_r>
   10e2c:	103d3a1e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   10e30:	d8c02017 	ldw	r3,128(sp)
   10e34:	d8801f17 	ldw	r2,124(sp)
   10e38:	da000404 	addi	r8,sp,16
   10e3c:	003fee06 	br	10df8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010df8>
   10e40:	d9403117 	ldw	r5,196(sp)
   10e44:	d8802a17 	ldw	r2,168(sp)
   10e48:	28adc83a 	sub	r22,r5,r2
   10e4c:	05be630e 	bge	zero,r22,107dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70107dc>
   10e50:	07000404 	movi	fp,16
   10e54:	d8801f17 	ldw	r2,124(sp)
   10e58:	e5838f0e 	bge	fp,r22,11c98 <___vfprintf_internal_r+0x1d88>
   10e5c:	014000f4 	movhi	r5,3
   10e60:	2960ca84 	addi	r5,r5,-31958
   10e64:	dc403015 	stw	r17,192(sp)
   10e68:	d9402b15 	stw	r5,172(sp)
   10e6c:	b023883a 	mov	r17,r22
   10e70:	04c001c4 	movi	r19,7
   10e74:	a82d883a 	mov	r22,r21
   10e78:	902b883a 	mov	r21,r18
   10e7c:	8025883a 	mov	r18,r16
   10e80:	dc002c17 	ldw	r16,176(sp)
   10e84:	00000306 	br	10e94 <___vfprintf_internal_r+0xf84>
   10e88:	8c7ffc04 	addi	r17,r17,-16
   10e8c:	42000204 	addi	r8,r8,8
   10e90:	e440110e 	bge	fp,r17,10ed8 <___vfprintf_internal_r+0xfc8>
   10e94:	18c00404 	addi	r3,r3,16
   10e98:	10800044 	addi	r2,r2,1
   10e9c:	45000015 	stw	r20,0(r8)
   10ea0:	47000115 	stw	fp,4(r8)
   10ea4:	d8c02015 	stw	r3,128(sp)
   10ea8:	d8801f15 	stw	r2,124(sp)
   10eac:	98bff60e 	bge	r19,r2,10e88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010e88>
   10eb0:	d9801e04 	addi	r6,sp,120
   10eb4:	b80b883a 	mov	r5,r23
   10eb8:	8009883a 	mov	r4,r16
   10ebc:	0017cf80 	call	17cf8 <__sprint_r>
   10ec0:	103d151e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   10ec4:	8c7ffc04 	addi	r17,r17,-16
   10ec8:	d8c02017 	ldw	r3,128(sp)
   10ecc:	d8801f17 	ldw	r2,124(sp)
   10ed0:	da000404 	addi	r8,sp,16
   10ed4:	e47fef16 	blt	fp,r17,10e94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010e94>
   10ed8:	9021883a 	mov	r16,r18
   10edc:	a825883a 	mov	r18,r21
   10ee0:	b02b883a 	mov	r21,r22
   10ee4:	882d883a 	mov	r22,r17
   10ee8:	dc403017 	ldw	r17,192(sp)
   10eec:	d9002b17 	ldw	r4,172(sp)
   10ef0:	1d87883a 	add	r3,r3,r22
   10ef4:	10800044 	addi	r2,r2,1
   10ef8:	41000015 	stw	r4,0(r8)
   10efc:	45800115 	stw	r22,4(r8)
   10f00:	d8c02015 	stw	r3,128(sp)
   10f04:	d8801f15 	stw	r2,124(sp)
   10f08:	010001c4 	movi	r4,7
   10f0c:	20818e16 	blt	r4,r2,11548 <___vfprintf_internal_r+0x1638>
   10f10:	42000204 	addi	r8,r8,8
   10f14:	003e3106 	br	107dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70107dc>
   10f18:	d9403317 	ldw	r5,204(sp)
   10f1c:	00800044 	movi	r2,1
   10f20:	18c00044 	addi	r3,r3,1
   10f24:	1141530e 	bge	r2,r5,11474 <___vfprintf_internal_r+0x1564>
   10f28:	dc401f17 	ldw	r17,124(sp)
   10f2c:	00800044 	movi	r2,1
   10f30:	40800115 	stw	r2,4(r8)
   10f34:	8c400044 	addi	r17,r17,1
   10f38:	44000015 	stw	r16,0(r8)
   10f3c:	d8c02015 	stw	r3,128(sp)
   10f40:	dc401f15 	stw	r17,124(sp)
   10f44:	008001c4 	movi	r2,7
   10f48:	14416b16 	blt	r2,r17,114f8 <___vfprintf_internal_r+0x15e8>
   10f4c:	42000204 	addi	r8,r8,8
   10f50:	d8803717 	ldw	r2,220(sp)
   10f54:	d9003417 	ldw	r4,208(sp)
   10f58:	8c400044 	addi	r17,r17,1
   10f5c:	10c7883a 	add	r3,r2,r3
   10f60:	40800115 	stw	r2,4(r8)
   10f64:	41000015 	stw	r4,0(r8)
   10f68:	d8c02015 	stw	r3,128(sp)
   10f6c:	dc401f15 	stw	r17,124(sp)
   10f70:	008001c4 	movi	r2,7
   10f74:	14416916 	blt	r2,r17,1151c <___vfprintf_internal_r+0x160c>
   10f78:	45800204 	addi	r22,r8,8
   10f7c:	d9003617 	ldw	r4,216(sp)
   10f80:	d9403817 	ldw	r5,224(sp)
   10f84:	000d883a 	mov	r6,zero
   10f88:	000f883a 	mov	r7,zero
   10f8c:	d8c03c15 	stw	r3,240(sp)
   10f90:	000af140 	call	af14 <__eqdf2>
   10f94:	d8c03c17 	ldw	r3,240(sp)
   10f98:	1000bc26 	beq	r2,zero,1128c <___vfprintf_internal_r+0x137c>
   10f9c:	d9403317 	ldw	r5,204(sp)
   10fa0:	84000044 	addi	r16,r16,1
   10fa4:	8c400044 	addi	r17,r17,1
   10fa8:	28bfffc4 	addi	r2,r5,-1
   10fac:	1887883a 	add	r3,r3,r2
   10fb0:	b0800115 	stw	r2,4(r22)
   10fb4:	b4000015 	stw	r16,0(r22)
   10fb8:	d8c02015 	stw	r3,128(sp)
   10fbc:	dc401f15 	stw	r17,124(sp)
   10fc0:	008001c4 	movi	r2,7
   10fc4:	14414316 	blt	r2,r17,114d4 <___vfprintf_internal_r+0x15c4>
   10fc8:	b5800204 	addi	r22,r22,8
   10fcc:	d9003a17 	ldw	r4,232(sp)
   10fd0:	df0022c4 	addi	fp,sp,139
   10fd4:	8c400044 	addi	r17,r17,1
   10fd8:	20c7883a 	add	r3,r4,r3
   10fdc:	b7000015 	stw	fp,0(r22)
   10fe0:	b1000115 	stw	r4,4(r22)
   10fe4:	d8c02015 	stw	r3,128(sp)
   10fe8:	dc401f15 	stw	r17,124(sp)
   10fec:	008001c4 	movi	r2,7
   10ff0:	14400e16 	blt	r2,r17,1102c <___vfprintf_internal_r+0x111c>
   10ff4:	b2000204 	addi	r8,r22,8
   10ff8:	003e3a06 	br	108e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70108e4>
   10ffc:	010000f4 	movhi	r4,3
   11000:	2120ca84 	addi	r4,r4,-31958
   11004:	d9002b15 	stw	r4,172(sp)
   11008:	d9002b17 	ldw	r4,172(sp)
   1100c:	1c07883a 	add	r3,r3,r16
   11010:	44000115 	stw	r16,4(r8)
   11014:	41000015 	stw	r4,0(r8)
   11018:	10800044 	addi	r2,r2,1
   1101c:	d8c02015 	stw	r3,128(sp)
   11020:	d8801f15 	stw	r2,124(sp)
   11024:	010001c4 	movi	r4,7
   11028:	20be2d0e 	bge	r4,r2,108e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70108e0>
   1102c:	d9002c17 	ldw	r4,176(sp)
   11030:	d9801e04 	addi	r6,sp,120
   11034:	b80b883a 	mov	r5,r23
   11038:	0017cf80 	call	17cf8 <__sprint_r>
   1103c:	103cb61e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   11040:	d8c02017 	ldw	r3,128(sp)
   11044:	da000404 	addi	r8,sp,16
   11048:	003e2606 	br	108e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70108e4>
   1104c:	d9002c17 	ldw	r4,176(sp)
   11050:	d9801e04 	addi	r6,sp,120
   11054:	b80b883a 	mov	r5,r23
   11058:	0017cf80 	call	17cf8 <__sprint_r>
   1105c:	103e5d26 	beq	r2,zero,109d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70109d4>
   11060:	003cad06 	br	10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   11064:	d9002c17 	ldw	r4,176(sp)
   11068:	d9801e04 	addi	r6,sp,120
   1106c:	b80b883a 	mov	r5,r23
   11070:	0017cf80 	call	17cf8 <__sprint_r>
   11074:	103ca81e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   11078:	d8c02017 	ldw	r3,128(sp)
   1107c:	da000404 	addi	r8,sp,16
   11080:	003e0b06 	br	108b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70108b0>
   11084:	d9002c17 	ldw	r4,176(sp)
   11088:	d9801e04 	addi	r6,sp,120
   1108c:	b80b883a 	mov	r5,r23
   11090:	0017cf80 	call	17cf8 <__sprint_r>
   11094:	103ca01e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   11098:	d8c02017 	ldw	r3,128(sp)
   1109c:	da000404 	addi	r8,sp,16
   110a0:	003dbd06 	br	10798 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010798>
   110a4:	d9002c17 	ldw	r4,176(sp)
   110a8:	d9801e04 	addi	r6,sp,120
   110ac:	b80b883a 	mov	r5,r23
   110b0:	0017cf80 	call	17cf8 <__sprint_r>
   110b4:	103c981e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   110b8:	d8c02017 	ldw	r3,128(sp)
   110bc:	da000404 	addi	r8,sp,16
   110c0:	003dc306 	br	107d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70107d0>
   110c4:	d8802917 	ldw	r2,164(sp)
   110c8:	d8002785 	stb	zero,158(sp)
   110cc:	103f0616 	blt	r2,zero,10ce8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010ce8>
   110d0:	00ffdfc4 	movi	r3,-129
   110d4:	9d84b03a 	or	r2,r19,r22
   110d8:	90e4703a 	and	r18,r18,r3
   110dc:	103c6b26 	beq	r2,zero,1028c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701028c>
   110e0:	0039883a 	mov	fp,zero
   110e4:	003e7406 	br	10ab8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010ab8>
   110e8:	9080040c 	andi	r2,r18,16
   110ec:	1001b326 	beq	r2,zero,117bc <___vfprintf_internal_r+0x18ac>
   110f0:	d9002d17 	ldw	r4,180(sp)
   110f4:	d9402917 	ldw	r5,164(sp)
   110f8:	d8002785 	stb	zero,158(sp)
   110fc:	20800104 	addi	r2,r4,4
   11100:	24c00017 	ldw	r19,0(r4)
   11104:	002d883a 	mov	r22,zero
   11108:	2801b516 	blt	r5,zero,117e0 <___vfprintf_internal_r+0x18d0>
   1110c:	00ffdfc4 	movi	r3,-129
   11110:	d8802d15 	stw	r2,180(sp)
   11114:	90e4703a 	and	r18,r18,r3
   11118:	983d2726 	beq	r19,zero,105b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70105b8>
   1111c:	0039883a 	mov	fp,zero
   11120:	003d2a06 	br	105cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70105cc>
   11124:	dc402617 	ldw	r17,152(sp)
   11128:	0441d30e 	bge	zero,r17,11878 <___vfprintf_internal_r+0x1968>
   1112c:	dc403217 	ldw	r17,200(sp)
   11130:	d8803317 	ldw	r2,204(sp)
   11134:	1440010e 	bge	r2,r17,1113c <___vfprintf_internal_r+0x122c>
   11138:	1023883a 	mov	r17,r2
   1113c:	04400a0e 	bge	zero,r17,11168 <___vfprintf_internal_r+0x1258>
   11140:	d8801f17 	ldw	r2,124(sp)
   11144:	1c47883a 	add	r3,r3,r17
   11148:	44000015 	stw	r16,0(r8)
   1114c:	10800044 	addi	r2,r2,1
   11150:	44400115 	stw	r17,4(r8)
   11154:	d8c02015 	stw	r3,128(sp)
   11158:	d8801f15 	stw	r2,124(sp)
   1115c:	010001c4 	movi	r4,7
   11160:	20826516 	blt	r4,r2,11af8 <___vfprintf_internal_r+0x1be8>
   11164:	42000204 	addi	r8,r8,8
   11168:	88026116 	blt	r17,zero,11af0 <___vfprintf_internal_r+0x1be0>
   1116c:	d9003217 	ldw	r4,200(sp)
   11170:	2463c83a 	sub	r17,r4,r17
   11174:	04407b0e 	bge	zero,r17,11364 <___vfprintf_internal_r+0x1454>
   11178:	05800404 	movi	r22,16
   1117c:	d8801f17 	ldw	r2,124(sp)
   11180:	b4419d0e 	bge	r22,r17,117f8 <___vfprintf_internal_r+0x18e8>
   11184:	010000f4 	movhi	r4,3
   11188:	2120ca84 	addi	r4,r4,-31958
   1118c:	d9002b15 	stw	r4,172(sp)
   11190:	070001c4 	movi	fp,7
   11194:	dcc02c17 	ldw	r19,176(sp)
   11198:	00000306 	br	111a8 <___vfprintf_internal_r+0x1298>
   1119c:	42000204 	addi	r8,r8,8
   111a0:	8c7ffc04 	addi	r17,r17,-16
   111a4:	b441970e 	bge	r22,r17,11804 <___vfprintf_internal_r+0x18f4>
   111a8:	18c00404 	addi	r3,r3,16
   111ac:	10800044 	addi	r2,r2,1
   111b0:	45000015 	stw	r20,0(r8)
   111b4:	45800115 	stw	r22,4(r8)
   111b8:	d8c02015 	stw	r3,128(sp)
   111bc:	d8801f15 	stw	r2,124(sp)
   111c0:	e0bff60e 	bge	fp,r2,1119c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701119c>
   111c4:	d9801e04 	addi	r6,sp,120
   111c8:	b80b883a 	mov	r5,r23
   111cc:	9809883a 	mov	r4,r19
   111d0:	0017cf80 	call	17cf8 <__sprint_r>
   111d4:	103c501e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   111d8:	d8c02017 	ldw	r3,128(sp)
   111dc:	d8801f17 	ldw	r2,124(sp)
   111e0:	da000404 	addi	r8,sp,16
   111e4:	003fee06 	br	111a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70111a0>
   111e8:	d9002c17 	ldw	r4,176(sp)
   111ec:	d9801e04 	addi	r6,sp,120
   111f0:	b80b883a 	mov	r5,r23
   111f4:	0017cf80 	call	17cf8 <__sprint_r>
   111f8:	103c471e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   111fc:	d8c02017 	ldw	r3,128(sp)
   11200:	df002787 	ldb	fp,158(sp)
   11204:	da000404 	addi	r8,sp,16
   11208:	003d5606 	br	10764 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010764>
   1120c:	9080040c 	andi	r2,r18,16
   11210:	10016126 	beq	r2,zero,11798 <___vfprintf_internal_r+0x1888>
   11214:	d8802d17 	ldw	r2,180(sp)
   11218:	14c00017 	ldw	r19,0(r2)
   1121c:	10800104 	addi	r2,r2,4
   11220:	d8802d15 	stw	r2,180(sp)
   11224:	982dd7fa 	srai	r22,r19,31
   11228:	b005883a 	mov	r2,r22
   1122c:	003c8206 	br	10438 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010438>
   11230:	9080040c 	andi	r2,r18,16
   11234:	10003526 	beq	r2,zero,1130c <___vfprintf_internal_r+0x13fc>
   11238:	d9402d17 	ldw	r5,180(sp)
   1123c:	d8c02917 	ldw	r3,164(sp)
   11240:	d8002785 	stb	zero,158(sp)
   11244:	28800104 	addi	r2,r5,4
   11248:	2cc00017 	ldw	r19,0(r5)
   1124c:	002d883a 	mov	r22,zero
   11250:	18003716 	blt	r3,zero,11330 <___vfprintf_internal_r+0x1420>
   11254:	00ffdfc4 	movi	r3,-129
   11258:	d8802d15 	stw	r2,180(sp)
   1125c:	90e4703a 	and	r18,r18,r3
   11260:	0039883a 	mov	fp,zero
   11264:	983df326 	beq	r19,zero,10a34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010a34>
   11268:	00800244 	movi	r2,9
   1126c:	14fc7b36 	bltu	r2,r19,1045c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701045c>
   11270:	d8c02817 	ldw	r3,160(sp)
   11274:	dc001dc4 	addi	r16,sp,119
   11278:	9cc00c04 	addi	r19,r19,48
   1127c:	1c07c83a 	sub	r3,r3,r16
   11280:	dcc01dc5 	stb	r19,119(sp)
   11284:	d8c02e15 	stw	r3,184(sp)
   11288:	003ce806 	br	1062c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701062c>
   1128c:	d8803317 	ldw	r2,204(sp)
   11290:	143fffc4 	addi	r16,r2,-1
   11294:	043f4d0e 	bge	zero,r16,10fcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010fcc>
   11298:	07000404 	movi	fp,16
   1129c:	e400810e 	bge	fp,r16,114a4 <___vfprintf_internal_r+0x1594>
   112a0:	014000f4 	movhi	r5,3
   112a4:	2960ca84 	addi	r5,r5,-31958
   112a8:	d9402b15 	stw	r5,172(sp)
   112ac:	01c001c4 	movi	r7,7
   112b0:	dcc02c17 	ldw	r19,176(sp)
   112b4:	00000306 	br	112c4 <___vfprintf_internal_r+0x13b4>
   112b8:	b5800204 	addi	r22,r22,8
   112bc:	843ffc04 	addi	r16,r16,-16
   112c0:	e4007b0e 	bge	fp,r16,114b0 <___vfprintf_internal_r+0x15a0>
   112c4:	18c00404 	addi	r3,r3,16
   112c8:	8c400044 	addi	r17,r17,1
   112cc:	b5000015 	stw	r20,0(r22)
   112d0:	b7000115 	stw	fp,4(r22)
   112d4:	d8c02015 	stw	r3,128(sp)
   112d8:	dc401f15 	stw	r17,124(sp)
   112dc:	3c7ff60e 	bge	r7,r17,112b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70112b8>
   112e0:	d9801e04 	addi	r6,sp,120
   112e4:	b80b883a 	mov	r5,r23
   112e8:	9809883a 	mov	r4,r19
   112ec:	d9c03c15 	stw	r7,240(sp)
   112f0:	0017cf80 	call	17cf8 <__sprint_r>
   112f4:	d9c03c17 	ldw	r7,240(sp)
   112f8:	103c071e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   112fc:	d8c02017 	ldw	r3,128(sp)
   11300:	dc401f17 	ldw	r17,124(sp)
   11304:	dd800404 	addi	r22,sp,16
   11308:	003fec06 	br	112bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70112bc>
   1130c:	9080100c 	andi	r2,r18,64
   11310:	d8002785 	stb	zero,158(sp)
   11314:	10010e26 	beq	r2,zero,11750 <___vfprintf_internal_r+0x1840>
   11318:	d9002d17 	ldw	r4,180(sp)
   1131c:	d9402917 	ldw	r5,164(sp)
   11320:	002d883a 	mov	r22,zero
   11324:	20800104 	addi	r2,r4,4
   11328:	24c0000b 	ldhu	r19,0(r4)
   1132c:	283fc90e 	bge	r5,zero,11254 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011254>
   11330:	d8802d15 	stw	r2,180(sp)
   11334:	0039883a 	mov	fp,zero
   11338:	9d84b03a 	or	r2,r19,r22
   1133c:	103c461e 	bne	r2,zero,10458 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010458>
   11340:	00800044 	movi	r2,1
   11344:	003e6c06 	br	10cf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010cf8>
   11348:	d9002c17 	ldw	r4,176(sp)
   1134c:	d9801e04 	addi	r6,sp,120
   11350:	b80b883a 	mov	r5,r23
   11354:	0017cf80 	call	17cf8 <__sprint_r>
   11358:	103bef1e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   1135c:	d8c02017 	ldw	r3,128(sp)
   11360:	da000404 	addi	r8,sp,16
   11364:	d9003217 	ldw	r4,200(sp)
   11368:	d8802617 	ldw	r2,152(sp)
   1136c:	d9403317 	ldw	r5,204(sp)
   11370:	8123883a 	add	r17,r16,r4
   11374:	11400216 	blt	r2,r5,11380 <___vfprintf_internal_r+0x1470>
   11378:	9100004c 	andi	r4,r18,1
   1137c:	20000d26 	beq	r4,zero,113b4 <___vfprintf_internal_r+0x14a4>
   11380:	d9003717 	ldw	r4,220(sp)
   11384:	d9403417 	ldw	r5,208(sp)
   11388:	1907883a 	add	r3,r3,r4
   1138c:	d9001f17 	ldw	r4,124(sp)
   11390:	41400015 	stw	r5,0(r8)
   11394:	d9403717 	ldw	r5,220(sp)
   11398:	21000044 	addi	r4,r4,1
   1139c:	d8c02015 	stw	r3,128(sp)
   113a0:	41400115 	stw	r5,4(r8)
   113a4:	d9001f15 	stw	r4,124(sp)
   113a8:	014001c4 	movi	r5,7
   113ac:	2901e816 	blt	r5,r4,11b50 <___vfprintf_internal_r+0x1c40>
   113b0:	42000204 	addi	r8,r8,8
   113b4:	d9003317 	ldw	r4,204(sp)
   113b8:	8121883a 	add	r16,r16,r4
   113bc:	2085c83a 	sub	r2,r4,r2
   113c0:	8461c83a 	sub	r16,r16,r17
   113c4:	1400010e 	bge	r2,r16,113cc <___vfprintf_internal_r+0x14bc>
   113c8:	1021883a 	mov	r16,r2
   113cc:	04000a0e 	bge	zero,r16,113f8 <___vfprintf_internal_r+0x14e8>
   113d0:	d9001f17 	ldw	r4,124(sp)
   113d4:	1c07883a 	add	r3,r3,r16
   113d8:	44400015 	stw	r17,0(r8)
   113dc:	21000044 	addi	r4,r4,1
   113e0:	44000115 	stw	r16,4(r8)
   113e4:	d8c02015 	stw	r3,128(sp)
   113e8:	d9001f15 	stw	r4,124(sp)
   113ec:	014001c4 	movi	r5,7
   113f0:	2901fb16 	blt	r5,r4,11be0 <___vfprintf_internal_r+0x1cd0>
   113f4:	42000204 	addi	r8,r8,8
   113f8:	8001f716 	blt	r16,zero,11bd8 <___vfprintf_internal_r+0x1cc8>
   113fc:	1421c83a 	sub	r16,r2,r16
   11400:	043d380e 	bge	zero,r16,108e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70108e4>
   11404:	04400404 	movi	r17,16
   11408:	d8801f17 	ldw	r2,124(sp)
   1140c:	8c3efb0e 	bge	r17,r16,10ffc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010ffc>
   11410:	014000f4 	movhi	r5,3
   11414:	2960ca84 	addi	r5,r5,-31958
   11418:	d9402b15 	stw	r5,172(sp)
   1141c:	058001c4 	movi	r22,7
   11420:	dcc02c17 	ldw	r19,176(sp)
   11424:	00000306 	br	11434 <___vfprintf_internal_r+0x1524>
   11428:	42000204 	addi	r8,r8,8
   1142c:	843ffc04 	addi	r16,r16,-16
   11430:	8c3ef50e 	bge	r17,r16,11008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011008>
   11434:	18c00404 	addi	r3,r3,16
   11438:	10800044 	addi	r2,r2,1
   1143c:	45000015 	stw	r20,0(r8)
   11440:	44400115 	stw	r17,4(r8)
   11444:	d8c02015 	stw	r3,128(sp)
   11448:	d8801f15 	stw	r2,124(sp)
   1144c:	b0bff60e 	bge	r22,r2,11428 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011428>
   11450:	d9801e04 	addi	r6,sp,120
   11454:	b80b883a 	mov	r5,r23
   11458:	9809883a 	mov	r4,r19
   1145c:	0017cf80 	call	17cf8 <__sprint_r>
   11460:	103bad1e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   11464:	d8c02017 	ldw	r3,128(sp)
   11468:	d8801f17 	ldw	r2,124(sp)
   1146c:	da000404 	addi	r8,sp,16
   11470:	003fee06 	br	1142c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701142c>
   11474:	9088703a 	and	r4,r18,r2
   11478:	203eab1e 	bne	r4,zero,10f28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010f28>
   1147c:	dc401f17 	ldw	r17,124(sp)
   11480:	40800115 	stw	r2,4(r8)
   11484:	44000015 	stw	r16,0(r8)
   11488:	8c400044 	addi	r17,r17,1
   1148c:	d8c02015 	stw	r3,128(sp)
   11490:	dc401f15 	stw	r17,124(sp)
   11494:	008001c4 	movi	r2,7
   11498:	14400e16 	blt	r2,r17,114d4 <___vfprintf_internal_r+0x15c4>
   1149c:	45800204 	addi	r22,r8,8
   114a0:	003eca06 	br	10fcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010fcc>
   114a4:	010000f4 	movhi	r4,3
   114a8:	2120ca84 	addi	r4,r4,-31958
   114ac:	d9002b15 	stw	r4,172(sp)
   114b0:	d8802b17 	ldw	r2,172(sp)
   114b4:	1c07883a 	add	r3,r3,r16
   114b8:	8c400044 	addi	r17,r17,1
   114bc:	b0800015 	stw	r2,0(r22)
   114c0:	b4000115 	stw	r16,4(r22)
   114c4:	d8c02015 	stw	r3,128(sp)
   114c8:	dc401f15 	stw	r17,124(sp)
   114cc:	008001c4 	movi	r2,7
   114d0:	147ebd0e 	bge	r2,r17,10fc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010fc8>
   114d4:	d9002c17 	ldw	r4,176(sp)
   114d8:	d9801e04 	addi	r6,sp,120
   114dc:	b80b883a 	mov	r5,r23
   114e0:	0017cf80 	call	17cf8 <__sprint_r>
   114e4:	103b8c1e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   114e8:	d8c02017 	ldw	r3,128(sp)
   114ec:	dc401f17 	ldw	r17,124(sp)
   114f0:	dd800404 	addi	r22,sp,16
   114f4:	003eb506 	br	10fcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010fcc>
   114f8:	d9002c17 	ldw	r4,176(sp)
   114fc:	d9801e04 	addi	r6,sp,120
   11500:	b80b883a 	mov	r5,r23
   11504:	0017cf80 	call	17cf8 <__sprint_r>
   11508:	103b831e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   1150c:	d8c02017 	ldw	r3,128(sp)
   11510:	dc401f17 	ldw	r17,124(sp)
   11514:	da000404 	addi	r8,sp,16
   11518:	003e8d06 	br	10f50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010f50>
   1151c:	d9002c17 	ldw	r4,176(sp)
   11520:	d9801e04 	addi	r6,sp,120
   11524:	b80b883a 	mov	r5,r23
   11528:	0017cf80 	call	17cf8 <__sprint_r>
   1152c:	103b7a1e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   11530:	d8c02017 	ldw	r3,128(sp)
   11534:	dc401f17 	ldw	r17,124(sp)
   11538:	dd800404 	addi	r22,sp,16
   1153c:	003e8f06 	br	10f7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010f7c>
   11540:	0027883a 	mov	r19,zero
   11544:	003f4a06 	br	11270 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011270>
   11548:	d9002c17 	ldw	r4,176(sp)
   1154c:	d9801e04 	addi	r6,sp,120
   11550:	b80b883a 	mov	r5,r23
   11554:	0017cf80 	call	17cf8 <__sprint_r>
   11558:	103b6f1e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   1155c:	d8c02017 	ldw	r3,128(sp)
   11560:	da000404 	addi	r8,sp,16
   11564:	003c9d06 	br	107dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70107dc>
   11568:	04e7c83a 	sub	r19,zero,r19
   1156c:	9804c03a 	cmpne	r2,r19,zero
   11570:	05adc83a 	sub	r22,zero,r22
   11574:	b0adc83a 	sub	r22,r22,r2
   11578:	d8802917 	ldw	r2,164(sp)
   1157c:	07000b44 	movi	fp,45
   11580:	df002785 	stb	fp,158(sp)
   11584:	10017b16 	blt	r2,zero,11b74 <___vfprintf_internal_r+0x1c64>
   11588:	00bfdfc4 	movi	r2,-129
   1158c:	90a4703a 	and	r18,r18,r2
   11590:	003bb106 	br	10458 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010458>
   11594:	d9003617 	ldw	r4,216(sp)
   11598:	d9403817 	ldw	r5,224(sp)
   1159c:	da003d15 	stw	r8,244(sp)
   115a0:	00091740 	call	9174 <__fpclassifyd>
   115a4:	da003d17 	ldw	r8,244(sp)
   115a8:	1000f026 	beq	r2,zero,1196c <___vfprintf_internal_r+0x1a5c>
   115ac:	d9002917 	ldw	r4,164(sp)
   115b0:	05bff7c4 	movi	r22,-33
   115b4:	00bfffc4 	movi	r2,-1
   115b8:	8dac703a 	and	r22,r17,r22
   115bc:	20820026 	beq	r4,r2,11dc0 <___vfprintf_internal_r+0x1eb0>
   115c0:	008011c4 	movi	r2,71
   115c4:	b081f726 	beq	r22,r2,11da4 <___vfprintf_internal_r+0x1e94>
   115c8:	d9003817 	ldw	r4,224(sp)
   115cc:	90c04014 	ori	r3,r18,256
   115d0:	d8c02b15 	stw	r3,172(sp)
   115d4:	20021516 	blt	r4,zero,11e2c <___vfprintf_internal_r+0x1f1c>
   115d8:	dcc03817 	ldw	r19,224(sp)
   115dc:	d8002a05 	stb	zero,168(sp)
   115e0:	00801984 	movi	r2,102
   115e4:	8881f926 	beq	r17,r2,11dcc <___vfprintf_internal_r+0x1ebc>
   115e8:	00801184 	movi	r2,70
   115ec:	88821c26 	beq	r17,r2,11e60 <___vfprintf_internal_r+0x1f50>
   115f0:	00801144 	movi	r2,69
   115f4:	b081ef26 	beq	r22,r2,11db4 <___vfprintf_internal_r+0x1ea4>
   115f8:	d8c02917 	ldw	r3,164(sp)
   115fc:	d8802104 	addi	r2,sp,132
   11600:	d8800315 	stw	r2,12(sp)
   11604:	d9403617 	ldw	r5,216(sp)
   11608:	d8802504 	addi	r2,sp,148
   1160c:	d9002c17 	ldw	r4,176(sp)
   11610:	d8800215 	stw	r2,8(sp)
   11614:	d8802604 	addi	r2,sp,152
   11618:	d8c00015 	stw	r3,0(sp)
   1161c:	d8800115 	stw	r2,4(sp)
   11620:	01c00084 	movi	r7,2
   11624:	980d883a 	mov	r6,r19
   11628:	d8c03c15 	stw	r3,240(sp)
   1162c:	da003d15 	stw	r8,244(sp)
   11630:	00125340 	call	12534 <_dtoa_r>
   11634:	1021883a 	mov	r16,r2
   11638:	008019c4 	movi	r2,103
   1163c:	d8c03c17 	ldw	r3,240(sp)
   11640:	da003d17 	ldw	r8,244(sp)
   11644:	88817126 	beq	r17,r2,11c0c <___vfprintf_internal_r+0x1cfc>
   11648:	008011c4 	movi	r2,71
   1164c:	88829226 	beq	r17,r2,12098 <___vfprintf_internal_r+0x2188>
   11650:	80f9883a 	add	fp,r16,r3
   11654:	d9003617 	ldw	r4,216(sp)
   11658:	000d883a 	mov	r6,zero
   1165c:	000f883a 	mov	r7,zero
   11660:	980b883a 	mov	r5,r19
   11664:	da003d15 	stw	r8,244(sp)
   11668:	000af140 	call	af14 <__eqdf2>
   1166c:	da003d17 	ldw	r8,244(sp)
   11670:	10018d26 	beq	r2,zero,11ca8 <___vfprintf_internal_r+0x1d98>
   11674:	d8802117 	ldw	r2,132(sp)
   11678:	1700062e 	bgeu	r2,fp,11694 <___vfprintf_internal_r+0x1784>
   1167c:	01000c04 	movi	r4,48
   11680:	10c00044 	addi	r3,r2,1
   11684:	d8c02115 	stw	r3,132(sp)
   11688:	11000005 	stb	r4,0(r2)
   1168c:	d8802117 	ldw	r2,132(sp)
   11690:	173ffb36 	bltu	r2,fp,11680 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011680>
   11694:	1405c83a 	sub	r2,r2,r16
   11698:	d8803315 	stw	r2,204(sp)
   1169c:	008011c4 	movi	r2,71
   116a0:	b0817626 	beq	r22,r2,11c7c <___vfprintf_internal_r+0x1d6c>
   116a4:	00801944 	movi	r2,101
   116a8:	1442810e 	bge	r2,r17,120b0 <___vfprintf_internal_r+0x21a0>
   116ac:	d8c02617 	ldw	r3,152(sp)
   116b0:	00801984 	movi	r2,102
   116b4:	d8c03215 	stw	r3,200(sp)
   116b8:	8881fe26 	beq	r17,r2,11eb4 <___vfprintf_internal_r+0x1fa4>
   116bc:	d8c03217 	ldw	r3,200(sp)
   116c0:	d9003317 	ldw	r4,204(sp)
   116c4:	1901dd16 	blt	r3,r4,11e3c <___vfprintf_internal_r+0x1f2c>
   116c8:	9480004c 	andi	r18,r18,1
   116cc:	90022b1e 	bne	r18,zero,11f7c <___vfprintf_internal_r+0x206c>
   116d0:	1805883a 	mov	r2,r3
   116d4:	18028016 	blt	r3,zero,120d8 <___vfprintf_internal_r+0x21c8>
   116d8:	d8c03217 	ldw	r3,200(sp)
   116dc:	044019c4 	movi	r17,103
   116e0:	d8c02e15 	stw	r3,184(sp)
   116e4:	df002a07 	ldb	fp,168(sp)
   116e8:	e001531e 	bne	fp,zero,11c38 <___vfprintf_internal_r+0x1d28>
   116ec:	df002783 	ldbu	fp,158(sp)
   116f0:	d8802a15 	stw	r2,168(sp)
   116f4:	dc802b17 	ldw	r18,172(sp)
   116f8:	d8002915 	stw	zero,164(sp)
   116fc:	003bd106 	br	10644 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010644>
   11700:	d8802d17 	ldw	r2,180(sp)
   11704:	d8c02d17 	ldw	r3,180(sp)
   11708:	d9002d17 	ldw	r4,180(sp)
   1170c:	10800017 	ldw	r2,0(r2)
   11710:	18c00117 	ldw	r3,4(r3)
   11714:	21000204 	addi	r4,r4,8
   11718:	d8803615 	stw	r2,216(sp)
   1171c:	d8c03815 	stw	r3,224(sp)
   11720:	d9002d15 	stw	r4,180(sp)
   11724:	003b7506 	br	104fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70104fc>
   11728:	ac400007 	ldb	r17,0(r21)
   1172c:	003a5906 	br	10094 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010094>
   11730:	9080100c 	andi	r2,r18,64
   11734:	1000a826 	beq	r2,zero,119d8 <___vfprintf_internal_r+0x1ac8>
   11738:	d9002d17 	ldw	r4,180(sp)
   1173c:	002d883a 	mov	r22,zero
   11740:	24c0000b 	ldhu	r19,0(r4)
   11744:	21000104 	addi	r4,r4,4
   11748:	d9002d15 	stw	r4,180(sp)
   1174c:	003ccb06 	br	10a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010a7c>
   11750:	d8c02d17 	ldw	r3,180(sp)
   11754:	d9002917 	ldw	r4,164(sp)
   11758:	002d883a 	mov	r22,zero
   1175c:	18800104 	addi	r2,r3,4
   11760:	1cc00017 	ldw	r19,0(r3)
   11764:	203ebb0e 	bge	r4,zero,11254 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011254>
   11768:	003ef106 	br	11330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011330>
   1176c:	9080040c 	andi	r2,r18,16
   11770:	1000921e 	bne	r2,zero,119bc <___vfprintf_internal_r+0x1aac>
   11774:	9480100c 	andi	r18,r18,64
   11778:	90013926 	beq	r18,zero,11c60 <___vfprintf_internal_r+0x1d50>
   1177c:	d9002d17 	ldw	r4,180(sp)
   11780:	d9402f17 	ldw	r5,188(sp)
   11784:	20800017 	ldw	r2,0(r4)
   11788:	21000104 	addi	r4,r4,4
   1178c:	d9002d15 	stw	r4,180(sp)
   11790:	1140000d 	sth	r5,0(r2)
   11794:	003a1606 	br	fff0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fff0>
   11798:	9080100c 	andi	r2,r18,64
   1179c:	10008026 	beq	r2,zero,119a0 <___vfprintf_internal_r+0x1a90>
   117a0:	d8c02d17 	ldw	r3,180(sp)
   117a4:	1cc0000f 	ldh	r19,0(r3)
   117a8:	18c00104 	addi	r3,r3,4
   117ac:	d8c02d15 	stw	r3,180(sp)
   117b0:	982dd7fa 	srai	r22,r19,31
   117b4:	b005883a 	mov	r2,r22
   117b8:	003b1f06 	br	10438 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010438>
   117bc:	9080100c 	andi	r2,r18,64
   117c0:	d8002785 	stb	zero,158(sp)
   117c4:	10008a1e 	bne	r2,zero,119f0 <___vfprintf_internal_r+0x1ae0>
   117c8:	d9402d17 	ldw	r5,180(sp)
   117cc:	d8c02917 	ldw	r3,164(sp)
   117d0:	002d883a 	mov	r22,zero
   117d4:	28800104 	addi	r2,r5,4
   117d8:	2cc00017 	ldw	r19,0(r5)
   117dc:	183e4b0e 	bge	r3,zero,1110c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701110c>
   117e0:	9d86b03a 	or	r3,r19,r22
   117e4:	d8802d15 	stw	r2,180(sp)
   117e8:	183e4c1e 	bne	r3,zero,1111c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701111c>
   117ec:	0039883a 	mov	fp,zero
   117f0:	0005883a 	mov	r2,zero
   117f4:	003d4006 	br	10cf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010cf8>
   117f8:	014000f4 	movhi	r5,3
   117fc:	2960ca84 	addi	r5,r5,-31958
   11800:	d9402b15 	stw	r5,172(sp)
   11804:	d9402b17 	ldw	r5,172(sp)
   11808:	1c47883a 	add	r3,r3,r17
   1180c:	10800044 	addi	r2,r2,1
   11810:	41400015 	stw	r5,0(r8)
   11814:	44400115 	stw	r17,4(r8)
   11818:	d8c02015 	stw	r3,128(sp)
   1181c:	d8801f15 	stw	r2,124(sp)
   11820:	010001c4 	movi	r4,7
   11824:	20bec816 	blt	r4,r2,11348 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011348>
   11828:	42000204 	addi	r8,r8,8
   1182c:	003ecd06 	br	11364 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011364>
   11830:	d9002917 	ldw	r4,164(sp)
   11834:	d8002785 	stb	zero,158(sp)
   11838:	203d2d16 	blt	r4,zero,10cf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010cf0>
   1183c:	00bfdfc4 	movi	r2,-129
   11840:	90a4703a 	and	r18,r18,r2
   11844:	003a9106 	br	1028c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701028c>
   11848:	010000f4 	movhi	r4,3
   1184c:	2120ca84 	addi	r4,r4,-31958
   11850:	d9002b15 	stw	r4,172(sp)
   11854:	003c0c06 	br	10888 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010888>
   11858:	d9002c17 	ldw	r4,176(sp)
   1185c:	d9801e04 	addi	r6,sp,120
   11860:	b80b883a 	mov	r5,r23
   11864:	0017cf80 	call	17cf8 <__sprint_r>
   11868:	103aab1e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   1186c:	d8c02017 	ldw	r3,128(sp)
   11870:	da000404 	addi	r8,sp,16
   11874:	003d4106 	br	10d7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010d7c>
   11878:	d8801f17 	ldw	r2,124(sp)
   1187c:	014000f4 	movhi	r5,3
   11880:	01000044 	movi	r4,1
   11884:	18c00044 	addi	r3,r3,1
   11888:	10800044 	addi	r2,r2,1
   1188c:	2960c204 	addi	r5,r5,-31992
   11890:	41000115 	stw	r4,4(r8)
   11894:	41400015 	stw	r5,0(r8)
   11898:	d8c02015 	stw	r3,128(sp)
   1189c:	d8801f15 	stw	r2,124(sp)
   118a0:	010001c4 	movi	r4,7
   118a4:	20805c16 	blt	r4,r2,11a18 <___vfprintf_internal_r+0x1b08>
   118a8:	42000204 	addi	r8,r8,8
   118ac:	8800041e 	bne	r17,zero,118c0 <___vfprintf_internal_r+0x19b0>
   118b0:	d8803317 	ldw	r2,204(sp)
   118b4:	1000021e 	bne	r2,zero,118c0 <___vfprintf_internal_r+0x19b0>
   118b8:	9080004c 	andi	r2,r18,1
   118bc:	103c0926 	beq	r2,zero,108e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70108e4>
   118c0:	d9003717 	ldw	r4,220(sp)
   118c4:	d8801f17 	ldw	r2,124(sp)
   118c8:	d9403417 	ldw	r5,208(sp)
   118cc:	20c7883a 	add	r3,r4,r3
   118d0:	10800044 	addi	r2,r2,1
   118d4:	41000115 	stw	r4,4(r8)
   118d8:	41400015 	stw	r5,0(r8)
   118dc:	d8c02015 	stw	r3,128(sp)
   118e0:	d8801f15 	stw	r2,124(sp)
   118e4:	010001c4 	movi	r4,7
   118e8:	20812116 	blt	r4,r2,11d70 <___vfprintf_internal_r+0x1e60>
   118ec:	42000204 	addi	r8,r8,8
   118f0:	0463c83a 	sub	r17,zero,r17
   118f4:	0440730e 	bge	zero,r17,11ac4 <___vfprintf_internal_r+0x1bb4>
   118f8:	05800404 	movi	r22,16
   118fc:	b440860e 	bge	r22,r17,11b18 <___vfprintf_internal_r+0x1c08>
   11900:	014000f4 	movhi	r5,3
   11904:	2960ca84 	addi	r5,r5,-31958
   11908:	d9402b15 	stw	r5,172(sp)
   1190c:	070001c4 	movi	fp,7
   11910:	dcc02c17 	ldw	r19,176(sp)
   11914:	00000306 	br	11924 <___vfprintf_internal_r+0x1a14>
   11918:	42000204 	addi	r8,r8,8
   1191c:	8c7ffc04 	addi	r17,r17,-16
   11920:	b440800e 	bge	r22,r17,11b24 <___vfprintf_internal_r+0x1c14>
   11924:	18c00404 	addi	r3,r3,16
   11928:	10800044 	addi	r2,r2,1
   1192c:	45000015 	stw	r20,0(r8)
   11930:	45800115 	stw	r22,4(r8)
   11934:	d8c02015 	stw	r3,128(sp)
   11938:	d8801f15 	stw	r2,124(sp)
   1193c:	e0bff60e 	bge	fp,r2,11918 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011918>
   11940:	d9801e04 	addi	r6,sp,120
   11944:	b80b883a 	mov	r5,r23
   11948:	9809883a 	mov	r4,r19
   1194c:	0017cf80 	call	17cf8 <__sprint_r>
   11950:	103a711e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   11954:	d8c02017 	ldw	r3,128(sp)
   11958:	d8801f17 	ldw	r2,124(sp)
   1195c:	da000404 	addi	r8,sp,16
   11960:	003fee06 	br	1191c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701191c>
   11964:	00bfffc4 	movi	r2,-1
   11968:	003a6f06 	br	10328 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010328>
   1196c:	008011c4 	movi	r2,71
   11970:	1440b816 	blt	r2,r17,11c54 <___vfprintf_internal_r+0x1d44>
   11974:	040000f4 	movhi	r16,3
   11978:	8420b404 	addi	r16,r16,-32048
   1197c:	00c000c4 	movi	r3,3
   11980:	00bfdfc4 	movi	r2,-129
   11984:	d8c02a15 	stw	r3,168(sp)
   11988:	90a4703a 	and	r18,r18,r2
   1198c:	df002783 	ldbu	fp,158(sp)
   11990:	d8c02e15 	stw	r3,184(sp)
   11994:	d8002915 	stw	zero,164(sp)
   11998:	d8003215 	stw	zero,200(sp)
   1199c:	003b2906 	br	10644 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010644>
   119a0:	d9002d17 	ldw	r4,180(sp)
   119a4:	24c00017 	ldw	r19,0(r4)
   119a8:	21000104 	addi	r4,r4,4
   119ac:	d9002d15 	stw	r4,180(sp)
   119b0:	982dd7fa 	srai	r22,r19,31
   119b4:	b005883a 	mov	r2,r22
   119b8:	003a9f06 	br	10438 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010438>
   119bc:	d9402d17 	ldw	r5,180(sp)
   119c0:	d8c02f17 	ldw	r3,188(sp)
   119c4:	28800017 	ldw	r2,0(r5)
   119c8:	29400104 	addi	r5,r5,4
   119cc:	d9402d15 	stw	r5,180(sp)
   119d0:	10c00015 	stw	r3,0(r2)
   119d4:	00398606 	br	fff0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fff0>
   119d8:	d9402d17 	ldw	r5,180(sp)
   119dc:	002d883a 	mov	r22,zero
   119e0:	2cc00017 	ldw	r19,0(r5)
   119e4:	29400104 	addi	r5,r5,4
   119e8:	d9402d15 	stw	r5,180(sp)
   119ec:	003c2306 	br	10a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010a7c>
   119f0:	d8c02d17 	ldw	r3,180(sp)
   119f4:	d9002917 	ldw	r4,164(sp)
   119f8:	002d883a 	mov	r22,zero
   119fc:	18800104 	addi	r2,r3,4
   11a00:	1cc0000b 	ldhu	r19,0(r3)
   11a04:	203dc10e 	bge	r4,zero,1110c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701110c>
   11a08:	003f7506 	br	117e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70117e0>
   11a0c:	040000f4 	movhi	r16,3
   11a10:	8420b204 	addi	r16,r16,-32056
   11a14:	003acc06 	br	10548 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010548>
   11a18:	d9002c17 	ldw	r4,176(sp)
   11a1c:	d9801e04 	addi	r6,sp,120
   11a20:	b80b883a 	mov	r5,r23
   11a24:	0017cf80 	call	17cf8 <__sprint_r>
   11a28:	103a3b1e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   11a2c:	dc402617 	ldw	r17,152(sp)
   11a30:	d8c02017 	ldw	r3,128(sp)
   11a34:	da000404 	addi	r8,sp,16
   11a38:	003f9c06 	br	118ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70118ac>
   11a3c:	ac400043 	ldbu	r17,1(r21)
   11a40:	94800814 	ori	r18,r18,32
   11a44:	ad400044 	addi	r21,r21,1
   11a48:	8c403fcc 	andi	r17,r17,255
   11a4c:	8c40201c 	xori	r17,r17,128
   11a50:	8c7fe004 	addi	r17,r17,-128
   11a54:	00398f06 	br	10094 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010094>
   11a58:	d8c02d15 	stw	r3,180(sp)
   11a5c:	0039883a 	mov	fp,zero
   11a60:	003e3506 	br	11338 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011338>
   11a64:	d9002c17 	ldw	r4,176(sp)
   11a68:	d9801e04 	addi	r6,sp,120
   11a6c:	b80b883a 	mov	r5,r23
   11a70:	0017cf80 	call	17cf8 <__sprint_r>
   11a74:	103a281e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   11a78:	d8c02017 	ldw	r3,128(sp)
   11a7c:	da000404 	addi	r8,sp,16
   11a80:	003cd006 	br	10dc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010dc4>
   11a84:	8009883a 	mov	r4,r16
   11a88:	da003d15 	stw	r8,244(sp)
   11a8c:	000dca00 	call	dca0 <strlen>
   11a90:	d8802e15 	stw	r2,184(sp)
   11a94:	da003d17 	ldw	r8,244(sp)
   11a98:	103c340e 	bge	r2,zero,10b6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010b6c>
   11a9c:	0005883a 	mov	r2,zero
   11aa0:	003c3206 	br	10b6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010b6c>
   11aa4:	d9002c17 	ldw	r4,176(sp)
   11aa8:	d9801e04 	addi	r6,sp,120
   11aac:	b80b883a 	mov	r5,r23
   11ab0:	0017cf80 	call	17cf8 <__sprint_r>
   11ab4:	103a181e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   11ab8:	d8c02017 	ldw	r3,128(sp)
   11abc:	d8801f17 	ldw	r2,124(sp)
   11ac0:	da000404 	addi	r8,sp,16
   11ac4:	d9403317 	ldw	r5,204(sp)
   11ac8:	10800044 	addi	r2,r2,1
   11acc:	44000015 	stw	r16,0(r8)
   11ad0:	28c7883a 	add	r3,r5,r3
   11ad4:	003b7d06 	br	108cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70108cc>
   11ad8:	010000f4 	movhi	r4,3
   11adc:	2120ce84 	addi	r4,r4,-31942
   11ae0:	d9003515 	stw	r4,212(sp)
   11ae4:	003b1406 	br	10738 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010738>
   11ae8:	013fffc4 	movi	r4,-1
   11aec:	003a3506 	br	103c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70103c4>
   11af0:	0023883a 	mov	r17,zero
   11af4:	003d9d06 	br	1116c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701116c>
   11af8:	d9002c17 	ldw	r4,176(sp)
   11afc:	d9801e04 	addi	r6,sp,120
   11b00:	b80b883a 	mov	r5,r23
   11b04:	0017cf80 	call	17cf8 <__sprint_r>
   11b08:	103a031e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   11b0c:	d8c02017 	ldw	r3,128(sp)
   11b10:	da000404 	addi	r8,sp,16
   11b14:	003d9406 	br	11168 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011168>
   11b18:	010000f4 	movhi	r4,3
   11b1c:	2120ca84 	addi	r4,r4,-31958
   11b20:	d9002b15 	stw	r4,172(sp)
   11b24:	d9002b17 	ldw	r4,172(sp)
   11b28:	1c47883a 	add	r3,r3,r17
   11b2c:	10800044 	addi	r2,r2,1
   11b30:	41000015 	stw	r4,0(r8)
   11b34:	44400115 	stw	r17,4(r8)
   11b38:	d8c02015 	stw	r3,128(sp)
   11b3c:	d8801f15 	stw	r2,124(sp)
   11b40:	010001c4 	movi	r4,7
   11b44:	20bfd716 	blt	r4,r2,11aa4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011aa4>
   11b48:	42000204 	addi	r8,r8,8
   11b4c:	003fdd06 	br	11ac4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011ac4>
   11b50:	d9002c17 	ldw	r4,176(sp)
   11b54:	d9801e04 	addi	r6,sp,120
   11b58:	b80b883a 	mov	r5,r23
   11b5c:	0017cf80 	call	17cf8 <__sprint_r>
   11b60:	1039ed1e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   11b64:	d8802617 	ldw	r2,152(sp)
   11b68:	d8c02017 	ldw	r3,128(sp)
   11b6c:	da000404 	addi	r8,sp,16
   11b70:	003e1006 	br	113b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70113b4>
   11b74:	00800044 	movi	r2,1
   11b78:	10803fcc 	andi	r2,r2,255
   11b7c:	00c00044 	movi	r3,1
   11b80:	10fa3526 	beq	r2,r3,10458 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010458>
   11b84:	00c00084 	movi	r3,2
   11b88:	10fbcb26 	beq	r2,r3,10ab8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010ab8>
   11b8c:	003a8f06 	br	105cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70105cc>
   11b90:	010000f4 	movhi	r4,3
   11b94:	2120ce84 	addi	r4,r4,-31942
   11b98:	d9003515 	stw	r4,212(sp)
   11b9c:	003b7606 	br	10978 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010978>
   11ba0:	d8802917 	ldw	r2,164(sp)
   11ba4:	00c00184 	movi	r3,6
   11ba8:	1880012e 	bgeu	r3,r2,11bb0 <___vfprintf_internal_r+0x1ca0>
   11bac:	1805883a 	mov	r2,r3
   11bb0:	d8802e15 	stw	r2,184(sp)
   11bb4:	1000ef16 	blt	r2,zero,11f74 <___vfprintf_internal_r+0x2064>
   11bb8:	040000f4 	movhi	r16,3
   11bbc:	d8802a15 	stw	r2,168(sp)
   11bc0:	dcc02d15 	stw	r19,180(sp)
   11bc4:	d8002915 	stw	zero,164(sp)
   11bc8:	d8003215 	stw	zero,200(sp)
   11bcc:	8420c004 	addi	r16,r16,-32000
   11bd0:	0039883a 	mov	fp,zero
   11bd4:	003aa206 	br	10660 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010660>
   11bd8:	0021883a 	mov	r16,zero
   11bdc:	003e0706 	br	113fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70113fc>
   11be0:	d9002c17 	ldw	r4,176(sp)
   11be4:	d9801e04 	addi	r6,sp,120
   11be8:	b80b883a 	mov	r5,r23
   11bec:	0017cf80 	call	17cf8 <__sprint_r>
   11bf0:	1039c91e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   11bf4:	d8802617 	ldw	r2,152(sp)
   11bf8:	d9403317 	ldw	r5,204(sp)
   11bfc:	d8c02017 	ldw	r3,128(sp)
   11c00:	da000404 	addi	r8,sp,16
   11c04:	2885c83a 	sub	r2,r5,r2
   11c08:	003dfb06 	br	113f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70113f8>
   11c0c:	9080004c 	andi	r2,r18,1
   11c10:	103e8f1e 	bne	r2,zero,11650 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011650>
   11c14:	d8802117 	ldw	r2,132(sp)
   11c18:	003e9e06 	br	11694 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011694>
   11c1c:	1025883a 	mov	r18,r2
   11c20:	0039883a 	mov	fp,zero
   11c24:	00800084 	movi	r2,2
   11c28:	003fd306 	br	11b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b78>
   11c2c:	07000b44 	movi	fp,45
   11c30:	df002785 	stb	fp,158(sp)
   11c34:	003a4006 	br	10538 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010538>
   11c38:	00c00b44 	movi	r3,45
   11c3c:	d8c02785 	stb	r3,158(sp)
   11c40:	d8802a15 	stw	r2,168(sp)
   11c44:	dc802b17 	ldw	r18,172(sp)
   11c48:	d8002915 	stw	zero,164(sp)
   11c4c:	07000b44 	movi	fp,45
   11c50:	003a8006 	br	10654 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010654>
   11c54:	040000f4 	movhi	r16,3
   11c58:	8420b504 	addi	r16,r16,-32044
   11c5c:	003f4706 	br	1197c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701197c>
   11c60:	d8c02d17 	ldw	r3,180(sp)
   11c64:	d9002f17 	ldw	r4,188(sp)
   11c68:	18800017 	ldw	r2,0(r3)
   11c6c:	18c00104 	addi	r3,r3,4
   11c70:	d8c02d15 	stw	r3,180(sp)
   11c74:	11000015 	stw	r4,0(r2)
   11c78:	0038dd06 	br	fff0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fff0>
   11c7c:	dd802617 	ldw	r22,152(sp)
   11c80:	00bfff44 	movi	r2,-3
   11c84:	b0801c16 	blt	r22,r2,11cf8 <___vfprintf_internal_r+0x1de8>
   11c88:	d9402917 	ldw	r5,164(sp)
   11c8c:	2d801a16 	blt	r5,r22,11cf8 <___vfprintf_internal_r+0x1de8>
   11c90:	dd803215 	stw	r22,200(sp)
   11c94:	003e8906 	br	116bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70116bc>
   11c98:	010000f4 	movhi	r4,3
   11c9c:	2120ca84 	addi	r4,r4,-31958
   11ca0:	d9002b15 	stw	r4,172(sp)
   11ca4:	003c9106 	br	10eec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010eec>
   11ca8:	e005883a 	mov	r2,fp
   11cac:	003e7906 	br	11694 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011694>
   11cb0:	d9402917 	ldw	r5,164(sp)
   11cb4:	df002783 	ldbu	fp,158(sp)
   11cb8:	dcc02d15 	stw	r19,180(sp)
   11cbc:	d9402a15 	stw	r5,168(sp)
   11cc0:	d9402e15 	stw	r5,184(sp)
   11cc4:	d8002915 	stw	zero,164(sp)
   11cc8:	d8003215 	stw	zero,200(sp)
   11ccc:	003a5d06 	br	10644 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010644>
   11cd0:	9080004c 	andi	r2,r18,1
   11cd4:	0039883a 	mov	fp,zero
   11cd8:	10000426 	beq	r2,zero,11cec <___vfprintf_internal_r+0x1ddc>
   11cdc:	00800c04 	movi	r2,48
   11ce0:	dc001dc4 	addi	r16,sp,119
   11ce4:	d8801dc5 	stb	r2,119(sp)
   11ce8:	003b8006 	br	10aec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010aec>
   11cec:	d8002e15 	stw	zero,184(sp)
   11cf0:	dc001e04 	addi	r16,sp,120
   11cf4:	003a4d06 	br	1062c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701062c>
   11cf8:	8c7fff84 	addi	r17,r17,-2
   11cfc:	b5bfffc4 	addi	r22,r22,-1
   11d00:	dd802615 	stw	r22,152(sp)
   11d04:	dc4022c5 	stb	r17,139(sp)
   11d08:	b000bf16 	blt	r22,zero,12008 <___vfprintf_internal_r+0x20f8>
   11d0c:	00800ac4 	movi	r2,43
   11d10:	d8802305 	stb	r2,140(sp)
   11d14:	00800244 	movi	r2,9
   11d18:	15807016 	blt	r2,r22,11edc <___vfprintf_internal_r+0x1fcc>
   11d1c:	00800c04 	movi	r2,48
   11d20:	b5800c04 	addi	r22,r22,48
   11d24:	d8802345 	stb	r2,141(sp)
   11d28:	dd802385 	stb	r22,142(sp)
   11d2c:	d88023c4 	addi	r2,sp,143
   11d30:	df0022c4 	addi	fp,sp,139
   11d34:	d8c03317 	ldw	r3,204(sp)
   11d38:	1739c83a 	sub	fp,r2,fp
   11d3c:	d9003317 	ldw	r4,204(sp)
   11d40:	e0c7883a 	add	r3,fp,r3
   11d44:	df003a15 	stw	fp,232(sp)
   11d48:	d8c02e15 	stw	r3,184(sp)
   11d4c:	00800044 	movi	r2,1
   11d50:	1100b30e 	bge	r2,r4,12020 <___vfprintf_internal_r+0x2110>
   11d54:	d8c02e17 	ldw	r3,184(sp)
   11d58:	18c00044 	addi	r3,r3,1
   11d5c:	d8c02e15 	stw	r3,184(sp)
   11d60:	1805883a 	mov	r2,r3
   11d64:	1800ac16 	blt	r3,zero,12018 <___vfprintf_internal_r+0x2108>
   11d68:	d8003215 	stw	zero,200(sp)
   11d6c:	003e5d06 	br	116e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70116e4>
   11d70:	d9002c17 	ldw	r4,176(sp)
   11d74:	d9801e04 	addi	r6,sp,120
   11d78:	b80b883a 	mov	r5,r23
   11d7c:	0017cf80 	call	17cf8 <__sprint_r>
   11d80:	1039651e 	bne	r2,zero,10318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010318>
   11d84:	dc402617 	ldw	r17,152(sp)
   11d88:	d8c02017 	ldw	r3,128(sp)
   11d8c:	d8801f17 	ldw	r2,124(sp)
   11d90:	da000404 	addi	r8,sp,16
   11d94:	003ed606 	br	118f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70118f0>
   11d98:	582b883a 	mov	r21,r11
   11d9c:	d8002915 	stw	zero,164(sp)
   11da0:	0038bd06 	br	10098 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010098>
   11da4:	d8802917 	ldw	r2,164(sp)
   11da8:	103e071e 	bne	r2,zero,115c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70115c8>
   11dac:	dc002915 	stw	r16,164(sp)
   11db0:	003e0506 	br	115c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70115c8>
   11db4:	d9002917 	ldw	r4,164(sp)
   11db8:	20c00044 	addi	r3,r4,1
   11dbc:	003e0f06 	br	115fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70115fc>
   11dc0:	01400184 	movi	r5,6
   11dc4:	d9402915 	stw	r5,164(sp)
   11dc8:	003dff06 	br	115c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70115c8>
   11dcc:	d8802104 	addi	r2,sp,132
   11dd0:	d8800315 	stw	r2,12(sp)
   11dd4:	d8802504 	addi	r2,sp,148
   11dd8:	d8800215 	stw	r2,8(sp)
   11ddc:	d8802604 	addi	r2,sp,152
   11de0:	d8800115 	stw	r2,4(sp)
   11de4:	d8802917 	ldw	r2,164(sp)
   11de8:	d9403617 	ldw	r5,216(sp)
   11dec:	d9002c17 	ldw	r4,176(sp)
   11df0:	d8800015 	stw	r2,0(sp)
   11df4:	01c000c4 	movi	r7,3
   11df8:	980d883a 	mov	r6,r19
   11dfc:	da003d15 	stw	r8,244(sp)
   11e00:	00125340 	call	12534 <_dtoa_r>
   11e04:	d8c02917 	ldw	r3,164(sp)
   11e08:	da003d17 	ldw	r8,244(sp)
   11e0c:	1021883a 	mov	r16,r2
   11e10:	10f9883a 	add	fp,r2,r3
   11e14:	81000007 	ldb	r4,0(r16)
   11e18:	00800c04 	movi	r2,48
   11e1c:	20805e26 	beq	r4,r2,11f98 <___vfprintf_internal_r+0x2088>
   11e20:	d8c02617 	ldw	r3,152(sp)
   11e24:	e0f9883a 	add	fp,fp,r3
   11e28:	003e0a06 	br	11654 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011654>
   11e2c:	00c00b44 	movi	r3,45
   11e30:	24e0003c 	xorhi	r19,r4,32768
   11e34:	d8c02a05 	stb	r3,168(sp)
   11e38:	003de906 	br	115e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70115e0>
   11e3c:	d8c03217 	ldw	r3,200(sp)
   11e40:	00c07a0e 	bge	zero,r3,1202c <___vfprintf_internal_r+0x211c>
   11e44:	00800044 	movi	r2,1
   11e48:	d9003317 	ldw	r4,204(sp)
   11e4c:	1105883a 	add	r2,r2,r4
   11e50:	d8802e15 	stw	r2,184(sp)
   11e54:	10004e16 	blt	r2,zero,11f90 <___vfprintf_internal_r+0x2080>
   11e58:	044019c4 	movi	r17,103
   11e5c:	003e2106 	br	116e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70116e4>
   11e60:	d9002917 	ldw	r4,164(sp)
   11e64:	d8802104 	addi	r2,sp,132
   11e68:	d8800315 	stw	r2,12(sp)
   11e6c:	d9000015 	stw	r4,0(sp)
   11e70:	d8802504 	addi	r2,sp,148
   11e74:	d9403617 	ldw	r5,216(sp)
   11e78:	d9002c17 	ldw	r4,176(sp)
   11e7c:	d8800215 	stw	r2,8(sp)
   11e80:	d8802604 	addi	r2,sp,152
   11e84:	d8800115 	stw	r2,4(sp)
   11e88:	01c000c4 	movi	r7,3
   11e8c:	980d883a 	mov	r6,r19
   11e90:	da003d15 	stw	r8,244(sp)
   11e94:	00125340 	call	12534 <_dtoa_r>
   11e98:	d8c02917 	ldw	r3,164(sp)
   11e9c:	da003d17 	ldw	r8,244(sp)
   11ea0:	1021883a 	mov	r16,r2
   11ea4:	00801184 	movi	r2,70
   11ea8:	80f9883a 	add	fp,r16,r3
   11eac:	88bfd926 	beq	r17,r2,11e14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011e14>
   11eb0:	003de806 	br	11654 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011654>
   11eb4:	d9002917 	ldw	r4,164(sp)
   11eb8:	00c04d0e 	bge	zero,r3,11ff0 <___vfprintf_internal_r+0x20e0>
   11ebc:	2000441e 	bne	r4,zero,11fd0 <___vfprintf_internal_r+0x20c0>
   11ec0:	9480004c 	andi	r18,r18,1
   11ec4:	9000421e 	bne	r18,zero,11fd0 <___vfprintf_internal_r+0x20c0>
   11ec8:	1805883a 	mov	r2,r3
   11ecc:	18007016 	blt	r3,zero,12090 <___vfprintf_internal_r+0x2180>
   11ed0:	d8c03217 	ldw	r3,200(sp)
   11ed4:	d8c02e15 	stw	r3,184(sp)
   11ed8:	003e0206 	br	116e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70116e4>
   11edc:	df0022c4 	addi	fp,sp,139
   11ee0:	dc002915 	stw	r16,164(sp)
   11ee4:	4027883a 	mov	r19,r8
   11ee8:	e021883a 	mov	r16,fp
   11eec:	b009883a 	mov	r4,r22
   11ef0:	01400284 	movi	r5,10
   11ef4:	000c9f40 	call	c9f4 <__modsi3>
   11ef8:	10800c04 	addi	r2,r2,48
   11efc:	843fffc4 	addi	r16,r16,-1
   11f00:	b009883a 	mov	r4,r22
   11f04:	01400284 	movi	r5,10
   11f08:	80800005 	stb	r2,0(r16)
   11f0c:	000c9700 	call	c970 <__divsi3>
   11f10:	102d883a 	mov	r22,r2
   11f14:	00800244 	movi	r2,9
   11f18:	15bff416 	blt	r2,r22,11eec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011eec>
   11f1c:	9811883a 	mov	r8,r19
   11f20:	b0800c04 	addi	r2,r22,48
   11f24:	8027883a 	mov	r19,r16
   11f28:	997fffc4 	addi	r5,r19,-1
   11f2c:	98bfffc5 	stb	r2,-1(r19)
   11f30:	dc002917 	ldw	r16,164(sp)
   11f34:	2f006a2e 	bgeu	r5,fp,120e0 <___vfprintf_internal_r+0x21d0>
   11f38:	d9c02384 	addi	r7,sp,142
   11f3c:	3ccfc83a 	sub	r7,r7,r19
   11f40:	d9002344 	addi	r4,sp,141
   11f44:	e1cf883a 	add	r7,fp,r7
   11f48:	00000106 	br	11f50 <___vfprintf_internal_r+0x2040>
   11f4c:	28800003 	ldbu	r2,0(r5)
   11f50:	20800005 	stb	r2,0(r4)
   11f54:	21000044 	addi	r4,r4,1
   11f58:	29400044 	addi	r5,r5,1
   11f5c:	393ffb1e 	bne	r7,r4,11f4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011f4c>
   11f60:	d8802304 	addi	r2,sp,140
   11f64:	14c5c83a 	sub	r2,r2,r19
   11f68:	d8c02344 	addi	r3,sp,141
   11f6c:	1885883a 	add	r2,r3,r2
   11f70:	003f7006 	br	11d34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011d34>
   11f74:	0005883a 	mov	r2,zero
   11f78:	003f0f06 	br	11bb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011bb8>
   11f7c:	d8c03217 	ldw	r3,200(sp)
   11f80:	18c00044 	addi	r3,r3,1
   11f84:	d8c02e15 	stw	r3,184(sp)
   11f88:	1805883a 	mov	r2,r3
   11f8c:	183fb20e 	bge	r3,zero,11e58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011e58>
   11f90:	0005883a 	mov	r2,zero
   11f94:	003fb006 	br	11e58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011e58>
   11f98:	d9003617 	ldw	r4,216(sp)
   11f9c:	000d883a 	mov	r6,zero
   11fa0:	000f883a 	mov	r7,zero
   11fa4:	980b883a 	mov	r5,r19
   11fa8:	d8c03c15 	stw	r3,240(sp)
   11fac:	da003d15 	stw	r8,244(sp)
   11fb0:	000af140 	call	af14 <__eqdf2>
   11fb4:	d8c03c17 	ldw	r3,240(sp)
   11fb8:	da003d17 	ldw	r8,244(sp)
   11fbc:	103f9826 	beq	r2,zero,11e20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011e20>
   11fc0:	00800044 	movi	r2,1
   11fc4:	10c7c83a 	sub	r3,r2,r3
   11fc8:	d8c02615 	stw	r3,152(sp)
   11fcc:	003f9506 	br	11e24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011e24>
   11fd0:	d9002917 	ldw	r4,164(sp)
   11fd4:	d8c03217 	ldw	r3,200(sp)
   11fd8:	20800044 	addi	r2,r4,1
   11fdc:	1885883a 	add	r2,r3,r2
   11fe0:	d8802e15 	stw	r2,184(sp)
   11fe4:	103dbf0e 	bge	r2,zero,116e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70116e4>
   11fe8:	0005883a 	mov	r2,zero
   11fec:	003dbd06 	br	116e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70116e4>
   11ff0:	2000211e 	bne	r4,zero,12078 <___vfprintf_internal_r+0x2168>
   11ff4:	9480004c 	andi	r18,r18,1
   11ff8:	90001f1e 	bne	r18,zero,12078 <___vfprintf_internal_r+0x2168>
   11ffc:	00800044 	movi	r2,1
   12000:	d8802e15 	stw	r2,184(sp)
   12004:	003db706 	br	116e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70116e4>
   12008:	00800b44 	movi	r2,45
   1200c:	05adc83a 	sub	r22,zero,r22
   12010:	d8802305 	stb	r2,140(sp)
   12014:	003f3f06 	br	11d14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011d14>
   12018:	0005883a 	mov	r2,zero
   1201c:	003f5206 	br	11d68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011d68>
   12020:	90a4703a 	and	r18,r18,r2
   12024:	903f4e26 	beq	r18,zero,11d60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011d60>
   12028:	003f4a06 	br	11d54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011d54>
   1202c:	00800084 	movi	r2,2
   12030:	10c5c83a 	sub	r2,r2,r3
   12034:	003f8406 	br	11e48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011e48>
   12038:	d8802d17 	ldw	r2,180(sp)
   1203c:	d9002d17 	ldw	r4,180(sp)
   12040:	ac400043 	ldbu	r17,1(r21)
   12044:	10800017 	ldw	r2,0(r2)
   12048:	582b883a 	mov	r21,r11
   1204c:	d8802915 	stw	r2,164(sp)
   12050:	20800104 	addi	r2,r4,4
   12054:	d9002917 	ldw	r4,164(sp)
   12058:	d8802d15 	stw	r2,180(sp)
   1205c:	203e7a0e 	bge	r4,zero,11a48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011a48>
   12060:	8c403fcc 	andi	r17,r17,255
   12064:	00bfffc4 	movi	r2,-1
   12068:	8c40201c 	xori	r17,r17,128
   1206c:	d8802915 	stw	r2,164(sp)
   12070:	8c7fe004 	addi	r17,r17,-128
   12074:	00380706 	br	10094 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010094>
   12078:	d8c02917 	ldw	r3,164(sp)
   1207c:	18c00084 	addi	r3,r3,2
   12080:	d8c02e15 	stw	r3,184(sp)
   12084:	1805883a 	mov	r2,r3
   12088:	183d960e 	bge	r3,zero,116e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70116e4>
   1208c:	003fd606 	br	11fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011fe8>
   12090:	0005883a 	mov	r2,zero
   12094:	003f8e06 	br	11ed0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011ed0>
   12098:	9080004c 	andi	r2,r18,1
   1209c:	103f811e 	bne	r2,zero,11ea4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011ea4>
   120a0:	d8802117 	ldw	r2,132(sp)
   120a4:	1405c83a 	sub	r2,r2,r16
   120a8:	d8803315 	stw	r2,204(sp)
   120ac:	b47ef326 	beq	r22,r17,11c7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011c7c>
   120b0:	dd802617 	ldw	r22,152(sp)
   120b4:	003f1106 	br	11cfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011cfc>
   120b8:	d9c02785 	stb	r7,158(sp)
   120bc:	00390406 	br	104d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70104d0>
   120c0:	d9c02785 	stb	r7,158(sp)
   120c4:	0038d306 	br	10414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010414>
   120c8:	d9c02785 	stb	r7,158(sp)
   120cc:	003a6106 	br	10a54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010a54>
   120d0:	d9c02785 	stb	r7,158(sp)
   120d4:	003af806 	br	10cb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010cb8>
   120d8:	0005883a 	mov	r2,zero
   120dc:	003d7e06 	br	116d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70116d8>
   120e0:	d8802344 	addi	r2,sp,141
   120e4:	003f1306 	br	11d34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011d34>
   120e8:	d9c02785 	stb	r7,158(sp)
   120ec:	00392306 	br	1057c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701057c>
   120f0:	d9c02785 	stb	r7,158(sp)
   120f4:	003aa906 	br	10b9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010b9c>
   120f8:	d9c02785 	stb	r7,158(sp)
   120fc:	003a3d06 	br	109f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70109f4>
   12100:	d9c02785 	stb	r7,158(sp)
   12104:	003aca06 	br	10c30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010c30>

00012108 <__vfprintf_internal>:
   12108:	008000f4 	movhi	r2,3
   1210c:	10a9b404 	addi	r2,r2,-22832
   12110:	300f883a 	mov	r7,r6
   12114:	280d883a 	mov	r6,r5
   12118:	200b883a 	mov	r5,r4
   1211c:	11000017 	ldw	r4,0(r2)
   12120:	000ff101 	jmpi	ff10 <___vfprintf_internal_r>

00012124 <__sbprintf>:
   12124:	2880030b 	ldhu	r2,12(r5)
   12128:	2ac01917 	ldw	r11,100(r5)
   1212c:	2a80038b 	ldhu	r10,14(r5)
   12130:	2a400717 	ldw	r9,28(r5)
   12134:	2a000917 	ldw	r8,36(r5)
   12138:	defee204 	addi	sp,sp,-1144
   1213c:	00c10004 	movi	r3,1024
   12140:	dc011a15 	stw	r16,1128(sp)
   12144:	10bfff4c 	andi	r2,r2,65533
   12148:	2821883a 	mov	r16,r5
   1214c:	d8cb883a 	add	r5,sp,r3
   12150:	dc811c15 	stw	r18,1136(sp)
   12154:	dc411b15 	stw	r17,1132(sp)
   12158:	dfc11d15 	stw	ra,1140(sp)
   1215c:	2025883a 	mov	r18,r4
   12160:	d881030d 	sth	r2,1036(sp)
   12164:	dac11915 	stw	r11,1124(sp)
   12168:	da81038d 	sth	r10,1038(sp)
   1216c:	da410715 	stw	r9,1052(sp)
   12170:	da010915 	stw	r8,1060(sp)
   12174:	dec10015 	stw	sp,1024(sp)
   12178:	dec10415 	stw	sp,1040(sp)
   1217c:	d8c10215 	stw	r3,1032(sp)
   12180:	d8c10515 	stw	r3,1044(sp)
   12184:	d8010615 	stw	zero,1048(sp)
   12188:	000ff100 	call	ff10 <___vfprintf_internal_r>
   1218c:	1023883a 	mov	r17,r2
   12190:	10000416 	blt	r2,zero,121a4 <__sbprintf+0x80>
   12194:	d9410004 	addi	r5,sp,1024
   12198:	9009883a 	mov	r4,r18
   1219c:	0013dd80 	call	13dd8 <_fflush_r>
   121a0:	10000d1e 	bne	r2,zero,121d8 <__sbprintf+0xb4>
   121a4:	d881030b 	ldhu	r2,1036(sp)
   121a8:	1080100c 	andi	r2,r2,64
   121ac:	10000326 	beq	r2,zero,121bc <__sbprintf+0x98>
   121b0:	8080030b 	ldhu	r2,12(r16)
   121b4:	10801014 	ori	r2,r2,64
   121b8:	8080030d 	sth	r2,12(r16)
   121bc:	8805883a 	mov	r2,r17
   121c0:	dfc11d17 	ldw	ra,1140(sp)
   121c4:	dc811c17 	ldw	r18,1136(sp)
   121c8:	dc411b17 	ldw	r17,1132(sp)
   121cc:	dc011a17 	ldw	r16,1128(sp)
   121d0:	dec11e04 	addi	sp,sp,1144
   121d4:	f800283a 	ret
   121d8:	047fffc4 	movi	r17,-1
   121dc:	003ff106 	br	121a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70121a4>

000121e0 <__swsetup_r>:
   121e0:	008000f4 	movhi	r2,3
   121e4:	defffd04 	addi	sp,sp,-12
   121e8:	10a9b404 	addi	r2,r2,-22832
   121ec:	dc400115 	stw	r17,4(sp)
   121f0:	2023883a 	mov	r17,r4
   121f4:	11000017 	ldw	r4,0(r2)
   121f8:	dc000015 	stw	r16,0(sp)
   121fc:	dfc00215 	stw	ra,8(sp)
   12200:	2821883a 	mov	r16,r5
   12204:	20000226 	beq	r4,zero,12210 <__swsetup_r+0x30>
   12208:	20800e17 	ldw	r2,56(r4)
   1220c:	10003126 	beq	r2,zero,122d4 <__swsetup_r+0xf4>
   12210:	8080030b 	ldhu	r2,12(r16)
   12214:	10c0020c 	andi	r3,r2,8
   12218:	1009883a 	mov	r4,r2
   1221c:	18000f26 	beq	r3,zero,1225c <__swsetup_r+0x7c>
   12220:	80c00417 	ldw	r3,16(r16)
   12224:	18001526 	beq	r3,zero,1227c <__swsetup_r+0x9c>
   12228:	1100004c 	andi	r4,r2,1
   1222c:	20001c1e 	bne	r4,zero,122a0 <__swsetup_r+0xc0>
   12230:	1080008c 	andi	r2,r2,2
   12234:	1000291e 	bne	r2,zero,122dc <__swsetup_r+0xfc>
   12238:	80800517 	ldw	r2,20(r16)
   1223c:	80800215 	stw	r2,8(r16)
   12240:	18001c26 	beq	r3,zero,122b4 <__swsetup_r+0xd4>
   12244:	0005883a 	mov	r2,zero
   12248:	dfc00217 	ldw	ra,8(sp)
   1224c:	dc400117 	ldw	r17,4(sp)
   12250:	dc000017 	ldw	r16,0(sp)
   12254:	dec00304 	addi	sp,sp,12
   12258:	f800283a 	ret
   1225c:	2080040c 	andi	r2,r4,16
   12260:	10002e26 	beq	r2,zero,1231c <__swsetup_r+0x13c>
   12264:	2080010c 	andi	r2,r4,4
   12268:	10001e1e 	bne	r2,zero,122e4 <__swsetup_r+0x104>
   1226c:	80c00417 	ldw	r3,16(r16)
   12270:	20800214 	ori	r2,r4,8
   12274:	8080030d 	sth	r2,12(r16)
   12278:	183feb1e 	bne	r3,zero,12228 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012228>
   1227c:	1100a00c 	andi	r4,r2,640
   12280:	01408004 	movi	r5,512
   12284:	217fe826 	beq	r4,r5,12228 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012228>
   12288:	800b883a 	mov	r5,r16
   1228c:	8809883a 	mov	r4,r17
   12290:	0014d580 	call	14d58 <__smakebuf_r>
   12294:	8080030b 	ldhu	r2,12(r16)
   12298:	80c00417 	ldw	r3,16(r16)
   1229c:	003fe206 	br	12228 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012228>
   122a0:	80800517 	ldw	r2,20(r16)
   122a4:	80000215 	stw	zero,8(r16)
   122a8:	0085c83a 	sub	r2,zero,r2
   122ac:	80800615 	stw	r2,24(r16)
   122b0:	183fe41e 	bne	r3,zero,12244 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012244>
   122b4:	80c0030b 	ldhu	r3,12(r16)
   122b8:	0005883a 	mov	r2,zero
   122bc:	1900200c 	andi	r4,r3,128
   122c0:	203fe126 	beq	r4,zero,12248 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012248>
   122c4:	18c01014 	ori	r3,r3,64
   122c8:	80c0030d 	sth	r3,12(r16)
   122cc:	00bfffc4 	movi	r2,-1
   122d0:	003fdd06 	br	12248 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012248>
   122d4:	00141b40 	call	141b4 <__sinit>
   122d8:	003fcd06 	br	12210 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012210>
   122dc:	0005883a 	mov	r2,zero
   122e0:	003fd606 	br	1223c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701223c>
   122e4:	81400c17 	ldw	r5,48(r16)
   122e8:	28000626 	beq	r5,zero,12304 <__swsetup_r+0x124>
   122ec:	80801004 	addi	r2,r16,64
   122f0:	28800326 	beq	r5,r2,12300 <__swsetup_r+0x120>
   122f4:	8809883a 	mov	r4,r17
   122f8:	00143280 	call	14328 <_free_r>
   122fc:	8100030b 	ldhu	r4,12(r16)
   12300:	80000c15 	stw	zero,48(r16)
   12304:	80c00417 	ldw	r3,16(r16)
   12308:	00bff6c4 	movi	r2,-37
   1230c:	1108703a 	and	r4,r2,r4
   12310:	80000115 	stw	zero,4(r16)
   12314:	80c00015 	stw	r3,0(r16)
   12318:	003fd506 	br	12270 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012270>
   1231c:	00800244 	movi	r2,9
   12320:	88800015 	stw	r2,0(r17)
   12324:	20801014 	ori	r2,r4,64
   12328:	8080030d 	sth	r2,12(r16)
   1232c:	00bfffc4 	movi	r2,-1
   12330:	003fc506 	br	12248 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012248>

00012334 <quorem>:
   12334:	defff704 	addi	sp,sp,-36
   12338:	dc800215 	stw	r18,8(sp)
   1233c:	20800417 	ldw	r2,16(r4)
   12340:	2c800417 	ldw	r18,16(r5)
   12344:	dfc00815 	stw	ra,32(sp)
   12348:	ddc00715 	stw	r23,28(sp)
   1234c:	dd800615 	stw	r22,24(sp)
   12350:	dd400515 	stw	r21,20(sp)
   12354:	dd000415 	stw	r20,16(sp)
   12358:	dcc00315 	stw	r19,12(sp)
   1235c:	dc400115 	stw	r17,4(sp)
   12360:	dc000015 	stw	r16,0(sp)
   12364:	14807116 	blt	r2,r18,1252c <quorem+0x1f8>
   12368:	94bfffc4 	addi	r18,r18,-1
   1236c:	94ad883a 	add	r22,r18,r18
   12370:	b5ad883a 	add	r22,r22,r22
   12374:	2c400504 	addi	r17,r5,20
   12378:	8da9883a 	add	r20,r17,r22
   1237c:	25400504 	addi	r21,r4,20
   12380:	282f883a 	mov	r23,r5
   12384:	adad883a 	add	r22,r21,r22
   12388:	a1400017 	ldw	r5,0(r20)
   1238c:	2021883a 	mov	r16,r4
   12390:	b1000017 	ldw	r4,0(r22)
   12394:	29400044 	addi	r5,r5,1
   12398:	000ca680 	call	ca68 <__udivsi3>
   1239c:	1027883a 	mov	r19,r2
   123a0:	10002c26 	beq	r2,zero,12454 <quorem+0x120>
   123a4:	a813883a 	mov	r9,r21
   123a8:	880b883a 	mov	r5,r17
   123ac:	0009883a 	mov	r4,zero
   123b0:	000d883a 	mov	r6,zero
   123b4:	2a000017 	ldw	r8,0(r5)
   123b8:	49c00017 	ldw	r7,0(r9)
   123bc:	29400104 	addi	r5,r5,4
   123c0:	40bfffcc 	andi	r2,r8,65535
   123c4:	14c5383a 	mul	r2,r2,r19
   123c8:	4010d43a 	srli	r8,r8,16
   123cc:	38ffffcc 	andi	r3,r7,65535
   123d0:	1105883a 	add	r2,r2,r4
   123d4:	1008d43a 	srli	r4,r2,16
   123d8:	44d1383a 	mul	r8,r8,r19
   123dc:	198d883a 	add	r6,r3,r6
   123e0:	10ffffcc 	andi	r3,r2,65535
   123e4:	30c7c83a 	sub	r3,r6,r3
   123e8:	380ed43a 	srli	r7,r7,16
   123ec:	4105883a 	add	r2,r8,r4
   123f0:	180dd43a 	srai	r6,r3,16
   123f4:	113fffcc 	andi	r4,r2,65535
   123f8:	390fc83a 	sub	r7,r7,r4
   123fc:	398d883a 	add	r6,r7,r6
   12400:	300e943a 	slli	r7,r6,16
   12404:	18ffffcc 	andi	r3,r3,65535
   12408:	1008d43a 	srli	r4,r2,16
   1240c:	38ceb03a 	or	r7,r7,r3
   12410:	49c00015 	stw	r7,0(r9)
   12414:	300dd43a 	srai	r6,r6,16
   12418:	4a400104 	addi	r9,r9,4
   1241c:	a17fe52e 	bgeu	r20,r5,123b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123b4>
   12420:	b0800017 	ldw	r2,0(r22)
   12424:	10000b1e 	bne	r2,zero,12454 <quorem+0x120>
   12428:	b0bfff04 	addi	r2,r22,-4
   1242c:	a880082e 	bgeu	r21,r2,12450 <quorem+0x11c>
   12430:	b0ffff17 	ldw	r3,-4(r22)
   12434:	18000326 	beq	r3,zero,12444 <quorem+0x110>
   12438:	00000506 	br	12450 <quorem+0x11c>
   1243c:	10c00017 	ldw	r3,0(r2)
   12440:	1800031e 	bne	r3,zero,12450 <quorem+0x11c>
   12444:	10bfff04 	addi	r2,r2,-4
   12448:	94bfffc4 	addi	r18,r18,-1
   1244c:	a8bffb36 	bltu	r21,r2,1243c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701243c>
   12450:	84800415 	stw	r18,16(r16)
   12454:	b80b883a 	mov	r5,r23
   12458:	8009883a 	mov	r4,r16
   1245c:	0015a1c0 	call	15a1c <__mcmp>
   12460:	10002616 	blt	r2,zero,124fc <quorem+0x1c8>
   12464:	9cc00044 	addi	r19,r19,1
   12468:	a805883a 	mov	r2,r21
   1246c:	000b883a 	mov	r5,zero
   12470:	11000017 	ldw	r4,0(r2)
   12474:	89800017 	ldw	r6,0(r17)
   12478:	10800104 	addi	r2,r2,4
   1247c:	20ffffcc 	andi	r3,r4,65535
   12480:	194b883a 	add	r5,r3,r5
   12484:	30ffffcc 	andi	r3,r6,65535
   12488:	28c7c83a 	sub	r3,r5,r3
   1248c:	300cd43a 	srli	r6,r6,16
   12490:	2008d43a 	srli	r4,r4,16
   12494:	180bd43a 	srai	r5,r3,16
   12498:	18ffffcc 	andi	r3,r3,65535
   1249c:	2189c83a 	sub	r4,r4,r6
   124a0:	2149883a 	add	r4,r4,r5
   124a4:	200c943a 	slli	r6,r4,16
   124a8:	8c400104 	addi	r17,r17,4
   124ac:	200bd43a 	srai	r5,r4,16
   124b0:	30c6b03a 	or	r3,r6,r3
   124b4:	10ffff15 	stw	r3,-4(r2)
   124b8:	a47fed2e 	bgeu	r20,r17,12470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012470>
   124bc:	9485883a 	add	r2,r18,r18
   124c0:	1085883a 	add	r2,r2,r2
   124c4:	a887883a 	add	r3,r21,r2
   124c8:	18800017 	ldw	r2,0(r3)
   124cc:	10000b1e 	bne	r2,zero,124fc <quorem+0x1c8>
   124d0:	18bfff04 	addi	r2,r3,-4
   124d4:	a880082e 	bgeu	r21,r2,124f8 <quorem+0x1c4>
   124d8:	18ffff17 	ldw	r3,-4(r3)
   124dc:	18000326 	beq	r3,zero,124ec <quorem+0x1b8>
   124e0:	00000506 	br	124f8 <quorem+0x1c4>
   124e4:	10c00017 	ldw	r3,0(r2)
   124e8:	1800031e 	bne	r3,zero,124f8 <quorem+0x1c4>
   124ec:	10bfff04 	addi	r2,r2,-4
   124f0:	94bfffc4 	addi	r18,r18,-1
   124f4:	a8bffb36 	bltu	r21,r2,124e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70124e4>
   124f8:	84800415 	stw	r18,16(r16)
   124fc:	9805883a 	mov	r2,r19
   12500:	dfc00817 	ldw	ra,32(sp)
   12504:	ddc00717 	ldw	r23,28(sp)
   12508:	dd800617 	ldw	r22,24(sp)
   1250c:	dd400517 	ldw	r21,20(sp)
   12510:	dd000417 	ldw	r20,16(sp)
   12514:	dcc00317 	ldw	r19,12(sp)
   12518:	dc800217 	ldw	r18,8(sp)
   1251c:	dc400117 	ldw	r17,4(sp)
   12520:	dc000017 	ldw	r16,0(sp)
   12524:	dec00904 	addi	sp,sp,36
   12528:	f800283a 	ret
   1252c:	0005883a 	mov	r2,zero
   12530:	003ff306 	br	12500 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012500>

00012534 <_dtoa_r>:
   12534:	20801017 	ldw	r2,64(r4)
   12538:	deffde04 	addi	sp,sp,-136
   1253c:	df002015 	stw	fp,128(sp)
   12540:	dcc01b15 	stw	r19,108(sp)
   12544:	dc801a15 	stw	r18,104(sp)
   12548:	dc401915 	stw	r17,100(sp)
   1254c:	dc001815 	stw	r16,96(sp)
   12550:	dfc02115 	stw	ra,132(sp)
   12554:	ddc01f15 	stw	r23,124(sp)
   12558:	dd801e15 	stw	r22,120(sp)
   1255c:	dd401d15 	stw	r21,116(sp)
   12560:	dd001c15 	stw	r20,112(sp)
   12564:	d9c00315 	stw	r7,12(sp)
   12568:	2039883a 	mov	fp,r4
   1256c:	3023883a 	mov	r17,r6
   12570:	2825883a 	mov	r18,r5
   12574:	dc002417 	ldw	r16,144(sp)
   12578:	3027883a 	mov	r19,r6
   1257c:	10000826 	beq	r2,zero,125a0 <_dtoa_r+0x6c>
   12580:	21801117 	ldw	r6,68(r4)
   12584:	00c00044 	movi	r3,1
   12588:	100b883a 	mov	r5,r2
   1258c:	1986983a 	sll	r3,r3,r6
   12590:	11800115 	stw	r6,4(r2)
   12594:	10c00215 	stw	r3,8(r2)
   12598:	00151fc0 	call	151fc <_Bfree>
   1259c:	e0001015 	stw	zero,64(fp)
   125a0:	88002e16 	blt	r17,zero,1265c <_dtoa_r+0x128>
   125a4:	80000015 	stw	zero,0(r16)
   125a8:	889ffc2c 	andhi	r2,r17,32752
   125ac:	00dffc34 	movhi	r3,32752
   125b0:	10c01c26 	beq	r2,r3,12624 <_dtoa_r+0xf0>
   125b4:	000d883a 	mov	r6,zero
   125b8:	000f883a 	mov	r7,zero
   125bc:	9009883a 	mov	r4,r18
   125c0:	980b883a 	mov	r5,r19
   125c4:	000af140 	call	af14 <__eqdf2>
   125c8:	10002b1e 	bne	r2,zero,12678 <_dtoa_r+0x144>
   125cc:	d9c02317 	ldw	r7,140(sp)
   125d0:	00800044 	movi	r2,1
   125d4:	38800015 	stw	r2,0(r7)
   125d8:	d8802517 	ldw	r2,148(sp)
   125dc:	10019e26 	beq	r2,zero,12c58 <_dtoa_r+0x724>
   125e0:	d8c02517 	ldw	r3,148(sp)
   125e4:	008000f4 	movhi	r2,3
   125e8:	10a0c244 	addi	r2,r2,-31991
   125ec:	18800015 	stw	r2,0(r3)
   125f0:	10bfffc4 	addi	r2,r2,-1
   125f4:	dfc02117 	ldw	ra,132(sp)
   125f8:	df002017 	ldw	fp,128(sp)
   125fc:	ddc01f17 	ldw	r23,124(sp)
   12600:	dd801e17 	ldw	r22,120(sp)
   12604:	dd401d17 	ldw	r21,116(sp)
   12608:	dd001c17 	ldw	r20,112(sp)
   1260c:	dcc01b17 	ldw	r19,108(sp)
   12610:	dc801a17 	ldw	r18,104(sp)
   12614:	dc401917 	ldw	r17,100(sp)
   12618:	dc001817 	ldw	r16,96(sp)
   1261c:	dec02204 	addi	sp,sp,136
   12620:	f800283a 	ret
   12624:	d8c02317 	ldw	r3,140(sp)
   12628:	0089c3c4 	movi	r2,9999
   1262c:	18800015 	stw	r2,0(r3)
   12630:	90017726 	beq	r18,zero,12c10 <_dtoa_r+0x6dc>
   12634:	008000f4 	movhi	r2,3
   12638:	10a0d604 	addi	r2,r2,-31912
   1263c:	d9002517 	ldw	r4,148(sp)
   12640:	203fec26 	beq	r4,zero,125f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70125f4>
   12644:	10c000c7 	ldb	r3,3(r2)
   12648:	1801781e 	bne	r3,zero,12c2c <_dtoa_r+0x6f8>
   1264c:	10c000c4 	addi	r3,r2,3
   12650:	d9802517 	ldw	r6,148(sp)
   12654:	30c00015 	stw	r3,0(r6)
   12658:	003fe606 	br	125f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70125f4>
   1265c:	04e00034 	movhi	r19,32768
   12660:	9cffffc4 	addi	r19,r19,-1
   12664:	00800044 	movi	r2,1
   12668:	8ce6703a 	and	r19,r17,r19
   1266c:	80800015 	stw	r2,0(r16)
   12670:	9823883a 	mov	r17,r19
   12674:	003fcc06 	br	125a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70125a8>
   12678:	d8800204 	addi	r2,sp,8
   1267c:	d8800015 	stw	r2,0(sp)
   12680:	d9c00104 	addi	r7,sp,4
   12684:	900b883a 	mov	r5,r18
   12688:	980d883a 	mov	r6,r19
   1268c:	e009883a 	mov	r4,fp
   12690:	8820d53a 	srli	r16,r17,20
   12694:	0015de80 	call	15de8 <__d2b>
   12698:	d8800915 	stw	r2,36(sp)
   1269c:	8001651e 	bne	r16,zero,12c34 <_dtoa_r+0x700>
   126a0:	dd800217 	ldw	r22,8(sp)
   126a4:	dc000117 	ldw	r16,4(sp)
   126a8:	00800804 	movi	r2,32
   126ac:	b421883a 	add	r16,r22,r16
   126b0:	80c10c84 	addi	r3,r16,1074
   126b4:	10c2d10e 	bge	r2,r3,131fc <_dtoa_r+0xcc8>
   126b8:	00801004 	movi	r2,64
   126bc:	81010484 	addi	r4,r16,1042
   126c0:	10c7c83a 	sub	r3,r2,r3
   126c4:	9108d83a 	srl	r4,r18,r4
   126c8:	88e2983a 	sll	r17,r17,r3
   126cc:	2448b03a 	or	r4,r4,r17
   126d0:	001a6280 	call	1a628 <__floatunsidf>
   126d4:	017f8434 	movhi	r5,65040
   126d8:	01800044 	movi	r6,1
   126dc:	1009883a 	mov	r4,r2
   126e0:	194b883a 	add	r5,r3,r5
   126e4:	843fffc4 	addi	r16,r16,-1
   126e8:	d9801115 	stw	r6,68(sp)
   126ec:	000d883a 	mov	r6,zero
   126f0:	01cffe34 	movhi	r7,16376
   126f4:	000b8840 	call	b884 <__subdf3>
   126f8:	0198dbf4 	movhi	r6,25455
   126fc:	01cff4f4 	movhi	r7,16339
   12700:	3190d844 	addi	r6,r6,17249
   12704:	39e1e9c4 	addi	r7,r7,-30809
   12708:	1009883a 	mov	r4,r2
   1270c:	180b883a 	mov	r5,r3
   12710:	000b16c0 	call	b16c <__muldf3>
   12714:	01a2d874 	movhi	r6,35681
   12718:	01cff1f4 	movhi	r7,16327
   1271c:	31b22cc4 	addi	r6,r6,-14157
   12720:	39e28a04 	addi	r7,r7,-30168
   12724:	180b883a 	mov	r5,r3
   12728:	1009883a 	mov	r4,r2
   1272c:	0009d800 	call	9d80 <__adddf3>
   12730:	8009883a 	mov	r4,r16
   12734:	1029883a 	mov	r20,r2
   12738:	1823883a 	mov	r17,r3
   1273c:	000c2000 	call	c200 <__floatsidf>
   12740:	019427f4 	movhi	r6,20639
   12744:	01cff4f4 	movhi	r7,16339
   12748:	319e7ec4 	addi	r6,r6,31227
   1274c:	39d104c4 	addi	r7,r7,17427
   12750:	1009883a 	mov	r4,r2
   12754:	180b883a 	mov	r5,r3
   12758:	000b16c0 	call	b16c <__muldf3>
   1275c:	100d883a 	mov	r6,r2
   12760:	180f883a 	mov	r7,r3
   12764:	a009883a 	mov	r4,r20
   12768:	880b883a 	mov	r5,r17
   1276c:	0009d800 	call	9d80 <__adddf3>
   12770:	1009883a 	mov	r4,r2
   12774:	180b883a 	mov	r5,r3
   12778:	1029883a 	mov	r20,r2
   1277c:	1823883a 	mov	r17,r3
   12780:	000c1800 	call	c180 <__fixdfsi>
   12784:	000d883a 	mov	r6,zero
   12788:	000f883a 	mov	r7,zero
   1278c:	a009883a 	mov	r4,r20
   12790:	880b883a 	mov	r5,r17
   12794:	d8800515 	stw	r2,20(sp)
   12798:	000b0780 	call	b078 <__ledf2>
   1279c:	10028716 	blt	r2,zero,131bc <_dtoa_r+0xc88>
   127a0:	d8c00517 	ldw	r3,20(sp)
   127a4:	00800584 	movi	r2,22
   127a8:	10c27536 	bltu	r2,r3,13180 <_dtoa_r+0xc4c>
   127ac:	180490fa 	slli	r2,r3,3
   127b0:	00c000f4 	movhi	r3,3
   127b4:	18e0f104 	addi	r3,r3,-31804
   127b8:	1885883a 	add	r2,r3,r2
   127bc:	11000017 	ldw	r4,0(r2)
   127c0:	11400117 	ldw	r5,4(r2)
   127c4:	900d883a 	mov	r6,r18
   127c8:	980f883a 	mov	r7,r19
   127cc:	000af9c0 	call	af9c <__gedf2>
   127d0:	00828d0e 	bge	zero,r2,13208 <_dtoa_r+0xcd4>
   127d4:	d9000517 	ldw	r4,20(sp)
   127d8:	d8000e15 	stw	zero,56(sp)
   127dc:	213fffc4 	addi	r4,r4,-1
   127e0:	d9000515 	stw	r4,20(sp)
   127e4:	b42dc83a 	sub	r22,r22,r16
   127e8:	b5bfffc4 	addi	r22,r22,-1
   127ec:	b0026f16 	blt	r22,zero,131ac <_dtoa_r+0xc78>
   127f0:	d8000815 	stw	zero,32(sp)
   127f4:	d9c00517 	ldw	r7,20(sp)
   127f8:	38026416 	blt	r7,zero,1318c <_dtoa_r+0xc58>
   127fc:	b1ed883a 	add	r22,r22,r7
   12800:	d9c00d15 	stw	r7,52(sp)
   12804:	d8000a15 	stw	zero,40(sp)
   12808:	d9800317 	ldw	r6,12(sp)
   1280c:	00800244 	movi	r2,9
   12810:	11811436 	bltu	r2,r6,12c64 <_dtoa_r+0x730>
   12814:	00800144 	movi	r2,5
   12818:	1184e10e 	bge	r2,r6,13ba0 <_dtoa_r+0x166c>
   1281c:	31bfff04 	addi	r6,r6,-4
   12820:	d9800315 	stw	r6,12(sp)
   12824:	0023883a 	mov	r17,zero
   12828:	d9800317 	ldw	r6,12(sp)
   1282c:	008000c4 	movi	r2,3
   12830:	30836726 	beq	r6,r2,135d0 <_dtoa_r+0x109c>
   12834:	1183410e 	bge	r2,r6,1353c <_dtoa_r+0x1008>
   12838:	d9c00317 	ldw	r7,12(sp)
   1283c:	00800104 	movi	r2,4
   12840:	38827c26 	beq	r7,r2,13234 <_dtoa_r+0xd00>
   12844:	00800144 	movi	r2,5
   12848:	3884c41e 	bne	r7,r2,13b5c <_dtoa_r+0x1628>
   1284c:	00800044 	movi	r2,1
   12850:	d8800b15 	stw	r2,44(sp)
   12854:	d8c00517 	ldw	r3,20(sp)
   12858:	d9002217 	ldw	r4,136(sp)
   1285c:	1907883a 	add	r3,r3,r4
   12860:	19800044 	addi	r6,r3,1
   12864:	d8c00c15 	stw	r3,48(sp)
   12868:	d9800615 	stw	r6,24(sp)
   1286c:	0183a40e 	bge	zero,r6,13700 <_dtoa_r+0x11cc>
   12870:	d9800617 	ldw	r6,24(sp)
   12874:	3021883a 	mov	r16,r6
   12878:	e0001115 	stw	zero,68(fp)
   1287c:	008005c4 	movi	r2,23
   12880:	1184c92e 	bgeu	r2,r6,13ba8 <_dtoa_r+0x1674>
   12884:	00c00044 	movi	r3,1
   12888:	00800104 	movi	r2,4
   1288c:	1085883a 	add	r2,r2,r2
   12890:	11000504 	addi	r4,r2,20
   12894:	180b883a 	mov	r5,r3
   12898:	18c00044 	addi	r3,r3,1
   1289c:	313ffb2e 	bgeu	r6,r4,1288c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701288c>
   128a0:	e1401115 	stw	r5,68(fp)
   128a4:	e009883a 	mov	r4,fp
   128a8:	00151540 	call	15154 <_Balloc>
   128ac:	d8800715 	stw	r2,28(sp)
   128b0:	e0801015 	stw	r2,64(fp)
   128b4:	00800384 	movi	r2,14
   128b8:	1400f736 	bltu	r2,r16,12c98 <_dtoa_r+0x764>
   128bc:	8800f626 	beq	r17,zero,12c98 <_dtoa_r+0x764>
   128c0:	d9c00517 	ldw	r7,20(sp)
   128c4:	01c39a0e 	bge	zero,r7,13730 <_dtoa_r+0x11fc>
   128c8:	388003cc 	andi	r2,r7,15
   128cc:	100490fa 	slli	r2,r2,3
   128d0:	382bd13a 	srai	r21,r7,4
   128d4:	00c000f4 	movhi	r3,3
   128d8:	18e0f104 	addi	r3,r3,-31804
   128dc:	1885883a 	add	r2,r3,r2
   128e0:	a8c0040c 	andi	r3,r21,16
   128e4:	12400017 	ldw	r9,0(r2)
   128e8:	12000117 	ldw	r8,4(r2)
   128ec:	18037926 	beq	r3,zero,136d4 <_dtoa_r+0x11a0>
   128f0:	008000f4 	movhi	r2,3
   128f4:	10a0e704 	addi	r2,r2,-31844
   128f8:	11800817 	ldw	r6,32(r2)
   128fc:	11c00917 	ldw	r7,36(r2)
   12900:	9009883a 	mov	r4,r18
   12904:	980b883a 	mov	r5,r19
   12908:	da001715 	stw	r8,92(sp)
   1290c:	da401615 	stw	r9,88(sp)
   12910:	000a62c0 	call	a62c <__divdf3>
   12914:	da001717 	ldw	r8,92(sp)
   12918:	da401617 	ldw	r9,88(sp)
   1291c:	ad4003cc 	andi	r21,r21,15
   12920:	040000c4 	movi	r16,3
   12924:	1023883a 	mov	r17,r2
   12928:	1829883a 	mov	r20,r3
   1292c:	a8001126 	beq	r21,zero,12974 <_dtoa_r+0x440>
   12930:	05c000f4 	movhi	r23,3
   12934:	bde0e704 	addi	r23,r23,-31844
   12938:	4805883a 	mov	r2,r9
   1293c:	4007883a 	mov	r3,r8
   12940:	a980004c 	andi	r6,r21,1
   12944:	1009883a 	mov	r4,r2
   12948:	a82bd07a 	srai	r21,r21,1
   1294c:	180b883a 	mov	r5,r3
   12950:	30000426 	beq	r6,zero,12964 <_dtoa_r+0x430>
   12954:	b9800017 	ldw	r6,0(r23)
   12958:	b9c00117 	ldw	r7,4(r23)
   1295c:	84000044 	addi	r16,r16,1
   12960:	000b16c0 	call	b16c <__muldf3>
   12964:	bdc00204 	addi	r23,r23,8
   12968:	a83ff51e 	bne	r21,zero,12940 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012940>
   1296c:	1013883a 	mov	r9,r2
   12970:	1811883a 	mov	r8,r3
   12974:	480d883a 	mov	r6,r9
   12978:	400f883a 	mov	r7,r8
   1297c:	8809883a 	mov	r4,r17
   12980:	a00b883a 	mov	r5,r20
   12984:	000a62c0 	call	a62c <__divdf3>
   12988:	d8800f15 	stw	r2,60(sp)
   1298c:	d8c01015 	stw	r3,64(sp)
   12990:	d8c00e17 	ldw	r3,56(sp)
   12994:	18000626 	beq	r3,zero,129b0 <_dtoa_r+0x47c>
   12998:	d9000f17 	ldw	r4,60(sp)
   1299c:	d9401017 	ldw	r5,64(sp)
   129a0:	000d883a 	mov	r6,zero
   129a4:	01cffc34 	movhi	r7,16368
   129a8:	000b0780 	call	b078 <__ledf2>
   129ac:	10040b16 	blt	r2,zero,139dc <_dtoa_r+0x14a8>
   129b0:	8009883a 	mov	r4,r16
   129b4:	000c2000 	call	c200 <__floatsidf>
   129b8:	d9800f17 	ldw	r6,60(sp)
   129bc:	d9c01017 	ldw	r7,64(sp)
   129c0:	1009883a 	mov	r4,r2
   129c4:	180b883a 	mov	r5,r3
   129c8:	000b16c0 	call	b16c <__muldf3>
   129cc:	000d883a 	mov	r6,zero
   129d0:	01d00734 	movhi	r7,16412
   129d4:	1009883a 	mov	r4,r2
   129d8:	180b883a 	mov	r5,r3
   129dc:	0009d800 	call	9d80 <__adddf3>
   129e0:	1021883a 	mov	r16,r2
   129e4:	d8800617 	ldw	r2,24(sp)
   129e8:	047f3034 	movhi	r17,64704
   129ec:	1c63883a 	add	r17,r3,r17
   129f0:	10031826 	beq	r2,zero,13654 <_dtoa_r+0x1120>
   129f4:	d8c00517 	ldw	r3,20(sp)
   129f8:	db000617 	ldw	r12,24(sp)
   129fc:	d8c01315 	stw	r3,76(sp)
   12a00:	d9000b17 	ldw	r4,44(sp)
   12a04:	20038f26 	beq	r4,zero,13844 <_dtoa_r+0x1310>
   12a08:	60bfffc4 	addi	r2,r12,-1
   12a0c:	100490fa 	slli	r2,r2,3
   12a10:	00c000f4 	movhi	r3,3
   12a14:	18e0f104 	addi	r3,r3,-31804
   12a18:	1885883a 	add	r2,r3,r2
   12a1c:	11800017 	ldw	r6,0(r2)
   12a20:	11c00117 	ldw	r7,4(r2)
   12a24:	d8800717 	ldw	r2,28(sp)
   12a28:	0009883a 	mov	r4,zero
   12a2c:	014ff834 	movhi	r5,16352
   12a30:	db001615 	stw	r12,88(sp)
   12a34:	15c00044 	addi	r23,r2,1
   12a38:	000a62c0 	call	a62c <__divdf3>
   12a3c:	800d883a 	mov	r6,r16
   12a40:	880f883a 	mov	r7,r17
   12a44:	1009883a 	mov	r4,r2
   12a48:	180b883a 	mov	r5,r3
   12a4c:	000b8840 	call	b884 <__subdf3>
   12a50:	d9401017 	ldw	r5,64(sp)
   12a54:	d9000f17 	ldw	r4,60(sp)
   12a58:	102b883a 	mov	r21,r2
   12a5c:	d8c01215 	stw	r3,72(sp)
   12a60:	000c1800 	call	c180 <__fixdfsi>
   12a64:	1009883a 	mov	r4,r2
   12a68:	1029883a 	mov	r20,r2
   12a6c:	000c2000 	call	c200 <__floatsidf>
   12a70:	d9000f17 	ldw	r4,60(sp)
   12a74:	d9401017 	ldw	r5,64(sp)
   12a78:	100d883a 	mov	r6,r2
   12a7c:	180f883a 	mov	r7,r3
   12a80:	000b8840 	call	b884 <__subdf3>
   12a84:	1823883a 	mov	r17,r3
   12a88:	d8c00717 	ldw	r3,28(sp)
   12a8c:	d9401217 	ldw	r5,72(sp)
   12a90:	a2000c04 	addi	r8,r20,48
   12a94:	1021883a 	mov	r16,r2
   12a98:	1a000005 	stb	r8,0(r3)
   12a9c:	800d883a 	mov	r6,r16
   12aa0:	880f883a 	mov	r7,r17
   12aa4:	a809883a 	mov	r4,r21
   12aa8:	4029883a 	mov	r20,r8
   12aac:	000af9c0 	call	af9c <__gedf2>
   12ab0:	00841d16 	blt	zero,r2,13b28 <_dtoa_r+0x15f4>
   12ab4:	800d883a 	mov	r6,r16
   12ab8:	880f883a 	mov	r7,r17
   12abc:	0009883a 	mov	r4,zero
   12ac0:	014ffc34 	movhi	r5,16368
   12ac4:	000b8840 	call	b884 <__subdf3>
   12ac8:	d9401217 	ldw	r5,72(sp)
   12acc:	100d883a 	mov	r6,r2
   12ad0:	180f883a 	mov	r7,r3
   12ad4:	a809883a 	mov	r4,r21
   12ad8:	000af9c0 	call	af9c <__gedf2>
   12adc:	db001617 	ldw	r12,88(sp)
   12ae0:	00840e16 	blt	zero,r2,13b1c <_dtoa_r+0x15e8>
   12ae4:	00800044 	movi	r2,1
   12ae8:	13006b0e 	bge	r2,r12,12c98 <_dtoa_r+0x764>
   12aec:	d9000717 	ldw	r4,28(sp)
   12af0:	dd800f15 	stw	r22,60(sp)
   12af4:	dcc01015 	stw	r19,64(sp)
   12af8:	2319883a 	add	r12,r4,r12
   12afc:	dcc01217 	ldw	r19,72(sp)
   12b00:	602d883a 	mov	r22,r12
   12b04:	dc801215 	stw	r18,72(sp)
   12b08:	b825883a 	mov	r18,r23
   12b0c:	00000906 	br	12b34 <_dtoa_r+0x600>
   12b10:	000b8840 	call	b884 <__subdf3>
   12b14:	a80d883a 	mov	r6,r21
   12b18:	980f883a 	mov	r7,r19
   12b1c:	1009883a 	mov	r4,r2
   12b20:	180b883a 	mov	r5,r3
   12b24:	000b0780 	call	b078 <__ledf2>
   12b28:	1003e816 	blt	r2,zero,13acc <_dtoa_r+0x1598>
   12b2c:	b825883a 	mov	r18,r23
   12b30:	bd83e926 	beq	r23,r22,13ad8 <_dtoa_r+0x15a4>
   12b34:	a809883a 	mov	r4,r21
   12b38:	980b883a 	mov	r5,r19
   12b3c:	000d883a 	mov	r6,zero
   12b40:	01d00934 	movhi	r7,16420
   12b44:	000b16c0 	call	b16c <__muldf3>
   12b48:	000d883a 	mov	r6,zero
   12b4c:	01d00934 	movhi	r7,16420
   12b50:	8009883a 	mov	r4,r16
   12b54:	880b883a 	mov	r5,r17
   12b58:	102b883a 	mov	r21,r2
   12b5c:	1827883a 	mov	r19,r3
   12b60:	000b16c0 	call	b16c <__muldf3>
   12b64:	180b883a 	mov	r5,r3
   12b68:	1009883a 	mov	r4,r2
   12b6c:	1821883a 	mov	r16,r3
   12b70:	1023883a 	mov	r17,r2
   12b74:	000c1800 	call	c180 <__fixdfsi>
   12b78:	1009883a 	mov	r4,r2
   12b7c:	1029883a 	mov	r20,r2
   12b80:	000c2000 	call	c200 <__floatsidf>
   12b84:	8809883a 	mov	r4,r17
   12b88:	800b883a 	mov	r5,r16
   12b8c:	100d883a 	mov	r6,r2
   12b90:	180f883a 	mov	r7,r3
   12b94:	000b8840 	call	b884 <__subdf3>
   12b98:	a5000c04 	addi	r20,r20,48
   12b9c:	a80d883a 	mov	r6,r21
   12ba0:	980f883a 	mov	r7,r19
   12ba4:	1009883a 	mov	r4,r2
   12ba8:	180b883a 	mov	r5,r3
   12bac:	95000005 	stb	r20,0(r18)
   12bb0:	1021883a 	mov	r16,r2
   12bb4:	1823883a 	mov	r17,r3
   12bb8:	000b0780 	call	b078 <__ledf2>
   12bbc:	bdc00044 	addi	r23,r23,1
   12bc0:	800d883a 	mov	r6,r16
   12bc4:	880f883a 	mov	r7,r17
   12bc8:	0009883a 	mov	r4,zero
   12bcc:	014ffc34 	movhi	r5,16368
   12bd0:	103fcf0e 	bge	r2,zero,12b10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012b10>
   12bd4:	d8c01317 	ldw	r3,76(sp)
   12bd8:	d8c00515 	stw	r3,20(sp)
   12bdc:	d9400917 	ldw	r5,36(sp)
   12be0:	e009883a 	mov	r4,fp
   12be4:	00151fc0 	call	151fc <_Bfree>
   12be8:	d9000517 	ldw	r4,20(sp)
   12bec:	d9802317 	ldw	r6,140(sp)
   12bf0:	d9c02517 	ldw	r7,148(sp)
   12bf4:	b8000005 	stb	zero,0(r23)
   12bf8:	20800044 	addi	r2,r4,1
   12bfc:	30800015 	stw	r2,0(r6)
   12c00:	3802aa26 	beq	r7,zero,136ac <_dtoa_r+0x1178>
   12c04:	3dc00015 	stw	r23,0(r7)
   12c08:	d8800717 	ldw	r2,28(sp)
   12c0c:	003e7906 	br	125f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70125f4>
   12c10:	00800434 	movhi	r2,16
   12c14:	10bfffc4 	addi	r2,r2,-1
   12c18:	88a2703a 	and	r17,r17,r2
   12c1c:	883e851e 	bne	r17,zero,12634 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012634>
   12c20:	008000f4 	movhi	r2,3
   12c24:	10a0d304 	addi	r2,r2,-31924
   12c28:	003e8406 	br	1263c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701263c>
   12c2c:	10c00204 	addi	r3,r2,8
   12c30:	003e8706 	br	12650 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012650>
   12c34:	01400434 	movhi	r5,16
   12c38:	297fffc4 	addi	r5,r5,-1
   12c3c:	994a703a 	and	r5,r19,r5
   12c40:	9009883a 	mov	r4,r18
   12c44:	843f0044 	addi	r16,r16,-1023
   12c48:	294ffc34 	orhi	r5,r5,16368
   12c4c:	dd800217 	ldw	r22,8(sp)
   12c50:	d8001115 	stw	zero,68(sp)
   12c54:	003ea506 	br	126ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70126ec>
   12c58:	008000f4 	movhi	r2,3
   12c5c:	10a0c204 	addi	r2,r2,-31992
   12c60:	003e6406 	br	125f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70125f4>
   12c64:	e0001115 	stw	zero,68(fp)
   12c68:	000b883a 	mov	r5,zero
   12c6c:	e009883a 	mov	r4,fp
   12c70:	00151540 	call	15154 <_Balloc>
   12c74:	01bfffc4 	movi	r6,-1
   12c78:	01c00044 	movi	r7,1
   12c7c:	d8800715 	stw	r2,28(sp)
   12c80:	d9800c15 	stw	r6,48(sp)
   12c84:	e0801015 	stw	r2,64(fp)
   12c88:	d8000315 	stw	zero,12(sp)
   12c8c:	d9c00b15 	stw	r7,44(sp)
   12c90:	d9800615 	stw	r6,24(sp)
   12c94:	d8002215 	stw	zero,136(sp)
   12c98:	d8800117 	ldw	r2,4(sp)
   12c9c:	10008916 	blt	r2,zero,12ec4 <_dtoa_r+0x990>
   12ca0:	d9000517 	ldw	r4,20(sp)
   12ca4:	00c00384 	movi	r3,14
   12ca8:	19008616 	blt	r3,r4,12ec4 <_dtoa_r+0x990>
   12cac:	200490fa 	slli	r2,r4,3
   12cb0:	00c000f4 	movhi	r3,3
   12cb4:	d9802217 	ldw	r6,136(sp)
   12cb8:	18e0f104 	addi	r3,r3,-31804
   12cbc:	1885883a 	add	r2,r3,r2
   12cc0:	14000017 	ldw	r16,0(r2)
   12cc4:	14400117 	ldw	r17,4(r2)
   12cc8:	30016316 	blt	r6,zero,13258 <_dtoa_r+0xd24>
   12ccc:	800d883a 	mov	r6,r16
   12cd0:	880f883a 	mov	r7,r17
   12cd4:	9009883a 	mov	r4,r18
   12cd8:	980b883a 	mov	r5,r19
   12cdc:	000a62c0 	call	a62c <__divdf3>
   12ce0:	180b883a 	mov	r5,r3
   12ce4:	1009883a 	mov	r4,r2
   12ce8:	000c1800 	call	c180 <__fixdfsi>
   12cec:	1009883a 	mov	r4,r2
   12cf0:	102b883a 	mov	r21,r2
   12cf4:	000c2000 	call	c200 <__floatsidf>
   12cf8:	800d883a 	mov	r6,r16
   12cfc:	880f883a 	mov	r7,r17
   12d00:	1009883a 	mov	r4,r2
   12d04:	180b883a 	mov	r5,r3
   12d08:	000b16c0 	call	b16c <__muldf3>
   12d0c:	100d883a 	mov	r6,r2
   12d10:	180f883a 	mov	r7,r3
   12d14:	9009883a 	mov	r4,r18
   12d18:	980b883a 	mov	r5,r19
   12d1c:	000b8840 	call	b884 <__subdf3>
   12d20:	d9c00717 	ldw	r7,28(sp)
   12d24:	1009883a 	mov	r4,r2
   12d28:	a8800c04 	addi	r2,r21,48
   12d2c:	38800005 	stb	r2,0(r7)
   12d30:	3dc00044 	addi	r23,r7,1
   12d34:	d9c00617 	ldw	r7,24(sp)
   12d38:	01800044 	movi	r6,1
   12d3c:	180b883a 	mov	r5,r3
   12d40:	2005883a 	mov	r2,r4
   12d44:	39803826 	beq	r7,r6,12e28 <_dtoa_r+0x8f4>
   12d48:	000d883a 	mov	r6,zero
   12d4c:	01d00934 	movhi	r7,16420
   12d50:	000b16c0 	call	b16c <__muldf3>
   12d54:	000d883a 	mov	r6,zero
   12d58:	000f883a 	mov	r7,zero
   12d5c:	1009883a 	mov	r4,r2
   12d60:	180b883a 	mov	r5,r3
   12d64:	1025883a 	mov	r18,r2
   12d68:	1827883a 	mov	r19,r3
   12d6c:	000af140 	call	af14 <__eqdf2>
   12d70:	103f9a26 	beq	r2,zero,12bdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bdc>
   12d74:	d9c00617 	ldw	r7,24(sp)
   12d78:	d8c00717 	ldw	r3,28(sp)
   12d7c:	b829883a 	mov	r20,r23
   12d80:	38bfffc4 	addi	r2,r7,-1
   12d84:	18ad883a 	add	r22,r3,r2
   12d88:	00000a06 	br	12db4 <_dtoa_r+0x880>
   12d8c:	000b16c0 	call	b16c <__muldf3>
   12d90:	000d883a 	mov	r6,zero
   12d94:	000f883a 	mov	r7,zero
   12d98:	1009883a 	mov	r4,r2
   12d9c:	180b883a 	mov	r5,r3
   12da0:	1025883a 	mov	r18,r2
   12da4:	1827883a 	mov	r19,r3
   12da8:	b829883a 	mov	r20,r23
   12dac:	000af140 	call	af14 <__eqdf2>
   12db0:	103f8a26 	beq	r2,zero,12bdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bdc>
   12db4:	800d883a 	mov	r6,r16
   12db8:	880f883a 	mov	r7,r17
   12dbc:	9009883a 	mov	r4,r18
   12dc0:	980b883a 	mov	r5,r19
   12dc4:	000a62c0 	call	a62c <__divdf3>
   12dc8:	180b883a 	mov	r5,r3
   12dcc:	1009883a 	mov	r4,r2
   12dd0:	000c1800 	call	c180 <__fixdfsi>
   12dd4:	1009883a 	mov	r4,r2
   12dd8:	102b883a 	mov	r21,r2
   12ddc:	000c2000 	call	c200 <__floatsidf>
   12de0:	800d883a 	mov	r6,r16
   12de4:	880f883a 	mov	r7,r17
   12de8:	1009883a 	mov	r4,r2
   12dec:	180b883a 	mov	r5,r3
   12df0:	000b16c0 	call	b16c <__muldf3>
   12df4:	100d883a 	mov	r6,r2
   12df8:	180f883a 	mov	r7,r3
   12dfc:	9009883a 	mov	r4,r18
   12e00:	980b883a 	mov	r5,r19
   12e04:	000b8840 	call	b884 <__subdf3>
   12e08:	aa000c04 	addi	r8,r21,48
   12e0c:	a2000005 	stb	r8,0(r20)
   12e10:	000d883a 	mov	r6,zero
   12e14:	01d00934 	movhi	r7,16420
   12e18:	1009883a 	mov	r4,r2
   12e1c:	180b883a 	mov	r5,r3
   12e20:	a5c00044 	addi	r23,r20,1
   12e24:	b53fd91e 	bne	r22,r20,12d8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012d8c>
   12e28:	100d883a 	mov	r6,r2
   12e2c:	180f883a 	mov	r7,r3
   12e30:	1009883a 	mov	r4,r2
   12e34:	180b883a 	mov	r5,r3
   12e38:	0009d800 	call	9d80 <__adddf3>
   12e3c:	100d883a 	mov	r6,r2
   12e40:	180f883a 	mov	r7,r3
   12e44:	8009883a 	mov	r4,r16
   12e48:	880b883a 	mov	r5,r17
   12e4c:	1027883a 	mov	r19,r2
   12e50:	1825883a 	mov	r18,r3
   12e54:	000b0780 	call	b078 <__ledf2>
   12e58:	10000816 	blt	r2,zero,12e7c <_dtoa_r+0x948>
   12e5c:	980d883a 	mov	r6,r19
   12e60:	900f883a 	mov	r7,r18
   12e64:	8009883a 	mov	r4,r16
   12e68:	880b883a 	mov	r5,r17
   12e6c:	000af140 	call	af14 <__eqdf2>
   12e70:	103f5a1e 	bne	r2,zero,12bdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bdc>
   12e74:	ad40004c 	andi	r21,r21,1
   12e78:	a83f5826 	beq	r21,zero,12bdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bdc>
   12e7c:	bd3fffc3 	ldbu	r20,-1(r23)
   12e80:	b8bfffc4 	addi	r2,r23,-1
   12e84:	1007883a 	mov	r3,r2
   12e88:	01400e44 	movi	r5,57
   12e8c:	d9800717 	ldw	r6,28(sp)
   12e90:	00000506 	br	12ea8 <_dtoa_r+0x974>
   12e94:	18ffffc4 	addi	r3,r3,-1
   12e98:	11824726 	beq	r2,r6,137b8 <_dtoa_r+0x1284>
   12e9c:	1d000003 	ldbu	r20,0(r3)
   12ea0:	102f883a 	mov	r23,r2
   12ea4:	10bfffc4 	addi	r2,r2,-1
   12ea8:	a1003fcc 	andi	r4,r20,255
   12eac:	2100201c 	xori	r4,r4,128
   12eb0:	213fe004 	addi	r4,r4,-128
   12eb4:	217ff726 	beq	r4,r5,12e94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012e94>
   12eb8:	a2000044 	addi	r8,r20,1
   12ebc:	12000005 	stb	r8,0(r2)
   12ec0:	003f4606 	br	12bdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bdc>
   12ec4:	d9000b17 	ldw	r4,44(sp)
   12ec8:	2000c826 	beq	r4,zero,131ec <_dtoa_r+0xcb8>
   12ecc:	d9800317 	ldw	r6,12(sp)
   12ed0:	00c00044 	movi	r3,1
   12ed4:	1980f90e 	bge	r3,r6,132bc <_dtoa_r+0xd88>
   12ed8:	d8800617 	ldw	r2,24(sp)
   12edc:	d8c00a17 	ldw	r3,40(sp)
   12ee0:	157fffc4 	addi	r21,r2,-1
   12ee4:	1d41f316 	blt	r3,r21,136b4 <_dtoa_r+0x1180>
   12ee8:	1d6bc83a 	sub	r21,r3,r21
   12eec:	d9c00617 	ldw	r7,24(sp)
   12ef0:	3802aa16 	blt	r7,zero,1399c <_dtoa_r+0x1468>
   12ef4:	dd000817 	ldw	r20,32(sp)
   12ef8:	d8800617 	ldw	r2,24(sp)
   12efc:	d8c00817 	ldw	r3,32(sp)
   12f00:	01400044 	movi	r5,1
   12f04:	e009883a 	mov	r4,fp
   12f08:	1887883a 	add	r3,r3,r2
   12f0c:	d8c00815 	stw	r3,32(sp)
   12f10:	b0ad883a 	add	r22,r22,r2
   12f14:	00155600 	call	15560 <__i2b>
   12f18:	1023883a 	mov	r17,r2
   12f1c:	a0000826 	beq	r20,zero,12f40 <_dtoa_r+0xa0c>
   12f20:	0580070e 	bge	zero,r22,12f40 <_dtoa_r+0xa0c>
   12f24:	a005883a 	mov	r2,r20
   12f28:	b500b916 	blt	r22,r20,13210 <_dtoa_r+0xcdc>
   12f2c:	d9000817 	ldw	r4,32(sp)
   12f30:	a0a9c83a 	sub	r20,r20,r2
   12f34:	b0adc83a 	sub	r22,r22,r2
   12f38:	2089c83a 	sub	r4,r4,r2
   12f3c:	d9000815 	stw	r4,32(sp)
   12f40:	d9800a17 	ldw	r6,40(sp)
   12f44:	0181810e 	bge	zero,r6,1354c <_dtoa_r+0x1018>
   12f48:	d9c00b17 	ldw	r7,44(sp)
   12f4c:	3800b326 	beq	r7,zero,1321c <_dtoa_r+0xce8>
   12f50:	a800b226 	beq	r21,zero,1321c <_dtoa_r+0xce8>
   12f54:	880b883a 	mov	r5,r17
   12f58:	a80d883a 	mov	r6,r21
   12f5c:	e009883a 	mov	r4,fp
   12f60:	00157940 	call	15794 <__pow5mult>
   12f64:	d9800917 	ldw	r6,36(sp)
   12f68:	100b883a 	mov	r5,r2
   12f6c:	e009883a 	mov	r4,fp
   12f70:	1023883a 	mov	r17,r2
   12f74:	001559c0 	call	1559c <__multiply>
   12f78:	1021883a 	mov	r16,r2
   12f7c:	d8800a17 	ldw	r2,40(sp)
   12f80:	d9400917 	ldw	r5,36(sp)
   12f84:	e009883a 	mov	r4,fp
   12f88:	1545c83a 	sub	r2,r2,r21
   12f8c:	d8800a15 	stw	r2,40(sp)
   12f90:	00151fc0 	call	151fc <_Bfree>
   12f94:	d8c00a17 	ldw	r3,40(sp)
   12f98:	18009f1e 	bne	r3,zero,13218 <_dtoa_r+0xce4>
   12f9c:	05c00044 	movi	r23,1
   12fa0:	e009883a 	mov	r4,fp
   12fa4:	b80b883a 	mov	r5,r23
   12fa8:	00155600 	call	15560 <__i2b>
   12fac:	d9000d17 	ldw	r4,52(sp)
   12fb0:	102b883a 	mov	r21,r2
   12fb4:	2000ce26 	beq	r4,zero,132f0 <_dtoa_r+0xdbc>
   12fb8:	200d883a 	mov	r6,r4
   12fbc:	100b883a 	mov	r5,r2
   12fc0:	e009883a 	mov	r4,fp
   12fc4:	00157940 	call	15794 <__pow5mult>
   12fc8:	d9800317 	ldw	r6,12(sp)
   12fcc:	102b883a 	mov	r21,r2
   12fd0:	b981810e 	bge	r23,r6,135d8 <_dtoa_r+0x10a4>
   12fd4:	0027883a 	mov	r19,zero
   12fd8:	a8800417 	ldw	r2,16(r21)
   12fdc:	05c00804 	movi	r23,32
   12fe0:	10800104 	addi	r2,r2,4
   12fe4:	1085883a 	add	r2,r2,r2
   12fe8:	1085883a 	add	r2,r2,r2
   12fec:	a885883a 	add	r2,r21,r2
   12ff0:	11000017 	ldw	r4,0(r2)
   12ff4:	00154480 	call	15448 <__hi0bits>
   12ff8:	b885c83a 	sub	r2,r23,r2
   12ffc:	1585883a 	add	r2,r2,r22
   13000:	108007cc 	andi	r2,r2,31
   13004:	1000b326 	beq	r2,zero,132d4 <_dtoa_r+0xda0>
   13008:	00c00804 	movi	r3,32
   1300c:	1887c83a 	sub	r3,r3,r2
   13010:	01000104 	movi	r4,4
   13014:	20c2cd0e 	bge	r4,r3,13b4c <_dtoa_r+0x1618>
   13018:	00c00704 	movi	r3,28
   1301c:	1885c83a 	sub	r2,r3,r2
   13020:	d8c00817 	ldw	r3,32(sp)
   13024:	a0a9883a 	add	r20,r20,r2
   13028:	b0ad883a 	add	r22,r22,r2
   1302c:	1887883a 	add	r3,r3,r2
   13030:	d8c00815 	stw	r3,32(sp)
   13034:	d9800817 	ldw	r6,32(sp)
   13038:	0180040e 	bge	zero,r6,1304c <_dtoa_r+0xb18>
   1303c:	800b883a 	mov	r5,r16
   13040:	e009883a 	mov	r4,fp
   13044:	00158d40 	call	158d4 <__lshift>
   13048:	1021883a 	mov	r16,r2
   1304c:	0580050e 	bge	zero,r22,13064 <_dtoa_r+0xb30>
   13050:	a80b883a 	mov	r5,r21
   13054:	b00d883a 	mov	r6,r22
   13058:	e009883a 	mov	r4,fp
   1305c:	00158d40 	call	158d4 <__lshift>
   13060:	102b883a 	mov	r21,r2
   13064:	d9c00e17 	ldw	r7,56(sp)
   13068:	3801211e 	bne	r7,zero,134f0 <_dtoa_r+0xfbc>
   1306c:	d9800617 	ldw	r6,24(sp)
   13070:	0181380e 	bge	zero,r6,13554 <_dtoa_r+0x1020>
   13074:	d8c00b17 	ldw	r3,44(sp)
   13078:	1800ab1e 	bne	r3,zero,13328 <_dtoa_r+0xdf4>
   1307c:	dc800717 	ldw	r18,28(sp)
   13080:	dcc00617 	ldw	r19,24(sp)
   13084:	9029883a 	mov	r20,r18
   13088:	00000206 	br	13094 <_dtoa_r+0xb60>
   1308c:	00152240 	call	15224 <__multadd>
   13090:	1021883a 	mov	r16,r2
   13094:	a80b883a 	mov	r5,r21
   13098:	8009883a 	mov	r4,r16
   1309c:	00123340 	call	12334 <quorem>
   130a0:	10800c04 	addi	r2,r2,48
   130a4:	90800005 	stb	r2,0(r18)
   130a8:	94800044 	addi	r18,r18,1
   130ac:	9507c83a 	sub	r3,r18,r20
   130b0:	000f883a 	mov	r7,zero
   130b4:	01800284 	movi	r6,10
   130b8:	800b883a 	mov	r5,r16
   130bc:	e009883a 	mov	r4,fp
   130c0:	1cfff216 	blt	r3,r19,1308c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701308c>
   130c4:	1011883a 	mov	r8,r2
   130c8:	d8800617 	ldw	r2,24(sp)
   130cc:	0082370e 	bge	zero,r2,139ac <_dtoa_r+0x1478>
   130d0:	d9000717 	ldw	r4,28(sp)
   130d4:	0025883a 	mov	r18,zero
   130d8:	20af883a 	add	r23,r4,r2
   130dc:	01800044 	movi	r6,1
   130e0:	800b883a 	mov	r5,r16
   130e4:	e009883a 	mov	r4,fp
   130e8:	da001715 	stw	r8,92(sp)
   130ec:	00158d40 	call	158d4 <__lshift>
   130f0:	a80b883a 	mov	r5,r21
   130f4:	1009883a 	mov	r4,r2
   130f8:	d8800915 	stw	r2,36(sp)
   130fc:	0015a1c0 	call	15a1c <__mcmp>
   13100:	da001717 	ldw	r8,92(sp)
   13104:	0081800e 	bge	zero,r2,13708 <_dtoa_r+0x11d4>
   13108:	b93fffc3 	ldbu	r4,-1(r23)
   1310c:	b8bfffc4 	addi	r2,r23,-1
   13110:	1007883a 	mov	r3,r2
   13114:	01800e44 	movi	r6,57
   13118:	d9c00717 	ldw	r7,28(sp)
   1311c:	00000506 	br	13134 <_dtoa_r+0xc00>
   13120:	18ffffc4 	addi	r3,r3,-1
   13124:	11c12326 	beq	r2,r7,135b4 <_dtoa_r+0x1080>
   13128:	19000003 	ldbu	r4,0(r3)
   1312c:	102f883a 	mov	r23,r2
   13130:	10bfffc4 	addi	r2,r2,-1
   13134:	21403fcc 	andi	r5,r4,255
   13138:	2940201c 	xori	r5,r5,128
   1313c:	297fe004 	addi	r5,r5,-128
   13140:	29bff726 	beq	r5,r6,13120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013120>
   13144:	21000044 	addi	r4,r4,1
   13148:	11000005 	stb	r4,0(r2)
   1314c:	a80b883a 	mov	r5,r21
   13150:	e009883a 	mov	r4,fp
   13154:	00151fc0 	call	151fc <_Bfree>
   13158:	883ea026 	beq	r17,zero,12bdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bdc>
   1315c:	90000426 	beq	r18,zero,13170 <_dtoa_r+0xc3c>
   13160:	94400326 	beq	r18,r17,13170 <_dtoa_r+0xc3c>
   13164:	900b883a 	mov	r5,r18
   13168:	e009883a 	mov	r4,fp
   1316c:	00151fc0 	call	151fc <_Bfree>
   13170:	880b883a 	mov	r5,r17
   13174:	e009883a 	mov	r4,fp
   13178:	00151fc0 	call	151fc <_Bfree>
   1317c:	003e9706 	br	12bdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bdc>
   13180:	01800044 	movi	r6,1
   13184:	d9800e15 	stw	r6,56(sp)
   13188:	003d9606 	br	127e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70127e4>
   1318c:	d8800817 	ldw	r2,32(sp)
   13190:	d8c00517 	ldw	r3,20(sp)
   13194:	d8000d15 	stw	zero,52(sp)
   13198:	10c5c83a 	sub	r2,r2,r3
   1319c:	00c9c83a 	sub	r4,zero,r3
   131a0:	d8800815 	stw	r2,32(sp)
   131a4:	d9000a15 	stw	r4,40(sp)
   131a8:	003d9706 	br	12808 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012808>
   131ac:	05adc83a 	sub	r22,zero,r22
   131b0:	dd800815 	stw	r22,32(sp)
   131b4:	002d883a 	mov	r22,zero
   131b8:	003d8e06 	br	127f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70127f4>
   131bc:	d9000517 	ldw	r4,20(sp)
   131c0:	000c2000 	call	c200 <__floatsidf>
   131c4:	100d883a 	mov	r6,r2
   131c8:	180f883a 	mov	r7,r3
   131cc:	a009883a 	mov	r4,r20
   131d0:	880b883a 	mov	r5,r17
   131d4:	000af140 	call	af14 <__eqdf2>
   131d8:	103d7126 	beq	r2,zero,127a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70127a0>
   131dc:	d9c00517 	ldw	r7,20(sp)
   131e0:	39ffffc4 	addi	r7,r7,-1
   131e4:	d9c00515 	stw	r7,20(sp)
   131e8:	003d6d06 	br	127a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70127a0>
   131ec:	dd400a17 	ldw	r21,40(sp)
   131f0:	dd000817 	ldw	r20,32(sp)
   131f4:	0023883a 	mov	r17,zero
   131f8:	003f4806 	br	12f1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012f1c>
   131fc:	10e3c83a 	sub	r17,r2,r3
   13200:	9448983a 	sll	r4,r18,r17
   13204:	003d3206 	br	126d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70126d0>
   13208:	d8000e15 	stw	zero,56(sp)
   1320c:	003d7506 	br	127e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70127e4>
   13210:	b005883a 	mov	r2,r22
   13214:	003f4506 	br	12f2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012f2c>
   13218:	dc000915 	stw	r16,36(sp)
   1321c:	d9800a17 	ldw	r6,40(sp)
   13220:	d9400917 	ldw	r5,36(sp)
   13224:	e009883a 	mov	r4,fp
   13228:	00157940 	call	15794 <__pow5mult>
   1322c:	1021883a 	mov	r16,r2
   13230:	003f5a06 	br	12f9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012f9c>
   13234:	01c00044 	movi	r7,1
   13238:	d9c00b15 	stw	r7,44(sp)
   1323c:	d8802217 	ldw	r2,136(sp)
   13240:	0081280e 	bge	zero,r2,136e4 <_dtoa_r+0x11b0>
   13244:	100d883a 	mov	r6,r2
   13248:	1021883a 	mov	r16,r2
   1324c:	d8800c15 	stw	r2,48(sp)
   13250:	d8800615 	stw	r2,24(sp)
   13254:	003d8806 	br	12878 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012878>
   13258:	d8800617 	ldw	r2,24(sp)
   1325c:	00be9b16 	blt	zero,r2,12ccc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012ccc>
   13260:	10010f1e 	bne	r2,zero,136a0 <_dtoa_r+0x116c>
   13264:	880b883a 	mov	r5,r17
   13268:	000d883a 	mov	r6,zero
   1326c:	01d00534 	movhi	r7,16404
   13270:	8009883a 	mov	r4,r16
   13274:	000b16c0 	call	b16c <__muldf3>
   13278:	900d883a 	mov	r6,r18
   1327c:	980f883a 	mov	r7,r19
   13280:	1009883a 	mov	r4,r2
   13284:	180b883a 	mov	r5,r3
   13288:	000af9c0 	call	af9c <__gedf2>
   1328c:	002b883a 	mov	r21,zero
   13290:	0023883a 	mov	r17,zero
   13294:	1000bf16 	blt	r2,zero,13594 <_dtoa_r+0x1060>
   13298:	d9802217 	ldw	r6,136(sp)
   1329c:	ddc00717 	ldw	r23,28(sp)
   132a0:	018c303a 	nor	r6,zero,r6
   132a4:	d9800515 	stw	r6,20(sp)
   132a8:	a80b883a 	mov	r5,r21
   132ac:	e009883a 	mov	r4,fp
   132b0:	00151fc0 	call	151fc <_Bfree>
   132b4:	883e4926 	beq	r17,zero,12bdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bdc>
   132b8:	003fad06 	br	13170 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013170>
   132bc:	d9c01117 	ldw	r7,68(sp)
   132c0:	3801bc26 	beq	r7,zero,139b4 <_dtoa_r+0x1480>
   132c4:	10810cc4 	addi	r2,r2,1075
   132c8:	dd400a17 	ldw	r21,40(sp)
   132cc:	dd000817 	ldw	r20,32(sp)
   132d0:	003f0a06 	br	12efc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012efc>
   132d4:	00800704 	movi	r2,28
   132d8:	d9000817 	ldw	r4,32(sp)
   132dc:	a0a9883a 	add	r20,r20,r2
   132e0:	b0ad883a 	add	r22,r22,r2
   132e4:	2089883a 	add	r4,r4,r2
   132e8:	d9000815 	stw	r4,32(sp)
   132ec:	003f5106 	br	13034 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013034>
   132f0:	d8c00317 	ldw	r3,12(sp)
   132f4:	b8c1fc0e 	bge	r23,r3,13ae8 <_dtoa_r+0x15b4>
   132f8:	0027883a 	mov	r19,zero
   132fc:	b805883a 	mov	r2,r23
   13300:	003f3e06 	br	12ffc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012ffc>
   13304:	880b883a 	mov	r5,r17
   13308:	e009883a 	mov	r4,fp
   1330c:	000f883a 	mov	r7,zero
   13310:	01800284 	movi	r6,10
   13314:	00152240 	call	15224 <__multadd>
   13318:	d9000c17 	ldw	r4,48(sp)
   1331c:	1023883a 	mov	r17,r2
   13320:	0102040e 	bge	zero,r4,13b34 <_dtoa_r+0x1600>
   13324:	d9000615 	stw	r4,24(sp)
   13328:	0500050e 	bge	zero,r20,13340 <_dtoa_r+0xe0c>
   1332c:	880b883a 	mov	r5,r17
   13330:	a00d883a 	mov	r6,r20
   13334:	e009883a 	mov	r4,fp
   13338:	00158d40 	call	158d4 <__lshift>
   1333c:	1023883a 	mov	r17,r2
   13340:	9801241e 	bne	r19,zero,137d4 <_dtoa_r+0x12a0>
   13344:	8829883a 	mov	r20,r17
   13348:	d9000617 	ldw	r4,24(sp)
   1334c:	dcc00717 	ldw	r19,28(sp)
   13350:	9480004c 	andi	r18,r18,1
   13354:	20bfffc4 	addi	r2,r4,-1
   13358:	9885883a 	add	r2,r19,r2
   1335c:	d8800415 	stw	r2,16(sp)
   13360:	dc800615 	stw	r18,24(sp)
   13364:	a80b883a 	mov	r5,r21
   13368:	8009883a 	mov	r4,r16
   1336c:	00123340 	call	12334 <quorem>
   13370:	880b883a 	mov	r5,r17
   13374:	8009883a 	mov	r4,r16
   13378:	102f883a 	mov	r23,r2
   1337c:	0015a1c0 	call	15a1c <__mcmp>
   13380:	a80b883a 	mov	r5,r21
   13384:	a00d883a 	mov	r6,r20
   13388:	e009883a 	mov	r4,fp
   1338c:	102d883a 	mov	r22,r2
   13390:	0015a7c0 	call	15a7c <__mdiff>
   13394:	1007883a 	mov	r3,r2
   13398:	10800317 	ldw	r2,12(r2)
   1339c:	bc800c04 	addi	r18,r23,48
   133a0:	180b883a 	mov	r5,r3
   133a4:	10004e1e 	bne	r2,zero,134e0 <_dtoa_r+0xfac>
   133a8:	8009883a 	mov	r4,r16
   133ac:	d8c01615 	stw	r3,88(sp)
   133b0:	0015a1c0 	call	15a1c <__mcmp>
   133b4:	d8c01617 	ldw	r3,88(sp)
   133b8:	e009883a 	mov	r4,fp
   133bc:	d8801615 	stw	r2,88(sp)
   133c0:	180b883a 	mov	r5,r3
   133c4:	00151fc0 	call	151fc <_Bfree>
   133c8:	d8801617 	ldw	r2,88(sp)
   133cc:	1000041e 	bne	r2,zero,133e0 <_dtoa_r+0xeac>
   133d0:	d9800317 	ldw	r6,12(sp)
   133d4:	3000021e 	bne	r6,zero,133e0 <_dtoa_r+0xeac>
   133d8:	d8c00617 	ldw	r3,24(sp)
   133dc:	18003726 	beq	r3,zero,134bc <_dtoa_r+0xf88>
   133e0:	b0002016 	blt	r22,zero,13464 <_dtoa_r+0xf30>
   133e4:	b000041e 	bne	r22,zero,133f8 <_dtoa_r+0xec4>
   133e8:	d9000317 	ldw	r4,12(sp)
   133ec:	2000021e 	bne	r4,zero,133f8 <_dtoa_r+0xec4>
   133f0:	d8c00617 	ldw	r3,24(sp)
   133f4:	18001b26 	beq	r3,zero,13464 <_dtoa_r+0xf30>
   133f8:	00810716 	blt	zero,r2,13818 <_dtoa_r+0x12e4>
   133fc:	d8c00417 	ldw	r3,16(sp)
   13400:	9d800044 	addi	r22,r19,1
   13404:	9c800005 	stb	r18,0(r19)
   13408:	b02f883a 	mov	r23,r22
   1340c:	98c10626 	beq	r19,r3,13828 <_dtoa_r+0x12f4>
   13410:	800b883a 	mov	r5,r16
   13414:	000f883a 	mov	r7,zero
   13418:	01800284 	movi	r6,10
   1341c:	e009883a 	mov	r4,fp
   13420:	00152240 	call	15224 <__multadd>
   13424:	1021883a 	mov	r16,r2
   13428:	000f883a 	mov	r7,zero
   1342c:	01800284 	movi	r6,10
   13430:	880b883a 	mov	r5,r17
   13434:	e009883a 	mov	r4,fp
   13438:	8d002526 	beq	r17,r20,134d0 <_dtoa_r+0xf9c>
   1343c:	00152240 	call	15224 <__multadd>
   13440:	a00b883a 	mov	r5,r20
   13444:	000f883a 	mov	r7,zero
   13448:	01800284 	movi	r6,10
   1344c:	e009883a 	mov	r4,fp
   13450:	1023883a 	mov	r17,r2
   13454:	00152240 	call	15224 <__multadd>
   13458:	1029883a 	mov	r20,r2
   1345c:	b027883a 	mov	r19,r22
   13460:	003fc006 	br	13364 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013364>
   13464:	9011883a 	mov	r8,r18
   13468:	00800e0e 	bge	zero,r2,134a4 <_dtoa_r+0xf70>
   1346c:	800b883a 	mov	r5,r16
   13470:	01800044 	movi	r6,1
   13474:	e009883a 	mov	r4,fp
   13478:	da001715 	stw	r8,92(sp)
   1347c:	00158d40 	call	158d4 <__lshift>
   13480:	a80b883a 	mov	r5,r21
   13484:	1009883a 	mov	r4,r2
   13488:	1021883a 	mov	r16,r2
   1348c:	0015a1c0 	call	15a1c <__mcmp>
   13490:	da001717 	ldw	r8,92(sp)
   13494:	0081960e 	bge	zero,r2,13af0 <_dtoa_r+0x15bc>
   13498:	00800e44 	movi	r2,57
   1349c:	40817026 	beq	r8,r2,13a60 <_dtoa_r+0x152c>
   134a0:	ba000c44 	addi	r8,r23,49
   134a4:	8825883a 	mov	r18,r17
   134a8:	9dc00044 	addi	r23,r19,1
   134ac:	9a000005 	stb	r8,0(r19)
   134b0:	a023883a 	mov	r17,r20
   134b4:	dc000915 	stw	r16,36(sp)
   134b8:	003f2406 	br	1314c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701314c>
   134bc:	00800e44 	movi	r2,57
   134c0:	9011883a 	mov	r8,r18
   134c4:	90816626 	beq	r18,r2,13a60 <_dtoa_r+0x152c>
   134c8:	05bff516 	blt	zero,r22,134a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70134a0>
   134cc:	003ff506 	br	134a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70134a4>
   134d0:	00152240 	call	15224 <__multadd>
   134d4:	1023883a 	mov	r17,r2
   134d8:	1029883a 	mov	r20,r2
   134dc:	003fdf06 	br	1345c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701345c>
   134e0:	e009883a 	mov	r4,fp
   134e4:	00151fc0 	call	151fc <_Bfree>
   134e8:	00800044 	movi	r2,1
   134ec:	003fbc06 	br	133e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70133e0>
   134f0:	a80b883a 	mov	r5,r21
   134f4:	8009883a 	mov	r4,r16
   134f8:	0015a1c0 	call	15a1c <__mcmp>
   134fc:	103edb0e 	bge	r2,zero,1306c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701306c>
   13500:	800b883a 	mov	r5,r16
   13504:	000f883a 	mov	r7,zero
   13508:	01800284 	movi	r6,10
   1350c:	e009883a 	mov	r4,fp
   13510:	00152240 	call	15224 <__multadd>
   13514:	1021883a 	mov	r16,r2
   13518:	d8800517 	ldw	r2,20(sp)
   1351c:	d8c00b17 	ldw	r3,44(sp)
   13520:	10bfffc4 	addi	r2,r2,-1
   13524:	d8800515 	stw	r2,20(sp)
   13528:	183f761e 	bne	r3,zero,13304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013304>
   1352c:	d9000c17 	ldw	r4,48(sp)
   13530:	0101730e 	bge	zero,r4,13b00 <_dtoa_r+0x15cc>
   13534:	d9000615 	stw	r4,24(sp)
   13538:	003ed006 	br	1307c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701307c>
   1353c:	00800084 	movi	r2,2
   13540:	3081861e 	bne	r6,r2,13b5c <_dtoa_r+0x1628>
   13544:	d8000b15 	stw	zero,44(sp)
   13548:	003f3c06 	br	1323c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701323c>
   1354c:	dc000917 	ldw	r16,36(sp)
   13550:	003e9206 	br	12f9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012f9c>
   13554:	d9c00317 	ldw	r7,12(sp)
   13558:	00800084 	movi	r2,2
   1355c:	11fec50e 	bge	r2,r7,13074 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013074>
   13560:	d9000617 	ldw	r4,24(sp)
   13564:	20013c1e 	bne	r4,zero,13a58 <_dtoa_r+0x1524>
   13568:	a80b883a 	mov	r5,r21
   1356c:	000f883a 	mov	r7,zero
   13570:	01800144 	movi	r6,5
   13574:	e009883a 	mov	r4,fp
   13578:	00152240 	call	15224 <__multadd>
   1357c:	100b883a 	mov	r5,r2
   13580:	8009883a 	mov	r4,r16
   13584:	102b883a 	mov	r21,r2
   13588:	0015a1c0 	call	15a1c <__mcmp>
   1358c:	dc000915 	stw	r16,36(sp)
   13590:	00bf410e 	bge	zero,r2,13298 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013298>
   13594:	d9c00717 	ldw	r7,28(sp)
   13598:	00800c44 	movi	r2,49
   1359c:	38800005 	stb	r2,0(r7)
   135a0:	d8800517 	ldw	r2,20(sp)
   135a4:	3dc00044 	addi	r23,r7,1
   135a8:	10800044 	addi	r2,r2,1
   135ac:	d8800515 	stw	r2,20(sp)
   135b0:	003f3d06 	br	132a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70132a8>
   135b4:	d9800517 	ldw	r6,20(sp)
   135b8:	d9c00717 	ldw	r7,28(sp)
   135bc:	00800c44 	movi	r2,49
   135c0:	31800044 	addi	r6,r6,1
   135c4:	d9800515 	stw	r6,20(sp)
   135c8:	38800005 	stb	r2,0(r7)
   135cc:	003edf06 	br	1314c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701314c>
   135d0:	d8000b15 	stw	zero,44(sp)
   135d4:	003c9f06 	br	12854 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012854>
   135d8:	903e7e1e 	bne	r18,zero,12fd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012fd4>
   135dc:	00800434 	movhi	r2,16
   135e0:	10bfffc4 	addi	r2,r2,-1
   135e4:	9884703a 	and	r2,r19,r2
   135e8:	1000ea1e 	bne	r2,zero,13994 <_dtoa_r+0x1460>
   135ec:	9cdffc2c 	andhi	r19,r19,32752
   135f0:	9800e826 	beq	r19,zero,13994 <_dtoa_r+0x1460>
   135f4:	d9c00817 	ldw	r7,32(sp)
   135f8:	b5800044 	addi	r22,r22,1
   135fc:	04c00044 	movi	r19,1
   13600:	39c00044 	addi	r7,r7,1
   13604:	d9c00815 	stw	r7,32(sp)
   13608:	d8800d17 	ldw	r2,52(sp)
   1360c:	103e721e 	bne	r2,zero,12fd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012fd8>
   13610:	00800044 	movi	r2,1
   13614:	003e7906 	br	12ffc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012ffc>
   13618:	8009883a 	mov	r4,r16
   1361c:	000c2000 	call	c200 <__floatsidf>
   13620:	d9800f17 	ldw	r6,60(sp)
   13624:	d9c01017 	ldw	r7,64(sp)
   13628:	1009883a 	mov	r4,r2
   1362c:	180b883a 	mov	r5,r3
   13630:	000b16c0 	call	b16c <__muldf3>
   13634:	000d883a 	mov	r6,zero
   13638:	01d00734 	movhi	r7,16412
   1363c:	1009883a 	mov	r4,r2
   13640:	180b883a 	mov	r5,r3
   13644:	0009d800 	call	9d80 <__adddf3>
   13648:	047f3034 	movhi	r17,64704
   1364c:	1021883a 	mov	r16,r2
   13650:	1c63883a 	add	r17,r3,r17
   13654:	d9000f17 	ldw	r4,60(sp)
   13658:	d9401017 	ldw	r5,64(sp)
   1365c:	000d883a 	mov	r6,zero
   13660:	01d00534 	movhi	r7,16404
   13664:	000b8840 	call	b884 <__subdf3>
   13668:	800d883a 	mov	r6,r16
   1366c:	880f883a 	mov	r7,r17
   13670:	1009883a 	mov	r4,r2
   13674:	180b883a 	mov	r5,r3
   13678:	102b883a 	mov	r21,r2
   1367c:	1829883a 	mov	r20,r3
   13680:	000af9c0 	call	af9c <__gedf2>
   13684:	00806c16 	blt	zero,r2,13838 <_dtoa_r+0x1304>
   13688:	89e0003c 	xorhi	r7,r17,32768
   1368c:	800d883a 	mov	r6,r16
   13690:	a809883a 	mov	r4,r21
   13694:	a00b883a 	mov	r5,r20
   13698:	000b0780 	call	b078 <__ledf2>
   1369c:	103d7e0e 	bge	r2,zero,12c98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012c98>
   136a0:	002b883a 	mov	r21,zero
   136a4:	0023883a 	mov	r17,zero
   136a8:	003efb06 	br	13298 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013298>
   136ac:	d8800717 	ldw	r2,28(sp)
   136b0:	003bd006 	br	125f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70125f4>
   136b4:	d9000a17 	ldw	r4,40(sp)
   136b8:	d9800d17 	ldw	r6,52(sp)
   136bc:	dd400a15 	stw	r21,40(sp)
   136c0:	a905c83a 	sub	r2,r21,r4
   136c4:	308d883a 	add	r6,r6,r2
   136c8:	d9800d15 	stw	r6,52(sp)
   136cc:	002b883a 	mov	r21,zero
   136d0:	003e0606 	br	12eec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012eec>
   136d4:	9023883a 	mov	r17,r18
   136d8:	9829883a 	mov	r20,r19
   136dc:	04000084 	movi	r16,2
   136e0:	003c9206 	br	1292c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701292c>
   136e4:	04000044 	movi	r16,1
   136e8:	dc000c15 	stw	r16,48(sp)
   136ec:	dc000615 	stw	r16,24(sp)
   136f0:	dc002215 	stw	r16,136(sp)
   136f4:	e0001115 	stw	zero,68(fp)
   136f8:	000b883a 	mov	r5,zero
   136fc:	003c6906 	br	128a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70128a4>
   13700:	3021883a 	mov	r16,r6
   13704:	003ffb06 	br	136f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70136f4>
   13708:	1000021e 	bne	r2,zero,13714 <_dtoa_r+0x11e0>
   1370c:	4200004c 	andi	r8,r8,1
   13710:	403e7d1e 	bne	r8,zero,13108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013108>
   13714:	01000c04 	movi	r4,48
   13718:	00000106 	br	13720 <_dtoa_r+0x11ec>
   1371c:	102f883a 	mov	r23,r2
   13720:	b8bfffc4 	addi	r2,r23,-1
   13724:	10c00007 	ldb	r3,0(r2)
   13728:	193ffc26 	beq	r3,r4,1371c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701371c>
   1372c:	003e8706 	br	1314c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701314c>
   13730:	d8800517 	ldw	r2,20(sp)
   13734:	00a3c83a 	sub	r17,zero,r2
   13738:	8800a426 	beq	r17,zero,139cc <_dtoa_r+0x1498>
   1373c:	888003cc 	andi	r2,r17,15
   13740:	100490fa 	slli	r2,r2,3
   13744:	00c000f4 	movhi	r3,3
   13748:	18e0f104 	addi	r3,r3,-31804
   1374c:	1885883a 	add	r2,r3,r2
   13750:	11800017 	ldw	r6,0(r2)
   13754:	11c00117 	ldw	r7,4(r2)
   13758:	9009883a 	mov	r4,r18
   1375c:	980b883a 	mov	r5,r19
   13760:	8823d13a 	srai	r17,r17,4
   13764:	000b16c0 	call	b16c <__muldf3>
   13768:	d8800f15 	stw	r2,60(sp)
   1376c:	d8c01015 	stw	r3,64(sp)
   13770:	8800e826 	beq	r17,zero,13b14 <_dtoa_r+0x15e0>
   13774:	050000f4 	movhi	r20,3
   13778:	a520e704 	addi	r20,r20,-31844
   1377c:	04000084 	movi	r16,2
   13780:	8980004c 	andi	r6,r17,1
   13784:	1009883a 	mov	r4,r2
   13788:	8823d07a 	srai	r17,r17,1
   1378c:	180b883a 	mov	r5,r3
   13790:	30000426 	beq	r6,zero,137a4 <_dtoa_r+0x1270>
   13794:	a1800017 	ldw	r6,0(r20)
   13798:	a1c00117 	ldw	r7,4(r20)
   1379c:	84000044 	addi	r16,r16,1
   137a0:	000b16c0 	call	b16c <__muldf3>
   137a4:	a5000204 	addi	r20,r20,8
   137a8:	883ff51e 	bne	r17,zero,13780 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013780>
   137ac:	d8800f15 	stw	r2,60(sp)
   137b0:	d8c01015 	stw	r3,64(sp)
   137b4:	003c7606 	br	12990 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012990>
   137b8:	00c00c04 	movi	r3,48
   137bc:	10c00005 	stb	r3,0(r2)
   137c0:	d8c00517 	ldw	r3,20(sp)
   137c4:	bd3fffc3 	ldbu	r20,-1(r23)
   137c8:	18c00044 	addi	r3,r3,1
   137cc:	d8c00515 	stw	r3,20(sp)
   137d0:	003db906 	br	12eb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012eb8>
   137d4:	89400117 	ldw	r5,4(r17)
   137d8:	e009883a 	mov	r4,fp
   137dc:	00151540 	call	15154 <_Balloc>
   137e0:	89800417 	ldw	r6,16(r17)
   137e4:	89400304 	addi	r5,r17,12
   137e8:	11000304 	addi	r4,r2,12
   137ec:	31800084 	addi	r6,r6,2
   137f0:	318d883a 	add	r6,r6,r6
   137f4:	318d883a 	add	r6,r6,r6
   137f8:	1027883a 	mov	r19,r2
   137fc:	000d3800 	call	d380 <memcpy>
   13800:	01800044 	movi	r6,1
   13804:	980b883a 	mov	r5,r19
   13808:	e009883a 	mov	r4,fp
   1380c:	00158d40 	call	158d4 <__lshift>
   13810:	1029883a 	mov	r20,r2
   13814:	003ecc06 	br	13348 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013348>
   13818:	00800e44 	movi	r2,57
   1381c:	90809026 	beq	r18,r2,13a60 <_dtoa_r+0x152c>
   13820:	92000044 	addi	r8,r18,1
   13824:	003f1f06 	br	134a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70134a4>
   13828:	9011883a 	mov	r8,r18
   1382c:	8825883a 	mov	r18,r17
   13830:	a023883a 	mov	r17,r20
   13834:	003e2906 	br	130dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70130dc>
   13838:	002b883a 	mov	r21,zero
   1383c:	0023883a 	mov	r17,zero
   13840:	003f5406 	br	13594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013594>
   13844:	61bfffc4 	addi	r6,r12,-1
   13848:	300490fa 	slli	r2,r6,3
   1384c:	00c000f4 	movhi	r3,3
   13850:	18e0f104 	addi	r3,r3,-31804
   13854:	1885883a 	add	r2,r3,r2
   13858:	11000017 	ldw	r4,0(r2)
   1385c:	11400117 	ldw	r5,4(r2)
   13860:	d8800717 	ldw	r2,28(sp)
   13864:	880f883a 	mov	r7,r17
   13868:	d9801215 	stw	r6,72(sp)
   1386c:	800d883a 	mov	r6,r16
   13870:	db001615 	stw	r12,88(sp)
   13874:	15c00044 	addi	r23,r2,1
   13878:	000b16c0 	call	b16c <__muldf3>
   1387c:	d9401017 	ldw	r5,64(sp)
   13880:	d9000f17 	ldw	r4,60(sp)
   13884:	d8c01515 	stw	r3,84(sp)
   13888:	d8801415 	stw	r2,80(sp)
   1388c:	000c1800 	call	c180 <__fixdfsi>
   13890:	1009883a 	mov	r4,r2
   13894:	1021883a 	mov	r16,r2
   13898:	000c2000 	call	c200 <__floatsidf>
   1389c:	d9000f17 	ldw	r4,60(sp)
   138a0:	d9401017 	ldw	r5,64(sp)
   138a4:	100d883a 	mov	r6,r2
   138a8:	180f883a 	mov	r7,r3
   138ac:	000b8840 	call	b884 <__subdf3>
   138b0:	1829883a 	mov	r20,r3
   138b4:	d8c00717 	ldw	r3,28(sp)
   138b8:	84000c04 	addi	r16,r16,48
   138bc:	1023883a 	mov	r17,r2
   138c0:	1c000005 	stb	r16,0(r3)
   138c4:	db001617 	ldw	r12,88(sp)
   138c8:	00800044 	movi	r2,1
   138cc:	60802226 	beq	r12,r2,13958 <_dtoa_r+0x1424>
   138d0:	d9c00717 	ldw	r7,28(sp)
   138d4:	8805883a 	mov	r2,r17
   138d8:	b82b883a 	mov	r21,r23
   138dc:	3b19883a 	add	r12,r7,r12
   138e0:	6023883a 	mov	r17,r12
   138e4:	a007883a 	mov	r3,r20
   138e8:	dc800f15 	stw	r18,60(sp)
   138ec:	000d883a 	mov	r6,zero
   138f0:	01d00934 	movhi	r7,16420
   138f4:	1009883a 	mov	r4,r2
   138f8:	180b883a 	mov	r5,r3
   138fc:	000b16c0 	call	b16c <__muldf3>
   13900:	180b883a 	mov	r5,r3
   13904:	1009883a 	mov	r4,r2
   13908:	1829883a 	mov	r20,r3
   1390c:	1025883a 	mov	r18,r2
   13910:	000c1800 	call	c180 <__fixdfsi>
   13914:	1009883a 	mov	r4,r2
   13918:	1021883a 	mov	r16,r2
   1391c:	000c2000 	call	c200 <__floatsidf>
   13920:	100d883a 	mov	r6,r2
   13924:	180f883a 	mov	r7,r3
   13928:	9009883a 	mov	r4,r18
   1392c:	a00b883a 	mov	r5,r20
   13930:	84000c04 	addi	r16,r16,48
   13934:	000b8840 	call	b884 <__subdf3>
   13938:	ad400044 	addi	r21,r21,1
   1393c:	ac3fffc5 	stb	r16,-1(r21)
   13940:	ac7fea1e 	bne	r21,r17,138ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70138ec>
   13944:	1023883a 	mov	r17,r2
   13948:	d8801217 	ldw	r2,72(sp)
   1394c:	dc800f17 	ldw	r18,60(sp)
   13950:	1829883a 	mov	r20,r3
   13954:	b8af883a 	add	r23,r23,r2
   13958:	d9001417 	ldw	r4,80(sp)
   1395c:	d9401517 	ldw	r5,84(sp)
   13960:	000d883a 	mov	r6,zero
   13964:	01cff834 	movhi	r7,16352
   13968:	0009d800 	call	9d80 <__adddf3>
   1396c:	880d883a 	mov	r6,r17
   13970:	a00f883a 	mov	r7,r20
   13974:	1009883a 	mov	r4,r2
   13978:	180b883a 	mov	r5,r3
   1397c:	000b0780 	call	b078 <__ledf2>
   13980:	10003e0e 	bge	r2,zero,13a7c <_dtoa_r+0x1548>
   13984:	d9001317 	ldw	r4,76(sp)
   13988:	bd3fffc3 	ldbu	r20,-1(r23)
   1398c:	d9000515 	stw	r4,20(sp)
   13990:	003d3b06 	br	12e80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012e80>
   13994:	0027883a 	mov	r19,zero
   13998:	003f1b06 	br	13608 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013608>
   1399c:	d8800817 	ldw	r2,32(sp)
   139a0:	11e9c83a 	sub	r20,r2,r7
   139a4:	0005883a 	mov	r2,zero
   139a8:	003d5406 	br	12efc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012efc>
   139ac:	00800044 	movi	r2,1
   139b0:	003dc706 	br	130d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70130d0>
   139b4:	d8c00217 	ldw	r3,8(sp)
   139b8:	00800d84 	movi	r2,54
   139bc:	dd400a17 	ldw	r21,40(sp)
   139c0:	10c5c83a 	sub	r2,r2,r3
   139c4:	dd000817 	ldw	r20,32(sp)
   139c8:	003d4c06 	br	12efc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012efc>
   139cc:	dc800f15 	stw	r18,60(sp)
   139d0:	dcc01015 	stw	r19,64(sp)
   139d4:	04000084 	movi	r16,2
   139d8:	003bed06 	br	12990 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012990>
   139dc:	d9000617 	ldw	r4,24(sp)
   139e0:	203f0d26 	beq	r4,zero,13618 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013618>
   139e4:	d9800c17 	ldw	r6,48(sp)
   139e8:	01bcab0e 	bge	zero,r6,12c98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012c98>
   139ec:	d9401017 	ldw	r5,64(sp)
   139f0:	d9000f17 	ldw	r4,60(sp)
   139f4:	000d883a 	mov	r6,zero
   139f8:	01d00934 	movhi	r7,16420
   139fc:	000b16c0 	call	b16c <__muldf3>
   13a00:	81000044 	addi	r4,r16,1
   13a04:	d8800f15 	stw	r2,60(sp)
   13a08:	d8c01015 	stw	r3,64(sp)
   13a0c:	000c2000 	call	c200 <__floatsidf>
   13a10:	d9800f17 	ldw	r6,60(sp)
   13a14:	d9c01017 	ldw	r7,64(sp)
   13a18:	1009883a 	mov	r4,r2
   13a1c:	180b883a 	mov	r5,r3
   13a20:	000b16c0 	call	b16c <__muldf3>
   13a24:	01d00734 	movhi	r7,16412
   13a28:	000d883a 	mov	r6,zero
   13a2c:	1009883a 	mov	r4,r2
   13a30:	180b883a 	mov	r5,r3
   13a34:	0009d800 	call	9d80 <__adddf3>
   13a38:	d9c00517 	ldw	r7,20(sp)
   13a3c:	047f3034 	movhi	r17,64704
   13a40:	1021883a 	mov	r16,r2
   13a44:	39ffffc4 	addi	r7,r7,-1
   13a48:	d9c01315 	stw	r7,76(sp)
   13a4c:	1c63883a 	add	r17,r3,r17
   13a50:	db000c17 	ldw	r12,48(sp)
   13a54:	003bea06 	br	12a00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012a00>
   13a58:	dc000915 	stw	r16,36(sp)
   13a5c:	003e0e06 	br	13298 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013298>
   13a60:	01000e44 	movi	r4,57
   13a64:	8825883a 	mov	r18,r17
   13a68:	9dc00044 	addi	r23,r19,1
   13a6c:	99000005 	stb	r4,0(r19)
   13a70:	a023883a 	mov	r17,r20
   13a74:	dc000915 	stw	r16,36(sp)
   13a78:	003da406 	br	1310c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701310c>
   13a7c:	d9801417 	ldw	r6,80(sp)
   13a80:	d9c01517 	ldw	r7,84(sp)
   13a84:	0009883a 	mov	r4,zero
   13a88:	014ff834 	movhi	r5,16352
   13a8c:	000b8840 	call	b884 <__subdf3>
   13a90:	880d883a 	mov	r6,r17
   13a94:	a00f883a 	mov	r7,r20
   13a98:	1009883a 	mov	r4,r2
   13a9c:	180b883a 	mov	r5,r3
   13aa0:	000af9c0 	call	af9c <__gedf2>
   13aa4:	00bc7c0e 	bge	zero,r2,12c98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012c98>
   13aa8:	01000c04 	movi	r4,48
   13aac:	00000106 	br	13ab4 <_dtoa_r+0x1580>
   13ab0:	102f883a 	mov	r23,r2
   13ab4:	b8bfffc4 	addi	r2,r23,-1
   13ab8:	10c00007 	ldb	r3,0(r2)
   13abc:	193ffc26 	beq	r3,r4,13ab0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013ab0>
   13ac0:	d9801317 	ldw	r6,76(sp)
   13ac4:	d9800515 	stw	r6,20(sp)
   13ac8:	003c4406 	br	12bdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bdc>
   13acc:	d9801317 	ldw	r6,76(sp)
   13ad0:	d9800515 	stw	r6,20(sp)
   13ad4:	003cea06 	br	12e80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012e80>
   13ad8:	dd800f17 	ldw	r22,60(sp)
   13adc:	dcc01017 	ldw	r19,64(sp)
   13ae0:	dc801217 	ldw	r18,72(sp)
   13ae4:	003c6c06 	br	12c98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012c98>
   13ae8:	903e031e 	bne	r18,zero,132f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70132f8>
   13aec:	003ebb06 	br	135dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70135dc>
   13af0:	103e6c1e 	bne	r2,zero,134a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70134a4>
   13af4:	4080004c 	andi	r2,r8,1
   13af8:	103e6a26 	beq	r2,zero,134a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70134a4>
   13afc:	003e6606 	br	13498 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013498>
   13b00:	d8c00317 	ldw	r3,12(sp)
   13b04:	00800084 	movi	r2,2
   13b08:	10c02916 	blt	r2,r3,13bb0 <_dtoa_r+0x167c>
   13b0c:	d9000c17 	ldw	r4,48(sp)
   13b10:	003e8806 	br	13534 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013534>
   13b14:	04000084 	movi	r16,2
   13b18:	003b9d06 	br	12990 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012990>
   13b1c:	d9001317 	ldw	r4,76(sp)
   13b20:	d9000515 	stw	r4,20(sp)
   13b24:	003cd606 	br	12e80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012e80>
   13b28:	d8801317 	ldw	r2,76(sp)
   13b2c:	d8800515 	stw	r2,20(sp)
   13b30:	003c2a06 	br	12bdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bdc>
   13b34:	d9800317 	ldw	r6,12(sp)
   13b38:	00800084 	movi	r2,2
   13b3c:	11801516 	blt	r2,r6,13b94 <_dtoa_r+0x1660>
   13b40:	d9c00c17 	ldw	r7,48(sp)
   13b44:	d9c00615 	stw	r7,24(sp)
   13b48:	003df706 	br	13328 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013328>
   13b4c:	193d3926 	beq	r3,r4,13034 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013034>
   13b50:	00c00f04 	movi	r3,60
   13b54:	1885c83a 	sub	r2,r3,r2
   13b58:	003ddf06 	br	132d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70132d8>
   13b5c:	e009883a 	mov	r4,fp
   13b60:	e0001115 	stw	zero,68(fp)
   13b64:	000b883a 	mov	r5,zero
   13b68:	00151540 	call	15154 <_Balloc>
   13b6c:	d8800715 	stw	r2,28(sp)
   13b70:	d8c00717 	ldw	r3,28(sp)
   13b74:	00bfffc4 	movi	r2,-1
   13b78:	01000044 	movi	r4,1
   13b7c:	d8800c15 	stw	r2,48(sp)
   13b80:	e0c01015 	stw	r3,64(fp)
   13b84:	d9000b15 	stw	r4,44(sp)
   13b88:	d8800615 	stw	r2,24(sp)
   13b8c:	d8002215 	stw	zero,136(sp)
   13b90:	003c4106 	br	12c98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012c98>
   13b94:	d8c00c17 	ldw	r3,48(sp)
   13b98:	d8c00615 	stw	r3,24(sp)
   13b9c:	003e7006 	br	13560 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013560>
   13ba0:	04400044 	movi	r17,1
   13ba4:	003b2006 	br	12828 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012828>
   13ba8:	000b883a 	mov	r5,zero
   13bac:	003b3d06 	br	128a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70128a4>
   13bb0:	d8800c17 	ldw	r2,48(sp)
   13bb4:	d8800615 	stw	r2,24(sp)
   13bb8:	003e6906 	br	13560 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013560>

00013bbc <__sflush_r>:
   13bbc:	2880030b 	ldhu	r2,12(r5)
   13bc0:	defffb04 	addi	sp,sp,-20
   13bc4:	dcc00315 	stw	r19,12(sp)
   13bc8:	dc400115 	stw	r17,4(sp)
   13bcc:	dfc00415 	stw	ra,16(sp)
   13bd0:	dc800215 	stw	r18,8(sp)
   13bd4:	dc000015 	stw	r16,0(sp)
   13bd8:	10c0020c 	andi	r3,r2,8
   13bdc:	2823883a 	mov	r17,r5
   13be0:	2027883a 	mov	r19,r4
   13be4:	1800311e 	bne	r3,zero,13cac <__sflush_r+0xf0>
   13be8:	28c00117 	ldw	r3,4(r5)
   13bec:	10820014 	ori	r2,r2,2048
   13bf0:	2880030d 	sth	r2,12(r5)
   13bf4:	00c04b0e 	bge	zero,r3,13d24 <__sflush_r+0x168>
   13bf8:	8a000a17 	ldw	r8,40(r17)
   13bfc:	40002326 	beq	r8,zero,13c8c <__sflush_r+0xd0>
   13c00:	9c000017 	ldw	r16,0(r19)
   13c04:	10c4000c 	andi	r3,r2,4096
   13c08:	98000015 	stw	zero,0(r19)
   13c0c:	18004826 	beq	r3,zero,13d30 <__sflush_r+0x174>
   13c10:	89801417 	ldw	r6,80(r17)
   13c14:	10c0010c 	andi	r3,r2,4
   13c18:	18000626 	beq	r3,zero,13c34 <__sflush_r+0x78>
   13c1c:	88c00117 	ldw	r3,4(r17)
   13c20:	88800c17 	ldw	r2,48(r17)
   13c24:	30cdc83a 	sub	r6,r6,r3
   13c28:	10000226 	beq	r2,zero,13c34 <__sflush_r+0x78>
   13c2c:	88800f17 	ldw	r2,60(r17)
   13c30:	308dc83a 	sub	r6,r6,r2
   13c34:	89400717 	ldw	r5,28(r17)
   13c38:	000f883a 	mov	r7,zero
   13c3c:	9809883a 	mov	r4,r19
   13c40:	403ee83a 	callr	r8
   13c44:	00ffffc4 	movi	r3,-1
   13c48:	10c04426 	beq	r2,r3,13d5c <__sflush_r+0x1a0>
   13c4c:	88c0030b 	ldhu	r3,12(r17)
   13c50:	89000417 	ldw	r4,16(r17)
   13c54:	88000115 	stw	zero,4(r17)
   13c58:	197dffcc 	andi	r5,r3,63487
   13c5c:	8940030d 	sth	r5,12(r17)
   13c60:	89000015 	stw	r4,0(r17)
   13c64:	18c4000c 	andi	r3,r3,4096
   13c68:	18002c1e 	bne	r3,zero,13d1c <__sflush_r+0x160>
   13c6c:	89400c17 	ldw	r5,48(r17)
   13c70:	9c000015 	stw	r16,0(r19)
   13c74:	28000526 	beq	r5,zero,13c8c <__sflush_r+0xd0>
   13c78:	88801004 	addi	r2,r17,64
   13c7c:	28800226 	beq	r5,r2,13c88 <__sflush_r+0xcc>
   13c80:	9809883a 	mov	r4,r19
   13c84:	00143280 	call	14328 <_free_r>
   13c88:	88000c15 	stw	zero,48(r17)
   13c8c:	0005883a 	mov	r2,zero
   13c90:	dfc00417 	ldw	ra,16(sp)
   13c94:	dcc00317 	ldw	r19,12(sp)
   13c98:	dc800217 	ldw	r18,8(sp)
   13c9c:	dc400117 	ldw	r17,4(sp)
   13ca0:	dc000017 	ldw	r16,0(sp)
   13ca4:	dec00504 	addi	sp,sp,20
   13ca8:	f800283a 	ret
   13cac:	2c800417 	ldw	r18,16(r5)
   13cb0:	903ff626 	beq	r18,zero,13c8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013c8c>
   13cb4:	2c000017 	ldw	r16,0(r5)
   13cb8:	108000cc 	andi	r2,r2,3
   13cbc:	2c800015 	stw	r18,0(r5)
   13cc0:	84a1c83a 	sub	r16,r16,r18
   13cc4:	1000131e 	bne	r2,zero,13d14 <__sflush_r+0x158>
   13cc8:	28800517 	ldw	r2,20(r5)
   13ccc:	88800215 	stw	r2,8(r17)
   13cd0:	04000316 	blt	zero,r16,13ce0 <__sflush_r+0x124>
   13cd4:	003fed06 	br	13c8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013c8c>
   13cd8:	90a5883a 	add	r18,r18,r2
   13cdc:	043feb0e 	bge	zero,r16,13c8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013c8c>
   13ce0:	88800917 	ldw	r2,36(r17)
   13ce4:	89400717 	ldw	r5,28(r17)
   13ce8:	800f883a 	mov	r7,r16
   13cec:	900d883a 	mov	r6,r18
   13cf0:	9809883a 	mov	r4,r19
   13cf4:	103ee83a 	callr	r2
   13cf8:	80a1c83a 	sub	r16,r16,r2
   13cfc:	00bff616 	blt	zero,r2,13cd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013cd8>
   13d00:	88c0030b 	ldhu	r3,12(r17)
   13d04:	00bfffc4 	movi	r2,-1
   13d08:	18c01014 	ori	r3,r3,64
   13d0c:	88c0030d 	sth	r3,12(r17)
   13d10:	003fdf06 	br	13c90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013c90>
   13d14:	0005883a 	mov	r2,zero
   13d18:	003fec06 	br	13ccc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013ccc>
   13d1c:	88801415 	stw	r2,80(r17)
   13d20:	003fd206 	br	13c6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013c6c>
   13d24:	28c00f17 	ldw	r3,60(r5)
   13d28:	00ffb316 	blt	zero,r3,13bf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013bf8>
   13d2c:	003fd706 	br	13c8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013c8c>
   13d30:	89400717 	ldw	r5,28(r17)
   13d34:	000d883a 	mov	r6,zero
   13d38:	01c00044 	movi	r7,1
   13d3c:	9809883a 	mov	r4,r19
   13d40:	403ee83a 	callr	r8
   13d44:	100d883a 	mov	r6,r2
   13d48:	00bfffc4 	movi	r2,-1
   13d4c:	30801426 	beq	r6,r2,13da0 <__sflush_r+0x1e4>
   13d50:	8880030b 	ldhu	r2,12(r17)
   13d54:	8a000a17 	ldw	r8,40(r17)
   13d58:	003fae06 	br	13c14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013c14>
   13d5c:	98c00017 	ldw	r3,0(r19)
   13d60:	183fba26 	beq	r3,zero,13c4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013c4c>
   13d64:	01000744 	movi	r4,29
   13d68:	19000626 	beq	r3,r4,13d84 <__sflush_r+0x1c8>
   13d6c:	01000584 	movi	r4,22
   13d70:	19000426 	beq	r3,r4,13d84 <__sflush_r+0x1c8>
   13d74:	88c0030b 	ldhu	r3,12(r17)
   13d78:	18c01014 	ori	r3,r3,64
   13d7c:	88c0030d 	sth	r3,12(r17)
   13d80:	003fc306 	br	13c90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013c90>
   13d84:	8880030b 	ldhu	r2,12(r17)
   13d88:	88c00417 	ldw	r3,16(r17)
   13d8c:	88000115 	stw	zero,4(r17)
   13d90:	10bdffcc 	andi	r2,r2,63487
   13d94:	8880030d 	sth	r2,12(r17)
   13d98:	88c00015 	stw	r3,0(r17)
   13d9c:	003fb306 	br	13c6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013c6c>
   13da0:	98800017 	ldw	r2,0(r19)
   13da4:	103fea26 	beq	r2,zero,13d50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013d50>
   13da8:	00c00744 	movi	r3,29
   13dac:	10c00226 	beq	r2,r3,13db8 <__sflush_r+0x1fc>
   13db0:	00c00584 	movi	r3,22
   13db4:	10c0031e 	bne	r2,r3,13dc4 <__sflush_r+0x208>
   13db8:	9c000015 	stw	r16,0(r19)
   13dbc:	0005883a 	mov	r2,zero
   13dc0:	003fb306 	br	13c90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013c90>
   13dc4:	88c0030b 	ldhu	r3,12(r17)
   13dc8:	3005883a 	mov	r2,r6
   13dcc:	18c01014 	ori	r3,r3,64
   13dd0:	88c0030d 	sth	r3,12(r17)
   13dd4:	003fae06 	br	13c90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013c90>

00013dd8 <_fflush_r>:
   13dd8:	defffd04 	addi	sp,sp,-12
   13ddc:	dc000115 	stw	r16,4(sp)
   13de0:	dfc00215 	stw	ra,8(sp)
   13de4:	2021883a 	mov	r16,r4
   13de8:	20000226 	beq	r4,zero,13df4 <_fflush_r+0x1c>
   13dec:	20800e17 	ldw	r2,56(r4)
   13df0:	10000c26 	beq	r2,zero,13e24 <_fflush_r+0x4c>
   13df4:	2880030f 	ldh	r2,12(r5)
   13df8:	1000051e 	bne	r2,zero,13e10 <_fflush_r+0x38>
   13dfc:	0005883a 	mov	r2,zero
   13e00:	dfc00217 	ldw	ra,8(sp)
   13e04:	dc000117 	ldw	r16,4(sp)
   13e08:	dec00304 	addi	sp,sp,12
   13e0c:	f800283a 	ret
   13e10:	8009883a 	mov	r4,r16
   13e14:	dfc00217 	ldw	ra,8(sp)
   13e18:	dc000117 	ldw	r16,4(sp)
   13e1c:	dec00304 	addi	sp,sp,12
   13e20:	0013bbc1 	jmpi	13bbc <__sflush_r>
   13e24:	d9400015 	stw	r5,0(sp)
   13e28:	00141b40 	call	141b4 <__sinit>
   13e2c:	d9400017 	ldw	r5,0(sp)
   13e30:	003ff006 	br	13df4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013df4>

00013e34 <fflush>:
   13e34:	20000526 	beq	r4,zero,13e4c <fflush+0x18>
   13e38:	008000f4 	movhi	r2,3
   13e3c:	10a9b404 	addi	r2,r2,-22832
   13e40:	200b883a 	mov	r5,r4
   13e44:	11000017 	ldw	r4,0(r2)
   13e48:	0013dd81 	jmpi	13dd8 <_fflush_r>
   13e4c:	008000f4 	movhi	r2,3
   13e50:	10a9b304 	addi	r2,r2,-22836
   13e54:	11000017 	ldw	r4,0(r2)
   13e58:	01400074 	movhi	r5,1
   13e5c:	294f7604 	addi	r5,r5,15832
   13e60:	0014bb81 	jmpi	14bb8 <_fwalk_reent>

00013e64 <__fp_unlock>:
   13e64:	0005883a 	mov	r2,zero
   13e68:	f800283a 	ret

00013e6c <_cleanup_r>:
   13e6c:	014000b4 	movhi	r5,2
   13e70:	2964ef04 	addi	r5,r5,-27716
   13e74:	0014bb81 	jmpi	14bb8 <_fwalk_reent>

00013e78 <__sinit.part.1>:
   13e78:	defff704 	addi	sp,sp,-36
   13e7c:	00c00074 	movhi	r3,1
   13e80:	dfc00815 	stw	ra,32(sp)
   13e84:	ddc00715 	stw	r23,28(sp)
   13e88:	dd800615 	stw	r22,24(sp)
   13e8c:	dd400515 	stw	r21,20(sp)
   13e90:	dd000415 	stw	r20,16(sp)
   13e94:	dcc00315 	stw	r19,12(sp)
   13e98:	dc800215 	stw	r18,8(sp)
   13e9c:	dc400115 	stw	r17,4(sp)
   13ea0:	dc000015 	stw	r16,0(sp)
   13ea4:	18cf9b04 	addi	r3,r3,15980
   13ea8:	24000117 	ldw	r16,4(r4)
   13eac:	20c00f15 	stw	r3,60(r4)
   13eb0:	2080bb04 	addi	r2,r4,748
   13eb4:	00c000c4 	movi	r3,3
   13eb8:	20c0b915 	stw	r3,740(r4)
   13ebc:	2080ba15 	stw	r2,744(r4)
   13ec0:	2000b815 	stw	zero,736(r4)
   13ec4:	05c00204 	movi	r23,8
   13ec8:	00800104 	movi	r2,4
   13ecc:	2025883a 	mov	r18,r4
   13ed0:	b80d883a 	mov	r6,r23
   13ed4:	81001704 	addi	r4,r16,92
   13ed8:	000b883a 	mov	r5,zero
   13edc:	80000015 	stw	zero,0(r16)
   13ee0:	80000115 	stw	zero,4(r16)
   13ee4:	80000215 	stw	zero,8(r16)
   13ee8:	8080030d 	sth	r2,12(r16)
   13eec:	80001915 	stw	zero,100(r16)
   13ef0:	8000038d 	sth	zero,14(r16)
   13ef4:	80000415 	stw	zero,16(r16)
   13ef8:	80000515 	stw	zero,20(r16)
   13efc:	80000615 	stw	zero,24(r16)
   13f00:	000d4c80 	call	d4c8 <memset>
   13f04:	05800074 	movhi	r22,1
   13f08:	94400217 	ldw	r17,8(r18)
   13f0c:	05400074 	movhi	r21,1
   13f10:	05000074 	movhi	r20,1
   13f14:	04c00074 	movhi	r19,1
   13f18:	b599ad04 	addi	r22,r22,26292
   13f1c:	ad59c404 	addi	r21,r21,26384
   13f20:	a519e304 	addi	r20,r20,26508
   13f24:	9cd9fa04 	addi	r19,r19,26600
   13f28:	85800815 	stw	r22,32(r16)
   13f2c:	85400915 	stw	r21,36(r16)
   13f30:	85000a15 	stw	r20,40(r16)
   13f34:	84c00b15 	stw	r19,44(r16)
   13f38:	84000715 	stw	r16,28(r16)
   13f3c:	00800284 	movi	r2,10
   13f40:	8880030d 	sth	r2,12(r17)
   13f44:	00800044 	movi	r2,1
   13f48:	b80d883a 	mov	r6,r23
   13f4c:	89001704 	addi	r4,r17,92
   13f50:	000b883a 	mov	r5,zero
   13f54:	88000015 	stw	zero,0(r17)
   13f58:	88000115 	stw	zero,4(r17)
   13f5c:	88000215 	stw	zero,8(r17)
   13f60:	88001915 	stw	zero,100(r17)
   13f64:	8880038d 	sth	r2,14(r17)
   13f68:	88000415 	stw	zero,16(r17)
   13f6c:	88000515 	stw	zero,20(r17)
   13f70:	88000615 	stw	zero,24(r17)
   13f74:	000d4c80 	call	d4c8 <memset>
   13f78:	94000317 	ldw	r16,12(r18)
   13f7c:	00800484 	movi	r2,18
   13f80:	8c400715 	stw	r17,28(r17)
   13f84:	8d800815 	stw	r22,32(r17)
   13f88:	8d400915 	stw	r21,36(r17)
   13f8c:	8d000a15 	stw	r20,40(r17)
   13f90:	8cc00b15 	stw	r19,44(r17)
   13f94:	8080030d 	sth	r2,12(r16)
   13f98:	00800084 	movi	r2,2
   13f9c:	80000015 	stw	zero,0(r16)
   13fa0:	80000115 	stw	zero,4(r16)
   13fa4:	80000215 	stw	zero,8(r16)
   13fa8:	80001915 	stw	zero,100(r16)
   13fac:	8080038d 	sth	r2,14(r16)
   13fb0:	80000415 	stw	zero,16(r16)
   13fb4:	80000515 	stw	zero,20(r16)
   13fb8:	80000615 	stw	zero,24(r16)
   13fbc:	b80d883a 	mov	r6,r23
   13fc0:	000b883a 	mov	r5,zero
   13fc4:	81001704 	addi	r4,r16,92
   13fc8:	000d4c80 	call	d4c8 <memset>
   13fcc:	00800044 	movi	r2,1
   13fd0:	84000715 	stw	r16,28(r16)
   13fd4:	85800815 	stw	r22,32(r16)
   13fd8:	85400915 	stw	r21,36(r16)
   13fdc:	85000a15 	stw	r20,40(r16)
   13fe0:	84c00b15 	stw	r19,44(r16)
   13fe4:	90800e15 	stw	r2,56(r18)
   13fe8:	dfc00817 	ldw	ra,32(sp)
   13fec:	ddc00717 	ldw	r23,28(sp)
   13ff0:	dd800617 	ldw	r22,24(sp)
   13ff4:	dd400517 	ldw	r21,20(sp)
   13ff8:	dd000417 	ldw	r20,16(sp)
   13ffc:	dcc00317 	ldw	r19,12(sp)
   14000:	dc800217 	ldw	r18,8(sp)
   14004:	dc400117 	ldw	r17,4(sp)
   14008:	dc000017 	ldw	r16,0(sp)
   1400c:	dec00904 	addi	sp,sp,36
   14010:	f800283a 	ret

00014014 <__fp_lock>:
   14014:	0005883a 	mov	r2,zero
   14018:	f800283a 	ret

0001401c <__sfmoreglue>:
   1401c:	defffc04 	addi	sp,sp,-16
   14020:	dc400115 	stw	r17,4(sp)
   14024:	2c7fffc4 	addi	r17,r5,-1
   14028:	8c401a24 	muli	r17,r17,104
   1402c:	dc800215 	stw	r18,8(sp)
   14030:	2825883a 	mov	r18,r5
   14034:	89401d04 	addi	r5,r17,116
   14038:	dc000015 	stw	r16,0(sp)
   1403c:	dfc00315 	stw	ra,12(sp)
   14040:	000cb740 	call	cb74 <_malloc_r>
   14044:	1021883a 	mov	r16,r2
   14048:	10000726 	beq	r2,zero,14068 <__sfmoreglue+0x4c>
   1404c:	11000304 	addi	r4,r2,12
   14050:	10000015 	stw	zero,0(r2)
   14054:	14800115 	stw	r18,4(r2)
   14058:	11000215 	stw	r4,8(r2)
   1405c:	89801a04 	addi	r6,r17,104
   14060:	000b883a 	mov	r5,zero
   14064:	000d4c80 	call	d4c8 <memset>
   14068:	8005883a 	mov	r2,r16
   1406c:	dfc00317 	ldw	ra,12(sp)
   14070:	dc800217 	ldw	r18,8(sp)
   14074:	dc400117 	ldw	r17,4(sp)
   14078:	dc000017 	ldw	r16,0(sp)
   1407c:	dec00404 	addi	sp,sp,16
   14080:	f800283a 	ret

00014084 <__sfp>:
   14084:	defffb04 	addi	sp,sp,-20
   14088:	dc000015 	stw	r16,0(sp)
   1408c:	040000f4 	movhi	r16,3
   14090:	8429b304 	addi	r16,r16,-22836
   14094:	dcc00315 	stw	r19,12(sp)
   14098:	2027883a 	mov	r19,r4
   1409c:	81000017 	ldw	r4,0(r16)
   140a0:	dfc00415 	stw	ra,16(sp)
   140a4:	dc800215 	stw	r18,8(sp)
   140a8:	20800e17 	ldw	r2,56(r4)
   140ac:	dc400115 	stw	r17,4(sp)
   140b0:	1000021e 	bne	r2,zero,140bc <__sfp+0x38>
   140b4:	0013e780 	call	13e78 <__sinit.part.1>
   140b8:	81000017 	ldw	r4,0(r16)
   140bc:	2480b804 	addi	r18,r4,736
   140c0:	047fffc4 	movi	r17,-1
   140c4:	91000117 	ldw	r4,4(r18)
   140c8:	94000217 	ldw	r16,8(r18)
   140cc:	213fffc4 	addi	r4,r4,-1
   140d0:	20000a16 	blt	r4,zero,140fc <__sfp+0x78>
   140d4:	8080030f 	ldh	r2,12(r16)
   140d8:	10000c26 	beq	r2,zero,1410c <__sfp+0x88>
   140dc:	80c01d04 	addi	r3,r16,116
   140e0:	00000206 	br	140ec <__sfp+0x68>
   140e4:	18bfe60f 	ldh	r2,-104(r3)
   140e8:	10000826 	beq	r2,zero,1410c <__sfp+0x88>
   140ec:	213fffc4 	addi	r4,r4,-1
   140f0:	1c3ffd04 	addi	r16,r3,-12
   140f4:	18c01a04 	addi	r3,r3,104
   140f8:	247ffa1e 	bne	r4,r17,140e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70140e4>
   140fc:	90800017 	ldw	r2,0(r18)
   14100:	10001d26 	beq	r2,zero,14178 <__sfp+0xf4>
   14104:	1025883a 	mov	r18,r2
   14108:	003fee06 	br	140c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70140c4>
   1410c:	00bfffc4 	movi	r2,-1
   14110:	8080038d 	sth	r2,14(r16)
   14114:	00800044 	movi	r2,1
   14118:	8080030d 	sth	r2,12(r16)
   1411c:	80001915 	stw	zero,100(r16)
   14120:	80000015 	stw	zero,0(r16)
   14124:	80000215 	stw	zero,8(r16)
   14128:	80000115 	stw	zero,4(r16)
   1412c:	80000415 	stw	zero,16(r16)
   14130:	80000515 	stw	zero,20(r16)
   14134:	80000615 	stw	zero,24(r16)
   14138:	01800204 	movi	r6,8
   1413c:	000b883a 	mov	r5,zero
   14140:	81001704 	addi	r4,r16,92
   14144:	000d4c80 	call	d4c8 <memset>
   14148:	8005883a 	mov	r2,r16
   1414c:	80000c15 	stw	zero,48(r16)
   14150:	80000d15 	stw	zero,52(r16)
   14154:	80001115 	stw	zero,68(r16)
   14158:	80001215 	stw	zero,72(r16)
   1415c:	dfc00417 	ldw	ra,16(sp)
   14160:	dcc00317 	ldw	r19,12(sp)
   14164:	dc800217 	ldw	r18,8(sp)
   14168:	dc400117 	ldw	r17,4(sp)
   1416c:	dc000017 	ldw	r16,0(sp)
   14170:	dec00504 	addi	sp,sp,20
   14174:	f800283a 	ret
   14178:	01400104 	movi	r5,4
   1417c:	9809883a 	mov	r4,r19
   14180:	001401c0 	call	1401c <__sfmoreglue>
   14184:	90800015 	stw	r2,0(r18)
   14188:	103fde1e 	bne	r2,zero,14104 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014104>
   1418c:	00800304 	movi	r2,12
   14190:	98800015 	stw	r2,0(r19)
   14194:	0005883a 	mov	r2,zero
   14198:	003ff006 	br	1415c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701415c>

0001419c <_cleanup>:
   1419c:	008000f4 	movhi	r2,3
   141a0:	10a9b304 	addi	r2,r2,-22836
   141a4:	11000017 	ldw	r4,0(r2)
   141a8:	014000b4 	movhi	r5,2
   141ac:	2964ef04 	addi	r5,r5,-27716
   141b0:	0014bb81 	jmpi	14bb8 <_fwalk_reent>

000141b4 <__sinit>:
   141b4:	20800e17 	ldw	r2,56(r4)
   141b8:	10000126 	beq	r2,zero,141c0 <__sinit+0xc>
   141bc:	f800283a 	ret
   141c0:	0013e781 	jmpi	13e78 <__sinit.part.1>

000141c4 <__sfp_lock_acquire>:
   141c4:	f800283a 	ret

000141c8 <__sfp_lock_release>:
   141c8:	f800283a 	ret

000141cc <__sinit_lock_acquire>:
   141cc:	f800283a 	ret

000141d0 <__sinit_lock_release>:
   141d0:	f800283a 	ret

000141d4 <__fp_lock_all>:
   141d4:	008000f4 	movhi	r2,3
   141d8:	10a9b404 	addi	r2,r2,-22832
   141dc:	11000017 	ldw	r4,0(r2)
   141e0:	01400074 	movhi	r5,1
   141e4:	29500504 	addi	r5,r5,16404
   141e8:	0014af41 	jmpi	14af4 <_fwalk>

000141ec <__fp_unlock_all>:
   141ec:	008000f4 	movhi	r2,3
   141f0:	10a9b404 	addi	r2,r2,-22832
   141f4:	11000017 	ldw	r4,0(r2)
   141f8:	01400074 	movhi	r5,1
   141fc:	294f9904 	addi	r5,r5,15972
   14200:	0014af41 	jmpi	14af4 <_fwalk>

00014204 <_malloc_trim_r>:
   14204:	defffb04 	addi	sp,sp,-20
   14208:	dcc00315 	stw	r19,12(sp)
   1420c:	04c000f4 	movhi	r19,3
   14210:	dc800215 	stw	r18,8(sp)
   14214:	dc400115 	stw	r17,4(sp)
   14218:	dc000015 	stw	r16,0(sp)
   1421c:	dfc00415 	stw	ra,16(sp)
   14220:	2821883a 	mov	r16,r5
   14224:	9ce2f804 	addi	r19,r19,-29728
   14228:	2025883a 	mov	r18,r4
   1422c:	001b2f00 	call	1b2f0 <__malloc_lock>
   14230:	98800217 	ldw	r2,8(r19)
   14234:	14400117 	ldw	r17,4(r2)
   14238:	00bfff04 	movi	r2,-4
   1423c:	88a2703a 	and	r17,r17,r2
   14240:	8c21c83a 	sub	r16,r17,r16
   14244:	8403fbc4 	addi	r16,r16,4079
   14248:	8020d33a 	srli	r16,r16,12
   1424c:	0083ffc4 	movi	r2,4095
   14250:	843fffc4 	addi	r16,r16,-1
   14254:	8020933a 	slli	r16,r16,12
   14258:	1400060e 	bge	r2,r16,14274 <_malloc_trim_r+0x70>
   1425c:	000b883a 	mov	r5,zero
   14260:	9009883a 	mov	r4,r18
   14264:	000d7a80 	call	d7a8 <_sbrk_r>
   14268:	98c00217 	ldw	r3,8(r19)
   1426c:	1c47883a 	add	r3,r3,r17
   14270:	10c00a26 	beq	r2,r3,1429c <_malloc_trim_r+0x98>
   14274:	9009883a 	mov	r4,r18
   14278:	001b4100 	call	1b410 <__malloc_unlock>
   1427c:	0005883a 	mov	r2,zero
   14280:	dfc00417 	ldw	ra,16(sp)
   14284:	dcc00317 	ldw	r19,12(sp)
   14288:	dc800217 	ldw	r18,8(sp)
   1428c:	dc400117 	ldw	r17,4(sp)
   14290:	dc000017 	ldw	r16,0(sp)
   14294:	dec00504 	addi	sp,sp,20
   14298:	f800283a 	ret
   1429c:	040bc83a 	sub	r5,zero,r16
   142a0:	9009883a 	mov	r4,r18
   142a4:	000d7a80 	call	d7a8 <_sbrk_r>
   142a8:	00ffffc4 	movi	r3,-1
   142ac:	10c00d26 	beq	r2,r3,142e4 <_malloc_trim_r+0xe0>
   142b0:	00c00134 	movhi	r3,4
   142b4:	18e20304 	addi	r3,r3,-30708
   142b8:	18800017 	ldw	r2,0(r3)
   142bc:	99000217 	ldw	r4,8(r19)
   142c0:	8c23c83a 	sub	r17,r17,r16
   142c4:	8c400054 	ori	r17,r17,1
   142c8:	1421c83a 	sub	r16,r2,r16
   142cc:	24400115 	stw	r17,4(r4)
   142d0:	9009883a 	mov	r4,r18
   142d4:	1c000015 	stw	r16,0(r3)
   142d8:	001b4100 	call	1b410 <__malloc_unlock>
   142dc:	00800044 	movi	r2,1
   142e0:	003fe706 	br	14280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014280>
   142e4:	000b883a 	mov	r5,zero
   142e8:	9009883a 	mov	r4,r18
   142ec:	000d7a80 	call	d7a8 <_sbrk_r>
   142f0:	99000217 	ldw	r4,8(r19)
   142f4:	014003c4 	movi	r5,15
   142f8:	1107c83a 	sub	r3,r2,r4
   142fc:	28ffdd0e 	bge	r5,r3,14274 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014274>
   14300:	014000f4 	movhi	r5,3
   14304:	2969b504 	addi	r5,r5,-22828
   14308:	29400017 	ldw	r5,0(r5)
   1430c:	18c00054 	ori	r3,r3,1
   14310:	20c00115 	stw	r3,4(r4)
   14314:	00c00134 	movhi	r3,4
   14318:	1145c83a 	sub	r2,r2,r5
   1431c:	18e20304 	addi	r3,r3,-30708
   14320:	18800015 	stw	r2,0(r3)
   14324:	003fd306 	br	14274 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014274>

00014328 <_free_r>:
   14328:	28004126 	beq	r5,zero,14430 <_free_r+0x108>
   1432c:	defffd04 	addi	sp,sp,-12
   14330:	dc400115 	stw	r17,4(sp)
   14334:	dc000015 	stw	r16,0(sp)
   14338:	2023883a 	mov	r17,r4
   1433c:	2821883a 	mov	r16,r5
   14340:	dfc00215 	stw	ra,8(sp)
   14344:	001b2f00 	call	1b2f0 <__malloc_lock>
   14348:	81ffff17 	ldw	r7,-4(r16)
   1434c:	00bfff84 	movi	r2,-2
   14350:	010000f4 	movhi	r4,3
   14354:	81bffe04 	addi	r6,r16,-8
   14358:	3884703a 	and	r2,r7,r2
   1435c:	2122f804 	addi	r4,r4,-29728
   14360:	308b883a 	add	r5,r6,r2
   14364:	2a400117 	ldw	r9,4(r5)
   14368:	22000217 	ldw	r8,8(r4)
   1436c:	00ffff04 	movi	r3,-4
   14370:	48c6703a 	and	r3,r9,r3
   14374:	2a005726 	beq	r5,r8,144d4 <_free_r+0x1ac>
   14378:	28c00115 	stw	r3,4(r5)
   1437c:	39c0004c 	andi	r7,r7,1
   14380:	3800091e 	bne	r7,zero,143a8 <_free_r+0x80>
   14384:	823ffe17 	ldw	r8,-8(r16)
   14388:	22400204 	addi	r9,r4,8
   1438c:	320dc83a 	sub	r6,r6,r8
   14390:	31c00217 	ldw	r7,8(r6)
   14394:	1205883a 	add	r2,r2,r8
   14398:	3a406526 	beq	r7,r9,14530 <_free_r+0x208>
   1439c:	32000317 	ldw	r8,12(r6)
   143a0:	3a000315 	stw	r8,12(r7)
   143a4:	41c00215 	stw	r7,8(r8)
   143a8:	28cf883a 	add	r7,r5,r3
   143ac:	39c00117 	ldw	r7,4(r7)
   143b0:	39c0004c 	andi	r7,r7,1
   143b4:	38003a26 	beq	r7,zero,144a0 <_free_r+0x178>
   143b8:	10c00054 	ori	r3,r2,1
   143bc:	30c00115 	stw	r3,4(r6)
   143c0:	3087883a 	add	r3,r6,r2
   143c4:	18800015 	stw	r2,0(r3)
   143c8:	00c07fc4 	movi	r3,511
   143cc:	18801936 	bltu	r3,r2,14434 <_free_r+0x10c>
   143d0:	1004d0fa 	srli	r2,r2,3
   143d4:	01c00044 	movi	r7,1
   143d8:	21400117 	ldw	r5,4(r4)
   143dc:	10c00044 	addi	r3,r2,1
   143e0:	18c7883a 	add	r3,r3,r3
   143e4:	1005d0ba 	srai	r2,r2,2
   143e8:	18c7883a 	add	r3,r3,r3
   143ec:	18c7883a 	add	r3,r3,r3
   143f0:	1907883a 	add	r3,r3,r4
   143f4:	3884983a 	sll	r2,r7,r2
   143f8:	19c00017 	ldw	r7,0(r3)
   143fc:	1a3ffe04 	addi	r8,r3,-8
   14400:	1144b03a 	or	r2,r2,r5
   14404:	32000315 	stw	r8,12(r6)
   14408:	31c00215 	stw	r7,8(r6)
   1440c:	20800115 	stw	r2,4(r4)
   14410:	19800015 	stw	r6,0(r3)
   14414:	39800315 	stw	r6,12(r7)
   14418:	8809883a 	mov	r4,r17
   1441c:	dfc00217 	ldw	ra,8(sp)
   14420:	dc400117 	ldw	r17,4(sp)
   14424:	dc000017 	ldw	r16,0(sp)
   14428:	dec00304 	addi	sp,sp,12
   1442c:	001b4101 	jmpi	1b410 <__malloc_unlock>
   14430:	f800283a 	ret
   14434:	100ad27a 	srli	r5,r2,9
   14438:	00c00104 	movi	r3,4
   1443c:	19404a36 	bltu	r3,r5,14568 <_free_r+0x240>
   14440:	100ad1ba 	srli	r5,r2,6
   14444:	28c00e44 	addi	r3,r5,57
   14448:	18c7883a 	add	r3,r3,r3
   1444c:	29400e04 	addi	r5,r5,56
   14450:	18c7883a 	add	r3,r3,r3
   14454:	18c7883a 	add	r3,r3,r3
   14458:	1909883a 	add	r4,r3,r4
   1445c:	20c00017 	ldw	r3,0(r4)
   14460:	01c000f4 	movhi	r7,3
   14464:	213ffe04 	addi	r4,r4,-8
   14468:	39e2f804 	addi	r7,r7,-29728
   1446c:	20c04426 	beq	r4,r3,14580 <_free_r+0x258>
   14470:	01ffff04 	movi	r7,-4
   14474:	19400117 	ldw	r5,4(r3)
   14478:	29ca703a 	and	r5,r5,r7
   1447c:	1140022e 	bgeu	r2,r5,14488 <_free_r+0x160>
   14480:	18c00217 	ldw	r3,8(r3)
   14484:	20fffb1e 	bne	r4,r3,14474 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014474>
   14488:	19000317 	ldw	r4,12(r3)
   1448c:	31000315 	stw	r4,12(r6)
   14490:	30c00215 	stw	r3,8(r6)
   14494:	21800215 	stw	r6,8(r4)
   14498:	19800315 	stw	r6,12(r3)
   1449c:	003fde06 	br	14418 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014418>
   144a0:	29c00217 	ldw	r7,8(r5)
   144a4:	10c5883a 	add	r2,r2,r3
   144a8:	00c000f4 	movhi	r3,3
   144ac:	18e2fa04 	addi	r3,r3,-29720
   144b0:	38c03b26 	beq	r7,r3,145a0 <_free_r+0x278>
   144b4:	2a000317 	ldw	r8,12(r5)
   144b8:	11400054 	ori	r5,r2,1
   144bc:	3087883a 	add	r3,r6,r2
   144c0:	3a000315 	stw	r8,12(r7)
   144c4:	41c00215 	stw	r7,8(r8)
   144c8:	31400115 	stw	r5,4(r6)
   144cc:	18800015 	stw	r2,0(r3)
   144d0:	003fbd06 	br	143c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70143c8>
   144d4:	39c0004c 	andi	r7,r7,1
   144d8:	10c5883a 	add	r2,r2,r3
   144dc:	3800071e 	bne	r7,zero,144fc <_free_r+0x1d4>
   144e0:	81fffe17 	ldw	r7,-8(r16)
   144e4:	31cdc83a 	sub	r6,r6,r7
   144e8:	30c00317 	ldw	r3,12(r6)
   144ec:	31400217 	ldw	r5,8(r6)
   144f0:	11c5883a 	add	r2,r2,r7
   144f4:	28c00315 	stw	r3,12(r5)
   144f8:	19400215 	stw	r5,8(r3)
   144fc:	10c00054 	ori	r3,r2,1
   14500:	30c00115 	stw	r3,4(r6)
   14504:	00c000f4 	movhi	r3,3
   14508:	18e9b604 	addi	r3,r3,-22824
   1450c:	18c00017 	ldw	r3,0(r3)
   14510:	21800215 	stw	r6,8(r4)
   14514:	10ffc036 	bltu	r2,r3,14418 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014418>
   14518:	008000f4 	movhi	r2,3
   1451c:	10b1da04 	addi	r2,r2,-14488
   14520:	11400017 	ldw	r5,0(r2)
   14524:	8809883a 	mov	r4,r17
   14528:	00142040 	call	14204 <_malloc_trim_r>
   1452c:	003fba06 	br	14418 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014418>
   14530:	28c9883a 	add	r4,r5,r3
   14534:	21000117 	ldw	r4,4(r4)
   14538:	2100004c 	andi	r4,r4,1
   1453c:	2000391e 	bne	r4,zero,14624 <_free_r+0x2fc>
   14540:	29c00217 	ldw	r7,8(r5)
   14544:	29000317 	ldw	r4,12(r5)
   14548:	1885883a 	add	r2,r3,r2
   1454c:	10c00054 	ori	r3,r2,1
   14550:	39000315 	stw	r4,12(r7)
   14554:	21c00215 	stw	r7,8(r4)
   14558:	30c00115 	stw	r3,4(r6)
   1455c:	308d883a 	add	r6,r6,r2
   14560:	30800015 	stw	r2,0(r6)
   14564:	003fac06 	br	14418 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014418>
   14568:	00c00504 	movi	r3,20
   1456c:	19401536 	bltu	r3,r5,145c4 <_free_r+0x29c>
   14570:	28c01704 	addi	r3,r5,92
   14574:	18c7883a 	add	r3,r3,r3
   14578:	294016c4 	addi	r5,r5,91
   1457c:	003fb406 	br	14450 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014450>
   14580:	280bd0ba 	srai	r5,r5,2
   14584:	00c00044 	movi	r3,1
   14588:	38800117 	ldw	r2,4(r7)
   1458c:	194a983a 	sll	r5,r3,r5
   14590:	2007883a 	mov	r3,r4
   14594:	2884b03a 	or	r2,r5,r2
   14598:	38800115 	stw	r2,4(r7)
   1459c:	003fbb06 	br	1448c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701448c>
   145a0:	21800515 	stw	r6,20(r4)
   145a4:	21800415 	stw	r6,16(r4)
   145a8:	10c00054 	ori	r3,r2,1
   145ac:	31c00315 	stw	r7,12(r6)
   145b0:	31c00215 	stw	r7,8(r6)
   145b4:	30c00115 	stw	r3,4(r6)
   145b8:	308d883a 	add	r6,r6,r2
   145bc:	30800015 	stw	r2,0(r6)
   145c0:	003f9506 	br	14418 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014418>
   145c4:	00c01504 	movi	r3,84
   145c8:	19400536 	bltu	r3,r5,145e0 <_free_r+0x2b8>
   145cc:	100ad33a 	srli	r5,r2,12
   145d0:	28c01bc4 	addi	r3,r5,111
   145d4:	18c7883a 	add	r3,r3,r3
   145d8:	29401b84 	addi	r5,r5,110
   145dc:	003f9c06 	br	14450 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014450>
   145e0:	00c05504 	movi	r3,340
   145e4:	19400536 	bltu	r3,r5,145fc <_free_r+0x2d4>
   145e8:	100ad3fa 	srli	r5,r2,15
   145ec:	28c01e04 	addi	r3,r5,120
   145f0:	18c7883a 	add	r3,r3,r3
   145f4:	29401dc4 	addi	r5,r5,119
   145f8:	003f9506 	br	14450 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014450>
   145fc:	00c15504 	movi	r3,1364
   14600:	19400536 	bltu	r3,r5,14618 <_free_r+0x2f0>
   14604:	100ad4ba 	srli	r5,r2,18
   14608:	28c01f44 	addi	r3,r5,125
   1460c:	18c7883a 	add	r3,r3,r3
   14610:	29401f04 	addi	r5,r5,124
   14614:	003f8e06 	br	14450 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014450>
   14618:	00c03f84 	movi	r3,254
   1461c:	01401f84 	movi	r5,126
   14620:	003f8b06 	br	14450 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014450>
   14624:	10c00054 	ori	r3,r2,1
   14628:	30c00115 	stw	r3,4(r6)
   1462c:	308d883a 	add	r6,r6,r2
   14630:	30800015 	stw	r2,0(r6)
   14634:	003f7806 	br	14418 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014418>

00014638 <__sfvwrite_r>:
   14638:	30800217 	ldw	r2,8(r6)
   1463c:	10006726 	beq	r2,zero,147dc <__sfvwrite_r+0x1a4>
   14640:	28c0030b 	ldhu	r3,12(r5)
   14644:	defff404 	addi	sp,sp,-48
   14648:	dd400715 	stw	r21,28(sp)
   1464c:	dd000615 	stw	r20,24(sp)
   14650:	dc000215 	stw	r16,8(sp)
   14654:	dfc00b15 	stw	ra,44(sp)
   14658:	df000a15 	stw	fp,40(sp)
   1465c:	ddc00915 	stw	r23,36(sp)
   14660:	dd800815 	stw	r22,32(sp)
   14664:	dcc00515 	stw	r19,20(sp)
   14668:	dc800415 	stw	r18,16(sp)
   1466c:	dc400315 	stw	r17,12(sp)
   14670:	1880020c 	andi	r2,r3,8
   14674:	2821883a 	mov	r16,r5
   14678:	202b883a 	mov	r21,r4
   1467c:	3029883a 	mov	r20,r6
   14680:	10002726 	beq	r2,zero,14720 <__sfvwrite_r+0xe8>
   14684:	28800417 	ldw	r2,16(r5)
   14688:	10002526 	beq	r2,zero,14720 <__sfvwrite_r+0xe8>
   1468c:	1880008c 	andi	r2,r3,2
   14690:	a4400017 	ldw	r17,0(r20)
   14694:	10002a26 	beq	r2,zero,14740 <__sfvwrite_r+0x108>
   14698:	05a00034 	movhi	r22,32768
   1469c:	0027883a 	mov	r19,zero
   146a0:	0025883a 	mov	r18,zero
   146a4:	b5bf0004 	addi	r22,r22,-1024
   146a8:	980d883a 	mov	r6,r19
   146ac:	a809883a 	mov	r4,r21
   146b0:	90004626 	beq	r18,zero,147cc <__sfvwrite_r+0x194>
   146b4:	900f883a 	mov	r7,r18
   146b8:	b480022e 	bgeu	r22,r18,146c4 <__sfvwrite_r+0x8c>
   146bc:	01e00034 	movhi	r7,32768
   146c0:	39ff0004 	addi	r7,r7,-1024
   146c4:	80800917 	ldw	r2,36(r16)
   146c8:	81400717 	ldw	r5,28(r16)
   146cc:	103ee83a 	callr	r2
   146d0:	0080570e 	bge	zero,r2,14830 <__sfvwrite_r+0x1f8>
   146d4:	a0c00217 	ldw	r3,8(r20)
   146d8:	98a7883a 	add	r19,r19,r2
   146dc:	90a5c83a 	sub	r18,r18,r2
   146e0:	1885c83a 	sub	r2,r3,r2
   146e4:	a0800215 	stw	r2,8(r20)
   146e8:	103fef1e 	bne	r2,zero,146a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70146a8>
   146ec:	0005883a 	mov	r2,zero
   146f0:	dfc00b17 	ldw	ra,44(sp)
   146f4:	df000a17 	ldw	fp,40(sp)
   146f8:	ddc00917 	ldw	r23,36(sp)
   146fc:	dd800817 	ldw	r22,32(sp)
   14700:	dd400717 	ldw	r21,28(sp)
   14704:	dd000617 	ldw	r20,24(sp)
   14708:	dcc00517 	ldw	r19,20(sp)
   1470c:	dc800417 	ldw	r18,16(sp)
   14710:	dc400317 	ldw	r17,12(sp)
   14714:	dc000217 	ldw	r16,8(sp)
   14718:	dec00c04 	addi	sp,sp,48
   1471c:	f800283a 	ret
   14720:	800b883a 	mov	r5,r16
   14724:	a809883a 	mov	r4,r21
   14728:	00121e00 	call	121e0 <__swsetup_r>
   1472c:	1000eb1e 	bne	r2,zero,14adc <__sfvwrite_r+0x4a4>
   14730:	80c0030b 	ldhu	r3,12(r16)
   14734:	a4400017 	ldw	r17,0(r20)
   14738:	1880008c 	andi	r2,r3,2
   1473c:	103fd61e 	bne	r2,zero,14698 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014698>
   14740:	1880004c 	andi	r2,r3,1
   14744:	10003f1e 	bne	r2,zero,14844 <__sfvwrite_r+0x20c>
   14748:	0039883a 	mov	fp,zero
   1474c:	0025883a 	mov	r18,zero
   14750:	90001a26 	beq	r18,zero,147bc <__sfvwrite_r+0x184>
   14754:	1880800c 	andi	r2,r3,512
   14758:	84c00217 	ldw	r19,8(r16)
   1475c:	10002126 	beq	r2,zero,147e4 <__sfvwrite_r+0x1ac>
   14760:	982f883a 	mov	r23,r19
   14764:	94c09336 	bltu	r18,r19,149b4 <__sfvwrite_r+0x37c>
   14768:	1881200c 	andi	r2,r3,1152
   1476c:	10009e1e 	bne	r2,zero,149e8 <__sfvwrite_r+0x3b0>
   14770:	81000017 	ldw	r4,0(r16)
   14774:	b80d883a 	mov	r6,r23
   14778:	e00b883a 	mov	r5,fp
   1477c:	0014ff80 	call	14ff8 <memmove>
   14780:	80c00217 	ldw	r3,8(r16)
   14784:	81000017 	ldw	r4,0(r16)
   14788:	9005883a 	mov	r2,r18
   1478c:	1ce7c83a 	sub	r19,r3,r19
   14790:	25cf883a 	add	r7,r4,r23
   14794:	84c00215 	stw	r19,8(r16)
   14798:	81c00015 	stw	r7,0(r16)
   1479c:	a0c00217 	ldw	r3,8(r20)
   147a0:	e0b9883a 	add	fp,fp,r2
   147a4:	90a5c83a 	sub	r18,r18,r2
   147a8:	18a7c83a 	sub	r19,r3,r2
   147ac:	a4c00215 	stw	r19,8(r20)
   147b0:	983fce26 	beq	r19,zero,146ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70146ec>
   147b4:	80c0030b 	ldhu	r3,12(r16)
   147b8:	903fe61e 	bne	r18,zero,14754 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014754>
   147bc:	8f000017 	ldw	fp,0(r17)
   147c0:	8c800117 	ldw	r18,4(r17)
   147c4:	8c400204 	addi	r17,r17,8
   147c8:	003fe106 	br	14750 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014750>
   147cc:	8cc00017 	ldw	r19,0(r17)
   147d0:	8c800117 	ldw	r18,4(r17)
   147d4:	8c400204 	addi	r17,r17,8
   147d8:	003fb306 	br	146a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70146a8>
   147dc:	0005883a 	mov	r2,zero
   147e0:	f800283a 	ret
   147e4:	81000017 	ldw	r4,0(r16)
   147e8:	80800417 	ldw	r2,16(r16)
   147ec:	11005736 	bltu	r2,r4,1494c <__sfvwrite_r+0x314>
   147f0:	85c00517 	ldw	r23,20(r16)
   147f4:	95c05536 	bltu	r18,r23,1494c <__sfvwrite_r+0x314>
   147f8:	00a00034 	movhi	r2,32768
   147fc:	10bfffc4 	addi	r2,r2,-1
   14800:	9009883a 	mov	r4,r18
   14804:	1480012e 	bgeu	r2,r18,1480c <__sfvwrite_r+0x1d4>
   14808:	1009883a 	mov	r4,r2
   1480c:	b80b883a 	mov	r5,r23
   14810:	000c9700 	call	c970 <__divsi3>
   14814:	15cf383a 	mul	r7,r2,r23
   14818:	81400717 	ldw	r5,28(r16)
   1481c:	80800917 	ldw	r2,36(r16)
   14820:	e00d883a 	mov	r6,fp
   14824:	a809883a 	mov	r4,r21
   14828:	103ee83a 	callr	r2
   1482c:	00bfdb16 	blt	zero,r2,1479c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701479c>
   14830:	8080030b 	ldhu	r2,12(r16)
   14834:	10801014 	ori	r2,r2,64
   14838:	8080030d 	sth	r2,12(r16)
   1483c:	00bfffc4 	movi	r2,-1
   14840:	003fab06 	br	146f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70146f0>
   14844:	0027883a 	mov	r19,zero
   14848:	0011883a 	mov	r8,zero
   1484c:	0039883a 	mov	fp,zero
   14850:	0025883a 	mov	r18,zero
   14854:	90001f26 	beq	r18,zero,148d4 <__sfvwrite_r+0x29c>
   14858:	40005a26 	beq	r8,zero,149c4 <__sfvwrite_r+0x38c>
   1485c:	982d883a 	mov	r22,r19
   14860:	94c0012e 	bgeu	r18,r19,14868 <__sfvwrite_r+0x230>
   14864:	902d883a 	mov	r22,r18
   14868:	81000017 	ldw	r4,0(r16)
   1486c:	80800417 	ldw	r2,16(r16)
   14870:	b02f883a 	mov	r23,r22
   14874:	81c00517 	ldw	r7,20(r16)
   14878:	1100032e 	bgeu	r2,r4,14888 <__sfvwrite_r+0x250>
   1487c:	80c00217 	ldw	r3,8(r16)
   14880:	38c7883a 	add	r3,r7,r3
   14884:	1d801816 	blt	r3,r22,148e8 <__sfvwrite_r+0x2b0>
   14888:	b1c03e16 	blt	r22,r7,14984 <__sfvwrite_r+0x34c>
   1488c:	80800917 	ldw	r2,36(r16)
   14890:	81400717 	ldw	r5,28(r16)
   14894:	e00d883a 	mov	r6,fp
   14898:	da000115 	stw	r8,4(sp)
   1489c:	a809883a 	mov	r4,r21
   148a0:	103ee83a 	callr	r2
   148a4:	102f883a 	mov	r23,r2
   148a8:	da000117 	ldw	r8,4(sp)
   148ac:	00bfe00e 	bge	zero,r2,14830 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014830>
   148b0:	9de7c83a 	sub	r19,r19,r23
   148b4:	98001f26 	beq	r19,zero,14934 <__sfvwrite_r+0x2fc>
   148b8:	a0800217 	ldw	r2,8(r20)
   148bc:	e5f9883a 	add	fp,fp,r23
   148c0:	95e5c83a 	sub	r18,r18,r23
   148c4:	15efc83a 	sub	r23,r2,r23
   148c8:	a5c00215 	stw	r23,8(r20)
   148cc:	b83f8726 	beq	r23,zero,146ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70146ec>
   148d0:	903fe11e 	bne	r18,zero,14858 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014858>
   148d4:	8f000017 	ldw	fp,0(r17)
   148d8:	8c800117 	ldw	r18,4(r17)
   148dc:	0011883a 	mov	r8,zero
   148e0:	8c400204 	addi	r17,r17,8
   148e4:	003fdb06 	br	14854 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014854>
   148e8:	180d883a 	mov	r6,r3
   148ec:	e00b883a 	mov	r5,fp
   148f0:	da000115 	stw	r8,4(sp)
   148f4:	d8c00015 	stw	r3,0(sp)
   148f8:	0014ff80 	call	14ff8 <memmove>
   148fc:	d8c00017 	ldw	r3,0(sp)
   14900:	80800017 	ldw	r2,0(r16)
   14904:	800b883a 	mov	r5,r16
   14908:	a809883a 	mov	r4,r21
   1490c:	10c5883a 	add	r2,r2,r3
   14910:	80800015 	stw	r2,0(r16)
   14914:	d8c00015 	stw	r3,0(sp)
   14918:	0013dd80 	call	13dd8 <_fflush_r>
   1491c:	d8c00017 	ldw	r3,0(sp)
   14920:	da000117 	ldw	r8,4(sp)
   14924:	103fc21e 	bne	r2,zero,14830 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014830>
   14928:	182f883a 	mov	r23,r3
   1492c:	9de7c83a 	sub	r19,r19,r23
   14930:	983fe11e 	bne	r19,zero,148b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70148b8>
   14934:	800b883a 	mov	r5,r16
   14938:	a809883a 	mov	r4,r21
   1493c:	0013dd80 	call	13dd8 <_fflush_r>
   14940:	103fbb1e 	bne	r2,zero,14830 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014830>
   14944:	0011883a 	mov	r8,zero
   14948:	003fdb06 	br	148b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70148b8>
   1494c:	94c0012e 	bgeu	r18,r19,14954 <__sfvwrite_r+0x31c>
   14950:	9027883a 	mov	r19,r18
   14954:	980d883a 	mov	r6,r19
   14958:	e00b883a 	mov	r5,fp
   1495c:	0014ff80 	call	14ff8 <memmove>
   14960:	80800217 	ldw	r2,8(r16)
   14964:	80c00017 	ldw	r3,0(r16)
   14968:	14c5c83a 	sub	r2,r2,r19
   1496c:	1cc7883a 	add	r3,r3,r19
   14970:	80800215 	stw	r2,8(r16)
   14974:	80c00015 	stw	r3,0(r16)
   14978:	10004326 	beq	r2,zero,14a88 <__sfvwrite_r+0x450>
   1497c:	9805883a 	mov	r2,r19
   14980:	003f8606 	br	1479c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701479c>
   14984:	b00d883a 	mov	r6,r22
   14988:	e00b883a 	mov	r5,fp
   1498c:	da000115 	stw	r8,4(sp)
   14990:	0014ff80 	call	14ff8 <memmove>
   14994:	80800217 	ldw	r2,8(r16)
   14998:	80c00017 	ldw	r3,0(r16)
   1499c:	da000117 	ldw	r8,4(sp)
   149a0:	1585c83a 	sub	r2,r2,r22
   149a4:	1dad883a 	add	r22,r3,r22
   149a8:	80800215 	stw	r2,8(r16)
   149ac:	85800015 	stw	r22,0(r16)
   149b0:	003fbf06 	br	148b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70148b0>
   149b4:	81000017 	ldw	r4,0(r16)
   149b8:	9027883a 	mov	r19,r18
   149bc:	902f883a 	mov	r23,r18
   149c0:	003f6c06 	br	14774 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014774>
   149c4:	900d883a 	mov	r6,r18
   149c8:	01400284 	movi	r5,10
   149cc:	e009883a 	mov	r4,fp
   149d0:	0014f140 	call	14f14 <memchr>
   149d4:	10003e26 	beq	r2,zero,14ad0 <__sfvwrite_r+0x498>
   149d8:	10800044 	addi	r2,r2,1
   149dc:	1727c83a 	sub	r19,r2,fp
   149e0:	02000044 	movi	r8,1
   149e4:	003f9d06 	br	1485c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701485c>
   149e8:	80800517 	ldw	r2,20(r16)
   149ec:	81400417 	ldw	r5,16(r16)
   149f0:	81c00017 	ldw	r7,0(r16)
   149f4:	10a7883a 	add	r19,r2,r2
   149f8:	9885883a 	add	r2,r19,r2
   149fc:	1026d7fa 	srli	r19,r2,31
   14a00:	396dc83a 	sub	r22,r7,r5
   14a04:	b1000044 	addi	r4,r22,1
   14a08:	9885883a 	add	r2,r19,r2
   14a0c:	1027d07a 	srai	r19,r2,1
   14a10:	2485883a 	add	r2,r4,r18
   14a14:	980d883a 	mov	r6,r19
   14a18:	9880022e 	bgeu	r19,r2,14a24 <__sfvwrite_r+0x3ec>
   14a1c:	1027883a 	mov	r19,r2
   14a20:	100d883a 	mov	r6,r2
   14a24:	18c1000c 	andi	r3,r3,1024
   14a28:	18001c26 	beq	r3,zero,14a9c <__sfvwrite_r+0x464>
   14a2c:	300b883a 	mov	r5,r6
   14a30:	a809883a 	mov	r4,r21
   14a34:	000cb740 	call	cb74 <_malloc_r>
   14a38:	102f883a 	mov	r23,r2
   14a3c:	10002926 	beq	r2,zero,14ae4 <__sfvwrite_r+0x4ac>
   14a40:	81400417 	ldw	r5,16(r16)
   14a44:	b00d883a 	mov	r6,r22
   14a48:	1009883a 	mov	r4,r2
   14a4c:	000d3800 	call	d380 <memcpy>
   14a50:	8080030b 	ldhu	r2,12(r16)
   14a54:	00fedfc4 	movi	r3,-1153
   14a58:	10c4703a 	and	r2,r2,r3
   14a5c:	10802014 	ori	r2,r2,128
   14a60:	8080030d 	sth	r2,12(r16)
   14a64:	bd89883a 	add	r4,r23,r22
   14a68:	9d8fc83a 	sub	r7,r19,r22
   14a6c:	85c00415 	stw	r23,16(r16)
   14a70:	84c00515 	stw	r19,20(r16)
   14a74:	81000015 	stw	r4,0(r16)
   14a78:	9027883a 	mov	r19,r18
   14a7c:	81c00215 	stw	r7,8(r16)
   14a80:	902f883a 	mov	r23,r18
   14a84:	003f3b06 	br	14774 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014774>
   14a88:	800b883a 	mov	r5,r16
   14a8c:	a809883a 	mov	r4,r21
   14a90:	0013dd80 	call	13dd8 <_fflush_r>
   14a94:	103fb926 	beq	r2,zero,1497c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701497c>
   14a98:	003f6506 	br	14830 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014830>
   14a9c:	a809883a 	mov	r4,r21
   14aa0:	00161500 	call	16150 <_realloc_r>
   14aa4:	102f883a 	mov	r23,r2
   14aa8:	103fee1e 	bne	r2,zero,14a64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014a64>
   14aac:	81400417 	ldw	r5,16(r16)
   14ab0:	a809883a 	mov	r4,r21
   14ab4:	00143280 	call	14328 <_free_r>
   14ab8:	8080030b 	ldhu	r2,12(r16)
   14abc:	00ffdfc4 	movi	r3,-129
   14ac0:	1884703a 	and	r2,r3,r2
   14ac4:	00c00304 	movi	r3,12
   14ac8:	a8c00015 	stw	r3,0(r21)
   14acc:	003f5906 	br	14834 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014834>
   14ad0:	94c00044 	addi	r19,r18,1
   14ad4:	02000044 	movi	r8,1
   14ad8:	003f6006 	br	1485c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701485c>
   14adc:	00bfffc4 	movi	r2,-1
   14ae0:	003f0306 	br	146f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70146f0>
   14ae4:	00800304 	movi	r2,12
   14ae8:	a8800015 	stw	r2,0(r21)
   14aec:	8080030b 	ldhu	r2,12(r16)
   14af0:	003f5006 	br	14834 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014834>

00014af4 <_fwalk>:
   14af4:	defff704 	addi	sp,sp,-36
   14af8:	dd000415 	stw	r20,16(sp)
   14afc:	dfc00815 	stw	ra,32(sp)
   14b00:	ddc00715 	stw	r23,28(sp)
   14b04:	dd800615 	stw	r22,24(sp)
   14b08:	dd400515 	stw	r21,20(sp)
   14b0c:	dcc00315 	stw	r19,12(sp)
   14b10:	dc800215 	stw	r18,8(sp)
   14b14:	dc400115 	stw	r17,4(sp)
   14b18:	dc000015 	stw	r16,0(sp)
   14b1c:	2500b804 	addi	r20,r4,736
   14b20:	a0002326 	beq	r20,zero,14bb0 <_fwalk+0xbc>
   14b24:	282b883a 	mov	r21,r5
   14b28:	002f883a 	mov	r23,zero
   14b2c:	05800044 	movi	r22,1
   14b30:	04ffffc4 	movi	r19,-1
   14b34:	a4400117 	ldw	r17,4(r20)
   14b38:	a4800217 	ldw	r18,8(r20)
   14b3c:	8c7fffc4 	addi	r17,r17,-1
   14b40:	88000d16 	blt	r17,zero,14b78 <_fwalk+0x84>
   14b44:	94000304 	addi	r16,r18,12
   14b48:	94800384 	addi	r18,r18,14
   14b4c:	8080000b 	ldhu	r2,0(r16)
   14b50:	8c7fffc4 	addi	r17,r17,-1
   14b54:	813ffd04 	addi	r4,r16,-12
   14b58:	b080042e 	bgeu	r22,r2,14b6c <_fwalk+0x78>
   14b5c:	9080000f 	ldh	r2,0(r18)
   14b60:	14c00226 	beq	r2,r19,14b6c <_fwalk+0x78>
   14b64:	a83ee83a 	callr	r21
   14b68:	b8aeb03a 	or	r23,r23,r2
   14b6c:	84001a04 	addi	r16,r16,104
   14b70:	94801a04 	addi	r18,r18,104
   14b74:	8cfff51e 	bne	r17,r19,14b4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014b4c>
   14b78:	a5000017 	ldw	r20,0(r20)
   14b7c:	a03fed1e 	bne	r20,zero,14b34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014b34>
   14b80:	b805883a 	mov	r2,r23
   14b84:	dfc00817 	ldw	ra,32(sp)
   14b88:	ddc00717 	ldw	r23,28(sp)
   14b8c:	dd800617 	ldw	r22,24(sp)
   14b90:	dd400517 	ldw	r21,20(sp)
   14b94:	dd000417 	ldw	r20,16(sp)
   14b98:	dcc00317 	ldw	r19,12(sp)
   14b9c:	dc800217 	ldw	r18,8(sp)
   14ba0:	dc400117 	ldw	r17,4(sp)
   14ba4:	dc000017 	ldw	r16,0(sp)
   14ba8:	dec00904 	addi	sp,sp,36
   14bac:	f800283a 	ret
   14bb0:	002f883a 	mov	r23,zero
   14bb4:	003ff206 	br	14b80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014b80>

00014bb8 <_fwalk_reent>:
   14bb8:	defff704 	addi	sp,sp,-36
   14bbc:	dd000415 	stw	r20,16(sp)
   14bc0:	dfc00815 	stw	ra,32(sp)
   14bc4:	ddc00715 	stw	r23,28(sp)
   14bc8:	dd800615 	stw	r22,24(sp)
   14bcc:	dd400515 	stw	r21,20(sp)
   14bd0:	dcc00315 	stw	r19,12(sp)
   14bd4:	dc800215 	stw	r18,8(sp)
   14bd8:	dc400115 	stw	r17,4(sp)
   14bdc:	dc000015 	stw	r16,0(sp)
   14be0:	2500b804 	addi	r20,r4,736
   14be4:	a0002326 	beq	r20,zero,14c74 <_fwalk_reent+0xbc>
   14be8:	282b883a 	mov	r21,r5
   14bec:	2027883a 	mov	r19,r4
   14bf0:	002f883a 	mov	r23,zero
   14bf4:	05800044 	movi	r22,1
   14bf8:	04bfffc4 	movi	r18,-1
   14bfc:	a4400117 	ldw	r17,4(r20)
   14c00:	a4000217 	ldw	r16,8(r20)
   14c04:	8c7fffc4 	addi	r17,r17,-1
   14c08:	88000c16 	blt	r17,zero,14c3c <_fwalk_reent+0x84>
   14c0c:	84000304 	addi	r16,r16,12
   14c10:	8080000b 	ldhu	r2,0(r16)
   14c14:	8c7fffc4 	addi	r17,r17,-1
   14c18:	817ffd04 	addi	r5,r16,-12
   14c1c:	b080052e 	bgeu	r22,r2,14c34 <_fwalk_reent+0x7c>
   14c20:	8080008f 	ldh	r2,2(r16)
   14c24:	9809883a 	mov	r4,r19
   14c28:	14800226 	beq	r2,r18,14c34 <_fwalk_reent+0x7c>
   14c2c:	a83ee83a 	callr	r21
   14c30:	b8aeb03a 	or	r23,r23,r2
   14c34:	84001a04 	addi	r16,r16,104
   14c38:	8cbff51e 	bne	r17,r18,14c10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014c10>
   14c3c:	a5000017 	ldw	r20,0(r20)
   14c40:	a03fee1e 	bne	r20,zero,14bfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014bfc>
   14c44:	b805883a 	mov	r2,r23
   14c48:	dfc00817 	ldw	ra,32(sp)
   14c4c:	ddc00717 	ldw	r23,28(sp)
   14c50:	dd800617 	ldw	r22,24(sp)
   14c54:	dd400517 	ldw	r21,20(sp)
   14c58:	dd000417 	ldw	r20,16(sp)
   14c5c:	dcc00317 	ldw	r19,12(sp)
   14c60:	dc800217 	ldw	r18,8(sp)
   14c64:	dc400117 	ldw	r17,4(sp)
   14c68:	dc000017 	ldw	r16,0(sp)
   14c6c:	dec00904 	addi	sp,sp,36
   14c70:	f800283a 	ret
   14c74:	002f883a 	mov	r23,zero
   14c78:	003ff206 	br	14c44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014c44>

00014c7c <_setlocale_r>:
   14c7c:	30001b26 	beq	r6,zero,14cec <_setlocale_r+0x70>
   14c80:	014000f4 	movhi	r5,3
   14c84:	defffe04 	addi	sp,sp,-8
   14c88:	2960d704 	addi	r5,r5,-31908
   14c8c:	3009883a 	mov	r4,r6
   14c90:	dc000015 	stw	r16,0(sp)
   14c94:	dfc00115 	stw	ra,4(sp)
   14c98:	3021883a 	mov	r16,r6
   14c9c:	000dbc40 	call	dbc4 <strcmp>
   14ca0:	1000061e 	bne	r2,zero,14cbc <_setlocale_r+0x40>
   14ca4:	008000f4 	movhi	r2,3
   14ca8:	10a0b004 	addi	r2,r2,-32064
   14cac:	dfc00117 	ldw	ra,4(sp)
   14cb0:	dc000017 	ldw	r16,0(sp)
   14cb4:	dec00204 	addi	sp,sp,8
   14cb8:	f800283a 	ret
   14cbc:	014000f4 	movhi	r5,3
   14cc0:	2960b004 	addi	r5,r5,-32064
   14cc4:	8009883a 	mov	r4,r16
   14cc8:	000dbc40 	call	dbc4 <strcmp>
   14ccc:	103ff526 	beq	r2,zero,14ca4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014ca4>
   14cd0:	014000f4 	movhi	r5,3
   14cd4:	2960ba04 	addi	r5,r5,-32024
   14cd8:	8009883a 	mov	r4,r16
   14cdc:	000dbc40 	call	dbc4 <strcmp>
   14ce0:	103ff026 	beq	r2,zero,14ca4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014ca4>
   14ce4:	0005883a 	mov	r2,zero
   14ce8:	003ff006 	br	14cac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014cac>
   14cec:	008000f4 	movhi	r2,3
   14cf0:	10a0b004 	addi	r2,r2,-32064
   14cf4:	f800283a 	ret

00014cf8 <__locale_charset>:
   14cf8:	008000f4 	movhi	r2,3
   14cfc:	10a40204 	addi	r2,r2,-28664
   14d00:	f800283a 	ret

00014d04 <__locale_mb_cur_max>:
   14d04:	008000f4 	movhi	r2,3
   14d08:	10a9b704 	addi	r2,r2,-22820
   14d0c:	10800017 	ldw	r2,0(r2)
   14d10:	f800283a 	ret

00014d14 <__locale_msgcharset>:
   14d14:	008000f4 	movhi	r2,3
   14d18:	10a3fa04 	addi	r2,r2,-28696
   14d1c:	f800283a 	ret

00014d20 <__locale_cjk_lang>:
   14d20:	0005883a 	mov	r2,zero
   14d24:	f800283a 	ret

00014d28 <_localeconv_r>:
   14d28:	008000f4 	movhi	r2,3
   14d2c:	10a40a04 	addi	r2,r2,-28632
   14d30:	f800283a 	ret

00014d34 <setlocale>:
   14d34:	008000f4 	movhi	r2,3
   14d38:	10a9b404 	addi	r2,r2,-22832
   14d3c:	280d883a 	mov	r6,r5
   14d40:	200b883a 	mov	r5,r4
   14d44:	11000017 	ldw	r4,0(r2)
   14d48:	0014c7c1 	jmpi	14c7c <_setlocale_r>

00014d4c <localeconv>:
   14d4c:	008000f4 	movhi	r2,3
   14d50:	10a40a04 	addi	r2,r2,-28632
   14d54:	f800283a 	ret

00014d58 <__smakebuf_r>:
   14d58:	2880030b 	ldhu	r2,12(r5)
   14d5c:	10c0008c 	andi	r3,r2,2
   14d60:	1800411e 	bne	r3,zero,14e68 <__smakebuf_r+0x110>
   14d64:	deffec04 	addi	sp,sp,-80
   14d68:	dc000f15 	stw	r16,60(sp)
   14d6c:	2821883a 	mov	r16,r5
   14d70:	2940038f 	ldh	r5,14(r5)
   14d74:	dc401015 	stw	r17,64(sp)
   14d78:	dfc01315 	stw	ra,76(sp)
   14d7c:	dcc01215 	stw	r19,72(sp)
   14d80:	dc801115 	stw	r18,68(sp)
   14d84:	2023883a 	mov	r17,r4
   14d88:	28001c16 	blt	r5,zero,14dfc <__smakebuf_r+0xa4>
   14d8c:	d80d883a 	mov	r6,sp
   14d90:	00196c80 	call	196c8 <_fstat_r>
   14d94:	10001816 	blt	r2,zero,14df8 <__smakebuf_r+0xa0>
   14d98:	d8800117 	ldw	r2,4(sp)
   14d9c:	00e00014 	movui	r3,32768
   14da0:	10bc000c 	andi	r2,r2,61440
   14da4:	14c80020 	cmpeqi	r19,r2,8192
   14da8:	10c03726 	beq	r2,r3,14e88 <__smakebuf_r+0x130>
   14dac:	80c0030b 	ldhu	r3,12(r16)
   14db0:	18c20014 	ori	r3,r3,2048
   14db4:	80c0030d 	sth	r3,12(r16)
   14db8:	00c80004 	movi	r3,8192
   14dbc:	10c0521e 	bne	r2,r3,14f08 <__smakebuf_r+0x1b0>
   14dc0:	8140038f 	ldh	r5,14(r16)
   14dc4:	8809883a 	mov	r4,r17
   14dc8:	00197240 	call	19724 <_isatty_r>
   14dcc:	10004c26 	beq	r2,zero,14f00 <__smakebuf_r+0x1a8>
   14dd0:	8080030b 	ldhu	r2,12(r16)
   14dd4:	80c010c4 	addi	r3,r16,67
   14dd8:	80c00015 	stw	r3,0(r16)
   14ddc:	10800054 	ori	r2,r2,1
   14de0:	8080030d 	sth	r2,12(r16)
   14de4:	00800044 	movi	r2,1
   14de8:	80c00415 	stw	r3,16(r16)
   14dec:	80800515 	stw	r2,20(r16)
   14df0:	04810004 	movi	r18,1024
   14df4:	00000706 	br	14e14 <__smakebuf_r+0xbc>
   14df8:	8080030b 	ldhu	r2,12(r16)
   14dfc:	10c0200c 	andi	r3,r2,128
   14e00:	18001f1e 	bne	r3,zero,14e80 <__smakebuf_r+0x128>
   14e04:	04810004 	movi	r18,1024
   14e08:	10820014 	ori	r2,r2,2048
   14e0c:	8080030d 	sth	r2,12(r16)
   14e10:	0027883a 	mov	r19,zero
   14e14:	900b883a 	mov	r5,r18
   14e18:	8809883a 	mov	r4,r17
   14e1c:	000cb740 	call	cb74 <_malloc_r>
   14e20:	10002c26 	beq	r2,zero,14ed4 <__smakebuf_r+0x17c>
   14e24:	80c0030b 	ldhu	r3,12(r16)
   14e28:	01000074 	movhi	r4,1
   14e2c:	210f9b04 	addi	r4,r4,15980
   14e30:	89000f15 	stw	r4,60(r17)
   14e34:	18c02014 	ori	r3,r3,128
   14e38:	80c0030d 	sth	r3,12(r16)
   14e3c:	80800015 	stw	r2,0(r16)
   14e40:	80800415 	stw	r2,16(r16)
   14e44:	84800515 	stw	r18,20(r16)
   14e48:	98001a1e 	bne	r19,zero,14eb4 <__smakebuf_r+0x15c>
   14e4c:	dfc01317 	ldw	ra,76(sp)
   14e50:	dcc01217 	ldw	r19,72(sp)
   14e54:	dc801117 	ldw	r18,68(sp)
   14e58:	dc401017 	ldw	r17,64(sp)
   14e5c:	dc000f17 	ldw	r16,60(sp)
   14e60:	dec01404 	addi	sp,sp,80
   14e64:	f800283a 	ret
   14e68:	288010c4 	addi	r2,r5,67
   14e6c:	28800015 	stw	r2,0(r5)
   14e70:	28800415 	stw	r2,16(r5)
   14e74:	00800044 	movi	r2,1
   14e78:	28800515 	stw	r2,20(r5)
   14e7c:	f800283a 	ret
   14e80:	04801004 	movi	r18,64
   14e84:	003fe006 	br	14e08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014e08>
   14e88:	81000a17 	ldw	r4,40(r16)
   14e8c:	00c00074 	movhi	r3,1
   14e90:	18d9e304 	addi	r3,r3,26508
   14e94:	20ffc51e 	bne	r4,r3,14dac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014dac>
   14e98:	8080030b 	ldhu	r2,12(r16)
   14e9c:	04810004 	movi	r18,1024
   14ea0:	84801315 	stw	r18,76(r16)
   14ea4:	1484b03a 	or	r2,r2,r18
   14ea8:	8080030d 	sth	r2,12(r16)
   14eac:	0027883a 	mov	r19,zero
   14eb0:	003fd806 	br	14e14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014e14>
   14eb4:	8140038f 	ldh	r5,14(r16)
   14eb8:	8809883a 	mov	r4,r17
   14ebc:	00197240 	call	19724 <_isatty_r>
   14ec0:	103fe226 	beq	r2,zero,14e4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014e4c>
   14ec4:	8080030b 	ldhu	r2,12(r16)
   14ec8:	10800054 	ori	r2,r2,1
   14ecc:	8080030d 	sth	r2,12(r16)
   14ed0:	003fde06 	br	14e4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014e4c>
   14ed4:	8080030b 	ldhu	r2,12(r16)
   14ed8:	10c0800c 	andi	r3,r2,512
   14edc:	183fdb1e 	bne	r3,zero,14e4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014e4c>
   14ee0:	10800094 	ori	r2,r2,2
   14ee4:	80c010c4 	addi	r3,r16,67
   14ee8:	8080030d 	sth	r2,12(r16)
   14eec:	00800044 	movi	r2,1
   14ef0:	80c00015 	stw	r3,0(r16)
   14ef4:	80c00415 	stw	r3,16(r16)
   14ef8:	80800515 	stw	r2,20(r16)
   14efc:	003fd306 	br	14e4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014e4c>
   14f00:	04810004 	movi	r18,1024
   14f04:	003fc306 	br	14e14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014e14>
   14f08:	0027883a 	mov	r19,zero
   14f0c:	04810004 	movi	r18,1024
   14f10:	003fc006 	br	14e14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014e14>

00014f14 <memchr>:
   14f14:	208000cc 	andi	r2,r4,3
   14f18:	280f883a 	mov	r7,r5
   14f1c:	10003426 	beq	r2,zero,14ff0 <memchr+0xdc>
   14f20:	30bfffc4 	addi	r2,r6,-1
   14f24:	30001a26 	beq	r6,zero,14f90 <memchr+0x7c>
   14f28:	20c00003 	ldbu	r3,0(r4)
   14f2c:	29803fcc 	andi	r6,r5,255
   14f30:	30c0051e 	bne	r6,r3,14f48 <memchr+0x34>
   14f34:	00001806 	br	14f98 <memchr+0x84>
   14f38:	10001526 	beq	r2,zero,14f90 <memchr+0x7c>
   14f3c:	20c00003 	ldbu	r3,0(r4)
   14f40:	10bfffc4 	addi	r2,r2,-1
   14f44:	30c01426 	beq	r6,r3,14f98 <memchr+0x84>
   14f48:	21000044 	addi	r4,r4,1
   14f4c:	20c000cc 	andi	r3,r4,3
   14f50:	183ff91e 	bne	r3,zero,14f38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014f38>
   14f54:	020000c4 	movi	r8,3
   14f58:	40801136 	bltu	r8,r2,14fa0 <memchr+0x8c>
   14f5c:	10000c26 	beq	r2,zero,14f90 <memchr+0x7c>
   14f60:	20c00003 	ldbu	r3,0(r4)
   14f64:	29403fcc 	andi	r5,r5,255
   14f68:	28c00b26 	beq	r5,r3,14f98 <memchr+0x84>
   14f6c:	20c00044 	addi	r3,r4,1
   14f70:	39803fcc 	andi	r6,r7,255
   14f74:	2089883a 	add	r4,r4,r2
   14f78:	00000306 	br	14f88 <memchr+0x74>
   14f7c:	18c00044 	addi	r3,r3,1
   14f80:	197fffc3 	ldbu	r5,-1(r3)
   14f84:	31400526 	beq	r6,r5,14f9c <memchr+0x88>
   14f88:	1805883a 	mov	r2,r3
   14f8c:	20fffb1e 	bne	r4,r3,14f7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014f7c>
   14f90:	0005883a 	mov	r2,zero
   14f94:	f800283a 	ret
   14f98:	2005883a 	mov	r2,r4
   14f9c:	f800283a 	ret
   14fa0:	28c03fcc 	andi	r3,r5,255
   14fa4:	1812923a 	slli	r9,r3,8
   14fa8:	02ffbff4 	movhi	r11,65279
   14fac:	02a02074 	movhi	r10,32897
   14fb0:	48d2b03a 	or	r9,r9,r3
   14fb4:	4806943a 	slli	r3,r9,16
   14fb8:	5affbfc4 	addi	r11,r11,-257
   14fbc:	52a02004 	addi	r10,r10,-32640
   14fc0:	48d2b03a 	or	r9,r9,r3
   14fc4:	20c00017 	ldw	r3,0(r4)
   14fc8:	48c6f03a 	xor	r3,r9,r3
   14fcc:	1acd883a 	add	r6,r3,r11
   14fd0:	00c6303a 	nor	r3,zero,r3
   14fd4:	30c6703a 	and	r3,r6,r3
   14fd8:	1a86703a 	and	r3,r3,r10
   14fdc:	183fe01e 	bne	r3,zero,14f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014f60>
   14fe0:	10bfff04 	addi	r2,r2,-4
   14fe4:	21000104 	addi	r4,r4,4
   14fe8:	40bff636 	bltu	r8,r2,14fc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014fc4>
   14fec:	003fdb06 	br	14f5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014f5c>
   14ff0:	3005883a 	mov	r2,r6
   14ff4:	003fd706 	br	14f54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014f54>

00014ff8 <memmove>:
   14ff8:	2005883a 	mov	r2,r4
   14ffc:	29000b2e 	bgeu	r5,r4,1502c <memmove+0x34>
   15000:	298f883a 	add	r7,r5,r6
   15004:	21c0092e 	bgeu	r4,r7,1502c <memmove+0x34>
   15008:	2187883a 	add	r3,r4,r6
   1500c:	198bc83a 	sub	r5,r3,r6
   15010:	30004826 	beq	r6,zero,15134 <memmove+0x13c>
   15014:	39ffffc4 	addi	r7,r7,-1
   15018:	39000003 	ldbu	r4,0(r7)
   1501c:	18ffffc4 	addi	r3,r3,-1
   15020:	19000005 	stb	r4,0(r3)
   15024:	28fffb1e 	bne	r5,r3,15014 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015014>
   15028:	f800283a 	ret
   1502c:	00c003c4 	movi	r3,15
   15030:	1980412e 	bgeu	r3,r6,15138 <memmove+0x140>
   15034:	2886b03a 	or	r3,r5,r2
   15038:	18c000cc 	andi	r3,r3,3
   1503c:	1800401e 	bne	r3,zero,15140 <memmove+0x148>
   15040:	33fffc04 	addi	r15,r6,-16
   15044:	781ed13a 	srli	r15,r15,4
   15048:	28c00104 	addi	r3,r5,4
   1504c:	13400104 	addi	r13,r2,4
   15050:	781c913a 	slli	r14,r15,4
   15054:	2b000204 	addi	r12,r5,8
   15058:	12c00204 	addi	r11,r2,8
   1505c:	73800504 	addi	r14,r14,20
   15060:	2a800304 	addi	r10,r5,12
   15064:	12400304 	addi	r9,r2,12
   15068:	2b9d883a 	add	r14,r5,r14
   1506c:	2811883a 	mov	r8,r5
   15070:	100f883a 	mov	r7,r2
   15074:	41000017 	ldw	r4,0(r8)
   15078:	39c00404 	addi	r7,r7,16
   1507c:	18c00404 	addi	r3,r3,16
   15080:	393ffc15 	stw	r4,-16(r7)
   15084:	193ffc17 	ldw	r4,-16(r3)
   15088:	6b400404 	addi	r13,r13,16
   1508c:	5ac00404 	addi	r11,r11,16
   15090:	693ffc15 	stw	r4,-16(r13)
   15094:	61000017 	ldw	r4,0(r12)
   15098:	4a400404 	addi	r9,r9,16
   1509c:	42000404 	addi	r8,r8,16
   150a0:	593ffc15 	stw	r4,-16(r11)
   150a4:	51000017 	ldw	r4,0(r10)
   150a8:	63000404 	addi	r12,r12,16
   150ac:	52800404 	addi	r10,r10,16
   150b0:	493ffc15 	stw	r4,-16(r9)
   150b4:	1bbfef1e 	bne	r3,r14,15074 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015074>
   150b8:	79000044 	addi	r4,r15,1
   150bc:	2008913a 	slli	r4,r4,4
   150c0:	328003cc 	andi	r10,r6,15
   150c4:	02c000c4 	movi	r11,3
   150c8:	1107883a 	add	r3,r2,r4
   150cc:	290b883a 	add	r5,r5,r4
   150d0:	5a801e2e 	bgeu	r11,r10,1514c <memmove+0x154>
   150d4:	1813883a 	mov	r9,r3
   150d8:	2811883a 	mov	r8,r5
   150dc:	500f883a 	mov	r7,r10
   150e0:	41000017 	ldw	r4,0(r8)
   150e4:	4a400104 	addi	r9,r9,4
   150e8:	39ffff04 	addi	r7,r7,-4
   150ec:	493fff15 	stw	r4,-4(r9)
   150f0:	42000104 	addi	r8,r8,4
   150f4:	59fffa36 	bltu	r11,r7,150e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70150e0>
   150f8:	513fff04 	addi	r4,r10,-4
   150fc:	2008d0ba 	srli	r4,r4,2
   15100:	318000cc 	andi	r6,r6,3
   15104:	21000044 	addi	r4,r4,1
   15108:	2109883a 	add	r4,r4,r4
   1510c:	2109883a 	add	r4,r4,r4
   15110:	1907883a 	add	r3,r3,r4
   15114:	290b883a 	add	r5,r5,r4
   15118:	30000b26 	beq	r6,zero,15148 <memmove+0x150>
   1511c:	198d883a 	add	r6,r3,r6
   15120:	29c00003 	ldbu	r7,0(r5)
   15124:	18c00044 	addi	r3,r3,1
   15128:	29400044 	addi	r5,r5,1
   1512c:	19ffffc5 	stb	r7,-1(r3)
   15130:	19bffb1e 	bne	r3,r6,15120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015120>
   15134:	f800283a 	ret
   15138:	1007883a 	mov	r3,r2
   1513c:	003ff606 	br	15118 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015118>
   15140:	1007883a 	mov	r3,r2
   15144:	003ff506 	br	1511c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701511c>
   15148:	f800283a 	ret
   1514c:	500d883a 	mov	r6,r10
   15150:	003ff106 	br	15118 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015118>

00015154 <_Balloc>:
   15154:	20801317 	ldw	r2,76(r4)
   15158:	defffc04 	addi	sp,sp,-16
   1515c:	dc400115 	stw	r17,4(sp)
   15160:	dc000015 	stw	r16,0(sp)
   15164:	dfc00315 	stw	ra,12(sp)
   15168:	dc800215 	stw	r18,8(sp)
   1516c:	2023883a 	mov	r17,r4
   15170:	2821883a 	mov	r16,r5
   15174:	10000f26 	beq	r2,zero,151b4 <_Balloc+0x60>
   15178:	8407883a 	add	r3,r16,r16
   1517c:	18c7883a 	add	r3,r3,r3
   15180:	10c7883a 	add	r3,r2,r3
   15184:	18800017 	ldw	r2,0(r3)
   15188:	10001126 	beq	r2,zero,151d0 <_Balloc+0x7c>
   1518c:	11000017 	ldw	r4,0(r2)
   15190:	19000015 	stw	r4,0(r3)
   15194:	10000415 	stw	zero,16(r2)
   15198:	10000315 	stw	zero,12(r2)
   1519c:	dfc00317 	ldw	ra,12(sp)
   151a0:	dc800217 	ldw	r18,8(sp)
   151a4:	dc400117 	ldw	r17,4(sp)
   151a8:	dc000017 	ldw	r16,0(sp)
   151ac:	dec00404 	addi	sp,sp,16
   151b0:	f800283a 	ret
   151b4:	01800844 	movi	r6,33
   151b8:	01400104 	movi	r5,4
   151bc:	00192f80 	call	192f8 <_calloc_r>
   151c0:	88801315 	stw	r2,76(r17)
   151c4:	103fec1e 	bne	r2,zero,15178 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015178>
   151c8:	0005883a 	mov	r2,zero
   151cc:	003ff306 	br	1519c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701519c>
   151d0:	01400044 	movi	r5,1
   151d4:	2c24983a 	sll	r18,r5,r16
   151d8:	8809883a 	mov	r4,r17
   151dc:	91800144 	addi	r6,r18,5
   151e0:	318d883a 	add	r6,r6,r6
   151e4:	318d883a 	add	r6,r6,r6
   151e8:	00192f80 	call	192f8 <_calloc_r>
   151ec:	103ff626 	beq	r2,zero,151c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70151c8>
   151f0:	14000115 	stw	r16,4(r2)
   151f4:	14800215 	stw	r18,8(r2)
   151f8:	003fe606 	br	15194 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015194>

000151fc <_Bfree>:
   151fc:	28000826 	beq	r5,zero,15220 <_Bfree+0x24>
   15200:	28c00117 	ldw	r3,4(r5)
   15204:	20801317 	ldw	r2,76(r4)
   15208:	18c7883a 	add	r3,r3,r3
   1520c:	18c7883a 	add	r3,r3,r3
   15210:	10c5883a 	add	r2,r2,r3
   15214:	10c00017 	ldw	r3,0(r2)
   15218:	28c00015 	stw	r3,0(r5)
   1521c:	11400015 	stw	r5,0(r2)
   15220:	f800283a 	ret

00015224 <__multadd>:
   15224:	defffa04 	addi	sp,sp,-24
   15228:	dc800315 	stw	r18,12(sp)
   1522c:	dc400215 	stw	r17,8(sp)
   15230:	dc000115 	stw	r16,4(sp)
   15234:	2823883a 	mov	r17,r5
   15238:	2c000417 	ldw	r16,16(r5)
   1523c:	dfc00515 	stw	ra,20(sp)
   15240:	dcc00415 	stw	r19,16(sp)
   15244:	2025883a 	mov	r18,r4
   15248:	29400504 	addi	r5,r5,20
   1524c:	0011883a 	mov	r8,zero
   15250:	28c00017 	ldw	r3,0(r5)
   15254:	29400104 	addi	r5,r5,4
   15258:	42000044 	addi	r8,r8,1
   1525c:	18bfffcc 	andi	r2,r3,65535
   15260:	1185383a 	mul	r2,r2,r6
   15264:	1806d43a 	srli	r3,r3,16
   15268:	11cf883a 	add	r7,r2,r7
   1526c:	3808d43a 	srli	r4,r7,16
   15270:	1987383a 	mul	r3,r3,r6
   15274:	38bfffcc 	andi	r2,r7,65535
   15278:	1907883a 	add	r3,r3,r4
   1527c:	1808943a 	slli	r4,r3,16
   15280:	180ed43a 	srli	r7,r3,16
   15284:	2085883a 	add	r2,r4,r2
   15288:	28bfff15 	stw	r2,-4(r5)
   1528c:	443ff016 	blt	r8,r16,15250 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015250>
   15290:	38000926 	beq	r7,zero,152b8 <__multadd+0x94>
   15294:	88800217 	ldw	r2,8(r17)
   15298:	80800f0e 	bge	r16,r2,152d8 <__multadd+0xb4>
   1529c:	80800144 	addi	r2,r16,5
   152a0:	1085883a 	add	r2,r2,r2
   152a4:	1085883a 	add	r2,r2,r2
   152a8:	8885883a 	add	r2,r17,r2
   152ac:	11c00015 	stw	r7,0(r2)
   152b0:	84000044 	addi	r16,r16,1
   152b4:	8c000415 	stw	r16,16(r17)
   152b8:	8805883a 	mov	r2,r17
   152bc:	dfc00517 	ldw	ra,20(sp)
   152c0:	dcc00417 	ldw	r19,16(sp)
   152c4:	dc800317 	ldw	r18,12(sp)
   152c8:	dc400217 	ldw	r17,8(sp)
   152cc:	dc000117 	ldw	r16,4(sp)
   152d0:	dec00604 	addi	sp,sp,24
   152d4:	f800283a 	ret
   152d8:	89400117 	ldw	r5,4(r17)
   152dc:	9009883a 	mov	r4,r18
   152e0:	d9c00015 	stw	r7,0(sp)
   152e4:	29400044 	addi	r5,r5,1
   152e8:	00151540 	call	15154 <_Balloc>
   152ec:	89800417 	ldw	r6,16(r17)
   152f0:	89400304 	addi	r5,r17,12
   152f4:	11000304 	addi	r4,r2,12
   152f8:	31800084 	addi	r6,r6,2
   152fc:	318d883a 	add	r6,r6,r6
   15300:	318d883a 	add	r6,r6,r6
   15304:	1027883a 	mov	r19,r2
   15308:	000d3800 	call	d380 <memcpy>
   1530c:	d9c00017 	ldw	r7,0(sp)
   15310:	88000a26 	beq	r17,zero,1533c <__multadd+0x118>
   15314:	88c00117 	ldw	r3,4(r17)
   15318:	90801317 	ldw	r2,76(r18)
   1531c:	18c7883a 	add	r3,r3,r3
   15320:	18c7883a 	add	r3,r3,r3
   15324:	10c5883a 	add	r2,r2,r3
   15328:	10c00017 	ldw	r3,0(r2)
   1532c:	88c00015 	stw	r3,0(r17)
   15330:	14400015 	stw	r17,0(r2)
   15334:	9823883a 	mov	r17,r19
   15338:	003fd806 	br	1529c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701529c>
   1533c:	9823883a 	mov	r17,r19
   15340:	003fd606 	br	1529c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701529c>

00015344 <__s2b>:
   15344:	defff904 	addi	sp,sp,-28
   15348:	dc400115 	stw	r17,4(sp)
   1534c:	dc000015 	stw	r16,0(sp)
   15350:	2023883a 	mov	r17,r4
   15354:	2821883a 	mov	r16,r5
   15358:	39000204 	addi	r4,r7,8
   1535c:	01400244 	movi	r5,9
   15360:	dcc00315 	stw	r19,12(sp)
   15364:	dc800215 	stw	r18,8(sp)
   15368:	dfc00615 	stw	ra,24(sp)
   1536c:	dd400515 	stw	r21,20(sp)
   15370:	dd000415 	stw	r20,16(sp)
   15374:	3825883a 	mov	r18,r7
   15378:	3027883a 	mov	r19,r6
   1537c:	000c9700 	call	c970 <__divsi3>
   15380:	00c00044 	movi	r3,1
   15384:	000b883a 	mov	r5,zero
   15388:	1880030e 	bge	r3,r2,15398 <__s2b+0x54>
   1538c:	18c7883a 	add	r3,r3,r3
   15390:	29400044 	addi	r5,r5,1
   15394:	18bffd16 	blt	r3,r2,1538c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701538c>
   15398:	8809883a 	mov	r4,r17
   1539c:	00151540 	call	15154 <_Balloc>
   153a0:	d8c00717 	ldw	r3,28(sp)
   153a4:	10c00515 	stw	r3,20(r2)
   153a8:	00c00044 	movi	r3,1
   153ac:	10c00415 	stw	r3,16(r2)
   153b0:	00c00244 	movi	r3,9
   153b4:	1cc0210e 	bge	r3,r19,1543c <__s2b+0xf8>
   153b8:	80eb883a 	add	r21,r16,r3
   153bc:	a829883a 	mov	r20,r21
   153c0:	84e1883a 	add	r16,r16,r19
   153c4:	a1c00007 	ldb	r7,0(r20)
   153c8:	01800284 	movi	r6,10
   153cc:	a5000044 	addi	r20,r20,1
   153d0:	100b883a 	mov	r5,r2
   153d4:	39fff404 	addi	r7,r7,-48
   153d8:	8809883a 	mov	r4,r17
   153dc:	00152240 	call	15224 <__multadd>
   153e0:	a43ff81e 	bne	r20,r16,153c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70153c4>
   153e4:	ace1883a 	add	r16,r21,r19
   153e8:	843ffe04 	addi	r16,r16,-8
   153ec:	9c800a0e 	bge	r19,r18,15418 <__s2b+0xd4>
   153f0:	94e5c83a 	sub	r18,r18,r19
   153f4:	84a5883a 	add	r18,r16,r18
   153f8:	81c00007 	ldb	r7,0(r16)
   153fc:	01800284 	movi	r6,10
   15400:	84000044 	addi	r16,r16,1
   15404:	100b883a 	mov	r5,r2
   15408:	39fff404 	addi	r7,r7,-48
   1540c:	8809883a 	mov	r4,r17
   15410:	00152240 	call	15224 <__multadd>
   15414:	84bff81e 	bne	r16,r18,153f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70153f8>
   15418:	dfc00617 	ldw	ra,24(sp)
   1541c:	dd400517 	ldw	r21,20(sp)
   15420:	dd000417 	ldw	r20,16(sp)
   15424:	dcc00317 	ldw	r19,12(sp)
   15428:	dc800217 	ldw	r18,8(sp)
   1542c:	dc400117 	ldw	r17,4(sp)
   15430:	dc000017 	ldw	r16,0(sp)
   15434:	dec00704 	addi	sp,sp,28
   15438:	f800283a 	ret
   1543c:	84000284 	addi	r16,r16,10
   15440:	1827883a 	mov	r19,r3
   15444:	003fe906 	br	153ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70153ec>

00015448 <__hi0bits>:
   15448:	20bfffec 	andhi	r2,r4,65535
   1544c:	1000141e 	bne	r2,zero,154a0 <__hi0bits+0x58>
   15450:	2008943a 	slli	r4,r4,16
   15454:	00800404 	movi	r2,16
   15458:	20ffc02c 	andhi	r3,r4,65280
   1545c:	1800021e 	bne	r3,zero,15468 <__hi0bits+0x20>
   15460:	2008923a 	slli	r4,r4,8
   15464:	10800204 	addi	r2,r2,8
   15468:	20fc002c 	andhi	r3,r4,61440
   1546c:	1800021e 	bne	r3,zero,15478 <__hi0bits+0x30>
   15470:	2008913a 	slli	r4,r4,4
   15474:	10800104 	addi	r2,r2,4
   15478:	20f0002c 	andhi	r3,r4,49152
   1547c:	1800031e 	bne	r3,zero,1548c <__hi0bits+0x44>
   15480:	2109883a 	add	r4,r4,r4
   15484:	10800084 	addi	r2,r2,2
   15488:	2109883a 	add	r4,r4,r4
   1548c:	20000316 	blt	r4,zero,1549c <__hi0bits+0x54>
   15490:	2110002c 	andhi	r4,r4,16384
   15494:	2000041e 	bne	r4,zero,154a8 <__hi0bits+0x60>
   15498:	00800804 	movi	r2,32
   1549c:	f800283a 	ret
   154a0:	0005883a 	mov	r2,zero
   154a4:	003fec06 	br	15458 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015458>
   154a8:	10800044 	addi	r2,r2,1
   154ac:	f800283a 	ret

000154b0 <__lo0bits>:
   154b0:	20c00017 	ldw	r3,0(r4)
   154b4:	188001cc 	andi	r2,r3,7
   154b8:	10000826 	beq	r2,zero,154dc <__lo0bits+0x2c>
   154bc:	1880004c 	andi	r2,r3,1
   154c0:	1000211e 	bne	r2,zero,15548 <__lo0bits+0x98>
   154c4:	1880008c 	andi	r2,r3,2
   154c8:	1000211e 	bne	r2,zero,15550 <__lo0bits+0xa0>
   154cc:	1806d0ba 	srli	r3,r3,2
   154d0:	00800084 	movi	r2,2
   154d4:	20c00015 	stw	r3,0(r4)
   154d8:	f800283a 	ret
   154dc:	18bfffcc 	andi	r2,r3,65535
   154e0:	10001326 	beq	r2,zero,15530 <__lo0bits+0x80>
   154e4:	0005883a 	mov	r2,zero
   154e8:	19403fcc 	andi	r5,r3,255
   154ec:	2800021e 	bne	r5,zero,154f8 <__lo0bits+0x48>
   154f0:	1806d23a 	srli	r3,r3,8
   154f4:	10800204 	addi	r2,r2,8
   154f8:	194003cc 	andi	r5,r3,15
   154fc:	2800021e 	bne	r5,zero,15508 <__lo0bits+0x58>
   15500:	1806d13a 	srli	r3,r3,4
   15504:	10800104 	addi	r2,r2,4
   15508:	194000cc 	andi	r5,r3,3
   1550c:	2800021e 	bne	r5,zero,15518 <__lo0bits+0x68>
   15510:	1806d0ba 	srli	r3,r3,2
   15514:	10800084 	addi	r2,r2,2
   15518:	1940004c 	andi	r5,r3,1
   1551c:	2800081e 	bne	r5,zero,15540 <__lo0bits+0x90>
   15520:	1806d07a 	srli	r3,r3,1
   15524:	1800051e 	bne	r3,zero,1553c <__lo0bits+0x8c>
   15528:	00800804 	movi	r2,32
   1552c:	f800283a 	ret
   15530:	1806d43a 	srli	r3,r3,16
   15534:	00800404 	movi	r2,16
   15538:	003feb06 	br	154e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70154e8>
   1553c:	10800044 	addi	r2,r2,1
   15540:	20c00015 	stw	r3,0(r4)
   15544:	f800283a 	ret
   15548:	0005883a 	mov	r2,zero
   1554c:	f800283a 	ret
   15550:	1806d07a 	srli	r3,r3,1
   15554:	00800044 	movi	r2,1
   15558:	20c00015 	stw	r3,0(r4)
   1555c:	f800283a 	ret

00015560 <__i2b>:
   15560:	defffd04 	addi	sp,sp,-12
   15564:	dc000015 	stw	r16,0(sp)
   15568:	04000044 	movi	r16,1
   1556c:	dc400115 	stw	r17,4(sp)
   15570:	2823883a 	mov	r17,r5
   15574:	800b883a 	mov	r5,r16
   15578:	dfc00215 	stw	ra,8(sp)
   1557c:	00151540 	call	15154 <_Balloc>
   15580:	14400515 	stw	r17,20(r2)
   15584:	14000415 	stw	r16,16(r2)
   15588:	dfc00217 	ldw	ra,8(sp)
   1558c:	dc400117 	ldw	r17,4(sp)
   15590:	dc000017 	ldw	r16,0(sp)
   15594:	dec00304 	addi	sp,sp,12
   15598:	f800283a 	ret

0001559c <__multiply>:
   1559c:	defffa04 	addi	sp,sp,-24
   155a0:	dcc00315 	stw	r19,12(sp)
   155a4:	dc800215 	stw	r18,8(sp)
   155a8:	34c00417 	ldw	r19,16(r6)
   155ac:	2c800417 	ldw	r18,16(r5)
   155b0:	dd000415 	stw	r20,16(sp)
   155b4:	dc400115 	stw	r17,4(sp)
   155b8:	dfc00515 	stw	ra,20(sp)
   155bc:	dc000015 	stw	r16,0(sp)
   155c0:	2829883a 	mov	r20,r5
   155c4:	3023883a 	mov	r17,r6
   155c8:	94c0050e 	bge	r18,r19,155e0 <__multiply+0x44>
   155cc:	9007883a 	mov	r3,r18
   155d0:	3029883a 	mov	r20,r6
   155d4:	9825883a 	mov	r18,r19
   155d8:	2823883a 	mov	r17,r5
   155dc:	1827883a 	mov	r19,r3
   155e0:	a0800217 	ldw	r2,8(r20)
   155e4:	94e1883a 	add	r16,r18,r19
   155e8:	a1400117 	ldw	r5,4(r20)
   155ec:	1400010e 	bge	r2,r16,155f4 <__multiply+0x58>
   155f0:	29400044 	addi	r5,r5,1
   155f4:	00151540 	call	15154 <_Balloc>
   155f8:	8415883a 	add	r10,r16,r16
   155fc:	12c00504 	addi	r11,r2,20
   15600:	5295883a 	add	r10,r10,r10
   15604:	5a95883a 	add	r10,r11,r10
   15608:	5807883a 	mov	r3,r11
   1560c:	5a80032e 	bgeu	r11,r10,1561c <__multiply+0x80>
   15610:	18000015 	stw	zero,0(r3)
   15614:	18c00104 	addi	r3,r3,4
   15618:	1abffd36 	bltu	r3,r10,15610 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015610>
   1561c:	9ce7883a 	add	r19,r19,r19
   15620:	94a5883a 	add	r18,r18,r18
   15624:	89800504 	addi	r6,r17,20
   15628:	9ce7883a 	add	r19,r19,r19
   1562c:	a3400504 	addi	r13,r20,20
   15630:	94a5883a 	add	r18,r18,r18
   15634:	34d9883a 	add	r12,r6,r19
   15638:	6c93883a 	add	r9,r13,r18
   1563c:	3300422e 	bgeu	r6,r12,15748 <__multiply+0x1ac>
   15640:	37c00017 	ldw	ra,0(r6)
   15644:	fbffffcc 	andi	r15,ra,65535
   15648:	78001b26 	beq	r15,zero,156b8 <__multiply+0x11c>
   1564c:	5811883a 	mov	r8,r11
   15650:	681d883a 	mov	r14,r13
   15654:	000f883a 	mov	r7,zero
   15658:	71000017 	ldw	r4,0(r14)
   1565c:	40c00017 	ldw	r3,0(r8)
   15660:	73800104 	addi	r14,r14,4
   15664:	217fffcc 	andi	r5,r4,65535
   15668:	2bcb383a 	mul	r5,r5,r15
   1566c:	2008d43a 	srli	r4,r4,16
   15670:	1c7fffcc 	andi	r17,r3,65535
   15674:	2c4b883a 	add	r5,r5,r17
   15678:	29cb883a 	add	r5,r5,r7
   1567c:	23c9383a 	mul	r4,r4,r15
   15680:	1806d43a 	srli	r3,r3,16
   15684:	280ed43a 	srli	r7,r5,16
   15688:	297fffcc 	andi	r5,r5,65535
   1568c:	20c7883a 	add	r3,r4,r3
   15690:	19c7883a 	add	r3,r3,r7
   15694:	1808943a 	slli	r4,r3,16
   15698:	4023883a 	mov	r17,r8
   1569c:	180ed43a 	srli	r7,r3,16
   156a0:	214ab03a 	or	r5,r4,r5
   156a4:	41400015 	stw	r5,0(r8)
   156a8:	42000104 	addi	r8,r8,4
   156ac:	727fea36 	bltu	r14,r9,15658 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015658>
   156b0:	89c00115 	stw	r7,4(r17)
   156b4:	37c00017 	ldw	ra,0(r6)
   156b8:	f83ed43a 	srli	ra,ra,16
   156bc:	f8001f26 	beq	ra,zero,1573c <__multiply+0x1a0>
   156c0:	58c00017 	ldw	r3,0(r11)
   156c4:	681d883a 	mov	r14,r13
   156c8:	581f883a 	mov	r15,r11
   156cc:	1811883a 	mov	r8,r3
   156d0:	5825883a 	mov	r18,r11
   156d4:	000f883a 	mov	r7,zero
   156d8:	00000106 	br	156e0 <__multiply+0x144>
   156dc:	8825883a 	mov	r18,r17
   156e0:	7140000b 	ldhu	r5,0(r14)
   156e4:	4010d43a 	srli	r8,r8,16
   156e8:	193fffcc 	andi	r4,r3,65535
   156ec:	2fcb383a 	mul	r5,r5,ra
   156f0:	7bc00104 	addi	r15,r15,4
   156f4:	73800104 	addi	r14,r14,4
   156f8:	2a0b883a 	add	r5,r5,r8
   156fc:	29cb883a 	add	r5,r5,r7
   15700:	2806943a 	slli	r3,r5,16
   15704:	94400104 	addi	r17,r18,4
   15708:	280ad43a 	srli	r5,r5,16
   1570c:	1908b03a 	or	r4,r3,r4
   15710:	793fff15 	stw	r4,-4(r15)
   15714:	70ffff17 	ldw	r3,-4(r14)
   15718:	8a000017 	ldw	r8,0(r17)
   1571c:	1806d43a 	srli	r3,r3,16
   15720:	413fffcc 	andi	r4,r8,65535
   15724:	1fc7383a 	mul	r3,r3,ra
   15728:	1907883a 	add	r3,r3,r4
   1572c:	1947883a 	add	r3,r3,r5
   15730:	180ed43a 	srli	r7,r3,16
   15734:	727fe936 	bltu	r14,r9,156dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70156dc>
   15738:	90c00115 	stw	r3,4(r18)
   1573c:	31800104 	addi	r6,r6,4
   15740:	5ac00104 	addi	r11,r11,4
   15744:	333fbe36 	bltu	r6,r12,15640 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015640>
   15748:	0400090e 	bge	zero,r16,15770 <__multiply+0x1d4>
   1574c:	50ffff17 	ldw	r3,-4(r10)
   15750:	52bfff04 	addi	r10,r10,-4
   15754:	18000326 	beq	r3,zero,15764 <__multiply+0x1c8>
   15758:	00000506 	br	15770 <__multiply+0x1d4>
   1575c:	50c00017 	ldw	r3,0(r10)
   15760:	1800031e 	bne	r3,zero,15770 <__multiply+0x1d4>
   15764:	843fffc4 	addi	r16,r16,-1
   15768:	52bfff04 	addi	r10,r10,-4
   1576c:	803ffb1e 	bne	r16,zero,1575c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701575c>
   15770:	14000415 	stw	r16,16(r2)
   15774:	dfc00517 	ldw	ra,20(sp)
   15778:	dd000417 	ldw	r20,16(sp)
   1577c:	dcc00317 	ldw	r19,12(sp)
   15780:	dc800217 	ldw	r18,8(sp)
   15784:	dc400117 	ldw	r17,4(sp)
   15788:	dc000017 	ldw	r16,0(sp)
   1578c:	dec00604 	addi	sp,sp,24
   15790:	f800283a 	ret

00015794 <__pow5mult>:
   15794:	defffa04 	addi	sp,sp,-24
   15798:	dcc00315 	stw	r19,12(sp)
   1579c:	dc000015 	stw	r16,0(sp)
   157a0:	dfc00515 	stw	ra,20(sp)
   157a4:	dd000415 	stw	r20,16(sp)
   157a8:	dc800215 	stw	r18,8(sp)
   157ac:	dc400115 	stw	r17,4(sp)
   157b0:	308000cc 	andi	r2,r6,3
   157b4:	3021883a 	mov	r16,r6
   157b8:	2027883a 	mov	r19,r4
   157bc:	10002f1e 	bne	r2,zero,1587c <__pow5mult+0xe8>
   157c0:	2825883a 	mov	r18,r5
   157c4:	8021d0ba 	srai	r16,r16,2
   157c8:	80001a26 	beq	r16,zero,15834 <__pow5mult+0xa0>
   157cc:	9c401217 	ldw	r17,72(r19)
   157d0:	8800061e 	bne	r17,zero,157ec <__pow5mult+0x58>
   157d4:	00003406 	br	158a8 <__pow5mult+0x114>
   157d8:	8021d07a 	srai	r16,r16,1
   157dc:	80001526 	beq	r16,zero,15834 <__pow5mult+0xa0>
   157e0:	88800017 	ldw	r2,0(r17)
   157e4:	10001c26 	beq	r2,zero,15858 <__pow5mult+0xc4>
   157e8:	1023883a 	mov	r17,r2
   157ec:	8080004c 	andi	r2,r16,1
   157f0:	103ff926 	beq	r2,zero,157d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70157d8>
   157f4:	880d883a 	mov	r6,r17
   157f8:	900b883a 	mov	r5,r18
   157fc:	9809883a 	mov	r4,r19
   15800:	001559c0 	call	1559c <__multiply>
   15804:	90001b26 	beq	r18,zero,15874 <__pow5mult+0xe0>
   15808:	91000117 	ldw	r4,4(r18)
   1580c:	98c01317 	ldw	r3,76(r19)
   15810:	8021d07a 	srai	r16,r16,1
   15814:	2109883a 	add	r4,r4,r4
   15818:	2109883a 	add	r4,r4,r4
   1581c:	1907883a 	add	r3,r3,r4
   15820:	19000017 	ldw	r4,0(r3)
   15824:	91000015 	stw	r4,0(r18)
   15828:	1c800015 	stw	r18,0(r3)
   1582c:	1025883a 	mov	r18,r2
   15830:	803feb1e 	bne	r16,zero,157e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70157e0>
   15834:	9005883a 	mov	r2,r18
   15838:	dfc00517 	ldw	ra,20(sp)
   1583c:	dd000417 	ldw	r20,16(sp)
   15840:	dcc00317 	ldw	r19,12(sp)
   15844:	dc800217 	ldw	r18,8(sp)
   15848:	dc400117 	ldw	r17,4(sp)
   1584c:	dc000017 	ldw	r16,0(sp)
   15850:	dec00604 	addi	sp,sp,24
   15854:	f800283a 	ret
   15858:	880d883a 	mov	r6,r17
   1585c:	880b883a 	mov	r5,r17
   15860:	9809883a 	mov	r4,r19
   15864:	001559c0 	call	1559c <__multiply>
   15868:	88800015 	stw	r2,0(r17)
   1586c:	10000015 	stw	zero,0(r2)
   15870:	003fdd06 	br	157e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70157e8>
   15874:	1025883a 	mov	r18,r2
   15878:	003fd706 	br	157d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70157d8>
   1587c:	10bfffc4 	addi	r2,r2,-1
   15880:	1085883a 	add	r2,r2,r2
   15884:	00c000f4 	movhi	r3,3
   15888:	18e0da04 	addi	r3,r3,-31896
   1588c:	1085883a 	add	r2,r2,r2
   15890:	1885883a 	add	r2,r3,r2
   15894:	11800017 	ldw	r6,0(r2)
   15898:	000f883a 	mov	r7,zero
   1589c:	00152240 	call	15224 <__multadd>
   158a0:	1025883a 	mov	r18,r2
   158a4:	003fc706 	br	157c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70157c4>
   158a8:	05000044 	movi	r20,1
   158ac:	a00b883a 	mov	r5,r20
   158b0:	9809883a 	mov	r4,r19
   158b4:	00151540 	call	15154 <_Balloc>
   158b8:	1023883a 	mov	r17,r2
   158bc:	00809c44 	movi	r2,625
   158c0:	88800515 	stw	r2,20(r17)
   158c4:	8d000415 	stw	r20,16(r17)
   158c8:	9c401215 	stw	r17,72(r19)
   158cc:	88000015 	stw	zero,0(r17)
   158d0:	003fc606 	br	157ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70157ec>

000158d4 <__lshift>:
   158d4:	defff904 	addi	sp,sp,-28
   158d8:	dd400515 	stw	r21,20(sp)
   158dc:	dcc00315 	stw	r19,12(sp)
   158e0:	302bd17a 	srai	r21,r6,5
   158e4:	2cc00417 	ldw	r19,16(r5)
   158e8:	28800217 	ldw	r2,8(r5)
   158ec:	dd000415 	stw	r20,16(sp)
   158f0:	ace7883a 	add	r19,r21,r19
   158f4:	dc800215 	stw	r18,8(sp)
   158f8:	dc400115 	stw	r17,4(sp)
   158fc:	dc000015 	stw	r16,0(sp)
   15900:	dfc00615 	stw	ra,24(sp)
   15904:	9c000044 	addi	r16,r19,1
   15908:	2823883a 	mov	r17,r5
   1590c:	3029883a 	mov	r20,r6
   15910:	2025883a 	mov	r18,r4
   15914:	29400117 	ldw	r5,4(r5)
   15918:	1400030e 	bge	r2,r16,15928 <__lshift+0x54>
   1591c:	1085883a 	add	r2,r2,r2
   15920:	29400044 	addi	r5,r5,1
   15924:	143ffd16 	blt	r2,r16,1591c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701591c>
   15928:	9009883a 	mov	r4,r18
   1592c:	00151540 	call	15154 <_Balloc>
   15930:	10c00504 	addi	r3,r2,20
   15934:	0540070e 	bge	zero,r21,15954 <__lshift+0x80>
   15938:	ad6b883a 	add	r21,r21,r21
   1593c:	ad6b883a 	add	r21,r21,r21
   15940:	1809883a 	mov	r4,r3
   15944:	1d47883a 	add	r3,r3,r21
   15948:	20000015 	stw	zero,0(r4)
   1594c:	21000104 	addi	r4,r4,4
   15950:	193ffd1e 	bne	r3,r4,15948 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015948>
   15954:	8a000417 	ldw	r8,16(r17)
   15958:	89000504 	addi	r4,r17,20
   1595c:	a18007cc 	andi	r6,r20,31
   15960:	4211883a 	add	r8,r8,r8
   15964:	4211883a 	add	r8,r8,r8
   15968:	2211883a 	add	r8,r4,r8
   1596c:	30002326 	beq	r6,zero,159fc <__lshift+0x128>
   15970:	02400804 	movi	r9,32
   15974:	4993c83a 	sub	r9,r9,r6
   15978:	000b883a 	mov	r5,zero
   1597c:	21c00017 	ldw	r7,0(r4)
   15980:	1815883a 	mov	r10,r3
   15984:	18c00104 	addi	r3,r3,4
   15988:	398e983a 	sll	r7,r7,r6
   1598c:	21000104 	addi	r4,r4,4
   15990:	394ab03a 	or	r5,r7,r5
   15994:	197fff15 	stw	r5,-4(r3)
   15998:	217fff17 	ldw	r5,-4(r4)
   1599c:	2a4ad83a 	srl	r5,r5,r9
   159a0:	223ff636 	bltu	r4,r8,1597c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701597c>
   159a4:	51400115 	stw	r5,4(r10)
   159a8:	28001a1e 	bne	r5,zero,15a14 <__lshift+0x140>
   159ac:	843fffc4 	addi	r16,r16,-1
   159b0:	14000415 	stw	r16,16(r2)
   159b4:	88000826 	beq	r17,zero,159d8 <__lshift+0x104>
   159b8:	89000117 	ldw	r4,4(r17)
   159bc:	90c01317 	ldw	r3,76(r18)
   159c0:	2109883a 	add	r4,r4,r4
   159c4:	2109883a 	add	r4,r4,r4
   159c8:	1907883a 	add	r3,r3,r4
   159cc:	19000017 	ldw	r4,0(r3)
   159d0:	89000015 	stw	r4,0(r17)
   159d4:	1c400015 	stw	r17,0(r3)
   159d8:	dfc00617 	ldw	ra,24(sp)
   159dc:	dd400517 	ldw	r21,20(sp)
   159e0:	dd000417 	ldw	r20,16(sp)
   159e4:	dcc00317 	ldw	r19,12(sp)
   159e8:	dc800217 	ldw	r18,8(sp)
   159ec:	dc400117 	ldw	r17,4(sp)
   159f0:	dc000017 	ldw	r16,0(sp)
   159f4:	dec00704 	addi	sp,sp,28
   159f8:	f800283a 	ret
   159fc:	21400017 	ldw	r5,0(r4)
   15a00:	18c00104 	addi	r3,r3,4
   15a04:	21000104 	addi	r4,r4,4
   15a08:	197fff15 	stw	r5,-4(r3)
   15a0c:	223ffb36 	bltu	r4,r8,159fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70159fc>
   15a10:	003fe606 	br	159ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70159ac>
   15a14:	9c000084 	addi	r16,r19,2
   15a18:	003fe406 	br	159ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70159ac>

00015a1c <__mcmp>:
   15a1c:	20800417 	ldw	r2,16(r4)
   15a20:	28c00417 	ldw	r3,16(r5)
   15a24:	10c5c83a 	sub	r2,r2,r3
   15a28:	1000111e 	bne	r2,zero,15a70 <__mcmp+0x54>
   15a2c:	18c7883a 	add	r3,r3,r3
   15a30:	18c7883a 	add	r3,r3,r3
   15a34:	21000504 	addi	r4,r4,20
   15a38:	29400504 	addi	r5,r5,20
   15a3c:	20c5883a 	add	r2,r4,r3
   15a40:	28cb883a 	add	r5,r5,r3
   15a44:	00000106 	br	15a4c <__mcmp+0x30>
   15a48:	20800a2e 	bgeu	r4,r2,15a74 <__mcmp+0x58>
   15a4c:	10bfff04 	addi	r2,r2,-4
   15a50:	297fff04 	addi	r5,r5,-4
   15a54:	11800017 	ldw	r6,0(r2)
   15a58:	28c00017 	ldw	r3,0(r5)
   15a5c:	30fffa26 	beq	r6,r3,15a48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015a48>
   15a60:	30c00236 	bltu	r6,r3,15a6c <__mcmp+0x50>
   15a64:	00800044 	movi	r2,1
   15a68:	f800283a 	ret
   15a6c:	00bfffc4 	movi	r2,-1
   15a70:	f800283a 	ret
   15a74:	0005883a 	mov	r2,zero
   15a78:	f800283a 	ret

00015a7c <__mdiff>:
   15a7c:	28c00417 	ldw	r3,16(r5)
   15a80:	30800417 	ldw	r2,16(r6)
   15a84:	defffa04 	addi	sp,sp,-24
   15a88:	dcc00315 	stw	r19,12(sp)
   15a8c:	dc800215 	stw	r18,8(sp)
   15a90:	dfc00515 	stw	ra,20(sp)
   15a94:	dd000415 	stw	r20,16(sp)
   15a98:	dc400115 	stw	r17,4(sp)
   15a9c:	dc000015 	stw	r16,0(sp)
   15aa0:	1887c83a 	sub	r3,r3,r2
   15aa4:	2825883a 	mov	r18,r5
   15aa8:	3027883a 	mov	r19,r6
   15aac:	1800141e 	bne	r3,zero,15b00 <__mdiff+0x84>
   15ab0:	1085883a 	add	r2,r2,r2
   15ab4:	1085883a 	add	r2,r2,r2
   15ab8:	2a000504 	addi	r8,r5,20
   15abc:	34000504 	addi	r16,r6,20
   15ac0:	4087883a 	add	r3,r8,r2
   15ac4:	8085883a 	add	r2,r16,r2
   15ac8:	00000106 	br	15ad0 <__mdiff+0x54>
   15acc:	40c0592e 	bgeu	r8,r3,15c34 <__mdiff+0x1b8>
   15ad0:	18ffff04 	addi	r3,r3,-4
   15ad4:	10bfff04 	addi	r2,r2,-4
   15ad8:	19c00017 	ldw	r7,0(r3)
   15adc:	11400017 	ldw	r5,0(r2)
   15ae0:	397ffa26 	beq	r7,r5,15acc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015acc>
   15ae4:	3940592e 	bgeu	r7,r5,15c4c <__mdiff+0x1d0>
   15ae8:	9005883a 	mov	r2,r18
   15aec:	4023883a 	mov	r17,r8
   15af0:	9825883a 	mov	r18,r19
   15af4:	05000044 	movi	r20,1
   15af8:	1027883a 	mov	r19,r2
   15afc:	00000406 	br	15b10 <__mdiff+0x94>
   15b00:	18005616 	blt	r3,zero,15c5c <__mdiff+0x1e0>
   15b04:	34400504 	addi	r17,r6,20
   15b08:	2c000504 	addi	r16,r5,20
   15b0c:	0029883a 	mov	r20,zero
   15b10:	91400117 	ldw	r5,4(r18)
   15b14:	00151540 	call	15154 <_Balloc>
   15b18:	92400417 	ldw	r9,16(r18)
   15b1c:	9b000417 	ldw	r12,16(r19)
   15b20:	12c00504 	addi	r11,r2,20
   15b24:	4a51883a 	add	r8,r9,r9
   15b28:	6319883a 	add	r12,r12,r12
   15b2c:	4211883a 	add	r8,r8,r8
   15b30:	6319883a 	add	r12,r12,r12
   15b34:	15000315 	stw	r20,12(r2)
   15b38:	8211883a 	add	r8,r16,r8
   15b3c:	8b19883a 	add	r12,r17,r12
   15b40:	0007883a 	mov	r3,zero
   15b44:	81400017 	ldw	r5,0(r16)
   15b48:	89c00017 	ldw	r7,0(r17)
   15b4c:	59800104 	addi	r6,r11,4
   15b50:	293fffcc 	andi	r4,r5,65535
   15b54:	20c7883a 	add	r3,r4,r3
   15b58:	393fffcc 	andi	r4,r7,65535
   15b5c:	1909c83a 	sub	r4,r3,r4
   15b60:	280ad43a 	srli	r5,r5,16
   15b64:	380ed43a 	srli	r7,r7,16
   15b68:	2007d43a 	srai	r3,r4,16
   15b6c:	213fffcc 	andi	r4,r4,65535
   15b70:	29cbc83a 	sub	r5,r5,r7
   15b74:	28c7883a 	add	r3,r5,r3
   15b78:	180a943a 	slli	r5,r3,16
   15b7c:	8c400104 	addi	r17,r17,4
   15b80:	84000104 	addi	r16,r16,4
   15b84:	2908b03a 	or	r4,r5,r4
   15b88:	59000015 	stw	r4,0(r11)
   15b8c:	1807d43a 	srai	r3,r3,16
   15b90:	3015883a 	mov	r10,r6
   15b94:	3017883a 	mov	r11,r6
   15b98:	8b3fea36 	bltu	r17,r12,15b44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015b44>
   15b9c:	8200162e 	bgeu	r16,r8,15bf8 <__mdiff+0x17c>
   15ba0:	8017883a 	mov	r11,r16
   15ba4:	59400017 	ldw	r5,0(r11)
   15ba8:	31800104 	addi	r6,r6,4
   15bac:	5ac00104 	addi	r11,r11,4
   15bb0:	293fffcc 	andi	r4,r5,65535
   15bb4:	20c7883a 	add	r3,r4,r3
   15bb8:	280ed43a 	srli	r7,r5,16
   15bbc:	180bd43a 	srai	r5,r3,16
   15bc0:	193fffcc 	andi	r4,r3,65535
   15bc4:	3947883a 	add	r3,r7,r5
   15bc8:	180a943a 	slli	r5,r3,16
   15bcc:	1807d43a 	srai	r3,r3,16
   15bd0:	2908b03a 	or	r4,r5,r4
   15bd4:	313fff15 	stw	r4,-4(r6)
   15bd8:	5a3ff236 	bltu	r11,r8,15ba4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015ba4>
   15bdc:	0406303a 	nor	r3,zero,r16
   15be0:	1a07883a 	add	r3,r3,r8
   15be4:	1806d0ba 	srli	r3,r3,2
   15be8:	18c00044 	addi	r3,r3,1
   15bec:	18c7883a 	add	r3,r3,r3
   15bf0:	18c7883a 	add	r3,r3,r3
   15bf4:	50d5883a 	add	r10,r10,r3
   15bf8:	50ffff04 	addi	r3,r10,-4
   15bfc:	2000041e 	bne	r4,zero,15c10 <__mdiff+0x194>
   15c00:	18ffff04 	addi	r3,r3,-4
   15c04:	19000017 	ldw	r4,0(r3)
   15c08:	4a7fffc4 	addi	r9,r9,-1
   15c0c:	203ffc26 	beq	r4,zero,15c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015c00>
   15c10:	12400415 	stw	r9,16(r2)
   15c14:	dfc00517 	ldw	ra,20(sp)
   15c18:	dd000417 	ldw	r20,16(sp)
   15c1c:	dcc00317 	ldw	r19,12(sp)
   15c20:	dc800217 	ldw	r18,8(sp)
   15c24:	dc400117 	ldw	r17,4(sp)
   15c28:	dc000017 	ldw	r16,0(sp)
   15c2c:	dec00604 	addi	sp,sp,24
   15c30:	f800283a 	ret
   15c34:	000b883a 	mov	r5,zero
   15c38:	00151540 	call	15154 <_Balloc>
   15c3c:	00c00044 	movi	r3,1
   15c40:	10c00415 	stw	r3,16(r2)
   15c44:	10000515 	stw	zero,20(r2)
   15c48:	003ff206 	br	15c14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015c14>
   15c4c:	8023883a 	mov	r17,r16
   15c50:	0029883a 	mov	r20,zero
   15c54:	4021883a 	mov	r16,r8
   15c58:	003fad06 	br	15b10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015b10>
   15c5c:	9005883a 	mov	r2,r18
   15c60:	94400504 	addi	r17,r18,20
   15c64:	9c000504 	addi	r16,r19,20
   15c68:	9825883a 	mov	r18,r19
   15c6c:	05000044 	movi	r20,1
   15c70:	1027883a 	mov	r19,r2
   15c74:	003fa606 	br	15b10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015b10>

00015c78 <__ulp>:
   15c78:	295ffc2c 	andhi	r5,r5,32752
   15c7c:	00bf3034 	movhi	r2,64704
   15c80:	2887883a 	add	r3,r5,r2
   15c84:	00c0020e 	bge	zero,r3,15c90 <__ulp+0x18>
   15c88:	0005883a 	mov	r2,zero
   15c8c:	f800283a 	ret
   15c90:	00c7c83a 	sub	r3,zero,r3
   15c94:	1807d53a 	srai	r3,r3,20
   15c98:	008004c4 	movi	r2,19
   15c9c:	10c00b0e 	bge	r2,r3,15ccc <__ulp+0x54>
   15ca0:	18bffb04 	addi	r2,r3,-20
   15ca4:	01000784 	movi	r4,30
   15ca8:	0007883a 	mov	r3,zero
   15cac:	20800516 	blt	r4,r2,15cc4 <__ulp+0x4c>
   15cb0:	010007c4 	movi	r4,31
   15cb4:	2089c83a 	sub	r4,r4,r2
   15cb8:	00800044 	movi	r2,1
   15cbc:	1104983a 	sll	r2,r2,r4
   15cc0:	f800283a 	ret
   15cc4:	00800044 	movi	r2,1
   15cc8:	f800283a 	ret
   15ccc:	01400234 	movhi	r5,8
   15cd0:	28c7d83a 	sra	r3,r5,r3
   15cd4:	0005883a 	mov	r2,zero
   15cd8:	f800283a 	ret

00015cdc <__b2d>:
   15cdc:	defffa04 	addi	sp,sp,-24
   15ce0:	dc000015 	stw	r16,0(sp)
   15ce4:	24000417 	ldw	r16,16(r4)
   15ce8:	dc400115 	stw	r17,4(sp)
   15cec:	24400504 	addi	r17,r4,20
   15cf0:	8421883a 	add	r16,r16,r16
   15cf4:	8421883a 	add	r16,r16,r16
   15cf8:	8c21883a 	add	r16,r17,r16
   15cfc:	dc800215 	stw	r18,8(sp)
   15d00:	84bfff17 	ldw	r18,-4(r16)
   15d04:	dd000415 	stw	r20,16(sp)
   15d08:	dcc00315 	stw	r19,12(sp)
   15d0c:	9009883a 	mov	r4,r18
   15d10:	2829883a 	mov	r20,r5
   15d14:	dfc00515 	stw	ra,20(sp)
   15d18:	00154480 	call	15448 <__hi0bits>
   15d1c:	00c00804 	movi	r3,32
   15d20:	1889c83a 	sub	r4,r3,r2
   15d24:	a1000015 	stw	r4,0(r20)
   15d28:	01000284 	movi	r4,10
   15d2c:	84ffff04 	addi	r19,r16,-4
   15d30:	20801216 	blt	r4,r2,15d7c <__b2d+0xa0>
   15d34:	018002c4 	movi	r6,11
   15d38:	308dc83a 	sub	r6,r6,r2
   15d3c:	9186d83a 	srl	r3,r18,r6
   15d40:	18cffc34 	orhi	r3,r3,16368
   15d44:	8cc0212e 	bgeu	r17,r19,15dcc <__b2d+0xf0>
   15d48:	813ffe17 	ldw	r4,-8(r16)
   15d4c:	218cd83a 	srl	r6,r4,r6
   15d50:	10800544 	addi	r2,r2,21
   15d54:	9084983a 	sll	r2,r18,r2
   15d58:	1184b03a 	or	r2,r2,r6
   15d5c:	dfc00517 	ldw	ra,20(sp)
   15d60:	dd000417 	ldw	r20,16(sp)
   15d64:	dcc00317 	ldw	r19,12(sp)
   15d68:	dc800217 	ldw	r18,8(sp)
   15d6c:	dc400117 	ldw	r17,4(sp)
   15d70:	dc000017 	ldw	r16,0(sp)
   15d74:	dec00604 	addi	sp,sp,24
   15d78:	f800283a 	ret
   15d7c:	8cc00f2e 	bgeu	r17,r19,15dbc <__b2d+0xe0>
   15d80:	117ffd44 	addi	r5,r2,-11
   15d84:	80bffe17 	ldw	r2,-8(r16)
   15d88:	28000e26 	beq	r5,zero,15dc4 <__b2d+0xe8>
   15d8c:	1949c83a 	sub	r4,r3,r5
   15d90:	9164983a 	sll	r18,r18,r5
   15d94:	1106d83a 	srl	r3,r2,r4
   15d98:	81bffe04 	addi	r6,r16,-8
   15d9c:	948ffc34 	orhi	r18,r18,16368
   15da0:	90c6b03a 	or	r3,r18,r3
   15da4:	89800e2e 	bgeu	r17,r6,15de0 <__b2d+0x104>
   15da8:	81bffd17 	ldw	r6,-12(r16)
   15dac:	1144983a 	sll	r2,r2,r5
   15db0:	310ad83a 	srl	r5,r6,r4
   15db4:	2884b03a 	or	r2,r5,r2
   15db8:	003fe806 	br	15d5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015d5c>
   15dbc:	10bffd44 	addi	r2,r2,-11
   15dc0:	1000041e 	bne	r2,zero,15dd4 <__b2d+0xf8>
   15dc4:	90cffc34 	orhi	r3,r18,16368
   15dc8:	003fe406 	br	15d5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015d5c>
   15dcc:	000d883a 	mov	r6,zero
   15dd0:	003fdf06 	br	15d50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015d50>
   15dd4:	90a4983a 	sll	r18,r18,r2
   15dd8:	0005883a 	mov	r2,zero
   15ddc:	003ff906 	br	15dc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015dc4>
   15de0:	1144983a 	sll	r2,r2,r5
   15de4:	003fdd06 	br	15d5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015d5c>

00015de8 <__d2b>:
   15de8:	defff804 	addi	sp,sp,-32
   15dec:	dc000215 	stw	r16,8(sp)
   15df0:	3021883a 	mov	r16,r6
   15df4:	dc400315 	stw	r17,12(sp)
   15df8:	8022907a 	slli	r17,r16,1
   15dfc:	dd000615 	stw	r20,24(sp)
   15e00:	2829883a 	mov	r20,r5
   15e04:	01400044 	movi	r5,1
   15e08:	dcc00515 	stw	r19,20(sp)
   15e0c:	dc800415 	stw	r18,16(sp)
   15e10:	dfc00715 	stw	ra,28(sp)
   15e14:	3825883a 	mov	r18,r7
   15e18:	8822d57a 	srli	r17,r17,21
   15e1c:	00151540 	call	15154 <_Balloc>
   15e20:	1027883a 	mov	r19,r2
   15e24:	00800434 	movhi	r2,16
   15e28:	10bfffc4 	addi	r2,r2,-1
   15e2c:	808c703a 	and	r6,r16,r2
   15e30:	88000126 	beq	r17,zero,15e38 <__d2b+0x50>
   15e34:	31800434 	orhi	r6,r6,16
   15e38:	d9800015 	stw	r6,0(sp)
   15e3c:	a0002426 	beq	r20,zero,15ed0 <__d2b+0xe8>
   15e40:	d9000104 	addi	r4,sp,4
   15e44:	dd000115 	stw	r20,4(sp)
   15e48:	00154b00 	call	154b0 <__lo0bits>
   15e4c:	d8c00017 	ldw	r3,0(sp)
   15e50:	10002f1e 	bne	r2,zero,15f10 <__d2b+0x128>
   15e54:	d9000117 	ldw	r4,4(sp)
   15e58:	99000515 	stw	r4,20(r19)
   15e5c:	1821003a 	cmpeq	r16,r3,zero
   15e60:	01000084 	movi	r4,2
   15e64:	2421c83a 	sub	r16,r4,r16
   15e68:	98c00615 	stw	r3,24(r19)
   15e6c:	9c000415 	stw	r16,16(r19)
   15e70:	88001f1e 	bne	r17,zero,15ef0 <__d2b+0x108>
   15e74:	10bef384 	addi	r2,r2,-1074
   15e78:	90800015 	stw	r2,0(r18)
   15e7c:	00900034 	movhi	r2,16384
   15e80:	10bfffc4 	addi	r2,r2,-1
   15e84:	8085883a 	add	r2,r16,r2
   15e88:	1085883a 	add	r2,r2,r2
   15e8c:	1085883a 	add	r2,r2,r2
   15e90:	9885883a 	add	r2,r19,r2
   15e94:	11000517 	ldw	r4,20(r2)
   15e98:	8020917a 	slli	r16,r16,5
   15e9c:	00154480 	call	15448 <__hi0bits>
   15ea0:	d8c00817 	ldw	r3,32(sp)
   15ea4:	8085c83a 	sub	r2,r16,r2
   15ea8:	18800015 	stw	r2,0(r3)
   15eac:	9805883a 	mov	r2,r19
   15eb0:	dfc00717 	ldw	ra,28(sp)
   15eb4:	dd000617 	ldw	r20,24(sp)
   15eb8:	dcc00517 	ldw	r19,20(sp)
   15ebc:	dc800417 	ldw	r18,16(sp)
   15ec0:	dc400317 	ldw	r17,12(sp)
   15ec4:	dc000217 	ldw	r16,8(sp)
   15ec8:	dec00804 	addi	sp,sp,32
   15ecc:	f800283a 	ret
   15ed0:	d809883a 	mov	r4,sp
   15ed4:	00154b00 	call	154b0 <__lo0bits>
   15ed8:	d8c00017 	ldw	r3,0(sp)
   15edc:	04000044 	movi	r16,1
   15ee0:	9c000415 	stw	r16,16(r19)
   15ee4:	98c00515 	stw	r3,20(r19)
   15ee8:	10800804 	addi	r2,r2,32
   15eec:	883fe126 	beq	r17,zero,15e74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015e74>
   15ef0:	00c00d44 	movi	r3,53
   15ef4:	8c7ef344 	addi	r17,r17,-1075
   15ef8:	88a3883a 	add	r17,r17,r2
   15efc:	1885c83a 	sub	r2,r3,r2
   15f00:	d8c00817 	ldw	r3,32(sp)
   15f04:	94400015 	stw	r17,0(r18)
   15f08:	18800015 	stw	r2,0(r3)
   15f0c:	003fe706 	br	15eac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015eac>
   15f10:	01000804 	movi	r4,32
   15f14:	2089c83a 	sub	r4,r4,r2
   15f18:	1908983a 	sll	r4,r3,r4
   15f1c:	d9400117 	ldw	r5,4(sp)
   15f20:	1886d83a 	srl	r3,r3,r2
   15f24:	2148b03a 	or	r4,r4,r5
   15f28:	99000515 	stw	r4,20(r19)
   15f2c:	d8c00015 	stw	r3,0(sp)
   15f30:	003fca06 	br	15e5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015e5c>

00015f34 <__ratio>:
   15f34:	defff904 	addi	sp,sp,-28
   15f38:	dc400315 	stw	r17,12(sp)
   15f3c:	2823883a 	mov	r17,r5
   15f40:	d9400104 	addi	r5,sp,4
   15f44:	dfc00615 	stw	ra,24(sp)
   15f48:	dcc00515 	stw	r19,20(sp)
   15f4c:	dc800415 	stw	r18,16(sp)
   15f50:	2027883a 	mov	r19,r4
   15f54:	dc000215 	stw	r16,8(sp)
   15f58:	0015cdc0 	call	15cdc <__b2d>
   15f5c:	d80b883a 	mov	r5,sp
   15f60:	8809883a 	mov	r4,r17
   15f64:	1025883a 	mov	r18,r2
   15f68:	1821883a 	mov	r16,r3
   15f6c:	0015cdc0 	call	15cdc <__b2d>
   15f70:	8a000417 	ldw	r8,16(r17)
   15f74:	99000417 	ldw	r4,16(r19)
   15f78:	d9400117 	ldw	r5,4(sp)
   15f7c:	2209c83a 	sub	r4,r4,r8
   15f80:	2010917a 	slli	r8,r4,5
   15f84:	d9000017 	ldw	r4,0(sp)
   15f88:	2909c83a 	sub	r4,r5,r4
   15f8c:	4109883a 	add	r4,r8,r4
   15f90:	01000e0e 	bge	zero,r4,15fcc <__ratio+0x98>
   15f94:	2008953a 	slli	r4,r4,20
   15f98:	2421883a 	add	r16,r4,r16
   15f9c:	100d883a 	mov	r6,r2
   15fa0:	180f883a 	mov	r7,r3
   15fa4:	9009883a 	mov	r4,r18
   15fa8:	800b883a 	mov	r5,r16
   15fac:	000a62c0 	call	a62c <__divdf3>
   15fb0:	dfc00617 	ldw	ra,24(sp)
   15fb4:	dcc00517 	ldw	r19,20(sp)
   15fb8:	dc800417 	ldw	r18,16(sp)
   15fbc:	dc400317 	ldw	r17,12(sp)
   15fc0:	dc000217 	ldw	r16,8(sp)
   15fc4:	dec00704 	addi	sp,sp,28
   15fc8:	f800283a 	ret
   15fcc:	2008953a 	slli	r4,r4,20
   15fd0:	1907c83a 	sub	r3,r3,r4
   15fd4:	003ff106 	br	15f9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015f9c>

00015fd8 <_mprec_log10>:
   15fd8:	defffe04 	addi	sp,sp,-8
   15fdc:	dc000015 	stw	r16,0(sp)
   15fe0:	dfc00115 	stw	ra,4(sp)
   15fe4:	008005c4 	movi	r2,23
   15fe8:	2021883a 	mov	r16,r4
   15fec:	11000d0e 	bge	r2,r4,16024 <_mprec_log10+0x4c>
   15ff0:	0005883a 	mov	r2,zero
   15ff4:	00cffc34 	movhi	r3,16368
   15ff8:	843fffc4 	addi	r16,r16,-1
   15ffc:	000d883a 	mov	r6,zero
   16000:	01d00934 	movhi	r7,16420
   16004:	1009883a 	mov	r4,r2
   16008:	180b883a 	mov	r5,r3
   1600c:	000b16c0 	call	b16c <__muldf3>
   16010:	803ff91e 	bne	r16,zero,15ff8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015ff8>
   16014:	dfc00117 	ldw	ra,4(sp)
   16018:	dc000017 	ldw	r16,0(sp)
   1601c:	dec00204 	addi	sp,sp,8
   16020:	f800283a 	ret
   16024:	202090fa 	slli	r16,r4,3
   16028:	008000f4 	movhi	r2,3
   1602c:	10a0f104 	addi	r2,r2,-31804
   16030:	1421883a 	add	r16,r2,r16
   16034:	80800017 	ldw	r2,0(r16)
   16038:	80c00117 	ldw	r3,4(r16)
   1603c:	dfc00117 	ldw	ra,4(sp)
   16040:	dc000017 	ldw	r16,0(sp)
   16044:	dec00204 	addi	sp,sp,8
   16048:	f800283a 	ret

0001604c <__copybits>:
   1604c:	297fffc4 	addi	r5,r5,-1
   16050:	280fd17a 	srai	r7,r5,5
   16054:	30c00417 	ldw	r3,16(r6)
   16058:	30800504 	addi	r2,r6,20
   1605c:	39c00044 	addi	r7,r7,1
   16060:	18c7883a 	add	r3,r3,r3
   16064:	39cf883a 	add	r7,r7,r7
   16068:	18c7883a 	add	r3,r3,r3
   1606c:	39cf883a 	add	r7,r7,r7
   16070:	10c7883a 	add	r3,r2,r3
   16074:	21cf883a 	add	r7,r4,r7
   16078:	10c00d2e 	bgeu	r2,r3,160b0 <__copybits+0x64>
   1607c:	200b883a 	mov	r5,r4
   16080:	12000017 	ldw	r8,0(r2)
   16084:	29400104 	addi	r5,r5,4
   16088:	10800104 	addi	r2,r2,4
   1608c:	2a3fff15 	stw	r8,-4(r5)
   16090:	10fffb36 	bltu	r2,r3,16080 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016080>
   16094:	1985c83a 	sub	r2,r3,r6
   16098:	10bffac4 	addi	r2,r2,-21
   1609c:	1004d0ba 	srli	r2,r2,2
   160a0:	10800044 	addi	r2,r2,1
   160a4:	1085883a 	add	r2,r2,r2
   160a8:	1085883a 	add	r2,r2,r2
   160ac:	2089883a 	add	r4,r4,r2
   160b0:	21c0032e 	bgeu	r4,r7,160c0 <__copybits+0x74>
   160b4:	20000015 	stw	zero,0(r4)
   160b8:	21000104 	addi	r4,r4,4
   160bc:	21fffd36 	bltu	r4,r7,160b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70160b4>
   160c0:	f800283a 	ret

000160c4 <__any_on>:
   160c4:	20c00417 	ldw	r3,16(r4)
   160c8:	2805d17a 	srai	r2,r5,5
   160cc:	21000504 	addi	r4,r4,20
   160d0:	18800d0e 	bge	r3,r2,16108 <__any_on+0x44>
   160d4:	18c7883a 	add	r3,r3,r3
   160d8:	18c7883a 	add	r3,r3,r3
   160dc:	20c7883a 	add	r3,r4,r3
   160e0:	20c0192e 	bgeu	r4,r3,16148 <__any_on+0x84>
   160e4:	18bfff17 	ldw	r2,-4(r3)
   160e8:	18ffff04 	addi	r3,r3,-4
   160ec:	1000041e 	bne	r2,zero,16100 <__any_on+0x3c>
   160f0:	20c0142e 	bgeu	r4,r3,16144 <__any_on+0x80>
   160f4:	18ffff04 	addi	r3,r3,-4
   160f8:	19400017 	ldw	r5,0(r3)
   160fc:	283ffc26 	beq	r5,zero,160f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70160f0>
   16100:	00800044 	movi	r2,1
   16104:	f800283a 	ret
   16108:	10c00a0e 	bge	r2,r3,16134 <__any_on+0x70>
   1610c:	1085883a 	add	r2,r2,r2
   16110:	1085883a 	add	r2,r2,r2
   16114:	294007cc 	andi	r5,r5,31
   16118:	2087883a 	add	r3,r4,r2
   1611c:	283ff026 	beq	r5,zero,160e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70160e0>
   16120:	19800017 	ldw	r6,0(r3)
   16124:	3144d83a 	srl	r2,r6,r5
   16128:	114a983a 	sll	r5,r2,r5
   1612c:	317ff41e 	bne	r6,r5,16100 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016100>
   16130:	003feb06 	br	160e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70160e0>
   16134:	1085883a 	add	r2,r2,r2
   16138:	1085883a 	add	r2,r2,r2
   1613c:	2087883a 	add	r3,r4,r2
   16140:	003fe706 	br	160e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70160e0>
   16144:	f800283a 	ret
   16148:	0005883a 	mov	r2,zero
   1614c:	f800283a 	ret

00016150 <_realloc_r>:
   16150:	defff604 	addi	sp,sp,-40
   16154:	dc800215 	stw	r18,8(sp)
   16158:	dfc00915 	stw	ra,36(sp)
   1615c:	df000815 	stw	fp,32(sp)
   16160:	ddc00715 	stw	r23,28(sp)
   16164:	dd800615 	stw	r22,24(sp)
   16168:	dd400515 	stw	r21,20(sp)
   1616c:	dd000415 	stw	r20,16(sp)
   16170:	dcc00315 	stw	r19,12(sp)
   16174:	dc400115 	stw	r17,4(sp)
   16178:	dc000015 	stw	r16,0(sp)
   1617c:	3025883a 	mov	r18,r6
   16180:	2800b726 	beq	r5,zero,16460 <_realloc_r+0x310>
   16184:	282b883a 	mov	r21,r5
   16188:	2029883a 	mov	r20,r4
   1618c:	001b2f00 	call	1b2f0 <__malloc_lock>
   16190:	a8bfff17 	ldw	r2,-4(r21)
   16194:	043fff04 	movi	r16,-4
   16198:	90c002c4 	addi	r3,r18,11
   1619c:	01000584 	movi	r4,22
   161a0:	acfffe04 	addi	r19,r21,-8
   161a4:	1420703a 	and	r16,r2,r16
   161a8:	20c0332e 	bgeu	r4,r3,16278 <_realloc_r+0x128>
   161ac:	047ffe04 	movi	r17,-8
   161b0:	1c62703a 	and	r17,r3,r17
   161b4:	8807883a 	mov	r3,r17
   161b8:	88005816 	blt	r17,zero,1631c <_realloc_r+0x1cc>
   161bc:	8c805736 	bltu	r17,r18,1631c <_realloc_r+0x1cc>
   161c0:	80c0300e 	bge	r16,r3,16284 <_realloc_r+0x134>
   161c4:	070000f4 	movhi	fp,3
   161c8:	e722f804 	addi	fp,fp,-29728
   161cc:	e1c00217 	ldw	r7,8(fp)
   161d0:	9c09883a 	add	r4,r19,r16
   161d4:	22000117 	ldw	r8,4(r4)
   161d8:	21c06326 	beq	r4,r7,16368 <_realloc_r+0x218>
   161dc:	017fff84 	movi	r5,-2
   161e0:	414a703a 	and	r5,r8,r5
   161e4:	214b883a 	add	r5,r4,r5
   161e8:	29800117 	ldw	r6,4(r5)
   161ec:	3180004c 	andi	r6,r6,1
   161f0:	30003f26 	beq	r6,zero,162f0 <_realloc_r+0x1a0>
   161f4:	1080004c 	andi	r2,r2,1
   161f8:	10008326 	beq	r2,zero,16408 <_realloc_r+0x2b8>
   161fc:	900b883a 	mov	r5,r18
   16200:	a009883a 	mov	r4,r20
   16204:	000cb740 	call	cb74 <_malloc_r>
   16208:	1025883a 	mov	r18,r2
   1620c:	10011e26 	beq	r2,zero,16688 <_realloc_r+0x538>
   16210:	a93fff17 	ldw	r4,-4(r21)
   16214:	10fffe04 	addi	r3,r2,-8
   16218:	00bfff84 	movi	r2,-2
   1621c:	2084703a 	and	r2,r4,r2
   16220:	9885883a 	add	r2,r19,r2
   16224:	1880ee26 	beq	r3,r2,165e0 <_realloc_r+0x490>
   16228:	81bfff04 	addi	r6,r16,-4
   1622c:	00800904 	movi	r2,36
   16230:	1180b836 	bltu	r2,r6,16514 <_realloc_r+0x3c4>
   16234:	00c004c4 	movi	r3,19
   16238:	19809636 	bltu	r3,r6,16494 <_realloc_r+0x344>
   1623c:	9005883a 	mov	r2,r18
   16240:	a807883a 	mov	r3,r21
   16244:	19000017 	ldw	r4,0(r3)
   16248:	11000015 	stw	r4,0(r2)
   1624c:	19000117 	ldw	r4,4(r3)
   16250:	11000115 	stw	r4,4(r2)
   16254:	18c00217 	ldw	r3,8(r3)
   16258:	10c00215 	stw	r3,8(r2)
   1625c:	a80b883a 	mov	r5,r21
   16260:	a009883a 	mov	r4,r20
   16264:	00143280 	call	14328 <_free_r>
   16268:	a009883a 	mov	r4,r20
   1626c:	001b4100 	call	1b410 <__malloc_unlock>
   16270:	9005883a 	mov	r2,r18
   16274:	00001206 	br	162c0 <_realloc_r+0x170>
   16278:	00c00404 	movi	r3,16
   1627c:	1823883a 	mov	r17,r3
   16280:	003fce06 	br	161bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70161bc>
   16284:	a825883a 	mov	r18,r21
   16288:	8445c83a 	sub	r2,r16,r17
   1628c:	00c003c4 	movi	r3,15
   16290:	18802636 	bltu	r3,r2,1632c <_realloc_r+0x1dc>
   16294:	99800117 	ldw	r6,4(r19)
   16298:	9c07883a 	add	r3,r19,r16
   1629c:	3180004c 	andi	r6,r6,1
   162a0:	3420b03a 	or	r16,r6,r16
   162a4:	9c000115 	stw	r16,4(r19)
   162a8:	18800117 	ldw	r2,4(r3)
   162ac:	10800054 	ori	r2,r2,1
   162b0:	18800115 	stw	r2,4(r3)
   162b4:	a009883a 	mov	r4,r20
   162b8:	001b4100 	call	1b410 <__malloc_unlock>
   162bc:	9005883a 	mov	r2,r18
   162c0:	dfc00917 	ldw	ra,36(sp)
   162c4:	df000817 	ldw	fp,32(sp)
   162c8:	ddc00717 	ldw	r23,28(sp)
   162cc:	dd800617 	ldw	r22,24(sp)
   162d0:	dd400517 	ldw	r21,20(sp)
   162d4:	dd000417 	ldw	r20,16(sp)
   162d8:	dcc00317 	ldw	r19,12(sp)
   162dc:	dc800217 	ldw	r18,8(sp)
   162e0:	dc400117 	ldw	r17,4(sp)
   162e4:	dc000017 	ldw	r16,0(sp)
   162e8:	dec00a04 	addi	sp,sp,40
   162ec:	f800283a 	ret
   162f0:	017fff04 	movi	r5,-4
   162f4:	414a703a 	and	r5,r8,r5
   162f8:	814d883a 	add	r6,r16,r5
   162fc:	30c01f16 	blt	r6,r3,1637c <_realloc_r+0x22c>
   16300:	20800317 	ldw	r2,12(r4)
   16304:	20c00217 	ldw	r3,8(r4)
   16308:	a825883a 	mov	r18,r21
   1630c:	3021883a 	mov	r16,r6
   16310:	18800315 	stw	r2,12(r3)
   16314:	10c00215 	stw	r3,8(r2)
   16318:	003fdb06 	br	16288 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016288>
   1631c:	00800304 	movi	r2,12
   16320:	a0800015 	stw	r2,0(r20)
   16324:	0005883a 	mov	r2,zero
   16328:	003fe506 	br	162c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70162c0>
   1632c:	98c00117 	ldw	r3,4(r19)
   16330:	9c4b883a 	add	r5,r19,r17
   16334:	11000054 	ori	r4,r2,1
   16338:	18c0004c 	andi	r3,r3,1
   1633c:	1c62b03a 	or	r17,r3,r17
   16340:	9c400115 	stw	r17,4(r19)
   16344:	29000115 	stw	r4,4(r5)
   16348:	2885883a 	add	r2,r5,r2
   1634c:	10c00117 	ldw	r3,4(r2)
   16350:	29400204 	addi	r5,r5,8
   16354:	a009883a 	mov	r4,r20
   16358:	18c00054 	ori	r3,r3,1
   1635c:	10c00115 	stw	r3,4(r2)
   16360:	00143280 	call	14328 <_free_r>
   16364:	003fd306 	br	162b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70162b4>
   16368:	017fff04 	movi	r5,-4
   1636c:	414a703a 	and	r5,r8,r5
   16370:	89800404 	addi	r6,r17,16
   16374:	8151883a 	add	r8,r16,r5
   16378:	4180590e 	bge	r8,r6,164e0 <_realloc_r+0x390>
   1637c:	1080004c 	andi	r2,r2,1
   16380:	103f9e1e 	bne	r2,zero,161fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70161fc>
   16384:	adbffe17 	ldw	r22,-8(r21)
   16388:	00bfff04 	movi	r2,-4
   1638c:	9dadc83a 	sub	r22,r19,r22
   16390:	b1800117 	ldw	r6,4(r22)
   16394:	3084703a 	and	r2,r6,r2
   16398:	20002026 	beq	r4,zero,1641c <_realloc_r+0x2cc>
   1639c:	80af883a 	add	r23,r16,r2
   163a0:	b96f883a 	add	r23,r23,r5
   163a4:	21c05f26 	beq	r4,r7,16524 <_realloc_r+0x3d4>
   163a8:	b8c01c16 	blt	r23,r3,1641c <_realloc_r+0x2cc>
   163ac:	20800317 	ldw	r2,12(r4)
   163b0:	20c00217 	ldw	r3,8(r4)
   163b4:	81bfff04 	addi	r6,r16,-4
   163b8:	01000904 	movi	r4,36
   163bc:	18800315 	stw	r2,12(r3)
   163c0:	10c00215 	stw	r3,8(r2)
   163c4:	b0c00217 	ldw	r3,8(r22)
   163c8:	b0800317 	ldw	r2,12(r22)
   163cc:	b4800204 	addi	r18,r22,8
   163d0:	18800315 	stw	r2,12(r3)
   163d4:	10c00215 	stw	r3,8(r2)
   163d8:	21801b36 	bltu	r4,r6,16448 <_realloc_r+0x2f8>
   163dc:	008004c4 	movi	r2,19
   163e0:	1180352e 	bgeu	r2,r6,164b8 <_realloc_r+0x368>
   163e4:	a8800017 	ldw	r2,0(r21)
   163e8:	b0800215 	stw	r2,8(r22)
   163ec:	a8800117 	ldw	r2,4(r21)
   163f0:	b0800315 	stw	r2,12(r22)
   163f4:	008006c4 	movi	r2,27
   163f8:	11807f36 	bltu	r2,r6,165f8 <_realloc_r+0x4a8>
   163fc:	b0800404 	addi	r2,r22,16
   16400:	ad400204 	addi	r21,r21,8
   16404:	00002d06 	br	164bc <_realloc_r+0x36c>
   16408:	adbffe17 	ldw	r22,-8(r21)
   1640c:	00bfff04 	movi	r2,-4
   16410:	9dadc83a 	sub	r22,r19,r22
   16414:	b1000117 	ldw	r4,4(r22)
   16418:	2084703a 	and	r2,r4,r2
   1641c:	b03f7726 	beq	r22,zero,161fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70161fc>
   16420:	80af883a 	add	r23,r16,r2
   16424:	b8ff7516 	blt	r23,r3,161fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70161fc>
   16428:	b0800317 	ldw	r2,12(r22)
   1642c:	b0c00217 	ldw	r3,8(r22)
   16430:	81bfff04 	addi	r6,r16,-4
   16434:	01000904 	movi	r4,36
   16438:	18800315 	stw	r2,12(r3)
   1643c:	10c00215 	stw	r3,8(r2)
   16440:	b4800204 	addi	r18,r22,8
   16444:	21bfe52e 	bgeu	r4,r6,163dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70163dc>
   16448:	a80b883a 	mov	r5,r21
   1644c:	9009883a 	mov	r4,r18
   16450:	0014ff80 	call	14ff8 <memmove>
   16454:	b821883a 	mov	r16,r23
   16458:	b027883a 	mov	r19,r22
   1645c:	003f8a06 	br	16288 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016288>
   16460:	300b883a 	mov	r5,r6
   16464:	dfc00917 	ldw	ra,36(sp)
   16468:	df000817 	ldw	fp,32(sp)
   1646c:	ddc00717 	ldw	r23,28(sp)
   16470:	dd800617 	ldw	r22,24(sp)
   16474:	dd400517 	ldw	r21,20(sp)
   16478:	dd000417 	ldw	r20,16(sp)
   1647c:	dcc00317 	ldw	r19,12(sp)
   16480:	dc800217 	ldw	r18,8(sp)
   16484:	dc400117 	ldw	r17,4(sp)
   16488:	dc000017 	ldw	r16,0(sp)
   1648c:	dec00a04 	addi	sp,sp,40
   16490:	000cb741 	jmpi	cb74 <_malloc_r>
   16494:	a8c00017 	ldw	r3,0(r21)
   16498:	90c00015 	stw	r3,0(r18)
   1649c:	a8c00117 	ldw	r3,4(r21)
   164a0:	90c00115 	stw	r3,4(r18)
   164a4:	00c006c4 	movi	r3,27
   164a8:	19804536 	bltu	r3,r6,165c0 <_realloc_r+0x470>
   164ac:	90800204 	addi	r2,r18,8
   164b0:	a8c00204 	addi	r3,r21,8
   164b4:	003f6306 	br	16244 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016244>
   164b8:	9005883a 	mov	r2,r18
   164bc:	a8c00017 	ldw	r3,0(r21)
   164c0:	b821883a 	mov	r16,r23
   164c4:	b027883a 	mov	r19,r22
   164c8:	10c00015 	stw	r3,0(r2)
   164cc:	a8c00117 	ldw	r3,4(r21)
   164d0:	10c00115 	stw	r3,4(r2)
   164d4:	a8c00217 	ldw	r3,8(r21)
   164d8:	10c00215 	stw	r3,8(r2)
   164dc:	003f6a06 	br	16288 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016288>
   164e0:	9c67883a 	add	r19,r19,r17
   164e4:	4445c83a 	sub	r2,r8,r17
   164e8:	e4c00215 	stw	r19,8(fp)
   164ec:	10800054 	ori	r2,r2,1
   164f0:	98800115 	stw	r2,4(r19)
   164f4:	a8bfff17 	ldw	r2,-4(r21)
   164f8:	a009883a 	mov	r4,r20
   164fc:	1080004c 	andi	r2,r2,1
   16500:	1462b03a 	or	r17,r2,r17
   16504:	ac7fff15 	stw	r17,-4(r21)
   16508:	001b4100 	call	1b410 <__malloc_unlock>
   1650c:	a805883a 	mov	r2,r21
   16510:	003f6b06 	br	162c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70162c0>
   16514:	a80b883a 	mov	r5,r21
   16518:	9009883a 	mov	r4,r18
   1651c:	0014ff80 	call	14ff8 <memmove>
   16520:	003f4e06 	br	1625c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701625c>
   16524:	89000404 	addi	r4,r17,16
   16528:	b93fbc16 	blt	r23,r4,1641c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701641c>
   1652c:	b0800317 	ldw	r2,12(r22)
   16530:	b0c00217 	ldw	r3,8(r22)
   16534:	81bfff04 	addi	r6,r16,-4
   16538:	01000904 	movi	r4,36
   1653c:	18800315 	stw	r2,12(r3)
   16540:	10c00215 	stw	r3,8(r2)
   16544:	b4800204 	addi	r18,r22,8
   16548:	21804336 	bltu	r4,r6,16658 <_realloc_r+0x508>
   1654c:	008004c4 	movi	r2,19
   16550:	11803f2e 	bgeu	r2,r6,16650 <_realloc_r+0x500>
   16554:	a8800017 	ldw	r2,0(r21)
   16558:	b0800215 	stw	r2,8(r22)
   1655c:	a8800117 	ldw	r2,4(r21)
   16560:	b0800315 	stw	r2,12(r22)
   16564:	008006c4 	movi	r2,27
   16568:	11803f36 	bltu	r2,r6,16668 <_realloc_r+0x518>
   1656c:	b0800404 	addi	r2,r22,16
   16570:	ad400204 	addi	r21,r21,8
   16574:	a8c00017 	ldw	r3,0(r21)
   16578:	10c00015 	stw	r3,0(r2)
   1657c:	a8c00117 	ldw	r3,4(r21)
   16580:	10c00115 	stw	r3,4(r2)
   16584:	a8c00217 	ldw	r3,8(r21)
   16588:	10c00215 	stw	r3,8(r2)
   1658c:	b447883a 	add	r3,r22,r17
   16590:	bc45c83a 	sub	r2,r23,r17
   16594:	e0c00215 	stw	r3,8(fp)
   16598:	10800054 	ori	r2,r2,1
   1659c:	18800115 	stw	r2,4(r3)
   165a0:	b0800117 	ldw	r2,4(r22)
   165a4:	a009883a 	mov	r4,r20
   165a8:	1080004c 	andi	r2,r2,1
   165ac:	1462b03a 	or	r17,r2,r17
   165b0:	b4400115 	stw	r17,4(r22)
   165b4:	001b4100 	call	1b410 <__malloc_unlock>
   165b8:	9005883a 	mov	r2,r18
   165bc:	003f4006 	br	162c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70162c0>
   165c0:	a8c00217 	ldw	r3,8(r21)
   165c4:	90c00215 	stw	r3,8(r18)
   165c8:	a8c00317 	ldw	r3,12(r21)
   165cc:	90c00315 	stw	r3,12(r18)
   165d0:	30801126 	beq	r6,r2,16618 <_realloc_r+0x4c8>
   165d4:	90800404 	addi	r2,r18,16
   165d8:	a8c00404 	addi	r3,r21,16
   165dc:	003f1906 	br	16244 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016244>
   165e0:	90ffff17 	ldw	r3,-4(r18)
   165e4:	00bfff04 	movi	r2,-4
   165e8:	a825883a 	mov	r18,r21
   165ec:	1884703a 	and	r2,r3,r2
   165f0:	80a1883a 	add	r16,r16,r2
   165f4:	003f2406 	br	16288 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016288>
   165f8:	a8800217 	ldw	r2,8(r21)
   165fc:	b0800415 	stw	r2,16(r22)
   16600:	a8800317 	ldw	r2,12(r21)
   16604:	b0800515 	stw	r2,20(r22)
   16608:	31000a26 	beq	r6,r4,16634 <_realloc_r+0x4e4>
   1660c:	b0800604 	addi	r2,r22,24
   16610:	ad400404 	addi	r21,r21,16
   16614:	003fa906 	br	164bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70164bc>
   16618:	a9000417 	ldw	r4,16(r21)
   1661c:	90800604 	addi	r2,r18,24
   16620:	a8c00604 	addi	r3,r21,24
   16624:	91000415 	stw	r4,16(r18)
   16628:	a9000517 	ldw	r4,20(r21)
   1662c:	91000515 	stw	r4,20(r18)
   16630:	003f0406 	br	16244 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016244>
   16634:	a8c00417 	ldw	r3,16(r21)
   16638:	ad400604 	addi	r21,r21,24
   1663c:	b0800804 	addi	r2,r22,32
   16640:	b0c00615 	stw	r3,24(r22)
   16644:	a8ffff17 	ldw	r3,-4(r21)
   16648:	b0c00715 	stw	r3,28(r22)
   1664c:	003f9b06 	br	164bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70164bc>
   16650:	9005883a 	mov	r2,r18
   16654:	003fc706 	br	16574 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016574>
   16658:	a80b883a 	mov	r5,r21
   1665c:	9009883a 	mov	r4,r18
   16660:	0014ff80 	call	14ff8 <memmove>
   16664:	003fc906 	br	1658c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701658c>
   16668:	a8800217 	ldw	r2,8(r21)
   1666c:	b0800415 	stw	r2,16(r22)
   16670:	a8800317 	ldw	r2,12(r21)
   16674:	b0800515 	stw	r2,20(r22)
   16678:	31000726 	beq	r6,r4,16698 <_realloc_r+0x548>
   1667c:	b0800604 	addi	r2,r22,24
   16680:	ad400404 	addi	r21,r21,16
   16684:	003fbb06 	br	16574 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016574>
   16688:	a009883a 	mov	r4,r20
   1668c:	001b4100 	call	1b410 <__malloc_unlock>
   16690:	0005883a 	mov	r2,zero
   16694:	003f0a06 	br	162c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70162c0>
   16698:	a8c00417 	ldw	r3,16(r21)
   1669c:	ad400604 	addi	r21,r21,24
   166a0:	b0800804 	addi	r2,r22,32
   166a4:	b0c00615 	stw	r3,24(r22)
   166a8:	a8ffff17 	ldw	r3,-4(r21)
   166ac:	b0c00715 	stw	r3,28(r22)
   166b0:	003fb006 	br	16574 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016574>

000166b4 <__sread>:
   166b4:	defffe04 	addi	sp,sp,-8
   166b8:	dc000015 	stw	r16,0(sp)
   166bc:	2821883a 	mov	r16,r5
   166c0:	2940038f 	ldh	r5,14(r5)
   166c4:	dfc00115 	stw	ra,4(sp)
   166c8:	00197d80 	call	197d8 <_read_r>
   166cc:	10000716 	blt	r2,zero,166ec <__sread+0x38>
   166d0:	80c01417 	ldw	r3,80(r16)
   166d4:	1887883a 	add	r3,r3,r2
   166d8:	80c01415 	stw	r3,80(r16)
   166dc:	dfc00117 	ldw	ra,4(sp)
   166e0:	dc000017 	ldw	r16,0(sp)
   166e4:	dec00204 	addi	sp,sp,8
   166e8:	f800283a 	ret
   166ec:	80c0030b 	ldhu	r3,12(r16)
   166f0:	18fbffcc 	andi	r3,r3,61439
   166f4:	80c0030d 	sth	r3,12(r16)
   166f8:	dfc00117 	ldw	ra,4(sp)
   166fc:	dc000017 	ldw	r16,0(sp)
   16700:	dec00204 	addi	sp,sp,8
   16704:	f800283a 	ret

00016708 <__seofread>:
   16708:	0005883a 	mov	r2,zero
   1670c:	f800283a 	ret

00016710 <__swrite>:
   16710:	2880030b 	ldhu	r2,12(r5)
   16714:	defffb04 	addi	sp,sp,-20
   16718:	dcc00315 	stw	r19,12(sp)
   1671c:	dc800215 	stw	r18,8(sp)
   16720:	dc400115 	stw	r17,4(sp)
   16724:	dc000015 	stw	r16,0(sp)
   16728:	dfc00415 	stw	ra,16(sp)
   1672c:	10c0400c 	andi	r3,r2,256
   16730:	2821883a 	mov	r16,r5
   16734:	2023883a 	mov	r17,r4
   16738:	3025883a 	mov	r18,r6
   1673c:	3827883a 	mov	r19,r7
   16740:	18000526 	beq	r3,zero,16758 <__swrite+0x48>
   16744:	2940038f 	ldh	r5,14(r5)
   16748:	01c00084 	movi	r7,2
   1674c:	000d883a 	mov	r6,zero
   16750:	00197780 	call	19778 <_lseek_r>
   16754:	8080030b 	ldhu	r2,12(r16)
   16758:	8140038f 	ldh	r5,14(r16)
   1675c:	10bbffcc 	andi	r2,r2,61439
   16760:	980f883a 	mov	r7,r19
   16764:	900d883a 	mov	r6,r18
   16768:	8809883a 	mov	r4,r17
   1676c:	8080030d 	sth	r2,12(r16)
   16770:	dfc00417 	ldw	ra,16(sp)
   16774:	dcc00317 	ldw	r19,12(sp)
   16778:	dc800217 	ldw	r18,8(sp)
   1677c:	dc400117 	ldw	r17,4(sp)
   16780:	dc000017 	ldw	r16,0(sp)
   16784:	dec00504 	addi	sp,sp,20
   16788:	00192441 	jmpi	19244 <_write_r>

0001678c <__sseek>:
   1678c:	defffe04 	addi	sp,sp,-8
   16790:	dc000015 	stw	r16,0(sp)
   16794:	2821883a 	mov	r16,r5
   16798:	2940038f 	ldh	r5,14(r5)
   1679c:	dfc00115 	stw	ra,4(sp)
   167a0:	00197780 	call	19778 <_lseek_r>
   167a4:	00ffffc4 	movi	r3,-1
   167a8:	10c00826 	beq	r2,r3,167cc <__sseek+0x40>
   167ac:	80c0030b 	ldhu	r3,12(r16)
   167b0:	80801415 	stw	r2,80(r16)
   167b4:	18c40014 	ori	r3,r3,4096
   167b8:	80c0030d 	sth	r3,12(r16)
   167bc:	dfc00117 	ldw	ra,4(sp)
   167c0:	dc000017 	ldw	r16,0(sp)
   167c4:	dec00204 	addi	sp,sp,8
   167c8:	f800283a 	ret
   167cc:	80c0030b 	ldhu	r3,12(r16)
   167d0:	18fbffcc 	andi	r3,r3,61439
   167d4:	80c0030d 	sth	r3,12(r16)
   167d8:	dfc00117 	ldw	ra,4(sp)
   167dc:	dc000017 	ldw	r16,0(sp)
   167e0:	dec00204 	addi	sp,sp,8
   167e4:	f800283a 	ret

000167e8 <__sclose>:
   167e8:	2940038f 	ldh	r5,14(r5)
   167ec:	00192a41 	jmpi	192a4 <_close_r>

000167f0 <__ssprint_r>:
   167f0:	30800217 	ldw	r2,8(r6)
   167f4:	defff604 	addi	sp,sp,-40
   167f8:	dc800215 	stw	r18,8(sp)
   167fc:	dfc00915 	stw	ra,36(sp)
   16800:	df000815 	stw	fp,32(sp)
   16804:	ddc00715 	stw	r23,28(sp)
   16808:	dd800615 	stw	r22,24(sp)
   1680c:	dd400515 	stw	r21,20(sp)
   16810:	dd000415 	stw	r20,16(sp)
   16814:	dcc00315 	stw	r19,12(sp)
   16818:	dc400115 	stw	r17,4(sp)
   1681c:	dc000015 	stw	r16,0(sp)
   16820:	3025883a 	mov	r18,r6
   16824:	10005826 	beq	r2,zero,16988 <__ssprint_r+0x198>
   16828:	2027883a 	mov	r19,r4
   1682c:	35c00017 	ldw	r23,0(r6)
   16830:	29000017 	ldw	r4,0(r5)
   16834:	28800217 	ldw	r2,8(r5)
   16838:	2823883a 	mov	r17,r5
   1683c:	0039883a 	mov	fp,zero
   16840:	0021883a 	mov	r16,zero
   16844:	80003926 	beq	r16,zero,1692c <__ssprint_r+0x13c>
   16848:	102b883a 	mov	r21,r2
   1684c:	102d883a 	mov	r22,r2
   16850:	80803a36 	bltu	r16,r2,1693c <__ssprint_r+0x14c>
   16854:	88c0030b 	ldhu	r3,12(r17)
   16858:	1881200c 	andi	r2,r3,1152
   1685c:	10002626 	beq	r2,zero,168f8 <__ssprint_r+0x108>
   16860:	88800517 	ldw	r2,20(r17)
   16864:	89400417 	ldw	r5,16(r17)
   16868:	81800044 	addi	r6,r16,1
   1686c:	108f883a 	add	r7,r2,r2
   16870:	3885883a 	add	r2,r7,r2
   16874:	100ed7fa 	srli	r7,r2,31
   16878:	216dc83a 	sub	r22,r4,r5
   1687c:	3589883a 	add	r4,r6,r22
   16880:	3885883a 	add	r2,r7,r2
   16884:	102bd07a 	srai	r21,r2,1
   16888:	a80d883a 	mov	r6,r21
   1688c:	a900022e 	bgeu	r21,r4,16898 <__ssprint_r+0xa8>
   16890:	202b883a 	mov	r21,r4
   16894:	200d883a 	mov	r6,r4
   16898:	18c1000c 	andi	r3,r3,1024
   1689c:	18002a26 	beq	r3,zero,16948 <__ssprint_r+0x158>
   168a0:	300b883a 	mov	r5,r6
   168a4:	9809883a 	mov	r4,r19
   168a8:	000cb740 	call	cb74 <_malloc_r>
   168ac:	1029883a 	mov	r20,r2
   168b0:	10002c26 	beq	r2,zero,16964 <__ssprint_r+0x174>
   168b4:	89400417 	ldw	r5,16(r17)
   168b8:	b00d883a 	mov	r6,r22
   168bc:	1009883a 	mov	r4,r2
   168c0:	000d3800 	call	d380 <memcpy>
   168c4:	8880030b 	ldhu	r2,12(r17)
   168c8:	00fedfc4 	movi	r3,-1153
   168cc:	10c4703a 	and	r2,r2,r3
   168d0:	10802014 	ori	r2,r2,128
   168d4:	8880030d 	sth	r2,12(r17)
   168d8:	a589883a 	add	r4,r20,r22
   168dc:	adadc83a 	sub	r22,r21,r22
   168e0:	8d400515 	stw	r21,20(r17)
   168e4:	8d800215 	stw	r22,8(r17)
   168e8:	8d000415 	stw	r20,16(r17)
   168ec:	89000015 	stw	r4,0(r17)
   168f0:	802b883a 	mov	r21,r16
   168f4:	802d883a 	mov	r22,r16
   168f8:	b00d883a 	mov	r6,r22
   168fc:	e00b883a 	mov	r5,fp
   16900:	0014ff80 	call	14ff8 <memmove>
   16904:	88800217 	ldw	r2,8(r17)
   16908:	89000017 	ldw	r4,0(r17)
   1690c:	90c00217 	ldw	r3,8(r18)
   16910:	1545c83a 	sub	r2,r2,r21
   16914:	2589883a 	add	r4,r4,r22
   16918:	88800215 	stw	r2,8(r17)
   1691c:	89000015 	stw	r4,0(r17)
   16920:	1c21c83a 	sub	r16,r3,r16
   16924:	94000215 	stw	r16,8(r18)
   16928:	80001726 	beq	r16,zero,16988 <__ssprint_r+0x198>
   1692c:	bf000017 	ldw	fp,0(r23)
   16930:	bc000117 	ldw	r16,4(r23)
   16934:	bdc00204 	addi	r23,r23,8
   16938:	003fc206 	br	16844 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016844>
   1693c:	802b883a 	mov	r21,r16
   16940:	802d883a 	mov	r22,r16
   16944:	003fec06 	br	168f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70168f8>
   16948:	9809883a 	mov	r4,r19
   1694c:	00161500 	call	16150 <_realloc_r>
   16950:	1029883a 	mov	r20,r2
   16954:	103fe01e 	bne	r2,zero,168d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70168d8>
   16958:	89400417 	ldw	r5,16(r17)
   1695c:	9809883a 	mov	r4,r19
   16960:	00143280 	call	14328 <_free_r>
   16964:	88c0030b 	ldhu	r3,12(r17)
   16968:	00800304 	movi	r2,12
   1696c:	98800015 	stw	r2,0(r19)
   16970:	18c01014 	ori	r3,r3,64
   16974:	88c0030d 	sth	r3,12(r17)
   16978:	00bfffc4 	movi	r2,-1
   1697c:	90000215 	stw	zero,8(r18)
   16980:	90000115 	stw	zero,4(r18)
   16984:	00000206 	br	16990 <__ssprint_r+0x1a0>
   16988:	90000115 	stw	zero,4(r18)
   1698c:	0005883a 	mov	r2,zero
   16990:	dfc00917 	ldw	ra,36(sp)
   16994:	df000817 	ldw	fp,32(sp)
   16998:	ddc00717 	ldw	r23,28(sp)
   1699c:	dd800617 	ldw	r22,24(sp)
   169a0:	dd400517 	ldw	r21,20(sp)
   169a4:	dd000417 	ldw	r20,16(sp)
   169a8:	dcc00317 	ldw	r19,12(sp)
   169ac:	dc800217 	ldw	r18,8(sp)
   169b0:	dc400117 	ldw	r17,4(sp)
   169b4:	dc000017 	ldw	r16,0(sp)
   169b8:	dec00a04 	addi	sp,sp,40
   169bc:	f800283a 	ret

000169c0 <___svfiprintf_internal_r>:
   169c0:	2880030b 	ldhu	r2,12(r5)
   169c4:	deffc804 	addi	sp,sp,-224
   169c8:	dcc03115 	stw	r19,196(sp)
   169cc:	dfc03715 	stw	ra,220(sp)
   169d0:	df003615 	stw	fp,216(sp)
   169d4:	ddc03515 	stw	r23,212(sp)
   169d8:	dd803415 	stw	r22,208(sp)
   169dc:	dd403315 	stw	r21,204(sp)
   169e0:	dd003215 	stw	r20,200(sp)
   169e4:	dc803015 	stw	r18,192(sp)
   169e8:	dc402f15 	stw	r17,188(sp)
   169ec:	dc002e15 	stw	r16,184(sp)
   169f0:	d9402715 	stw	r5,156(sp)
   169f4:	d9002a15 	stw	r4,168(sp)
   169f8:	1080200c 	andi	r2,r2,128
   169fc:	d9c02315 	stw	r7,140(sp)
   16a00:	3027883a 	mov	r19,r6
   16a04:	10000226 	beq	r2,zero,16a10 <___svfiprintf_internal_r+0x50>
   16a08:	28800417 	ldw	r2,16(r5)
   16a0c:	10041d26 	beq	r2,zero,17a84 <___svfiprintf_internal_r+0x10c4>
   16a10:	dac01a04 	addi	r11,sp,104
   16a14:	dac01e15 	stw	r11,120(sp)
   16a18:	d8801e17 	ldw	r2,120(sp)
   16a1c:	dac019c4 	addi	r11,sp,103
   16a20:	dd402a17 	ldw	r21,168(sp)
   16a24:	ddc02717 	ldw	r23,156(sp)
   16a28:	058000f4 	movhi	r22,3
   16a2c:	050000f4 	movhi	r20,3
   16a30:	dac01f15 	stw	r11,124(sp)
   16a34:	12d7c83a 	sub	r11,r2,r11
   16a38:	b5a12704 	addi	r22,r22,-31588
   16a3c:	a5212304 	addi	r20,r20,-31604
   16a40:	dec01a15 	stw	sp,104(sp)
   16a44:	d8001c15 	stw	zero,112(sp)
   16a48:	d8001b15 	stw	zero,108(sp)
   16a4c:	d811883a 	mov	r8,sp
   16a50:	d8002915 	stw	zero,164(sp)
   16a54:	d8002515 	stw	zero,148(sp)
   16a58:	dac02b15 	stw	r11,172(sp)
   16a5c:	98800007 	ldb	r2,0(r19)
   16a60:	1002dd26 	beq	r2,zero,175d8 <___svfiprintf_internal_r+0xc18>
   16a64:	00c00944 	movi	r3,37
   16a68:	9823883a 	mov	r17,r19
   16a6c:	10c0021e 	bne	r2,r3,16a78 <___svfiprintf_internal_r+0xb8>
   16a70:	00001406 	br	16ac4 <___svfiprintf_internal_r+0x104>
   16a74:	10c00326 	beq	r2,r3,16a84 <___svfiprintf_internal_r+0xc4>
   16a78:	8c400044 	addi	r17,r17,1
   16a7c:	88800007 	ldb	r2,0(r17)
   16a80:	103ffc1e 	bne	r2,zero,16a74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016a74>
   16a84:	8ce1c83a 	sub	r16,r17,r19
   16a88:	80000e26 	beq	r16,zero,16ac4 <___svfiprintf_internal_r+0x104>
   16a8c:	d8c01c17 	ldw	r3,112(sp)
   16a90:	d8801b17 	ldw	r2,108(sp)
   16a94:	44c00015 	stw	r19,0(r8)
   16a98:	1c07883a 	add	r3,r3,r16
   16a9c:	10800044 	addi	r2,r2,1
   16aa0:	d8c01c15 	stw	r3,112(sp)
   16aa4:	44000115 	stw	r16,4(r8)
   16aa8:	d8801b15 	stw	r2,108(sp)
   16aac:	00c001c4 	movi	r3,7
   16ab0:	18831e16 	blt	r3,r2,1772c <___svfiprintf_internal_r+0xd6c>
   16ab4:	42000204 	addi	r8,r8,8
   16ab8:	dac02517 	ldw	r11,148(sp)
   16abc:	5c17883a 	add	r11,r11,r16
   16ac0:	dac02515 	stw	r11,148(sp)
   16ac4:	88800007 	ldb	r2,0(r17)
   16ac8:	1002c526 	beq	r2,zero,175e0 <___svfiprintf_internal_r+0xc20>
   16acc:	88c00047 	ldb	r3,1(r17)
   16ad0:	8cc00044 	addi	r19,r17,1
   16ad4:	d8001d85 	stb	zero,118(sp)
   16ad8:	0009883a 	mov	r4,zero
   16adc:	000f883a 	mov	r7,zero
   16ae0:	043fffc4 	movi	r16,-1
   16ae4:	d8002415 	stw	zero,144(sp)
   16ae8:	0025883a 	mov	r18,zero
   16aec:	01401604 	movi	r5,88
   16af0:	01800244 	movi	r6,9
   16af4:	02800a84 	movi	r10,42
   16af8:	02401b04 	movi	r9,108
   16afc:	9cc00044 	addi	r19,r19,1
   16b00:	18bff804 	addi	r2,r3,-32
   16b04:	2881dd36 	bltu	r5,r2,1727c <___svfiprintf_internal_r+0x8bc>
   16b08:	100490ba 	slli	r2,r2,2
   16b0c:	02c00074 	movhi	r11,1
   16b10:	5adac804 	addi	r11,r11,27424
   16b14:	12c5883a 	add	r2,r2,r11
   16b18:	10800017 	ldw	r2,0(r2)
   16b1c:	1000683a 	jmp	r2
   16b20:	00016d1c 	xori	zero,zero,1460
   16b24:	0001727c 	xorhi	zero,zero,1481
   16b28:	0001727c 	xorhi	zero,zero,1481
   16b2c:	00016d10 	cmplti	zero,zero,1460
   16b30:	0001727c 	xorhi	zero,zero,1481
   16b34:	0001727c 	xorhi	zero,zero,1481
   16b38:	0001727c 	xorhi	zero,zero,1481
   16b3c:	0001727c 	xorhi	zero,zero,1481
   16b40:	0001727c 	xorhi	zero,zero,1481
   16b44:	0001727c 	xorhi	zero,zero,1481
   16b48:	00016c84 	movi	zero,1458
   16b4c:	00016e60 	cmpeqi	zero,zero,1465
   16b50:	0001727c 	xorhi	zero,zero,1481
   16b54:	00016cb0 	cmpltui	zero,zero,1458
   16b58:	000172b0 	cmpltui	zero,zero,1482
   16b5c:	0001727c 	xorhi	zero,zero,1481
   16b60:	000172a4 	muli	zero,zero,1482
   16b64:	00017244 	movi	zero,1481
   16b68:	00017244 	movi	zero,1481
   16b6c:	00017244 	movi	zero,1481
   16b70:	00017244 	movi	zero,1481
   16b74:	00017244 	movi	zero,1481
   16b78:	00017244 	movi	zero,1481
   16b7c:	00017244 	movi	zero,1481
   16b80:	00017244 	movi	zero,1481
   16b84:	00017244 	movi	zero,1481
   16b88:	0001727c 	xorhi	zero,zero,1481
   16b8c:	0001727c 	xorhi	zero,zero,1481
   16b90:	0001727c 	xorhi	zero,zero,1481
   16b94:	0001727c 	xorhi	zero,zero,1481
   16b98:	0001727c 	xorhi	zero,zero,1481
   16b9c:	0001727c 	xorhi	zero,zero,1481
   16ba0:	0001727c 	xorhi	zero,zero,1481
   16ba4:	0001727c 	xorhi	zero,zero,1481
   16ba8:	0001727c 	xorhi	zero,zero,1481
   16bac:	0001727c 	xorhi	zero,zero,1481
   16bb0:	000171e0 	cmpeqi	zero,zero,1479
   16bb4:	0001727c 	xorhi	zero,zero,1481
   16bb8:	0001727c 	xorhi	zero,zero,1481
   16bbc:	0001727c 	xorhi	zero,zero,1481
   16bc0:	0001727c 	xorhi	zero,zero,1481
   16bc4:	0001727c 	xorhi	zero,zero,1481
   16bc8:	0001727c 	xorhi	zero,zero,1481
   16bcc:	0001727c 	xorhi	zero,zero,1481
   16bd0:	0001727c 	xorhi	zero,zero,1481
   16bd4:	0001727c 	xorhi	zero,zero,1481
   16bd8:	0001727c 	xorhi	zero,zero,1481
   16bdc:	00017358 	cmpnei	zero,zero,1485
   16be0:	0001727c 	xorhi	zero,zero,1481
   16be4:	0001727c 	xorhi	zero,zero,1481
   16be8:	0001727c 	xorhi	zero,zero,1481
   16bec:	0001727c 	xorhi	zero,zero,1481
   16bf0:	0001727c 	xorhi	zero,zero,1481
   16bf4:	000172f0 	cmpltui	zero,zero,1483
   16bf8:	0001727c 	xorhi	zero,zero,1481
   16bfc:	0001727c 	xorhi	zero,zero,1481
   16c00:	00017024 	muli	zero,zero,1472
   16c04:	0001727c 	xorhi	zero,zero,1481
   16c08:	0001727c 	xorhi	zero,zero,1481
   16c0c:	0001727c 	xorhi	zero,zero,1481
   16c10:	0001727c 	xorhi	zero,zero,1481
   16c14:	0001727c 	xorhi	zero,zero,1481
   16c18:	0001727c 	xorhi	zero,zero,1481
   16c1c:	0001727c 	xorhi	zero,zero,1481
   16c20:	0001727c 	xorhi	zero,zero,1481
   16c24:	0001727c 	xorhi	zero,zero,1481
   16c28:	0001727c 	xorhi	zero,zero,1481
   16c2c:	00016f14 	movui	zero,1468
   16c30:	000170c0 	call	170c <_ZN4Game4drawEv+0x38>
   16c34:	0001727c 	xorhi	zero,zero,1481
   16c38:	0001727c 	xorhi	zero,zero,1481
   16c3c:	0001727c 	xorhi	zero,zero,1481
   16c40:	000170b4 	movhi	zero,1474
   16c44:	000170c0 	call	170c <_ZN4Game4drawEv+0x38>
   16c48:	0001727c 	xorhi	zero,zero,1481
   16c4c:	0001727c 	xorhi	zero,zero,1481
   16c50:	000170a4 	muli	zero,zero,1474
   16c54:	0001727c 	xorhi	zero,zero,1481
   16c58:	00017068 	cmpgeui	zero,zero,1473
   16c5c:	00016e70 	cmpltui	zero,zero,1465
   16c60:	00016cbc 	xorhi	zero,zero,1458
   16c64:	000171d4 	movui	zero,1479
   16c68:	0001727c 	xorhi	zero,zero,1481
   16c6c:	00017188 	cmpgei	zero,zero,1478
   16c70:	0001727c 	xorhi	zero,zero,1481
   16c74:	00016de0 	cmpeqi	zero,zero,1463
   16c78:	0001727c 	xorhi	zero,zero,1481
   16c7c:	0001727c 	xorhi	zero,zero,1481
   16c80:	00016d3c 	xorhi	zero,zero,1460
   16c84:	dac02317 	ldw	r11,140(sp)
   16c88:	5ac00017 	ldw	r11,0(r11)
   16c8c:	dac02415 	stw	r11,144(sp)
   16c90:	dac02317 	ldw	r11,140(sp)
   16c94:	58800104 	addi	r2,r11,4
   16c98:	dac02417 	ldw	r11,144(sp)
   16c9c:	5802e90e 	bge	r11,zero,17844 <___svfiprintf_internal_r+0xe84>
   16ca0:	dac02417 	ldw	r11,144(sp)
   16ca4:	d8802315 	stw	r2,140(sp)
   16ca8:	02d7c83a 	sub	r11,zero,r11
   16cac:	dac02415 	stw	r11,144(sp)
   16cb0:	94800114 	ori	r18,r18,4
   16cb4:	98c00007 	ldb	r3,0(r19)
   16cb8:	003f9006 	br	16afc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016afc>
   16cbc:	00800c04 	movi	r2,48
   16cc0:	dac02317 	ldw	r11,140(sp)
   16cc4:	d8801d05 	stb	r2,116(sp)
   16cc8:	00801e04 	movi	r2,120
   16ccc:	d8801d45 	stb	r2,117(sp)
   16cd0:	d8001d85 	stb	zero,118(sp)
   16cd4:	58c00104 	addi	r3,r11,4
   16cd8:	5f000017 	ldw	fp,0(r11)
   16cdc:	0013883a 	mov	r9,zero
   16ce0:	90800094 	ori	r2,r18,2
   16ce4:	80032b16 	blt	r16,zero,17994 <___svfiprintf_internal_r+0xfd4>
   16ce8:	00bfdfc4 	movi	r2,-129
   16cec:	90a4703a 	and	r18,r18,r2
   16cf0:	d8c02315 	stw	r3,140(sp)
   16cf4:	94800094 	ori	r18,r18,2
   16cf8:	e002dc26 	beq	fp,zero,1786c <___svfiprintf_internal_r+0xeac>
   16cfc:	010000f4 	movhi	r4,3
   16d00:	2120bb04 	addi	r4,r4,-32020
   16d04:	0015883a 	mov	r10,zero
   16d08:	d9002915 	stw	r4,164(sp)
   16d0c:	00002306 	br	16d9c <___svfiprintf_internal_r+0x3dc>
   16d10:	94800054 	ori	r18,r18,1
   16d14:	98c00007 	ldb	r3,0(r19)
   16d18:	003f7806 	br	16afc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016afc>
   16d1c:	38803fcc 	andi	r2,r7,255
   16d20:	1080201c 	xori	r2,r2,128
   16d24:	10bfe004 	addi	r2,r2,-128
   16d28:	1002f31e 	bne	r2,zero,178f8 <___svfiprintf_internal_r+0xf38>
   16d2c:	01000044 	movi	r4,1
   16d30:	01c00804 	movi	r7,32
   16d34:	98c00007 	ldb	r3,0(r19)
   16d38:	003f7006 	br	16afc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016afc>
   16d3c:	21003fcc 	andi	r4,r4,255
   16d40:	2003aa1e 	bne	r4,zero,17bec <___svfiprintf_internal_r+0x122c>
   16d44:	008000f4 	movhi	r2,3
   16d48:	10a0bb04 	addi	r2,r2,-32020
   16d4c:	d8802915 	stw	r2,164(sp)
   16d50:	9080080c 	andi	r2,r18,32
   16d54:	1000ba26 	beq	r2,zero,17040 <___svfiprintf_internal_r+0x680>
   16d58:	dac02317 	ldw	r11,140(sp)
   16d5c:	5f000017 	ldw	fp,0(r11)
   16d60:	5a400117 	ldw	r9,4(r11)
   16d64:	5ac00204 	addi	r11,r11,8
   16d68:	dac02315 	stw	r11,140(sp)
   16d6c:	9080004c 	andi	r2,r18,1
   16d70:	10029026 	beq	r2,zero,177b4 <___svfiprintf_internal_r+0xdf4>
   16d74:	e244b03a 	or	r2,fp,r9
   16d78:	1002d41e 	bne	r2,zero,178cc <___svfiprintf_internal_r+0xf0c>
   16d7c:	d8001d85 	stb	zero,118(sp)
   16d80:	80030b16 	blt	r16,zero,179b0 <___svfiprintf_internal_r+0xff0>
   16d84:	00bfdfc4 	movi	r2,-129
   16d88:	90a4703a 	and	r18,r18,r2
   16d8c:	0015883a 	mov	r10,zero
   16d90:	80002426 	beq	r16,zero,16e24 <___svfiprintf_internal_r+0x464>
   16d94:	0039883a 	mov	fp,zero
   16d98:	0013883a 	mov	r9,zero
   16d9c:	d9002917 	ldw	r4,164(sp)
   16da0:	dc401a04 	addi	r17,sp,104
   16da4:	e08003cc 	andi	r2,fp,15
   16da8:	4806973a 	slli	r3,r9,28
   16dac:	2085883a 	add	r2,r4,r2
   16db0:	e038d13a 	srli	fp,fp,4
   16db4:	10800003 	ldbu	r2,0(r2)
   16db8:	4812d13a 	srli	r9,r9,4
   16dbc:	8c7fffc4 	addi	r17,r17,-1
   16dc0:	1f38b03a 	or	fp,r3,fp
   16dc4:	88800005 	stb	r2,0(r17)
   16dc8:	e244b03a 	or	r2,fp,r9
   16dcc:	103ff51e 	bne	r2,zero,16da4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016da4>
   16dd0:	dac01e17 	ldw	r11,120(sp)
   16dd4:	5c57c83a 	sub	r11,r11,r17
   16dd8:	dac02115 	stw	r11,132(sp)
   16ddc:	00001406 	br	16e30 <___svfiprintf_internal_r+0x470>
   16de0:	21003fcc 	andi	r4,r4,255
   16de4:	2003741e 	bne	r4,zero,17bb8 <___svfiprintf_internal_r+0x11f8>
   16de8:	9080080c 	andi	r2,r18,32
   16dec:	10014526 	beq	r2,zero,17304 <___svfiprintf_internal_r+0x944>
   16df0:	dac02317 	ldw	r11,140(sp)
   16df4:	d8001d85 	stb	zero,118(sp)
   16df8:	58c00204 	addi	r3,r11,8
   16dfc:	5f000017 	ldw	fp,0(r11)
   16e00:	5a400117 	ldw	r9,4(r11)
   16e04:	8002d916 	blt	r16,zero,1796c <___svfiprintf_internal_r+0xfac>
   16e08:	013fdfc4 	movi	r4,-129
   16e0c:	e244b03a 	or	r2,fp,r9
   16e10:	d8c02315 	stw	r3,140(sp)
   16e14:	9124703a 	and	r18,r18,r4
   16e18:	0015883a 	mov	r10,zero
   16e1c:	1000b91e 	bne	r2,zero,17104 <___svfiprintf_internal_r+0x744>
   16e20:	8002e61e 	bne	r16,zero,179bc <___svfiprintf_internal_r+0xffc>
   16e24:	0021883a 	mov	r16,zero
   16e28:	d8002115 	stw	zero,132(sp)
   16e2c:	dc401a04 	addi	r17,sp,104
   16e30:	d8c02117 	ldw	r3,132(sp)
   16e34:	dc002015 	stw	r16,128(sp)
   16e38:	80c0010e 	bge	r16,r3,16e40 <___svfiprintf_internal_r+0x480>
   16e3c:	d8c02015 	stw	r3,128(sp)
   16e40:	52803fcc 	andi	r10,r10,255
   16e44:	5280201c 	xori	r10,r10,128
   16e48:	52bfe004 	addi	r10,r10,-128
   16e4c:	50003c26 	beq	r10,zero,16f40 <___svfiprintf_internal_r+0x580>
   16e50:	dac02017 	ldw	r11,128(sp)
   16e54:	5ac00044 	addi	r11,r11,1
   16e58:	dac02015 	stw	r11,128(sp)
   16e5c:	00003806 	br	16f40 <___svfiprintf_internal_r+0x580>
   16e60:	01000044 	movi	r4,1
   16e64:	01c00ac4 	movi	r7,43
   16e68:	98c00007 	ldb	r3,0(r19)
   16e6c:	003f2306 	br	16afc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016afc>
   16e70:	21003fcc 	andi	r4,r4,255
   16e74:	2003481e 	bne	r4,zero,17b98 <___svfiprintf_internal_r+0x11d8>
   16e78:	9080080c 	andi	r2,r18,32
   16e7c:	10013b26 	beq	r2,zero,1736c <___svfiprintf_internal_r+0x9ac>
   16e80:	dac02317 	ldw	r11,140(sp)
   16e84:	d8001d85 	stb	zero,118(sp)
   16e88:	58800204 	addi	r2,r11,8
   16e8c:	5f000017 	ldw	fp,0(r11)
   16e90:	5a400117 	ldw	r9,4(r11)
   16e94:	8002a816 	blt	r16,zero,17938 <___svfiprintf_internal_r+0xf78>
   16e98:	013fdfc4 	movi	r4,-129
   16e9c:	e246b03a 	or	r3,fp,r9
   16ea0:	d8802315 	stw	r2,140(sp)
   16ea4:	9124703a 	and	r18,r18,r4
   16ea8:	18013c26 	beq	r3,zero,1739c <___svfiprintf_internal_r+0x9dc>
   16eac:	0015883a 	mov	r10,zero
   16eb0:	dc401a04 	addi	r17,sp,104
   16eb4:	e006d0fa 	srli	r3,fp,3
   16eb8:	4808977a 	slli	r4,r9,29
   16ebc:	4812d0fa 	srli	r9,r9,3
   16ec0:	e70001cc 	andi	fp,fp,7
   16ec4:	e0800c04 	addi	r2,fp,48
   16ec8:	8c7fffc4 	addi	r17,r17,-1
   16ecc:	20f8b03a 	or	fp,r4,r3
   16ed0:	88800005 	stb	r2,0(r17)
   16ed4:	e246b03a 	or	r3,fp,r9
   16ed8:	183ff61e 	bne	r3,zero,16eb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016eb4>
   16edc:	90c0004c 	andi	r3,r18,1
   16ee0:	1800a526 	beq	r3,zero,17178 <___svfiprintf_internal_r+0x7b8>
   16ee4:	10803fcc 	andi	r2,r2,255
   16ee8:	1080201c 	xori	r2,r2,128
   16eec:	10bfe004 	addi	r2,r2,-128
   16ef0:	00c00c04 	movi	r3,48
   16ef4:	10ffb626 	beq	r2,r3,16dd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016dd0>
   16ef8:	88ffffc5 	stb	r3,-1(r17)
   16efc:	d8c01e17 	ldw	r3,120(sp)
   16f00:	88bfffc4 	addi	r2,r17,-1
   16f04:	1023883a 	mov	r17,r2
   16f08:	1887c83a 	sub	r3,r3,r2
   16f0c:	d8c02115 	stw	r3,132(sp)
   16f10:	003fc706 	br	16e30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016e30>
   16f14:	dac02317 	ldw	r11,140(sp)
   16f18:	00c00044 	movi	r3,1
   16f1c:	d8c02015 	stw	r3,128(sp)
   16f20:	58800017 	ldw	r2,0(r11)
   16f24:	5ac00104 	addi	r11,r11,4
   16f28:	d8001d85 	stb	zero,118(sp)
   16f2c:	d8801005 	stb	r2,64(sp)
   16f30:	dac02315 	stw	r11,140(sp)
   16f34:	d8c02115 	stw	r3,132(sp)
   16f38:	dc401004 	addi	r17,sp,64
   16f3c:	0021883a 	mov	r16,zero
   16f40:	90c0008c 	andi	r3,r18,2
   16f44:	d8c02215 	stw	r3,136(sp)
   16f48:	18000326 	beq	r3,zero,16f58 <___svfiprintf_internal_r+0x598>
   16f4c:	dac02017 	ldw	r11,128(sp)
   16f50:	5ac00084 	addi	r11,r11,2
   16f54:	dac02015 	stw	r11,128(sp)
   16f58:	90c0210c 	andi	r3,r18,132
   16f5c:	d8c02615 	stw	r3,152(sp)
   16f60:	1801131e 	bne	r3,zero,173b0 <___svfiprintf_internal_r+0x9f0>
   16f64:	dac02417 	ldw	r11,144(sp)
   16f68:	d8c02017 	ldw	r3,128(sp)
   16f6c:	58f9c83a 	sub	fp,r11,r3
   16f70:	07010f0e 	bge	zero,fp,173b0 <___svfiprintf_internal_r+0x9f0>
   16f74:	02400404 	movi	r9,16
   16f78:	d8c01c17 	ldw	r3,112(sp)
   16f7c:	d8801b17 	ldw	r2,108(sp)
   16f80:	4f02d60e 	bge	r9,fp,17adc <___svfiprintf_internal_r+0x111c>
   16f84:	014000f4 	movhi	r5,3
   16f88:	29612704 	addi	r5,r5,-31588
   16f8c:	d9402815 	stw	r5,160(sp)
   16f90:	028001c4 	movi	r10,7
   16f94:	00000306 	br	16fa4 <___svfiprintf_internal_r+0x5e4>
   16f98:	e73ffc04 	addi	fp,fp,-16
   16f9c:	42000204 	addi	r8,r8,8
   16fa0:	4f00150e 	bge	r9,fp,16ff8 <___svfiprintf_internal_r+0x638>
   16fa4:	18c00404 	addi	r3,r3,16
   16fa8:	10800044 	addi	r2,r2,1
   16fac:	45800015 	stw	r22,0(r8)
   16fb0:	42400115 	stw	r9,4(r8)
   16fb4:	d8c01c15 	stw	r3,112(sp)
   16fb8:	d8801b15 	stw	r2,108(sp)
   16fbc:	50bff60e 	bge	r10,r2,16f98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016f98>
   16fc0:	d9801a04 	addi	r6,sp,104
   16fc4:	b80b883a 	mov	r5,r23
   16fc8:	a809883a 	mov	r4,r21
   16fcc:	da402c15 	stw	r9,176(sp)
   16fd0:	da802d15 	stw	r10,180(sp)
   16fd4:	00167f00 	call	167f0 <__ssprint_r>
   16fd8:	da402c17 	ldw	r9,176(sp)
   16fdc:	da802d17 	ldw	r10,180(sp)
   16fe0:	1001851e 	bne	r2,zero,175f8 <___svfiprintf_internal_r+0xc38>
   16fe4:	e73ffc04 	addi	fp,fp,-16
   16fe8:	d8c01c17 	ldw	r3,112(sp)
   16fec:	d8801b17 	ldw	r2,108(sp)
   16ff0:	d811883a 	mov	r8,sp
   16ff4:	4f3feb16 	blt	r9,fp,16fa4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016fa4>
   16ff8:	dac02817 	ldw	r11,160(sp)
   16ffc:	e0c7883a 	add	r3,fp,r3
   17000:	10800044 	addi	r2,r2,1
   17004:	42c00015 	stw	r11,0(r8)
   17008:	47000115 	stw	fp,4(r8)
   1700c:	d8c01c15 	stw	r3,112(sp)
   17010:	d8801b15 	stw	r2,108(sp)
   17014:	010001c4 	movi	r4,7
   17018:	2081ee16 	blt	r4,r2,177d4 <___svfiprintf_internal_r+0xe14>
   1701c:	42000204 	addi	r8,r8,8
   17020:	0000e506 	br	173b8 <___svfiprintf_internal_r+0x9f8>
   17024:	21003fcc 	andi	r4,r4,255
   17028:	2002dd1e 	bne	r4,zero,17ba0 <___svfiprintf_internal_r+0x11e0>
   1702c:	008000f4 	movhi	r2,3
   17030:	10a0b604 	addi	r2,r2,-32040
   17034:	d8802915 	stw	r2,164(sp)
   17038:	9080080c 	andi	r2,r18,32
   1703c:	103f461e 	bne	r2,zero,16d58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016d58>
   17040:	9080040c 	andi	r2,r18,16
   17044:	10022e1e 	bne	r2,zero,17900 <___svfiprintf_internal_r+0xf40>
   17048:	9080100c 	andi	r2,r18,64
   1704c:	dac02317 	ldw	r11,140(sp)
   17050:	10027326 	beq	r2,zero,17a20 <___svfiprintf_internal_r+0x1060>
   17054:	5f00000b 	ldhu	fp,0(r11)
   17058:	5ac00104 	addi	r11,r11,4
   1705c:	0013883a 	mov	r9,zero
   17060:	dac02315 	stw	r11,140(sp)
   17064:	003f4106 	br	16d6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016d6c>
   17068:	21003fcc 	andi	r4,r4,255
   1706c:	2002e11e 	bne	r4,zero,17bf4 <___svfiprintf_internal_r+0x1234>
   17070:	9080080c 	andi	r2,r18,32
   17074:	1002011e 	bne	r2,zero,1787c <___svfiprintf_internal_r+0xebc>
   17078:	9080040c 	andi	r2,r18,16
   1707c:	10023e1e 	bne	r2,zero,17978 <___svfiprintf_internal_r+0xfb8>
   17080:	9480100c 	andi	r18,r18,64
   17084:	90023c26 	beq	r18,zero,17978 <___svfiprintf_internal_r+0xfb8>
   17088:	dac02317 	ldw	r11,140(sp)
   1708c:	58800017 	ldw	r2,0(r11)
   17090:	5ac00104 	addi	r11,r11,4
   17094:	dac02315 	stw	r11,140(sp)
   17098:	dac02517 	ldw	r11,148(sp)
   1709c:	12c0000d 	sth	r11,0(r2)
   170a0:	003e6e06 	br	16a5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016a5c>
   170a4:	98c00007 	ldb	r3,0(r19)
   170a8:	1a422926 	beq	r3,r9,17950 <___svfiprintf_internal_r+0xf90>
   170ac:	94800414 	ori	r18,r18,16
   170b0:	003e9206 	br	16afc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016afc>
   170b4:	94801014 	ori	r18,r18,64
   170b8:	98c00007 	ldb	r3,0(r19)
   170bc:	003e8f06 	br	16afc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016afc>
   170c0:	21003fcc 	andi	r4,r4,255
   170c4:	2002c71e 	bne	r4,zero,17be4 <___svfiprintf_internal_r+0x1224>
   170c8:	9080080c 	andi	r2,r18,32
   170cc:	10004926 	beq	r2,zero,171f4 <___svfiprintf_internal_r+0x834>
   170d0:	dac02317 	ldw	r11,140(sp)
   170d4:	58800117 	ldw	r2,4(r11)
   170d8:	5f000017 	ldw	fp,0(r11)
   170dc:	5ac00204 	addi	r11,r11,8
   170e0:	dac02315 	stw	r11,140(sp)
   170e4:	1013883a 	mov	r9,r2
   170e8:	10004b16 	blt	r2,zero,17218 <___svfiprintf_internal_r+0x858>
   170ec:	da801d83 	ldbu	r10,118(sp)
   170f0:	8001cb16 	blt	r16,zero,17820 <___svfiprintf_internal_r+0xe60>
   170f4:	00ffdfc4 	movi	r3,-129
   170f8:	e244b03a 	or	r2,fp,r9
   170fc:	90e4703a 	and	r18,r18,r3
   17100:	103f4726 	beq	r2,zero,16e20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016e20>
   17104:	48008c26 	beq	r9,zero,17338 <___svfiprintf_internal_r+0x978>
   17108:	dc802015 	stw	r18,128(sp)
   1710c:	dc002115 	stw	r16,132(sp)
   17110:	dc401a04 	addi	r17,sp,104
   17114:	e021883a 	mov	r16,fp
   17118:	da002215 	stw	r8,136(sp)
   1711c:	5039883a 	mov	fp,r10
   17120:	4825883a 	mov	r18,r9
   17124:	8009883a 	mov	r4,r16
   17128:	900b883a 	mov	r5,r18
   1712c:	01800284 	movi	r6,10
   17130:	000f883a 	mov	r7,zero
   17134:	001a0f00 	call	1a0f0 <__umoddi3>
   17138:	10800c04 	addi	r2,r2,48
   1713c:	8c7fffc4 	addi	r17,r17,-1
   17140:	8009883a 	mov	r4,r16
   17144:	900b883a 	mov	r5,r18
   17148:	88800005 	stb	r2,0(r17)
   1714c:	01800284 	movi	r6,10
   17150:	000f883a 	mov	r7,zero
   17154:	0019b780 	call	19b78 <__udivdi3>
   17158:	1021883a 	mov	r16,r2
   1715c:	10c4b03a 	or	r2,r2,r3
   17160:	1825883a 	mov	r18,r3
   17164:	103fef1e 	bne	r2,zero,17124 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017124>
   17168:	dc802017 	ldw	r18,128(sp)
   1716c:	dc002117 	ldw	r16,132(sp)
   17170:	da002217 	ldw	r8,136(sp)
   17174:	e015883a 	mov	r10,fp
   17178:	d8c01e17 	ldw	r3,120(sp)
   1717c:	1c47c83a 	sub	r3,r3,r17
   17180:	d8c02115 	stw	r3,132(sp)
   17184:	003f2a06 	br	16e30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016e30>
   17188:	dac02317 	ldw	r11,140(sp)
   1718c:	d8001d85 	stb	zero,118(sp)
   17190:	5c400017 	ldw	r17,0(r11)
   17194:	5f000104 	addi	fp,r11,4
   17198:	88022f26 	beq	r17,zero,17a58 <___svfiprintf_internal_r+0x1098>
   1719c:	80022516 	blt	r16,zero,17a34 <___svfiprintf_internal_r+0x1074>
   171a0:	800d883a 	mov	r6,r16
   171a4:	000b883a 	mov	r5,zero
   171a8:	8809883a 	mov	r4,r17
   171ac:	da002c15 	stw	r8,176(sp)
   171b0:	0014f140 	call	14f14 <memchr>
   171b4:	da002c17 	ldw	r8,176(sp)
   171b8:	10026426 	beq	r2,zero,17b4c <___svfiprintf_internal_r+0x118c>
   171bc:	1445c83a 	sub	r2,r2,r17
   171c0:	d8802115 	stw	r2,132(sp)
   171c4:	da801d83 	ldbu	r10,118(sp)
   171c8:	df002315 	stw	fp,140(sp)
   171cc:	0021883a 	mov	r16,zero
   171d0:	003f1706 	br	16e30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016e30>
   171d4:	94800814 	ori	r18,r18,32
   171d8:	98c00007 	ldb	r3,0(r19)
   171dc:	003e4706 	br	16afc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016afc>
   171e0:	21003fcc 	andi	r4,r4,255
   171e4:	2002701e 	bne	r4,zero,17ba8 <___svfiprintf_internal_r+0x11e8>
   171e8:	94800414 	ori	r18,r18,16
   171ec:	9080080c 	andi	r2,r18,32
   171f0:	103fb71e 	bne	r2,zero,170d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70170d0>
   171f4:	9080040c 	andi	r2,r18,16
   171f8:	1001ab26 	beq	r2,zero,178a8 <___svfiprintf_internal_r+0xee8>
   171fc:	dac02317 	ldw	r11,140(sp)
   17200:	5f000017 	ldw	fp,0(r11)
   17204:	5ac00104 	addi	r11,r11,4
   17208:	dac02315 	stw	r11,140(sp)
   1720c:	e013d7fa 	srai	r9,fp,31
   17210:	4805883a 	mov	r2,r9
   17214:	103fb50e 	bge	r2,zero,170ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70170ec>
   17218:	0739c83a 	sub	fp,zero,fp
   1721c:	02800b44 	movi	r10,45
   17220:	e004c03a 	cmpne	r2,fp,zero
   17224:	0253c83a 	sub	r9,zero,r9
   17228:	da801d85 	stb	r10,118(sp)
   1722c:	4893c83a 	sub	r9,r9,r2
   17230:	80023016 	blt	r16,zero,17af4 <___svfiprintf_internal_r+0x1134>
   17234:	00bfdfc4 	movi	r2,-129
   17238:	90a4703a 	and	r18,r18,r2
   1723c:	483fb21e 	bne	r9,zero,17108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017108>
   17240:	00003d06 	br	17338 <___svfiprintf_internal_r+0x978>
   17244:	9817883a 	mov	r11,r19
   17248:	d8002415 	stw	zero,144(sp)
   1724c:	18bff404 	addi	r2,r3,-48
   17250:	0019883a 	mov	r12,zero
   17254:	58c00007 	ldb	r3,0(r11)
   17258:	630002a4 	muli	r12,r12,10
   1725c:	9cc00044 	addi	r19,r19,1
   17260:	9817883a 	mov	r11,r19
   17264:	1319883a 	add	r12,r2,r12
   17268:	18bff404 	addi	r2,r3,-48
   1726c:	30bff92e 	bgeu	r6,r2,17254 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017254>
   17270:	db002415 	stw	r12,144(sp)
   17274:	18bff804 	addi	r2,r3,-32
   17278:	28be232e 	bgeu	r5,r2,16b08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016b08>
   1727c:	21003fcc 	andi	r4,r4,255
   17280:	20024b1e 	bne	r4,zero,17bb0 <___svfiprintf_internal_r+0x11f0>
   17284:	1800d626 	beq	r3,zero,175e0 <___svfiprintf_internal_r+0xc20>
   17288:	02c00044 	movi	r11,1
   1728c:	dac02015 	stw	r11,128(sp)
   17290:	d8c01005 	stb	r3,64(sp)
   17294:	d8001d85 	stb	zero,118(sp)
   17298:	dac02115 	stw	r11,132(sp)
   1729c:	dc401004 	addi	r17,sp,64
   172a0:	003f2606 	br	16f3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016f3c>
   172a4:	94802014 	ori	r18,r18,128
   172a8:	98c00007 	ldb	r3,0(r19)
   172ac:	003e1306 	br	16afc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016afc>
   172b0:	98c00007 	ldb	r3,0(r19)
   172b4:	9ac00044 	addi	r11,r19,1
   172b8:	1a822b26 	beq	r3,r10,17b68 <___svfiprintf_internal_r+0x11a8>
   172bc:	18bff404 	addi	r2,r3,-48
   172c0:	0021883a 	mov	r16,zero
   172c4:	30821e36 	bltu	r6,r2,17b40 <___svfiprintf_internal_r+0x1180>
   172c8:	58c00007 	ldb	r3,0(r11)
   172cc:	840002a4 	muli	r16,r16,10
   172d0:	5cc00044 	addi	r19,r11,1
   172d4:	9817883a 	mov	r11,r19
   172d8:	80a1883a 	add	r16,r16,r2
   172dc:	18bff404 	addi	r2,r3,-48
   172e0:	30bff92e 	bgeu	r6,r2,172c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70172c8>
   172e4:	803e060e 	bge	r16,zero,16b00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016b00>
   172e8:	043fffc4 	movi	r16,-1
   172ec:	003e0406 	br	16b00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016b00>
   172f0:	21003fcc 	andi	r4,r4,255
   172f4:	2002371e 	bne	r4,zero,17bd4 <___svfiprintf_internal_r+0x1214>
   172f8:	94800414 	ori	r18,r18,16
   172fc:	9080080c 	andi	r2,r18,32
   17300:	103ebb1e 	bne	r2,zero,16df0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016df0>
   17304:	9080040c 	andi	r2,r18,16
   17308:	10013b26 	beq	r2,zero,177f8 <___svfiprintf_internal_r+0xe38>
   1730c:	dac02317 	ldw	r11,140(sp)
   17310:	d8001d85 	stb	zero,118(sp)
   17314:	0013883a 	mov	r9,zero
   17318:	58800104 	addi	r2,r11,4
   1731c:	5f000017 	ldw	fp,0(r11)
   17320:	80013d16 	blt	r16,zero,17818 <___svfiprintf_internal_r+0xe58>
   17324:	00ffdfc4 	movi	r3,-129
   17328:	d8802315 	stw	r2,140(sp)
   1732c:	90e4703a 	and	r18,r18,r3
   17330:	0015883a 	mov	r10,zero
   17334:	e03eba26 	beq	fp,zero,16e20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016e20>
   17338:	00800244 	movi	r2,9
   1733c:	173f7236 	bltu	r2,fp,17108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017108>
   17340:	dac02b17 	ldw	r11,172(sp)
   17344:	e7000c04 	addi	fp,fp,48
   17348:	df0019c5 	stb	fp,103(sp)
   1734c:	dac02115 	stw	r11,132(sp)
   17350:	dc4019c4 	addi	r17,sp,103
   17354:	003eb606 	br	16e30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016e30>
   17358:	21003fcc 	andi	r4,r4,255
   1735c:	20021f1e 	bne	r4,zero,17bdc <___svfiprintf_internal_r+0x121c>
   17360:	94800414 	ori	r18,r18,16
   17364:	9080080c 	andi	r2,r18,32
   17368:	103ec51e 	bne	r2,zero,16e80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016e80>
   1736c:	9080040c 	andi	r2,r18,16
   17370:	10016926 	beq	r2,zero,17918 <___svfiprintf_internal_r+0xf58>
   17374:	dac02317 	ldw	r11,140(sp)
   17378:	d8001d85 	stb	zero,118(sp)
   1737c:	0013883a 	mov	r9,zero
   17380:	58800104 	addi	r2,r11,4
   17384:	5f000017 	ldw	fp,0(r11)
   17388:	80016b16 	blt	r16,zero,17938 <___svfiprintf_internal_r+0xf78>
   1738c:	00ffdfc4 	movi	r3,-129
   17390:	d8802315 	stw	r2,140(sp)
   17394:	90e4703a 	and	r18,r18,r3
   17398:	e03ec41e 	bne	fp,zero,16eac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016eac>
   1739c:	0015883a 	mov	r10,zero
   173a0:	8001c226 	beq	r16,zero,17aac <___svfiprintf_internal_r+0x10ec>
   173a4:	0039883a 	mov	fp,zero
   173a8:	0013883a 	mov	r9,zero
   173ac:	003ec006 	br	16eb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016eb0>
   173b0:	d8c01c17 	ldw	r3,112(sp)
   173b4:	d8801b17 	ldw	r2,108(sp)
   173b8:	d9001d87 	ldb	r4,118(sp)
   173bc:	20000b26 	beq	r4,zero,173ec <___svfiprintf_internal_r+0xa2c>
   173c0:	d9001d84 	addi	r4,sp,118
   173c4:	18c00044 	addi	r3,r3,1
   173c8:	10800044 	addi	r2,r2,1
   173cc:	41000015 	stw	r4,0(r8)
   173d0:	01000044 	movi	r4,1
   173d4:	41000115 	stw	r4,4(r8)
   173d8:	d8c01c15 	stw	r3,112(sp)
   173dc:	d8801b15 	stw	r2,108(sp)
   173e0:	010001c4 	movi	r4,7
   173e4:	2080e116 	blt	r4,r2,1776c <___svfiprintf_internal_r+0xdac>
   173e8:	42000204 	addi	r8,r8,8
   173ec:	dac02217 	ldw	r11,136(sp)
   173f0:	58000b26 	beq	r11,zero,17420 <___svfiprintf_internal_r+0xa60>
   173f4:	d9001d04 	addi	r4,sp,116
   173f8:	18c00084 	addi	r3,r3,2
   173fc:	10800044 	addi	r2,r2,1
   17400:	41000015 	stw	r4,0(r8)
   17404:	01000084 	movi	r4,2
   17408:	41000115 	stw	r4,4(r8)
   1740c:	d8c01c15 	stw	r3,112(sp)
   17410:	d8801b15 	stw	r2,108(sp)
   17414:	010001c4 	movi	r4,7
   17418:	2080dd16 	blt	r4,r2,17790 <___svfiprintf_internal_r+0xdd0>
   1741c:	42000204 	addi	r8,r8,8
   17420:	dac02617 	ldw	r11,152(sp)
   17424:	01002004 	movi	r4,128
   17428:	59008426 	beq	r11,r4,1763c <___svfiprintf_internal_r+0xc7c>
   1742c:	dac02117 	ldw	r11,132(sp)
   17430:	82e1c83a 	sub	r16,r16,r11
   17434:	0400270e 	bge	zero,r16,174d4 <___svfiprintf_internal_r+0xb14>
   17438:	01c00404 	movi	r7,16
   1743c:	3c016a0e 	bge	r7,r16,179e8 <___svfiprintf_internal_r+0x1028>
   17440:	014000f4 	movhi	r5,3
   17444:	29612304 	addi	r5,r5,-31604
   17448:	d9402215 	stw	r5,136(sp)
   1744c:	070001c4 	movi	fp,7
   17450:	00000306 	br	17460 <___svfiprintf_internal_r+0xaa0>
   17454:	843ffc04 	addi	r16,r16,-16
   17458:	42000204 	addi	r8,r8,8
   1745c:	3c00130e 	bge	r7,r16,174ac <___svfiprintf_internal_r+0xaec>
   17460:	18c00404 	addi	r3,r3,16
   17464:	10800044 	addi	r2,r2,1
   17468:	45000015 	stw	r20,0(r8)
   1746c:	41c00115 	stw	r7,4(r8)
   17470:	d8c01c15 	stw	r3,112(sp)
   17474:	d8801b15 	stw	r2,108(sp)
   17478:	e0bff60e 	bge	fp,r2,17454 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017454>
   1747c:	d9801a04 	addi	r6,sp,104
   17480:	b80b883a 	mov	r5,r23
   17484:	a809883a 	mov	r4,r21
   17488:	d9c02c15 	stw	r7,176(sp)
   1748c:	00167f00 	call	167f0 <__ssprint_r>
   17490:	d9c02c17 	ldw	r7,176(sp)
   17494:	1000581e 	bne	r2,zero,175f8 <___svfiprintf_internal_r+0xc38>
   17498:	843ffc04 	addi	r16,r16,-16
   1749c:	d8c01c17 	ldw	r3,112(sp)
   174a0:	d8801b17 	ldw	r2,108(sp)
   174a4:	d811883a 	mov	r8,sp
   174a8:	3c3fed16 	blt	r7,r16,17460 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017460>
   174ac:	dac02217 	ldw	r11,136(sp)
   174b0:	1c07883a 	add	r3,r3,r16
   174b4:	10800044 	addi	r2,r2,1
   174b8:	42c00015 	stw	r11,0(r8)
   174bc:	44000115 	stw	r16,4(r8)
   174c0:	d8c01c15 	stw	r3,112(sp)
   174c4:	d8801b15 	stw	r2,108(sp)
   174c8:	010001c4 	movi	r4,7
   174cc:	20809e16 	blt	r4,r2,17748 <___svfiprintf_internal_r+0xd88>
   174d0:	42000204 	addi	r8,r8,8
   174d4:	dac02117 	ldw	r11,132(sp)
   174d8:	10800044 	addi	r2,r2,1
   174dc:	44400015 	stw	r17,0(r8)
   174e0:	58c7883a 	add	r3,r11,r3
   174e4:	42c00115 	stw	r11,4(r8)
   174e8:	d8c01c15 	stw	r3,112(sp)
   174ec:	d8801b15 	stw	r2,108(sp)
   174f0:	010001c4 	movi	r4,7
   174f4:	20807f16 	blt	r4,r2,176f4 <___svfiprintf_internal_r+0xd34>
   174f8:	42000204 	addi	r8,r8,8
   174fc:	9480010c 	andi	r18,r18,4
   17500:	90002926 	beq	r18,zero,175a8 <___svfiprintf_internal_r+0xbe8>
   17504:	dac02417 	ldw	r11,144(sp)
   17508:	d8802017 	ldw	r2,128(sp)
   1750c:	58a1c83a 	sub	r16,r11,r2
   17510:	0400250e 	bge	zero,r16,175a8 <___svfiprintf_internal_r+0xbe8>
   17514:	04400404 	movi	r17,16
   17518:	d8801b17 	ldw	r2,108(sp)
   1751c:	8c017c0e 	bge	r17,r16,17b10 <___svfiprintf_internal_r+0x1150>
   17520:	014000f4 	movhi	r5,3
   17524:	29612704 	addi	r5,r5,-31588
   17528:	d9402815 	stw	r5,160(sp)
   1752c:	048001c4 	movi	r18,7
   17530:	00000306 	br	17540 <___svfiprintf_internal_r+0xb80>
   17534:	843ffc04 	addi	r16,r16,-16
   17538:	42000204 	addi	r8,r8,8
   1753c:	8c00110e 	bge	r17,r16,17584 <___svfiprintf_internal_r+0xbc4>
   17540:	18c00404 	addi	r3,r3,16
   17544:	10800044 	addi	r2,r2,1
   17548:	45800015 	stw	r22,0(r8)
   1754c:	44400115 	stw	r17,4(r8)
   17550:	d8c01c15 	stw	r3,112(sp)
   17554:	d8801b15 	stw	r2,108(sp)
   17558:	90bff60e 	bge	r18,r2,17534 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017534>
   1755c:	d9801a04 	addi	r6,sp,104
   17560:	b80b883a 	mov	r5,r23
   17564:	a809883a 	mov	r4,r21
   17568:	00167f00 	call	167f0 <__ssprint_r>
   1756c:	1000221e 	bne	r2,zero,175f8 <___svfiprintf_internal_r+0xc38>
   17570:	843ffc04 	addi	r16,r16,-16
   17574:	d8c01c17 	ldw	r3,112(sp)
   17578:	d8801b17 	ldw	r2,108(sp)
   1757c:	d811883a 	mov	r8,sp
   17580:	8c3fef16 	blt	r17,r16,17540 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017540>
   17584:	dac02817 	ldw	r11,160(sp)
   17588:	1c07883a 	add	r3,r3,r16
   1758c:	10800044 	addi	r2,r2,1
   17590:	42c00015 	stw	r11,0(r8)
   17594:	44000115 	stw	r16,4(r8)
   17598:	d8c01c15 	stw	r3,112(sp)
   1759c:	d8801b15 	stw	r2,108(sp)
   175a0:	010001c4 	movi	r4,7
   175a4:	2080aa16 	blt	r4,r2,17850 <___svfiprintf_internal_r+0xe90>
   175a8:	d8802417 	ldw	r2,144(sp)
   175ac:	dac02017 	ldw	r11,128(sp)
   175b0:	12c0010e 	bge	r2,r11,175b8 <___svfiprintf_internal_r+0xbf8>
   175b4:	5805883a 	mov	r2,r11
   175b8:	dac02517 	ldw	r11,148(sp)
   175bc:	5897883a 	add	r11,r11,r2
   175c0:	dac02515 	stw	r11,148(sp)
   175c4:	1800531e 	bne	r3,zero,17714 <___svfiprintf_internal_r+0xd54>
   175c8:	98800007 	ldb	r2,0(r19)
   175cc:	d8001b15 	stw	zero,108(sp)
   175d0:	d811883a 	mov	r8,sp
   175d4:	103d231e 	bne	r2,zero,16a64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016a64>
   175d8:	9823883a 	mov	r17,r19
   175dc:	003d3906 	br	16ac4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016ac4>
   175e0:	d8801c17 	ldw	r2,112(sp)
   175e4:	10000426 	beq	r2,zero,175f8 <___svfiprintf_internal_r+0xc38>
   175e8:	d9402717 	ldw	r5,156(sp)
   175ec:	d9002a17 	ldw	r4,168(sp)
   175f0:	d9801a04 	addi	r6,sp,104
   175f4:	00167f00 	call	167f0 <__ssprint_r>
   175f8:	dac02717 	ldw	r11,156(sp)
   175fc:	d8802517 	ldw	r2,148(sp)
   17600:	58c0030b 	ldhu	r3,12(r11)
   17604:	18c0100c 	andi	r3,r3,64
   17608:	1801381e 	bne	r3,zero,17aec <___svfiprintf_internal_r+0x112c>
   1760c:	dfc03717 	ldw	ra,220(sp)
   17610:	df003617 	ldw	fp,216(sp)
   17614:	ddc03517 	ldw	r23,212(sp)
   17618:	dd803417 	ldw	r22,208(sp)
   1761c:	dd403317 	ldw	r21,204(sp)
   17620:	dd003217 	ldw	r20,200(sp)
   17624:	dcc03117 	ldw	r19,196(sp)
   17628:	dc803017 	ldw	r18,192(sp)
   1762c:	dc402f17 	ldw	r17,188(sp)
   17630:	dc002e17 	ldw	r16,184(sp)
   17634:	dec03804 	addi	sp,sp,224
   17638:	f800283a 	ret
   1763c:	dac02417 	ldw	r11,144(sp)
   17640:	d9002017 	ldw	r4,128(sp)
   17644:	5939c83a 	sub	fp,r11,r4
   17648:	073f780e 	bge	zero,fp,1742c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701742c>
   1764c:	02400404 	movi	r9,16
   17650:	4f01370e 	bge	r9,fp,17b30 <___svfiprintf_internal_r+0x1170>
   17654:	02c000f4 	movhi	r11,3
   17658:	5ae12304 	addi	r11,r11,-31604
   1765c:	dac02215 	stw	r11,136(sp)
   17660:	028001c4 	movi	r10,7
   17664:	00000306 	br	17674 <___svfiprintf_internal_r+0xcb4>
   17668:	e73ffc04 	addi	fp,fp,-16
   1766c:	42000204 	addi	r8,r8,8
   17670:	4f00150e 	bge	r9,fp,176c8 <___svfiprintf_internal_r+0xd08>
   17674:	18c00404 	addi	r3,r3,16
   17678:	10800044 	addi	r2,r2,1
   1767c:	45000015 	stw	r20,0(r8)
   17680:	42400115 	stw	r9,4(r8)
   17684:	d8c01c15 	stw	r3,112(sp)
   17688:	d8801b15 	stw	r2,108(sp)
   1768c:	50bff60e 	bge	r10,r2,17668 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017668>
   17690:	d9801a04 	addi	r6,sp,104
   17694:	b80b883a 	mov	r5,r23
   17698:	a809883a 	mov	r4,r21
   1769c:	da402c15 	stw	r9,176(sp)
   176a0:	da802d15 	stw	r10,180(sp)
   176a4:	00167f00 	call	167f0 <__ssprint_r>
   176a8:	da402c17 	ldw	r9,176(sp)
   176ac:	da802d17 	ldw	r10,180(sp)
   176b0:	103fd11e 	bne	r2,zero,175f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70175f8>
   176b4:	e73ffc04 	addi	fp,fp,-16
   176b8:	d8c01c17 	ldw	r3,112(sp)
   176bc:	d8801b17 	ldw	r2,108(sp)
   176c0:	d811883a 	mov	r8,sp
   176c4:	4f3feb16 	blt	r9,fp,17674 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017674>
   176c8:	dac02217 	ldw	r11,136(sp)
   176cc:	1f07883a 	add	r3,r3,fp
   176d0:	10800044 	addi	r2,r2,1
   176d4:	42c00015 	stw	r11,0(r8)
   176d8:	47000115 	stw	fp,4(r8)
   176dc:	d8c01c15 	stw	r3,112(sp)
   176e0:	d8801b15 	stw	r2,108(sp)
   176e4:	010001c4 	movi	r4,7
   176e8:	2080b616 	blt	r4,r2,179c4 <___svfiprintf_internal_r+0x1004>
   176ec:	42000204 	addi	r8,r8,8
   176f0:	003f4e06 	br	1742c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701742c>
   176f4:	d9801a04 	addi	r6,sp,104
   176f8:	b80b883a 	mov	r5,r23
   176fc:	a809883a 	mov	r4,r21
   17700:	00167f00 	call	167f0 <__ssprint_r>
   17704:	103fbc1e 	bne	r2,zero,175f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70175f8>
   17708:	d8c01c17 	ldw	r3,112(sp)
   1770c:	d811883a 	mov	r8,sp
   17710:	003f7a06 	br	174fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70174fc>
   17714:	d9801a04 	addi	r6,sp,104
   17718:	b80b883a 	mov	r5,r23
   1771c:	a809883a 	mov	r4,r21
   17720:	00167f00 	call	167f0 <__ssprint_r>
   17724:	103fa826 	beq	r2,zero,175c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70175c8>
   17728:	003fb306 	br	175f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70175f8>
   1772c:	d9801a04 	addi	r6,sp,104
   17730:	b80b883a 	mov	r5,r23
   17734:	a809883a 	mov	r4,r21
   17738:	00167f00 	call	167f0 <__ssprint_r>
   1773c:	103fae1e 	bne	r2,zero,175f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70175f8>
   17740:	d811883a 	mov	r8,sp
   17744:	003cdc06 	br	16ab8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016ab8>
   17748:	d9801a04 	addi	r6,sp,104
   1774c:	b80b883a 	mov	r5,r23
   17750:	a809883a 	mov	r4,r21
   17754:	00167f00 	call	167f0 <__ssprint_r>
   17758:	103fa71e 	bne	r2,zero,175f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70175f8>
   1775c:	d8c01c17 	ldw	r3,112(sp)
   17760:	d8801b17 	ldw	r2,108(sp)
   17764:	d811883a 	mov	r8,sp
   17768:	003f5a06 	br	174d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70174d4>
   1776c:	d9801a04 	addi	r6,sp,104
   17770:	b80b883a 	mov	r5,r23
   17774:	a809883a 	mov	r4,r21
   17778:	00167f00 	call	167f0 <__ssprint_r>
   1777c:	103f9e1e 	bne	r2,zero,175f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70175f8>
   17780:	d8c01c17 	ldw	r3,112(sp)
   17784:	d8801b17 	ldw	r2,108(sp)
   17788:	d811883a 	mov	r8,sp
   1778c:	003f1706 	br	173ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70173ec>
   17790:	d9801a04 	addi	r6,sp,104
   17794:	b80b883a 	mov	r5,r23
   17798:	a809883a 	mov	r4,r21
   1779c:	00167f00 	call	167f0 <__ssprint_r>
   177a0:	103f951e 	bne	r2,zero,175f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70175f8>
   177a4:	d8c01c17 	ldw	r3,112(sp)
   177a8:	d8801b17 	ldw	r2,108(sp)
   177ac:	d811883a 	mov	r8,sp
   177b0:	003f1b06 	br	17420 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017420>
   177b4:	d8001d85 	stb	zero,118(sp)
   177b8:	80007b16 	blt	r16,zero,179a8 <___svfiprintf_internal_r+0xfe8>
   177bc:	00ffdfc4 	movi	r3,-129
   177c0:	e244b03a 	or	r2,fp,r9
   177c4:	90e4703a 	and	r18,r18,r3
   177c8:	103d7026 	beq	r2,zero,16d8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016d8c>
   177cc:	0015883a 	mov	r10,zero
   177d0:	003d7206 	br	16d9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016d9c>
   177d4:	d9801a04 	addi	r6,sp,104
   177d8:	b80b883a 	mov	r5,r23
   177dc:	a809883a 	mov	r4,r21
   177e0:	00167f00 	call	167f0 <__ssprint_r>
   177e4:	103f841e 	bne	r2,zero,175f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70175f8>
   177e8:	d8c01c17 	ldw	r3,112(sp)
   177ec:	d8801b17 	ldw	r2,108(sp)
   177f0:	d811883a 	mov	r8,sp
   177f4:	003ef006 	br	173b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70173b8>
   177f8:	9080100c 	andi	r2,r18,64
   177fc:	d8001d85 	stb	zero,118(sp)
   17800:	dac02317 	ldw	r11,140(sp)
   17804:	10008126 	beq	r2,zero,17a0c <___svfiprintf_internal_r+0x104c>
   17808:	58800104 	addi	r2,r11,4
   1780c:	5f00000b 	ldhu	fp,0(r11)
   17810:	0013883a 	mov	r9,zero
   17814:	803ec30e 	bge	r16,zero,17324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017324>
   17818:	d8802315 	stw	r2,140(sp)
   1781c:	0015883a 	mov	r10,zero
   17820:	e244b03a 	or	r2,fp,r9
   17824:	103e371e 	bne	r2,zero,17104 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017104>
   17828:	00800044 	movi	r2,1
   1782c:	10803fcc 	andi	r2,r2,255
   17830:	00c00044 	movi	r3,1
   17834:	10c06126 	beq	r2,r3,179bc <___svfiprintf_internal_r+0xffc>
   17838:	00c00084 	movi	r3,2
   1783c:	10fd5526 	beq	r2,r3,16d94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016d94>
   17840:	003ed806 	br	173a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70173a4>
   17844:	d8802315 	stw	r2,140(sp)
   17848:	98c00007 	ldb	r3,0(r19)
   1784c:	003cab06 	br	16afc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016afc>
   17850:	d9801a04 	addi	r6,sp,104
   17854:	b80b883a 	mov	r5,r23
   17858:	a809883a 	mov	r4,r21
   1785c:	00167f00 	call	167f0 <__ssprint_r>
   17860:	103f651e 	bne	r2,zero,175f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70175f8>
   17864:	d8c01c17 	ldw	r3,112(sp)
   17868:	003f4f06 	br	175a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70175a8>
   1786c:	008000f4 	movhi	r2,3
   17870:	10a0bb04 	addi	r2,r2,-32020
   17874:	d8802915 	stw	r2,164(sp)
   17878:	003d4406 	br	16d8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016d8c>
   1787c:	dac02317 	ldw	r11,140(sp)
   17880:	58800017 	ldw	r2,0(r11)
   17884:	dac02517 	ldw	r11,148(sp)
   17888:	5807d7fa 	srai	r3,r11,31
   1788c:	dac02317 	ldw	r11,140(sp)
   17890:	10c00115 	stw	r3,4(r2)
   17894:	5ac00104 	addi	r11,r11,4
   17898:	dac02315 	stw	r11,140(sp)
   1789c:	dac02517 	ldw	r11,148(sp)
   178a0:	12c00015 	stw	r11,0(r2)
   178a4:	003c6d06 	br	16a5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016a5c>
   178a8:	9080100c 	andi	r2,r18,64
   178ac:	dac02317 	ldw	r11,140(sp)
   178b0:	103e5326 	beq	r2,zero,17200 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017200>
   178b4:	5f00000f 	ldh	fp,0(r11)
   178b8:	5ac00104 	addi	r11,r11,4
   178bc:	dac02315 	stw	r11,140(sp)
   178c0:	e013d7fa 	srai	r9,fp,31
   178c4:	4805883a 	mov	r2,r9
   178c8:	003e0706 	br	170e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70170e8>
   178cc:	00800c04 	movi	r2,48
   178d0:	d8801d05 	stb	r2,116(sp)
   178d4:	d8c01d45 	stb	r3,117(sp)
   178d8:	d8001d85 	stb	zero,118(sp)
   178dc:	90800094 	ori	r2,r18,2
   178e0:	80008f16 	blt	r16,zero,17b20 <___svfiprintf_internal_r+0x1160>
   178e4:	00bfdfc4 	movi	r2,-129
   178e8:	90a4703a 	and	r18,r18,r2
   178ec:	94800094 	ori	r18,r18,2
   178f0:	0015883a 	mov	r10,zero
   178f4:	003d2906 	br	16d9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016d9c>
   178f8:	98c00007 	ldb	r3,0(r19)
   178fc:	003c7f06 	br	16afc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016afc>
   17900:	dac02317 	ldw	r11,140(sp)
   17904:	0013883a 	mov	r9,zero
   17908:	5f000017 	ldw	fp,0(r11)
   1790c:	5ac00104 	addi	r11,r11,4
   17910:	dac02315 	stw	r11,140(sp)
   17914:	003d1506 	br	16d6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016d6c>
   17918:	9080100c 	andi	r2,r18,64
   1791c:	d8001d85 	stb	zero,118(sp)
   17920:	dac02317 	ldw	r11,140(sp)
   17924:	10003426 	beq	r2,zero,179f8 <___svfiprintf_internal_r+0x1038>
   17928:	58800104 	addi	r2,r11,4
   1792c:	5f00000b 	ldhu	fp,0(r11)
   17930:	0013883a 	mov	r9,zero
   17934:	803e950e 	bge	r16,zero,1738c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701738c>
   17938:	e246b03a 	or	r3,fp,r9
   1793c:	d8802315 	stw	r2,140(sp)
   17940:	183d5a1e 	bne	r3,zero,16eac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016eac>
   17944:	0015883a 	mov	r10,zero
   17948:	0005883a 	mov	r2,zero
   1794c:	003fb706 	br	1782c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701782c>
   17950:	98c00043 	ldbu	r3,1(r19)
   17954:	94800814 	ori	r18,r18,32
   17958:	9cc00044 	addi	r19,r19,1
   1795c:	18c03fcc 	andi	r3,r3,255
   17960:	18c0201c 	xori	r3,r3,128
   17964:	18ffe004 	addi	r3,r3,-128
   17968:	003c6406 	br	16afc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016afc>
   1796c:	d8c02315 	stw	r3,140(sp)
   17970:	0015883a 	mov	r10,zero
   17974:	003faa06 	br	17820 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017820>
   17978:	dac02317 	ldw	r11,140(sp)
   1797c:	58800017 	ldw	r2,0(r11)
   17980:	5ac00104 	addi	r11,r11,4
   17984:	dac02315 	stw	r11,140(sp)
   17988:	dac02517 	ldw	r11,148(sp)
   1798c:	12c00015 	stw	r11,0(r2)
   17990:	003c3206 	br	16a5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016a5c>
   17994:	010000f4 	movhi	r4,3
   17998:	2120bb04 	addi	r4,r4,-32020
   1799c:	d9002915 	stw	r4,164(sp)
   179a0:	d8c02315 	stw	r3,140(sp)
   179a4:	1025883a 	mov	r18,r2
   179a8:	e244b03a 	or	r2,fp,r9
   179ac:	103f871e 	bne	r2,zero,177cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70177cc>
   179b0:	0015883a 	mov	r10,zero
   179b4:	00800084 	movi	r2,2
   179b8:	003f9c06 	br	1782c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701782c>
   179bc:	0039883a 	mov	fp,zero
   179c0:	003e5f06 	br	17340 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017340>
   179c4:	d9801a04 	addi	r6,sp,104
   179c8:	b80b883a 	mov	r5,r23
   179cc:	a809883a 	mov	r4,r21
   179d0:	00167f00 	call	167f0 <__ssprint_r>
   179d4:	103f081e 	bne	r2,zero,175f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70175f8>
   179d8:	d8c01c17 	ldw	r3,112(sp)
   179dc:	d8801b17 	ldw	r2,108(sp)
   179e0:	d811883a 	mov	r8,sp
   179e4:	003e9106 	br	1742c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701742c>
   179e8:	010000f4 	movhi	r4,3
   179ec:	21212304 	addi	r4,r4,-31604
   179f0:	d9002215 	stw	r4,136(sp)
   179f4:	003ead06 	br	174ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70174ac>
   179f8:	58800104 	addi	r2,r11,4
   179fc:	5f000017 	ldw	fp,0(r11)
   17a00:	0013883a 	mov	r9,zero
   17a04:	803e610e 	bge	r16,zero,1738c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701738c>
   17a08:	003fcb06 	br	17938 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017938>
   17a0c:	58800104 	addi	r2,r11,4
   17a10:	5f000017 	ldw	fp,0(r11)
   17a14:	0013883a 	mov	r9,zero
   17a18:	803e420e 	bge	r16,zero,17324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017324>
   17a1c:	003f7e06 	br	17818 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017818>
   17a20:	5f000017 	ldw	fp,0(r11)
   17a24:	5ac00104 	addi	r11,r11,4
   17a28:	0013883a 	mov	r9,zero
   17a2c:	dac02315 	stw	r11,140(sp)
   17a30:	003cce06 	br	16d6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016d6c>
   17a34:	8809883a 	mov	r4,r17
   17a38:	da002c15 	stw	r8,176(sp)
   17a3c:	000dca00 	call	dca0 <strlen>
   17a40:	d8802115 	stw	r2,132(sp)
   17a44:	da801d83 	ldbu	r10,118(sp)
   17a48:	df002315 	stw	fp,140(sp)
   17a4c:	0021883a 	mov	r16,zero
   17a50:	da002c17 	ldw	r8,176(sp)
   17a54:	003cf606 	br	16e30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016e30>
   17a58:	00800184 	movi	r2,6
   17a5c:	1400012e 	bgeu	r2,r16,17a64 <___svfiprintf_internal_r+0x10a4>
   17a60:	1021883a 	mov	r16,r2
   17a64:	dc002115 	stw	r16,132(sp)
   17a68:	8005883a 	mov	r2,r16
   17a6c:	80003c16 	blt	r16,zero,17b60 <___svfiprintf_internal_r+0x11a0>
   17a70:	044000f4 	movhi	r17,3
   17a74:	d8802015 	stw	r2,128(sp)
   17a78:	df002315 	stw	fp,140(sp)
   17a7c:	8c60c004 	addi	r17,r17,-32000
   17a80:	003d2e06 	br	16f3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016f3c>
   17a84:	04001004 	movi	r16,64
   17a88:	800b883a 	mov	r5,r16
   17a8c:	000cb740 	call	cb74 <_malloc_r>
   17a90:	dac02717 	ldw	r11,156(sp)
   17a94:	58800015 	stw	r2,0(r11)
   17a98:	58800415 	stw	r2,16(r11)
   17a9c:	10004826 	beq	r2,zero,17bc0 <___svfiprintf_internal_r+0x1200>
   17aa0:	dac02717 	ldw	r11,156(sp)
   17aa4:	5c000515 	stw	r16,20(r11)
   17aa8:	003bd906 	br	16a10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016a10>
   17aac:	9080004c 	andi	r2,r18,1
   17ab0:	0015883a 	mov	r10,zero
   17ab4:	10000626 	beq	r2,zero,17ad0 <___svfiprintf_internal_r+0x1110>
   17ab8:	dac02b17 	ldw	r11,172(sp)
   17abc:	00800c04 	movi	r2,48
   17ac0:	d88019c5 	stb	r2,103(sp)
   17ac4:	dac02115 	stw	r11,132(sp)
   17ac8:	dc4019c4 	addi	r17,sp,103
   17acc:	003cd806 	br	16e30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016e30>
   17ad0:	d8002115 	stw	zero,132(sp)
   17ad4:	dc401a04 	addi	r17,sp,104
   17ad8:	003cd506 	br	16e30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016e30>
   17adc:	010000f4 	movhi	r4,3
   17ae0:	21212704 	addi	r4,r4,-31588
   17ae4:	d9002815 	stw	r4,160(sp)
   17ae8:	003d4306 	br	16ff8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016ff8>
   17aec:	00bfffc4 	movi	r2,-1
   17af0:	003ec606 	br	1760c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701760c>
   17af4:	00800044 	movi	r2,1
   17af8:	10803fcc 	andi	r2,r2,255
   17afc:	00c00044 	movi	r3,1
   17b00:	10fd8026 	beq	r2,r3,17104 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017104>
   17b04:	00c00084 	movi	r3,2
   17b08:	10fca426 	beq	r2,r3,16d9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016d9c>
   17b0c:	003ce806 	br	16eb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016eb0>
   17b10:	010000f4 	movhi	r4,3
   17b14:	21212704 	addi	r4,r4,-31588
   17b18:	d9002815 	stw	r4,160(sp)
   17b1c:	003e9906 	br	17584 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017584>
   17b20:	1025883a 	mov	r18,r2
   17b24:	0015883a 	mov	r10,zero
   17b28:	00800084 	movi	r2,2
   17b2c:	003ff206 	br	17af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017af8>
   17b30:	014000f4 	movhi	r5,3
   17b34:	29612304 	addi	r5,r5,-31604
   17b38:	d9402215 	stw	r5,136(sp)
   17b3c:	003ee206 	br	176c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70176c8>
   17b40:	5827883a 	mov	r19,r11
   17b44:	0021883a 	mov	r16,zero
   17b48:	003bed06 	br	16b00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016b00>
   17b4c:	dc002115 	stw	r16,132(sp)
   17b50:	da801d83 	ldbu	r10,118(sp)
   17b54:	df002315 	stw	fp,140(sp)
   17b58:	0021883a 	mov	r16,zero
   17b5c:	003cb406 	br	16e30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016e30>
   17b60:	0005883a 	mov	r2,zero
   17b64:	003fc206 	br	17a70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017a70>
   17b68:	d8802317 	ldw	r2,140(sp)
   17b6c:	98c00043 	ldbu	r3,1(r19)
   17b70:	5827883a 	mov	r19,r11
   17b74:	14000017 	ldw	r16,0(r2)
   17b78:	10800104 	addi	r2,r2,4
   17b7c:	d8802315 	stw	r2,140(sp)
   17b80:	803f760e 	bge	r16,zero,1795c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701795c>
   17b84:	18c03fcc 	andi	r3,r3,255
   17b88:	18c0201c 	xori	r3,r3,128
   17b8c:	043fffc4 	movi	r16,-1
   17b90:	18ffe004 	addi	r3,r3,-128
   17b94:	003bd906 	br	16afc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016afc>
   17b98:	d9c01d85 	stb	r7,118(sp)
   17b9c:	003cb606 	br	16e78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016e78>
   17ba0:	d9c01d85 	stb	r7,118(sp)
   17ba4:	003d2106 	br	1702c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701702c>
   17ba8:	d9c01d85 	stb	r7,118(sp)
   17bac:	003d8e06 	br	171e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70171e8>
   17bb0:	d9c01d85 	stb	r7,118(sp)
   17bb4:	003db306 	br	17284 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017284>
   17bb8:	d9c01d85 	stb	r7,118(sp)
   17bbc:	003c8a06 	br	16de8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016de8>
   17bc0:	dac02a17 	ldw	r11,168(sp)
   17bc4:	00800304 	movi	r2,12
   17bc8:	58800015 	stw	r2,0(r11)
   17bcc:	00bfffc4 	movi	r2,-1
   17bd0:	003e8e06 	br	1760c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701760c>
   17bd4:	d9c01d85 	stb	r7,118(sp)
   17bd8:	003dc706 	br	172f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70172f8>
   17bdc:	d9c01d85 	stb	r7,118(sp)
   17be0:	003ddf06 	br	17360 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017360>
   17be4:	d9c01d85 	stb	r7,118(sp)
   17be8:	003d3706 	br	170c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70170c8>
   17bec:	d9c01d85 	stb	r7,118(sp)
   17bf0:	003c5406 	br	16d44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016d44>
   17bf4:	d9c01d85 	stb	r7,118(sp)
   17bf8:	003d1d06 	br	17070 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017070>

00017bfc <__sprint_r.part.0>:
   17bfc:	28801917 	ldw	r2,100(r5)
   17c00:	defff604 	addi	sp,sp,-40
   17c04:	dd400515 	stw	r21,20(sp)
   17c08:	dfc00915 	stw	ra,36(sp)
   17c0c:	df000815 	stw	fp,32(sp)
   17c10:	ddc00715 	stw	r23,28(sp)
   17c14:	dd800615 	stw	r22,24(sp)
   17c18:	dd000415 	stw	r20,16(sp)
   17c1c:	dcc00315 	stw	r19,12(sp)
   17c20:	dc800215 	stw	r18,8(sp)
   17c24:	dc400115 	stw	r17,4(sp)
   17c28:	dc000015 	stw	r16,0(sp)
   17c2c:	1088000c 	andi	r2,r2,8192
   17c30:	302b883a 	mov	r21,r6
   17c34:	10002e26 	beq	r2,zero,17cf0 <__sprint_r.part.0+0xf4>
   17c38:	30800217 	ldw	r2,8(r6)
   17c3c:	35800017 	ldw	r22,0(r6)
   17c40:	10002926 	beq	r2,zero,17ce8 <__sprint_r.part.0+0xec>
   17c44:	2827883a 	mov	r19,r5
   17c48:	2029883a 	mov	r20,r4
   17c4c:	b5c00104 	addi	r23,r22,4
   17c50:	04bfffc4 	movi	r18,-1
   17c54:	bc400017 	ldw	r17,0(r23)
   17c58:	b4000017 	ldw	r16,0(r22)
   17c5c:	0039883a 	mov	fp,zero
   17c60:	8822d0ba 	srli	r17,r17,2
   17c64:	8800031e 	bne	r17,zero,17c74 <__sprint_r.part.0+0x78>
   17c68:	00001806 	br	17ccc <__sprint_r.part.0+0xd0>
   17c6c:	84000104 	addi	r16,r16,4
   17c70:	8f001526 	beq	r17,fp,17cc8 <__sprint_r.part.0+0xcc>
   17c74:	81400017 	ldw	r5,0(r16)
   17c78:	980d883a 	mov	r6,r19
   17c7c:	a009883a 	mov	r4,r20
   17c80:	00196240 	call	19624 <_fputwc_r>
   17c84:	e7000044 	addi	fp,fp,1
   17c88:	14bff81e 	bne	r2,r18,17c6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017c6c>
   17c8c:	9005883a 	mov	r2,r18
   17c90:	a8000215 	stw	zero,8(r21)
   17c94:	a8000115 	stw	zero,4(r21)
   17c98:	dfc00917 	ldw	ra,36(sp)
   17c9c:	df000817 	ldw	fp,32(sp)
   17ca0:	ddc00717 	ldw	r23,28(sp)
   17ca4:	dd800617 	ldw	r22,24(sp)
   17ca8:	dd400517 	ldw	r21,20(sp)
   17cac:	dd000417 	ldw	r20,16(sp)
   17cb0:	dcc00317 	ldw	r19,12(sp)
   17cb4:	dc800217 	ldw	r18,8(sp)
   17cb8:	dc400117 	ldw	r17,4(sp)
   17cbc:	dc000017 	ldw	r16,0(sp)
   17cc0:	dec00a04 	addi	sp,sp,40
   17cc4:	f800283a 	ret
   17cc8:	a8800217 	ldw	r2,8(r21)
   17ccc:	8c63883a 	add	r17,r17,r17
   17cd0:	8c63883a 	add	r17,r17,r17
   17cd4:	1445c83a 	sub	r2,r2,r17
   17cd8:	a8800215 	stw	r2,8(r21)
   17cdc:	b5800204 	addi	r22,r22,8
   17ce0:	bdc00204 	addi	r23,r23,8
   17ce4:	103fdb1e 	bne	r2,zero,17c54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017c54>
   17ce8:	0005883a 	mov	r2,zero
   17cec:	003fe806 	br	17c90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017c90>
   17cf0:	00146380 	call	14638 <__sfvwrite_r>
   17cf4:	003fe606 	br	17c90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017c90>

00017cf8 <__sprint_r>:
   17cf8:	30c00217 	ldw	r3,8(r6)
   17cfc:	18000126 	beq	r3,zero,17d04 <__sprint_r+0xc>
   17d00:	0017bfc1 	jmpi	17bfc <__sprint_r.part.0>
   17d04:	30000115 	stw	zero,4(r6)
   17d08:	0005883a 	mov	r2,zero
   17d0c:	f800283a 	ret

00017d10 <___vfiprintf_internal_r>:
   17d10:	deffc904 	addi	sp,sp,-220
   17d14:	df003515 	stw	fp,212(sp)
   17d18:	dd003115 	stw	r20,196(sp)
   17d1c:	dfc03615 	stw	ra,216(sp)
   17d20:	ddc03415 	stw	r23,208(sp)
   17d24:	dd803315 	stw	r22,204(sp)
   17d28:	dd403215 	stw	r21,200(sp)
   17d2c:	dcc03015 	stw	r19,192(sp)
   17d30:	dc802f15 	stw	r18,188(sp)
   17d34:	dc402e15 	stw	r17,184(sp)
   17d38:	dc002d15 	stw	r16,180(sp)
   17d3c:	d9002015 	stw	r4,128(sp)
   17d40:	d9c02215 	stw	r7,136(sp)
   17d44:	2829883a 	mov	r20,r5
   17d48:	3039883a 	mov	fp,r6
   17d4c:	20000226 	beq	r4,zero,17d58 <___vfiprintf_internal_r+0x48>
   17d50:	20800e17 	ldw	r2,56(r4)
   17d54:	1000cf26 	beq	r2,zero,18094 <___vfiprintf_internal_r+0x384>
   17d58:	a080030b 	ldhu	r2,12(r20)
   17d5c:	10c8000c 	andi	r3,r2,8192
   17d60:	1800061e 	bne	r3,zero,17d7c <___vfiprintf_internal_r+0x6c>
   17d64:	a1001917 	ldw	r4,100(r20)
   17d68:	00f7ffc4 	movi	r3,-8193
   17d6c:	10880014 	ori	r2,r2,8192
   17d70:	20c6703a 	and	r3,r4,r3
   17d74:	a080030d 	sth	r2,12(r20)
   17d78:	a0c01915 	stw	r3,100(r20)
   17d7c:	10c0020c 	andi	r3,r2,8
   17d80:	1800a926 	beq	r3,zero,18028 <___vfiprintf_internal_r+0x318>
   17d84:	a0c00417 	ldw	r3,16(r20)
   17d88:	1800a726 	beq	r3,zero,18028 <___vfiprintf_internal_r+0x318>
   17d8c:	1080068c 	andi	r2,r2,26
   17d90:	00c00284 	movi	r3,10
   17d94:	10c0ac26 	beq	r2,r3,18048 <___vfiprintf_internal_r+0x338>
   17d98:	da801a04 	addi	r10,sp,104
   17d9c:	da801e15 	stw	r10,120(sp)
   17da0:	d8801e17 	ldw	r2,120(sp)
   17da4:	da8019c4 	addi	r10,sp,103
   17da8:	058000f4 	movhi	r22,3
   17dac:	05c000f4 	movhi	r23,3
   17db0:	da801f15 	stw	r10,124(sp)
   17db4:	1295c83a 	sub	r10,r2,r10
   17db8:	b5a12f04 	addi	r22,r22,-31556
   17dbc:	bde12b04 	addi	r23,r23,-31572
   17dc0:	dec01a15 	stw	sp,104(sp)
   17dc4:	d8001c15 	stw	zero,112(sp)
   17dc8:	d8001b15 	stw	zero,108(sp)
   17dcc:	d8002615 	stw	zero,152(sp)
   17dd0:	d8002315 	stw	zero,140(sp)
   17dd4:	da802715 	stw	r10,156(sp)
   17dd8:	d811883a 	mov	r8,sp
   17ddc:	dd002115 	stw	r20,132(sp)
   17de0:	e021883a 	mov	r16,fp
   17de4:	80800007 	ldb	r2,0(r16)
   17de8:	1003ea26 	beq	r2,zero,18d94 <___vfiprintf_internal_r+0x1084>
   17dec:	00c00944 	movi	r3,37
   17df0:	8025883a 	mov	r18,r16
   17df4:	10c0021e 	bne	r2,r3,17e00 <___vfiprintf_internal_r+0xf0>
   17df8:	00001606 	br	17e54 <___vfiprintf_internal_r+0x144>
   17dfc:	10c00326 	beq	r2,r3,17e0c <___vfiprintf_internal_r+0xfc>
   17e00:	94800044 	addi	r18,r18,1
   17e04:	90800007 	ldb	r2,0(r18)
   17e08:	103ffc1e 	bne	r2,zero,17dfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017dfc>
   17e0c:	9423c83a 	sub	r17,r18,r16
   17e10:	88001026 	beq	r17,zero,17e54 <___vfiprintf_internal_r+0x144>
   17e14:	d8c01c17 	ldw	r3,112(sp)
   17e18:	d8801b17 	ldw	r2,108(sp)
   17e1c:	44000015 	stw	r16,0(r8)
   17e20:	88c7883a 	add	r3,r17,r3
   17e24:	10800044 	addi	r2,r2,1
   17e28:	44400115 	stw	r17,4(r8)
   17e2c:	d8c01c15 	stw	r3,112(sp)
   17e30:	d8801b15 	stw	r2,108(sp)
   17e34:	010001c4 	movi	r4,7
   17e38:	2080760e 	bge	r4,r2,18014 <___vfiprintf_internal_r+0x304>
   17e3c:	1803821e 	bne	r3,zero,18c48 <___vfiprintf_internal_r+0xf38>
   17e40:	da802317 	ldw	r10,140(sp)
   17e44:	d8001b15 	stw	zero,108(sp)
   17e48:	d811883a 	mov	r8,sp
   17e4c:	5455883a 	add	r10,r10,r17
   17e50:	da802315 	stw	r10,140(sp)
   17e54:	90800007 	ldb	r2,0(r18)
   17e58:	10044626 	beq	r2,zero,18f74 <___vfiprintf_internal_r+0x1264>
   17e5c:	90c00047 	ldb	r3,1(r18)
   17e60:	94000044 	addi	r16,r18,1
   17e64:	d8001d85 	stb	zero,118(sp)
   17e68:	0009883a 	mov	r4,zero
   17e6c:	000f883a 	mov	r7,zero
   17e70:	027fffc4 	movi	r9,-1
   17e74:	0023883a 	mov	r17,zero
   17e78:	0029883a 	mov	r20,zero
   17e7c:	01401604 	movi	r5,88
   17e80:	01800244 	movi	r6,9
   17e84:	03400a84 	movi	r13,42
   17e88:	03001b04 	movi	r12,108
   17e8c:	84000044 	addi	r16,r16,1
   17e90:	18bff804 	addi	r2,r3,-32
   17e94:	28827336 	bltu	r5,r2,18864 <___vfiprintf_internal_r+0xb54>
   17e98:	100490ba 	slli	r2,r2,2
   17e9c:	02800074 	movhi	r10,1
   17ea0:	529fac04 	addi	r10,r10,32432
   17ea4:	1285883a 	add	r2,r2,r10
   17ea8:	10800017 	ldw	r2,0(r2)
   17eac:	1000683a 	jmp	r2
   17eb0:	00018598 	cmpnei	zero,zero,1558
   17eb4:	00018864 	muli	zero,zero,1569
   17eb8:	00018864 	muli	zero,zero,1569
   17ebc:	000185b8 	rdprs	zero,zero,1558
   17ec0:	00018864 	muli	zero,zero,1569
   17ec4:	00018864 	muli	zero,zero,1569
   17ec8:	00018864 	muli	zero,zero,1569
   17ecc:	00018864 	muli	zero,zero,1569
   17ed0:	00018864 	muli	zero,zero,1569
   17ed4:	00018864 	muli	zero,zero,1569
   17ed8:	000187a0 	cmpeqi	zero,zero,1566
   17edc:	000187bc 	xorhi	zero,zero,1566
   17ee0:	00018864 	muli	zero,zero,1569
   17ee4:	000180a4 	muli	zero,zero,1538
   17ee8:	000187cc 	andi	zero,zero,1567
   17eec:	00018864 	muli	zero,zero,1569
   17ef0:	000185c4 	movi	zero,1559
   17ef4:	000185d0 	cmplti	zero,zero,1559
   17ef8:	000185d0 	cmplti	zero,zero,1559
   17efc:	000185d0 	cmplti	zero,zero,1559
   17f00:	000185d0 	cmplti	zero,zero,1559
   17f04:	000185d0 	cmplti	zero,zero,1559
   17f08:	000185d0 	cmplti	zero,zero,1559
   17f0c:	000185d0 	cmplti	zero,zero,1559
   17f10:	000185d0 	cmplti	zero,zero,1559
   17f14:	000185d0 	cmplti	zero,zero,1559
   17f18:	00018864 	muli	zero,zero,1569
   17f1c:	00018864 	muli	zero,zero,1569
   17f20:	00018864 	muli	zero,zero,1569
   17f24:	00018864 	muli	zero,zero,1569
   17f28:	00018864 	muli	zero,zero,1569
   17f2c:	00018864 	muli	zero,zero,1569
   17f30:	00018864 	muli	zero,zero,1569
   17f34:	00018864 	muli	zero,zero,1569
   17f38:	00018864 	muli	zero,zero,1569
   17f3c:	00018864 	muli	zero,zero,1569
   17f40:	000185fc 	xorhi	zero,zero,1559
   17f44:	00018864 	muli	zero,zero,1569
   17f48:	00018864 	muli	zero,zero,1569
   17f4c:	00018864 	muli	zero,zero,1569
   17f50:	00018864 	muli	zero,zero,1569
   17f54:	00018864 	muli	zero,zero,1569
   17f58:	00018864 	muli	zero,zero,1569
   17f5c:	00018864 	muli	zero,zero,1569
   17f60:	00018864 	muli	zero,zero,1569
   17f64:	00018864 	muli	zero,zero,1569
   17f68:	00018864 	muli	zero,zero,1569
   17f6c:	00018634 	movhi	zero,1560
   17f70:	00018864 	muli	zero,zero,1569
   17f74:	00018864 	muli	zero,zero,1569
   17f78:	00018864 	muli	zero,zero,1569
   17f7c:	00018864 	muli	zero,zero,1569
   17f80:	00018864 	muli	zero,zero,1569
   17f84:	0001868c 	andi	zero,zero,1562
   17f88:	00018864 	muli	zero,zero,1569
   17f8c:	00018864 	muli	zero,zero,1569
   17f90:	000186fc 	xorhi	zero,zero,1563
   17f94:	00018864 	muli	zero,zero,1569
   17f98:	00018864 	muli	zero,zero,1569
   17f9c:	00018864 	muli	zero,zero,1569
   17fa0:	00018864 	muli	zero,zero,1569
   17fa4:	00018864 	muli	zero,zero,1569
   17fa8:	00018864 	muli	zero,zero,1569
   17fac:	00018864 	muli	zero,zero,1569
   17fb0:	00018864 	muli	zero,zero,1569
   17fb4:	00018864 	muli	zero,zero,1569
   17fb8:	00018864 	muli	zero,zero,1569
   17fbc:	000184a8 	cmpgeui	zero,zero,1554
   17fc0:	000184d4 	movui	zero,1555
   17fc4:	00018864 	muli	zero,zero,1569
   17fc8:	00018864 	muli	zero,zero,1569
   17fcc:	00018864 	muli	zero,zero,1569
   17fd0:	0001880c 	andi	zero,zero,1568
   17fd4:	000184d4 	movui	zero,1555
   17fd8:	00018864 	muli	zero,zero,1569
   17fdc:	00018864 	muli	zero,zero,1569
   17fe0:	00018368 	cmpgeui	zero,zero,1549
   17fe4:	00018864 	muli	zero,zero,1569
   17fe8:	00018378 	rdprs	zero,zero,1549
   17fec:	000183b4 	movhi	zero,1550
   17ff0:	000180b0 	cmpltui	zero,zero,1538
   17ff4:	0001835c 	xori	zero,zero,1549
   17ff8:	00018864 	muli	zero,zero,1569
   17ffc:	00018738 	rdprs	zero,zero,1564
   18000:	00018864 	muli	zero,zero,1569
   18004:	00018790 	cmplti	zero,zero,1566
   18008:	00018864 	muli	zero,zero,1569
   1800c:	00018864 	muli	zero,zero,1569
   18010:	00018454 	movui	zero,1553
   18014:	42000204 	addi	r8,r8,8
   18018:	da802317 	ldw	r10,140(sp)
   1801c:	5455883a 	add	r10,r10,r17
   18020:	da802315 	stw	r10,140(sp)
   18024:	003f8b06 	br	17e54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017e54>
   18028:	d9002017 	ldw	r4,128(sp)
   1802c:	a00b883a 	mov	r5,r20
   18030:	00121e00 	call	121e0 <__swsetup_r>
   18034:	1003b11e 	bne	r2,zero,18efc <___vfiprintf_internal_r+0x11ec>
   18038:	a080030b 	ldhu	r2,12(r20)
   1803c:	00c00284 	movi	r3,10
   18040:	1080068c 	andi	r2,r2,26
   18044:	10ff541e 	bne	r2,r3,17d98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017d98>
   18048:	a080038f 	ldh	r2,14(r20)
   1804c:	103f5216 	blt	r2,zero,17d98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017d98>
   18050:	d9c02217 	ldw	r7,136(sp)
   18054:	d9002017 	ldw	r4,128(sp)
   18058:	e00d883a 	mov	r6,fp
   1805c:	a00b883a 	mov	r5,r20
   18060:	00191880 	call	19188 <__sbprintf>
   18064:	dfc03617 	ldw	ra,216(sp)
   18068:	df003517 	ldw	fp,212(sp)
   1806c:	ddc03417 	ldw	r23,208(sp)
   18070:	dd803317 	ldw	r22,204(sp)
   18074:	dd403217 	ldw	r21,200(sp)
   18078:	dd003117 	ldw	r20,196(sp)
   1807c:	dcc03017 	ldw	r19,192(sp)
   18080:	dc802f17 	ldw	r18,188(sp)
   18084:	dc402e17 	ldw	r17,184(sp)
   18088:	dc002d17 	ldw	r16,180(sp)
   1808c:	dec03704 	addi	sp,sp,220
   18090:	f800283a 	ret
   18094:	00141b40 	call	141b4 <__sinit>
   18098:	003f2f06 	br	17d58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017d58>
   1809c:	0463c83a 	sub	r17,zero,r17
   180a0:	d8802215 	stw	r2,136(sp)
   180a4:	a5000114 	ori	r20,r20,4
   180a8:	80c00007 	ldb	r3,0(r16)
   180ac:	003f7706 	br	17e8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017e8c>
   180b0:	00800c04 	movi	r2,48
   180b4:	da802217 	ldw	r10,136(sp)
   180b8:	d8801d05 	stb	r2,116(sp)
   180bc:	00801e04 	movi	r2,120
   180c0:	d8801d45 	stb	r2,117(sp)
   180c4:	d8001d85 	stb	zero,118(sp)
   180c8:	50c00104 	addi	r3,r10,4
   180cc:	54800017 	ldw	r18,0(r10)
   180d0:	0027883a 	mov	r19,zero
   180d4:	a0800094 	ori	r2,r20,2
   180d8:	48030b16 	blt	r9,zero,18d08 <___vfiprintf_internal_r+0xff8>
   180dc:	00bfdfc4 	movi	r2,-129
   180e0:	a096703a 	and	r11,r20,r2
   180e4:	d8c02215 	stw	r3,136(sp)
   180e8:	5d000094 	ori	r20,r11,2
   180ec:	90032b1e 	bne	r18,zero,18d9c <___vfiprintf_internal_r+0x108c>
   180f0:	008000f4 	movhi	r2,3
   180f4:	10a0bb04 	addi	r2,r2,-32020
   180f8:	d8802615 	stw	r2,152(sp)
   180fc:	0039883a 	mov	fp,zero
   18100:	48017b1e 	bne	r9,zero,186f0 <___vfiprintf_internal_r+0x9e0>
   18104:	0013883a 	mov	r9,zero
   18108:	0027883a 	mov	r19,zero
   1810c:	dd401a04 	addi	r21,sp,104
   18110:	4825883a 	mov	r18,r9
   18114:	4cc0010e 	bge	r9,r19,1811c <___vfiprintf_internal_r+0x40c>
   18118:	9825883a 	mov	r18,r19
   1811c:	e7003fcc 	andi	fp,fp,255
   18120:	e700201c 	xori	fp,fp,128
   18124:	e73fe004 	addi	fp,fp,-128
   18128:	e0000126 	beq	fp,zero,18130 <___vfiprintf_internal_r+0x420>
   1812c:	94800044 	addi	r18,r18,1
   18130:	a380008c 	andi	r14,r20,2
   18134:	70000126 	beq	r14,zero,1813c <___vfiprintf_internal_r+0x42c>
   18138:	94800084 	addi	r18,r18,2
   1813c:	a700210c 	andi	fp,r20,132
   18140:	e001df1e 	bne	fp,zero,188c0 <___vfiprintf_internal_r+0xbb0>
   18144:	8c87c83a 	sub	r3,r17,r18
   18148:	00c1dd0e 	bge	zero,r3,188c0 <___vfiprintf_internal_r+0xbb0>
   1814c:	01c00404 	movi	r7,16
   18150:	d8801c17 	ldw	r2,112(sp)
   18154:	38c3ad0e 	bge	r7,r3,1900c <___vfiprintf_internal_r+0x12fc>
   18158:	028000f4 	movhi	r10,3
   1815c:	52a12f04 	addi	r10,r10,-31556
   18160:	dc002915 	stw	r16,164(sp)
   18164:	d9801b17 	ldw	r6,108(sp)
   18168:	da802415 	stw	r10,144(sp)
   1816c:	03c001c4 	movi	r15,7
   18170:	da402515 	stw	r9,148(sp)
   18174:	db802815 	stw	r14,160(sp)
   18178:	1821883a 	mov	r16,r3
   1817c:	00000506 	br	18194 <___vfiprintf_internal_r+0x484>
   18180:	31400084 	addi	r5,r6,2
   18184:	42000204 	addi	r8,r8,8
   18188:	200d883a 	mov	r6,r4
   1818c:	843ffc04 	addi	r16,r16,-16
   18190:	3c000d0e 	bge	r7,r16,181c8 <___vfiprintf_internal_r+0x4b8>
   18194:	10800404 	addi	r2,r2,16
   18198:	31000044 	addi	r4,r6,1
   1819c:	45800015 	stw	r22,0(r8)
   181a0:	41c00115 	stw	r7,4(r8)
   181a4:	d8801c15 	stw	r2,112(sp)
   181a8:	d9001b15 	stw	r4,108(sp)
   181ac:	793ff40e 	bge	r15,r4,18180 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018180>
   181b0:	1001b51e 	bne	r2,zero,18888 <___vfiprintf_internal_r+0xb78>
   181b4:	843ffc04 	addi	r16,r16,-16
   181b8:	000d883a 	mov	r6,zero
   181bc:	01400044 	movi	r5,1
   181c0:	d811883a 	mov	r8,sp
   181c4:	3c3ff316 	blt	r7,r16,18194 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018194>
   181c8:	8007883a 	mov	r3,r16
   181cc:	da402517 	ldw	r9,148(sp)
   181d0:	db802817 	ldw	r14,160(sp)
   181d4:	dc002917 	ldw	r16,164(sp)
   181d8:	da802417 	ldw	r10,144(sp)
   181dc:	1885883a 	add	r2,r3,r2
   181e0:	40c00115 	stw	r3,4(r8)
   181e4:	42800015 	stw	r10,0(r8)
   181e8:	d8801c15 	stw	r2,112(sp)
   181ec:	d9401b15 	stw	r5,108(sp)
   181f0:	00c001c4 	movi	r3,7
   181f4:	19426016 	blt	r3,r5,18b78 <___vfiprintf_internal_r+0xe68>
   181f8:	d8c01d87 	ldb	r3,118(sp)
   181fc:	42000204 	addi	r8,r8,8
   18200:	29000044 	addi	r4,r5,1
   18204:	1801b31e 	bne	r3,zero,188d4 <___vfiprintf_internal_r+0xbc4>
   18208:	7001c026 	beq	r14,zero,1890c <___vfiprintf_internal_r+0xbfc>
   1820c:	d8c01d04 	addi	r3,sp,116
   18210:	10800084 	addi	r2,r2,2
   18214:	40c00015 	stw	r3,0(r8)
   18218:	00c00084 	movi	r3,2
   1821c:	40c00115 	stw	r3,4(r8)
   18220:	d8801c15 	stw	r2,112(sp)
   18224:	d9001b15 	stw	r4,108(sp)
   18228:	00c001c4 	movi	r3,7
   1822c:	1902650e 	bge	r3,r4,18bc4 <___vfiprintf_internal_r+0xeb4>
   18230:	10029a1e 	bne	r2,zero,18c9c <___vfiprintf_internal_r+0xf8c>
   18234:	00c02004 	movi	r3,128
   18238:	01000044 	movi	r4,1
   1823c:	000b883a 	mov	r5,zero
   18240:	d811883a 	mov	r8,sp
   18244:	e0c1b31e 	bne	fp,r3,18914 <___vfiprintf_internal_r+0xc04>
   18248:	8cb9c83a 	sub	fp,r17,r18
   1824c:	0701b10e 	bge	zero,fp,18914 <___vfiprintf_internal_r+0xc04>
   18250:	01c00404 	movi	r7,16
   18254:	3f03890e 	bge	r7,fp,1907c <___vfiprintf_internal_r+0x136c>
   18258:	00c000f4 	movhi	r3,3
   1825c:	18e12b04 	addi	r3,r3,-31572
   18260:	d8c02415 	stw	r3,144(sp)
   18264:	8007883a 	mov	r3,r16
   18268:	034001c4 	movi	r13,7
   1826c:	e021883a 	mov	r16,fp
   18270:	da402515 	stw	r9,148(sp)
   18274:	1839883a 	mov	fp,r3
   18278:	00000506 	br	18290 <___vfiprintf_internal_r+0x580>
   1827c:	29800084 	addi	r6,r5,2
   18280:	42000204 	addi	r8,r8,8
   18284:	180b883a 	mov	r5,r3
   18288:	843ffc04 	addi	r16,r16,-16
   1828c:	3c000d0e 	bge	r7,r16,182c4 <___vfiprintf_internal_r+0x5b4>
   18290:	10800404 	addi	r2,r2,16
   18294:	28c00044 	addi	r3,r5,1
   18298:	45c00015 	stw	r23,0(r8)
   1829c:	41c00115 	stw	r7,4(r8)
   182a0:	d8801c15 	stw	r2,112(sp)
   182a4:	d8c01b15 	stw	r3,108(sp)
   182a8:	68fff40e 	bge	r13,r3,1827c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701827c>
   182ac:	1002241e 	bne	r2,zero,18b40 <___vfiprintf_internal_r+0xe30>
   182b0:	843ffc04 	addi	r16,r16,-16
   182b4:	01800044 	movi	r6,1
   182b8:	000b883a 	mov	r5,zero
   182bc:	d811883a 	mov	r8,sp
   182c0:	3c3ff316 	blt	r7,r16,18290 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018290>
   182c4:	da402517 	ldw	r9,148(sp)
   182c8:	e007883a 	mov	r3,fp
   182cc:	8039883a 	mov	fp,r16
   182d0:	1821883a 	mov	r16,r3
   182d4:	d8c02417 	ldw	r3,144(sp)
   182d8:	1705883a 	add	r2,r2,fp
   182dc:	47000115 	stw	fp,4(r8)
   182e0:	40c00015 	stw	r3,0(r8)
   182e4:	d8801c15 	stw	r2,112(sp)
   182e8:	d9801b15 	stw	r6,108(sp)
   182ec:	00c001c4 	movi	r3,7
   182f0:	19827616 	blt	r3,r6,18ccc <___vfiprintf_internal_r+0xfbc>
   182f4:	4cf9c83a 	sub	fp,r9,r19
   182f8:	42000204 	addi	r8,r8,8
   182fc:	31000044 	addi	r4,r6,1
   18300:	300b883a 	mov	r5,r6
   18304:	07018516 	blt	zero,fp,1891c <___vfiprintf_internal_r+0xc0c>
   18308:	9885883a 	add	r2,r19,r2
   1830c:	45400015 	stw	r21,0(r8)
   18310:	44c00115 	stw	r19,4(r8)
   18314:	d8801c15 	stw	r2,112(sp)
   18318:	d9001b15 	stw	r4,108(sp)
   1831c:	00c001c4 	movi	r3,7
   18320:	1901dd0e 	bge	r3,r4,18a98 <___vfiprintf_internal_r+0xd88>
   18324:	1002401e 	bne	r2,zero,18c28 <___vfiprintf_internal_r+0xf18>
   18328:	d8001b15 	stw	zero,108(sp)
   1832c:	a2c0010c 	andi	r11,r20,4
   18330:	58000226 	beq	r11,zero,1833c <___vfiprintf_internal_r+0x62c>
   18334:	8ca7c83a 	sub	r19,r17,r18
   18338:	04c2f216 	blt	zero,r19,18f04 <___vfiprintf_internal_r+0x11f4>
   1833c:	8c80010e 	bge	r17,r18,18344 <___vfiprintf_internal_r+0x634>
   18340:	9023883a 	mov	r17,r18
   18344:	da802317 	ldw	r10,140(sp)
   18348:	5455883a 	add	r10,r10,r17
   1834c:	da802315 	stw	r10,140(sp)
   18350:	d8001b15 	stw	zero,108(sp)
   18354:	d811883a 	mov	r8,sp
   18358:	003ea206 	br	17de4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017de4>
   1835c:	a5000814 	ori	r20,r20,32
   18360:	80c00007 	ldb	r3,0(r16)
   18364:	003ec906 	br	17e8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017e8c>
   18368:	80c00007 	ldb	r3,0(r16)
   1836c:	1b030926 	beq	r3,r12,18f94 <___vfiprintf_internal_r+0x1284>
   18370:	a5000414 	ori	r20,r20,16
   18374:	003ec506 	br	17e8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017e8c>
   18378:	21003fcc 	andi	r4,r4,255
   1837c:	20035e1e 	bne	r4,zero,190f8 <___vfiprintf_internal_r+0x13e8>
   18380:	a080080c 	andi	r2,r20,32
   18384:	1002a526 	beq	r2,zero,18e1c <___vfiprintf_internal_r+0x110c>
   18388:	da802217 	ldw	r10,136(sp)
   1838c:	50800017 	ldw	r2,0(r10)
   18390:	da802317 	ldw	r10,140(sp)
   18394:	5007d7fa 	srai	r3,r10,31
   18398:	da802217 	ldw	r10,136(sp)
   1839c:	10c00115 	stw	r3,4(r2)
   183a0:	52800104 	addi	r10,r10,4
   183a4:	da802215 	stw	r10,136(sp)
   183a8:	da802317 	ldw	r10,140(sp)
   183ac:	12800015 	stw	r10,0(r2)
   183b0:	003e8c06 	br	17de4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017de4>
   183b4:	21003fcc 	andi	r4,r4,255
   183b8:	2003511e 	bne	r4,zero,19100 <___vfiprintf_internal_r+0x13f0>
   183bc:	a080080c 	andi	r2,r20,32
   183c0:	1000a126 	beq	r2,zero,18648 <___vfiprintf_internal_r+0x938>
   183c4:	da802217 	ldw	r10,136(sp)
   183c8:	d8001d85 	stb	zero,118(sp)
   183cc:	50800204 	addi	r2,r10,8
   183d0:	54800017 	ldw	r18,0(r10)
   183d4:	54c00117 	ldw	r19,4(r10)
   183d8:	4802b416 	blt	r9,zero,18eac <___vfiprintf_internal_r+0x119c>
   183dc:	013fdfc4 	movi	r4,-129
   183e0:	94c6b03a 	or	r3,r18,r19
   183e4:	d8802215 	stw	r2,136(sp)
   183e8:	a128703a 	and	r20,r20,r4
   183ec:	1800a226 	beq	r3,zero,18678 <___vfiprintf_internal_r+0x968>
   183f0:	0039883a 	mov	fp,zero
   183f4:	dd401a04 	addi	r21,sp,104
   183f8:	9006d0fa 	srli	r3,r18,3
   183fc:	9808977a 	slli	r4,r19,29
   18400:	9826d0fa 	srli	r19,r19,3
   18404:	948001cc 	andi	r18,r18,7
   18408:	90800c04 	addi	r2,r18,48
   1840c:	ad7fffc4 	addi	r21,r21,-1
   18410:	20e4b03a 	or	r18,r4,r3
   18414:	a8800005 	stb	r2,0(r21)
   18418:	94c6b03a 	or	r3,r18,r19
   1841c:	183ff61e 	bne	r3,zero,183f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70183f8>
   18420:	a0c0004c 	andi	r3,r20,1
   18424:	18005926 	beq	r3,zero,1858c <___vfiprintf_internal_r+0x87c>
   18428:	10803fcc 	andi	r2,r2,255
   1842c:	1080201c 	xori	r2,r2,128
   18430:	10bfe004 	addi	r2,r2,-128
   18434:	00c00c04 	movi	r3,48
   18438:	10c05426 	beq	r2,r3,1858c <___vfiprintf_internal_r+0x87c>
   1843c:	da801e17 	ldw	r10,120(sp)
   18440:	a8bfffc4 	addi	r2,r21,-1
   18444:	a8ffffc5 	stb	r3,-1(r21)
   18448:	50a7c83a 	sub	r19,r10,r2
   1844c:	102b883a 	mov	r21,r2
   18450:	003f2f06 	br	18110 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018110>
   18454:	21003fcc 	andi	r4,r4,255
   18458:	2003421e 	bne	r4,zero,19164 <___vfiprintf_internal_r+0x1454>
   1845c:	008000f4 	movhi	r2,3
   18460:	10a0bb04 	addi	r2,r2,-32020
   18464:	d8802615 	stw	r2,152(sp)
   18468:	a080080c 	andi	r2,r20,32
   1846c:	1000aa26 	beq	r2,zero,18718 <___vfiprintf_internal_r+0xa08>
   18470:	da802217 	ldw	r10,136(sp)
   18474:	54800017 	ldw	r18,0(r10)
   18478:	54c00117 	ldw	r19,4(r10)
   1847c:	52800204 	addi	r10,r10,8
   18480:	da802215 	stw	r10,136(sp)
   18484:	a080004c 	andi	r2,r20,1
   18488:	1001d226 	beq	r2,zero,18bd4 <___vfiprintf_internal_r+0xec4>
   1848c:	94c4b03a 	or	r2,r18,r19
   18490:	1002351e 	bne	r2,zero,18d68 <___vfiprintf_internal_r+0x1058>
   18494:	d8001d85 	stb	zero,118(sp)
   18498:	48022216 	blt	r9,zero,18d24 <___vfiprintf_internal_r+0x1014>
   1849c:	00bfdfc4 	movi	r2,-129
   184a0:	a0a8703a 	and	r20,r20,r2
   184a4:	003f1506 	br	180fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70180fc>
   184a8:	da802217 	ldw	r10,136(sp)
   184ac:	04800044 	movi	r18,1
   184b0:	d8001d85 	stb	zero,118(sp)
   184b4:	50800017 	ldw	r2,0(r10)
   184b8:	52800104 	addi	r10,r10,4
   184bc:	da802215 	stw	r10,136(sp)
   184c0:	d8801005 	stb	r2,64(sp)
   184c4:	9027883a 	mov	r19,r18
   184c8:	dd401004 	addi	r21,sp,64
   184cc:	0013883a 	mov	r9,zero
   184d0:	003f1706 	br	18130 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018130>
   184d4:	21003fcc 	andi	r4,r4,255
   184d8:	2003201e 	bne	r4,zero,1915c <___vfiprintf_internal_r+0x144c>
   184dc:	a080080c 	andi	r2,r20,32
   184e0:	10004b26 	beq	r2,zero,18610 <___vfiprintf_internal_r+0x900>
   184e4:	da802217 	ldw	r10,136(sp)
   184e8:	50800117 	ldw	r2,4(r10)
   184ec:	54800017 	ldw	r18,0(r10)
   184f0:	52800204 	addi	r10,r10,8
   184f4:	da802215 	stw	r10,136(sp)
   184f8:	1027883a 	mov	r19,r2
   184fc:	10022c16 	blt	r2,zero,18db0 <___vfiprintf_internal_r+0x10a0>
   18500:	df001d83 	ldbu	fp,118(sp)
   18504:	48007216 	blt	r9,zero,186d0 <___vfiprintf_internal_r+0x9c0>
   18508:	00ffdfc4 	movi	r3,-129
   1850c:	94c4b03a 	or	r2,r18,r19
   18510:	a0e8703a 	and	r20,r20,r3
   18514:	1000cc26 	beq	r2,zero,18848 <___vfiprintf_internal_r+0xb38>
   18518:	98021026 	beq	r19,zero,18d5c <___vfiprintf_internal_r+0x104c>
   1851c:	dc402415 	stw	r17,144(sp)
   18520:	dc002515 	stw	r16,148(sp)
   18524:	9823883a 	mov	r17,r19
   18528:	9021883a 	mov	r16,r18
   1852c:	dd401a04 	addi	r21,sp,104
   18530:	4825883a 	mov	r18,r9
   18534:	4027883a 	mov	r19,r8
   18538:	8009883a 	mov	r4,r16
   1853c:	880b883a 	mov	r5,r17
   18540:	01800284 	movi	r6,10
   18544:	000f883a 	mov	r7,zero
   18548:	001a0f00 	call	1a0f0 <__umoddi3>
   1854c:	10800c04 	addi	r2,r2,48
   18550:	ad7fffc4 	addi	r21,r21,-1
   18554:	8009883a 	mov	r4,r16
   18558:	880b883a 	mov	r5,r17
   1855c:	a8800005 	stb	r2,0(r21)
   18560:	01800284 	movi	r6,10
   18564:	000f883a 	mov	r7,zero
   18568:	0019b780 	call	19b78 <__udivdi3>
   1856c:	1021883a 	mov	r16,r2
   18570:	10c4b03a 	or	r2,r2,r3
   18574:	1823883a 	mov	r17,r3
   18578:	103fef1e 	bne	r2,zero,18538 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018538>
   1857c:	dc402417 	ldw	r17,144(sp)
   18580:	dc002517 	ldw	r16,148(sp)
   18584:	9013883a 	mov	r9,r18
   18588:	9811883a 	mov	r8,r19
   1858c:	da801e17 	ldw	r10,120(sp)
   18590:	5567c83a 	sub	r19,r10,r21
   18594:	003ede06 	br	18110 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018110>
   18598:	38803fcc 	andi	r2,r7,255
   1859c:	1080201c 	xori	r2,r2,128
   185a0:	10bfe004 	addi	r2,r2,-128
   185a4:	1002371e 	bne	r2,zero,18e84 <___vfiprintf_internal_r+0x1174>
   185a8:	01000044 	movi	r4,1
   185ac:	01c00804 	movi	r7,32
   185b0:	80c00007 	ldb	r3,0(r16)
   185b4:	003e3506 	br	17e8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017e8c>
   185b8:	a5000054 	ori	r20,r20,1
   185bc:	80c00007 	ldb	r3,0(r16)
   185c0:	003e3206 	br	17e8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017e8c>
   185c4:	a5002014 	ori	r20,r20,128
   185c8:	80c00007 	ldb	r3,0(r16)
   185cc:	003e2f06 	br	17e8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017e8c>
   185d0:	8015883a 	mov	r10,r16
   185d4:	0023883a 	mov	r17,zero
   185d8:	18bff404 	addi	r2,r3,-48
   185dc:	50c00007 	ldb	r3,0(r10)
   185e0:	8c4002a4 	muli	r17,r17,10
   185e4:	84000044 	addi	r16,r16,1
   185e8:	8015883a 	mov	r10,r16
   185ec:	1463883a 	add	r17,r2,r17
   185f0:	18bff404 	addi	r2,r3,-48
   185f4:	30bff92e 	bgeu	r6,r2,185dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70185dc>
   185f8:	003e2506 	br	17e90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017e90>
   185fc:	21003fcc 	andi	r4,r4,255
   18600:	2002d41e 	bne	r4,zero,19154 <___vfiprintf_internal_r+0x1444>
   18604:	a5000414 	ori	r20,r20,16
   18608:	a080080c 	andi	r2,r20,32
   1860c:	103fb51e 	bne	r2,zero,184e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70184e4>
   18610:	a080040c 	andi	r2,r20,16
   18614:	1001f826 	beq	r2,zero,18df8 <___vfiprintf_internal_r+0x10e8>
   18618:	da802217 	ldw	r10,136(sp)
   1861c:	54800017 	ldw	r18,0(r10)
   18620:	52800104 	addi	r10,r10,4
   18624:	da802215 	stw	r10,136(sp)
   18628:	9027d7fa 	srai	r19,r18,31
   1862c:	9805883a 	mov	r2,r19
   18630:	003fb206 	br	184fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70184fc>
   18634:	21003fcc 	andi	r4,r4,255
   18638:	2002c41e 	bne	r4,zero,1914c <___vfiprintf_internal_r+0x143c>
   1863c:	a5000414 	ori	r20,r20,16
   18640:	a080080c 	andi	r2,r20,32
   18644:	103f5f1e 	bne	r2,zero,183c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70183c4>
   18648:	a080040c 	andi	r2,r20,16
   1864c:	10020f26 	beq	r2,zero,18e8c <___vfiprintf_internal_r+0x117c>
   18650:	da802217 	ldw	r10,136(sp)
   18654:	d8001d85 	stb	zero,118(sp)
   18658:	0027883a 	mov	r19,zero
   1865c:	50800104 	addi	r2,r10,4
   18660:	54800017 	ldw	r18,0(r10)
   18664:	48021116 	blt	r9,zero,18eac <___vfiprintf_internal_r+0x119c>
   18668:	00ffdfc4 	movi	r3,-129
   1866c:	d8802215 	stw	r2,136(sp)
   18670:	a0e8703a 	and	r20,r20,r3
   18674:	903f5e1e 	bne	r18,zero,183f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70183f0>
   18678:	0039883a 	mov	fp,zero
   1867c:	4802a626 	beq	r9,zero,19118 <___vfiprintf_internal_r+0x1408>
   18680:	0025883a 	mov	r18,zero
   18684:	0027883a 	mov	r19,zero
   18688:	003f5a06 	br	183f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70183f4>
   1868c:	21003fcc 	andi	r4,r4,255
   18690:	20029f1e 	bne	r4,zero,19110 <___vfiprintf_internal_r+0x1400>
   18694:	a5000414 	ori	r20,r20,16
   18698:	a080080c 	andi	r2,r20,32
   1869c:	10005e1e 	bne	r2,zero,18818 <___vfiprintf_internal_r+0xb08>
   186a0:	a080040c 	andi	r2,r20,16
   186a4:	1001a21e 	bne	r2,zero,18d30 <___vfiprintf_internal_r+0x1020>
   186a8:	a080100c 	andi	r2,r20,64
   186ac:	d8001d85 	stb	zero,118(sp)
   186b0:	da802217 	ldw	r10,136(sp)
   186b4:	1002231e 	bne	r2,zero,18f44 <___vfiprintf_internal_r+0x1234>
   186b8:	50800104 	addi	r2,r10,4
   186bc:	54800017 	ldw	r18,0(r10)
   186c0:	0027883a 	mov	r19,zero
   186c4:	4801a00e 	bge	r9,zero,18d48 <___vfiprintf_internal_r+0x1038>
   186c8:	d8802215 	stw	r2,136(sp)
   186cc:	0039883a 	mov	fp,zero
   186d0:	94c4b03a 	or	r2,r18,r19
   186d4:	103f901e 	bne	r2,zero,18518 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018518>
   186d8:	00800044 	movi	r2,1
   186dc:	10803fcc 	andi	r2,r2,255
   186e0:	00c00044 	movi	r3,1
   186e4:	10c05926 	beq	r2,r3,1884c <___vfiprintf_internal_r+0xb3c>
   186e8:	00c00084 	movi	r3,2
   186ec:	10ffe41e 	bne	r2,r3,18680 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018680>
   186f0:	0025883a 	mov	r18,zero
   186f4:	0027883a 	mov	r19,zero
   186f8:	00013d06 	br	18bf0 <___vfiprintf_internal_r+0xee0>
   186fc:	21003fcc 	andi	r4,r4,255
   18700:	2002811e 	bne	r4,zero,19108 <___vfiprintf_internal_r+0x13f8>
   18704:	008000f4 	movhi	r2,3
   18708:	10a0b604 	addi	r2,r2,-32040
   1870c:	d8802615 	stw	r2,152(sp)
   18710:	a080080c 	andi	r2,r20,32
   18714:	103f561e 	bne	r2,zero,18470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018470>
   18718:	a080040c 	andi	r2,r20,16
   1871c:	1001d126 	beq	r2,zero,18e64 <___vfiprintf_internal_r+0x1154>
   18720:	da802217 	ldw	r10,136(sp)
   18724:	0027883a 	mov	r19,zero
   18728:	54800017 	ldw	r18,0(r10)
   1872c:	52800104 	addi	r10,r10,4
   18730:	da802215 	stw	r10,136(sp)
   18734:	003f5306 	br	18484 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018484>
   18738:	da802217 	ldw	r10,136(sp)
   1873c:	d8001d85 	stb	zero,118(sp)
   18740:	55400017 	ldw	r21,0(r10)
   18744:	50c00104 	addi	r3,r10,4
   18748:	a8024226 	beq	r21,zero,19054 <___vfiprintf_internal_r+0x1344>
   1874c:	48021816 	blt	r9,zero,18fb0 <___vfiprintf_internal_r+0x12a0>
   18750:	480d883a 	mov	r6,r9
   18754:	000b883a 	mov	r5,zero
   18758:	a809883a 	mov	r4,r21
   1875c:	d8c02a15 	stw	r3,168(sp)
   18760:	da002b15 	stw	r8,172(sp)
   18764:	da402c15 	stw	r9,176(sp)
   18768:	0014f140 	call	14f14 <memchr>
   1876c:	d8c02a17 	ldw	r3,168(sp)
   18770:	da002b17 	ldw	r8,172(sp)
   18774:	da402c17 	ldw	r9,176(sp)
   18778:	10024826 	beq	r2,zero,1909c <___vfiprintf_internal_r+0x138c>
   1877c:	1567c83a 	sub	r19,r2,r21
   18780:	df001d83 	ldbu	fp,118(sp)
   18784:	d8c02215 	stw	r3,136(sp)
   18788:	0013883a 	mov	r9,zero
   1878c:	003e6006 	br	18110 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018110>
   18790:	21003fcc 	andi	r4,r4,255
   18794:	203fc026 	beq	r4,zero,18698 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018698>
   18798:	d9c01d85 	stb	r7,118(sp)
   1879c:	003fbe06 	br	18698 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018698>
   187a0:	da802217 	ldw	r10,136(sp)
   187a4:	54400017 	ldw	r17,0(r10)
   187a8:	50800104 	addi	r2,r10,4
   187ac:	883e3b16 	blt	r17,zero,1809c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701809c>
   187b0:	d8802215 	stw	r2,136(sp)
   187b4:	80c00007 	ldb	r3,0(r16)
   187b8:	003db406 	br	17e8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017e8c>
   187bc:	01000044 	movi	r4,1
   187c0:	01c00ac4 	movi	r7,43
   187c4:	80c00007 	ldb	r3,0(r16)
   187c8:	003db006 	br	17e8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017e8c>
   187cc:	80c00007 	ldb	r3,0(r16)
   187d0:	82800044 	addi	r10,r16,1
   187d4:	1b423c26 	beq	r3,r13,190c8 <___vfiprintf_internal_r+0x13b8>
   187d8:	18bff404 	addi	r2,r3,-48
   187dc:	0013883a 	mov	r9,zero
   187e0:	30822b36 	bltu	r6,r2,19090 <___vfiprintf_internal_r+0x1380>
   187e4:	50c00007 	ldb	r3,0(r10)
   187e8:	4a4002a4 	muli	r9,r9,10
   187ec:	54000044 	addi	r16,r10,1
   187f0:	8015883a 	mov	r10,r16
   187f4:	4893883a 	add	r9,r9,r2
   187f8:	18bff404 	addi	r2,r3,-48
   187fc:	30bff92e 	bgeu	r6,r2,187e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70187e4>
   18800:	483da30e 	bge	r9,zero,17e90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017e90>
   18804:	027fffc4 	movi	r9,-1
   18808:	003da106 	br	17e90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017e90>
   1880c:	a5001014 	ori	r20,r20,64
   18810:	80c00007 	ldb	r3,0(r16)
   18814:	003d9d06 	br	17e8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017e8c>
   18818:	da802217 	ldw	r10,136(sp)
   1881c:	d8001d85 	stb	zero,118(sp)
   18820:	50c00204 	addi	r3,r10,8
   18824:	54800017 	ldw	r18,0(r10)
   18828:	54c00117 	ldw	r19,4(r10)
   1882c:	4801ca16 	blt	r9,zero,18f58 <___vfiprintf_internal_r+0x1248>
   18830:	013fdfc4 	movi	r4,-129
   18834:	94c4b03a 	or	r2,r18,r19
   18838:	d8c02215 	stw	r3,136(sp)
   1883c:	a128703a 	and	r20,r20,r4
   18840:	0039883a 	mov	fp,zero
   18844:	103f341e 	bne	r2,zero,18518 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018518>
   18848:	483e2e26 	beq	r9,zero,18104 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018104>
   1884c:	0025883a 	mov	r18,zero
   18850:	94800c04 	addi	r18,r18,48
   18854:	dc8019c5 	stb	r18,103(sp)
   18858:	dcc02717 	ldw	r19,156(sp)
   1885c:	dd4019c4 	addi	r21,sp,103
   18860:	003e2b06 	br	18110 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018110>
   18864:	21003fcc 	andi	r4,r4,255
   18868:	2002361e 	bne	r4,zero,19144 <___vfiprintf_internal_r+0x1434>
   1886c:	1801c126 	beq	r3,zero,18f74 <___vfiprintf_internal_r+0x1264>
   18870:	04800044 	movi	r18,1
   18874:	d8c01005 	stb	r3,64(sp)
   18878:	d8001d85 	stb	zero,118(sp)
   1887c:	9027883a 	mov	r19,r18
   18880:	dd401004 	addi	r21,sp,64
   18884:	003f1106 	br	184cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70184cc>
   18888:	d9402117 	ldw	r5,132(sp)
   1888c:	d9002017 	ldw	r4,128(sp)
   18890:	d9801a04 	addi	r6,sp,104
   18894:	d9c02b15 	stw	r7,172(sp)
   18898:	dbc02a15 	stw	r15,168(sp)
   1889c:	0017bfc0 	call	17bfc <__sprint_r.part.0>
   188a0:	d9c02b17 	ldw	r7,172(sp)
   188a4:	dbc02a17 	ldw	r15,168(sp)
   188a8:	10006d1e 	bne	r2,zero,18a60 <___vfiprintf_internal_r+0xd50>
   188ac:	d9801b17 	ldw	r6,108(sp)
   188b0:	d8801c17 	ldw	r2,112(sp)
   188b4:	d811883a 	mov	r8,sp
   188b8:	31400044 	addi	r5,r6,1
   188bc:	003e3306 	br	1818c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701818c>
   188c0:	d9401b17 	ldw	r5,108(sp)
   188c4:	d8801c17 	ldw	r2,112(sp)
   188c8:	29000044 	addi	r4,r5,1
   188cc:	d8c01d87 	ldb	r3,118(sp)
   188d0:	183e4d26 	beq	r3,zero,18208 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018208>
   188d4:	00c00044 	movi	r3,1
   188d8:	d9401d84 	addi	r5,sp,118
   188dc:	10c5883a 	add	r2,r2,r3
   188e0:	41400015 	stw	r5,0(r8)
   188e4:	40c00115 	stw	r3,4(r8)
   188e8:	d8801c15 	stw	r2,112(sp)
   188ec:	d9001b15 	stw	r4,108(sp)
   188f0:	014001c4 	movi	r5,7
   188f4:	2900a90e 	bge	r5,r4,18b9c <___vfiprintf_internal_r+0xe8c>
   188f8:	1000da1e 	bne	r2,zero,18c64 <___vfiprintf_internal_r+0xf54>
   188fc:	7000ab1e 	bne	r14,zero,18bac <___vfiprintf_internal_r+0xe9c>
   18900:	000b883a 	mov	r5,zero
   18904:	1809883a 	mov	r4,r3
   18908:	d811883a 	mov	r8,sp
   1890c:	00c02004 	movi	r3,128
   18910:	e0fe4d26 	beq	fp,r3,18248 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018248>
   18914:	4cf9c83a 	sub	fp,r9,r19
   18918:	073e7b0e 	bge	zero,fp,18308 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018308>
   1891c:	01c00404 	movi	r7,16
   18920:	3f01900e 	bge	r7,fp,18f64 <___vfiprintf_internal_r+0x1254>
   18924:	00c000f4 	movhi	r3,3
   18928:	18e12b04 	addi	r3,r3,-31572
   1892c:	d8c02415 	stw	r3,144(sp)
   18930:	034001c4 	movi	r13,7
   18934:	00000506 	br	1894c <___vfiprintf_internal_r+0xc3c>
   18938:	29000084 	addi	r4,r5,2
   1893c:	42000204 	addi	r8,r8,8
   18940:	180b883a 	mov	r5,r3
   18944:	e73ffc04 	addi	fp,fp,-16
   18948:	3f000d0e 	bge	r7,fp,18980 <___vfiprintf_internal_r+0xc70>
   1894c:	10800404 	addi	r2,r2,16
   18950:	28c00044 	addi	r3,r5,1
   18954:	45c00015 	stw	r23,0(r8)
   18958:	41c00115 	stw	r7,4(r8)
   1895c:	d8801c15 	stw	r2,112(sp)
   18960:	d8c01b15 	stw	r3,108(sp)
   18964:	68fff40e 	bge	r13,r3,18938 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018938>
   18968:	1000101e 	bne	r2,zero,189ac <___vfiprintf_internal_r+0xc9c>
   1896c:	e73ffc04 	addi	fp,fp,-16
   18970:	01000044 	movi	r4,1
   18974:	000b883a 	mov	r5,zero
   18978:	d811883a 	mov	r8,sp
   1897c:	3f3ff316 	blt	r7,fp,1894c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701894c>
   18980:	da802417 	ldw	r10,144(sp)
   18984:	1705883a 	add	r2,r2,fp
   18988:	47000115 	stw	fp,4(r8)
   1898c:	42800015 	stw	r10,0(r8)
   18990:	d8801c15 	stw	r2,112(sp)
   18994:	d9001b15 	stw	r4,108(sp)
   18998:	00c001c4 	movi	r3,7
   1899c:	19003616 	blt	r3,r4,18a78 <___vfiprintf_internal_r+0xd68>
   189a0:	42000204 	addi	r8,r8,8
   189a4:	21000044 	addi	r4,r4,1
   189a8:	003e5706 	br	18308 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018308>
   189ac:	d9402117 	ldw	r5,132(sp)
   189b0:	d9002017 	ldw	r4,128(sp)
   189b4:	d9801a04 	addi	r6,sp,104
   189b8:	d9c02b15 	stw	r7,172(sp)
   189bc:	db402a15 	stw	r13,168(sp)
   189c0:	0017bfc0 	call	17bfc <__sprint_r.part.0>
   189c4:	d9c02b17 	ldw	r7,172(sp)
   189c8:	db402a17 	ldw	r13,168(sp)
   189cc:	1000241e 	bne	r2,zero,18a60 <___vfiprintf_internal_r+0xd50>
   189d0:	d9401b17 	ldw	r5,108(sp)
   189d4:	d8801c17 	ldw	r2,112(sp)
   189d8:	d811883a 	mov	r8,sp
   189dc:	29000044 	addi	r4,r5,1
   189e0:	003fd806 	br	18944 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018944>
   189e4:	d9401b17 	ldw	r5,108(sp)
   189e8:	00c000f4 	movhi	r3,3
   189ec:	18e12f04 	addi	r3,r3,-31556
   189f0:	d8c02415 	stw	r3,144(sp)
   189f4:	29400044 	addi	r5,r5,1
   189f8:	d8c02417 	ldw	r3,144(sp)
   189fc:	14c5883a 	add	r2,r2,r19
   18a00:	44c00115 	stw	r19,4(r8)
   18a04:	40c00015 	stw	r3,0(r8)
   18a08:	d8801c15 	stw	r2,112(sp)
   18a0c:	d9401b15 	stw	r5,108(sp)
   18a10:	00c001c4 	movi	r3,7
   18a14:	1940070e 	bge	r3,r5,18a34 <___vfiprintf_internal_r+0xd24>
   18a18:	103e4826 	beq	r2,zero,1833c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701833c>
   18a1c:	d9402117 	ldw	r5,132(sp)
   18a20:	d9002017 	ldw	r4,128(sp)
   18a24:	d9801a04 	addi	r6,sp,104
   18a28:	0017bfc0 	call	17bfc <__sprint_r.part.0>
   18a2c:	10000c1e 	bne	r2,zero,18a60 <___vfiprintf_internal_r+0xd50>
   18a30:	d8801c17 	ldw	r2,112(sp)
   18a34:	8c80010e 	bge	r17,r18,18a3c <___vfiprintf_internal_r+0xd2c>
   18a38:	9023883a 	mov	r17,r18
   18a3c:	da802317 	ldw	r10,140(sp)
   18a40:	5455883a 	add	r10,r10,r17
   18a44:	da802315 	stw	r10,140(sp)
   18a48:	103e4126 	beq	r2,zero,18350 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018350>
   18a4c:	d9402117 	ldw	r5,132(sp)
   18a50:	d9002017 	ldw	r4,128(sp)
   18a54:	d9801a04 	addi	r6,sp,104
   18a58:	0017bfc0 	call	17bfc <__sprint_r.part.0>
   18a5c:	103e3c26 	beq	r2,zero,18350 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018350>
   18a60:	dd002117 	ldw	r20,132(sp)
   18a64:	a080030b 	ldhu	r2,12(r20)
   18a68:	1080100c 	andi	r2,r2,64
   18a6c:	1001231e 	bne	r2,zero,18efc <___vfiprintf_internal_r+0x11ec>
   18a70:	d8802317 	ldw	r2,140(sp)
   18a74:	003d7b06 	br	18064 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018064>
   18a78:	1000991e 	bne	r2,zero,18ce0 <___vfiprintf_internal_r+0xfd0>
   18a7c:	00c00044 	movi	r3,1
   18a80:	9805883a 	mov	r2,r19
   18a84:	dd400015 	stw	r21,0(sp)
   18a88:	dcc00115 	stw	r19,4(sp)
   18a8c:	dcc01c15 	stw	r19,112(sp)
   18a90:	d8c01b15 	stw	r3,108(sp)
   18a94:	d811883a 	mov	r8,sp
   18a98:	42000204 	addi	r8,r8,8
   18a9c:	a2c0010c 	andi	r11,r20,4
   18aa0:	583fe426 	beq	r11,zero,18a34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018a34>
   18aa4:	8ca7c83a 	sub	r19,r17,r18
   18aa8:	04ffe20e 	bge	zero,r19,18a34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018a34>
   18aac:	01c00404 	movi	r7,16
   18ab0:	3cffcc0e 	bge	r7,r19,189e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70189e4>
   18ab4:	028000f4 	movhi	r10,3
   18ab8:	52a12f04 	addi	r10,r10,-31556
   18abc:	d9001b17 	ldw	r4,108(sp)
   18ac0:	da802415 	stw	r10,144(sp)
   18ac4:	382b883a 	mov	r21,r7
   18ac8:	050001c4 	movi	r20,7
   18acc:	df002017 	ldw	fp,128(sp)
   18ad0:	00000506 	br	18ae8 <___vfiprintf_internal_r+0xdd8>
   18ad4:	21400084 	addi	r5,r4,2
   18ad8:	42000204 	addi	r8,r8,8
   18adc:	1809883a 	mov	r4,r3
   18ae0:	9cfffc04 	addi	r19,r19,-16
   18ae4:	acffc40e 	bge	r21,r19,189f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70189f8>
   18ae8:	10800404 	addi	r2,r2,16
   18aec:	20c00044 	addi	r3,r4,1
   18af0:	45800015 	stw	r22,0(r8)
   18af4:	45400115 	stw	r21,4(r8)
   18af8:	d8801c15 	stw	r2,112(sp)
   18afc:	d8c01b15 	stw	r3,108(sp)
   18b00:	a0fff40e 	bge	r20,r3,18ad4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018ad4>
   18b04:	1000041e 	bne	r2,zero,18b18 <___vfiprintf_internal_r+0xe08>
   18b08:	01400044 	movi	r5,1
   18b0c:	0009883a 	mov	r4,zero
   18b10:	d811883a 	mov	r8,sp
   18b14:	003ff206 	br	18ae0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018ae0>
   18b18:	d9402117 	ldw	r5,132(sp)
   18b1c:	d9801a04 	addi	r6,sp,104
   18b20:	e009883a 	mov	r4,fp
   18b24:	0017bfc0 	call	17bfc <__sprint_r.part.0>
   18b28:	103fcd1e 	bne	r2,zero,18a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018a60>
   18b2c:	d9001b17 	ldw	r4,108(sp)
   18b30:	d8801c17 	ldw	r2,112(sp)
   18b34:	d811883a 	mov	r8,sp
   18b38:	21400044 	addi	r5,r4,1
   18b3c:	003fe806 	br	18ae0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018ae0>
   18b40:	d9402117 	ldw	r5,132(sp)
   18b44:	d9002017 	ldw	r4,128(sp)
   18b48:	d9801a04 	addi	r6,sp,104
   18b4c:	d9c02b15 	stw	r7,172(sp)
   18b50:	db402a15 	stw	r13,168(sp)
   18b54:	0017bfc0 	call	17bfc <__sprint_r.part.0>
   18b58:	d9c02b17 	ldw	r7,172(sp)
   18b5c:	db402a17 	ldw	r13,168(sp)
   18b60:	103fbf1e 	bne	r2,zero,18a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018a60>
   18b64:	d9401b17 	ldw	r5,108(sp)
   18b68:	d8801c17 	ldw	r2,112(sp)
   18b6c:	d811883a 	mov	r8,sp
   18b70:	29800044 	addi	r6,r5,1
   18b74:	003dc406 	br	18288 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018288>
   18b78:	1000d21e 	bne	r2,zero,18ec4 <___vfiprintf_internal_r+0x11b4>
   18b7c:	d8c01d87 	ldb	r3,118(sp)
   18b80:	18009526 	beq	r3,zero,18dd8 <___vfiprintf_internal_r+0x10c8>
   18b84:	00800044 	movi	r2,1
   18b88:	d8c01d84 	addi	r3,sp,118
   18b8c:	1009883a 	mov	r4,r2
   18b90:	d8c00015 	stw	r3,0(sp)
   18b94:	d8800115 	stw	r2,4(sp)
   18b98:	d811883a 	mov	r8,sp
   18b9c:	200b883a 	mov	r5,r4
   18ba0:	42000204 	addi	r8,r8,8
   18ba4:	21000044 	addi	r4,r4,1
   18ba8:	003d9706 	br	18208 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018208>
   18bac:	d9001d04 	addi	r4,sp,116
   18bb0:	00800084 	movi	r2,2
   18bb4:	d9000015 	stw	r4,0(sp)
   18bb8:	d8800115 	stw	r2,4(sp)
   18bbc:	1809883a 	mov	r4,r3
   18bc0:	d811883a 	mov	r8,sp
   18bc4:	200b883a 	mov	r5,r4
   18bc8:	42000204 	addi	r8,r8,8
   18bcc:	21000044 	addi	r4,r4,1
   18bd0:	003f4e06 	br	1890c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701890c>
   18bd4:	d8001d85 	stb	zero,118(sp)
   18bd8:	48005016 	blt	r9,zero,18d1c <___vfiprintf_internal_r+0x100c>
   18bdc:	00ffdfc4 	movi	r3,-129
   18be0:	94c4b03a 	or	r2,r18,r19
   18be4:	a0e8703a 	and	r20,r20,r3
   18be8:	103d4426 	beq	r2,zero,180fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70180fc>
   18bec:	0039883a 	mov	fp,zero
   18bf0:	d9002617 	ldw	r4,152(sp)
   18bf4:	dd401a04 	addi	r21,sp,104
   18bf8:	908003cc 	andi	r2,r18,15
   18bfc:	9806973a 	slli	r3,r19,28
   18c00:	2085883a 	add	r2,r4,r2
   18c04:	9024d13a 	srli	r18,r18,4
   18c08:	10800003 	ldbu	r2,0(r2)
   18c0c:	9826d13a 	srli	r19,r19,4
   18c10:	ad7fffc4 	addi	r21,r21,-1
   18c14:	1ca4b03a 	or	r18,r3,r18
   18c18:	a8800005 	stb	r2,0(r21)
   18c1c:	94c4b03a 	or	r2,r18,r19
   18c20:	103ff51e 	bne	r2,zero,18bf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018bf8>
   18c24:	003e5906 	br	1858c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701858c>
   18c28:	d9402117 	ldw	r5,132(sp)
   18c2c:	d9002017 	ldw	r4,128(sp)
   18c30:	d9801a04 	addi	r6,sp,104
   18c34:	0017bfc0 	call	17bfc <__sprint_r.part.0>
   18c38:	103f891e 	bne	r2,zero,18a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018a60>
   18c3c:	d8801c17 	ldw	r2,112(sp)
   18c40:	d811883a 	mov	r8,sp
   18c44:	003f9506 	br	18a9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018a9c>
   18c48:	d9402117 	ldw	r5,132(sp)
   18c4c:	d9002017 	ldw	r4,128(sp)
   18c50:	d9801a04 	addi	r6,sp,104
   18c54:	0017bfc0 	call	17bfc <__sprint_r.part.0>
   18c58:	103f811e 	bne	r2,zero,18a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018a60>
   18c5c:	d811883a 	mov	r8,sp
   18c60:	003ced06 	br	18018 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018018>
   18c64:	d9402117 	ldw	r5,132(sp)
   18c68:	d9002017 	ldw	r4,128(sp)
   18c6c:	d9801a04 	addi	r6,sp,104
   18c70:	da402c15 	stw	r9,176(sp)
   18c74:	db802a15 	stw	r14,168(sp)
   18c78:	0017bfc0 	call	17bfc <__sprint_r.part.0>
   18c7c:	da402c17 	ldw	r9,176(sp)
   18c80:	db802a17 	ldw	r14,168(sp)
   18c84:	103f761e 	bne	r2,zero,18a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018a60>
   18c88:	d9401b17 	ldw	r5,108(sp)
   18c8c:	d8801c17 	ldw	r2,112(sp)
   18c90:	d811883a 	mov	r8,sp
   18c94:	29000044 	addi	r4,r5,1
   18c98:	003d5b06 	br	18208 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018208>
   18c9c:	d9402117 	ldw	r5,132(sp)
   18ca0:	d9002017 	ldw	r4,128(sp)
   18ca4:	d9801a04 	addi	r6,sp,104
   18ca8:	da402c15 	stw	r9,176(sp)
   18cac:	0017bfc0 	call	17bfc <__sprint_r.part.0>
   18cb0:	da402c17 	ldw	r9,176(sp)
   18cb4:	103f6a1e 	bne	r2,zero,18a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018a60>
   18cb8:	d9401b17 	ldw	r5,108(sp)
   18cbc:	d8801c17 	ldw	r2,112(sp)
   18cc0:	d811883a 	mov	r8,sp
   18cc4:	29000044 	addi	r4,r5,1
   18cc8:	003f1006 	br	1890c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701890c>
   18ccc:	1000c31e 	bne	r2,zero,18fdc <___vfiprintf_internal_r+0x12cc>
   18cd0:	01000044 	movi	r4,1
   18cd4:	000b883a 	mov	r5,zero
   18cd8:	d811883a 	mov	r8,sp
   18cdc:	003f0d06 	br	18914 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018914>
   18ce0:	d9402117 	ldw	r5,132(sp)
   18ce4:	d9002017 	ldw	r4,128(sp)
   18ce8:	d9801a04 	addi	r6,sp,104
   18cec:	0017bfc0 	call	17bfc <__sprint_r.part.0>
   18cf0:	103f5b1e 	bne	r2,zero,18a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018a60>
   18cf4:	d9001b17 	ldw	r4,108(sp)
   18cf8:	d8801c17 	ldw	r2,112(sp)
   18cfc:	d811883a 	mov	r8,sp
   18d00:	21000044 	addi	r4,r4,1
   18d04:	003d8006 	br	18308 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018308>
   18d08:	010000f4 	movhi	r4,3
   18d0c:	2120bb04 	addi	r4,r4,-32020
   18d10:	d9002615 	stw	r4,152(sp)
   18d14:	d8c02215 	stw	r3,136(sp)
   18d18:	1029883a 	mov	r20,r2
   18d1c:	94c4b03a 	or	r2,r18,r19
   18d20:	103fb21e 	bne	r2,zero,18bec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018bec>
   18d24:	0039883a 	mov	fp,zero
   18d28:	00800084 	movi	r2,2
   18d2c:	003e6b06 	br	186dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70186dc>
   18d30:	da802217 	ldw	r10,136(sp)
   18d34:	d8001d85 	stb	zero,118(sp)
   18d38:	0027883a 	mov	r19,zero
   18d3c:	50800104 	addi	r2,r10,4
   18d40:	54800017 	ldw	r18,0(r10)
   18d44:	483e6016 	blt	r9,zero,186c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70186c8>
   18d48:	00ffdfc4 	movi	r3,-129
   18d4c:	d8802215 	stw	r2,136(sp)
   18d50:	a0e8703a 	and	r20,r20,r3
   18d54:	0039883a 	mov	fp,zero
   18d58:	903ebb26 	beq	r18,zero,18848 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018848>
   18d5c:	00800244 	movi	r2,9
   18d60:	14bdee36 	bltu	r2,r18,1851c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701851c>
   18d64:	003eba06 	br	18850 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018850>
   18d68:	00800c04 	movi	r2,48
   18d6c:	d8c01d45 	stb	r3,117(sp)
   18d70:	d8801d05 	stb	r2,116(sp)
   18d74:	d8001d85 	stb	zero,118(sp)
   18d78:	a0c00094 	ori	r3,r20,2
   18d7c:	4800a916 	blt	r9,zero,19024 <___vfiprintf_internal_r+0x1314>
   18d80:	00bfdfc4 	movi	r2,-129
   18d84:	a096703a 	and	r11,r20,r2
   18d88:	5d000094 	ori	r20,r11,2
   18d8c:	0039883a 	mov	fp,zero
   18d90:	003f9706 	br	18bf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018bf0>
   18d94:	8025883a 	mov	r18,r16
   18d98:	003c2e06 	br	17e54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017e54>
   18d9c:	008000f4 	movhi	r2,3
   18da0:	10a0bb04 	addi	r2,r2,-32020
   18da4:	0039883a 	mov	fp,zero
   18da8:	d8802615 	stw	r2,152(sp)
   18dac:	003f9006 	br	18bf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018bf0>
   18db0:	04a5c83a 	sub	r18,zero,r18
   18db4:	07000b44 	movi	fp,45
   18db8:	9004c03a 	cmpne	r2,r18,zero
   18dbc:	04e7c83a 	sub	r19,zero,r19
   18dc0:	df001d85 	stb	fp,118(sp)
   18dc4:	98a7c83a 	sub	r19,r19,r2
   18dc8:	48009f16 	blt	r9,zero,19048 <___vfiprintf_internal_r+0x1338>
   18dcc:	00bfdfc4 	movi	r2,-129
   18dd0:	a0a8703a 	and	r20,r20,r2
   18dd4:	003dd006 	br	18518 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018518>
   18dd8:	70004c26 	beq	r14,zero,18f0c <___vfiprintf_internal_r+0x11fc>
   18ddc:	00800084 	movi	r2,2
   18de0:	d8c01d04 	addi	r3,sp,116
   18de4:	d8c00015 	stw	r3,0(sp)
   18de8:	d8800115 	stw	r2,4(sp)
   18dec:	01000044 	movi	r4,1
   18df0:	d811883a 	mov	r8,sp
   18df4:	003f7306 	br	18bc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018bc4>
   18df8:	a080100c 	andi	r2,r20,64
   18dfc:	da802217 	ldw	r10,136(sp)
   18e00:	103e0626 	beq	r2,zero,1861c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701861c>
   18e04:	5480000f 	ldh	r18,0(r10)
   18e08:	52800104 	addi	r10,r10,4
   18e0c:	da802215 	stw	r10,136(sp)
   18e10:	9027d7fa 	srai	r19,r18,31
   18e14:	9805883a 	mov	r2,r19
   18e18:	003db806 	br	184fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70184fc>
   18e1c:	a080040c 	andi	r2,r20,16
   18e20:	1000091e 	bne	r2,zero,18e48 <___vfiprintf_internal_r+0x1138>
   18e24:	a2c0100c 	andi	r11,r20,64
   18e28:	58000726 	beq	r11,zero,18e48 <___vfiprintf_internal_r+0x1138>
   18e2c:	da802217 	ldw	r10,136(sp)
   18e30:	50800017 	ldw	r2,0(r10)
   18e34:	52800104 	addi	r10,r10,4
   18e38:	da802215 	stw	r10,136(sp)
   18e3c:	da802317 	ldw	r10,140(sp)
   18e40:	1280000d 	sth	r10,0(r2)
   18e44:	003be706 	br	17de4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017de4>
   18e48:	da802217 	ldw	r10,136(sp)
   18e4c:	50800017 	ldw	r2,0(r10)
   18e50:	52800104 	addi	r10,r10,4
   18e54:	da802215 	stw	r10,136(sp)
   18e58:	da802317 	ldw	r10,140(sp)
   18e5c:	12800015 	stw	r10,0(r2)
   18e60:	003be006 	br	17de4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017de4>
   18e64:	a080100c 	andi	r2,r20,64
   18e68:	da802217 	ldw	r10,136(sp)
   18e6c:	10003026 	beq	r2,zero,18f30 <___vfiprintf_internal_r+0x1220>
   18e70:	5480000b 	ldhu	r18,0(r10)
   18e74:	52800104 	addi	r10,r10,4
   18e78:	0027883a 	mov	r19,zero
   18e7c:	da802215 	stw	r10,136(sp)
   18e80:	003d8006 	br	18484 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018484>
   18e84:	80c00007 	ldb	r3,0(r16)
   18e88:	003c0006 	br	17e8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017e8c>
   18e8c:	a080100c 	andi	r2,r20,64
   18e90:	d8001d85 	stb	zero,118(sp)
   18e94:	da802217 	ldw	r10,136(sp)
   18e98:	1000201e 	bne	r2,zero,18f1c <___vfiprintf_internal_r+0x120c>
   18e9c:	50800104 	addi	r2,r10,4
   18ea0:	54800017 	ldw	r18,0(r10)
   18ea4:	0027883a 	mov	r19,zero
   18ea8:	483def0e 	bge	r9,zero,18668 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018668>
   18eac:	94c6b03a 	or	r3,r18,r19
   18eb0:	d8802215 	stw	r2,136(sp)
   18eb4:	183d4e1e 	bne	r3,zero,183f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70183f0>
   18eb8:	0039883a 	mov	fp,zero
   18ebc:	0005883a 	mov	r2,zero
   18ec0:	003e0606 	br	186dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70186dc>
   18ec4:	d9402117 	ldw	r5,132(sp)
   18ec8:	d9002017 	ldw	r4,128(sp)
   18ecc:	d9801a04 	addi	r6,sp,104
   18ed0:	da402c15 	stw	r9,176(sp)
   18ed4:	db802a15 	stw	r14,168(sp)
   18ed8:	0017bfc0 	call	17bfc <__sprint_r.part.0>
   18edc:	da402c17 	ldw	r9,176(sp)
   18ee0:	db802a17 	ldw	r14,168(sp)
   18ee4:	103ede1e 	bne	r2,zero,18a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018a60>
   18ee8:	d9401b17 	ldw	r5,108(sp)
   18eec:	d8801c17 	ldw	r2,112(sp)
   18ef0:	d811883a 	mov	r8,sp
   18ef4:	29000044 	addi	r4,r5,1
   18ef8:	003e7406 	br	188cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70188cc>
   18efc:	00bfffc4 	movi	r2,-1
   18f00:	003c5806 	br	18064 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018064>
   18f04:	d811883a 	mov	r8,sp
   18f08:	003ee806 	br	18aac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018aac>
   18f0c:	000b883a 	mov	r5,zero
   18f10:	01000044 	movi	r4,1
   18f14:	d811883a 	mov	r8,sp
   18f18:	003e7c06 	br	1890c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701890c>
   18f1c:	50800104 	addi	r2,r10,4
   18f20:	5480000b 	ldhu	r18,0(r10)
   18f24:	0027883a 	mov	r19,zero
   18f28:	483dcf0e 	bge	r9,zero,18668 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018668>
   18f2c:	003fdf06 	br	18eac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018eac>
   18f30:	54800017 	ldw	r18,0(r10)
   18f34:	52800104 	addi	r10,r10,4
   18f38:	0027883a 	mov	r19,zero
   18f3c:	da802215 	stw	r10,136(sp)
   18f40:	003d5006 	br	18484 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018484>
   18f44:	50800104 	addi	r2,r10,4
   18f48:	5480000b 	ldhu	r18,0(r10)
   18f4c:	0027883a 	mov	r19,zero
   18f50:	483f7d0e 	bge	r9,zero,18d48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018d48>
   18f54:	003ddc06 	br	186c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70186c8>
   18f58:	d8c02215 	stw	r3,136(sp)
   18f5c:	0039883a 	mov	fp,zero
   18f60:	003ddb06 	br	186d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70186d0>
   18f64:	028000f4 	movhi	r10,3
   18f68:	52a12b04 	addi	r10,r10,-31572
   18f6c:	da802415 	stw	r10,144(sp)
   18f70:	003e8306 	br	18980 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018980>
   18f74:	d8801c17 	ldw	r2,112(sp)
   18f78:	dd002117 	ldw	r20,132(sp)
   18f7c:	103eb926 	beq	r2,zero,18a64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018a64>
   18f80:	d9002017 	ldw	r4,128(sp)
   18f84:	d9801a04 	addi	r6,sp,104
   18f88:	a00b883a 	mov	r5,r20
   18f8c:	0017bfc0 	call	17bfc <__sprint_r.part.0>
   18f90:	003eb406 	br	18a64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018a64>
   18f94:	80c00043 	ldbu	r3,1(r16)
   18f98:	a5000814 	ori	r20,r20,32
   18f9c:	84000044 	addi	r16,r16,1
   18fa0:	18c03fcc 	andi	r3,r3,255
   18fa4:	18c0201c 	xori	r3,r3,128
   18fa8:	18ffe004 	addi	r3,r3,-128
   18fac:	003bb706 	br	17e8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017e8c>
   18fb0:	a809883a 	mov	r4,r21
   18fb4:	d8c02a15 	stw	r3,168(sp)
   18fb8:	da002b15 	stw	r8,172(sp)
   18fbc:	000dca00 	call	dca0 <strlen>
   18fc0:	d8c02a17 	ldw	r3,168(sp)
   18fc4:	1027883a 	mov	r19,r2
   18fc8:	df001d83 	ldbu	fp,118(sp)
   18fcc:	d8c02215 	stw	r3,136(sp)
   18fd0:	0013883a 	mov	r9,zero
   18fd4:	da002b17 	ldw	r8,172(sp)
   18fd8:	003c4d06 	br	18110 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018110>
   18fdc:	d9402117 	ldw	r5,132(sp)
   18fe0:	d9002017 	ldw	r4,128(sp)
   18fe4:	d9801a04 	addi	r6,sp,104
   18fe8:	da402c15 	stw	r9,176(sp)
   18fec:	0017bfc0 	call	17bfc <__sprint_r.part.0>
   18ff0:	da402c17 	ldw	r9,176(sp)
   18ff4:	103e9a1e 	bne	r2,zero,18a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018a60>
   18ff8:	d9401b17 	ldw	r5,108(sp)
   18ffc:	d8801c17 	ldw	r2,112(sp)
   19000:	d811883a 	mov	r8,sp
   19004:	29000044 	addi	r4,r5,1
   19008:	003e4206 	br	18914 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018914>
   1900c:	d9401b17 	ldw	r5,108(sp)
   19010:	010000f4 	movhi	r4,3
   19014:	21212f04 	addi	r4,r4,-31556
   19018:	d9002415 	stw	r4,144(sp)
   1901c:	29400044 	addi	r5,r5,1
   19020:	003c6d06 	br	181d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70181d8>
   19024:	0039883a 	mov	fp,zero
   19028:	00800084 	movi	r2,2
   1902c:	10803fcc 	andi	r2,r2,255
   19030:	01000044 	movi	r4,1
   19034:	11001e26 	beq	r2,r4,190b0 <___vfiprintf_internal_r+0x13a0>
   19038:	01000084 	movi	r4,2
   1903c:	11001e1e 	bne	r2,r4,190b8 <___vfiprintf_internal_r+0x13a8>
   19040:	1829883a 	mov	r20,r3
   19044:	003eea06 	br	18bf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018bf0>
   19048:	a007883a 	mov	r3,r20
   1904c:	00800044 	movi	r2,1
   19050:	003ff606 	br	1902c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701902c>
   19054:	00800184 	movi	r2,6
   19058:	1240012e 	bgeu	r2,r9,19060 <___vfiprintf_internal_r+0x1350>
   1905c:	1013883a 	mov	r9,r2
   19060:	4827883a 	mov	r19,r9
   19064:	4825883a 	mov	r18,r9
   19068:	48001516 	blt	r9,zero,190c0 <___vfiprintf_internal_r+0x13b0>
   1906c:	054000f4 	movhi	r21,3
   19070:	d8c02215 	stw	r3,136(sp)
   19074:	ad60c004 	addi	r21,r21,-32000
   19078:	003d1406 	br	184cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70184cc>
   1907c:	028000f4 	movhi	r10,3
   19080:	52a12b04 	addi	r10,r10,-31572
   19084:	da802415 	stw	r10,144(sp)
   19088:	200d883a 	mov	r6,r4
   1908c:	003c9106 	br	182d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70182d4>
   19090:	5021883a 	mov	r16,r10
   19094:	0013883a 	mov	r9,zero
   19098:	003b7d06 	br	17e90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017e90>
   1909c:	4827883a 	mov	r19,r9
   190a0:	df001d83 	ldbu	fp,118(sp)
   190a4:	d8c02215 	stw	r3,136(sp)
   190a8:	0013883a 	mov	r9,zero
   190ac:	003c1806 	br	18110 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018110>
   190b0:	1829883a 	mov	r20,r3
   190b4:	003d1806 	br	18518 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018518>
   190b8:	1829883a 	mov	r20,r3
   190bc:	003ccd06 	br	183f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70183f4>
   190c0:	0025883a 	mov	r18,zero
   190c4:	003fe906 	br	1906c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701906c>
   190c8:	d8802217 	ldw	r2,136(sp)
   190cc:	80c00043 	ldbu	r3,1(r16)
   190d0:	5021883a 	mov	r16,r10
   190d4:	12400017 	ldw	r9,0(r2)
   190d8:	10800104 	addi	r2,r2,4
   190dc:	d8802215 	stw	r2,136(sp)
   190e0:	483faf0e 	bge	r9,zero,18fa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018fa0>
   190e4:	18c03fcc 	andi	r3,r3,255
   190e8:	18c0201c 	xori	r3,r3,128
   190ec:	027fffc4 	movi	r9,-1
   190f0:	18ffe004 	addi	r3,r3,-128
   190f4:	003b6506 	br	17e8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017e8c>
   190f8:	d9c01d85 	stb	r7,118(sp)
   190fc:	003ca006 	br	18380 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018380>
   19100:	d9c01d85 	stb	r7,118(sp)
   19104:	003cad06 	br	183bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70183bc>
   19108:	d9c01d85 	stb	r7,118(sp)
   1910c:	003d7d06 	br	18704 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018704>
   19110:	d9c01d85 	stb	r7,118(sp)
   19114:	003d5f06 	br	18694 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018694>
   19118:	a080004c 	andi	r2,r20,1
   1911c:	0039883a 	mov	fp,zero
   19120:	10000526 	beq	r2,zero,19138 <___vfiprintf_internal_r+0x1428>
   19124:	00800c04 	movi	r2,48
   19128:	d88019c5 	stb	r2,103(sp)
   1912c:	dcc02717 	ldw	r19,156(sp)
   19130:	dd4019c4 	addi	r21,sp,103
   19134:	003bf606 	br	18110 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018110>
   19138:	0027883a 	mov	r19,zero
   1913c:	dd401a04 	addi	r21,sp,104
   19140:	003bf306 	br	18110 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018110>
   19144:	d9c01d85 	stb	r7,118(sp)
   19148:	003dc806 	br	1886c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701886c>
   1914c:	d9c01d85 	stb	r7,118(sp)
   19150:	003d3a06 	br	1863c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701863c>
   19154:	d9c01d85 	stb	r7,118(sp)
   19158:	003d2a06 	br	18604 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018604>
   1915c:	d9c01d85 	stb	r7,118(sp)
   19160:	003cde06 	br	184dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70184dc>
   19164:	d9c01d85 	stb	r7,118(sp)
   19168:	003cbc06 	br	1845c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701845c>

0001916c <__vfiprintf_internal>:
   1916c:	008000f4 	movhi	r2,3
   19170:	10a9b404 	addi	r2,r2,-22832
   19174:	300f883a 	mov	r7,r6
   19178:	280d883a 	mov	r6,r5
   1917c:	200b883a 	mov	r5,r4
   19180:	11000017 	ldw	r4,0(r2)
   19184:	0017d101 	jmpi	17d10 <___vfiprintf_internal_r>

00019188 <__sbprintf>:
   19188:	2880030b 	ldhu	r2,12(r5)
   1918c:	2ac01917 	ldw	r11,100(r5)
   19190:	2a80038b 	ldhu	r10,14(r5)
   19194:	2a400717 	ldw	r9,28(r5)
   19198:	2a000917 	ldw	r8,36(r5)
   1919c:	defee204 	addi	sp,sp,-1144
   191a0:	00c10004 	movi	r3,1024
   191a4:	dc011a15 	stw	r16,1128(sp)
   191a8:	10bfff4c 	andi	r2,r2,65533
   191ac:	2821883a 	mov	r16,r5
   191b0:	d8cb883a 	add	r5,sp,r3
   191b4:	dc811c15 	stw	r18,1136(sp)
   191b8:	dc411b15 	stw	r17,1132(sp)
   191bc:	dfc11d15 	stw	ra,1140(sp)
   191c0:	2025883a 	mov	r18,r4
   191c4:	d881030d 	sth	r2,1036(sp)
   191c8:	dac11915 	stw	r11,1124(sp)
   191cc:	da81038d 	sth	r10,1038(sp)
   191d0:	da410715 	stw	r9,1052(sp)
   191d4:	da010915 	stw	r8,1060(sp)
   191d8:	dec10015 	stw	sp,1024(sp)
   191dc:	dec10415 	stw	sp,1040(sp)
   191e0:	d8c10215 	stw	r3,1032(sp)
   191e4:	d8c10515 	stw	r3,1044(sp)
   191e8:	d8010615 	stw	zero,1048(sp)
   191ec:	0017d100 	call	17d10 <___vfiprintf_internal_r>
   191f0:	1023883a 	mov	r17,r2
   191f4:	10000416 	blt	r2,zero,19208 <__sbprintf+0x80>
   191f8:	d9410004 	addi	r5,sp,1024
   191fc:	9009883a 	mov	r4,r18
   19200:	0013dd80 	call	13dd8 <_fflush_r>
   19204:	10000d1e 	bne	r2,zero,1923c <__sbprintf+0xb4>
   19208:	d881030b 	ldhu	r2,1036(sp)
   1920c:	1080100c 	andi	r2,r2,64
   19210:	10000326 	beq	r2,zero,19220 <__sbprintf+0x98>
   19214:	8080030b 	ldhu	r2,12(r16)
   19218:	10801014 	ori	r2,r2,64
   1921c:	8080030d 	sth	r2,12(r16)
   19220:	8805883a 	mov	r2,r17
   19224:	dfc11d17 	ldw	ra,1140(sp)
   19228:	dc811c17 	ldw	r18,1136(sp)
   1922c:	dc411b17 	ldw	r17,1132(sp)
   19230:	dc011a17 	ldw	r16,1128(sp)
   19234:	dec11e04 	addi	sp,sp,1144
   19238:	f800283a 	ret
   1923c:	047fffc4 	movi	r17,-1
   19240:	003ff106 	br	19208 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019208>

00019244 <_write_r>:
   19244:	defffd04 	addi	sp,sp,-12
   19248:	2805883a 	mov	r2,r5
   1924c:	dc000015 	stw	r16,0(sp)
   19250:	040000f4 	movhi	r16,3
   19254:	dc400115 	stw	r17,4(sp)
   19258:	300b883a 	mov	r5,r6
   1925c:	8431db04 	addi	r16,r16,-14484
   19260:	2023883a 	mov	r17,r4
   19264:	380d883a 	mov	r6,r7
   19268:	1009883a 	mov	r4,r2
   1926c:	dfc00215 	stw	ra,8(sp)
   19270:	80000015 	stw	zero,0(r16)
   19274:	001b0d40 	call	1b0d4 <write>
   19278:	00ffffc4 	movi	r3,-1
   1927c:	10c00526 	beq	r2,r3,19294 <_write_r+0x50>
   19280:	dfc00217 	ldw	ra,8(sp)
   19284:	dc400117 	ldw	r17,4(sp)
   19288:	dc000017 	ldw	r16,0(sp)
   1928c:	dec00304 	addi	sp,sp,12
   19290:	f800283a 	ret
   19294:	80c00017 	ldw	r3,0(r16)
   19298:	183ff926 	beq	r3,zero,19280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019280>
   1929c:	88c00015 	stw	r3,0(r17)
   192a0:	003ff706 	br	19280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019280>

000192a4 <_close_r>:
   192a4:	defffd04 	addi	sp,sp,-12
   192a8:	dc000015 	stw	r16,0(sp)
   192ac:	040000f4 	movhi	r16,3
   192b0:	dc400115 	stw	r17,4(sp)
   192b4:	8431db04 	addi	r16,r16,-14484
   192b8:	2023883a 	mov	r17,r4
   192bc:	2809883a 	mov	r4,r5
   192c0:	dfc00215 	stw	ra,8(sp)
   192c4:	80000015 	stw	zero,0(r16)
   192c8:	001a70c0 	call	1a70c <close>
   192cc:	00ffffc4 	movi	r3,-1
   192d0:	10c00526 	beq	r2,r3,192e8 <_close_r+0x44>
   192d4:	dfc00217 	ldw	ra,8(sp)
   192d8:	dc400117 	ldw	r17,4(sp)
   192dc:	dc000017 	ldw	r16,0(sp)
   192e0:	dec00304 	addi	sp,sp,12
   192e4:	f800283a 	ret
   192e8:	80c00017 	ldw	r3,0(r16)
   192ec:	183ff926 	beq	r3,zero,192d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70192d4>
   192f0:	88c00015 	stw	r3,0(r17)
   192f4:	003ff706 	br	192d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70192d4>

000192f8 <_calloc_r>:
   192f8:	298b383a 	mul	r5,r5,r6
   192fc:	defffe04 	addi	sp,sp,-8
   19300:	dfc00115 	stw	ra,4(sp)
   19304:	dc000015 	stw	r16,0(sp)
   19308:	000cb740 	call	cb74 <_malloc_r>
   1930c:	10002926 	beq	r2,zero,193b4 <_calloc_r+0xbc>
   19310:	11bfff17 	ldw	r6,-4(r2)
   19314:	1021883a 	mov	r16,r2
   19318:	00bfff04 	movi	r2,-4
   1931c:	308c703a 	and	r6,r6,r2
   19320:	00c00904 	movi	r3,36
   19324:	308d883a 	add	r6,r6,r2
   19328:	19801636 	bltu	r3,r6,19384 <_calloc_r+0x8c>
   1932c:	008004c4 	movi	r2,19
   19330:	11800b2e 	bgeu	r2,r6,19360 <_calloc_r+0x68>
   19334:	80000015 	stw	zero,0(r16)
   19338:	80000115 	stw	zero,4(r16)
   1933c:	008006c4 	movi	r2,27
   19340:	11801a2e 	bgeu	r2,r6,193ac <_calloc_r+0xb4>
   19344:	80000215 	stw	zero,8(r16)
   19348:	80000315 	stw	zero,12(r16)
   1934c:	30c0151e 	bne	r6,r3,193a4 <_calloc_r+0xac>
   19350:	80000415 	stw	zero,16(r16)
   19354:	80800604 	addi	r2,r16,24
   19358:	80000515 	stw	zero,20(r16)
   1935c:	00000106 	br	19364 <_calloc_r+0x6c>
   19360:	8005883a 	mov	r2,r16
   19364:	10000015 	stw	zero,0(r2)
   19368:	10000115 	stw	zero,4(r2)
   1936c:	10000215 	stw	zero,8(r2)
   19370:	8005883a 	mov	r2,r16
   19374:	dfc00117 	ldw	ra,4(sp)
   19378:	dc000017 	ldw	r16,0(sp)
   1937c:	dec00204 	addi	sp,sp,8
   19380:	f800283a 	ret
   19384:	000b883a 	mov	r5,zero
   19388:	8009883a 	mov	r4,r16
   1938c:	000d4c80 	call	d4c8 <memset>
   19390:	8005883a 	mov	r2,r16
   19394:	dfc00117 	ldw	ra,4(sp)
   19398:	dc000017 	ldw	r16,0(sp)
   1939c:	dec00204 	addi	sp,sp,8
   193a0:	f800283a 	ret
   193a4:	80800404 	addi	r2,r16,16
   193a8:	003fee06 	br	19364 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019364>
   193ac:	80800204 	addi	r2,r16,8
   193b0:	003fec06 	br	19364 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019364>
   193b4:	0005883a 	mov	r2,zero
   193b8:	003fee06 	br	19374 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019374>

000193bc <_fclose_r>:
   193bc:	28003926 	beq	r5,zero,194a4 <_fclose_r+0xe8>
   193c0:	defffc04 	addi	sp,sp,-16
   193c4:	dc400115 	stw	r17,4(sp)
   193c8:	dc000015 	stw	r16,0(sp)
   193cc:	dfc00315 	stw	ra,12(sp)
   193d0:	dc800215 	stw	r18,8(sp)
   193d4:	2023883a 	mov	r17,r4
   193d8:	2821883a 	mov	r16,r5
   193dc:	20000226 	beq	r4,zero,193e8 <_fclose_r+0x2c>
   193e0:	20800e17 	ldw	r2,56(r4)
   193e4:	10002726 	beq	r2,zero,19484 <_fclose_r+0xc8>
   193e8:	8080030f 	ldh	r2,12(r16)
   193ec:	1000071e 	bne	r2,zero,1940c <_fclose_r+0x50>
   193f0:	0005883a 	mov	r2,zero
   193f4:	dfc00317 	ldw	ra,12(sp)
   193f8:	dc800217 	ldw	r18,8(sp)
   193fc:	dc400117 	ldw	r17,4(sp)
   19400:	dc000017 	ldw	r16,0(sp)
   19404:	dec00404 	addi	sp,sp,16
   19408:	f800283a 	ret
   1940c:	800b883a 	mov	r5,r16
   19410:	8809883a 	mov	r4,r17
   19414:	0013bbc0 	call	13bbc <__sflush_r>
   19418:	1025883a 	mov	r18,r2
   1941c:	80800b17 	ldw	r2,44(r16)
   19420:	10000426 	beq	r2,zero,19434 <_fclose_r+0x78>
   19424:	81400717 	ldw	r5,28(r16)
   19428:	8809883a 	mov	r4,r17
   1942c:	103ee83a 	callr	r2
   19430:	10001616 	blt	r2,zero,1948c <_fclose_r+0xd0>
   19434:	8080030b 	ldhu	r2,12(r16)
   19438:	1080200c 	andi	r2,r2,128
   1943c:	1000151e 	bne	r2,zero,19494 <_fclose_r+0xd8>
   19440:	81400c17 	ldw	r5,48(r16)
   19444:	28000526 	beq	r5,zero,1945c <_fclose_r+0xa0>
   19448:	80801004 	addi	r2,r16,64
   1944c:	28800226 	beq	r5,r2,19458 <_fclose_r+0x9c>
   19450:	8809883a 	mov	r4,r17
   19454:	00143280 	call	14328 <_free_r>
   19458:	80000c15 	stw	zero,48(r16)
   1945c:	81401117 	ldw	r5,68(r16)
   19460:	28000326 	beq	r5,zero,19470 <_fclose_r+0xb4>
   19464:	8809883a 	mov	r4,r17
   19468:	00143280 	call	14328 <_free_r>
   1946c:	80001115 	stw	zero,68(r16)
   19470:	00141c40 	call	141c4 <__sfp_lock_acquire>
   19474:	8000030d 	sth	zero,12(r16)
   19478:	00141c80 	call	141c8 <__sfp_lock_release>
   1947c:	9005883a 	mov	r2,r18
   19480:	003fdc06 	br	193f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70193f4>
   19484:	00141b40 	call	141b4 <__sinit>
   19488:	003fd706 	br	193e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70193e8>
   1948c:	04bfffc4 	movi	r18,-1
   19490:	003fe806 	br	19434 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019434>
   19494:	81400417 	ldw	r5,16(r16)
   19498:	8809883a 	mov	r4,r17
   1949c:	00143280 	call	14328 <_free_r>
   194a0:	003fe706 	br	19440 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019440>
   194a4:	0005883a 	mov	r2,zero
   194a8:	f800283a 	ret

000194ac <fclose>:
   194ac:	008000f4 	movhi	r2,3
   194b0:	10a9b404 	addi	r2,r2,-22832
   194b4:	200b883a 	mov	r5,r4
   194b8:	11000017 	ldw	r4,0(r2)
   194bc:	00193bc1 	jmpi	193bc <_fclose_r>

000194c0 <__fputwc>:
   194c0:	defff804 	addi	sp,sp,-32
   194c4:	dcc00415 	stw	r19,16(sp)
   194c8:	dc800315 	stw	r18,12(sp)
   194cc:	dc000115 	stw	r16,4(sp)
   194d0:	dfc00715 	stw	ra,28(sp)
   194d4:	dd400615 	stw	r21,24(sp)
   194d8:	dd000515 	stw	r20,20(sp)
   194dc:	dc400215 	stw	r17,8(sp)
   194e0:	2027883a 	mov	r19,r4
   194e4:	2825883a 	mov	r18,r5
   194e8:	3021883a 	mov	r16,r6
   194ec:	0014d040 	call	14d04 <__locale_mb_cur_max>
   194f0:	00c00044 	movi	r3,1
   194f4:	10c03e26 	beq	r2,r3,195f0 <__fputwc+0x130>
   194f8:	81c01704 	addi	r7,r16,92
   194fc:	900d883a 	mov	r6,r18
   19500:	d80b883a 	mov	r5,sp
   19504:	9809883a 	mov	r4,r19
   19508:	00199900 	call	19990 <_wcrtomb_r>
   1950c:	1029883a 	mov	r20,r2
   19510:	00bfffc4 	movi	r2,-1
   19514:	a0802026 	beq	r20,r2,19598 <__fputwc+0xd8>
   19518:	d9400003 	ldbu	r5,0(sp)
   1951c:	a0001c26 	beq	r20,zero,19590 <__fputwc+0xd0>
   19520:	0023883a 	mov	r17,zero
   19524:	05400284 	movi	r21,10
   19528:	00000906 	br	19550 <__fputwc+0x90>
   1952c:	80800017 	ldw	r2,0(r16)
   19530:	11400005 	stb	r5,0(r2)
   19534:	80c00017 	ldw	r3,0(r16)
   19538:	18c00044 	addi	r3,r3,1
   1953c:	80c00015 	stw	r3,0(r16)
   19540:	8c400044 	addi	r17,r17,1
   19544:	dc45883a 	add	r2,sp,r17
   19548:	8d00112e 	bgeu	r17,r20,19590 <__fputwc+0xd0>
   1954c:	11400003 	ldbu	r5,0(r2)
   19550:	80c00217 	ldw	r3,8(r16)
   19554:	18ffffc4 	addi	r3,r3,-1
   19558:	80c00215 	stw	r3,8(r16)
   1955c:	183ff30e 	bge	r3,zero,1952c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701952c>
   19560:	80800617 	ldw	r2,24(r16)
   19564:	18801916 	blt	r3,r2,195cc <__fputwc+0x10c>
   19568:	80800017 	ldw	r2,0(r16)
   1956c:	11400005 	stb	r5,0(r2)
   19570:	80800017 	ldw	r2,0(r16)
   19574:	10c00003 	ldbu	r3,0(r2)
   19578:	10800044 	addi	r2,r2,1
   1957c:	1d402326 	beq	r3,r21,1960c <__fputwc+0x14c>
   19580:	80800015 	stw	r2,0(r16)
   19584:	8c400044 	addi	r17,r17,1
   19588:	dc45883a 	add	r2,sp,r17
   1958c:	8d3fef36 	bltu	r17,r20,1954c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701954c>
   19590:	9005883a 	mov	r2,r18
   19594:	00000406 	br	195a8 <__fputwc+0xe8>
   19598:	80c0030b 	ldhu	r3,12(r16)
   1959c:	a005883a 	mov	r2,r20
   195a0:	18c01014 	ori	r3,r3,64
   195a4:	80c0030d 	sth	r3,12(r16)
   195a8:	dfc00717 	ldw	ra,28(sp)
   195ac:	dd400617 	ldw	r21,24(sp)
   195b0:	dd000517 	ldw	r20,20(sp)
   195b4:	dcc00417 	ldw	r19,16(sp)
   195b8:	dc800317 	ldw	r18,12(sp)
   195bc:	dc400217 	ldw	r17,8(sp)
   195c0:	dc000117 	ldw	r16,4(sp)
   195c4:	dec00804 	addi	sp,sp,32
   195c8:	f800283a 	ret
   195cc:	800d883a 	mov	r6,r16
   195d0:	29403fcc 	andi	r5,r5,255
   195d4:	9809883a 	mov	r4,r19
   195d8:	00198380 	call	19838 <__swbuf_r>
   195dc:	10bfffe0 	cmpeqi	r2,r2,-1
   195e0:	10803fcc 	andi	r2,r2,255
   195e4:	103fd626 	beq	r2,zero,19540 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019540>
   195e8:	00bfffc4 	movi	r2,-1
   195ec:	003fee06 	br	195a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70195a8>
   195f0:	90ffffc4 	addi	r3,r18,-1
   195f4:	01003f84 	movi	r4,254
   195f8:	20ffbf36 	bltu	r4,r3,194f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70194f8>
   195fc:	900b883a 	mov	r5,r18
   19600:	dc800005 	stb	r18,0(sp)
   19604:	1029883a 	mov	r20,r2
   19608:	003fc506 	br	19520 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019520>
   1960c:	800d883a 	mov	r6,r16
   19610:	a80b883a 	mov	r5,r21
   19614:	9809883a 	mov	r4,r19
   19618:	00198380 	call	19838 <__swbuf_r>
   1961c:	10bfffe0 	cmpeqi	r2,r2,-1
   19620:	003fef06 	br	195e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70195e0>

00019624 <_fputwc_r>:
   19624:	3080030b 	ldhu	r2,12(r6)
   19628:	10c8000c 	andi	r3,r2,8192
   1962c:	1800051e 	bne	r3,zero,19644 <_fputwc_r+0x20>
   19630:	30c01917 	ldw	r3,100(r6)
   19634:	10880014 	ori	r2,r2,8192
   19638:	3080030d 	sth	r2,12(r6)
   1963c:	18880014 	ori	r2,r3,8192
   19640:	30801915 	stw	r2,100(r6)
   19644:	00194c01 	jmpi	194c0 <__fputwc>

00019648 <fputwc>:
   19648:	008000f4 	movhi	r2,3
   1964c:	defffc04 	addi	sp,sp,-16
   19650:	10a9b404 	addi	r2,r2,-22832
   19654:	dc000115 	stw	r16,4(sp)
   19658:	14000017 	ldw	r16,0(r2)
   1965c:	dc400215 	stw	r17,8(sp)
   19660:	dfc00315 	stw	ra,12(sp)
   19664:	2023883a 	mov	r17,r4
   19668:	80000226 	beq	r16,zero,19674 <fputwc+0x2c>
   1966c:	80800e17 	ldw	r2,56(r16)
   19670:	10001026 	beq	r2,zero,196b4 <fputwc+0x6c>
   19674:	2880030b 	ldhu	r2,12(r5)
   19678:	10c8000c 	andi	r3,r2,8192
   1967c:	1800051e 	bne	r3,zero,19694 <fputwc+0x4c>
   19680:	28c01917 	ldw	r3,100(r5)
   19684:	10880014 	ori	r2,r2,8192
   19688:	2880030d 	sth	r2,12(r5)
   1968c:	18880014 	ori	r2,r3,8192
   19690:	28801915 	stw	r2,100(r5)
   19694:	280d883a 	mov	r6,r5
   19698:	8009883a 	mov	r4,r16
   1969c:	880b883a 	mov	r5,r17
   196a0:	dfc00317 	ldw	ra,12(sp)
   196a4:	dc400217 	ldw	r17,8(sp)
   196a8:	dc000117 	ldw	r16,4(sp)
   196ac:	dec00404 	addi	sp,sp,16
   196b0:	00194c01 	jmpi	194c0 <__fputwc>
   196b4:	8009883a 	mov	r4,r16
   196b8:	d9400015 	stw	r5,0(sp)
   196bc:	00141b40 	call	141b4 <__sinit>
   196c0:	d9400017 	ldw	r5,0(sp)
   196c4:	003feb06 	br	19674 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019674>

000196c8 <_fstat_r>:
   196c8:	defffd04 	addi	sp,sp,-12
   196cc:	2805883a 	mov	r2,r5
   196d0:	dc000015 	stw	r16,0(sp)
   196d4:	040000f4 	movhi	r16,3
   196d8:	dc400115 	stw	r17,4(sp)
   196dc:	8431db04 	addi	r16,r16,-14484
   196e0:	2023883a 	mov	r17,r4
   196e4:	300b883a 	mov	r5,r6
   196e8:	1009883a 	mov	r4,r2
   196ec:	dfc00215 	stw	ra,8(sp)
   196f0:	80000015 	stw	zero,0(r16)
   196f4:	001a8780 	call	1a878 <fstat>
   196f8:	00ffffc4 	movi	r3,-1
   196fc:	10c00526 	beq	r2,r3,19714 <_fstat_r+0x4c>
   19700:	dfc00217 	ldw	ra,8(sp)
   19704:	dc400117 	ldw	r17,4(sp)
   19708:	dc000017 	ldw	r16,0(sp)
   1970c:	dec00304 	addi	sp,sp,12
   19710:	f800283a 	ret
   19714:	80c00017 	ldw	r3,0(r16)
   19718:	183ff926 	beq	r3,zero,19700 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019700>
   1971c:	88c00015 	stw	r3,0(r17)
   19720:	003ff706 	br	19700 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019700>

00019724 <_isatty_r>:
   19724:	defffd04 	addi	sp,sp,-12
   19728:	dc000015 	stw	r16,0(sp)
   1972c:	040000f4 	movhi	r16,3
   19730:	dc400115 	stw	r17,4(sp)
   19734:	8431db04 	addi	r16,r16,-14484
   19738:	2023883a 	mov	r17,r4
   1973c:	2809883a 	mov	r4,r5
   19740:	dfc00215 	stw	ra,8(sp)
   19744:	80000015 	stw	zero,0(r16)
   19748:	001a9840 	call	1a984 <isatty>
   1974c:	00ffffc4 	movi	r3,-1
   19750:	10c00526 	beq	r2,r3,19768 <_isatty_r+0x44>
   19754:	dfc00217 	ldw	ra,8(sp)
   19758:	dc400117 	ldw	r17,4(sp)
   1975c:	dc000017 	ldw	r16,0(sp)
   19760:	dec00304 	addi	sp,sp,12
   19764:	f800283a 	ret
   19768:	80c00017 	ldw	r3,0(r16)
   1976c:	183ff926 	beq	r3,zero,19754 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019754>
   19770:	88c00015 	stw	r3,0(r17)
   19774:	003ff706 	br	19754 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019754>

00019778 <_lseek_r>:
   19778:	defffd04 	addi	sp,sp,-12
   1977c:	2805883a 	mov	r2,r5
   19780:	dc000015 	stw	r16,0(sp)
   19784:	040000f4 	movhi	r16,3
   19788:	dc400115 	stw	r17,4(sp)
   1978c:	300b883a 	mov	r5,r6
   19790:	8431db04 	addi	r16,r16,-14484
   19794:	2023883a 	mov	r17,r4
   19798:	380d883a 	mov	r6,r7
   1979c:	1009883a 	mov	r4,r2
   197a0:	dfc00215 	stw	ra,8(sp)
   197a4:	80000015 	stw	zero,0(r16)
   197a8:	001acbc0 	call	1acbc <lseek>
   197ac:	00ffffc4 	movi	r3,-1
   197b0:	10c00526 	beq	r2,r3,197c8 <_lseek_r+0x50>
   197b4:	dfc00217 	ldw	ra,8(sp)
   197b8:	dc400117 	ldw	r17,4(sp)
   197bc:	dc000017 	ldw	r16,0(sp)
   197c0:	dec00304 	addi	sp,sp,12
   197c4:	f800283a 	ret
   197c8:	80c00017 	ldw	r3,0(r16)
   197cc:	183ff926 	beq	r3,zero,197b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70197b4>
   197d0:	88c00015 	stw	r3,0(r17)
   197d4:	003ff706 	br	197b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70197b4>

000197d8 <_read_r>:
   197d8:	defffd04 	addi	sp,sp,-12
   197dc:	2805883a 	mov	r2,r5
   197e0:	dc000015 	stw	r16,0(sp)
   197e4:	040000f4 	movhi	r16,3
   197e8:	dc400115 	stw	r17,4(sp)
   197ec:	300b883a 	mov	r5,r6
   197f0:	8431db04 	addi	r16,r16,-14484
   197f4:	2023883a 	mov	r17,r4
   197f8:	380d883a 	mov	r6,r7
   197fc:	1009883a 	mov	r4,r2
   19800:	dfc00215 	stw	ra,8(sp)
   19804:	80000015 	stw	zero,0(r16)
   19808:	001ae880 	call	1ae88 <read>
   1980c:	00ffffc4 	movi	r3,-1
   19810:	10c00526 	beq	r2,r3,19828 <_read_r+0x50>
   19814:	dfc00217 	ldw	ra,8(sp)
   19818:	dc400117 	ldw	r17,4(sp)
   1981c:	dc000017 	ldw	r16,0(sp)
   19820:	dec00304 	addi	sp,sp,12
   19824:	f800283a 	ret
   19828:	80c00017 	ldw	r3,0(r16)
   1982c:	183ff926 	beq	r3,zero,19814 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019814>
   19830:	88c00015 	stw	r3,0(r17)
   19834:	003ff706 	br	19814 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019814>

00019838 <__swbuf_r>:
   19838:	defffb04 	addi	sp,sp,-20
   1983c:	dcc00315 	stw	r19,12(sp)
   19840:	dc800215 	stw	r18,8(sp)
   19844:	dc000015 	stw	r16,0(sp)
   19848:	dfc00415 	stw	ra,16(sp)
   1984c:	dc400115 	stw	r17,4(sp)
   19850:	2025883a 	mov	r18,r4
   19854:	2827883a 	mov	r19,r5
   19858:	3021883a 	mov	r16,r6
   1985c:	20000226 	beq	r4,zero,19868 <__swbuf_r+0x30>
   19860:	20800e17 	ldw	r2,56(r4)
   19864:	10004226 	beq	r2,zero,19970 <__swbuf_r+0x138>
   19868:	80800617 	ldw	r2,24(r16)
   1986c:	8100030b 	ldhu	r4,12(r16)
   19870:	80800215 	stw	r2,8(r16)
   19874:	2080020c 	andi	r2,r4,8
   19878:	10003626 	beq	r2,zero,19954 <__swbuf_r+0x11c>
   1987c:	80c00417 	ldw	r3,16(r16)
   19880:	18003426 	beq	r3,zero,19954 <__swbuf_r+0x11c>
   19884:	2088000c 	andi	r2,r4,8192
   19888:	9c403fcc 	andi	r17,r19,255
   1988c:	10001a26 	beq	r2,zero,198f8 <__swbuf_r+0xc0>
   19890:	80800017 	ldw	r2,0(r16)
   19894:	81000517 	ldw	r4,20(r16)
   19898:	10c7c83a 	sub	r3,r2,r3
   1989c:	1900200e 	bge	r3,r4,19920 <__swbuf_r+0xe8>
   198a0:	18c00044 	addi	r3,r3,1
   198a4:	81000217 	ldw	r4,8(r16)
   198a8:	11400044 	addi	r5,r2,1
   198ac:	81400015 	stw	r5,0(r16)
   198b0:	213fffc4 	addi	r4,r4,-1
   198b4:	81000215 	stw	r4,8(r16)
   198b8:	14c00005 	stb	r19,0(r2)
   198bc:	80800517 	ldw	r2,20(r16)
   198c0:	10c01e26 	beq	r2,r3,1993c <__swbuf_r+0x104>
   198c4:	8080030b 	ldhu	r2,12(r16)
   198c8:	1080004c 	andi	r2,r2,1
   198cc:	10000226 	beq	r2,zero,198d8 <__swbuf_r+0xa0>
   198d0:	00800284 	movi	r2,10
   198d4:	88801926 	beq	r17,r2,1993c <__swbuf_r+0x104>
   198d8:	8805883a 	mov	r2,r17
   198dc:	dfc00417 	ldw	ra,16(sp)
   198e0:	dcc00317 	ldw	r19,12(sp)
   198e4:	dc800217 	ldw	r18,8(sp)
   198e8:	dc400117 	ldw	r17,4(sp)
   198ec:	dc000017 	ldw	r16,0(sp)
   198f0:	dec00504 	addi	sp,sp,20
   198f4:	f800283a 	ret
   198f8:	81401917 	ldw	r5,100(r16)
   198fc:	00b7ffc4 	movi	r2,-8193
   19900:	21080014 	ori	r4,r4,8192
   19904:	2884703a 	and	r2,r5,r2
   19908:	80801915 	stw	r2,100(r16)
   1990c:	80800017 	ldw	r2,0(r16)
   19910:	8100030d 	sth	r4,12(r16)
   19914:	81000517 	ldw	r4,20(r16)
   19918:	10c7c83a 	sub	r3,r2,r3
   1991c:	193fe016 	blt	r3,r4,198a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70198a0>
   19920:	800b883a 	mov	r5,r16
   19924:	9009883a 	mov	r4,r18
   19928:	0013dd80 	call	13dd8 <_fflush_r>
   1992c:	1000071e 	bne	r2,zero,1994c <__swbuf_r+0x114>
   19930:	80800017 	ldw	r2,0(r16)
   19934:	00c00044 	movi	r3,1
   19938:	003fda06 	br	198a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70198a4>
   1993c:	800b883a 	mov	r5,r16
   19940:	9009883a 	mov	r4,r18
   19944:	0013dd80 	call	13dd8 <_fflush_r>
   19948:	103fe326 	beq	r2,zero,198d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70198d8>
   1994c:	00bfffc4 	movi	r2,-1
   19950:	003fe206 	br	198dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70198dc>
   19954:	800b883a 	mov	r5,r16
   19958:	9009883a 	mov	r4,r18
   1995c:	00121e00 	call	121e0 <__swsetup_r>
   19960:	103ffa1e 	bne	r2,zero,1994c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701994c>
   19964:	8100030b 	ldhu	r4,12(r16)
   19968:	80c00417 	ldw	r3,16(r16)
   1996c:	003fc506 	br	19884 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019884>
   19970:	00141b40 	call	141b4 <__sinit>
   19974:	003fbc06 	br	19868 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019868>

00019978 <__swbuf>:
   19978:	008000f4 	movhi	r2,3
   1997c:	10a9b404 	addi	r2,r2,-22832
   19980:	280d883a 	mov	r6,r5
   19984:	200b883a 	mov	r5,r4
   19988:	11000017 	ldw	r4,0(r2)
   1998c:	00198381 	jmpi	19838 <__swbuf_r>

00019990 <_wcrtomb_r>:
   19990:	defff604 	addi	sp,sp,-40
   19994:	008000f4 	movhi	r2,3
   19998:	dc800815 	stw	r18,32(sp)
   1999c:	dc400715 	stw	r17,28(sp)
   199a0:	dc000615 	stw	r16,24(sp)
   199a4:	10a9b804 	addi	r2,r2,-22816
   199a8:	dfc00915 	stw	ra,36(sp)
   199ac:	2021883a 	mov	r16,r4
   199b0:	3823883a 	mov	r17,r7
   199b4:	14800017 	ldw	r18,0(r2)
   199b8:	28001426 	beq	r5,zero,19a0c <_wcrtomb_r+0x7c>
   199bc:	d9400415 	stw	r5,16(sp)
   199c0:	d9800515 	stw	r6,20(sp)
   199c4:	0014cf80 	call	14cf8 <__locale_charset>
   199c8:	d9800517 	ldw	r6,20(sp)
   199cc:	d9400417 	ldw	r5,16(sp)
   199d0:	100f883a 	mov	r7,r2
   199d4:	dc400015 	stw	r17,0(sp)
   199d8:	8009883a 	mov	r4,r16
   199dc:	903ee83a 	callr	r18
   199e0:	00ffffc4 	movi	r3,-1
   199e4:	10c0031e 	bne	r2,r3,199f4 <_wcrtomb_r+0x64>
   199e8:	88000015 	stw	zero,0(r17)
   199ec:	00c02284 	movi	r3,138
   199f0:	80c00015 	stw	r3,0(r16)
   199f4:	dfc00917 	ldw	ra,36(sp)
   199f8:	dc800817 	ldw	r18,32(sp)
   199fc:	dc400717 	ldw	r17,28(sp)
   19a00:	dc000617 	ldw	r16,24(sp)
   19a04:	dec00a04 	addi	sp,sp,40
   19a08:	f800283a 	ret
   19a0c:	0014cf80 	call	14cf8 <__locale_charset>
   19a10:	100f883a 	mov	r7,r2
   19a14:	dc400015 	stw	r17,0(sp)
   19a18:	000d883a 	mov	r6,zero
   19a1c:	d9400104 	addi	r5,sp,4
   19a20:	8009883a 	mov	r4,r16
   19a24:	903ee83a 	callr	r18
   19a28:	003fed06 	br	199e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70199e0>

00019a2c <wcrtomb>:
   19a2c:	defff604 	addi	sp,sp,-40
   19a30:	008000f4 	movhi	r2,3
   19a34:	dc800615 	stw	r18,24(sp)
   19a38:	dc400515 	stw	r17,20(sp)
   19a3c:	10a9b404 	addi	r2,r2,-22832
   19a40:	dfc00915 	stw	ra,36(sp)
   19a44:	dd000815 	stw	r20,32(sp)
   19a48:	dcc00715 	stw	r19,28(sp)
   19a4c:	dc000415 	stw	r16,16(sp)
   19a50:	3025883a 	mov	r18,r6
   19a54:	14400017 	ldw	r17,0(r2)
   19a58:	20001926 	beq	r4,zero,19ac0 <wcrtomb+0x94>
   19a5c:	008000f4 	movhi	r2,3
   19a60:	10a9b804 	addi	r2,r2,-22816
   19a64:	15000017 	ldw	r20,0(r2)
   19a68:	2021883a 	mov	r16,r4
   19a6c:	2827883a 	mov	r19,r5
   19a70:	0014cf80 	call	14cf8 <__locale_charset>
   19a74:	100f883a 	mov	r7,r2
   19a78:	dc800015 	stw	r18,0(sp)
   19a7c:	980d883a 	mov	r6,r19
   19a80:	800b883a 	mov	r5,r16
   19a84:	8809883a 	mov	r4,r17
   19a88:	a03ee83a 	callr	r20
   19a8c:	00ffffc4 	movi	r3,-1
   19a90:	10c0031e 	bne	r2,r3,19aa0 <wcrtomb+0x74>
   19a94:	90000015 	stw	zero,0(r18)
   19a98:	00c02284 	movi	r3,138
   19a9c:	88c00015 	stw	r3,0(r17)
   19aa0:	dfc00917 	ldw	ra,36(sp)
   19aa4:	dd000817 	ldw	r20,32(sp)
   19aa8:	dcc00717 	ldw	r19,28(sp)
   19aac:	dc800617 	ldw	r18,24(sp)
   19ab0:	dc400517 	ldw	r17,20(sp)
   19ab4:	dc000417 	ldw	r16,16(sp)
   19ab8:	dec00a04 	addi	sp,sp,40
   19abc:	f800283a 	ret
   19ac0:	008000f4 	movhi	r2,3
   19ac4:	10a9b804 	addi	r2,r2,-22816
   19ac8:	14000017 	ldw	r16,0(r2)
   19acc:	0014cf80 	call	14cf8 <__locale_charset>
   19ad0:	100f883a 	mov	r7,r2
   19ad4:	dc800015 	stw	r18,0(sp)
   19ad8:	000d883a 	mov	r6,zero
   19adc:	d9400104 	addi	r5,sp,4
   19ae0:	8809883a 	mov	r4,r17
   19ae4:	803ee83a 	callr	r16
   19ae8:	003fe806 	br	19a8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019a8c>

00019aec <__ascii_wctomb>:
   19aec:	28000526 	beq	r5,zero,19b04 <__ascii_wctomb+0x18>
   19af0:	00803fc4 	movi	r2,255
   19af4:	11800536 	bltu	r2,r6,19b0c <__ascii_wctomb+0x20>
   19af8:	29800005 	stb	r6,0(r5)
   19afc:	00800044 	movi	r2,1
   19b00:	f800283a 	ret
   19b04:	0005883a 	mov	r2,zero
   19b08:	f800283a 	ret
   19b0c:	00802284 	movi	r2,138
   19b10:	20800015 	stw	r2,0(r4)
   19b14:	00bfffc4 	movi	r2,-1
   19b18:	f800283a 	ret

00019b1c <_wctomb_r>:
   19b1c:	008000f4 	movhi	r2,3
   19b20:	defff904 	addi	sp,sp,-28
   19b24:	10a9b804 	addi	r2,r2,-22816
   19b28:	dfc00615 	stw	ra,24(sp)
   19b2c:	dc400515 	stw	r17,20(sp)
   19b30:	dc000415 	stw	r16,16(sp)
   19b34:	3823883a 	mov	r17,r7
   19b38:	14000017 	ldw	r16,0(r2)
   19b3c:	d9000115 	stw	r4,4(sp)
   19b40:	d9400215 	stw	r5,8(sp)
   19b44:	d9800315 	stw	r6,12(sp)
   19b48:	0014cf80 	call	14cf8 <__locale_charset>
   19b4c:	d9800317 	ldw	r6,12(sp)
   19b50:	d9400217 	ldw	r5,8(sp)
   19b54:	d9000117 	ldw	r4,4(sp)
   19b58:	100f883a 	mov	r7,r2
   19b5c:	dc400015 	stw	r17,0(sp)
   19b60:	803ee83a 	callr	r16
   19b64:	dfc00617 	ldw	ra,24(sp)
   19b68:	dc400517 	ldw	r17,20(sp)
   19b6c:	dc000417 	ldw	r16,16(sp)
   19b70:	dec00704 	addi	sp,sp,28
   19b74:	f800283a 	ret

00019b78 <__udivdi3>:
   19b78:	defff504 	addi	sp,sp,-44
   19b7c:	dcc00415 	stw	r19,16(sp)
   19b80:	dc000115 	stw	r16,4(sp)
   19b84:	dfc00a15 	stw	ra,40(sp)
   19b88:	df000915 	stw	fp,36(sp)
   19b8c:	ddc00815 	stw	r23,32(sp)
   19b90:	dd800715 	stw	r22,28(sp)
   19b94:	dd400615 	stw	r21,24(sp)
   19b98:	dd000515 	stw	r20,20(sp)
   19b9c:	dc800315 	stw	r18,12(sp)
   19ba0:	dc400215 	stw	r17,8(sp)
   19ba4:	2027883a 	mov	r19,r4
   19ba8:	2821883a 	mov	r16,r5
   19bac:	3800411e 	bne	r7,zero,19cb4 <__udivdi3+0x13c>
   19bb0:	3023883a 	mov	r17,r6
   19bb4:	2025883a 	mov	r18,r4
   19bb8:	2980522e 	bgeu	r5,r6,19d04 <__udivdi3+0x18c>
   19bbc:	00bfffd4 	movui	r2,65535
   19bc0:	282d883a 	mov	r22,r5
   19bc4:	1180a836 	bltu	r2,r6,19e68 <__udivdi3+0x2f0>
   19bc8:	00803fc4 	movi	r2,255
   19bcc:	1185803a 	cmpltu	r2,r2,r6
   19bd0:	100490fa 	slli	r2,r2,3
   19bd4:	3086d83a 	srl	r3,r6,r2
   19bd8:	010000f4 	movhi	r4,3
   19bdc:	21207004 	addi	r4,r4,-32320
   19be0:	20c7883a 	add	r3,r4,r3
   19be4:	18c00003 	ldbu	r3,0(r3)
   19be8:	1885883a 	add	r2,r3,r2
   19bec:	00c00804 	movi	r3,32
   19bf0:	1887c83a 	sub	r3,r3,r2
   19bf4:	18000526 	beq	r3,zero,19c0c <__udivdi3+0x94>
   19bf8:	80e0983a 	sll	r16,r16,r3
   19bfc:	9884d83a 	srl	r2,r19,r2
   19c00:	30e2983a 	sll	r17,r6,r3
   19c04:	98e4983a 	sll	r18,r19,r3
   19c08:	142cb03a 	or	r22,r2,r16
   19c0c:	882ad43a 	srli	r21,r17,16
   19c10:	b009883a 	mov	r4,r22
   19c14:	8d3fffcc 	andi	r20,r17,65535
   19c18:	a80b883a 	mov	r5,r21
   19c1c:	000cacc0 	call	cacc <__umodsi3>
   19c20:	b009883a 	mov	r4,r22
   19c24:	a80b883a 	mov	r5,r21
   19c28:	1027883a 	mov	r19,r2
   19c2c:	000ca680 	call	ca68 <__udivsi3>
   19c30:	102d883a 	mov	r22,r2
   19c34:	9826943a 	slli	r19,r19,16
   19c38:	9004d43a 	srli	r2,r18,16
   19c3c:	a5a1383a 	mul	r16,r20,r22
   19c40:	14c4b03a 	or	r2,r2,r19
   19c44:	1400052e 	bgeu	r2,r16,19c5c <__udivdi3+0xe4>
   19c48:	1445883a 	add	r2,r2,r17
   19c4c:	b0ffffc4 	addi	r3,r22,-1
   19c50:	14400136 	bltu	r2,r17,19c58 <__udivdi3+0xe0>
   19c54:	14012336 	bltu	r2,r16,1a0e4 <__udivdi3+0x56c>
   19c58:	182d883a 	mov	r22,r3
   19c5c:	1421c83a 	sub	r16,r2,r16
   19c60:	a80b883a 	mov	r5,r21
   19c64:	8009883a 	mov	r4,r16
   19c68:	000cacc0 	call	cacc <__umodsi3>
   19c6c:	1027883a 	mov	r19,r2
   19c70:	a80b883a 	mov	r5,r21
   19c74:	8009883a 	mov	r4,r16
   19c78:	000ca680 	call	ca68 <__udivsi3>
   19c7c:	9826943a 	slli	r19,r19,16
   19c80:	a0a9383a 	mul	r20,r20,r2
   19c84:	94bfffcc 	andi	r18,r18,65535
   19c88:	94e4b03a 	or	r18,r18,r19
   19c8c:	9500052e 	bgeu	r18,r20,19ca4 <__udivdi3+0x12c>
   19c90:	8ca5883a 	add	r18,r17,r18
   19c94:	10ffffc4 	addi	r3,r2,-1
   19c98:	9440f136 	bltu	r18,r17,1a060 <__udivdi3+0x4e8>
   19c9c:	9500f02e 	bgeu	r18,r20,1a060 <__udivdi3+0x4e8>
   19ca0:	10bfff84 	addi	r2,r2,-2
   19ca4:	b00c943a 	slli	r6,r22,16
   19ca8:	0007883a 	mov	r3,zero
   19cac:	3084b03a 	or	r2,r6,r2
   19cb0:	00005906 	br	19e18 <__udivdi3+0x2a0>
   19cb4:	29c05636 	bltu	r5,r7,19e10 <__udivdi3+0x298>
   19cb8:	00bfffd4 	movui	r2,65535
   19cbc:	11c0622e 	bgeu	r2,r7,19e48 <__udivdi3+0x2d0>
   19cc0:	00804034 	movhi	r2,256
   19cc4:	10bfffc4 	addi	r2,r2,-1
   19cc8:	11c0ee36 	bltu	r2,r7,1a084 <__udivdi3+0x50c>
   19ccc:	00800404 	movi	r2,16
   19cd0:	3886d83a 	srl	r3,r7,r2
   19cd4:	010000f4 	movhi	r4,3
   19cd8:	21207004 	addi	r4,r4,-32320
   19cdc:	20c7883a 	add	r3,r4,r3
   19ce0:	18c00003 	ldbu	r3,0(r3)
   19ce4:	05400804 	movi	r21,32
   19ce8:	1885883a 	add	r2,r3,r2
   19cec:	a8abc83a 	sub	r21,r21,r2
   19cf0:	a800621e 	bne	r21,zero,19e7c <__udivdi3+0x304>
   19cf4:	3c00e936 	bltu	r7,r16,1a09c <__udivdi3+0x524>
   19cf8:	9985403a 	cmpgeu	r2,r19,r6
   19cfc:	0007883a 	mov	r3,zero
   19d00:	00004506 	br	19e18 <__udivdi3+0x2a0>
   19d04:	3000041e 	bne	r6,zero,19d18 <__udivdi3+0x1a0>
   19d08:	000b883a 	mov	r5,zero
   19d0c:	01000044 	movi	r4,1
   19d10:	000ca680 	call	ca68 <__udivsi3>
   19d14:	1023883a 	mov	r17,r2
   19d18:	00bfffd4 	movui	r2,65535
   19d1c:	14404e2e 	bgeu	r2,r17,19e58 <__udivdi3+0x2e0>
   19d20:	00804034 	movhi	r2,256
   19d24:	10bfffc4 	addi	r2,r2,-1
   19d28:	1440d836 	bltu	r2,r17,1a08c <__udivdi3+0x514>
   19d2c:	00800404 	movi	r2,16
   19d30:	8886d83a 	srl	r3,r17,r2
   19d34:	010000f4 	movhi	r4,3
   19d38:	21207004 	addi	r4,r4,-32320
   19d3c:	20c7883a 	add	r3,r4,r3
   19d40:	18c00003 	ldbu	r3,0(r3)
   19d44:	1885883a 	add	r2,r3,r2
   19d48:	00c00804 	movi	r3,32
   19d4c:	1887c83a 	sub	r3,r3,r2
   19d50:	18008f1e 	bne	r3,zero,19f90 <__udivdi3+0x418>
   19d54:	882ad43a 	srli	r21,r17,16
   19d58:	8461c83a 	sub	r16,r16,r17
   19d5c:	8d3fffcc 	andi	r20,r17,65535
   19d60:	00c00044 	movi	r3,1
   19d64:	8009883a 	mov	r4,r16
   19d68:	a80b883a 	mov	r5,r21
   19d6c:	d8c00015 	stw	r3,0(sp)
   19d70:	000cacc0 	call	cacc <__umodsi3>
   19d74:	8009883a 	mov	r4,r16
   19d78:	a80b883a 	mov	r5,r21
   19d7c:	1027883a 	mov	r19,r2
   19d80:	000ca680 	call	ca68 <__udivsi3>
   19d84:	9826943a 	slli	r19,r19,16
   19d88:	9008d43a 	srli	r4,r18,16
   19d8c:	1521383a 	mul	r16,r2,r20
   19d90:	102d883a 	mov	r22,r2
   19d94:	24c8b03a 	or	r4,r4,r19
   19d98:	d8c00017 	ldw	r3,0(sp)
   19d9c:	2400052e 	bgeu	r4,r16,19db4 <__udivdi3+0x23c>
   19da0:	2449883a 	add	r4,r4,r17
   19da4:	b0bfffc4 	addi	r2,r22,-1
   19da8:	24400136 	bltu	r4,r17,19db0 <__udivdi3+0x238>
   19dac:	2400ca36 	bltu	r4,r16,1a0d8 <__udivdi3+0x560>
   19db0:	102d883a 	mov	r22,r2
   19db4:	2421c83a 	sub	r16,r4,r16
   19db8:	a80b883a 	mov	r5,r21
   19dbc:	8009883a 	mov	r4,r16
   19dc0:	d8c00015 	stw	r3,0(sp)
   19dc4:	000cacc0 	call	cacc <__umodsi3>
   19dc8:	1027883a 	mov	r19,r2
   19dcc:	a80b883a 	mov	r5,r21
   19dd0:	8009883a 	mov	r4,r16
   19dd4:	000ca680 	call	ca68 <__udivsi3>
   19dd8:	9826943a 	slli	r19,r19,16
   19ddc:	1529383a 	mul	r20,r2,r20
   19de0:	94bfffcc 	andi	r18,r18,65535
   19de4:	94e4b03a 	or	r18,r18,r19
   19de8:	d8c00017 	ldw	r3,0(sp)
   19dec:	9500052e 	bgeu	r18,r20,19e04 <__udivdi3+0x28c>
   19df0:	8ca5883a 	add	r18,r17,r18
   19df4:	113fffc4 	addi	r4,r2,-1
   19df8:	94409736 	bltu	r18,r17,1a058 <__udivdi3+0x4e0>
   19dfc:	9500962e 	bgeu	r18,r20,1a058 <__udivdi3+0x4e0>
   19e00:	10bfff84 	addi	r2,r2,-2
   19e04:	b00c943a 	slli	r6,r22,16
   19e08:	3084b03a 	or	r2,r6,r2
   19e0c:	00000206 	br	19e18 <__udivdi3+0x2a0>
   19e10:	0007883a 	mov	r3,zero
   19e14:	0005883a 	mov	r2,zero
   19e18:	dfc00a17 	ldw	ra,40(sp)
   19e1c:	df000917 	ldw	fp,36(sp)
   19e20:	ddc00817 	ldw	r23,32(sp)
   19e24:	dd800717 	ldw	r22,28(sp)
   19e28:	dd400617 	ldw	r21,24(sp)
   19e2c:	dd000517 	ldw	r20,20(sp)
   19e30:	dcc00417 	ldw	r19,16(sp)
   19e34:	dc800317 	ldw	r18,12(sp)
   19e38:	dc400217 	ldw	r17,8(sp)
   19e3c:	dc000117 	ldw	r16,4(sp)
   19e40:	dec00b04 	addi	sp,sp,44
   19e44:	f800283a 	ret
   19e48:	00803fc4 	movi	r2,255
   19e4c:	11c5803a 	cmpltu	r2,r2,r7
   19e50:	100490fa 	slli	r2,r2,3
   19e54:	003f9e06 	br	19cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019cd0>
   19e58:	00803fc4 	movi	r2,255
   19e5c:	1445803a 	cmpltu	r2,r2,r17
   19e60:	100490fa 	slli	r2,r2,3
   19e64:	003fb206 	br	19d30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019d30>
   19e68:	00804034 	movhi	r2,256
   19e6c:	10bfffc4 	addi	r2,r2,-1
   19e70:	11808836 	bltu	r2,r6,1a094 <__udivdi3+0x51c>
   19e74:	00800404 	movi	r2,16
   19e78:	003f5606 	br	19bd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019bd4>
   19e7c:	30aed83a 	srl	r23,r6,r2
   19e80:	3d4e983a 	sll	r7,r7,r21
   19e84:	80acd83a 	srl	r22,r16,r2
   19e88:	9884d83a 	srl	r2,r19,r2
   19e8c:	3deeb03a 	or	r23,r7,r23
   19e90:	b824d43a 	srli	r18,r23,16
   19e94:	8560983a 	sll	r16,r16,r21
   19e98:	b009883a 	mov	r4,r22
   19e9c:	900b883a 	mov	r5,r18
   19ea0:	3568983a 	sll	r20,r6,r21
   19ea4:	1420b03a 	or	r16,r2,r16
   19ea8:	000cacc0 	call	cacc <__umodsi3>
   19eac:	b009883a 	mov	r4,r22
   19eb0:	900b883a 	mov	r5,r18
   19eb4:	1023883a 	mov	r17,r2
   19eb8:	000ca680 	call	ca68 <__udivsi3>
   19ebc:	8808943a 	slli	r4,r17,16
   19ec0:	bf3fffcc 	andi	fp,r23,65535
   19ec4:	8006d43a 	srli	r3,r16,16
   19ec8:	e0a3383a 	mul	r17,fp,r2
   19ecc:	100d883a 	mov	r6,r2
   19ed0:	1906b03a 	or	r3,r3,r4
   19ed4:	1c40042e 	bgeu	r3,r17,19ee8 <__udivdi3+0x370>
   19ed8:	1dc7883a 	add	r3,r3,r23
   19edc:	10bfffc4 	addi	r2,r2,-1
   19ee0:	1dc0752e 	bgeu	r3,r23,1a0b8 <__udivdi3+0x540>
   19ee4:	100d883a 	mov	r6,r2
   19ee8:	1c63c83a 	sub	r17,r3,r17
   19eec:	900b883a 	mov	r5,r18
   19ef0:	8809883a 	mov	r4,r17
   19ef4:	d9800015 	stw	r6,0(sp)
   19ef8:	000cacc0 	call	cacc <__umodsi3>
   19efc:	102d883a 	mov	r22,r2
   19f00:	8809883a 	mov	r4,r17
   19f04:	900b883a 	mov	r5,r18
   19f08:	000ca680 	call	ca68 <__udivsi3>
   19f0c:	b02c943a 	slli	r22,r22,16
   19f10:	e089383a 	mul	r4,fp,r2
   19f14:	843fffcc 	andi	r16,r16,65535
   19f18:	85a0b03a 	or	r16,r16,r22
   19f1c:	d9800017 	ldw	r6,0(sp)
   19f20:	8100042e 	bgeu	r16,r4,19f34 <__udivdi3+0x3bc>
   19f24:	85e1883a 	add	r16,r16,r23
   19f28:	10ffffc4 	addi	r3,r2,-1
   19f2c:	85c05e2e 	bgeu	r16,r23,1a0a8 <__udivdi3+0x530>
   19f30:	1805883a 	mov	r2,r3
   19f34:	300c943a 	slli	r6,r6,16
   19f38:	a17fffcc 	andi	r5,r20,65535
   19f3c:	a028d43a 	srli	r20,r20,16
   19f40:	3084b03a 	or	r2,r6,r2
   19f44:	10ffffcc 	andi	r3,r2,65535
   19f48:	100cd43a 	srli	r6,r2,16
   19f4c:	194f383a 	mul	r7,r3,r5
   19f50:	1d07383a 	mul	r3,r3,r20
   19f54:	314b383a 	mul	r5,r6,r5
   19f58:	3810d43a 	srli	r8,r7,16
   19f5c:	8121c83a 	sub	r16,r16,r4
   19f60:	1947883a 	add	r3,r3,r5
   19f64:	40c7883a 	add	r3,r8,r3
   19f68:	350d383a 	mul	r6,r6,r20
   19f6c:	1940022e 	bgeu	r3,r5,19f78 <__udivdi3+0x400>
   19f70:	01000074 	movhi	r4,1
   19f74:	310d883a 	add	r6,r6,r4
   19f78:	1828d43a 	srli	r20,r3,16
   19f7c:	a18d883a 	add	r6,r20,r6
   19f80:	81803e36 	bltu	r16,r6,1a07c <__udivdi3+0x504>
   19f84:	81803826 	beq	r16,r6,1a068 <__udivdi3+0x4f0>
   19f88:	0007883a 	mov	r3,zero
   19f8c:	003fa206 	br	19e18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019e18>
   19f90:	88e2983a 	sll	r17,r17,r3
   19f94:	80a8d83a 	srl	r20,r16,r2
   19f98:	80e0983a 	sll	r16,r16,r3
   19f9c:	882ad43a 	srli	r21,r17,16
   19fa0:	9884d83a 	srl	r2,r19,r2
   19fa4:	a009883a 	mov	r4,r20
   19fa8:	a80b883a 	mov	r5,r21
   19fac:	142eb03a 	or	r23,r2,r16
   19fb0:	98e4983a 	sll	r18,r19,r3
   19fb4:	000cacc0 	call	cacc <__umodsi3>
   19fb8:	a009883a 	mov	r4,r20
   19fbc:	a80b883a 	mov	r5,r21
   19fc0:	1021883a 	mov	r16,r2
   19fc4:	000ca680 	call	ca68 <__udivsi3>
   19fc8:	1039883a 	mov	fp,r2
   19fcc:	8d3fffcc 	andi	r20,r17,65535
   19fd0:	8020943a 	slli	r16,r16,16
   19fd4:	b804d43a 	srli	r2,r23,16
   19fd8:	a72d383a 	mul	r22,r20,fp
   19fdc:	1404b03a 	or	r2,r2,r16
   19fe0:	1580062e 	bgeu	r2,r22,19ffc <__udivdi3+0x484>
   19fe4:	1445883a 	add	r2,r2,r17
   19fe8:	e0ffffc4 	addi	r3,fp,-1
   19fec:	14403836 	bltu	r2,r17,1a0d0 <__udivdi3+0x558>
   19ff0:	1580372e 	bgeu	r2,r22,1a0d0 <__udivdi3+0x558>
   19ff4:	e73fff84 	addi	fp,fp,-2
   19ff8:	1445883a 	add	r2,r2,r17
   19ffc:	15adc83a 	sub	r22,r2,r22
   1a000:	a80b883a 	mov	r5,r21
   1a004:	b009883a 	mov	r4,r22
   1a008:	000cacc0 	call	cacc <__umodsi3>
   1a00c:	1027883a 	mov	r19,r2
   1a010:	b009883a 	mov	r4,r22
   1a014:	a80b883a 	mov	r5,r21
   1a018:	000ca680 	call	ca68 <__udivsi3>
   1a01c:	9826943a 	slli	r19,r19,16
   1a020:	a0a1383a 	mul	r16,r20,r2
   1a024:	b93fffcc 	andi	r4,r23,65535
   1a028:	24c8b03a 	or	r4,r4,r19
   1a02c:	2400062e 	bgeu	r4,r16,1a048 <__udivdi3+0x4d0>
   1a030:	2449883a 	add	r4,r4,r17
   1a034:	10ffffc4 	addi	r3,r2,-1
   1a038:	24402336 	bltu	r4,r17,1a0c8 <__udivdi3+0x550>
   1a03c:	2400222e 	bgeu	r4,r16,1a0c8 <__udivdi3+0x550>
   1a040:	10bfff84 	addi	r2,r2,-2
   1a044:	2449883a 	add	r4,r4,r17
   1a048:	e038943a 	slli	fp,fp,16
   1a04c:	2421c83a 	sub	r16,r4,r16
   1a050:	e086b03a 	or	r3,fp,r2
   1a054:	003f4306 	br	19d64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019d64>
   1a058:	2005883a 	mov	r2,r4
   1a05c:	003f6906 	br	19e04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019e04>
   1a060:	1805883a 	mov	r2,r3
   1a064:	003f0f06 	br	19ca4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019ca4>
   1a068:	1806943a 	slli	r3,r3,16
   1a06c:	9d66983a 	sll	r19,r19,r21
   1a070:	39ffffcc 	andi	r7,r7,65535
   1a074:	19c7883a 	add	r3,r3,r7
   1a078:	98ffc32e 	bgeu	r19,r3,19f88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019f88>
   1a07c:	10bfffc4 	addi	r2,r2,-1
   1a080:	003fc106 	br	19f88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019f88>
   1a084:	00800604 	movi	r2,24
   1a088:	003f1106 	br	19cd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019cd0>
   1a08c:	00800604 	movi	r2,24
   1a090:	003f2706 	br	19d30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019d30>
   1a094:	00800604 	movi	r2,24
   1a098:	003ece06 	br	19bd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019bd4>
   1a09c:	0007883a 	mov	r3,zero
   1a0a0:	00800044 	movi	r2,1
   1a0a4:	003f5c06 	br	19e18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019e18>
   1a0a8:	813fa12e 	bgeu	r16,r4,19f30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019f30>
   1a0ac:	10bfff84 	addi	r2,r2,-2
   1a0b0:	85e1883a 	add	r16,r16,r23
   1a0b4:	003f9f06 	br	19f34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019f34>
   1a0b8:	1c7f8a2e 	bgeu	r3,r17,19ee4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019ee4>
   1a0bc:	31bfff84 	addi	r6,r6,-2
   1a0c0:	1dc7883a 	add	r3,r3,r23
   1a0c4:	003f8806 	br	19ee8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019ee8>
   1a0c8:	1805883a 	mov	r2,r3
   1a0cc:	003fde06 	br	1a048 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a048>
   1a0d0:	1839883a 	mov	fp,r3
   1a0d4:	003fc906 	br	19ffc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019ffc>
   1a0d8:	b5bfff84 	addi	r22,r22,-2
   1a0dc:	2449883a 	add	r4,r4,r17
   1a0e0:	003f3406 	br	19db4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019db4>
   1a0e4:	b5bfff84 	addi	r22,r22,-2
   1a0e8:	1445883a 	add	r2,r2,r17
   1a0ec:	003edb06 	br	19c5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019c5c>

0001a0f0 <__umoddi3>:
   1a0f0:	defff404 	addi	sp,sp,-48
   1a0f4:	df000a15 	stw	fp,40(sp)
   1a0f8:	dc400315 	stw	r17,12(sp)
   1a0fc:	dc000215 	stw	r16,8(sp)
   1a100:	dfc00b15 	stw	ra,44(sp)
   1a104:	ddc00915 	stw	r23,36(sp)
   1a108:	dd800815 	stw	r22,32(sp)
   1a10c:	dd400715 	stw	r21,28(sp)
   1a110:	dd000615 	stw	r20,24(sp)
   1a114:	dcc00515 	stw	r19,20(sp)
   1a118:	dc800415 	stw	r18,16(sp)
   1a11c:	2021883a 	mov	r16,r4
   1a120:	2823883a 	mov	r17,r5
   1a124:	2839883a 	mov	fp,r5
   1a128:	38003c1e 	bne	r7,zero,1a21c <__umoddi3+0x12c>
   1a12c:	3027883a 	mov	r19,r6
   1a130:	2029883a 	mov	r20,r4
   1a134:	2980512e 	bgeu	r5,r6,1a27c <__umoddi3+0x18c>
   1a138:	00bfffd4 	movui	r2,65535
   1a13c:	11809a36 	bltu	r2,r6,1a3a8 <__umoddi3+0x2b8>
   1a140:	01003fc4 	movi	r4,255
   1a144:	2189803a 	cmpltu	r4,r4,r6
   1a148:	200890fa 	slli	r4,r4,3
   1a14c:	3104d83a 	srl	r2,r6,r4
   1a150:	00c000f4 	movhi	r3,3
   1a154:	18e07004 	addi	r3,r3,-32320
   1a158:	1885883a 	add	r2,r3,r2
   1a15c:	10c00003 	ldbu	r3,0(r2)
   1a160:	00800804 	movi	r2,32
   1a164:	1909883a 	add	r4,r3,r4
   1a168:	1125c83a 	sub	r18,r2,r4
   1a16c:	90000526 	beq	r18,zero,1a184 <__umoddi3+0x94>
   1a170:	8ca2983a 	sll	r17,r17,r18
   1a174:	8108d83a 	srl	r4,r16,r4
   1a178:	34a6983a 	sll	r19,r6,r18
   1a17c:	84a8983a 	sll	r20,r16,r18
   1a180:	2478b03a 	or	fp,r4,r17
   1a184:	982ed43a 	srli	r23,r19,16
   1a188:	e009883a 	mov	r4,fp
   1a18c:	9dbfffcc 	andi	r22,r19,65535
   1a190:	b80b883a 	mov	r5,r23
   1a194:	000cacc0 	call	cacc <__umodsi3>
   1a198:	e009883a 	mov	r4,fp
   1a19c:	b80b883a 	mov	r5,r23
   1a1a0:	102b883a 	mov	r21,r2
   1a1a4:	000ca680 	call	ca68 <__udivsi3>
   1a1a8:	a806943a 	slli	r3,r21,16
   1a1ac:	a008d43a 	srli	r4,r20,16
   1a1b0:	b085383a 	mul	r2,r22,r2
   1a1b4:	20c8b03a 	or	r4,r4,r3
   1a1b8:	2080032e 	bgeu	r4,r2,1a1c8 <__umoddi3+0xd8>
   1a1bc:	24c9883a 	add	r4,r4,r19
   1a1c0:	24c00136 	bltu	r4,r19,1a1c8 <__umoddi3+0xd8>
   1a1c4:	20811036 	bltu	r4,r2,1a608 <__umoddi3+0x518>
   1a1c8:	20abc83a 	sub	r21,r4,r2
   1a1cc:	b80b883a 	mov	r5,r23
   1a1d0:	a809883a 	mov	r4,r21
   1a1d4:	000cacc0 	call	cacc <__umodsi3>
   1a1d8:	1023883a 	mov	r17,r2
   1a1dc:	b80b883a 	mov	r5,r23
   1a1e0:	a809883a 	mov	r4,r21
   1a1e4:	000ca680 	call	ca68 <__udivsi3>
   1a1e8:	8822943a 	slli	r17,r17,16
   1a1ec:	b085383a 	mul	r2,r22,r2
   1a1f0:	a0ffffcc 	andi	r3,r20,65535
   1a1f4:	1c46b03a 	or	r3,r3,r17
   1a1f8:	1880042e 	bgeu	r3,r2,1a20c <__umoddi3+0x11c>
   1a1fc:	1cc7883a 	add	r3,r3,r19
   1a200:	1cc00236 	bltu	r3,r19,1a20c <__umoddi3+0x11c>
   1a204:	1880012e 	bgeu	r3,r2,1a20c <__umoddi3+0x11c>
   1a208:	1cc7883a 	add	r3,r3,r19
   1a20c:	1885c83a 	sub	r2,r3,r2
   1a210:	1484d83a 	srl	r2,r2,r18
   1a214:	0007883a 	mov	r3,zero
   1a218:	00004f06 	br	1a358 <__umoddi3+0x268>
   1a21c:	29c04c36 	bltu	r5,r7,1a350 <__umoddi3+0x260>
   1a220:	00bfffd4 	movui	r2,65535
   1a224:	11c0582e 	bgeu	r2,r7,1a388 <__umoddi3+0x298>
   1a228:	00804034 	movhi	r2,256
   1a22c:	10bfffc4 	addi	r2,r2,-1
   1a230:	11c0e736 	bltu	r2,r7,1a5d0 <__umoddi3+0x4e0>
   1a234:	01000404 	movi	r4,16
   1a238:	3904d83a 	srl	r2,r7,r4
   1a23c:	00c000f4 	movhi	r3,3
   1a240:	18e07004 	addi	r3,r3,-32320
   1a244:	1885883a 	add	r2,r3,r2
   1a248:	14c00003 	ldbu	r19,0(r2)
   1a24c:	00c00804 	movi	r3,32
   1a250:	9927883a 	add	r19,r19,r4
   1a254:	1ce9c83a 	sub	r20,r3,r19
   1a258:	a000581e 	bne	r20,zero,1a3bc <__umoddi3+0x2cc>
   1a25c:	3c400136 	bltu	r7,r17,1a264 <__umoddi3+0x174>
   1a260:	8180eb36 	bltu	r16,r6,1a610 <__umoddi3+0x520>
   1a264:	8185c83a 	sub	r2,r16,r6
   1a268:	89e3c83a 	sub	r17,r17,r7
   1a26c:	8089803a 	cmpltu	r4,r16,r2
   1a270:	8939c83a 	sub	fp,r17,r4
   1a274:	e007883a 	mov	r3,fp
   1a278:	00003706 	br	1a358 <__umoddi3+0x268>
   1a27c:	3000041e 	bne	r6,zero,1a290 <__umoddi3+0x1a0>
   1a280:	000b883a 	mov	r5,zero
   1a284:	01000044 	movi	r4,1
   1a288:	000ca680 	call	ca68 <__udivsi3>
   1a28c:	1027883a 	mov	r19,r2
   1a290:	00bfffd4 	movui	r2,65535
   1a294:	14c0402e 	bgeu	r2,r19,1a398 <__umoddi3+0x2a8>
   1a298:	00804034 	movhi	r2,256
   1a29c:	10bfffc4 	addi	r2,r2,-1
   1a2a0:	14c0cd36 	bltu	r2,r19,1a5d8 <__umoddi3+0x4e8>
   1a2a4:	00800404 	movi	r2,16
   1a2a8:	9886d83a 	srl	r3,r19,r2
   1a2ac:	010000f4 	movhi	r4,3
   1a2b0:	21207004 	addi	r4,r4,-32320
   1a2b4:	20c7883a 	add	r3,r4,r3
   1a2b8:	18c00003 	ldbu	r3,0(r3)
   1a2bc:	1887883a 	add	r3,r3,r2
   1a2c0:	00800804 	movi	r2,32
   1a2c4:	10e5c83a 	sub	r18,r2,r3
   1a2c8:	9000901e 	bne	r18,zero,1a50c <__umoddi3+0x41c>
   1a2cc:	982cd43a 	srli	r22,r19,16
   1a2d0:	8ce3c83a 	sub	r17,r17,r19
   1a2d4:	9d7fffcc 	andi	r21,r19,65535
   1a2d8:	b00b883a 	mov	r5,r22
   1a2dc:	8809883a 	mov	r4,r17
   1a2e0:	000cacc0 	call	cacc <__umodsi3>
   1a2e4:	8809883a 	mov	r4,r17
   1a2e8:	b00b883a 	mov	r5,r22
   1a2ec:	1021883a 	mov	r16,r2
   1a2f0:	000ca680 	call	ca68 <__udivsi3>
   1a2f4:	8006943a 	slli	r3,r16,16
   1a2f8:	a008d43a 	srli	r4,r20,16
   1a2fc:	1545383a 	mul	r2,r2,r21
   1a300:	20c8b03a 	or	r4,r4,r3
   1a304:	2080042e 	bgeu	r4,r2,1a318 <__umoddi3+0x228>
   1a308:	24c9883a 	add	r4,r4,r19
   1a30c:	24c00236 	bltu	r4,r19,1a318 <__umoddi3+0x228>
   1a310:	2080012e 	bgeu	r4,r2,1a318 <__umoddi3+0x228>
   1a314:	24c9883a 	add	r4,r4,r19
   1a318:	20a1c83a 	sub	r16,r4,r2
   1a31c:	b00b883a 	mov	r5,r22
   1a320:	8009883a 	mov	r4,r16
   1a324:	000cacc0 	call	cacc <__umodsi3>
   1a328:	1023883a 	mov	r17,r2
   1a32c:	b00b883a 	mov	r5,r22
   1a330:	8009883a 	mov	r4,r16
   1a334:	000ca680 	call	ca68 <__udivsi3>
   1a338:	8822943a 	slli	r17,r17,16
   1a33c:	1545383a 	mul	r2,r2,r21
   1a340:	a53fffcc 	andi	r20,r20,65535
   1a344:	a446b03a 	or	r3,r20,r17
   1a348:	18bfb02e 	bgeu	r3,r2,1a20c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a20c>
   1a34c:	003fab06 	br	1a1fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a1fc>
   1a350:	2005883a 	mov	r2,r4
   1a354:	2807883a 	mov	r3,r5
   1a358:	dfc00b17 	ldw	ra,44(sp)
   1a35c:	df000a17 	ldw	fp,40(sp)
   1a360:	ddc00917 	ldw	r23,36(sp)
   1a364:	dd800817 	ldw	r22,32(sp)
   1a368:	dd400717 	ldw	r21,28(sp)
   1a36c:	dd000617 	ldw	r20,24(sp)
   1a370:	dcc00517 	ldw	r19,20(sp)
   1a374:	dc800417 	ldw	r18,16(sp)
   1a378:	dc400317 	ldw	r17,12(sp)
   1a37c:	dc000217 	ldw	r16,8(sp)
   1a380:	dec00c04 	addi	sp,sp,48
   1a384:	f800283a 	ret
   1a388:	04c03fc4 	movi	r19,255
   1a38c:	99c9803a 	cmpltu	r4,r19,r7
   1a390:	200890fa 	slli	r4,r4,3
   1a394:	003fa806 	br	1a238 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a238>
   1a398:	00803fc4 	movi	r2,255
   1a39c:	14c5803a 	cmpltu	r2,r2,r19
   1a3a0:	100490fa 	slli	r2,r2,3
   1a3a4:	003fc006 	br	1a2a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a2a8>
   1a3a8:	00804034 	movhi	r2,256
   1a3ac:	10bfffc4 	addi	r2,r2,-1
   1a3b0:	11808b36 	bltu	r2,r6,1a5e0 <__umoddi3+0x4f0>
   1a3b4:	01000404 	movi	r4,16
   1a3b8:	003f6406 	br	1a14c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a14c>
   1a3bc:	34c4d83a 	srl	r2,r6,r19
   1a3c0:	3d0e983a 	sll	r7,r7,r20
   1a3c4:	8cf8d83a 	srl	fp,r17,r19
   1a3c8:	8d10983a 	sll	r8,r17,r20
   1a3cc:	38aab03a 	or	r21,r7,r2
   1a3d0:	a82cd43a 	srli	r22,r21,16
   1a3d4:	84e2d83a 	srl	r17,r16,r19
   1a3d8:	e009883a 	mov	r4,fp
   1a3dc:	b00b883a 	mov	r5,r22
   1a3e0:	8a22b03a 	or	r17,r17,r8
   1a3e4:	3524983a 	sll	r18,r6,r20
   1a3e8:	000cacc0 	call	cacc <__umodsi3>
   1a3ec:	e009883a 	mov	r4,fp
   1a3f0:	b00b883a 	mov	r5,r22
   1a3f4:	102f883a 	mov	r23,r2
   1a3f8:	000ca680 	call	ca68 <__udivsi3>
   1a3fc:	100d883a 	mov	r6,r2
   1a400:	b808943a 	slli	r4,r23,16
   1a404:	aa3fffcc 	andi	r8,r21,65535
   1a408:	8804d43a 	srli	r2,r17,16
   1a40c:	41af383a 	mul	r23,r8,r6
   1a410:	8520983a 	sll	r16,r16,r20
   1a414:	1104b03a 	or	r2,r2,r4
   1a418:	15c0042e 	bgeu	r2,r23,1a42c <__umoddi3+0x33c>
   1a41c:	1545883a 	add	r2,r2,r21
   1a420:	30ffffc4 	addi	r3,r6,-1
   1a424:	1540742e 	bgeu	r2,r21,1a5f8 <__umoddi3+0x508>
   1a428:	180d883a 	mov	r6,r3
   1a42c:	15efc83a 	sub	r23,r2,r23
   1a430:	b00b883a 	mov	r5,r22
   1a434:	b809883a 	mov	r4,r23
   1a438:	d9800115 	stw	r6,4(sp)
   1a43c:	da000015 	stw	r8,0(sp)
   1a440:	000cacc0 	call	cacc <__umodsi3>
   1a444:	b00b883a 	mov	r5,r22
   1a448:	b809883a 	mov	r4,r23
   1a44c:	1039883a 	mov	fp,r2
   1a450:	000ca680 	call	ca68 <__udivsi3>
   1a454:	da000017 	ldw	r8,0(sp)
   1a458:	e038943a 	slli	fp,fp,16
   1a45c:	100b883a 	mov	r5,r2
   1a460:	4089383a 	mul	r4,r8,r2
   1a464:	8a3fffcc 	andi	r8,r17,65535
   1a468:	4710b03a 	or	r8,r8,fp
   1a46c:	d9800117 	ldw	r6,4(sp)
   1a470:	4100042e 	bgeu	r8,r4,1a484 <__umoddi3+0x394>
   1a474:	4551883a 	add	r8,r8,r21
   1a478:	10bfffc4 	addi	r2,r2,-1
   1a47c:	45405a2e 	bgeu	r8,r21,1a5e8 <__umoddi3+0x4f8>
   1a480:	100b883a 	mov	r5,r2
   1a484:	300c943a 	slli	r6,r6,16
   1a488:	91ffffcc 	andi	r7,r18,65535
   1a48c:	9004d43a 	srli	r2,r18,16
   1a490:	314cb03a 	or	r6,r6,r5
   1a494:	317fffcc 	andi	r5,r6,65535
   1a498:	300cd43a 	srli	r6,r6,16
   1a49c:	29d3383a 	mul	r9,r5,r7
   1a4a0:	288b383a 	mul	r5,r5,r2
   1a4a4:	31cf383a 	mul	r7,r6,r7
   1a4a8:	4806d43a 	srli	r3,r9,16
   1a4ac:	4111c83a 	sub	r8,r8,r4
   1a4b0:	29cb883a 	add	r5,r5,r7
   1a4b4:	194b883a 	add	r5,r3,r5
   1a4b8:	3085383a 	mul	r2,r6,r2
   1a4bc:	29c0022e 	bgeu	r5,r7,1a4c8 <__umoddi3+0x3d8>
   1a4c0:	00c00074 	movhi	r3,1
   1a4c4:	10c5883a 	add	r2,r2,r3
   1a4c8:	2808d43a 	srli	r4,r5,16
   1a4cc:	280a943a 	slli	r5,r5,16
   1a4d0:	4a7fffcc 	andi	r9,r9,65535
   1a4d4:	2085883a 	add	r2,r4,r2
   1a4d8:	2a4b883a 	add	r5,r5,r9
   1a4dc:	40803636 	bltu	r8,r2,1a5b8 <__umoddi3+0x4c8>
   1a4e0:	40804d26 	beq	r8,r2,1a618 <__umoddi3+0x528>
   1a4e4:	4089c83a 	sub	r4,r8,r2
   1a4e8:	280f883a 	mov	r7,r5
   1a4ec:	81cfc83a 	sub	r7,r16,r7
   1a4f0:	81c7803a 	cmpltu	r3,r16,r7
   1a4f4:	20c7c83a 	sub	r3,r4,r3
   1a4f8:	1cc4983a 	sll	r2,r3,r19
   1a4fc:	3d0ed83a 	srl	r7,r7,r20
   1a500:	1d06d83a 	srl	r3,r3,r20
   1a504:	11c4b03a 	or	r2,r2,r7
   1a508:	003f9306 	br	1a358 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a358>
   1a50c:	9ca6983a 	sll	r19,r19,r18
   1a510:	88e8d83a 	srl	r20,r17,r3
   1a514:	80c4d83a 	srl	r2,r16,r3
   1a518:	982cd43a 	srli	r22,r19,16
   1a51c:	8ca2983a 	sll	r17,r17,r18
   1a520:	a009883a 	mov	r4,r20
   1a524:	b00b883a 	mov	r5,r22
   1a528:	1478b03a 	or	fp,r2,r17
   1a52c:	000cacc0 	call	cacc <__umodsi3>
   1a530:	a009883a 	mov	r4,r20
   1a534:	b00b883a 	mov	r5,r22
   1a538:	1023883a 	mov	r17,r2
   1a53c:	000ca680 	call	ca68 <__udivsi3>
   1a540:	9d7fffcc 	andi	r21,r19,65535
   1a544:	880a943a 	slli	r5,r17,16
   1a548:	e008d43a 	srli	r4,fp,16
   1a54c:	a885383a 	mul	r2,r21,r2
   1a550:	84a8983a 	sll	r20,r16,r18
   1a554:	2148b03a 	or	r4,r4,r5
   1a558:	2080042e 	bgeu	r4,r2,1a56c <__umoddi3+0x47c>
   1a55c:	24c9883a 	add	r4,r4,r19
   1a560:	24c00236 	bltu	r4,r19,1a56c <__umoddi3+0x47c>
   1a564:	2080012e 	bgeu	r4,r2,1a56c <__umoddi3+0x47c>
   1a568:	24c9883a 	add	r4,r4,r19
   1a56c:	20a3c83a 	sub	r17,r4,r2
   1a570:	b00b883a 	mov	r5,r22
   1a574:	8809883a 	mov	r4,r17
   1a578:	000cacc0 	call	cacc <__umodsi3>
   1a57c:	102f883a 	mov	r23,r2
   1a580:	8809883a 	mov	r4,r17
   1a584:	b00b883a 	mov	r5,r22
   1a588:	000ca680 	call	ca68 <__udivsi3>
   1a58c:	b82e943a 	slli	r23,r23,16
   1a590:	a885383a 	mul	r2,r21,r2
   1a594:	e13fffcc 	andi	r4,fp,65535
   1a598:	25c8b03a 	or	r4,r4,r23
   1a59c:	2080042e 	bgeu	r4,r2,1a5b0 <__umoddi3+0x4c0>
   1a5a0:	24c9883a 	add	r4,r4,r19
   1a5a4:	24c00236 	bltu	r4,r19,1a5b0 <__umoddi3+0x4c0>
   1a5a8:	2080012e 	bgeu	r4,r2,1a5b0 <__umoddi3+0x4c0>
   1a5ac:	24c9883a 	add	r4,r4,r19
   1a5b0:	20a3c83a 	sub	r17,r4,r2
   1a5b4:	003f4806 	br	1a2d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a2d8>
   1a5b8:	2c8fc83a 	sub	r7,r5,r18
   1a5bc:	1545c83a 	sub	r2,r2,r21
   1a5c0:	29cb803a 	cmpltu	r5,r5,r7
   1a5c4:	1145c83a 	sub	r2,r2,r5
   1a5c8:	4089c83a 	sub	r4,r8,r2
   1a5cc:	003fc706 	br	1a4ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a4ec>
   1a5d0:	01000604 	movi	r4,24
   1a5d4:	003f1806 	br	1a238 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a238>
   1a5d8:	00800604 	movi	r2,24
   1a5dc:	003f3206 	br	1a2a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a2a8>
   1a5e0:	01000604 	movi	r4,24
   1a5e4:	003ed906 	br	1a14c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a14c>
   1a5e8:	413fa52e 	bgeu	r8,r4,1a480 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a480>
   1a5ec:	297fff84 	addi	r5,r5,-2
   1a5f0:	4551883a 	add	r8,r8,r21
   1a5f4:	003fa306 	br	1a484 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a484>
   1a5f8:	15ff8b2e 	bgeu	r2,r23,1a428 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a428>
   1a5fc:	31bfff84 	addi	r6,r6,-2
   1a600:	1545883a 	add	r2,r2,r21
   1a604:	003f8906 	br	1a42c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a42c>
   1a608:	24c9883a 	add	r4,r4,r19
   1a60c:	003eee06 	br	1a1c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a1c8>
   1a610:	8005883a 	mov	r2,r16
   1a614:	003f1706 	br	1a274 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a274>
   1a618:	817fe736 	bltu	r16,r5,1a5b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a5b8>
   1a61c:	280f883a 	mov	r7,r5
   1a620:	0009883a 	mov	r4,zero
   1a624:	003fb106 	br	1a4ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a4ec>

0001a628 <__floatunsidf>:
   1a628:	defffe04 	addi	sp,sp,-8
   1a62c:	dc000015 	stw	r16,0(sp)
   1a630:	dfc00115 	stw	ra,4(sp)
   1a634:	2021883a 	mov	r16,r4
   1a638:	20002226 	beq	r4,zero,1a6c4 <__floatunsidf+0x9c>
   1a63c:	000c90c0 	call	c90c <__clzsi2>
   1a640:	01010784 	movi	r4,1054
   1a644:	2089c83a 	sub	r4,r4,r2
   1a648:	01810cc4 	movi	r6,1075
   1a64c:	310dc83a 	sub	r6,r6,r4
   1a650:	00c007c4 	movi	r3,31
   1a654:	1980120e 	bge	r3,r6,1a6a0 <__floatunsidf+0x78>
   1a658:	00c104c4 	movi	r3,1043
   1a65c:	1907c83a 	sub	r3,r3,r4
   1a660:	80ca983a 	sll	r5,r16,r3
   1a664:	00800434 	movhi	r2,16
   1a668:	10bfffc4 	addi	r2,r2,-1
   1a66c:	2101ffcc 	andi	r4,r4,2047
   1a670:	0021883a 	mov	r16,zero
   1a674:	288a703a 	and	r5,r5,r2
   1a678:	2008953a 	slli	r4,r4,20
   1a67c:	00c00434 	movhi	r3,16
   1a680:	18ffffc4 	addi	r3,r3,-1
   1a684:	28c6703a 	and	r3,r5,r3
   1a688:	8005883a 	mov	r2,r16
   1a68c:	1906b03a 	or	r3,r3,r4
   1a690:	dfc00117 	ldw	ra,4(sp)
   1a694:	dc000017 	ldw	r16,0(sp)
   1a698:	dec00204 	addi	sp,sp,8
   1a69c:	f800283a 	ret
   1a6a0:	00c002c4 	movi	r3,11
   1a6a4:	188bc83a 	sub	r5,r3,r2
   1a6a8:	814ad83a 	srl	r5,r16,r5
   1a6ac:	00c00434 	movhi	r3,16
   1a6b0:	18ffffc4 	addi	r3,r3,-1
   1a6b4:	81a0983a 	sll	r16,r16,r6
   1a6b8:	2101ffcc 	andi	r4,r4,2047
   1a6bc:	28ca703a 	and	r5,r5,r3
   1a6c0:	003fed06 	br	1a678 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a678>
   1a6c4:	0009883a 	mov	r4,zero
   1a6c8:	000b883a 	mov	r5,zero
   1a6cc:	003fea06 	br	1a678 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a678>

0001a6d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a6d0:	defffe04 	addi	sp,sp,-8
   1a6d4:	dfc00115 	stw	ra,4(sp)
   1a6d8:	df000015 	stw	fp,0(sp)
   1a6dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a6e0:	d0a02417 	ldw	r2,-32624(gp)
   1a6e4:	10000326 	beq	r2,zero,1a6f4 <alt_get_errno+0x24>
   1a6e8:	d0a02417 	ldw	r2,-32624(gp)
   1a6ec:	103ee83a 	callr	r2
   1a6f0:	00000106 	br	1a6f8 <alt_get_errno+0x28>
   1a6f4:	d0a84104 	addi	r2,gp,-24316
}
   1a6f8:	e037883a 	mov	sp,fp
   1a6fc:	dfc00117 	ldw	ra,4(sp)
   1a700:	df000017 	ldw	fp,0(sp)
   1a704:	dec00204 	addi	sp,sp,8
   1a708:	f800283a 	ret

0001a70c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   1a70c:	defffb04 	addi	sp,sp,-20
   1a710:	dfc00415 	stw	ra,16(sp)
   1a714:	df000315 	stw	fp,12(sp)
   1a718:	df000304 	addi	fp,sp,12
   1a71c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1a720:	e0bfff17 	ldw	r2,-4(fp)
   1a724:	10000616 	blt	r2,zero,1a740 <close+0x34>
   1a728:	e0bfff17 	ldw	r2,-4(fp)
   1a72c:	10c00324 	muli	r3,r2,12
   1a730:	008000f4 	movhi	r2,3
   1a734:	10a42204 	addi	r2,r2,-28536
   1a738:	1885883a 	add	r2,r3,r2
   1a73c:	00000106 	br	1a744 <close+0x38>
   1a740:	0005883a 	mov	r2,zero
   1a744:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   1a748:	e0bffd17 	ldw	r2,-12(fp)
   1a74c:	10001926 	beq	r2,zero,1a7b4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   1a750:	e0bffd17 	ldw	r2,-12(fp)
   1a754:	10800017 	ldw	r2,0(r2)
   1a758:	10800417 	ldw	r2,16(r2)
   1a75c:	10000626 	beq	r2,zero,1a778 <close+0x6c>
   1a760:	e0bffd17 	ldw	r2,-12(fp)
   1a764:	10800017 	ldw	r2,0(r2)
   1a768:	10800417 	ldw	r2,16(r2)
   1a76c:	e13ffd17 	ldw	r4,-12(fp)
   1a770:	103ee83a 	callr	r2
   1a774:	00000106 	br	1a77c <close+0x70>
   1a778:	0005883a 	mov	r2,zero
   1a77c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1a780:	e13fff17 	ldw	r4,-4(fp)
   1a784:	001af840 	call	1af84 <alt_release_fd>
    if (rval < 0)
   1a788:	e0bffe17 	ldw	r2,-8(fp)
   1a78c:	1000070e 	bge	r2,zero,1a7ac <close+0xa0>
    {
      ALT_ERRNO = -rval;
   1a790:	001a6d00 	call	1a6d0 <alt_get_errno>
   1a794:	1007883a 	mov	r3,r2
   1a798:	e0bffe17 	ldw	r2,-8(fp)
   1a79c:	0085c83a 	sub	r2,zero,r2
   1a7a0:	18800015 	stw	r2,0(r3)
      return -1;
   1a7a4:	00bfffc4 	movi	r2,-1
   1a7a8:	00000706 	br	1a7c8 <close+0xbc>
    }
    return 0;
   1a7ac:	0005883a 	mov	r2,zero
   1a7b0:	00000506 	br	1a7c8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1a7b4:	001a6d00 	call	1a6d0 <alt_get_errno>
   1a7b8:	1007883a 	mov	r3,r2
   1a7bc:	00801444 	movi	r2,81
   1a7c0:	18800015 	stw	r2,0(r3)
    return -1;
   1a7c4:	00bfffc4 	movi	r2,-1
  }
}
   1a7c8:	e037883a 	mov	sp,fp
   1a7cc:	dfc00117 	ldw	ra,4(sp)
   1a7d0:	df000017 	ldw	fp,0(sp)
   1a7d4:	dec00204 	addi	sp,sp,8
   1a7d8:	f800283a 	ret

0001a7dc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   1a7dc:	defffc04 	addi	sp,sp,-16
   1a7e0:	df000315 	stw	fp,12(sp)
   1a7e4:	df000304 	addi	fp,sp,12
   1a7e8:	e13ffd15 	stw	r4,-12(fp)
   1a7ec:	e17ffe15 	stw	r5,-8(fp)
   1a7f0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1a7f4:	e0bfff17 	ldw	r2,-4(fp)
}
   1a7f8:	e037883a 	mov	sp,fp
   1a7fc:	df000017 	ldw	fp,0(sp)
   1a800:	dec00104 	addi	sp,sp,4
   1a804:	f800283a 	ret

0001a808 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   1a808:	defffd04 	addi	sp,sp,-12
   1a80c:	df000215 	stw	fp,8(sp)
   1a810:	df000204 	addi	fp,sp,8
   1a814:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   1a818:	d0284d45 	stb	zero,-24267(gp)
   1a81c:	e0bfff17 	ldw	r2,-4(fp)
   1a820:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   1a824:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1a828:	10000226 	beq	r2,zero,1a834 <_exit+0x2c>
    ALT_SIM_FAIL();
   1a82c:	002af070 	cmpltui	zero,zero,43969
   1a830:	00000106 	br	1a838 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   1a834:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1a838:	003fff06 	br	1a838 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a838>

0001a83c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a83c:	defffe04 	addi	sp,sp,-8
   1a840:	dfc00115 	stw	ra,4(sp)
   1a844:	df000015 	stw	fp,0(sp)
   1a848:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a84c:	d0a02417 	ldw	r2,-32624(gp)
   1a850:	10000326 	beq	r2,zero,1a860 <alt_get_errno+0x24>
   1a854:	d0a02417 	ldw	r2,-32624(gp)
   1a858:	103ee83a 	callr	r2
   1a85c:	00000106 	br	1a864 <alt_get_errno+0x28>
   1a860:	d0a84104 	addi	r2,gp,-24316
}
   1a864:	e037883a 	mov	sp,fp
   1a868:	dfc00117 	ldw	ra,4(sp)
   1a86c:	df000017 	ldw	fp,0(sp)
   1a870:	dec00204 	addi	sp,sp,8
   1a874:	f800283a 	ret

0001a878 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   1a878:	defffb04 	addi	sp,sp,-20
   1a87c:	dfc00415 	stw	ra,16(sp)
   1a880:	df000315 	stw	fp,12(sp)
   1a884:	df000304 	addi	fp,sp,12
   1a888:	e13ffe15 	stw	r4,-8(fp)
   1a88c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a890:	e0bffe17 	ldw	r2,-8(fp)
   1a894:	10000616 	blt	r2,zero,1a8b0 <fstat+0x38>
   1a898:	e0bffe17 	ldw	r2,-8(fp)
   1a89c:	10c00324 	muli	r3,r2,12
   1a8a0:	008000f4 	movhi	r2,3
   1a8a4:	10a42204 	addi	r2,r2,-28536
   1a8a8:	1885883a 	add	r2,r3,r2
   1a8ac:	00000106 	br	1a8b4 <fstat+0x3c>
   1a8b0:	0005883a 	mov	r2,zero
   1a8b4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   1a8b8:	e0bffd17 	ldw	r2,-12(fp)
   1a8bc:	10001026 	beq	r2,zero,1a900 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1a8c0:	e0bffd17 	ldw	r2,-12(fp)
   1a8c4:	10800017 	ldw	r2,0(r2)
   1a8c8:	10800817 	ldw	r2,32(r2)
   1a8cc:	10000726 	beq	r2,zero,1a8ec <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   1a8d0:	e0bffd17 	ldw	r2,-12(fp)
   1a8d4:	10800017 	ldw	r2,0(r2)
   1a8d8:	10800817 	ldw	r2,32(r2)
   1a8dc:	e17fff17 	ldw	r5,-4(fp)
   1a8e0:	e13ffd17 	ldw	r4,-12(fp)
   1a8e4:	103ee83a 	callr	r2
   1a8e8:	00000a06 	br	1a914 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   1a8ec:	e0bfff17 	ldw	r2,-4(fp)
   1a8f0:	00c80004 	movi	r3,8192
   1a8f4:	10c00115 	stw	r3,4(r2)
      return 0;
   1a8f8:	0005883a 	mov	r2,zero
   1a8fc:	00000506 	br	1a914 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1a900:	001a83c0 	call	1a83c <alt_get_errno>
   1a904:	1007883a 	mov	r3,r2
   1a908:	00801444 	movi	r2,81
   1a90c:	18800015 	stw	r2,0(r3)
    return -1;
   1a910:	00bfffc4 	movi	r2,-1
  }
}
   1a914:	e037883a 	mov	sp,fp
   1a918:	dfc00117 	ldw	ra,4(sp)
   1a91c:	df000017 	ldw	fp,0(sp)
   1a920:	dec00204 	addi	sp,sp,8
   1a924:	f800283a 	ret

0001a928 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   1a928:	deffff04 	addi	sp,sp,-4
   1a92c:	df000015 	stw	fp,0(sp)
   1a930:	d839883a 	mov	fp,sp
  return 0;
   1a934:	0005883a 	mov	r2,zero
}
   1a938:	e037883a 	mov	sp,fp
   1a93c:	df000017 	ldw	fp,0(sp)
   1a940:	dec00104 	addi	sp,sp,4
   1a944:	f800283a 	ret

0001a948 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1a948:	defffe04 	addi	sp,sp,-8
   1a94c:	dfc00115 	stw	ra,4(sp)
   1a950:	df000015 	stw	fp,0(sp)
   1a954:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1a958:	d0a02417 	ldw	r2,-32624(gp)
   1a95c:	10000326 	beq	r2,zero,1a96c <alt_get_errno+0x24>
   1a960:	d0a02417 	ldw	r2,-32624(gp)
   1a964:	103ee83a 	callr	r2
   1a968:	00000106 	br	1a970 <alt_get_errno+0x28>
   1a96c:	d0a84104 	addi	r2,gp,-24316
}
   1a970:	e037883a 	mov	sp,fp
   1a974:	dfc00117 	ldw	ra,4(sp)
   1a978:	df000017 	ldw	fp,0(sp)
   1a97c:	dec00204 	addi	sp,sp,8
   1a980:	f800283a 	ret

0001a984 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   1a984:	deffed04 	addi	sp,sp,-76
   1a988:	dfc01215 	stw	ra,72(sp)
   1a98c:	df001115 	stw	fp,68(sp)
   1a990:	df001104 	addi	fp,sp,68
   1a994:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1a998:	e0bfff17 	ldw	r2,-4(fp)
   1a99c:	10000616 	blt	r2,zero,1a9b8 <isatty+0x34>
   1a9a0:	e0bfff17 	ldw	r2,-4(fp)
   1a9a4:	10c00324 	muli	r3,r2,12
   1a9a8:	008000f4 	movhi	r2,3
   1a9ac:	10a42204 	addi	r2,r2,-28536
   1a9b0:	1885883a 	add	r2,r3,r2
   1a9b4:	00000106 	br	1a9bc <isatty+0x38>
   1a9b8:	0005883a 	mov	r2,zero
   1a9bc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1a9c0:	e0bfef17 	ldw	r2,-68(fp)
   1a9c4:	10000e26 	beq	r2,zero,1aa00 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   1a9c8:	e0bfef17 	ldw	r2,-68(fp)
   1a9cc:	10800017 	ldw	r2,0(r2)
   1a9d0:	10800817 	ldw	r2,32(r2)
   1a9d4:	1000021e 	bne	r2,zero,1a9e0 <isatty+0x5c>
    {
      return 1;
   1a9d8:	00800044 	movi	r2,1
   1a9dc:	00000d06 	br	1aa14 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1a9e0:	e0bff004 	addi	r2,fp,-64
   1a9e4:	100b883a 	mov	r5,r2
   1a9e8:	e13fff17 	ldw	r4,-4(fp)
   1a9ec:	001a8780 	call	1a878 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1a9f0:	e0bff117 	ldw	r2,-60(fp)
   1a9f4:	10880020 	cmpeqi	r2,r2,8192
   1a9f8:	10803fcc 	andi	r2,r2,255
   1a9fc:	00000506 	br	1aa14 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1aa00:	001a9480 	call	1a948 <alt_get_errno>
   1aa04:	1007883a 	mov	r3,r2
   1aa08:	00801444 	movi	r2,81
   1aa0c:	18800015 	stw	r2,0(r3)
    return 0;
   1aa10:	0005883a 	mov	r2,zero
  }
}
   1aa14:	e037883a 	mov	sp,fp
   1aa18:	dfc00117 	ldw	ra,4(sp)
   1aa1c:	df000017 	ldw	fp,0(sp)
   1aa20:	dec00204 	addi	sp,sp,8
   1aa24:	f800283a 	ret

0001aa28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1aa28:	defffe04 	addi	sp,sp,-8
   1aa2c:	dfc00115 	stw	ra,4(sp)
   1aa30:	df000015 	stw	fp,0(sp)
   1aa34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1aa38:	d0a02417 	ldw	r2,-32624(gp)
   1aa3c:	10000326 	beq	r2,zero,1aa4c <alt_get_errno+0x24>
   1aa40:	d0a02417 	ldw	r2,-32624(gp)
   1aa44:	103ee83a 	callr	r2
   1aa48:	00000106 	br	1aa50 <alt_get_errno+0x28>
   1aa4c:	d0a84104 	addi	r2,gp,-24316
}
   1aa50:	e037883a 	mov	sp,fp
   1aa54:	dfc00117 	ldw	ra,4(sp)
   1aa58:	df000017 	ldw	fp,0(sp)
   1aa5c:	dec00204 	addi	sp,sp,8
   1aa60:	f800283a 	ret

0001aa64 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   1aa64:	defffb04 	addi	sp,sp,-20
   1aa68:	dfc00415 	stw	ra,16(sp)
   1aa6c:	df000315 	stw	fp,12(sp)
   1aa70:	df000304 	addi	fp,sp,12
   1aa74:	e13ffe15 	stw	r4,-8(fp)
   1aa78:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   1aa7c:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   1aa80:	e0bffe17 	ldw	r2,-8(fp)
   1aa84:	00802f16 	blt	zero,r2,1ab44 <kill+0xe0>
  {
    switch (sig)
   1aa88:	e0bfff17 	ldw	r2,-4(fp)
   1aa8c:	10800828 	cmpgeui	r2,r2,32
   1aa90:	1000291e 	bne	r2,zero,1ab38 <kill+0xd4>
   1aa94:	e0bfff17 	ldw	r2,-4(fp)
   1aa98:	100690ba 	slli	r3,r2,2
   1aa9c:	008000b4 	movhi	r2,2
   1aaa0:	10aaac04 	addi	r2,r2,-21840
   1aaa4:	1885883a 	add	r2,r3,r2
   1aaa8:	10800017 	ldw	r2,0(r2)
   1aaac:	1000683a 	jmp	r2
   1aab0:	0001ab58 	cmpnei	zero,zero,1709
   1aab4:	0001ab38 	rdprs	zero,zero,1708
   1aab8:	0001ab38 	rdprs	zero,zero,1708
   1aabc:	0001ab30 	cmpltui	zero,zero,1708
   1aac0:	0001ab30 	cmpltui	zero,zero,1708
   1aac4:	0001ab30 	cmpltui	zero,zero,1708
   1aac8:	0001ab30 	cmpltui	zero,zero,1708
   1aacc:	0001ab38 	rdprs	zero,zero,1708
   1aad0:	0001ab30 	cmpltui	zero,zero,1708
   1aad4:	0001ab30 	cmpltui	zero,zero,1708
   1aad8:	0001ab30 	cmpltui	zero,zero,1708
   1aadc:	0001ab30 	cmpltui	zero,zero,1708
   1aae0:	0001ab30 	cmpltui	zero,zero,1708
   1aae4:	0001ab30 	cmpltui	zero,zero,1708
   1aae8:	0001ab30 	cmpltui	zero,zero,1708
   1aaec:	0001ab30 	cmpltui	zero,zero,1708
   1aaf0:	0001ab58 	cmpnei	zero,zero,1709
   1aaf4:	0001ab38 	rdprs	zero,zero,1708
   1aaf8:	0001ab38 	rdprs	zero,zero,1708
   1aafc:	0001ab38 	rdprs	zero,zero,1708
   1ab00:	0001ab58 	cmpnei	zero,zero,1709
   1ab04:	0001ab38 	rdprs	zero,zero,1708
   1ab08:	0001ab38 	rdprs	zero,zero,1708
   1ab0c:	0001ab30 	cmpltui	zero,zero,1708
   1ab10:	0001ab30 	cmpltui	zero,zero,1708
   1ab14:	0001ab30 	cmpltui	zero,zero,1708
   1ab18:	0001ab30 	cmpltui	zero,zero,1708
   1ab1c:	0001ab30 	cmpltui	zero,zero,1708
   1ab20:	0001ab38 	rdprs	zero,zero,1708
   1ab24:	0001ab38 	rdprs	zero,zero,1708
   1ab28:	0001ab30 	cmpltui	zero,zero,1708
   1ab2c:	0001ab30 	cmpltui	zero,zero,1708
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   1ab30:	0009883a 	mov	r4,zero
   1ab34:	001a8080 	call	1a808 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   1ab38:	00800584 	movi	r2,22
   1ab3c:	e0bffd15 	stw	r2,-12(fp)
   1ab40:	00000606 	br	1ab5c <kill+0xf8>
    }
  }

  else if (pid > 0)
   1ab44:	e0bffe17 	ldw	r2,-8(fp)
   1ab48:	0080040e 	bge	zero,r2,1ab5c <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   1ab4c:	008000c4 	movi	r2,3
   1ab50:	e0bffd15 	stw	r2,-12(fp)
   1ab54:	00000106 	br	1ab5c <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   1ab58:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
   1ab5c:	e0bffd17 	ldw	r2,-12(fp)
   1ab60:	10000626 	beq	r2,zero,1ab7c <kill+0x118>
  {
    ALT_ERRNO = status;
   1ab64:	001aa280 	call	1aa28 <alt_get_errno>
   1ab68:	1007883a 	mov	r3,r2
   1ab6c:	e0bffd17 	ldw	r2,-12(fp)
   1ab70:	18800015 	stw	r2,0(r3)
    return -1;
   1ab74:	00bfffc4 	movi	r2,-1
   1ab78:	00000106 	br	1ab80 <kill+0x11c>
  }

  return 0;
   1ab7c:	0005883a 	mov	r2,zero
}
   1ab80:	e037883a 	mov	sp,fp
   1ab84:	dfc00117 	ldw	ra,4(sp)
   1ab88:	df000017 	ldw	fp,0(sp)
   1ab8c:	dec00204 	addi	sp,sp,8
   1ab90:	f800283a 	ret

0001ab94 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   1ab94:	defffc04 	addi	sp,sp,-16
   1ab98:	df000315 	stw	fp,12(sp)
   1ab9c:	df000304 	addi	fp,sp,12
   1aba0:	e13ffd15 	stw	r4,-12(fp)
   1aba4:	e17ffe15 	stw	r5,-8(fp)
   1aba8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1abac:	e0fffe17 	ldw	r3,-8(fp)
   1abb0:	e0bffd17 	ldw	r2,-12(fp)
   1abb4:	18800c26 	beq	r3,r2,1abe8 <alt_load_section+0x54>
  {
    while( to != end )
   1abb8:	00000806 	br	1abdc <alt_load_section+0x48>
    {
      *to++ = *from++;
   1abbc:	e0bffe17 	ldw	r2,-8(fp)
   1abc0:	10c00104 	addi	r3,r2,4
   1abc4:	e0fffe15 	stw	r3,-8(fp)
   1abc8:	e0fffd17 	ldw	r3,-12(fp)
   1abcc:	19000104 	addi	r4,r3,4
   1abd0:	e13ffd15 	stw	r4,-12(fp)
   1abd4:	18c00017 	ldw	r3,0(r3)
   1abd8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1abdc:	e0fffe17 	ldw	r3,-8(fp)
   1abe0:	e0bfff17 	ldw	r2,-4(fp)
   1abe4:	18bff51e 	bne	r3,r2,1abbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701abbc>
    {
      *to++ = *from++;
    }
  }
}
   1abe8:	0001883a 	nop
   1abec:	e037883a 	mov	sp,fp
   1abf0:	df000017 	ldw	fp,0(sp)
   1abf4:	dec00104 	addi	sp,sp,4
   1abf8:	f800283a 	ret

0001abfc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1abfc:	defffe04 	addi	sp,sp,-8
   1ac00:	dfc00115 	stw	ra,4(sp)
   1ac04:	df000015 	stw	fp,0(sp)
   1ac08:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1ac0c:	018000f4 	movhi	r6,3
   1ac10:	31a9e204 	addi	r6,r6,-22648
   1ac14:	014000f4 	movhi	r5,3
   1ac18:	2961ef04 	addi	r5,r5,-30788
   1ac1c:	010000f4 	movhi	r4,3
   1ac20:	2129e204 	addi	r4,r4,-22648
   1ac24:	001ab940 	call	1ab94 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   1ac28:	01800034 	movhi	r6,0
   1ac2c:	31809204 	addi	r6,r6,584
   1ac30:	01400034 	movhi	r5,0
   1ac34:	29400804 	addi	r5,r5,32
   1ac38:	01000034 	movhi	r4,0
   1ac3c:	21000804 	addi	r4,r4,32
   1ac40:	001ab940 	call	1ab94 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1ac44:	018000f4 	movhi	r6,3
   1ac48:	31a1ef04 	addi	r6,r6,-30788
   1ac4c:	014000b4 	movhi	r5,2
   1ac50:	295aa804 	addi	r5,r5,27296
   1ac54:	010000b4 	movhi	r4,2
   1ac58:	211aa804 	addi	r4,r4,27296
   1ac5c:	001ab940 	call	1ab94 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   1ac60:	002573c0 	call	2573c <alt_dcache_flush_all>
  alt_icache_flush_all();
   1ac64:	002598c0 	call	2598c <alt_icache_flush_all>
}
   1ac68:	0001883a 	nop
   1ac6c:	e037883a 	mov	sp,fp
   1ac70:	dfc00117 	ldw	ra,4(sp)
   1ac74:	df000017 	ldw	fp,0(sp)
   1ac78:	dec00204 	addi	sp,sp,8
   1ac7c:	f800283a 	ret

0001ac80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1ac80:	defffe04 	addi	sp,sp,-8
   1ac84:	dfc00115 	stw	ra,4(sp)
   1ac88:	df000015 	stw	fp,0(sp)
   1ac8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1ac90:	d0a02417 	ldw	r2,-32624(gp)
   1ac94:	10000326 	beq	r2,zero,1aca4 <alt_get_errno+0x24>
   1ac98:	d0a02417 	ldw	r2,-32624(gp)
   1ac9c:	103ee83a 	callr	r2
   1aca0:	00000106 	br	1aca8 <alt_get_errno+0x28>
   1aca4:	d0a84104 	addi	r2,gp,-24316
}
   1aca8:	e037883a 	mov	sp,fp
   1acac:	dfc00117 	ldw	ra,4(sp)
   1acb0:	df000017 	ldw	fp,0(sp)
   1acb4:	dec00204 	addi	sp,sp,8
   1acb8:	f800283a 	ret

0001acbc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   1acbc:	defff904 	addi	sp,sp,-28
   1acc0:	dfc00615 	stw	ra,24(sp)
   1acc4:	df000515 	stw	fp,20(sp)
   1acc8:	df000504 	addi	fp,sp,20
   1accc:	e13ffd15 	stw	r4,-12(fp)
   1acd0:	e17ffe15 	stw	r5,-8(fp)
   1acd4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1acd8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1acdc:	e0bffd17 	ldw	r2,-12(fp)
   1ace0:	10000616 	blt	r2,zero,1acfc <lseek+0x40>
   1ace4:	e0bffd17 	ldw	r2,-12(fp)
   1ace8:	10c00324 	muli	r3,r2,12
   1acec:	008000f4 	movhi	r2,3
   1acf0:	10a42204 	addi	r2,r2,-28536
   1acf4:	1885883a 	add	r2,r3,r2
   1acf8:	00000106 	br	1ad00 <lseek+0x44>
   1acfc:	0005883a 	mov	r2,zero
   1ad00:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1ad04:	e0bffc17 	ldw	r2,-16(fp)
   1ad08:	10001026 	beq	r2,zero,1ad4c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   1ad0c:	e0bffc17 	ldw	r2,-16(fp)
   1ad10:	10800017 	ldw	r2,0(r2)
   1ad14:	10800717 	ldw	r2,28(r2)
   1ad18:	10000926 	beq	r2,zero,1ad40 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   1ad1c:	e0bffc17 	ldw	r2,-16(fp)
   1ad20:	10800017 	ldw	r2,0(r2)
   1ad24:	10800717 	ldw	r2,28(r2)
   1ad28:	e1bfff17 	ldw	r6,-4(fp)
   1ad2c:	e17ffe17 	ldw	r5,-8(fp)
   1ad30:	e13ffc17 	ldw	r4,-16(fp)
   1ad34:	103ee83a 	callr	r2
   1ad38:	e0bffb15 	stw	r2,-20(fp)
   1ad3c:	00000506 	br	1ad54 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1ad40:	00bfde84 	movi	r2,-134
   1ad44:	e0bffb15 	stw	r2,-20(fp)
   1ad48:	00000206 	br	1ad54 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   1ad4c:	00bfebc4 	movi	r2,-81
   1ad50:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1ad54:	e0bffb17 	ldw	r2,-20(fp)
   1ad58:	1000070e 	bge	r2,zero,1ad78 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   1ad5c:	001ac800 	call	1ac80 <alt_get_errno>
   1ad60:	1007883a 	mov	r3,r2
   1ad64:	e0bffb17 	ldw	r2,-20(fp)
   1ad68:	0085c83a 	sub	r2,zero,r2
   1ad6c:	18800015 	stw	r2,0(r3)
    rc = -1;
   1ad70:	00bfffc4 	movi	r2,-1
   1ad74:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   1ad78:	e0bffb17 	ldw	r2,-20(fp)
}
   1ad7c:	e037883a 	mov	sp,fp
   1ad80:	dfc00117 	ldw	ra,4(sp)
   1ad84:	df000017 	ldw	fp,0(sp)
   1ad88:	dec00204 	addi	sp,sp,8
   1ad8c:	f800283a 	ret

0001ad90 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   1ad90:	defff904 	addi	sp,sp,-28
   1ad94:	dfc00615 	stw	ra,24(sp)
   1ad98:	df000515 	stw	fp,20(sp)
   1ad9c:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1ada0:	0009883a 	mov	r4,zero
   1ada4:	0022cf00 	call	22cf0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   1ada8:	001bd4c0 	call	1bd4c <OSInit>
   1adac:	01000044 	movi	r4,1
   1adb0:	00206ac0 	call	206ac <OSSemCreate>
   1adb4:	d0a84a15 	stw	r2,-24280(gp)
   1adb8:	01000044 	movi	r4,1
   1adbc:	00206ac0 	call	206ac <OSSemCreate>
   1adc0:	d0a84c15 	stw	r2,-24272(gp)
   1adc4:	d0a84504 	addi	r2,gp,-24300
   1adc8:	e0bffc15 	stw	r2,-16(fp)
   1adcc:	00800044 	movi	r2,1
   1add0:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   1add4:	e0bffd0b 	ldhu	r2,-12(fp)
   1add8:	1009883a 	mov	r4,r2
   1addc:	00206ac0 	call	206ac <OSSemCreate>
   1ade0:	1007883a 	mov	r3,r2
   1ade4:	e0bffc17 	ldw	r2,-16(fp)
   1ade8:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   1adec:	0022d280 	call	22d28 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1adf0:	018000f4 	movhi	r6,3
   1adf4:	31a13604 	addi	r6,r6,-31528
   1adf8:	014000f4 	movhi	r5,3
   1adfc:	29613604 	addi	r5,r5,-31528
   1ae00:	010000f4 	movhi	r4,3
   1ae04:	21213604 	addi	r4,r4,-31528
   1ae08:	0025a840 	call	25a84 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   1ae0c:	002583c0 	call	2583c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1ae10:	010000b4 	movhi	r4,2
   1ae14:	21162704 	addi	r4,r4,22684
   1ae18:	00267040 	call	26704 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   1ae1c:	d0a84617 	ldw	r2,-24296(gp)
   1ae20:	d0e84717 	ldw	r3,-24292(gp)
   1ae24:	d1284817 	ldw	r4,-24288(gp)
   1ae28:	200d883a 	mov	r6,r4
   1ae2c:	180b883a 	mov	r5,r3
   1ae30:	1009883a 	mov	r4,r2
   1ae34:	00057400 	call	5740 <main>
   1ae38:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   1ae3c:	01000044 	movi	r4,1
   1ae40:	001a70c0 	call	1a70c <close>
  exit (result);
   1ae44:	e13ffb17 	ldw	r4,-20(fp)
   1ae48:	00267180 	call	26718 <exit>

0001ae4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1ae4c:	defffe04 	addi	sp,sp,-8
   1ae50:	dfc00115 	stw	ra,4(sp)
   1ae54:	df000015 	stw	fp,0(sp)
   1ae58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1ae5c:	d0a02417 	ldw	r2,-32624(gp)
   1ae60:	10000326 	beq	r2,zero,1ae70 <alt_get_errno+0x24>
   1ae64:	d0a02417 	ldw	r2,-32624(gp)
   1ae68:	103ee83a 	callr	r2
   1ae6c:	00000106 	br	1ae74 <alt_get_errno+0x28>
   1ae70:	d0a84104 	addi	r2,gp,-24316
}
   1ae74:	e037883a 	mov	sp,fp
   1ae78:	dfc00117 	ldw	ra,4(sp)
   1ae7c:	df000017 	ldw	fp,0(sp)
   1ae80:	dec00204 	addi	sp,sp,8
   1ae84:	f800283a 	ret

0001ae88 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1ae88:	defff904 	addi	sp,sp,-28
   1ae8c:	dfc00615 	stw	ra,24(sp)
   1ae90:	df000515 	stw	fp,20(sp)
   1ae94:	df000504 	addi	fp,sp,20
   1ae98:	e13ffd15 	stw	r4,-12(fp)
   1ae9c:	e17ffe15 	stw	r5,-8(fp)
   1aea0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1aea4:	e0bffd17 	ldw	r2,-12(fp)
   1aea8:	10000616 	blt	r2,zero,1aec4 <read+0x3c>
   1aeac:	e0bffd17 	ldw	r2,-12(fp)
   1aeb0:	10c00324 	muli	r3,r2,12
   1aeb4:	008000f4 	movhi	r2,3
   1aeb8:	10a42204 	addi	r2,r2,-28536
   1aebc:	1885883a 	add	r2,r3,r2
   1aec0:	00000106 	br	1aec8 <read+0x40>
   1aec4:	0005883a 	mov	r2,zero
   1aec8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1aecc:	e0bffb17 	ldw	r2,-20(fp)
   1aed0:	10002226 	beq	r2,zero,1af5c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1aed4:	e0bffb17 	ldw	r2,-20(fp)
   1aed8:	10800217 	ldw	r2,8(r2)
   1aedc:	108000cc 	andi	r2,r2,3
   1aee0:	10800060 	cmpeqi	r2,r2,1
   1aee4:	1000181e 	bne	r2,zero,1af48 <read+0xc0>
        (fd->dev->read))
   1aee8:	e0bffb17 	ldw	r2,-20(fp)
   1aeec:	10800017 	ldw	r2,0(r2)
   1aef0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1aef4:	10001426 	beq	r2,zero,1af48 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   1aef8:	e0bffb17 	ldw	r2,-20(fp)
   1aefc:	10800017 	ldw	r2,0(r2)
   1af00:	10800517 	ldw	r2,20(r2)
   1af04:	e0ffff17 	ldw	r3,-4(fp)
   1af08:	180d883a 	mov	r6,r3
   1af0c:	e17ffe17 	ldw	r5,-8(fp)
   1af10:	e13ffb17 	ldw	r4,-20(fp)
   1af14:	103ee83a 	callr	r2
   1af18:	e0bffc15 	stw	r2,-16(fp)
   1af1c:	e0bffc17 	ldw	r2,-16(fp)
   1af20:	1000070e 	bge	r2,zero,1af40 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   1af24:	001ae4c0 	call	1ae4c <alt_get_errno>
   1af28:	1007883a 	mov	r3,r2
   1af2c:	e0bffc17 	ldw	r2,-16(fp)
   1af30:	0085c83a 	sub	r2,zero,r2
   1af34:	18800015 	stw	r2,0(r3)
          return -1;
   1af38:	00bfffc4 	movi	r2,-1
   1af3c:	00000c06 	br	1af70 <read+0xe8>
        }
        return rval;
   1af40:	e0bffc17 	ldw	r2,-16(fp)
   1af44:	00000a06 	br	1af70 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   1af48:	001ae4c0 	call	1ae4c <alt_get_errno>
   1af4c:	1007883a 	mov	r3,r2
   1af50:	00800344 	movi	r2,13
   1af54:	18800015 	stw	r2,0(r3)
   1af58:	00000406 	br	1af6c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1af5c:	001ae4c0 	call	1ae4c <alt_get_errno>
   1af60:	1007883a 	mov	r3,r2
   1af64:	00801444 	movi	r2,81
   1af68:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1af6c:	00bfffc4 	movi	r2,-1
}
   1af70:	e037883a 	mov	sp,fp
   1af74:	dfc00117 	ldw	ra,4(sp)
   1af78:	df000017 	ldw	fp,0(sp)
   1af7c:	dec00204 	addi	sp,sp,8
   1af80:	f800283a 	ret

0001af84 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1af84:	defffe04 	addi	sp,sp,-8
   1af88:	df000115 	stw	fp,4(sp)
   1af8c:	df000104 	addi	fp,sp,4
   1af90:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1af94:	e0bfff17 	ldw	r2,-4(fp)
   1af98:	108000d0 	cmplti	r2,r2,3
   1af9c:	10000d1e 	bne	r2,zero,1afd4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   1afa0:	008000f4 	movhi	r2,3
   1afa4:	10a42204 	addi	r2,r2,-28536
   1afa8:	e0ffff17 	ldw	r3,-4(fp)
   1afac:	18c00324 	muli	r3,r3,12
   1afb0:	10c5883a 	add	r2,r2,r3
   1afb4:	10800204 	addi	r2,r2,8
   1afb8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   1afbc:	008000f4 	movhi	r2,3
   1afc0:	10a42204 	addi	r2,r2,-28536
   1afc4:	e0ffff17 	ldw	r3,-4(fp)
   1afc8:	18c00324 	muli	r3,r3,12
   1afcc:	10c5883a 	add	r2,r2,r3
   1afd0:	10000015 	stw	zero,0(r2)
  }
}
   1afd4:	0001883a 	nop
   1afd8:	e037883a 	mov	sp,fp
   1afdc:	df000017 	ldw	fp,0(sp)
   1afe0:	dec00104 	addi	sp,sp,4
   1afe4:	f800283a 	ret

0001afe8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   1afe8:	defff904 	addi	sp,sp,-28
   1afec:	df000615 	stw	fp,24(sp)
   1aff0:	df000604 	addi	fp,sp,24
   1aff4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aff8:	0005303a 	rdctl	r2,status
   1affc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b000:	e0fffe17 	ldw	r3,-8(fp)
   1b004:	00bfff84 	movi	r2,-2
   1b008:	1884703a 	and	r2,r3,r2
   1b00c:	1001703a 	wrctl	status,r2
  
  return context;
   1b010:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1b014:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1b018:	d0a02517 	ldw	r2,-32620(gp)
   1b01c:	10c000c4 	addi	r3,r2,3
   1b020:	00bfff04 	movi	r2,-4
   1b024:	1884703a 	and	r2,r3,r2
   1b028:	d0a02515 	stw	r2,-32620(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1b02c:	d0e02517 	ldw	r3,-32620(gp)
   1b030:	e0bfff17 	ldw	r2,-4(fp)
   1b034:	1887883a 	add	r3,r3,r2
   1b038:	00810034 	movhi	r2,1024
   1b03c:	10800004 	addi	r2,r2,0
   1b040:	10c0062e 	bgeu	r2,r3,1b05c <sbrk+0x74>
   1b044:	e0bffb17 	ldw	r2,-20(fp)
   1b048:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b04c:	e0bffa17 	ldw	r2,-24(fp)
   1b050:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   1b054:	00bfffc4 	movi	r2,-1
   1b058:	00000b06 	br	1b088 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   1b05c:	d0a02517 	ldw	r2,-32620(gp)
   1b060:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   1b064:	d0e02517 	ldw	r3,-32620(gp)
   1b068:	e0bfff17 	ldw	r2,-4(fp)
   1b06c:	1885883a 	add	r2,r3,r2
   1b070:	d0a02515 	stw	r2,-32620(gp)
   1b074:	e0bffb17 	ldw	r2,-20(fp)
   1b078:	e0bffc15 	stw	r2,-16(fp)
   1b07c:	e0bffc17 	ldw	r2,-16(fp)
   1b080:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1b084:	e0bffd17 	ldw	r2,-12(fp)
} 
   1b088:	e037883a 	mov	sp,fp
   1b08c:	df000017 	ldw	fp,0(sp)
   1b090:	dec00104 	addi	sp,sp,4
   1b094:	f800283a 	ret

0001b098 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1b098:	defffe04 	addi	sp,sp,-8
   1b09c:	dfc00115 	stw	ra,4(sp)
   1b0a0:	df000015 	stw	fp,0(sp)
   1b0a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1b0a8:	d0a02417 	ldw	r2,-32624(gp)
   1b0ac:	10000326 	beq	r2,zero,1b0bc <alt_get_errno+0x24>
   1b0b0:	d0a02417 	ldw	r2,-32624(gp)
   1b0b4:	103ee83a 	callr	r2
   1b0b8:	00000106 	br	1b0c0 <alt_get_errno+0x28>
   1b0bc:	d0a84104 	addi	r2,gp,-24316
}
   1b0c0:	e037883a 	mov	sp,fp
   1b0c4:	dfc00117 	ldw	ra,4(sp)
   1b0c8:	df000017 	ldw	fp,0(sp)
   1b0cc:	dec00204 	addi	sp,sp,8
   1b0d0:	f800283a 	ret

0001b0d4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   1b0d4:	defff904 	addi	sp,sp,-28
   1b0d8:	dfc00615 	stw	ra,24(sp)
   1b0dc:	df000515 	stw	fp,20(sp)
   1b0e0:	df000504 	addi	fp,sp,20
   1b0e4:	e13ffd15 	stw	r4,-12(fp)
   1b0e8:	e17ffe15 	stw	r5,-8(fp)
   1b0ec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1b0f0:	e0bffd17 	ldw	r2,-12(fp)
   1b0f4:	10000616 	blt	r2,zero,1b110 <write+0x3c>
   1b0f8:	e0bffd17 	ldw	r2,-12(fp)
   1b0fc:	10c00324 	muli	r3,r2,12
   1b100:	008000f4 	movhi	r2,3
   1b104:	10a42204 	addi	r2,r2,-28536
   1b108:	1885883a 	add	r2,r3,r2
   1b10c:	00000106 	br	1b114 <write+0x40>
   1b110:	0005883a 	mov	r2,zero
   1b114:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   1b118:	e0bffb17 	ldw	r2,-20(fp)
   1b11c:	10002126 	beq	r2,zero,1b1a4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   1b120:	e0bffb17 	ldw	r2,-20(fp)
   1b124:	10800217 	ldw	r2,8(r2)
   1b128:	108000cc 	andi	r2,r2,3
   1b12c:	10001826 	beq	r2,zero,1b190 <write+0xbc>
   1b130:	e0bffb17 	ldw	r2,-20(fp)
   1b134:	10800017 	ldw	r2,0(r2)
   1b138:	10800617 	ldw	r2,24(r2)
   1b13c:	10001426 	beq	r2,zero,1b190 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1b140:	e0bffb17 	ldw	r2,-20(fp)
   1b144:	10800017 	ldw	r2,0(r2)
   1b148:	10800617 	ldw	r2,24(r2)
   1b14c:	e0ffff17 	ldw	r3,-4(fp)
   1b150:	180d883a 	mov	r6,r3
   1b154:	e17ffe17 	ldw	r5,-8(fp)
   1b158:	e13ffb17 	ldw	r4,-20(fp)
   1b15c:	103ee83a 	callr	r2
   1b160:	e0bffc15 	stw	r2,-16(fp)
   1b164:	e0bffc17 	ldw	r2,-16(fp)
   1b168:	1000070e 	bge	r2,zero,1b188 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   1b16c:	001b0980 	call	1b098 <alt_get_errno>
   1b170:	1007883a 	mov	r3,r2
   1b174:	e0bffc17 	ldw	r2,-16(fp)
   1b178:	0085c83a 	sub	r2,zero,r2
   1b17c:	18800015 	stw	r2,0(r3)
        return -1;
   1b180:	00bfffc4 	movi	r2,-1
   1b184:	00000c06 	br	1b1b8 <write+0xe4>
      }
      return rval;
   1b188:	e0bffc17 	ldw	r2,-16(fp)
   1b18c:	00000a06 	br	1b1b8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   1b190:	001b0980 	call	1b098 <alt_get_errno>
   1b194:	1007883a 	mov	r3,r2
   1b198:	00800344 	movi	r2,13
   1b19c:	18800015 	stw	r2,0(r3)
   1b1a0:	00000406 	br	1b1b4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   1b1a4:	001b0980 	call	1b098 <alt_get_errno>
   1b1a8:	1007883a 	mov	r3,r2
   1b1ac:	00801444 	movi	r2,81
   1b1b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1b1b4:	00bfffc4 	movi	r2,-1
}
   1b1b8:	e037883a 	mov	sp,fp
   1b1bc:	dfc00117 	ldw	ra,4(sp)
   1b1c0:	df000017 	ldw	fp,0(sp)
   1b1c4:	dec00204 	addi	sp,sp,8
   1b1c8:	f800283a 	ret

0001b1cc <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   1b1cc:	deffdf04 	addi	sp,sp,-132
   1b1d0:	dfc02015 	stw	ra,128(sp)
   1b1d4:	df001f15 	stw	fp,124(sp)
   1b1d8:	df001f04 	addi	fp,sp,124
   1b1dc:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   1b1e0:	e0bfe204 	addi	r2,fp,-120
   1b1e4:	100b883a 	mov	r5,r2
   1b1e8:	01003fc4 	movi	r4,255
   1b1ec:	00226340 	call	22634 <OSTaskQuery>
   1b1f0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   1b1f4:	e0bffe83 	ldbu	r2,-6(fp)
   1b1f8:	10803fcc 	andi	r2,r2,255
   1b1fc:	10001e1e 	bne	r2,zero,1b278 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
   1b200:	e0bfee83 	ldbu	r2,-70(fp)
   1b204:	10803fcc 	andi	r2,r2,255
   1b208:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   1b20c:	d0a84a17 	ldw	r2,-24280(gp)
   1b210:	e0fffd04 	addi	r3,fp,-12
   1b214:	180b883a 	mov	r5,r3
   1b218:	1009883a 	mov	r4,r2
   1b21c:	0020e4c0 	call	20e4c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   1b220:	e0bffe43 	ldbu	r2,-7(fp)
   1b224:	10803fcc 	andi	r2,r2,255
   1b228:	10000726 	beq	r2,zero,1b248 <__env_lock+0x7c>
   1b22c:	d0a02617 	ldw	r2,-32616(gp)
   1b230:	e0ffe117 	ldw	r3,-124(fp)
   1b234:	1880041e 	bne	r3,r2,1b248 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
   1b238:	d0a84917 	ldw	r2,-24284(gp)
   1b23c:	10800044 	addi	r2,r2,1
   1b240:	d0a84915 	stw	r2,-24284(gp)
   1b244:	00000a06 	br	1b270 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   1b248:	d0a84a17 	ldw	r2,-24280(gp)
   1b24c:	e0fffe84 	addi	r3,fp,-6
   1b250:	180d883a 	mov	r6,r3
   1b254:	000b883a 	mov	r5,zero
   1b258:	1009883a 	mov	r4,r2
   1b25c:	00209c40 	call	209c4 <OSSemPend>
    locks  = 1;
   1b260:	00800044 	movi	r2,1
   1b264:	d0a84915 	stw	r2,-24284(gp)
    lockid = id;
   1b268:	e0bfe117 	ldw	r2,-124(fp)
   1b26c:	d0a02615 	stw	r2,-32616(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   1b270:	0001883a 	nop
   1b274:	00000106 	br	1b27c <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   1b278:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   1b27c:	e037883a 	mov	sp,fp
   1b280:	dfc00117 	ldw	ra,4(sp)
   1b284:	df000017 	ldw	fp,0(sp)
   1b288:	dec00204 	addi	sp,sp,8
   1b28c:	f800283a 	ret

0001b290 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   1b290:	defffd04 	addi	sp,sp,-12
   1b294:	dfc00215 	stw	ra,8(sp)
   1b298:	df000115 	stw	fp,4(sp)
   1b29c:	df000104 	addi	fp,sp,4
   1b2a0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   1b2a4:	d0a84917 	ldw	r2,-24284(gp)
   1b2a8:	10000b26 	beq	r2,zero,1b2d8 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   1b2ac:	d0a84917 	ldw	r2,-24284(gp)
   1b2b0:	10bfffc4 	addi	r2,r2,-1
   1b2b4:	d0a84915 	stw	r2,-24284(gp)
   1b2b8:	d0a84917 	ldw	r2,-24284(gp)
   1b2bc:	1000071e 	bne	r2,zero,1b2dc <__env_unlock+0x4c>
  {
    lockid = -1;
   1b2c0:	00bfffc4 	movi	r2,-1
   1b2c4:	d0a02615 	stw	r2,-32616(gp)
    OSSemPost( alt_envsem );
   1b2c8:	d0a84a17 	ldw	r2,-24280(gp)
   1b2cc:	1009883a 	mov	r4,r2
   1b2d0:	0020d3c0 	call	20d3c <OSSemPost>
   1b2d4:	00000106 	br	1b2dc <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
   1b2d8:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   1b2dc:	e037883a 	mov	sp,fp
   1b2e0:	dfc00117 	ldw	ra,4(sp)
   1b2e4:	df000017 	ldw	fp,0(sp)
   1b2e8:	dec00204 	addi	sp,sp,8
   1b2ec:	f800283a 	ret

0001b2f0 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   1b2f0:	deffdb04 	addi	sp,sp,-148
   1b2f4:	dfc02415 	stw	ra,144(sp)
   1b2f8:	df002315 	stw	fp,140(sp)
   1b2fc:	df002304 	addi	fp,sp,140
   1b300:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b304:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   1b308:	d0a84d43 	ldbu	r2,-24267(gp)
   1b30c:	10803fcc 	andi	r2,r2,255
   1b310:	10800060 	cmpeqi	r2,r2,1
   1b314:	10003626 	beq	r2,zero,1b3f0 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   1b318:	e0bfe204 	addi	r2,fp,-120
   1b31c:	100b883a 	mov	r5,r2
   1b320:	01003fc4 	movi	r4,255
   1b324:	00226340 	call	22634 <OSTaskQuery>
   1b328:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   1b32c:	e0bffe83 	ldbu	r2,-6(fp)
   1b330:	10803fcc 	andi	r2,r2,255
   1b334:	1000301e 	bne	r2,zero,1b3f8 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
   1b338:	e0bfee83 	ldbu	r2,-70(fp)
   1b33c:	10803fcc 	andi	r2,r2,255
   1b340:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   1b344:	d0a84c17 	ldw	r2,-24272(gp)
   1b348:	e0fffd04 	addi	r3,fp,-12
   1b34c:	180b883a 	mov	r5,r3
   1b350:	1009883a 	mov	r4,r2
   1b354:	0020e4c0 	call	20e4c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b358:	0005303a 	rdctl	r2,status
   1b35c:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b360:	e0ffe117 	ldw	r3,-124(fp)
   1b364:	00bfff84 	movi	r2,-2
   1b368:	1884703a 	and	r2,r3,r2
   1b36c:	1001703a 	wrctl	status,r2
  
  return context;
   1b370:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
   1b374:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   1b378:	e0bffd0b 	ldhu	r2,-12(fp)
   1b37c:	10bfffcc 	andi	r2,r2,65535
   1b380:	10000b1e 	bne	r2,zero,1b3b0 <__malloc_lock+0xc0>
   1b384:	d0a02717 	ldw	r2,-32612(gp)
   1b388:	e0ffde17 	ldw	r3,-136(fp)
   1b38c:	1880081e 	bne	r3,r2,1b3b0 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
   1b390:	d0a84b17 	ldw	r2,-24276(gp)
   1b394:	10800044 	addi	r2,r2,1
   1b398:	d0a84b15 	stw	r2,-24276(gp)
   1b39c:	e0bfdd17 	ldw	r2,-140(fp)
   1b3a0:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b3a4:	e0bfdf17 	ldw	r2,-132(fp)
   1b3a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   1b3ac:	00000e06 	br	1b3e8 <__malloc_lock+0xf8>
   1b3b0:	e0bfdd17 	ldw	r2,-140(fp)
   1b3b4:	e0bfe015 	stw	r2,-128(fp)
   1b3b8:	e0bfe017 	ldw	r2,-128(fp)
   1b3bc:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   1b3c0:	d0a84c17 	ldw	r2,-24272(gp)
   1b3c4:	e0fffe84 	addi	r3,fp,-6
   1b3c8:	180d883a 	mov	r6,r3
   1b3cc:	000b883a 	mov	r5,zero
   1b3d0:	1009883a 	mov	r4,r2
   1b3d4:	00209c40 	call	209c4 <OSSemPend>
    locks  = 1;
   1b3d8:	00800044 	movi	r2,1
   1b3dc:	d0a84b15 	stw	r2,-24276(gp)
    lockid = id;
   1b3e0:	e0bfde17 	ldw	r2,-136(fp)
   1b3e4:	d0a02715 	stw	r2,-32612(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   1b3e8:	0001883a 	nop
   1b3ec:	00000306 	br	1b3fc <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
   1b3f0:	0001883a 	nop
   1b3f4:	00000106 	br	1b3fc <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   1b3f8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   1b3fc:	e037883a 	mov	sp,fp
   1b400:	dfc00117 	ldw	ra,4(sp)
   1b404:	df000017 	ldw	fp,0(sp)
   1b408:	dec00204 	addi	sp,sp,8
   1b40c:	f800283a 	ret

0001b410 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   1b410:	defff804 	addi	sp,sp,-32
   1b414:	dfc00715 	stw	ra,28(sp)
   1b418:	df000615 	stw	fp,24(sp)
   1b41c:	df000604 	addi	fp,sp,24
   1b420:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b424:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   1b428:	d0a84d43 	ldbu	r2,-24267(gp)
   1b42c:	10803fcc 	andi	r2,r2,255
   1b430:	10800060 	cmpeqi	r2,r2,1
   1b434:	10002326 	beq	r2,zero,1b4c4 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b438:	0005303a 	rdctl	r2,status
   1b43c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b440:	e0fffe17 	ldw	r3,-8(fp)
   1b444:	00bfff84 	movi	r2,-2
   1b448:	1884703a 	and	r2,r3,r2
   1b44c:	1001703a 	wrctl	status,r2
  
  return context;
   1b450:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
   1b454:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   1b458:	d0a84b17 	ldw	r2,-24276(gp)
   1b45c:	1000051e 	bne	r2,zero,1b474 <__malloc_unlock+0x64>
   1b460:	e0bffa17 	ldw	r2,-24(fp)
   1b464:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b468:	e0bffb17 	ldw	r2,-20(fp)
   1b46c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   1b470:	00001506 	br	1b4c8 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   1b474:	d0a84b17 	ldw	r2,-24276(gp)
   1b478:	10bfffc4 	addi	r2,r2,-1
   1b47c:	d0a84b15 	stw	r2,-24276(gp)
   1b480:	d0a84b17 	ldw	r2,-24276(gp)
   1b484:	10000a1e 	bne	r2,zero,1b4b0 <__malloc_unlock+0xa0>
  {
    lockid = -1;
   1b488:	00bfffc4 	movi	r2,-1
   1b48c:	d0a02715 	stw	r2,-32612(gp)
   1b490:	e0bffa17 	ldw	r2,-24(fp)
   1b494:	e0bffc15 	stw	r2,-16(fp)
   1b498:	e0bffc17 	ldw	r2,-16(fp)
   1b49c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   1b4a0:	d0a84c17 	ldw	r2,-24272(gp)
   1b4a4:	1009883a 	mov	r4,r2
   1b4a8:	0020d3c0 	call	20d3c <OSSemPost>
   1b4ac:	00000606 	br	1b4c8 <__malloc_unlock+0xb8>
   1b4b0:	e0bffa17 	ldw	r2,-24(fp)
   1b4b4:	e0bffd15 	stw	r2,-12(fp)
   1b4b8:	e0bffd17 	ldw	r2,-12(fp)
   1b4bc:	1001703a 	wrctl	status,r2
   1b4c0:	00000106 	br	1b4c8 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
   1b4c4:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   1b4c8:	e037883a 	mov	sp,fp
   1b4cc:	dfc00117 	ldw	ra,4(sp)
   1b4d0:	df000017 	ldw	fp,0(sp)
   1b4d4:	dec00204 	addi	sp,sp,8
   1b4d8:	f800283a 	ret

0001b4dc <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   1b4dc:	defff704 	addi	sp,sp,-36
   1b4e0:	dfc00815 	stw	ra,32(sp)
   1b4e4:	df000715 	stw	fp,28(sp)
   1b4e8:	df000704 	addi	fp,sp,28
   1b4ec:	e13ffd15 	stw	r4,-12(fp)
   1b4f0:	e17ffe15 	stw	r5,-8(fp)
   1b4f4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b4f8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1b4fc:	e0bfff17 	ldw	r2,-4(fp)
   1b500:	1000021e 	bne	r2,zero,1b50c <OSEventNameGet+0x30>
        return (0);
   1b504:	0005883a 	mov	r2,zero
   1b508:	00003706 	br	1b5e8 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   1b50c:	e0bffd17 	ldw	r2,-12(fp)
   1b510:	1000051e 	bne	r2,zero,1b528 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   1b514:	e0bfff17 	ldw	r2,-4(fp)
   1b518:	00c00104 	movi	r3,4
   1b51c:	10c00005 	stb	r3,0(r2)
        return (0);
   1b520:	0005883a 	mov	r2,zero
   1b524:	00003006 	br	1b5e8 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1b528:	e0bffe17 	ldw	r2,-8(fp)
   1b52c:	1000051e 	bne	r2,zero,1b544 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1b530:	e0bfff17 	ldw	r2,-4(fp)
   1b534:	00c00304 	movi	r3,12
   1b538:	10c00005 	stb	r3,0(r2)
        return (0);
   1b53c:	0005883a 	mov	r2,zero
   1b540:	00002906 	br	1b5e8 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1b544:	d0a85b03 	ldbu	r2,-24212(gp)
   1b548:	10803fcc 	andi	r2,r2,255
   1b54c:	10000526 	beq	r2,zero,1b564 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   1b550:	e0bfff17 	ldw	r2,-4(fp)
   1b554:	00c00444 	movi	r3,17
   1b558:	10c00005 	stb	r3,0(r2)
        return (0);
   1b55c:	0005883a 	mov	r2,zero
   1b560:	00002106 	br	1b5e8 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   1b564:	e0bffd17 	ldw	r2,-12(fp)
   1b568:	10800003 	ldbu	r2,0(r2)
   1b56c:	10803fcc 	andi	r2,r2,255
   1b570:	10bfffc4 	addi	r2,r2,-1
   1b574:	10800128 	cmpgeui	r2,r2,4
   1b578:	10000526 	beq	r2,zero,1b590 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   1b57c:	e0bfff17 	ldw	r2,-4(fp)
   1b580:	00c00044 	movi	r3,1
   1b584:	10c00005 	stb	r3,0(r2)
             return (0);
   1b588:	0005883a 	mov	r2,zero
   1b58c:	00001606 	br	1b5e8 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   1b590:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b594:	0005303a 	rdctl	r2,status
   1b598:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b59c:	e0fffb17 	ldw	r3,-20(fp)
   1b5a0:	00bfff84 	movi	r2,-2
   1b5a4:	1884703a 	and	r2,r3,r2
   1b5a8:	1001703a 	wrctl	status,r2
  
  return context;
   1b5ac:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   1b5b0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   1b5b4:	e0bffd17 	ldw	r2,-12(fp)
   1b5b8:	10800384 	addi	r2,r2,14
   1b5bc:	100b883a 	mov	r5,r2
   1b5c0:	e13ffe17 	ldw	r4,-8(fp)
   1b5c4:	001cf600 	call	1cf60 <OS_StrCopy>
   1b5c8:	e0bffa05 	stb	r2,-24(fp)
   1b5cc:	e0bff917 	ldw	r2,-28(fp)
   1b5d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b5d4:	e0bffc17 	ldw	r2,-16(fp)
   1b5d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1b5dc:	e0bfff17 	ldw	r2,-4(fp)
   1b5e0:	10000005 	stb	zero,0(r2)
    return (len);
   1b5e4:	e0bffa03 	ldbu	r2,-24(fp)
}
   1b5e8:	e037883a 	mov	sp,fp
   1b5ec:	dfc00117 	ldw	ra,4(sp)
   1b5f0:	df000017 	ldw	fp,0(sp)
   1b5f4:	dec00204 	addi	sp,sp,8
   1b5f8:	f800283a 	ret

0001b5fc <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   1b5fc:	defff604 	addi	sp,sp,-40
   1b600:	dfc00915 	stw	ra,36(sp)
   1b604:	df000815 	stw	fp,32(sp)
   1b608:	df000804 	addi	fp,sp,32
   1b60c:	e13ffd15 	stw	r4,-12(fp)
   1b610:	e17ffe15 	stw	r5,-8(fp)
   1b614:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1b618:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1b61c:	e0bfff17 	ldw	r2,-4(fp)
   1b620:	10004026 	beq	r2,zero,1b724 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   1b624:	e0bffd17 	ldw	r2,-12(fp)
   1b628:	1000041e 	bne	r2,zero,1b63c <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   1b62c:	e0bfff17 	ldw	r2,-4(fp)
   1b630:	00c00104 	movi	r3,4
   1b634:	10c00005 	stb	r3,0(r2)
        return;
   1b638:	00003b06 	br	1b728 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1b63c:	e0bffe17 	ldw	r2,-8(fp)
   1b640:	1000041e 	bne	r2,zero,1b654 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   1b644:	e0bfff17 	ldw	r2,-4(fp)
   1b648:	00c00304 	movi	r3,12
   1b64c:	10c00005 	stb	r3,0(r2)
        return;
   1b650:	00003506 	br	1b728 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1b654:	d0a85b03 	ldbu	r2,-24212(gp)
   1b658:	10803fcc 	andi	r2,r2,255
   1b65c:	10000426 	beq	r2,zero,1b670 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   1b660:	e0bfff17 	ldw	r2,-4(fp)
   1b664:	00c00484 	movi	r3,18
   1b668:	10c00005 	stb	r3,0(r2)
        return;
   1b66c:	00002e06 	br	1b728 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
   1b670:	e0bffd17 	ldw	r2,-12(fp)
   1b674:	10800003 	ldbu	r2,0(r2)
   1b678:	10803fcc 	andi	r2,r2,255
   1b67c:	10bfffc4 	addi	r2,r2,-1
   1b680:	10800128 	cmpgeui	r2,r2,4
   1b684:	10000426 	beq	r2,zero,1b698 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   1b688:	e0bfff17 	ldw	r2,-4(fp)
   1b68c:	00c00044 	movi	r3,1
   1b690:	10c00005 	stb	r3,0(r2)
             return;
   1b694:	00002406 	br	1b728 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   1b698:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b69c:	0005303a 	rdctl	r2,status
   1b6a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b6a4:	e0fffc17 	ldw	r3,-16(fp)
   1b6a8:	00bfff84 	movi	r2,-2
   1b6ac:	1884703a 	and	r2,r3,r2
   1b6b0:	1001703a 	wrctl	status,r2
  
  return context;
   1b6b4:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   1b6b8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   1b6bc:	e13ffe17 	ldw	r4,-8(fp)
   1b6c0:	001cfd40 	call	1cfd4 <OS_StrLen>
   1b6c4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   1b6c8:	e0bffa03 	ldbu	r2,-24(fp)
   1b6cc:	10800830 	cmpltui	r2,r2,32
   1b6d0:	1000081e 	bne	r2,zero,1b6f4 <OSEventNameSet+0xf8>
   1b6d4:	e0bff817 	ldw	r2,-32(fp)
   1b6d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b6dc:	e0bff917 	ldw	r2,-28(fp)
   1b6e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   1b6e4:	e0bfff17 	ldw	r2,-4(fp)
   1b6e8:	00c002c4 	movi	r3,11
   1b6ec:	10c00005 	stb	r3,0(r2)
        return;
   1b6f0:	00000d06 	br	1b728 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   1b6f4:	e0bffd17 	ldw	r2,-12(fp)
   1b6f8:	10800384 	addi	r2,r2,14
   1b6fc:	e17ffe17 	ldw	r5,-8(fp)
   1b700:	1009883a 	mov	r4,r2
   1b704:	001cf600 	call	1cf60 <OS_StrCopy>
   1b708:	e0bff817 	ldw	r2,-32(fp)
   1b70c:	e0bffb15 	stw	r2,-20(fp)
   1b710:	e0bffb17 	ldw	r2,-20(fp)
   1b714:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1b718:	e0bfff17 	ldw	r2,-4(fp)
   1b71c:	10000005 	stb	zero,0(r2)
   1b720:	00000106 	br	1b728 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   1b724:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   1b728:	e037883a 	mov	sp,fp
   1b72c:	dfc00117 	ldw	ra,4(sp)
   1b730:	df000017 	ldw	fp,0(sp)
   1b734:	dec00204 	addi	sp,sp,8
   1b738:	f800283a 	ret

0001b73c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   1b73c:	deffed04 	addi	sp,sp,-76
   1b740:	dfc01215 	stw	ra,72(sp)
   1b744:	df001115 	stw	fp,68(sp)
   1b748:	df001104 	addi	fp,sp,68
   1b74c:	e13ffc15 	stw	r4,-16(fp)
   1b750:	e17ffd15 	stw	r5,-12(fp)
   1b754:	e1bffe15 	stw	r6,-8(fp)
   1b758:	3805883a 	mov	r2,r7
   1b75c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   1b760:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   1b764:	e0800217 	ldw	r2,8(fp)
   1b768:	1000021e 	bne	r2,zero,1b774 <OSEventPendMulti+0x38>
        return (0);
   1b76c:	0005883a 	mov	r2,zero
   1b770:	00017106 	br	1bd38 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   1b774:	e0bffc17 	ldw	r2,-16(fp)
   1b778:	1000051e 	bne	r2,zero,1b790 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   1b77c:	e0800217 	ldw	r2,8(fp)
   1b780:	00c00104 	movi	r3,4
   1b784:	10c00005 	stb	r3,0(r2)
        return (0);
   1b788:	0005883a 	mov	r2,zero
   1b78c:	00016a06 	br	1bd38 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   1b790:	e0bffd17 	ldw	r2,-12(fp)
   1b794:	1000051e 	bne	r2,zero,1b7ac <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   1b798:	e0800217 	ldw	r2,8(fp)
   1b79c:	00c00104 	movi	r3,4
   1b7a0:	10c00005 	stb	r3,0(r2)
        return (0);
   1b7a4:	0005883a 	mov	r2,zero
   1b7a8:	00016306 	br	1bd38 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   1b7ac:	e0bffe17 	ldw	r2,-8(fp)
   1b7b0:	1000051e 	bne	r2,zero,1b7c8 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   1b7b4:	e0800217 	ldw	r2,8(fp)
   1b7b8:	00c00104 	movi	r3,4
   1b7bc:	10c00005 	stb	r3,0(r2)
        return (0);
   1b7c0:	0005883a 	mov	r2,zero
   1b7c4:	00015c06 	br	1bd38 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   1b7c8:	e0bffd17 	ldw	r2,-12(fp)
   1b7cc:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   1b7d0:	e0bffc17 	ldw	r2,-16(fp)
   1b7d4:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   1b7d8:	e0bfef17 	ldw	r2,-68(fp)
   1b7dc:	10800017 	ldw	r2,0(r2)
   1b7e0:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   1b7e4:	00001906 	br	1b84c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   1b7e8:	e0bff017 	ldw	r2,-64(fp)
   1b7ec:	10800003 	ldbu	r2,0(r2)
   1b7f0:	10803fcc 	andi	r2,r2,255
   1b7f4:	10c000a0 	cmpeqi	r3,r2,2
   1b7f8:	1800091e 	bne	r3,zero,1b820 <OSEventPendMulti+0xe4>
   1b7fc:	10c000e0 	cmpeqi	r3,r2,3
   1b800:	1800091e 	bne	r3,zero,1b828 <OSEventPendMulti+0xec>
   1b804:	10800060 	cmpeqi	r2,r2,1
   1b808:	1000091e 	bne	r2,zero,1b830 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   1b80c:	e0800217 	ldw	r2,8(fp)
   1b810:	00c00044 	movi	r3,1
   1b814:	10c00005 	stb	r3,0(r2)
                 return (0);
   1b818:	0005883a 	mov	r2,zero
   1b81c:	00014606 	br	1bd38 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   1b820:	0001883a 	nop
   1b824:	00000306 	br	1b834 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   1b828:	0001883a 	nop
   1b82c:	00000106 	br	1b834 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   1b830:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   1b834:	e0bfef17 	ldw	r2,-68(fp)
   1b838:	10800104 	addi	r2,r2,4
   1b83c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   1b840:	e0bfef17 	ldw	r2,-68(fp)
   1b844:	10800017 	ldw	r2,0(r2)
   1b848:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   1b84c:	e0bff017 	ldw	r2,-64(fp)
   1b850:	103fe51e 	bne	r2,zero,1b7e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b7e8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   1b854:	d0a85b03 	ldbu	r2,-24212(gp)
   1b858:	10803fcc 	andi	r2,r2,255
   1b85c:	10000526 	beq	r2,zero,1b874 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   1b860:	e0800217 	ldw	r2,8(fp)
   1b864:	00c00084 	movi	r3,2
   1b868:	10c00005 	stb	r3,0(r2)
        return (0);
   1b86c:	0005883a 	mov	r2,zero
   1b870:	00013106 	br	1bd38 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   1b874:	d0a84d03 	ldbu	r2,-24268(gp)
   1b878:	10803fcc 	andi	r2,r2,255
   1b87c:	10000526 	beq	r2,zero,1b894 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   1b880:	e0800217 	ldw	r2,8(fp)
   1b884:	00c00344 	movi	r3,13
   1b888:	10c00005 	stb	r3,0(r2)
        return (0);
   1b88c:	0005883a 	mov	r2,zero
   1b890:	00012906 	br	1bd38 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b894:	0005303a 	rdctl	r2,status
   1b898:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b89c:	e0fffb17 	ldw	r3,-20(fp)
   1b8a0:	00bfff84 	movi	r2,-2
   1b8a4:	1884703a 	and	r2,r3,r2
   1b8a8:	1001703a 	wrctl	status,r2
  
  return context;
   1b8ac:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   1b8b0:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   1b8b4:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   1b8b8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   1b8bc:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   1b8c0:	e0bffc17 	ldw	r2,-16(fp)
   1b8c4:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   1b8c8:	e0bfef17 	ldw	r2,-68(fp)
   1b8cc:	10800017 	ldw	r2,0(r2)
   1b8d0:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   1b8d4:	00008106 	br	1badc <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   1b8d8:	e0bff017 	ldw	r2,-64(fp)
   1b8dc:	10800003 	ldbu	r2,0(r2)
   1b8e0:	10803fcc 	andi	r2,r2,255
   1b8e4:	10c000a0 	cmpeqi	r3,r2,2
   1b8e8:	18003c1e 	bne	r3,zero,1b9dc <OSEventPendMulti+0x2a0>
   1b8ec:	10c000e0 	cmpeqi	r3,r2,3
   1b8f0:	1800031e 	bne	r3,zero,1b900 <OSEventPendMulti+0x1c4>
   1b8f4:	10800060 	cmpeqi	r2,r2,1
   1b8f8:	10001e1e 	bne	r2,zero,1b974 <OSEventPendMulti+0x238>
   1b8fc:	00006606 	br	1ba98 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   1b900:	e0bff017 	ldw	r2,-64(fp)
   1b904:	1080020b 	ldhu	r2,8(r2)
   1b908:	10bfffcc 	andi	r2,r2,65535
   1b90c:	10001526 	beq	r2,zero,1b964 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   1b910:	e0bff017 	ldw	r2,-64(fp)
   1b914:	1080020b 	ldhu	r2,8(r2)
   1b918:	10bfffc4 	addi	r2,r2,-1
   1b91c:	1007883a 	mov	r3,r2
   1b920:	e0bff017 	ldw	r2,-64(fp)
   1b924:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   1b928:	e0bffd17 	ldw	r2,-12(fp)
   1b92c:	10c00104 	addi	r3,r2,4
   1b930:	e0fffd15 	stw	r3,-12(fp)
   1b934:	e0fff017 	ldw	r3,-64(fp)
   1b938:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   1b93c:	00800044 	movi	r2,1
   1b940:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   1b944:	e0bffe17 	ldw	r2,-8(fp)
   1b948:	10c00104 	addi	r3,r2,4
   1b94c:	e0fffe15 	stw	r3,-8(fp)
   1b950:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   1b954:	e0bff18b 	ldhu	r2,-58(fp)
   1b958:	10800044 	addi	r2,r2,1
   1b95c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   1b960:	00005806 	br	1bac4 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   1b964:	e0bff203 	ldbu	r2,-56(fp)
   1b968:	10800054 	ori	r2,r2,1
   1b96c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   1b970:	00005406 	br	1bac4 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   1b974:	e0bff017 	ldw	r2,-64(fp)
   1b978:	10800117 	ldw	r2,4(r2)
   1b97c:	10001326 	beq	r2,zero,1b9cc <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   1b980:	e0bffe17 	ldw	r2,-8(fp)
   1b984:	10c00104 	addi	r3,r2,4
   1b988:	e0fffe15 	stw	r3,-8(fp)
   1b98c:	e0fff017 	ldw	r3,-64(fp)
   1b990:	18c00117 	ldw	r3,4(r3)
   1b994:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   1b998:	e0bff017 	ldw	r2,-64(fp)
   1b99c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   1b9a0:	e0bffd17 	ldw	r2,-12(fp)
   1b9a4:	10c00104 	addi	r3,r2,4
   1b9a8:	e0fffd15 	stw	r3,-12(fp)
   1b9ac:	e0fff017 	ldw	r3,-64(fp)
   1b9b0:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   1b9b4:	00800044 	movi	r2,1
   1b9b8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   1b9bc:	e0bff18b 	ldhu	r2,-58(fp)
   1b9c0:	10800044 	addi	r2,r2,1
   1b9c4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   1b9c8:	00003e06 	br	1bac4 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   1b9cc:	e0bff203 	ldbu	r2,-56(fp)
   1b9d0:	10800094 	ori	r2,r2,2
   1b9d4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   1b9d8:	00003a06 	br	1bac4 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   1b9dc:	e0bff017 	ldw	r2,-64(fp)
   1b9e0:	10800117 	ldw	r2,4(r2)
   1b9e4:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   1b9e8:	e0bff517 	ldw	r2,-44(fp)
   1b9ec:	1080058b 	ldhu	r2,22(r2)
   1b9f0:	10bfffcc 	andi	r2,r2,65535
   1b9f4:	10002426 	beq	r2,zero,1ba88 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   1b9f8:	e0bffe17 	ldw	r2,-8(fp)
   1b9fc:	10c00104 	addi	r3,r2,4
   1ba00:	e0fffe15 	stw	r3,-8(fp)
   1ba04:	e0fff517 	ldw	r3,-44(fp)
   1ba08:	18c00417 	ldw	r3,16(r3)
   1ba0c:	19400104 	addi	r5,r3,4
   1ba10:	e13ff517 	ldw	r4,-44(fp)
   1ba14:	21400415 	stw	r5,16(r4)
   1ba18:	18c00017 	ldw	r3,0(r3)
   1ba1c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   1ba20:	e0bff517 	ldw	r2,-44(fp)
   1ba24:	10c00417 	ldw	r3,16(r2)
   1ba28:	e0bff517 	ldw	r2,-44(fp)
   1ba2c:	10800217 	ldw	r2,8(r2)
   1ba30:	1880041e 	bne	r3,r2,1ba44 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   1ba34:	e0bff517 	ldw	r2,-44(fp)
   1ba38:	10c00117 	ldw	r3,4(r2)
   1ba3c:	e0bff517 	ldw	r2,-44(fp)
   1ba40:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   1ba44:	e0bff517 	ldw	r2,-44(fp)
   1ba48:	1080058b 	ldhu	r2,22(r2)
   1ba4c:	10bfffc4 	addi	r2,r2,-1
   1ba50:	1007883a 	mov	r3,r2
   1ba54:	e0bff517 	ldw	r2,-44(fp)
   1ba58:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   1ba5c:	e0bffd17 	ldw	r2,-12(fp)
   1ba60:	10c00104 	addi	r3,r2,4
   1ba64:	e0fffd15 	stw	r3,-12(fp)
   1ba68:	e0fff017 	ldw	r3,-64(fp)
   1ba6c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   1ba70:	00800044 	movi	r2,1
   1ba74:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   1ba78:	e0bff18b 	ldhu	r2,-58(fp)
   1ba7c:	10800044 	addi	r2,r2,1
   1ba80:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   1ba84:	00000f06 	br	1bac4 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   1ba88:	e0bff203 	ldbu	r2,-56(fp)
   1ba8c:	10800114 	ori	r2,r2,4
   1ba90:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   1ba94:	00000b06 	br	1bac4 <OSEventPendMulti+0x388>
   1ba98:	e0bff317 	ldw	r2,-52(fp)
   1ba9c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1baa0:	e0bff417 	ldw	r2,-48(fp)
   1baa4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   1baa8:	e0bffd17 	ldw	r2,-12(fp)
   1baac:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   1bab0:	e0800217 	ldw	r2,8(fp)
   1bab4:	00c00044 	movi	r3,1
   1bab8:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   1babc:	e0bff18b 	ldhu	r2,-58(fp)
   1bac0:	00009d06 	br	1bd38 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   1bac4:	e0bfef17 	ldw	r2,-68(fp)
   1bac8:	10800104 	addi	r2,r2,4
   1bacc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   1bad0:	e0bfef17 	ldw	r2,-68(fp)
   1bad4:	10800017 	ldw	r2,0(r2)
   1bad8:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   1badc:	e0bff017 	ldw	r2,-64(fp)
   1bae0:	103f7d1e 	bne	r2,zero,1b8d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b8d8>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   1bae4:	e0bff103 	ldbu	r2,-60(fp)
   1bae8:	10800058 	cmpnei	r2,r2,1
   1baec:	10000a1e 	bne	r2,zero,1bb18 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   1baf0:	e0bffd17 	ldw	r2,-12(fp)
   1baf4:	10000015 	stw	zero,0(r2)
   1baf8:	e0bff317 	ldw	r2,-52(fp)
   1bafc:	e0bff615 	stw	r2,-40(fp)
   1bb00:	e0bff617 	ldw	r2,-40(fp)
   1bb04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   1bb08:	e0800217 	ldw	r2,8(fp)
   1bb0c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   1bb10:	e0bff18b 	ldhu	r2,-58(fp)
   1bb14:	00008806 	br	1bd38 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   1bb18:	d0a85c17 	ldw	r2,-24208(gp)
   1bb1c:	d0e85c17 	ldw	r3,-24208(gp)
   1bb20:	19000c03 	ldbu	r4,48(r3)
   1bb24:	e0fff203 	ldbu	r3,-56(fp)
   1bb28:	20c6b03a 	or	r3,r4,r3
   1bb2c:	1809883a 	mov	r4,r3
   1bb30:	00ffe004 	movi	r3,-128
   1bb34:	20c6b03a 	or	r3,r4,r3
   1bb38:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1bb3c:	d0a85c17 	ldw	r2,-24208(gp)
   1bb40:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   1bb44:	d0a85c17 	ldw	r2,-24208(gp)
   1bb48:	e0ffff0b 	ldhu	r3,-4(fp)
   1bb4c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   1bb50:	e13ffc17 	ldw	r4,-16(fp)
   1bb54:	001c6780 	call	1c678 <OS_EventTaskWaitMulti>
   1bb58:	e0bff317 	ldw	r2,-52(fp)
   1bb5c:	e0bff915 	stw	r2,-28(fp)
   1bb60:	e0bff917 	ldw	r2,-28(fp)
   1bb64:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   1bb68:	001ce1c0 	call	1ce1c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bb6c:	0005303a 	rdctl	r2,status
   1bb70:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bb74:	e0fff717 	ldw	r3,-36(fp)
   1bb78:	00bfff84 	movi	r2,-2
   1bb7c:	1884703a 	and	r2,r3,r2
   1bb80:	1001703a 	wrctl	status,r2
  
  return context;
   1bb84:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   1bb88:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   1bb8c:	d0a85c17 	ldw	r2,-24208(gp)
   1bb90:	10800c43 	ldbu	r2,49(r2)
   1bb94:	10803fcc 	andi	r2,r2,255
   1bb98:	10000226 	beq	r2,zero,1bba4 <OSEventPendMulti+0x468>
   1bb9c:	108000a0 	cmpeqi	r2,r2,2
   1bba0:	10001826 	beq	r2,zero,1bc04 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   1bba4:	d0a85c17 	ldw	r2,-24208(gp)
   1bba8:	10800717 	ldw	r2,28(r2)
   1bbac:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   1bbb0:	e0bff017 	ldw	r2,-64(fp)
   1bbb4:	10000b26 	beq	r2,zero,1bbe4 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   1bbb8:	e0bffd17 	ldw	r2,-12(fp)
   1bbbc:	10c00104 	addi	r3,r2,4
   1bbc0:	e0fffd15 	stw	r3,-12(fp)
   1bbc4:	e0fff017 	ldw	r3,-64(fp)
   1bbc8:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   1bbcc:	e0bffd17 	ldw	r2,-12(fp)
   1bbd0:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   1bbd4:	e0bff18b 	ldhu	r2,-58(fp)
   1bbd8:	10800044 	addi	r2,r2,1
   1bbdc:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   1bbe0:	00000d06 	br	1bc18 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   1bbe4:	d0a85c17 	ldw	r2,-24208(gp)
   1bbe8:	00c00044 	movi	r3,1
   1bbec:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   1bbf0:	d0a85c17 	ldw	r2,-24208(gp)
   1bbf4:	e17ffc17 	ldw	r5,-16(fp)
   1bbf8:	1009883a 	mov	r4,r2
   1bbfc:	001c8800 	call	1c880 <OS_EventTaskRemoveMulti>
             }
			 break;
   1bc00:	00000506 	br	1bc18 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   1bc04:	d0a85c17 	ldw	r2,-24208(gp)
   1bc08:	e17ffc17 	ldw	r5,-16(fp)
   1bc0c:	1009883a 	mov	r4,r2
   1bc10:	001c8800 	call	1c880 <OS_EventTaskRemoveMulti>
             break;
   1bc14:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   1bc18:	d0a85c17 	ldw	r2,-24208(gp)
   1bc1c:	10800c43 	ldbu	r2,49(r2)
   1bc20:	10803fcc 	andi	r2,r2,255
   1bc24:	10000326 	beq	r2,zero,1bc34 <OSEventPendMulti+0x4f8>
   1bc28:	108000a0 	cmpeqi	r2,r2,2
   1bc2c:	1000231e 	bne	r2,zero,1bcbc <OSEventPendMulti+0x580>
   1bc30:	00002a06 	br	1bcdc <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   1bc34:	e0bff017 	ldw	r2,-64(fp)
   1bc38:	10800003 	ldbu	r2,0(r2)
   1bc3c:	10803fcc 	andi	r2,r2,255
   1bc40:	0080100e 	bge	zero,r2,1bc84 <OSEventPendMulti+0x548>
   1bc44:	10c000d0 	cmplti	r3,r2,3
   1bc48:	1800071e 	bne	r3,zero,1bc68 <OSEventPendMulti+0x52c>
   1bc4c:	108000e0 	cmpeqi	r2,r2,3
   1bc50:	10000c26 	beq	r2,zero,1bc84 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   1bc54:	e0bffe17 	ldw	r2,-8(fp)
   1bc58:	10c00104 	addi	r3,r2,4
   1bc5c:	e0fffe15 	stw	r3,-8(fp)
   1bc60:	10000015 	stw	zero,0(r2)
                      break;
   1bc64:	00001206 	br	1bcb0 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   1bc68:	e0bffe17 	ldw	r2,-8(fp)
   1bc6c:	10c00104 	addi	r3,r2,4
   1bc70:	e0fffe15 	stw	r3,-8(fp)
   1bc74:	d0e85c17 	ldw	r3,-24208(gp)
   1bc78:	18c00917 	ldw	r3,36(r3)
   1bc7c:	10c00015 	stw	r3,0(r2)
                      break;
   1bc80:	00000b06 	br	1bcb0 <OSEventPendMulti+0x574>
   1bc84:	e0bff317 	ldw	r2,-52(fp)
   1bc88:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bc8c:	e0bff817 	ldw	r2,-32(fp)
   1bc90:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   1bc94:	e0bffd17 	ldw	r2,-12(fp)
   1bc98:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   1bc9c:	e0800217 	ldw	r2,8(fp)
   1bca0:	00c00044 	movi	r3,1
   1bca4:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   1bca8:	e0bff18b 	ldhu	r2,-58(fp)
   1bcac:	00002206 	br	1bd38 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   1bcb0:	e0800217 	ldw	r2,8(fp)
   1bcb4:	10000005 	stb	zero,0(r2)
             break;
   1bcb8:	00001006 	br	1bcfc <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   1bcbc:	e0bffe17 	ldw	r2,-8(fp)
   1bcc0:	10c00104 	addi	r3,r2,4
   1bcc4:	e0fffe15 	stw	r3,-8(fp)
   1bcc8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   1bccc:	e0800217 	ldw	r2,8(fp)
   1bcd0:	00c00384 	movi	r3,14
   1bcd4:	10c00005 	stb	r3,0(r2)
             break;
   1bcd8:	00000806 	br	1bcfc <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   1bcdc:	e0bffe17 	ldw	r2,-8(fp)
   1bce0:	10c00104 	addi	r3,r2,4
   1bce4:	e0fffe15 	stw	r3,-8(fp)
   1bce8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   1bcec:	e0800217 	ldw	r2,8(fp)
   1bcf0:	00c00284 	movi	r3,10
   1bcf4:	10c00005 	stb	r3,0(r2)
             break;
   1bcf8:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   1bcfc:	d0a85c17 	ldw	r2,-24208(gp)
   1bd00:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   1bd04:	d0a85c17 	ldw	r2,-24208(gp)
   1bd08:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   1bd0c:	d0a85c17 	ldw	r2,-24208(gp)
   1bd10:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1bd14:	d0a85c17 	ldw	r2,-24208(gp)
   1bd18:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   1bd1c:	d0a85c17 	ldw	r2,-24208(gp)
   1bd20:	10000915 	stw	zero,36(r2)
   1bd24:	e0bff317 	ldw	r2,-52(fp)
   1bd28:	e0bffa15 	stw	r2,-24(fp)
   1bd2c:	e0bffa17 	ldw	r2,-24(fp)
   1bd30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   1bd34:	e0bff18b 	ldhu	r2,-58(fp)
}
   1bd38:	e037883a 	mov	sp,fp
   1bd3c:	dfc00117 	ldw	ra,4(sp)
   1bd40:	df000017 	ldw	fp,0(sp)
   1bd44:	dec00204 	addi	sp,sp,8
   1bd48:	f800283a 	ret

0001bd4c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   1bd4c:	defffe04 	addi	sp,sp,-8
   1bd50:	dfc00115 	stw	ra,4(sp)
   1bd54:	df000015 	stw	fp,0(sp)
   1bd58:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   1bd5c:	00263700 	call	26370 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   1bd60:	001cac80 	call	1cac8 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   1bd64:	001cb100 	call	1cb10 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   1bd68:	001cc7c0 	call	1cc7c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   1bd6c:	001c9e80 	call	1c9e8 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   1bd70:	001eb2c0 	call	1eb2c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   1bd74:	001f42c0 	call	1f42c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   1bd78:	00205540 	call	20554 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   1bd7c:	001cb7c0 	call	1cb7c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   1bd80:	001cbfc0 	call	1cbfc <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   1bd84:	00263900 	call	26390 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   1bd88:	001d5000 	call	1d500 <OSDebugInit>
#endif
}
   1bd8c:	0001883a 	nop
   1bd90:	e037883a 	mov	sp,fp
   1bd94:	dfc00117 	ldw	ra,4(sp)
   1bd98:	df000017 	ldw	fp,0(sp)
   1bd9c:	dec00204 	addi	sp,sp,8
   1bda0:	f800283a 	ret

0001bda4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   1bda4:	deffff04 	addi	sp,sp,-4
   1bda8:	df000015 	stw	fp,0(sp)
   1bdac:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
   1bdb0:	d0a84d43 	ldbu	r2,-24267(gp)
   1bdb4:	10803fcc 	andi	r2,r2,255
   1bdb8:	10800058 	cmpnei	r2,r2,1
   1bdbc:	1000071e 	bne	r2,zero,1bddc <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
   1bdc0:	d0a85b03 	ldbu	r2,-24212(gp)
   1bdc4:	10803fcc 	andi	r2,r2,255
   1bdc8:	10803fe0 	cmpeqi	r2,r2,255
   1bdcc:	1000031e 	bne	r2,zero,1bddc <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   1bdd0:	d0a85b03 	ldbu	r2,-24212(gp)
   1bdd4:	10800044 	addi	r2,r2,1
   1bdd8:	d0a85b05 	stb	r2,-24212(gp)
        }
    }
}
   1bddc:	0001883a 	nop
   1bde0:	e037883a 	mov	sp,fp
   1bde4:	df000017 	ldw	fp,0(sp)
   1bde8:	dec00104 	addi	sp,sp,4
   1bdec:	f800283a 	ret

0001bdf0 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   1bdf0:	defffb04 	addi	sp,sp,-20
   1bdf4:	dfc00415 	stw	ra,16(sp)
   1bdf8:	df000315 	stw	fp,12(sp)
   1bdfc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1be00:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   1be04:	d0a84d43 	ldbu	r2,-24267(gp)
   1be08:	10803fcc 	andi	r2,r2,255
   1be0c:	10800058 	cmpnei	r2,r2,1
   1be10:	10002f1e 	bne	r2,zero,1bed0 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1be14:	0005303a 	rdctl	r2,status
   1be18:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1be1c:	e0ffff17 	ldw	r3,-4(fp)
   1be20:	00bfff84 	movi	r2,-2
   1be24:	1884703a 	and	r2,r3,r2
   1be28:	1001703a 	wrctl	status,r2
  
  return context;
   1be2c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   1be30:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   1be34:	d0a85b03 	ldbu	r2,-24212(gp)
   1be38:	10803fcc 	andi	r2,r2,255
   1be3c:	10000326 	beq	r2,zero,1be4c <OSIntExit+0x5c>
            OSIntNesting--;
   1be40:	d0a85b03 	ldbu	r2,-24212(gp)
   1be44:	10bfffc4 	addi	r2,r2,-1
   1be48:	d0a85b05 	stb	r2,-24212(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   1be4c:	d0a85b03 	ldbu	r2,-24212(gp)
   1be50:	10803fcc 	andi	r2,r2,255
   1be54:	10001a1e 	bne	r2,zero,1bec0 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   1be58:	d0a84d03 	ldbu	r2,-24268(gp)
   1be5c:	10803fcc 	andi	r2,r2,255
   1be60:	1000171e 	bne	r2,zero,1bec0 <OSIntExit+0xd0>
                OS_SchedNew();
   1be64:	001ceec0 	call	1ceec <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   1be68:	d0e84f03 	ldbu	r3,-24260(gp)
   1be6c:	d0a84f43 	ldbu	r2,-24259(gp)
   1be70:	18c03fcc 	andi	r3,r3,255
   1be74:	10803fcc 	andi	r2,r2,255
   1be78:	18801126 	beq	r3,r2,1bec0 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   1be7c:	d0a84f03 	ldbu	r2,-24260(gp)
   1be80:	10c03fcc 	andi	r3,r2,255
   1be84:	00800134 	movhi	r2,4
   1be88:	10ae8104 	addi	r2,r2,-17916
   1be8c:	18c7883a 	add	r3,r3,r3
   1be90:	18c7883a 	add	r3,r3,r3
   1be94:	10c5883a 	add	r2,r2,r3
   1be98:	10800017 	ldw	r2,0(r2)
   1be9c:	d0a85715 	stw	r2,-24228(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   1bea0:	d0a85717 	ldw	r2,-24228(gp)
   1bea4:	10c00e17 	ldw	r3,56(r2)
   1bea8:	18c00044 	addi	r3,r3,1
   1beac:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   1beb0:	d0a85217 	ldw	r2,-24248(gp)
   1beb4:	10800044 	addi	r2,r2,1
   1beb8:	d0a85215 	stw	r2,-24248(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   1bebc:	002609c0 	call	2609c <OSCtxSw>
   1bec0:	e0bffd17 	ldw	r2,-12(fp)
   1bec4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bec8:	e0bffe17 	ldw	r2,-8(fp)
   1becc:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   1bed0:	0001883a 	nop
   1bed4:	e037883a 	mov	sp,fp
   1bed8:	dfc00117 	ldw	ra,4(sp)
   1bedc:	df000017 	ldw	fp,0(sp)
   1bee0:	dec00204 	addi	sp,sp,8
   1bee4:	f800283a 	ret

0001bee8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   1bee8:	defffc04 	addi	sp,sp,-16
   1beec:	df000315 	stw	fp,12(sp)
   1bef0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1bef4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   1bef8:	d0a84d43 	ldbu	r2,-24267(gp)
   1befc:	10803fcc 	andi	r2,r2,255
   1bf00:	10800058 	cmpnei	r2,r2,1
   1bf04:	1000161e 	bne	r2,zero,1bf60 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bf08:	0005303a 	rdctl	r2,status
   1bf0c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bf10:	e0ffff17 	ldw	r3,-4(fp)
   1bf14:	00bfff84 	movi	r2,-2
   1bf18:	1884703a 	and	r2,r3,r2
   1bf1c:	1001703a 	wrctl	status,r2
  
  return context;
   1bf20:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   1bf24:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   1bf28:	d0a85b03 	ldbu	r2,-24212(gp)
   1bf2c:	10803fcc 	andi	r2,r2,255
   1bf30:	1000071e 	bne	r2,zero,1bf50 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   1bf34:	d0a84d03 	ldbu	r2,-24268(gp)
   1bf38:	10803fcc 	andi	r2,r2,255
   1bf3c:	10803fe0 	cmpeqi	r2,r2,255
   1bf40:	1000031e 	bne	r2,zero,1bf50 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   1bf44:	d0a84d03 	ldbu	r2,-24268(gp)
   1bf48:	10800044 	addi	r2,r2,1
   1bf4c:	d0a84d05 	stb	r2,-24268(gp)
   1bf50:	e0bffd17 	ldw	r2,-12(fp)
   1bf54:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bf58:	e0bffe17 	ldw	r2,-8(fp)
   1bf5c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   1bf60:	0001883a 	nop
   1bf64:	e037883a 	mov	sp,fp
   1bf68:	df000017 	ldw	fp,0(sp)
   1bf6c:	dec00104 	addi	sp,sp,4
   1bf70:	f800283a 	ret

0001bf74 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   1bf74:	defff804 	addi	sp,sp,-32
   1bf78:	dfc00715 	stw	ra,28(sp)
   1bf7c:	df000615 	stw	fp,24(sp)
   1bf80:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1bf84:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   1bf88:	d0a84d43 	ldbu	r2,-24267(gp)
   1bf8c:	10803fcc 	andi	r2,r2,255
   1bf90:	10800058 	cmpnei	r2,r2,1
   1bf94:	1000281e 	bne	r2,zero,1c038 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bf98:	0005303a 	rdctl	r2,status
   1bf9c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bfa0:	e0ffff17 	ldw	r3,-4(fp)
   1bfa4:	00bfff84 	movi	r2,-2
   1bfa8:	1884703a 	and	r2,r3,r2
   1bfac:	1001703a 	wrctl	status,r2
  
  return context;
   1bfb0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   1bfb4:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   1bfb8:	d0a84d03 	ldbu	r2,-24268(gp)
   1bfbc:	10803fcc 	andi	r2,r2,255
   1bfc0:	10001926 	beq	r2,zero,1c028 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   1bfc4:	d0a84d03 	ldbu	r2,-24268(gp)
   1bfc8:	10bfffc4 	addi	r2,r2,-1
   1bfcc:	d0a84d05 	stb	r2,-24268(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   1bfd0:	d0a84d03 	ldbu	r2,-24268(gp)
   1bfd4:	10803fcc 	andi	r2,r2,255
   1bfd8:	10000e1e 	bne	r2,zero,1c014 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   1bfdc:	d0a85b03 	ldbu	r2,-24212(gp)
   1bfe0:	10803fcc 	andi	r2,r2,255
   1bfe4:	1000061e 	bne	r2,zero,1c000 <OSSchedUnlock+0x8c>
   1bfe8:	e0bffa17 	ldw	r2,-24(fp)
   1bfec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bff0:	e0bffb17 	ldw	r2,-20(fp)
   1bff4:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   1bff8:	001ce1c0 	call	1ce1c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   1bffc:	00000e06 	br	1c038 <OSSchedUnlock+0xc4>
   1c000:	e0bffa17 	ldw	r2,-24(fp)
   1c004:	e0bffc15 	stw	r2,-16(fp)
   1c008:	e0bffc17 	ldw	r2,-16(fp)
   1c00c:	1001703a 	wrctl	status,r2
   1c010:	00000906 	br	1c038 <OSSchedUnlock+0xc4>
   1c014:	e0bffa17 	ldw	r2,-24(fp)
   1c018:	e0bffd15 	stw	r2,-12(fp)
   1c01c:	e0bffd17 	ldw	r2,-12(fp)
   1c020:	1001703a 	wrctl	status,r2
   1c024:	00000406 	br	1c038 <OSSchedUnlock+0xc4>
   1c028:	e0bffa17 	ldw	r2,-24(fp)
   1c02c:	e0bffe15 	stw	r2,-8(fp)
   1c030:	e0bffe17 	ldw	r2,-8(fp)
   1c034:	1001703a 	wrctl	status,r2
   1c038:	0001883a 	nop
   1c03c:	e037883a 	mov	sp,fp
   1c040:	dfc00117 	ldw	ra,4(sp)
   1c044:	df000017 	ldw	fp,0(sp)
   1c048:	dec00204 	addi	sp,sp,8
   1c04c:	f800283a 	ret

0001c050 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   1c050:	defffe04 	addi	sp,sp,-8
   1c054:	dfc00115 	stw	ra,4(sp)
   1c058:	df000015 	stw	fp,0(sp)
   1c05c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   1c060:	d0a84d43 	ldbu	r2,-24267(gp)
   1c064:	10803fcc 	andi	r2,r2,255
   1c068:	10000f1e 	bne	r2,zero,1c0a8 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   1c06c:	001ceec0 	call	1ceec <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   1c070:	d0a84f03 	ldbu	r2,-24260(gp)
   1c074:	d0a84f45 	stb	r2,-24259(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   1c078:	d0a84f03 	ldbu	r2,-24260(gp)
   1c07c:	10c03fcc 	andi	r3,r2,255
   1c080:	00800134 	movhi	r2,4
   1c084:	10ae8104 	addi	r2,r2,-17916
   1c088:	18c7883a 	add	r3,r3,r3
   1c08c:	18c7883a 	add	r3,r3,r3
   1c090:	10c5883a 	add	r2,r2,r3
   1c094:	10800017 	ldw	r2,0(r2)
   1c098:	d0a85715 	stw	r2,-24228(gp)
        OSTCBCur      = OSTCBHighRdy;
   1c09c:	d0a85717 	ldw	r2,-24228(gp)
   1c0a0:	d0a85c15 	stw	r2,-24208(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   1c0a4:	00261280 	call	26128 <OSStartHighRdy>
    }
}
   1c0a8:	0001883a 	nop
   1c0ac:	e037883a 	mov	sp,fp
   1c0b0:	dfc00117 	ldw	ra,4(sp)
   1c0b4:	df000017 	ldw	fp,0(sp)
   1c0b8:	dec00204 	addi	sp,sp,8
   1c0bc:	f800283a 	ret

0001c0c0 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   1c0c0:	defff904 	addi	sp,sp,-28
   1c0c4:	dfc00615 	stw	ra,24(sp)
   1c0c8:	df000515 	stw	fp,20(sp)
   1c0cc:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1c0d0:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   1c0d4:	01000084 	movi	r4,2
   1c0d8:	00227c80 	call	227c8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c0dc:	0005303a 	rdctl	r2,status
   1c0e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c0e4:	e0fffc17 	ldw	r3,-16(fp)
   1c0e8:	00bfff84 	movi	r2,-2
   1c0ec:	1884703a 	and	r2,r3,r2
   1c0f0:	1001703a 	wrctl	status,r2
  
  return context;
   1c0f4:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   1c0f8:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   1c0fc:	d0284e15 	stw	zero,-24264(gp)
   1c100:	e0bffb17 	ldw	r2,-20(fp)
   1c104:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c108:	e0bffd17 	ldw	r2,-12(fp)
   1c10c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   1c110:	0009883a 	mov	r4,zero
   1c114:	00227c80 	call	227c8 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c118:	0005303a 	rdctl	r2,status
   1c11c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c120:	e0fffe17 	ldw	r3,-8(fp)
   1c124:	00bfff84 	movi	r2,-2
   1c128:	1884703a 	and	r2,r3,r2
   1c12c:	1001703a 	wrctl	status,r2
  
  return context;
   1c130:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   1c134:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   1c138:	d0a84e17 	ldw	r2,-24264(gp)
   1c13c:	d0a85315 	stw	r2,-24244(gp)
    OSStatRdy    = OS_TRUE;
   1c140:	00800044 	movi	r2,1
   1c144:	d0a85f05 	stb	r2,-24196(gp)
   1c148:	e0bffb17 	ldw	r2,-20(fp)
   1c14c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c150:	e0bfff17 	ldw	r2,-4(fp)
   1c154:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1c158:	0001883a 	nop
   1c15c:	e037883a 	mov	sp,fp
   1c160:	dfc00117 	ldw	ra,4(sp)
   1c164:	df000017 	ldw	fp,0(sp)
   1c168:	dec00204 	addi	sp,sp,8
   1c16c:	f800283a 	ret

0001c170 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   1c170:	defff704 	addi	sp,sp,-36
   1c174:	dfc00815 	stw	ra,32(sp)
   1c178:	df000715 	stw	fp,28(sp)
   1c17c:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1c180:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   1c184:	00263500 	call	26350 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c188:	0005303a 	rdctl	r2,status
   1c18c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c190:	e0fffd17 	ldw	r3,-12(fp)
   1c194:	00bfff84 	movi	r2,-2
   1c198:	1884703a 	and	r2,r3,r2
   1c19c:	1001703a 	wrctl	status,r2
  
  return context;
   1c1a0:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   1c1a4:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   1c1a8:	d0a85d17 	ldw	r2,-24204(gp)
   1c1ac:	10800044 	addi	r2,r2,1
   1c1b0:	d0a85d15 	stw	r2,-24204(gp)
   1c1b4:	e0bffb17 	ldw	r2,-20(fp)
   1c1b8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c1bc:	e0bfff17 	ldw	r2,-4(fp)
   1c1c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   1c1c4:	d0a84d43 	ldbu	r2,-24267(gp)
   1c1c8:	10803fcc 	andi	r2,r2,255
   1c1cc:	10800058 	cmpnei	r2,r2,1
   1c1d0:	10006a1e 	bne	r2,zero,1c37c <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   1c1d4:	d0a85103 	ldbu	r2,-24252(gp)
   1c1d8:	10803fcc 	andi	r2,r2,255
   1c1dc:	10c00060 	cmpeqi	r3,r2,1
   1c1e0:	1800061e 	bne	r3,zero,1c1fc <OSTimeTick+0x8c>
   1c1e4:	10c000a0 	cmpeqi	r3,r2,2
   1c1e8:	1800061e 	bne	r3,zero,1c204 <OSTimeTick+0x94>
   1c1ec:	10000a1e 	bne	r2,zero,1c218 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   1c1f0:	00800044 	movi	r2,1
   1c1f4:	e0bffa05 	stb	r2,-24(fp)
                 break;
   1c1f8:	00000b06 	br	1c228 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   1c1fc:	e03ffa05 	stb	zero,-24(fp)
                 break;
   1c200:	00000906 	br	1c228 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   1c204:	00800044 	movi	r2,1
   1c208:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   1c20c:	00800044 	movi	r2,1
   1c210:	d0a85105 	stb	r2,-24252(gp)
                 break;
   1c214:	00000406 	br	1c228 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   1c218:	00800044 	movi	r2,1
   1c21c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   1c220:	d0285105 	stb	zero,-24252(gp)
                 break;
   1c224:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   1c228:	e0bffa03 	ldbu	r2,-24(fp)
   1c22c:	10005226 	beq	r2,zero,1c378 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   1c230:	d0a85017 	ldw	r2,-24256(gp)
   1c234:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   1c238:	00004906 	br	1c360 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c23c:	0005303a 	rdctl	r2,status
   1c240:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c244:	e0fffc17 	ldw	r3,-16(fp)
   1c248:	00bfff84 	movi	r2,-2
   1c24c:	1884703a 	and	r2,r3,r2
   1c250:	1001703a 	wrctl	status,r2
  
  return context;
   1c254:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
   1c258:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   1c25c:	e0bff917 	ldw	r2,-28(fp)
   1c260:	10800b8b 	ldhu	r2,46(r2)
   1c264:	10bfffcc 	andi	r2,r2,65535
   1c268:	10003626 	beq	r2,zero,1c344 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   1c26c:	e0bff917 	ldw	r2,-28(fp)
   1c270:	10800b8b 	ldhu	r2,46(r2)
   1c274:	10bfffc4 	addi	r2,r2,-1
   1c278:	1007883a 	mov	r3,r2
   1c27c:	e0bff917 	ldw	r2,-28(fp)
   1c280:	10c00b8d 	sth	r3,46(r2)
   1c284:	e0bff917 	ldw	r2,-28(fp)
   1c288:	10800b8b 	ldhu	r2,46(r2)
   1c28c:	10bfffcc 	andi	r2,r2,65535
   1c290:	10002c1e 	bne	r2,zero,1c344 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1c294:	e0bff917 	ldw	r2,-28(fp)
   1c298:	10800c03 	ldbu	r2,48(r2)
   1c29c:	10803fcc 	andi	r2,r2,255
   1c2a0:	10800dcc 	andi	r2,r2,55
   1c2a4:	10000b26 	beq	r2,zero,1c2d4 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   1c2a8:	e0bff917 	ldw	r2,-28(fp)
   1c2ac:	10c00c03 	ldbu	r3,48(r2)
   1c2b0:	00bff204 	movi	r2,-56
   1c2b4:	1884703a 	and	r2,r3,r2
   1c2b8:	1007883a 	mov	r3,r2
   1c2bc:	e0bff917 	ldw	r2,-28(fp)
   1c2c0:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   1c2c4:	e0bff917 	ldw	r2,-28(fp)
   1c2c8:	00c00044 	movi	r3,1
   1c2cc:	10c00c45 	stb	r3,49(r2)
   1c2d0:	00000206 	br	1c2dc <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   1c2d4:	e0bff917 	ldw	r2,-28(fp)
   1c2d8:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   1c2dc:	e0bff917 	ldw	r2,-28(fp)
   1c2e0:	10800c03 	ldbu	r2,48(r2)
   1c2e4:	10803fcc 	andi	r2,r2,255
   1c2e8:	1080020c 	andi	r2,r2,8
   1c2ec:	1000151e 	bne	r2,zero,1c344 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   1c2f0:	e0bff917 	ldw	r2,-28(fp)
   1c2f4:	10c00d83 	ldbu	r3,54(r2)
   1c2f8:	d0a85903 	ldbu	r2,-24220(gp)
   1c2fc:	1884b03a 	or	r2,r3,r2
   1c300:	d0a85905 	stb	r2,-24220(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1c304:	e0bff917 	ldw	r2,-28(fp)
   1c308:	10800d03 	ldbu	r2,52(r2)
   1c30c:	10c03fcc 	andi	r3,r2,255
   1c310:	e0bff917 	ldw	r2,-28(fp)
   1c314:	10800d03 	ldbu	r2,52(r2)
   1c318:	11003fcc 	andi	r4,r2,255
   1c31c:	d0a85944 	addi	r2,gp,-24219
   1c320:	2085883a 	add	r2,r4,r2
   1c324:	11000003 	ldbu	r4,0(r2)
   1c328:	e0bff917 	ldw	r2,-28(fp)
   1c32c:	10800d43 	ldbu	r2,53(r2)
   1c330:	2084b03a 	or	r2,r4,r2
   1c334:	1009883a 	mov	r4,r2
   1c338:	d0a85944 	addi	r2,gp,-24219
   1c33c:	1885883a 	add	r2,r3,r2
   1c340:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   1c344:	e0bff917 	ldw	r2,-28(fp)
   1c348:	10800517 	ldw	r2,20(r2)
   1c34c:	e0bff915 	stw	r2,-28(fp)
   1c350:	e0bffb17 	ldw	r2,-20(fp)
   1c354:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c358:	e0bffe17 	ldw	r2,-8(fp)
   1c35c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   1c360:	e0bff917 	ldw	r2,-28(fp)
   1c364:	10800c83 	ldbu	r2,50(r2)
   1c368:	10803fcc 	andi	r2,r2,255
   1c36c:	10800518 	cmpnei	r2,r2,20
   1c370:	103fb21e 	bne	r2,zero,1c23c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701c23c>
   1c374:	00000106 	br	1c37c <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
   1c378:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   1c37c:	e037883a 	mov	sp,fp
   1c380:	dfc00117 	ldw	ra,4(sp)
   1c384:	df000017 	ldw	fp,0(sp)
   1c388:	dec00204 	addi	sp,sp,8
   1c38c:	f800283a 	ret

0001c390 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   1c390:	deffff04 	addi	sp,sp,-4
   1c394:	df000015 	stw	fp,0(sp)
   1c398:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   1c39c:	00804784 	movi	r2,286
}
   1c3a0:	e037883a 	mov	sp,fp
   1c3a4:	df000017 	ldw	fp,0(sp)
   1c3a8:	dec00104 	addi	sp,sp,4
   1c3ac:	f800283a 	ret

0001c3b0 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   1c3b0:	deffff04 	addi	sp,sp,-4
   1c3b4:	df000015 	stw	fp,0(sp)
   1c3b8:	d839883a 	mov	fp,sp
}
   1c3bc:	0001883a 	nop
   1c3c0:	e037883a 	mov	sp,fp
   1c3c4:	df000017 	ldw	fp,0(sp)
   1c3c8:	dec00104 	addi	sp,sp,4
   1c3cc:	f800283a 	ret

0001c3d0 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   1c3d0:	defff804 	addi	sp,sp,-32
   1c3d4:	dfc00715 	stw	ra,28(sp)
   1c3d8:	df000615 	stw	fp,24(sp)
   1c3dc:	df000604 	addi	fp,sp,24
   1c3e0:	e13ffc15 	stw	r4,-16(fp)
   1c3e4:	e17ffd15 	stw	r5,-12(fp)
   1c3e8:	3007883a 	mov	r3,r6
   1c3ec:	3805883a 	mov	r2,r7
   1c3f0:	e0fffe05 	stb	r3,-8(fp)
   1c3f4:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   1c3f8:	e0bffc17 	ldw	r2,-16(fp)
   1c3fc:	10800283 	ldbu	r2,10(r2)
   1c400:	10c03fcc 	andi	r3,r2,255
   1c404:	008000f4 	movhi	r2,3
   1c408:	10a13a04 	addi	r2,r2,-31512
   1c40c:	10c5883a 	add	r2,r2,r3
   1c410:	10800003 	ldbu	r2,0(r2)
   1c414:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   1c418:	e0bffa03 	ldbu	r2,-24(fp)
   1c41c:	e0fffc17 	ldw	r3,-16(fp)
   1c420:	1885883a 	add	r2,r3,r2
   1c424:	108002c4 	addi	r2,r2,11
   1c428:	10800003 	ldbu	r2,0(r2)
   1c42c:	10c03fcc 	andi	r3,r2,255
   1c430:	008000f4 	movhi	r2,3
   1c434:	10a13a04 	addi	r2,r2,-31512
   1c438:	10c5883a 	add	r2,r2,r3
   1c43c:	10800003 	ldbu	r2,0(r2)
   1c440:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   1c444:	e0bffa03 	ldbu	r2,-24(fp)
   1c448:	100490fa 	slli	r2,r2,3
   1c44c:	1007883a 	mov	r3,r2
   1c450:	e0bffa43 	ldbu	r2,-23(fp)
   1c454:	1885883a 	add	r2,r3,r2
   1c458:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   1c45c:	e0fffa83 	ldbu	r3,-22(fp)
   1c460:	00800134 	movhi	r2,4
   1c464:	10ae8104 	addi	r2,r2,-17916
   1c468:	18c7883a 	add	r3,r3,r3
   1c46c:	18c7883a 	add	r3,r3,r3
   1c470:	10c5883a 	add	r2,r2,r3
   1c474:	10800017 	ldw	r2,0(r2)
   1c478:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   1c47c:	e0bffb17 	ldw	r2,-20(fp)
   1c480:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   1c484:	e0bffb17 	ldw	r2,-20(fp)
   1c488:	e0fffd17 	ldw	r3,-12(fp)
   1c48c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   1c490:	e0bffb17 	ldw	r2,-20(fp)
   1c494:	10800c03 	ldbu	r2,48(r2)
   1c498:	1007883a 	mov	r3,r2
   1c49c:	e0bffe03 	ldbu	r2,-8(fp)
   1c4a0:	0084303a 	nor	r2,zero,r2
   1c4a4:	1884703a 	and	r2,r3,r2
   1c4a8:	1007883a 	mov	r3,r2
   1c4ac:	e0bffb17 	ldw	r2,-20(fp)
   1c4b0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   1c4b4:	e0bffb17 	ldw	r2,-20(fp)
   1c4b8:	e0ffff03 	ldbu	r3,-4(fp)
   1c4bc:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   1c4c0:	e0bffb17 	ldw	r2,-20(fp)
   1c4c4:	10800c03 	ldbu	r2,48(r2)
   1c4c8:	10803fcc 	andi	r2,r2,255
   1c4cc:	1080020c 	andi	r2,r2,8
   1c4d0:	1000111e 	bne	r2,zero,1c518 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   1c4d4:	e0bffb17 	ldw	r2,-20(fp)
   1c4d8:	10c00d83 	ldbu	r3,54(r2)
   1c4dc:	d0a85903 	ldbu	r2,-24220(gp)
   1c4e0:	1884b03a 	or	r2,r3,r2
   1c4e4:	d0a85905 	stb	r2,-24220(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   1c4e8:	e0fffa03 	ldbu	r3,-24(fp)
   1c4ec:	e13ffa03 	ldbu	r4,-24(fp)
   1c4f0:	d0a85944 	addi	r2,gp,-24219
   1c4f4:	2085883a 	add	r2,r4,r2
   1c4f8:	11000003 	ldbu	r4,0(r2)
   1c4fc:	e0bffb17 	ldw	r2,-20(fp)
   1c500:	10800d43 	ldbu	r2,53(r2)
   1c504:	2084b03a 	or	r2,r4,r2
   1c508:	1009883a 	mov	r4,r2
   1c50c:	d0a85944 	addi	r2,gp,-24219
   1c510:	1885883a 	add	r2,r3,r2
   1c514:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   1c518:	e17ffc17 	ldw	r5,-16(fp)
   1c51c:	e13ffb17 	ldw	r4,-20(fp)
   1c520:	001c7c80 	call	1c7c8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   1c524:	e0bffb17 	ldw	r2,-20(fp)
   1c528:	10800817 	ldw	r2,32(r2)
   1c52c:	10000826 	beq	r2,zero,1c550 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1c530:	e0bffb17 	ldw	r2,-20(fp)
   1c534:	10800817 	ldw	r2,32(r2)
   1c538:	100b883a 	mov	r5,r2
   1c53c:	e13ffb17 	ldw	r4,-20(fp)
   1c540:	001c8800 	call	1c880 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   1c544:	e0bffb17 	ldw	r2,-20(fp)
   1c548:	e0fffc17 	ldw	r3,-16(fp)
   1c54c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   1c550:	e0bffa83 	ldbu	r2,-22(fp)
}
   1c554:	e037883a 	mov	sp,fp
   1c558:	dfc00117 	ldw	ra,4(sp)
   1c55c:	df000017 	ldw	fp,0(sp)
   1c560:	dec00204 	addi	sp,sp,8
   1c564:	f800283a 	ret

0001c568 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   1c568:	defffd04 	addi	sp,sp,-12
   1c56c:	df000215 	stw	fp,8(sp)
   1c570:	df000204 	addi	fp,sp,8
   1c574:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   1c578:	d0a85c17 	ldw	r2,-24208(gp)
   1c57c:	e0ffff17 	ldw	r3,-4(fp)
   1c580:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   1c584:	d0a85c17 	ldw	r2,-24208(gp)
   1c588:	10800d03 	ldbu	r2,52(r2)
   1c58c:	10803fcc 	andi	r2,r2,255
   1c590:	d0e85c17 	ldw	r3,-24208(gp)
   1c594:	18c00d03 	ldbu	r3,52(r3)
   1c598:	18c03fcc 	andi	r3,r3,255
   1c59c:	e13fff17 	ldw	r4,-4(fp)
   1c5a0:	20c7883a 	add	r3,r4,r3
   1c5a4:	18c002c4 	addi	r3,r3,11
   1c5a8:	19000003 	ldbu	r4,0(r3)
   1c5ac:	d0e85c17 	ldw	r3,-24208(gp)
   1c5b0:	18c00d43 	ldbu	r3,53(r3)
   1c5b4:	20c6b03a 	or	r3,r4,r3
   1c5b8:	1809883a 	mov	r4,r3
   1c5bc:	e0ffff17 	ldw	r3,-4(fp)
   1c5c0:	1885883a 	add	r2,r3,r2
   1c5c4:	108002c4 	addi	r2,r2,11
   1c5c8:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   1c5cc:	e0bfff17 	ldw	r2,-4(fp)
   1c5d0:	10c00283 	ldbu	r3,10(r2)
   1c5d4:	d0a85c17 	ldw	r2,-24208(gp)
   1c5d8:	10800d83 	ldbu	r2,54(r2)
   1c5dc:	1884b03a 	or	r2,r3,r2
   1c5e0:	1007883a 	mov	r3,r2
   1c5e4:	e0bfff17 	ldw	r2,-4(fp)
   1c5e8:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   1c5ec:	d0a85c17 	ldw	r2,-24208(gp)
   1c5f0:	10800d03 	ldbu	r2,52(r2)
   1c5f4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   1c5f8:	e0fffe03 	ldbu	r3,-8(fp)
   1c5fc:	e13ffe03 	ldbu	r4,-8(fp)
   1c600:	d0a85944 	addi	r2,gp,-24219
   1c604:	2085883a 	add	r2,r4,r2
   1c608:	10800003 	ldbu	r2,0(r2)
   1c60c:	1009883a 	mov	r4,r2
   1c610:	d0a85c17 	ldw	r2,-24208(gp)
   1c614:	10800d43 	ldbu	r2,53(r2)
   1c618:	0084303a 	nor	r2,zero,r2
   1c61c:	2084703a 	and	r2,r4,r2
   1c620:	1009883a 	mov	r4,r2
   1c624:	d0a85944 	addi	r2,gp,-24219
   1c628:	1885883a 	add	r2,r3,r2
   1c62c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1c630:	e0fffe03 	ldbu	r3,-8(fp)
   1c634:	d0a85944 	addi	r2,gp,-24219
   1c638:	1885883a 	add	r2,r3,r2
   1c63c:	10800003 	ldbu	r2,0(r2)
   1c640:	10803fcc 	andi	r2,r2,255
   1c644:	1000071e 	bne	r2,zero,1c664 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   1c648:	d0a85c17 	ldw	r2,-24208(gp)
   1c64c:	10800d83 	ldbu	r2,54(r2)
   1c650:	0084303a 	nor	r2,zero,r2
   1c654:	1007883a 	mov	r3,r2
   1c658:	d0a85903 	ldbu	r2,-24220(gp)
   1c65c:	1884703a 	and	r2,r3,r2
   1c660:	d0a85905 	stb	r2,-24220(gp)
    }
}
   1c664:	0001883a 	nop
   1c668:	e037883a 	mov	sp,fp
   1c66c:	df000017 	ldw	fp,0(sp)
   1c670:	dec00104 	addi	sp,sp,4
   1c674:	f800283a 	ret

0001c678 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   1c678:	defffb04 	addi	sp,sp,-20
   1c67c:	df000415 	stw	fp,16(sp)
   1c680:	df000404 	addi	fp,sp,16
   1c684:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   1c688:	d0a85c17 	ldw	r2,-24208(gp)
   1c68c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   1c690:	d0a85c17 	ldw	r2,-24208(gp)
   1c694:	e0ffff17 	ldw	r3,-4(fp)
   1c698:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   1c69c:	e0bfff17 	ldw	r2,-4(fp)
   1c6a0:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   1c6a4:	e0bffc17 	ldw	r2,-16(fp)
   1c6a8:	10800017 	ldw	r2,0(r2)
   1c6ac:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   1c6b0:	00002006 	br	1c734 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   1c6b4:	d0a85c17 	ldw	r2,-24208(gp)
   1c6b8:	10800d03 	ldbu	r2,52(r2)
   1c6bc:	10803fcc 	andi	r2,r2,255
   1c6c0:	d0e85c17 	ldw	r3,-24208(gp)
   1c6c4:	18c00d03 	ldbu	r3,52(r3)
   1c6c8:	18c03fcc 	andi	r3,r3,255
   1c6cc:	e13ffd17 	ldw	r4,-12(fp)
   1c6d0:	20c7883a 	add	r3,r4,r3
   1c6d4:	18c002c4 	addi	r3,r3,11
   1c6d8:	19000003 	ldbu	r4,0(r3)
   1c6dc:	d0e85c17 	ldw	r3,-24208(gp)
   1c6e0:	18c00d43 	ldbu	r3,53(r3)
   1c6e4:	20c6b03a 	or	r3,r4,r3
   1c6e8:	1809883a 	mov	r4,r3
   1c6ec:	e0fffd17 	ldw	r3,-12(fp)
   1c6f0:	1885883a 	add	r2,r3,r2
   1c6f4:	108002c4 	addi	r2,r2,11
   1c6f8:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   1c6fc:	e0bffd17 	ldw	r2,-12(fp)
   1c700:	10c00283 	ldbu	r3,10(r2)
   1c704:	d0a85c17 	ldw	r2,-24208(gp)
   1c708:	10800d83 	ldbu	r2,54(r2)
   1c70c:	1884b03a 	or	r2,r3,r2
   1c710:	1007883a 	mov	r3,r2
   1c714:	e0bffd17 	ldw	r2,-12(fp)
   1c718:	10c00285 	stb	r3,10(r2)
        pevents++;
   1c71c:	e0bffc17 	ldw	r2,-16(fp)
   1c720:	10800104 	addi	r2,r2,4
   1c724:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   1c728:	e0bffc17 	ldw	r2,-16(fp)
   1c72c:	10800017 	ldw	r2,0(r2)
   1c730:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   1c734:	e0bffd17 	ldw	r2,-12(fp)
   1c738:	103fde1e 	bne	r2,zero,1c6b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701c6b4>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   1c73c:	d0a85c17 	ldw	r2,-24208(gp)
   1c740:	10800d03 	ldbu	r2,52(r2)
   1c744:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   1c748:	e0fffe03 	ldbu	r3,-8(fp)
   1c74c:	e13ffe03 	ldbu	r4,-8(fp)
   1c750:	d0a85944 	addi	r2,gp,-24219
   1c754:	2085883a 	add	r2,r4,r2
   1c758:	10800003 	ldbu	r2,0(r2)
   1c75c:	1009883a 	mov	r4,r2
   1c760:	d0a85c17 	ldw	r2,-24208(gp)
   1c764:	10800d43 	ldbu	r2,53(r2)
   1c768:	0084303a 	nor	r2,zero,r2
   1c76c:	2084703a 	and	r2,r4,r2
   1c770:	1009883a 	mov	r4,r2
   1c774:	d0a85944 	addi	r2,gp,-24219
   1c778:	1885883a 	add	r2,r3,r2
   1c77c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1c780:	e0fffe03 	ldbu	r3,-8(fp)
   1c784:	d0a85944 	addi	r2,gp,-24219
   1c788:	1885883a 	add	r2,r3,r2
   1c78c:	10800003 	ldbu	r2,0(r2)
   1c790:	10803fcc 	andi	r2,r2,255
   1c794:	1000071e 	bne	r2,zero,1c7b4 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   1c798:	d0a85c17 	ldw	r2,-24208(gp)
   1c79c:	10800d83 	ldbu	r2,54(r2)
   1c7a0:	0084303a 	nor	r2,zero,r2
   1c7a4:	1007883a 	mov	r3,r2
   1c7a8:	d0a85903 	ldbu	r2,-24220(gp)
   1c7ac:	1884703a 	and	r2,r3,r2
   1c7b0:	d0a85905 	stb	r2,-24220(gp)
    }
}
   1c7b4:	0001883a 	nop
   1c7b8:	e037883a 	mov	sp,fp
   1c7bc:	df000017 	ldw	fp,0(sp)
   1c7c0:	dec00104 	addi	sp,sp,4
   1c7c4:	f800283a 	ret

0001c7c8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   1c7c8:	defffc04 	addi	sp,sp,-16
   1c7cc:	df000315 	stw	fp,12(sp)
   1c7d0:	df000304 	addi	fp,sp,12
   1c7d4:	e13ffe15 	stw	r4,-8(fp)
   1c7d8:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   1c7dc:	e0bffe17 	ldw	r2,-8(fp)
   1c7e0:	10800d03 	ldbu	r2,52(r2)
   1c7e4:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   1c7e8:	e0bffd03 	ldbu	r2,-12(fp)
   1c7ec:	e0fffd03 	ldbu	r3,-12(fp)
   1c7f0:	e13fff17 	ldw	r4,-4(fp)
   1c7f4:	20c7883a 	add	r3,r4,r3
   1c7f8:	18c002c4 	addi	r3,r3,11
   1c7fc:	18c00003 	ldbu	r3,0(r3)
   1c800:	1809883a 	mov	r4,r3
   1c804:	e0fffe17 	ldw	r3,-8(fp)
   1c808:	18c00d43 	ldbu	r3,53(r3)
   1c80c:	00c6303a 	nor	r3,zero,r3
   1c810:	20c6703a 	and	r3,r4,r3
   1c814:	1809883a 	mov	r4,r3
   1c818:	e0ffff17 	ldw	r3,-4(fp)
   1c81c:	1885883a 	add	r2,r3,r2
   1c820:	108002c4 	addi	r2,r2,11
   1c824:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
   1c828:	e0bffd03 	ldbu	r2,-12(fp)
   1c82c:	e0ffff17 	ldw	r3,-4(fp)
   1c830:	1885883a 	add	r2,r3,r2
   1c834:	108002c4 	addi	r2,r2,11
   1c838:	10800003 	ldbu	r2,0(r2)
   1c83c:	10803fcc 	andi	r2,r2,255
   1c840:	10000a1e 	bne	r2,zero,1c86c <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   1c844:	e0bfff17 	ldw	r2,-4(fp)
   1c848:	10800283 	ldbu	r2,10(r2)
   1c84c:	1007883a 	mov	r3,r2
   1c850:	e0bffe17 	ldw	r2,-8(fp)
   1c854:	10800d83 	ldbu	r2,54(r2)
   1c858:	0084303a 	nor	r2,zero,r2
   1c85c:	1884703a 	and	r2,r3,r2
   1c860:	1007883a 	mov	r3,r2
   1c864:	e0bfff17 	ldw	r2,-4(fp)
   1c868:	10c00285 	stb	r3,10(r2)
    }
}
   1c86c:	0001883a 	nop
   1c870:	e037883a 	mov	sp,fp
   1c874:	df000017 	ldw	fp,0(sp)
   1c878:	dec00104 	addi	sp,sp,4
   1c87c:	f800283a 	ret

0001c880 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   1c880:	defffa04 	addi	sp,sp,-24
   1c884:	df000515 	stw	fp,20(sp)
   1c888:	df000504 	addi	fp,sp,20
   1c88c:	e13ffe15 	stw	r4,-8(fp)
   1c890:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   1c894:	e0bffe17 	ldw	r2,-8(fp)
   1c898:	10800d03 	ldbu	r2,52(r2)
   1c89c:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   1c8a0:	e0bffe17 	ldw	r2,-8(fp)
   1c8a4:	10800d83 	ldbu	r2,54(r2)
   1c8a8:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   1c8ac:	e0bffe17 	ldw	r2,-8(fp)
   1c8b0:	10800d43 	ldbu	r2,53(r2)
   1c8b4:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   1c8b8:	e0bfff17 	ldw	r2,-4(fp)
   1c8bc:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   1c8c0:	e0bffb17 	ldw	r2,-20(fp)
   1c8c4:	10800017 	ldw	r2,0(r2)
   1c8c8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   1c8cc:	00002506 	br	1c964 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   1c8d0:	e0bffd03 	ldbu	r2,-12(fp)
   1c8d4:	e0fffd03 	ldbu	r3,-12(fp)
   1c8d8:	e13ffc17 	ldw	r4,-16(fp)
   1c8dc:	20c7883a 	add	r3,r4,r3
   1c8e0:	18c002c4 	addi	r3,r3,11
   1c8e4:	18c00003 	ldbu	r3,0(r3)
   1c8e8:	1809883a 	mov	r4,r3
   1c8ec:	e0fffd83 	ldbu	r3,-10(fp)
   1c8f0:	00c6303a 	nor	r3,zero,r3
   1c8f4:	20c6703a 	and	r3,r4,r3
   1c8f8:	1809883a 	mov	r4,r3
   1c8fc:	e0fffc17 	ldw	r3,-16(fp)
   1c900:	1885883a 	add	r2,r3,r2
   1c904:	108002c4 	addi	r2,r2,11
   1c908:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
   1c90c:	e0bffd03 	ldbu	r2,-12(fp)
   1c910:	e0fffc17 	ldw	r3,-16(fp)
   1c914:	1885883a 	add	r2,r3,r2
   1c918:	108002c4 	addi	r2,r2,11
   1c91c:	10800003 	ldbu	r2,0(r2)
   1c920:	10803fcc 	andi	r2,r2,255
   1c924:	1000091e 	bne	r2,zero,1c94c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   1c928:	e0bffc17 	ldw	r2,-16(fp)
   1c92c:	10800283 	ldbu	r2,10(r2)
   1c930:	1007883a 	mov	r3,r2
   1c934:	e0bffd43 	ldbu	r2,-11(fp)
   1c938:	0084303a 	nor	r2,zero,r2
   1c93c:	1884703a 	and	r2,r3,r2
   1c940:	1007883a 	mov	r3,r2
   1c944:	e0bffc17 	ldw	r2,-16(fp)
   1c948:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   1c94c:	e0bffb17 	ldw	r2,-20(fp)
   1c950:	10800104 	addi	r2,r2,4
   1c954:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   1c958:	e0bffb17 	ldw	r2,-20(fp)
   1c95c:	10800017 	ldw	r2,0(r2)
   1c960:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   1c964:	e0bffc17 	ldw	r2,-16(fp)
   1c968:	103fd91e 	bne	r2,zero,1c8d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701c8d0>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   1c96c:	0001883a 	nop
   1c970:	e037883a 	mov	sp,fp
   1c974:	df000017 	ldw	fp,0(sp)
   1c978:	dec00104 	addi	sp,sp,4
   1c97c:	f800283a 	ret

0001c980 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   1c980:	defffc04 	addi	sp,sp,-16
   1c984:	df000315 	stw	fp,12(sp)
   1c988:	df000304 	addi	fp,sp,12
   1c98c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   1c990:	e0bfff17 	ldw	r2,-4(fp)
   1c994:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   1c998:	e0bfff17 	ldw	r2,-4(fp)
   1c99c:	108002c4 	addi	r2,r2,11
   1c9a0:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1c9a4:	e03ffe05 	stb	zero,-8(fp)
   1c9a8:	00000706 	br	1c9c8 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   1c9ac:	e0bffd17 	ldw	r2,-12(fp)
   1c9b0:	10c00044 	addi	r3,r2,1
   1c9b4:	e0fffd15 	stw	r3,-12(fp)
   1c9b8:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1c9bc:	e0bffe03 	ldbu	r2,-8(fp)
   1c9c0:	10800044 	addi	r2,r2,1
   1c9c4:	e0bffe05 	stb	r2,-8(fp)
   1c9c8:	e0bffe03 	ldbu	r2,-8(fp)
   1c9cc:	108000f0 	cmpltui	r2,r2,3
   1c9d0:	103ff61e 	bne	r2,zero,1c9ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701c9ac>
        *ptbl++ = 0;
    }
}
   1c9d4:	0001883a 	nop
   1c9d8:	e037883a 	mov	sp,fp
   1c9dc:	df000017 	ldw	fp,0(sp)
   1c9e0:	dec00104 	addi	sp,sp,4
   1c9e4:	f800283a 	ret

0001c9e8 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   1c9e8:	defffb04 	addi	sp,sp,-20
   1c9ec:	dfc00415 	stw	ra,16(sp)
   1c9f0:	df000315 	stw	fp,12(sp)
   1c9f4:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   1c9f8:	0142d004 	movi	r5,2880
   1c9fc:	01000134 	movhi	r4,4
   1ca00:	212a6d04 	addi	r4,r4,-22092
   1ca04:	001cd600 	call	1cd60 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   1ca08:	00800134 	movhi	r2,4
   1ca0c:	10aa6d04 	addi	r2,r2,-22092
   1ca10:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   1ca14:	00800134 	movhi	r2,4
   1ca18:	10aa7904 	addi	r2,r2,-22044
   1ca1c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   1ca20:	e03ffd0d 	sth	zero,-12(fp)
   1ca24:	00001306 	br	1ca74 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1ca28:	e0bffe17 	ldw	r2,-8(fp)
   1ca2c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   1ca30:	e0bffe17 	ldw	r2,-8(fp)
   1ca34:	e0ffff17 	ldw	r3,-4(fp)
   1ca38:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   1ca3c:	e0bffe17 	ldw	r2,-8(fp)
   1ca40:	00c00fc4 	movi	r3,63
   1ca44:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   1ca48:	e0bffe17 	ldw	r2,-8(fp)
   1ca4c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   1ca50:	e0bffe17 	ldw	r2,-8(fp)
   1ca54:	10800c04 	addi	r2,r2,48
   1ca58:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   1ca5c:	e0bfff17 	ldw	r2,-4(fp)
   1ca60:	10800c04 	addi	r2,r2,48
   1ca64:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   1ca68:	e0bffd0b 	ldhu	r2,-12(fp)
   1ca6c:	10800044 	addi	r2,r2,1
   1ca70:	e0bffd0d 	sth	r2,-12(fp)
   1ca74:	e0bffd0b 	ldhu	r2,-12(fp)
   1ca78:	10800ef0 	cmpltui	r2,r2,59
   1ca7c:	103fea1e 	bne	r2,zero,1ca28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701ca28>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   1ca80:	e0bffe17 	ldw	r2,-8(fp)
   1ca84:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   1ca88:	e0bffe17 	ldw	r2,-8(fp)
   1ca8c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   1ca90:	e0bffe17 	ldw	r2,-8(fp)
   1ca94:	00c00fc4 	movi	r3,63
   1ca98:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   1ca9c:	e0bffe17 	ldw	r2,-8(fp)
   1caa0:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   1caa4:	00800134 	movhi	r2,4
   1caa8:	10aa6d04 	addi	r2,r2,-22092
   1caac:	d0a85a15 	stw	r2,-24216(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   1cab0:	0001883a 	nop
   1cab4:	e037883a 	mov	sp,fp
   1cab8:	dfc00117 	ldw	ra,4(sp)
   1cabc:	df000017 	ldw	fp,0(sp)
   1cac0:	dec00204 	addi	sp,sp,8
   1cac4:	f800283a 	ret

0001cac8 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   1cac8:	deffff04 	addi	sp,sp,-4
   1cacc:	df000015 	stw	fp,0(sp)
   1cad0:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   1cad4:	d0285d15 	stw	zero,-24204(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   1cad8:	d0285b05 	stb	zero,-24212(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   1cadc:	d0284d05 	stb	zero,-24268(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   1cae0:	d0285545 	stb	zero,-24235(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   1cae4:	d0284d45 	stb	zero,-24267(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   1cae8:	d0285215 	stw	zero,-24248(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   1caec:	d0284e15 	stw	zero,-24264(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   1caf0:	d0286015 	stw	zero,-24192(gp)
    OSIdleCtrMax  = 0L;
   1caf4:	d0285315 	stw	zero,-24244(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   1caf8:	d0285f05 	stb	zero,-24196(gp)
#endif
}
   1cafc:	0001883a 	nop
   1cb00:	e037883a 	mov	sp,fp
   1cb04:	df000017 	ldw	fp,0(sp)
   1cb08:	dec00104 	addi	sp,sp,4
   1cb0c:	f800283a 	ret

0001cb10 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   1cb10:	defffd04 	addi	sp,sp,-12
   1cb14:	df000215 	stw	fp,8(sp)
   1cb18:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   1cb1c:	d0285905 	stb	zero,-24220(gp)
    prdytbl       = &OSRdyTbl[0];
   1cb20:	d0a85944 	addi	r2,gp,-24219
   1cb24:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   1cb28:	e03ffe05 	stb	zero,-8(fp)
   1cb2c:	00000706 	br	1cb4c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   1cb30:	e0bfff17 	ldw	r2,-4(fp)
   1cb34:	10c00044 	addi	r3,r2,1
   1cb38:	e0ffff15 	stw	r3,-4(fp)
   1cb3c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   1cb40:	e0bffe03 	ldbu	r2,-8(fp)
   1cb44:	10800044 	addi	r2,r2,1
   1cb48:	e0bffe05 	stb	r2,-8(fp)
   1cb4c:	e0bffe03 	ldbu	r2,-8(fp)
   1cb50:	108000f0 	cmpltui	r2,r2,3
   1cb54:	103ff61e 	bne	r2,zero,1cb30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701cb30>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   1cb58:	d0284f45 	stb	zero,-24259(gp)
    OSPrioHighRdy = 0;
   1cb5c:	d0284f05 	stb	zero,-24260(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   1cb60:	d0285715 	stw	zero,-24228(gp)
    OSTCBCur      = (OS_TCB *)0;
   1cb64:	d0285c15 	stw	zero,-24208(gp)
}
   1cb68:	0001883a 	nop
   1cb6c:	e037883a 	mov	sp,fp
   1cb70:	df000017 	ldw	fp,0(sp)
   1cb74:	dec00104 	addi	sp,sp,4
   1cb78:	f800283a 	ret

0001cb7c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   1cb7c:	defff804 	addi	sp,sp,-32
   1cb80:	dfc00715 	stw	ra,28(sp)
   1cb84:	df000615 	stw	fp,24(sp)
   1cb88:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   1cb8c:	008000c4 	movi	r2,3
   1cb90:	d8800415 	stw	r2,16(sp)
   1cb94:	d8000315 	stw	zero,12(sp)
   1cb98:	00808004 	movi	r2,512
   1cb9c:	d8800215 	stw	r2,8(sp)
   1cba0:	00800134 	movhi	r2,4
   1cba4:	10a86d04 	addi	r2,r2,-24140
   1cba8:	d8800115 	stw	r2,4(sp)
   1cbac:	00bfffd4 	movui	r2,65535
   1cbb0:	d8800015 	stw	r2,0(sp)
   1cbb4:	01c00504 	movi	r7,20
   1cbb8:	01800134 	movhi	r6,4
   1cbbc:	31aa6c04 	addi	r6,r6,-22096
   1cbc0:	000b883a 	mov	r5,zero
   1cbc4:	010000b4 	movhi	r4,2
   1cbc8:	21340a04 	addi	r4,r4,-12248
   1cbcc:	00216f80 	call	216f8 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   1cbd0:	e1bfff04 	addi	r6,fp,-4
   1cbd4:	014000f4 	movhi	r5,3
   1cbd8:	29617a04 	addi	r5,r5,-31256
   1cbdc:	01000504 	movi	r4,20
   1cbe0:	0021f080 	call	21f08 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   1cbe4:	0001883a 	nop
   1cbe8:	e037883a 	mov	sp,fp
   1cbec:	dfc00117 	ldw	ra,4(sp)
   1cbf0:	df000017 	ldw	fp,0(sp)
   1cbf4:	dec00204 	addi	sp,sp,8
   1cbf8:	f800283a 	ret

0001cbfc <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   1cbfc:	defff804 	addi	sp,sp,-32
   1cc00:	dfc00715 	stw	ra,28(sp)
   1cc04:	df000615 	stw	fp,24(sp)
   1cc08:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   1cc0c:	008000c4 	movi	r2,3
   1cc10:	d8800415 	stw	r2,16(sp)
   1cc14:	d8000315 	stw	zero,12(sp)
   1cc18:	00808004 	movi	r2,512
   1cc1c:	d8800215 	stw	r2,8(sp)
   1cc20:	00800134 	movhi	r2,4
   1cc24:	10a5f504 	addi	r2,r2,-26668
   1cc28:	d8800115 	stw	r2,4(sp)
   1cc2c:	00bfff94 	movui	r2,65534
   1cc30:	d8800015 	stw	r2,0(sp)
   1cc34:	01c004c4 	movi	r7,19
   1cc38:	01800134 	movhi	r6,4
   1cc3c:	31a7f404 	addi	r6,r6,-24624
   1cc40:	000b883a 	mov	r5,zero
   1cc44:	010000b4 	movhi	r4,2
   1cc48:	21342104 	addi	r4,r4,-12156
   1cc4c:	00216f80 	call	216f8 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   1cc50:	e1bfff04 	addi	r6,fp,-4
   1cc54:	014000f4 	movhi	r5,3
   1cc58:	29617e04 	addi	r5,r5,-31240
   1cc5c:	010004c4 	movi	r4,19
   1cc60:	0021f080 	call	21f08 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   1cc64:	0001883a 	nop
   1cc68:	e037883a 	mov	sp,fp
   1cc6c:	dfc00117 	ldw	ra,4(sp)
   1cc70:	df000017 	ldw	fp,0(sp)
   1cc74:	dec00204 	addi	sp,sp,8
   1cc78:	f800283a 	ret

0001cc7c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   1cc7c:	defffb04 	addi	sp,sp,-20
   1cc80:	dfc00415 	stw	ra,16(sp)
   1cc84:	df000315 	stw	fp,12(sp)
   1cc88:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   1cc8c:	01414404 	movi	r5,1296
   1cc90:	01000134 	movhi	r4,4
   1cc94:	212d3d04 	addi	r4,r4,-19212
   1cc98:	001cd600 	call	1cd60 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   1cc9c:	01401504 	movi	r5,84
   1cca0:	01000134 	movhi	r4,4
   1cca4:	212e8104 	addi	r4,r4,-17916
   1cca8:	001cd600 	call	1cd60 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   1ccac:	00800134 	movhi	r2,4
   1ccb0:	10ad3d04 	addi	r2,r2,-19212
   1ccb4:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   1ccb8:	00800134 	movhi	r2,4
   1ccbc:	10ad5804 	addi	r2,r2,-19104
   1ccc0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   1ccc4:	e03ffd05 	stb	zero,-12(fp)
   1ccc8:	00001106 	br	1cd10 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   1cccc:	e0bffe17 	ldw	r2,-8(fp)
   1ccd0:	e0ffff17 	ldw	r3,-4(fp)
   1ccd4:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   1ccd8:	e0bffe17 	ldw	r2,-8(fp)
   1ccdc:	00c00fc4 	movi	r3,63
   1cce0:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   1cce4:	e0bffe17 	ldw	r2,-8(fp)
   1cce8:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   1ccec:	e0bffe17 	ldw	r2,-8(fp)
   1ccf0:	10801b04 	addi	r2,r2,108
   1ccf4:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   1ccf8:	e0bfff17 	ldw	r2,-4(fp)
   1ccfc:	10801b04 	addi	r2,r2,108
   1cd00:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   1cd04:	e0bffd03 	ldbu	r2,-12(fp)
   1cd08:	10800044 	addi	r2,r2,1
   1cd0c:	e0bffd05 	stb	r2,-12(fp)
   1cd10:	e0bffd03 	ldbu	r2,-12(fp)
   1cd14:	108002f0 	cmpltui	r2,r2,11
   1cd18:	103fec1e 	bne	r2,zero,1cccc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701cccc>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   1cd1c:	e0bffe17 	ldw	r2,-8(fp)
   1cd20:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   1cd24:	e0bffe17 	ldw	r2,-8(fp)
   1cd28:	00c00fc4 	movi	r3,63
   1cd2c:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   1cd30:	e0bffe17 	ldw	r2,-8(fp)
   1cd34:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   1cd38:	d0285015 	stw	zero,-24256(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   1cd3c:	00800134 	movhi	r2,4
   1cd40:	10ad3d04 	addi	r2,r2,-19212
   1cd44:	d0a85415 	stw	r2,-24240(gp)
}
   1cd48:	0001883a 	nop
   1cd4c:	e037883a 	mov	sp,fp
   1cd50:	dfc00117 	ldw	ra,4(sp)
   1cd54:	df000017 	ldw	fp,0(sp)
   1cd58:	dec00204 	addi	sp,sp,8
   1cd5c:	f800283a 	ret

0001cd60 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   1cd60:	defffd04 	addi	sp,sp,-12
   1cd64:	df000215 	stw	fp,8(sp)
   1cd68:	df000204 	addi	fp,sp,8
   1cd6c:	e13ffe15 	stw	r4,-8(fp)
   1cd70:	2805883a 	mov	r2,r5
   1cd74:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   1cd78:	00000706 	br	1cd98 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   1cd7c:	e0bffe17 	ldw	r2,-8(fp)
   1cd80:	10c00044 	addi	r3,r2,1
   1cd84:	e0fffe15 	stw	r3,-8(fp)
   1cd88:	10000005 	stb	zero,0(r2)
        size--;
   1cd8c:	e0bfff0b 	ldhu	r2,-4(fp)
   1cd90:	10bfffc4 	addi	r2,r2,-1
   1cd94:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   1cd98:	e0bfff0b 	ldhu	r2,-4(fp)
   1cd9c:	103ff71e 	bne	r2,zero,1cd7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701cd7c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   1cda0:	0001883a 	nop
   1cda4:	e037883a 	mov	sp,fp
   1cda8:	df000017 	ldw	fp,0(sp)
   1cdac:	dec00104 	addi	sp,sp,4
   1cdb0:	f800283a 	ret

0001cdb4 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   1cdb4:	defffc04 	addi	sp,sp,-16
   1cdb8:	df000315 	stw	fp,12(sp)
   1cdbc:	df000304 	addi	fp,sp,12
   1cdc0:	e13ffd15 	stw	r4,-12(fp)
   1cdc4:	e17ffe15 	stw	r5,-8(fp)
   1cdc8:	3005883a 	mov	r2,r6
   1cdcc:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   1cdd0:	00000b06 	br	1ce00 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   1cdd4:	e0bffd17 	ldw	r2,-12(fp)
   1cdd8:	10c00044 	addi	r3,r2,1
   1cddc:	e0fffd15 	stw	r3,-12(fp)
   1cde0:	e0fffe17 	ldw	r3,-8(fp)
   1cde4:	19000044 	addi	r4,r3,1
   1cde8:	e13ffe15 	stw	r4,-8(fp)
   1cdec:	18c00003 	ldbu	r3,0(r3)
   1cdf0:	10c00005 	stb	r3,0(r2)
        size--;
   1cdf4:	e0bfff0b 	ldhu	r2,-4(fp)
   1cdf8:	10bfffc4 	addi	r2,r2,-1
   1cdfc:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   1ce00:	e0bfff0b 	ldhu	r2,-4(fp)
   1ce04:	103ff31e 	bne	r2,zero,1cdd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701cdd4>
        *pdest++ = *psrc++;
        size--;
    }
}
   1ce08:	0001883a 	nop
   1ce0c:	e037883a 	mov	sp,fp
   1ce10:	df000017 	ldw	fp,0(sp)
   1ce14:	dec00104 	addi	sp,sp,4
   1ce18:	f800283a 	ret

0001ce1c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   1ce1c:	defffb04 	addi	sp,sp,-20
   1ce20:	dfc00415 	stw	ra,16(sp)
   1ce24:	df000315 	stw	fp,12(sp)
   1ce28:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1ce2c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ce30:	0005303a 	rdctl	r2,status
   1ce34:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ce38:	e0ffff17 	ldw	r3,-4(fp)
   1ce3c:	00bfff84 	movi	r2,-2
   1ce40:	1884703a 	and	r2,r3,r2
   1ce44:	1001703a 	wrctl	status,r2
  
  return context;
   1ce48:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   1ce4c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   1ce50:	d0a85b03 	ldbu	r2,-24212(gp)
   1ce54:	10803fcc 	andi	r2,r2,255
   1ce58:	10001a1e 	bne	r2,zero,1cec4 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   1ce5c:	d0a84d03 	ldbu	r2,-24268(gp)
   1ce60:	10803fcc 	andi	r2,r2,255
   1ce64:	1000171e 	bne	r2,zero,1cec4 <OS_Sched+0xa8>
            OS_SchedNew();
   1ce68:	001ceec0 	call	1ceec <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   1ce6c:	d0e84f03 	ldbu	r3,-24260(gp)
   1ce70:	d0a84f43 	ldbu	r2,-24259(gp)
   1ce74:	18c03fcc 	andi	r3,r3,255
   1ce78:	10803fcc 	andi	r2,r2,255
   1ce7c:	18801126 	beq	r3,r2,1cec4 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   1ce80:	d0a84f03 	ldbu	r2,-24260(gp)
   1ce84:	10c03fcc 	andi	r3,r2,255
   1ce88:	00800134 	movhi	r2,4
   1ce8c:	10ae8104 	addi	r2,r2,-17916
   1ce90:	18c7883a 	add	r3,r3,r3
   1ce94:	18c7883a 	add	r3,r3,r3
   1ce98:	10c5883a 	add	r2,r2,r3
   1ce9c:	10800017 	ldw	r2,0(r2)
   1cea0:	d0a85715 	stw	r2,-24228(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   1cea4:	d0a85717 	ldw	r2,-24228(gp)
   1cea8:	10c00e17 	ldw	r3,56(r2)
   1ceac:	18c00044 	addi	r3,r3,1
   1ceb0:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   1ceb4:	d0a85217 	ldw	r2,-24248(gp)
   1ceb8:	10800044 	addi	r2,r2,1
   1cebc:	d0a85215 	stw	r2,-24248(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   1cec0:	002609c0 	call	2609c <OSCtxSw>
   1cec4:	e0bffd17 	ldw	r2,-12(fp)
   1cec8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cecc:	e0bffe17 	ldw	r2,-8(fp)
   1ced0:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   1ced4:	0001883a 	nop
   1ced8:	e037883a 	mov	sp,fp
   1cedc:	dfc00117 	ldw	ra,4(sp)
   1cee0:	df000017 	ldw	fp,0(sp)
   1cee4:	dec00204 	addi	sp,sp,8
   1cee8:	f800283a 	ret

0001ceec <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   1ceec:	defffe04 	addi	sp,sp,-8
   1cef0:	df000115 	stw	fp,4(sp)
   1cef4:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   1cef8:	d0a85903 	ldbu	r2,-24220(gp)
   1cefc:	10c03fcc 	andi	r3,r2,255
   1cf00:	008000f4 	movhi	r2,3
   1cf04:	10a13a04 	addi	r2,r2,-31512
   1cf08:	10c5883a 	add	r2,r2,r3
   1cf0c:	10800003 	ldbu	r2,0(r2)
   1cf10:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   1cf14:	e0bfff03 	ldbu	r2,-4(fp)
   1cf18:	100490fa 	slli	r2,r2,3
   1cf1c:	1009883a 	mov	r4,r2
   1cf20:	e0ffff03 	ldbu	r3,-4(fp)
   1cf24:	d0a85944 	addi	r2,gp,-24219
   1cf28:	1885883a 	add	r2,r3,r2
   1cf2c:	10800003 	ldbu	r2,0(r2)
   1cf30:	10c03fcc 	andi	r3,r2,255
   1cf34:	008000f4 	movhi	r2,3
   1cf38:	10a13a04 	addi	r2,r2,-31512
   1cf3c:	10c5883a 	add	r2,r2,r3
   1cf40:	10800003 	ldbu	r2,0(r2)
   1cf44:	2085883a 	add	r2,r4,r2
   1cf48:	d0a84f05 	stb	r2,-24260(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   1cf4c:	0001883a 	nop
   1cf50:	e037883a 	mov	sp,fp
   1cf54:	df000017 	ldw	fp,0(sp)
   1cf58:	dec00104 	addi	sp,sp,4
   1cf5c:	f800283a 	ret

0001cf60 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   1cf60:	defffc04 	addi	sp,sp,-16
   1cf64:	df000315 	stw	fp,12(sp)
   1cf68:	df000304 	addi	fp,sp,12
   1cf6c:	e13ffe15 	stw	r4,-8(fp)
   1cf70:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   1cf74:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   1cf78:	00000b06 	br	1cfa8 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   1cf7c:	e0bffe17 	ldw	r2,-8(fp)
   1cf80:	10c00044 	addi	r3,r2,1
   1cf84:	e0fffe15 	stw	r3,-8(fp)
   1cf88:	e0ffff17 	ldw	r3,-4(fp)
   1cf8c:	19000044 	addi	r4,r3,1
   1cf90:	e13fff15 	stw	r4,-4(fp)
   1cf94:	18c00003 	ldbu	r3,0(r3)
   1cf98:	10c00005 	stb	r3,0(r2)
        len++;
   1cf9c:	e0bffd03 	ldbu	r2,-12(fp)
   1cfa0:	10800044 	addi	r2,r2,1
   1cfa4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   1cfa8:	e0bfff17 	ldw	r2,-4(fp)
   1cfac:	10800003 	ldbu	r2,0(r2)
   1cfb0:	10803fcc 	andi	r2,r2,255
   1cfb4:	103ff11e 	bne	r2,zero,1cf7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701cf7c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   1cfb8:	e0bffe17 	ldw	r2,-8(fp)
   1cfbc:	10000005 	stb	zero,0(r2)
    return (len);
   1cfc0:	e0bffd03 	ldbu	r2,-12(fp)
}
   1cfc4:	e037883a 	mov	sp,fp
   1cfc8:	df000017 	ldw	fp,0(sp)
   1cfcc:	dec00104 	addi	sp,sp,4
   1cfd0:	f800283a 	ret

0001cfd4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   1cfd4:	defffd04 	addi	sp,sp,-12
   1cfd8:	df000215 	stw	fp,8(sp)
   1cfdc:	df000204 	addi	fp,sp,8
   1cfe0:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   1cfe4:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   1cfe8:	00000606 	br	1d004 <OS_StrLen+0x30>
        psrc++;
   1cfec:	e0bfff17 	ldw	r2,-4(fp)
   1cff0:	10800044 	addi	r2,r2,1
   1cff4:	e0bfff15 	stw	r2,-4(fp)
        len++;
   1cff8:	e0bffe03 	ldbu	r2,-8(fp)
   1cffc:	10800044 	addi	r2,r2,1
   1d000:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   1d004:	e0bfff17 	ldw	r2,-4(fp)
   1d008:	10800003 	ldbu	r2,0(r2)
   1d00c:	10803fcc 	andi	r2,r2,255
   1d010:	103ff61e 	bne	r2,zero,1cfec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701cfec>
        psrc++;
        len++;
    }
    return (len);
   1d014:	e0bffe03 	ldbu	r2,-8(fp)
}
   1d018:	e037883a 	mov	sp,fp
   1d01c:	df000017 	ldw	fp,0(sp)
   1d020:	dec00104 	addi	sp,sp,4
   1d024:	f800283a 	ret

0001d028 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   1d028:	defffa04 	addi	sp,sp,-24
   1d02c:	dfc00515 	stw	ra,20(sp)
   1d030:	df000415 	stw	fp,16(sp)
   1d034:	df000404 	addi	fp,sp,16
   1d038:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1d03c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d040:	0005303a 	rdctl	r2,status
   1d044:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d048:	e0fffd17 	ldw	r3,-12(fp)
   1d04c:	00bfff84 	movi	r2,-2
   1d050:	1884703a 	and	r2,r3,r2
   1d054:	1001703a 	wrctl	status,r2
  
  return context;
   1d058:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   1d05c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   1d060:	d0a84e17 	ldw	r2,-24264(gp)
   1d064:	10800044 	addi	r2,r2,1
   1d068:	d0a84e15 	stw	r2,-24264(gp)
   1d06c:	e0bffc17 	ldw	r2,-16(fp)
   1d070:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d074:	e0bffe17 	ldw	r2,-8(fp)
   1d078:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   1d07c:	00263b00 	call	263b0 <OSTaskIdleHook>
    }
   1d080:	003fef06 	br	1d040 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701d040>

0001d084 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   1d084:	defff804 	addi	sp,sp,-32
   1d088:	dfc00715 	stw	ra,28(sp)
   1d08c:	df000615 	stw	fp,24(sp)
   1d090:	dc400515 	stw	r17,20(sp)
   1d094:	dc000415 	stw	r16,16(sp)
   1d098:	df000604 	addi	fp,sp,24
   1d09c:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1d0a0:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   1d0a4:	00000206 	br	1d0b0 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   1d0a8:	01000044 	movi	r4,1
   1d0ac:	00227c80 	call	227c8 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   1d0b0:	d0a85f03 	ldbu	r2,-24196(gp)
   1d0b4:	10803fcc 	andi	r2,r2,255
   1d0b8:	103ffb26 	beq	r2,zero,1d0a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701d0a8>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   1d0bc:	d0e85317 	ldw	r3,-24244(gp)
   1d0c0:	00947b34 	movhi	r2,20972
   1d0c4:	10a147c4 	addi	r2,r2,-31457
   1d0c8:	1888383a 	mulxuu	r4,r3,r2
   1d0cc:	1885383a 	mul	r2,r3,r2
   1d0d0:	1021883a 	mov	r16,r2
   1d0d4:	2023883a 	mov	r17,r4
   1d0d8:	8804d17a 	srli	r2,r17,5
   1d0dc:	d0a85315 	stw	r2,-24244(gp)
    if (OSIdleCtrMax == 0L) {
   1d0e0:	d0a85317 	ldw	r2,-24244(gp)
   1d0e4:	1000031e 	bne	r2,zero,1d0f4 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   1d0e8:	d0285505 	stb	zero,-24236(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   1d0ec:	01003fc4 	movi	r4,255
   1d0f0:	00224500 	call	22450 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d0f4:	0005303a 	rdctl	r2,status
   1d0f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d0fc:	e0fffb17 	ldw	r3,-20(fp)
   1d100:	00bfff84 	movi	r2,-2
   1d104:	1884703a 	and	r2,r3,r2
   1d108:	1001703a 	wrctl	status,r2
  
  return context;
   1d10c:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   1d110:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   1d114:	d0a84e17 	ldw	r2,-24264(gp)
   1d118:	d0a86015 	stw	r2,-24192(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   1d11c:	d0284e15 	stw	zero,-24264(gp)
   1d120:	e0bffa17 	ldw	r2,-24(fp)
   1d124:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d128:	e0bffc17 	ldw	r2,-16(fp)
   1d12c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   1d130:	d0e86017 	ldw	r3,-24192(gp)
   1d134:	d0a85317 	ldw	r2,-24244(gp)
   1d138:	1885203a 	divu	r2,r3,r2
   1d13c:	1007883a 	mov	r3,r2
   1d140:	00801904 	movi	r2,100
   1d144:	10c5c83a 	sub	r2,r2,r3
   1d148:	d0a85505 	stb	r2,-24236(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   1d14c:	00263300 	call	26330 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   1d150:	001d1600 	call	1d160 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   1d154:	0009883a 	mov	r4,zero
   1d158:	00227c80 	call	227c8 <OSTimeDly>
    }
   1d15c:	003fe506 	br	1d0f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701d0f4>

0001d160 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   1d160:	defffa04 	addi	sp,sp,-24
   1d164:	dfc00515 	stw	ra,20(sp)
   1d168:	df000415 	stw	fp,16(sp)
   1d16c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   1d170:	e03ffc05 	stb	zero,-16(fp)
   1d174:	00002406 	br	1d208 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   1d178:	e0bffc03 	ldbu	r2,-16(fp)
   1d17c:	e0fffe04 	addi	r3,fp,-8
   1d180:	180b883a 	mov	r5,r3
   1d184:	1009883a 	mov	r4,r2
   1d188:	00222900 	call	22290 <OSTaskStkChk>
   1d18c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   1d190:	e0bffc43 	ldbu	r2,-15(fp)
   1d194:	1000191e 	bne	r2,zero,1d1fc <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   1d198:	e0fffc03 	ldbu	r3,-16(fp)
   1d19c:	00800134 	movhi	r2,4
   1d1a0:	10ae8104 	addi	r2,r2,-17916
   1d1a4:	18c7883a 	add	r3,r3,r3
   1d1a8:	18c7883a 	add	r3,r3,r3
   1d1ac:	10c5883a 	add	r2,r2,r3
   1d1b0:	10800017 	ldw	r2,0(r2)
   1d1b4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   1d1b8:	e0bffd17 	ldw	r2,-12(fp)
   1d1bc:	10000f26 	beq	r2,zero,1d1fc <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   1d1c0:	e0bffd17 	ldw	r2,-12(fp)
   1d1c4:	10800060 	cmpeqi	r2,r2,1
   1d1c8:	10000c1e 	bne	r2,zero,1d1fc <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   1d1cc:	e0bffd17 	ldw	r2,-12(fp)
   1d1d0:	10c00217 	ldw	r3,8(r2)
   1d1d4:	e0bffd17 	ldw	r2,-12(fp)
   1d1d8:	10800317 	ldw	r2,12(r2)
   1d1dc:	1085883a 	add	r2,r2,r2
   1d1e0:	1085883a 	add	r2,r2,r2
   1d1e4:	1887883a 	add	r3,r3,r2
   1d1e8:	e0bffd17 	ldw	r2,-12(fp)
   1d1ec:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   1d1f0:	e0ffff17 	ldw	r3,-4(fp)
   1d1f4:	e0bffd17 	ldw	r2,-12(fp)
   1d1f8:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   1d1fc:	e0bffc03 	ldbu	r2,-16(fp)
   1d200:	10800044 	addi	r2,r2,1
   1d204:	e0bffc05 	stb	r2,-16(fp)
   1d208:	e0bffc03 	ldbu	r2,-16(fp)
   1d20c:	10800570 	cmpltui	r2,r2,21
   1d210:	103fd91e 	bne	r2,zero,1d178 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701d178>
#endif
                }
            }
        }
    }
}
   1d214:	0001883a 	nop
   1d218:	e037883a 	mov	sp,fp
   1d21c:	dfc00117 	ldw	ra,4(sp)
   1d220:	df000017 	ldw	fp,0(sp)
   1d224:	dec00204 	addi	sp,sp,8
   1d228:	f800283a 	ret

0001d22c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   1d22c:	defff204 	addi	sp,sp,-56
   1d230:	dfc00d15 	stw	ra,52(sp)
   1d234:	df000c15 	stw	fp,48(sp)
   1d238:	df000c04 	addi	fp,sp,48
   1d23c:	e17ffc15 	stw	r5,-16(fp)
   1d240:	e1bffd15 	stw	r6,-12(fp)
   1d244:	3807883a 	mov	r3,r7
   1d248:	e0800417 	ldw	r2,16(fp)
   1d24c:	e13ffb05 	stb	r4,-20(fp)
   1d250:	e0fffe0d 	sth	r3,-8(fp)
   1d254:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1d258:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d25c:	0005303a 	rdctl	r2,status
   1d260:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d264:	e0fffa17 	ldw	r3,-24(fp)
   1d268:	00bfff84 	movi	r2,-2
   1d26c:	1884703a 	and	r2,r3,r2
   1d270:	1001703a 	wrctl	status,r2
  
  return context;
   1d274:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   1d278:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   1d27c:	d0a85417 	ldw	r2,-24240(gp)
   1d280:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   1d284:	e0bff617 	ldw	r2,-40(fp)
   1d288:	10009326 	beq	r2,zero,1d4d8 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   1d28c:	e0bff617 	ldw	r2,-40(fp)
   1d290:	10800517 	ldw	r2,20(r2)
   1d294:	d0a85415 	stw	r2,-24240(gp)
   1d298:	e0bff417 	ldw	r2,-48(fp)
   1d29c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d2a0:	e0bff817 	ldw	r2,-32(fp)
   1d2a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   1d2a8:	e0bff617 	ldw	r2,-40(fp)
   1d2ac:	e0fffc17 	ldw	r3,-16(fp)
   1d2b0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   1d2b4:	e0bff617 	ldw	r2,-40(fp)
   1d2b8:	e0fffb03 	ldbu	r3,-20(fp)
   1d2bc:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   1d2c0:	e0bff617 	ldw	r2,-40(fp)
   1d2c4:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   1d2c8:	e0bff617 	ldw	r2,-40(fp)
   1d2cc:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   1d2d0:	e0bff617 	ldw	r2,-40(fp)
   1d2d4:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   1d2d8:	e0bff617 	ldw	r2,-40(fp)
   1d2dc:	e0c00317 	ldw	r3,12(fp)
   1d2e0:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   1d2e4:	e0bff617 	ldw	r2,-40(fp)
   1d2e8:	e0c00217 	ldw	r3,8(fp)
   1d2ec:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   1d2f0:	e0bff617 	ldw	r2,-40(fp)
   1d2f4:	e0fffd17 	ldw	r3,-12(fp)
   1d2f8:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   1d2fc:	e0bff617 	ldw	r2,-40(fp)
   1d300:	e0ffff0b 	ldhu	r3,-4(fp)
   1d304:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   1d308:	e0bff617 	ldw	r2,-40(fp)
   1d30c:	e0fffe0b 	ldhu	r3,-8(fp)
   1d310:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   1d314:	e0bff617 	ldw	r2,-40(fp)
   1d318:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   1d31c:	e0bffb03 	ldbu	r2,-20(fp)
   1d320:	1004d0fa 	srli	r2,r2,3
   1d324:	1007883a 	mov	r3,r2
   1d328:	e0bff617 	ldw	r2,-40(fp)
   1d32c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   1d330:	e0bffb03 	ldbu	r2,-20(fp)
   1d334:	108001cc 	andi	r2,r2,7
   1d338:	1007883a 	mov	r3,r2
   1d33c:	e0bff617 	ldw	r2,-40(fp)
   1d340:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   1d344:	e0bff617 	ldw	r2,-40(fp)
   1d348:	10800d03 	ldbu	r2,52(r2)
   1d34c:	10803fcc 	andi	r2,r2,255
   1d350:	00c00044 	movi	r3,1
   1d354:	1884983a 	sll	r2,r3,r2
   1d358:	1007883a 	mov	r3,r2
   1d35c:	e0bff617 	ldw	r2,-40(fp)
   1d360:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   1d364:	e0bff617 	ldw	r2,-40(fp)
   1d368:	10800cc3 	ldbu	r2,51(r2)
   1d36c:	10803fcc 	andi	r2,r2,255
   1d370:	00c00044 	movi	r3,1
   1d374:	1884983a 	sll	r2,r3,r2
   1d378:	1007883a 	mov	r3,r2
   1d37c:	e0bff617 	ldw	r2,-40(fp)
   1d380:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   1d384:	e0bff617 	ldw	r2,-40(fp)
   1d388:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   1d38c:	e0bff617 	ldw	r2,-40(fp)
   1d390:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   1d394:	e0bff617 	ldw	r2,-40(fp)
   1d398:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   1d39c:	e0bff617 	ldw	r2,-40(fp)
   1d3a0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   1d3a4:	e0bff617 	ldw	r2,-40(fp)
   1d3a8:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   1d3ac:	e0bff617 	ldw	r2,-40(fp)
   1d3b0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   1d3b4:	e0bff617 	ldw	r2,-40(fp)
   1d3b8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   1d3bc:	e0bff617 	ldw	r2,-40(fp)
   1d3c0:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   1d3c4:	e0bff617 	ldw	r2,-40(fp)
   1d3c8:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   1d3cc:	e0bff617 	ldw	r2,-40(fp)
   1d3d0:	00c00fc4 	movi	r3,63
   1d3d4:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1d3d8:	e0bff617 	ldw	r2,-40(fp)
   1d3dc:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   1d3e0:	e13ff617 	ldw	r4,-40(fp)
   1d3e4:	00263d00 	call	263d0 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   1d3e8:	e13ff617 	ldw	r4,-40(fp)
   1d3ec:	00262c80 	call	262c8 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d3f0:	0005303a 	rdctl	r2,status
   1d3f4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d3f8:	e0fff517 	ldw	r3,-44(fp)
   1d3fc:	00bfff84 	movi	r2,-2
   1d400:	1884703a 	and	r2,r3,r2
   1d404:	1001703a 	wrctl	status,r2
  
  return context;
   1d408:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   1d40c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   1d410:	e0fffb03 	ldbu	r3,-20(fp)
   1d414:	00800134 	movhi	r2,4
   1d418:	10ae8104 	addi	r2,r2,-17916
   1d41c:	18c7883a 	add	r3,r3,r3
   1d420:	18c7883a 	add	r3,r3,r3
   1d424:	10c5883a 	add	r2,r2,r3
   1d428:	e0fff617 	ldw	r3,-40(fp)
   1d42c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   1d430:	d0e85017 	ldw	r3,-24256(gp)
   1d434:	e0bff617 	ldw	r2,-40(fp)
   1d438:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   1d43c:	e0bff617 	ldw	r2,-40(fp)
   1d440:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   1d444:	d0a85017 	ldw	r2,-24256(gp)
   1d448:	10000326 	beq	r2,zero,1d458 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   1d44c:	d0a85017 	ldw	r2,-24256(gp)
   1d450:	e0fff617 	ldw	r3,-40(fp)
   1d454:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   1d458:	e0bff617 	ldw	r2,-40(fp)
   1d45c:	d0a85015 	stw	r2,-24256(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   1d460:	e0bff617 	ldw	r2,-40(fp)
   1d464:	10c00d83 	ldbu	r3,54(r2)
   1d468:	d0a85903 	ldbu	r2,-24220(gp)
   1d46c:	1884b03a 	or	r2,r3,r2
   1d470:	d0a85905 	stb	r2,-24220(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1d474:	e0bff617 	ldw	r2,-40(fp)
   1d478:	10800d03 	ldbu	r2,52(r2)
   1d47c:	10c03fcc 	andi	r3,r2,255
   1d480:	e0bff617 	ldw	r2,-40(fp)
   1d484:	10800d03 	ldbu	r2,52(r2)
   1d488:	11003fcc 	andi	r4,r2,255
   1d48c:	d0a85944 	addi	r2,gp,-24219
   1d490:	2085883a 	add	r2,r4,r2
   1d494:	11000003 	ldbu	r4,0(r2)
   1d498:	e0bff617 	ldw	r2,-40(fp)
   1d49c:	10800d43 	ldbu	r2,53(r2)
   1d4a0:	2084b03a 	or	r2,r4,r2
   1d4a4:	1009883a 	mov	r4,r2
   1d4a8:	d0a85944 	addi	r2,gp,-24219
   1d4ac:	1885883a 	add	r2,r3,r2
   1d4b0:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   1d4b4:	d0a85543 	ldbu	r2,-24235(gp)
   1d4b8:	10800044 	addi	r2,r2,1
   1d4bc:	d0a85545 	stb	r2,-24235(gp)
   1d4c0:	e0bff417 	ldw	r2,-48(fp)
   1d4c4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d4c8:	e0bff717 	ldw	r2,-36(fp)
   1d4cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   1d4d0:	0005883a 	mov	r2,zero
   1d4d4:	00000506 	br	1d4ec <OS_TCBInit+0x2c0>
   1d4d8:	e0bff417 	ldw	r2,-48(fp)
   1d4dc:	e0bff915 	stw	r2,-28(fp)
   1d4e0:	e0bff917 	ldw	r2,-28(fp)
   1d4e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   1d4e8:	00801084 	movi	r2,66
}
   1d4ec:	e037883a 	mov	sp,fp
   1d4f0:	dfc00117 	ldw	ra,4(sp)
   1d4f4:	df000017 	ldw	fp,0(sp)
   1d4f8:	dec00204 	addi	sp,sp,8
   1d4fc:	f800283a 	ret

0001d500 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   1d500:	defffe04 	addi	sp,sp,-8
   1d504:	df000115 	stw	fp,4(sp)
   1d508:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   1d50c:	d0a02804 	addi	r2,gp,-32608
   1d510:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   1d514:	d0a02904 	addi	r2,gp,-32604
   1d518:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   1d51c:	d0a02a84 	addi	r2,gp,-32598
   1d520:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   1d524:	d0a02b04 	addi	r2,gp,-32596
   1d528:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   1d52c:	d0a02a04 	addi	r2,gp,-32600
   1d530:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   1d534:	d0a02b84 	addi	r2,gp,-32594
   1d538:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   1d53c:	d0a02c04 	addi	r2,gp,-32592
   1d540:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   1d544:	d0a02c84 	addi	r2,gp,-32590
   1d548:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   1d54c:	d0a02d04 	addi	r2,gp,-32588
   1d550:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   1d554:	d0a02d84 	addi	r2,gp,-32586
   1d558:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   1d55c:	d0a02e04 	addi	r2,gp,-32584
   1d560:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   1d564:	d0a02e84 	addi	r2,gp,-32582
   1d568:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   1d56c:	d0a02f04 	addi	r2,gp,-32580
   1d570:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   1d574:	d0a02f84 	addi	r2,gp,-32578
   1d578:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   1d57c:	d0a03004 	addi	r2,gp,-32576
   1d580:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   1d584:	d0a03084 	addi	r2,gp,-32574
   1d588:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   1d58c:	d0a03104 	addi	r2,gp,-32572
   1d590:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   1d594:	d0a03184 	addi	r2,gp,-32570
   1d598:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   1d59c:	d0a03204 	addi	r2,gp,-32568
   1d5a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   1d5a4:	d0a03284 	addi	r2,gp,-32566
   1d5a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   1d5ac:	d0a03304 	addi	r2,gp,-32564
   1d5b0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   1d5b4:	d0a03384 	addi	r2,gp,-32562
   1d5b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   1d5bc:	d0a03404 	addi	r2,gp,-32560
   1d5c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   1d5c4:	d0a03484 	addi	r2,gp,-32558
   1d5c8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   1d5cc:	d0a03504 	addi	r2,gp,-32556
   1d5d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   1d5d4:	d0a03584 	addi	r2,gp,-32554
   1d5d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   1d5dc:	d0a03604 	addi	r2,gp,-32552
   1d5e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   1d5e4:	d0a03684 	addi	r2,gp,-32550
   1d5e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   1d5ec:	d0a03704 	addi	r2,gp,-32548
   1d5f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   1d5f4:	d0a03784 	addi	r2,gp,-32546
   1d5f8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   1d5fc:	d0a03804 	addi	r2,gp,-32544
   1d600:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   1d604:	d0a03884 	addi	r2,gp,-32542
   1d608:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   1d60c:	d0a03904 	addi	r2,gp,-32540
   1d610:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   1d614:	d0a03984 	addi	r2,gp,-32538
   1d618:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   1d61c:	d0a03a04 	addi	r2,gp,-32536
   1d620:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   1d624:	d0a03a84 	addi	r2,gp,-32534
   1d628:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   1d62c:	d0a03b04 	addi	r2,gp,-32532
   1d630:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   1d634:	d0a03b84 	addi	r2,gp,-32530
   1d638:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   1d63c:	d0a03c04 	addi	r2,gp,-32528
   1d640:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   1d644:	d0a03c84 	addi	r2,gp,-32526
   1d648:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   1d64c:	d0a03d04 	addi	r2,gp,-32524
   1d650:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   1d654:	d0a03d84 	addi	r2,gp,-32522
   1d658:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   1d65c:	d0a03e04 	addi	r2,gp,-32520
   1d660:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   1d664:	d0a03e84 	addi	r2,gp,-32518
   1d668:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   1d66c:	d0a03f04 	addi	r2,gp,-32516
   1d670:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   1d674:	d0a04404 	addi	r2,gp,-32496
   1d678:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   1d67c:	0001883a 	nop
   1d680:	e037883a 	mov	sp,fp
   1d684:	df000017 	ldw	fp,0(sp)
   1d688:	dec00104 	addi	sp,sp,4
   1d68c:	f800283a 	ret

0001d690 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   1d690:	defff204 	addi	sp,sp,-56
   1d694:	df000d15 	stw	fp,52(sp)
   1d698:	df000d04 	addi	fp,sp,52
   1d69c:	e13ffc15 	stw	r4,-16(fp)
   1d6a0:	2807883a 	mov	r3,r5
   1d6a4:	3005883a 	mov	r2,r6
   1d6a8:	e1ffff15 	stw	r7,-4(fp)
   1d6ac:	e0fffd0d 	sth	r3,-12(fp)
   1d6b0:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1d6b4:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1d6b8:	e0bfff17 	ldw	r2,-4(fp)
   1d6bc:	1000021e 	bne	r2,zero,1d6c8 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   1d6c0:	0005883a 	mov	r2,zero
   1d6c4:	0000b006 	br	1d988 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1d6c8:	e0bffc17 	ldw	r2,-16(fp)
   1d6cc:	1000051e 	bne	r2,zero,1d6e4 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1d6d0:	e0bfff17 	ldw	r2,-4(fp)
   1d6d4:	00c01b84 	movi	r3,110
   1d6d8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1d6dc:	0005883a 	mov	r2,zero
   1d6e0:	0000a906 	br	1d988 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   1d6e4:	e0bffc17 	ldw	r2,-16(fp)
   1d6e8:	10800003 	ldbu	r2,0(r2)
   1d6ec:	10803fcc 	andi	r2,r2,255
   1d6f0:	10800160 	cmpeqi	r2,r2,5
   1d6f4:	1000051e 	bne	r2,zero,1d70c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   1d6f8:	e0bfff17 	ldw	r2,-4(fp)
   1d6fc:	00c00044 	movi	r3,1
   1d700:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1d704:	0005883a 	mov	r2,zero
   1d708:	00009f06 	br	1d988 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   1d70c:	e0fffe03 	ldbu	r3,-8(fp)
   1d710:	00bfe004 	movi	r2,-128
   1d714:	1884703a 	and	r2,r3,r2
   1d718:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   1d71c:	e0bff503 	ldbu	r2,-44(fp)
   1d720:	10000626 	beq	r2,zero,1d73c <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   1d724:	e0bffe03 	ldbu	r2,-8(fp)
   1d728:	10801fcc 	andi	r2,r2,127
   1d72c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   1d730:	00800044 	movi	r2,1
   1d734:	e0bff385 	stb	r2,-50(fp)
   1d738:	00000106 	br	1d740 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   1d73c:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   1d740:	e0bfff17 	ldw	r2,-4(fp)
   1d744:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d748:	0005303a 	rdctl	r2,status
   1d74c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d750:	e0fffb17 	ldw	r3,-20(fp)
   1d754:	00bfff84 	movi	r2,-2
   1d758:	1884703a 	and	r2,r3,r2
   1d75c:	1001703a 	wrctl	status,r2
  
  return context;
   1d760:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   1d764:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   1d768:	e0bffe03 	ldbu	r2,-8(fp)
   1d76c:	10c00060 	cmpeqi	r3,r2,1
   1d770:	18005f1e 	bne	r3,zero,1d8f0 <OSFlagAccept+0x260>
   1d774:	10c00088 	cmpgei	r3,r2,2
   1d778:	1800021e 	bne	r3,zero,1d784 <OSFlagAccept+0xf4>
   1d77c:	10003f26 	beq	r2,zero,1d87c <OSFlagAccept+0x1ec>
   1d780:	00007706 	br	1d960 <OSFlagAccept+0x2d0>
   1d784:	10c000a0 	cmpeqi	r3,r2,2
   1d788:	1800031e 	bne	r3,zero,1d798 <OSFlagAccept+0x108>
   1d78c:	108000e0 	cmpeqi	r2,r2,3
   1d790:	10001e1e 	bne	r2,zero,1d80c <OSFlagAccept+0x17c>
   1d794:	00007206 	br	1d960 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1d798:	e0bffc17 	ldw	r2,-16(fp)
   1d79c:	10c0020b 	ldhu	r3,8(r2)
   1d7a0:	e0bffd0b 	ldhu	r2,-12(fp)
   1d7a4:	1884703a 	and	r2,r3,r2
   1d7a8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1d7ac:	e0fff30b 	ldhu	r3,-52(fp)
   1d7b0:	e0bffd0b 	ldhu	r2,-12(fp)
   1d7b4:	18800d1e 	bne	r3,r2,1d7ec <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1d7b8:	e0bff383 	ldbu	r2,-50(fp)
   1d7bc:	10800058 	cmpnei	r2,r2,1
   1d7c0:	10000d1e 	bne	r2,zero,1d7f8 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   1d7c4:	e0bffc17 	ldw	r2,-16(fp)
   1d7c8:	1080020b 	ldhu	r2,8(r2)
   1d7cc:	1007883a 	mov	r3,r2
   1d7d0:	e0bff30b 	ldhu	r2,-52(fp)
   1d7d4:	0084303a 	nor	r2,zero,r2
   1d7d8:	1884703a 	and	r2,r3,r2
   1d7dc:	1007883a 	mov	r3,r2
   1d7e0:	e0bffc17 	ldw	r2,-16(fp)
   1d7e4:	10c0020d 	sth	r3,8(r2)
   1d7e8:	00000306 	br	1d7f8 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1d7ec:	e0bfff17 	ldw	r2,-4(fp)
   1d7f0:	00c01c04 	movi	r3,112
   1d7f4:	10c00005 	stb	r3,0(r2)
   1d7f8:	e0bff417 	ldw	r2,-48(fp)
   1d7fc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d800:	e0bff617 	ldw	r2,-40(fp)
   1d804:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1d808:	00005e06 	br	1d984 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1d80c:	e0bffc17 	ldw	r2,-16(fp)
   1d810:	10c0020b 	ldhu	r3,8(r2)
   1d814:	e0bffd0b 	ldhu	r2,-12(fp)
   1d818:	1884703a 	and	r2,r3,r2
   1d81c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   1d820:	e0bff30b 	ldhu	r2,-52(fp)
   1d824:	10000d26 	beq	r2,zero,1d85c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1d828:	e0bff383 	ldbu	r2,-50(fp)
   1d82c:	10800058 	cmpnei	r2,r2,1
   1d830:	10000d1e 	bne	r2,zero,1d868 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   1d834:	e0bffc17 	ldw	r2,-16(fp)
   1d838:	1080020b 	ldhu	r2,8(r2)
   1d83c:	1007883a 	mov	r3,r2
   1d840:	e0bff30b 	ldhu	r2,-52(fp)
   1d844:	0084303a 	nor	r2,zero,r2
   1d848:	1884703a 	and	r2,r3,r2
   1d84c:	1007883a 	mov	r3,r2
   1d850:	e0bffc17 	ldw	r2,-16(fp)
   1d854:	10c0020d 	sth	r3,8(r2)
   1d858:	00000306 	br	1d868 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1d85c:	e0bfff17 	ldw	r2,-4(fp)
   1d860:	00c01c04 	movi	r3,112
   1d864:	10c00005 	stb	r3,0(r2)
   1d868:	e0bff417 	ldw	r2,-48(fp)
   1d86c:	e0bff715 	stw	r2,-36(fp)
   1d870:	e0bff717 	ldw	r2,-36(fp)
   1d874:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1d878:	00004206 	br	1d984 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   1d87c:	e0bffc17 	ldw	r2,-16(fp)
   1d880:	1080020b 	ldhu	r2,8(r2)
   1d884:	0084303a 	nor	r2,zero,r2
   1d888:	1007883a 	mov	r3,r2
   1d88c:	e0bffd0b 	ldhu	r2,-12(fp)
   1d890:	1884703a 	and	r2,r3,r2
   1d894:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1d898:	e0fff30b 	ldhu	r3,-52(fp)
   1d89c:	e0bffd0b 	ldhu	r2,-12(fp)
   1d8a0:	18800b1e 	bne	r3,r2,1d8d0 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1d8a4:	e0bff383 	ldbu	r2,-50(fp)
   1d8a8:	10800058 	cmpnei	r2,r2,1
   1d8ac:	10000b1e 	bne	r2,zero,1d8dc <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   1d8b0:	e0bffc17 	ldw	r2,-16(fp)
   1d8b4:	10c0020b 	ldhu	r3,8(r2)
   1d8b8:	e0bff30b 	ldhu	r2,-52(fp)
   1d8bc:	1884b03a 	or	r2,r3,r2
   1d8c0:	1007883a 	mov	r3,r2
   1d8c4:	e0bffc17 	ldw	r2,-16(fp)
   1d8c8:	10c0020d 	sth	r3,8(r2)
   1d8cc:	00000306 	br	1d8dc <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1d8d0:	e0bfff17 	ldw	r2,-4(fp)
   1d8d4:	00c01c04 	movi	r3,112
   1d8d8:	10c00005 	stb	r3,0(r2)
   1d8dc:	e0bff417 	ldw	r2,-48(fp)
   1d8e0:	e0bff815 	stw	r2,-32(fp)
   1d8e4:	e0bff817 	ldw	r2,-32(fp)
   1d8e8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1d8ec:	00002506 	br	1d984 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   1d8f0:	e0bffc17 	ldw	r2,-16(fp)
   1d8f4:	1080020b 	ldhu	r2,8(r2)
   1d8f8:	0084303a 	nor	r2,zero,r2
   1d8fc:	1007883a 	mov	r3,r2
   1d900:	e0bffd0b 	ldhu	r2,-12(fp)
   1d904:	1884703a 	and	r2,r3,r2
   1d908:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   1d90c:	e0bff30b 	ldhu	r2,-52(fp)
   1d910:	10000b26 	beq	r2,zero,1d940 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1d914:	e0bff383 	ldbu	r2,-50(fp)
   1d918:	10800058 	cmpnei	r2,r2,1
   1d91c:	10000b1e 	bne	r2,zero,1d94c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   1d920:	e0bffc17 	ldw	r2,-16(fp)
   1d924:	10c0020b 	ldhu	r3,8(r2)
   1d928:	e0bff30b 	ldhu	r2,-52(fp)
   1d92c:	1884b03a 	or	r2,r3,r2
   1d930:	1007883a 	mov	r3,r2
   1d934:	e0bffc17 	ldw	r2,-16(fp)
   1d938:	10c0020d 	sth	r3,8(r2)
   1d93c:	00000306 	br	1d94c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1d940:	e0bfff17 	ldw	r2,-4(fp)
   1d944:	00c01c04 	movi	r3,112
   1d948:	10c00005 	stb	r3,0(r2)
   1d94c:	e0bff417 	ldw	r2,-48(fp)
   1d950:	e0bff915 	stw	r2,-28(fp)
   1d954:	e0bff917 	ldw	r2,-28(fp)
   1d958:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1d95c:	00000906 	br	1d984 <OSFlagAccept+0x2f4>
   1d960:	e0bff417 	ldw	r2,-48(fp)
   1d964:	e0bffa15 	stw	r2,-24(fp)
   1d968:	e0bffa17 	ldw	r2,-24(fp)
   1d96c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   1d970:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   1d974:	e0bfff17 	ldw	r2,-4(fp)
   1d978:	00c01bc4 	movi	r3,111
   1d97c:	10c00005 	stb	r3,0(r2)
             break;
   1d980:	0001883a 	nop
    }
    return (flags_rdy);
   1d984:	e0bff30b 	ldhu	r2,-52(fp)
}
   1d988:	e037883a 	mov	sp,fp
   1d98c:	df000017 	ldw	fp,0(sp)
   1d990:	dec00104 	addi	sp,sp,4
   1d994:	f800283a 	ret

0001d998 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   1d998:	defff804 	addi	sp,sp,-32
   1d99c:	df000715 	stw	fp,28(sp)
   1d9a0:	df000704 	addi	fp,sp,28
   1d9a4:	2005883a 	mov	r2,r4
   1d9a8:	e17fff15 	stw	r5,-4(fp)
   1d9ac:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   1d9b0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   1d9b4:	e0bfff17 	ldw	r2,-4(fp)
   1d9b8:	1000021e 	bne	r2,zero,1d9c4 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   1d9bc:	0005883a 	mov	r2,zero
   1d9c0:	00003306 	br	1da90 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   1d9c4:	d0a85b03 	ldbu	r2,-24212(gp)
   1d9c8:	10803fcc 	andi	r2,r2,255
   1d9cc:	10000526 	beq	r2,zero,1d9e4 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   1d9d0:	e0bfff17 	ldw	r2,-4(fp)
   1d9d4:	00c00404 	movi	r3,16
   1d9d8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   1d9dc:	0005883a 	mov	r2,zero
   1d9e0:	00002b06 	br	1da90 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d9e4:	0005303a 	rdctl	r2,status
   1d9e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d9ec:	e0fffd17 	ldw	r3,-12(fp)
   1d9f0:	00bfff84 	movi	r2,-2
   1d9f4:	1884703a 	and	r2,r3,r2
   1d9f8:	1001703a 	wrctl	status,r2
  
  return context;
   1d9fc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1da00:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   1da04:	d0a85e17 	ldw	r2,-24200(gp)
   1da08:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   1da0c:	e0bffb17 	ldw	r2,-20(fp)
   1da10:	10001726 	beq	r2,zero,1da70 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   1da14:	d0a85e17 	ldw	r2,-24200(gp)
   1da18:	10800117 	ldw	r2,4(r2)
   1da1c:	d0a85e15 	stw	r2,-24200(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   1da20:	e0bffb17 	ldw	r2,-20(fp)
   1da24:	00c00144 	movi	r3,5
   1da28:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   1da2c:	e0bffb17 	ldw	r2,-20(fp)
   1da30:	e0fffe0b 	ldhu	r3,-8(fp)
   1da34:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   1da38:	e0bffb17 	ldw	r2,-20(fp)
   1da3c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   1da40:	e0bffb17 	ldw	r2,-20(fp)
   1da44:	00c00fc4 	movi	r3,63
   1da48:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1da4c:	e0bffb17 	ldw	r2,-20(fp)
   1da50:	100002c5 	stb	zero,11(r2)
   1da54:	e0bff917 	ldw	r2,-28(fp)
   1da58:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1da5c:	e0bffa17 	ldw	r2,-24(fp)
   1da60:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   1da64:	e0bfff17 	ldw	r2,-4(fp)
   1da68:	10000005 	stb	zero,0(r2)
   1da6c:	00000706 	br	1da8c <OSFlagCreate+0xf4>
   1da70:	e0bff917 	ldw	r2,-28(fp)
   1da74:	e0bffc15 	stw	r2,-16(fp)
   1da78:	e0bffc17 	ldw	r2,-16(fp)
   1da7c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   1da80:	e0bfff17 	ldw	r2,-4(fp)
   1da84:	00c01c84 	movi	r3,114
   1da88:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   1da8c:	e0bffb17 	ldw	r2,-20(fp)
}
   1da90:	e037883a 	mov	sp,fp
   1da94:	df000017 	ldw	fp,0(sp)
   1da98:	dec00104 	addi	sp,sp,4
   1da9c:	f800283a 	ret

0001daa0 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   1daa0:	defff204 	addi	sp,sp,-56
   1daa4:	dfc00d15 	stw	ra,52(sp)
   1daa8:	df000c15 	stw	fp,48(sp)
   1daac:	df000c04 	addi	fp,sp,48
   1dab0:	e13ffd15 	stw	r4,-12(fp)
   1dab4:	2805883a 	mov	r2,r5
   1dab8:	e1bfff15 	stw	r6,-4(fp)
   1dabc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1dac0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1dac4:	e0bfff17 	ldw	r2,-4(fp)
   1dac8:	1000021e 	bne	r2,zero,1dad4 <OSFlagDel+0x34>
        return (pgrp);
   1dacc:	e0bffd17 	ldw	r2,-12(fp)
   1dad0:	00008006 	br	1dcd4 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1dad4:	e0bffd17 	ldw	r2,-12(fp)
   1dad8:	1000051e 	bne	r2,zero,1daf0 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1dadc:	e0bfff17 	ldw	r2,-4(fp)
   1dae0:	00c01b84 	movi	r3,110
   1dae4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1dae8:	e0bffd17 	ldw	r2,-12(fp)
   1daec:	00007906 	br	1dcd4 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1daf0:	d0a85b03 	ldbu	r2,-24212(gp)
   1daf4:	10803fcc 	andi	r2,r2,255
   1daf8:	10000526 	beq	r2,zero,1db10 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1dafc:	e0bfff17 	ldw	r2,-4(fp)
   1db00:	00c003c4 	movi	r3,15
   1db04:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1db08:	e0bffd17 	ldw	r2,-12(fp)
   1db0c:	00007106 	br	1dcd4 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   1db10:	e0bffd17 	ldw	r2,-12(fp)
   1db14:	10800003 	ldbu	r2,0(r2)
   1db18:	10803fcc 	andi	r2,r2,255
   1db1c:	10800160 	cmpeqi	r2,r2,5
   1db20:	1000051e 	bne	r2,zero,1db38 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   1db24:	e0bfff17 	ldw	r2,-4(fp)
   1db28:	00c00044 	movi	r3,1
   1db2c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1db30:	e0bffd17 	ldw	r2,-12(fp)
   1db34:	00006706 	br	1dcd4 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1db38:	0005303a 	rdctl	r2,status
   1db3c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1db40:	e0fffc17 	ldw	r3,-16(fp)
   1db44:	00bfff84 	movi	r2,-2
   1db48:	1884703a 	and	r2,r3,r2
   1db4c:	1001703a 	wrctl	status,r2
  
  return context;
   1db50:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1db54:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   1db58:	e0bffd17 	ldw	r2,-12(fp)
   1db5c:	10800117 	ldw	r2,4(r2)
   1db60:	10000326 	beq	r2,zero,1db70 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1db64:	00800044 	movi	r2,1
   1db68:	e0bff405 	stb	r2,-48(fp)
   1db6c:	00000106 	br	1db74 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1db70:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   1db74:	e0bffe03 	ldbu	r2,-8(fp)
   1db78:	10000326 	beq	r2,zero,1db88 <OSFlagDel+0xe8>
   1db7c:	10800060 	cmpeqi	r2,r2,1
   1db80:	1000231e 	bne	r2,zero,1dc10 <OSFlagDel+0x170>
   1db84:	00004806 	br	1dca8 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   1db88:	e0bff403 	ldbu	r2,-48(fp)
   1db8c:	1000161e 	bne	r2,zero,1dbe8 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   1db90:	e0bffd17 	ldw	r2,-12(fp)
   1db94:	00c00fc4 	movi	r3,63
   1db98:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1db9c:	e0bffd17 	ldw	r2,-12(fp)
   1dba0:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1dba4:	e0bffd17 	ldw	r2,-12(fp)
   1dba8:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   1dbac:	d0e85e17 	ldw	r3,-24200(gp)
   1dbb0:	e0bffd17 	ldw	r2,-12(fp)
   1dbb4:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1dbb8:	e0bffd17 	ldw	r2,-12(fp)
   1dbbc:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   1dbc0:	e0bffd17 	ldw	r2,-12(fp)
   1dbc4:	d0a85e15 	stw	r2,-24200(gp)
   1dbc8:	e0bff717 	ldw	r2,-36(fp)
   1dbcc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1dbd0:	e0bff817 	ldw	r2,-32(fp)
   1dbd4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   1dbd8:	e0bfff17 	ldw	r2,-4(fp)
   1dbdc:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   1dbe0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   1dbe4:	00003a06 	br	1dcd0 <OSFlagDel+0x230>
   1dbe8:	e0bff717 	ldw	r2,-36(fp)
   1dbec:	e0bff915 	stw	r2,-28(fp)
   1dbf0:	e0bff917 	ldw	r2,-28(fp)
   1dbf4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   1dbf8:	e0bfff17 	ldw	r2,-4(fp)
   1dbfc:	00c01244 	movi	r3,73
   1dc00:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   1dc04:	e0bffd17 	ldw	r2,-12(fp)
   1dc08:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   1dc0c:	00003006 	br	1dcd0 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1dc10:	e0bffd17 	ldw	r2,-12(fp)
   1dc14:	10800117 	ldw	r2,4(r2)
   1dc18:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   1dc1c:	00000606 	br	1dc38 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   1dc20:	000b883a 	mov	r5,zero
   1dc24:	e13ff517 	ldw	r4,-44(fp)
   1dc28:	001ec0c0 	call	1ec0c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   1dc2c:	e0bff517 	ldw	r2,-44(fp)
   1dc30:	10800017 	ldw	r2,0(r2)
   1dc34:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   1dc38:	e0bff517 	ldw	r2,-44(fp)
   1dc3c:	103ff81e 	bne	r2,zero,1dc20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701dc20>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   1dc40:	e0bffd17 	ldw	r2,-12(fp)
   1dc44:	00c00fc4 	movi	r3,63
   1dc48:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1dc4c:	e0bffd17 	ldw	r2,-12(fp)
   1dc50:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1dc54:	e0bffd17 	ldw	r2,-12(fp)
   1dc58:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   1dc5c:	d0e85e17 	ldw	r3,-24200(gp)
   1dc60:	e0bffd17 	ldw	r2,-12(fp)
   1dc64:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1dc68:	e0bffd17 	ldw	r2,-12(fp)
   1dc6c:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   1dc70:	e0bffd17 	ldw	r2,-12(fp)
   1dc74:	d0a85e15 	stw	r2,-24200(gp)
   1dc78:	e0bff717 	ldw	r2,-36(fp)
   1dc7c:	e0bffa15 	stw	r2,-24(fp)
   1dc80:	e0bffa17 	ldw	r2,-24(fp)
   1dc84:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1dc88:	e0bff403 	ldbu	r2,-48(fp)
   1dc8c:	10800058 	cmpnei	r2,r2,1
   1dc90:	1000011e 	bne	r2,zero,1dc98 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1dc94:	001ce1c0 	call	1ce1c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   1dc98:	e0bfff17 	ldw	r2,-4(fp)
   1dc9c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   1dca0:	e03ff615 	stw	zero,-40(fp)
             break;
   1dca4:	00000a06 	br	1dcd0 <OSFlagDel+0x230>
   1dca8:	e0bff717 	ldw	r2,-36(fp)
   1dcac:	e0bffb15 	stw	r2,-20(fp)
   1dcb0:	e0bffb17 	ldw	r2,-20(fp)
   1dcb4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   1dcb8:	e0bfff17 	ldw	r2,-4(fp)
   1dcbc:	00c001c4 	movi	r3,7
   1dcc0:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   1dcc4:	e0bffd17 	ldw	r2,-12(fp)
   1dcc8:	e0bff615 	stw	r2,-40(fp)
             break;
   1dccc:	0001883a 	nop
    }
    return (pgrp_return);
   1dcd0:	e0bff617 	ldw	r2,-40(fp)
}
   1dcd4:	e037883a 	mov	sp,fp
   1dcd8:	dfc00117 	ldw	ra,4(sp)
   1dcdc:	df000017 	ldw	fp,0(sp)
   1dce0:	dec00204 	addi	sp,sp,8
   1dce4:	f800283a 	ret

0001dce8 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   1dce8:	defff604 	addi	sp,sp,-40
   1dcec:	dfc00915 	stw	ra,36(sp)
   1dcf0:	df000815 	stw	fp,32(sp)
   1dcf4:	df000804 	addi	fp,sp,32
   1dcf8:	e13ffd15 	stw	r4,-12(fp)
   1dcfc:	e17ffe15 	stw	r5,-8(fp)
   1dd00:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1dd04:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1dd08:	e0bfff17 	ldw	r2,-4(fp)
   1dd0c:	1000021e 	bne	r2,zero,1dd18 <OSFlagNameGet+0x30>
        return (0);
   1dd10:	0005883a 	mov	r2,zero
   1dd14:	00003906 	br	1ddfc <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   1dd18:	e0bffd17 	ldw	r2,-12(fp)
   1dd1c:	1000051e 	bne	r2,zero,1dd34 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1dd20:	e0bfff17 	ldw	r2,-4(fp)
   1dd24:	00c01b84 	movi	r3,110
   1dd28:	10c00005 	stb	r3,0(r2)
        return (0);
   1dd2c:	0005883a 	mov	r2,zero
   1dd30:	00003206 	br	1ddfc <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1dd34:	e0bffe17 	ldw	r2,-8(fp)
   1dd38:	1000051e 	bne	r2,zero,1dd50 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1dd3c:	e0bfff17 	ldw	r2,-4(fp)
   1dd40:	00c00304 	movi	r3,12
   1dd44:	10c00005 	stb	r3,0(r2)
        return (0);
   1dd48:	0005883a 	mov	r2,zero
   1dd4c:	00002b06 	br	1ddfc <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1dd50:	d0a85b03 	ldbu	r2,-24212(gp)
   1dd54:	10803fcc 	andi	r2,r2,255
   1dd58:	10000526 	beq	r2,zero,1dd70 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   1dd5c:	e0bfff17 	ldw	r2,-4(fp)
   1dd60:	00c00444 	movi	r3,17
   1dd64:	10c00005 	stb	r3,0(r2)
        return (0);
   1dd68:	0005883a 	mov	r2,zero
   1dd6c:	00002306 	br	1ddfc <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1dd70:	0005303a 	rdctl	r2,status
   1dd74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1dd78:	e0fffc17 	ldw	r3,-16(fp)
   1dd7c:	00bfff84 	movi	r2,-2
   1dd80:	1884703a 	and	r2,r3,r2
   1dd84:	1001703a 	wrctl	status,r2
  
  return context;
   1dd88:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1dd8c:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1dd90:	e0bffd17 	ldw	r2,-12(fp)
   1dd94:	10800003 	ldbu	r2,0(r2)
   1dd98:	10803fcc 	andi	r2,r2,255
   1dd9c:	10800160 	cmpeqi	r2,r2,5
   1dda0:	1000091e 	bne	r2,zero,1ddc8 <OSFlagNameGet+0xe0>
   1dda4:	e0bff817 	ldw	r2,-32(fp)
   1dda8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ddac:	e0bff917 	ldw	r2,-28(fp)
   1ddb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   1ddb4:	e0bfff17 	ldw	r2,-4(fp)
   1ddb8:	00c00044 	movi	r3,1
   1ddbc:	10c00005 	stb	r3,0(r2)
        return (0);
   1ddc0:	0005883a 	mov	r2,zero
   1ddc4:	00000d06 	br	1ddfc <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   1ddc8:	e0bffd17 	ldw	r2,-12(fp)
   1ddcc:	10800284 	addi	r2,r2,10
   1ddd0:	100b883a 	mov	r5,r2
   1ddd4:	e13ffe17 	ldw	r4,-8(fp)
   1ddd8:	001cf600 	call	1cf60 <OS_StrCopy>
   1dddc:	e0bffb05 	stb	r2,-20(fp)
   1dde0:	e0bff817 	ldw	r2,-32(fp)
   1dde4:	e0bffa15 	stw	r2,-24(fp)
   1dde8:	e0bffa17 	ldw	r2,-24(fp)
   1ddec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1ddf0:	e0bfff17 	ldw	r2,-4(fp)
   1ddf4:	10000005 	stb	zero,0(r2)
    return (len);
   1ddf8:	e0bffb03 	ldbu	r2,-20(fp)
}
   1ddfc:	e037883a 	mov	sp,fp
   1de00:	dfc00117 	ldw	ra,4(sp)
   1de04:	df000017 	ldw	fp,0(sp)
   1de08:	dec00204 	addi	sp,sp,8
   1de0c:	f800283a 	ret

0001de10 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   1de10:	defff504 	addi	sp,sp,-44
   1de14:	dfc00a15 	stw	ra,40(sp)
   1de18:	df000915 	stw	fp,36(sp)
   1de1c:	df000904 	addi	fp,sp,36
   1de20:	e13ffd15 	stw	r4,-12(fp)
   1de24:	e17ffe15 	stw	r5,-8(fp)
   1de28:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1de2c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1de30:	e0bfff17 	ldw	r2,-4(fp)
   1de34:	10004326 	beq	r2,zero,1df44 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   1de38:	e0bffd17 	ldw	r2,-12(fp)
   1de3c:	1000041e 	bne	r2,zero,1de50 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1de40:	e0bfff17 	ldw	r2,-4(fp)
   1de44:	00c01b84 	movi	r3,110
   1de48:	10c00005 	stb	r3,0(r2)
        return;
   1de4c:	00003e06 	br	1df48 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1de50:	e0bffe17 	ldw	r2,-8(fp)
   1de54:	1000041e 	bne	r2,zero,1de68 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   1de58:	e0bfff17 	ldw	r2,-4(fp)
   1de5c:	00c00304 	movi	r3,12
   1de60:	10c00005 	stb	r3,0(r2)
        return;
   1de64:	00003806 	br	1df48 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1de68:	d0a85b03 	ldbu	r2,-24212(gp)
   1de6c:	10803fcc 	andi	r2,r2,255
   1de70:	10000426 	beq	r2,zero,1de84 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   1de74:	e0bfff17 	ldw	r2,-4(fp)
   1de78:	00c00484 	movi	r3,18
   1de7c:	10c00005 	stb	r3,0(r2)
        return;
   1de80:	00003106 	br	1df48 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1de84:	0005303a 	rdctl	r2,status
   1de88:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1de8c:	e0fffc17 	ldw	r3,-16(fp)
   1de90:	00bfff84 	movi	r2,-2
   1de94:	1884703a 	and	r2,r3,r2
   1de98:	1001703a 	wrctl	status,r2
  
  return context;
   1de9c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1dea0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1dea4:	e0bffd17 	ldw	r2,-12(fp)
   1dea8:	10800003 	ldbu	r2,0(r2)
   1deac:	10803fcc 	andi	r2,r2,255
   1deb0:	10800160 	cmpeqi	r2,r2,5
   1deb4:	1000081e 	bne	r2,zero,1ded8 <OSFlagNameSet+0xc8>
   1deb8:	e0bff717 	ldw	r2,-36(fp)
   1debc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1dec0:	e0bff817 	ldw	r2,-32(fp)
   1dec4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   1dec8:	e0bfff17 	ldw	r2,-4(fp)
   1decc:	00c00044 	movi	r3,1
   1ded0:	10c00005 	stb	r3,0(r2)
        return;
   1ded4:	00001c06 	br	1df48 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   1ded8:	e13ffe17 	ldw	r4,-8(fp)
   1dedc:	001cfd40 	call	1cfd4 <OS_StrLen>
   1dee0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   1dee4:	e0bffa03 	ldbu	r2,-24(fp)
   1dee8:	10800830 	cmpltui	r2,r2,32
   1deec:	1000081e 	bne	r2,zero,1df10 <OSFlagNameSet+0x100>
   1def0:	e0bff717 	ldw	r2,-36(fp)
   1def4:	e0bff915 	stw	r2,-28(fp)
   1def8:	e0bff917 	ldw	r2,-28(fp)
   1defc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   1df00:	e0bfff17 	ldw	r2,-4(fp)
   1df04:	00c01cc4 	movi	r3,115
   1df08:	10c00005 	stb	r3,0(r2)
        return;
   1df0c:	00000e06 	br	1df48 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   1df10:	e0bffd17 	ldw	r2,-12(fp)
   1df14:	10800284 	addi	r2,r2,10
   1df18:	e17ffe17 	ldw	r5,-8(fp)
   1df1c:	1009883a 	mov	r4,r2
   1df20:	001cf600 	call	1cf60 <OS_StrCopy>
   1df24:	e0bff717 	ldw	r2,-36(fp)
   1df28:	e0bffb15 	stw	r2,-20(fp)
   1df2c:	e0bffb17 	ldw	r2,-20(fp)
   1df30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1df34:	e0bfff17 	ldw	r2,-4(fp)
   1df38:	10000005 	stb	zero,0(r2)
    return;
   1df3c:	0001883a 	nop
   1df40:	00000106 	br	1df48 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   1df44:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   1df48:	e037883a 	mov	sp,fp
   1df4c:	dfc00117 	ldw	ra,4(sp)
   1df50:	df000017 	ldw	fp,0(sp)
   1df54:	dec00204 	addi	sp,sp,8
   1df58:	f800283a 	ret

0001df5c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   1df5c:	deffe104 	addi	sp,sp,-124
   1df60:	dfc01e15 	stw	ra,120(sp)
   1df64:	df001d15 	stw	fp,116(sp)
   1df68:	df001d04 	addi	fp,sp,116
   1df6c:	e13ffc15 	stw	r4,-16(fp)
   1df70:	2809883a 	mov	r4,r5
   1df74:	3007883a 	mov	r3,r6
   1df78:	3805883a 	mov	r2,r7
   1df7c:	e13ffd0d 	sth	r4,-12(fp)
   1df80:	e0fffe05 	stb	r3,-8(fp)
   1df84:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1df88:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1df8c:	e0800217 	ldw	r2,8(fp)
   1df90:	1000021e 	bne	r2,zero,1df9c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   1df94:	0005883a 	mov	r2,zero
   1df98:	00015906 	br	1e500 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1df9c:	e0bffc17 	ldw	r2,-16(fp)
   1dfa0:	1000051e 	bne	r2,zero,1dfb8 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1dfa4:	e0800217 	ldw	r2,8(fp)
   1dfa8:	00c01b84 	movi	r3,110
   1dfac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1dfb0:	0005883a 	mov	r2,zero
   1dfb4:	00015206 	br	1e500 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1dfb8:	d0a85b03 	ldbu	r2,-24212(gp)
   1dfbc:	10803fcc 	andi	r2,r2,255
   1dfc0:	10000526 	beq	r2,zero,1dfd8 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   1dfc4:	e0800217 	ldw	r2,8(fp)
   1dfc8:	00c00084 	movi	r3,2
   1dfcc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1dfd0:	0005883a 	mov	r2,zero
   1dfd4:	00014a06 	br	1e500 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   1dfd8:	d0a84d03 	ldbu	r2,-24268(gp)
   1dfdc:	10803fcc 	andi	r2,r2,255
   1dfe0:	10000526 	beq	r2,zero,1dff8 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   1dfe4:	e0800217 	ldw	r2,8(fp)
   1dfe8:	00c00344 	movi	r3,13
   1dfec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1dff0:	0005883a 	mov	r2,zero
   1dff4:	00014206 	br	1e500 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   1dff8:	e0bffc17 	ldw	r2,-16(fp)
   1dffc:	10800003 	ldbu	r2,0(r2)
   1e000:	10803fcc 	andi	r2,r2,255
   1e004:	10800160 	cmpeqi	r2,r2,5
   1e008:	1000051e 	bne	r2,zero,1e020 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   1e00c:	e0800217 	ldw	r2,8(fp)
   1e010:	00c00044 	movi	r3,1
   1e014:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1e018:	0005883a 	mov	r2,zero
   1e01c:	00013806 	br	1e500 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   1e020:	e0fffe03 	ldbu	r3,-8(fp)
   1e024:	00bfe004 	movi	r2,-128
   1e028:	1884703a 	and	r2,r3,r2
   1e02c:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   1e030:	e0bfe603 	ldbu	r2,-104(fp)
   1e034:	10000626 	beq	r2,zero,1e050 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   1e038:	e0bffe03 	ldbu	r2,-8(fp)
   1e03c:	10801fcc 	andi	r2,r2,127
   1e040:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   1e044:	00800044 	movi	r2,1
   1e048:	e0bfe405 	stb	r2,-112(fp)
   1e04c:	00000106 	br	1e054 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   1e050:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e054:	0005303a 	rdctl	r2,status
   1e058:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e05c:	e0fff617 	ldw	r3,-40(fp)
   1e060:	00bfff84 	movi	r2,-2
   1e064:	1884703a 	and	r2,r3,r2
   1e068:	1001703a 	wrctl	status,r2
  
  return context;
   1e06c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   1e070:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   1e074:	e0bffe03 	ldbu	r2,-8(fp)
   1e078:	10c00060 	cmpeqi	r3,r2,1
   1e07c:	1800921e 	bne	r3,zero,1e2c8 <OSFlagPend+0x36c>
   1e080:	10c00088 	cmpgei	r3,r2,2
   1e084:	1800021e 	bne	r3,zero,1e090 <OSFlagPend+0x134>
   1e088:	10006126 	beq	r2,zero,1e210 <OSFlagPend+0x2b4>
   1e08c:	0000bb06 	br	1e37c <OSFlagPend+0x420>
   1e090:	10c000a0 	cmpeqi	r3,r2,2
   1e094:	1800031e 	bne	r3,zero,1e0a4 <OSFlagPend+0x148>
   1e098:	108000e0 	cmpeqi	r2,r2,3
   1e09c:	10002f1e 	bne	r2,zero,1e15c <OSFlagPend+0x200>
   1e0a0:	0000b606 	br	1e37c <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   1e0a4:	e0bffc17 	ldw	r2,-16(fp)
   1e0a8:	10c0020b 	ldhu	r3,8(r2)
   1e0ac:	e0bffd0b 	ldhu	r2,-12(fp)
   1e0b0:	1884703a 	and	r2,r3,r2
   1e0b4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1e0b8:	e0ffe80b 	ldhu	r3,-96(fp)
   1e0bc:	e0bffd0b 	ldhu	r2,-12(fp)
   1e0c0:	1880171e 	bne	r3,r2,1e120 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1e0c4:	e0bfe403 	ldbu	r2,-112(fp)
   1e0c8:	10800058 	cmpnei	r2,r2,1
   1e0cc:	1000091e 	bne	r2,zero,1e0f4 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   1e0d0:	e0bffc17 	ldw	r2,-16(fp)
   1e0d4:	1080020b 	ldhu	r2,8(r2)
   1e0d8:	1007883a 	mov	r3,r2
   1e0dc:	e0bfe80b 	ldhu	r2,-96(fp)
   1e0e0:	0084303a 	nor	r2,zero,r2
   1e0e4:	1884703a 	and	r2,r3,r2
   1e0e8:	1007883a 	mov	r3,r2
   1e0ec:	e0bffc17 	ldw	r2,-16(fp)
   1e0f0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1e0f4:	d0a85c17 	ldw	r2,-24208(gp)
   1e0f8:	e0ffe80b 	ldhu	r3,-96(fp)
   1e0fc:	10c00b0d 	sth	r3,44(r2)
   1e100:	e0bfe517 	ldw	r2,-108(fp)
   1e104:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e108:	e0bfe717 	ldw	r2,-100(fp)
   1e10c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1e110:	e0800217 	ldw	r2,8(fp)
   1e114:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1e118:	e0bfe80b 	ldhu	r2,-96(fp)
   1e11c:	0000f806 	br	1e500 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1e120:	e13ffd0b 	ldhu	r4,-12(fp)
   1e124:	e17ffe03 	ldbu	r5,-8(fp)
   1e128:	e0bfff0b 	ldhu	r2,-4(fp)
   1e12c:	e0fff704 	addi	r3,fp,-36
   1e130:	d8800015 	stw	r2,0(sp)
   1e134:	280f883a 	mov	r7,r5
   1e138:	200d883a 	mov	r6,r4
   1e13c:	180b883a 	mov	r5,r3
   1e140:	e13ffc17 	ldw	r4,-16(fp)
   1e144:	001e9cc0 	call	1e9cc <OS_FlagBlock>
   1e148:	e0bfe517 	ldw	r2,-108(fp)
   1e14c:	e0bfe915 	stw	r2,-92(fp)
   1e150:	e0bfe917 	ldw	r2,-92(fp)
   1e154:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1e158:	00009206 	br	1e3a4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   1e15c:	e0bffc17 	ldw	r2,-16(fp)
   1e160:	10c0020b 	ldhu	r3,8(r2)
   1e164:	e0bffd0b 	ldhu	r2,-12(fp)
   1e168:	1884703a 	and	r2,r3,r2
   1e16c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   1e170:	e0bfe80b 	ldhu	r2,-96(fp)
   1e174:	10001726 	beq	r2,zero,1e1d4 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1e178:	e0bfe403 	ldbu	r2,-112(fp)
   1e17c:	10800058 	cmpnei	r2,r2,1
   1e180:	1000091e 	bne	r2,zero,1e1a8 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   1e184:	e0bffc17 	ldw	r2,-16(fp)
   1e188:	1080020b 	ldhu	r2,8(r2)
   1e18c:	1007883a 	mov	r3,r2
   1e190:	e0bfe80b 	ldhu	r2,-96(fp)
   1e194:	0084303a 	nor	r2,zero,r2
   1e198:	1884703a 	and	r2,r3,r2
   1e19c:	1007883a 	mov	r3,r2
   1e1a0:	e0bffc17 	ldw	r2,-16(fp)
   1e1a4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1e1a8:	d0a85c17 	ldw	r2,-24208(gp)
   1e1ac:	e0ffe80b 	ldhu	r3,-96(fp)
   1e1b0:	10c00b0d 	sth	r3,44(r2)
   1e1b4:	e0bfe517 	ldw	r2,-108(fp)
   1e1b8:	e0bfea15 	stw	r2,-88(fp)
   1e1bc:	e0bfea17 	ldw	r2,-88(fp)
   1e1c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1e1c4:	e0800217 	ldw	r2,8(fp)
   1e1c8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1e1cc:	e0bfe80b 	ldhu	r2,-96(fp)
   1e1d0:	0000cb06 	br	1e500 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1e1d4:	e13ffd0b 	ldhu	r4,-12(fp)
   1e1d8:	e17ffe03 	ldbu	r5,-8(fp)
   1e1dc:	e0bfff0b 	ldhu	r2,-4(fp)
   1e1e0:	e0fff704 	addi	r3,fp,-36
   1e1e4:	d8800015 	stw	r2,0(sp)
   1e1e8:	280f883a 	mov	r7,r5
   1e1ec:	200d883a 	mov	r6,r4
   1e1f0:	180b883a 	mov	r5,r3
   1e1f4:	e13ffc17 	ldw	r4,-16(fp)
   1e1f8:	001e9cc0 	call	1e9cc <OS_FlagBlock>
   1e1fc:	e0bfe517 	ldw	r2,-108(fp)
   1e200:	e0bfeb15 	stw	r2,-84(fp)
   1e204:	e0bfeb17 	ldw	r2,-84(fp)
   1e208:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1e20c:	00006506 	br	1e3a4 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   1e210:	e0bffc17 	ldw	r2,-16(fp)
   1e214:	1080020b 	ldhu	r2,8(r2)
   1e218:	0084303a 	nor	r2,zero,r2
   1e21c:	1007883a 	mov	r3,r2
   1e220:	e0bffd0b 	ldhu	r2,-12(fp)
   1e224:	1884703a 	and	r2,r3,r2
   1e228:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1e22c:	e0ffe80b 	ldhu	r3,-96(fp)
   1e230:	e0bffd0b 	ldhu	r2,-12(fp)
   1e234:	1880151e 	bne	r3,r2,1e28c <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1e238:	e0bfe403 	ldbu	r2,-112(fp)
   1e23c:	10800058 	cmpnei	r2,r2,1
   1e240:	1000071e 	bne	r2,zero,1e260 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   1e244:	e0bffc17 	ldw	r2,-16(fp)
   1e248:	10c0020b 	ldhu	r3,8(r2)
   1e24c:	e0bfe80b 	ldhu	r2,-96(fp)
   1e250:	1884b03a 	or	r2,r3,r2
   1e254:	1007883a 	mov	r3,r2
   1e258:	e0bffc17 	ldw	r2,-16(fp)
   1e25c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1e260:	d0a85c17 	ldw	r2,-24208(gp)
   1e264:	e0ffe80b 	ldhu	r3,-96(fp)
   1e268:	10c00b0d 	sth	r3,44(r2)
   1e26c:	e0bfe517 	ldw	r2,-108(fp)
   1e270:	e0bfec15 	stw	r2,-80(fp)
   1e274:	e0bfec17 	ldw	r2,-80(fp)
   1e278:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1e27c:	e0800217 	ldw	r2,8(fp)
   1e280:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1e284:	e0bfe80b 	ldhu	r2,-96(fp)
   1e288:	00009d06 	br	1e500 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1e28c:	e13ffd0b 	ldhu	r4,-12(fp)
   1e290:	e17ffe03 	ldbu	r5,-8(fp)
   1e294:	e0bfff0b 	ldhu	r2,-4(fp)
   1e298:	e0fff704 	addi	r3,fp,-36
   1e29c:	d8800015 	stw	r2,0(sp)
   1e2a0:	280f883a 	mov	r7,r5
   1e2a4:	200d883a 	mov	r6,r4
   1e2a8:	180b883a 	mov	r5,r3
   1e2ac:	e13ffc17 	ldw	r4,-16(fp)
   1e2b0:	001e9cc0 	call	1e9cc <OS_FlagBlock>
   1e2b4:	e0bfe517 	ldw	r2,-108(fp)
   1e2b8:	e0bfed15 	stw	r2,-76(fp)
   1e2bc:	e0bfed17 	ldw	r2,-76(fp)
   1e2c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1e2c4:	00003706 	br	1e3a4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   1e2c8:	e0bffc17 	ldw	r2,-16(fp)
   1e2cc:	1080020b 	ldhu	r2,8(r2)
   1e2d0:	0084303a 	nor	r2,zero,r2
   1e2d4:	1007883a 	mov	r3,r2
   1e2d8:	e0bffd0b 	ldhu	r2,-12(fp)
   1e2dc:	1884703a 	and	r2,r3,r2
   1e2e0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   1e2e4:	e0bfe80b 	ldhu	r2,-96(fp)
   1e2e8:	10001526 	beq	r2,zero,1e340 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1e2ec:	e0bfe403 	ldbu	r2,-112(fp)
   1e2f0:	10800058 	cmpnei	r2,r2,1
   1e2f4:	1000071e 	bne	r2,zero,1e314 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   1e2f8:	e0bffc17 	ldw	r2,-16(fp)
   1e2fc:	10c0020b 	ldhu	r3,8(r2)
   1e300:	e0bfe80b 	ldhu	r2,-96(fp)
   1e304:	1884b03a 	or	r2,r3,r2
   1e308:	1007883a 	mov	r3,r2
   1e30c:	e0bffc17 	ldw	r2,-16(fp)
   1e310:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1e314:	d0a85c17 	ldw	r2,-24208(gp)
   1e318:	e0ffe80b 	ldhu	r3,-96(fp)
   1e31c:	10c00b0d 	sth	r3,44(r2)
   1e320:	e0bfe517 	ldw	r2,-108(fp)
   1e324:	e0bfee15 	stw	r2,-72(fp)
   1e328:	e0bfee17 	ldw	r2,-72(fp)
   1e32c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1e330:	e0800217 	ldw	r2,8(fp)
   1e334:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1e338:	e0bfe80b 	ldhu	r2,-96(fp)
   1e33c:	00007006 	br	1e500 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1e340:	e13ffd0b 	ldhu	r4,-12(fp)
   1e344:	e17ffe03 	ldbu	r5,-8(fp)
   1e348:	e0bfff0b 	ldhu	r2,-4(fp)
   1e34c:	e0fff704 	addi	r3,fp,-36
   1e350:	d8800015 	stw	r2,0(sp)
   1e354:	280f883a 	mov	r7,r5
   1e358:	200d883a 	mov	r6,r4
   1e35c:	180b883a 	mov	r5,r3
   1e360:	e13ffc17 	ldw	r4,-16(fp)
   1e364:	001e9cc0 	call	1e9cc <OS_FlagBlock>
   1e368:	e0bfe517 	ldw	r2,-108(fp)
   1e36c:	e0bfef15 	stw	r2,-68(fp)
   1e370:	e0bfef17 	ldw	r2,-68(fp)
   1e374:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1e378:	00000a06 	br	1e3a4 <OSFlagPend+0x448>
   1e37c:	e0bfe517 	ldw	r2,-108(fp)
   1e380:	e0bff015 	stw	r2,-64(fp)
   1e384:	e0bff017 	ldw	r2,-64(fp)
   1e388:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   1e38c:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   1e390:	e0800217 	ldw	r2,8(fp)
   1e394:	00c01bc4 	movi	r3,111
   1e398:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   1e39c:	e0bfe80b 	ldhu	r2,-96(fp)
   1e3a0:	00005706 	br	1e500 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   1e3a4:	001ce1c0 	call	1ce1c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e3a8:	0005303a 	rdctl	r2,status
   1e3ac:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e3b0:	e0fff117 	ldw	r3,-60(fp)
   1e3b4:	00bfff84 	movi	r2,-2
   1e3b8:	1884703a 	and	r2,r3,r2
   1e3bc:	1001703a 	wrctl	status,r2
  
  return context;
   1e3c0:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   1e3c4:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   1e3c8:	d0a85c17 	ldw	r2,-24208(gp)
   1e3cc:	10800c43 	ldbu	r2,49(r2)
   1e3d0:	10803fcc 	andi	r2,r2,255
   1e3d4:	10001c26 	beq	r2,zero,1e448 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   1e3d8:	d0a85c17 	ldw	r2,-24208(gp)
   1e3dc:	10800c43 	ldbu	r2,49(r2)
   1e3e0:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1e3e4:	d0a85c17 	ldw	r2,-24208(gp)
   1e3e8:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   1e3ec:	e0bff704 	addi	r2,fp,-36
   1e3f0:	1009883a 	mov	r4,r2
   1e3f4:	001ed000 	call	1ed00 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   1e3f8:	d0a85c17 	ldw	r2,-24208(gp)
   1e3fc:	10000c05 	stb	zero,48(r2)
   1e400:	e0bfe517 	ldw	r2,-108(fp)
   1e404:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e408:	e0bff217 	ldw	r2,-56(fp)
   1e40c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   1e410:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   1e414:	e0bff303 	ldbu	r2,-52(fp)
   1e418:	108000a0 	cmpeqi	r2,r2,2
   1e41c:	10000426 	beq	r2,zero,1e430 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   1e420:	e0800217 	ldw	r2,8(fp)
   1e424:	00c00384 	movi	r3,14
   1e428:	10c00005 	stb	r3,0(r2)
                 break;
   1e42c:	00000406 	br	1e440 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   1e430:	e0800217 	ldw	r2,8(fp)
   1e434:	00c00284 	movi	r3,10
   1e438:	10c00005 	stb	r3,0(r2)
                 break;
   1e43c:	0001883a 	nop
        }
        return (flags_rdy);
   1e440:	e0bfe80b 	ldhu	r2,-96(fp)
   1e444:	00002e06 	br	1e500 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   1e448:	d0a85c17 	ldw	r2,-24208(gp)
   1e44c:	10800b0b 	ldhu	r2,44(r2)
   1e450:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   1e454:	e0bfe403 	ldbu	r2,-112(fp)
   1e458:	10800058 	cmpnei	r2,r2,1
   1e45c:	1000211e 	bne	r2,zero,1e4e4 <OSFlagPend+0x588>
        switch (wait_type) {
   1e460:	e0bffe03 	ldbu	r2,-8(fp)
   1e464:	10001616 	blt	r2,zero,1e4c0 <OSFlagPend+0x564>
   1e468:	10c00090 	cmplti	r3,r2,2
   1e46c:	18000c1e 	bne	r3,zero,1e4a0 <OSFlagPend+0x544>
   1e470:	10800108 	cmpgei	r2,r2,4
   1e474:	1000121e 	bne	r2,zero,1e4c0 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   1e478:	e0bffc17 	ldw	r2,-16(fp)
   1e47c:	1080020b 	ldhu	r2,8(r2)
   1e480:	1007883a 	mov	r3,r2
   1e484:	e0bfe80b 	ldhu	r2,-96(fp)
   1e488:	0084303a 	nor	r2,zero,r2
   1e48c:	1884703a 	and	r2,r3,r2
   1e490:	1007883a 	mov	r3,r2
   1e494:	e0bffc17 	ldw	r2,-16(fp)
   1e498:	10c0020d 	sth	r3,8(r2)
                 break;
   1e49c:	00001106 	br	1e4e4 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   1e4a0:	e0bffc17 	ldw	r2,-16(fp)
   1e4a4:	10c0020b 	ldhu	r3,8(r2)
   1e4a8:	e0bfe80b 	ldhu	r2,-96(fp)
   1e4ac:	1884b03a 	or	r2,r3,r2
   1e4b0:	1007883a 	mov	r3,r2
   1e4b4:	e0bffc17 	ldw	r2,-16(fp)
   1e4b8:	10c0020d 	sth	r3,8(r2)
                 break;
   1e4bc:	00000906 	br	1e4e4 <OSFlagPend+0x588>
   1e4c0:	e0bfe517 	ldw	r2,-108(fp)
   1e4c4:	e0bff415 	stw	r2,-48(fp)
   1e4c8:	e0bff417 	ldw	r2,-48(fp)
   1e4cc:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   1e4d0:	e0800217 	ldw	r2,8(fp)
   1e4d4:	00c01bc4 	movi	r3,111
   1e4d8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   1e4dc:	0005883a 	mov	r2,zero
   1e4e0:	00000706 	br	1e500 <OSFlagPend+0x5a4>
   1e4e4:	e0bfe517 	ldw	r2,-108(fp)
   1e4e8:	e0bff515 	stw	r2,-44(fp)
   1e4ec:	e0bff517 	ldw	r2,-44(fp)
   1e4f0:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   1e4f4:	e0800217 	ldw	r2,8(fp)
   1e4f8:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   1e4fc:	e0bfe80b 	ldhu	r2,-96(fp)
}
   1e500:	e037883a 	mov	sp,fp
   1e504:	dfc00117 	ldw	ra,4(sp)
   1e508:	df000017 	ldw	fp,0(sp)
   1e50c:	dec00204 	addi	sp,sp,8
   1e510:	f800283a 	ret

0001e514 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   1e514:	defffb04 	addi	sp,sp,-20
   1e518:	df000415 	stw	fp,16(sp)
   1e51c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1e520:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e524:	0005303a 	rdctl	r2,status
   1e528:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e52c:	e0fffe17 	ldw	r3,-8(fp)
   1e530:	00bfff84 	movi	r2,-2
   1e534:	1884703a 	and	r2,r3,r2
   1e538:	1001703a 	wrctl	status,r2
  
  return context;
   1e53c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1e540:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   1e544:	d0a85c17 	ldw	r2,-24208(gp)
   1e548:	10800b0b 	ldhu	r2,44(r2)
   1e54c:	e0bffd0d 	sth	r2,-12(fp)
   1e550:	e0bffc17 	ldw	r2,-16(fp)
   1e554:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e558:	e0bfff17 	ldw	r2,-4(fp)
   1e55c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   1e560:	e0bffd0b 	ldhu	r2,-12(fp)
}
   1e564:	e037883a 	mov	sp,fp
   1e568:	df000017 	ldw	fp,0(sp)
   1e56c:	dec00104 	addi	sp,sp,4
   1e570:	f800283a 	ret

0001e574 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   1e574:	deffef04 	addi	sp,sp,-68
   1e578:	dfc01015 	stw	ra,64(sp)
   1e57c:	df000f15 	stw	fp,60(sp)
   1e580:	df000f04 	addi	fp,sp,60
   1e584:	e13ffc15 	stw	r4,-16(fp)
   1e588:	2807883a 	mov	r3,r5
   1e58c:	3005883a 	mov	r2,r6
   1e590:	e1ffff15 	stw	r7,-4(fp)
   1e594:	e0fffd0d 	sth	r3,-12(fp)
   1e598:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   1e59c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1e5a0:	e0bfff17 	ldw	r2,-4(fp)
   1e5a4:	1000021e 	bne	r2,zero,1e5b0 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   1e5a8:	0005883a 	mov	r2,zero
   1e5ac:	0000d106 	br	1e8f4 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   1e5b0:	e0bffc17 	ldw	r2,-16(fp)
   1e5b4:	1000051e 	bne	r2,zero,1e5cc <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1e5b8:	e0bfff17 	ldw	r2,-4(fp)
   1e5bc:	00c01b84 	movi	r3,110
   1e5c0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1e5c4:	0005883a 	mov	r2,zero
   1e5c8:	0000ca06 	br	1e8f4 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   1e5cc:	e0bffc17 	ldw	r2,-16(fp)
   1e5d0:	10800003 	ldbu	r2,0(r2)
   1e5d4:	10803fcc 	andi	r2,r2,255
   1e5d8:	10800160 	cmpeqi	r2,r2,5
   1e5dc:	1000051e 	bne	r2,zero,1e5f4 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   1e5e0:	e0bfff17 	ldw	r2,-4(fp)
   1e5e4:	00c00044 	movi	r3,1
   1e5e8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1e5ec:	0005883a 	mov	r2,zero
   1e5f0:	0000c006 	br	1e8f4 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e5f4:	0005303a 	rdctl	r2,status
   1e5f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e5fc:	e0fffb17 	ldw	r3,-20(fp)
   1e600:	00bfff84 	movi	r2,-2
   1e604:	1884703a 	and	r2,r3,r2
   1e608:	1001703a 	wrctl	status,r2
  
  return context;
   1e60c:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   1e610:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   1e614:	e0bffe03 	ldbu	r2,-8(fp)
   1e618:	10000326 	beq	r2,zero,1e628 <OSFlagPost+0xb4>
   1e61c:	10800060 	cmpeqi	r2,r2,1
   1e620:	10000b1e 	bne	r2,zero,1e650 <OSFlagPost+0xdc>
   1e624:	00001206 	br	1e670 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   1e628:	e0bffc17 	ldw	r2,-16(fp)
   1e62c:	1080020b 	ldhu	r2,8(r2)
   1e630:	1007883a 	mov	r3,r2
   1e634:	e0bffd0b 	ldhu	r2,-12(fp)
   1e638:	0084303a 	nor	r2,zero,r2
   1e63c:	1884703a 	and	r2,r3,r2
   1e640:	1007883a 	mov	r3,r2
   1e644:	e0bffc17 	ldw	r2,-16(fp)
   1e648:	10c0020d 	sth	r3,8(r2)
             break;
   1e64c:	00001106 	br	1e694 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   1e650:	e0bffc17 	ldw	r2,-16(fp)
   1e654:	10c0020b 	ldhu	r3,8(r2)
   1e658:	e0bffd0b 	ldhu	r2,-12(fp)
   1e65c:	1884b03a 	or	r2,r3,r2
   1e660:	1007883a 	mov	r3,r2
   1e664:	e0bffc17 	ldw	r2,-16(fp)
   1e668:	10c0020d 	sth	r3,8(r2)
             break;
   1e66c:	00000906 	br	1e694 <OSFlagPost+0x120>
   1e670:	e0bff317 	ldw	r2,-52(fp)
   1e674:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e678:	e0bff417 	ldw	r2,-48(fp)
   1e67c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   1e680:	e0bfff17 	ldw	r2,-4(fp)
   1e684:	00c01c44 	movi	r3,113
   1e688:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   1e68c:	0005883a 	mov	r2,zero
   1e690:	00009806 	br	1e8f4 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   1e694:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1e698:	e0bffc17 	ldw	r2,-16(fp)
   1e69c:	10800117 	ldw	r2,4(r2)
   1e6a0:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   1e6a4:	00007706 	br	1e884 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   1e6a8:	e0bff117 	ldw	r2,-60(fp)
   1e6ac:	10800483 	ldbu	r2,18(r2)
   1e6b0:	10803fcc 	andi	r2,r2,255
   1e6b4:	10c00060 	cmpeqi	r3,r2,1
   1e6b8:	18004a1e 	bne	r3,zero,1e7e4 <OSFlagPost+0x270>
   1e6bc:	10c00088 	cmpgei	r3,r2,2
   1e6c0:	1800021e 	bne	r3,zero,1e6cc <OSFlagPost+0x158>
   1e6c4:	10002f26 	beq	r2,zero,1e784 <OSFlagPost+0x210>
   1e6c8:	00005b06 	br	1e838 <OSFlagPost+0x2c4>
   1e6cc:	10c000a0 	cmpeqi	r3,r2,2
   1e6d0:	1800031e 	bne	r3,zero,1e6e0 <OSFlagPost+0x16c>
   1e6d4:	108000e0 	cmpeqi	r2,r2,3
   1e6d8:	1000171e 	bne	r2,zero,1e738 <OSFlagPost+0x1c4>
   1e6dc:	00005606 	br	1e838 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1e6e0:	e0bffc17 	ldw	r2,-16(fp)
   1e6e4:	10c0020b 	ldhu	r3,8(r2)
   1e6e8:	e0bff117 	ldw	r2,-60(fp)
   1e6ec:	1080040b 	ldhu	r2,16(r2)
   1e6f0:	1884703a 	and	r2,r3,r2
   1e6f4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   1e6f8:	e0bff117 	ldw	r2,-60(fp)
   1e6fc:	1080040b 	ldhu	r2,16(r2)
   1e700:	10ffffcc 	andi	r3,r2,65535
   1e704:	e0bff60b 	ldhu	r2,-40(fp)
   1e708:	1880541e 	bne	r3,r2,1e85c <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1e70c:	e0bff60b 	ldhu	r2,-40(fp)
   1e710:	100b883a 	mov	r5,r2
   1e714:	e13ff117 	ldw	r4,-60(fp)
   1e718:	001ec0c0 	call	1ec0c <OS_FlagTaskRdy>
   1e71c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1e720:	e0bff683 	ldbu	r2,-38(fp)
   1e724:	10800058 	cmpnei	r2,r2,1
   1e728:	10004c1e 	bne	r2,zero,1e85c <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1e72c:	00800044 	movi	r2,1
   1e730:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1e734:	00004906 	br	1e85c <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1e738:	e0bffc17 	ldw	r2,-16(fp)
   1e73c:	10c0020b 	ldhu	r3,8(r2)
   1e740:	e0bff117 	ldw	r2,-60(fp)
   1e744:	1080040b 	ldhu	r2,16(r2)
   1e748:	1884703a 	and	r2,r3,r2
   1e74c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   1e750:	e0bff60b 	ldhu	r2,-40(fp)
   1e754:	10004326 	beq	r2,zero,1e864 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1e758:	e0bff60b 	ldhu	r2,-40(fp)
   1e75c:	100b883a 	mov	r5,r2
   1e760:	e13ff117 	ldw	r4,-60(fp)
   1e764:	001ec0c0 	call	1ec0c <OS_FlagTaskRdy>
   1e768:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1e76c:	e0bff683 	ldbu	r2,-38(fp)
   1e770:	10800058 	cmpnei	r2,r2,1
   1e774:	10003b1e 	bne	r2,zero,1e864 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1e778:	00800044 	movi	r2,1
   1e77c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1e780:	00003806 	br	1e864 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1e784:	e0bffc17 	ldw	r2,-16(fp)
   1e788:	1080020b 	ldhu	r2,8(r2)
   1e78c:	0084303a 	nor	r2,zero,r2
   1e790:	1007883a 	mov	r3,r2
   1e794:	e0bff117 	ldw	r2,-60(fp)
   1e798:	1080040b 	ldhu	r2,16(r2)
   1e79c:	1884703a 	and	r2,r3,r2
   1e7a0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   1e7a4:	e0bff117 	ldw	r2,-60(fp)
   1e7a8:	1080040b 	ldhu	r2,16(r2)
   1e7ac:	10ffffcc 	andi	r3,r2,65535
   1e7b0:	e0bff60b 	ldhu	r2,-40(fp)
   1e7b4:	18802d1e 	bne	r3,r2,1e86c <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1e7b8:	e0bff60b 	ldhu	r2,-40(fp)
   1e7bc:	100b883a 	mov	r5,r2
   1e7c0:	e13ff117 	ldw	r4,-60(fp)
   1e7c4:	001ec0c0 	call	1ec0c <OS_FlagTaskRdy>
   1e7c8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1e7cc:	e0bff683 	ldbu	r2,-38(fp)
   1e7d0:	10800058 	cmpnei	r2,r2,1
   1e7d4:	1000251e 	bne	r2,zero,1e86c <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1e7d8:	00800044 	movi	r2,1
   1e7dc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1e7e0:	00002206 	br	1e86c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1e7e4:	e0bffc17 	ldw	r2,-16(fp)
   1e7e8:	1080020b 	ldhu	r2,8(r2)
   1e7ec:	0084303a 	nor	r2,zero,r2
   1e7f0:	1007883a 	mov	r3,r2
   1e7f4:	e0bff117 	ldw	r2,-60(fp)
   1e7f8:	1080040b 	ldhu	r2,16(r2)
   1e7fc:	1884703a 	and	r2,r3,r2
   1e800:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   1e804:	e0bff60b 	ldhu	r2,-40(fp)
   1e808:	10001a26 	beq	r2,zero,1e874 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1e80c:	e0bff60b 	ldhu	r2,-40(fp)
   1e810:	100b883a 	mov	r5,r2
   1e814:	e13ff117 	ldw	r4,-60(fp)
   1e818:	001ec0c0 	call	1ec0c <OS_FlagTaskRdy>
   1e81c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1e820:	e0bff683 	ldbu	r2,-38(fp)
   1e824:	10800058 	cmpnei	r2,r2,1
   1e828:	1000121e 	bne	r2,zero,1e874 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1e82c:	00800044 	movi	r2,1
   1e830:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1e834:	00000f06 	br	1e874 <OSFlagPost+0x300>
   1e838:	e0bff317 	ldw	r2,-52(fp)
   1e83c:	e0bff515 	stw	r2,-44(fp)
   1e840:	e0bff517 	ldw	r2,-44(fp)
   1e844:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   1e848:	e0bfff17 	ldw	r2,-4(fp)
   1e84c:	00c01bc4 	movi	r3,111
   1e850:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   1e854:	0005883a 	mov	r2,zero
   1e858:	00002606 	br	1e8f4 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1e85c:	0001883a 	nop
   1e860:	00000506 	br	1e878 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1e864:	0001883a 	nop
   1e868:	00000306 	br	1e878 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1e86c:	0001883a 	nop
   1e870:	00000106 	br	1e878 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1e874:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   1e878:	e0bff117 	ldw	r2,-60(fp)
   1e87c:	10800017 	ldw	r2,0(r2)
   1e880:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   1e884:	e0bff117 	ldw	r2,-60(fp)
   1e888:	103f871e 	bne	r2,zero,1e6a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701e6a8>
   1e88c:	e0bff317 	ldw	r2,-52(fp)
   1e890:	e0bff715 	stw	r2,-36(fp)
   1e894:	e0bff717 	ldw	r2,-36(fp)
   1e898:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   1e89c:	e0bff203 	ldbu	r2,-56(fp)
   1e8a0:	10800058 	cmpnei	r2,r2,1
   1e8a4:	1000011e 	bne	r2,zero,1e8ac <OSFlagPost+0x338>
        OS_Sched();
   1e8a8:	001ce1c0 	call	1ce1c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e8ac:	0005303a 	rdctl	r2,status
   1e8b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e8b4:	e0fffa17 	ldw	r3,-24(fp)
   1e8b8:	00bfff84 	movi	r2,-2
   1e8bc:	1884703a 	and	r2,r3,r2
   1e8c0:	1001703a 	wrctl	status,r2
  
  return context;
   1e8c4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1e8c8:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   1e8cc:	e0bffc17 	ldw	r2,-16(fp)
   1e8d0:	1080020b 	ldhu	r2,8(r2)
   1e8d4:	e0bff90d 	sth	r2,-28(fp)
   1e8d8:	e0bff317 	ldw	r2,-52(fp)
   1e8dc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e8e0:	e0bff817 	ldw	r2,-32(fp)
   1e8e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   1e8e8:	e0bfff17 	ldw	r2,-4(fp)
   1e8ec:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   1e8f0:	e0bff90b 	ldhu	r2,-28(fp)
}
   1e8f4:	e037883a 	mov	sp,fp
   1e8f8:	dfc00117 	ldw	ra,4(sp)
   1e8fc:	df000017 	ldw	fp,0(sp)
   1e900:	dec00204 	addi	sp,sp,8
   1e904:	f800283a 	ret

0001e908 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   1e908:	defff904 	addi	sp,sp,-28
   1e90c:	df000615 	stw	fp,24(sp)
   1e910:	df000604 	addi	fp,sp,24
   1e914:	e13ffe15 	stw	r4,-8(fp)
   1e918:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   1e91c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   1e920:	e0bfff17 	ldw	r2,-4(fp)
   1e924:	1000021e 	bne	r2,zero,1e930 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   1e928:	0005883a 	mov	r2,zero
   1e92c:	00002306 	br	1e9bc <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   1e930:	e0bffe17 	ldw	r2,-8(fp)
   1e934:	1000051e 	bne	r2,zero,1e94c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1e938:	e0bfff17 	ldw	r2,-4(fp)
   1e93c:	00c01b84 	movi	r3,110
   1e940:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1e944:	0005883a 	mov	r2,zero
   1e948:	00001c06 	br	1e9bc <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   1e94c:	e0bffe17 	ldw	r2,-8(fp)
   1e950:	10800003 	ldbu	r2,0(r2)
   1e954:	10803fcc 	andi	r2,r2,255
   1e958:	10800160 	cmpeqi	r2,r2,5
   1e95c:	1000051e 	bne	r2,zero,1e974 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1e960:	e0bfff17 	ldw	r2,-4(fp)
   1e964:	00c00044 	movi	r3,1
   1e968:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1e96c:	0005883a 	mov	r2,zero
   1e970:	00001206 	br	1e9bc <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e974:	0005303a 	rdctl	r2,status
   1e978:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e97c:	e0fffc17 	ldw	r3,-16(fp)
   1e980:	00bfff84 	movi	r2,-2
   1e984:	1884703a 	and	r2,r3,r2
   1e988:	1001703a 	wrctl	status,r2
  
  return context;
   1e98c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1e990:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   1e994:	e0bffe17 	ldw	r2,-8(fp)
   1e998:	1080020b 	ldhu	r2,8(r2)
   1e99c:	e0bffb0d 	sth	r2,-20(fp)
   1e9a0:	e0bffa17 	ldw	r2,-24(fp)
   1e9a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e9a8:	e0bffd17 	ldw	r2,-12(fp)
   1e9ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1e9b0:	e0bfff17 	ldw	r2,-4(fp)
   1e9b4:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   1e9b8:	e0bffb0b 	ldhu	r2,-20(fp)
}
   1e9bc:	e037883a 	mov	sp,fp
   1e9c0:	df000017 	ldw	fp,0(sp)
   1e9c4:	dec00104 	addi	sp,sp,4
   1e9c8:	f800283a 	ret

0001e9cc <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   1e9cc:	defff804 	addi	sp,sp,-32
   1e9d0:	df000715 	stw	fp,28(sp)
   1e9d4:	df000704 	addi	fp,sp,28
   1e9d8:	e13ffb15 	stw	r4,-20(fp)
   1e9dc:	e17ffc15 	stw	r5,-16(fp)
   1e9e0:	3009883a 	mov	r4,r6
   1e9e4:	3807883a 	mov	r3,r7
   1e9e8:	e0800117 	ldw	r2,4(fp)
   1e9ec:	e13ffd0d 	sth	r4,-12(fp)
   1e9f0:	e0fffe05 	stb	r3,-8(fp)
   1e9f4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   1e9f8:	d0a85c17 	ldw	r2,-24208(gp)
   1e9fc:	d0e85c17 	ldw	r3,-24208(gp)
   1ea00:	18c00c03 	ldbu	r3,48(r3)
   1ea04:	18c00814 	ori	r3,r3,32
   1ea08:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   1ea0c:	d0a85c17 	ldw	r2,-24208(gp)
   1ea10:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   1ea14:	d0a85c17 	ldw	r2,-24208(gp)
   1ea18:	e0ffff0b 	ldhu	r3,-4(fp)
   1ea1c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   1ea20:	d0a85c17 	ldw	r2,-24208(gp)
   1ea24:	e0fffc17 	ldw	r3,-16(fp)
   1ea28:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   1ea2c:	e0bffc17 	ldw	r2,-16(fp)
   1ea30:	e0fffd0b 	ldhu	r3,-12(fp)
   1ea34:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   1ea38:	e0bffc17 	ldw	r2,-16(fp)
   1ea3c:	e0fffe03 	ldbu	r3,-8(fp)
   1ea40:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   1ea44:	d0e85c17 	ldw	r3,-24208(gp)
   1ea48:	e0bffc17 	ldw	r2,-16(fp)
   1ea4c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   1ea50:	e0bffb17 	ldw	r2,-20(fp)
   1ea54:	10c00117 	ldw	r3,4(r2)
   1ea58:	e0bffc17 	ldw	r2,-16(fp)
   1ea5c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   1ea60:	e0bffc17 	ldw	r2,-16(fp)
   1ea64:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   1ea68:	e0bffc17 	ldw	r2,-16(fp)
   1ea6c:	e0fffb17 	ldw	r3,-20(fp)
   1ea70:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1ea74:	e0bffb17 	ldw	r2,-20(fp)
   1ea78:	10800117 	ldw	r2,4(r2)
   1ea7c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   1ea80:	e0bff917 	ldw	r2,-28(fp)
   1ea84:	10000326 	beq	r2,zero,1ea94 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   1ea88:	e0bff917 	ldw	r2,-28(fp)
   1ea8c:	e0fffc17 	ldw	r3,-16(fp)
   1ea90:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   1ea94:	e0bffb17 	ldw	r2,-20(fp)
   1ea98:	e0fffc17 	ldw	r3,-16(fp)
   1ea9c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   1eaa0:	d0a85c17 	ldw	r2,-24208(gp)
   1eaa4:	10800d03 	ldbu	r2,52(r2)
   1eaa8:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1eaac:	e0fffa03 	ldbu	r3,-24(fp)
   1eab0:	e13ffa03 	ldbu	r4,-24(fp)
   1eab4:	d0a85944 	addi	r2,gp,-24219
   1eab8:	2085883a 	add	r2,r4,r2
   1eabc:	10800003 	ldbu	r2,0(r2)
   1eac0:	1009883a 	mov	r4,r2
   1eac4:	d0a85c17 	ldw	r2,-24208(gp)
   1eac8:	10800d43 	ldbu	r2,53(r2)
   1eacc:	0084303a 	nor	r2,zero,r2
   1ead0:	2084703a 	and	r2,r4,r2
   1ead4:	1009883a 	mov	r4,r2
   1ead8:	d0a85944 	addi	r2,gp,-24219
   1eadc:	1885883a 	add	r2,r3,r2
   1eae0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   1eae4:	e0fffa03 	ldbu	r3,-24(fp)
   1eae8:	d0a85944 	addi	r2,gp,-24219
   1eaec:	1885883a 	add	r2,r3,r2
   1eaf0:	10800003 	ldbu	r2,0(r2)
   1eaf4:	10803fcc 	andi	r2,r2,255
   1eaf8:	1000071e 	bne	r2,zero,1eb18 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1eafc:	d0a85c17 	ldw	r2,-24208(gp)
   1eb00:	10800d83 	ldbu	r2,54(r2)
   1eb04:	0084303a 	nor	r2,zero,r2
   1eb08:	1007883a 	mov	r3,r2
   1eb0c:	d0a85903 	ldbu	r2,-24220(gp)
   1eb10:	1884703a 	and	r2,r3,r2
   1eb14:	d0a85905 	stb	r2,-24220(gp)
    }
}
   1eb18:	0001883a 	nop
   1eb1c:	e037883a 	mov	sp,fp
   1eb20:	df000017 	ldw	fp,0(sp)
   1eb24:	dec00104 	addi	sp,sp,4
   1eb28:	f800283a 	ret

0001eb2c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   1eb2c:	defffb04 	addi	sp,sp,-20
   1eb30:	dfc00415 	stw	ra,16(sp)
   1eb34:	df000315 	stw	fp,12(sp)
   1eb38:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   1eb3c:	0140dc04 	movi	r5,880
   1eb40:	01000134 	movhi	r4,4
   1eb44:	21220d04 	addi	r4,r4,-30668
   1eb48:	001cd600 	call	1cd60 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   1eb4c:	00800134 	movhi	r2,4
   1eb50:	10a20d04 	addi	r2,r2,-30668
   1eb54:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   1eb58:	00800134 	movhi	r2,4
   1eb5c:	10a21804 	addi	r2,r2,-30624
   1eb60:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   1eb64:	e03ffd0d 	sth	zero,-12(fp)
   1eb68:	00001306 	br	1ebb8 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1eb6c:	e0bffe17 	ldw	r2,-8(fp)
   1eb70:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   1eb74:	e0bffe17 	ldw	r2,-8(fp)
   1eb78:	e0ffff17 	ldw	r3,-4(fp)
   1eb7c:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   1eb80:	e0bffe17 	ldw	r2,-8(fp)
   1eb84:	00c00fc4 	movi	r3,63
   1eb88:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   1eb8c:	e0bffe17 	ldw	r2,-8(fp)
   1eb90:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   1eb94:	e0bffe17 	ldw	r2,-8(fp)
   1eb98:	10800b04 	addi	r2,r2,44
   1eb9c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   1eba0:	e0bfff17 	ldw	r2,-4(fp)
   1eba4:	10800b04 	addi	r2,r2,44
   1eba8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   1ebac:	e0bffd0b 	ldhu	r2,-12(fp)
   1ebb0:	10800044 	addi	r2,r2,1
   1ebb4:	e0bffd0d 	sth	r2,-12(fp)
   1ebb8:	e0bffd0b 	ldhu	r2,-12(fp)
   1ebbc:	108004f0 	cmpltui	r2,r2,19
   1ebc0:	103fea1e 	bne	r2,zero,1eb6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701eb6c>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1ebc4:	e0bffe17 	ldw	r2,-8(fp)
   1ebc8:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   1ebcc:	e0bffe17 	ldw	r2,-8(fp)
   1ebd0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   1ebd4:	e0bffe17 	ldw	r2,-8(fp)
   1ebd8:	00c00fc4 	movi	r3,63
   1ebdc:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   1ebe0:	e0bffe17 	ldw	r2,-8(fp)
   1ebe4:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   1ebe8:	00800134 	movhi	r2,4
   1ebec:	10a20d04 	addi	r2,r2,-30668
   1ebf0:	d0a85e15 	stw	r2,-24200(gp)
#endif
}
   1ebf4:	0001883a 	nop
   1ebf8:	e037883a 	mov	sp,fp
   1ebfc:	dfc00117 	ldw	ra,4(sp)
   1ec00:	df000017 	ldw	fp,0(sp)
   1ec04:	dec00204 	addi	sp,sp,8
   1ec08:	f800283a 	ret

0001ec0c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   1ec0c:	defffa04 	addi	sp,sp,-24
   1ec10:	dfc00515 	stw	ra,20(sp)
   1ec14:	df000415 	stw	fp,16(sp)
   1ec18:	df000404 	addi	fp,sp,16
   1ec1c:	e13ffe15 	stw	r4,-8(fp)
   1ec20:	2805883a 	mov	r2,r5
   1ec24:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   1ec28:	e0bffe17 	ldw	r2,-8(fp)
   1ec2c:	10800217 	ldw	r2,8(r2)
   1ec30:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   1ec34:	e0bffd17 	ldw	r2,-12(fp)
   1ec38:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   1ec3c:	e0bffd17 	ldw	r2,-12(fp)
   1ec40:	e0ffff0b 	ldhu	r3,-4(fp)
   1ec44:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   1ec48:	e0bffd17 	ldw	r2,-12(fp)
   1ec4c:	10c00c03 	ldbu	r3,48(r2)
   1ec50:	00bff7c4 	movi	r2,-33
   1ec54:	1884703a 	and	r2,r3,r2
   1ec58:	1007883a 	mov	r3,r2
   1ec5c:	e0bffd17 	ldw	r2,-12(fp)
   1ec60:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   1ec64:	e0bffd17 	ldw	r2,-12(fp)
   1ec68:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   1ec6c:	e0bffd17 	ldw	r2,-12(fp)
   1ec70:	10800c03 	ldbu	r2,48(r2)
   1ec74:	10803fcc 	andi	r2,r2,255
   1ec78:	1000181e 	bne	r2,zero,1ecdc <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   1ec7c:	e0bffd17 	ldw	r2,-12(fp)
   1ec80:	10c00d83 	ldbu	r3,54(r2)
   1ec84:	d0a85903 	ldbu	r2,-24220(gp)
   1ec88:	1884b03a 	or	r2,r3,r2
   1ec8c:	d0a85905 	stb	r2,-24220(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1ec90:	e0bffd17 	ldw	r2,-12(fp)
   1ec94:	10800d03 	ldbu	r2,52(r2)
   1ec98:	10c03fcc 	andi	r3,r2,255
   1ec9c:	e0bffd17 	ldw	r2,-12(fp)
   1eca0:	10800d03 	ldbu	r2,52(r2)
   1eca4:	11003fcc 	andi	r4,r2,255
   1eca8:	d0a85944 	addi	r2,gp,-24219
   1ecac:	2085883a 	add	r2,r4,r2
   1ecb0:	11000003 	ldbu	r4,0(r2)
   1ecb4:	e0bffd17 	ldw	r2,-12(fp)
   1ecb8:	10800d43 	ldbu	r2,53(r2)
   1ecbc:	2084b03a 	or	r2,r4,r2
   1ecc0:	1009883a 	mov	r4,r2
   1ecc4:	d0a85944 	addi	r2,gp,-24219
   1ecc8:	1885883a 	add	r2,r3,r2
   1eccc:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   1ecd0:	00800044 	movi	r2,1
   1ecd4:	e0bffc05 	stb	r2,-16(fp)
   1ecd8:	00000106 	br	1ece0 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   1ecdc:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   1ece0:	e13ffe17 	ldw	r4,-8(fp)
   1ece4:	001ed000 	call	1ed00 <OS_FlagUnlink>
    return (sched);
   1ece8:	e0bffc03 	ldbu	r2,-16(fp)
}
   1ecec:	e037883a 	mov	sp,fp
   1ecf0:	dfc00117 	ldw	ra,4(sp)
   1ecf4:	df000017 	ldw	fp,0(sp)
   1ecf8:	dec00204 	addi	sp,sp,8
   1ecfc:	f800283a 	ret

0001ed00 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   1ed00:	defffa04 	addi	sp,sp,-24
   1ed04:	df000515 	stw	fp,20(sp)
   1ed08:	df000504 	addi	fp,sp,20
   1ed0c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   1ed10:	e0bfff17 	ldw	r2,-4(fp)
   1ed14:	10800117 	ldw	r2,4(r2)
   1ed18:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   1ed1c:	e0bfff17 	ldw	r2,-4(fp)
   1ed20:	10800017 	ldw	r2,0(r2)
   1ed24:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   1ed28:	e0bffb17 	ldw	r2,-20(fp)
   1ed2c:	10000b1e 	bne	r2,zero,1ed5c <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   1ed30:	e0bfff17 	ldw	r2,-4(fp)
   1ed34:	10800317 	ldw	r2,12(r2)
   1ed38:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   1ed3c:	e0bffd17 	ldw	r2,-12(fp)
   1ed40:	e0fffc17 	ldw	r3,-16(fp)
   1ed44:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   1ed48:	e0bffc17 	ldw	r2,-16(fp)
   1ed4c:	10000b26 	beq	r2,zero,1ed7c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   1ed50:	e0bffc17 	ldw	r2,-16(fp)
   1ed54:	10000115 	stw	zero,4(r2)
   1ed58:	00000806 	br	1ed7c <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   1ed5c:	e0bffb17 	ldw	r2,-20(fp)
   1ed60:	e0fffc17 	ldw	r3,-16(fp)
   1ed64:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   1ed68:	e0bffc17 	ldw	r2,-16(fp)
   1ed6c:	10000326 	beq	r2,zero,1ed7c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   1ed70:	e0bffc17 	ldw	r2,-16(fp)
   1ed74:	e0fffb17 	ldw	r3,-20(fp)
   1ed78:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   1ed7c:	e0bfff17 	ldw	r2,-4(fp)
   1ed80:	10800217 	ldw	r2,8(r2)
   1ed84:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   1ed88:	e0bffe17 	ldw	r2,-8(fp)
   1ed8c:	10000a15 	stw	zero,40(r2)
#endif
}
   1ed90:	0001883a 	nop
   1ed94:	e037883a 	mov	sp,fp
   1ed98:	df000017 	ldw	fp,0(sp)
   1ed9c:	dec00104 	addi	sp,sp,4
   1eda0:	f800283a 	ret

0001eda4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   1eda4:	defff404 	addi	sp,sp,-48
   1eda8:	df000b15 	stw	fp,44(sp)
   1edac:	df000b04 	addi	fp,sp,44
   1edb0:	e13ffc15 	stw	r4,-16(fp)
   1edb4:	e17ffd15 	stw	r5,-12(fp)
   1edb8:	e1bffe15 	stw	r6,-8(fp)
   1edbc:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1edc0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1edc4:	e0bfff17 	ldw	r2,-4(fp)
   1edc8:	1000021e 	bne	r2,zero,1edd4 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   1edcc:	0005883a 	mov	r2,zero
   1edd0:	00006506 	br	1ef68 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   1edd4:	e0bffc17 	ldw	r2,-16(fp)
   1edd8:	1000051e 	bne	r2,zero,1edf0 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   1eddc:	e0bfff17 	ldw	r2,-4(fp)
   1ede0:	00c01884 	movi	r3,98
   1ede4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1ede8:	0005883a 	mov	r2,zero
   1edec:	00005e06 	br	1ef68 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   1edf0:	e0bffc17 	ldw	r2,-16(fp)
   1edf4:	108000cc 	andi	r2,r2,3
   1edf8:	10000526 	beq	r2,zero,1ee10 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   1edfc:	e0bfff17 	ldw	r2,-4(fp)
   1ee00:	00c01884 	movi	r3,98
   1ee04:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1ee08:	0005883a 	mov	r2,zero
   1ee0c:	00005606 	br	1ef68 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   1ee10:	e0bffd17 	ldw	r2,-12(fp)
   1ee14:	108000a8 	cmpgeui	r2,r2,2
   1ee18:	1000051e 	bne	r2,zero,1ee30 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   1ee1c:	e0bfff17 	ldw	r2,-4(fp)
   1ee20:	00c016c4 	movi	r3,91
   1ee24:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1ee28:	0005883a 	mov	r2,zero
   1ee2c:	00004e06 	br	1ef68 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   1ee30:	e0bffe17 	ldw	r2,-8(fp)
   1ee34:	10800128 	cmpgeui	r2,r2,4
   1ee38:	1000051e 	bne	r2,zero,1ee50 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   1ee3c:	e0bfff17 	ldw	r2,-4(fp)
   1ee40:	00c01704 	movi	r3,92
   1ee44:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1ee48:	0005883a 	mov	r2,zero
   1ee4c:	00004606 	br	1ef68 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ee50:	0005303a 	rdctl	r2,status
   1ee54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ee58:	e0fffb17 	ldw	r3,-20(fp)
   1ee5c:	00bfff84 	movi	r2,-2
   1ee60:	1884703a 	and	r2,r3,r2
   1ee64:	1001703a 	wrctl	status,r2
  
  return context;
   1ee68:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1ee6c:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   1ee70:	d0a85617 	ldw	r2,-24232(gp)
   1ee74:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   1ee78:	d0a85617 	ldw	r2,-24232(gp)
   1ee7c:	10000326 	beq	r2,zero,1ee8c <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   1ee80:	d0a85617 	ldw	r2,-24232(gp)
   1ee84:	10800117 	ldw	r2,4(r2)
   1ee88:	d0a85615 	stw	r2,-24232(gp)
   1ee8c:	e0bff817 	ldw	r2,-32(fp)
   1ee90:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ee94:	e0bff917 	ldw	r2,-28(fp)
   1ee98:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   1ee9c:	e0bffa17 	ldw	r2,-24(fp)
   1eea0:	1000051e 	bne	r2,zero,1eeb8 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   1eea4:	e0bfff17 	ldw	r2,-4(fp)
   1eea8:	00c01684 	movi	r3,90
   1eeac:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1eeb0:	0005883a 	mov	r2,zero
   1eeb4:	00002c06 	br	1ef68 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   1eeb8:	e0bffc17 	ldw	r2,-16(fp)
   1eebc:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   1eec0:	e0fffc17 	ldw	r3,-16(fp)
   1eec4:	e0bffe17 	ldw	r2,-8(fp)
   1eec8:	1885883a 	add	r2,r3,r2
   1eecc:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   1eed0:	e03ff715 	stw	zero,-36(fp)
   1eed4:	00000c06 	br	1ef08 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   1eed8:	e0bff617 	ldw	r2,-40(fp)
   1eedc:	e0fff517 	ldw	r3,-44(fp)
   1eee0:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   1eee4:	e0bff517 	ldw	r2,-44(fp)
   1eee8:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   1eeec:	e0fff517 	ldw	r3,-44(fp)
   1eef0:	e0bffe17 	ldw	r2,-8(fp)
   1eef4:	1885883a 	add	r2,r3,r2
   1eef8:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   1eefc:	e0bff717 	ldw	r2,-36(fp)
   1ef00:	10800044 	addi	r2,r2,1
   1ef04:	e0bff715 	stw	r2,-36(fp)
   1ef08:	e0bffd17 	ldw	r2,-12(fp)
   1ef0c:	10bfffc4 	addi	r2,r2,-1
   1ef10:	e0fff717 	ldw	r3,-36(fp)
   1ef14:	18bff036 	bltu	r3,r2,1eed8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701eed8>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   1ef18:	e0bff617 	ldw	r2,-40(fp)
   1ef1c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   1ef20:	e0bffa17 	ldw	r2,-24(fp)
   1ef24:	e0fffc17 	ldw	r3,-16(fp)
   1ef28:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   1ef2c:	e0bffa17 	ldw	r2,-24(fp)
   1ef30:	e0fffc17 	ldw	r3,-16(fp)
   1ef34:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   1ef38:	e0bffa17 	ldw	r2,-24(fp)
   1ef3c:	e0fffd17 	ldw	r3,-12(fp)
   1ef40:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   1ef44:	e0bffa17 	ldw	r2,-24(fp)
   1ef48:	e0fffd17 	ldw	r3,-12(fp)
   1ef4c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   1ef50:	e0bffa17 	ldw	r2,-24(fp)
   1ef54:	e0fffe17 	ldw	r3,-8(fp)
   1ef58:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   1ef5c:	e0bfff17 	ldw	r2,-4(fp)
   1ef60:	10000005 	stb	zero,0(r2)
    return (pmem);
   1ef64:	e0bffa17 	ldw	r2,-24(fp)
}
   1ef68:	e037883a 	mov	sp,fp
   1ef6c:	df000017 	ldw	fp,0(sp)
   1ef70:	dec00104 	addi	sp,sp,4
   1ef74:	f800283a 	ret

0001ef78 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   1ef78:	defff804 	addi	sp,sp,-32
   1ef7c:	df000715 	stw	fp,28(sp)
   1ef80:	df000704 	addi	fp,sp,28
   1ef84:	e13ffe15 	stw	r4,-8(fp)
   1ef88:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1ef8c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1ef90:	e0bfff17 	ldw	r2,-4(fp)
   1ef94:	1000021e 	bne	r2,zero,1efa0 <OSMemGet+0x28>
        return ((void *)0);
   1ef98:	0005883a 	mov	r2,zero
   1ef9c:	00002e06 	br	1f058 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   1efa0:	e0bffe17 	ldw	r2,-8(fp)
   1efa4:	1000051e 	bne	r2,zero,1efbc <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1efa8:	e0bfff17 	ldw	r2,-4(fp)
   1efac:	00c01804 	movi	r3,96
   1efb0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1efb4:	0005883a 	mov	r2,zero
   1efb8:	00002706 	br	1f058 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1efbc:	0005303a 	rdctl	r2,status
   1efc0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1efc4:	e0fffd17 	ldw	r3,-12(fp)
   1efc8:	00bfff84 	movi	r2,-2
   1efcc:	1884703a 	and	r2,r3,r2
   1efd0:	1001703a 	wrctl	status,r2
  
  return context;
   1efd4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1efd8:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   1efdc:	e0bffe17 	ldw	r2,-8(fp)
   1efe0:	10800417 	ldw	r2,16(r2)
   1efe4:	10001426 	beq	r2,zero,1f038 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   1efe8:	e0bffe17 	ldw	r2,-8(fp)
   1efec:	10800117 	ldw	r2,4(r2)
   1eff0:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   1eff4:	e0bffb17 	ldw	r2,-20(fp)
   1eff8:	10c00017 	ldw	r3,0(r2)
   1effc:	e0bffe17 	ldw	r2,-8(fp)
   1f000:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   1f004:	e0bffe17 	ldw	r2,-8(fp)
   1f008:	10800417 	ldw	r2,16(r2)
   1f00c:	10ffffc4 	addi	r3,r2,-1
   1f010:	e0bffe17 	ldw	r2,-8(fp)
   1f014:	10c00415 	stw	r3,16(r2)
   1f018:	e0bff917 	ldw	r2,-28(fp)
   1f01c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f020:	e0bffa17 	ldw	r2,-24(fp)
   1f024:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   1f028:	e0bfff17 	ldw	r2,-4(fp)
   1f02c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   1f030:	e0bffb17 	ldw	r2,-20(fp)
   1f034:	00000806 	br	1f058 <OSMemGet+0xe0>
   1f038:	e0bff917 	ldw	r2,-28(fp)
   1f03c:	e0bffc15 	stw	r2,-16(fp)
   1f040:	e0bffc17 	ldw	r2,-16(fp)
   1f044:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   1f048:	e0bfff17 	ldw	r2,-4(fp)
   1f04c:	00c01744 	movi	r3,93
   1f050:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   1f054:	0005883a 	mov	r2,zero
}
   1f058:	e037883a 	mov	sp,fp
   1f05c:	df000017 	ldw	fp,0(sp)
   1f060:	dec00104 	addi	sp,sp,4
   1f064:	f800283a 	ret

0001f068 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   1f068:	defff704 	addi	sp,sp,-36
   1f06c:	dfc00815 	stw	ra,32(sp)
   1f070:	df000715 	stw	fp,28(sp)
   1f074:	df000704 	addi	fp,sp,28
   1f078:	e13ffd15 	stw	r4,-12(fp)
   1f07c:	e17ffe15 	stw	r5,-8(fp)
   1f080:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1f084:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1f088:	e0bfff17 	ldw	r2,-4(fp)
   1f08c:	1000021e 	bne	r2,zero,1f098 <OSMemNameGet+0x30>
        return (0);
   1f090:	0005883a 	mov	r2,zero
   1f094:	00002b06 	br	1f144 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   1f098:	e0bffd17 	ldw	r2,-12(fp)
   1f09c:	1000051e 	bne	r2,zero,1f0b4 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1f0a0:	e0bfff17 	ldw	r2,-4(fp)
   1f0a4:	00c01804 	movi	r3,96
   1f0a8:	10c00005 	stb	r3,0(r2)
        return (0);
   1f0ac:	0005883a 	mov	r2,zero
   1f0b0:	00002406 	br	1f144 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1f0b4:	e0bffe17 	ldw	r2,-8(fp)
   1f0b8:	1000051e 	bne	r2,zero,1f0d0 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1f0bc:	e0bfff17 	ldw	r2,-4(fp)
   1f0c0:	00c00304 	movi	r3,12
   1f0c4:	10c00005 	stb	r3,0(r2)
        return (0);
   1f0c8:	0005883a 	mov	r2,zero
   1f0cc:	00001d06 	br	1f144 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1f0d0:	d0a85b03 	ldbu	r2,-24212(gp)
   1f0d4:	10803fcc 	andi	r2,r2,255
   1f0d8:	10000526 	beq	r2,zero,1f0f0 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   1f0dc:	e0bfff17 	ldw	r2,-4(fp)
   1f0e0:	00c00444 	movi	r3,17
   1f0e4:	10c00005 	stb	r3,0(r2)
        return (0);
   1f0e8:	0005883a 	mov	r2,zero
   1f0ec:	00001506 	br	1f144 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f0f0:	0005303a 	rdctl	r2,status
   1f0f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f0f8:	e0fffb17 	ldw	r3,-20(fp)
   1f0fc:	00bfff84 	movi	r2,-2
   1f100:	1884703a 	and	r2,r3,r2
   1f104:	1001703a 	wrctl	status,r2
  
  return context;
   1f108:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1f10c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   1f110:	e0bffd17 	ldw	r2,-12(fp)
   1f114:	10800504 	addi	r2,r2,20
   1f118:	100b883a 	mov	r5,r2
   1f11c:	e13ffe17 	ldw	r4,-8(fp)
   1f120:	001cf600 	call	1cf60 <OS_StrCopy>
   1f124:	e0bffa05 	stb	r2,-24(fp)
   1f128:	e0bff917 	ldw	r2,-28(fp)
   1f12c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f130:	e0bffc17 	ldw	r2,-16(fp)
   1f134:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1f138:	e0bfff17 	ldw	r2,-4(fp)
   1f13c:	10000005 	stb	zero,0(r2)
    return (len);
   1f140:	e0bffa03 	ldbu	r2,-24(fp)
}
   1f144:	e037883a 	mov	sp,fp
   1f148:	dfc00117 	ldw	ra,4(sp)
   1f14c:	df000017 	ldw	fp,0(sp)
   1f150:	dec00204 	addi	sp,sp,8
   1f154:	f800283a 	ret

0001f158 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   1f158:	defff604 	addi	sp,sp,-40
   1f15c:	dfc00915 	stw	ra,36(sp)
   1f160:	df000815 	stw	fp,32(sp)
   1f164:	df000804 	addi	fp,sp,32
   1f168:	e13ffd15 	stw	r4,-12(fp)
   1f16c:	e17ffe15 	stw	r5,-8(fp)
   1f170:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1f174:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1f178:	e0bfff17 	ldw	r2,-4(fp)
   1f17c:	10003526 	beq	r2,zero,1f254 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   1f180:	e0bffd17 	ldw	r2,-12(fp)
   1f184:	1000041e 	bne	r2,zero,1f198 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1f188:	e0bfff17 	ldw	r2,-4(fp)
   1f18c:	00c01804 	movi	r3,96
   1f190:	10c00005 	stb	r3,0(r2)
        return;
   1f194:	00003006 	br	1f258 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1f198:	e0bffe17 	ldw	r2,-8(fp)
   1f19c:	1000041e 	bne	r2,zero,1f1b0 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   1f1a0:	e0bfff17 	ldw	r2,-4(fp)
   1f1a4:	00c00304 	movi	r3,12
   1f1a8:	10c00005 	stb	r3,0(r2)
        return;
   1f1ac:	00002a06 	br	1f258 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1f1b0:	d0a85b03 	ldbu	r2,-24212(gp)
   1f1b4:	10803fcc 	andi	r2,r2,255
   1f1b8:	10000426 	beq	r2,zero,1f1cc <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   1f1bc:	e0bfff17 	ldw	r2,-4(fp)
   1f1c0:	00c00484 	movi	r3,18
   1f1c4:	10c00005 	stb	r3,0(r2)
        return;
   1f1c8:	00002306 	br	1f258 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f1cc:	0005303a 	rdctl	r2,status
   1f1d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f1d4:	e0fffc17 	ldw	r3,-16(fp)
   1f1d8:	00bfff84 	movi	r2,-2
   1f1dc:	1884703a 	and	r2,r3,r2
   1f1e0:	1001703a 	wrctl	status,r2
  
  return context;
   1f1e4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1f1e8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   1f1ec:	e13ffe17 	ldw	r4,-8(fp)
   1f1f0:	001cfd40 	call	1cfd4 <OS_StrLen>
   1f1f4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   1f1f8:	e0bffa03 	ldbu	r2,-24(fp)
   1f1fc:	10800830 	cmpltui	r2,r2,32
   1f200:	1000081e 	bne	r2,zero,1f224 <OSMemNameSet+0xcc>
   1f204:	e0bff817 	ldw	r2,-32(fp)
   1f208:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f20c:	e0bff917 	ldw	r2,-28(fp)
   1f210:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   1f214:	e0bfff17 	ldw	r2,-4(fp)
   1f218:	00c018c4 	movi	r3,99
   1f21c:	10c00005 	stb	r3,0(r2)
        return;
   1f220:	00000d06 	br	1f258 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   1f224:	e0bffd17 	ldw	r2,-12(fp)
   1f228:	10800504 	addi	r2,r2,20
   1f22c:	e17ffe17 	ldw	r5,-8(fp)
   1f230:	1009883a 	mov	r4,r2
   1f234:	001cf600 	call	1cf60 <OS_StrCopy>
   1f238:	e0bff817 	ldw	r2,-32(fp)
   1f23c:	e0bffb15 	stw	r2,-20(fp)
   1f240:	e0bffb17 	ldw	r2,-20(fp)
   1f244:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1f248:	e0bfff17 	ldw	r2,-4(fp)
   1f24c:	10000005 	stb	zero,0(r2)
   1f250:	00000106 	br	1f258 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   1f254:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   1f258:	e037883a 	mov	sp,fp
   1f25c:	dfc00117 	ldw	ra,4(sp)
   1f260:	df000017 	ldw	fp,0(sp)
   1f264:	dec00204 	addi	sp,sp,8
   1f268:	f800283a 	ret

0001f26c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   1f26c:	defff904 	addi	sp,sp,-28
   1f270:	df000615 	stw	fp,24(sp)
   1f274:	df000604 	addi	fp,sp,24
   1f278:	e13ffe15 	stw	r4,-8(fp)
   1f27c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1f280:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   1f284:	e0bffe17 	ldw	r2,-8(fp)
   1f288:	1000021e 	bne	r2,zero,1f294 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   1f28c:	00801804 	movi	r2,96
   1f290:	00002806 	br	1f334 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   1f294:	e0bfff17 	ldw	r2,-4(fp)
   1f298:	1000021e 	bne	r2,zero,1f2a4 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   1f29c:	008017c4 	movi	r2,95
   1f2a0:	00002406 	br	1f334 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f2a4:	0005303a 	rdctl	r2,status
   1f2a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f2ac:	e0fffd17 	ldw	r3,-12(fp)
   1f2b0:	00bfff84 	movi	r2,-2
   1f2b4:	1884703a 	and	r2,r3,r2
   1f2b8:	1001703a 	wrctl	status,r2
  
  return context;
   1f2bc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1f2c0:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   1f2c4:	e0bffe17 	ldw	r2,-8(fp)
   1f2c8:	10c00417 	ldw	r3,16(r2)
   1f2cc:	e0bffe17 	ldw	r2,-8(fp)
   1f2d0:	10800317 	ldw	r2,12(r2)
   1f2d4:	18800636 	bltu	r3,r2,1f2f0 <OSMemPut+0x84>
   1f2d8:	e0bffa17 	ldw	r2,-24(fp)
   1f2dc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f2e0:	e0bffb17 	ldw	r2,-20(fp)
   1f2e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   1f2e8:	00801784 	movi	r2,94
   1f2ec:	00001106 	br	1f334 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   1f2f0:	e0bffe17 	ldw	r2,-8(fp)
   1f2f4:	10c00117 	ldw	r3,4(r2)
   1f2f8:	e0bfff17 	ldw	r2,-4(fp)
   1f2fc:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   1f300:	e0bffe17 	ldw	r2,-8(fp)
   1f304:	e0ffff17 	ldw	r3,-4(fp)
   1f308:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   1f30c:	e0bffe17 	ldw	r2,-8(fp)
   1f310:	10800417 	ldw	r2,16(r2)
   1f314:	10c00044 	addi	r3,r2,1
   1f318:	e0bffe17 	ldw	r2,-8(fp)
   1f31c:	10c00415 	stw	r3,16(r2)
   1f320:	e0bffa17 	ldw	r2,-24(fp)
   1f324:	e0bffc15 	stw	r2,-16(fp)
   1f328:	e0bffc17 	ldw	r2,-16(fp)
   1f32c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   1f330:	0005883a 	mov	r2,zero
}
   1f334:	e037883a 	mov	sp,fp
   1f338:	df000017 	ldw	fp,0(sp)
   1f33c:	dec00104 	addi	sp,sp,4
   1f340:	f800283a 	ret

0001f344 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   1f344:	defffa04 	addi	sp,sp,-24
   1f348:	df000515 	stw	fp,20(sp)
   1f34c:	df000504 	addi	fp,sp,20
   1f350:	e13ffe15 	stw	r4,-8(fp)
   1f354:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1f358:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   1f35c:	e0bffe17 	ldw	r2,-8(fp)
   1f360:	1000021e 	bne	r2,zero,1f36c <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   1f364:	00801804 	movi	r2,96
   1f368:	00002c06 	br	1f41c <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   1f36c:	e0bfff17 	ldw	r2,-4(fp)
   1f370:	1000021e 	bne	r2,zero,1f37c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   1f374:	00801844 	movi	r2,97
   1f378:	00002806 	br	1f41c <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f37c:	0005303a 	rdctl	r2,status
   1f380:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f384:	e0fffc17 	ldw	r3,-16(fp)
   1f388:	00bfff84 	movi	r2,-2
   1f38c:	1884703a 	and	r2,r3,r2
   1f390:	1001703a 	wrctl	status,r2
  
  return context;
   1f394:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1f398:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   1f39c:	e0bffe17 	ldw	r2,-8(fp)
   1f3a0:	10c00017 	ldw	r3,0(r2)
   1f3a4:	e0bfff17 	ldw	r2,-4(fp)
   1f3a8:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   1f3ac:	e0bffe17 	ldw	r2,-8(fp)
   1f3b0:	10c00117 	ldw	r3,4(r2)
   1f3b4:	e0bfff17 	ldw	r2,-4(fp)
   1f3b8:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   1f3bc:	e0bffe17 	ldw	r2,-8(fp)
   1f3c0:	10c00217 	ldw	r3,8(r2)
   1f3c4:	e0bfff17 	ldw	r2,-4(fp)
   1f3c8:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   1f3cc:	e0bffe17 	ldw	r2,-8(fp)
   1f3d0:	10c00317 	ldw	r3,12(r2)
   1f3d4:	e0bfff17 	ldw	r2,-4(fp)
   1f3d8:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   1f3dc:	e0bffe17 	ldw	r2,-8(fp)
   1f3e0:	10c00417 	ldw	r3,16(r2)
   1f3e4:	e0bfff17 	ldw	r2,-4(fp)
   1f3e8:	10c00415 	stw	r3,16(r2)
   1f3ec:	e0bffb17 	ldw	r2,-20(fp)
   1f3f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f3f4:	e0bffd17 	ldw	r2,-12(fp)
   1f3f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   1f3fc:	e0bfff17 	ldw	r2,-4(fp)
   1f400:	10c00317 	ldw	r3,12(r2)
   1f404:	e0bfff17 	ldw	r2,-4(fp)
   1f408:	10800417 	ldw	r2,16(r2)
   1f40c:	1887c83a 	sub	r3,r3,r2
   1f410:	e0bfff17 	ldw	r2,-4(fp)
   1f414:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   1f418:	0005883a 	mov	r2,zero
}
   1f41c:	e037883a 	mov	sp,fp
   1f420:	df000017 	ldw	fp,0(sp)
   1f424:	dec00104 	addi	sp,sp,4
   1f428:	f800283a 	ret

0001f42c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   1f42c:	defffc04 	addi	sp,sp,-16
   1f430:	dfc00315 	stw	ra,12(sp)
   1f434:	df000215 	stw	fp,8(sp)
   1f438:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   1f43c:	01430c04 	movi	r5,3120
   1f440:	01000134 	movhi	r4,4
   1f444:	2122e904 	addi	r4,r4,-29788
   1f448:	001cd600 	call	1cd60 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   1f44c:	00800134 	movhi	r2,4
   1f450:	10a2e904 	addi	r2,r2,-29788
   1f454:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   1f458:	e03fff0d 	sth	zero,-4(fp)
   1f45c:	00001306 	br	1f4ac <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   1f460:	e0bfff0b 	ldhu	r2,-4(fp)
   1f464:	10800044 	addi	r2,r2,1
   1f468:	10c00d24 	muli	r3,r2,52
   1f46c:	00800134 	movhi	r2,4
   1f470:	10a2e904 	addi	r2,r2,-29788
   1f474:	1887883a 	add	r3,r3,r2
   1f478:	e0bffe17 	ldw	r2,-8(fp)
   1f47c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   1f480:	e0bffe17 	ldw	r2,-8(fp)
   1f484:	00c00fc4 	movi	r3,63
   1f488:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   1f48c:	e0bffe17 	ldw	r2,-8(fp)
   1f490:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   1f494:	e0bffe17 	ldw	r2,-8(fp)
   1f498:	10800d04 	addi	r2,r2,52
   1f49c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   1f4a0:	e0bfff0b 	ldhu	r2,-4(fp)
   1f4a4:	10800044 	addi	r2,r2,1
   1f4a8:	e0bfff0d 	sth	r2,-4(fp)
   1f4ac:	e0bfff0b 	ldhu	r2,-4(fp)
   1f4b0:	10800ef0 	cmpltui	r2,r2,59
   1f4b4:	103fea1e 	bne	r2,zero,1f460 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701f460>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   1f4b8:	e0bffe17 	ldw	r2,-8(fp)
   1f4bc:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   1f4c0:	e0bffe17 	ldw	r2,-8(fp)
   1f4c4:	00c00fc4 	movi	r3,63
   1f4c8:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   1f4cc:	e0bffe17 	ldw	r2,-8(fp)
   1f4d0:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   1f4d4:	00800134 	movhi	r2,4
   1f4d8:	10a2e904 	addi	r2,r2,-29788
   1f4dc:	d0a85615 	stw	r2,-24232(gp)
#endif
}
   1f4e0:	0001883a 	nop
   1f4e4:	e037883a 	mov	sp,fp
   1f4e8:	dfc00117 	ldw	ra,4(sp)
   1f4ec:	df000017 	ldw	fp,0(sp)
   1f4f0:	dec00204 	addi	sp,sp,8
   1f4f4:	f800283a 	ret

0001f4f8 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   1f4f8:	defff804 	addi	sp,sp,-32
   1f4fc:	df000715 	stw	fp,28(sp)
   1f500:	df000704 	addi	fp,sp,28
   1f504:	e13ffe15 	stw	r4,-8(fp)
   1f508:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1f50c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1f510:	e0bfff17 	ldw	r2,-4(fp)
   1f514:	1000021e 	bne	r2,zero,1f520 <OSQAccept+0x28>
        return ((void *)0);
   1f518:	0005883a 	mov	r2,zero
   1f51c:	00004206 	br	1f628 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   1f520:	e0bffe17 	ldw	r2,-8(fp)
   1f524:	1000051e 	bne	r2,zero,1f53c <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   1f528:	e0bfff17 	ldw	r2,-4(fp)
   1f52c:	00c00104 	movi	r3,4
   1f530:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1f534:	0005883a 	mov	r2,zero
   1f538:	00003b06 	br	1f628 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   1f53c:	e0bffe17 	ldw	r2,-8(fp)
   1f540:	10800003 	ldbu	r2,0(r2)
   1f544:	10803fcc 	andi	r2,r2,255
   1f548:	108000a0 	cmpeqi	r2,r2,2
   1f54c:	1000051e 	bne	r2,zero,1f564 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1f550:	e0bfff17 	ldw	r2,-4(fp)
   1f554:	00c00044 	movi	r3,1
   1f558:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1f55c:	0005883a 	mov	r2,zero
   1f560:	00003106 	br	1f628 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f564:	0005303a 	rdctl	r2,status
   1f568:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f56c:	e0fffd17 	ldw	r3,-12(fp)
   1f570:	00bfff84 	movi	r2,-2
   1f574:	1884703a 	and	r2,r3,r2
   1f578:	1001703a 	wrctl	status,r2
  
  return context;
   1f57c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1f580:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   1f584:	e0bffe17 	ldw	r2,-8(fp)
   1f588:	10800117 	ldw	r2,4(r2)
   1f58c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   1f590:	e0bffc17 	ldw	r2,-16(fp)
   1f594:	1080058b 	ldhu	r2,22(r2)
   1f598:	10bfffcc 	andi	r2,r2,65535
   1f59c:	10001926 	beq	r2,zero,1f604 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   1f5a0:	e0bffc17 	ldw	r2,-16(fp)
   1f5a4:	10800417 	ldw	r2,16(r2)
   1f5a8:	11000104 	addi	r4,r2,4
   1f5ac:	e0fffc17 	ldw	r3,-16(fp)
   1f5b0:	19000415 	stw	r4,16(r3)
   1f5b4:	10800017 	ldw	r2,0(r2)
   1f5b8:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1f5bc:	e0bffc17 	ldw	r2,-16(fp)
   1f5c0:	1080058b 	ldhu	r2,22(r2)
   1f5c4:	10bfffc4 	addi	r2,r2,-1
   1f5c8:	1007883a 	mov	r3,r2
   1f5cc:	e0bffc17 	ldw	r2,-16(fp)
   1f5d0:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   1f5d4:	e0bffc17 	ldw	r2,-16(fp)
   1f5d8:	10c00417 	ldw	r3,16(r2)
   1f5dc:	e0bffc17 	ldw	r2,-16(fp)
   1f5e0:	10800217 	ldw	r2,8(r2)
   1f5e4:	1880041e 	bne	r3,r2,1f5f8 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   1f5e8:	e0bffc17 	ldw	r2,-16(fp)
   1f5ec:	10c00117 	ldw	r3,4(r2)
   1f5f0:	e0bffc17 	ldw	r2,-16(fp)
   1f5f4:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   1f5f8:	e0bfff17 	ldw	r2,-4(fp)
   1f5fc:	10000005 	stb	zero,0(r2)
   1f600:	00000406 	br	1f614 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   1f604:	e0bfff17 	ldw	r2,-4(fp)
   1f608:	00c007c4 	movi	r3,31
   1f60c:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   1f610:	e03ff915 	stw	zero,-28(fp)
   1f614:	e0bffa17 	ldw	r2,-24(fp)
   1f618:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f61c:	e0bffb17 	ldw	r2,-20(fp)
   1f620:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   1f624:	e0bff917 	ldw	r2,-28(fp)
}
   1f628:	e037883a 	mov	sp,fp
   1f62c:	df000017 	ldw	fp,0(sp)
   1f630:	dec00104 	addi	sp,sp,4
   1f634:	f800283a 	ret

0001f638 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   1f638:	defff404 	addi	sp,sp,-48
   1f63c:	dfc00b15 	stw	ra,44(sp)
   1f640:	df000a15 	stw	fp,40(sp)
   1f644:	df000a04 	addi	fp,sp,40
   1f648:	e13ffe15 	stw	r4,-8(fp)
   1f64c:	2805883a 	mov	r2,r5
   1f650:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1f654:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   1f658:	d0a85b03 	ldbu	r2,-24212(gp)
   1f65c:	10803fcc 	andi	r2,r2,255
   1f660:	10000226 	beq	r2,zero,1f66c <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   1f664:	0005883a 	mov	r2,zero
   1f668:	00005906 	br	1f7d0 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f66c:	0005303a 	rdctl	r2,status
   1f670:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f674:	e0fffd17 	ldw	r3,-12(fp)
   1f678:	00bfff84 	movi	r2,-2
   1f67c:	1884703a 	and	r2,r3,r2
   1f680:	1001703a 	wrctl	status,r2
  
  return context;
   1f684:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1f688:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   1f68c:	d0a85a17 	ldw	r2,-24216(gp)
   1f690:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   1f694:	d0a85a17 	ldw	r2,-24216(gp)
   1f698:	10000326 	beq	r2,zero,1f6a8 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1f69c:	d0a85a17 	ldw	r2,-24216(gp)
   1f6a0:	10800117 	ldw	r2,4(r2)
   1f6a4:	d0a85a15 	stw	r2,-24216(gp)
   1f6a8:	e0bff717 	ldw	r2,-36(fp)
   1f6ac:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f6b0:	e0bff817 	ldw	r2,-32(fp)
   1f6b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   1f6b8:	e0bff617 	ldw	r2,-40(fp)
   1f6bc:	10004326 	beq	r2,zero,1f7cc <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f6c0:	0005303a 	rdctl	r2,status
   1f6c4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f6c8:	e0fff917 	ldw	r3,-28(fp)
   1f6cc:	00bfff84 	movi	r2,-2
   1f6d0:	1884703a 	and	r2,r3,r2
   1f6d4:	1001703a 	wrctl	status,r2
  
  return context;
   1f6d8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   1f6dc:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   1f6e0:	d0a85817 	ldw	r2,-24224(gp)
   1f6e4:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   1f6e8:	e0bffb17 	ldw	r2,-20(fp)
   1f6ec:	10002d26 	beq	r2,zero,1f7a4 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   1f6f0:	d0a85817 	ldw	r2,-24224(gp)
   1f6f4:	10800017 	ldw	r2,0(r2)
   1f6f8:	d0a85815 	stw	r2,-24224(gp)
   1f6fc:	e0bff717 	ldw	r2,-36(fp)
   1f700:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f704:	e0bffa17 	ldw	r2,-24(fp)
   1f708:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   1f70c:	e0bffb17 	ldw	r2,-20(fp)
   1f710:	e0fffe17 	ldw	r3,-8(fp)
   1f714:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   1f718:	e0bfff0b 	ldhu	r2,-4(fp)
   1f71c:	1085883a 	add	r2,r2,r2
   1f720:	1085883a 	add	r2,r2,r2
   1f724:	1007883a 	mov	r3,r2
   1f728:	e0bffe17 	ldw	r2,-8(fp)
   1f72c:	10c7883a 	add	r3,r2,r3
   1f730:	e0bffb17 	ldw	r2,-20(fp)
   1f734:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   1f738:	e0bffb17 	ldw	r2,-20(fp)
   1f73c:	e0fffe17 	ldw	r3,-8(fp)
   1f740:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   1f744:	e0bffb17 	ldw	r2,-20(fp)
   1f748:	e0fffe17 	ldw	r3,-8(fp)
   1f74c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   1f750:	e0bffb17 	ldw	r2,-20(fp)
   1f754:	e0ffff0b 	ldhu	r3,-4(fp)
   1f758:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   1f75c:	e0bffb17 	ldw	r2,-20(fp)
   1f760:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   1f764:	e0bff617 	ldw	r2,-40(fp)
   1f768:	00c00084 	movi	r3,2
   1f76c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   1f770:	e0bff617 	ldw	r2,-40(fp)
   1f774:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   1f778:	e0bff617 	ldw	r2,-40(fp)
   1f77c:	e0fffb17 	ldw	r3,-20(fp)
   1f780:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   1f784:	e0bff617 	ldw	r2,-40(fp)
   1f788:	00c00fc4 	movi	r3,63
   1f78c:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   1f790:	e0bff617 	ldw	r2,-40(fp)
   1f794:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   1f798:	e13ff617 	ldw	r4,-40(fp)
   1f79c:	001c9800 	call	1c980 <OS_EventWaitListInit>
   1f7a0:	00000a06 	br	1f7cc <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   1f7a4:	d0e85a17 	ldw	r3,-24216(gp)
   1f7a8:	e0bff617 	ldw	r2,-40(fp)
   1f7ac:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   1f7b0:	e0bff617 	ldw	r2,-40(fp)
   1f7b4:	d0a85a15 	stw	r2,-24216(gp)
   1f7b8:	e0bff717 	ldw	r2,-36(fp)
   1f7bc:	e0bffc15 	stw	r2,-16(fp)
   1f7c0:	e0bffc17 	ldw	r2,-16(fp)
   1f7c4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   1f7c8:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   1f7cc:	e0bff617 	ldw	r2,-40(fp)
}
   1f7d0:	e037883a 	mov	sp,fp
   1f7d4:	dfc00117 	ldw	ra,4(sp)
   1f7d8:	df000017 	ldw	fp,0(sp)
   1f7dc:	dec00204 	addi	sp,sp,8
   1f7e0:	f800283a 	ret

0001f7e4 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1f7e4:	defff204 	addi	sp,sp,-56
   1f7e8:	dfc00d15 	stw	ra,52(sp)
   1f7ec:	df000c15 	stw	fp,48(sp)
   1f7f0:	df000c04 	addi	fp,sp,48
   1f7f4:	e13ffd15 	stw	r4,-12(fp)
   1f7f8:	2805883a 	mov	r2,r5
   1f7fc:	e1bfff15 	stw	r6,-4(fp)
   1f800:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1f804:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1f808:	e0bfff17 	ldw	r2,-4(fp)
   1f80c:	1000021e 	bne	r2,zero,1f818 <OSQDel+0x34>
        return (pevent);
   1f810:	e0bffd17 	ldw	r2,-12(fp)
   1f814:	00008e06 	br	1fa50 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1f818:	e0bffd17 	ldw	r2,-12(fp)
   1f81c:	1000051e 	bne	r2,zero,1f834 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1f820:	e0bfff17 	ldw	r2,-4(fp)
   1f824:	00c00104 	movi	r3,4
   1f828:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1f82c:	e0bffd17 	ldw	r2,-12(fp)
   1f830:	00008706 	br	1fa50 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   1f834:	e0bffd17 	ldw	r2,-12(fp)
   1f838:	10800003 	ldbu	r2,0(r2)
   1f83c:	10803fcc 	andi	r2,r2,255
   1f840:	108000a0 	cmpeqi	r2,r2,2
   1f844:	1000051e 	bne	r2,zero,1f85c <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1f848:	e0bfff17 	ldw	r2,-4(fp)
   1f84c:	00c00044 	movi	r3,1
   1f850:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1f854:	e0bffd17 	ldw	r2,-12(fp)
   1f858:	00007d06 	br	1fa50 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1f85c:	d0a85b03 	ldbu	r2,-24212(gp)
   1f860:	10803fcc 	andi	r2,r2,255
   1f864:	10000526 	beq	r2,zero,1f87c <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1f868:	e0bfff17 	ldw	r2,-4(fp)
   1f86c:	00c003c4 	movi	r3,15
   1f870:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1f874:	e0bffd17 	ldw	r2,-12(fp)
   1f878:	00007506 	br	1fa50 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f87c:	0005303a 	rdctl	r2,status
   1f880:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f884:	e0fffc17 	ldw	r3,-16(fp)
   1f888:	00bfff84 	movi	r2,-2
   1f88c:	1884703a 	and	r2,r3,r2
   1f890:	1001703a 	wrctl	status,r2
  
  return context;
   1f894:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1f898:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   1f89c:	e0bffd17 	ldw	r2,-12(fp)
   1f8a0:	10800283 	ldbu	r2,10(r2)
   1f8a4:	10803fcc 	andi	r2,r2,255
   1f8a8:	10000326 	beq	r2,zero,1f8b8 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1f8ac:	00800044 	movi	r2,1
   1f8b0:	e0bff405 	stb	r2,-48(fp)
   1f8b4:	00000106 	br	1f8bc <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1f8b8:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   1f8bc:	e0bffe03 	ldbu	r2,-8(fp)
   1f8c0:	10000326 	beq	r2,zero,1f8d0 <OSQDel+0xec>
   1f8c4:	10800060 	cmpeqi	r2,r2,1
   1f8c8:	1000301e 	bne	r2,zero,1f98c <OSQDel+0x1a8>
   1f8cc:	00005506 	br	1fa24 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   1f8d0:	e0bff403 	ldbu	r2,-48(fp)
   1f8d4:	10001e1e 	bne	r2,zero,1f950 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1f8d8:	e0bffd17 	ldw	r2,-12(fp)
   1f8dc:	00c00fc4 	movi	r3,63
   1f8e0:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   1f8e4:	e0bffd17 	ldw	r2,-12(fp)
   1f8e8:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   1f8ec:	e0bffd17 	ldw	r2,-12(fp)
   1f8f0:	10800117 	ldw	r2,4(r2)
   1f8f4:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   1f8f8:	d0e85817 	ldw	r3,-24224(gp)
   1f8fc:	e0bff817 	ldw	r2,-32(fp)
   1f900:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   1f904:	e0bff817 	ldw	r2,-32(fp)
   1f908:	d0a85815 	stw	r2,-24224(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1f90c:	e0bffd17 	ldw	r2,-12(fp)
   1f910:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   1f914:	d0e85a17 	ldw	r3,-24216(gp)
   1f918:	e0bffd17 	ldw	r2,-12(fp)
   1f91c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   1f920:	e0bffd17 	ldw	r2,-12(fp)
   1f924:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   1f928:	e0bffd17 	ldw	r2,-12(fp)
   1f92c:	d0a85a15 	stw	r2,-24216(gp)
   1f930:	e0bff617 	ldw	r2,-40(fp)
   1f934:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f938:	e0bff717 	ldw	r2,-36(fp)
   1f93c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   1f940:	e0bfff17 	ldw	r2,-4(fp)
   1f944:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   1f948:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1f94c:	00003f06 	br	1fa4c <OSQDel+0x268>
   1f950:	e0bff617 	ldw	r2,-40(fp)
   1f954:	e0bff915 	stw	r2,-28(fp)
   1f958:	e0bff917 	ldw	r2,-28(fp)
   1f95c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   1f960:	e0bfff17 	ldw	r2,-4(fp)
   1f964:	00c01244 	movi	r3,73
   1f968:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1f96c:	e0bffd17 	ldw	r2,-12(fp)
   1f970:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   1f974:	00003506 	br	1fa4c <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   1f978:	000f883a 	mov	r7,zero
   1f97c:	01800104 	movi	r6,4
   1f980:	000b883a 	mov	r5,zero
   1f984:	e13ffd17 	ldw	r4,-12(fp)
   1f988:	001c3d00 	call	1c3d0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   1f98c:	e0bffd17 	ldw	r2,-12(fp)
   1f990:	10800283 	ldbu	r2,10(r2)
   1f994:	10803fcc 	andi	r2,r2,255
   1f998:	103ff71e 	bne	r2,zero,1f978 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701f978>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1f99c:	e0bffd17 	ldw	r2,-12(fp)
   1f9a0:	00c00fc4 	movi	r3,63
   1f9a4:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   1f9a8:	e0bffd17 	ldw	r2,-12(fp)
   1f9ac:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   1f9b0:	e0bffd17 	ldw	r2,-12(fp)
   1f9b4:	10800117 	ldw	r2,4(r2)
   1f9b8:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   1f9bc:	d0e85817 	ldw	r3,-24224(gp)
   1f9c0:	e0bff817 	ldw	r2,-32(fp)
   1f9c4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   1f9c8:	e0bff817 	ldw	r2,-32(fp)
   1f9cc:	d0a85815 	stw	r2,-24224(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1f9d0:	e0bffd17 	ldw	r2,-12(fp)
   1f9d4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   1f9d8:	d0e85a17 	ldw	r3,-24216(gp)
   1f9dc:	e0bffd17 	ldw	r2,-12(fp)
   1f9e0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1f9e4:	e0bffd17 	ldw	r2,-12(fp)
   1f9e8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1f9ec:	e0bffd17 	ldw	r2,-12(fp)
   1f9f0:	d0a85a15 	stw	r2,-24216(gp)
   1f9f4:	e0bff617 	ldw	r2,-40(fp)
   1f9f8:	e0bffa15 	stw	r2,-24(fp)
   1f9fc:	e0bffa17 	ldw	r2,-24(fp)
   1fa00:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1fa04:	e0bff403 	ldbu	r2,-48(fp)
   1fa08:	10800058 	cmpnei	r2,r2,1
   1fa0c:	1000011e 	bne	r2,zero,1fa14 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1fa10:	001ce1c0 	call	1ce1c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   1fa14:	e0bfff17 	ldw	r2,-4(fp)
   1fa18:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   1fa1c:	e03ff515 	stw	zero,-44(fp)
             break;
   1fa20:	00000a06 	br	1fa4c <OSQDel+0x268>
   1fa24:	e0bff617 	ldw	r2,-40(fp)
   1fa28:	e0bffb15 	stw	r2,-20(fp)
   1fa2c:	e0bffb17 	ldw	r2,-20(fp)
   1fa30:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   1fa34:	e0bfff17 	ldw	r2,-4(fp)
   1fa38:	00c001c4 	movi	r3,7
   1fa3c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   1fa40:	e0bffd17 	ldw	r2,-12(fp)
   1fa44:	e0bff515 	stw	r2,-44(fp)
             break;
   1fa48:	0001883a 	nop
    }
    return (pevent_return);
   1fa4c:	e0bff517 	ldw	r2,-44(fp)
}
   1fa50:	e037883a 	mov	sp,fp
   1fa54:	dfc00117 	ldw	ra,4(sp)
   1fa58:	df000017 	ldw	fp,0(sp)
   1fa5c:	dec00204 	addi	sp,sp,8
   1fa60:	f800283a 	ret

0001fa64 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   1fa64:	defffa04 	addi	sp,sp,-24
   1fa68:	df000515 	stw	fp,20(sp)
   1fa6c:	df000504 	addi	fp,sp,20
   1fa70:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1fa74:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1fa78:	e0bfff17 	ldw	r2,-4(fp)
   1fa7c:	1000021e 	bne	r2,zero,1fa88 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   1fa80:	00800104 	movi	r2,4
   1fa84:	00002106 	br	1fb0c <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1fa88:	e0bfff17 	ldw	r2,-4(fp)
   1fa8c:	10800003 	ldbu	r2,0(r2)
   1fa90:	10803fcc 	andi	r2,r2,255
   1fa94:	108000a0 	cmpeqi	r2,r2,2
   1fa98:	1000021e 	bne	r2,zero,1faa4 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   1fa9c:	00800044 	movi	r2,1
   1faa0:	00001a06 	br	1fb0c <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1faa4:	0005303a 	rdctl	r2,status
   1faa8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1faac:	e0fffd17 	ldw	r3,-12(fp)
   1fab0:	00bfff84 	movi	r2,-2
   1fab4:	1884703a 	and	r2,r3,r2
   1fab8:	1001703a 	wrctl	status,r2
  
  return context;
   1fabc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1fac0:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   1fac4:	e0bfff17 	ldw	r2,-4(fp)
   1fac8:	10800117 	ldw	r2,4(r2)
   1facc:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   1fad0:	e0bffc17 	ldw	r2,-16(fp)
   1fad4:	10c00117 	ldw	r3,4(r2)
   1fad8:	e0bffc17 	ldw	r2,-16(fp)
   1fadc:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   1fae0:	e0bffc17 	ldw	r2,-16(fp)
   1fae4:	10c00117 	ldw	r3,4(r2)
   1fae8:	e0bffc17 	ldw	r2,-16(fp)
   1faec:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   1faf0:	e0bffc17 	ldw	r2,-16(fp)
   1faf4:	1000058d 	sth	zero,22(r2)
   1faf8:	e0bffb17 	ldw	r2,-20(fp)
   1fafc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fb00:	e0bffe17 	ldw	r2,-8(fp)
   1fb04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1fb08:	0005883a 	mov	r2,zero
}
   1fb0c:	e037883a 	mov	sp,fp
   1fb10:	df000017 	ldw	fp,0(sp)
   1fb14:	dec00104 	addi	sp,sp,4
   1fb18:	f800283a 	ret

0001fb1c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1fb1c:	defff304 	addi	sp,sp,-52
   1fb20:	dfc00c15 	stw	ra,48(sp)
   1fb24:	df000b15 	stw	fp,44(sp)
   1fb28:	df000b04 	addi	fp,sp,44
   1fb2c:	e13ffd15 	stw	r4,-12(fp)
   1fb30:	2805883a 	mov	r2,r5
   1fb34:	e1bfff15 	stw	r6,-4(fp)
   1fb38:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1fb3c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1fb40:	e0bfff17 	ldw	r2,-4(fp)
   1fb44:	1000021e 	bne	r2,zero,1fb50 <OSQPend+0x34>
        return ((void *)0);
   1fb48:	0005883a 	mov	r2,zero
   1fb4c:	00009106 	br	1fd94 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   1fb50:	e0bffd17 	ldw	r2,-12(fp)
   1fb54:	1000051e 	bne	r2,zero,1fb6c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1fb58:	e0bfff17 	ldw	r2,-4(fp)
   1fb5c:	00c00104 	movi	r3,4
   1fb60:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1fb64:	0005883a 	mov	r2,zero
   1fb68:	00008a06 	br	1fd94 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   1fb6c:	e0bffd17 	ldw	r2,-12(fp)
   1fb70:	10800003 	ldbu	r2,0(r2)
   1fb74:	10803fcc 	andi	r2,r2,255
   1fb78:	108000a0 	cmpeqi	r2,r2,2
   1fb7c:	1000051e 	bne	r2,zero,1fb94 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1fb80:	e0bfff17 	ldw	r2,-4(fp)
   1fb84:	00c00044 	movi	r3,1
   1fb88:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1fb8c:	0005883a 	mov	r2,zero
   1fb90:	00008006 	br	1fd94 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   1fb94:	d0a85b03 	ldbu	r2,-24212(gp)
   1fb98:	10803fcc 	andi	r2,r2,255
   1fb9c:	10000526 	beq	r2,zero,1fbb4 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   1fba0:	e0bfff17 	ldw	r2,-4(fp)
   1fba4:	00c00084 	movi	r3,2
   1fba8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1fbac:	0005883a 	mov	r2,zero
   1fbb0:	00007806 	br	1fd94 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   1fbb4:	d0a84d03 	ldbu	r2,-24268(gp)
   1fbb8:	10803fcc 	andi	r2,r2,255
   1fbbc:	10000526 	beq	r2,zero,1fbd4 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   1fbc0:	e0bfff17 	ldw	r2,-4(fp)
   1fbc4:	00c00344 	movi	r3,13
   1fbc8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1fbcc:	0005883a 	mov	r2,zero
   1fbd0:	00007006 	br	1fd94 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1fbd4:	0005303a 	rdctl	r2,status
   1fbd8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fbdc:	e0fffc17 	ldw	r3,-16(fp)
   1fbe0:	00bfff84 	movi	r2,-2
   1fbe4:	1884703a 	and	r2,r3,r2
   1fbe8:	1001703a 	wrctl	status,r2
  
  return context;
   1fbec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1fbf0:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   1fbf4:	e0bffd17 	ldw	r2,-12(fp)
   1fbf8:	10800117 	ldw	r2,4(r2)
   1fbfc:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   1fc00:	e0bff817 	ldw	r2,-32(fp)
   1fc04:	1080058b 	ldhu	r2,22(r2)
   1fc08:	10bfffcc 	andi	r2,r2,65535
   1fc0c:	10001e26 	beq	r2,zero,1fc88 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   1fc10:	e0bff817 	ldw	r2,-32(fp)
   1fc14:	10800417 	ldw	r2,16(r2)
   1fc18:	11000104 	addi	r4,r2,4
   1fc1c:	e0fff817 	ldw	r3,-32(fp)
   1fc20:	19000415 	stw	r4,16(r3)
   1fc24:	10800017 	ldw	r2,0(r2)
   1fc28:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1fc2c:	e0bff817 	ldw	r2,-32(fp)
   1fc30:	1080058b 	ldhu	r2,22(r2)
   1fc34:	10bfffc4 	addi	r2,r2,-1
   1fc38:	1007883a 	mov	r3,r2
   1fc3c:	e0bff817 	ldw	r2,-32(fp)
   1fc40:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   1fc44:	e0bff817 	ldw	r2,-32(fp)
   1fc48:	10c00417 	ldw	r3,16(r2)
   1fc4c:	e0bff817 	ldw	r2,-32(fp)
   1fc50:	10800217 	ldw	r2,8(r2)
   1fc54:	1880041e 	bne	r3,r2,1fc68 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   1fc58:	e0bff817 	ldw	r2,-32(fp)
   1fc5c:	10c00117 	ldw	r3,4(r2)
   1fc60:	e0bff817 	ldw	r2,-32(fp)
   1fc64:	10c00415 	stw	r3,16(r2)
   1fc68:	e0bff617 	ldw	r2,-40(fp)
   1fc6c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fc70:	e0bff717 	ldw	r2,-36(fp)
   1fc74:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1fc78:	e0bfff17 	ldw	r2,-4(fp)
   1fc7c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   1fc80:	e0bff517 	ldw	r2,-44(fp)
   1fc84:	00004306 	br	1fd94 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   1fc88:	d0a85c17 	ldw	r2,-24208(gp)
   1fc8c:	d0e85c17 	ldw	r3,-24208(gp)
   1fc90:	18c00c03 	ldbu	r3,48(r3)
   1fc94:	18c00114 	ori	r3,r3,4
   1fc98:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1fc9c:	d0a85c17 	ldw	r2,-24208(gp)
   1fca0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   1fca4:	d0a85c17 	ldw	r2,-24208(gp)
   1fca8:	e0fffe0b 	ldhu	r3,-8(fp)
   1fcac:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   1fcb0:	e13ffd17 	ldw	r4,-12(fp)
   1fcb4:	001c5680 	call	1c568 <OS_EventTaskWait>
   1fcb8:	e0bff617 	ldw	r2,-40(fp)
   1fcbc:	e0bffb15 	stw	r2,-20(fp)
   1fcc0:	e0bffb17 	ldw	r2,-20(fp)
   1fcc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   1fcc8:	001ce1c0 	call	1ce1c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1fccc:	0005303a 	rdctl	r2,status
   1fcd0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fcd4:	e0fff917 	ldw	r3,-28(fp)
   1fcd8:	00bfff84 	movi	r2,-2
   1fcdc:	1884703a 	and	r2,r3,r2
   1fce0:	1001703a 	wrctl	status,r2
  
  return context;
   1fce4:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   1fce8:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1fcec:	d0a85c17 	ldw	r2,-24208(gp)
   1fcf0:	10800c43 	ldbu	r2,49(r2)
   1fcf4:	10803fcc 	andi	r2,r2,255
   1fcf8:	10000326 	beq	r2,zero,1fd08 <OSQPend+0x1ec>
   1fcfc:	108000a0 	cmpeqi	r2,r2,2
   1fd00:	1000071e 	bne	r2,zero,1fd20 <OSQPend+0x204>
   1fd04:	00000b06 	br	1fd34 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   1fd08:	d0a85c17 	ldw	r2,-24208(gp)
   1fd0c:	10800917 	ldw	r2,36(r2)
   1fd10:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   1fd14:	e0bfff17 	ldw	r2,-4(fp)
   1fd18:	10000005 	stb	zero,0(r2)
             break;
   1fd1c:	00000e06 	br	1fd58 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   1fd20:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   1fd24:	e0bfff17 	ldw	r2,-4(fp)
   1fd28:	00c00384 	movi	r3,14
   1fd2c:	10c00005 	stb	r3,0(r2)
             break;
   1fd30:	00000906 	br	1fd58 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   1fd34:	d0a85c17 	ldw	r2,-24208(gp)
   1fd38:	e17ffd17 	ldw	r5,-12(fp)
   1fd3c:	1009883a 	mov	r4,r2
   1fd40:	001c7c80 	call	1c7c8 <OS_EventTaskRemove>
             pmsg = (void *)0;
   1fd44:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   1fd48:	e0bfff17 	ldw	r2,-4(fp)
   1fd4c:	00c00284 	movi	r3,10
   1fd50:	10c00005 	stb	r3,0(r2)
             break;
   1fd54:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   1fd58:	d0a85c17 	ldw	r2,-24208(gp)
   1fd5c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   1fd60:	d0a85c17 	ldw	r2,-24208(gp)
   1fd64:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   1fd68:	d0a85c17 	ldw	r2,-24208(gp)
   1fd6c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1fd70:	d0a85c17 	ldw	r2,-24208(gp)
   1fd74:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   1fd78:	d0a85c17 	ldw	r2,-24208(gp)
   1fd7c:	10000915 	stw	zero,36(r2)
   1fd80:	e0bff617 	ldw	r2,-40(fp)
   1fd84:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fd88:	e0bffa17 	ldw	r2,-24(fp)
   1fd8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   1fd90:	e0bff517 	ldw	r2,-44(fp)
}
   1fd94:	e037883a 	mov	sp,fp
   1fd98:	dfc00117 	ldw	ra,4(sp)
   1fd9c:	df000017 	ldw	fp,0(sp)
   1fda0:	dec00204 	addi	sp,sp,8
   1fda4:	f800283a 	ret

0001fda8 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1fda8:	defff604 	addi	sp,sp,-40
   1fdac:	dfc00915 	stw	ra,36(sp)
   1fdb0:	df000815 	stw	fp,32(sp)
   1fdb4:	df000804 	addi	fp,sp,32
   1fdb8:	e13ffd15 	stw	r4,-12(fp)
   1fdbc:	2805883a 	mov	r2,r5
   1fdc0:	e1bfff15 	stw	r6,-4(fp)
   1fdc4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1fdc8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1fdcc:	e0bfff17 	ldw	r2,-4(fp)
   1fdd0:	1000021e 	bne	r2,zero,1fddc <OSQPendAbort+0x34>
        return (0);
   1fdd4:	0005883a 	mov	r2,zero
   1fdd8:	00004906 	br	1ff00 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1fddc:	e0bffd17 	ldw	r2,-12(fp)
   1fde0:	1000051e 	bne	r2,zero,1fdf8 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1fde4:	e0bfff17 	ldw	r2,-4(fp)
   1fde8:	00c00104 	movi	r3,4
   1fdec:	10c00005 	stb	r3,0(r2)
        return (0);
   1fdf0:	0005883a 	mov	r2,zero
   1fdf4:	00004206 	br	1ff00 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   1fdf8:	e0bffd17 	ldw	r2,-12(fp)
   1fdfc:	10800003 	ldbu	r2,0(r2)
   1fe00:	10803fcc 	andi	r2,r2,255
   1fe04:	108000a0 	cmpeqi	r2,r2,2
   1fe08:	1000051e 	bne	r2,zero,1fe20 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1fe0c:	e0bfff17 	ldw	r2,-4(fp)
   1fe10:	00c00044 	movi	r3,1
   1fe14:	10c00005 	stb	r3,0(r2)
        return (0);
   1fe18:	0005883a 	mov	r2,zero
   1fe1c:	00003806 	br	1ff00 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1fe20:	0005303a 	rdctl	r2,status
   1fe24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1fe28:	e0fffc17 	ldw	r3,-16(fp)
   1fe2c:	00bfff84 	movi	r2,-2
   1fe30:	1884703a 	and	r2,r3,r2
   1fe34:	1001703a 	wrctl	status,r2
  
  return context;
   1fe38:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1fe3c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   1fe40:	e0bffd17 	ldw	r2,-12(fp)
   1fe44:	10800283 	ldbu	r2,10(r2)
   1fe48:	10803fcc 	andi	r2,r2,255
   1fe4c:	10002526 	beq	r2,zero,1fee4 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   1fe50:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1fe54:	e0bffe03 	ldbu	r2,-8(fp)
   1fe58:	10800060 	cmpeqi	r2,r2,1
   1fe5c:	10000e26 	beq	r2,zero,1fe98 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   1fe60:	00000806 	br	1fe84 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   1fe64:	01c00084 	movi	r7,2
   1fe68:	01800104 	movi	r6,4
   1fe6c:	000b883a 	mov	r5,zero
   1fe70:	e13ffd17 	ldw	r4,-12(fp)
   1fe74:	001c3d00 	call	1c3d0 <OS_EventTaskRdy>
                     nbr_tasks++;
   1fe78:	e0bff803 	ldbu	r2,-32(fp)
   1fe7c:	10800044 	addi	r2,r2,1
   1fe80:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   1fe84:	e0bffd17 	ldw	r2,-12(fp)
   1fe88:	10800283 	ldbu	r2,10(r2)
   1fe8c:	10803fcc 	andi	r2,r2,255
   1fe90:	103ff41e 	bne	r2,zero,1fe64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701fe64>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1fe94:	00000906 	br	1febc <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   1fe98:	01c00084 	movi	r7,2
   1fe9c:	01800104 	movi	r6,4
   1fea0:	000b883a 	mov	r5,zero
   1fea4:	e13ffd17 	ldw	r4,-12(fp)
   1fea8:	001c3d00 	call	1c3d0 <OS_EventTaskRdy>
                 nbr_tasks++;
   1feac:	e0bff803 	ldbu	r2,-32(fp)
   1feb0:	10800044 	addi	r2,r2,1
   1feb4:	e0bff805 	stb	r2,-32(fp)
                 break;
   1feb8:	0001883a 	nop
   1febc:	e0bff917 	ldw	r2,-28(fp)
   1fec0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1fec4:	e0bffa17 	ldw	r2,-24(fp)
   1fec8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   1fecc:	001ce1c0 	call	1ce1c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1fed0:	e0bfff17 	ldw	r2,-4(fp)
   1fed4:	00c00384 	movi	r3,14
   1fed8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1fedc:	e0bff803 	ldbu	r2,-32(fp)
   1fee0:	00000706 	br	1ff00 <OSQPendAbort+0x158>
   1fee4:	e0bff917 	ldw	r2,-28(fp)
   1fee8:	e0bffb15 	stw	r2,-20(fp)
   1feec:	e0bffb17 	ldw	r2,-20(fp)
   1fef0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1fef4:	e0bfff17 	ldw	r2,-4(fp)
   1fef8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   1fefc:	0005883a 	mov	r2,zero
}
   1ff00:	e037883a 	mov	sp,fp
   1ff04:	dfc00117 	ldw	ra,4(sp)
   1ff08:	df000017 	ldw	fp,0(sp)
   1ff0c:	dec00204 	addi	sp,sp,8
   1ff10:	f800283a 	ret

0001ff14 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   1ff14:	defff604 	addi	sp,sp,-40
   1ff18:	dfc00915 	stw	ra,36(sp)
   1ff1c:	df000815 	stw	fp,32(sp)
   1ff20:	df000804 	addi	fp,sp,32
   1ff24:	e13ffe15 	stw	r4,-8(fp)
   1ff28:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1ff2c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   1ff30:	e0bffe17 	ldw	r2,-8(fp)
   1ff34:	1000021e 	bne	r2,zero,1ff40 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   1ff38:	00800104 	movi	r2,4
   1ff3c:	00004a06 	br	20068 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   1ff40:	e0bffe17 	ldw	r2,-8(fp)
   1ff44:	10800003 	ldbu	r2,0(r2)
   1ff48:	10803fcc 	andi	r2,r2,255
   1ff4c:	108000a0 	cmpeqi	r2,r2,2
   1ff50:	1000021e 	bne	r2,zero,1ff5c <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   1ff54:	00800044 	movi	r2,1
   1ff58:	00004306 	br	20068 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ff5c:	0005303a 	rdctl	r2,status
   1ff60:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ff64:	e0fffd17 	ldw	r3,-12(fp)
   1ff68:	00bfff84 	movi	r2,-2
   1ff6c:	1884703a 	and	r2,r3,r2
   1ff70:	1001703a 	wrctl	status,r2
  
  return context;
   1ff74:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1ff78:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   1ff7c:	e0bffe17 	ldw	r2,-8(fp)
   1ff80:	10800283 	ldbu	r2,10(r2)
   1ff84:	10803fcc 	andi	r2,r2,255
   1ff88:	10000c26 	beq	r2,zero,1ffbc <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1ff8c:	000f883a 	mov	r7,zero
   1ff90:	01800104 	movi	r6,4
   1ff94:	e17fff17 	ldw	r5,-4(fp)
   1ff98:	e13ffe17 	ldw	r4,-8(fp)
   1ff9c:	001c3d00 	call	1c3d0 <OS_EventTaskRdy>
   1ffa0:	e0bff817 	ldw	r2,-32(fp)
   1ffa4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ffa8:	e0bff917 	ldw	r2,-28(fp)
   1ffac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   1ffb0:	001ce1c0 	call	1ce1c <OS_Sched>
        return (OS_ERR_NONE);
   1ffb4:	0005883a 	mov	r2,zero
   1ffb8:	00002b06 	br	20068 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   1ffbc:	e0bffe17 	ldw	r2,-8(fp)
   1ffc0:	10800117 	ldw	r2,4(r2)
   1ffc4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   1ffc8:	e0bffb17 	ldw	r2,-20(fp)
   1ffcc:	10c0058b 	ldhu	r3,22(r2)
   1ffd0:	e0bffb17 	ldw	r2,-20(fp)
   1ffd4:	1080050b 	ldhu	r2,20(r2)
   1ffd8:	18ffffcc 	andi	r3,r3,65535
   1ffdc:	10bfffcc 	andi	r2,r2,65535
   1ffe0:	18800636 	bltu	r3,r2,1fffc <OSQPost+0xe8>
   1ffe4:	e0bff817 	ldw	r2,-32(fp)
   1ffe8:	e0bffa15 	stw	r2,-24(fp)
   1ffec:	e0bffa17 	ldw	r2,-24(fp)
   1fff0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1fff4:	00800784 	movi	r2,30
   1fff8:	00001b06 	br	20068 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   1fffc:	e0bffb17 	ldw	r2,-20(fp)
   20000:	10800317 	ldw	r2,12(r2)
   20004:	11000104 	addi	r4,r2,4
   20008:	e0fffb17 	ldw	r3,-20(fp)
   2000c:	19000315 	stw	r4,12(r3)
   20010:	e0ffff17 	ldw	r3,-4(fp)
   20014:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   20018:	e0bffb17 	ldw	r2,-20(fp)
   2001c:	1080058b 	ldhu	r2,22(r2)
   20020:	10800044 	addi	r2,r2,1
   20024:	1007883a 	mov	r3,r2
   20028:	e0bffb17 	ldw	r2,-20(fp)
   2002c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   20030:	e0bffb17 	ldw	r2,-20(fp)
   20034:	10c00317 	ldw	r3,12(r2)
   20038:	e0bffb17 	ldw	r2,-20(fp)
   2003c:	10800217 	ldw	r2,8(r2)
   20040:	1880041e 	bne	r3,r2,20054 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   20044:	e0bffb17 	ldw	r2,-20(fp)
   20048:	10c00117 	ldw	r3,4(r2)
   2004c:	e0bffb17 	ldw	r2,-20(fp)
   20050:	10c00315 	stw	r3,12(r2)
   20054:	e0bff817 	ldw	r2,-32(fp)
   20058:	e0bffc15 	stw	r2,-16(fp)
   2005c:	e0bffc17 	ldw	r2,-16(fp)
   20060:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   20064:	0005883a 	mov	r2,zero
}
   20068:	e037883a 	mov	sp,fp
   2006c:	dfc00117 	ldw	ra,4(sp)
   20070:	df000017 	ldw	fp,0(sp)
   20074:	dec00204 	addi	sp,sp,8
   20078:	f800283a 	ret

0002007c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   2007c:	defff604 	addi	sp,sp,-40
   20080:	dfc00915 	stw	ra,36(sp)
   20084:	df000815 	stw	fp,32(sp)
   20088:	df000804 	addi	fp,sp,32
   2008c:	e13ffe15 	stw	r4,-8(fp)
   20090:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   20094:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   20098:	e0bffe17 	ldw	r2,-8(fp)
   2009c:	1000021e 	bne	r2,zero,200a8 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   200a0:	00800104 	movi	r2,4
   200a4:	00004c06 	br	201d8 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   200a8:	e0bffe17 	ldw	r2,-8(fp)
   200ac:	10800003 	ldbu	r2,0(r2)
   200b0:	10803fcc 	andi	r2,r2,255
   200b4:	108000a0 	cmpeqi	r2,r2,2
   200b8:	1000021e 	bne	r2,zero,200c4 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   200bc:	00800044 	movi	r2,1
   200c0:	00004506 	br	201d8 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   200c4:	0005303a 	rdctl	r2,status
   200c8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   200cc:	e0fffd17 	ldw	r3,-12(fp)
   200d0:	00bfff84 	movi	r2,-2
   200d4:	1884703a 	and	r2,r3,r2
   200d8:	1001703a 	wrctl	status,r2
  
  return context;
   200dc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   200e0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   200e4:	e0bffe17 	ldw	r2,-8(fp)
   200e8:	10800283 	ldbu	r2,10(r2)
   200ec:	10803fcc 	andi	r2,r2,255
   200f0:	10000c26 	beq	r2,zero,20124 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   200f4:	000f883a 	mov	r7,zero
   200f8:	01800104 	movi	r6,4
   200fc:	e17fff17 	ldw	r5,-4(fp)
   20100:	e13ffe17 	ldw	r4,-8(fp)
   20104:	001c3d00 	call	1c3d0 <OS_EventTaskRdy>
   20108:	e0bff817 	ldw	r2,-32(fp)
   2010c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20110:	e0bff917 	ldw	r2,-28(fp)
   20114:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   20118:	001ce1c0 	call	1ce1c <OS_Sched>
        return (OS_ERR_NONE);
   2011c:	0005883a 	mov	r2,zero
   20120:	00002d06 	br	201d8 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   20124:	e0bffe17 	ldw	r2,-8(fp)
   20128:	10800117 	ldw	r2,4(r2)
   2012c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   20130:	e0bffb17 	ldw	r2,-20(fp)
   20134:	10c0058b 	ldhu	r3,22(r2)
   20138:	e0bffb17 	ldw	r2,-20(fp)
   2013c:	1080050b 	ldhu	r2,20(r2)
   20140:	18ffffcc 	andi	r3,r3,65535
   20144:	10bfffcc 	andi	r2,r2,65535
   20148:	18800636 	bltu	r3,r2,20164 <OSQPostFront+0xe8>
   2014c:	e0bff817 	ldw	r2,-32(fp)
   20150:	e0bffa15 	stw	r2,-24(fp)
   20154:	e0bffa17 	ldw	r2,-24(fp)
   20158:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   2015c:	00800784 	movi	r2,30
   20160:	00001d06 	br	201d8 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   20164:	e0bffb17 	ldw	r2,-20(fp)
   20168:	10c00417 	ldw	r3,16(r2)
   2016c:	e0bffb17 	ldw	r2,-20(fp)
   20170:	10800117 	ldw	r2,4(r2)
   20174:	1880041e 	bne	r3,r2,20188 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   20178:	e0bffb17 	ldw	r2,-20(fp)
   2017c:	10c00217 	ldw	r3,8(r2)
   20180:	e0bffb17 	ldw	r2,-20(fp)
   20184:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   20188:	e0bffb17 	ldw	r2,-20(fp)
   2018c:	10800417 	ldw	r2,16(r2)
   20190:	10ffff04 	addi	r3,r2,-4
   20194:	e0bffb17 	ldw	r2,-20(fp)
   20198:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   2019c:	e0bffb17 	ldw	r2,-20(fp)
   201a0:	10800417 	ldw	r2,16(r2)
   201a4:	e0ffff17 	ldw	r3,-4(fp)
   201a8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	1080058b 	ldhu	r2,22(r2)
   201b4:	10800044 	addi	r2,r2,1
   201b8:	1007883a 	mov	r3,r2
   201bc:	e0bffb17 	ldw	r2,-20(fp)
   201c0:	10c0058d 	sth	r3,22(r2)
   201c4:	e0bff817 	ldw	r2,-32(fp)
   201c8:	e0bffc15 	stw	r2,-16(fp)
   201cc:	e0bffc17 	ldw	r2,-16(fp)
   201d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   201d4:	0005883a 	mov	r2,zero
}
   201d8:	e037883a 	mov	sp,fp
   201dc:	dfc00117 	ldw	ra,4(sp)
   201e0:	df000017 	ldw	fp,0(sp)
   201e4:	dec00204 	addi	sp,sp,8
   201e8:	f800283a 	ret

000201ec <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   201ec:	defff504 	addi	sp,sp,-44
   201f0:	dfc00a15 	stw	ra,40(sp)
   201f4:	df000915 	stw	fp,36(sp)
   201f8:	df000904 	addi	fp,sp,36
   201fc:	e13ffd15 	stw	r4,-12(fp)
   20200:	e17ffe15 	stw	r5,-8(fp)
   20204:	3005883a 	mov	r2,r6
   20208:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   2020c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   20210:	e0bffd17 	ldw	r2,-12(fp)
   20214:	1000021e 	bne	r2,zero,20220 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   20218:	00800104 	movi	r2,4
   2021c:	00007106 	br	203e4 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   20220:	e0bffd17 	ldw	r2,-12(fp)
   20224:	10800003 	ldbu	r2,0(r2)
   20228:	10803fcc 	andi	r2,r2,255
   2022c:	108000a0 	cmpeqi	r2,r2,2
   20230:	1000021e 	bne	r2,zero,2023c <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   20234:	00800044 	movi	r2,1
   20238:	00006a06 	br	203e4 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2023c:	0005303a 	rdctl	r2,status
   20240:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20244:	e0fffc17 	ldw	r3,-16(fp)
   20248:	00bfff84 	movi	r2,-2
   2024c:	1884703a 	and	r2,r3,r2
   20250:	1001703a 	wrctl	status,r2
  
  return context;
   20254:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   20258:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   2025c:	e0bffd17 	ldw	r2,-12(fp)
   20260:	10800283 	ldbu	r2,10(r2)
   20264:	10803fcc 	andi	r2,r2,255
   20268:	10001d26 	beq	r2,zero,202e0 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   2026c:	e0bfff03 	ldbu	r2,-4(fp)
   20270:	1080004c 	andi	r2,r2,1
   20274:	10000b26 	beq	r2,zero,202a4 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   20278:	00000506 	br	20290 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   2027c:	000f883a 	mov	r7,zero
   20280:	01800104 	movi	r6,4
   20284:	e17ffe17 	ldw	r5,-8(fp)
   20288:	e13ffd17 	ldw	r4,-12(fp)
   2028c:	001c3d00 	call	1c3d0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   20290:	e0bffd17 	ldw	r2,-12(fp)
   20294:	10800283 	ldbu	r2,10(r2)
   20298:	10803fcc 	andi	r2,r2,255
   2029c:	103ff71e 	bne	r2,zero,2027c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf702027c>
   202a0:	00000506 	br	202b8 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   202a4:	000f883a 	mov	r7,zero
   202a8:	01800104 	movi	r6,4
   202ac:	e17ffe17 	ldw	r5,-8(fp)
   202b0:	e13ffd17 	ldw	r4,-12(fp)
   202b4:	001c3d00 	call	1c3d0 <OS_EventTaskRdy>
   202b8:	e0bff717 	ldw	r2,-36(fp)
   202bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   202c0:	e0bff817 	ldw	r2,-32(fp)
   202c4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   202c8:	e0bfff03 	ldbu	r2,-4(fp)
   202cc:	1080010c 	andi	r2,r2,4
   202d0:	1000011e 	bne	r2,zero,202d8 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   202d4:	001ce1c0 	call	1ce1c <OS_Sched>
        }
        return (OS_ERR_NONE);
   202d8:	0005883a 	mov	r2,zero
   202dc:	00004106 	br	203e4 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   202e0:	e0bffd17 	ldw	r2,-12(fp)
   202e4:	10800117 	ldw	r2,4(r2)
   202e8:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   202ec:	e0bffa17 	ldw	r2,-24(fp)
   202f0:	10c0058b 	ldhu	r3,22(r2)
   202f4:	e0bffa17 	ldw	r2,-24(fp)
   202f8:	1080050b 	ldhu	r2,20(r2)
   202fc:	18ffffcc 	andi	r3,r3,65535
   20300:	10bfffcc 	andi	r2,r2,65535
   20304:	18800636 	bltu	r3,r2,20320 <OSQPostOpt+0x134>
   20308:	e0bff717 	ldw	r2,-36(fp)
   2030c:	e0bff915 	stw	r2,-28(fp)
   20310:	e0bff917 	ldw	r2,-28(fp)
   20314:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   20318:	00800784 	movi	r2,30
   2031c:	00003106 	br	203e4 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   20320:	e0bfff03 	ldbu	r2,-4(fp)
   20324:	1080008c 	andi	r2,r2,2
   20328:	10001326 	beq	r2,zero,20378 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   2032c:	e0bffa17 	ldw	r2,-24(fp)
   20330:	10c00417 	ldw	r3,16(r2)
   20334:	e0bffa17 	ldw	r2,-24(fp)
   20338:	10800117 	ldw	r2,4(r2)
   2033c:	1880041e 	bne	r3,r2,20350 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   20340:	e0bffa17 	ldw	r2,-24(fp)
   20344:	10c00217 	ldw	r3,8(r2)
   20348:	e0bffa17 	ldw	r2,-24(fp)
   2034c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   20350:	e0bffa17 	ldw	r2,-24(fp)
   20354:	10800417 	ldw	r2,16(r2)
   20358:	10ffff04 	addi	r3,r2,-4
   2035c:	e0bffa17 	ldw	r2,-24(fp)
   20360:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   20364:	e0bffa17 	ldw	r2,-24(fp)
   20368:	10800417 	ldw	r2,16(r2)
   2036c:	e0fffe17 	ldw	r3,-8(fp)
   20370:	10c00015 	stw	r3,0(r2)
   20374:	00001006 	br	203b8 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   20378:	e0bffa17 	ldw	r2,-24(fp)
   2037c:	10800317 	ldw	r2,12(r2)
   20380:	11000104 	addi	r4,r2,4
   20384:	e0fffa17 	ldw	r3,-24(fp)
   20388:	19000315 	stw	r4,12(r3)
   2038c:	e0fffe17 	ldw	r3,-8(fp)
   20390:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   20394:	e0bffa17 	ldw	r2,-24(fp)
   20398:	10c00317 	ldw	r3,12(r2)
   2039c:	e0bffa17 	ldw	r2,-24(fp)
   203a0:	10800217 	ldw	r2,8(r2)
   203a4:	1880041e 	bne	r3,r2,203b8 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   203a8:	e0bffa17 	ldw	r2,-24(fp)
   203ac:	10c00117 	ldw	r3,4(r2)
   203b0:	e0bffa17 	ldw	r2,-24(fp)
   203b4:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   203b8:	e0bffa17 	ldw	r2,-24(fp)
   203bc:	1080058b 	ldhu	r2,22(r2)
   203c0:	10800044 	addi	r2,r2,1
   203c4:	1007883a 	mov	r3,r2
   203c8:	e0bffa17 	ldw	r2,-24(fp)
   203cc:	10c0058d 	sth	r3,22(r2)
   203d0:	e0bff717 	ldw	r2,-36(fp)
   203d4:	e0bffb15 	stw	r2,-20(fp)
   203d8:	e0bffb17 	ldw	r2,-20(fp)
   203dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   203e0:	0005883a 	mov	r2,zero
}
   203e4:	e037883a 	mov	sp,fp
   203e8:	dfc00117 	ldw	ra,4(sp)
   203ec:	df000017 	ldw	fp,0(sp)
   203f0:	dec00204 	addi	sp,sp,8
   203f4:	f800283a 	ret

000203f8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   203f8:	defff604 	addi	sp,sp,-40
   203fc:	df000915 	stw	fp,36(sp)
   20400:	df000904 	addi	fp,sp,36
   20404:	e13ffe15 	stw	r4,-8(fp)
   20408:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   2040c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   20410:	e0bffe17 	ldw	r2,-8(fp)
   20414:	1000021e 	bne	r2,zero,20420 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   20418:	00800104 	movi	r2,4
   2041c:	00004906 	br	20544 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   20420:	e0bfff17 	ldw	r2,-4(fp)
   20424:	1000021e 	bne	r2,zero,20430 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   20428:	00800244 	movi	r2,9
   2042c:	00004506 	br	20544 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   20430:	e0bffe17 	ldw	r2,-8(fp)
   20434:	10800003 	ldbu	r2,0(r2)
   20438:	10803fcc 	andi	r2,r2,255
   2043c:	108000a0 	cmpeqi	r2,r2,2
   20440:	1000021e 	bne	r2,zero,2044c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   20444:	00800044 	movi	r2,1
   20448:	00003e06 	br	20544 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2044c:	0005303a 	rdctl	r2,status
   20450:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20454:	e0fffd17 	ldw	r3,-12(fp)
   20458:	00bfff84 	movi	r2,-2
   2045c:	1884703a 	and	r2,r3,r2
   20460:	1001703a 	wrctl	status,r2
  
  return context;
   20464:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   20468:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   2046c:	e0bffe17 	ldw	r2,-8(fp)
   20470:	10c00283 	ldbu	r3,10(r2)
   20474:	e0bfff17 	ldw	r2,-4(fp)
   20478:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   2047c:	e0bffe17 	ldw	r2,-8(fp)
   20480:	108002c4 	addi	r2,r2,11
   20484:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   20488:	e0bfff17 	ldw	r2,-4(fp)
   2048c:	10800204 	addi	r2,r2,8
   20490:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   20494:	e03ff705 	stb	zero,-36(fp)
   20498:	00000b06 	br	204c8 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   2049c:	e0bff917 	ldw	r2,-28(fp)
   204a0:	10c00044 	addi	r3,r2,1
   204a4:	e0fff915 	stw	r3,-28(fp)
   204a8:	e0fff817 	ldw	r3,-32(fp)
   204ac:	19000044 	addi	r4,r3,1
   204b0:	e13ff815 	stw	r4,-32(fp)
   204b4:	18c00003 	ldbu	r3,0(r3)
   204b8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   204bc:	e0bff703 	ldbu	r2,-36(fp)
   204c0:	10800044 	addi	r2,r2,1
   204c4:	e0bff705 	stb	r2,-36(fp)
   204c8:	e0bff703 	ldbu	r2,-36(fp)
   204cc:	108000f0 	cmpltui	r2,r2,3
   204d0:	103ff21e 	bne	r2,zero,2049c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf702049c>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   204d4:	e0bffe17 	ldw	r2,-8(fp)
   204d8:	10800117 	ldw	r2,4(r2)
   204dc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   204e0:	e0bffc17 	ldw	r2,-16(fp)
   204e4:	1080058b 	ldhu	r2,22(r2)
   204e8:	10bfffcc 	andi	r2,r2,65535
   204ec:	10000626 	beq	r2,zero,20508 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   204f0:	e0bffc17 	ldw	r2,-16(fp)
   204f4:	10800417 	ldw	r2,16(r2)
   204f8:	10c00017 	ldw	r3,0(r2)
   204fc:	e0bfff17 	ldw	r2,-4(fp)
   20500:	10c00015 	stw	r3,0(r2)
   20504:	00000206 	br	20510 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   20508:	e0bfff17 	ldw	r2,-4(fp)
   2050c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   20510:	e0bffc17 	ldw	r2,-16(fp)
   20514:	10c0058b 	ldhu	r3,22(r2)
   20518:	e0bfff17 	ldw	r2,-4(fp)
   2051c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   20520:	e0bffc17 	ldw	r2,-16(fp)
   20524:	10c0050b 	ldhu	r3,20(r2)
   20528:	e0bfff17 	ldw	r2,-4(fp)
   2052c:	10c0018d 	sth	r3,6(r2)
   20530:	e0bffa17 	ldw	r2,-24(fp)
   20534:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20538:	e0bffb17 	ldw	r2,-20(fp)
   2053c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   20540:	0005883a 	mov	r2,zero
}
   20544:	e037883a 	mov	sp,fp
   20548:	df000017 	ldw	fp,0(sp)
   2054c:	dec00104 	addi	sp,sp,4
   20550:	f800283a 	ret

00020554 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   20554:	defffb04 	addi	sp,sp,-20
   20558:	dfc00415 	stw	ra,16(sp)
   2055c:	df000315 	stw	fp,12(sp)
   20560:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   20564:	01407804 	movi	r5,480
   20568:	01000134 	movhi	r4,4
   2056c:	2127f504 	addi	r4,r4,-24620
   20570:	001cd600 	call	1cd60 <OS_MemClr>
    pq1 = &OSQTbl[0];
   20574:	00800134 	movhi	r2,4
   20578:	10a7f504 	addi	r2,r2,-24620
   2057c:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   20580:	00800134 	movhi	r2,4
   20584:	10a7fb04 	addi	r2,r2,-24596
   20588:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   2058c:	e03ffd0d 	sth	zero,-12(fp)
   20590:	00000c06 	br	205c4 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   20594:	e0bffe17 	ldw	r2,-8(fp)
   20598:	e0ffff17 	ldw	r3,-4(fp)
   2059c:	10c00015 	stw	r3,0(r2)
        pq1++;
   205a0:	e0bffe17 	ldw	r2,-8(fp)
   205a4:	10800604 	addi	r2,r2,24
   205a8:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   205ac:	e0bfff17 	ldw	r2,-4(fp)
   205b0:	10800604 	addi	r2,r2,24
   205b4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   205b8:	e0bffd0b 	ldhu	r2,-12(fp)
   205bc:	10800044 	addi	r2,r2,1
   205c0:	e0bffd0d 	sth	r2,-12(fp)
   205c4:	e0bffd0b 	ldhu	r2,-12(fp)
   205c8:	108004f0 	cmpltui	r2,r2,19
   205cc:	103ff11e 	bne	r2,zero,20594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7020594>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   205d0:	e0bffe17 	ldw	r2,-8(fp)
   205d4:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   205d8:	00800134 	movhi	r2,4
   205dc:	10a7f504 	addi	r2,r2,-24620
   205e0:	d0a85815 	stw	r2,-24224(gp)
#endif
}
   205e4:	0001883a 	nop
   205e8:	e037883a 	mov	sp,fp
   205ec:	dfc00117 	ldw	ra,4(sp)
   205f0:	df000017 	ldw	fp,0(sp)
   205f4:	dec00204 	addi	sp,sp,8
   205f8:	f800283a 	ret

000205fc <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   205fc:	defffa04 	addi	sp,sp,-24
   20600:	df000515 	stw	fp,20(sp)
   20604:	df000504 	addi	fp,sp,20
   20608:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   2060c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   20610:	e0bfff17 	ldw	r2,-4(fp)
   20614:	1000021e 	bne	r2,zero,20620 <OSSemAccept+0x24>
        return (0);
   20618:	0005883a 	mov	r2,zero
   2061c:	00001f06 	br	2069c <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   20620:	e0bfff17 	ldw	r2,-4(fp)
   20624:	10800003 	ldbu	r2,0(r2)
   20628:	10803fcc 	andi	r2,r2,255
   2062c:	108000e0 	cmpeqi	r2,r2,3
   20630:	1000021e 	bne	r2,zero,2063c <OSSemAccept+0x40>
        return (0);
   20634:	0005883a 	mov	r2,zero
   20638:	00001806 	br	2069c <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2063c:	0005303a 	rdctl	r2,status
   20640:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20644:	e0fffe17 	ldw	r3,-8(fp)
   20648:	00bfff84 	movi	r2,-2
   2064c:	1884703a 	and	r2,r3,r2
   20650:	1001703a 	wrctl	status,r2
  
  return context;
   20654:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   20658:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   2065c:	e0bfff17 	ldw	r2,-4(fp)
   20660:	1080020b 	ldhu	r2,8(r2)
   20664:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   20668:	e0bffd0b 	ldhu	r2,-12(fp)
   2066c:	10000626 	beq	r2,zero,20688 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   20670:	e0bfff17 	ldw	r2,-4(fp)
   20674:	1080020b 	ldhu	r2,8(r2)
   20678:	10bfffc4 	addi	r2,r2,-1
   2067c:	1007883a 	mov	r3,r2
   20680:	e0bfff17 	ldw	r2,-4(fp)
   20684:	10c0020d 	sth	r3,8(r2)
   20688:	e0bffb17 	ldw	r2,-20(fp)
   2068c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20690:	e0bffc17 	ldw	r2,-16(fp)
   20694:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   20698:	e0bffd0b 	ldhu	r2,-12(fp)
}
   2069c:	e037883a 	mov	sp,fp
   206a0:	df000017 	ldw	fp,0(sp)
   206a4:	dec00104 	addi	sp,sp,4
   206a8:	f800283a 	ret

000206ac <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   206ac:	defff904 	addi	sp,sp,-28
   206b0:	dfc00615 	stw	ra,24(sp)
   206b4:	df000515 	stw	fp,20(sp)
   206b8:	df000504 	addi	fp,sp,20
   206bc:	2005883a 	mov	r2,r4
   206c0:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   206c4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   206c8:	d0a85b03 	ldbu	r2,-24212(gp)
   206cc:	10803fcc 	andi	r2,r2,255
   206d0:	10000226 	beq	r2,zero,206dc <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   206d4:	0005883a 	mov	r2,zero
   206d8:	00002506 	br	20770 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   206dc:	0005303a 	rdctl	r2,status
   206e0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   206e4:	e0fffe17 	ldw	r3,-8(fp)
   206e8:	00bfff84 	movi	r2,-2
   206ec:	1884703a 	and	r2,r3,r2
   206f0:	1001703a 	wrctl	status,r2
  
  return context;
   206f4:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   206f8:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   206fc:	d0a85a17 	ldw	r2,-24216(gp)
   20700:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   20704:	d0a85a17 	ldw	r2,-24216(gp)
   20708:	10000326 	beq	r2,zero,20718 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   2070c:	d0a85a17 	ldw	r2,-24216(gp)
   20710:	10800117 	ldw	r2,4(r2)
   20714:	d0a85a15 	stw	r2,-24216(gp)
   20718:	e0bffb17 	ldw	r2,-20(fp)
   2071c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20720:	e0bffc17 	ldw	r2,-16(fp)
   20724:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   20728:	e0bffd17 	ldw	r2,-12(fp)
   2072c:	10000f26 	beq	r2,zero,2076c <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   20730:	e0bffd17 	ldw	r2,-12(fp)
   20734:	00c000c4 	movi	r3,3
   20738:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   2073c:	e0bffd17 	ldw	r2,-12(fp)
   20740:	e0ffff0b 	ldhu	r3,-4(fp)
   20744:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   20748:	e0bffd17 	ldw	r2,-12(fp)
   2074c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   20750:	e0bffd17 	ldw	r2,-12(fp)
   20754:	00c00fc4 	movi	r3,63
   20758:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   2075c:	e0bffd17 	ldw	r2,-12(fp)
   20760:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   20764:	e13ffd17 	ldw	r4,-12(fp)
   20768:	001c9800 	call	1c980 <OS_EventWaitListInit>
    }
    return (pevent);
   2076c:	e0bffd17 	ldw	r2,-12(fp)
}
   20770:	e037883a 	mov	sp,fp
   20774:	dfc00117 	ldw	ra,4(sp)
   20778:	df000017 	ldw	fp,0(sp)
   2077c:	dec00204 	addi	sp,sp,8
   20780:	f800283a 	ret

00020784 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   20784:	defff304 	addi	sp,sp,-52
   20788:	dfc00c15 	stw	ra,48(sp)
   2078c:	df000b15 	stw	fp,44(sp)
   20790:	df000b04 	addi	fp,sp,44
   20794:	e13ffd15 	stw	r4,-12(fp)
   20798:	2805883a 	mov	r2,r5
   2079c:	e1bfff15 	stw	r6,-4(fp)
   207a0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   207a4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   207a8:	e0bfff17 	ldw	r2,-4(fp)
   207ac:	1000021e 	bne	r2,zero,207b8 <OSSemDel+0x34>
        return (pevent);
   207b0:	e0bffd17 	ldw	r2,-12(fp)
   207b4:	00007e06 	br	209b0 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   207b8:	e0bffd17 	ldw	r2,-12(fp)
   207bc:	1000051e 	bne	r2,zero,207d4 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   207c0:	e0bfff17 	ldw	r2,-4(fp)
   207c4:	00c00104 	movi	r3,4
   207c8:	10c00005 	stb	r3,0(r2)
        return (pevent);
   207cc:	e0bffd17 	ldw	r2,-12(fp)
   207d0:	00007706 	br	209b0 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   207d4:	e0bffd17 	ldw	r2,-12(fp)
   207d8:	10800003 	ldbu	r2,0(r2)
   207dc:	10803fcc 	andi	r2,r2,255
   207e0:	108000e0 	cmpeqi	r2,r2,3
   207e4:	1000051e 	bne	r2,zero,207fc <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   207e8:	e0bfff17 	ldw	r2,-4(fp)
   207ec:	00c00044 	movi	r3,1
   207f0:	10c00005 	stb	r3,0(r2)
        return (pevent);
   207f4:	e0bffd17 	ldw	r2,-12(fp)
   207f8:	00006d06 	br	209b0 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   207fc:	d0a85b03 	ldbu	r2,-24212(gp)
   20800:	10803fcc 	andi	r2,r2,255
   20804:	10000526 	beq	r2,zero,2081c <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   20808:	e0bfff17 	ldw	r2,-4(fp)
   2080c:	00c003c4 	movi	r3,15
   20810:	10c00005 	stb	r3,0(r2)
        return (pevent);
   20814:	e0bffd17 	ldw	r2,-12(fp)
   20818:	00006506 	br	209b0 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2081c:	0005303a 	rdctl	r2,status
   20820:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20824:	e0fffc17 	ldw	r3,-16(fp)
   20828:	00bfff84 	movi	r2,-2
   2082c:	1884703a 	and	r2,r3,r2
   20830:	1001703a 	wrctl	status,r2
  
  return context;
   20834:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   20838:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   2083c:	e0bffd17 	ldw	r2,-12(fp)
   20840:	10800283 	ldbu	r2,10(r2)
   20844:	10803fcc 	andi	r2,r2,255
   20848:	10000326 	beq	r2,zero,20858 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   2084c:	00800044 	movi	r2,1
   20850:	e0bff505 	stb	r2,-44(fp)
   20854:	00000106 	br	2085c <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   20858:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   2085c:	e0bffe03 	ldbu	r2,-8(fp)
   20860:	10000326 	beq	r2,zero,20870 <OSSemDel+0xec>
   20864:	10800060 	cmpeqi	r2,r2,1
   20868:	1000281e 	bne	r2,zero,2090c <OSSemDel+0x188>
   2086c:	00004506 	br	20984 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   20870:	e0bff503 	ldbu	r2,-44(fp)
   20874:	1000161e 	bne	r2,zero,208d0 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   20878:	e0bffd17 	ldw	r2,-12(fp)
   2087c:	00c00fc4 	movi	r3,63
   20880:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   20884:	e0bffd17 	ldw	r2,-12(fp)
   20888:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   2088c:	e0bffd17 	ldw	r2,-12(fp)
   20890:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   20894:	d0e85a17 	ldw	r3,-24216(gp)
   20898:	e0bffd17 	ldw	r2,-12(fp)
   2089c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   208a0:	e0bffd17 	ldw	r2,-12(fp)
   208a4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   208a8:	e0bffd17 	ldw	r2,-12(fp)
   208ac:	d0a85a15 	stw	r2,-24216(gp)
   208b0:	e0bff717 	ldw	r2,-36(fp)
   208b4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   208b8:	e0bff817 	ldw	r2,-32(fp)
   208bc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   208c0:	e0bfff17 	ldw	r2,-4(fp)
   208c4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   208c8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   208cc:	00003706 	br	209ac <OSSemDel+0x228>
   208d0:	e0bff717 	ldw	r2,-36(fp)
   208d4:	e0bff915 	stw	r2,-28(fp)
   208d8:	e0bff917 	ldw	r2,-28(fp)
   208dc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   208e0:	e0bfff17 	ldw	r2,-4(fp)
   208e4:	00c01244 	movi	r3,73
   208e8:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   208ec:	e0bffd17 	ldw	r2,-12(fp)
   208f0:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   208f4:	00002d06 	br	209ac <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   208f8:	000f883a 	mov	r7,zero
   208fc:	01800044 	movi	r6,1
   20900:	000b883a 	mov	r5,zero
   20904:	e13ffd17 	ldw	r4,-12(fp)
   20908:	001c3d00 	call	1c3d0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   2090c:	e0bffd17 	ldw	r2,-12(fp)
   20910:	10800283 	ldbu	r2,10(r2)
   20914:	10803fcc 	andi	r2,r2,255
   20918:	103ff71e 	bne	r2,zero,208f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70208f8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   2091c:	e0bffd17 	ldw	r2,-12(fp)
   20920:	00c00fc4 	movi	r3,63
   20924:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   20928:	e0bffd17 	ldw	r2,-12(fp)
   2092c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   20930:	e0bffd17 	ldw	r2,-12(fp)
   20934:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   20938:	d0e85a17 	ldw	r3,-24216(gp)
   2093c:	e0bffd17 	ldw	r2,-12(fp)
   20940:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   20944:	e0bffd17 	ldw	r2,-12(fp)
   20948:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   2094c:	e0bffd17 	ldw	r2,-12(fp)
   20950:	d0a85a15 	stw	r2,-24216(gp)
   20954:	e0bff717 	ldw	r2,-36(fp)
   20958:	e0bffa15 	stw	r2,-24(fp)
   2095c:	e0bffa17 	ldw	r2,-24(fp)
   20960:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   20964:	e0bff503 	ldbu	r2,-44(fp)
   20968:	10800058 	cmpnei	r2,r2,1
   2096c:	1000011e 	bne	r2,zero,20974 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   20970:	001ce1c0 	call	1ce1c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   20974:	e0bfff17 	ldw	r2,-4(fp)
   20978:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   2097c:	e03ff615 	stw	zero,-40(fp)
             break;
   20980:	00000a06 	br	209ac <OSSemDel+0x228>
   20984:	e0bff717 	ldw	r2,-36(fp)
   20988:	e0bffb15 	stw	r2,-20(fp)
   2098c:	e0bffb17 	ldw	r2,-20(fp)
   20990:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   20994:	e0bfff17 	ldw	r2,-4(fp)
   20998:	00c001c4 	movi	r3,7
   2099c:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   209a0:	e0bffd17 	ldw	r2,-12(fp)
   209a4:	e0bff615 	stw	r2,-40(fp)
             break;
   209a8:	0001883a 	nop
    }
    return (pevent_return);
   209ac:	e0bff617 	ldw	r2,-40(fp)
}
   209b0:	e037883a 	mov	sp,fp
   209b4:	dfc00117 	ldw	ra,4(sp)
   209b8:	df000017 	ldw	fp,0(sp)
   209bc:	dec00204 	addi	sp,sp,8
   209c0:	f800283a 	ret

000209c4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   209c4:	defff504 	addi	sp,sp,-44
   209c8:	dfc00a15 	stw	ra,40(sp)
   209cc:	df000915 	stw	fp,36(sp)
   209d0:	df000904 	addi	fp,sp,36
   209d4:	e13ffd15 	stw	r4,-12(fp)
   209d8:	2805883a 	mov	r2,r5
   209dc:	e1bfff15 	stw	r6,-4(fp)
   209e0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   209e4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   209e8:	e0bfff17 	ldw	r2,-4(fp)
   209ec:	10007226 	beq	r2,zero,20bb8 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   209f0:	e0bffd17 	ldw	r2,-12(fp)
   209f4:	1000041e 	bne	r2,zero,20a08 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   209f8:	e0bfff17 	ldw	r2,-4(fp)
   209fc:	00c00104 	movi	r3,4
   20a00:	10c00005 	stb	r3,0(r2)
        return;
   20a04:	00006d06 	br	20bbc <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   20a08:	e0bffd17 	ldw	r2,-12(fp)
   20a0c:	10800003 	ldbu	r2,0(r2)
   20a10:	10803fcc 	andi	r2,r2,255
   20a14:	108000e0 	cmpeqi	r2,r2,3
   20a18:	1000041e 	bne	r2,zero,20a2c <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   20a1c:	e0bfff17 	ldw	r2,-4(fp)
   20a20:	00c00044 	movi	r3,1
   20a24:	10c00005 	stb	r3,0(r2)
        return;
   20a28:	00006406 	br	20bbc <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   20a2c:	d0a85b03 	ldbu	r2,-24212(gp)
   20a30:	10803fcc 	andi	r2,r2,255
   20a34:	10000426 	beq	r2,zero,20a48 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   20a38:	e0bfff17 	ldw	r2,-4(fp)
   20a3c:	00c00084 	movi	r3,2
   20a40:	10c00005 	stb	r3,0(r2)
        return;
   20a44:	00005d06 	br	20bbc <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   20a48:	d0a84d03 	ldbu	r2,-24268(gp)
   20a4c:	10803fcc 	andi	r2,r2,255
   20a50:	10000426 	beq	r2,zero,20a64 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   20a54:	e0bfff17 	ldw	r2,-4(fp)
   20a58:	00c00344 	movi	r3,13
   20a5c:	10c00005 	stb	r3,0(r2)
        return;
   20a60:	00005606 	br	20bbc <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20a64:	0005303a 	rdctl	r2,status
   20a68:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20a6c:	e0fffc17 	ldw	r3,-16(fp)
   20a70:	00bfff84 	movi	r2,-2
   20a74:	1884703a 	and	r2,r3,r2
   20a78:	1001703a 	wrctl	status,r2
  
  return context;
   20a7c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   20a80:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   20a84:	e0bffd17 	ldw	r2,-12(fp)
   20a88:	1080020b 	ldhu	r2,8(r2)
   20a8c:	10bfffcc 	andi	r2,r2,65535
   20a90:	10000d26 	beq	r2,zero,20ac8 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   20a94:	e0bffd17 	ldw	r2,-12(fp)
   20a98:	1080020b 	ldhu	r2,8(r2)
   20a9c:	10bfffc4 	addi	r2,r2,-1
   20aa0:	1007883a 	mov	r3,r2
   20aa4:	e0bffd17 	ldw	r2,-12(fp)
   20aa8:	10c0020d 	sth	r3,8(r2)
   20aac:	e0bff717 	ldw	r2,-36(fp)
   20ab0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20ab4:	e0bff817 	ldw	r2,-32(fp)
   20ab8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   20abc:	e0bfff17 	ldw	r2,-4(fp)
   20ac0:	10000005 	stb	zero,0(r2)
        return;
   20ac4:	00003d06 	br	20bbc <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   20ac8:	d0a85c17 	ldw	r2,-24208(gp)
   20acc:	d0e85c17 	ldw	r3,-24208(gp)
   20ad0:	18c00c03 	ldbu	r3,48(r3)
   20ad4:	18c00054 	ori	r3,r3,1
   20ad8:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   20adc:	d0a85c17 	ldw	r2,-24208(gp)
   20ae0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   20ae4:	d0a85c17 	ldw	r2,-24208(gp)
   20ae8:	e0fffe0b 	ldhu	r3,-8(fp)
   20aec:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   20af0:	e13ffd17 	ldw	r4,-12(fp)
   20af4:	001c5680 	call	1c568 <OS_EventTaskWait>
   20af8:	e0bff717 	ldw	r2,-36(fp)
   20afc:	e0bffb15 	stw	r2,-20(fp)
   20b00:	e0bffb17 	ldw	r2,-20(fp)
   20b04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   20b08:	001ce1c0 	call	1ce1c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20b0c:	0005303a 	rdctl	r2,status
   20b10:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20b14:	e0fff917 	ldw	r3,-28(fp)
   20b18:	00bfff84 	movi	r2,-2
   20b1c:	1884703a 	and	r2,r3,r2
   20b20:	1001703a 	wrctl	status,r2
  
  return context;
   20b24:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   20b28:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   20b2c:	d0a85c17 	ldw	r2,-24208(gp)
   20b30:	10800c43 	ldbu	r2,49(r2)
   20b34:	10803fcc 	andi	r2,r2,255
   20b38:	10000326 	beq	r2,zero,20b48 <OSSemPend+0x184>
   20b3c:	108000a0 	cmpeqi	r2,r2,2
   20b40:	1000041e 	bne	r2,zero,20b54 <OSSemPend+0x190>
   20b44:	00000706 	br	20b64 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   20b48:	e0bfff17 	ldw	r2,-4(fp)
   20b4c:	10000005 	stb	zero,0(r2)
             break;
   20b50:	00000c06 	br	20b84 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   20b54:	e0bfff17 	ldw	r2,-4(fp)
   20b58:	00c00384 	movi	r3,14
   20b5c:	10c00005 	stb	r3,0(r2)
             break;
   20b60:	00000806 	br	20b84 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   20b64:	d0a85c17 	ldw	r2,-24208(gp)
   20b68:	e17ffd17 	ldw	r5,-12(fp)
   20b6c:	1009883a 	mov	r4,r2
   20b70:	001c7c80 	call	1c7c8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   20b74:	e0bfff17 	ldw	r2,-4(fp)
   20b78:	00c00284 	movi	r3,10
   20b7c:	10c00005 	stb	r3,0(r2)
             break;
   20b80:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   20b84:	d0a85c17 	ldw	r2,-24208(gp)
   20b88:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   20b8c:	d0a85c17 	ldw	r2,-24208(gp)
   20b90:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   20b94:	d0a85c17 	ldw	r2,-24208(gp)
   20b98:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   20b9c:	d0a85c17 	ldw	r2,-24208(gp)
   20ba0:	10000815 	stw	zero,32(r2)
   20ba4:	e0bff717 	ldw	r2,-36(fp)
   20ba8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20bac:	e0bffa17 	ldw	r2,-24(fp)
   20bb0:	1001703a 	wrctl	status,r2
   20bb4:	00000106 	br	20bbc <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   20bb8:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   20bbc:	e037883a 	mov	sp,fp
   20bc0:	dfc00117 	ldw	ra,4(sp)
   20bc4:	df000017 	ldw	fp,0(sp)
   20bc8:	dec00204 	addi	sp,sp,8
   20bcc:	f800283a 	ret

00020bd0 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   20bd0:	defff604 	addi	sp,sp,-40
   20bd4:	dfc00915 	stw	ra,36(sp)
   20bd8:	df000815 	stw	fp,32(sp)
   20bdc:	df000804 	addi	fp,sp,32
   20be0:	e13ffd15 	stw	r4,-12(fp)
   20be4:	2805883a 	mov	r2,r5
   20be8:	e1bfff15 	stw	r6,-4(fp)
   20bec:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   20bf0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   20bf4:	e0bfff17 	ldw	r2,-4(fp)
   20bf8:	1000021e 	bne	r2,zero,20c04 <OSSemPendAbort+0x34>
        return (0);
   20bfc:	0005883a 	mov	r2,zero
   20c00:	00004906 	br	20d28 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   20c04:	e0bffd17 	ldw	r2,-12(fp)
   20c08:	1000051e 	bne	r2,zero,20c20 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   20c0c:	e0bfff17 	ldw	r2,-4(fp)
   20c10:	00c00104 	movi	r3,4
   20c14:	10c00005 	stb	r3,0(r2)
        return (0);
   20c18:	0005883a 	mov	r2,zero
   20c1c:	00004206 	br	20d28 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   20c20:	e0bffd17 	ldw	r2,-12(fp)
   20c24:	10800003 	ldbu	r2,0(r2)
   20c28:	10803fcc 	andi	r2,r2,255
   20c2c:	108000e0 	cmpeqi	r2,r2,3
   20c30:	1000051e 	bne	r2,zero,20c48 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   20c34:	e0bfff17 	ldw	r2,-4(fp)
   20c38:	00c00044 	movi	r3,1
   20c3c:	10c00005 	stb	r3,0(r2)
        return (0);
   20c40:	0005883a 	mov	r2,zero
   20c44:	00003806 	br	20d28 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20c48:	0005303a 	rdctl	r2,status
   20c4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20c50:	e0fffc17 	ldw	r3,-16(fp)
   20c54:	00bfff84 	movi	r2,-2
   20c58:	1884703a 	and	r2,r3,r2
   20c5c:	1001703a 	wrctl	status,r2
  
  return context;
   20c60:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   20c64:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   20c68:	e0bffd17 	ldw	r2,-12(fp)
   20c6c:	10800283 	ldbu	r2,10(r2)
   20c70:	10803fcc 	andi	r2,r2,255
   20c74:	10002526 	beq	r2,zero,20d0c <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   20c78:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   20c7c:	e0bffe03 	ldbu	r2,-8(fp)
   20c80:	10800060 	cmpeqi	r2,r2,1
   20c84:	10000e26 	beq	r2,zero,20cc0 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   20c88:	00000806 	br	20cac <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   20c8c:	01c00084 	movi	r7,2
   20c90:	01800044 	movi	r6,1
   20c94:	000b883a 	mov	r5,zero
   20c98:	e13ffd17 	ldw	r4,-12(fp)
   20c9c:	001c3d00 	call	1c3d0 <OS_EventTaskRdy>
                     nbr_tasks++;
   20ca0:	e0bff803 	ldbu	r2,-32(fp)
   20ca4:	10800044 	addi	r2,r2,1
   20ca8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   20cac:	e0bffd17 	ldw	r2,-12(fp)
   20cb0:	10800283 	ldbu	r2,10(r2)
   20cb4:	10803fcc 	andi	r2,r2,255
   20cb8:	103ff41e 	bne	r2,zero,20c8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7020c8c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   20cbc:	00000906 	br	20ce4 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   20cc0:	01c00084 	movi	r7,2
   20cc4:	01800044 	movi	r6,1
   20cc8:	000b883a 	mov	r5,zero
   20ccc:	e13ffd17 	ldw	r4,-12(fp)
   20cd0:	001c3d00 	call	1c3d0 <OS_EventTaskRdy>
                 nbr_tasks++;
   20cd4:	e0bff803 	ldbu	r2,-32(fp)
   20cd8:	10800044 	addi	r2,r2,1
   20cdc:	e0bff805 	stb	r2,-32(fp)
                 break;
   20ce0:	0001883a 	nop
   20ce4:	e0bff917 	ldw	r2,-28(fp)
   20ce8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20cec:	e0bffa17 	ldw	r2,-24(fp)
   20cf0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   20cf4:	001ce1c0 	call	1ce1c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   20cf8:	e0bfff17 	ldw	r2,-4(fp)
   20cfc:	00c00384 	movi	r3,14
   20d00:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   20d04:	e0bff803 	ldbu	r2,-32(fp)
   20d08:	00000706 	br	20d28 <OSSemPendAbort+0x158>
   20d0c:	e0bff917 	ldw	r2,-28(fp)
   20d10:	e0bffb15 	stw	r2,-20(fp)
   20d14:	e0bffb17 	ldw	r2,-20(fp)
   20d18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   20d1c:	e0bfff17 	ldw	r2,-4(fp)
   20d20:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   20d24:	0005883a 	mov	r2,zero
}
   20d28:	e037883a 	mov	sp,fp
   20d2c:	dfc00117 	ldw	ra,4(sp)
   20d30:	df000017 	ldw	fp,0(sp)
   20d34:	dec00204 	addi	sp,sp,8
   20d38:	f800283a 	ret

00020d3c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   20d3c:	defff804 	addi	sp,sp,-32
   20d40:	dfc00715 	stw	ra,28(sp)
   20d44:	df000615 	stw	fp,24(sp)
   20d48:	df000604 	addi	fp,sp,24
   20d4c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   20d50:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   20d54:	e0bfff17 	ldw	r2,-4(fp)
   20d58:	1000021e 	bne	r2,zero,20d64 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   20d5c:	00800104 	movi	r2,4
   20d60:	00003506 	br	20e38 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   20d64:	e0bfff17 	ldw	r2,-4(fp)
   20d68:	10800003 	ldbu	r2,0(r2)
   20d6c:	10803fcc 	andi	r2,r2,255
   20d70:	108000e0 	cmpeqi	r2,r2,3
   20d74:	1000021e 	bne	r2,zero,20d80 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   20d78:	00800044 	movi	r2,1
   20d7c:	00002e06 	br	20e38 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20d80:	0005303a 	rdctl	r2,status
   20d84:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20d88:	e0fffe17 	ldw	r3,-8(fp)
   20d8c:	00bfff84 	movi	r2,-2
   20d90:	1884703a 	and	r2,r3,r2
   20d94:	1001703a 	wrctl	status,r2
  
  return context;
   20d98:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   20d9c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   20da0:	e0bfff17 	ldw	r2,-4(fp)
   20da4:	10800283 	ldbu	r2,10(r2)
   20da8:	10803fcc 	andi	r2,r2,255
   20dac:	10000c26 	beq	r2,zero,20de0 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   20db0:	000f883a 	mov	r7,zero
   20db4:	01800044 	movi	r6,1
   20db8:	000b883a 	mov	r5,zero
   20dbc:	e13fff17 	ldw	r4,-4(fp)
   20dc0:	001c3d00 	call	1c3d0 <OS_EventTaskRdy>
   20dc4:	e0bffa17 	ldw	r2,-24(fp)
   20dc8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20dcc:	e0bffb17 	ldw	r2,-20(fp)
   20dd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   20dd4:	001ce1c0 	call	1ce1c <OS_Sched>
        return (OS_ERR_NONE);
   20dd8:	0005883a 	mov	r2,zero
   20ddc:	00001606 	br	20e38 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   20de0:	e0bfff17 	ldw	r2,-4(fp)
   20de4:	1080020b 	ldhu	r2,8(r2)
   20de8:	10ffffcc 	andi	r3,r2,65535
   20dec:	00bfffd4 	movui	r2,65535
   20df0:	18800c26 	beq	r3,r2,20e24 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   20df4:	e0bfff17 	ldw	r2,-4(fp)
   20df8:	1080020b 	ldhu	r2,8(r2)
   20dfc:	10800044 	addi	r2,r2,1
   20e00:	1007883a 	mov	r3,r2
   20e04:	e0bfff17 	ldw	r2,-4(fp)
   20e08:	10c0020d 	sth	r3,8(r2)
   20e0c:	e0bffa17 	ldw	r2,-24(fp)
   20e10:	e0bffc15 	stw	r2,-16(fp)
   20e14:	e0bffc17 	ldw	r2,-16(fp)
   20e18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   20e1c:	0005883a 	mov	r2,zero
   20e20:	00000506 	br	20e38 <OSSemPost+0xfc>
   20e24:	e0bffa17 	ldw	r2,-24(fp)
   20e28:	e0bffd15 	stw	r2,-12(fp)
   20e2c:	e0bffd17 	ldw	r2,-12(fp)
   20e30:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   20e34:	00800c84 	movi	r2,50
}
   20e38:	e037883a 	mov	sp,fp
   20e3c:	dfc00117 	ldw	ra,4(sp)
   20e40:	df000017 	ldw	fp,0(sp)
   20e44:	dec00204 	addi	sp,sp,8
   20e48:	f800283a 	ret

00020e4c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   20e4c:	defff704 	addi	sp,sp,-36
   20e50:	df000815 	stw	fp,32(sp)
   20e54:	df000804 	addi	fp,sp,32
   20e58:	e13ffe15 	stw	r4,-8(fp)
   20e5c:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   20e60:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   20e64:	e0bffe17 	ldw	r2,-8(fp)
   20e68:	1000021e 	bne	r2,zero,20e74 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   20e6c:	00800104 	movi	r2,4
   20e70:	00003606 	br	20f4c <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   20e74:	e0bfff17 	ldw	r2,-4(fp)
   20e78:	1000021e 	bne	r2,zero,20e84 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   20e7c:	00800244 	movi	r2,9
   20e80:	00003206 	br	20f4c <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   20e84:	e0bffe17 	ldw	r2,-8(fp)
   20e88:	10800003 	ldbu	r2,0(r2)
   20e8c:	10803fcc 	andi	r2,r2,255
   20e90:	108000e0 	cmpeqi	r2,r2,3
   20e94:	1000021e 	bne	r2,zero,20ea0 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   20e98:	00800044 	movi	r2,1
   20e9c:	00002b06 	br	20f4c <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20ea0:	0005303a 	rdctl	r2,status
   20ea4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20ea8:	e0fffd17 	ldw	r3,-12(fp)
   20eac:	00bfff84 	movi	r2,-2
   20eb0:	1884703a 	and	r2,r3,r2
   20eb4:	1001703a 	wrctl	status,r2
  
  return context;
   20eb8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   20ebc:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   20ec0:	e0bffe17 	ldw	r2,-8(fp)
   20ec4:	10c00283 	ldbu	r3,10(r2)
   20ec8:	e0bfff17 	ldw	r2,-4(fp)
   20ecc:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   20ed0:	e0bffe17 	ldw	r2,-8(fp)
   20ed4:	108002c4 	addi	r2,r2,11
   20ed8:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   20edc:	e0bfff17 	ldw	r2,-4(fp)
   20ee0:	10800084 	addi	r2,r2,2
   20ee4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   20ee8:	e03ffa05 	stb	zero,-24(fp)
   20eec:	00000b06 	br	20f1c <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   20ef0:	e0bff917 	ldw	r2,-28(fp)
   20ef4:	10c00044 	addi	r3,r2,1
   20ef8:	e0fff915 	stw	r3,-28(fp)
   20efc:	e0fff817 	ldw	r3,-32(fp)
   20f00:	19000044 	addi	r4,r3,1
   20f04:	e13ff815 	stw	r4,-32(fp)
   20f08:	18c00003 	ldbu	r3,0(r3)
   20f0c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   20f10:	e0bffa03 	ldbu	r2,-24(fp)
   20f14:	10800044 	addi	r2,r2,1
   20f18:	e0bffa05 	stb	r2,-24(fp)
   20f1c:	e0bffa03 	ldbu	r2,-24(fp)
   20f20:	108000f0 	cmpltui	r2,r2,3
   20f24:	103ff21e 	bne	r2,zero,20ef0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7020ef0>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   20f28:	e0bffe17 	ldw	r2,-8(fp)
   20f2c:	10c0020b 	ldhu	r3,8(r2)
   20f30:	e0bfff17 	ldw	r2,-4(fp)
   20f34:	10c0000d 	sth	r3,0(r2)
   20f38:	e0bffb17 	ldw	r2,-20(fp)
   20f3c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20f40:	e0bffc17 	ldw	r2,-16(fp)
   20f44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   20f48:	0005883a 	mov	r2,zero
}
   20f4c:	e037883a 	mov	sp,fp
   20f50:	df000017 	ldw	fp,0(sp)
   20f54:	dec00104 	addi	sp,sp,4
   20f58:	f800283a 	ret

00020f5c <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   20f5c:	defff904 	addi	sp,sp,-28
   20f60:	df000615 	stw	fp,24(sp)
   20f64:	df000604 	addi	fp,sp,24
   20f68:	e13ffd15 	stw	r4,-12(fp)
   20f6c:	2805883a 	mov	r2,r5
   20f70:	e1bfff15 	stw	r6,-4(fp)
   20f74:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   20f78:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   20f7c:	e0bfff17 	ldw	r2,-4(fp)
   20f80:	10003126 	beq	r2,zero,21048 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   20f84:	e0bffd17 	ldw	r2,-12(fp)
   20f88:	1000041e 	bne	r2,zero,20f9c <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   20f8c:	e0bfff17 	ldw	r2,-4(fp)
   20f90:	00c00104 	movi	r3,4
   20f94:	10c00005 	stb	r3,0(r2)
        return;
   20f98:	00002c06 	br	2104c <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   20f9c:	e0bffd17 	ldw	r2,-12(fp)
   20fa0:	10800003 	ldbu	r2,0(r2)
   20fa4:	10803fcc 	andi	r2,r2,255
   20fa8:	108000e0 	cmpeqi	r2,r2,3
   20fac:	1000041e 	bne	r2,zero,20fc0 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   20fb0:	e0bfff17 	ldw	r2,-4(fp)
   20fb4:	00c00044 	movi	r3,1
   20fb8:	10c00005 	stb	r3,0(r2)
        return;
   20fbc:	00002306 	br	2104c <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20fc0:	0005303a 	rdctl	r2,status
   20fc4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20fc8:	e0fffc17 	ldw	r3,-16(fp)
   20fcc:	00bfff84 	movi	r2,-2
   20fd0:	1884703a 	and	r2,r3,r2
   20fd4:	1001703a 	wrctl	status,r2
  
  return context;
   20fd8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   20fdc:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   20fe0:	e0bfff17 	ldw	r2,-4(fp)
   20fe4:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   20fe8:	e0bffd17 	ldw	r2,-12(fp)
   20fec:	1080020b 	ldhu	r2,8(r2)
   20ff0:	10bfffcc 	andi	r2,r2,65535
   20ff4:	10000426 	beq	r2,zero,21008 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   20ff8:	e0bffd17 	ldw	r2,-12(fp)
   20ffc:	e0fffe0b 	ldhu	r3,-8(fp)
   21000:	10c0020d 	sth	r3,8(r2)
   21004:	00000b06 	br	21034 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   21008:	e0bffd17 	ldw	r2,-12(fp)
   2100c:	10800283 	ldbu	r2,10(r2)
   21010:	10803fcc 	andi	r2,r2,255
   21014:	1000041e 	bne	r2,zero,21028 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   21018:	e0bffd17 	ldw	r2,-12(fp)
   2101c:	e0fffe0b 	ldhu	r3,-8(fp)
   21020:	10c0020d 	sth	r3,8(r2)
   21024:	00000306 	br	21034 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   21028:	e0bfff17 	ldw	r2,-4(fp)
   2102c:	00c01244 	movi	r3,73
   21030:	10c00005 	stb	r3,0(r2)
   21034:	e0bffa17 	ldw	r2,-24(fp)
   21038:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2103c:	e0bffb17 	ldw	r2,-20(fp)
   21040:	1001703a 	wrctl	status,r2
   21044:	00000106 	br	2104c <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   21048:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   2104c:	e037883a 	mov	sp,fp
   21050:	df000017 	ldw	fp,0(sp)
   21054:	dec00104 	addi	sp,sp,4
   21058:	f800283a 	ret

0002105c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   2105c:	defff104 	addi	sp,sp,-60
   21060:	dfc00e15 	stw	ra,56(sp)
   21064:	df000d15 	stw	fp,52(sp)
   21068:	df000d04 	addi	fp,sp,52
   2106c:	2007883a 	mov	r3,r4
   21070:	2805883a 	mov	r2,r5
   21074:	e0fffe05 	stb	r3,-8(fp)
   21078:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   2107c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   21080:	e0bffe03 	ldbu	r2,-8(fp)
   21084:	10800530 	cmpltui	r2,r2,20
   21088:	1000051e 	bne	r2,zero,210a0 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   2108c:	e0bffe03 	ldbu	r2,-8(fp)
   21090:	10803fe0 	cmpeqi	r2,r2,255
   21094:	1000021e 	bne	r2,zero,210a0 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   21098:	00800a84 	movi	r2,42
   2109c:	00012606 	br	21538 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   210a0:	e0bfff03 	ldbu	r2,-4(fp)
   210a4:	10800530 	cmpltui	r2,r2,20
   210a8:	1000021e 	bne	r2,zero,210b4 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   210ac:	00800a84 	movi	r2,42
   210b0:	00012106 	br	21538 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   210b4:	0005303a 	rdctl	r2,status
   210b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   210bc:	e0fffd17 	ldw	r3,-12(fp)
   210c0:	00bfff84 	movi	r2,-2
   210c4:	1884703a 	and	r2,r3,r2
   210c8:	1001703a 	wrctl	status,r2
  
  return context;
   210cc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   210d0:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   210d4:	e0ffff03 	ldbu	r3,-4(fp)
   210d8:	00800134 	movhi	r2,4
   210dc:	10ae8104 	addi	r2,r2,-17916
   210e0:	18c7883a 	add	r3,r3,r3
   210e4:	18c7883a 	add	r3,r3,r3
   210e8:	10c5883a 	add	r2,r2,r3
   210ec:	10800017 	ldw	r2,0(r2)
   210f0:	10000626 	beq	r2,zero,2110c <OSTaskChangePrio+0xb0>
   210f4:	e0bff517 	ldw	r2,-44(fp)
   210f8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   210fc:	e0bff617 	ldw	r2,-40(fp)
   21100:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   21104:	00800a04 	movi	r2,40
   21108:	00010b06 	br	21538 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   2110c:	e0bffe03 	ldbu	r2,-8(fp)
   21110:	10803fd8 	cmpnei	r2,r2,255
   21114:	1000031e 	bne	r2,zero,21124 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   21118:	d0a85c17 	ldw	r2,-24208(gp)
   2111c:	10800c83 	ldbu	r2,50(r2)
   21120:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   21124:	e0fffe03 	ldbu	r3,-8(fp)
   21128:	00800134 	movhi	r2,4
   2112c:	10ae8104 	addi	r2,r2,-17916
   21130:	18c7883a 	add	r3,r3,r3
   21134:	18c7883a 	add	r3,r3,r3
   21138:	10c5883a 	add	r2,r2,r3
   2113c:	10800017 	ldw	r2,0(r2)
   21140:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   21144:	e0bff817 	ldw	r2,-32(fp)
   21148:	1000061e 	bne	r2,zero,21164 <OSTaskChangePrio+0x108>
   2114c:	e0bff517 	ldw	r2,-44(fp)
   21150:	e0bff715 	stw	r2,-36(fp)
   21154:	e0bff717 	ldw	r2,-36(fp)
   21158:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   2115c:	00800a44 	movi	r2,41
   21160:	0000f506 	br	21538 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   21164:	e0bff817 	ldw	r2,-32(fp)
   21168:	10800058 	cmpnei	r2,r2,1
   2116c:	1000061e 	bne	r2,zero,21188 <OSTaskChangePrio+0x12c>
   21170:	e0bff517 	ldw	r2,-44(fp)
   21174:	e0bff915 	stw	r2,-28(fp)
   21178:	e0bff917 	ldw	r2,-28(fp)
   2117c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   21180:	008010c4 	movi	r2,67
   21184:	0000ec06 	br	21538 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   21188:	e0bfff03 	ldbu	r2,-4(fp)
   2118c:	1004d0fa 	srli	r2,r2,3
   21190:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   21194:	e0bfff03 	ldbu	r2,-4(fp)
   21198:	108001cc 	andi	r2,r2,7
   2119c:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   211a0:	e0bffb03 	ldbu	r2,-20(fp)
   211a4:	00c00044 	movi	r3,1
   211a8:	1884983a 	sll	r2,r3,r2
   211ac:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   211b0:	e0bffb43 	ldbu	r2,-19(fp)
   211b4:	00c00044 	movi	r3,1
   211b8:	1884983a 	sll	r2,r3,r2
   211bc:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   211c0:	e0fffe03 	ldbu	r3,-8(fp)
   211c4:	00800134 	movhi	r2,4
   211c8:	10ae8104 	addi	r2,r2,-17916
   211cc:	18c7883a 	add	r3,r3,r3
   211d0:	18c7883a 	add	r3,r3,r3
   211d4:	10c5883a 	add	r2,r2,r3
   211d8:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   211dc:	e0ffff03 	ldbu	r3,-4(fp)
   211e0:	00800134 	movhi	r2,4
   211e4:	10ae8104 	addi	r2,r2,-17916
   211e8:	18c7883a 	add	r3,r3,r3
   211ec:	18c7883a 	add	r3,r3,r3
   211f0:	10c5883a 	add	r2,r2,r3
   211f4:	e0fff817 	ldw	r3,-32(fp)
   211f8:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   211fc:	e0bff817 	ldw	r2,-32(fp)
   21200:	10800d03 	ldbu	r2,52(r2)
   21204:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   21208:	e0bff817 	ldw	r2,-32(fp)
   2120c:	10800d83 	ldbu	r2,54(r2)
   21210:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   21214:	e0bff817 	ldw	r2,-32(fp)
   21218:	10800d43 	ldbu	r2,53(r2)
   2121c:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   21220:	e0fffc03 	ldbu	r3,-16(fp)
   21224:	d0a85944 	addi	r2,gp,-24219
   21228:	1885883a 	add	r2,r3,r2
   2122c:	10c00003 	ldbu	r3,0(r2)
   21230:	e0bffc83 	ldbu	r2,-14(fp)
   21234:	1884703a 	and	r2,r3,r2
   21238:	10803fcc 	andi	r2,r2,255
   2123c:	10002826 	beq	r2,zero,212e0 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   21240:	e0fffc03 	ldbu	r3,-16(fp)
   21244:	e13ffc03 	ldbu	r4,-16(fp)
   21248:	d0a85944 	addi	r2,gp,-24219
   2124c:	2085883a 	add	r2,r4,r2
   21250:	10800003 	ldbu	r2,0(r2)
   21254:	1009883a 	mov	r4,r2
   21258:	e0bffc83 	ldbu	r2,-14(fp)
   2125c:	0084303a 	nor	r2,zero,r2
   21260:	2084703a 	and	r2,r4,r2
   21264:	1009883a 	mov	r4,r2
   21268:	d0a85944 	addi	r2,gp,-24219
   2126c:	1885883a 	add	r2,r3,r2
   21270:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   21274:	e0fffc03 	ldbu	r3,-16(fp)
   21278:	d0a85944 	addi	r2,gp,-24219
   2127c:	1885883a 	add	r2,r3,r2
   21280:	10800003 	ldbu	r2,0(r2)
   21284:	10803fcc 	andi	r2,r2,255
   21288:	1000061e 	bne	r2,zero,212a4 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   2128c:	e0bffc43 	ldbu	r2,-15(fp)
   21290:	0084303a 	nor	r2,zero,r2
   21294:	1007883a 	mov	r3,r2
   21298:	d0a85903 	ldbu	r2,-24220(gp)
   2129c:	1884703a 	and	r2,r3,r2
   212a0:	d0a85905 	stb	r2,-24220(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   212a4:	d0e85903 	ldbu	r3,-24220(gp)
   212a8:	e0bffb83 	ldbu	r2,-18(fp)
   212ac:	1884b03a 	or	r2,r3,r2
   212b0:	d0a85905 	stb	r2,-24220(gp)
         OSRdyTbl[y_new] |= bitx_new;
   212b4:	e0fffb03 	ldbu	r3,-20(fp)
   212b8:	e13ffb03 	ldbu	r4,-20(fp)
   212bc:	d0a85944 	addi	r2,gp,-24219
   212c0:	2085883a 	add	r2,r4,r2
   212c4:	11000003 	ldbu	r4,0(r2)
   212c8:	e0bffbc3 	ldbu	r2,-17(fp)
   212cc:	2084b03a 	or	r2,r4,r2
   212d0:	1009883a 	mov	r4,r2
   212d4:	d0a85944 	addi	r2,gp,-24219
   212d8:	1885883a 	add	r2,r3,r2
   212dc:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   212e0:	e0bff817 	ldw	r2,-32(fp)
   212e4:	10800717 	ldw	r2,28(r2)
   212e8:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   212ec:	e0bff317 	ldw	r2,-52(fp)
   212f0:	10003326 	beq	r2,zero,213c0 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   212f4:	e0bffc03 	ldbu	r2,-16(fp)
   212f8:	e0fffc03 	ldbu	r3,-16(fp)
   212fc:	e13ff317 	ldw	r4,-52(fp)
   21300:	20c7883a 	add	r3,r4,r3
   21304:	18c002c4 	addi	r3,r3,11
   21308:	18c00003 	ldbu	r3,0(r3)
   2130c:	1809883a 	mov	r4,r3
   21310:	e0fffc83 	ldbu	r3,-14(fp)
   21314:	00c6303a 	nor	r3,zero,r3
   21318:	20c6703a 	and	r3,r4,r3
   2131c:	1809883a 	mov	r4,r3
   21320:	e0fff317 	ldw	r3,-52(fp)
   21324:	1885883a 	add	r2,r3,r2
   21328:	108002c4 	addi	r2,r2,11
   2132c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   21330:	e0bffc03 	ldbu	r2,-16(fp)
   21334:	e0fff317 	ldw	r3,-52(fp)
   21338:	1885883a 	add	r2,r3,r2
   2133c:	108002c4 	addi	r2,r2,11
   21340:	10800003 	ldbu	r2,0(r2)
   21344:	10803fcc 	andi	r2,r2,255
   21348:	1000091e 	bne	r2,zero,21370 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   2134c:	e0bff317 	ldw	r2,-52(fp)
   21350:	10800283 	ldbu	r2,10(r2)
   21354:	1007883a 	mov	r3,r2
   21358:	e0bffc43 	ldbu	r2,-15(fp)
   2135c:	0084303a 	nor	r2,zero,r2
   21360:	1884703a 	and	r2,r3,r2
   21364:	1007883a 	mov	r3,r2
   21368:	e0bff317 	ldw	r2,-52(fp)
   2136c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   21370:	e0bff317 	ldw	r2,-52(fp)
   21374:	10c00283 	ldbu	r3,10(r2)
   21378:	e0bffb83 	ldbu	r2,-18(fp)
   2137c:	1884b03a 	or	r2,r3,r2
   21380:	1007883a 	mov	r3,r2
   21384:	e0bff317 	ldw	r2,-52(fp)
   21388:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   2138c:	e0bffb03 	ldbu	r2,-20(fp)
   21390:	e0fffb03 	ldbu	r3,-20(fp)
   21394:	e13ff317 	ldw	r4,-52(fp)
   21398:	20c7883a 	add	r3,r4,r3
   2139c:	18c002c4 	addi	r3,r3,11
   213a0:	19000003 	ldbu	r4,0(r3)
   213a4:	e0fffbc3 	ldbu	r3,-17(fp)
   213a8:	20c6b03a 	or	r3,r4,r3
   213ac:	1809883a 	mov	r4,r3
   213b0:	e0fff317 	ldw	r3,-52(fp)
   213b4:	1885883a 	add	r2,r3,r2
   213b8:	108002c4 	addi	r2,r2,11
   213bc:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   213c0:	e0bff817 	ldw	r2,-32(fp)
   213c4:	10800817 	ldw	r2,32(r2)
   213c8:	10004226 	beq	r2,zero,214d4 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   213cc:	e0bff817 	ldw	r2,-32(fp)
   213d0:	10800817 	ldw	r2,32(r2)
   213d4:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   213d8:	e0bff417 	ldw	r2,-48(fp)
   213dc:	10800017 	ldw	r2,0(r2)
   213e0:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   213e4:	00003906 	br	214cc <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   213e8:	e0bffc03 	ldbu	r2,-16(fp)
   213ec:	e0fffc03 	ldbu	r3,-16(fp)
   213f0:	e13ff317 	ldw	r4,-52(fp)
   213f4:	20c7883a 	add	r3,r4,r3
   213f8:	18c002c4 	addi	r3,r3,11
   213fc:	18c00003 	ldbu	r3,0(r3)
   21400:	1809883a 	mov	r4,r3
   21404:	e0fffc83 	ldbu	r3,-14(fp)
   21408:	00c6303a 	nor	r3,zero,r3
   2140c:	20c6703a 	and	r3,r4,r3
   21410:	1809883a 	mov	r4,r3
   21414:	e0fff317 	ldw	r3,-52(fp)
   21418:	1885883a 	add	r2,r3,r2
   2141c:	108002c4 	addi	r2,r2,11
   21420:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   21424:	e0bffc03 	ldbu	r2,-16(fp)
   21428:	e0fff317 	ldw	r3,-52(fp)
   2142c:	1885883a 	add	r2,r3,r2
   21430:	108002c4 	addi	r2,r2,11
   21434:	10800003 	ldbu	r2,0(r2)
   21438:	10803fcc 	andi	r2,r2,255
   2143c:	1000091e 	bne	r2,zero,21464 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   21440:	e0bff317 	ldw	r2,-52(fp)
   21444:	10800283 	ldbu	r2,10(r2)
   21448:	1007883a 	mov	r3,r2
   2144c:	e0bffc43 	ldbu	r2,-15(fp)
   21450:	0084303a 	nor	r2,zero,r2
   21454:	1884703a 	and	r2,r3,r2
   21458:	1007883a 	mov	r3,r2
   2145c:	e0bff317 	ldw	r2,-52(fp)
   21460:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   21464:	e0bff317 	ldw	r2,-52(fp)
   21468:	10c00283 	ldbu	r3,10(r2)
   2146c:	e0bffb83 	ldbu	r2,-18(fp)
   21470:	1884b03a 	or	r2,r3,r2
   21474:	1007883a 	mov	r3,r2
   21478:	e0bff317 	ldw	r2,-52(fp)
   2147c:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   21480:	e0bffb03 	ldbu	r2,-20(fp)
   21484:	e0fffb03 	ldbu	r3,-20(fp)
   21488:	e13ff317 	ldw	r4,-52(fp)
   2148c:	20c7883a 	add	r3,r4,r3
   21490:	18c002c4 	addi	r3,r3,11
   21494:	19000003 	ldbu	r4,0(r3)
   21498:	e0fffbc3 	ldbu	r3,-17(fp)
   2149c:	20c6b03a 	or	r3,r4,r3
   214a0:	1809883a 	mov	r4,r3
   214a4:	e0fff317 	ldw	r3,-52(fp)
   214a8:	1885883a 	add	r2,r3,r2
   214ac:	108002c4 	addi	r2,r2,11
   214b0:	11000005 	stb	r4,0(r2)
            pevents++;
   214b4:	e0bff417 	ldw	r2,-48(fp)
   214b8:	10800104 	addi	r2,r2,4
   214bc:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   214c0:	e0bff417 	ldw	r2,-48(fp)
   214c4:	10800017 	ldw	r2,0(r2)
   214c8:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   214cc:	e0bff317 	ldw	r2,-52(fp)
   214d0:	103fc51e 	bne	r2,zero,213e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70213e8>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   214d4:	e0bff817 	ldw	r2,-32(fp)
   214d8:	e0ffff03 	ldbu	r3,-4(fp)
   214dc:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   214e0:	e0bff817 	ldw	r2,-32(fp)
   214e4:	e0fffb03 	ldbu	r3,-20(fp)
   214e8:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   214ec:	e0bff817 	ldw	r2,-32(fp)
   214f0:	e0fffb43 	ldbu	r3,-19(fp)
   214f4:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   214f8:	e0bff817 	ldw	r2,-32(fp)
   214fc:	e0fffb83 	ldbu	r3,-18(fp)
   21500:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   21504:	e0bff817 	ldw	r2,-32(fp)
   21508:	e0fffbc3 	ldbu	r3,-17(fp)
   2150c:	10c00d45 	stb	r3,53(r2)
   21510:	e0bff517 	ldw	r2,-44(fp)
   21514:	e0bffa15 	stw	r2,-24(fp)
   21518:	e0bffa17 	ldw	r2,-24(fp)
   2151c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   21520:	d0a84d43 	ldbu	r2,-24267(gp)
   21524:	10803fcc 	andi	r2,r2,255
   21528:	10800058 	cmpnei	r2,r2,1
   2152c:	1000011e 	bne	r2,zero,21534 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   21530:	001ce1c0 	call	1ce1c <OS_Sched>
    }
    return (OS_ERR_NONE);
   21534:	0005883a 	mov	r2,zero
}
   21538:	e037883a 	mov	sp,fp
   2153c:	dfc00117 	ldw	ra,4(sp)
   21540:	df000017 	ldw	fp,0(sp)
   21544:	dec00204 	addi	sp,sp,8
   21548:	f800283a 	ret

0002154c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   2154c:	deffee04 	addi	sp,sp,-72
   21550:	dfc01115 	stw	ra,68(sp)
   21554:	df001015 	stw	fp,64(sp)
   21558:	df001004 	addi	fp,sp,64
   2155c:	e13ffc15 	stw	r4,-16(fp)
   21560:	e17ffd15 	stw	r5,-12(fp)
   21564:	e1bffe15 	stw	r6,-8(fp)
   21568:	3805883a 	mov	r2,r7
   2156c:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   21570:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   21574:	e0bfff03 	ldbu	r2,-4(fp)
   21578:	10800570 	cmpltui	r2,r2,21
   2157c:	1000021e 	bne	r2,zero,21588 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   21580:	00800a84 	movi	r2,42
   21584:	00005706 	br	216e4 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21588:	0005303a 	rdctl	r2,status
   2158c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21590:	e0fffb17 	ldw	r3,-20(fp)
   21594:	00bfff84 	movi	r2,-2
   21598:	1884703a 	and	r2,r3,r2
   2159c:	1001703a 	wrctl	status,r2
  
  return context;
   215a0:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   215a4:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   215a8:	d0a85b03 	ldbu	r2,-24212(gp)
   215ac:	10803fcc 	andi	r2,r2,255
   215b0:	10000626 	beq	r2,zero,215cc <OSTaskCreate+0x80>
   215b4:	e0bff317 	ldw	r2,-52(fp)
   215b8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   215bc:	e0bff417 	ldw	r2,-48(fp)
   215c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   215c4:	00800f04 	movi	r2,60
   215c8:	00004606 	br	216e4 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   215cc:	e0ffff03 	ldbu	r3,-4(fp)
   215d0:	00800134 	movhi	r2,4
   215d4:	10ae8104 	addi	r2,r2,-17916
   215d8:	18c7883a 	add	r3,r3,r3
   215dc:	18c7883a 	add	r3,r3,r3
   215e0:	10c5883a 	add	r2,r2,r3
   215e4:	10800017 	ldw	r2,0(r2)
   215e8:	1000391e 	bne	r2,zero,216d0 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   215ec:	e0ffff03 	ldbu	r3,-4(fp)
   215f0:	00800134 	movhi	r2,4
   215f4:	10ae8104 	addi	r2,r2,-17916
   215f8:	18c7883a 	add	r3,r3,r3
   215fc:	18c7883a 	add	r3,r3,r3
   21600:	10c5883a 	add	r2,r2,r3
   21604:	00c00044 	movi	r3,1
   21608:	10c00015 	stw	r3,0(r2)
   2160c:	e0bff317 	ldw	r2,-52(fp)
   21610:	e0bff515 	stw	r2,-44(fp)
   21614:	e0bff517 	ldw	r2,-44(fp)
   21618:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   2161c:	000f883a 	mov	r7,zero
   21620:	e1bffe17 	ldw	r6,-8(fp)
   21624:	e17ffd17 	ldw	r5,-12(fp)
   21628:	e13ffc17 	ldw	r4,-16(fp)
   2162c:	002616c0 	call	2616c <OSTaskStkInit>
   21630:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   21634:	e0bfff03 	ldbu	r2,-4(fp)
   21638:	d8000215 	stw	zero,8(sp)
   2163c:	d8000115 	stw	zero,4(sp)
   21640:	d8000015 	stw	zero,0(sp)
   21644:	000f883a 	mov	r7,zero
   21648:	000d883a 	mov	r6,zero
   2164c:	e17ff717 	ldw	r5,-36(fp)
   21650:	1009883a 	mov	r4,r2
   21654:	001d22c0 	call	1d22c <OS_TCBInit>
   21658:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   2165c:	e0bff803 	ldbu	r2,-32(fp)
   21660:	1000061e 	bne	r2,zero,2167c <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   21664:	d0a84d43 	ldbu	r2,-24267(gp)
   21668:	10803fcc 	andi	r2,r2,255
   2166c:	10800058 	cmpnei	r2,r2,1
   21670:	1000151e 	bne	r2,zero,216c8 <OSTaskCreate+0x17c>
                OS_Sched();
   21674:	001ce1c0 	call	1ce1c <OS_Sched>
   21678:	00001306 	br	216c8 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2167c:	0005303a 	rdctl	r2,status
   21680:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21684:	e0fffa17 	ldw	r3,-24(fp)
   21688:	00bfff84 	movi	r2,-2
   2168c:	1884703a 	and	r2,r3,r2
   21690:	1001703a 	wrctl	status,r2
  
  return context;
   21694:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   21698:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   2169c:	e0ffff03 	ldbu	r3,-4(fp)
   216a0:	00800134 	movhi	r2,4
   216a4:	10ae8104 	addi	r2,r2,-17916
   216a8:	18c7883a 	add	r3,r3,r3
   216ac:	18c7883a 	add	r3,r3,r3
   216b0:	10c5883a 	add	r2,r2,r3
   216b4:	10000015 	stw	zero,0(r2)
   216b8:	e0bff317 	ldw	r2,-52(fp)
   216bc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   216c0:	e0bff617 	ldw	r2,-40(fp)
   216c4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   216c8:	e0bff803 	ldbu	r2,-32(fp)
   216cc:	00000506 	br	216e4 <OSTaskCreate+0x198>
   216d0:	e0bff317 	ldw	r2,-52(fp)
   216d4:	e0bff915 	stw	r2,-28(fp)
   216d8:	e0bff917 	ldw	r2,-28(fp)
   216dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   216e0:	00800a04 	movi	r2,40
}
   216e4:	e037883a 	mov	sp,fp
   216e8:	dfc00117 	ldw	ra,4(sp)
   216ec:	df000017 	ldw	fp,0(sp)
   216f0:	dec00204 	addi	sp,sp,8
   216f4:	f800283a 	ret

000216f8 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   216f8:	deffec04 	addi	sp,sp,-80
   216fc:	dfc01315 	stw	ra,76(sp)
   21700:	df001215 	stw	fp,72(sp)
   21704:	df001204 	addi	fp,sp,72
   21708:	e13ffa15 	stw	r4,-24(fp)
   2170c:	e17ffb15 	stw	r5,-20(fp)
   21710:	e1bffc15 	stw	r6,-16(fp)
   21714:	3809883a 	mov	r4,r7
   21718:	e0c00217 	ldw	r3,8(fp)
   2171c:	e0800617 	ldw	r2,24(fp)
   21720:	e13ffd05 	stb	r4,-12(fp)
   21724:	e0fffe0d 	sth	r3,-8(fp)
   21728:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   2172c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   21730:	e0bffd03 	ldbu	r2,-12(fp)
   21734:	10800570 	cmpltui	r2,r2,21
   21738:	1000021e 	bne	r2,zero,21744 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   2173c:	00800a84 	movi	r2,42
   21740:	00006106 	br	218c8 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21744:	0005303a 	rdctl	r2,status
   21748:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2174c:	e0fff917 	ldw	r3,-28(fp)
   21750:	00bfff84 	movi	r2,-2
   21754:	1884703a 	and	r2,r3,r2
   21758:	1001703a 	wrctl	status,r2
  
  return context;
   2175c:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   21760:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   21764:	d0a85b03 	ldbu	r2,-24212(gp)
   21768:	10803fcc 	andi	r2,r2,255
   2176c:	10000626 	beq	r2,zero,21788 <OSTaskCreateExt+0x90>
   21770:	e0bff117 	ldw	r2,-60(fp)
   21774:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21778:	e0bff217 	ldw	r2,-56(fp)
   2177c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   21780:	00800f04 	movi	r2,60
   21784:	00005006 	br	218c8 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   21788:	e0fffd03 	ldbu	r3,-12(fp)
   2178c:	00800134 	movhi	r2,4
   21790:	10ae8104 	addi	r2,r2,-17916
   21794:	18c7883a 	add	r3,r3,r3
   21798:	18c7883a 	add	r3,r3,r3
   2179c:	10c5883a 	add	r2,r2,r3
   217a0:	10800017 	ldw	r2,0(r2)
   217a4:	1000431e 	bne	r2,zero,218b4 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   217a8:	e0fffd03 	ldbu	r3,-12(fp)
   217ac:	00800134 	movhi	r2,4
   217b0:	10ae8104 	addi	r2,r2,-17916
   217b4:	18c7883a 	add	r3,r3,r3
   217b8:	18c7883a 	add	r3,r3,r3
   217bc:	10c5883a 	add	r2,r2,r3
   217c0:	00c00044 	movi	r3,1
   217c4:	10c00015 	stw	r3,0(r2)
   217c8:	e0bff117 	ldw	r2,-60(fp)
   217cc:	e0bff315 	stw	r2,-52(fp)
   217d0:	e0bff317 	ldw	r2,-52(fp)
   217d4:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   217d8:	e0bfff0b 	ldhu	r2,-4(fp)
   217dc:	100d883a 	mov	r6,r2
   217e0:	e1400417 	ldw	r5,16(fp)
   217e4:	e1000317 	ldw	r4,12(fp)
   217e8:	00227580 	call	22758 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   217ec:	e0bfff0b 	ldhu	r2,-4(fp)
   217f0:	100f883a 	mov	r7,r2
   217f4:	e1bffc17 	ldw	r6,-16(fp)
   217f8:	e17ffb17 	ldw	r5,-20(fp)
   217fc:	e13ffa17 	ldw	r4,-24(fp)
   21800:	002616c0 	call	2616c <OSTaskStkInit>
   21804:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   21808:	e0fffd03 	ldbu	r3,-12(fp)
   2180c:	e13ffe0b 	ldhu	r4,-8(fp)
   21810:	e0bfff0b 	ldhu	r2,-4(fp)
   21814:	d8800215 	stw	r2,8(sp)
   21818:	e0800517 	ldw	r2,20(fp)
   2181c:	d8800115 	stw	r2,4(sp)
   21820:	e0800417 	ldw	r2,16(fp)
   21824:	d8800015 	stw	r2,0(sp)
   21828:	200f883a 	mov	r7,r4
   2182c:	e1800317 	ldw	r6,12(fp)
   21830:	e17ff517 	ldw	r5,-44(fp)
   21834:	1809883a 	mov	r4,r3
   21838:	001d22c0 	call	1d22c <OS_TCBInit>
   2183c:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   21840:	e0bff603 	ldbu	r2,-40(fp)
   21844:	1000061e 	bne	r2,zero,21860 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   21848:	d0a84d43 	ldbu	r2,-24267(gp)
   2184c:	10803fcc 	andi	r2,r2,255
   21850:	10800058 	cmpnei	r2,r2,1
   21854:	1000151e 	bne	r2,zero,218ac <OSTaskCreateExt+0x1b4>
                OS_Sched();
   21858:	001ce1c0 	call	1ce1c <OS_Sched>
   2185c:	00001306 	br	218ac <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21860:	0005303a 	rdctl	r2,status
   21864:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21868:	e0fff817 	ldw	r3,-32(fp)
   2186c:	00bfff84 	movi	r2,-2
   21870:	1884703a 	and	r2,r3,r2
   21874:	1001703a 	wrctl	status,r2
  
  return context;
   21878:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   2187c:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   21880:	e0fffd03 	ldbu	r3,-12(fp)
   21884:	00800134 	movhi	r2,4
   21888:	10ae8104 	addi	r2,r2,-17916
   2188c:	18c7883a 	add	r3,r3,r3
   21890:	18c7883a 	add	r3,r3,r3
   21894:	10c5883a 	add	r2,r2,r3
   21898:	10000015 	stw	zero,0(r2)
   2189c:	e0bff117 	ldw	r2,-60(fp)
   218a0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   218a4:	e0bff417 	ldw	r2,-48(fp)
   218a8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   218ac:	e0bff603 	ldbu	r2,-40(fp)
   218b0:	00000506 	br	218c8 <OSTaskCreateExt+0x1d0>
   218b4:	e0bff117 	ldw	r2,-60(fp)
   218b8:	e0bff715 	stw	r2,-36(fp)
   218bc:	e0bff717 	ldw	r2,-36(fp)
   218c0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   218c4:	00800a04 	movi	r2,40
}
   218c8:	e037883a 	mov	sp,fp
   218cc:	dfc00117 	ldw	ra,4(sp)
   218d0:	df000017 	ldw	fp,0(sp)
   218d4:	dec00204 	addi	sp,sp,8
   218d8:	f800283a 	ret

000218dc <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   218dc:	defff404 	addi	sp,sp,-48
   218e0:	dfc00b15 	stw	ra,44(sp)
   218e4:	df000a15 	stw	fp,40(sp)
   218e8:	df000a04 	addi	fp,sp,40
   218ec:	2005883a 	mov	r2,r4
   218f0:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   218f4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   218f8:	d0a85b03 	ldbu	r2,-24212(gp)
   218fc:	10803fcc 	andi	r2,r2,255
   21900:	10000226 	beq	r2,zero,2190c <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   21904:	00801004 	movi	r2,64
   21908:	0000c006 	br	21c0c <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   2190c:	e0bfff03 	ldbu	r2,-4(fp)
   21910:	10800518 	cmpnei	r2,r2,20
   21914:	1000021e 	bne	r2,zero,21920 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   21918:	00800f84 	movi	r2,62
   2191c:	0000bb06 	br	21c0c <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   21920:	e0bfff03 	ldbu	r2,-4(fp)
   21924:	10800530 	cmpltui	r2,r2,20
   21928:	1000051e 	bne	r2,zero,21940 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   2192c:	e0bfff03 	ldbu	r2,-4(fp)
   21930:	10803fe0 	cmpeqi	r2,r2,255
   21934:	1000021e 	bne	r2,zero,21940 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   21938:	00800a84 	movi	r2,42
   2193c:	0000b306 	br	21c0c <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21940:	0005303a 	rdctl	r2,status
   21944:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21948:	e0fffe17 	ldw	r3,-8(fp)
   2194c:	00bfff84 	movi	r2,-2
   21950:	1884703a 	and	r2,r3,r2
   21954:	1001703a 	wrctl	status,r2
  
  return context;
   21958:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   2195c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   21960:	e0bfff03 	ldbu	r2,-4(fp)
   21964:	10803fd8 	cmpnei	r2,r2,255
   21968:	1000031e 	bne	r2,zero,21978 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   2196c:	d0a85c17 	ldw	r2,-24208(gp)
   21970:	10800c83 	ldbu	r2,50(r2)
   21974:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   21978:	e0ffff03 	ldbu	r3,-4(fp)
   2197c:	00800134 	movhi	r2,4
   21980:	10ae8104 	addi	r2,r2,-17916
   21984:	18c7883a 	add	r3,r3,r3
   21988:	18c7883a 	add	r3,r3,r3
   2198c:	10c5883a 	add	r2,r2,r3
   21990:	10800017 	ldw	r2,0(r2)
   21994:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   21998:	e0bff817 	ldw	r2,-32(fp)
   2199c:	1000061e 	bne	r2,zero,219b8 <OSTaskDel+0xdc>
   219a0:	e0bff617 	ldw	r2,-40(fp)
   219a4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   219a8:	e0bff717 	ldw	r2,-36(fp)
   219ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   219b0:	008010c4 	movi	r2,67
   219b4:	00009506 	br	21c0c <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   219b8:	e0bff817 	ldw	r2,-32(fp)
   219bc:	10800058 	cmpnei	r2,r2,1
   219c0:	1000061e 	bne	r2,zero,219dc <OSTaskDel+0x100>
   219c4:	e0bff617 	ldw	r2,-40(fp)
   219c8:	e0bff915 	stw	r2,-28(fp)
   219cc:	e0bff917 	ldw	r2,-28(fp)
   219d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   219d4:	00800f44 	movi	r2,61
   219d8:	00008c06 	br	21c0c <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   219dc:	e0bff817 	ldw	r2,-32(fp)
   219e0:	10800d03 	ldbu	r2,52(r2)
   219e4:	10c03fcc 	andi	r3,r2,255
   219e8:	e0bff817 	ldw	r2,-32(fp)
   219ec:	10800d03 	ldbu	r2,52(r2)
   219f0:	11003fcc 	andi	r4,r2,255
   219f4:	d0a85944 	addi	r2,gp,-24219
   219f8:	2085883a 	add	r2,r4,r2
   219fc:	10800003 	ldbu	r2,0(r2)
   21a00:	1009883a 	mov	r4,r2
   21a04:	e0bff817 	ldw	r2,-32(fp)
   21a08:	10800d43 	ldbu	r2,53(r2)
   21a0c:	0084303a 	nor	r2,zero,r2
   21a10:	2084703a 	and	r2,r4,r2
   21a14:	1009883a 	mov	r4,r2
   21a18:	d0a85944 	addi	r2,gp,-24219
   21a1c:	1885883a 	add	r2,r3,r2
   21a20:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   21a24:	e0bff817 	ldw	r2,-32(fp)
   21a28:	10800d03 	ldbu	r2,52(r2)
   21a2c:	10c03fcc 	andi	r3,r2,255
   21a30:	d0a85944 	addi	r2,gp,-24219
   21a34:	1885883a 	add	r2,r3,r2
   21a38:	10800003 	ldbu	r2,0(r2)
   21a3c:	10803fcc 	andi	r2,r2,255
   21a40:	1000071e 	bne	r2,zero,21a60 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   21a44:	e0bff817 	ldw	r2,-32(fp)
   21a48:	10800d83 	ldbu	r2,54(r2)
   21a4c:	0084303a 	nor	r2,zero,r2
   21a50:	1007883a 	mov	r3,r2
   21a54:	d0a85903 	ldbu	r2,-24220(gp)
   21a58:	1884703a 	and	r2,r3,r2
   21a5c:	d0a85905 	stb	r2,-24220(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   21a60:	e0bff817 	ldw	r2,-32(fp)
   21a64:	10800717 	ldw	r2,28(r2)
   21a68:	10000526 	beq	r2,zero,21a80 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   21a6c:	e0bff817 	ldw	r2,-32(fp)
   21a70:	10800717 	ldw	r2,28(r2)
   21a74:	100b883a 	mov	r5,r2
   21a78:	e13ff817 	ldw	r4,-32(fp)
   21a7c:	001c7c80 	call	1c7c8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   21a80:	e0bff817 	ldw	r2,-32(fp)
   21a84:	10800817 	ldw	r2,32(r2)
   21a88:	10000526 	beq	r2,zero,21aa0 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   21a8c:	e0bff817 	ldw	r2,-32(fp)
   21a90:	10800817 	ldw	r2,32(r2)
   21a94:	100b883a 	mov	r5,r2
   21a98:	e13ff817 	ldw	r4,-32(fp)
   21a9c:	001c8800 	call	1c880 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   21aa0:	e0bff817 	ldw	r2,-32(fp)
   21aa4:	10800a17 	ldw	r2,40(r2)
   21aa8:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   21aac:	e0bffb17 	ldw	r2,-20(fp)
   21ab0:	10000226 	beq	r2,zero,21abc <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   21ab4:	e13ffb17 	ldw	r4,-20(fp)
   21ab8:	001ed000 	call	1ed00 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   21abc:	e0bff817 	ldw	r2,-32(fp)
   21ac0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   21ac4:	e0bff817 	ldw	r2,-32(fp)
   21ac8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   21acc:	e0bff817 	ldw	r2,-32(fp)
   21ad0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   21ad4:	d0a84d03 	ldbu	r2,-24268(gp)
   21ad8:	10803fcc 	andi	r2,r2,255
   21adc:	10803fe0 	cmpeqi	r2,r2,255
   21ae0:	1000031e 	bne	r2,zero,21af0 <OSTaskDel+0x214>
        OSLockNesting++;
   21ae4:	d0a84d03 	ldbu	r2,-24268(gp)
   21ae8:	10800044 	addi	r2,r2,1
   21aec:	d0a84d05 	stb	r2,-24268(gp)
   21af0:	e0bff617 	ldw	r2,-40(fp)
   21af4:	e0bffd15 	stw	r2,-12(fp)
   21af8:	e0bffd17 	ldw	r2,-12(fp)
   21afc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   21b00:	001c3b00 	call	1c3b0 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21b04:	0005303a 	rdctl	r2,status
   21b08:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21b0c:	e0fffa17 	ldw	r3,-24(fp)
   21b10:	00bfff84 	movi	r2,-2
   21b14:	1884703a 	and	r2,r3,r2
   21b18:	1001703a 	wrctl	status,r2
  
  return context;
   21b1c:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   21b20:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   21b24:	d0a84d03 	ldbu	r2,-24268(gp)
   21b28:	10803fcc 	andi	r2,r2,255
   21b2c:	10000326 	beq	r2,zero,21b3c <OSTaskDel+0x260>
        OSLockNesting--;
   21b30:	d0a84d03 	ldbu	r2,-24268(gp)
   21b34:	10bfffc4 	addi	r2,r2,-1
   21b38:	d0a84d05 	stb	r2,-24268(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   21b3c:	e13ff817 	ldw	r4,-32(fp)
   21b40:	00262ec0 	call	262ec <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   21b44:	d0a85543 	ldbu	r2,-24235(gp)
   21b48:	10bfffc4 	addi	r2,r2,-1
   21b4c:	d0a85545 	stb	r2,-24235(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   21b50:	e0ffff03 	ldbu	r3,-4(fp)
   21b54:	00800134 	movhi	r2,4
   21b58:	10ae8104 	addi	r2,r2,-17916
   21b5c:	18c7883a 	add	r3,r3,r3
   21b60:	18c7883a 	add	r3,r3,r3
   21b64:	10c5883a 	add	r2,r2,r3
   21b68:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   21b6c:	e0bff817 	ldw	r2,-32(fp)
   21b70:	10800617 	ldw	r2,24(r2)
   21b74:	1000071e 	bne	r2,zero,21b94 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   21b78:	e0bff817 	ldw	r2,-32(fp)
   21b7c:	10800517 	ldw	r2,20(r2)
   21b80:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   21b84:	e0bff817 	ldw	r2,-32(fp)
   21b88:	10800517 	ldw	r2,20(r2)
   21b8c:	d0a85015 	stw	r2,-24256(gp)
   21b90:	00000a06 	br	21bbc <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   21b94:	e0bff817 	ldw	r2,-32(fp)
   21b98:	10800617 	ldw	r2,24(r2)
   21b9c:	e0fff817 	ldw	r3,-32(fp)
   21ba0:	18c00517 	ldw	r3,20(r3)
   21ba4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   21ba8:	e0bff817 	ldw	r2,-32(fp)
   21bac:	10800517 	ldw	r2,20(r2)
   21bb0:	e0fff817 	ldw	r3,-32(fp)
   21bb4:	18c00617 	ldw	r3,24(r3)
   21bb8:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   21bbc:	d0e85417 	ldw	r3,-24240(gp)
   21bc0:	e0bff817 	ldw	r2,-32(fp)
   21bc4:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   21bc8:	e0bff817 	ldw	r2,-32(fp)
   21bcc:	d0a85415 	stw	r2,-24240(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   21bd0:	e0bff817 	ldw	r2,-32(fp)
   21bd4:	00c00fc4 	movi	r3,63
   21bd8:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   21bdc:	e0bff817 	ldw	r2,-32(fp)
   21be0:	10001345 	stb	zero,77(r2)
   21be4:	e0bff617 	ldw	r2,-40(fp)
   21be8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21bec:	e0bffc17 	ldw	r2,-16(fp)
   21bf0:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   21bf4:	d0a84d43 	ldbu	r2,-24267(gp)
   21bf8:	10803fcc 	andi	r2,r2,255
   21bfc:	10800058 	cmpnei	r2,r2,1
   21c00:	1000011e 	bne	r2,zero,21c08 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   21c04:	001ce1c0 	call	1ce1c <OS_Sched>
    }
    return (OS_ERR_NONE);
   21c08:	0005883a 	mov	r2,zero
}
   21c0c:	e037883a 	mov	sp,fp
   21c10:	dfc00117 	ldw	ra,4(sp)
   21c14:	df000017 	ldw	fp,0(sp)
   21c18:	dec00204 	addi	sp,sp,8
   21c1c:	f800283a 	ret

00021c20 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   21c20:	defff504 	addi	sp,sp,-44
   21c24:	df000a15 	stw	fp,40(sp)
   21c28:	df000a04 	addi	fp,sp,40
   21c2c:	2005883a 	mov	r2,r4
   21c30:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   21c34:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   21c38:	e0bfff03 	ldbu	r2,-4(fp)
   21c3c:	10800518 	cmpnei	r2,r2,20
   21c40:	1000021e 	bne	r2,zero,21c4c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   21c44:	00800f84 	movi	r2,62
   21c48:	00004506 	br	21d60 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   21c4c:	e0bfff03 	ldbu	r2,-4(fp)
   21c50:	10800530 	cmpltui	r2,r2,20
   21c54:	1000051e 	bne	r2,zero,21c6c <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   21c58:	e0bfff03 	ldbu	r2,-4(fp)
   21c5c:	10803fe0 	cmpeqi	r2,r2,255
   21c60:	1000021e 	bne	r2,zero,21c6c <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   21c64:	00800a84 	movi	r2,42
   21c68:	00003d06 	br	21d60 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   21c6c:	e0bfff03 	ldbu	r2,-4(fp)
   21c70:	10803fd8 	cmpnei	r2,r2,255
   21c74:	1000111e 	bne	r2,zero,21cbc <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21c78:	0005303a 	rdctl	r2,status
   21c7c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21c80:	e0fff917 	ldw	r3,-28(fp)
   21c84:	00bfff84 	movi	r2,-2
   21c88:	1884703a 	and	r2,r3,r2
   21c8c:	1001703a 	wrctl	status,r2
  
  return context;
   21c90:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   21c94:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   21c98:	d0a85c17 	ldw	r2,-24208(gp)
   21c9c:	10800dc3 	ldbu	r2,55(r2)
   21ca0:	e0bff805 	stb	r2,-32(fp)
   21ca4:	e0bff617 	ldw	r2,-40(fp)
   21ca8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21cac:	e0bffe17 	ldw	r2,-8(fp)
   21cb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   21cb4:	e0bff803 	ldbu	r2,-32(fp)
   21cb8:	00002906 	br	21d60 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21cbc:	0005303a 	rdctl	r2,status
   21cc0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21cc4:	e0fff717 	ldw	r3,-36(fp)
   21cc8:	00bfff84 	movi	r2,-2
   21ccc:	1884703a 	and	r2,r3,r2
   21cd0:	1001703a 	wrctl	status,r2
  
  return context;
   21cd4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   21cd8:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   21cdc:	e0ffff03 	ldbu	r3,-4(fp)
   21ce0:	00800134 	movhi	r2,4
   21ce4:	10ae8104 	addi	r2,r2,-17916
   21ce8:	18c7883a 	add	r3,r3,r3
   21cec:	18c7883a 	add	r3,r3,r3
   21cf0:	10c5883a 	add	r2,r2,r3
   21cf4:	10800017 	ldw	r2,0(r2)
   21cf8:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   21cfc:	e0bffb17 	ldw	r2,-20(fp)
   21d00:	1000061e 	bne	r2,zero,21d1c <OSTaskDelReq+0xfc>
   21d04:	e0bff617 	ldw	r2,-40(fp)
   21d08:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21d0c:	e0bffa17 	ldw	r2,-24(fp)
   21d10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   21d14:	008010c4 	movi	r2,67
   21d18:	00001106 	br	21d60 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   21d1c:	e0bffb17 	ldw	r2,-20(fp)
   21d20:	10800058 	cmpnei	r2,r2,1
   21d24:	1000061e 	bne	r2,zero,21d40 <OSTaskDelReq+0x120>
   21d28:	e0bff617 	ldw	r2,-40(fp)
   21d2c:	e0bffc15 	stw	r2,-16(fp)
   21d30:	e0bffc17 	ldw	r2,-16(fp)
   21d34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   21d38:	00800f44 	movi	r2,61
   21d3c:	00000806 	br	21d60 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   21d40:	e0bffb17 	ldw	r2,-20(fp)
   21d44:	00c00fc4 	movi	r3,63
   21d48:	10c00dc5 	stb	r3,55(r2)
   21d4c:	e0bff617 	ldw	r2,-40(fp)
   21d50:	e0bffd15 	stw	r2,-12(fp)
   21d54:	e0bffd17 	ldw	r2,-12(fp)
   21d58:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   21d5c:	0005883a 	mov	r2,zero
}
   21d60:	e037883a 	mov	sp,fp
   21d64:	df000017 	ldw	fp,0(sp)
   21d68:	dec00104 	addi	sp,sp,4
   21d6c:	f800283a 	ret

00021d70 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   21d70:	defff404 	addi	sp,sp,-48
   21d74:	dfc00b15 	stw	ra,44(sp)
   21d78:	df000a15 	stw	fp,40(sp)
   21d7c:	df000a04 	addi	fp,sp,40
   21d80:	2005883a 	mov	r2,r4
   21d84:	e17ffe15 	stw	r5,-8(fp)
   21d88:	e1bfff15 	stw	r6,-4(fp)
   21d8c:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   21d90:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   21d94:	e0bfff17 	ldw	r2,-4(fp)
   21d98:	1000021e 	bne	r2,zero,21da4 <OSTaskNameGet+0x34>
        return (0);
   21d9c:	0005883a 	mov	r2,zero
   21da0:	00005406 	br	21ef4 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   21da4:	e0bffd03 	ldbu	r2,-12(fp)
   21da8:	10800570 	cmpltui	r2,r2,21
   21dac:	1000081e 	bne	r2,zero,21dd0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   21db0:	e0bffd03 	ldbu	r2,-12(fp)
   21db4:	10803fe0 	cmpeqi	r2,r2,255
   21db8:	1000051e 	bne	r2,zero,21dd0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   21dbc:	e0bfff17 	ldw	r2,-4(fp)
   21dc0:	00c00a84 	movi	r3,42
   21dc4:	10c00005 	stb	r3,0(r2)
            return (0);
   21dc8:	0005883a 	mov	r2,zero
   21dcc:	00004906 	br	21ef4 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   21dd0:	e0bffe17 	ldw	r2,-8(fp)
   21dd4:	1000051e 	bne	r2,zero,21dec <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   21dd8:	e0bfff17 	ldw	r2,-4(fp)
   21ddc:	00c00304 	movi	r3,12
   21de0:	10c00005 	stb	r3,0(r2)
        return (0);
   21de4:	0005883a 	mov	r2,zero
   21de8:	00004206 	br	21ef4 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   21dec:	d0a85b03 	ldbu	r2,-24212(gp)
   21df0:	10803fcc 	andi	r2,r2,255
   21df4:	10000526 	beq	r2,zero,21e0c <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   21df8:	e0bfff17 	ldw	r2,-4(fp)
   21dfc:	00c00444 	movi	r3,17
   21e00:	10c00005 	stb	r3,0(r2)
        return (0);
   21e04:	0005883a 	mov	r2,zero
   21e08:	00003a06 	br	21ef4 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21e0c:	0005303a 	rdctl	r2,status
   21e10:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21e14:	e0fffc17 	ldw	r3,-16(fp)
   21e18:	00bfff84 	movi	r2,-2
   21e1c:	1884703a 	and	r2,r3,r2
   21e20:	1001703a 	wrctl	status,r2
  
  return context;
   21e24:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   21e28:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   21e2c:	e0bffd03 	ldbu	r2,-12(fp)
   21e30:	10803fd8 	cmpnei	r2,r2,255
   21e34:	1000031e 	bne	r2,zero,21e44 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   21e38:	d0a85c17 	ldw	r2,-24208(gp)
   21e3c:	10800c83 	ldbu	r2,50(r2)
   21e40:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   21e44:	e0fffd03 	ldbu	r3,-12(fp)
   21e48:	00800134 	movhi	r2,4
   21e4c:	10ae8104 	addi	r2,r2,-17916
   21e50:	18c7883a 	add	r3,r3,r3
   21e54:	18c7883a 	add	r3,r3,r3
   21e58:	10c5883a 	add	r2,r2,r3
   21e5c:	10800017 	ldw	r2,0(r2)
   21e60:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   21e64:	e0bff817 	ldw	r2,-32(fp)
   21e68:	1000091e 	bne	r2,zero,21e90 <OSTaskNameGet+0x120>
   21e6c:	e0bff617 	ldw	r2,-40(fp)
   21e70:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21e74:	e0bff717 	ldw	r2,-36(fp)
   21e78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   21e7c:	e0bfff17 	ldw	r2,-4(fp)
   21e80:	00c010c4 	movi	r3,67
   21e84:	10c00005 	stb	r3,0(r2)
        return (0);
   21e88:	0005883a 	mov	r2,zero
   21e8c:	00001906 	br	21ef4 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   21e90:	e0bff817 	ldw	r2,-32(fp)
   21e94:	10800058 	cmpnei	r2,r2,1
   21e98:	1000091e 	bne	r2,zero,21ec0 <OSTaskNameGet+0x150>
   21e9c:	e0bff617 	ldw	r2,-40(fp)
   21ea0:	e0bff915 	stw	r2,-28(fp)
   21ea4:	e0bff917 	ldw	r2,-28(fp)
   21ea8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   21eac:	e0bfff17 	ldw	r2,-4(fp)
   21eb0:	00c010c4 	movi	r3,67
   21eb4:	10c00005 	stb	r3,0(r2)
        return (0);
   21eb8:	0005883a 	mov	r2,zero
   21ebc:	00000d06 	br	21ef4 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   21ec0:	e0bff817 	ldw	r2,-32(fp)
   21ec4:	10801304 	addi	r2,r2,76
   21ec8:	100b883a 	mov	r5,r2
   21ecc:	e13ffe17 	ldw	r4,-8(fp)
   21ed0:	001cf600 	call	1cf60 <OS_StrCopy>
   21ed4:	e0bffb05 	stb	r2,-20(fp)
   21ed8:	e0bff617 	ldw	r2,-40(fp)
   21edc:	e0bffa15 	stw	r2,-24(fp)
   21ee0:	e0bffa17 	ldw	r2,-24(fp)
   21ee4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   21ee8:	e0bfff17 	ldw	r2,-4(fp)
   21eec:	10000005 	stb	zero,0(r2)
    return (len);
   21ef0:	e0bffb03 	ldbu	r2,-20(fp)
}
   21ef4:	e037883a 	mov	sp,fp
   21ef8:	dfc00117 	ldw	ra,4(sp)
   21efc:	df000017 	ldw	fp,0(sp)
   21f00:	dec00204 	addi	sp,sp,8
   21f04:	f800283a 	ret

00021f08 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   21f08:	defff304 	addi	sp,sp,-52
   21f0c:	dfc00c15 	stw	ra,48(sp)
   21f10:	df000b15 	stw	fp,44(sp)
   21f14:	df000b04 	addi	fp,sp,44
   21f18:	2005883a 	mov	r2,r4
   21f1c:	e17ffe15 	stw	r5,-8(fp)
   21f20:	e1bfff15 	stw	r6,-4(fp)
   21f24:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   21f28:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   21f2c:	e0bfff17 	ldw	r2,-4(fp)
   21f30:	10005c26 	beq	r2,zero,220a4 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   21f34:	e0bffd03 	ldbu	r2,-12(fp)
   21f38:	10800570 	cmpltui	r2,r2,21
   21f3c:	1000071e 	bne	r2,zero,21f5c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   21f40:	e0bffd03 	ldbu	r2,-12(fp)
   21f44:	10803fe0 	cmpeqi	r2,r2,255
   21f48:	1000041e 	bne	r2,zero,21f5c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   21f4c:	e0bfff17 	ldw	r2,-4(fp)
   21f50:	00c00a84 	movi	r3,42
   21f54:	10c00005 	stb	r3,0(r2)
            return;
   21f58:	00005306 	br	220a8 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   21f5c:	e0bffe17 	ldw	r2,-8(fp)
   21f60:	1000041e 	bne	r2,zero,21f74 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   21f64:	e0bfff17 	ldw	r2,-4(fp)
   21f68:	00c00304 	movi	r3,12
   21f6c:	10c00005 	stb	r3,0(r2)
        return;
   21f70:	00004d06 	br	220a8 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   21f74:	d0a85b03 	ldbu	r2,-24212(gp)
   21f78:	10803fcc 	andi	r2,r2,255
   21f7c:	10000426 	beq	r2,zero,21f90 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   21f80:	e0bfff17 	ldw	r2,-4(fp)
   21f84:	00c00484 	movi	r3,18
   21f88:	10c00005 	stb	r3,0(r2)
        return;
   21f8c:	00004606 	br	220a8 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21f90:	0005303a 	rdctl	r2,status
   21f94:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21f98:	e0fffc17 	ldw	r3,-16(fp)
   21f9c:	00bfff84 	movi	r2,-2
   21fa0:	1884703a 	and	r2,r3,r2
   21fa4:	1001703a 	wrctl	status,r2
  
  return context;
   21fa8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   21fac:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   21fb0:	e0bffd03 	ldbu	r2,-12(fp)
   21fb4:	10803fd8 	cmpnei	r2,r2,255
   21fb8:	1000031e 	bne	r2,zero,21fc8 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   21fbc:	d0a85c17 	ldw	r2,-24208(gp)
   21fc0:	10800c83 	ldbu	r2,50(r2)
   21fc4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   21fc8:	e0fffd03 	ldbu	r3,-12(fp)
   21fcc:	00800134 	movhi	r2,4
   21fd0:	10ae8104 	addi	r2,r2,-17916
   21fd4:	18c7883a 	add	r3,r3,r3
   21fd8:	18c7883a 	add	r3,r3,r3
   21fdc:	10c5883a 	add	r2,r2,r3
   21fe0:	10800017 	ldw	r2,0(r2)
   21fe4:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   21fe8:	e0bff717 	ldw	r2,-36(fp)
   21fec:	1000081e 	bne	r2,zero,22010 <OSTaskNameSet+0x108>
   21ff0:	e0bff517 	ldw	r2,-44(fp)
   21ff4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21ff8:	e0bff617 	ldw	r2,-40(fp)
   21ffc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   22000:	e0bfff17 	ldw	r2,-4(fp)
   22004:	00c010c4 	movi	r3,67
   22008:	10c00005 	stb	r3,0(r2)
        return;
   2200c:	00002606 	br	220a8 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   22010:	e0bff717 	ldw	r2,-36(fp)
   22014:	10800058 	cmpnei	r2,r2,1
   22018:	1000081e 	bne	r2,zero,2203c <OSTaskNameSet+0x134>
   2201c:	e0bff517 	ldw	r2,-44(fp)
   22020:	e0bff815 	stw	r2,-32(fp)
   22024:	e0bff817 	ldw	r2,-32(fp)
   22028:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   2202c:	e0bfff17 	ldw	r2,-4(fp)
   22030:	00c010c4 	movi	r3,67
   22034:	10c00005 	stb	r3,0(r2)
        return;
   22038:	00001b06 	br	220a8 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   2203c:	e13ffe17 	ldw	r4,-8(fp)
   22040:	001cfd40 	call	1cfd4 <OS_StrLen>
   22044:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   22048:	e0bffa03 	ldbu	r2,-24(fp)
   2204c:	10800830 	cmpltui	r2,r2,32
   22050:	1000081e 	bne	r2,zero,22074 <OSTaskNameSet+0x16c>
   22054:	e0bff517 	ldw	r2,-44(fp)
   22058:	e0bff915 	stw	r2,-28(fp)
   2205c:	e0bff917 	ldw	r2,-28(fp)
   22060:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   22064:	e0bfff17 	ldw	r2,-4(fp)
   22068:	00c01044 	movi	r3,65
   2206c:	10c00005 	stb	r3,0(r2)
        return;
   22070:	00000d06 	br	220a8 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   22074:	e0bff717 	ldw	r2,-36(fp)
   22078:	10801304 	addi	r2,r2,76
   2207c:	e17ffe17 	ldw	r5,-8(fp)
   22080:	1009883a 	mov	r4,r2
   22084:	001cf600 	call	1cf60 <OS_StrCopy>
   22088:	e0bff517 	ldw	r2,-44(fp)
   2208c:	e0bffb15 	stw	r2,-20(fp)
   22090:	e0bffb17 	ldw	r2,-20(fp)
   22094:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   22098:	e0bfff17 	ldw	r2,-4(fp)
   2209c:	10000005 	stb	zero,0(r2)
   220a0:	00000106 	br	220a8 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   220a4:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   220a8:	e037883a 	mov	sp,fp
   220ac:	dfc00117 	ldw	ra,4(sp)
   220b0:	df000017 	ldw	fp,0(sp)
   220b4:	dec00204 	addi	sp,sp,8
   220b8:	f800283a 	ret

000220bc <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   220bc:	defff404 	addi	sp,sp,-48
   220c0:	dfc00b15 	stw	ra,44(sp)
   220c4:	df000a15 	stw	fp,40(sp)
   220c8:	df000a04 	addi	fp,sp,40
   220cc:	2005883a 	mov	r2,r4
   220d0:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   220d4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   220d8:	e0bfff03 	ldbu	r2,-4(fp)
   220dc:	10800530 	cmpltui	r2,r2,20
   220e0:	1000021e 	bne	r2,zero,220ec <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   220e4:	00800a84 	movi	r2,42
   220e8:	00006406 	br	2227c <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   220ec:	0005303a 	rdctl	r2,status
   220f0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   220f4:	e0fffe17 	ldw	r3,-8(fp)
   220f8:	00bfff84 	movi	r2,-2
   220fc:	1884703a 	and	r2,r3,r2
   22100:	1001703a 	wrctl	status,r2
  
  return context;
   22104:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   22108:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   2210c:	e0ffff03 	ldbu	r3,-4(fp)
   22110:	00800134 	movhi	r2,4
   22114:	10ae8104 	addi	r2,r2,-17916
   22118:	18c7883a 	add	r3,r3,r3
   2211c:	18c7883a 	add	r3,r3,r3
   22120:	10c5883a 	add	r2,r2,r3
   22124:	10800017 	ldw	r2,0(r2)
   22128:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   2212c:	e0bff817 	ldw	r2,-32(fp)
   22130:	1000061e 	bne	r2,zero,2214c <OSTaskResume+0x90>
   22134:	e0bff617 	ldw	r2,-40(fp)
   22138:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2213c:	e0bff717 	ldw	r2,-36(fp)
   22140:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   22144:	00801184 	movi	r2,70
   22148:	00004c06 	br	2227c <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   2214c:	e0bff817 	ldw	r2,-32(fp)
   22150:	10800058 	cmpnei	r2,r2,1
   22154:	1000061e 	bne	r2,zero,22170 <OSTaskResume+0xb4>
   22158:	e0bff617 	ldw	r2,-40(fp)
   2215c:	e0bff915 	stw	r2,-28(fp)
   22160:	e0bff917 	ldw	r2,-28(fp)
   22164:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   22168:	008010c4 	movi	r2,67
   2216c:	00004306 	br	2227c <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   22170:	e0bff817 	ldw	r2,-32(fp)
   22174:	10800c03 	ldbu	r2,48(r2)
   22178:	10803fcc 	andi	r2,r2,255
   2217c:	1080020c 	andi	r2,r2,8
   22180:	10003926 	beq	r2,zero,22268 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   22184:	e0bff817 	ldw	r2,-32(fp)
   22188:	10c00c03 	ldbu	r3,48(r2)
   2218c:	00bffdc4 	movi	r2,-9
   22190:	1884703a 	and	r2,r3,r2
   22194:	1007883a 	mov	r3,r2
   22198:	e0bff817 	ldw	r2,-32(fp)
   2219c:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   221a0:	e0bff817 	ldw	r2,-32(fp)
   221a4:	10800c03 	ldbu	r2,48(r2)
   221a8:	10803fcc 	andi	r2,r2,255
   221ac:	1000281e 	bne	r2,zero,22250 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   221b0:	e0bff817 	ldw	r2,-32(fp)
   221b4:	10800b8b 	ldhu	r2,46(r2)
   221b8:	10bfffcc 	andi	r2,r2,65535
   221bc:	10001f1e 	bne	r2,zero,2223c <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   221c0:	e0bff817 	ldw	r2,-32(fp)
   221c4:	10c00d83 	ldbu	r3,54(r2)
   221c8:	d0a85903 	ldbu	r2,-24220(gp)
   221cc:	1884b03a 	or	r2,r3,r2
   221d0:	d0a85905 	stb	r2,-24220(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   221d4:	e0bff817 	ldw	r2,-32(fp)
   221d8:	10800d03 	ldbu	r2,52(r2)
   221dc:	10c03fcc 	andi	r3,r2,255
   221e0:	e0bff817 	ldw	r2,-32(fp)
   221e4:	10800d03 	ldbu	r2,52(r2)
   221e8:	11003fcc 	andi	r4,r2,255
   221ec:	d0a85944 	addi	r2,gp,-24219
   221f0:	2085883a 	add	r2,r4,r2
   221f4:	11000003 	ldbu	r4,0(r2)
   221f8:	e0bff817 	ldw	r2,-32(fp)
   221fc:	10800d43 	ldbu	r2,53(r2)
   22200:	2084b03a 	or	r2,r4,r2
   22204:	1009883a 	mov	r4,r2
   22208:	d0a85944 	addi	r2,gp,-24219
   2220c:	1885883a 	add	r2,r3,r2
   22210:	11000005 	stb	r4,0(r2)
   22214:	e0bff617 	ldw	r2,-40(fp)
   22218:	e0bffa15 	stw	r2,-24(fp)
   2221c:	e0bffa17 	ldw	r2,-24(fp)
   22220:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   22224:	d0a84d43 	ldbu	r2,-24267(gp)
   22228:	10803fcc 	andi	r2,r2,255
   2222c:	10800058 	cmpnei	r2,r2,1
   22230:	10000b1e 	bne	r2,zero,22260 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   22234:	001ce1c0 	call	1ce1c <OS_Sched>
   22238:	00000906 	br	22260 <OSTaskResume+0x1a4>
   2223c:	e0bff617 	ldw	r2,-40(fp)
   22240:	e0bffb15 	stw	r2,-20(fp)
   22244:	e0bffb17 	ldw	r2,-20(fp)
   22248:	1001703a 	wrctl	status,r2
   2224c:	00000406 	br	22260 <OSTaskResume+0x1a4>
   22250:	e0bff617 	ldw	r2,-40(fp)
   22254:	e0bffc15 	stw	r2,-16(fp)
   22258:	e0bffc17 	ldw	r2,-16(fp)
   2225c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   22260:	0005883a 	mov	r2,zero
   22264:	00000506 	br	2227c <OSTaskResume+0x1c0>
   22268:	e0bff617 	ldw	r2,-40(fp)
   2226c:	e0bffd15 	stw	r2,-12(fp)
   22270:	e0bffd17 	ldw	r2,-12(fp)
   22274:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   22278:	00801104 	movi	r2,68
}
   2227c:	e037883a 	mov	sp,fp
   22280:	dfc00117 	ldw	ra,4(sp)
   22284:	df000017 	ldw	fp,0(sp)
   22288:	dec00204 	addi	sp,sp,8
   2228c:	f800283a 	ret

00022290 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   22290:	defff304 	addi	sp,sp,-52
   22294:	df000c15 	stw	fp,48(sp)
   22298:	df000c04 	addi	fp,sp,48
   2229c:	2005883a 	mov	r2,r4
   222a0:	e17fff15 	stw	r5,-4(fp)
   222a4:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   222a8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   222ac:	e0bffe03 	ldbu	r2,-8(fp)
   222b0:	10800570 	cmpltui	r2,r2,21
   222b4:	1000051e 	bne	r2,zero,222cc <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   222b8:	e0bffe03 	ldbu	r2,-8(fp)
   222bc:	10803fe0 	cmpeqi	r2,r2,255
   222c0:	1000021e 	bne	r2,zero,222cc <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   222c4:	00800a84 	movi	r2,42
   222c8:	00005d06 	br	22440 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   222cc:	e0bfff17 	ldw	r2,-4(fp)
   222d0:	1000021e 	bne	r2,zero,222dc <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   222d4:	00800244 	movi	r2,9
   222d8:	00005906 	br	22440 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   222dc:	e0bfff17 	ldw	r2,-4(fp)
   222e0:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   222e4:	e0bfff17 	ldw	r2,-4(fp)
   222e8:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   222ec:	0005303a 	rdctl	r2,status
   222f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   222f4:	e0fffd17 	ldw	r3,-12(fp)
   222f8:	00bfff84 	movi	r2,-2
   222fc:	1884703a 	and	r2,r3,r2
   22300:	1001703a 	wrctl	status,r2
  
  return context;
   22304:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   22308:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   2230c:	e0bffe03 	ldbu	r2,-8(fp)
   22310:	10803fd8 	cmpnei	r2,r2,255
   22314:	1000031e 	bne	r2,zero,22324 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   22318:	d0a85c17 	ldw	r2,-24208(gp)
   2231c:	10800c83 	ldbu	r2,50(r2)
   22320:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   22324:	e0fffe03 	ldbu	r3,-8(fp)
   22328:	00800134 	movhi	r2,4
   2232c:	10ae8104 	addi	r2,r2,-17916
   22330:	18c7883a 	add	r3,r3,r3
   22334:	18c7883a 	add	r3,r3,r3
   22338:	10c5883a 	add	r2,r2,r3
   2233c:	10800017 	ldw	r2,0(r2)
   22340:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   22344:	e0bff817 	ldw	r2,-32(fp)
   22348:	1000061e 	bne	r2,zero,22364 <OSTaskStkChk+0xd4>
   2234c:	e0bff617 	ldw	r2,-40(fp)
   22350:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22354:	e0bff717 	ldw	r2,-36(fp)
   22358:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   2235c:	008010c4 	movi	r2,67
   22360:	00003706 	br	22440 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   22364:	e0bff817 	ldw	r2,-32(fp)
   22368:	10800058 	cmpnei	r2,r2,1
   2236c:	1000061e 	bne	r2,zero,22388 <OSTaskStkChk+0xf8>
   22370:	e0bff617 	ldw	r2,-40(fp)
   22374:	e0bff915 	stw	r2,-28(fp)
   22378:	e0bff917 	ldw	r2,-28(fp)
   2237c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   22380:	008010c4 	movi	r2,67
   22384:	00002e06 	br	22440 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   22388:	e0bff817 	ldw	r2,-32(fp)
   2238c:	1080040b 	ldhu	r2,16(r2)
   22390:	10bfffcc 	andi	r2,r2,65535
   22394:	1080004c 	andi	r2,r2,1
   22398:	1000061e 	bne	r2,zero,223b4 <OSTaskStkChk+0x124>
   2239c:	e0bff617 	ldw	r2,-40(fp)
   223a0:	e0bffa15 	stw	r2,-24(fp)
   223a4:	e0bffa17 	ldw	r2,-24(fp)
   223a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   223ac:	00801144 	movi	r2,69
   223b0:	00002306 	br	22440 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   223b4:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   223b8:	e0bff817 	ldw	r2,-32(fp)
   223bc:	10800317 	ldw	r2,12(r2)
   223c0:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   223c4:	e0bff817 	ldw	r2,-32(fp)
   223c8:	10800217 	ldw	r2,8(r2)
   223cc:	e0bff415 	stw	r2,-48(fp)
   223d0:	e0bff617 	ldw	r2,-40(fp)
   223d4:	e0bffb15 	stw	r2,-20(fp)
   223d8:	e0bffb17 	ldw	r2,-20(fp)
   223dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   223e0:	00000306 	br	223f0 <OSTaskStkChk+0x160>
        nfree++;
   223e4:	e0bff517 	ldw	r2,-44(fp)
   223e8:	10800044 	addi	r2,r2,1
   223ec:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   223f0:	e0bff417 	ldw	r2,-48(fp)
   223f4:	10c00104 	addi	r3,r2,4
   223f8:	e0fff415 	stw	r3,-48(fp)
   223fc:	10800017 	ldw	r2,0(r2)
   22400:	103ff826 	beq	r2,zero,223e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70223e4>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   22404:	e0bff517 	ldw	r2,-44(fp)
   22408:	1085883a 	add	r2,r2,r2
   2240c:	1085883a 	add	r2,r2,r2
   22410:	1007883a 	mov	r3,r2
   22414:	e0bfff17 	ldw	r2,-4(fp)
   22418:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   2241c:	e0fffc17 	ldw	r3,-16(fp)
   22420:	e0bff517 	ldw	r2,-44(fp)
   22424:	1885c83a 	sub	r2,r3,r2
   22428:	1085883a 	add	r2,r2,r2
   2242c:	1085883a 	add	r2,r2,r2
   22430:	1007883a 	mov	r3,r2
   22434:	e0bfff17 	ldw	r2,-4(fp)
   22438:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   2243c:	0005883a 	mov	r2,zero
}
   22440:	e037883a 	mov	sp,fp
   22444:	df000017 	ldw	fp,0(sp)
   22448:	dec00104 	addi	sp,sp,4
   2244c:	f800283a 	ret

00022450 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   22450:	defff504 	addi	sp,sp,-44
   22454:	dfc00a15 	stw	ra,40(sp)
   22458:	df000915 	stw	fp,36(sp)
   2245c:	df000904 	addi	fp,sp,36
   22460:	2005883a 	mov	r2,r4
   22464:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   22468:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   2246c:	e0bfff03 	ldbu	r2,-4(fp)
   22470:	10800518 	cmpnei	r2,r2,20
   22474:	1000021e 	bne	r2,zero,22480 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   22478:	008011c4 	movi	r2,71
   2247c:	00006806 	br	22620 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   22480:	e0bfff03 	ldbu	r2,-4(fp)
   22484:	10800530 	cmpltui	r2,r2,20
   22488:	1000051e 	bne	r2,zero,224a0 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   2248c:	e0bfff03 	ldbu	r2,-4(fp)
   22490:	10803fe0 	cmpeqi	r2,r2,255
   22494:	1000021e 	bne	r2,zero,224a0 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   22498:	00800a84 	movi	r2,42
   2249c:	00006006 	br	22620 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   224a0:	0005303a 	rdctl	r2,status
   224a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   224a8:	e0fffe17 	ldw	r3,-8(fp)
   224ac:	00bfff84 	movi	r2,-2
   224b0:	1884703a 	and	r2,r3,r2
   224b4:	1001703a 	wrctl	status,r2
  
  return context;
   224b8:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   224bc:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   224c0:	e0bfff03 	ldbu	r2,-4(fp)
   224c4:	10803fd8 	cmpnei	r2,r2,255
   224c8:	1000061e 	bne	r2,zero,224e4 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   224cc:	d0a85c17 	ldw	r2,-24208(gp)
   224d0:	10800c83 	ldbu	r2,50(r2)
   224d4:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   224d8:	00800044 	movi	r2,1
   224dc:	e0bff705 	stb	r2,-36(fp)
   224e0:	00000906 	br	22508 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   224e4:	d0a85c17 	ldw	r2,-24208(gp)
   224e8:	10800c83 	ldbu	r2,50(r2)
   224ec:	10c03fcc 	andi	r3,r2,255
   224f0:	e0bfff03 	ldbu	r2,-4(fp)
   224f4:	1880031e 	bne	r3,r2,22504 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   224f8:	00800044 	movi	r2,1
   224fc:	e0bff705 	stb	r2,-36(fp)
   22500:	00000106 	br	22508 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   22504:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   22508:	e0ffff03 	ldbu	r3,-4(fp)
   2250c:	00800134 	movhi	r2,4
   22510:	10ae8104 	addi	r2,r2,-17916
   22514:	18c7883a 	add	r3,r3,r3
   22518:	18c7883a 	add	r3,r3,r3
   2251c:	10c5883a 	add	r2,r2,r3
   22520:	10800017 	ldw	r2,0(r2)
   22524:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   22528:	e0bffa17 	ldw	r2,-24(fp)
   2252c:	1000061e 	bne	r2,zero,22548 <OSTaskSuspend+0xf8>
   22530:	e0bff817 	ldw	r2,-32(fp)
   22534:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22538:	e0bff917 	ldw	r2,-28(fp)
   2253c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   22540:	00801204 	movi	r2,72
   22544:	00003606 	br	22620 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   22548:	e0bffa17 	ldw	r2,-24(fp)
   2254c:	10800058 	cmpnei	r2,r2,1
   22550:	1000061e 	bne	r2,zero,2256c <OSTaskSuspend+0x11c>
   22554:	e0bff817 	ldw	r2,-32(fp)
   22558:	e0bffb15 	stw	r2,-20(fp)
   2255c:	e0bffb17 	ldw	r2,-20(fp)
   22560:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   22564:	008010c4 	movi	r2,67
   22568:	00002d06 	br	22620 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   2256c:	e0bffa17 	ldw	r2,-24(fp)
   22570:	10800d03 	ldbu	r2,52(r2)
   22574:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   22578:	e0fffd03 	ldbu	r3,-12(fp)
   2257c:	e13ffd03 	ldbu	r4,-12(fp)
   22580:	d0a85944 	addi	r2,gp,-24219
   22584:	2085883a 	add	r2,r4,r2
   22588:	10800003 	ldbu	r2,0(r2)
   2258c:	1009883a 	mov	r4,r2
   22590:	e0bffa17 	ldw	r2,-24(fp)
   22594:	10800d43 	ldbu	r2,53(r2)
   22598:	0084303a 	nor	r2,zero,r2
   2259c:	2084703a 	and	r2,r4,r2
   225a0:	1009883a 	mov	r4,r2
   225a4:	d0a85944 	addi	r2,gp,-24219
   225a8:	1885883a 	add	r2,r3,r2
   225ac:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   225b0:	e0fffd03 	ldbu	r3,-12(fp)
   225b4:	d0a85944 	addi	r2,gp,-24219
   225b8:	1885883a 	add	r2,r3,r2
   225bc:	10800003 	ldbu	r2,0(r2)
   225c0:	10803fcc 	andi	r2,r2,255
   225c4:	1000071e 	bne	r2,zero,225e4 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   225c8:	e0bffa17 	ldw	r2,-24(fp)
   225cc:	10800d83 	ldbu	r2,54(r2)
   225d0:	0084303a 	nor	r2,zero,r2
   225d4:	1007883a 	mov	r3,r2
   225d8:	d0a85903 	ldbu	r2,-24220(gp)
   225dc:	1884703a 	and	r2,r3,r2
   225e0:	d0a85905 	stb	r2,-24220(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   225e4:	e0bffa17 	ldw	r2,-24(fp)
   225e8:	10800c03 	ldbu	r2,48(r2)
   225ec:	10800214 	ori	r2,r2,8
   225f0:	1007883a 	mov	r3,r2
   225f4:	e0bffa17 	ldw	r2,-24(fp)
   225f8:	10c00c05 	stb	r3,48(r2)
   225fc:	e0bff817 	ldw	r2,-32(fp)
   22600:	e0bffc15 	stw	r2,-16(fp)
   22604:	e0bffc17 	ldw	r2,-16(fp)
   22608:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   2260c:	e0bff703 	ldbu	r2,-36(fp)
   22610:	10800058 	cmpnei	r2,r2,1
   22614:	1000011e 	bne	r2,zero,2261c <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   22618:	001ce1c0 	call	1ce1c <OS_Sched>
    }
    return (OS_ERR_NONE);
   2261c:	0005883a 	mov	r2,zero
}
   22620:	e037883a 	mov	sp,fp
   22624:	dfc00117 	ldw	ra,4(sp)
   22628:	df000017 	ldw	fp,0(sp)
   2262c:	dec00204 	addi	sp,sp,8
   22630:	f800283a 	ret

00022634 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   22634:	defff604 	addi	sp,sp,-40
   22638:	dfc00915 	stw	ra,36(sp)
   2263c:	df000815 	stw	fp,32(sp)
   22640:	df000804 	addi	fp,sp,32
   22644:	2005883a 	mov	r2,r4
   22648:	e17fff15 	stw	r5,-4(fp)
   2264c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   22650:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   22654:	e0bffe03 	ldbu	r2,-8(fp)
   22658:	10800570 	cmpltui	r2,r2,21
   2265c:	1000051e 	bne	r2,zero,22674 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   22660:	e0bffe03 	ldbu	r2,-8(fp)
   22664:	10803fe0 	cmpeqi	r2,r2,255
   22668:	1000021e 	bne	r2,zero,22674 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   2266c:	00800a84 	movi	r2,42
   22670:	00003406 	br	22744 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   22674:	e0bfff17 	ldw	r2,-4(fp)
   22678:	1000021e 	bne	r2,zero,22684 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   2267c:	00800244 	movi	r2,9
   22680:	00003006 	br	22744 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22684:	0005303a 	rdctl	r2,status
   22688:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2268c:	e0fffd17 	ldw	r3,-12(fp)
   22690:	00bfff84 	movi	r2,-2
   22694:	1884703a 	and	r2,r3,r2
   22698:	1001703a 	wrctl	status,r2
  
  return context;
   2269c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   226a0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   226a4:	e0bffe03 	ldbu	r2,-8(fp)
   226a8:	10803fd8 	cmpnei	r2,r2,255
   226ac:	1000031e 	bne	r2,zero,226bc <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   226b0:	d0a85c17 	ldw	r2,-24208(gp)
   226b4:	10800c83 	ldbu	r2,50(r2)
   226b8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   226bc:	e0fffe03 	ldbu	r3,-8(fp)
   226c0:	00800134 	movhi	r2,4
   226c4:	10ae8104 	addi	r2,r2,-17916
   226c8:	18c7883a 	add	r3,r3,r3
   226cc:	18c7883a 	add	r3,r3,r3
   226d0:	10c5883a 	add	r2,r2,r3
   226d4:	10800017 	ldw	r2,0(r2)
   226d8:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   226dc:	e0bffa17 	ldw	r2,-24(fp)
   226e0:	1000061e 	bne	r2,zero,226fc <OSTaskQuery+0xc8>
   226e4:	e0bff817 	ldw	r2,-32(fp)
   226e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   226ec:	e0bff917 	ldw	r2,-28(fp)
   226f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   226f4:	00800a44 	movi	r2,41
   226f8:	00001206 	br	22744 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   226fc:	e0bffa17 	ldw	r2,-24(fp)
   22700:	10800058 	cmpnei	r2,r2,1
   22704:	1000061e 	bne	r2,zero,22720 <OSTaskQuery+0xec>
   22708:	e0bff817 	ldw	r2,-32(fp)
   2270c:	e0bffb15 	stw	r2,-20(fp)
   22710:	e0bffb17 	ldw	r2,-20(fp)
   22714:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   22718:	008010c4 	movi	r2,67
   2271c:	00000906 	br	22744 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   22720:	01801b04 	movi	r6,108
   22724:	e17ffa17 	ldw	r5,-24(fp)
   22728:	e13fff17 	ldw	r4,-4(fp)
   2272c:	001cdb40 	call	1cdb4 <OS_MemCopy>
   22730:	e0bff817 	ldw	r2,-32(fp)
   22734:	e0bffc15 	stw	r2,-16(fp)
   22738:	e0bffc17 	ldw	r2,-16(fp)
   2273c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   22740:	0005883a 	mov	r2,zero
}
   22744:	e037883a 	mov	sp,fp
   22748:	dfc00117 	ldw	ra,4(sp)
   2274c:	df000017 	ldw	fp,0(sp)
   22750:	dec00204 	addi	sp,sp,8
   22754:	f800283a 	ret

00022758 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   22758:	defffc04 	addi	sp,sp,-16
   2275c:	df000315 	stw	fp,12(sp)
   22760:	df000304 	addi	fp,sp,12
   22764:	e13ffd15 	stw	r4,-12(fp)
   22768:	e17ffe15 	stw	r5,-8(fp)
   2276c:	3005883a 	mov	r2,r6
   22770:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   22774:	e0bfff0b 	ldhu	r2,-4(fp)
   22778:	1080004c 	andi	r2,r2,1
   2277c:	10000d26 	beq	r2,zero,227b4 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   22780:	e0bfff0b 	ldhu	r2,-4(fp)
   22784:	1080008c 	andi	r2,r2,2
   22788:	10000a26 	beq	r2,zero,227b4 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   2278c:	00000706 	br	227ac <OS_TaskStkClr+0x54>
                size--;
   22790:	e0bffe17 	ldw	r2,-8(fp)
   22794:	10bfffc4 	addi	r2,r2,-1
   22798:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   2279c:	e0bffd17 	ldw	r2,-12(fp)
   227a0:	10c00104 	addi	r3,r2,4
   227a4:	e0fffd15 	stw	r3,-12(fp)
   227a8:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   227ac:	e0bffe17 	ldw	r2,-8(fp)
   227b0:	103ff71e 	bne	r2,zero,22790 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7022790>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   227b4:	0001883a 	nop
   227b8:	e037883a 	mov	sp,fp
   227bc:	df000017 	ldw	fp,0(sp)
   227c0:	dec00104 	addi	sp,sp,4
   227c4:	f800283a 	ret

000227c8 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   227c8:	defff904 	addi	sp,sp,-28
   227cc:	dfc00615 	stw	ra,24(sp)
   227d0:	df000515 	stw	fp,20(sp)
   227d4:	df000504 	addi	fp,sp,20
   227d8:	2005883a 	mov	r2,r4
   227dc:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   227e0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   227e4:	d0a85b03 	ldbu	r2,-24212(gp)
   227e8:	10803fcc 	andi	r2,r2,255
   227ec:	1000311e 	bne	r2,zero,228b4 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   227f0:	e0bfff0b 	ldhu	r2,-4(fp)
   227f4:	10003026 	beq	r2,zero,228b8 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   227f8:	0005303a 	rdctl	r2,status
   227fc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22800:	e0fffe17 	ldw	r3,-8(fp)
   22804:	00bfff84 	movi	r2,-2
   22808:	1884703a 	and	r2,r3,r2
   2280c:	1001703a 	wrctl	status,r2
  
  return context;
   22810:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   22814:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   22818:	d0a85c17 	ldw	r2,-24208(gp)
   2281c:	10800d03 	ldbu	r2,52(r2)
   22820:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   22824:	e0fffd03 	ldbu	r3,-12(fp)
   22828:	e13ffd03 	ldbu	r4,-12(fp)
   2282c:	d0a85944 	addi	r2,gp,-24219
   22830:	2085883a 	add	r2,r4,r2
   22834:	10800003 	ldbu	r2,0(r2)
   22838:	1009883a 	mov	r4,r2
   2283c:	d0a85c17 	ldw	r2,-24208(gp)
   22840:	10800d43 	ldbu	r2,53(r2)
   22844:	0084303a 	nor	r2,zero,r2
   22848:	2084703a 	and	r2,r4,r2
   2284c:	1009883a 	mov	r4,r2
   22850:	d0a85944 	addi	r2,gp,-24219
   22854:	1885883a 	add	r2,r3,r2
   22858:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   2285c:	e0fffd03 	ldbu	r3,-12(fp)
   22860:	d0a85944 	addi	r2,gp,-24219
   22864:	1885883a 	add	r2,r3,r2
   22868:	10800003 	ldbu	r2,0(r2)
   2286c:	10803fcc 	andi	r2,r2,255
   22870:	1000071e 	bne	r2,zero,22890 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   22874:	d0a85c17 	ldw	r2,-24208(gp)
   22878:	10800d83 	ldbu	r2,54(r2)
   2287c:	0084303a 	nor	r2,zero,r2
   22880:	1007883a 	mov	r3,r2
   22884:	d0a85903 	ldbu	r2,-24220(gp)
   22888:	1884703a 	and	r2,r3,r2
   2288c:	d0a85905 	stb	r2,-24220(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   22890:	d0a85c17 	ldw	r2,-24208(gp)
   22894:	e0ffff0b 	ldhu	r3,-4(fp)
   22898:	10c00b8d 	sth	r3,46(r2)
   2289c:	e0bffb17 	ldw	r2,-20(fp)
   228a0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   228a4:	e0bffc17 	ldw	r2,-16(fp)
   228a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   228ac:	001ce1c0 	call	1ce1c <OS_Sched>
   228b0:	00000106 	br	228b8 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   228b4:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   228b8:	e037883a 	mov	sp,fp
   228bc:	dfc00117 	ldw	ra,4(sp)
   228c0:	df000017 	ldw	fp,0(sp)
   228c4:	dec00204 	addi	sp,sp,8
   228c8:	f800283a 	ret

000228cc <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   228cc:	defff804 	addi	sp,sp,-32
   228d0:	dfc00715 	stw	ra,28(sp)
   228d4:	df000615 	stw	fp,24(sp)
   228d8:	df000604 	addi	fp,sp,24
   228dc:	2015883a 	mov	r10,r4
   228e0:	2809883a 	mov	r4,r5
   228e4:	3007883a 	mov	r3,r6
   228e8:	3805883a 	mov	r2,r7
   228ec:	e2bffc05 	stb	r10,-16(fp)
   228f0:	e13ffd05 	stb	r4,-12(fp)
   228f4:	e0fffe05 	stb	r3,-8(fp)
   228f8:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   228fc:	d0a85b03 	ldbu	r2,-24212(gp)
   22900:	10803fcc 	andi	r2,r2,255
   22904:	10000226 	beq	r2,zero,22910 <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
   22908:	00801544 	movi	r2,85
   2290c:	00004206 	br	22a18 <OSTimeDlyHMSM+0x14c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   22910:	e0bffc03 	ldbu	r2,-16(fp)
   22914:	1000081e 	bne	r2,zero,22938 <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
   22918:	e0bffd03 	ldbu	r2,-12(fp)
   2291c:	1000061e 	bne	r2,zero,22938 <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
   22920:	e0bffe03 	ldbu	r2,-8(fp)
   22924:	1000041e 	bne	r2,zero,22938 <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
   22928:	e0bfff0b 	ldhu	r2,-4(fp)
   2292c:	1000021e 	bne	r2,zero,22938 <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
   22930:	00801504 	movi	r2,84
   22934:	00003806 	br	22a18 <OSTimeDlyHMSM+0x14c>
                }
            }
        }
    }
    if (minutes > 59) {
   22938:	e0bffd03 	ldbu	r2,-12(fp)
   2293c:	10800f30 	cmpltui	r2,r2,60
   22940:	1000021e 	bne	r2,zero,2294c <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   22944:	00801444 	movi	r2,81
   22948:	00003306 	br	22a18 <OSTimeDlyHMSM+0x14c>
    }
    if (seconds > 59) {
   2294c:	e0bffe03 	ldbu	r2,-8(fp)
   22950:	10800f30 	cmpltui	r2,r2,60
   22954:	1000021e 	bne	r2,zero,22960 <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
   22958:	00801484 	movi	r2,82
   2295c:	00002e06 	br	22a18 <OSTimeDlyHMSM+0x14c>
    }
    if (ms > 999) {
   22960:	e0bfff0b 	ldhu	r2,-4(fp)
   22964:	1080fa30 	cmpltui	r2,r2,1000
   22968:	1000021e 	bne	r2,zero,22974 <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
   2296c:	008014c4 	movi	r2,83
   22970:	00002906 	br	22a18 <OSTimeDlyHMSM+0x14c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   22974:	e0bffc03 	ldbu	r2,-16(fp)
   22978:	10c38424 	muli	r3,r2,3600
   2297c:	e0bffd03 	ldbu	r2,-12(fp)
   22980:	10800f24 	muli	r2,r2,60
   22984:	1887883a 	add	r3,r3,r2
   22988:	e0bffe03 	ldbu	r2,-8(fp)
   2298c:	1885883a 	add	r2,r3,r2
   22990:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   22994:	e0bfff0b 	ldhu	r2,-4(fp)
   22998:	10800f84 	addi	r2,r2,62
   2299c:	100690fa 	slli	r3,r2,3
   229a0:	008418b4 	movhi	r2,4194
   229a4:	109374c4 	addi	r2,r2,19923
   229a8:	188a383a 	mulxuu	r5,r3,r2
   229ac:	1885383a 	mul	r2,r3,r2
   229b0:	1011883a 	mov	r8,r2
   229b4:	2813883a 	mov	r9,r5
   229b8:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   229bc:	2085883a 	add	r2,r4,r2
   229c0:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   229c4:	e0bffb17 	ldw	r2,-20(fp)
   229c8:	1004d43a 	srli	r2,r2,16
   229cc:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   229d0:	e0bffb17 	ldw	r2,-20(fp)
   229d4:	10bfffcc 	andi	r2,r2,65535
   229d8:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   229dc:	e0bffb17 	ldw	r2,-20(fp)
   229e0:	10bfffcc 	andi	r2,r2,65535
   229e4:	1009883a 	mov	r4,r2
   229e8:	00227c80 	call	227c8 <OSTimeDly>
    while (loops > 0) {
   229ec:	00000706 	br	22a0c <OSTimeDlyHMSM+0x140>
        OSTimeDly((INT16U)32768u);
   229f0:	01200014 	movui	r4,32768
   229f4:	00227c80 	call	227c8 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   229f8:	01200014 	movui	r4,32768
   229fc:	00227c80 	call	227c8 <OSTimeDly>
        loops--;
   22a00:	e0bffa0b 	ldhu	r2,-24(fp)
   22a04:	10bfffc4 	addi	r2,r2,-1
   22a08:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   22a0c:	e0bffa0b 	ldhu	r2,-24(fp)
   22a10:	103ff71e 	bne	r2,zero,229f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70229f0>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   22a14:	0005883a 	mov	r2,zero
}
   22a18:	e037883a 	mov	sp,fp
   22a1c:	dfc00117 	ldw	ra,4(sp)
   22a20:	df000017 	ldw	fp,0(sp)
   22a24:	dec00204 	addi	sp,sp,8
   22a28:	f800283a 	ret

00022a2c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   22a2c:	defff504 	addi	sp,sp,-44
   22a30:	dfc00a15 	stw	ra,40(sp)
   22a34:	df000915 	stw	fp,36(sp)
   22a38:	df000904 	addi	fp,sp,36
   22a3c:	2005883a 	mov	r2,r4
   22a40:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   22a44:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   22a48:	e0bfff03 	ldbu	r2,-4(fp)
   22a4c:	10800530 	cmpltui	r2,r2,20
   22a50:	1000021e 	bne	r2,zero,22a5c <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   22a54:	00800a84 	movi	r2,42
   22a58:	00006406 	br	22bec <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22a5c:	0005303a 	rdctl	r2,status
   22a60:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22a64:	e0fffe17 	ldw	r3,-8(fp)
   22a68:	00bfff84 	movi	r2,-2
   22a6c:	1884703a 	and	r2,r3,r2
   22a70:	1001703a 	wrctl	status,r2
  
  return context;
   22a74:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   22a78:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   22a7c:	e0ffff03 	ldbu	r3,-4(fp)
   22a80:	00800134 	movhi	r2,4
   22a84:	10ae8104 	addi	r2,r2,-17916
   22a88:	18c7883a 	add	r3,r3,r3
   22a8c:	18c7883a 	add	r3,r3,r3
   22a90:	10c5883a 	add	r2,r2,r3
   22a94:	10800017 	ldw	r2,0(r2)
   22a98:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   22a9c:	e0bff917 	ldw	r2,-28(fp)
   22aa0:	1000061e 	bne	r2,zero,22abc <OSTimeDlyResume+0x90>
   22aa4:	e0bff717 	ldw	r2,-36(fp)
   22aa8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22aac:	e0bff817 	ldw	r2,-32(fp)
   22ab0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   22ab4:	008010c4 	movi	r2,67
   22ab8:	00004c06 	br	22bec <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   22abc:	e0bff917 	ldw	r2,-28(fp)
   22ac0:	10800058 	cmpnei	r2,r2,1
   22ac4:	1000061e 	bne	r2,zero,22ae0 <OSTimeDlyResume+0xb4>
   22ac8:	e0bff717 	ldw	r2,-36(fp)
   22acc:	e0bffa15 	stw	r2,-24(fp)
   22ad0:	e0bffa17 	ldw	r2,-24(fp)
   22ad4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   22ad8:	008010c4 	movi	r2,67
   22adc:	00004306 	br	22bec <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   22ae0:	e0bff917 	ldw	r2,-28(fp)
   22ae4:	10800b8b 	ldhu	r2,46(r2)
   22ae8:	10bfffcc 	andi	r2,r2,65535
   22aec:	1000061e 	bne	r2,zero,22b08 <OSTimeDlyResume+0xdc>
   22af0:	e0bff717 	ldw	r2,-36(fp)
   22af4:	e0bffb15 	stw	r2,-20(fp)
   22af8:	e0bffb17 	ldw	r2,-20(fp)
   22afc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   22b00:	00801404 	movi	r2,80
   22b04:	00003906 	br	22bec <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   22b08:	e0bff917 	ldw	r2,-28(fp)
   22b0c:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   22b10:	e0bff917 	ldw	r2,-28(fp)
   22b14:	10800c03 	ldbu	r2,48(r2)
   22b18:	10803fcc 	andi	r2,r2,255
   22b1c:	10800dcc 	andi	r2,r2,55
   22b20:	10000b26 	beq	r2,zero,22b50 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   22b24:	e0bff917 	ldw	r2,-28(fp)
   22b28:	10c00c03 	ldbu	r3,48(r2)
   22b2c:	00bff204 	movi	r2,-56
   22b30:	1884703a 	and	r2,r3,r2
   22b34:	1007883a 	mov	r3,r2
   22b38:	e0bff917 	ldw	r2,-28(fp)
   22b3c:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   22b40:	e0bff917 	ldw	r2,-28(fp)
   22b44:	00c00044 	movi	r3,1
   22b48:	10c00c45 	stb	r3,49(r2)
   22b4c:	00000206 	br	22b58 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   22b50:	e0bff917 	ldw	r2,-28(fp)
   22b54:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   22b58:	e0bff917 	ldw	r2,-28(fp)
   22b5c:	10800c03 	ldbu	r2,48(r2)
   22b60:	10803fcc 	andi	r2,r2,255
   22b64:	1080020c 	andi	r2,r2,8
   22b68:	10001b1e 	bne	r2,zero,22bd8 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   22b6c:	e0bff917 	ldw	r2,-28(fp)
   22b70:	10c00d83 	ldbu	r3,54(r2)
   22b74:	d0a85903 	ldbu	r2,-24220(gp)
   22b78:	1884b03a 	or	r2,r3,r2
   22b7c:	d0a85905 	stb	r2,-24220(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   22b80:	e0bff917 	ldw	r2,-28(fp)
   22b84:	10800d03 	ldbu	r2,52(r2)
   22b88:	10c03fcc 	andi	r3,r2,255
   22b8c:	e0bff917 	ldw	r2,-28(fp)
   22b90:	10800d03 	ldbu	r2,52(r2)
   22b94:	11003fcc 	andi	r4,r2,255
   22b98:	d0a85944 	addi	r2,gp,-24219
   22b9c:	2085883a 	add	r2,r4,r2
   22ba0:	11000003 	ldbu	r4,0(r2)
   22ba4:	e0bff917 	ldw	r2,-28(fp)
   22ba8:	10800d43 	ldbu	r2,53(r2)
   22bac:	2084b03a 	or	r2,r4,r2
   22bb0:	1009883a 	mov	r4,r2
   22bb4:	d0a85944 	addi	r2,gp,-24219
   22bb8:	1885883a 	add	r2,r3,r2
   22bbc:	11000005 	stb	r4,0(r2)
   22bc0:	e0bff717 	ldw	r2,-36(fp)
   22bc4:	e0bffc15 	stw	r2,-16(fp)
   22bc8:	e0bffc17 	ldw	r2,-16(fp)
   22bcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   22bd0:	001ce1c0 	call	1ce1c <OS_Sched>
   22bd4:	00000406 	br	22be8 <OSTimeDlyResume+0x1bc>
   22bd8:	e0bff717 	ldw	r2,-36(fp)
   22bdc:	e0bffd15 	stw	r2,-12(fp)
   22be0:	e0bffd17 	ldw	r2,-12(fp)
   22be4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   22be8:	0005883a 	mov	r2,zero
}
   22bec:	e037883a 	mov	sp,fp
   22bf0:	dfc00117 	ldw	ra,4(sp)
   22bf4:	df000017 	ldw	fp,0(sp)
   22bf8:	dec00204 	addi	sp,sp,8
   22bfc:	f800283a 	ret

00022c00 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   22c00:	defffb04 	addi	sp,sp,-20
   22c04:	df000415 	stw	fp,16(sp)
   22c08:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   22c0c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22c10:	0005303a 	rdctl	r2,status
   22c14:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22c18:	e0fffe17 	ldw	r3,-8(fp)
   22c1c:	00bfff84 	movi	r2,-2
   22c20:	1884703a 	and	r2,r3,r2
   22c24:	1001703a 	wrctl	status,r2
  
  return context;
   22c28:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   22c2c:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   22c30:	d0a85d17 	ldw	r2,-24204(gp)
   22c34:	e0bffd15 	stw	r2,-12(fp)
   22c38:	e0bffc17 	ldw	r2,-16(fp)
   22c3c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22c40:	e0bfff17 	ldw	r2,-4(fp)
   22c44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   22c48:	e0bffd17 	ldw	r2,-12(fp)
}
   22c4c:	e037883a 	mov	sp,fp
   22c50:	df000017 	ldw	fp,0(sp)
   22c54:	dec00104 	addi	sp,sp,4
   22c58:	f800283a 	ret

00022c5c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   22c5c:	defffb04 	addi	sp,sp,-20
   22c60:	df000415 	stw	fp,16(sp)
   22c64:	df000404 	addi	fp,sp,16
   22c68:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   22c6c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22c70:	0005303a 	rdctl	r2,status
   22c74:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22c78:	e0fffd17 	ldw	r3,-12(fp)
   22c7c:	00bfff84 	movi	r2,-2
   22c80:	1884703a 	and	r2,r3,r2
   22c84:	1001703a 	wrctl	status,r2
  
  return context;
   22c88:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   22c8c:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   22c90:	e0bfff17 	ldw	r2,-4(fp)
   22c94:	d0a85d15 	stw	r2,-24204(gp)
   22c98:	e0bffc17 	ldw	r2,-16(fp)
   22c9c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22ca0:	e0bffe17 	ldw	r2,-8(fp)
   22ca4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   22ca8:	0001883a 	nop
   22cac:	e037883a 	mov	sp,fp
   22cb0:	df000017 	ldw	fp,0(sp)
   22cb4:	dec00104 	addi	sp,sp,4
   22cb8:	f800283a 	ret

00022cbc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   22cbc:	defffd04 	addi	sp,sp,-12
   22cc0:	dfc00215 	stw	ra,8(sp)
   22cc4:	df000115 	stw	fp,4(sp)
   22cc8:	df000104 	addi	fp,sp,4
   22ccc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   22cd0:	d1602104 	addi	r5,gp,-32636
   22cd4:	e13fff17 	ldw	r4,-4(fp)
   22cd8:	00257980 	call	25798 <alt_dev_llist_insert>
}
   22cdc:	e037883a 	mov	sp,fp
   22ce0:	dfc00117 	ldw	ra,4(sp)
   22ce4:	df000017 	ldw	fp,0(sp)
   22ce8:	dec00204 	addi	sp,sp,8
   22cec:	f800283a 	ret

00022cf0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   22cf0:	defffd04 	addi	sp,sp,-12
   22cf4:	dfc00215 	stw	ra,8(sp)
   22cf8:	df000115 	stw	fp,4(sp)
   22cfc:	df000104 	addi	fp,sp,4
   22d00:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   22d04:	00260780 	call	26078 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   22d08:	00800044 	movi	r2,1
   22d0c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   22d10:	0001883a 	nop
   22d14:	e037883a 	mov	sp,fp
   22d18:	dfc00117 	ldw	ra,4(sp)
   22d1c:	df000017 	ldw	fp,0(sp)
   22d20:	dec00204 	addi	sp,sp,8
   22d24:	f800283a 	ret

00022d28 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   22d28:	defffc04 	addi	sp,sp,-16
   22d2c:	dfc00315 	stw	ra,12(sp)
   22d30:	df000215 	stw	fp,8(sp)
   22d34:	df000204 	addi	fp,sp,8
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   22d38:	01c00204 	movi	r7,8
   22d3c:	000d883a 	mov	r6,zero
   22d40:	000b883a 	mov	r5,zero
   22d44:	01040034 	movhi	r4,4096
   22d48:	21080004 	addi	r4,r4,8192
   22d4c:	00242dc0 	call	242dc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   22d50:	01800204 	movi	r6,8
   22d54:	000b883a 	mov	r5,zero
   22d58:	010000f4 	movhi	r4,3
   22d5c:	21248c04 	addi	r4,r4,-28112
   22d60:	00236a00 	call	236a0 <altera_avalon_jtag_uart_init>
   22d64:	010000f4 	movhi	r4,3
   22d68:	21248204 	addi	r4,r4,-28152
   22d6c:	0022cbc0 	call	22cbc <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   22d70:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   22d74:	010000f4 	movhi	r4,3
   22d78:	21289d04 	addi	r4,r4,-23948
   22d7c:	0022cbc0 	call	22cbc <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   22d80:	010000f4 	movhi	r4,3
   22d84:	2128a904 	addi	r4,r4,-23900
   22d88:	0022cbc0 	call	22cbc <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   22d8c:	010000f4 	movhi	r4,3
   22d90:	2128b504 	addi	r4,r4,-23852
   22d94:	00244040 	call	24404 <alt_up_character_lcd_init>
   22d98:	010000f4 	movhi	r4,3
   22d9c:	2128b504 	addi	r4,r4,-23852
   22da0:	0022cbc0 	call	22cbc <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   22da4:	010000f4 	movhi	r4,3
   22da8:	2128c004 	addi	r4,r4,-23808
   22dac:	0022cbc0 	call	22cbc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   22db0:	010000f4 	movhi	r4,3
   22db4:	2128cb04 	addi	r4,r4,-23764
   22db8:	0022cbc0 	call	22cbc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   22dbc:	010000f4 	movhi	r4,3
   22dc0:	2128d604 	addi	r4,r4,-23720
   22dc4:	0022cbc0 	call	22cbc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   22dc8:	010000f4 	movhi	r4,3
   22dcc:	2128e104 	addi	r4,r4,-23676
   22dd0:	0022cbc0 	call	22cbc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   22dd4:	010000f4 	movhi	r4,3
   22dd8:	2128ec04 	addi	r4,r4,-23632
   22ddc:	0022cbc0 	call	22cbc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   22de0:	010000f4 	movhi	r4,3
   22de4:	2128f704 	addi	r4,r4,-23588
   22de8:	0022cbc0 	call	22cbc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   22dec:	010000f4 	movhi	r4,3
   22df0:	21290204 	addi	r4,r4,-23544
   22df4:	0022cbc0 	call	22cbc <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   22df8:	010000f4 	movhi	r4,3
   22dfc:	21290d04 	addi	r4,r4,-23500
   22e00:	0022cbc0 	call	22cbc <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   22e04:	010000f4 	movhi	r4,3
   22e08:	21291804 	addi	r4,r4,-23456
   22e0c:	0024cf80 	call	24cf8 <alt_up_ps2_init>
   22e10:	010000f4 	movhi	r4,3
   22e14:	21291804 	addi	r4,r4,-23456
   22e18:	0022cbc0 	call	22cbc <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   22e1c:	010000f4 	movhi	r4,3
   22e20:	21292604 	addi	r4,r4,-23400
   22e24:	0024cf80 	call	24cf8 <alt_up_ps2_init>
   22e28:	010000f4 	movhi	r4,3
   22e2c:	21292604 	addi	r4,r4,-23400
   22e30:	0022cbc0 	call	22cbc <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   22e34:	010000f4 	movhi	r4,3
   22e38:	21293404 	addi	r4,r4,-23344
   22e3c:	0022cbc0 	call	22cbc <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   22e40:	010000f4 	movhi	r4,3
   22e44:	21293f04 	addi	r4,r4,-23300
   22e48:	0022cbc0 	call	22cbc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
   22e4c:	008000f4 	movhi	r2,3
   22e50:	10a94c04 	addi	r2,r2,-23248
   22e54:	10800a17 	ldw	r2,40(r2)
   22e58:	10800017 	ldw	r2,0(r2)
   22e5c:	1007883a 	mov	r3,r2
   22e60:	008000f4 	movhi	r2,3
   22e64:	10a94c04 	addi	r2,r2,-23248
   22e68:	10c00b15 	stw	r3,44(r2)
   22e6c:	008000f4 	movhi	r2,3
   22e70:	10a94c04 	addi	r2,r2,-23248
   22e74:	10800a17 	ldw	r2,40(r2)
   22e78:	10800104 	addi	r2,r2,4
   22e7c:	10800017 	ldw	r2,0(r2)
   22e80:	1007883a 	mov	r3,r2
   22e84:	008000f4 	movhi	r2,3
   22e88:	10a94c04 	addi	r2,r2,-23248
   22e8c:	10c00c15 	stw	r3,48(r2)
   22e90:	008000f4 	movhi	r2,3
   22e94:	10a94c04 	addi	r2,r2,-23248
   22e98:	10800a17 	ldw	r2,40(r2)
   22e9c:	10800204 	addi	r2,r2,8
   22ea0:	10800017 	ldw	r2,0(r2)
   22ea4:	10ffffcc 	andi	r3,r2,65535
   22ea8:	008000f4 	movhi	r2,3
   22eac:	10a94c04 	addi	r2,r2,-23248
   22eb0:	10c01115 	stw	r3,68(r2)
   22eb4:	008000f4 	movhi	r2,3
   22eb8:	10a94c04 	addi	r2,r2,-23248
   22ebc:	10800a17 	ldw	r2,40(r2)
   22ec0:	10800204 	addi	r2,r2,8
   22ec4:	10800017 	ldw	r2,0(r2)
   22ec8:	1006d43a 	srli	r3,r2,16
   22ecc:	008000f4 	movhi	r2,3
   22ed0:	10a94c04 	addi	r2,r2,-23248
   22ed4:	10c01215 	stw	r3,72(r2)
   22ed8:	008000f4 	movhi	r2,3
   22edc:	10a94c04 	addi	r2,r2,-23248
   22ee0:	10800a17 	ldw	r2,40(r2)
   22ee4:	10800304 	addi	r2,r2,12
   22ee8:	10800017 	ldw	r2,0(r2)
   22eec:	1005d07a 	srai	r2,r2,1
   22ef0:	10c0004c 	andi	r3,r2,1
   22ef4:	008000f4 	movhi	r2,3
   22ef8:	10a94c04 	addi	r2,r2,-23248
   22efc:	10c00d15 	stw	r3,52(r2)
   22f00:	008000f4 	movhi	r2,3
   22f04:	10a94c04 	addi	r2,r2,-23248
   22f08:	10800a17 	ldw	r2,40(r2)
   22f0c:	10800304 	addi	r2,r2,12
   22f10:	10800017 	ldw	r2,0(r2)
   22f14:	1005d23a 	srai	r2,r2,8
   22f18:	10c003cc 	andi	r3,r2,15
   22f1c:	008000f4 	movhi	r2,3
   22f20:	10a94c04 	addi	r2,r2,-23248
   22f24:	10c00e15 	stw	r3,56(r2)
   22f28:	008000f4 	movhi	r2,3
   22f2c:	10a94c04 	addi	r2,r2,-23248
   22f30:	10800a17 	ldw	r2,40(r2)
   22f34:	10800304 	addi	r2,r2,12
   22f38:	10800017 	ldw	r2,0(r2)
   22f3c:	1005d1ba 	srai	r2,r2,6
   22f40:	10c000cc 	andi	r3,r2,3
   22f44:	008000f4 	movhi	r2,3
   22f48:	10a94c04 	addi	r2,r2,-23248
   22f4c:	10c00f15 	stw	r3,60(r2)
   22f50:	008000f4 	movhi	r2,3
   22f54:	10a94c04 	addi	r2,r2,-23248
   22f58:	10800e17 	ldw	r2,56(r2)
   22f5c:	1007883a 	mov	r3,r2
   22f60:	008000f4 	movhi	r2,3
   22f64:	10a94c04 	addi	r2,r2,-23248
   22f68:	10800f17 	ldw	r2,60(r2)
   22f6c:	1885383a 	mul	r2,r3,r2
   22f70:	e0bffe05 	stb	r2,-8(fp)
   22f74:	e0bffe03 	ldbu	r2,-8(fp)
   22f78:	10800268 	cmpgeui	r2,r2,9
   22f7c:	1000051e 	bne	r2,zero,22f94 <alt_sys_init+0x26c>
   22f80:	008000f4 	movhi	r2,3
   22f84:	10a94c04 	addi	r2,r2,-23248
   22f88:	00c00044 	movi	r3,1
   22f8c:	10c01015 	stw	r3,64(r2)
   22f90:	00000c06 	br	22fc4 <alt_sys_init+0x29c>
   22f94:	e0bffe03 	ldbu	r2,-8(fp)
   22f98:	10800468 	cmpgeui	r2,r2,17
   22f9c:	1000051e 	bne	r2,zero,22fb4 <alt_sys_init+0x28c>
   22fa0:	008000f4 	movhi	r2,3
   22fa4:	10a94c04 	addi	r2,r2,-23248
   22fa8:	00c00084 	movi	r3,2
   22fac:	10c01015 	stw	r3,64(r2)
   22fb0:	00000406 	br	22fc4 <alt_sys_init+0x29c>
   22fb4:	008000f4 	movhi	r2,3
   22fb8:	10a94c04 	addi	r2,r2,-23248
   22fbc:	00c00104 	movi	r3,4
   22fc0:	10c01015 	stw	r3,64(r2)
   22fc4:	008000f4 	movhi	r2,3
   22fc8:	10a94c04 	addi	r2,r2,-23248
   22fcc:	10800a17 	ldw	r2,40(r2)
   22fd0:	10800304 	addi	r2,r2,12
   22fd4:	10800017 	ldw	r2,0(r2)
   22fd8:	1005d43a 	srai	r2,r2,16
   22fdc:	e0bffe45 	stb	r2,-7(fp)
   22fe0:	008000f4 	movhi	r2,3
   22fe4:	10a94c04 	addi	r2,r2,-23248
   22fe8:	10800a17 	ldw	r2,40(r2)
   22fec:	10800304 	addi	r2,r2,12
   22ff0:	10800017 	ldw	r2,0(r2)
   22ff4:	1004d63a 	srli	r2,r2,24
   22ff8:	e0bffe85 	stb	r2,-6(fp)
   22ffc:	008000f4 	movhi	r2,3
   23000:	10a94c04 	addi	r2,r2,-23248
   23004:	10801017 	ldw	r2,64(r2)
   23008:	10800058 	cmpnei	r2,r2,1
   2300c:	1000041e 	bne	r2,zero,23020 <alt_sys_init+0x2f8>
   23010:	008000f4 	movhi	r2,3
   23014:	10a94c04 	addi	r2,r2,-23248
   23018:	10001315 	stw	zero,76(r2)
   2301c:	00000e06 	br	23058 <alt_sys_init+0x330>
   23020:	008000f4 	movhi	r2,3
   23024:	10a94c04 	addi	r2,r2,-23248
   23028:	10801017 	ldw	r2,64(r2)
   2302c:	10800098 	cmpnei	r2,r2,2
   23030:	1000051e 	bne	r2,zero,23048 <alt_sys_init+0x320>
   23034:	008000f4 	movhi	r2,3
   23038:	10a94c04 	addi	r2,r2,-23248
   2303c:	00c00044 	movi	r3,1
   23040:	10c01315 	stw	r3,76(r2)
   23044:	00000406 	br	23058 <alt_sys_init+0x330>
   23048:	008000f4 	movhi	r2,3
   2304c:	10a94c04 	addi	r2,r2,-23248
   23050:	00c00084 	movi	r3,2
   23054:	10c01315 	stw	r3,76(r2)
   23058:	e0bffe43 	ldbu	r2,-7(fp)
   2305c:	00c00804 	movi	r3,32
   23060:	1885c83a 	sub	r2,r3,r2
   23064:	00ffffc4 	movi	r3,-1
   23068:	1886d83a 	srl	r3,r3,r2
   2306c:	008000f4 	movhi	r2,3
   23070:	10a94c04 	addi	r2,r2,-23248
   23074:	10c01415 	stw	r3,80(r2)
   23078:	e0fffe43 	ldbu	r3,-7(fp)
   2307c:	008000f4 	movhi	r2,3
   23080:	10a94c04 	addi	r2,r2,-23248
   23084:	10801317 	ldw	r2,76(r2)
   23088:	1887883a 	add	r3,r3,r2
   2308c:	008000f4 	movhi	r2,3
   23090:	10a94c04 	addi	r2,r2,-23248
   23094:	10c01515 	stw	r3,84(r2)
   23098:	e0bffe83 	ldbu	r2,-6(fp)
   2309c:	00c00804 	movi	r3,32
   230a0:	1885c83a 	sub	r2,r3,r2
   230a4:	00ffffc4 	movi	r3,-1
   230a8:	1886d83a 	srl	r3,r3,r2
   230ac:	008000f4 	movhi	r2,3
   230b0:	10a94c04 	addi	r2,r2,-23248
   230b4:	10c01615 	stw	r3,88(r2)
   230b8:	010000f4 	movhi	r4,3
   230bc:	21294c04 	addi	r4,r4,-23248
   230c0:	0022cbc0 	call	22cbc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
   230c4:	008000f4 	movhi	r2,3
   230c8:	10a96304 	addi	r2,r2,-23156
   230cc:	10800a17 	ldw	r2,40(r2)
   230d0:	10800017 	ldw	r2,0(r2)
   230d4:	1007883a 	mov	r3,r2
   230d8:	008000f4 	movhi	r2,3
   230dc:	10a96304 	addi	r2,r2,-23156
   230e0:	10c00b15 	stw	r3,44(r2)
   230e4:	008000f4 	movhi	r2,3
   230e8:	10a96304 	addi	r2,r2,-23156
   230ec:	10800a17 	ldw	r2,40(r2)
   230f0:	10800104 	addi	r2,r2,4
   230f4:	10800017 	ldw	r2,0(r2)
   230f8:	1007883a 	mov	r3,r2
   230fc:	008000f4 	movhi	r2,3
   23100:	10a96304 	addi	r2,r2,-23156
   23104:	10c00c15 	stw	r3,48(r2)
   23108:	008000f4 	movhi	r2,3
   2310c:	10a96304 	addi	r2,r2,-23156
   23110:	10800a17 	ldw	r2,40(r2)
   23114:	10800204 	addi	r2,r2,8
   23118:	10800017 	ldw	r2,0(r2)
   2311c:	10ffffcc 	andi	r3,r2,65535
   23120:	008000f4 	movhi	r2,3
   23124:	10a96304 	addi	r2,r2,-23156
   23128:	10c01115 	stw	r3,68(r2)
   2312c:	008000f4 	movhi	r2,3
   23130:	10a96304 	addi	r2,r2,-23156
   23134:	10800a17 	ldw	r2,40(r2)
   23138:	10800204 	addi	r2,r2,8
   2313c:	10800017 	ldw	r2,0(r2)
   23140:	1006d43a 	srli	r3,r2,16
   23144:	008000f4 	movhi	r2,3
   23148:	10a96304 	addi	r2,r2,-23156
   2314c:	10c01215 	stw	r3,72(r2)
   23150:	008000f4 	movhi	r2,3
   23154:	10a96304 	addi	r2,r2,-23156
   23158:	10800a17 	ldw	r2,40(r2)
   2315c:	10800304 	addi	r2,r2,12
   23160:	10800017 	ldw	r2,0(r2)
   23164:	1005d07a 	srai	r2,r2,1
   23168:	10c0004c 	andi	r3,r2,1
   2316c:	008000f4 	movhi	r2,3
   23170:	10a96304 	addi	r2,r2,-23156
   23174:	10c00d15 	stw	r3,52(r2)
   23178:	008000f4 	movhi	r2,3
   2317c:	10a96304 	addi	r2,r2,-23156
   23180:	10800a17 	ldw	r2,40(r2)
   23184:	10800304 	addi	r2,r2,12
   23188:	10800017 	ldw	r2,0(r2)
   2318c:	1005d23a 	srai	r2,r2,8
   23190:	10c003cc 	andi	r3,r2,15
   23194:	008000f4 	movhi	r2,3
   23198:	10a96304 	addi	r2,r2,-23156
   2319c:	10c00e15 	stw	r3,56(r2)
   231a0:	008000f4 	movhi	r2,3
   231a4:	10a96304 	addi	r2,r2,-23156
   231a8:	10800a17 	ldw	r2,40(r2)
   231ac:	10800304 	addi	r2,r2,12
   231b0:	10800017 	ldw	r2,0(r2)
   231b4:	1005d1ba 	srai	r2,r2,6
   231b8:	10c000cc 	andi	r3,r2,3
   231bc:	008000f4 	movhi	r2,3
   231c0:	10a96304 	addi	r2,r2,-23156
   231c4:	10c00f15 	stw	r3,60(r2)
   231c8:	008000f4 	movhi	r2,3
   231cc:	10a96304 	addi	r2,r2,-23156
   231d0:	10800e17 	ldw	r2,56(r2)
   231d4:	1007883a 	mov	r3,r2
   231d8:	008000f4 	movhi	r2,3
   231dc:	10a96304 	addi	r2,r2,-23156
   231e0:	10800f17 	ldw	r2,60(r2)
   231e4:	1885383a 	mul	r2,r3,r2
   231e8:	e0bffec5 	stb	r2,-5(fp)
   231ec:	e0bffec3 	ldbu	r2,-5(fp)
   231f0:	10800268 	cmpgeui	r2,r2,9
   231f4:	1000051e 	bne	r2,zero,2320c <alt_sys_init+0x4e4>
   231f8:	008000f4 	movhi	r2,3
   231fc:	10a96304 	addi	r2,r2,-23156
   23200:	00c00044 	movi	r3,1
   23204:	10c01015 	stw	r3,64(r2)
   23208:	00000c06 	br	2323c <alt_sys_init+0x514>
   2320c:	e0bffec3 	ldbu	r2,-5(fp)
   23210:	10800468 	cmpgeui	r2,r2,17
   23214:	1000051e 	bne	r2,zero,2322c <alt_sys_init+0x504>
   23218:	008000f4 	movhi	r2,3
   2321c:	10a96304 	addi	r2,r2,-23156
   23220:	00c00084 	movi	r3,2
   23224:	10c01015 	stw	r3,64(r2)
   23228:	00000406 	br	2323c <alt_sys_init+0x514>
   2322c:	008000f4 	movhi	r2,3
   23230:	10a96304 	addi	r2,r2,-23156
   23234:	00c00104 	movi	r3,4
   23238:	10c01015 	stw	r3,64(r2)
   2323c:	008000f4 	movhi	r2,3
   23240:	10a96304 	addi	r2,r2,-23156
   23244:	10800a17 	ldw	r2,40(r2)
   23248:	10800304 	addi	r2,r2,12
   2324c:	10800017 	ldw	r2,0(r2)
   23250:	1005d43a 	srai	r2,r2,16
   23254:	e0bfff05 	stb	r2,-4(fp)
   23258:	008000f4 	movhi	r2,3
   2325c:	10a96304 	addi	r2,r2,-23156
   23260:	10800a17 	ldw	r2,40(r2)
   23264:	10800304 	addi	r2,r2,12
   23268:	10800017 	ldw	r2,0(r2)
   2326c:	1004d63a 	srli	r2,r2,24
   23270:	e0bfff45 	stb	r2,-3(fp)
   23274:	008000f4 	movhi	r2,3
   23278:	10a96304 	addi	r2,r2,-23156
   2327c:	10801017 	ldw	r2,64(r2)
   23280:	10800058 	cmpnei	r2,r2,1
   23284:	1000041e 	bne	r2,zero,23298 <alt_sys_init+0x570>
   23288:	008000f4 	movhi	r2,3
   2328c:	10a96304 	addi	r2,r2,-23156
   23290:	10001315 	stw	zero,76(r2)
   23294:	00000e06 	br	232d0 <alt_sys_init+0x5a8>
   23298:	008000f4 	movhi	r2,3
   2329c:	10a96304 	addi	r2,r2,-23156
   232a0:	10801017 	ldw	r2,64(r2)
   232a4:	10800098 	cmpnei	r2,r2,2
   232a8:	1000051e 	bne	r2,zero,232c0 <alt_sys_init+0x598>
   232ac:	008000f4 	movhi	r2,3
   232b0:	10a96304 	addi	r2,r2,-23156
   232b4:	00c00044 	movi	r3,1
   232b8:	10c01315 	stw	r3,76(r2)
   232bc:	00000406 	br	232d0 <alt_sys_init+0x5a8>
   232c0:	008000f4 	movhi	r2,3
   232c4:	10a96304 	addi	r2,r2,-23156
   232c8:	00c00084 	movi	r3,2
   232cc:	10c01315 	stw	r3,76(r2)
   232d0:	e0bfff03 	ldbu	r2,-4(fp)
   232d4:	00c00804 	movi	r3,32
   232d8:	1885c83a 	sub	r2,r3,r2
   232dc:	00ffffc4 	movi	r3,-1
   232e0:	1886d83a 	srl	r3,r3,r2
   232e4:	008000f4 	movhi	r2,3
   232e8:	10a96304 	addi	r2,r2,-23156
   232ec:	10c01415 	stw	r3,80(r2)
   232f0:	e0ffff03 	ldbu	r3,-4(fp)
   232f4:	008000f4 	movhi	r2,3
   232f8:	10a96304 	addi	r2,r2,-23156
   232fc:	10801317 	ldw	r2,76(r2)
   23300:	1887883a 	add	r3,r3,r2
   23304:	008000f4 	movhi	r2,3
   23308:	10a96304 	addi	r2,r2,-23156
   2330c:	10c01515 	stw	r3,84(r2)
   23310:	e0bfff43 	ldbu	r2,-3(fp)
   23314:	00c00804 	movi	r3,32
   23318:	1885c83a 	sub	r2,r3,r2
   2331c:	00ffffc4 	movi	r3,-1
   23320:	1886d83a 	srl	r3,r3,r2
   23324:	008000f4 	movhi	r2,3
   23328:	10a96304 	addi	r2,r2,-23156
   2332c:	10c01615 	stw	r3,88(r2)
   23330:	010000f4 	movhi	r4,3
   23334:	21296304 	addi	r4,r4,-23156
   23338:	0022cbc0 	call	22cbc <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   2333c:	008000f4 	movhi	r2,3
   23340:	10a97a04 	addi	r2,r2,-23064
   23344:	10800a17 	ldw	r2,40(r2)
   23348:	10800017 	ldw	r2,0(r2)
   2334c:	1007883a 	mov	r3,r2
   23350:	008000f4 	movhi	r2,3
   23354:	10a97a04 	addi	r2,r2,-23064
   23358:	10c00b15 	stw	r3,44(r2)
   2335c:	008000f4 	movhi	r2,3
   23360:	10a97a04 	addi	r2,r2,-23064
   23364:	10800a17 	ldw	r2,40(r2)
   23368:	10800104 	addi	r2,r2,4
   2336c:	10800017 	ldw	r2,0(r2)
   23370:	1007883a 	mov	r3,r2
   23374:	008000f4 	movhi	r2,3
   23378:	10a97a04 	addi	r2,r2,-23064
   2337c:	10c00c15 	stw	r3,48(r2)
   23380:	008000f4 	movhi	r2,3
   23384:	10a97a04 	addi	r2,r2,-23064
   23388:	10800a17 	ldw	r2,40(r2)
   2338c:	10800204 	addi	r2,r2,8
   23390:	10800017 	ldw	r2,0(r2)
   23394:	10ffffcc 	andi	r3,r2,65535
   23398:	008000f4 	movhi	r2,3
   2339c:	10a97a04 	addi	r2,r2,-23064
   233a0:	10c00f15 	stw	r3,60(r2)
   233a4:	008000f4 	movhi	r2,3
   233a8:	10a97a04 	addi	r2,r2,-23064
   233ac:	10800a17 	ldw	r2,40(r2)
   233b0:	10800204 	addi	r2,r2,8
   233b4:	10800017 	ldw	r2,0(r2)
   233b8:	1006d43a 	srli	r3,r2,16
   233bc:	008000f4 	movhi	r2,3
   233c0:	10a97a04 	addi	r2,r2,-23064
   233c4:	10c01015 	stw	r3,64(r2)
   233c8:	008000f4 	movhi	r2,3
   233cc:	10a97a04 	addi	r2,r2,-23064
   233d0:	10800a17 	ldw	r2,40(r2)
   233d4:	10800304 	addi	r2,r2,12
   233d8:	10800017 	ldw	r2,0(r2)
   233dc:	1005d07a 	srai	r2,r2,1
   233e0:	10c0004c 	andi	r3,r2,1
   233e4:	008000f4 	movhi	r2,3
   233e8:	10a97a04 	addi	r2,r2,-23064
   233ec:	10c00d15 	stw	r3,52(r2)
   233f0:	008000f4 	movhi	r2,3
   233f4:	10a97a04 	addi	r2,r2,-23064
   233f8:	10800a17 	ldw	r2,40(r2)
   233fc:	10800304 	addi	r2,r2,12
   23400:	10800017 	ldw	r2,0(r2)
   23404:	1005d13a 	srai	r2,r2,4
   23408:	10c003cc 	andi	r3,r2,15
   2340c:	008000f4 	movhi	r2,3
   23410:	10a97a04 	addi	r2,r2,-23064
   23414:	10c00e15 	stw	r3,56(r2)
   23418:	008000f4 	movhi	r2,3
   2341c:	10a97a04 	addi	r2,r2,-23064
   23420:	10800a17 	ldw	r2,40(r2)
   23424:	10800304 	addi	r2,r2,12
   23428:	10800017 	ldw	r2,0(r2)
   2342c:	1005d43a 	srai	r2,r2,16
   23430:	e0bfff85 	stb	r2,-2(fp)
   23434:	008000f4 	movhi	r2,3
   23438:	10a97a04 	addi	r2,r2,-23064
   2343c:	10800a17 	ldw	r2,40(r2)
   23440:	10800304 	addi	r2,r2,12
   23444:	10800017 	ldw	r2,0(r2)
   23448:	1004d63a 	srli	r2,r2,24
   2344c:	e0bfffc5 	stb	r2,-1(fp)
   23450:	008000f4 	movhi	r2,3
   23454:	10a97a04 	addi	r2,r2,-23064
   23458:	10800e17 	ldw	r2,56(r2)
   2345c:	10800058 	cmpnei	r2,r2,1
   23460:	1000041e 	bne	r2,zero,23474 <alt_sys_init+0x74c>
   23464:	008000f4 	movhi	r2,3
   23468:	10a97a04 	addi	r2,r2,-23064
   2346c:	10001115 	stw	zero,68(r2)
   23470:	00000e06 	br	234ac <alt_sys_init+0x784>
   23474:	008000f4 	movhi	r2,3
   23478:	10a97a04 	addi	r2,r2,-23064
   2347c:	10800e17 	ldw	r2,56(r2)
   23480:	10800098 	cmpnei	r2,r2,2
   23484:	1000051e 	bne	r2,zero,2349c <alt_sys_init+0x774>
   23488:	008000f4 	movhi	r2,3
   2348c:	10a97a04 	addi	r2,r2,-23064
   23490:	00c00044 	movi	r3,1
   23494:	10c01115 	stw	r3,68(r2)
   23498:	00000406 	br	234ac <alt_sys_init+0x784>
   2349c:	008000f4 	movhi	r2,3
   234a0:	10a97a04 	addi	r2,r2,-23064
   234a4:	00c00084 	movi	r3,2
   234a8:	10c01115 	stw	r3,68(r2)
   234ac:	e0bfff83 	ldbu	r2,-2(fp)
   234b0:	00c00804 	movi	r3,32
   234b4:	1885c83a 	sub	r2,r3,r2
   234b8:	00ffffc4 	movi	r3,-1
   234bc:	1886d83a 	srl	r3,r3,r2
   234c0:	008000f4 	movhi	r2,3
   234c4:	10a97a04 	addi	r2,r2,-23064
   234c8:	10c01215 	stw	r3,72(r2)
   234cc:	e0ffff83 	ldbu	r3,-2(fp)
   234d0:	008000f4 	movhi	r2,3
   234d4:	10a97a04 	addi	r2,r2,-23064
   234d8:	10801117 	ldw	r2,68(r2)
   234dc:	1887883a 	add	r3,r3,r2
   234e0:	008000f4 	movhi	r2,3
   234e4:	10a97a04 	addi	r2,r2,-23064
   234e8:	10c01315 	stw	r3,76(r2)
   234ec:	e0bfffc3 	ldbu	r2,-1(fp)
   234f0:	00c00804 	movi	r3,32
   234f4:	1885c83a 	sub	r2,r3,r2
   234f8:	00ffffc4 	movi	r3,-1
   234fc:	1886d83a 	srl	r3,r3,r2
   23500:	008000f4 	movhi	r2,3
   23504:	10a97a04 	addi	r2,r2,-23064
   23508:	10c01415 	stw	r3,80(r2)
   2350c:	010000f4 	movhi	r4,3
   23510:	21297a04 	addi	r4,r4,-23064
   23514:	0022cbc0 	call	22cbc <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   23518:	010000f4 	movhi	r4,3
   2351c:	21298f04 	addi	r4,r4,-22980
   23520:	0022cbc0 	call	22cbc <alt_dev_reg>
}
   23524:	0001883a 	nop
   23528:	e037883a 	mov	sp,fp
   2352c:	dfc00117 	ldw	ra,4(sp)
   23530:	df000017 	ldw	fp,0(sp)
   23534:	dec00204 	addi	sp,sp,8
   23538:	f800283a 	ret

0002353c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2353c:	defffa04 	addi	sp,sp,-24
   23540:	dfc00515 	stw	ra,20(sp)
   23544:	df000415 	stw	fp,16(sp)
   23548:	df000404 	addi	fp,sp,16
   2354c:	e13ffd15 	stw	r4,-12(fp)
   23550:	e17ffe15 	stw	r5,-8(fp)
   23554:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23558:	e0bffd17 	ldw	r2,-12(fp)
   2355c:	10800017 	ldw	r2,0(r2)
   23560:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23564:	e0bffc17 	ldw	r2,-16(fp)
   23568:	10c00a04 	addi	r3,r2,40
   2356c:	e0bffd17 	ldw	r2,-12(fp)
   23570:	10800217 	ldw	r2,8(r2)
   23574:	100f883a 	mov	r7,r2
   23578:	e1bfff17 	ldw	r6,-4(fp)
   2357c:	e17ffe17 	ldw	r5,-8(fp)
   23580:	1809883a 	mov	r4,r3
   23584:	0023ce00 	call	23ce0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23588:	e037883a 	mov	sp,fp
   2358c:	dfc00117 	ldw	ra,4(sp)
   23590:	df000017 	ldw	fp,0(sp)
   23594:	dec00204 	addi	sp,sp,8
   23598:	f800283a 	ret

0002359c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2359c:	defffa04 	addi	sp,sp,-24
   235a0:	dfc00515 	stw	ra,20(sp)
   235a4:	df000415 	stw	fp,16(sp)
   235a8:	df000404 	addi	fp,sp,16
   235ac:	e13ffd15 	stw	r4,-12(fp)
   235b0:	e17ffe15 	stw	r5,-8(fp)
   235b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   235b8:	e0bffd17 	ldw	r2,-12(fp)
   235bc:	10800017 	ldw	r2,0(r2)
   235c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   235c4:	e0bffc17 	ldw	r2,-16(fp)
   235c8:	10c00a04 	addi	r3,r2,40
   235cc:	e0bffd17 	ldw	r2,-12(fp)
   235d0:	10800217 	ldw	r2,8(r2)
   235d4:	100f883a 	mov	r7,r2
   235d8:	e1bfff17 	ldw	r6,-4(fp)
   235dc:	e17ffe17 	ldw	r5,-8(fp)
   235e0:	1809883a 	mov	r4,r3
   235e4:	0023f9c0 	call	23f9c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   235e8:	e037883a 	mov	sp,fp
   235ec:	dfc00117 	ldw	ra,4(sp)
   235f0:	df000017 	ldw	fp,0(sp)
   235f4:	dec00204 	addi	sp,sp,8
   235f8:	f800283a 	ret

000235fc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   235fc:	defffc04 	addi	sp,sp,-16
   23600:	dfc00315 	stw	ra,12(sp)
   23604:	df000215 	stw	fp,8(sp)
   23608:	df000204 	addi	fp,sp,8
   2360c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23610:	e0bfff17 	ldw	r2,-4(fp)
   23614:	10800017 	ldw	r2,0(r2)
   23618:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2361c:	e0bffe17 	ldw	r2,-8(fp)
   23620:	10c00a04 	addi	r3,r2,40
   23624:	e0bfff17 	ldw	r2,-4(fp)
   23628:	10800217 	ldw	r2,8(r2)
   2362c:	100b883a 	mov	r5,r2
   23630:	1809883a 	mov	r4,r3
   23634:	0023b880 	call	23b88 <altera_avalon_jtag_uart_close>
}
   23638:	e037883a 	mov	sp,fp
   2363c:	dfc00117 	ldw	ra,4(sp)
   23640:	df000017 	ldw	fp,0(sp)
   23644:	dec00204 	addi	sp,sp,8
   23648:	f800283a 	ret

0002364c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2364c:	defffa04 	addi	sp,sp,-24
   23650:	dfc00515 	stw	ra,20(sp)
   23654:	df000415 	stw	fp,16(sp)
   23658:	df000404 	addi	fp,sp,16
   2365c:	e13ffd15 	stw	r4,-12(fp)
   23660:	e17ffe15 	stw	r5,-8(fp)
   23664:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   23668:	e0bffd17 	ldw	r2,-12(fp)
   2366c:	10800017 	ldw	r2,0(r2)
   23670:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   23674:	e0bffc17 	ldw	r2,-16(fp)
   23678:	10800a04 	addi	r2,r2,40
   2367c:	e1bfff17 	ldw	r6,-4(fp)
   23680:	e17ffe17 	ldw	r5,-8(fp)
   23684:	1009883a 	mov	r4,r2
   23688:	0023bf00 	call	23bf0 <altera_avalon_jtag_uart_ioctl>
}
   2368c:	e037883a 	mov	sp,fp
   23690:	dfc00117 	ldw	ra,4(sp)
   23694:	df000017 	ldw	fp,0(sp)
   23698:	dec00204 	addi	sp,sp,8
   2369c:	f800283a 	ret

000236a0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   236a0:	defff204 	addi	sp,sp,-56
   236a4:	dfc00d15 	stw	ra,52(sp)
   236a8:	df000c15 	stw	fp,48(sp)
   236ac:	df000c04 	addi	fp,sp,48
   236b0:	e13ff915 	stw	r4,-28(fp)
   236b4:	e17ffa15 	stw	r5,-24(fp)
   236b8:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   236bc:	e0bff917 	ldw	r2,-28(fp)
   236c0:	10800c04 	addi	r2,r2,48
   236c4:	e0bff415 	stw	r2,-48(fp)
   236c8:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   236cc:	e0bff80b 	ldhu	r2,-32(fp)
   236d0:	e0fff884 	addi	r3,fp,-30
   236d4:	180b883a 	mov	r5,r3
   236d8:	1009883a 	mov	r4,r2
   236dc:	001d9980 	call	1d998 <OSFlagCreate>
   236e0:	1007883a 	mov	r3,r2
   236e4:	e0bff417 	ldw	r2,-48(fp)
   236e8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   236ec:	e0bff917 	ldw	r2,-28(fp)
   236f0:	10800a04 	addi	r2,r2,40
   236f4:	e0bff515 	stw	r2,-44(fp)
   236f8:	00800044 	movi	r2,1
   236fc:	e0bff78d 	sth	r2,-34(fp)
   23700:	e0bff78b 	ldhu	r2,-34(fp)
   23704:	1009883a 	mov	r4,r2
   23708:	00206ac0 	call	206ac <OSSemCreate>
   2370c:	1007883a 	mov	r3,r2
   23710:	e0bff517 	ldw	r2,-44(fp)
   23714:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   23718:	e0bff917 	ldw	r2,-28(fp)
   2371c:	10800b04 	addi	r2,r2,44
   23720:	e0bff615 	stw	r2,-40(fp)
   23724:	00800044 	movi	r2,1
   23728:	e0bff70d 	sth	r2,-36(fp)
   2372c:	e0bff70b 	ldhu	r2,-36(fp)
   23730:	1009883a 	mov	r4,r2
   23734:	00206ac0 	call	206ac <OSSemCreate>
   23738:	1007883a 	mov	r3,r2
   2373c:	e0bff617 	ldw	r2,-40(fp)
   23740:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23744:	e0bff917 	ldw	r2,-28(fp)
   23748:	00c00044 	movi	r3,1
   2374c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   23750:	e0bff917 	ldw	r2,-28(fp)
   23754:	10800017 	ldw	r2,0(r2)
   23758:	10800104 	addi	r2,r2,4
   2375c:	1007883a 	mov	r3,r2
   23760:	e0bff917 	ldw	r2,-28(fp)
   23764:	10800817 	ldw	r2,32(r2)
   23768:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   2376c:	e0bffb17 	ldw	r2,-20(fp)
   23770:	018000b4 	movhi	r6,2
   23774:	318df704 	addi	r6,r6,14300
   23778:	e17ff917 	ldw	r5,-28(fp)
   2377c:	1009883a 	mov	r4,r2
   23780:	0025b000 	call	25b00 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   23784:	e0bff917 	ldw	r2,-28(fp)
   23788:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2378c:	e0bff917 	ldw	r2,-28(fp)
   23790:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   23794:	d0e86217 	ldw	r3,-24184(gp)
   23798:	e1fff917 	ldw	r7,-28(fp)
   2379c:	018000b4 	movhi	r6,2
   237a0:	318ea104 	addi	r6,r6,14980
   237a4:	180b883a 	mov	r5,r3
   237a8:	1009883a 	mov	r4,r2
   237ac:	00256100 	call	25610 <alt_alarm_start>
   237b0:	1000040e 	bge	r2,zero,237c4 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   237b4:	e0fff917 	ldw	r3,-28(fp)
   237b8:	00a00034 	movhi	r2,32768
   237bc:	10bfffc4 	addi	r2,r2,-1
   237c0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   237c4:	0001883a 	nop
   237c8:	e037883a 	mov	sp,fp
   237cc:	dfc00117 	ldw	ra,4(sp)
   237d0:	df000017 	ldw	fp,0(sp)
   237d4:	dec00204 	addi	sp,sp,8
   237d8:	f800283a 	ret

000237dc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   237dc:	defff104 	addi	sp,sp,-60
   237e0:	dfc00e15 	stw	ra,56(sp)
   237e4:	df000d15 	stw	fp,52(sp)
   237e8:	df000d04 	addi	fp,sp,52
   237ec:	e13ffe15 	stw	r4,-8(fp)
   237f0:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   237f4:	e0bffe17 	ldw	r2,-8(fp)
   237f8:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   237fc:	e0bff517 	ldw	r2,-44(fp)
   23800:	10800017 	ldw	r2,0(r2)
   23804:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23808:	e0bff617 	ldw	r2,-40(fp)
   2380c:	10800104 	addi	r2,r2,4
   23810:	10800037 	ldwio	r2,0(r2)
   23814:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   23818:	e0bff717 	ldw	r2,-36(fp)
   2381c:	1080c00c 	andi	r2,r2,768
   23820:	10009126 	beq	r2,zero,23a68 <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   23824:	e0bff717 	ldw	r2,-36(fp)
   23828:	1080400c 	andi	r2,r2,256
   2382c:	10004726 	beq	r2,zero,2394c <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   23830:	00800074 	movhi	r2,1
   23834:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23838:	e0bff517 	ldw	r2,-44(fp)
   2383c:	10800d17 	ldw	r2,52(r2)
   23840:	10800044 	addi	r2,r2,1
   23844:	1081ffcc 	andi	r2,r2,2047
   23848:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   2384c:	e0bff517 	ldw	r2,-44(fp)
   23850:	10c00e17 	ldw	r3,56(r2)
   23854:	e0bff817 	ldw	r2,-32(fp)
   23858:	18802726 	beq	r3,r2,238f8 <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2385c:	e0bff617 	ldw	r2,-40(fp)
   23860:	10800037 	ldwio	r2,0(r2)
   23864:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   23868:	e0bff317 	ldw	r2,-52(fp)
   2386c:	10a0000c 	andi	r2,r2,32768
   23870:	10002326 	beq	r2,zero,23900 <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23874:	e0bff517 	ldw	r2,-44(fp)
   23878:	10800d17 	ldw	r2,52(r2)
   2387c:	e0fff317 	ldw	r3,-52(fp)
   23880:	1809883a 	mov	r4,r3
   23884:	e0fff517 	ldw	r3,-44(fp)
   23888:	1885883a 	add	r2,r3,r2
   2388c:	10801104 	addi	r2,r2,68
   23890:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23894:	e0bff517 	ldw	r2,-44(fp)
   23898:	10800d17 	ldw	r2,52(r2)
   2389c:	10800044 	addi	r2,r2,1
   238a0:	10c1ffcc 	andi	r3,r2,2047
   238a4:	e0bff517 	ldw	r2,-44(fp)
   238a8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   238ac:	e0bff517 	ldw	r2,-44(fp)
   238b0:	10800c17 	ldw	r2,48(r2)
   238b4:	e0bffa15 	stw	r2,-24(fp)
   238b8:	00800044 	movi	r2,1
   238bc:	e0bffb0d 	sth	r2,-20(fp)
   238c0:	00800044 	movi	r2,1
   238c4:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   238c8:	d0a84d43 	ldbu	r2,-24267(gp)
   238cc:	10803fcc 	andi	r2,r2,255
   238d0:	103fd926 	beq	r2,zero,23838 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7023838>
  {
    OSFlagPost (group, flags, opt, &err);
   238d4:	e0bffb0b 	ldhu	r2,-20(fp)
   238d8:	e0fffb83 	ldbu	r3,-18(fp)
   238dc:	e13ffcc4 	addi	r4,fp,-13
   238e0:	200f883a 	mov	r7,r4
   238e4:	180d883a 	mov	r6,r3
   238e8:	100b883a 	mov	r5,r2
   238ec:	e13ffa17 	ldw	r4,-24(fp)
   238f0:	001e5740 	call	1e574 <OSFlagPost>
      }
   238f4:	003fd006 	br	23838 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7023838>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   238f8:	0001883a 	nop
   238fc:	00000106 	br	23904 <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   23900:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   23904:	e0bff317 	ldw	r2,-52(fp)
   23908:	10bfffec 	andhi	r2,r2,65535
   2390c:	10000f26 	beq	r2,zero,2394c <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23910:	e0bff517 	ldw	r2,-44(fp)
   23914:	10c00817 	ldw	r3,32(r2)
   23918:	00bfff84 	movi	r2,-2
   2391c:	1886703a 	and	r3,r3,r2
   23920:	e0bff517 	ldw	r2,-44(fp)
   23924:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   23928:	e0bff617 	ldw	r2,-40(fp)
   2392c:	10800104 	addi	r2,r2,4
   23930:	1007883a 	mov	r3,r2
   23934:	e0bff517 	ldw	r2,-44(fp)
   23938:	10800817 	ldw	r2,32(r2)
   2393c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23940:	e0bff617 	ldw	r2,-40(fp)
   23944:	10800104 	addi	r2,r2,4
   23948:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2394c:	e0bff717 	ldw	r2,-36(fp)
   23950:	1080800c 	andi	r2,r2,512
   23954:	103fac26 	beq	r2,zero,23808 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7023808>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   23958:	e0bff717 	ldw	r2,-36(fp)
   2395c:	1004d43a 	srli	r2,r2,16
   23960:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   23964:	00002606 	br	23a00 <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   23968:	e0bff617 	ldw	r2,-40(fp)
   2396c:	e0fff517 	ldw	r3,-44(fp)
   23970:	18c01017 	ldw	r3,64(r3)
   23974:	e13ff517 	ldw	r4,-44(fp)
   23978:	20c7883a 	add	r3,r4,r3
   2397c:	18c21104 	addi	r3,r3,2116
   23980:	18c00003 	ldbu	r3,0(r3)
   23984:	18c03fcc 	andi	r3,r3,255
   23988:	18c0201c 	xori	r3,r3,128
   2398c:	18ffe004 	addi	r3,r3,-128
   23990:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23994:	e0bff517 	ldw	r2,-44(fp)
   23998:	10801017 	ldw	r2,64(r2)
   2399c:	10800044 	addi	r2,r2,1
   239a0:	10c1ffcc 	andi	r3,r2,2047
   239a4:	e0bff517 	ldw	r2,-44(fp)
   239a8:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   239ac:	e0bff517 	ldw	r2,-44(fp)
   239b0:	10800c17 	ldw	r2,48(r2)
   239b4:	e0bff915 	stw	r2,-28(fp)
   239b8:	00800084 	movi	r2,2
   239bc:	e0bffc0d 	sth	r2,-16(fp)
   239c0:	00800044 	movi	r2,1
   239c4:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   239c8:	d0a84d43 	ldbu	r2,-24267(gp)
   239cc:	10803fcc 	andi	r2,r2,255
   239d0:	10000826 	beq	r2,zero,239f4 <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
   239d4:	e0bffc0b 	ldhu	r2,-16(fp)
   239d8:	e0fffc83 	ldbu	r3,-14(fp)
   239dc:	e13ffd04 	addi	r4,fp,-12
   239e0:	200f883a 	mov	r7,r4
   239e4:	180d883a 	mov	r6,r3
   239e8:	100b883a 	mov	r5,r2
   239ec:	e13ff917 	ldw	r4,-28(fp)
   239f0:	001e5740 	call	1e574 <OSFlagPost>

        space--;
   239f4:	e0bff417 	ldw	r2,-48(fp)
   239f8:	10bfffc4 	addi	r2,r2,-1
   239fc:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   23a00:	e0bff417 	ldw	r2,-48(fp)
   23a04:	10000526 	beq	r2,zero,23a1c <altera_avalon_jtag_uart_irq+0x240>
   23a08:	e0bff517 	ldw	r2,-44(fp)
   23a0c:	10c01017 	ldw	r3,64(r2)
   23a10:	e0bff517 	ldw	r2,-44(fp)
   23a14:	10800f17 	ldw	r2,60(r2)
   23a18:	18bfd31e 	bne	r3,r2,23968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7023968>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   23a1c:	e0bff417 	ldw	r2,-48(fp)
   23a20:	103f7926 	beq	r2,zero,23808 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7023808>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   23a24:	e0bff517 	ldw	r2,-44(fp)
   23a28:	10c00817 	ldw	r3,32(r2)
   23a2c:	00bfff44 	movi	r2,-3
   23a30:	1886703a 	and	r3,r3,r2
   23a34:	e0bff517 	ldw	r2,-44(fp)
   23a38:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23a3c:	e0bff517 	ldw	r2,-44(fp)
   23a40:	10800017 	ldw	r2,0(r2)
   23a44:	10800104 	addi	r2,r2,4
   23a48:	1007883a 	mov	r3,r2
   23a4c:	e0bff517 	ldw	r2,-44(fp)
   23a50:	10800817 	ldw	r2,32(r2)
   23a54:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23a58:	e0bff617 	ldw	r2,-40(fp)
   23a5c:	10800104 	addi	r2,r2,4
   23a60:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   23a64:	003f6806 	br	23808 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7023808>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   23a68:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   23a6c:	0001883a 	nop
   23a70:	e037883a 	mov	sp,fp
   23a74:	dfc00117 	ldw	ra,4(sp)
   23a78:	df000017 	ldw	fp,0(sp)
   23a7c:	dec00204 	addi	sp,sp,8
   23a80:	f800283a 	ret

00023a84 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   23a84:	defff904 	addi	sp,sp,-28
   23a88:	dfc00615 	stw	ra,24(sp)
   23a8c:	df000515 	stw	fp,20(sp)
   23a90:	df000504 	addi	fp,sp,20
   23a94:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   23a98:	e0bfff17 	ldw	r2,-4(fp)
   23a9c:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   23aa0:	e0bffb17 	ldw	r2,-20(fp)
   23aa4:	10800017 	ldw	r2,0(r2)
   23aa8:	10800104 	addi	r2,r2,4
   23aac:	10800037 	ldwio	r2,0(r2)
   23ab0:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   23ab4:	e0bffc17 	ldw	r2,-16(fp)
   23ab8:	1081000c 	andi	r2,r2,1024
   23abc:	10000b26 	beq	r2,zero,23aec <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   23ac0:	e0bffb17 	ldw	r2,-20(fp)
   23ac4:	10800017 	ldw	r2,0(r2)
   23ac8:	10800104 	addi	r2,r2,4
   23acc:	1007883a 	mov	r3,r2
   23ad0:	e0bffb17 	ldw	r2,-20(fp)
   23ad4:	10800817 	ldw	r2,32(r2)
   23ad8:	10810014 	ori	r2,r2,1024
   23adc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   23ae0:	e0bffb17 	ldw	r2,-20(fp)
   23ae4:	10000915 	stw	zero,36(r2)
   23ae8:	00002106 	br	23b70 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   23aec:	e0bffb17 	ldw	r2,-20(fp)
   23af0:	10c00917 	ldw	r3,36(r2)
   23af4:	00a00034 	movhi	r2,32768
   23af8:	10bfff04 	addi	r2,r2,-4
   23afc:	10c01c36 	bltu	r2,r3,23b70 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   23b00:	e0bffb17 	ldw	r2,-20(fp)
   23b04:	10800917 	ldw	r2,36(r2)
   23b08:	10c00044 	addi	r3,r2,1
   23b0c:	e0bffb17 	ldw	r2,-20(fp)
   23b10:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   23b14:	e0bffb17 	ldw	r2,-20(fp)
   23b18:	10c00917 	ldw	r3,36(r2)
   23b1c:	e0bffb17 	ldw	r2,-20(fp)
   23b20:	10800117 	ldw	r2,4(r2)
   23b24:	18801236 	bltu	r3,r2,23b70 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   23b28:	e0bffb17 	ldw	r2,-20(fp)
   23b2c:	10800c17 	ldw	r2,48(r2)
   23b30:	e0bffd15 	stw	r2,-12(fp)
   23b34:	00800104 	movi	r2,4
   23b38:	e0bffe0d 	sth	r2,-8(fp)
   23b3c:	00800044 	movi	r2,1
   23b40:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   23b44:	d0a84d43 	ldbu	r2,-24267(gp)
   23b48:	10803fcc 	andi	r2,r2,255
   23b4c:	10000826 	beq	r2,zero,23b70 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   23b50:	e0bffe0b 	ldhu	r2,-8(fp)
   23b54:	e0fffe83 	ldbu	r3,-6(fp)
   23b58:	e13ffec4 	addi	r4,fp,-5
   23b5c:	200f883a 	mov	r7,r4
   23b60:	180d883a 	mov	r6,r3
   23b64:	100b883a 	mov	r5,r2
   23b68:	e13ffd17 	ldw	r4,-12(fp)
   23b6c:	001e5740 	call	1e574 <OSFlagPost>
   23b70:	d0a86217 	ldw	r2,-24184(gp)
    }
  }

  return alt_ticks_per_second();
}
   23b74:	e037883a 	mov	sp,fp
   23b78:	dfc00117 	ldw	ra,4(sp)
   23b7c:	df000017 	ldw	fp,0(sp)
   23b80:	dec00204 	addi	sp,sp,8
   23b84:	f800283a 	ret

00023b88 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   23b88:	defffd04 	addi	sp,sp,-12
   23b8c:	df000215 	stw	fp,8(sp)
   23b90:	df000204 	addi	fp,sp,8
   23b94:	e13ffe15 	stw	r4,-8(fp)
   23b98:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   23b9c:	00000506 	br	23bb4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   23ba0:	e0bfff17 	ldw	r2,-4(fp)
   23ba4:	1090000c 	andi	r2,r2,16384
   23ba8:	10000226 	beq	r2,zero,23bb4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   23bac:	00bffd44 	movi	r2,-11
   23bb0:	00000b06 	br	23be0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   23bb4:	e0bffe17 	ldw	r2,-8(fp)
   23bb8:	10c01017 	ldw	r3,64(r2)
   23bbc:	e0bffe17 	ldw	r2,-8(fp)
   23bc0:	10800f17 	ldw	r2,60(r2)
   23bc4:	18800526 	beq	r3,r2,23bdc <altera_avalon_jtag_uart_close+0x54>
   23bc8:	e0bffe17 	ldw	r2,-8(fp)
   23bcc:	10c00917 	ldw	r3,36(r2)
   23bd0:	e0bffe17 	ldw	r2,-8(fp)
   23bd4:	10800117 	ldw	r2,4(r2)
   23bd8:	18bff136 	bltu	r3,r2,23ba0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7023ba0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   23bdc:	0005883a 	mov	r2,zero
}
   23be0:	e037883a 	mov	sp,fp
   23be4:	df000017 	ldw	fp,0(sp)
   23be8:	dec00104 	addi	sp,sp,4
   23bec:	f800283a 	ret

00023bf0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   23bf0:	defffa04 	addi	sp,sp,-24
   23bf4:	df000515 	stw	fp,20(sp)
   23bf8:	df000504 	addi	fp,sp,20
   23bfc:	e13ffd15 	stw	r4,-12(fp)
   23c00:	e17ffe15 	stw	r5,-8(fp)
   23c04:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   23c08:	00bff9c4 	movi	r2,-25
   23c0c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   23c10:	e0bffe17 	ldw	r2,-8(fp)
   23c14:	10da8060 	cmpeqi	r3,r2,27137
   23c18:	1800031e 	bne	r3,zero,23c28 <altera_avalon_jtag_uart_ioctl+0x38>
   23c1c:	109a80a0 	cmpeqi	r2,r2,27138
   23c20:	1000181e 	bne	r2,zero,23c84 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   23c24:	00002906 	br	23ccc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   23c28:	e0bffd17 	ldw	r2,-12(fp)
   23c2c:	10c00117 	ldw	r3,4(r2)
   23c30:	00a00034 	movhi	r2,32768
   23c34:	10bfffc4 	addi	r2,r2,-1
   23c38:	18802126 	beq	r3,r2,23cc0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   23c3c:	e0bfff17 	ldw	r2,-4(fp)
   23c40:	10800017 	ldw	r2,0(r2)
   23c44:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   23c48:	e0bffc17 	ldw	r2,-16(fp)
   23c4c:	10800090 	cmplti	r2,r2,2
   23c50:	1000061e 	bne	r2,zero,23c6c <altera_avalon_jtag_uart_ioctl+0x7c>
   23c54:	e0fffc17 	ldw	r3,-16(fp)
   23c58:	00a00034 	movhi	r2,32768
   23c5c:	10bfffc4 	addi	r2,r2,-1
   23c60:	18800226 	beq	r3,r2,23c6c <altera_avalon_jtag_uart_ioctl+0x7c>
   23c64:	e0bffc17 	ldw	r2,-16(fp)
   23c68:	00000206 	br	23c74 <altera_avalon_jtag_uart_ioctl+0x84>
   23c6c:	00a00034 	movhi	r2,32768
   23c70:	10bfff84 	addi	r2,r2,-2
   23c74:	e0fffd17 	ldw	r3,-12(fp)
   23c78:	18800115 	stw	r2,4(r3)
      rc = 0;
   23c7c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   23c80:	00000f06 	br	23cc0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   23c84:	e0bffd17 	ldw	r2,-12(fp)
   23c88:	10c00117 	ldw	r3,4(r2)
   23c8c:	00a00034 	movhi	r2,32768
   23c90:	10bfffc4 	addi	r2,r2,-1
   23c94:	18800c26 	beq	r3,r2,23cc8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   23c98:	e0bffd17 	ldw	r2,-12(fp)
   23c9c:	10c00917 	ldw	r3,36(r2)
   23ca0:	e0bffd17 	ldw	r2,-12(fp)
   23ca4:	10800117 	ldw	r2,4(r2)
   23ca8:	1885803a 	cmpltu	r2,r3,r2
   23cac:	10c03fcc 	andi	r3,r2,255
   23cb0:	e0bfff17 	ldw	r2,-4(fp)
   23cb4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   23cb8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   23cbc:	00000206 	br	23cc8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   23cc0:	0001883a 	nop
   23cc4:	00000106 	br	23ccc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   23cc8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   23ccc:	e0bffb17 	ldw	r2,-20(fp)
}
   23cd0:	e037883a 	mov	sp,fp
   23cd4:	df000017 	ldw	fp,0(sp)
   23cd8:	dec00104 	addi	sp,sp,4
   23cdc:	f800283a 	ret

00023ce0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   23ce0:	deffed04 	addi	sp,sp,-76
   23ce4:	dfc01215 	stw	ra,72(sp)
   23ce8:	df001115 	stw	fp,68(sp)
   23cec:	df001104 	addi	fp,sp,68
   23cf0:	e13ffc15 	stw	r4,-16(fp)
   23cf4:	e17ffd15 	stw	r5,-12(fp)
   23cf8:	e1bffe15 	stw	r6,-8(fp)
   23cfc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   23d00:	e0bffd17 	ldw	r2,-12(fp)
   23d04:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   23d08:	e0bffc17 	ldw	r2,-16(fp)
   23d0c:	10800a17 	ldw	r2,40(r2)
   23d10:	e0bff815 	stw	r2,-32(fp)
   23d14:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   23d18:	e0bff90b 	ldhu	r2,-28(fp)
   23d1c:	e0fffb04 	addi	r3,fp,-20
   23d20:	180d883a 	mov	r6,r3
   23d24:	100b883a 	mov	r5,r2
   23d28:	e13ff817 	ldw	r4,-32(fp)
   23d2c:	00209c40 	call	209c4 <OSSemPend>

  while (space > 0)
   23d30:	00006106 	br	23eb8 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   23d34:	e0bffc17 	ldw	r2,-16(fp)
   23d38:	10800d17 	ldw	r2,52(r2)
   23d3c:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   23d40:	e0bffc17 	ldw	r2,-16(fp)
   23d44:	10800e17 	ldw	r2,56(r2)
   23d48:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   23d4c:	e0fff317 	ldw	r3,-52(fp)
   23d50:	e0bff417 	ldw	r2,-48(fp)
   23d54:	18800536 	bltu	r3,r2,23d6c <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   23d58:	e0fff317 	ldw	r3,-52(fp)
   23d5c:	e0bff417 	ldw	r2,-48(fp)
   23d60:	1885c83a 	sub	r2,r3,r2
   23d64:	e0bff115 	stw	r2,-60(fp)
   23d68:	00000406 	br	23d7c <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   23d6c:	00c20004 	movi	r3,2048
   23d70:	e0bff417 	ldw	r2,-48(fp)
   23d74:	1885c83a 	sub	r2,r3,r2
   23d78:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   23d7c:	e0bff117 	ldw	r2,-60(fp)
   23d80:	10001e26 	beq	r2,zero,23dfc <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   23d84:	e0fffe17 	ldw	r3,-8(fp)
   23d88:	e0bff117 	ldw	r2,-60(fp)
   23d8c:	1880022e 	bgeu	r3,r2,23d98 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   23d90:	e0bffe17 	ldw	r2,-8(fp)
   23d94:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   23d98:	e0bffc17 	ldw	r2,-16(fp)
   23d9c:	10c01104 	addi	r3,r2,68
   23da0:	e0bff417 	ldw	r2,-48(fp)
   23da4:	1885883a 	add	r2,r3,r2
   23da8:	e1bff117 	ldw	r6,-60(fp)
   23dac:	100b883a 	mov	r5,r2
   23db0:	e13ff017 	ldw	r4,-64(fp)
   23db4:	000d3800 	call	d380 <memcpy>
      ptr   += n;
   23db8:	e0fff017 	ldw	r3,-64(fp)
   23dbc:	e0bff117 	ldw	r2,-60(fp)
   23dc0:	1885883a 	add	r2,r3,r2
   23dc4:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   23dc8:	e0fffe17 	ldw	r3,-8(fp)
   23dcc:	e0bff117 	ldw	r2,-60(fp)
   23dd0:	1885c83a 	sub	r2,r3,r2
   23dd4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23dd8:	e0fff417 	ldw	r3,-48(fp)
   23ddc:	e0bff117 	ldw	r2,-60(fp)
   23de0:	1885883a 	add	r2,r3,r2
   23de4:	10c1ffcc 	andi	r3,r2,2047
   23de8:	e0bffc17 	ldw	r2,-16(fp)
   23dec:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   23df0:	e0bffe17 	ldw	r2,-8(fp)
   23df4:	00bfcf16 	blt	zero,r2,23d34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7023d34>
   23df8:	00000106 	br	23e00 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   23dfc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   23e00:	e0fff017 	ldw	r3,-64(fp)
   23e04:	e0bffd17 	ldw	r2,-12(fp)
   23e08:	18802e1e 	bne	r3,r2,23ec4 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   23e0c:	e0bfff17 	ldw	r2,-4(fp)
   23e10:	1090000c 	andi	r2,r2,16384
   23e14:	10002d1e 	bne	r2,zero,23ecc <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   23e18:	d0a84d43 	ldbu	r2,-24267(gp)
   23e1c:	10803fcc 	andi	r2,r2,255
   23e20:	10800058 	cmpnei	r2,r2,1
   23e24:	1000161e 	bne	r2,zero,23e80 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   23e28:	e0bffc17 	ldw	r2,-16(fp)
   23e2c:	10800c17 	ldw	r2,48(r2)
   23e30:	e0bff215 	stw	r2,-56(fp)
   23e34:	00800144 	movi	r2,5
   23e38:	e0bff98d 	sth	r2,-26(fp)
   23e3c:	00bfe0c4 	movi	r2,-125
   23e40:	e0bffa05 	stb	r2,-24(fp)
   23e44:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   23e48:	d0a84d43 	ldbu	r2,-24267(gp)
   23e4c:	10803fcc 	andi	r2,r2,255
   23e50:	10001526 	beq	r2,zero,23ea8 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   23e54:	e0fff98b 	ldhu	r3,-26(fp)
   23e58:	e13ffa03 	ldbu	r4,-24(fp)
   23e5c:	e17ffa8b 	ldhu	r5,-22(fp)
   23e60:	e0bffb44 	addi	r2,fp,-19
   23e64:	d8800015 	stw	r2,0(sp)
   23e68:	280f883a 	mov	r7,r5
   23e6c:	200d883a 	mov	r6,r4
   23e70:	180b883a 	mov	r5,r3
   23e74:	e13ff217 	ldw	r4,-56(fp)
   23e78:	001df5c0 	call	1df5c <OSFlagPend>
   23e7c:	00000a06 	br	23ea8 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   23e80:	0001883a 	nop
   23e84:	e0bffc17 	ldw	r2,-16(fp)
   23e88:	10c00d17 	ldw	r3,52(r2)
   23e8c:	e0bff317 	ldw	r2,-52(fp)
   23e90:	1880051e 	bne	r3,r2,23ea8 <altera_avalon_jtag_uart_read+0x1c8>
   23e94:	e0bffc17 	ldw	r2,-16(fp)
   23e98:	10c00917 	ldw	r3,36(r2)
   23e9c:	e0bffc17 	ldw	r2,-16(fp)
   23ea0:	10800117 	ldw	r2,4(r2)
   23ea4:	18bff736 	bltu	r3,r2,23e84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7023e84>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   23ea8:	e0bffc17 	ldw	r2,-16(fp)
   23eac:	10c00d17 	ldw	r3,52(r2)
   23eb0:	e0bff317 	ldw	r2,-52(fp)
   23eb4:	18800726 	beq	r3,r2,23ed4 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   23eb8:	e0bffe17 	ldw	r2,-8(fp)
   23ebc:	00bf9d16 	blt	zero,r2,23d34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7023d34>
   23ec0:	00000506 	br	23ed8 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   23ec4:	0001883a 	nop
   23ec8:	00000306 	br	23ed8 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   23ecc:	0001883a 	nop
   23ed0:	00000106 	br	23ed8 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   23ed4:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   23ed8:	e0bffc17 	ldw	r2,-16(fp)
   23edc:	10800a17 	ldw	r2,40(r2)
   23ee0:	1009883a 	mov	r4,r2
   23ee4:	0020d3c0 	call	20d3c <OSSemPost>

  if (ptr != buffer)
   23ee8:	e0fff017 	ldw	r3,-64(fp)
   23eec:	e0bffd17 	ldw	r2,-12(fp)
   23ef0:	18801826 	beq	r3,r2,23f54 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23ef4:	0005303a 	rdctl	r2,status
   23ef8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23efc:	e0fff717 	ldw	r3,-36(fp)
   23f00:	00bfff84 	movi	r2,-2
   23f04:	1884703a 	and	r2,r3,r2
   23f08:	1001703a 	wrctl	status,r2
  
  return context;
   23f0c:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   23f10:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23f14:	e0bffc17 	ldw	r2,-16(fp)
   23f18:	10800817 	ldw	r2,32(r2)
   23f1c:	10c00054 	ori	r3,r2,1
   23f20:	e0bffc17 	ldw	r2,-16(fp)
   23f24:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   23f28:	e0bffc17 	ldw	r2,-16(fp)
   23f2c:	10800017 	ldw	r2,0(r2)
   23f30:	10800104 	addi	r2,r2,4
   23f34:	1007883a 	mov	r3,r2
   23f38:	e0bffc17 	ldw	r2,-16(fp)
   23f3c:	10800817 	ldw	r2,32(r2)
   23f40:	18800035 	stwio	r2,0(r3)
   23f44:	e0bff617 	ldw	r2,-40(fp)
   23f48:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23f4c:	e0bff517 	ldw	r2,-44(fp)
   23f50:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   23f54:	e0fff017 	ldw	r3,-64(fp)
   23f58:	e0bffd17 	ldw	r2,-12(fp)
   23f5c:	18800426 	beq	r3,r2,23f70 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   23f60:	e0fff017 	ldw	r3,-64(fp)
   23f64:	e0bffd17 	ldw	r2,-12(fp)
   23f68:	1885c83a 	sub	r2,r3,r2
   23f6c:	00000606 	br	23f88 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   23f70:	e0bfff17 	ldw	r2,-4(fp)
   23f74:	1090000c 	andi	r2,r2,16384
   23f78:	10000226 	beq	r2,zero,23f84 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   23f7c:	00bffd44 	movi	r2,-11
   23f80:	00000106 	br	23f88 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   23f84:	00bffec4 	movi	r2,-5
}
   23f88:	e037883a 	mov	sp,fp
   23f8c:	dfc00117 	ldw	ra,4(sp)
   23f90:	df000017 	ldw	fp,0(sp)
   23f94:	dec00204 	addi	sp,sp,8
   23f98:	f800283a 	ret

00023f9c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   23f9c:	deffed04 	addi	sp,sp,-76
   23fa0:	dfc01215 	stw	ra,72(sp)
   23fa4:	df001115 	stw	fp,68(sp)
   23fa8:	df001104 	addi	fp,sp,68
   23fac:	e13ffc15 	stw	r4,-16(fp)
   23fb0:	e17ffd15 	stw	r5,-12(fp)
   23fb4:	e1bffe15 	stw	r6,-8(fp)
   23fb8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   23fbc:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   23fc0:	e0bffd17 	ldw	r2,-12(fp)
   23fc4:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   23fc8:	e0bffc17 	ldw	r2,-16(fp)
   23fcc:	10800b17 	ldw	r2,44(r2)
   23fd0:	e0bff815 	stw	r2,-32(fp)
   23fd4:	e03ff90d 	sth	zero,-28(fp)
   23fd8:	e0bff90b 	ldhu	r2,-28(fp)
   23fdc:	e0fffb44 	addi	r3,fp,-19
   23fe0:	180d883a 	mov	r6,r3
   23fe4:	100b883a 	mov	r5,r2
   23fe8:	e13ff817 	ldw	r4,-32(fp)
   23fec:	00209c40 	call	209c4 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   23ff0:	00003706 	br	240d0 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   23ff4:	e0bffc17 	ldw	r2,-16(fp)
   23ff8:	10800f17 	ldw	r2,60(r2)
   23ffc:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   24000:	e0bffc17 	ldw	r2,-16(fp)
   24004:	10801017 	ldw	r2,64(r2)
   24008:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   2400c:	e0fff417 	ldw	r3,-48(fp)
   24010:	e0bff017 	ldw	r2,-64(fp)
   24014:	1880062e 	bgeu	r3,r2,24030 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   24018:	e0fff017 	ldw	r3,-64(fp)
   2401c:	e0bff417 	ldw	r2,-48(fp)
   24020:	1885c83a 	sub	r2,r3,r2
   24024:	10bfffc4 	addi	r2,r2,-1
   24028:	e0bff115 	stw	r2,-60(fp)
   2402c:	00000b06 	br	2405c <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   24030:	e0bff017 	ldw	r2,-64(fp)
   24034:	10000526 	beq	r2,zero,2404c <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   24038:	00c20004 	movi	r3,2048
   2403c:	e0bff417 	ldw	r2,-48(fp)
   24040:	1885c83a 	sub	r2,r3,r2
   24044:	e0bff115 	stw	r2,-60(fp)
   24048:	00000406 	br	2405c <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2404c:	00c1ffc4 	movi	r3,2047
   24050:	e0bff417 	ldw	r2,-48(fp)
   24054:	1885c83a 	sub	r2,r3,r2
   24058:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   2405c:	e0bff117 	ldw	r2,-60(fp)
   24060:	10001e26 	beq	r2,zero,240dc <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   24064:	e0fffe17 	ldw	r3,-8(fp)
   24068:	e0bff117 	ldw	r2,-60(fp)
   2406c:	1880022e 	bgeu	r3,r2,24078 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   24070:	e0bffe17 	ldw	r2,-8(fp)
   24074:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   24078:	e0bffc17 	ldw	r2,-16(fp)
   2407c:	10c21104 	addi	r3,r2,2116
   24080:	e0bff417 	ldw	r2,-48(fp)
   24084:	1885883a 	add	r2,r3,r2
   24088:	e1bff117 	ldw	r6,-60(fp)
   2408c:	e17ffd17 	ldw	r5,-12(fp)
   24090:	1009883a 	mov	r4,r2
   24094:	000d3800 	call	d380 <memcpy>
      ptr   += n;
   24098:	e0fffd17 	ldw	r3,-12(fp)
   2409c:	e0bff117 	ldw	r2,-60(fp)
   240a0:	1885883a 	add	r2,r3,r2
   240a4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   240a8:	e0fffe17 	ldw	r3,-8(fp)
   240ac:	e0bff117 	ldw	r2,-60(fp)
   240b0:	1885c83a 	sub	r2,r3,r2
   240b4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   240b8:	e0fff417 	ldw	r3,-48(fp)
   240bc:	e0bff117 	ldw	r2,-60(fp)
   240c0:	1885883a 	add	r2,r3,r2
   240c4:	10c1ffcc 	andi	r3,r2,2047
   240c8:	e0bffc17 	ldw	r2,-16(fp)
   240cc:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   240d0:	e0bffe17 	ldw	r2,-8(fp)
   240d4:	00bfc716 	blt	zero,r2,23ff4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7023ff4>
   240d8:	00000106 	br	240e0 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   240dc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   240e0:	0005303a 	rdctl	r2,status
   240e4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   240e8:	e0fff717 	ldw	r3,-36(fp)
   240ec:	00bfff84 	movi	r2,-2
   240f0:	1884703a 	and	r2,r3,r2
   240f4:	1001703a 	wrctl	status,r2
  
  return context;
   240f8:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   240fc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   24100:	e0bffc17 	ldw	r2,-16(fp)
   24104:	10800817 	ldw	r2,32(r2)
   24108:	10c00094 	ori	r3,r2,2
   2410c:	e0bffc17 	ldw	r2,-16(fp)
   24110:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24114:	e0bffc17 	ldw	r2,-16(fp)
   24118:	10800017 	ldw	r2,0(r2)
   2411c:	10800104 	addi	r2,r2,4
   24120:	1007883a 	mov	r3,r2
   24124:	e0bffc17 	ldw	r2,-16(fp)
   24128:	10800817 	ldw	r2,32(r2)
   2412c:	18800035 	stwio	r2,0(r3)
   24130:	e0bff617 	ldw	r2,-40(fp)
   24134:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24138:	e0bff317 	ldw	r2,-52(fp)
   2413c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   24140:	e0bffe17 	ldw	r2,-8(fp)
   24144:	00802a0e 	bge	zero,r2,241f0 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   24148:	e0bfff17 	ldw	r2,-4(fp)
   2414c:	1090000c 	andi	r2,r2,16384
   24150:	10002a1e 	bne	r2,zero,241fc <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   24154:	d0a84d43 	ldbu	r2,-24267(gp)
   24158:	10803fcc 	andi	r2,r2,255
   2415c:	10800058 	cmpnei	r2,r2,1
   24160:	1000161e 	bne	r2,zero,241bc <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   24164:	e0bffc17 	ldw	r2,-16(fp)
   24168:	10800c17 	ldw	r2,48(r2)
   2416c:	e0bff515 	stw	r2,-44(fp)
   24170:	00800184 	movi	r2,6
   24174:	e0bff98d 	sth	r2,-26(fp)
   24178:	00bfe0c4 	movi	r2,-125
   2417c:	e0bffa05 	stb	r2,-24(fp)
   24180:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   24184:	d0a84d43 	ldbu	r2,-24267(gp)
   24188:	10803fcc 	andi	r2,r2,255
   2418c:	10001526 	beq	r2,zero,241e4 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   24190:	e0fff98b 	ldhu	r3,-26(fp)
   24194:	e13ffa03 	ldbu	r4,-24(fp)
   24198:	e17ffa8b 	ldhu	r5,-22(fp)
   2419c:	e0bffb04 	addi	r2,fp,-20
   241a0:	d8800015 	stw	r2,0(sp)
   241a4:	280f883a 	mov	r7,r5
   241a8:	200d883a 	mov	r6,r4
   241ac:	180b883a 	mov	r5,r3
   241b0:	e13ff517 	ldw	r4,-44(fp)
   241b4:	001df5c0 	call	1df5c <OSFlagPend>
   241b8:	00000a06 	br	241e4 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   241bc:	0001883a 	nop
   241c0:	e0bffc17 	ldw	r2,-16(fp)
   241c4:	10c01017 	ldw	r3,64(r2)
   241c8:	e0bff017 	ldw	r2,-64(fp)
   241cc:	1880051e 	bne	r3,r2,241e4 <altera_avalon_jtag_uart_write+0x248>
   241d0:	e0bffc17 	ldw	r2,-16(fp)
   241d4:	10c00917 	ldw	r3,36(r2)
   241d8:	e0bffc17 	ldw	r2,-16(fp)
   241dc:	10800117 	ldw	r2,4(r2)
   241e0:	18bff736 	bltu	r3,r2,241c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70241c0>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   241e4:	e0bffc17 	ldw	r2,-16(fp)
   241e8:	10800917 	ldw	r2,36(r2)
   241ec:	1000051e 	bne	r2,zero,24204 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   241f0:	e0bffe17 	ldw	r2,-8(fp)
   241f4:	00bfb616 	blt	zero,r2,240d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70240d0>
   241f8:	00000306 	br	24208 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   241fc:	0001883a 	nop
   24200:	00000106 	br	24208 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   24204:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   24208:	e0bffc17 	ldw	r2,-16(fp)
   2420c:	10800b17 	ldw	r2,44(r2)
   24210:	1009883a 	mov	r4,r2
   24214:	0020d3c0 	call	20d3c <OSSemPost>

  if (ptr != start)
   24218:	e0fffd17 	ldw	r3,-12(fp)
   2421c:	e0bff217 	ldw	r2,-56(fp)
   24220:	18800426 	beq	r3,r2,24234 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   24224:	e0fffd17 	ldw	r3,-12(fp)
   24228:	e0bff217 	ldw	r2,-56(fp)
   2422c:	1885c83a 	sub	r2,r3,r2
   24230:	00000606 	br	2424c <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   24234:	e0bfff17 	ldw	r2,-4(fp)
   24238:	1090000c 	andi	r2,r2,16384
   2423c:	10000226 	beq	r2,zero,24248 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   24240:	00bffd44 	movi	r2,-11
   24244:	00000106 	br	2424c <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   24248:	00bffec4 	movi	r2,-5
}
   2424c:	e037883a 	mov	sp,fp
   24250:	dfc00117 	ldw	ra,4(sp)
   24254:	df000017 	ldw	fp,0(sp)
   24258:	dec00204 	addi	sp,sp,8
   2425c:	f800283a 	ret

00024260 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   24260:	defff904 	addi	sp,sp,-28
   24264:	dfc00615 	stw	ra,24(sp)
   24268:	df000515 	stw	fp,20(sp)
   2426c:	df000504 	addi	fp,sp,20
   24270:	e13ffe15 	stw	r4,-8(fp)
   24274:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   24278:	0007883a 	mov	r3,zero
   2427c:	e0bffe17 	ldw	r2,-8(fp)
   24280:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   24284:	e0bffe17 	ldw	r2,-8(fp)
   24288:	10800104 	addi	r2,r2,4
   2428c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24290:	0005303a 	rdctl	r2,status
   24294:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24298:	e0fffc17 	ldw	r3,-16(fp)
   2429c:	00bfff84 	movi	r2,-2
   242a0:	1884703a 	and	r2,r3,r2
   242a4:	1001703a 	wrctl	status,r2
  
  return context;
   242a8:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   242ac:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   242b0:	0025f700 	call	25f70 <alt_tick>
   242b4:	e0bffb17 	ldw	r2,-20(fp)
   242b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   242bc:	e0bffd17 	ldw	r2,-12(fp)
   242c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   242c4:	0001883a 	nop
   242c8:	e037883a 	mov	sp,fp
   242cc:	dfc00117 	ldw	ra,4(sp)
   242d0:	df000017 	ldw	fp,0(sp)
   242d4:	dec00204 	addi	sp,sp,8
   242d8:	f800283a 	ret

000242dc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   242dc:	defff904 	addi	sp,sp,-28
   242e0:	dfc00615 	stw	ra,24(sp)
   242e4:	df000515 	stw	fp,20(sp)
   242e8:	df000504 	addi	fp,sp,20
   242ec:	e13ffc15 	stw	r4,-16(fp)
   242f0:	e17ffd15 	stw	r5,-12(fp)
   242f4:	e1bffe15 	stw	r6,-8(fp)
   242f8:	e1ffff15 	stw	r7,-4(fp)
   242fc:	e0bfff17 	ldw	r2,-4(fp)
   24300:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   24304:	d0a86217 	ldw	r2,-24184(gp)
   24308:	1000021e 	bne	r2,zero,24314 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   2430c:	e0bffb17 	ldw	r2,-20(fp)
   24310:	d0a86215 	stw	r2,-24184(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   24314:	e0bffc17 	ldw	r2,-16(fp)
   24318:	10800104 	addi	r2,r2,4
   2431c:	00c001c4 	movi	r3,7
   24320:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   24324:	018000b4 	movhi	r6,2
   24328:	31909804 	addi	r6,r6,16992
   2432c:	e17ffc17 	ldw	r5,-16(fp)
   24330:	e13ffe17 	ldw	r4,-8(fp)
   24334:	0025b000 	call	25b00 <alt_irq_register>
#endif  
}
   24338:	0001883a 	nop
   2433c:	e037883a 	mov	sp,fp
   24340:	dfc00117 	ldw	ra,4(sp)
   24344:	df000017 	ldw	fp,0(sp)
   24348:	dec00204 	addi	sp,sp,8
   2434c:	f800283a 	ret

00024350 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   24350:	defffc04 	addi	sp,sp,-16
   24354:	df000315 	stw	fp,12(sp)
   24358:	df000304 	addi	fp,sp,12
   2435c:	e13ffe15 	stw	r4,-8(fp)
   24360:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   24364:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   24368:	e0bfff17 	ldw	r2,-4(fp)
   2436c:	1000061e 	bne	r2,zero,24388 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   24370:	e0bffe17 	ldw	r2,-8(fp)
   24374:	1007883a 	mov	r3,r2
   24378:	e0bffd03 	ldbu	r2,-12(fp)
   2437c:	1884b03a 	or	r2,r3,r2
   24380:	e0bffd05 	stb	r2,-12(fp)
   24384:	00000806 	br	243a8 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   24388:	e0bffe17 	ldw	r2,-8(fp)
   2438c:	1007883a 	mov	r3,r2
   24390:	e0bffd03 	ldbu	r2,-12(fp)
   24394:	1884b03a 	or	r2,r3,r2
   24398:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   2439c:	e0bffd03 	ldbu	r2,-12(fp)
   243a0:	10801014 	ori	r2,r2,64
   243a4:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   243a8:	e0fffd03 	ldbu	r3,-12(fp)
   243ac:	00bfe004 	movi	r2,-128
   243b0:	1884b03a 	or	r2,r3,r2
}
   243b4:	e037883a 	mov	sp,fp
   243b8:	df000017 	ldw	fp,0(sp)
   243bc:	dec00104 	addi	sp,sp,4
   243c0:	f800283a 	ret

000243c4 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   243c4:	defffd04 	addi	sp,sp,-12
   243c8:	df000215 	stw	fp,8(sp)
   243cc:	df000204 	addi	fp,sp,8
   243d0:	e13ffe15 	stw	r4,-8(fp)
   243d4:	2805883a 	mov	r2,r5
   243d8:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   243dc:	e0bffe17 	ldw	r2,-8(fp)
   243e0:	10800a17 	ldw	r2,40(r2)
   243e4:	1007883a 	mov	r3,r2
   243e8:	e0bfff03 	ldbu	r2,-4(fp)
   243ec:	18800025 	stbio	r2,0(r3)
}
   243f0:	0001883a 	nop
   243f4:	e037883a 	mov	sp,fp
   243f8:	df000017 	ldw	fp,0(sp)
   243fc:	dec00104 	addi	sp,sp,4
   24400:	f800283a 	ret

00024404 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   24404:	defffe04 	addi	sp,sp,-8
   24408:	df000115 	stw	fp,4(sp)
   2440c:	df000104 	addi	fp,sp,4
   24410:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   24414:	e0bfff17 	ldw	r2,-4(fp)
   24418:	10800a17 	ldw	r2,40(r2)
   2441c:	1007883a 	mov	r3,r2
   24420:	00800044 	movi	r2,1
   24424:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   24428:	0001883a 	nop
   2442c:	e037883a 	mov	sp,fp
   24430:	df000017 	ldw	fp,0(sp)
   24434:	dec00104 	addi	sp,sp,4
   24438:	f800283a 	ret

0002443c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   2443c:	defffc04 	addi	sp,sp,-16
   24440:	dfc00315 	stw	ra,12(sp)
   24444:	df000215 	stw	fp,8(sp)
   24448:	df000204 	addi	fp,sp,8
   2444c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   24450:	d1602104 	addi	r5,gp,-32636
   24454:	e13fff17 	ldw	r4,-4(fp)
   24458:	00258fc0 	call	258fc <alt_find_dev>
   2445c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   24460:	e0bffe17 	ldw	r2,-8(fp)
}
   24464:	e037883a 	mov	sp,fp
   24468:	dfc00117 	ldw	ra,4(sp)
   2446c:	df000017 	ldw	fp,0(sp)
   24470:	dec00204 	addi	sp,sp,8
   24474:	f800283a 	ret

00024478 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   24478:	defffb04 	addi	sp,sp,-20
   2447c:	df000415 	stw	fp,16(sp)
   24480:	df000404 	addi	fp,sp,16
   24484:	e13ffd15 	stw	r4,-12(fp)
   24488:	e17ffe15 	stw	r5,-8(fp)
   2448c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   24490:	e03ffc15 	stw	zero,-16(fp)
   24494:	00000f06 	br	244d4 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   24498:	e0bffd17 	ldw	r2,-12(fp)
   2449c:	10800a17 	ldw	r2,40(r2)
   244a0:	10800044 	addi	r2,r2,1
   244a4:	1009883a 	mov	r4,r2
   244a8:	e0fffe17 	ldw	r3,-8(fp)
   244ac:	e0bffc17 	ldw	r2,-16(fp)
   244b0:	1885883a 	add	r2,r3,r2
   244b4:	10800003 	ldbu	r2,0(r2)
   244b8:	10803fcc 	andi	r2,r2,255
   244bc:	1080201c 	xori	r2,r2,128
   244c0:	10bfe004 	addi	r2,r2,-128
   244c4:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   244c8:	e0bffc17 	ldw	r2,-16(fp)
   244cc:	10800044 	addi	r2,r2,1
   244d0:	e0bffc15 	stw	r2,-16(fp)
   244d4:	e0fffc17 	ldw	r3,-16(fp)
   244d8:	e0bfff17 	ldw	r2,-4(fp)
   244dc:	18bfee36 	bltu	r3,r2,24498 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7024498>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   244e0:	0001883a 	nop
   244e4:	e037883a 	mov	sp,fp
   244e8:	df000017 	ldw	fp,0(sp)
   244ec:	dec00104 	addi	sp,sp,4
   244f0:	f800283a 	ret

000244f4 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   244f4:	defffd04 	addi	sp,sp,-12
   244f8:	df000215 	stw	fp,8(sp)
   244fc:	df000204 	addi	fp,sp,8
   24500:	e13ffe15 	stw	r4,-8(fp)
   24504:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   24508:	00000d06 	br	24540 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   2450c:	e0bffe17 	ldw	r2,-8(fp)
   24510:	10800a17 	ldw	r2,40(r2)
   24514:	10800044 	addi	r2,r2,1
   24518:	1007883a 	mov	r3,r2
   2451c:	e0bfff17 	ldw	r2,-4(fp)
   24520:	10800003 	ldbu	r2,0(r2)
   24524:	10803fcc 	andi	r2,r2,255
   24528:	1080201c 	xori	r2,r2,128
   2452c:	10bfe004 	addi	r2,r2,-128
   24530:	18800025 	stbio	r2,0(r3)
		++ptr;
   24534:	e0bfff17 	ldw	r2,-4(fp)
   24538:	10800044 	addi	r2,r2,1
   2453c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   24540:	e0bfff17 	ldw	r2,-4(fp)
   24544:	10800003 	ldbu	r2,0(r2)
   24548:	10803fcc 	andi	r2,r2,255
   2454c:	1080201c 	xori	r2,r2,128
   24550:	10bfe004 	addi	r2,r2,-128
   24554:	103fed1e 	bne	r2,zero,2450c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf702450c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   24558:	0001883a 	nop
   2455c:	e037883a 	mov	sp,fp
   24560:	df000017 	ldw	fp,0(sp)
   24564:	dec00104 	addi	sp,sp,4
   24568:	f800283a 	ret

0002456c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   2456c:	defffb04 	addi	sp,sp,-20
   24570:	dfc00415 	stw	ra,16(sp)
   24574:	df000315 	stw	fp,12(sp)
   24578:	df000304 	addi	fp,sp,12
   2457c:	e13ffd15 	stw	r4,-12(fp)
   24580:	e17ffe15 	stw	r5,-8(fp)
   24584:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   24588:	e0bffd17 	ldw	r2,-12(fp)
   2458c:	10800017 	ldw	r2,0(r2)
   24590:	e0ffff17 	ldw	r3,-4(fp)
   24594:	180d883a 	mov	r6,r3
   24598:	e17ffe17 	ldw	r5,-8(fp)
   2459c:	1009883a 	mov	r4,r2
   245a0:	00244780 	call	24478 <alt_up_character_lcd_write>
	return 0;
   245a4:	0005883a 	mov	r2,zero
}
   245a8:	e037883a 	mov	sp,fp
   245ac:	dfc00117 	ldw	ra,4(sp)
   245b0:	df000017 	ldw	fp,0(sp)
   245b4:	dec00204 	addi	sp,sp,8
   245b8:	f800283a 	ret

000245bc <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   245bc:	defffa04 	addi	sp,sp,-24
   245c0:	dfc00515 	stw	ra,20(sp)
   245c4:	df000415 	stw	fp,16(sp)
   245c8:	df000404 	addi	fp,sp,16
   245cc:	e13ffd15 	stw	r4,-12(fp)
   245d0:	e17ffe15 	stw	r5,-8(fp)
   245d4:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   245d8:	e0bffe17 	ldw	r2,-8(fp)
   245dc:	10800a28 	cmpgeui	r2,r2,40
   245e0:	1000031e 	bne	r2,zero,245f0 <alt_up_character_lcd_set_cursor_pos+0x34>
   245e4:	e0bfff17 	ldw	r2,-4(fp)
   245e8:	108000b0 	cmpltui	r2,r2,2
   245ec:	1000021e 	bne	r2,zero,245f8 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   245f0:	00bfffc4 	movi	r2,-1
   245f4:	00000906 	br	2461c <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   245f8:	e17fff17 	ldw	r5,-4(fp)
   245fc:	e13ffe17 	ldw	r4,-8(fp)
   24600:	00243500 	call	24350 <get_DDRAM_addr>
   24604:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   24608:	e0bffc03 	ldbu	r2,-16(fp)
   2460c:	100b883a 	mov	r5,r2
   24610:	e13ffd17 	ldw	r4,-12(fp)
   24614:	00243c40 	call	243c4 <alt_up_character_lcd_send_cmd>
	return 0;
   24618:	0005883a 	mov	r2,zero
}
   2461c:	e037883a 	mov	sp,fp
   24620:	dfc00117 	ldw	ra,4(sp)
   24624:	df000017 	ldw	fp,0(sp)
   24628:	dec00204 	addi	sp,sp,8
   2462c:	f800283a 	ret

00024630 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   24630:	defffb04 	addi	sp,sp,-20
   24634:	dfc00415 	stw	ra,16(sp)
   24638:	df000315 	stw	fp,12(sp)
   2463c:	df000304 	addi	fp,sp,12
   24640:	e13ffe15 	stw	r4,-8(fp)
   24644:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   24648:	e0bfff17 	ldw	r2,-4(fp)
   2464c:	10001526 	beq	r2,zero,246a4 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   24650:	e0bfff17 	ldw	r2,-4(fp)
   24654:	0080020e 	bge	zero,r2,24660 <alt_up_character_lcd_shift_cursor+0x30>
   24658:	00800504 	movi	r2,20
   2465c:	00000106 	br	24664 <alt_up_character_lcd_shift_cursor+0x34>
   24660:	00800404 	movi	r2,16
   24664:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   24668:	e0bfff17 	ldw	r2,-4(fp)
   2466c:	1000010e 	bge	r2,zero,24674 <alt_up_character_lcd_shift_cursor+0x44>
   24670:	0085c83a 	sub	r2,zero,r2
   24674:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   24678:	00000406 	br	2468c <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   2467c:	e0bffd43 	ldbu	r2,-11(fp)
   24680:	100b883a 	mov	r5,r2
   24684:	e13ffe17 	ldw	r4,-8(fp)
   24688:	00243c40 	call	243c4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   2468c:	e0bffd03 	ldbu	r2,-12(fp)
   24690:	10ffffc4 	addi	r3,r2,-1
   24694:	e0fffd05 	stb	r3,-12(fp)
   24698:	10803fcc 	andi	r2,r2,255
   2469c:	103ff71e 	bne	r2,zero,2467c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf702467c>
   246a0:	00000106 	br	246a8 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   246a4:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   246a8:	e037883a 	mov	sp,fp
   246ac:	dfc00117 	ldw	ra,4(sp)
   246b0:	df000017 	ldw	fp,0(sp)
   246b4:	dec00204 	addi	sp,sp,8
   246b8:	f800283a 	ret

000246bc <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   246bc:	defffb04 	addi	sp,sp,-20
   246c0:	dfc00415 	stw	ra,16(sp)
   246c4:	df000315 	stw	fp,12(sp)
   246c8:	df000304 	addi	fp,sp,12
   246cc:	e13ffe15 	stw	r4,-8(fp)
   246d0:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   246d4:	e0bfff17 	ldw	r2,-4(fp)
   246d8:	10001526 	beq	r2,zero,24730 <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   246dc:	e0bfff17 	ldw	r2,-4(fp)
   246e0:	0080020e 	bge	zero,r2,246ec <alt_up_character_lcd_shift_display+0x30>
   246e4:	00800704 	movi	r2,28
   246e8:	00000106 	br	246f0 <alt_up_character_lcd_shift_display+0x34>
   246ec:	00800604 	movi	r2,24
   246f0:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   246f4:	e0bfff17 	ldw	r2,-4(fp)
   246f8:	1000010e 	bge	r2,zero,24700 <alt_up_character_lcd_shift_display+0x44>
   246fc:	0085c83a 	sub	r2,zero,r2
   24700:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   24704:	00000406 	br	24718 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   24708:	e0bffd43 	ldbu	r2,-11(fp)
   2470c:	100b883a 	mov	r5,r2
   24710:	e13ffe17 	ldw	r4,-8(fp)
   24714:	00243c40 	call	243c4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   24718:	e0bffd03 	ldbu	r2,-12(fp)
   2471c:	10ffffc4 	addi	r3,r2,-1
   24720:	e0fffd05 	stb	r3,-12(fp)
   24724:	10803fcc 	andi	r2,r2,255
   24728:	103ff71e 	bne	r2,zero,24708 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7024708>
   2472c:	00000106 	br	24734 <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   24730:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   24734:	e037883a 	mov	sp,fp
   24738:	dfc00117 	ldw	ra,4(sp)
   2473c:	df000017 	ldw	fp,0(sp)
   24740:	dec00204 	addi	sp,sp,8
   24744:	f800283a 	ret

00024748 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   24748:	defffa04 	addi	sp,sp,-24
   2474c:	dfc00515 	stw	ra,20(sp)
   24750:	df000415 	stw	fp,16(sp)
   24754:	df000404 	addi	fp,sp,16
   24758:	e13ffd15 	stw	r4,-12(fp)
   2475c:	e17ffe15 	stw	r5,-8(fp)
   24760:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   24764:	e0bffe17 	ldw	r2,-8(fp)
   24768:	10800a28 	cmpgeui	r2,r2,40
   2476c:	1000031e 	bne	r2,zero,2477c <alt_up_character_lcd_erase_pos+0x34>
   24770:	e0bfff17 	ldw	r2,-4(fp)
   24774:	108000b0 	cmpltui	r2,r2,2
   24778:	1000021e 	bne	r2,zero,24784 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   2477c:	00bfffc4 	movi	r2,-1
   24780:	00000f06 	br	247c0 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   24784:	e17fff17 	ldw	r5,-4(fp)
   24788:	e13ffe17 	ldw	r4,-8(fp)
   2478c:	00243500 	call	24350 <get_DDRAM_addr>
   24790:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   24794:	e0bffc03 	ldbu	r2,-16(fp)
   24798:	100b883a 	mov	r5,r2
   2479c:	e13ffd17 	ldw	r4,-12(fp)
   247a0:	00243c40 	call	243c4 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   247a4:	e0bffd17 	ldw	r2,-12(fp)
   247a8:	10800a17 	ldw	r2,40(r2)
   247ac:	10800044 	addi	r2,r2,1
   247b0:	1007883a 	mov	r3,r2
   247b4:	00800084 	movi	r2,2
   247b8:	18800025 	stbio	r2,0(r3)
	return 0;
   247bc:	0005883a 	mov	r2,zero
}
   247c0:	e037883a 	mov	sp,fp
   247c4:	dfc00117 	ldw	ra,4(sp)
   247c8:	df000017 	ldw	fp,0(sp)
   247cc:	dec00204 	addi	sp,sp,8
   247d0:	f800283a 	ret

000247d4 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   247d4:	defffd04 	addi	sp,sp,-12
   247d8:	dfc00215 	stw	ra,8(sp)
   247dc:	df000115 	stw	fp,4(sp)
   247e0:	df000104 	addi	fp,sp,4
   247e4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   247e8:	01400304 	movi	r5,12
   247ec:	e13fff17 	ldw	r4,-4(fp)
   247f0:	00243c40 	call	243c4 <alt_up_character_lcd_send_cmd>
}
   247f4:	0001883a 	nop
   247f8:	e037883a 	mov	sp,fp
   247fc:	dfc00117 	ldw	ra,4(sp)
   24800:	df000017 	ldw	fp,0(sp)
   24804:	dec00204 	addi	sp,sp,8
   24808:	f800283a 	ret

0002480c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   2480c:	defffd04 	addi	sp,sp,-12
   24810:	dfc00215 	stw	ra,8(sp)
   24814:	df000115 	stw	fp,4(sp)
   24818:	df000104 	addi	fp,sp,4
   2481c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   24820:	014003c4 	movi	r5,15
   24824:	e13fff17 	ldw	r4,-4(fp)
   24828:	00243c40 	call	243c4 <alt_up_character_lcd_send_cmd>
}
   2482c:	0001883a 	nop
   24830:	e037883a 	mov	sp,fp
   24834:	dfc00117 	ldw	ra,4(sp)
   24838:	df000017 	ldw	fp,0(sp)
   2483c:	dec00204 	addi	sp,sp,8
   24840:	f800283a 	ret

00024844 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   24844:	defffd04 	addi	sp,sp,-12
   24848:	df000215 	stw	fp,8(sp)
   2484c:	df000204 	addi	fp,sp,8
   24850:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   24854:	e0bfff17 	ldw	r2,-4(fp)
   24858:	10800a17 	ldw	r2,40(r2)
   2485c:	10800104 	addi	r2,r2,4
   24860:	10800037 	ldwio	r2,0(r2)
   24864:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   24868:	e0bffe17 	ldw	r2,-8(fp)
   2486c:	10800054 	ori	r2,r2,1
   24870:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   24874:	e0bfff17 	ldw	r2,-4(fp)
   24878:	10800a17 	ldw	r2,40(r2)
   2487c:	10800104 	addi	r2,r2,4
   24880:	1007883a 	mov	r3,r2
   24884:	e0bffe17 	ldw	r2,-8(fp)
   24888:	18800035 	stwio	r2,0(r3)
}
   2488c:	0001883a 	nop
   24890:	e037883a 	mov	sp,fp
   24894:	df000017 	ldw	fp,0(sp)
   24898:	dec00104 	addi	sp,sp,4
   2489c:	f800283a 	ret

000248a0 <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   248a0:	defffd04 	addi	sp,sp,-12
   248a4:	df000215 	stw	fp,8(sp)
   248a8:	df000204 	addi	fp,sp,8
   248ac:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   248b0:	e0bfff17 	ldw	r2,-4(fp)
   248b4:	10800a17 	ldw	r2,40(r2)
   248b8:	10800104 	addi	r2,r2,4
   248bc:	10800037 	ldwio	r2,0(r2)
   248c0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   248c4:	e0fffe17 	ldw	r3,-8(fp)
   248c8:	00bfff84 	movi	r2,-2
   248cc:	1884703a 	and	r2,r3,r2
   248d0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   248d4:	e0bfff17 	ldw	r2,-4(fp)
   248d8:	10800a17 	ldw	r2,40(r2)
   248dc:	10800104 	addi	r2,r2,4
   248e0:	1007883a 	mov	r3,r2
   248e4:	e0bffe17 	ldw	r2,-8(fp)
   248e8:	18800035 	stwio	r2,0(r3)
}
   248ec:	0001883a 	nop
   248f0:	e037883a 	mov	sp,fp
   248f4:	df000017 	ldw	fp,0(sp)
   248f8:	dec00104 	addi	sp,sp,4
   248fc:	f800283a 	ret

00024900 <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   24900:	defffd04 	addi	sp,sp,-12
   24904:	df000215 	stw	fp,8(sp)
   24908:	df000204 	addi	fp,sp,8
   2490c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   24910:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   24914:	e0bfff17 	ldw	r2,-4(fp)
   24918:	10800a17 	ldw	r2,40(r2)
   2491c:	10800084 	addi	r2,r2,2
   24920:	1080002b 	ldhuio	r2,0(r2)
   24924:	10bfffcc 	andi	r2,r2,65535
   24928:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   2492c:	e0bffe0b 	ldhu	r2,-8(fp)
}
   24930:	e037883a 	mov	sp,fp
   24934:	df000017 	ldw	fp,0(sp)
   24938:	dec00104 	addi	sp,sp,4
   2493c:	f800283a 	ret

00024940 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   24940:	defffd04 	addi	sp,sp,-12
   24944:	df000215 	stw	fp,8(sp)
   24948:	df000204 	addi	fp,sp,8
   2494c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   24950:	e0bfff17 	ldw	r2,-4(fp)
   24954:	10800a17 	ldw	r2,40(r2)
   24958:	10800104 	addi	r2,r2,4
   2495c:	10800037 	ldwio	r2,0(r2)
   24960:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   24964:	e0bffe17 	ldw	r2,-8(fp)
   24968:	1004d43a 	srli	r2,r2,16
}
   2496c:	e037883a 	mov	sp,fp
   24970:	df000017 	ldw	fp,0(sp)
   24974:	dec00104 	addi	sp,sp,4
   24978:	f800283a 	ret

0002497c <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   2497c:	defffd04 	addi	sp,sp,-12
   24980:	df000215 	stw	fp,8(sp)
   24984:	df000204 	addi	fp,sp,8
   24988:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   2498c:	e0bfff17 	ldw	r2,-4(fp)
   24990:	1080800c 	andi	r2,r2,512
   24994:	1004d27a 	srli	r2,r2,9
   24998:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   2499c:	e0bffe17 	ldw	r2,-8(fp)
   249a0:	10000226 	beq	r2,zero,249ac <alt_up_irda_check_parity+0x30>
   249a4:	00bfffc4 	movi	r2,-1
   249a8:	00000106 	br	249b0 <alt_up_irda_check_parity+0x34>
   249ac:	0005883a 	mov	r2,zero
}
   249b0:	e037883a 	mov	sp,fp
   249b4:	df000017 	ldw	fp,0(sp)
   249b8:	dec00104 	addi	sp,sp,4
   249bc:	f800283a 	ret

000249c0 <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   249c0:	defffd04 	addi	sp,sp,-12
   249c4:	df000215 	stw	fp,8(sp)
   249c8:	df000204 	addi	fp,sp,8
   249cc:	e13ffe15 	stw	r4,-8(fp)
   249d0:	2805883a 	mov	r2,r5
   249d4:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   249d8:	e0bffe17 	ldw	r2,-8(fp)
   249dc:	10800a17 	ldw	r2,40(r2)
   249e0:	1007883a 	mov	r3,r2
   249e4:	e0bfff03 	ldbu	r2,-4(fp)
   249e8:	18800035 	stwio	r2,0(r3)
	return 0;
   249ec:	0005883a 	mov	r2,zero
}
   249f0:	e037883a 	mov	sp,fp
   249f4:	df000017 	ldw	fp,0(sp)
   249f8:	dec00104 	addi	sp,sp,4
   249fc:	f800283a 	ret

00024a00 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   24a00:	defffa04 	addi	sp,sp,-24
   24a04:	dfc00515 	stw	ra,20(sp)
   24a08:	df000415 	stw	fp,16(sp)
   24a0c:	df000404 	addi	fp,sp,16
   24a10:	e13ffd15 	stw	r4,-12(fp)
   24a14:	e17ffe15 	stw	r5,-8(fp)
   24a18:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   24a1c:	e0bffd17 	ldw	r2,-12(fp)
   24a20:	10800a17 	ldw	r2,40(r2)
   24a24:	10800037 	ldwio	r2,0(r2)
   24a28:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   24a2c:	e0bffc17 	ldw	r2,-16(fp)
   24a30:	1007883a 	mov	r3,r2
   24a34:	e0bffe17 	ldw	r2,-8(fp)
   24a38:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   24a3c:	e13ffc17 	ldw	r4,-16(fp)
   24a40:	002497c0 	call	2497c <alt_up_irda_check_parity>
   24a44:	1007883a 	mov	r3,r2
   24a48:	e0bfff17 	ldw	r2,-4(fp)
   24a4c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   24a50:	e0bffc17 	ldw	r2,-16(fp)
   24a54:	10a0000c 	andi	r2,r2,32768
   24a58:	1004d3fa 	srli	r2,r2,15
   24a5c:	10bfffc4 	addi	r2,r2,-1
}
   24a60:	e037883a 	mov	sp,fp
   24a64:	dfc00117 	ldw	ra,4(sp)
   24a68:	df000017 	ldw	fp,0(sp)
   24a6c:	dec00204 	addi	sp,sp,8
   24a70:	f800283a 	ret

00024a74 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   24a74:	defff804 	addi	sp,sp,-32
   24a78:	dfc00715 	stw	ra,28(sp)
   24a7c:	df000615 	stw	fp,24(sp)
   24a80:	df000604 	addi	fp,sp,24
   24a84:	e13ffd15 	stw	r4,-12(fp)
   24a88:	e17ffe15 	stw	r5,-8(fp)
   24a8c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   24a90:	e0bffd17 	ldw	r2,-12(fp)
   24a94:	10800017 	ldw	r2,0(r2)
   24a98:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   24a9c:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   24aa0:	00000c06 	br	24ad4 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   24aa4:	e0bffe17 	ldw	r2,-8(fp)
   24aa8:	10c00044 	addi	r3,r2,1
   24aac:	e0fffe15 	stw	r3,-8(fp)
   24ab0:	e0fffc04 	addi	r3,fp,-16
   24ab4:	180d883a 	mov	r6,r3
   24ab8:	100b883a 	mov	r5,r2
   24abc:	e13ffb17 	ldw	r4,-20(fp)
   24ac0:	0024a000 	call	24a00 <alt_up_irda_read_data>
   24ac4:	1000081e 	bne	r2,zero,24ae8 <alt_up_irda_read_fd+0x74>
			count++;
   24ac8:	e0bffa17 	ldw	r2,-24(fp)
   24acc:	10800044 	addi	r2,r2,1
   24ad0:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   24ad4:	e0bfff17 	ldw	r2,-4(fp)
   24ad8:	10ffffc4 	addi	r3,r2,-1
   24adc:	e0ffff15 	stw	r3,-4(fp)
   24ae0:	103ff01e 	bne	r2,zero,24aa4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7024aa4>
   24ae4:	00000106 	br	24aec <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   24ae8:	0001883a 	nop
	}
	return count;
   24aec:	e0bffa17 	ldw	r2,-24(fp)
}
   24af0:	e037883a 	mov	sp,fp
   24af4:	dfc00117 	ldw	ra,4(sp)
   24af8:	df000017 	ldw	fp,0(sp)
   24afc:	dec00204 	addi	sp,sp,8
   24b00:	f800283a 	ret

00024b04 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   24b04:	defff904 	addi	sp,sp,-28
   24b08:	dfc00615 	stw	ra,24(sp)
   24b0c:	df000515 	stw	fp,20(sp)
   24b10:	df000504 	addi	fp,sp,20
   24b14:	e13ffd15 	stw	r4,-12(fp)
   24b18:	e17ffe15 	stw	r5,-8(fp)
   24b1c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   24b20:	e0bffd17 	ldw	r2,-12(fp)
   24b24:	10800017 	ldw	r2,0(r2)
   24b28:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   24b2c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   24b30:	00000c06 	br	24b64 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   24b34:	e0bffe17 	ldw	r2,-8(fp)
   24b38:	10c00044 	addi	r3,r2,1
   24b3c:	e0fffe15 	stw	r3,-8(fp)
   24b40:	10800003 	ldbu	r2,0(r2)
   24b44:	10803fcc 	andi	r2,r2,255
   24b48:	100b883a 	mov	r5,r2
   24b4c:	e13ffc17 	ldw	r4,-16(fp)
   24b50:	00249c00 	call	249c0 <alt_up_irda_write_data>
   24b54:	1000081e 	bne	r2,zero,24b78 <alt_up_irda_write_fd+0x74>
			count++;
   24b58:	e0bffb17 	ldw	r2,-20(fp)
   24b5c:	10800044 	addi	r2,r2,1
   24b60:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   24b64:	e0bfff17 	ldw	r2,-4(fp)
   24b68:	10ffffc4 	addi	r3,r2,-1
   24b6c:	e0ffff15 	stw	r3,-4(fp)
   24b70:	103ff01e 	bne	r2,zero,24b34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7024b34>
   24b74:	00000106 	br	24b7c <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
   24b78:	0001883a 	nop
	}
	return count;
   24b7c:	e0bffb17 	ldw	r2,-20(fp)
}
   24b80:	e037883a 	mov	sp,fp
   24b84:	dfc00117 	ldw	ra,4(sp)
   24b88:	df000017 	ldw	fp,0(sp)
   24b8c:	dec00204 	addi	sp,sp,8
   24b90:	f800283a 	ret

00024b94 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   24b94:	defffc04 	addi	sp,sp,-16
   24b98:	dfc00315 	stw	ra,12(sp)
   24b9c:	df000215 	stw	fp,8(sp)
   24ba0:	df000204 	addi	fp,sp,8
   24ba4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   24ba8:	d1602104 	addi	r5,gp,-32636
   24bac:	e13fff17 	ldw	r4,-4(fp)
   24bb0:	00258fc0 	call	258fc <alt_find_dev>
   24bb4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   24bb8:	e0bffe17 	ldw	r2,-8(fp)
}
   24bbc:	e037883a 	mov	sp,fp
   24bc0:	dfc00117 	ldw	ra,4(sp)
   24bc4:	df000017 	ldw	fp,0(sp)
   24bc8:	dec00204 	addi	sp,sp,8
   24bcc:	f800283a 	ret

00024bd0 <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   24bd0:	defffd04 	addi	sp,sp,-12
   24bd4:	df000215 	stw	fp,8(sp)
   24bd8:	df000204 	addi	fp,sp,8
   24bdc:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   24be0:	e0bfff17 	ldw	r2,-4(fp)
   24be4:	1080400c 	andi	r2,r2,256
   24be8:	1004d23a 	srli	r2,r2,8
   24bec:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   24bf0:	e0bffe03 	ldbu	r2,-8(fp)
}
   24bf4:	e037883a 	mov	sp,fp
   24bf8:	df000017 	ldw	fp,0(sp)
   24bfc:	dec00104 	addi	sp,sp,4
   24c00:	f800283a 	ret

00024c04 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   24c04:	defffd04 	addi	sp,sp,-12
   24c08:	df000215 	stw	fp,8(sp)
   24c0c:	df000204 	addi	fp,sp,8
   24c10:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   24c14:	e0bfff17 	ldw	r2,-4(fp)
   24c18:	1080004c 	andi	r2,r2,1
   24c1c:	e0bffe05 	stb	r2,-8(fp)
	return re;
   24c20:	e0bffe03 	ldbu	r2,-8(fp)
}
   24c24:	e037883a 	mov	sp,fp
   24c28:	df000017 	ldw	fp,0(sp)
   24c2c:	dec00104 	addi	sp,sp,4
   24c30:	f800283a 	ret

00024c34 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   24c34:	defffd04 	addi	sp,sp,-12
   24c38:	df000215 	stw	fp,8(sp)
   24c3c:	df000204 	addi	fp,sp,8
   24c40:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   24c44:	e0bfff17 	ldw	r2,-4(fp)
   24c48:	1081000c 	andi	r2,r2,1024
   24c4c:	1004d2ba 	srli	r2,r2,10
   24c50:	e0bffe05 	stb	r2,-8(fp)
	return re;
   24c54:	e0bffe03 	ldbu	r2,-8(fp)
}
   24c58:	e037883a 	mov	sp,fp
   24c5c:	df000017 	ldw	fp,0(sp)
   24c60:	dec00104 	addi	sp,sp,4
   24c64:	f800283a 	ret

00024c68 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   24c68:	defffd04 	addi	sp,sp,-12
   24c6c:	df000215 	stw	fp,8(sp)
   24c70:	df000204 	addi	fp,sp,8
   24c74:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   24c78:	e0bfff17 	ldw	r2,-4(fp)
   24c7c:	1004d43a 	srli	r2,r2,16
   24c80:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   24c84:	e0bffe0b 	ldhu	r2,-8(fp)
}
   24c88:	e037883a 	mov	sp,fp
   24c8c:	df000017 	ldw	fp,0(sp)
   24c90:	dec00104 	addi	sp,sp,4
   24c94:	f800283a 	ret

00024c98 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   24c98:	defffd04 	addi	sp,sp,-12
   24c9c:	df000215 	stw	fp,8(sp)
   24ca0:	df000204 	addi	fp,sp,8
   24ca4:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   24ca8:	e0bfff17 	ldw	r2,-4(fp)
   24cac:	10a0000c 	andi	r2,r2,32768
   24cb0:	1004d3fa 	srli	r2,r2,15
   24cb4:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   24cb8:	e0bffe03 	ldbu	r2,-8(fp)
}
   24cbc:	e037883a 	mov	sp,fp
   24cc0:	df000017 	ldw	fp,0(sp)
   24cc4:	dec00104 	addi	sp,sp,4
   24cc8:	f800283a 	ret

00024ccc <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   24ccc:	defffd04 	addi	sp,sp,-12
   24cd0:	df000215 	stw	fp,8(sp)
   24cd4:	df000204 	addi	fp,sp,8
   24cd8:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   24cdc:	e0bfff17 	ldw	r2,-4(fp)
   24ce0:	e0bffe05 	stb	r2,-8(fp)
	return data;
   24ce4:	e0bffe03 	ldbu	r2,-8(fp)
}
   24ce8:	e037883a 	mov	sp,fp
   24cec:	df000017 	ldw	fp,0(sp)
   24cf0:	dec00104 	addi	sp,sp,4
   24cf4:	f800283a 	ret

00024cf8 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   24cf8:	defffb04 	addi	sp,sp,-20
   24cfc:	dfc00415 	stw	ra,16(sp)
   24d00:	df000315 	stw	fp,12(sp)
   24d04:	df000304 	addi	fp,sp,12
   24d08:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   24d0c:	01403fc4 	movi	r5,255
   24d10:	e13fff17 	ldw	r4,-4(fp)
   24d14:	0024f580 	call	24f58 <alt_up_ps2_write_data_byte_with_ack>
   24d18:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   24d1c:	e0bffd17 	ldw	r2,-12(fp)
   24d20:	1000211e 	bne	r2,zero,24da8 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   24d24:	e0bffe04 	addi	r2,fp,-8
   24d28:	100b883a 	mov	r5,r2
   24d2c:	e13fff17 	ldw	r4,-4(fp)
   24d30:	0024fbc0 	call	24fbc <alt_up_ps2_read_data_byte_timeout>
   24d34:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   24d38:	e0bffd17 	ldw	r2,-12(fp)
   24d3c:	10001a1e 	bne	r2,zero,24da8 <alt_up_ps2_init+0xb0>
   24d40:	e0bffe03 	ldbu	r2,-8(fp)
   24d44:	10803fcc 	andi	r2,r2,255
   24d48:	10802a98 	cmpnei	r2,r2,170
   24d4c:	1000161e 	bne	r2,zero,24da8 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   24d50:	e0bffe04 	addi	r2,fp,-8
   24d54:	100b883a 	mov	r5,r2
   24d58:	e13fff17 	ldw	r4,-4(fp)
   24d5c:	0024fbc0 	call	24fbc <alt_up_ps2_read_data_byte_timeout>
   24d60:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   24d64:	e0bffd17 	ldw	r2,-12(fp)
   24d68:	10bfe318 	cmpnei	r2,r2,-116
   24d6c:	1000041e 	bne	r2,zero,24d80 <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   24d70:	e0bfff17 	ldw	r2,-4(fp)
   24d74:	00c00044 	movi	r3,1
   24d78:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
   24d7c:	00000a06 	br	24da8 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
   24d80:	e0bffd17 	ldw	r2,-12(fp)
   24d84:	1000081e 	bne	r2,zero,24da8 <alt_up_ps2_init+0xb0>
   24d88:	e0bffe03 	ldbu	r2,-8(fp)
   24d8c:	10803fcc 	andi	r2,r2,255
   24d90:	1000051e 	bne	r2,zero,24da8 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   24d94:	e0bfff17 	ldw	r2,-4(fp)
   24d98:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   24d9c:	01403d04 	movi	r5,244
   24da0:	e13fff17 	ldw	r4,-4(fp)
   24da4:	0024e7c0 	call	24e7c <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   24da8:	0001883a 	nop
   24dac:	e037883a 	mov	sp,fp
   24db0:	dfc00117 	ldw	ra,4(sp)
   24db4:	df000017 	ldw	fp,0(sp)
   24db8:	dec00204 	addi	sp,sp,8
   24dbc:	f800283a 	ret

00024dc0 <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   24dc0:	defffd04 	addi	sp,sp,-12
   24dc4:	df000215 	stw	fp,8(sp)
   24dc8:	df000204 	addi	fp,sp,8
   24dcc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   24dd0:	e0bfff17 	ldw	r2,-4(fp)
   24dd4:	10800a17 	ldw	r2,40(r2)
   24dd8:	10800104 	addi	r2,r2,4
   24ddc:	10800037 	ldwio	r2,0(r2)
   24de0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   24de4:	e0bffe17 	ldw	r2,-8(fp)
   24de8:	10800054 	ori	r2,r2,1
   24dec:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   24df0:	e0bfff17 	ldw	r2,-4(fp)
   24df4:	10800a17 	ldw	r2,40(r2)
   24df8:	10800104 	addi	r2,r2,4
   24dfc:	1007883a 	mov	r3,r2
   24e00:	e0bffe17 	ldw	r2,-8(fp)
   24e04:	18800035 	stwio	r2,0(r3)
}
   24e08:	0001883a 	nop
   24e0c:	e037883a 	mov	sp,fp
   24e10:	df000017 	ldw	fp,0(sp)
   24e14:	dec00104 	addi	sp,sp,4
   24e18:	f800283a 	ret

00024e1c <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   24e1c:	defffd04 	addi	sp,sp,-12
   24e20:	df000215 	stw	fp,8(sp)
   24e24:	df000204 	addi	fp,sp,8
   24e28:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   24e2c:	e0bfff17 	ldw	r2,-4(fp)
   24e30:	10800a17 	ldw	r2,40(r2)
   24e34:	10800104 	addi	r2,r2,4
   24e38:	10800037 	ldwio	r2,0(r2)
   24e3c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   24e40:	e0fffe17 	ldw	r3,-8(fp)
   24e44:	00bfff84 	movi	r2,-2
   24e48:	1884703a 	and	r2,r3,r2
   24e4c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   24e50:	e0bfff17 	ldw	r2,-4(fp)
   24e54:	10800a17 	ldw	r2,40(r2)
   24e58:	10800104 	addi	r2,r2,4
   24e5c:	1007883a 	mov	r3,r2
   24e60:	e0bffe17 	ldw	r2,-8(fp)
   24e64:	18800035 	stwio	r2,0(r3)
}
   24e68:	0001883a 	nop
   24e6c:	e037883a 	mov	sp,fp
   24e70:	df000017 	ldw	fp,0(sp)
   24e74:	dec00104 	addi	sp,sp,4
   24e78:	f800283a 	ret

00024e7c <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   24e7c:	defffb04 	addi	sp,sp,-20
   24e80:	dfc00415 	stw	ra,16(sp)
   24e84:	df000315 	stw	fp,12(sp)
   24e88:	df000304 	addi	fp,sp,12
   24e8c:	e13ffe15 	stw	r4,-8(fp)
   24e90:	2805883a 	mov	r2,r5
   24e94:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   24e98:	e0bffe17 	ldw	r2,-8(fp)
   24e9c:	10800a17 	ldw	r2,40(r2)
   24ea0:	1007883a 	mov	r3,r2
   24ea4:	e0bfff03 	ldbu	r2,-4(fp)
   24ea8:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   24eac:	e0bffe17 	ldw	r2,-8(fp)
   24eb0:	10800a17 	ldw	r2,40(r2)
   24eb4:	10800104 	addi	r2,r2,4
   24eb8:	10800037 	ldwio	r2,0(r2)
   24ebc:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   24ec0:	e13ffd17 	ldw	r4,-12(fp)
   24ec4:	0024c340 	call	24c34 <read_CE_bit>
   24ec8:	10803fcc 	andi	r2,r2,255
   24ecc:	10000226 	beq	r2,zero,24ed8 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   24ed0:	00bffec4 	movi	r2,-5
   24ed4:	00000106 	br	24edc <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   24ed8:	0005883a 	mov	r2,zero
}
   24edc:	e037883a 	mov	sp,fp
   24ee0:	dfc00117 	ldw	ra,4(sp)
   24ee4:	df000017 	ldw	fp,0(sp)
   24ee8:	dec00204 	addi	sp,sp,8
   24eec:	f800283a 	ret

00024ef0 <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   24ef0:	defffc04 	addi	sp,sp,-16
   24ef4:	dfc00315 	stw	ra,12(sp)
   24ef8:	df000215 	stw	fp,8(sp)
   24efc:	df000204 	addi	fp,sp,8
   24f00:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   24f04:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   24f08:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   24f0c:	e0bffe44 	addi	r2,fp,-7
   24f10:	100b883a 	mov	r5,r2
   24f14:	e13fff17 	ldw	r4,-4(fp)
   24f18:	0024fbc0 	call	24fbc <alt_up_ps2_read_data_byte_timeout>
   24f1c:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   24f20:	e0bffe03 	ldbu	r2,-8(fp)
   24f24:	1000061e 	bne	r2,zero,24f40 <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   24f28:	e0bffe43 	ldbu	r2,-7(fp)
   24f2c:	10803fcc 	andi	r2,r2,255
   24f30:	10803e98 	cmpnei	r2,r2,250
   24f34:	103ff51e 	bne	r2,zero,24f0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7024f0c>
				return 0;
   24f38:	0005883a 	mov	r2,zero
   24f3c:	00000106 	br	24f44 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
   24f40:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   24f44:	e037883a 	mov	sp,fp
   24f48:	dfc00117 	ldw	ra,4(sp)
   24f4c:	df000017 	ldw	fp,0(sp)
   24f50:	dec00204 	addi	sp,sp,8
   24f54:	f800283a 	ret

00024f58 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   24f58:	defffa04 	addi	sp,sp,-24
   24f5c:	dfc00515 	stw	ra,20(sp)
   24f60:	df000415 	stw	fp,16(sp)
   24f64:	df000404 	addi	fp,sp,16
   24f68:	e13ffe15 	stw	r4,-8(fp)
   24f6c:	2805883a 	mov	r2,r5
   24f70:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   24f74:	e0bfff03 	ldbu	r2,-4(fp)
   24f78:	100b883a 	mov	r5,r2
   24f7c:	e13ffe17 	ldw	r4,-8(fp)
   24f80:	0024e7c0 	call	24e7c <alt_up_ps2_write_data_byte>
   24f84:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   24f88:	e0bffc17 	ldw	r2,-16(fp)
   24f8c:	10000226 	beq	r2,zero,24f98 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   24f90:	e0bffc17 	ldw	r2,-16(fp)
   24f94:	00000406 	br	24fa8 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   24f98:	e13ffe17 	ldw	r4,-8(fp)
   24f9c:	0024ef00 	call	24ef0 <alt_up_ps2_wait_for_ack>
   24fa0:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   24fa4:	e0bffd17 	ldw	r2,-12(fp)
}
   24fa8:	e037883a 	mov	sp,fp
   24fac:	dfc00117 	ldw	ra,4(sp)
   24fb0:	df000017 	ldw	fp,0(sp)
   24fb4:	dec00204 	addi	sp,sp,8
   24fb8:	f800283a 	ret

00024fbc <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   24fbc:	defffa04 	addi	sp,sp,-24
   24fc0:	dfc00515 	stw	ra,20(sp)
   24fc4:	df000415 	stw	fp,16(sp)
   24fc8:	df000404 	addi	fp,sp,16
   24fcc:	e13ffe15 	stw	r4,-8(fp)
   24fd0:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   24fd4:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   24fd8:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   24fdc:	e0bffc17 	ldw	r2,-16(fp)
   24fe0:	10800044 	addi	r2,r2,1
   24fe4:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   24fe8:	e0bffe17 	ldw	r2,-8(fp)
   24fec:	10800a17 	ldw	r2,40(r2)
   24ff0:	10800037 	ldwio	r2,0(r2)
   24ff4:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   24ff8:	e13ffd17 	ldw	r4,-12(fp)
   24ffc:	0024c980 	call	24c98 <read_data_valid>
   25000:	10803fcc 	andi	r2,r2,255
   25004:	10000726 	beq	r2,zero,25024 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   25008:	e13ffd17 	ldw	r4,-12(fp)
   2500c:	0024ccc0 	call	24ccc <read_data_byte>
   25010:	1007883a 	mov	r3,r2
   25014:	e0bfff17 	ldw	r2,-4(fp)
   25018:	10c00005 	stb	r3,0(r2)
			return 0;
   2501c:	0005883a 	mov	r2,zero
   25020:	00000806 	br	25044 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   25024:	e0bffe17 	ldw	r2,-8(fp)
   25028:	10800c17 	ldw	r2,48(r2)
   2502c:	103feb26 	beq	r2,zero,24fdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7024fdc>
   25030:	e0bffe17 	ldw	r2,-8(fp)
   25034:	10c00c17 	ldw	r3,48(r2)
   25038:	e0bffc17 	ldw	r2,-16(fp)
   2503c:	18bfe72e 	bgeu	r3,r2,24fdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7024fdc>
		{
			return -ETIMEDOUT;
   25040:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
   25044:	e037883a 	mov	sp,fp
   25048:	dfc00117 	ldw	ra,4(sp)
   2504c:	df000017 	ldw	fp,0(sp)
   25050:	dec00204 	addi	sp,sp,8
   25054:	f800283a 	ret

00025058 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   25058:	defffb04 	addi	sp,sp,-20
   2505c:	dfc00415 	stw	ra,16(sp)
   25060:	df000315 	stw	fp,12(sp)
   25064:	df000304 	addi	fp,sp,12
   25068:	e13ffe15 	stw	r4,-8(fp)
   2506c:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   25070:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   25074:	e0bffe17 	ldw	r2,-8(fp)
   25078:	10800a17 	ldw	r2,40(r2)
   2507c:	10800037 	ldwio	r2,0(r2)
   25080:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   25084:	e13ffd17 	ldw	r4,-12(fp)
   25088:	0024c980 	call	24c98 <read_data_valid>
   2508c:	10803fcc 	andi	r2,r2,255
   25090:	10000726 	beq	r2,zero,250b0 <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   25094:	e13ffd17 	ldw	r4,-12(fp)
   25098:	0024ccc0 	call	24ccc <read_data_byte>
   2509c:	1007883a 	mov	r3,r2
   250a0:	e0bfff17 	ldw	r2,-4(fp)
   250a4:	10c00005 	stb	r3,0(r2)
		return 0;
   250a8:	0005883a 	mov	r2,zero
   250ac:	00000106 	br	250b4 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   250b0:	00bfffc4 	movi	r2,-1
}
   250b4:	e037883a 	mov	sp,fp
   250b8:	dfc00117 	ldw	ra,4(sp)
   250bc:	df000017 	ldw	fp,0(sp)
   250c0:	dec00204 	addi	sp,sp,8
   250c4:	f800283a 	ret

000250c8 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   250c8:	defffb04 	addi	sp,sp,-20
   250cc:	dfc00415 	stw	ra,16(sp)
   250d0:	df000315 	stw	fp,12(sp)
   250d4:	df000304 	addi	fp,sp,12
   250d8:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   250dc:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   250e0:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   250e4:	e0bfff17 	ldw	r2,-4(fp)
   250e8:	10800a17 	ldw	r2,40(r2)
   250ec:	10800037 	ldwio	r2,0(r2)
   250f0:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   250f4:	e13ffe17 	ldw	r4,-8(fp)
   250f8:	0024c680 	call	24c68 <read_num_bytes_available>
   250fc:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   25100:	e0bffd0b 	ldhu	r2,-12(fp)
   25104:	103ff71e 	bne	r2,zero,250e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70250e4>
}
   25108:	0001883a 	nop
   2510c:	e037883a 	mov	sp,fp
   25110:	dfc00117 	ldw	ra,4(sp)
   25114:	df000017 	ldw	fp,0(sp)
   25118:	dec00204 	addi	sp,sp,8
   2511c:	f800283a 	ret

00025120 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   25120:	defff804 	addi	sp,sp,-32
   25124:	dfc00715 	stw	ra,28(sp)
   25128:	df000615 	stw	fp,24(sp)
   2512c:	df000604 	addi	fp,sp,24
   25130:	e13ffd15 	stw	r4,-12(fp)
   25134:	e17ffe15 	stw	r5,-8(fp)
   25138:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   2513c:	e0bffd17 	ldw	r2,-12(fp)
   25140:	10800017 	ldw	r2,0(r2)
   25144:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   25148:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   2514c:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   25150:	e0fffc17 	ldw	r3,-16(fp)
   25154:	e0bfff17 	ldw	r2,-4(fp)
   25158:	18bffd16 	blt	r3,r2,25150 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7025150>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   2515c:	e0bffe17 	ldw	r2,-8(fp)
   25160:	10c00044 	addi	r3,r2,1
   25164:	e0fffe15 	stw	r3,-8(fp)
   25168:	100b883a 	mov	r5,r2
   2516c:	e13ffa17 	ldw	r4,-24(fp)
   25170:	0024fbc0 	call	24fbc <alt_up_ps2_read_data_byte_timeout>
   25174:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   25178:	e0bffb17 	ldw	r2,-20(fp)
   2517c:	10000226 	beq	r2,zero,25188 <alt_up_ps2_read_fd+0x68>
			return count;
   25180:	e0bffc17 	ldw	r2,-16(fp)
   25184:	00000406 	br	25198 <alt_up_ps2_read_fd+0x78>
		count++;
   25188:	e0bffc17 	ldw	r2,-16(fp)
   2518c:	10800044 	addi	r2,r2,1
   25190:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   25194:	e0bffc17 	ldw	r2,-16(fp)
}
   25198:	e037883a 	mov	sp,fp
   2519c:	dfc00117 	ldw	ra,4(sp)
   251a0:	df000017 	ldw	fp,0(sp)
   251a4:	dec00204 	addi	sp,sp,8
   251a8:	f800283a 	ret

000251ac <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   251ac:	defff804 	addi	sp,sp,-32
   251b0:	dfc00715 	stw	ra,28(sp)
   251b4:	df000615 	stw	fp,24(sp)
   251b8:	df000604 	addi	fp,sp,24
   251bc:	e13ffd15 	stw	r4,-12(fp)
   251c0:	e17ffe15 	stw	r5,-8(fp)
   251c4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   251c8:	e0bffd17 	ldw	r2,-12(fp)
   251cc:	10800017 	ldw	r2,0(r2)
   251d0:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   251d4:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   251d8:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   251dc:	00001006 	br	25220 <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   251e0:	e0bffe17 	ldw	r2,-8(fp)
   251e4:	10c00044 	addi	r3,r2,1
   251e8:	e0fffe15 	stw	r3,-8(fp)
   251ec:	10800003 	ldbu	r2,0(r2)
   251f0:	10803fcc 	andi	r2,r2,255
   251f4:	100b883a 	mov	r5,r2
   251f8:	e13ffb17 	ldw	r4,-20(fp)
   251fc:	0024e7c0 	call	24e7c <alt_up_ps2_write_data_byte>
   25200:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   25204:	e0bffc17 	ldw	r2,-16(fp)
   25208:	10000226 	beq	r2,zero,25214 <alt_up_ps2_write_fd+0x68>
			return count;
   2520c:	e0bffa17 	ldw	r2,-24(fp)
   25210:	00000706 	br	25230 <alt_up_ps2_write_fd+0x84>
		count++;
   25214:	e0bffa17 	ldw	r2,-24(fp)
   25218:	10800044 	addi	r2,r2,1
   2521c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   25220:	e0fffa17 	ldw	r3,-24(fp)
   25224:	e0bfff17 	ldw	r2,-4(fp)
   25228:	18bfed16 	blt	r3,r2,251e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70251e0>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   2522c:	e0bffa17 	ldw	r2,-24(fp)
}
   25230:	e037883a 	mov	sp,fp
   25234:	dfc00117 	ldw	ra,4(sp)
   25238:	df000017 	ldw	fp,0(sp)
   2523c:	dec00204 	addi	sp,sp,8
   25240:	f800283a 	ret

00025244 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   25244:	defffc04 	addi	sp,sp,-16
   25248:	dfc00315 	stw	ra,12(sp)
   2524c:	df000215 	stw	fp,8(sp)
   25250:	df000204 	addi	fp,sp,8
   25254:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   25258:	d1602104 	addi	r5,gp,-32636
   2525c:	e13fff17 	ldw	r4,-4(fp)
   25260:	00258fc0 	call	258fc <alt_find_dev>
   25264:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   25268:	e0bffe17 	ldw	r2,-8(fp)
}
   2526c:	e037883a 	mov	sp,fp
   25270:	dfc00117 	ldw	ra,4(sp)
   25274:	df000017 	ldw	fp,0(sp)
   25278:	dec00204 	addi	sp,sp,8
   2527c:	f800283a 	ret

00025280 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   25280:	defffd04 	addi	sp,sp,-12
   25284:	df000215 	stw	fp,8(sp)
   25288:	df000204 	addi	fp,sp,8
   2528c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   25290:	e0bfff17 	ldw	r2,-4(fp)
   25294:	10800a17 	ldw	r2,40(r2)
   25298:	10800104 	addi	r2,r2,4
   2529c:	10800037 	ldwio	r2,0(r2)
   252a0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   252a4:	e0bffe17 	ldw	r2,-8(fp)
   252a8:	10800054 	ori	r2,r2,1
   252ac:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   252b0:	e0bfff17 	ldw	r2,-4(fp)
   252b4:	10800a17 	ldw	r2,40(r2)
   252b8:	10800104 	addi	r2,r2,4
   252bc:	1007883a 	mov	r3,r2
   252c0:	e0bffe17 	ldw	r2,-8(fp)
   252c4:	18800035 	stwio	r2,0(r3)
}
   252c8:	0001883a 	nop
   252cc:	e037883a 	mov	sp,fp
   252d0:	df000017 	ldw	fp,0(sp)
   252d4:	dec00104 	addi	sp,sp,4
   252d8:	f800283a 	ret

000252dc <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   252dc:	defffd04 	addi	sp,sp,-12
   252e0:	df000215 	stw	fp,8(sp)
   252e4:	df000204 	addi	fp,sp,8
   252e8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   252ec:	e0bfff17 	ldw	r2,-4(fp)
   252f0:	10800a17 	ldw	r2,40(r2)
   252f4:	10800104 	addi	r2,r2,4
   252f8:	10800037 	ldwio	r2,0(r2)
   252fc:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   25300:	e0fffe17 	ldw	r3,-8(fp)
   25304:	00bfff84 	movi	r2,-2
   25308:	1884703a 	and	r2,r3,r2
   2530c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   25310:	e0bfff17 	ldw	r2,-4(fp)
   25314:	10800a17 	ldw	r2,40(r2)
   25318:	10800104 	addi	r2,r2,4
   2531c:	1007883a 	mov	r3,r2
   25320:	e0bffe17 	ldw	r2,-8(fp)
   25324:	18800035 	stwio	r2,0(r3)
}
   25328:	0001883a 	nop
   2532c:	e037883a 	mov	sp,fp
   25330:	df000017 	ldw	fp,0(sp)
   25334:	dec00104 	addi	sp,sp,4
   25338:	f800283a 	ret

0002533c <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   2533c:	defffd04 	addi	sp,sp,-12
   25340:	df000215 	stw	fp,8(sp)
   25344:	df000204 	addi	fp,sp,8
   25348:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   2534c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   25350:	e0bfff17 	ldw	r2,-4(fp)
   25354:	10800a17 	ldw	r2,40(r2)
   25358:	10800084 	addi	r2,r2,2
   2535c:	1080002b 	ldhuio	r2,0(r2)
   25360:	10bfffcc 	andi	r2,r2,65535
   25364:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   25368:	e0bffe0b 	ldhu	r2,-8(fp)
}
   2536c:	e037883a 	mov	sp,fp
   25370:	df000017 	ldw	fp,0(sp)
   25374:	dec00104 	addi	sp,sp,4
   25378:	f800283a 	ret

0002537c <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   2537c:	defffd04 	addi	sp,sp,-12
   25380:	df000215 	stw	fp,8(sp)
   25384:	df000204 	addi	fp,sp,8
   25388:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   2538c:	e0bfff17 	ldw	r2,-4(fp)
   25390:	10800a17 	ldw	r2,40(r2)
   25394:	10800104 	addi	r2,r2,4
   25398:	10800037 	ldwio	r2,0(r2)
   2539c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   253a0:	e0bffe17 	ldw	r2,-8(fp)
   253a4:	1004d43a 	srli	r2,r2,16
}
   253a8:	e037883a 	mov	sp,fp
   253ac:	df000017 	ldw	fp,0(sp)
   253b0:	dec00104 	addi	sp,sp,4
   253b4:	f800283a 	ret

000253b8 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   253b8:	defffd04 	addi	sp,sp,-12
   253bc:	df000215 	stw	fp,8(sp)
   253c0:	df000204 	addi	fp,sp,8
   253c4:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   253c8:	e0bfff17 	ldw	r2,-4(fp)
   253cc:	1080800c 	andi	r2,r2,512
   253d0:	1004d27a 	srli	r2,r2,9
   253d4:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   253d8:	e0bffe17 	ldw	r2,-8(fp)
   253dc:	10000226 	beq	r2,zero,253e8 <alt_up_rs232_check_parity+0x30>
   253e0:	00bfffc4 	movi	r2,-1
   253e4:	00000106 	br	253ec <alt_up_rs232_check_parity+0x34>
   253e8:	0005883a 	mov	r2,zero
}
   253ec:	e037883a 	mov	sp,fp
   253f0:	df000017 	ldw	fp,0(sp)
   253f4:	dec00104 	addi	sp,sp,4
   253f8:	f800283a 	ret

000253fc <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   253fc:	defffd04 	addi	sp,sp,-12
   25400:	df000215 	stw	fp,8(sp)
   25404:	df000204 	addi	fp,sp,8
   25408:	e13ffe15 	stw	r4,-8(fp)
   2540c:	2805883a 	mov	r2,r5
   25410:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   25414:	e0bffe17 	ldw	r2,-8(fp)
   25418:	10800a17 	ldw	r2,40(r2)
   2541c:	1007883a 	mov	r3,r2
   25420:	e0bfff03 	ldbu	r2,-4(fp)
   25424:	18800035 	stwio	r2,0(r3)
	return 0;
   25428:	0005883a 	mov	r2,zero
}
   2542c:	e037883a 	mov	sp,fp
   25430:	df000017 	ldw	fp,0(sp)
   25434:	dec00104 	addi	sp,sp,4
   25438:	f800283a 	ret

0002543c <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   2543c:	defffa04 	addi	sp,sp,-24
   25440:	dfc00515 	stw	ra,20(sp)
   25444:	df000415 	stw	fp,16(sp)
   25448:	df000404 	addi	fp,sp,16
   2544c:	e13ffd15 	stw	r4,-12(fp)
   25450:	e17ffe15 	stw	r5,-8(fp)
   25454:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   25458:	e0bffd17 	ldw	r2,-12(fp)
   2545c:	10800a17 	ldw	r2,40(r2)
   25460:	10800037 	ldwio	r2,0(r2)
   25464:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   25468:	e0bffc17 	ldw	r2,-16(fp)
   2546c:	1007883a 	mov	r3,r2
   25470:	e0bffe17 	ldw	r2,-8(fp)
   25474:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   25478:	e13ffc17 	ldw	r4,-16(fp)
   2547c:	00253b80 	call	253b8 <alt_up_rs232_check_parity>
   25480:	1007883a 	mov	r3,r2
   25484:	e0bfff17 	ldw	r2,-4(fp)
   25488:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   2548c:	e0bffc17 	ldw	r2,-16(fp)
   25490:	10a0000c 	andi	r2,r2,32768
   25494:	1004d3fa 	srli	r2,r2,15
   25498:	10bfffc4 	addi	r2,r2,-1
}
   2549c:	e037883a 	mov	sp,fp
   254a0:	dfc00117 	ldw	ra,4(sp)
   254a4:	df000017 	ldw	fp,0(sp)
   254a8:	dec00204 	addi	sp,sp,8
   254ac:	f800283a 	ret

000254b0 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   254b0:	defff804 	addi	sp,sp,-32
   254b4:	dfc00715 	stw	ra,28(sp)
   254b8:	df000615 	stw	fp,24(sp)
   254bc:	df000604 	addi	fp,sp,24
   254c0:	e13ffd15 	stw	r4,-12(fp)
   254c4:	e17ffe15 	stw	r5,-8(fp)
   254c8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   254cc:	e0bffd17 	ldw	r2,-12(fp)
   254d0:	10800017 	ldw	r2,0(r2)
   254d4:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   254d8:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   254dc:	00000c06 	br	25510 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   254e0:	e0bffe17 	ldw	r2,-8(fp)
   254e4:	10c00044 	addi	r3,r2,1
   254e8:	e0fffe15 	stw	r3,-8(fp)
   254ec:	e0fffc04 	addi	r3,fp,-16
   254f0:	180d883a 	mov	r6,r3
   254f4:	100b883a 	mov	r5,r2
   254f8:	e13ffb17 	ldw	r4,-20(fp)
   254fc:	002543c0 	call	2543c <alt_up_rs232_read_data>
   25500:	1000081e 	bne	r2,zero,25524 <alt_up_rs232_read_fd+0x74>
			count++;
   25504:	e0bffa17 	ldw	r2,-24(fp)
   25508:	10800044 	addi	r2,r2,1
   2550c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   25510:	e0bfff17 	ldw	r2,-4(fp)
   25514:	10ffffc4 	addi	r3,r2,-1
   25518:	e0ffff15 	stw	r3,-4(fp)
   2551c:	103ff01e 	bne	r2,zero,254e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70254e0>
   25520:	00000106 	br	25528 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   25524:	0001883a 	nop
	}
	return count;
   25528:	e0bffa17 	ldw	r2,-24(fp)
}
   2552c:	e037883a 	mov	sp,fp
   25530:	dfc00117 	ldw	ra,4(sp)
   25534:	df000017 	ldw	fp,0(sp)
   25538:	dec00204 	addi	sp,sp,8
   2553c:	f800283a 	ret

00025540 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   25540:	defff904 	addi	sp,sp,-28
   25544:	dfc00615 	stw	ra,24(sp)
   25548:	df000515 	stw	fp,20(sp)
   2554c:	df000504 	addi	fp,sp,20
   25550:	e13ffd15 	stw	r4,-12(fp)
   25554:	e17ffe15 	stw	r5,-8(fp)
   25558:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   2555c:	e0bffd17 	ldw	r2,-12(fp)
   25560:	10800017 	ldw	r2,0(r2)
   25564:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   25568:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   2556c:	00000d06 	br	255a4 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   25570:	e0bffe17 	ldw	r2,-8(fp)
   25574:	10800003 	ldbu	r2,0(r2)
   25578:	10803fcc 	andi	r2,r2,255
   2557c:	100b883a 	mov	r5,r2
   25580:	e13ffc17 	ldw	r4,-16(fp)
   25584:	00253fc0 	call	253fc <alt_up_rs232_write_data>
   25588:	10000b1e 	bne	r2,zero,255b8 <alt_up_rs232_write_fd+0x78>
		{
			count++;
   2558c:	e0bffb17 	ldw	r2,-20(fp)
   25590:	10800044 	addi	r2,r2,1
   25594:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   25598:	e0bffe17 	ldw	r2,-8(fp)
   2559c:	10800044 	addi	r2,r2,1
   255a0:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   255a4:	e0bfff17 	ldw	r2,-4(fp)
   255a8:	10ffffc4 	addi	r3,r2,-1
   255ac:	e0ffff15 	stw	r3,-4(fp)
   255b0:	103fef1e 	bne	r2,zero,25570 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7025570>
   255b4:	00000106 	br	255bc <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
   255b8:	0001883a 	nop
	}
	return count;
   255bc:	e0bffb17 	ldw	r2,-20(fp)
}
   255c0:	e037883a 	mov	sp,fp
   255c4:	dfc00117 	ldw	ra,4(sp)
   255c8:	df000017 	ldw	fp,0(sp)
   255cc:	dec00204 	addi	sp,sp,8
   255d0:	f800283a 	ret

000255d4 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   255d4:	defffc04 	addi	sp,sp,-16
   255d8:	dfc00315 	stw	ra,12(sp)
   255dc:	df000215 	stw	fp,8(sp)
   255e0:	df000204 	addi	fp,sp,8
   255e4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   255e8:	d1602104 	addi	r5,gp,-32636
   255ec:	e13fff17 	ldw	r4,-4(fp)
   255f0:	00258fc0 	call	258fc <alt_find_dev>
   255f4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   255f8:	e0bffe17 	ldw	r2,-8(fp)
}
   255fc:	e037883a 	mov	sp,fp
   25600:	dfc00117 	ldw	ra,4(sp)
   25604:	df000017 	ldw	fp,0(sp)
   25608:	dec00204 	addi	sp,sp,8
   2560c:	f800283a 	ret

00025610 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   25610:	defff504 	addi	sp,sp,-44
   25614:	df000a15 	stw	fp,40(sp)
   25618:	df000a04 	addi	fp,sp,40
   2561c:	e13ffc15 	stw	r4,-16(fp)
   25620:	e17ffd15 	stw	r5,-12(fp)
   25624:	e1bffe15 	stw	r6,-8(fp)
   25628:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2562c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   25630:	d0a86217 	ldw	r2,-24184(gp)
  
  if (alt_ticks_per_second ())
   25634:	10003c26 	beq	r2,zero,25728 <alt_alarm_start+0x118>
  {
    if (alarm)
   25638:	e0bffc17 	ldw	r2,-16(fp)
   2563c:	10003826 	beq	r2,zero,25720 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   25640:	e0bffc17 	ldw	r2,-16(fp)
   25644:	e0fffe17 	ldw	r3,-8(fp)
   25648:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2564c:	e0bffc17 	ldw	r2,-16(fp)
   25650:	e0ffff17 	ldw	r3,-4(fp)
   25654:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25658:	0005303a 	rdctl	r2,status
   2565c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25660:	e0fff917 	ldw	r3,-28(fp)
   25664:	00bfff84 	movi	r2,-2
   25668:	1884703a 	and	r2,r3,r2
   2566c:	1001703a 	wrctl	status,r2
  
  return context;
   25670:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   25674:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   25678:	d0a86317 	ldw	r2,-24180(gp)
      
      current_nticks = alt_nticks();
   2567c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   25680:	e0fffd17 	ldw	r3,-12(fp)
   25684:	e0bff617 	ldw	r2,-40(fp)
   25688:	1885883a 	add	r2,r3,r2
   2568c:	10c00044 	addi	r3,r2,1
   25690:	e0bffc17 	ldw	r2,-16(fp)
   25694:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   25698:	e0bffc17 	ldw	r2,-16(fp)
   2569c:	10c00217 	ldw	r3,8(r2)
   256a0:	e0bff617 	ldw	r2,-40(fp)
   256a4:	1880042e 	bgeu	r3,r2,256b8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   256a8:	e0bffc17 	ldw	r2,-16(fp)
   256ac:	00c00044 	movi	r3,1
   256b0:	10c00405 	stb	r3,16(r2)
   256b4:	00000206 	br	256c0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   256b8:	e0bffc17 	ldw	r2,-16(fp)
   256bc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   256c0:	e0bffc17 	ldw	r2,-16(fp)
   256c4:	d0e04604 	addi	r3,gp,-32488
   256c8:	e0fffa15 	stw	r3,-24(fp)
   256cc:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   256d0:	e0bffb17 	ldw	r2,-20(fp)
   256d4:	e0fffa17 	ldw	r3,-24(fp)
   256d8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   256dc:	e0bffa17 	ldw	r2,-24(fp)
   256e0:	10c00017 	ldw	r3,0(r2)
   256e4:	e0bffb17 	ldw	r2,-20(fp)
   256e8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   256ec:	e0bffa17 	ldw	r2,-24(fp)
   256f0:	10800017 	ldw	r2,0(r2)
   256f4:	e0fffb17 	ldw	r3,-20(fp)
   256f8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   256fc:	e0bffa17 	ldw	r2,-24(fp)
   25700:	e0fffb17 	ldw	r3,-20(fp)
   25704:	10c00015 	stw	r3,0(r2)
   25708:	e0bff817 	ldw	r2,-32(fp)
   2570c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25710:	e0bff717 	ldw	r2,-36(fp)
   25714:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   25718:	0005883a 	mov	r2,zero
   2571c:	00000306 	br	2572c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   25720:	00bffa84 	movi	r2,-22
   25724:	00000106 	br	2572c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   25728:	00bfde84 	movi	r2,-134
  }
}
   2572c:	e037883a 	mov	sp,fp
   25730:	df000017 	ldw	fp,0(sp)
   25734:	dec00104 	addi	sp,sp,4
   25738:	f800283a 	ret

0002573c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2573c:	deffff04 	addi	sp,sp,-4
   25740:	df000015 	stw	fp,0(sp)
   25744:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   25748:	0001883a 	nop
   2574c:	e037883a 	mov	sp,fp
   25750:	df000017 	ldw	fp,0(sp)
   25754:	dec00104 	addi	sp,sp,4
   25758:	f800283a 	ret

0002575c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2575c:	defffe04 	addi	sp,sp,-8
   25760:	dfc00115 	stw	ra,4(sp)
   25764:	df000015 	stw	fp,0(sp)
   25768:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2576c:	d0a02417 	ldw	r2,-32624(gp)
   25770:	10000326 	beq	r2,zero,25780 <alt_get_errno+0x24>
   25774:	d0a02417 	ldw	r2,-32624(gp)
   25778:	103ee83a 	callr	r2
   2577c:	00000106 	br	25784 <alt_get_errno+0x28>
   25780:	d0a84104 	addi	r2,gp,-24316
}
   25784:	e037883a 	mov	sp,fp
   25788:	dfc00117 	ldw	ra,4(sp)
   2578c:	df000017 	ldw	fp,0(sp)
   25790:	dec00204 	addi	sp,sp,8
   25794:	f800283a 	ret

00025798 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   25798:	defffa04 	addi	sp,sp,-24
   2579c:	dfc00515 	stw	ra,20(sp)
   257a0:	df000415 	stw	fp,16(sp)
   257a4:	df000404 	addi	fp,sp,16
   257a8:	e13ffe15 	stw	r4,-8(fp)
   257ac:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   257b0:	e0bffe17 	ldw	r2,-8(fp)
   257b4:	10000326 	beq	r2,zero,257c4 <alt_dev_llist_insert+0x2c>
   257b8:	e0bffe17 	ldw	r2,-8(fp)
   257bc:	10800217 	ldw	r2,8(r2)
   257c0:	1000061e 	bne	r2,zero,257dc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   257c4:	002575c0 	call	2575c <alt_get_errno>
   257c8:	1007883a 	mov	r3,r2
   257cc:	00800584 	movi	r2,22
   257d0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   257d4:	00bffa84 	movi	r2,-22
   257d8:	00001306 	br	25828 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   257dc:	e0bffe17 	ldw	r2,-8(fp)
   257e0:	e0ffff17 	ldw	r3,-4(fp)
   257e4:	e0fffc15 	stw	r3,-16(fp)
   257e8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   257ec:	e0bffd17 	ldw	r2,-12(fp)
   257f0:	e0fffc17 	ldw	r3,-16(fp)
   257f4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   257f8:	e0bffc17 	ldw	r2,-16(fp)
   257fc:	10c00017 	ldw	r3,0(r2)
   25800:	e0bffd17 	ldw	r2,-12(fp)
   25804:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   25808:	e0bffc17 	ldw	r2,-16(fp)
   2580c:	10800017 	ldw	r2,0(r2)
   25810:	e0fffd17 	ldw	r3,-12(fp)
   25814:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   25818:	e0bffc17 	ldw	r2,-16(fp)
   2581c:	e0fffd17 	ldw	r3,-12(fp)
   25820:	10c00015 	stw	r3,0(r2)

  return 0;  
   25824:	0005883a 	mov	r2,zero
}
   25828:	e037883a 	mov	sp,fp
   2582c:	dfc00117 	ldw	ra,4(sp)
   25830:	df000017 	ldw	fp,0(sp)
   25834:	dec00204 	addi	sp,sp,8
   25838:	f800283a 	ret

0002583c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2583c:	defffd04 	addi	sp,sp,-12
   25840:	dfc00215 	stw	ra,8(sp)
   25844:	df000115 	stw	fp,4(sp)
   25848:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2584c:	008000b4 	movhi	r2,2
   25850:	109aa704 	addi	r2,r2,27292
   25854:	e0bfff15 	stw	r2,-4(fp)
   25858:	00000606 	br	25874 <_do_ctors+0x38>
        (*ctor) (); 
   2585c:	e0bfff17 	ldw	r2,-4(fp)
   25860:	10800017 	ldw	r2,0(r2)
   25864:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   25868:	e0bfff17 	ldw	r2,-4(fp)
   2586c:	10bfff04 	addi	r2,r2,-4
   25870:	e0bfff15 	stw	r2,-4(fp)
   25874:	e0ffff17 	ldw	r3,-4(fp)
   25878:	008000b4 	movhi	r2,2
   2587c:	109aa704 	addi	r2,r2,27292
   25880:	18bff62e 	bgeu	r3,r2,2585c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf702585c>
        (*ctor) (); 
}
   25884:	0001883a 	nop
   25888:	e037883a 	mov	sp,fp
   2588c:	dfc00117 	ldw	ra,4(sp)
   25890:	df000017 	ldw	fp,0(sp)
   25894:	dec00204 	addi	sp,sp,8
   25898:	f800283a 	ret

0002589c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2589c:	defffd04 	addi	sp,sp,-12
   258a0:	dfc00215 	stw	ra,8(sp)
   258a4:	df000115 	stw	fp,4(sp)
   258a8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   258ac:	008000b4 	movhi	r2,2
   258b0:	109aa704 	addi	r2,r2,27292
   258b4:	e0bfff15 	stw	r2,-4(fp)
   258b8:	00000606 	br	258d4 <_do_dtors+0x38>
        (*dtor) (); 
   258bc:	e0bfff17 	ldw	r2,-4(fp)
   258c0:	10800017 	ldw	r2,0(r2)
   258c4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   258c8:	e0bfff17 	ldw	r2,-4(fp)
   258cc:	10bfff04 	addi	r2,r2,-4
   258d0:	e0bfff15 	stw	r2,-4(fp)
   258d4:	e0ffff17 	ldw	r3,-4(fp)
   258d8:	008000b4 	movhi	r2,2
   258dc:	109aa804 	addi	r2,r2,27296
   258e0:	18bff62e 	bgeu	r3,r2,258bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70258bc>
        (*dtor) (); 
}
   258e4:	0001883a 	nop
   258e8:	e037883a 	mov	sp,fp
   258ec:	dfc00117 	ldw	ra,4(sp)
   258f0:	df000017 	ldw	fp,0(sp)
   258f4:	dec00204 	addi	sp,sp,8
   258f8:	f800283a 	ret

000258fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   258fc:	defffa04 	addi	sp,sp,-24
   25900:	dfc00515 	stw	ra,20(sp)
   25904:	df000415 	stw	fp,16(sp)
   25908:	df000404 	addi	fp,sp,16
   2590c:	e13ffe15 	stw	r4,-8(fp)
   25910:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   25914:	e0bfff17 	ldw	r2,-4(fp)
   25918:	10800017 	ldw	r2,0(r2)
   2591c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   25920:	e13ffe17 	ldw	r4,-8(fp)
   25924:	000dca00 	call	dca0 <strlen>
   25928:	10800044 	addi	r2,r2,1
   2592c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   25930:	00000d06 	br	25968 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   25934:	e0bffc17 	ldw	r2,-16(fp)
   25938:	10800217 	ldw	r2,8(r2)
   2593c:	e0fffd17 	ldw	r3,-12(fp)
   25940:	180d883a 	mov	r6,r3
   25944:	e17ffe17 	ldw	r5,-8(fp)
   25948:	1009883a 	mov	r4,r2
   2594c:	00267500 	call	26750 <memcmp>
   25950:	1000021e 	bne	r2,zero,2595c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   25954:	e0bffc17 	ldw	r2,-16(fp)
   25958:	00000706 	br	25978 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2595c:	e0bffc17 	ldw	r2,-16(fp)
   25960:	10800017 	ldw	r2,0(r2)
   25964:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   25968:	e0fffc17 	ldw	r3,-16(fp)
   2596c:	e0bfff17 	ldw	r2,-4(fp)
   25970:	18bff01e 	bne	r3,r2,25934 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7025934>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   25974:	0005883a 	mov	r2,zero
}
   25978:	e037883a 	mov	sp,fp
   2597c:	dfc00117 	ldw	ra,4(sp)
   25980:	df000017 	ldw	fp,0(sp)
   25984:	dec00204 	addi	sp,sp,8
   25988:	f800283a 	ret

0002598c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2598c:	defffe04 	addi	sp,sp,-8
   25990:	dfc00115 	stw	ra,4(sp)
   25994:	df000015 	stw	fp,0(sp)
   25998:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   2599c:	01440004 	movi	r5,4096
   259a0:	0009883a 	mov	r4,zero
   259a4:	00265d80 	call	265d8 <alt_icache_flush>
#endif
}
   259a8:	0001883a 	nop
   259ac:	e037883a 	mov	sp,fp
   259b0:	dfc00117 	ldw	ra,4(sp)
   259b4:	df000017 	ldw	fp,0(sp)
   259b8:	dec00204 	addi	sp,sp,8
   259bc:	f800283a 	ret

000259c0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   259c0:	defff904 	addi	sp,sp,-28
   259c4:	dfc00615 	stw	ra,24(sp)
   259c8:	df000515 	stw	fp,20(sp)
   259cc:	df000504 	addi	fp,sp,20
   259d0:	e13ffc15 	stw	r4,-16(fp)
   259d4:	e17ffd15 	stw	r5,-12(fp)
   259d8:	e1bffe15 	stw	r6,-8(fp)
   259dc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   259e0:	e1bfff17 	ldw	r6,-4(fp)
   259e4:	e17ffe17 	ldw	r5,-8(fp)
   259e8:	e13ffd17 	ldw	r4,-12(fp)
   259ec:	0025d800 	call	25d80 <open>
   259f0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   259f4:	e0bffb17 	ldw	r2,-20(fp)
   259f8:	10001c16 	blt	r2,zero,25a6c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   259fc:	008000f4 	movhi	r2,3
   25a00:	10a42204 	addi	r2,r2,-28536
   25a04:	e0fffb17 	ldw	r3,-20(fp)
   25a08:	18c00324 	muli	r3,r3,12
   25a0c:	10c5883a 	add	r2,r2,r3
   25a10:	10c00017 	ldw	r3,0(r2)
   25a14:	e0bffc17 	ldw	r2,-16(fp)
   25a18:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   25a1c:	008000f4 	movhi	r2,3
   25a20:	10a42204 	addi	r2,r2,-28536
   25a24:	e0fffb17 	ldw	r3,-20(fp)
   25a28:	18c00324 	muli	r3,r3,12
   25a2c:	10c5883a 	add	r2,r2,r3
   25a30:	10800104 	addi	r2,r2,4
   25a34:	10c00017 	ldw	r3,0(r2)
   25a38:	e0bffc17 	ldw	r2,-16(fp)
   25a3c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   25a40:	008000f4 	movhi	r2,3
   25a44:	10a42204 	addi	r2,r2,-28536
   25a48:	e0fffb17 	ldw	r3,-20(fp)
   25a4c:	18c00324 	muli	r3,r3,12
   25a50:	10c5883a 	add	r2,r2,r3
   25a54:	10800204 	addi	r2,r2,8
   25a58:	10c00017 	ldw	r3,0(r2)
   25a5c:	e0bffc17 	ldw	r2,-16(fp)
   25a60:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   25a64:	e13ffb17 	ldw	r4,-20(fp)
   25a68:	001af840 	call	1af84 <alt_release_fd>
  }
} 
   25a6c:	0001883a 	nop
   25a70:	e037883a 	mov	sp,fp
   25a74:	dfc00117 	ldw	ra,4(sp)
   25a78:	df000017 	ldw	fp,0(sp)
   25a7c:	dec00204 	addi	sp,sp,8
   25a80:	f800283a 	ret

00025a84 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   25a84:	defffb04 	addi	sp,sp,-20
   25a88:	dfc00415 	stw	ra,16(sp)
   25a8c:	df000315 	stw	fp,12(sp)
   25a90:	df000304 	addi	fp,sp,12
   25a94:	e13ffd15 	stw	r4,-12(fp)
   25a98:	e17ffe15 	stw	r5,-8(fp)
   25a9c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   25aa0:	01c07fc4 	movi	r7,511
   25aa4:	01800044 	movi	r6,1
   25aa8:	e17ffd17 	ldw	r5,-12(fp)
   25aac:	010000f4 	movhi	r4,3
   25ab0:	21242504 	addi	r4,r4,-28524
   25ab4:	00259c00 	call	259c0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   25ab8:	01c07fc4 	movi	r7,511
   25abc:	000d883a 	mov	r6,zero
   25ac0:	e17ffe17 	ldw	r5,-8(fp)
   25ac4:	010000f4 	movhi	r4,3
   25ac8:	21242204 	addi	r4,r4,-28536
   25acc:	00259c00 	call	259c0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   25ad0:	01c07fc4 	movi	r7,511
   25ad4:	01800044 	movi	r6,1
   25ad8:	e17fff17 	ldw	r5,-4(fp)
   25adc:	010000f4 	movhi	r4,3
   25ae0:	21242804 	addi	r4,r4,-28512
   25ae4:	00259c00 	call	259c0 <alt_open_fd>
}  
   25ae8:	0001883a 	nop
   25aec:	e037883a 	mov	sp,fp
   25af0:	dfc00117 	ldw	ra,4(sp)
   25af4:	df000017 	ldw	fp,0(sp)
   25af8:	dec00204 	addi	sp,sp,8
   25afc:	f800283a 	ret

00025b00 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   25b00:	defff004 	addi	sp,sp,-64
   25b04:	df000f15 	stw	fp,60(sp)
   25b08:	df000f04 	addi	fp,sp,60
   25b0c:	e13ffd15 	stw	r4,-12(fp)
   25b10:	e17ffe15 	stw	r5,-8(fp)
   25b14:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   25b18:	00bffa84 	movi	r2,-22
   25b1c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   25b20:	e0bffd17 	ldw	r2,-12(fp)
   25b24:	10800828 	cmpgeui	r2,r2,32
   25b28:	1000501e 	bne	r2,zero,25c6c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25b2c:	0005303a 	rdctl	r2,status
   25b30:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25b34:	e0fff617 	ldw	r3,-40(fp)
   25b38:	00bfff84 	movi	r2,-2
   25b3c:	1884703a 	and	r2,r3,r2
   25b40:	1001703a 	wrctl	status,r2
  
  return context;
   25b44:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   25b48:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   25b4c:	00800134 	movhi	r2,4
   25b50:	10ae9604 	addi	r2,r2,-17832
   25b54:	e0fffd17 	ldw	r3,-12(fp)
   25b58:	180690fa 	slli	r3,r3,3
   25b5c:	10c5883a 	add	r2,r2,r3
   25b60:	e0ffff17 	ldw	r3,-4(fp)
   25b64:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   25b68:	00800134 	movhi	r2,4
   25b6c:	10ae9604 	addi	r2,r2,-17832
   25b70:	e0fffd17 	ldw	r3,-12(fp)
   25b74:	180690fa 	slli	r3,r3,3
   25b78:	10c5883a 	add	r2,r2,r3
   25b7c:	10800104 	addi	r2,r2,4
   25b80:	e0fffe17 	ldw	r3,-8(fp)
   25b84:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   25b88:	e0bfff17 	ldw	r2,-4(fp)
   25b8c:	10001926 	beq	r2,zero,25bf4 <alt_irq_register+0xf4>
   25b90:	e0bffd17 	ldw	r2,-12(fp)
   25b94:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25b98:	0005303a 	rdctl	r2,status
   25b9c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25ba0:	e0fff717 	ldw	r3,-36(fp)
   25ba4:	00bfff84 	movi	r2,-2
   25ba8:	1884703a 	and	r2,r3,r2
   25bac:	1001703a 	wrctl	status,r2
  
  return context;
   25bb0:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   25bb4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   25bb8:	00c00044 	movi	r3,1
   25bbc:	e0bff217 	ldw	r2,-56(fp)
   25bc0:	1884983a 	sll	r2,r3,r2
   25bc4:	1007883a 	mov	r3,r2
   25bc8:	d0a86117 	ldw	r2,-24188(gp)
   25bcc:	1884b03a 	or	r2,r3,r2
   25bd0:	d0a86115 	stw	r2,-24188(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   25bd4:	d0a86117 	ldw	r2,-24188(gp)
   25bd8:	100170fa 	wrctl	ienable,r2
   25bdc:	e0bff817 	ldw	r2,-32(fp)
   25be0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25be4:	e0bff917 	ldw	r2,-28(fp)
   25be8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   25bec:	0005883a 	mov	r2,zero
   25bf0:	00001906 	br	25c58 <alt_irq_register+0x158>
   25bf4:	e0bffd17 	ldw	r2,-12(fp)
   25bf8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25bfc:	0005303a 	rdctl	r2,status
   25c00:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25c04:	e0fffa17 	ldw	r3,-24(fp)
   25c08:	00bfff84 	movi	r2,-2
   25c0c:	1884703a 	and	r2,r3,r2
   25c10:	1001703a 	wrctl	status,r2
  
  return context;
   25c14:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   25c18:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   25c1c:	00c00044 	movi	r3,1
   25c20:	e0bff417 	ldw	r2,-48(fp)
   25c24:	1884983a 	sll	r2,r3,r2
   25c28:	0084303a 	nor	r2,zero,r2
   25c2c:	1007883a 	mov	r3,r2
   25c30:	d0a86117 	ldw	r2,-24188(gp)
   25c34:	1884703a 	and	r2,r3,r2
   25c38:	d0a86115 	stw	r2,-24188(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   25c3c:	d0a86117 	ldw	r2,-24188(gp)
   25c40:	100170fa 	wrctl	ienable,r2
   25c44:	e0bffb17 	ldw	r2,-20(fp)
   25c48:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25c4c:	e0bffc17 	ldw	r2,-16(fp)
   25c50:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   25c54:	0005883a 	mov	r2,zero
   25c58:	e0bff115 	stw	r2,-60(fp)
   25c5c:	e0bff317 	ldw	r2,-52(fp)
   25c60:	e0bff515 	stw	r2,-44(fp)
   25c64:	e0bff517 	ldw	r2,-44(fp)
   25c68:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   25c6c:	e0bff117 	ldw	r2,-60(fp)
}
   25c70:	e037883a 	mov	sp,fp
   25c74:	df000017 	ldw	fp,0(sp)
   25c78:	dec00104 	addi	sp,sp,4
   25c7c:	f800283a 	ret

00025c80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25c80:	defffe04 	addi	sp,sp,-8
   25c84:	dfc00115 	stw	ra,4(sp)
   25c88:	df000015 	stw	fp,0(sp)
   25c8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25c90:	d0a02417 	ldw	r2,-32624(gp)
   25c94:	10000326 	beq	r2,zero,25ca4 <alt_get_errno+0x24>
   25c98:	d0a02417 	ldw	r2,-32624(gp)
   25c9c:	103ee83a 	callr	r2
   25ca0:	00000106 	br	25ca8 <alt_get_errno+0x28>
   25ca4:	d0a84104 	addi	r2,gp,-24316
}
   25ca8:	e037883a 	mov	sp,fp
   25cac:	dfc00117 	ldw	ra,4(sp)
   25cb0:	df000017 	ldw	fp,0(sp)
   25cb4:	dec00204 	addi	sp,sp,8
   25cb8:	f800283a 	ret

00025cbc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   25cbc:	defffd04 	addi	sp,sp,-12
   25cc0:	df000215 	stw	fp,8(sp)
   25cc4:	df000204 	addi	fp,sp,8
   25cc8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   25ccc:	e0bfff17 	ldw	r2,-4(fp)
   25cd0:	10800217 	ldw	r2,8(r2)
   25cd4:	10d00034 	orhi	r3,r2,16384
   25cd8:	e0bfff17 	ldw	r2,-4(fp)
   25cdc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   25ce0:	e03ffe15 	stw	zero,-8(fp)
   25ce4:	00001d06 	br	25d5c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   25ce8:	008000f4 	movhi	r2,3
   25cec:	10a42204 	addi	r2,r2,-28536
   25cf0:	e0fffe17 	ldw	r3,-8(fp)
   25cf4:	18c00324 	muli	r3,r3,12
   25cf8:	10c5883a 	add	r2,r2,r3
   25cfc:	10c00017 	ldw	r3,0(r2)
   25d00:	e0bfff17 	ldw	r2,-4(fp)
   25d04:	10800017 	ldw	r2,0(r2)
   25d08:	1880111e 	bne	r3,r2,25d50 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   25d0c:	008000f4 	movhi	r2,3
   25d10:	10a42204 	addi	r2,r2,-28536
   25d14:	e0fffe17 	ldw	r3,-8(fp)
   25d18:	18c00324 	muli	r3,r3,12
   25d1c:	10c5883a 	add	r2,r2,r3
   25d20:	10800204 	addi	r2,r2,8
   25d24:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   25d28:	1000090e 	bge	r2,zero,25d50 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   25d2c:	e0bffe17 	ldw	r2,-8(fp)
   25d30:	10c00324 	muli	r3,r2,12
   25d34:	008000f4 	movhi	r2,3
   25d38:	10a42204 	addi	r2,r2,-28536
   25d3c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   25d40:	e0bfff17 	ldw	r2,-4(fp)
   25d44:	18800226 	beq	r3,r2,25d50 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   25d48:	00bffcc4 	movi	r2,-13
   25d4c:	00000806 	br	25d70 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   25d50:	e0bffe17 	ldw	r2,-8(fp)
   25d54:	10800044 	addi	r2,r2,1
   25d58:	e0bffe15 	stw	r2,-8(fp)
   25d5c:	d0a02317 	ldw	r2,-32628(gp)
   25d60:	1007883a 	mov	r3,r2
   25d64:	e0bffe17 	ldw	r2,-8(fp)
   25d68:	18bfdf2e 	bgeu	r3,r2,25ce8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7025ce8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   25d6c:	0005883a 	mov	r2,zero
}
   25d70:	e037883a 	mov	sp,fp
   25d74:	df000017 	ldw	fp,0(sp)
   25d78:	dec00104 	addi	sp,sp,4
   25d7c:	f800283a 	ret

00025d80 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   25d80:	defff604 	addi	sp,sp,-40
   25d84:	dfc00915 	stw	ra,36(sp)
   25d88:	df000815 	stw	fp,32(sp)
   25d8c:	df000804 	addi	fp,sp,32
   25d90:	e13ffd15 	stw	r4,-12(fp)
   25d94:	e17ffe15 	stw	r5,-8(fp)
   25d98:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   25d9c:	00bfffc4 	movi	r2,-1
   25da0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   25da4:	00bffb44 	movi	r2,-19
   25da8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   25dac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   25db0:	d1602104 	addi	r5,gp,-32636
   25db4:	e13ffd17 	ldw	r4,-12(fp)
   25db8:	00258fc0 	call	258fc <alt_find_dev>
   25dbc:	e0bff815 	stw	r2,-32(fp)
   25dc0:	e0bff817 	ldw	r2,-32(fp)
   25dc4:	1000051e 	bne	r2,zero,25ddc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   25dc8:	e13ffd17 	ldw	r4,-12(fp)
   25dcc:	00263f40 	call	263f4 <alt_find_file>
   25dd0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   25dd4:	00800044 	movi	r2,1
   25dd8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   25ddc:	e0bff817 	ldw	r2,-32(fp)
   25de0:	10002926 	beq	r2,zero,25e88 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   25de4:	e13ff817 	ldw	r4,-32(fp)
   25de8:	00264fc0 	call	264fc <alt_get_fd>
   25dec:	e0bff915 	stw	r2,-28(fp)
   25df0:	e0bff917 	ldw	r2,-28(fp)
   25df4:	1000030e 	bge	r2,zero,25e04 <open+0x84>
    {
      status = index;
   25df8:	e0bff917 	ldw	r2,-28(fp)
   25dfc:	e0bffa15 	stw	r2,-24(fp)
   25e00:	00002306 	br	25e90 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   25e04:	e0bff917 	ldw	r2,-28(fp)
   25e08:	10c00324 	muli	r3,r2,12
   25e0c:	008000f4 	movhi	r2,3
   25e10:	10a42204 	addi	r2,r2,-28536
   25e14:	1885883a 	add	r2,r3,r2
   25e18:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   25e1c:	e0fffe17 	ldw	r3,-8(fp)
   25e20:	00900034 	movhi	r2,16384
   25e24:	10bfffc4 	addi	r2,r2,-1
   25e28:	1886703a 	and	r3,r3,r2
   25e2c:	e0bffc17 	ldw	r2,-16(fp)
   25e30:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   25e34:	e0bffb17 	ldw	r2,-20(fp)
   25e38:	1000051e 	bne	r2,zero,25e50 <open+0xd0>
   25e3c:	e13ffc17 	ldw	r4,-16(fp)
   25e40:	0025cbc0 	call	25cbc <alt_file_locked>
   25e44:	e0bffa15 	stw	r2,-24(fp)
   25e48:	e0bffa17 	ldw	r2,-24(fp)
   25e4c:	10001016 	blt	r2,zero,25e90 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   25e50:	e0bff817 	ldw	r2,-32(fp)
   25e54:	10800317 	ldw	r2,12(r2)
   25e58:	10000826 	beq	r2,zero,25e7c <open+0xfc>
   25e5c:	e0bff817 	ldw	r2,-32(fp)
   25e60:	10800317 	ldw	r2,12(r2)
   25e64:	e1ffff17 	ldw	r7,-4(fp)
   25e68:	e1bffe17 	ldw	r6,-8(fp)
   25e6c:	e17ffd17 	ldw	r5,-12(fp)
   25e70:	e13ffc17 	ldw	r4,-16(fp)
   25e74:	103ee83a 	callr	r2
   25e78:	00000106 	br	25e80 <open+0x100>
   25e7c:	0005883a 	mov	r2,zero
   25e80:	e0bffa15 	stw	r2,-24(fp)
   25e84:	00000206 	br	25e90 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   25e88:	00bffb44 	movi	r2,-19
   25e8c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   25e90:	e0bffa17 	ldw	r2,-24(fp)
   25e94:	1000090e 	bge	r2,zero,25ebc <open+0x13c>
  {
    alt_release_fd (index);  
   25e98:	e13ff917 	ldw	r4,-28(fp)
   25e9c:	001af840 	call	1af84 <alt_release_fd>
    ALT_ERRNO = -status;
   25ea0:	0025c800 	call	25c80 <alt_get_errno>
   25ea4:	1007883a 	mov	r3,r2
   25ea8:	e0bffa17 	ldw	r2,-24(fp)
   25eac:	0085c83a 	sub	r2,zero,r2
   25eb0:	18800015 	stw	r2,0(r3)
    return -1;
   25eb4:	00bfffc4 	movi	r2,-1
   25eb8:	00000106 	br	25ec0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   25ebc:	e0bff917 	ldw	r2,-28(fp)
}
   25ec0:	e037883a 	mov	sp,fp
   25ec4:	dfc00117 	ldw	ra,4(sp)
   25ec8:	df000017 	ldw	fp,0(sp)
   25ecc:	dec00204 	addi	sp,sp,8
   25ed0:	f800283a 	ret

00025ed4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   25ed4:	defffa04 	addi	sp,sp,-24
   25ed8:	df000515 	stw	fp,20(sp)
   25edc:	df000504 	addi	fp,sp,20
   25ee0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25ee4:	0005303a 	rdctl	r2,status
   25ee8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25eec:	e0fffc17 	ldw	r3,-16(fp)
   25ef0:	00bfff84 	movi	r2,-2
   25ef4:	1884703a 	and	r2,r3,r2
   25ef8:	1001703a 	wrctl	status,r2
  
  return context;
   25efc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   25f00:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   25f04:	e0bfff17 	ldw	r2,-4(fp)
   25f08:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   25f0c:	e0bffd17 	ldw	r2,-12(fp)
   25f10:	10800017 	ldw	r2,0(r2)
   25f14:	e0fffd17 	ldw	r3,-12(fp)
   25f18:	18c00117 	ldw	r3,4(r3)
   25f1c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   25f20:	e0bffd17 	ldw	r2,-12(fp)
   25f24:	10800117 	ldw	r2,4(r2)
   25f28:	e0fffd17 	ldw	r3,-12(fp)
   25f2c:	18c00017 	ldw	r3,0(r3)
   25f30:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   25f34:	e0bffd17 	ldw	r2,-12(fp)
   25f38:	e0fffd17 	ldw	r3,-12(fp)
   25f3c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   25f40:	e0bffd17 	ldw	r2,-12(fp)
   25f44:	e0fffd17 	ldw	r3,-12(fp)
   25f48:	10c00015 	stw	r3,0(r2)
   25f4c:	e0bffb17 	ldw	r2,-20(fp)
   25f50:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25f54:	e0bffe17 	ldw	r2,-8(fp)
   25f58:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   25f5c:	0001883a 	nop
   25f60:	e037883a 	mov	sp,fp
   25f64:	df000017 	ldw	fp,0(sp)
   25f68:	dec00104 	addi	sp,sp,4
   25f6c:	f800283a 	ret

00025f70 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   25f70:	defffb04 	addi	sp,sp,-20
   25f74:	dfc00415 	stw	ra,16(sp)
   25f78:	df000315 	stw	fp,12(sp)
   25f7c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   25f80:	d0a04617 	ldw	r2,-32488(gp)
   25f84:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   25f88:	d0a86317 	ldw	r2,-24180(gp)
   25f8c:	10800044 	addi	r2,r2,1
   25f90:	d0a86315 	stw	r2,-24180(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   25f94:	00002e06 	br	26050 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   25f98:	e0bffd17 	ldw	r2,-12(fp)
   25f9c:	10800017 	ldw	r2,0(r2)
   25fa0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   25fa4:	e0bffd17 	ldw	r2,-12(fp)
   25fa8:	10800403 	ldbu	r2,16(r2)
   25fac:	10803fcc 	andi	r2,r2,255
   25fb0:	10000426 	beq	r2,zero,25fc4 <alt_tick+0x54>
   25fb4:	d0a86317 	ldw	r2,-24180(gp)
   25fb8:	1000021e 	bne	r2,zero,25fc4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   25fbc:	e0bffd17 	ldw	r2,-12(fp)
   25fc0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   25fc4:	e0bffd17 	ldw	r2,-12(fp)
   25fc8:	10800217 	ldw	r2,8(r2)
   25fcc:	d0e86317 	ldw	r3,-24180(gp)
   25fd0:	18801d36 	bltu	r3,r2,26048 <alt_tick+0xd8>
   25fd4:	e0bffd17 	ldw	r2,-12(fp)
   25fd8:	10800403 	ldbu	r2,16(r2)
   25fdc:	10803fcc 	andi	r2,r2,255
   25fe0:	1000191e 	bne	r2,zero,26048 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   25fe4:	e0bffd17 	ldw	r2,-12(fp)
   25fe8:	10800317 	ldw	r2,12(r2)
   25fec:	e0fffd17 	ldw	r3,-12(fp)
   25ff0:	18c00517 	ldw	r3,20(r3)
   25ff4:	1809883a 	mov	r4,r3
   25ff8:	103ee83a 	callr	r2
   25ffc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   26000:	e0bfff17 	ldw	r2,-4(fp)
   26004:	1000031e 	bne	r2,zero,26014 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   26008:	e13ffd17 	ldw	r4,-12(fp)
   2600c:	0025ed40 	call	25ed4 <alt_alarm_stop>
   26010:	00000d06 	br	26048 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   26014:	e0bffd17 	ldw	r2,-12(fp)
   26018:	10c00217 	ldw	r3,8(r2)
   2601c:	e0bfff17 	ldw	r2,-4(fp)
   26020:	1887883a 	add	r3,r3,r2
   26024:	e0bffd17 	ldw	r2,-12(fp)
   26028:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2602c:	e0bffd17 	ldw	r2,-12(fp)
   26030:	10c00217 	ldw	r3,8(r2)
   26034:	d0a86317 	ldw	r2,-24180(gp)
   26038:	1880032e 	bgeu	r3,r2,26048 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   2603c:	e0bffd17 	ldw	r2,-12(fp)
   26040:	00c00044 	movi	r3,1
   26044:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   26048:	e0bffe17 	ldw	r2,-8(fp)
   2604c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   26050:	e0fffd17 	ldw	r3,-12(fp)
   26054:	d0a04604 	addi	r2,gp,-32488
   26058:	18bfcf1e 	bne	r3,r2,25f98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7025f98>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   2605c:	001c1700 	call	1c170 <OSTimeTick>
}
   26060:	0001883a 	nop
   26064:	e037883a 	mov	sp,fp
   26068:	dfc00117 	ldw	ra,4(sp)
   2606c:	df000017 	ldw	fp,0(sp)
   26070:	dec00204 	addi	sp,sp,8
   26074:	f800283a 	ret

00026078 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   26078:	deffff04 	addi	sp,sp,-4
   2607c:	df000015 	stw	fp,0(sp)
   26080:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   26084:	000170fa 	wrctl	ienable,zero
}
   26088:	0001883a 	nop
   2608c:	e037883a 	mov	sp,fp
   26090:	df000017 	ldw	fp,0(sp)
   26094:	dec00104 	addi	sp,sp,4
   26098:	f800283a 	ret

0002609c <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   2609c:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   260a0:	d0e01a17 	ldw	r3,-32664(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   260a4:	d1285c17 	ldw	r4,-24208(gp)

      stw ra,  0(sp)
   260a8:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   260ac:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   260b0:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   260b4:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   260b8:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   260bc:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   260c0:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   260c4:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   260c8:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   260cc:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   260d0:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   260d4:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   260d8:	00263100 	call	26310 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   260dc:	d1285717 	ldw	r4,-24228(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   260e0:	d1684f07 	ldb	r5,-24260(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   260e4:	d1285c15 	stw	r4,-24208(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   260e8:	d1684f45 	stb	r5,-24259(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   260ec:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   260f0:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   260f4:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   260f8:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   260fc:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   26100:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   26104:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   26108:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   2610c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   26110:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   26114:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   26118:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   2611c:	d0e01a15 	stw	r3,-32664(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   26120:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   26124:	f800283a 	ret

00026128 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   26128:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   2612c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   26130:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   26134:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   26138:	00263100 	call	26310 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   2613c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   26140:	d4a84d45 	stb	r18,-24267(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   26144:	003fe506 	br	260dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70260dc>

00026148 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   26148:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   2614c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   26150:	10800054 	ori	r2,r2,1
      wrctl status, r2
   26154:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   26158:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   2615c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   26160:	dec00204 	addi	sp,sp,8

      callr r2
   26164:	103ee83a 	callr	r2

      nop
   26168:	0001883a 	nop

0002616c <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   2616c:	defff704 	addi	sp,sp,-36
   26170:	dfc00815 	stw	ra,32(sp)
   26174:	df000715 	stw	fp,28(sp)
   26178:	df000704 	addi	fp,sp,28
   2617c:	e13ffc15 	stw	r4,-16(fp)
   26180:	e17ffd15 	stw	r5,-12(fp)
   26184:	e1bffe15 	stw	r6,-8(fp)
   26188:	3805883a 	mov	r2,r7
   2618c:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   26190:	e0fffe17 	ldw	r3,-8(fp)
   26194:	00bfff04 	movi	r2,-4
   26198:	1884703a 	and	r2,r3,r2
   2619c:	10bef704 	addi	r2,r2,-1060
   261a0:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   261a4:	01810904 	movi	r6,1060
   261a8:	000b883a 	mov	r5,zero
   261ac:	e13ff917 	ldw	r4,-28(fp)
   261b0:	000d4c80 	call	d4c8 <memset>
   261b4:	e0bff917 	ldw	r2,-28(fp)
   261b8:	10c0bb04 	addi	r3,r2,748
   261bc:	e0bff917 	ldw	r2,-28(fp)
   261c0:	10c00115 	stw	r3,4(r2)
   261c4:	e0bff917 	ldw	r2,-28(fp)
   261c8:	10c0d504 	addi	r3,r2,852
   261cc:	e0bff917 	ldw	r2,-28(fp)
   261d0:	10c00215 	stw	r3,8(r2)
   261d4:	e0bff917 	ldw	r2,-28(fp)
   261d8:	10c0ef04 	addi	r3,r2,956
   261dc:	e0bff917 	ldw	r2,-28(fp)
   261e0:	10c00315 	stw	r3,12(r2)
   261e4:	e0fff917 	ldw	r3,-28(fp)
   261e8:	008000f4 	movhi	r2,3
   261ec:	10a1ee04 	addi	r2,r2,-30792
   261f0:	18800d15 	stw	r2,52(r3)
   261f4:	e0bff917 	ldw	r2,-28(fp)
   261f8:	00c00044 	movi	r3,1
   261fc:	10c02915 	stw	r3,164(r2)
   26200:	10002a15 	stw	zero,168(r2)
   26204:	e0bff917 	ldw	r2,-28(fp)
   26208:	00ccc384 	movi	r3,13070
   2620c:	10c02b0d 	sth	r3,172(r2)
   26210:	e0bff917 	ldw	r2,-28(fp)
   26214:	00eaf344 	movi	r3,-21555
   26218:	10c02b8d 	sth	r3,174(r2)
   2621c:	e0bff917 	ldw	r2,-28(fp)
   26220:	00c48d04 	movi	r3,4660
   26224:	10c02c0d 	sth	r3,176(r2)
   26228:	e0bff917 	ldw	r2,-28(fp)
   2622c:	00f99b44 	movi	r3,-6547
   26230:	10c02c8d 	sth	r3,178(r2)
   26234:	e0bff917 	ldw	r2,-28(fp)
   26238:	00f7bb04 	movi	r3,-8468
   2623c:	10c02d0d 	sth	r3,180(r2)
   26240:	e0bff917 	ldw	r2,-28(fp)
   26244:	00c00144 	movi	r3,5
   26248:	10c02d8d 	sth	r3,182(r2)
   2624c:	e0bff917 	ldw	r2,-28(fp)
   26250:	00c002c4 	movi	r3,11
   26254:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   26258:	e0bff917 	ldw	r2,-28(fp)
   2625c:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   26260:	e0bffa17 	ldw	r2,-24(fp)
   26264:	10bff304 	addi	r2,r2,-52
   26268:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   2626c:	e0bffb17 	ldw	r2,-20(fp)
   26270:	10800c04 	addi	r2,r2,48
   26274:	e0fffc17 	ldw	r3,-16(fp)
   26278:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   2627c:	e0bffb17 	ldw	r2,-20(fp)
   26280:	10800b04 	addi	r2,r2,44
   26284:	e0fffd17 	ldw	r3,-12(fp)
   26288:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   2628c:	e0bffb17 	ldw	r2,-20(fp)
   26290:	10800a04 	addi	r2,r2,40
   26294:	e0fff917 	ldw	r3,-28(fp)
   26298:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   2629c:	008000b4 	movhi	r2,2
   262a0:	10985204 	addi	r2,r2,24904
   262a4:	10c00104 	addi	r3,r2,4
   262a8:	e0bffb17 	ldw	r2,-20(fp)
   262ac:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   262b0:	e0bffb17 	ldw	r2,-20(fp)
}
   262b4:	e037883a 	mov	sp,fp
   262b8:	dfc00117 	ldw	ra,4(sp)
   262bc:	df000017 	ldw	fp,0(sp)
   262c0:	dec00204 	addi	sp,sp,8
   262c4:	f800283a 	ret

000262c8 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   262c8:	defffe04 	addi	sp,sp,-8
   262cc:	df000115 	stw	fp,4(sp)
   262d0:	df000104 	addi	fp,sp,4
   262d4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   262d8:	0001883a 	nop
   262dc:	e037883a 	mov	sp,fp
   262e0:	df000017 	ldw	fp,0(sp)
   262e4:	dec00104 	addi	sp,sp,4
   262e8:	f800283a 	ret

000262ec <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   262ec:	defffe04 	addi	sp,sp,-8
   262f0:	df000115 	stw	fp,4(sp)
   262f4:	df000104 	addi	fp,sp,4
   262f8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   262fc:	0001883a 	nop
   26300:	e037883a 	mov	sp,fp
   26304:	df000017 	ldw	fp,0(sp)
   26308:	dec00104 	addi	sp,sp,4
   2630c:	f800283a 	ret

00026310 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   26310:	deffff04 	addi	sp,sp,-4
   26314:	df000015 	stw	fp,0(sp)
   26318:	d839883a 	mov	fp,sp
}
   2631c:	0001883a 	nop
   26320:	e037883a 	mov	sp,fp
   26324:	df000017 	ldw	fp,0(sp)
   26328:	dec00104 	addi	sp,sp,4
   2632c:	f800283a 	ret

00026330 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   26330:	deffff04 	addi	sp,sp,-4
   26334:	df000015 	stw	fp,0(sp)
   26338:	d839883a 	mov	fp,sp
}
   2633c:	0001883a 	nop
   26340:	e037883a 	mov	sp,fp
   26344:	df000017 	ldw	fp,0(sp)
   26348:	dec00104 	addi	sp,sp,4
   2634c:	f800283a 	ret

00026350 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   26350:	deffff04 	addi	sp,sp,-4
   26354:	df000015 	stw	fp,0(sp)
   26358:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   2635c:	0001883a 	nop
   26360:	e037883a 	mov	sp,fp
   26364:	df000017 	ldw	fp,0(sp)
   26368:	dec00104 	addi	sp,sp,4
   2636c:	f800283a 	ret

00026370 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   26370:	deffff04 	addi	sp,sp,-4
   26374:	df000015 	stw	fp,0(sp)
   26378:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   2637c:	0001883a 	nop
   26380:	e037883a 	mov	sp,fp
   26384:	df000017 	ldw	fp,0(sp)
   26388:	dec00104 	addi	sp,sp,4
   2638c:	f800283a 	ret

00026390 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   26390:	deffff04 	addi	sp,sp,-4
   26394:	df000015 	stw	fp,0(sp)
   26398:	d839883a 	mov	fp,sp
}
   2639c:	0001883a 	nop
   263a0:	e037883a 	mov	sp,fp
   263a4:	df000017 	ldw	fp,0(sp)
   263a8:	dec00104 	addi	sp,sp,4
   263ac:	f800283a 	ret

000263b0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   263b0:	deffff04 	addi	sp,sp,-4
   263b4:	df000015 	stw	fp,0(sp)
   263b8:	d839883a 	mov	fp,sp
}
   263bc:	0001883a 	nop
   263c0:	e037883a 	mov	sp,fp
   263c4:	df000017 	ldw	fp,0(sp)
   263c8:	dec00104 	addi	sp,sp,4
   263cc:	f800283a 	ret

000263d0 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   263d0:	defffe04 	addi	sp,sp,-8
   263d4:	df000115 	stw	fp,4(sp)
   263d8:	df000104 	addi	fp,sp,4
   263dc:	e13fff15 	stw	r4,-4(fp)
}
   263e0:	0001883a 	nop
   263e4:	e037883a 	mov	sp,fp
   263e8:	df000017 	ldw	fp,0(sp)
   263ec:	dec00104 	addi	sp,sp,4
   263f0:	f800283a 	ret

000263f4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   263f4:	defffb04 	addi	sp,sp,-20
   263f8:	dfc00415 	stw	ra,16(sp)
   263fc:	df000315 	stw	fp,12(sp)
   26400:	df000304 	addi	fp,sp,12
   26404:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   26408:	d0a01f17 	ldw	r2,-32644(gp)
   2640c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   26410:	00003106 	br	264d8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   26414:	e0bffd17 	ldw	r2,-12(fp)
   26418:	10800217 	ldw	r2,8(r2)
   2641c:	1009883a 	mov	r4,r2
   26420:	000dca00 	call	dca0 <strlen>
   26424:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   26428:	e0bffd17 	ldw	r2,-12(fp)
   2642c:	10c00217 	ldw	r3,8(r2)
   26430:	e0bffe17 	ldw	r2,-8(fp)
   26434:	10bfffc4 	addi	r2,r2,-1
   26438:	1885883a 	add	r2,r3,r2
   2643c:	10800003 	ldbu	r2,0(r2)
   26440:	10803fcc 	andi	r2,r2,255
   26444:	1080201c 	xori	r2,r2,128
   26448:	10bfe004 	addi	r2,r2,-128
   2644c:	10800bd8 	cmpnei	r2,r2,47
   26450:	1000031e 	bne	r2,zero,26460 <alt_find_file+0x6c>
    {
      len -= 1;
   26454:	e0bffe17 	ldw	r2,-8(fp)
   26458:	10bfffc4 	addi	r2,r2,-1
   2645c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   26460:	e0bffe17 	ldw	r2,-8(fp)
   26464:	e0ffff17 	ldw	r3,-4(fp)
   26468:	1885883a 	add	r2,r3,r2
   2646c:	10800003 	ldbu	r2,0(r2)
   26470:	10803fcc 	andi	r2,r2,255
   26474:	1080201c 	xori	r2,r2,128
   26478:	10bfe004 	addi	r2,r2,-128
   2647c:	10800be0 	cmpeqi	r2,r2,47
   26480:	1000081e 	bne	r2,zero,264a4 <alt_find_file+0xb0>
   26484:	e0bffe17 	ldw	r2,-8(fp)
   26488:	e0ffff17 	ldw	r3,-4(fp)
   2648c:	1885883a 	add	r2,r3,r2
   26490:	10800003 	ldbu	r2,0(r2)
   26494:	10803fcc 	andi	r2,r2,255
   26498:	1080201c 	xori	r2,r2,128
   2649c:	10bfe004 	addi	r2,r2,-128
   264a0:	10000a1e 	bne	r2,zero,264cc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   264a4:	e0bffd17 	ldw	r2,-12(fp)
   264a8:	10800217 	ldw	r2,8(r2)
   264ac:	e0fffe17 	ldw	r3,-8(fp)
   264b0:	180d883a 	mov	r6,r3
   264b4:	e17fff17 	ldw	r5,-4(fp)
   264b8:	1009883a 	mov	r4,r2
   264bc:	00267500 	call	26750 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   264c0:	1000021e 	bne	r2,zero,264cc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   264c4:	e0bffd17 	ldw	r2,-12(fp)
   264c8:	00000706 	br	264e8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   264cc:	e0bffd17 	ldw	r2,-12(fp)
   264d0:	10800017 	ldw	r2,0(r2)
   264d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   264d8:	e0fffd17 	ldw	r3,-12(fp)
   264dc:	d0a01f04 	addi	r2,gp,-32644
   264e0:	18bfcc1e 	bne	r3,r2,26414 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7026414>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   264e4:	0005883a 	mov	r2,zero
}
   264e8:	e037883a 	mov	sp,fp
   264ec:	dfc00117 	ldw	ra,4(sp)
   264f0:	df000017 	ldw	fp,0(sp)
   264f4:	dec00204 	addi	sp,sp,8
   264f8:	f800283a 	ret

000264fc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   264fc:	defff904 	addi	sp,sp,-28
   26500:	dfc00615 	stw	ra,24(sp)
   26504:	df000515 	stw	fp,20(sp)
   26508:	df000504 	addi	fp,sp,20
   2650c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   26510:	00bffa04 	movi	r2,-24
   26514:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   26518:	d0a84517 	ldw	r2,-24300(gp)
   2651c:	e0bffd15 	stw	r2,-12(fp)
   26520:	e03ffe0d 	sth	zero,-8(fp)
   26524:	e0bffe0b 	ldhu	r2,-8(fp)
   26528:	e0fffe84 	addi	r3,fp,-6
   2652c:	180d883a 	mov	r6,r3
   26530:	100b883a 	mov	r5,r2
   26534:	e13ffd17 	ldw	r4,-12(fp)
   26538:	00209c40 	call	209c4 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2653c:	e03ffb15 	stw	zero,-20(fp)
   26540:	00001906 	br	265a8 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   26544:	008000f4 	movhi	r2,3
   26548:	10a42204 	addi	r2,r2,-28536
   2654c:	e0fffb17 	ldw	r3,-20(fp)
   26550:	18c00324 	muli	r3,r3,12
   26554:	10c5883a 	add	r2,r2,r3
   26558:	10800017 	ldw	r2,0(r2)
   2655c:	10000f1e 	bne	r2,zero,2659c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   26560:	008000f4 	movhi	r2,3
   26564:	10a42204 	addi	r2,r2,-28536
   26568:	e0fffb17 	ldw	r3,-20(fp)
   2656c:	18c00324 	muli	r3,r3,12
   26570:	10c5883a 	add	r2,r2,r3
   26574:	e0ffff17 	ldw	r3,-4(fp)
   26578:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   2657c:	d0e02317 	ldw	r3,-32628(gp)
   26580:	e0bffb17 	ldw	r2,-20(fp)
   26584:	1880020e 	bge	r3,r2,26590 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   26588:	e0bffb17 	ldw	r2,-20(fp)
   2658c:	d0a02315 	stw	r2,-32628(gp)
      }
      rc = i;
   26590:	e0bffb17 	ldw	r2,-20(fp)
   26594:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   26598:	00000606 	br	265b4 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2659c:	e0bffb17 	ldw	r2,-20(fp)
   265a0:	10800044 	addi	r2,r2,1
   265a4:	e0bffb15 	stw	r2,-20(fp)
   265a8:	e0bffb17 	ldw	r2,-20(fp)
   265ac:	10800810 	cmplti	r2,r2,32
   265b0:	103fe41e 	bne	r2,zero,26544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7026544>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   265b4:	d0a84517 	ldw	r2,-24300(gp)
   265b8:	1009883a 	mov	r4,r2
   265bc:	0020d3c0 	call	20d3c <OSSemPost>

  return rc;
   265c0:	e0bffc17 	ldw	r2,-16(fp)
}
   265c4:	e037883a 	mov	sp,fp
   265c8:	dfc00117 	ldw	ra,4(sp)
   265cc:	df000017 	ldw	fp,0(sp)
   265d0:	dec00204 	addi	sp,sp,8
   265d4:	f800283a 	ret

000265d8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   265d8:	defffb04 	addi	sp,sp,-20
   265dc:	df000415 	stw	fp,16(sp)
   265e0:	df000404 	addi	fp,sp,16
   265e4:	e13ffe15 	stw	r4,-8(fp)
   265e8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   265ec:	e0bfff17 	ldw	r2,-4(fp)
   265f0:	10840070 	cmpltui	r2,r2,4097
   265f4:	1000021e 	bne	r2,zero,26600 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   265f8:	00840004 	movi	r2,4096
   265fc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   26600:	e0fffe17 	ldw	r3,-8(fp)
   26604:	e0bfff17 	ldw	r2,-4(fp)
   26608:	1885883a 	add	r2,r3,r2
   2660c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   26610:	e0bffe17 	ldw	r2,-8(fp)
   26614:	e0bffc15 	stw	r2,-16(fp)
   26618:	00000506 	br	26630 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   2661c:	e0bffc17 	ldw	r2,-16(fp)
   26620:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   26624:	e0bffc17 	ldw	r2,-16(fp)
   26628:	10800804 	addi	r2,r2,32
   2662c:	e0bffc15 	stw	r2,-16(fp)
   26630:	e0fffc17 	ldw	r3,-16(fp)
   26634:	e0bffd17 	ldw	r2,-12(fp)
   26638:	18bff836 	bltu	r3,r2,2661c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf702661c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   2663c:	e0bffe17 	ldw	r2,-8(fp)
   26640:	108007cc 	andi	r2,r2,31
   26644:	10000226 	beq	r2,zero,26650 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   26648:	e0bffc17 	ldw	r2,-16(fp)
   2664c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   26650:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   26654:	0001883a 	nop
   26658:	e037883a 	mov	sp,fp
   2665c:	df000017 	ldw	fp,0(sp)
   26660:	dec00104 	addi	sp,sp,4
   26664:	f800283a 	ret

00026668 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   26668:	defffe04 	addi	sp,sp,-8
   2666c:	df000115 	stw	fp,4(sp)
   26670:	df000104 	addi	fp,sp,4
   26674:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   26678:	e0bfff17 	ldw	r2,-4(fp)
   2667c:	10bffe84 	addi	r2,r2,-6
   26680:	10c00428 	cmpgeui	r3,r2,16
   26684:	18001a1e 	bne	r3,zero,266f0 <alt_exception_cause_generated_bad_addr+0x88>
   26688:	100690ba 	slli	r3,r2,2
   2668c:	008000b4 	movhi	r2,2
   26690:	1099a804 	addi	r2,r2,26272
   26694:	1885883a 	add	r2,r3,r2
   26698:	10800017 	ldw	r2,0(r2)
   2669c:	1000683a 	jmp	r2
   266a0:	000266e0 	cmpeqi	zero,zero,2459
   266a4:	000266e0 	cmpeqi	zero,zero,2459
   266a8:	000266f0 	cmpltui	zero,zero,2459
   266ac:	000266f0 	cmpltui	zero,zero,2459
   266b0:	000266f0 	cmpltui	zero,zero,2459
   266b4:	000266e0 	cmpeqi	zero,zero,2459
   266b8:	000266e8 	cmpgeui	zero,zero,2459
   266bc:	000266f0 	cmpltui	zero,zero,2459
   266c0:	000266e0 	cmpeqi	zero,zero,2459
   266c4:	000266e0 	cmpeqi	zero,zero,2459
   266c8:	000266f0 	cmpltui	zero,zero,2459
   266cc:	000266e0 	cmpeqi	zero,zero,2459
   266d0:	000266e8 	cmpgeui	zero,zero,2459
   266d4:	000266f0 	cmpltui	zero,zero,2459
   266d8:	000266f0 	cmpltui	zero,zero,2459
   266dc:	000266e0 	cmpeqi	zero,zero,2459
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   266e0:	00800044 	movi	r2,1
   266e4:	00000306 	br	266f4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   266e8:	0005883a 	mov	r2,zero
   266ec:	00000106 	br	266f4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   266f0:	0005883a 	mov	r2,zero
  }
}
   266f4:	e037883a 	mov	sp,fp
   266f8:	df000017 	ldw	fp,0(sp)
   266fc:	dec00104 	addi	sp,sp,4
   26700:	f800283a 	ret

00026704 <atexit>:
   26704:	200b883a 	mov	r5,r4
   26708:	000f883a 	mov	r7,zero
   2670c:	000d883a 	mov	r6,zero
   26710:	0009883a 	mov	r4,zero
   26714:	00267cc1 	jmpi	267cc <__register_exitproc>

00026718 <exit>:
   26718:	defffe04 	addi	sp,sp,-8
   2671c:	000b883a 	mov	r5,zero
   26720:	dc000015 	stw	r16,0(sp)
   26724:	dfc00115 	stw	ra,4(sp)
   26728:	2021883a 	mov	r16,r4
   2672c:	00268e40 	call	268e4 <__call_exitprocs>
   26730:	008000f4 	movhi	r2,3
   26734:	10a9b304 	addi	r2,r2,-22836
   26738:	11000017 	ldw	r4,0(r2)
   2673c:	20800f17 	ldw	r2,60(r4)
   26740:	10000126 	beq	r2,zero,26748 <exit+0x30>
   26744:	103ee83a 	callr	r2
   26748:	8009883a 	mov	r4,r16
   2674c:	001a8080 	call	1a808 <_exit>

00026750 <memcmp>:
   26750:	01c000c4 	movi	r7,3
   26754:	3980192e 	bgeu	r7,r6,267bc <memcmp+0x6c>
   26758:	2144b03a 	or	r2,r4,r5
   2675c:	11c4703a 	and	r2,r2,r7
   26760:	10000f26 	beq	r2,zero,267a0 <memcmp+0x50>
   26764:	20800003 	ldbu	r2,0(r4)
   26768:	28c00003 	ldbu	r3,0(r5)
   2676c:	10c0151e 	bne	r2,r3,267c4 <memcmp+0x74>
   26770:	31bfff84 	addi	r6,r6,-2
   26774:	01ffffc4 	movi	r7,-1
   26778:	00000406 	br	2678c <memcmp+0x3c>
   2677c:	20800003 	ldbu	r2,0(r4)
   26780:	28c00003 	ldbu	r3,0(r5)
   26784:	31bfffc4 	addi	r6,r6,-1
   26788:	10c00e1e 	bne	r2,r3,267c4 <memcmp+0x74>
   2678c:	21000044 	addi	r4,r4,1
   26790:	29400044 	addi	r5,r5,1
   26794:	31fff91e 	bne	r6,r7,2677c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf702677c>
   26798:	0005883a 	mov	r2,zero
   2679c:	f800283a 	ret
   267a0:	20c00017 	ldw	r3,0(r4)
   267a4:	28800017 	ldw	r2,0(r5)
   267a8:	18bfee1e 	bne	r3,r2,26764 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7026764>
   267ac:	31bfff04 	addi	r6,r6,-4
   267b0:	21000104 	addi	r4,r4,4
   267b4:	29400104 	addi	r5,r5,4
   267b8:	39bff936 	bltu	r7,r6,267a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70267a0>
   267bc:	303fe91e 	bne	r6,zero,26764 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7026764>
   267c0:	003ff506 	br	26798 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7026798>
   267c4:	10c5c83a 	sub	r2,r2,r3
   267c8:	f800283a 	ret

000267cc <__register_exitproc>:
   267cc:	defffa04 	addi	sp,sp,-24
   267d0:	dc000315 	stw	r16,12(sp)
   267d4:	040000f4 	movhi	r16,3
   267d8:	8429b304 	addi	r16,r16,-22836
   267dc:	80c00017 	ldw	r3,0(r16)
   267e0:	dc400415 	stw	r17,16(sp)
   267e4:	dfc00515 	stw	ra,20(sp)
   267e8:	18805217 	ldw	r2,328(r3)
   267ec:	2023883a 	mov	r17,r4
   267f0:	10003726 	beq	r2,zero,268d0 <__register_exitproc+0x104>
   267f4:	10c00117 	ldw	r3,4(r2)
   267f8:	010007c4 	movi	r4,31
   267fc:	20c00e16 	blt	r4,r3,26838 <__register_exitproc+0x6c>
   26800:	1a000044 	addi	r8,r3,1
   26804:	8800221e 	bne	r17,zero,26890 <__register_exitproc+0xc4>
   26808:	18c00084 	addi	r3,r3,2
   2680c:	18c7883a 	add	r3,r3,r3
   26810:	18c7883a 	add	r3,r3,r3
   26814:	12000115 	stw	r8,4(r2)
   26818:	10c7883a 	add	r3,r2,r3
   2681c:	19400015 	stw	r5,0(r3)
   26820:	0005883a 	mov	r2,zero
   26824:	dfc00517 	ldw	ra,20(sp)
   26828:	dc400417 	ldw	r17,16(sp)
   2682c:	dc000317 	ldw	r16,12(sp)
   26830:	dec00604 	addi	sp,sp,24
   26834:	f800283a 	ret
   26838:	00800074 	movhi	r2,1
   2683c:	10b2d304 	addi	r2,r2,-13492
   26840:	10002626 	beq	r2,zero,268dc <__register_exitproc+0x110>
   26844:	01006404 	movi	r4,400
   26848:	d9400015 	stw	r5,0(sp)
   2684c:	d9800115 	stw	r6,4(sp)
   26850:	d9c00215 	stw	r7,8(sp)
   26854:	000cb4c0 	call	cb4c <malloc>
   26858:	d9400017 	ldw	r5,0(sp)
   2685c:	d9800117 	ldw	r6,4(sp)
   26860:	d9c00217 	ldw	r7,8(sp)
   26864:	10001d26 	beq	r2,zero,268dc <__register_exitproc+0x110>
   26868:	81000017 	ldw	r4,0(r16)
   2686c:	10000115 	stw	zero,4(r2)
   26870:	02000044 	movi	r8,1
   26874:	22405217 	ldw	r9,328(r4)
   26878:	0007883a 	mov	r3,zero
   2687c:	12400015 	stw	r9,0(r2)
   26880:	20805215 	stw	r2,328(r4)
   26884:	10006215 	stw	zero,392(r2)
   26888:	10006315 	stw	zero,396(r2)
   2688c:	883fde26 	beq	r17,zero,26808 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7026808>
   26890:	18c9883a 	add	r4,r3,r3
   26894:	2109883a 	add	r4,r4,r4
   26898:	1109883a 	add	r4,r2,r4
   2689c:	21802215 	stw	r6,136(r4)
   268a0:	01800044 	movi	r6,1
   268a4:	12406217 	ldw	r9,392(r2)
   268a8:	30cc983a 	sll	r6,r6,r3
   268ac:	4992b03a 	or	r9,r9,r6
   268b0:	12406215 	stw	r9,392(r2)
   268b4:	21c04215 	stw	r7,264(r4)
   268b8:	01000084 	movi	r4,2
   268bc:	893fd21e 	bne	r17,r4,26808 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7026808>
   268c0:	11006317 	ldw	r4,396(r2)
   268c4:	218cb03a 	or	r6,r4,r6
   268c8:	11806315 	stw	r6,396(r2)
   268cc:	003fce06 	br	26808 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7026808>
   268d0:	18805304 	addi	r2,r3,332
   268d4:	18805215 	stw	r2,328(r3)
   268d8:	003fc606 	br	267f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70267f4>
   268dc:	00bfffc4 	movi	r2,-1
   268e0:	003fd006 	br	26824 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7026824>

000268e4 <__call_exitprocs>:
   268e4:	defff504 	addi	sp,sp,-44
   268e8:	df000915 	stw	fp,36(sp)
   268ec:	dd400615 	stw	r21,24(sp)
   268f0:	dc800315 	stw	r18,12(sp)
   268f4:	dfc00a15 	stw	ra,40(sp)
   268f8:	ddc00815 	stw	r23,32(sp)
   268fc:	dd800715 	stw	r22,28(sp)
   26900:	dd000515 	stw	r20,20(sp)
   26904:	dcc00415 	stw	r19,16(sp)
   26908:	dc400215 	stw	r17,8(sp)
   2690c:	dc000115 	stw	r16,4(sp)
   26910:	d9000015 	stw	r4,0(sp)
   26914:	2839883a 	mov	fp,r5
   26918:	04800044 	movi	r18,1
   2691c:	057fffc4 	movi	r21,-1
   26920:	008000f4 	movhi	r2,3
   26924:	10a9b304 	addi	r2,r2,-22836
   26928:	12000017 	ldw	r8,0(r2)
   2692c:	45005217 	ldw	r20,328(r8)
   26930:	44c05204 	addi	r19,r8,328
   26934:	a0001c26 	beq	r20,zero,269a8 <__call_exitprocs+0xc4>
   26938:	a0800117 	ldw	r2,4(r20)
   2693c:	15ffffc4 	addi	r23,r2,-1
   26940:	b8000d16 	blt	r23,zero,26978 <__call_exitprocs+0x94>
   26944:	14000044 	addi	r16,r2,1
   26948:	8421883a 	add	r16,r16,r16
   2694c:	8421883a 	add	r16,r16,r16
   26950:	84402004 	addi	r17,r16,128
   26954:	a463883a 	add	r17,r20,r17
   26958:	a421883a 	add	r16,r20,r16
   2695c:	e0001e26 	beq	fp,zero,269d8 <__call_exitprocs+0xf4>
   26960:	80804017 	ldw	r2,256(r16)
   26964:	e0801c26 	beq	fp,r2,269d8 <__call_exitprocs+0xf4>
   26968:	bdffffc4 	addi	r23,r23,-1
   2696c:	843fff04 	addi	r16,r16,-4
   26970:	8c7fff04 	addi	r17,r17,-4
   26974:	bd7ff91e 	bne	r23,r21,2695c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf702695c>
   26978:	00800074 	movhi	r2,1
   2697c:	10b2d804 	addi	r2,r2,-13472
   26980:	10000926 	beq	r2,zero,269a8 <__call_exitprocs+0xc4>
   26984:	a0800117 	ldw	r2,4(r20)
   26988:	1000301e 	bne	r2,zero,26a4c <__call_exitprocs+0x168>
   2698c:	a0800017 	ldw	r2,0(r20)
   26990:	10003226 	beq	r2,zero,26a5c <__call_exitprocs+0x178>
   26994:	a009883a 	mov	r4,r20
   26998:	98800015 	stw	r2,0(r19)
   2699c:	000cb600 	call	cb60 <free>
   269a0:	9d000017 	ldw	r20,0(r19)
   269a4:	a03fe41e 	bne	r20,zero,26938 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7026938>
   269a8:	dfc00a17 	ldw	ra,40(sp)
   269ac:	df000917 	ldw	fp,36(sp)
   269b0:	ddc00817 	ldw	r23,32(sp)
   269b4:	dd800717 	ldw	r22,28(sp)
   269b8:	dd400617 	ldw	r21,24(sp)
   269bc:	dd000517 	ldw	r20,20(sp)
   269c0:	dcc00417 	ldw	r19,16(sp)
   269c4:	dc800317 	ldw	r18,12(sp)
   269c8:	dc400217 	ldw	r17,8(sp)
   269cc:	dc000117 	ldw	r16,4(sp)
   269d0:	dec00b04 	addi	sp,sp,44
   269d4:	f800283a 	ret
   269d8:	a0800117 	ldw	r2,4(r20)
   269dc:	80c00017 	ldw	r3,0(r16)
   269e0:	10bfffc4 	addi	r2,r2,-1
   269e4:	15c01426 	beq	r2,r23,26a38 <__call_exitprocs+0x154>
   269e8:	80000015 	stw	zero,0(r16)
   269ec:	183fde26 	beq	r3,zero,26968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7026968>
   269f0:	95c8983a 	sll	r4,r18,r23
   269f4:	a0806217 	ldw	r2,392(r20)
   269f8:	a5800117 	ldw	r22,4(r20)
   269fc:	2084703a 	and	r2,r4,r2
   26a00:	10000b26 	beq	r2,zero,26a30 <__call_exitprocs+0x14c>
   26a04:	a0806317 	ldw	r2,396(r20)
   26a08:	2088703a 	and	r4,r4,r2
   26a0c:	20000c1e 	bne	r4,zero,26a40 <__call_exitprocs+0x15c>
   26a10:	89400017 	ldw	r5,0(r17)
   26a14:	d9000017 	ldw	r4,0(sp)
   26a18:	183ee83a 	callr	r3
   26a1c:	a0800117 	ldw	r2,4(r20)
   26a20:	15bfbf1e 	bne	r2,r22,26920 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7026920>
   26a24:	98800017 	ldw	r2,0(r19)
   26a28:	153fcf26 	beq	r2,r20,26968 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7026968>
   26a2c:	003fbc06 	br	26920 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7026920>
   26a30:	183ee83a 	callr	r3
   26a34:	003ff906 	br	26a1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7026a1c>
   26a38:	a5c00115 	stw	r23,4(r20)
   26a3c:	003feb06 	br	269ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70269ec>
   26a40:	89000017 	ldw	r4,0(r17)
   26a44:	183ee83a 	callr	r3
   26a48:	003ff406 	br	26a1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7026a1c>
   26a4c:	a0800017 	ldw	r2,0(r20)
   26a50:	a027883a 	mov	r19,r20
   26a54:	1029883a 	mov	r20,r2
   26a58:	003fb606 	br	26934 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7026934>
   26a5c:	0005883a 	mov	r2,zero
   26a60:	003ffb06 	br	26a50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7026a50>
   26a64:	01110bff 	0x1110bff
   26a68:	01010004 	movi	r4,1024
   26a6c:	7f000105 	stb	fp,4(r15)
   26a70:	007d0000 	call	7d000 <__alt_heap_start+0x414a8>
   26a74:	00000000 	call	0 <__alt_mem_SDRAM>
   26a78:	01883a00 	call	1883a0 <__alt_heap_start+0x14c848>
   26a7c:	010d0bff 	0x10d0bff
   26a80:	01010002 	0x1010002
	...
   26a8c:	010d0bff 	0x10d0bff
   26a90:	01010004 	movi	r4,1024
   26a94:	00000100 	call	10 <__alt_mem_SDRAM+0x10>
   26a98:	00000000 	call	0 <__alt_mem_SDRAM>
   26a9c:	000075f4 	movhi	zero,471
