
Pac-Man.elf:     file format elf32-littlenios2
Pac-Man.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000248

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00025010 memsz 0x00025010 flags r-x
    LOAD off    0x00026030 vaddr 0x00025030 paddr 0x00026ff0 align 2**12
         filesz 0x00001fc0 memsz 0x00001fc0 flags rw-
    LOAD off    0x00028fb0 vaddr 0x00028fb0 paddr 0x00028fb0 align 2**12
         filesz 0x00000000 memsz 0x0000f404 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000232c4  00000248  00000248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001b24  0002350c  0002350c  0002450c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001fc0  00025030  00026ff0  00026030  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000f404  00028fb0  00028fb0  00028fb0  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  000383b4  000383b4  00027ff0  2**0
                  CONTENTS
  7 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM 00000000  09000000  09000000  00027ff0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00027ff0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001770  00000000  00000000  00028018  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00040e3d  00000000  00000000  00029788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000106af  00000000  00000000  0006a5c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001507e  00000000  00000000  0007ac74  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00004fc0  00000000  00000000  0008fcf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000095c2  00000000  00000000  00094cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00021d3d  00000000  00000000  0009e276  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  000bffb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002558  00000000  00000000  000bffd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000ca602  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000ca608  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000ca60d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000ca60e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000ca60f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000ca613  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000ca617  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000ca61b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000ca624  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000ca62d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  000ca636  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000061  00000000  00000000  000ca641  2**0
                  CONTENTS, READONLY
 30 .jdi          0000abe3  00000000  00000000  000ca6a2  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     001ae257  00000000  00000000  000d5285  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000248 l    d  .text	00000000 .text
0002350c l    d  .rodata	00000000 .rodata
00025030 l    d  .rwdata	00000000 .rwdata
00028fb0 l    d  .bss	00000000 .bss
000383b4 l    d  .SDRAM	00000000 .SDRAM
09000000 l    d  .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM	00000000 .VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Pac-Man_bsp//obj/HAL/src/crt0.o
00000280 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ControllerInterface.cpp
00000000 l    df *ABS*	00000000 Entity.cpp
00000000 l    df *ABS*	00000000 Game.cpp
000006d8 l     F .text	00000078 _ZL11buttonToDir8button_t
00000000 l    df *ABS*	00000000 Keyboard.cpp
00000000 l    df *ABS*	00000000 PacMan.cpp
00000000 l    df *ABS*	00000000 VGA.cpp
00000000 l    df *ABS*	00000000 VideoInterface.cpp
00000000 l    df *ABS*	00000000 font.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
00004864 l     F .text	000000a4 _ZL21size_of_encoded_valueh
00004908 l     F .text	0000020c _ZL28read_encoded_value_with_basehjPKhPj
00004b14 l     F .text	00000054 _ZL15get_ttype_entryP16lsda_header_infom
00004b68 l     F .text	0000008c _ZL21base_of_encoded_valuehP15_Unwind_Context
00004bf4 l     F .text	00000134 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
00004d28 l     F .text	00000088 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
00004db0 l     F .text	000001c0 _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
00004f70 l     F .text	000000a8 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
000059d8 l     F .text	00000044 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
00005b88 l     F .text	000000b8 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
00035058 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
00005c40 l     F .text	000000a8 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
00005df0 l     F .text	0000005c _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
00028fb0 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 s_round.c
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
00007318 l     F .text	00000118 _Unwind_ForcedUnwind_Phase2
00028fb8 l     O .bss	00000004 fc_static
00007430 l     F .text	000000c0 _Unwind_RaiseException_Phase2
000074f0 l     F .text	00000030 uw_install_context.isra.1
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00024b7a l     O .rodata	00000010 zeroes.4389
00024b8a l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
00024b9a l     O .rodata	00000010 zeroes.4404
0000ce14 l     F .text	000000bc __sbprintf
00024baa l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0000d024 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0000eb54 l     F .text	00000008 __fp_unlock
0000eb68 l     F .text	0000019c __sinit.part.1
0000ed04 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00025438 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0002587c l     O .rwdata	00000020 lc_ctype_charset
0002585c l     O .rwdata	00000020 lc_message_charset
0002589c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00024bdc l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
00024d10 l     O .rodata	00000010 blanks.4332
00024d00 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 vfprintf.c
00012960 l     F .text	000000fc __sprint_r.part.0
00024d30 l     O .rodata	00000010 blanks.4348
00024d20 l     O .rodata	00000010 zeroes.4349
00013eec l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0001713c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00017248 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000172a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
000173b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
00017494 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00017600 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000176ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
000178b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00026f64 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00017b04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00026f68 l     O .rwdata	00000004 lockid
00028fe8 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00026f6c l     O .rwdata	00000004 lockid
00028ff0 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00019534 l     F .text	00000048 OS_InitMisc
0001957c l     F .text	0000006c OS_InitRdyList
000196e8 l     F .text	000000e4 OS_InitTCBList
00019454 l     F .text	000000e0 OS_InitEventList
000195e8 l     F .text	00000080 OS_InitTaskIdle
00019668 l     F .text	00000080 OS_InitTaskStat
00019958 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0001b678 l     F .text	000000f4 OS_FlagTaskRdy
0001b438 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001f728 l     F .text	00000034 alt_dev_reg
00025a7c l     O .rwdata	0000106c JTAG_UART
00026ae8 l     O .rwdata	00000030 AV_Config
00026b18 l     O .rwdata	00000030 Audio_Subsystem_Audio
00026b48 l     O .rwdata	0000002c Char_LCD_16x2
00026b74 l     O .rwdata	0000002c IrDA
00026ba0 l     O .rwdata	0000002c Expansion_JP5
00026bcc l     O .rwdata	0000002c Green_LEDs
00026bf8 l     O .rwdata	0000002c HEX3_HEX0
00026c24 l     O .rwdata	0000002c HEX7_HEX4
00026c50 l     O .rwdata	0000002c Pushbuttons
00026c7c l     O .rwdata	0000002c Red_LEDs
00026ca8 l     O .rwdata	0000002c Slider_Switches
00026cd4 l     O .rwdata	00000038 PS2_Port
00026d0c l     O .rwdata	00000038 PS2_Port_Dual
00026d44 l     O .rwdata	0000002c Serial_Port
00026d70 l     O .rwdata	00000034 USB
00026da4 l     O .rwdata	0000005c VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA
00026e00 l     O .rwdata	0000005c Video_In_Subsystem_Video_In_DMA
00026e5c l     O .rwdata	00000054 VGA_Subsystem_VGA_Pixel_DMA
00026eb0 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00020248 l     F .text	000002a8 altera_avalon_jtag_uart_irq
000204f0 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00020ccc l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000221c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002242c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000226ec l     F .text	0000003c alt_get_errno
00022728 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00029054 g     O .bss	00000004 alt_instruction_exception_handler
00005d48 g     F .text	00000028 __cxa_free_exception
00004680 g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
00010cc8 g     F .text	00000074 _mprec_log10
00003550 g     F .text	00000054 _ZN14VideoInterface9drawPixelEii
00004804 g     F .text	00000018 _ZSt10unexpectedv
00001890 g     F .text	000001a4 _ZN4Game9drawScoreEv
00026fba g     O .rwdata	00000002 OSTaskNameSize
00010db4 g     F .text	0000008c __any_on
00014488 g     F .text	00000054 _isatty_r
00024be8 g     O .rodata	00000028 __mprec_tinytens
000015ac g     F .text	000000a4 _ZN4Game8drawTextEiiPc
000177fc g     F .text	000000bc alt_main
000083c4 g     F .text	000000c0 _puts_r
000382b4 g     O .bss	00000100 alt_irq
00021888 g     F .text	00000060 alt_up_ps2_disable_read_interrupt
00005e74 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD1Ev
000144dc g     F .text	00000060 _lseek_r
0001be98 g     F .text	000000cc OS_MemInit
000075ac g     F .text	00000020 .hidden _Unwind_GetIPInfo
00026ff0 g       *ABS*	00000000 __flash_rwdata_start
0001f6c8 g     F .text	00000060 OSTimeSet
00020e30 g     F .text	00000040 alt_up_character_lcd_send_cmd
00015e28 g     F .text	00000088 .hidden __eqdf2
00005aac g     F .text	00000084 __cxa_rethrow
00007538 g     F .text	00000014 .hidden _Unwind_SjLj_Unregister
00004840 g     F .text	00000014 _ZSt14set_unexpectedPFvvE
000181a8 g     F .text	00000610 OSEventPendMulti
0000405c g     F .text	00000054 _Z9inputLoopPv
0000759c g     F .text	00000010 .hidden _Unwind_GetIP
000383b4 g       *ABS*	00000000 __alt_heap_start
00022d34 g     F .text	00000024 OSTaskCreateHook
00029058 g     O .bss	00004000 task1_stk
00008790 g     F .text	0000005c _kill_r
00008388 g     F .text	0000003c printf
00026f92 g     O .rwdata	00000002 OSMboxEn
00018810 g     F .text	0000004c OSIntEnter
000146f4 g     F .text	0000009c _wcrtomb_r
00008558 g     F .text	00000084 _signal_r
000114f0 g     F .text	0000005c __sseek
0000eea4 g     F .text	00000010 __sinit
0001459c g     F .text	00000140 __swbuf_r
000216a0 g     F .text	00000034 read_CE_bit
00005dc4 g     F .text	0000002c __cxa_free_dependent_exception
00026fa2 g     O .rwdata	00000002 OSQEn
000040f0 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
0000f96c g     F .text	0000007c _setlocale_r
00024824  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
0000ed0c g     F .text	00000068 __sfmoreglue
00017e7c g     F .text	000000cc __malloc_unlock
00005e9c g     F .text	00000100 round
000005f0 g     F .text	000000e8 _ZN4GameC1EP19ControllerInterfaceP14VideoInterface
00022d9c g     F .text	00000020 OSTaskStatHook
00021a28 g     F .text	0000009c alt_up_ps2_read_data_byte_timeout
00021f1c g     F .text	00000090 alt_up_rs232_read_fd
00005e74 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD2Ev
00028ff8 g     O .bss	00000001 OSLockNesting
000059b8 g     F .text	00000020 _ZSt18uncaught_exceptionv
00026fe0 g     O .rwdata	00000002 OSDataSize
00028ff9 g     O .bss	00000001 OSRunning
000046f8 g     F .text	00000020 __cxa_deleted_virtual
0000fce8 g     F .text	0000015c memmove
00022ddc g     F .text	00000020 OSInitHookBegin
00026fd8 g     O .rwdata	00000002 OSTmrSize
00005e4c g     F .text	00000004 _ZNSt9exceptionD2Ev
0000ee8c g     F .text	00000018 _cleanup
0000fe44 g     F .text	000000a8 _Balloc
0000666c g     F .text	00000070 .hidden __fixsfsi
00003788 g     F .text	00000064 _ZN14VideoInterface8drawLineEiiii
00028ffc g     O .bss	00000004 OSIdleCtr
00015eb0 g     F .text	000000dc .hidden __gtdf2
000249f8  w    O .rodata	00000014 _ZTVSt13bad_exception
00022ae4 g     F .text	00000024 altera_nios2_gen2_irq_init
00022bb4 g       .text	00000000 OSStartTsk
00020dbc g     F .text	00000074 get_DDRAM_addr
00019c98 g     F .text	000002d4 OS_TCBInit
00000000 g     F .entry	0000001c __reset
000075e8 g     F .text	00000008 .hidden _Unwind_GetRegionStart
00026fde g     O .rwdata	00000002 OSTmrWheelTblSize
00000020 g       *ABS*	00000000 __flash_exceptions_start
00026f7e g     O .rwdata	00000002 OSEventSize
00003b64 g     F .text	0000034c _ZN14VideoInterface18_drawLineBRESENHAMEiiiit
00029000 g     O .bss	00000001 OSPrioHighRdy
0001442c g     F .text	0000005c _fstat_r
00022d58 g     F .text	00000024 OSTaskDelHook
00028fc8 g     O .bss	00000004 errno
0001146c g     F .text	00000008 __seofread
00022b94 g       .text	00000000 OSStartHighRdy
0001e164 g     F .text	000001e4 OSTaskCreateExt
00011724 g     F .text	0000123c ___svfiprintf_internal_r
0001af80 g     F .text	00000060 OSFlagPendGetFlagsRdy
00026fbe g     O .rwdata	00000002 OSTaskStatStkSize
000077c4 g     F .text	00000074 .hidden _Unwind_Backtrace
0001a0fc g     F .text	00000308 OSFlagAccept
0001c4d0 g     F .text	000000b8 OSQFlush
0001bf64 g     F .text	00000140 OSQAccept
00028fe0 g     O .bss	00000004 alt_argv
0002eedc g       *ABS*	00000000 _gp
000002c0 g     F .text	00000038 _ZN19ControllerInterface15getActiveButtonEv
0000369c g     F .text	000000b8 _ZN14VideoInterface5clearEt
0001dfb8 g     F .text	000001ac OSTaskCreate
0001dac8 g     F .text	000004f0 OSTaskChangePrio
00028ff4 g     O .bss	00000004 alt_heapsem
00017394 g     F .text	00000020 getpid
00023ef4  w    O .rodata	0000000a _ZTS8Keyboard
00019f6c g     F .text	00000190 OSDebugInit
00005618 g     F .text	00000230 __cxa_call_unexpected
0001e348 g     F .text	00000344 OSTaskDel
00005848 g     F .text	00000008 __cxa_get_exception_ptr
000258fc g     O .rwdata	00000180 alt_fd_list
00035090 g     O .bss	00000370 OSFlagTbl
000076d8 g     F .text	00000044 .hidden _Unwind_SjLj_ForcedUnwind
00019234 g     F .text	000000b8 OS_EventTaskRemove
00007568 g     F .text	00000018 .hidden _Unwind_GetCFA
0000481c g     F .text	00000014 _ZSt13set_terminatePFvvE
00022368 g     F .text	00000090 alt_find_dev
000080e8 g     F .text	00000148 memcpy
00003074 g     F .text	00000214 _ZN6PacMan5_drawEP14VideoInterface
00026fa8 g     O .rwdata	00000002 OSRdyTblSize
00020fd8 g     F .text	00000050 alt_up_character_lcd_write_fd
00005d70 g     F .text	00000054 __cxa_allocate_dependent_exception
00001a34 g     F .text	00001184 _ZN4Game7drawMapEv
0000eb5c g     F .text	0000000c _cleanup_r
0000442c g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0000712c g     F .text	000000dc .hidden __floatsidf
000224f0 g     F .text	0000007c alt_io_redirect
00015f8c g     F .text	000000f4 .hidden __ltdf2
0002350c g       *ABS*	00000000 __DTOR_END__
00004444 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
00021570 g     F .text	00000090 alt_up_irda_write_fd
00021ea8 g     F .text	00000074 alt_up_rs232_read_data
00008484 g     F .text	00000014 puts
000230d4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0000037c g     F .text	0000007c _ZN6Entity6updateEi
00017f48 g     F .text	00000120 OSEventNameGet
00026f8c g     O .rwdata	00000002 OSFlagMax
00003890 g     F .text	00000064 _ZN14VideoInterface8drawRectEiiii
000113a4 g     F .text	00000074 __fpclassifyd
00010c24 g     F .text	000000a4 __ratio
0001885c g     F .text	000000f8 OSIntExit
00013ed0 g     F .text	0000001c __vfiprintf_internal
00003288 g     F .text	000000ec _ZN6PacMan7_updateEi
00026fc6 g     O .rwdata	00000002 OSTCBSize
00029001 g     O .bss	00000001 OSPrioCur
0002136c g     F .text	00000040 alt_up_irda_get_used_space_in_read_FIFO
0002074c g     F .text	000002bc altera_avalon_jtag_uart_read
000078b4 g     F .text	00000014 malloc
00008358 g     F .text	00000030 _printf_r
00015484 g     F .text	00000064 .hidden __udivsi3
00005f9c g     F .text	00000084 roundf
000173f0 g     F .text	000000a4 isatty
000085dc g     F .text	000000bc _raise_r
00026fac g     O .rwdata	00000002 OSStkWidth
00024c38 g     O .rodata	000000c8 __mprec_tens
00026fa0 g     O .rwdata	00000002 OSPtrSize
00000a58 g     F .text	000002b0 _ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_
0000f9e8 g     F .text	0000000c __locale_charset
000065a4 g     F .text	000000c8 .hidden __lesf2
00026f80 g     O .rwdata	00000002 OSEventTblSize
0002130c g     F .text	00000060 alt_up_irda_disable_read_interrupt
000033e0 g     F .text	00000070 _ZN3VGA18_internalDrawPixelEiit
00022b08 g       .text	00000000 OSCtxSw
00023044 g     F .text	00000090 alt_icache_flush
00028fc4 g     O .bss	00000004 __malloc_top_pad
00029004 g     O .bss	00000004 OSTCBList
000087ec g     F .text	00000004 _getpid_r
00028fd8 g     O .bss	00000004 alt_fd_list_lock
00002dd4 g     F .text	000000d8 _ZN6PacManC2Eii
00026f44 g     O .rwdata	00000004 __mb_cur_max
0000fa18 g     F .text	0000000c _localeconv_r
00010250 g     F .text	0000003c __i2b
0000f328 g     F .text	000004bc __sfvwrite_r
000045c4 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
00008698 g     F .text	000000a8 __sigtramp_r
00035400 g     O .bss	00000c30 OSMemTbl
00029008 g     O .bss	00000001 OSTickStepState
00003374 g     F .text	0000006c _ZN3VGAC2EPsiii
00008498 g     F .text	00000054 _sbrk_r
00002c7c g     F .text	00000158 _ZN8Keyboard6updateEv
000248f0  w    O .rodata	00000020 _ZTVSt9type_info
00026fa4 g     O .rwdata	00000002 OSQMax
00036030 g     O .bss	00000800 OSTaskStatStk
0001bad4 g     F .text	000000f0 OSMemNameGet
00026f84 g     O .rwdata	00000002 OSFlagEn
0001453c g     F .text	00000060 _read_r
00005e54 g     F .text	0000000c _ZNKSt9exception4whatEv
00026fca g     O .rwdata	00000002 OSTimeTickHookEn
0001c980 g     F .text	00000168 OSQPost
0001b76c g     F .text	000000a4 OS_FlagUnlink
00026f5c g     O .rwdata	00000004 alt_max_fd
00021e24 g     F .text	00000044 alt_up_rs232_check_parity
00019820 g     F .text	00000068 OS_MemCopy
00003664 g     F .text	00000038 _ZN14VideoInterface8setColorEt
00019888 g     F .text	000000d0 OS_Sched
00014120 g     F .text	000000f0 _fclose_r
0001b9e4 g     F .text	000000f0 OSMemGet
0001e974 g     F .text	000001b4 OSTaskNameSet
000216d4 g     F .text	00000030 read_num_bytes_available
0000eb24 g     F .text	00000030 fflush
00028fc0 g     O .bss	00000004 __malloc_max_sbrked_mem
0002900c g     O .bss	00000004 OSCtxSwCtr
00022dbc g     F .text	00000020 OSTimeTickHook
0002256c g     F .text	00000180 alt_irq_register
00026f8e g     O .rwdata	00000002 OSFlagNameSize
0002163c g     F .text	00000034 read_RI_bit
00007208 g     F .text	00000110 .hidden __extendsfdf2
000192ec g     F .text	00000100 OS_EventTaskRemoveMulti
00006800 g     F .text	000008ac .hidden __adddf3
00024858  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
000190e4 g     F .text	00000150 OS_EventTaskWaitMulti
000109cc g     F .text	0000010c __b2d
00026fa6 g     O .rwdata	00000002 OSQSize
00024104 g     O .rodata	000004fa bmp_letters
00014e54 g     F .text	00000538 .hidden __umoddi3
00017728 g     F .text	000000d4 lseek
0001d430 g     F .text	0000020c OSSemPend
00004488 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
00004718 g     F .text	00000004 _ZdlPv
00026f3c g     O .rwdata	00000004 _global_impure_ptr
00010e40 g     F .text	00000564 _realloc_r
00026f90 g     O .rwdata	00000002 OSLowestPrio
000383b4 g       *ABS*	00000000 __bss_end
00022e3c g     F .text	00000024 OSTCBInitHook
00026fd6 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
000229dc g     F .text	00000108 alt_tick
00007520 g     F .text	00000018 .hidden _Unwind_SjLj_Register
000148dc g     F .text	00000578 .hidden __udivdi3
00003450 g     F .text	00000080 _ZN14VideoInterfaceC2Eiii
00014388 g     F .text	00000024 _fputwc_r
00026f78 g     O .rwdata	00000002 OSEventEn
00024c10 g     O .rodata	00000028 __mprec_bigtens
00010034 g     F .text	00000104 __s2b
00026fd2 g     O .rwdata	00000002 OSTmrCfgNameSize
0000789c g     F .text	00000018 abort
00017094 g     F .text	000000a8 .hidden __floatunsidf
0001070c g     F .text	00000060 __mcmp
00021738 g     F .text	0000002c read_data_byte
00005904 g     F .text	000000b4 __cxa_end_catch
0000eec4 g     F .text	00000018 __fp_lock_all
00005e50 g     F .text	00000004 _ZNSt13bad_exceptionD2Ev
0001b598 g     F .text	000000e0 OS_FlagInit
00022940 g     F .text	0000009c alt_alarm_stop
00021670 g     F .text	00000030 read_RE_bit
00026fb4 g     O .rwdata	00000002 OSTaskIdleStkSize
00029048 g     O .bss	00000004 alt_irq_active
0001d068 g     F .text	000000b0 OSSemAccept
000047dc g     F .text	00000018 _ZSt9terminatev
0001bcd8 g     F .text	000000d8 OSMemPut
0001b810 g     F .text	000001d4 OSMemCreate
00029010 g     O .bss	00000004 OSIdleCtrMax
000213ac g     F .text	0000003c alt_up_irda_get_available_space_in_write_FIFO
000000fc g     F .exceptions	000000d8 alt_irq_handler
000258d4 g     O .rwdata	00000028 alt_dev_null
00026fc8 g     O .rwdata	00000002 OSTicksPerSec
000003f8 g     F .text	00000060 _ZN6Entity4drawEP14VideoInterface
00005e7c g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD2Ev
00026efc  w    O .rwdata	00000005 _ZTS3VGA
00021278 g     F .text	00000038 alt_up_character_lcd_cursor_blink_on
000014e8 g     F .text	000000c4 _ZN4Game8drawCharEiic
00022b08 g       .text	00000000 OSIntCtxSw
00024884  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
000218e8 g     F .text	00000074 alt_up_ps2_write_data_byte
000221a8 g     F .text	00000020 alt_dcache_flush_all
00010138 g     F .text	00000068 __hi0bits
00026f1c  w    O .rwdata	00000008 _ZTISt9exception
000070ac g     F .text	00000080 .hidden __fixdfsi
00029014 g     O .bss	00000004 OSTCBFreeList
00026ff0 g       *ABS*	00000000 __ram_rwdata_end
0001d63c g     F .text	0000016c OSSemPendAbort
0000467c g     F .text	00000004 _ZNSt9type_infoD1Ev
00026f54 g     O .rwdata	00000008 alt_dev_list
00005e7c g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD1Ev
00017b40 g     F .text	000000f8 write
00026fcc g     O .rwdata	00000002 OSVersionNbr
00004690 g     F .text	00000004 _ZNSt9type_infoD0Ev
000064e8 g     F .text	000000bc .hidden __gtsf2
000240c0  w    O .rodata	0000000c _ZTI6PacMan
000002f8 g     F .text	00000084 _ZN6EntityC2Eii
00025030 g       *ABS*	00000000 __ram_rodata_end
000172e4 g     F .text	000000b0 fstat
000005a0 g     F .text	00000028 _ZN6Entity10getCurrDirEv
00021fac g     F .text	00000094 alt_up_rs232_write_fd
000174d0 g     F .text	00000130 kill
00003eb0 g     F .text	0000008c _Z4JTAGPKc
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
00015f8c g     F .text	000000f4 .hidden __ledf2
00026f74 g     O .rwdata	00000004 OSEndiannessTest
00010484 g     F .text	00000140 __pow5mult
000004d8 g     F .text	00000050 _ZN6Entity6setPosEii
00012a74 g     F .text	0000145c ___vfiprintf_internal_r
00028fd4 g     O .bss	00000004 __nlocale_changed
000154e8 g     F .text	00000058 .hidden __umodsi3
00004688 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
00026f86 g     O .rwdata	00000002 OSFlagGrpSize
00004830 g     F .text	00000010 _ZSt13get_terminatev
000383b4 g       *ABS*	00000000 end
00021c18 g     F .text	00000098 alt_up_ps2_write_fd
00000528 g     F .text	00000028 _ZN6Entity11getVelocityEv
000213e8 g     F .text	00000044 alt_up_irda_check_parity
000077ac g     F .text	00000018 .hidden _Unwind_DeleteException
0002010c g     F .text	0000013c altera_avalon_jtag_uart_init
00019af0 g     F .text	000000dc OS_TaskStat
000001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
000044f4 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
00023508 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
00020d48 g     F .text	00000074 alt_avalon_timer_sc_init
00007838 g     F .text	00000064 .hidden __clzsi2
000043b4 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
00020a08 g     F .text	000002c4 altera_avalon_jtag_uart_write
0000eeb4 g     F .text	00000004 __sfp_lock_acquire
00024980  w    O .rodata	00000012 _ZTSSt13bad_exception
0000fc04 g     F .text	000000e4 memchr
000197cc g     F .text	00000054 OS_MemClr
00020ee4 g     F .text	0000007c alt_up_character_lcd_write
0000ac00 g     F .text	000021f8 ___vfprintf_internal_r
00022bd8 g     F .text	0000015c OSTaskStkInit
000087f0 g     F .text	00000058 _sprintf_r
0000f018 g     F .text	00000310 _free_r
0000f9f4 g     F .text	00000010 __locale_mb_cur_max
00018e3c g     F .text	00000198 OS_EventTaskRdy
00023350 g     F .text	00000180 __call_exitprocs
00029018 g     O .bss	00000001 OSCPUUsage
00028fd0 g     O .bss	00000004 __mlocale_changed
00002bb8 g     F .text	000000c4 _ZN8KeyboardC1Ev
00026f34 g     O .rwdata	00000004 __malloc_sbrk_base
00000248 g     F .text	0000003c _start
0002904c g     O .bss	00000004 _alt_tick_rate
0001c588 g     F .text	0000028c OSQPend
000037ec g     F .text	000000a4 _ZN14VideoInterface8drawLineEiiiit
000248e0  w    O .rodata	0000000d _ZTSSt9type_info
0001f234 g     F .text	00000104 OSTimeDly
000046d8 g     F .text	00000020 __cxa_pure_virtual
000105c4 g     F .text	00000148 __lshift
00003450 g     F .text	00000080 _ZN14VideoInterfaceC1Eiii
00029050 g     O .bss	00000004 _alt_nticks
00008754 g     F .text	00000018 signal
000178f4 g     F .text	000000fc read
00023ee8  w    O .rodata	0000000c _ZTI8Keyboard
0001f794 g     F .text	00000814 alt_sys_init
00021128 g     F .text	0000008c alt_up_character_lcd_shift_display
000066dc g     F .text	00000124 .hidden __floatsisf
00026eec  w    O .rwdata	00000008 _ZTS6Entity
00011554 g     F .text	000001d0 __ssprint_r
000039a4 g     F .text	000001c0 _ZN14VideoInterface12_drawLineDDAEiiiit
00000284 g     F .text	0000003c _ZN19ControllerInterfaceC2Ev
00023238 g     F .text	00000118 __register_exitproc
00029019 g     O .bss	00000001 OSTaskCtr
00004134 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
00021b34 g     F .text	00000058 alt_up_ps2_clear_fifo
00021de8 g     F .text	0000003c alt_up_rs232_get_available_space_in_write_FIFO
0001f338 g     F .text	00000160 OSTimeDlyHMSM
0001028c g     F .text	000001f8 __multiply
000211b4 g     F .text	0000008c alt_up_character_lcd_erase_pos
000205f4 g     F .text	00000068 altera_avalon_jtag_uart_close
00025030 g       *ABS*	00000000 __ram_rwdata_start
00007608 g     F .text	000000d0 .hidden _Unwind_SjLj_RaiseException
0002350c g       *ABS*	00000000 __ram_rodata_start
00035068 g     O .bss	00000028 __malloc_current_mallinfo
0000771c g     F .text	00000044 .hidden _Unwind_SjLj_Resume
00026f7a g     O .rwdata	00000002 OSEventMax
00010ad8 g     F .text	0000014c __d2b
00024a20  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
0001d7a8 g     F .text	00000110 OSSemPost
0000467c g     F .text	00000004 _ZNSt9type_infoD2Ev
000240cc  w    O .rodata	0000000c _ZTV3VGA
00005e80 g     F .text	00000004 _ZN10__cxxabiv119__foreign_exceptionD0Ev
000189e0 g     F .text	000000dc OSSchedUnlock
00004330 g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
0001ffa8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00022f68 g     F .text	000000dc alt_get_fd
0002901c g     O .bss	00000004 OSMemFreeList
00018b2c g     F .text	000000b0 OSStatInit
0001b374 g     F .text	000000c4 OSFlagQuery
00026f2c  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
00026fb0 g     O .rwdata	00000002 OSTaskCreateExtEn
00014008 g     F .text	00000054 _close_r
00023518  w    O .rodata	00000016 _ZTS19ControllerInterface
000240d8  w    O .rodata	0000000c _ZTI3VGA
000231bc g     F .text	0000007c memcmp
00018e1c g     F .text	00000020 OS_Dummy
00020068 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000383b4 g       *ABS*	00000000 __alt_stack_base
000200b8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000040f0 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
000212b0 g     F .text	0000005c alt_up_irda_enable_read_interrupt
0000ced0 g     F .text	00000154 __swsetup_r
00036830 g     O .bss	000001e0 OSQTbl
00007760 g     F .text	0000004c .hidden _Unwind_SjLj_Resume_or_Rethrow
00015540 g     F .text	000008e8 .hidden __divdf3
0000ed74 g     F .text	00000118 __sfp
00010d3c g     F .text	00000078 __copybits
00004680 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
00025030 g     O .rwdata	00000408 __malloc_av_
0000eec0 g     F .text	00000004 __sinit_lock_release
00029020 g     O .bss	00000004 OSTCBHighRdy
00016080 g     F .text	00000718 .hidden __muldf3
00011418 g     F .text	00000054 __sread
000249e4  w    O .rodata	00000014 _ZTVSt9exception
00005e78 g     F .text	00000004 _ZN10__cxxabiv115__forced_unwindD0Ev
000240b0  w    O .rodata	00000010 _ZTV6PacMan
00029024 g     O .bss	00000004 OSQFreeList
00021d48 g     F .text	00000060 alt_up_rs232_disable_read_interrupt
00022e60 g     F .text	00000108 alt_find_file
000012b8 g     F .text	00000044 _ZN4Game8walkableE10map_item_t
00022204 g     F .text	000000a4 alt_dev_llist_insert
00017d5c g     F .text	00000120 __malloc_lock
00017a54 g     F .text	000000b0 sbrk
00008a28 g     F .text	000021d8 ___svfprintf_internal_r
000248b4  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
00005a1c g     F .text	00000090 __cxa_throw
00018068 g     F .text	00000140 OSEventNameSet
0000eac8 g     F .text	0000005c _fflush_r
000075cc g     F .text	00000010 .hidden _Unwind_SetIP
0001405c g     F .text	000000c4 _calloc_r
00029028 g     O .bss	00000001 OSRdyGrp
00000458 g     F .text	00000040 _ZN6Entity10setNextDirE5E_DIR
00028fb0 g       *ABS*	00000000 __bss_start
000240e4  w    O .rodata	00000011 _ZTS14VideoInterface
00000578 g     F .text	00000028 _ZN6Entity4getYEv
00008230 g     F .text	00000128 memset
0002350c  w    O .rodata	0000000c _ZTV19ControllerInterface
00003f3c g     F .text	000000d8 main
00003514 g     F .text	0000003c _ZN14VideoInterface11resetOffsetEv
00028fe4 g     O .bss	00000004 alt_envp
00028fbc g     O .bss	00000004 __malloc_max_total_mem
00020008 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00023530  w    O .rodata	00000010 _ZTV6Entity
000146dc g     F .text	00000018 __swbuf
00005e84 g     F .text	0000000c __cxa_get_globals_fast
00024d5c g     O .rodata	00000100 OSUnMapTbl
000065a4 g     F .text	000000c8 .hidden __ltsf2
00026faa g     O .rwdata	00000002 OSSemEn
0002109c g     F .text	0000008c alt_up_character_lcd_shift_cursor
0001afe0 g     F .text	00000394 OSFlagPost
0001154c g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00014210 g     F .text	00000014 fclose
00018fd4 g     F .text	00000110 OS_EventTaskWait
0002d058 g     O .bss	00004000 task2_stk
00002bb8 g     F .text	000000c4 _ZN8KeyboardC2Ev
00021ac4 g     F .text	00000070 alt_up_ps2_read_data_byte
00019bcc g     F .text	000000cc OS_TaskStatStkChk
0001e68c g     F .text	00000150 OSTaskDelReq
0000d224 g     F .text	00001688 _dtoa_r
000078dc g     F .text	0000080c _malloc_r
00014850 g     F .text	00000030 __ascii_wctomb
00005e60 g     F .text	0000000c _ZNKSt13bad_exception4whatEv
00026f60 g     O .rwdata	00000004 alt_errno
00018abc g     F .text	00000070 OSStart
00031058 g     O .bss	00004000 task3_stk
0000876c g     F .text	00000010 _init_signal
00017cfc g     F .text	00000060 __env_unlock
000248a8  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
0000f7e4 g     F .text	000000c4 _fwalk
0001eb28 g     F .text	000001d4 OSTaskResume
0001bdb0 g     F .text	000000e8 OSMemQuery
00026fbc g     O .rwdata	00000002 OSTaskStatEn
0002142c g     F .text	00000040 alt_up_irda_write_data
00026f96 g     O .rwdata	00000002 OSMemMax
0001cae8 g     F .text	00000170 OSQPostFront
00005e50 g     F .text	00000004 _ZNSt13bad_exceptionD1Ev
000240f8  w    O .rodata	0000000c _ZTV14VideoInterface
00021cb0 g     F .text	0000003c alt_up_ps2_open_dev
0001538c g     F .text	00000084 .hidden __divsi3
00029029 g     O .bss	00000003 OSRdyTbl
00026f70 g     O .rwdata	00000002 OSDebugEn
00020ea8 g     F .text	0000003c alt_up_character_lcd_open_dev
0000eef4 g     F .text	00000124 _malloc_trim_r
0002182c g     F .text	0000005c alt_up_ps2_enable_read_interrupt
00026edc  w    O .rwdata	00000008 _ZTI19ControllerInterface
0002350c g       *ABS*	00000000 __CTOR_END__
00026f88 g     O .rwdata	00000002 OSFlagNodeSize
00026fd0 g     O .rwdata	00000002 OSTmrCfgMax
00020e70 g     F .text	00000038 alt_up_character_lcd_init
000088b4 g     F .text	000000dc strcmp
0001c0a4 g     F .text	000001ac OSQCreate
0001e7dc g     F .text	00000198 OSTaskNameGet
0002350c g       *ABS*	00000000 __flash_rodata_start
0001cc58 g     F .text	0000020c OSQPostOpt
00018bdc g     F .text	00000220 OSTimeTick
00024a0c  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
00026fb8 g     O .rwdata	00000002 OSTaskMax
0002350c g       *ABS*	00000000 __DTOR_LIST__
0001d118 g     F .text	000000d8 OSSemCreate
00026fdc g     O .rwdata	00000002 OSTmrWheelSize
00022040 g     F .text	0000003c alt_up_rs232_open_dev
00015e28 g     F .text	00000088 .hidden __nedf2
00026fb2 g     O .rwdata	00000002 OSTaskDelEn
0001d8b8 g     F .text	00000110 OSSemQuery
0001c250 g     F .text	00000280 OSQDel
0001c814 g     F .text	0000016c OSQPendAbort
0001f75c g     F .text	00000038 alt_irq_init
000179f0 g     F .text	00000064 alt_release_fd
00004100 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
00021704 g     F .text	00000034 read_data_valid
00008848 g     F .text	0000006c sprintf
00021240 g     F .text	00000038 alt_up_character_lcd_cursor_off
00024a34 g     O .rodata	00000100 .hidden __clz_tab
00028fcc g     O .bss	00000004 _PathLocale
000034d0 g     F .text	00000044 _ZN14VideoInterface9setOffsetEii
000219c4 g     F .text	00000064 alt_up_ps2_write_data_byte_with_ack
00023170 g     F .text	00000014 atexit
000064e8 g     F .text	000000bc .hidden __gesf2
00013fa8 g     F .text	00000060 _write_r
00018954 g     F .text	0000008c OSSchedLock
0000fa24 g     F .text	00000018 setlocale
00000498 g     F .text	00000040 _ZN6Entity10setCurrDirE5E_DIR
00007600 g     F .text	00000008 .hidden _Unwind_GetTextRelBase
00005b30 g     F .text	00000058 __cxa_call_terminate
0001a404 g     F .text	00000108 OSFlagCreate
00003754 g     F .text	00000034 _ZN14VideoInterface10setLineAlgE9viLineAlg
00026f40 g     O .rwdata	00000004 _impure_ptr
00026f24  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
00028fdc g     O .bss	00000004 alt_argc
0000e8ac g     F .text	0000021c __sflush_r
00022308 g     F .text	00000060 _do_dtors
00026f04  w    O .rwdata	00000008 _ZTI14VideoInterface
0000fa10 g     F .text	00000008 __locale_cjk_lang
00000550 g     F .text	00000028 _ZN6Entity4getXEv
00026f82 g     O .rwdata	00000002 OSEventMultiEn
000038f4 g     F .text	000000b0 _ZN14VideoInterface8drawRectEiiiit
00026ee4  w    O .rwdata	00000008 _ZTI6Entity
09000000 g       *ABS*	00000000 __alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM
0001a50c g     F .text	00000248 OSFlagDel
0002902c g     O .bss	00000004 OSEventFreeList
00004854 g     F .text	00000010 _ZSt14get_unexpectedv
00000020 g       .exceptions	00000000 alt_irq_entry
00003374 g     F .text	0000006c _ZN3VGAC1EPsiii
00010968 g     F .text	00000064 __ulp
000075f0 g     F .text	00000008 .hidden _Unwind_FindEnclosingFunction
0001a9c8 g     F .text	000005b8 OSFlagPend
00026fce g     O .rwdata	00000002 OSTmrEn
0000eedc g     F .text	00000018 __fp_unlock_all
00000d08 g     F .text	000002bc _ZN4Game15distanceToEntryEP6EntityPi
00026f4c g     O .rwdata	00000008 alt_fs_list
000249c0  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
000199cc g     F .text	00000074 OS_StrCopy
00021cec g     F .text	0000005c alt_up_rs232_enable_read_interrupt
000075dc g     F .text	0000000c .hidden _Unwind_GetLanguageSpecificData
000245fe g     O .rodata	000001ea bmp_numbers
00021e68 g     F .text	00000040 alt_up_rs232_write_data
00005850 g     F .text	000000b4 __cxa_begin_catch
00026f98 g     O .rwdata	00000002 OSMemNameSize
00004444 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
000047f4 g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
00022dfc g     F .text	00000020 OSInitHookEnd
00026ef4  w    O .rwdata	00000008 _ZTS6PacMan
00000284 g     F .text	0000003c _ZN19ControllerInterfaceC1Ev
00000020 g       *ABS*	00000000 __ram_exceptions_start
00026fc4 g     O .rwdata	00000002 OSTCBPrioTblMax
0000fa3c g     F .text	0000000c localeconv
00026fc0 g     O .rwdata	00000002 OSTaskStatStkChkEn
00005e70 g     F .text	00000004 _ZNSt13bad_exceptionD0Ev
00026f14 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
00026f94 g     O .rwdata	00000002 OSMemEn
00005ce8 g     F .text	00000060 __cxa_allocate_exception
00026f9e g     O .rwdata	00000002 OSMutexEn
0002484c  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
00002dd4 g     F .text	000000d8 _ZN6PacManC1Eii
00026ff0 g       *ABS*	00000000 _edata
000005f0 g     F .text	000000e8 _ZN4GameC2EP19ControllerInterfaceP14VideoInterface
000383b4 g       *ABS*	00000000 _end
00029030 g     O .bss	00000001 OSIntNesting
00005018 g     F .text	00000600 __gxx_personality_sj0
00014224 g     F .text	00000164 __fputwc
00000248 g       *ABS*	00000000 __ram_exceptions_end
00000750 g     F .text	000001d0 _ZN4Game6updateEi
0002065c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0001f498 g     F .text	000001d4 OSTimeDlyResume
00023edc  w    O .rodata	0000000c _ZTV8Keyboard
0001a87c g     F .text	0000014c OSFlagNameSet
00000fc4 g     F .text	000002f4 _ZN4Game14updateMovementEP6Entityi
00005e4c g     F .text	00000004 _ZNSt9exceptionD1Ev
0001ecfc g     F .text	000001c0 OSTaskStkChk
00002eac g     F .text	000001c8 _ZN6PacMan8getColorEi5E_DIRii
00026f9a g     O .rwdata	00000002 OSMemSize
00011474 g     F .text	0000007c __swrite
000012fc g     F .text	000001ec _ZN4Game12getCharPixelEcii
00026f38 g     O .rwdata	00000004 __malloc_trim_threshold
0000fa04 g     F .text	0000000c __locale_msgcharset
00029034 g     O .bss	00000004 OSTCBCur
00023184 g     F .text	00000038 exit
00007580 g     F .text	0000001c .hidden _Unwind_SetGR
0002146c g     F .text	00000074 alt_up_irda_read_data
00026f9c g     O .rwdata	00000002 OSMemTblSize
0000f8a8 g     F .text	000000c4 _fwalk_reent
00004294 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
00021764 g     F .text	000000c8 alt_up_ps2_init
0001076c g     F .text	000001fc __mdiff
0000471c g     F .text	000000c0 _ZN10__cxxabiv111__terminateEPFvvE
000035a4 g     F .text	000000c0 _ZN14VideoInterface9drawPixelEiit
00015410 g     F .text	00000074 .hidden __modsi3
00000920 g     F .text	000000e0 _ZN4Game4drawEv
04000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0000eeb8 g     F .text	00000004 __sfp_lock_release
000187b8 g     F .text	00000058 OSInit
00024994  w    O .rodata	0000000c _ZTISt13bad_exception
0001f0a0 g     F .text	00000124 OSTaskQuery
00020f60 g     F .text	00000078 alt_up_character_lcd_string
0001cfc0 g     F .text	000000a8 OS_QInit
00019a40 g     F .text	00000054 OS_StrLen
00021600 g     F .text	0000003c alt_up_irda_open_dev
0001bbc4 g     F .text	00000114 OSMemNameSet
00026fb6 g     O .rwdata	00000002 OSTaskProfileEn
00029038 g     O .bss	00000004 OSTime
000002f8 g     F .text	00000084 _ZN6EntityC1Eii
00036a10 g     O .bss	00000800 OSTaskIdleStk
00017274 g     F .text	00000034 _exit
0002207c g     F .text	0000012c alt_alarm_start
0001a754 g     F .text	00000128 OSFlagNameGet
000040b0 g     F .text	00000040 _Z8GameLoopPv
0001f66c g     F .text	0000005c OSTimeGet
0000754c g     F .text	0000001c .hidden _Unwind_GetGR
00005e90 g     F .text	0000000c __cxa_get_globals
0000fa48 g     F .text	000001bc __smakebuf_r
00026f18 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
0002195c g     F .text	00000068 alt_up_ps2_wait_for_ack
00008990 g     F .text	00000098 strlen
000084ec g     F .text	0000006c _init_signal_r
00026f0c  w    O .rwdata	00000008 _ZTISt9type_info
00022d7c g     F .text	00000020 OSTaskSwHook
000227ec g     F .text	00000154 open
00037210 g     O .bss	00000b40 OSEventTbl
00015eb0 g     F .text	000000dc .hidden __gedf2
00024970  w    O .rodata	0000000d _ZTSSt9exception
00037d50 g     O .bss	00000510 OSTCBTbl
0001d9c8 g     F .text	00000100 OSSemSet
00026f48 g     O .rwdata	00000004 __wctomb
00005e6c g     F .text	00000004 _ZNSt9exceptionD0Ev
00012a5c g     F .text	00000018 __sprint_r
000223f8 g     F .text	00000034 alt_icache_flush_all
000017f8 g     F .text	00000098 _ZN4Game13drawScoreTextEv
000075f8 g     F .text	00000008 .hidden _Unwind_GetDataRelBase
00021028 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
00026fe4 g     O .rwdata	00000004 alt_priority_mask
0001d1f0 g     F .text	00000240 OSSemDel
0002903c g     O .bss	00000004 OSFlagFreeList
00026f7c g     O .rwdata	00000002 OSEventNameSize
0000cdf8 g     F .text	0000001c __vfprintf_internal
00029040 g     O .bss	00000001 OSStatRdy
00038260 g     O .bss	00000054 OSTCBPrioTbl
00014880 g     F .text	0000005c _wctomb_r
00017c38 g     F .text	000000c4 __env_lock
00021b8c g     F .text	0000008c alt_up_ps2_read_fd
00026fc2 g     O .rwdata	00000002 OSTaskSwHookEn
00016798 g     F .text	000008fc .hidden __subdf3
000214e0 g     F .text	00000090 alt_up_irda_read_fd
00004014 g     F .text	00000048 _Z7gfxLoopPv
000101a0 g     F .text	000000b0 __lo0bits
00026fe8 g     O .rwdata	00000008 alt_alarm_list
00026f8a g     O .rwdata	00000002 OSFlagWidth
000222a8 g     F .text	00000060 _do_ctors
0000877c g     F .text	00000014 __sigtramp
00021da8 g     F .text	00000040 alt_up_rs232_get_used_space_in_read_FIFO
00014790 g     F .text	000000c0 wcrtomb
00017178 g     F .text	000000d0 close
00006020 g     F .text	000004c8 .hidden __addsf3
00028fec g     O .bss	00000004 alt_envsem
00029044 g     O .bss	00000004 OSIdleCtrRun
00001650 g     F .text	000001a8 _ZN4Game18drawTextDifferenceEiiPcS0_
00000a00 g     F .text	00000058 _ZN4Game11setInSquareEP6Entityii
00018dfc g     F .text	00000020 OSVersion
00026fd4 g     O .rwdata	00000002 OSTmrCfgWheelSize
000249a0  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
00017668 g     F .text	00000084 alt_load
0001f1c4 g     F .text	00000070 OS_TaskStkClr
00026fae g     O .rwdata	00000002 OSTaskCreateEn
000005c8 g     F .text	00000028 _ZN6Entity10getNextDirEv
00004694 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
000193ec g     F .text	00000068 OS_EventWaitListInit
000143ac g     F .text	00000080 fputwc
00008740 g     F .text	00000014 raise
00022e1c g     F .text	00000020 OSTaskIdleHook
000078c8 g     F .text	00000014 free
0000eebc g     F .text	00000004 __sinit_lock_acquire
0000ff14 g     F .text	00000120 __multadd
00004454 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
0001eebc g     F .text	000001e4 OSTaskSuspend
0000feec g     F .text	00000028 _Bfree
00019a94 g     F .text	0000005c OS_TaskIdle
00026fda g     O .rwdata	00000002 OSTmrTblSize
0001ce64 g     F .text	0000015c OSQQuery



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409214 	ori	at,at,584
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <OSCtxSw_SWITCH_PC+0x4c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <OSCtxSw_SWITCH_PC+0x68>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d40 	call	1d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <OSCtxSw_SWITCH_PC+0x68>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	00188100 	call	18810 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001526 	beq	r2,zero,190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 13c:	00800134 	movhi	r2,4
 140:	10a0ad04 	addi	r2,r2,-32076
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800134 	movhi	r2,4
 158:	10a0ad04 	addi	r2,r2,-32076
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	e17ffd17 	ldw	r5,-12(fp)
 174:	1009883a 	mov	r4,r2
 178:	183ee83a 	callr	r3
#endif
        break;
 17c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 180:	0005313a 	rdctl	r2,ipending
 184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 188:	e0bfff17 	ldw	r2,-4(fp)
 18c:	00000706 	br	1ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 190:	e0bffc17 	ldw	r2,-16(fp)
 194:	1085883a 	add	r2,r2,r2
 198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 19c:	e0bffd17 	ldw	r2,-12(fp)
 1a0:	10800044 	addi	r2,r2,1
 1a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a8:	003fe006 	br	12c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700012c>

    active = alt_irq_pending ();
 1ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b0:	e0bffb17 	ldw	r2,-20(fp)
 1b4:	103fda1e 	bne	r2,zero,120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b8:	001885c0 	call	1885c <OSIntExit>
}
 1bc:	0001883a 	nop
 1c0:	e037883a 	mov	sp,fp
 1c4:	dfc00117 	ldw	ra,4(sp)
 1c8:	df000017 	ldw	fp,0(sp)
 1cc:	dec00204 	addi	sp,sp,8
 1d0:	f800283a 	ret

000001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d4:	defffb04 	addi	sp,sp,-20
 1d8:	dfc00415 	stw	ra,16(sp)
 1dc:	df000315 	stw	fp,12(sp)
 1e0:	df000304 	addi	fp,sp,12
 1e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e8:	000531fa 	rdctl	r2,exception
 1ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1f0:	e0bffd17 	ldw	r2,-12(fp)
 1f4:	10801f0c 	andi	r2,r2,124
 1f8:	1004d0ba 	srli	r2,r2,2
 1fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 200:	0005333a 	rdctl	r2,badaddr
 204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 208:	d0a85e17 	ldw	r2,-24200(gp)
 20c:	10000726 	beq	r2,zero,22c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 210:	d0a85e17 	ldw	r2,-24200(gp)
 214:	e0fffd17 	ldw	r3,-12(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	e17fff17 	ldw	r5,-4(fp)
 220:	1809883a 	mov	r4,r3
 224:	103ee83a 	callr	r2
 228:	00000206 	br	234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 22c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 230:	0005883a 	mov	r2,zero
}
 234:	e037883a 	mov	sp,fp
 238:	dfc00117 	ldw	ra,4(sp)
 23c:	df000017 	ldw	fp,0(sp)
 240:	dec00204 	addi	sp,sp,8
 244:	f800283a 	ret

Disassembly of section .text:

00000248 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     248:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     24c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     250:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
     254:	d6bbb714 	ori	gp,gp,61148
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     258:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
     25c:	10a3ec14 	ori	r2,r2,36784

    movhi r3, %hi(__bss_end)
     260:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
     264:	18e0ed14 	ori	r3,r3,33716

    beq r2, r3, 1f
     268:	10c00326 	beq	r2,r3,278 <_start+0x30>

0:
    stw zero, (r2)
     26c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     270:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     274:	10fffd36 	bltu	r2,r3,26c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700026c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     278:	00176680 	call	17668 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     27c:	00177fc0 	call	177fc <alt_main>

00000280 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     280:	003fff06 	br	280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000280>

00000284 <_ZN19ControllerInterfaceC1Ev>:
 *      Author: natha
 */

#include "ControllerInterface.h"

ControllerInterface::ControllerInterface(){
     284:	defffe04 	addi	sp,sp,-8
     288:	df000115 	stw	fp,4(sp)
     28c:	df000104 	addi	fp,sp,4
     290:	e13fff15 	stw	r4,-4(fp)
     294:	008000b4 	movhi	r2,2
     298:	108d4504 	addi	r2,r2,13588
     29c:	e0ffff17 	ldw	r3,-4(fp)
     2a0:	18800015 	stw	r2,0(r3)
     2a4:	e0bfff17 	ldw	r2,-4(fp)
     2a8:	10000115 	stw	zero,4(r2)

};
     2ac:	0001883a 	nop
     2b0:	e037883a 	mov	sp,fp
     2b4:	df000017 	ldw	fp,0(sp)
     2b8:	dec00104 	addi	sp,sp,4
     2bc:	f800283a 	ret

000002c0 <_ZN19ControllerInterface15getActiveButtonEv>:

button_t ControllerInterface::getActiveButton(){
     2c0:	defffd04 	addi	sp,sp,-12
     2c4:	df000215 	stw	fp,8(sp)
     2c8:	df000204 	addi	fp,sp,8
     2cc:	e13fff15 	stw	r4,-4(fp)
	button_t temp = this->activeButton;
     2d0:	e0bfff17 	ldw	r2,-4(fp)
     2d4:	10800117 	ldw	r2,4(r2)
     2d8:	e0bffe15 	stw	r2,-8(fp)
	this->activeButton = BUTTON_NO_BUTTON;
     2dc:	e0bfff17 	ldw	r2,-4(fp)
     2e0:	10000115 	stw	zero,4(r2)
	return temp;
     2e4:	e0bffe17 	ldw	r2,-8(fp)
};
     2e8:	e037883a 	mov	sp,fp
     2ec:	df000017 	ldw	fp,0(sp)
     2f0:	dec00104 	addi	sp,sp,4
     2f4:	f800283a 	ret

000002f8 <_ZN6EntityC1Eii>:
 *      Author: natha
 */

#include "Entity.h"

Entity::Entity(int x, int y) : x(x), y(y) {
     2f8:	defffc04 	addi	sp,sp,-16
     2fc:	df000315 	stw	fp,12(sp)
     300:	df000304 	addi	fp,sp,12
     304:	e13ffd15 	stw	r4,-12(fp)
     308:	e17ffe15 	stw	r5,-8(fp)
     30c:	e1bfff15 	stw	r6,-4(fp)
     310:	008000b4 	movhi	r2,2
     314:	108d4e04 	addi	r2,r2,13624
     318:	e0fffd17 	ldw	r3,-12(fp)
     31c:	18800015 	stw	r2,0(r3)
     320:	e0bffd17 	ldw	r2,-12(fp)
     324:	e0fffe17 	ldw	r3,-8(fp)
     328:	10c00115 	stw	r3,4(r2)
     32c:	e0bffd17 	ldw	r2,-12(fp)
     330:	e0ffff17 	ldw	r3,-4(fp)
     334:	10c00215 	stw	r3,8(r2)
     338:	e0bffd17 	ldw	r2,-12(fp)
     33c:	00c00044 	movi	r3,1
     340:	10c00805 	stb	r3,32(r2)
     344:	e0bffd17 	ldw	r2,-12(fp)
     348:	00c00104 	movi	r3,4
     34c:	10c00915 	stw	r3,36(r2)
     350:	e0bffd17 	ldw	r2,-12(fp)
     354:	00c00104 	movi	r3,4
     358:	10c00a15 	stw	r3,40(r2)
     35c:	e0bffd17 	ldw	r2,-12(fp)
     360:	00c00104 	movi	r3,4
     364:	10c00b15 	stw	r3,44(r2)

};
     368:	0001883a 	nop
     36c:	e037883a 	mov	sp,fp
     370:	df000017 	ldw	fp,0(sp)
     374:	dec00104 	addi	sp,sp,4
     378:	f800283a 	ret

0000037c <_ZN6Entity6updateEi>:

void Entity::update(int elapsedTime){
     37c:	defffc04 	addi	sp,sp,-16
     380:	dfc00315 	stw	ra,12(sp)
     384:	df000215 	stw	fp,8(sp)
     388:	df000204 	addi	fp,sp,8
     38c:	e13ffe15 	stw	r4,-8(fp)
     390:	e17fff15 	stw	r5,-4(fp)
	this->prev_dir = this->curr_dir;
     394:	e0bffe17 	ldw	r2,-8(fp)
     398:	10c00917 	ldw	r3,36(r2)
     39c:	e0bffe17 	ldw	r2,-8(fp)
     3a0:	10c00a15 	stw	r3,40(r2)
	this->prev_x = this->x;
     3a4:	e0bffe17 	ldw	r2,-8(fp)
     3a8:	10c00117 	ldw	r3,4(r2)
     3ac:	e0bffe17 	ldw	r2,-8(fp)
     3b0:	10c00315 	stw	r3,12(r2)
	this->prev_y = this->y;
     3b4:	e0bffe17 	ldw	r2,-8(fp)
     3b8:	10c00217 	ldw	r3,8(r2)
     3bc:	e0bffe17 	ldw	r2,-8(fp)
     3c0:	10c00415 	stw	r3,16(r2)
	this->_update(elapsedTime);
     3c4:	e0bffe17 	ldw	r2,-8(fp)
     3c8:	10800017 	ldw	r2,0(r2)
     3cc:	10800104 	addi	r2,r2,4
     3d0:	10800017 	ldw	r2,0(r2)
     3d4:	e17fff17 	ldw	r5,-4(fp)
     3d8:	e13ffe17 	ldw	r4,-8(fp)
     3dc:	103ee83a 	callr	r2
};
     3e0:	0001883a 	nop
     3e4:	e037883a 	mov	sp,fp
     3e8:	dfc00117 	ldw	ra,4(sp)
     3ec:	df000017 	ldw	fp,0(sp)
     3f0:	dec00204 	addi	sp,sp,8
     3f4:	f800283a 	ret

000003f8 <_ZN6Entity4drawEP14VideoInterface>:

void Entity::draw(VideoInterface* vi){
     3f8:	defffc04 	addi	sp,sp,-16
     3fc:	dfc00315 	stw	ra,12(sp)
     400:	df000215 	stw	fp,8(sp)
     404:	df000204 	addi	fp,sp,8
     408:	e13ffe15 	stw	r4,-8(fp)
     40c:	e17fff15 	stw	r5,-4(fp)
	if(this->redraw){
     410:	e0bffe17 	ldw	r2,-8(fp)
     414:	10800803 	ldbu	r2,32(r2)
     418:	10803fcc 	andi	r2,r2,255
     41c:	10000826 	beq	r2,zero,440 <_ZN6Entity4drawEP14VideoInterface+0x48>
		this->_draw(vi);
     420:	e0bffe17 	ldw	r2,-8(fp)
     424:	10800017 	ldw	r2,0(r2)
     428:	10800017 	ldw	r2,0(r2)
     42c:	e17fff17 	ldw	r5,-4(fp)
     430:	e13ffe17 	ldw	r4,-8(fp)
     434:	103ee83a 	callr	r2
		this->redraw = 0;
     438:	e0bffe17 	ldw	r2,-8(fp)
     43c:	10000805 	stb	zero,32(r2)
	}
}
     440:	0001883a 	nop
     444:	e037883a 	mov	sp,fp
     448:	dfc00117 	ldw	ra,4(sp)
     44c:	df000017 	ldw	fp,0(sp)
     450:	dec00204 	addi	sp,sp,8
     454:	f800283a 	ret

00000458 <_ZN6Entity10setNextDirE5E_DIR>:

void Entity::setNextDir(e_dir_t dir){
     458:	defffd04 	addi	sp,sp,-12
     45c:	df000215 	stw	fp,8(sp)
     460:	df000204 	addi	fp,sp,8
     464:	e13ffe15 	stw	r4,-8(fp)
     468:	e17fff15 	stw	r5,-4(fp)
	this->next_dir = dir;
     46c:	e0bffe17 	ldw	r2,-8(fp)
     470:	e0ffff17 	ldw	r3,-4(fp)
     474:	10c00b15 	stw	r3,44(r2)
	this->redraw = 1;
     478:	e0bffe17 	ldw	r2,-8(fp)
     47c:	00c00044 	movi	r3,1
     480:	10c00805 	stb	r3,32(r2)
};
     484:	0001883a 	nop
     488:	e037883a 	mov	sp,fp
     48c:	df000017 	ldw	fp,0(sp)
     490:	dec00104 	addi	sp,sp,4
     494:	f800283a 	ret

00000498 <_ZN6Entity10setCurrDirE5E_DIR>:

void Entity::setCurrDir(e_dir_t dir){
     498:	defffd04 	addi	sp,sp,-12
     49c:	df000215 	stw	fp,8(sp)
     4a0:	df000204 	addi	fp,sp,8
     4a4:	e13ffe15 	stw	r4,-8(fp)
     4a8:	e17fff15 	stw	r5,-4(fp)
	this->curr_dir = dir;
     4ac:	e0bffe17 	ldw	r2,-8(fp)
     4b0:	e0ffff17 	ldw	r3,-4(fp)
     4b4:	10c00915 	stw	r3,36(r2)
	this->redraw = 1;
     4b8:	e0bffe17 	ldw	r2,-8(fp)
     4bc:	00c00044 	movi	r3,1
     4c0:	10c00805 	stb	r3,32(r2)
};
     4c4:	0001883a 	nop
     4c8:	e037883a 	mov	sp,fp
     4cc:	df000017 	ldw	fp,0(sp)
     4d0:	dec00104 	addi	sp,sp,4
     4d4:	f800283a 	ret

000004d8 <_ZN6Entity6setPosEii>:

void Entity::setPos(int x, int y){
     4d8:	defffc04 	addi	sp,sp,-16
     4dc:	df000315 	stw	fp,12(sp)
     4e0:	df000304 	addi	fp,sp,12
     4e4:	e13ffd15 	stw	r4,-12(fp)
     4e8:	e17ffe15 	stw	r5,-8(fp)
     4ec:	e1bfff15 	stw	r6,-4(fp)
	this->x = x;
     4f0:	e0bffd17 	ldw	r2,-12(fp)
     4f4:	e0fffe17 	ldw	r3,-8(fp)
     4f8:	10c00115 	stw	r3,4(r2)
	this->y = y;
     4fc:	e0bffd17 	ldw	r2,-12(fp)
     500:	e0ffff17 	ldw	r3,-4(fp)
     504:	10c00215 	stw	r3,8(r2)
	this->redraw = 1;
     508:	e0bffd17 	ldw	r2,-12(fp)
     50c:	00c00044 	movi	r3,1
     510:	10c00805 	stb	r3,32(r2)
};
     514:	0001883a 	nop
     518:	e037883a 	mov	sp,fp
     51c:	df000017 	ldw	fp,0(sp)
     520:	dec00104 	addi	sp,sp,4
     524:	f800283a 	ret

00000528 <_ZN6Entity11getVelocityEv>:

int Entity::getVelocity(){
     528:	defffe04 	addi	sp,sp,-8
     52c:	df000115 	stw	fp,4(sp)
     530:	df000104 	addi	fp,sp,4
     534:	e13fff15 	stw	r4,-4(fp)
	return velocity;
     538:	e0bfff17 	ldw	r2,-4(fp)
     53c:	10800717 	ldw	r2,28(r2)
};
     540:	e037883a 	mov	sp,fp
     544:	df000017 	ldw	fp,0(sp)
     548:	dec00104 	addi	sp,sp,4
     54c:	f800283a 	ret

00000550 <_ZN6Entity4getXEv>:

int Entity::getX(){
     550:	defffe04 	addi	sp,sp,-8
     554:	df000115 	stw	fp,4(sp)
     558:	df000104 	addi	fp,sp,4
     55c:	e13fff15 	stw	r4,-4(fp)
	return x;
     560:	e0bfff17 	ldw	r2,-4(fp)
     564:	10800117 	ldw	r2,4(r2)
};
     568:	e037883a 	mov	sp,fp
     56c:	df000017 	ldw	fp,0(sp)
     570:	dec00104 	addi	sp,sp,4
     574:	f800283a 	ret

00000578 <_ZN6Entity4getYEv>:

int Entity::getY(){
     578:	defffe04 	addi	sp,sp,-8
     57c:	df000115 	stw	fp,4(sp)
     580:	df000104 	addi	fp,sp,4
     584:	e13fff15 	stw	r4,-4(fp)
	return y;
     588:	e0bfff17 	ldw	r2,-4(fp)
     58c:	10800217 	ldw	r2,8(r2)
};
     590:	e037883a 	mov	sp,fp
     594:	df000017 	ldw	fp,0(sp)
     598:	dec00104 	addi	sp,sp,4
     59c:	f800283a 	ret

000005a0 <_ZN6Entity10getCurrDirEv>:

e_dir_t Entity::getCurrDir(){
     5a0:	defffe04 	addi	sp,sp,-8
     5a4:	df000115 	stw	fp,4(sp)
     5a8:	df000104 	addi	fp,sp,4
     5ac:	e13fff15 	stw	r4,-4(fp)
	return curr_dir;
     5b0:	e0bfff17 	ldw	r2,-4(fp)
     5b4:	10800917 	ldw	r2,36(r2)
};
     5b8:	e037883a 	mov	sp,fp
     5bc:	df000017 	ldw	fp,0(sp)
     5c0:	dec00104 	addi	sp,sp,4
     5c4:	f800283a 	ret

000005c8 <_ZN6Entity10getNextDirEv>:

e_dir_t Entity::getNextDir(){
     5c8:	defffe04 	addi	sp,sp,-8
     5cc:	df000115 	stw	fp,4(sp)
     5d0:	df000104 	addi	fp,sp,4
     5d4:	e13fff15 	stw	r4,-4(fp)
	return next_dir;
     5d8:	e0bfff17 	ldw	r2,-4(fp)
     5dc:	10800b17 	ldw	r2,44(r2)
};
     5e0:	e037883a 	mov	sp,fp
     5e4:	df000017 	ldw	fp,0(sp)
     5e8:	dec00104 	addi	sp,sp,4
     5ec:	f800283a 	ret

000005f0 <_ZN4GameC1EP19ControllerInterfaceP14VideoInterface>:
 */

#include "Game.h"


Game::Game(ControllerInterface* control, VideoInterface* video) : ci(control), vi(video){
     5f0:	defffb04 	addi	sp,sp,-20
     5f4:	dfc00415 	stw	ra,16(sp)
     5f8:	df000315 	stw	fp,12(sp)
     5fc:	df000304 	addi	fp,sp,12
     600:	e13ffd15 	stw	r4,-12(fp)
     604:	e17ffe15 	stw	r5,-8(fp)
     608:	e1bfff15 	stw	r6,-4(fp)
     60c:	e0bffd17 	ldw	r2,-12(fp)
     610:	e0fffe17 	ldw	r3,-8(fp)
     614:	10c00015 	stw	r3,0(r2)
     618:	e0bffd17 	ldw	r2,-12(fp)
     61c:	e0ffff17 	ldw	r3,-4(fp)
     620:	10c00115 	stw	r3,4(r2)
     624:	e0bffd17 	ldw	r2,-12(fp)
     628:	10800204 	addi	r2,r2,8
     62c:	01800204 	movi	r6,8
     630:	01400204 	movi	r5,8
     634:	1009883a 	mov	r4,r2
     638:	0002dd40 	call	2dd4 <_ZN6PacManC1Eii>
     63c:	e0bffd17 	ldw	r2,-12(fp)
     640:	00c00084 	movi	r3,2
     644:	10c07e15 	stw	r3,504(r2)
     648:	e0bffd17 	ldw	r2,-12(fp)
     64c:	10007f05 	stb	zero,508(r2)
     650:	e0bffd17 	ldw	r2,-12(fp)
     654:	10008015 	stw	zero,512(r2)
     658:	e0bffd17 	ldw	r2,-12(fp)
     65c:	10008115 	stw	zero,516(r2)
     660:	e0bffd17 	ldw	r2,-12(fp)
     664:	00c08e84 	movi	r3,570
     668:	10c08215 	stw	r3,520(r2)
     66c:	e0bffd17 	ldw	r2,-12(fp)
     670:	10008315 	stw	zero,524(r2)
     674:	e0bffd17 	ldw	r2,-12(fp)
     678:	10008415 	stw	zero,528(r2)
     67c:	e0bffd17 	ldw	r2,-12(fp)
     680:	10008515 	stw	zero,532(r2)
     684:	e0fffd17 	ldw	r3,-12(fp)
     688:	008000b4 	movhi	r2,2
     68c:	108d5004 	addi	r2,r2,13632
     690:	18c08604 	addi	r3,r3,536
     694:	1009883a 	mov	r4,r2
     698:	00823704 	movi	r2,2268
     69c:	100d883a 	mov	r6,r2
     6a0:	200b883a 	mov	r5,r4
     6a4:	1809883a 	mov	r4,r3
     6a8:	00080e80 	call	80e8 <memcpy>
	vi->clear(0);
     6ac:	e0bffd17 	ldw	r2,-12(fp)
     6b0:	10800117 	ldw	r2,4(r2)
     6b4:	000b883a 	mov	r5,zero
     6b8:	1009883a 	mov	r4,r2
     6bc:	000369c0 	call	369c <_ZN14VideoInterface5clearEt>
};
     6c0:	0001883a 	nop
     6c4:	e037883a 	mov	sp,fp
     6c8:	dfc00117 	ldw	ra,4(sp)
     6cc:	df000017 	ldw	fp,0(sp)
     6d0:	dec00204 	addi	sp,sp,8
     6d4:	f800283a 	ret

000006d8 <_ZL11buttonToDir8button_t>:

static e_dir_t buttonToDir(button_t button){
     6d8:	defffe04 	addi	sp,sp,-8
     6dc:	df000115 	stw	fp,4(sp)
     6e0:	df000104 	addi	fp,sp,4
     6e4:	e13fff15 	stw	r4,-4(fp)
	switch(button){
     6e8:	e0bfff17 	ldw	r2,-4(fp)
     6ec:	10c000a0 	cmpeqi	r3,r2,2
     6f0:	18000c1e 	bne	r3,zero,724 <_ZL11buttonToDir8button_t+0x4c>
     6f4:	10c000c8 	cmpgei	r3,r2,3
     6f8:	1800031e 	bne	r3,zero,708 <_ZL11buttonToDir8button_t+0x30>
     6fc:	10800060 	cmpeqi	r2,r2,1
     700:	1000061e 	bne	r2,zero,71c <_ZL11buttonToDir8button_t+0x44>
     704:	00000d06 	br	73c <_ZL11buttonToDir8button_t+0x64>
     708:	10c000e0 	cmpeqi	r3,r2,3
     70c:	1800071e 	bne	r3,zero,72c <_ZL11buttonToDir8button_t+0x54>
     710:	10800120 	cmpeqi	r2,r2,4
     714:	1000071e 	bne	r2,zero,734 <_ZL11buttonToDir8button_t+0x5c>
     718:	00000806 	br	73c <_ZL11buttonToDir8button_t+0x64>
		case BUTTON_UP: 	return DIR_UP;
     71c:	0005883a 	mov	r2,zero
     720:	00000706 	br	740 <_ZL11buttonToDir8button_t+0x68>
		case BUTTON_DOWN: 	return DIR_DOWN;
     724:	00800044 	movi	r2,1
     728:	00000506 	br	740 <_ZL11buttonToDir8button_t+0x68>
		case BUTTON_LEFT: 	return DIR_LEFT;
     72c:	00800084 	movi	r2,2
     730:	00000306 	br	740 <_ZL11buttonToDir8button_t+0x68>
		case BUTTON_RIGHT: 	return DIR_RIGHT;
     734:	008000c4 	movi	r2,3
     738:	00000106 	br	740 <_ZL11buttonToDir8button_t+0x68>
		default: 			return DIR_NO_DIR;
     73c:	00800104 	movi	r2,4
	}
}
     740:	e037883a 	mov	sp,fp
     744:	df000017 	ldw	fp,0(sp)
     748:	dec00104 	addi	sp,sp,4
     74c:	f800283a 	ret

00000750 <_ZN4Game6updateEi>:

void Game::update(int elapsedTime){
     750:	defff804 	addi	sp,sp,-32
     754:	dfc00715 	stw	ra,28(sp)
     758:	df000615 	stw	fp,24(sp)
     75c:	df000604 	addi	fp,sp,24
     760:	e13ffe15 	stw	r4,-8(fp)
     764:	e17fff15 	stw	r5,-4(fp)
	switch(state){
     768:	e0bffe17 	ldw	r2,-8(fp)
     76c:	10807e17 	ldw	r2,504(r2)
     770:	10c000a0 	cmpeqi	r3,r2,2
     774:	1800031e 	bne	r3,zero,784 <_ZN4Game6updateEi+0x34>
     778:	10800120 	cmpeqi	r2,r2,4
     77c:	10000f1e 	bne	r2,zero,7bc <_ZN4Game6updateEi+0x6c>
//			}
//			state = LEVEL_START;
//			break;
//		}
	}
};
     780:	00006106 	br	908 <_ZN4Game6updateEi+0x1b8>
//			printf("Max PDS: %d \n\r", max_pds);
//			state = LEVEL_START;
//			break;
//		}
		case LEVEL_START: {
			printf("Game: Level started\n\r");
     784:	010000b4 	movhi	r4,2
     788:	210f8704 	addi	r4,r4,15900
     78c:	00083880 	call	8388 <printf>

			setInSquare(&player, 10, 20);
     790:	e0bffe17 	ldw	r2,-8(fp)
     794:	10800204 	addi	r2,r2,8
     798:	01c00504 	movi	r7,20
     79c:	01800284 	movi	r6,10
     7a0:	100b883a 	mov	r5,r2
     7a4:	e13ffe17 	ldw	r4,-8(fp)
     7a8:	0000a000 	call	a00 <_ZN4Game11setInSquareEP6Entityii>

			state = LEVEL_FIRST_DRAW;
     7ac:	e0bffe17 	ldw	r2,-8(fp)
     7b0:	00c000c4 	movi	r3,3
     7b4:	10c07e15 	stw	r3,504(r2)
			break;
     7b8:	00005306 	br	908 <_ZN4Game6updateEi+0x1b8>
		}
		case LEVEL_RUN: {
			button_t button = ci->getActiveButton();
     7bc:	e0bffe17 	ldw	r2,-8(fp)
     7c0:	10800017 	ldw	r2,0(r2)
     7c4:	1009883a 	mov	r4,r2
     7c8:	00002c00 	call	2c0 <_ZN19ControllerInterface15getActiveButtonEv>
     7cc:	e0bffa15 	stw	r2,-24(fp)

			e_dir_t next = buttonToDir(button);
     7d0:	e13ffa17 	ldw	r4,-24(fp)
     7d4:	00006d80 	call	6d8 <_ZL11buttonToDir8button_t>
     7d8:	e0bffb15 	stw	r2,-20(fp)
			if(next != DIR_NO_DIR){
     7dc:	e0bffb17 	ldw	r2,-20(fp)
     7e0:	10800120 	cmpeqi	r2,r2,4
     7e4:	1000081e 	bne	r2,zero,808 <_ZN4Game6updateEi+0xb8>
				printf("press");
     7e8:	010000b4 	movhi	r4,2
     7ec:	210f8d04 	addi	r4,r4,15924
     7f0:	00083880 	call	8388 <printf>
				player.setNextDir(next);
     7f4:	e0bffe17 	ldw	r2,-8(fp)
     7f8:	10800204 	addi	r2,r2,8
     7fc:	e17ffb17 	ldw	r5,-20(fp)
     800:	1009883a 	mov	r4,r2
     804:	00004580 	call	458 <_ZN6Entity10setNextDirE5E_DIR>
			}

			updateMovement(&player, elapsedTime);
     808:	e0bffe17 	ldw	r2,-8(fp)
     80c:	10800204 	addi	r2,r2,8
     810:	e1bfff17 	ldw	r6,-4(fp)
     814:	100b883a 	mov	r5,r2
     818:	e13ffe17 	ldw	r4,-8(fp)
     81c:	0000fc40 	call	fc4 <_ZN4Game14updateMovementEP6Entityi>

			int xs = player.getX() / 8.0;
     820:	e0bffe17 	ldw	r2,-8(fp)
     824:	10800204 	addi	r2,r2,8
     828:	1009883a 	mov	r4,r2
     82c:	00005500 	call	550 <_ZN6Entity4getXEv>
     830:	1009883a 	mov	r4,r2
     834:	00066dc0 	call	66dc <__floatsisf>
     838:	1007883a 	mov	r3,r2
     83c:	00904034 	movhi	r2,16640
     840:	1885fff2 	custom	255,r2,r3,r2
     844:	1009883a 	mov	r4,r2
     848:	000666c0 	call	666c <__fixsfsi>
     84c:	e0bffc15 	stw	r2,-16(fp)
			int ys = player.getY() / 8.0;
     850:	e0bffe17 	ldw	r2,-8(fp)
     854:	10800204 	addi	r2,r2,8
     858:	1009883a 	mov	r4,r2
     85c:	00005780 	call	578 <_ZN6Entity4getYEv>
     860:	1009883a 	mov	r4,r2
     864:	00066dc0 	call	66dc <__floatsisf>
     868:	1007883a 	mov	r3,r2
     86c:	00904034 	movhi	r2,16640
     870:	1885fff2 	custom	255,r2,r3,r2
     874:	1009883a 	mov	r4,r2
     878:	000666c0 	call	666c <__fixsfsi>
     87c:	e0bffd15 	stw	r2,-12(fp)
			if(map[ys][xs] == pd){
     880:	e0fffe17 	ldw	r3,-8(fp)
     884:	e0bffd17 	ldw	r2,-12(fp)
     888:	11000564 	muli	r4,r2,21
     88c:	e0bffc17 	ldw	r2,-16(fp)
     890:	2085883a 	add	r2,r4,r2
     894:	10802184 	addi	r2,r2,134
     898:	1085883a 	add	r2,r2,r2
     89c:	1085883a 	add	r2,r2,r2
     8a0:	1885883a 	add	r2,r3,r2
     8a4:	10800017 	ldw	r2,0(r2)
     8a8:	10800058 	cmpnei	r2,r2,1
     8ac:	1000151e 	bne	r2,zero,904 <_ZN4Game6updateEi+0x1b4>
				cur_score += PAC_DOT_POINTS;
     8b0:	e0bffe17 	ldw	r2,-8(fp)
     8b4:	10808017 	ldw	r2,512(r2)
     8b8:	10c00284 	addi	r3,r2,10
     8bc:	e0bffe17 	ldw	r2,-8(fp)
     8c0:	10c08015 	stw	r3,512(r2)
				cur_pds++;
     8c4:	e0bffe17 	ldw	r2,-8(fp)
     8c8:	10808517 	ldw	r2,532(r2)
     8cc:	10c00044 	addi	r3,r2,1
     8d0:	e0bffe17 	ldw	r2,-8(fp)
     8d4:	10c08515 	stw	r3,532(r2)
				map[ys][xs] = ed;
     8d8:	e0fffe17 	ldw	r3,-8(fp)
     8dc:	e0bffd17 	ldw	r2,-12(fp)
     8e0:	11000564 	muli	r4,r2,21
     8e4:	e0bffc17 	ldw	r2,-16(fp)
     8e8:	2085883a 	add	r2,r4,r2
     8ec:	10802184 	addi	r2,r2,134
     8f0:	1085883a 	add	r2,r2,r2
     8f4:	1085883a 	add	r2,r2,r2
     8f8:	1885883a 	add	r2,r3,r2
     8fc:	00c00084 	movi	r3,2
     900:	10c00015 	stw	r3,0(r2)
			}
//			if(cur_pds >= max_pds){
//				state = LEVEL_RESET;
//			}
			break;
     904:	0001883a 	nop
//			}
//			state = LEVEL_START;
//			break;
//		}
	}
};
     908:	0001883a 	nop
     90c:	e037883a 	mov	sp,fp
     910:	dfc00117 	ldw	ra,4(sp)
     914:	df000017 	ldw	fp,0(sp)
     918:	dec00204 	addi	sp,sp,8
     91c:	f800283a 	ret

00000920 <_ZN4Game4drawEv>:


void Game::draw(){
     920:	defffd04 	addi	sp,sp,-12
     924:	dfc00215 	stw	ra,8(sp)
     928:	df000115 	stw	fp,4(sp)
     92c:	df000104 	addi	fp,sp,4
     930:	e13fff15 	stw	r4,-4(fp)
	switch(state){
     934:	e0bfff17 	ldw	r2,-4(fp)
     938:	10807e17 	ldw	r2,504(r2)
     93c:	10c000e0 	cmpeqi	r3,r2,3
     940:	1800031e 	bne	r3,zero,950 <_ZN4Game4drawEv+0x30>
     944:	10800120 	cmpeqi	r2,r2,4
     948:	10000e1e 	bne	r2,zero,984 <_ZN4Game4drawEv+0x64>
			if(cur_score != old_score)
				drawScore();

			break;
	}
};
     94c:	00002606 	br	9e8 <_ZN4Game4drawEv+0xc8>


void Game::draw(){
	switch(state){
		case LEVEL_FIRST_DRAW:
			printf("Game: First draw\n\r");
     950:	010000b4 	movhi	r4,2
     954:	210f8f04 	addi	r4,r4,15932
     958:	00083880 	call	8388 <printf>
			drawMap();
     95c:	e13fff17 	ldw	r4,-4(fp)
     960:	0001a340 	call	1a34 <_ZN4Game7drawMapEv>
			drawScoreText();
     964:	e13fff17 	ldw	r4,-4(fp)
     968:	00017f80 	call	17f8 <_ZN4Game13drawScoreTextEv>
			drawScore();
     96c:	e13fff17 	ldw	r4,-4(fp)
     970:	00018900 	call	1890 <_ZN4Game9drawScoreEv>
			state = LEVEL_RUN;
     974:	e0bfff17 	ldw	r2,-4(fp)
     978:	00c00104 	movi	r3,4
     97c:	10c07e15 	stw	r3,504(r2)
			break;
     980:	00001906 	br	9e8 <_ZN4Game4drawEv+0xc8>
		case LEVEL_RUN:
			vi->setOffset(MAP_OFFSET_X, MAP_OFFSET_Y);
     984:	e0bfff17 	ldw	r2,-4(fp)
     988:	10800117 	ldw	r2,4(r2)
     98c:	01800304 	movi	r6,12
     990:	01400b84 	movi	r5,46
     994:	1009883a 	mov	r4,r2
     998:	00034d00 	call	34d0 <_ZN14VideoInterface9setOffsetEii>
			player.draw(vi);
     99c:	e0bfff17 	ldw	r2,-4(fp)
     9a0:	10c00204 	addi	r3,r2,8
     9a4:	e0bfff17 	ldw	r2,-4(fp)
     9a8:	10800117 	ldw	r2,4(r2)
     9ac:	100b883a 	mov	r5,r2
     9b0:	1809883a 	mov	r4,r3
     9b4:	00003f80 	call	3f8 <_ZN6Entity4drawEP14VideoInterface>
			vi->resetOffset();
     9b8:	e0bfff17 	ldw	r2,-4(fp)
     9bc:	10800117 	ldw	r2,4(r2)
     9c0:	1009883a 	mov	r4,r2
     9c4:	00035140 	call	3514 <_ZN14VideoInterface11resetOffsetEv>

			if(cur_score != old_score)
     9c8:	e0bfff17 	ldw	r2,-4(fp)
     9cc:	10c08017 	ldw	r3,512(r2)
     9d0:	e0bfff17 	ldw	r2,-4(fp)
     9d4:	10808117 	ldw	r2,516(r2)
     9d8:	18800226 	beq	r3,r2,9e4 <_ZN4Game4drawEv+0xc4>
				drawScore();
     9dc:	e13fff17 	ldw	r4,-4(fp)
     9e0:	00018900 	call	1890 <_ZN4Game9drawScoreEv>

			break;
     9e4:	0001883a 	nop
	}
};
     9e8:	0001883a 	nop
     9ec:	e037883a 	mov	sp,fp
     9f0:	dfc00117 	ldw	ra,4(sp)
     9f4:	df000017 	ldw	fp,0(sp)
     9f8:	dec00204 	addi	sp,sp,8
     9fc:	f800283a 	ret

00000a00 <_ZN4Game11setInSquareEP6Entityii>:

void Game::setInSquare(Entity* en, int xs, int ys){
     a00:	defffa04 	addi	sp,sp,-24
     a04:	dfc00515 	stw	ra,20(sp)
     a08:	df000415 	stw	fp,16(sp)
     a0c:	df000404 	addi	fp,sp,16
     a10:	e13ffc15 	stw	r4,-16(fp)
     a14:	e17ffd15 	stw	r5,-12(fp)
     a18:	e1bffe15 	stw	r6,-8(fp)
     a1c:	e1ffff15 	stw	r7,-4(fp)
	en->setPos(xs*8, ys*8);
     a20:	e0bffe17 	ldw	r2,-8(fp)
     a24:	100690fa 	slli	r3,r2,3
     a28:	e0bfff17 	ldw	r2,-4(fp)
     a2c:	100490fa 	slli	r2,r2,3
     a30:	100d883a 	mov	r6,r2
     a34:	180b883a 	mov	r5,r3
     a38:	e13ffd17 	ldw	r4,-12(fp)
     a3c:	00004d80 	call	4d8 <_ZN6Entity6setPosEii>
};
     a40:	0001883a 	nop
     a44:	e037883a 	mov	sp,fp
     a48:	dfc00117 	ldw	ra,4(sp)
     a4c:	df000017 	ldw	fp,0(sp)
     a50:	dec00204 	addi	sp,sp,8
     a54:	f800283a 	ret

00000a58 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_>:

void Game::distanceToWalls(Entity* en, int* up, int* down, int* left, int* right){
     a58:	defff004 	addi	sp,sp,-64
     a5c:	dfc00f15 	stw	ra,60(sp)
     a60:	df000e15 	stw	fp,56(sp)
     a64:	df000e04 	addi	fp,sp,56
     a68:	e13ffc15 	stw	r4,-16(fp)
     a6c:	e17ffd15 	stw	r5,-12(fp)
     a70:	e1bffe15 	stw	r6,-8(fp)
     a74:	e1ffff15 	stw	r7,-4(fp)
	int x = en->getX();
     a78:	e13ffd17 	ldw	r4,-12(fp)
     a7c:	00005500 	call	550 <_ZN6Entity4getXEv>
     a80:	e0bff615 	stw	r2,-40(fp)
	int y = en->getY();
     a84:	e13ffd17 	ldw	r4,-12(fp)
     a88:	00005780 	call	578 <_ZN6Entity4getYEv>
     a8c:	e0bff715 	stw	r2,-36(fp)
	int xSq = en->getX() / 8.0;
     a90:	e13ffd17 	ldw	r4,-12(fp)
     a94:	00005500 	call	550 <_ZN6Entity4getXEv>
     a98:	1009883a 	mov	r4,r2
     a9c:	00066dc0 	call	66dc <__floatsisf>
     aa0:	1007883a 	mov	r3,r2
     aa4:	00904034 	movhi	r2,16640
     aa8:	1885fff2 	custom	255,r2,r3,r2
     aac:	1009883a 	mov	r4,r2
     ab0:	000666c0 	call	666c <__fixsfsi>
     ab4:	e0bff815 	stw	r2,-32(fp)
	int ySq = en->getY() / 8.0;
     ab8:	e13ffd17 	ldw	r4,-12(fp)
     abc:	00005780 	call	578 <_ZN6Entity4getYEv>
     ac0:	1009883a 	mov	r4,r2
     ac4:	00066dc0 	call	66dc <__floatsisf>
     ac8:	1007883a 	mov	r3,r2
     acc:	00904034 	movhi	r2,16640
     ad0:	1885fff2 	custom	255,r2,r3,r2
     ad4:	1009883a 	mov	r4,r2
     ad8:	000666c0 	call	666c <__fixsfsi>
     adc:	e0bff915 	stw	r2,-28(fp)

	int upSq = 0, downSq = 0, leftSq = 0, rightSq = 0;
     ae0:	e03ff215 	stw	zero,-56(fp)
     ae4:	e03ff315 	stw	zero,-52(fp)
     ae8:	e03ff415 	stw	zero,-48(fp)
     aec:	e03ff515 	stw	zero,-44(fp)
	if(x % 8 == 0){
     af0:	e0bff617 	ldw	r2,-40(fp)
     af4:	108001cc 	andi	r2,r2,7
     af8:	10002c1e 	bne	r2,zero,bac <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x154>
		while(walkable(map[ySq - upSq - 1][xSq])) 	 upSq++;
     afc:	e0fff917 	ldw	r3,-28(fp)
     b00:	e0bff217 	ldw	r2,-56(fp)
     b04:	1885c83a 	sub	r2,r3,r2
     b08:	10bfffc4 	addi	r2,r2,-1
     b0c:	e0fffc17 	ldw	r3,-16(fp)
     b10:	11000564 	muli	r4,r2,21
     b14:	e0bff817 	ldw	r2,-32(fp)
     b18:	2085883a 	add	r2,r4,r2
     b1c:	10802184 	addi	r2,r2,134
     b20:	1085883a 	add	r2,r2,r2
     b24:	1085883a 	add	r2,r2,r2
     b28:	1885883a 	add	r2,r3,r2
     b2c:	10800017 	ldw	r2,0(r2)
     b30:	100b883a 	mov	r5,r2
     b34:	e13ffc17 	ldw	r4,-16(fp)
     b38:	00012b80 	call	12b8 <_ZN4Game8walkableE10map_item_t>
     b3c:	10803fcc 	andi	r2,r2,255
     b40:	10000426 	beq	r2,zero,b54 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0xfc>
     b44:	e0bff217 	ldw	r2,-56(fp)
     b48:	10800044 	addi	r2,r2,1
     b4c:	e0bff215 	stw	r2,-56(fp)
     b50:	003fea06 	br	afc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000afc>
		while(walkable(map[ySq + downSq + 1][xSq]))  downSq++;
     b54:	e0fff917 	ldw	r3,-28(fp)
     b58:	e0bff317 	ldw	r2,-52(fp)
     b5c:	1885883a 	add	r2,r3,r2
     b60:	10800044 	addi	r2,r2,1
     b64:	e0fffc17 	ldw	r3,-16(fp)
     b68:	11000564 	muli	r4,r2,21
     b6c:	e0bff817 	ldw	r2,-32(fp)
     b70:	2085883a 	add	r2,r4,r2
     b74:	10802184 	addi	r2,r2,134
     b78:	1085883a 	add	r2,r2,r2
     b7c:	1085883a 	add	r2,r2,r2
     b80:	1885883a 	add	r2,r3,r2
     b84:	10800017 	ldw	r2,0(r2)
     b88:	100b883a 	mov	r5,r2
     b8c:	e13ffc17 	ldw	r4,-16(fp)
     b90:	00012b80 	call	12b8 <_ZN4Game8walkableE10map_item_t>
     b94:	10803fcc 	andi	r2,r2,255
     b98:	10000426 	beq	r2,zero,bac <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x154>
     b9c:	e0bff317 	ldw	r2,-52(fp)
     ba0:	10800044 	addi	r2,r2,1
     ba4:	e0bff315 	stw	r2,-52(fp)
     ba8:	003fea06 	br	b54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000b54>
	}
	if(y % 8 == 0){
     bac:	e0bff717 	ldw	r2,-36(fp)
     bb0:	108001cc 	andi	r2,r2,7
     bb4:	10002c1e 	bne	r2,zero,c68 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x210>
		while(walkable(map[ySq][xSq - leftSq - 1]))  leftSq++;
     bb8:	e0fff817 	ldw	r3,-32(fp)
     bbc:	e0bff417 	ldw	r2,-48(fp)
     bc0:	1885c83a 	sub	r2,r3,r2
     bc4:	10bfffc4 	addi	r2,r2,-1
     bc8:	e0fffc17 	ldw	r3,-16(fp)
     bcc:	e13ff917 	ldw	r4,-28(fp)
     bd0:	21000564 	muli	r4,r4,21
     bd4:	2085883a 	add	r2,r4,r2
     bd8:	10802184 	addi	r2,r2,134
     bdc:	1085883a 	add	r2,r2,r2
     be0:	1085883a 	add	r2,r2,r2
     be4:	1885883a 	add	r2,r3,r2
     be8:	10800017 	ldw	r2,0(r2)
     bec:	100b883a 	mov	r5,r2
     bf0:	e13ffc17 	ldw	r4,-16(fp)
     bf4:	00012b80 	call	12b8 <_ZN4Game8walkableE10map_item_t>
     bf8:	10803fcc 	andi	r2,r2,255
     bfc:	10000426 	beq	r2,zero,c10 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x1b8>
     c00:	e0bff417 	ldw	r2,-48(fp)
     c04:	10800044 	addi	r2,r2,1
     c08:	e0bff415 	stw	r2,-48(fp)
     c0c:	003fea06 	br	bb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000bb8>
		while(walkable(map[ySq][xSq + rightSq + 1])) rightSq++;
     c10:	e0fff817 	ldw	r3,-32(fp)
     c14:	e0bff517 	ldw	r2,-44(fp)
     c18:	1885883a 	add	r2,r3,r2
     c1c:	10800044 	addi	r2,r2,1
     c20:	e0fffc17 	ldw	r3,-16(fp)
     c24:	e13ff917 	ldw	r4,-28(fp)
     c28:	21000564 	muli	r4,r4,21
     c2c:	2085883a 	add	r2,r4,r2
     c30:	10802184 	addi	r2,r2,134
     c34:	1085883a 	add	r2,r2,r2
     c38:	1085883a 	add	r2,r2,r2
     c3c:	1885883a 	add	r2,r3,r2
     c40:	10800017 	ldw	r2,0(r2)
     c44:	100b883a 	mov	r5,r2
     c48:	e13ffc17 	ldw	r4,-16(fp)
     c4c:	00012b80 	call	12b8 <_ZN4Game8walkableE10map_item_t>
     c50:	10803fcc 	andi	r2,r2,255
     c54:	10000426 	beq	r2,zero,c68 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x210>
     c58:	e0bff517 	ldw	r2,-44(fp)
     c5c:	10800044 	addi	r2,r2,1
     c60:	e0bff515 	stw	r2,-44(fp)
     c64:	003fea06 	br	c10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000c10>
	}

	int xPixel = (xSq * 8) - x;
     c68:	e0bff817 	ldw	r2,-32(fp)
     c6c:	100690fa 	slli	r3,r2,3
     c70:	e0bff617 	ldw	r2,-40(fp)
     c74:	1885c83a 	sub	r2,r3,r2
     c78:	e0bffa15 	stw	r2,-24(fp)
	int yPixel = (ySq * 8) - y;
     c7c:	e0bff917 	ldw	r2,-28(fp)
     c80:	100690fa 	slli	r3,r2,3
     c84:	e0bff717 	ldw	r2,-36(fp)
     c88:	1885c83a 	sub	r2,r3,r2
     c8c:	e0bffb15 	stw	r2,-20(fp)

	*up 	= (upSq * 8) - yPixel;
     c90:	e0bff217 	ldw	r2,-56(fp)
     c94:	100690fa 	slli	r3,r2,3
     c98:	e0bffb17 	ldw	r2,-20(fp)
     c9c:	1887c83a 	sub	r3,r3,r2
     ca0:	e0bffe17 	ldw	r2,-8(fp)
     ca4:	10c00015 	stw	r3,0(r2)
	*down 	= (downSq * 8) + yPixel;
     ca8:	e0bff317 	ldw	r2,-52(fp)
     cac:	100690fa 	slli	r3,r2,3
     cb0:	e0bffb17 	ldw	r2,-20(fp)
     cb4:	1887883a 	add	r3,r3,r2
     cb8:	e0bfff17 	ldw	r2,-4(fp)
     cbc:	10c00015 	stw	r3,0(r2)
	*left 	= (leftSq * 8) - xPixel;
     cc0:	e0bff417 	ldw	r2,-48(fp)
     cc4:	100690fa 	slli	r3,r2,3
     cc8:	e0bffa17 	ldw	r2,-24(fp)
     ccc:	1887c83a 	sub	r3,r3,r2
     cd0:	e0800217 	ldw	r2,8(fp)
     cd4:	10c00015 	stw	r3,0(r2)
	*right 	= (rightSq * 8) + xPixel;
     cd8:	e0bff517 	ldw	r2,-44(fp)
     cdc:	100690fa 	slli	r3,r2,3
     ce0:	e0bffa17 	ldw	r2,-24(fp)
     ce4:	1887883a 	add	r3,r3,r2
     ce8:	e0800317 	ldw	r2,12(fp)
     cec:	10c00015 	stw	r3,0(r2)
};
     cf0:	0001883a 	nop
     cf4:	e037883a 	mov	sp,fp
     cf8:	dfc00117 	ldw	ra,4(sp)
     cfc:	df000017 	ldw	fp,0(sp)
     d00:	dec00204 	addi	sp,sp,8
     d04:	f800283a 	ret

00000d08 <_ZN4Game15distanceToEntryEP6EntityPi>:

bool Game::distanceToEntry(Entity* en, int* distance){
     d08:	defff104 	addi	sp,sp,-60
     d0c:	dfc00e15 	stw	ra,56(sp)
     d10:	df000d15 	stw	fp,52(sp)
     d14:	df000d04 	addi	fp,sp,52
     d18:	e13ffd15 	stw	r4,-12(fp)
     d1c:	e17ffe15 	stw	r5,-8(fp)
     d20:	e1bfff15 	stw	r6,-4(fp)
	int x = en->getX();
     d24:	e13ffe17 	ldw	r4,-8(fp)
     d28:	00005500 	call	550 <_ZN6Entity4getXEv>
     d2c:	e0bff915 	stw	r2,-28(fp)
	int y = en->getY();
     d30:	e13ffe17 	ldw	r4,-8(fp)
     d34:	00005780 	call	578 <_ZN6Entity4getYEv>
     d38:	e0bffa15 	stw	r2,-24(fp)
	int xSq = en->getX() / 8.0;
     d3c:	e13ffe17 	ldw	r4,-8(fp)
     d40:	00005500 	call	550 <_ZN6Entity4getXEv>
     d44:	1009883a 	mov	r4,r2
     d48:	00066dc0 	call	66dc <__floatsisf>
     d4c:	1007883a 	mov	r3,r2
     d50:	00904034 	movhi	r2,16640
     d54:	1885fff2 	custom	255,r2,r3,r2
     d58:	1009883a 	mov	r4,r2
     d5c:	000666c0 	call	666c <__fixsfsi>
     d60:	e0bff315 	stw	r2,-52(fp)
	int ySq = en->getY() / 8.0;
     d64:	e13ffe17 	ldw	r4,-8(fp)
     d68:	00005780 	call	578 <_ZN6Entity4getYEv>
     d6c:	1009883a 	mov	r4,r2
     d70:	00066dc0 	call	66dc <__floatsisf>
     d74:	1007883a 	mov	r3,r2
     d78:	00904034 	movhi	r2,16640
     d7c:	1885fff2 	custom	255,r2,r3,r2
     d80:	1009883a 	mov	r4,r2
     d84:	000666c0 	call	666c <__fixsfsi>
     d88:	e0bff415 	stw	r2,-48(fp)

	e_dir_t curr_dir = en->getCurrDir();
     d8c:	e13ffe17 	ldw	r4,-8(fp)
     d90:	00005a00 	call	5a0 <_ZN6Entity10getCurrDirEv>
     d94:	e0bffb15 	stw	r2,-20(fp)
	e_dir_t next_dir = en->getNextDir();
     d98:	e13ffe17 	ldw	r4,-8(fp)
     d9c:	00005c80 	call	5c8 <_ZN6Entity10getNextDirEv>
     da0:	e0bffc15 	stw	r2,-16(fp)

	int walk_x = 0, walk_y = 0;
     da4:	e03ff515 	stw	zero,-44(fp)
     da8:	e03ff615 	stw	zero,-40(fp)
	int check_x = 0, check_y = 0;
     dac:	e03ff715 	stw	zero,-36(fp)
     db0:	e03ff815 	stw	zero,-32(fp)

	switch(curr_dir){
     db4:	e0bffb17 	ldw	r2,-20(fp)
     db8:	10c00060 	cmpeqi	r3,r2,1
     dbc:	18000c1e 	bne	r3,zero,df0 <_ZN4Game15distanceToEntryEP6EntityPi+0xe8>
     dc0:	10c00088 	cmpgei	r3,r2,2
     dc4:	1800021e 	bne	r3,zero,dd0 <_ZN4Game15distanceToEntryEP6EntityPi+0xc8>
     dc8:	10000626 	beq	r2,zero,de4 <_ZN4Game15distanceToEntryEP6EntityPi+0xdc>
     dcc:	00001106 	br	e14 <_ZN4Game15distanceToEntryEP6EntityPi+0x10c>
     dd0:	10c000a0 	cmpeqi	r3,r2,2
     dd4:	1800091e 	bne	r3,zero,dfc <_ZN4Game15distanceToEntryEP6EntityPi+0xf4>
     dd8:	108000e0 	cmpeqi	r2,r2,3
     ddc:	10000a1e 	bne	r2,zero,e08 <_ZN4Game15distanceToEntryEP6EntityPi+0x100>
     de0:	00000c06 	br	e14 <_ZN4Game15distanceToEntryEP6EntityPi+0x10c>
	case DIR_UP: 	walk_y = -1; break;
     de4:	00bfffc4 	movi	r2,-1
     de8:	e0bff615 	stw	r2,-40(fp)
     dec:	00000b06 	br	e1c <_ZN4Game15distanceToEntryEP6EntityPi+0x114>
	case DIR_DOWN: 	walk_y = 1; break;
     df0:	00800044 	movi	r2,1
     df4:	e0bff615 	stw	r2,-40(fp)
     df8:	00000806 	br	e1c <_ZN4Game15distanceToEntryEP6EntityPi+0x114>
	case DIR_LEFT: 	walk_x = -1; break;
     dfc:	00bfffc4 	movi	r2,-1
     e00:	e0bff515 	stw	r2,-44(fp)
     e04:	00000506 	br	e1c <_ZN4Game15distanceToEntryEP6EntityPi+0x114>
	case DIR_RIGHT: walk_x = 1; break;
     e08:	00800044 	movi	r2,1
     e0c:	e0bff515 	stw	r2,-44(fp)
     e10:	00000206 	br	e1c <_ZN4Game15distanceToEntryEP6EntityPi+0x114>
	default: return false;
     e14:	0005883a 	mov	r2,zero
     e18:	00006506 	br	fb0 <_ZN4Game15distanceToEntryEP6EntityPi+0x2a8>
	}

	switch(next_dir){
     e1c:	e0bffc17 	ldw	r2,-16(fp)
     e20:	10c00060 	cmpeqi	r3,r2,1
     e24:	18000c1e 	bne	r3,zero,e58 <_ZN4Game15distanceToEntryEP6EntityPi+0x150>
     e28:	10c00088 	cmpgei	r3,r2,2
     e2c:	1800021e 	bne	r3,zero,e38 <_ZN4Game15distanceToEntryEP6EntityPi+0x130>
     e30:	10000626 	beq	r2,zero,e4c <_ZN4Game15distanceToEntryEP6EntityPi+0x144>
     e34:	00001106 	br	e7c <_ZN4Game15distanceToEntryEP6EntityPi+0x174>
     e38:	10c000a0 	cmpeqi	r3,r2,2
     e3c:	1800091e 	bne	r3,zero,e64 <_ZN4Game15distanceToEntryEP6EntityPi+0x15c>
     e40:	108000e0 	cmpeqi	r2,r2,3
     e44:	10000a1e 	bne	r2,zero,e70 <_ZN4Game15distanceToEntryEP6EntityPi+0x168>
     e48:	00000c06 	br	e7c <_ZN4Game15distanceToEntryEP6EntityPi+0x174>
	case DIR_UP: 	check_y = -1; break;
     e4c:	00bfffc4 	movi	r2,-1
     e50:	e0bff815 	stw	r2,-32(fp)
     e54:	00000b06 	br	e84 <_ZN4Game15distanceToEntryEP6EntityPi+0x17c>
	case DIR_DOWN: 	check_y = 1; break;
     e58:	00800044 	movi	r2,1
     e5c:	e0bff815 	stw	r2,-32(fp)
     e60:	00000806 	br	e84 <_ZN4Game15distanceToEntryEP6EntityPi+0x17c>
	case DIR_LEFT: 	check_x = -1; break;
     e64:	00bfffc4 	movi	r2,-1
     e68:	e0bff715 	stw	r2,-36(fp)
     e6c:	00000506 	br	e84 <_ZN4Game15distanceToEntryEP6EntityPi+0x17c>
	case DIR_RIGHT: check_x = 1; break;
     e70:	00800044 	movi	r2,1
     e74:	e0bff715 	stw	r2,-36(fp)
     e78:	00000206 	br	e84 <_ZN4Game15distanceToEntryEP6EntityPi+0x17c>
	default: return false;
     e7c:	0005883a 	mov	r2,zero
     e80:	00004b06 	br	fb0 <_ZN4Game15distanceToEntryEP6EntityPi+0x2a8>
	}

	while(walkable(map[ySq][xSq])){ // walk current direction per square
     e84:	e0fffd17 	ldw	r3,-12(fp)
     e88:	e0bff417 	ldw	r2,-48(fp)
     e8c:	11000564 	muli	r4,r2,21
     e90:	e0bff317 	ldw	r2,-52(fp)
     e94:	2085883a 	add	r2,r4,r2
     e98:	10802184 	addi	r2,r2,134
     e9c:	1085883a 	add	r2,r2,r2
     ea0:	1085883a 	add	r2,r2,r2
     ea4:	1885883a 	add	r2,r3,r2
     ea8:	10800017 	ldw	r2,0(r2)
     eac:	100b883a 	mov	r5,r2
     eb0:	e13ffd17 	ldw	r4,-12(fp)
     eb4:	00012b80 	call	12b8 <_ZN4Game8walkableE10map_item_t>
     eb8:	10803fcc 	andi	r2,r2,255
     ebc:	10003b26 	beq	r2,zero,fac <_ZN4Game15distanceToEntryEP6EntityPi+0x2a4>
		if(walkable(map[ySq + check_y][xSq + check_x])){ // check per walkable square if it's walkable in the direction we wish to go
     ec0:	e0fff417 	ldw	r3,-48(fp)
     ec4:	e0bff817 	ldw	r2,-32(fp)
     ec8:	1889883a 	add	r4,r3,r2
     ecc:	e0fff317 	ldw	r3,-52(fp)
     ed0:	e0bff717 	ldw	r2,-36(fp)
     ed4:	1885883a 	add	r2,r3,r2
     ed8:	e0fffd17 	ldw	r3,-12(fp)
     edc:	21000564 	muli	r4,r4,21
     ee0:	2085883a 	add	r2,r4,r2
     ee4:	10802184 	addi	r2,r2,134
     ee8:	1085883a 	add	r2,r2,r2
     eec:	1085883a 	add	r2,r2,r2
     ef0:	1885883a 	add	r2,r3,r2
     ef4:	10800017 	ldw	r2,0(r2)
     ef8:	100b883a 	mov	r5,r2
     efc:	e13ffd17 	ldw	r4,-12(fp)
     f00:	00012b80 	call	12b8 <_ZN4Game8walkableE10map_item_t>
     f04:	10803fcc 	andi	r2,r2,255
     f08:	10001f26 	beq	r2,zero,f88 <_ZN4Game15distanceToEntryEP6EntityPi+0x280>
			switch(next_dir){
     f0c:	e0bffc17 	ldw	r2,-16(fp)
     f10:	10001916 	blt	r2,zero,f78 <_ZN4Game15distanceToEntryEP6EntityPi+0x270>
     f14:	10c00090 	cmplti	r3,r2,2
     f18:	1800031e 	bne	r3,zero,f28 <_ZN4Game15distanceToEntryEP6EntityPi+0x220>
     f1c:	10800108 	cmpgei	r2,r2,4
     f20:	1000151e 	bne	r2,zero,f78 <_ZN4Game15distanceToEntryEP6EntityPi+0x270>
     f24:	00000a06 	br	f50 <_ZN4Game15distanceToEntryEP6EntityPi+0x248>
			case DIR_UP:
			case DIR_DOWN:
				*distance = abs((xSq * 8) - x);
     f28:	e0bff317 	ldw	r2,-52(fp)
     f2c:	100690fa 	slli	r3,r2,3
     f30:	e0bff917 	ldw	r2,-28(fp)
     f34:	1885c83a 	sub	r2,r3,r2
     f38:	1000010e 	bge	r2,zero,f40 <_ZN4Game15distanceToEntryEP6EntityPi+0x238>
     f3c:	0085c83a 	sub	r2,zero,r2
     f40:	1007883a 	mov	r3,r2
     f44:	e0bfff17 	ldw	r2,-4(fp)
     f48:	10c00015 	stw	r3,0(r2)
				break;
     f4c:	00000c06 	br	f80 <_ZN4Game15distanceToEntryEP6EntityPi+0x278>
			case DIR_LEFT:
			case DIR_RIGHT:
				*distance = abs((ySq * 8) - y);
     f50:	e0bff417 	ldw	r2,-48(fp)
     f54:	100690fa 	slli	r3,r2,3
     f58:	e0bffa17 	ldw	r2,-24(fp)
     f5c:	1885c83a 	sub	r2,r3,r2
     f60:	1000010e 	bge	r2,zero,f68 <_ZN4Game15distanceToEntryEP6EntityPi+0x260>
     f64:	0085c83a 	sub	r2,zero,r2
     f68:	1007883a 	mov	r3,r2
     f6c:	e0bfff17 	ldw	r2,-4(fp)
     f70:	10c00015 	stw	r3,0(r2)
				break;
     f74:	00000206 	br	f80 <_ZN4Game15distanceToEntryEP6EntityPi+0x278>
			default: return false;
     f78:	0005883a 	mov	r2,zero
     f7c:	00000c06 	br	fb0 <_ZN4Game15distanceToEntryEP6EntityPi+0x2a8>
			}
			return true;
     f80:	00800044 	movi	r2,1
     f84:	00000a06 	br	fb0 <_ZN4Game15distanceToEntryEP6EntityPi+0x2a8>
		}
		xSq += walk_x;
     f88:	e0fff317 	ldw	r3,-52(fp)
     f8c:	e0bff517 	ldw	r2,-44(fp)
     f90:	1885883a 	add	r2,r3,r2
     f94:	e0bff315 	stw	r2,-52(fp)
		ySq += walk_y;
     f98:	e0fff417 	ldw	r3,-48(fp)
     f9c:	e0bff617 	ldw	r2,-40(fp)
     fa0:	1885883a 	add	r2,r3,r2
     fa4:	e0bff415 	stw	r2,-48(fp)
	case DIR_LEFT: 	check_x = -1; break;
	case DIR_RIGHT: check_x = 1; break;
	default: return false;
	}

	while(walkable(map[ySq][xSq])){ // walk current direction per square
     fa8:	003fb606 	br	e84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7000e84>
		}
		xSq += walk_x;
		ySq += walk_y;
	}

	return false;
     fac:	0005883a 	mov	r2,zero
}
     fb0:	e037883a 	mov	sp,fp
     fb4:	dfc00117 	ldw	ra,4(sp)
     fb8:	df000017 	ldw	fp,0(sp)
     fbc:	dec00204 	addi	sp,sp,8
     fc0:	f800283a 	ret

00000fc4 <_ZN4Game14updateMovementEP6Entityi>:


void Game::updateMovement(Entity* en, int elapsedTime){
     fc4:	deffef04 	addi	sp,sp,-68
     fc8:	dfc01015 	stw	ra,64(sp)
     fcc:	df000f15 	stw	fp,60(sp)
     fd0:	dc000e15 	stw	r16,56(sp)
     fd4:	df000f04 	addi	fp,sp,60
     fd8:	e13ffc15 	stw	r4,-16(fp)
     fdc:	e17ffd15 	stw	r5,-12(fp)
     fe0:	e1bffe15 	stw	r6,-8(fp)
	en->update(elapsedTime);
     fe4:	e17ffe17 	ldw	r5,-8(fp)
     fe8:	e13ffd17 	ldw	r4,-12(fp)
     fec:	000037c0 	call	37c <_ZN6Entity6updateEi>

	// Calculate maximum travelable distance
	float timeFraction = (float)elapsedTime / 1000;
     ff0:	e13ffe17 	ldw	r4,-8(fp)
     ff4:	00066dc0 	call	66dc <__floatsisf>
     ff8:	1007883a 	mov	r3,r2
     ffc:	00911eb4 	movhi	r2,17530
    1000:	1885fff2 	custom	255,r2,r3,r2
    1004:	e0bff515 	stw	r2,-44(fp)
	int walk = roundf(timeFraction * en->getVelocity());
    1008:	e13ffd17 	ldw	r4,-12(fp)
    100c:	00005280 	call	528 <_ZN6Entity11getVelocityEv>
    1010:	1009883a 	mov	r4,r2
    1014:	00066dc0 	call	66dc <__floatsisf>
    1018:	1007883a 	mov	r3,r2
    101c:	e0bff517 	ldw	r2,-44(fp)
    1020:	1885ff32 	custom	252,r2,r3,r2
    1024:	1009883a 	mov	r4,r2
    1028:	0005f9c0 	call	5f9c <roundf>
    102c:	1007883a 	mov	r3,r2
    1030:	1809883a 	mov	r4,r3
    1034:	000666c0 	call	666c <__fixsfsi>
    1038:	e0bff315 	stw	r2,-52(fp)

	int up, down, left, right;
	distanceToWalls(en, &up, &down, &left, &right);
    103c:	e13ff804 	addi	r4,fp,-32
    1040:	e0fff704 	addi	r3,fp,-36
    1044:	e0bffa04 	addi	r2,fp,-24
    1048:	d8800115 	stw	r2,4(sp)
    104c:	e0bff904 	addi	r2,fp,-28
    1050:	d8800015 	stw	r2,0(sp)
    1054:	200f883a 	mov	r7,r4
    1058:	180d883a 	mov	r6,r3
    105c:	e17ffd17 	ldw	r5,-12(fp)
    1060:	e13ffc17 	ldw	r4,-16(fp)
    1064:	0000a580 	call	a58 <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_>

	if(en->getNextDir() != en->getCurrDir()){
    1068:	e13ffd17 	ldw	r4,-12(fp)
    106c:	00005c80 	call	5c8 <_ZN6Entity10getNextDirEv>
    1070:	1021883a 	mov	r16,r2
    1074:	e13ffd17 	ldw	r4,-12(fp)
    1078:	00005a00 	call	5a0 <_ZN6Entity10getCurrDirEv>
    107c:	8084c03a 	cmpne	r2,r16,r2
    1080:	10803fcc 	andi	r2,r2,255
    1084:	10003226 	beq	r2,zero,1150 <_ZN4Game14updateMovementEP6Entityi+0x18c>
		e_dir_t next = en->getNextDir();
    1088:	e13ffd17 	ldw	r4,-12(fp)
    108c:	00005c80 	call	5c8 <_ZN6Entity10getNextDirEv>
    1090:	e0bff615 	stw	r2,-40(fp)

		// Check if next direction is valid through maximum distance in that direction
		bool valid = false;
    1094:	e03ff405 	stb	zero,-48(fp)
		switch(next){
    1098:	e0bff617 	ldw	r2,-40(fp)
    109c:	10c00060 	cmpeqi	r3,r2,1
    10a0:	18000d1e 	bne	r3,zero,10d8 <_ZN4Game14updateMovementEP6Entityi+0x114>
    10a4:	10c00088 	cmpgei	r3,r2,2
    10a8:	1800021e 	bne	r3,zero,10b4 <_ZN4Game14updateMovementEP6Entityi+0xf0>
    10ac:	10000626 	beq	r2,zero,10c8 <_ZN4Game14updateMovementEP6Entityi+0x104>
		case DIR_UP: valid = up > 0; break;
		case DIR_DOWN: valid = down > 0; break;
		case DIR_LEFT: valid = left > 0; break;
		case DIR_RIGHT: valid = right > 0; break;
		default: break;
    10b0:	00001506 	br	1108 <_ZN4Game14updateMovementEP6Entityi+0x144>
	if(en->getNextDir() != en->getCurrDir()){
		e_dir_t next = en->getNextDir();

		// Check if next direction is valid through maximum distance in that direction
		bool valid = false;
		switch(next){
    10b4:	10c000a0 	cmpeqi	r3,r2,2
    10b8:	18000b1e 	bne	r3,zero,10e8 <_ZN4Game14updateMovementEP6Entityi+0x124>
    10bc:	108000e0 	cmpeqi	r2,r2,3
    10c0:	10000d1e 	bne	r2,zero,10f8 <_ZN4Game14updateMovementEP6Entityi+0x134>
		case DIR_UP: valid = up > 0; break;
		case DIR_DOWN: valid = down > 0; break;
		case DIR_LEFT: valid = left > 0; break;
		case DIR_RIGHT: valid = right > 0; break;
		default: break;
    10c4:	00001006 	br	1108 <_ZN4Game14updateMovementEP6Entityi+0x144>
		e_dir_t next = en->getNextDir();

		// Check if next direction is valid through maximum distance in that direction
		bool valid = false;
		switch(next){
		case DIR_UP: valid = up > 0; break;
    10c8:	e0bff717 	ldw	r2,-36(fp)
    10cc:	0084803a 	cmplt	r2,zero,r2
    10d0:	e0bff405 	stb	r2,-48(fp)
    10d4:	00000c06 	br	1108 <_ZN4Game14updateMovementEP6Entityi+0x144>
		case DIR_DOWN: valid = down > 0; break;
    10d8:	e0bff817 	ldw	r2,-32(fp)
    10dc:	0084803a 	cmplt	r2,zero,r2
    10e0:	e0bff405 	stb	r2,-48(fp)
    10e4:	00000806 	br	1108 <_ZN4Game14updateMovementEP6Entityi+0x144>
		case DIR_LEFT: valid = left > 0; break;
    10e8:	e0bff917 	ldw	r2,-28(fp)
    10ec:	0084803a 	cmplt	r2,zero,r2
    10f0:	e0bff405 	stb	r2,-48(fp)
    10f4:	00000406 	br	1108 <_ZN4Game14updateMovementEP6Entityi+0x144>
		case DIR_RIGHT: valid = right > 0; break;
    10f8:	e0bffa17 	ldw	r2,-24(fp)
    10fc:	0084803a 	cmplt	r2,zero,r2
    1100:	e0bff405 	stb	r2,-48(fp)
    1104:	0001883a 	nop
		default: break;
		}

		if(valid){
    1108:	e0bff403 	ldbu	r2,-48(fp)
    110c:	10000426 	beq	r2,zero,1120 <_ZN4Game14updateMovementEP6Entityi+0x15c>
			// If distance in next direction isn't zero then there is a free path
			en->setCurrDir(next);
    1110:	e17ff617 	ldw	r5,-40(fp)
    1114:	e13ffd17 	ldw	r4,-12(fp)
    1118:	00004980 	call	498 <_ZN6Entity10setCurrDirE5E_DIR>
    111c:	00000c06 	br	1150 <_ZN4Game14updateMovementEP6Entityi+0x18c>
		}else{
			// Or if the distance to the next available entry is less then the walk distance
			// then trim the walk distance so the character is exactly in front on next update
			int distance;
			if(distanceToEntry(en, &distance)){
    1120:	e0bffb04 	addi	r2,fp,-20
    1124:	100d883a 	mov	r6,r2
    1128:	e17ffd17 	ldw	r5,-12(fp)
    112c:	e13ffc17 	ldw	r4,-16(fp)
    1130:	0000d080 	call	d08 <_ZN4Game15distanceToEntryEP6EntityPi>
    1134:	10803fcc 	andi	r2,r2,255
    1138:	10000526 	beq	r2,zero,1150 <_ZN4Game14updateMovementEP6Entityi+0x18c>
				if(walk > distance){
    113c:	e0fffb17 	ldw	r3,-20(fp)
    1140:	e0bff317 	ldw	r2,-52(fp)
    1144:	1880020e 	bge	r3,r2,1150 <_ZN4Game14updateMovementEP6Entityi+0x18c>
					walk = distance;
    1148:	e0bffb17 	ldw	r2,-20(fp)
    114c:	e0bff315 	stw	r2,-52(fp)
			}
		}
	}

	// Update place
	switch(en->getCurrDir()){
    1150:	e13ffd17 	ldw	r4,-12(fp)
    1154:	00005a00 	call	5a0 <_ZN6Entity10getCurrDirEv>
    1158:	10c00060 	cmpeqi	r3,r2,1
    115c:	18001b1e 	bne	r3,zero,11cc <_ZN4Game14updateMovementEP6Entityi+0x208>
    1160:	10c00088 	cmpgei	r3,r2,2
    1164:	1800021e 	bne	r3,zero,1170 <_ZN4Game14updateMovementEP6Entityi+0x1ac>
    1168:	10000626 	beq	r2,zero,1184 <_ZN4Game14updateMovementEP6Entityi+0x1c0>
		case DIR_UP: 	en->setPos(en->getX(), en->getY() - SHORTEST(walk, up)); break;
		case DIR_DOWN: 	en->setPos(en->getX(), en->getY() + SHORTEST(walk, down)); break;
		case DIR_LEFT: 	en->setPos(en->getX() - SHORTEST(walk, left), en->getY()); break;
		case DIR_RIGHT: en->setPos(en->getX() + SHORTEST(walk, right), en->getY()); break;
		default: break;
    116c:	00004b06 	br	129c <_ZN4Game14updateMovementEP6Entityi+0x2d8>
			}
		}
	}

	// Update place
	switch(en->getCurrDir()){
    1170:	10c000a0 	cmpeqi	r3,r2,2
    1174:	1800271e 	bne	r3,zero,1214 <_ZN4Game14updateMovementEP6Entityi+0x250>
    1178:	108000e0 	cmpeqi	r2,r2,3
    117c:	1000361e 	bne	r2,zero,1258 <_ZN4Game14updateMovementEP6Entityi+0x294>
		case DIR_UP: 	en->setPos(en->getX(), en->getY() - SHORTEST(walk, up)); break;
		case DIR_DOWN: 	en->setPos(en->getX(), en->getY() + SHORTEST(walk, down)); break;
		case DIR_LEFT: 	en->setPos(en->getX() - SHORTEST(walk, left), en->getY()); break;
		case DIR_RIGHT: en->setPos(en->getX() + SHORTEST(walk, right), en->getY()); break;
		default: break;
    1180:	00004606 	br	129c <_ZN4Game14updateMovementEP6Entityi+0x2d8>
		}
	}

	// Update place
	switch(en->getCurrDir()){
		case DIR_UP: 	en->setPos(en->getX(), en->getY() - SHORTEST(walk, up)); break;
    1184:	e13ffd17 	ldw	r4,-12(fp)
    1188:	00005500 	call	550 <_ZN6Entity4getXEv>
    118c:	1021883a 	mov	r16,r2
    1190:	e13ffd17 	ldw	r4,-12(fp)
    1194:	00005780 	call	578 <_ZN6Entity4getYEv>
    1198:	1009883a 	mov	r4,r2
    119c:	e0fff717 	ldw	r3,-36(fp)
    11a0:	e0bff317 	ldw	r2,-52(fp)
    11a4:	1880020e 	bge	r3,r2,11b0 <_ZN4Game14updateMovementEP6Entityi+0x1ec>
    11a8:	e0bff717 	ldw	r2,-36(fp)
    11ac:	00000106 	br	11b4 <_ZN4Game14updateMovementEP6Entityi+0x1f0>
    11b0:	e0bff317 	ldw	r2,-52(fp)
    11b4:	2085c83a 	sub	r2,r4,r2
    11b8:	100d883a 	mov	r6,r2
    11bc:	800b883a 	mov	r5,r16
    11c0:	e13ffd17 	ldw	r4,-12(fp)
    11c4:	00004d80 	call	4d8 <_ZN6Entity6setPosEii>
    11c8:	00003406 	br	129c <_ZN4Game14updateMovementEP6Entityi+0x2d8>
		case DIR_DOWN: 	en->setPos(en->getX(), en->getY() + SHORTEST(walk, down)); break;
    11cc:	e13ffd17 	ldw	r4,-12(fp)
    11d0:	00005500 	call	550 <_ZN6Entity4getXEv>
    11d4:	1021883a 	mov	r16,r2
    11d8:	e13ffd17 	ldw	r4,-12(fp)
    11dc:	00005780 	call	578 <_ZN6Entity4getYEv>
    11e0:	1009883a 	mov	r4,r2
    11e4:	e0fff817 	ldw	r3,-32(fp)
    11e8:	e0bff317 	ldw	r2,-52(fp)
    11ec:	1880020e 	bge	r3,r2,11f8 <_ZN4Game14updateMovementEP6Entityi+0x234>
    11f0:	e0bff817 	ldw	r2,-32(fp)
    11f4:	00000106 	br	11fc <_ZN4Game14updateMovementEP6Entityi+0x238>
    11f8:	e0bff317 	ldw	r2,-52(fp)
    11fc:	2085883a 	add	r2,r4,r2
    1200:	100d883a 	mov	r6,r2
    1204:	800b883a 	mov	r5,r16
    1208:	e13ffd17 	ldw	r4,-12(fp)
    120c:	00004d80 	call	4d8 <_ZN6Entity6setPosEii>
    1210:	00002206 	br	129c <_ZN4Game14updateMovementEP6Entityi+0x2d8>
		case DIR_LEFT: 	en->setPos(en->getX() - SHORTEST(walk, left), en->getY()); break;
    1214:	e13ffd17 	ldw	r4,-12(fp)
    1218:	00005500 	call	550 <_ZN6Entity4getXEv>
    121c:	1009883a 	mov	r4,r2
    1220:	e0fff917 	ldw	r3,-28(fp)
    1224:	e0bff317 	ldw	r2,-52(fp)
    1228:	1880020e 	bge	r3,r2,1234 <_ZN4Game14updateMovementEP6Entityi+0x270>
    122c:	e0bff917 	ldw	r2,-28(fp)
    1230:	00000106 	br	1238 <_ZN4Game14updateMovementEP6Entityi+0x274>
    1234:	e0bff317 	ldw	r2,-52(fp)
    1238:	20a1c83a 	sub	r16,r4,r2
    123c:	e13ffd17 	ldw	r4,-12(fp)
    1240:	00005780 	call	578 <_ZN6Entity4getYEv>
    1244:	100d883a 	mov	r6,r2
    1248:	800b883a 	mov	r5,r16
    124c:	e13ffd17 	ldw	r4,-12(fp)
    1250:	00004d80 	call	4d8 <_ZN6Entity6setPosEii>
    1254:	00001106 	br	129c <_ZN4Game14updateMovementEP6Entityi+0x2d8>
		case DIR_RIGHT: en->setPos(en->getX() + SHORTEST(walk, right), en->getY()); break;
    1258:	e13ffd17 	ldw	r4,-12(fp)
    125c:	00005500 	call	550 <_ZN6Entity4getXEv>
    1260:	1009883a 	mov	r4,r2
    1264:	e0fffa17 	ldw	r3,-24(fp)
    1268:	e0bff317 	ldw	r2,-52(fp)
    126c:	1880020e 	bge	r3,r2,1278 <_ZN4Game14updateMovementEP6Entityi+0x2b4>
    1270:	e0bffa17 	ldw	r2,-24(fp)
    1274:	00000106 	br	127c <_ZN4Game14updateMovementEP6Entityi+0x2b8>
    1278:	e0bff317 	ldw	r2,-52(fp)
    127c:	20a1883a 	add	r16,r4,r2
    1280:	e13ffd17 	ldw	r4,-12(fp)
    1284:	00005780 	call	578 <_ZN6Entity4getYEv>
    1288:	100d883a 	mov	r6,r2
    128c:	800b883a 	mov	r5,r16
    1290:	e13ffd17 	ldw	r4,-12(fp)
    1294:	00004d80 	call	4d8 <_ZN6Entity6setPosEii>
    1298:	0001883a 	nop
		default: break;
	};
};
    129c:	0001883a 	nop
    12a0:	e6ffff04 	addi	sp,fp,-4
    12a4:	dfc00217 	ldw	ra,8(sp)
    12a8:	df000117 	ldw	fp,4(sp)
    12ac:	dc000017 	ldw	r16,0(sp)
    12b0:	dec00304 	addi	sp,sp,12
    12b4:	f800283a 	ret

000012b8 <_ZN4Game8walkableE10map_item_t>:

bool Game::walkable(map_item_t item){
    12b8:	defffd04 	addi	sp,sp,-12
    12bc:	df000215 	stw	fp,8(sp)
    12c0:	df000204 	addi	fp,sp,8
    12c4:	e13ffe15 	stw	r4,-8(fp)
    12c8:	e17fff15 	stw	r5,-4(fp)
	return (item == em || item == pd);
    12cc:	e0bfff17 	ldw	r2,-4(fp)
    12d0:	10000326 	beq	r2,zero,12e0 <_ZN4Game8walkableE10map_item_t+0x28>
    12d4:	e0bfff17 	ldw	r2,-4(fp)
    12d8:	10800058 	cmpnei	r2,r2,1
    12dc:	1000021e 	bne	r2,zero,12e8 <_ZN4Game8walkableE10map_item_t+0x30>
    12e0:	00800044 	movi	r2,1
    12e4:	00000106 	br	12ec <_ZN4Game8walkableE10map_item_t+0x34>
    12e8:	0005883a 	mov	r2,zero
};
    12ec:	e037883a 	mov	sp,fp
    12f0:	df000017 	ldw	fp,0(sp)
    12f4:	dec00104 	addi	sp,sp,4
    12f8:	f800283a 	ret

000012fc <_ZN4Game12getCharPixelEcii>:

bool Game::getCharPixel(char c, int x, int y){
    12fc:	deffed04 	addi	sp,sp,-76
    1300:	dfc01215 	stw	ra,72(sp)
    1304:	df001115 	stw	fp,68(sp)
    1308:	df001104 	addi	fp,sp,68
    130c:	e13ffc15 	stw	r4,-16(fp)
    1310:	2805883a 	mov	r2,r5
    1314:	e1bffe15 	stw	r6,-8(fp)
    1318:	e1ffff15 	stw	r7,-4(fp)
    131c:	e0bffd05 	stb	r2,-12(fp)
	if(x < 0 || x > 7)
    1320:	e0bffe17 	ldw	r2,-8(fp)
    1324:	10000316 	blt	r2,zero,1334 <_ZN4Game12getCharPixelEcii+0x38>
    1328:	e0bffe17 	ldw	r2,-8(fp)
    132c:	10800210 	cmplti	r2,r2,8
    1330:	1000021e 	bne	r2,zero,133c <_ZN4Game12getCharPixelEcii+0x40>
		return false;
    1334:	0005883a 	mov	r2,zero
    1338:	00006606 	br	14d4 <_ZN4Game12getCharPixelEcii+0x1d8>
	if(y < 0 || y > 7)
    133c:	e0bfff17 	ldw	r2,-4(fp)
    1340:	10000316 	blt	r2,zero,1350 <_ZN4Game12getCharPixelEcii+0x54>
    1344:	e0bfff17 	ldw	r2,-4(fp)
    1348:	10800210 	cmplti	r2,r2,8
    134c:	1000021e 	bne	r2,zero,1358 <_ZN4Game12getCharPixelEcii+0x5c>
		return false;
    1350:	0005883a 	mov	r2,zero
    1354:	00005f06 	br	14d4 <_ZN4Game12getCharPixelEcii+0x1d8>

	if(c >= 'A' && c <= 'Z'){
    1358:	e0bffd07 	ldb	r2,-12(fp)
    135c:	10801050 	cmplti	r2,r2,65
    1360:	1000101e 	bne	r2,zero,13a4 <_ZN4Game12getCharPixelEcii+0xa8>
    1364:	e0bffd07 	ldb	r2,-12(fp)
    1368:	108016c8 	cmpgei	r2,r2,91
    136c:	10000d1e 	bne	r2,zero,13a4 <_ZN4Game12getCharPixelEcii+0xa8>
		return bmp_letters[c - 'A'][y][x];
    1370:	e0bffd07 	ldb	r2,-12(fp)
    1374:	10ffefc4 	addi	r3,r2,-65
    1378:	008000b4 	movhi	r2,2
    137c:	10904104 	addi	r2,r2,16644
    1380:	e13fff17 	ldw	r4,-4(fp)
    1384:	210001e4 	muli	r4,r4,7
    1388:	18c00c64 	muli	r3,r3,49
    138c:	20c7883a 	add	r3,r4,r3
    1390:	10c7883a 	add	r3,r2,r3
    1394:	e0bffe17 	ldw	r2,-8(fp)
    1398:	1885883a 	add	r2,r3,r2
    139c:	10800003 	ldbu	r2,0(r2)
    13a0:	00004c06 	br	14d4 <_ZN4Game12getCharPixelEcii+0x1d8>
	}
	if(c >= '0' && c <= '9'){
    13a4:	e0bffd07 	ldb	r2,-12(fp)
    13a8:	10800c10 	cmplti	r2,r2,48
    13ac:	1000101e 	bne	r2,zero,13f0 <_ZN4Game12getCharPixelEcii+0xf4>
    13b0:	e0bffd07 	ldb	r2,-12(fp)
    13b4:	10800e88 	cmpgei	r2,r2,58
    13b8:	10000d1e 	bne	r2,zero,13f0 <_ZN4Game12getCharPixelEcii+0xf4>
		return bmp_numbers[c - '0'][y][x];
    13bc:	e0bffd07 	ldb	r2,-12(fp)
    13c0:	10fff404 	addi	r3,r2,-48
    13c4:	008000b4 	movhi	r2,2
    13c8:	10917f84 	addi	r2,r2,17918
    13cc:	e13fff17 	ldw	r4,-4(fp)
    13d0:	210001e4 	muli	r4,r4,7
    13d4:	18c00c64 	muli	r3,r3,49
    13d8:	20c7883a 	add	r3,r4,r3
    13dc:	10c7883a 	add	r3,r2,r3
    13e0:	e0bffe17 	ldw	r2,-8(fp)
    13e4:	1885883a 	add	r2,r3,r2
    13e8:	10800003 	ldbu	r2,0(r2)
    13ec:	00003906 	br	14d4 <_ZN4Game12getCharPixelEcii+0x1d8>
	}
	if(c == '-'){
    13f0:	e0bffd07 	ldb	r2,-12(fp)
    13f4:	10800b58 	cmpnei	r2,r2,45
    13f8:	1000211e 	bne	r2,zero,1480 <_ZN4Game12getCharPixelEcii+0x184>
			{0,0,0,0,0,0,0},
			{1,1,1,1,1,1,0},
			{0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0}
		};
    13fc:	e03fef15 	stw	zero,-68(fp)
    1400:	e03ff015 	stw	zero,-64(fp)
    1404:	e03ff115 	stw	zero,-60(fp)
    1408:	e03ff215 	stw	zero,-56(fp)
    140c:	e03ff315 	stw	zero,-52(fp)
    1410:	e03ff415 	stw	zero,-48(fp)
    1414:	e03ff515 	stw	zero,-44(fp)
    1418:	e03ff615 	stw	zero,-40(fp)
    141c:	e03ff715 	stw	zero,-36(fp)
    1420:	e03ff815 	stw	zero,-32(fp)
    1424:	e03ff915 	stw	zero,-28(fp)
    1428:	e03ffa15 	stw	zero,-24(fp)
    142c:	e03ffb05 	stb	zero,-20(fp)
    1430:	00800044 	movi	r2,1
    1434:	e0bff445 	stb	r2,-47(fp)
    1438:	00800044 	movi	r2,1
    143c:	e0bff485 	stb	r2,-46(fp)
    1440:	00800044 	movi	r2,1
    1444:	e0bff4c5 	stb	r2,-45(fp)
    1448:	00800044 	movi	r2,1
    144c:	e0bff505 	stb	r2,-44(fp)
    1450:	00800044 	movi	r2,1
    1454:	e0bff545 	stb	r2,-43(fp)
    1458:	00800044 	movi	r2,1
    145c:	e0bff585 	stb	r2,-42(fp)
		return dash[y][x];
    1460:	e0bfff17 	ldw	r2,-4(fp)
    1464:	108001e4 	muli	r2,r2,7
    1468:	e13fef04 	addi	r4,fp,-68
    146c:	2087883a 	add	r3,r4,r2
    1470:	e0bffe17 	ldw	r2,-8(fp)
    1474:	1885883a 	add	r2,r3,r2
    1478:	10800003 	ldbu	r2,0(r2)
    147c:	00001506 	br	14d4 <_ZN4Game12getCharPixelEcii+0x1d8>
	}
	if(c == '!'){
    1480:	e0bffd07 	ldb	r2,-12(fp)
    1484:	10800858 	cmpnei	r2,r2,33
    1488:	1000111e 	bne	r2,zero,14d0 <_ZN4Game12getCharPixelEcii+0x1d4>
			{0,0,1,1,1,0,0},
			{0,0,1,1,0,0,0},
			{0,0,1,0,0,0,0},
			{0,0,0,0,0,0,0},
			{0,1,0,0,0,0,0}
		};
    148c:	008000b4 	movhi	r2,2
    1490:	108f93c4 	addi	r2,r2,15951
    1494:	e0ffef04 	addi	r3,fp,-68
    1498:	1009883a 	mov	r4,r2
    149c:	00800c44 	movi	r2,49
    14a0:	100d883a 	mov	r6,r2
    14a4:	200b883a 	mov	r5,r4
    14a8:	1809883a 	mov	r4,r3
    14ac:	00080e80 	call	80e8 <memcpy>
		return excl[y][x];
    14b0:	e0bfff17 	ldw	r2,-4(fp)
    14b4:	108001e4 	muli	r2,r2,7
    14b8:	e13fef04 	addi	r4,fp,-68
    14bc:	2087883a 	add	r3,r4,r2
    14c0:	e0bffe17 	ldw	r2,-8(fp)
    14c4:	1885883a 	add	r2,r3,r2
    14c8:	10800003 	ldbu	r2,0(r2)
    14cc:	00000106 	br	14d4 <_ZN4Game12getCharPixelEcii+0x1d8>
	}
	return false;
    14d0:	0005883a 	mov	r2,zero
};
    14d4:	e037883a 	mov	sp,fp
    14d8:	dfc00117 	ldw	ra,4(sp)
    14dc:	df000017 	ldw	fp,0(sp)
    14e0:	dec00204 	addi	sp,sp,8
    14e4:	f800283a 	ret

000014e8 <_ZN4Game8drawCharEiic>:

void Game::drawChar(int x, int y, char c){
    14e8:	defff804 	addi	sp,sp,-32
    14ec:	dfc00715 	stw	ra,28(sp)
    14f0:	df000615 	stw	fp,24(sp)
    14f4:	df000604 	addi	fp,sp,24
    14f8:	e13ffc15 	stw	r4,-16(fp)
    14fc:	e17ffd15 	stw	r5,-12(fp)
    1500:	e1bffe15 	stw	r6,-8(fp)
    1504:	3805883a 	mov	r2,r7
    1508:	e0bfff05 	stb	r2,-4(fp)
	for(int py = 0; py < 7; py++){
    150c:	e03ffa15 	stw	zero,-24(fp)
    1510:	e0bffa17 	ldw	r2,-24(fp)
    1514:	108001c8 	cmpgei	r2,r2,7
    1518:	10001e1e 	bne	r2,zero,1594 <_ZN4Game8drawCharEiic+0xac>
		for(int px = 0; px < 7; px++){
    151c:	e03ffb15 	stw	zero,-20(fp)
    1520:	e0bffb17 	ldw	r2,-20(fp)
    1524:	108001c8 	cmpgei	r2,r2,7
    1528:	1000161e 	bne	r2,zero,1584 <_ZN4Game8drawCharEiic+0x9c>
			if(getCharPixel(c, px, py)){
    152c:	e0bfff07 	ldb	r2,-4(fp)
    1530:	e1fffa17 	ldw	r7,-24(fp)
    1534:	e1bffb17 	ldw	r6,-20(fp)
    1538:	100b883a 	mov	r5,r2
    153c:	e13ffc17 	ldw	r4,-16(fp)
    1540:	00012fc0 	call	12fc <_ZN4Game12getCharPixelEcii>
    1544:	10803fcc 	andi	r2,r2,255
    1548:	10000a26 	beq	r2,zero,1574 <_ZN4Game8drawCharEiic+0x8c>
				vi->drawPixel(x + px, y + py);
    154c:	e0bffc17 	ldw	r2,-16(fp)
    1550:	11000117 	ldw	r4,4(r2)
    1554:	e0fffd17 	ldw	r3,-12(fp)
    1558:	e0bffb17 	ldw	r2,-20(fp)
    155c:	188b883a 	add	r5,r3,r2
    1560:	e0fffe17 	ldw	r3,-8(fp)
    1564:	e0bffa17 	ldw	r2,-24(fp)
    1568:	1885883a 	add	r2,r3,r2
    156c:	100d883a 	mov	r6,r2
    1570:	00035500 	call	3550 <_ZN14VideoInterface9drawPixelEii>
	return false;
};

void Game::drawChar(int x, int y, char c){
	for(int py = 0; py < 7; py++){
		for(int px = 0; px < 7; px++){
    1574:	e0bffb17 	ldw	r2,-20(fp)
    1578:	10800044 	addi	r2,r2,1
    157c:	e0bffb15 	stw	r2,-20(fp)
    1580:	003fe706 	br	1520 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001520>
	}
	return false;
};

void Game::drawChar(int x, int y, char c){
	for(int py = 0; py < 7; py++){
    1584:	e0bffa17 	ldw	r2,-24(fp)
    1588:	10800044 	addi	r2,r2,1
    158c:	e0bffa15 	stw	r2,-24(fp)
    1590:	003fdf06 	br	1510 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001510>
			if(getCharPixel(c, px, py)){
				vi->drawPixel(x + px, y + py);
			}
		}
	}
};
    1594:	0001883a 	nop
    1598:	e037883a 	mov	sp,fp
    159c:	dfc00117 	ldw	ra,4(sp)
    15a0:	df000017 	ldw	fp,0(sp)
    15a4:	dec00204 	addi	sp,sp,8
    15a8:	f800283a 	ret

000015ac <_ZN4Game8drawTextEiiPc>:

void Game::drawText(int x, int y, char *text){
    15ac:	defff804 	addi	sp,sp,-32
    15b0:	dfc00715 	stw	ra,28(sp)
    15b4:	df000615 	stw	fp,24(sp)
    15b8:	df000604 	addi	fp,sp,24
    15bc:	e13ffc15 	stw	r4,-16(fp)
    15c0:	e17ffd15 	stw	r5,-12(fp)
    15c4:	e1bffe15 	stw	r6,-8(fp)
    15c8:	e1ffff15 	stw	r7,-4(fp)
	int place = 0;
    15cc:	e03ffa15 	stw	zero,-24(fp)

	char c = text[place];
    15d0:	e0bffa17 	ldw	r2,-24(fp)
    15d4:	e0ffff17 	ldw	r3,-4(fp)
    15d8:	1885883a 	add	r2,r3,r2
    15dc:	10800003 	ldbu	r2,0(r2)
    15e0:	e0bffb05 	stb	r2,-20(fp)
	while(c){
    15e4:	e0bffb07 	ldb	r2,-20(fp)
    15e8:	10001326 	beq	r2,zero,1638 <_ZN4Game8drawTextEiiPc+0x8c>
		drawChar((place * 8) + x, y, c);
    15ec:	e0bffa17 	ldw	r2,-24(fp)
    15f0:	100690fa 	slli	r3,r2,3
    15f4:	e0bffd17 	ldw	r2,-12(fp)
    15f8:	1885883a 	add	r2,r3,r2
    15fc:	e0fffb07 	ldb	r3,-20(fp)
    1600:	180f883a 	mov	r7,r3
    1604:	e1bffe17 	ldw	r6,-8(fp)
    1608:	100b883a 	mov	r5,r2
    160c:	e13ffc17 	ldw	r4,-16(fp)
    1610:	00014e80 	call	14e8 <_ZN4Game8drawCharEiic>

		c = text[++place];
    1614:	e0bffa17 	ldw	r2,-24(fp)
    1618:	10800044 	addi	r2,r2,1
    161c:	e0bffa15 	stw	r2,-24(fp)
    1620:	e0bffa17 	ldw	r2,-24(fp)
    1624:	e0ffff17 	ldw	r3,-4(fp)
    1628:	1885883a 	add	r2,r3,r2
    162c:	10800003 	ldbu	r2,0(r2)
    1630:	e0bffb05 	stb	r2,-20(fp)

void Game::drawText(int x, int y, char *text){
	int place = 0;

	char c = text[place];
	while(c){
    1634:	003feb06 	br	15e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70015e4>
		drawChar((place * 8) + x, y, c);

		c = text[++place];
	}
};
    1638:	0001883a 	nop
    163c:	e037883a 	mov	sp,fp
    1640:	dfc00117 	ldw	ra,4(sp)
    1644:	df000017 	ldw	fp,0(sp)
    1648:	dec00204 	addi	sp,sp,8
    164c:	f800283a 	ret

00001650 <_ZN4Game18drawTextDifferenceEiiPcS0_>:

void Game::drawTextDifference(int x, int y, char *t1, char *t2){
    1650:	defff504 	addi	sp,sp,-44
    1654:	dfc00a15 	stw	ra,40(sp)
    1658:	df000915 	stw	fp,36(sp)
    165c:	df000904 	addi	fp,sp,36
    1660:	e13ffc15 	stw	r4,-16(fp)
    1664:	e17ffd15 	stw	r5,-12(fp)
    1668:	e1bffe15 	stw	r6,-8(fp)
    166c:	e1ffff15 	stw	r7,-4(fp)
	int place = 0;
    1670:	e03ff715 	stw	zero,-36(fp)

	char c1 = t1[place];
    1674:	e0bff717 	ldw	r2,-36(fp)
    1678:	e0ffff17 	ldw	r3,-4(fp)
    167c:	1885883a 	add	r2,r3,r2
    1680:	10800003 	ldbu	r2,0(r2)
    1684:	e0bff805 	stb	r2,-32(fp)
	char c2 = t2[place];
    1688:	e0bff717 	ldw	r2,-36(fp)
    168c:	e0c00217 	ldw	r3,8(fp)
    1690:	1885883a 	add	r2,r3,r2
    1694:	10800003 	ldbu	r2,0(r2)
    1698:	e0bff845 	stb	r2,-31(fp)
	while(c1){
    169c:	e0bff807 	ldb	r2,-32(fp)
    16a0:	10004f26 	beq	r2,zero,17e0 <_ZN4Game18drawTextDifferenceEiiPcS0_+0x190>
//		if(c1 != c2){
			bool p1, p2;
			for(int py = 0; py < 7; py++){
    16a4:	e03ff915 	stw	zero,-28(fp)
    16a8:	e0bff917 	ldw	r2,-28(fp)
    16ac:	108001c8 	cmpgei	r2,r2,7
    16b0:	10003d1e 	bne	r2,zero,17a8 <_ZN4Game18drawTextDifferenceEiiPcS0_+0x158>
				for(int px = 0; px < 7; px++){
    16b4:	e03ffa15 	stw	zero,-24(fp)
    16b8:	e0bffa17 	ldw	r2,-24(fp)
    16bc:	108001c8 	cmpgei	r2,r2,7
    16c0:	1000351e 	bne	r2,zero,1798 <_ZN4Game18drawTextDifferenceEiiPcS0_+0x148>
					p1 = getCharPixel(c1, px, py);
    16c4:	e0bff807 	ldb	r2,-32(fp)
    16c8:	e1fff917 	ldw	r7,-28(fp)
    16cc:	e1bffa17 	ldw	r6,-24(fp)
    16d0:	100b883a 	mov	r5,r2
    16d4:	e13ffc17 	ldw	r4,-16(fp)
    16d8:	00012fc0 	call	12fc <_ZN4Game12getCharPixelEcii>
    16dc:	e0bffb05 	stb	r2,-20(fp)
					p2 = getCharPixel(c2, px, py);
    16e0:	e0bff847 	ldb	r2,-31(fp)
    16e4:	e1fff917 	ldw	r7,-28(fp)
    16e8:	e1bffa17 	ldw	r6,-24(fp)
    16ec:	100b883a 	mov	r5,r2
    16f0:	e13ffc17 	ldw	r4,-16(fp)
    16f4:	00012fc0 	call	12fc <_ZN4Game12getCharPixelEcii>
    16f8:	e0bffb45 	stb	r2,-19(fp)
					if(p1 && !p2)
    16fc:	e0bffb03 	ldbu	r2,-20(fp)
    1700:	10001226 	beq	r2,zero,174c <_ZN4Game18drawTextDifferenceEiiPcS0_+0xfc>
    1704:	e0bffb43 	ldbu	r2,-19(fp)
    1708:	1080005c 	xori	r2,r2,1
    170c:	10803fcc 	andi	r2,r2,255
    1710:	10000e26 	beq	r2,zero,174c <_ZN4Game18drawTextDifferenceEiiPcS0_+0xfc>
						vi->drawPixel((x + (place * 8) + px), (y + py), 0);
    1714:	e0bffc17 	ldw	r2,-16(fp)
    1718:	11000117 	ldw	r4,4(r2)
    171c:	e0bff717 	ldw	r2,-36(fp)
    1720:	100690fa 	slli	r3,r2,3
    1724:	e0bffd17 	ldw	r2,-12(fp)
    1728:	1887883a 	add	r3,r3,r2
    172c:	e0bffa17 	ldw	r2,-24(fp)
    1730:	188b883a 	add	r5,r3,r2
    1734:	e0fffe17 	ldw	r3,-8(fp)
    1738:	e0bff917 	ldw	r2,-28(fp)
    173c:	1885883a 	add	r2,r3,r2
    1740:	000f883a 	mov	r7,zero
    1744:	100d883a 	mov	r6,r2
    1748:	00035a40 	call	35a4 <_ZN14VideoInterface9drawPixelEiit>
					if(p2)
    174c:	e0bffb43 	ldbu	r2,-19(fp)
    1750:	10000d26 	beq	r2,zero,1788 <_ZN4Game18drawTextDifferenceEiiPcS0_+0x138>
						vi->drawPixel((x + (place * 8) + px), (y + py));
    1754:	e0bffc17 	ldw	r2,-16(fp)
    1758:	11000117 	ldw	r4,4(r2)
    175c:	e0bff717 	ldw	r2,-36(fp)
    1760:	100690fa 	slli	r3,r2,3
    1764:	e0bffd17 	ldw	r2,-12(fp)
    1768:	1887883a 	add	r3,r3,r2
    176c:	e0bffa17 	ldw	r2,-24(fp)
    1770:	188b883a 	add	r5,r3,r2
    1774:	e0fffe17 	ldw	r3,-8(fp)
    1778:	e0bff917 	ldw	r2,-28(fp)
    177c:	1885883a 	add	r2,r3,r2
    1780:	100d883a 	mov	r6,r2
    1784:	00035500 	call	3550 <_ZN14VideoInterface9drawPixelEii>
	char c2 = t2[place];
	while(c1){
//		if(c1 != c2){
			bool p1, p2;
			for(int py = 0; py < 7; py++){
				for(int px = 0; px < 7; px++){
    1788:	e0bffa17 	ldw	r2,-24(fp)
    178c:	10800044 	addi	r2,r2,1
    1790:	e0bffa15 	stw	r2,-24(fp)
    1794:	003fc806 	br	16b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016b8>
	char c1 = t1[place];
	char c2 = t2[place];
	while(c1){
//		if(c1 != c2){
			bool p1, p2;
			for(int py = 0; py < 7; py++){
    1798:	e0bff917 	ldw	r2,-28(fp)
    179c:	10800044 	addi	r2,r2,1
    17a0:	e0bff915 	stw	r2,-28(fp)
    17a4:	003fc006 	br	16a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70016a8>
						vi->drawPixel((x + (place * 8) + px), (y + py));
				}
			}
//		}

		place++;
    17a8:	e0bff717 	ldw	r2,-36(fp)
    17ac:	10800044 	addi	r2,r2,1
    17b0:	e0bff715 	stw	r2,-36(fp)
		c1 = t1[place];
    17b4:	e0bff717 	ldw	r2,-36(fp)
    17b8:	e0ffff17 	ldw	r3,-4(fp)
    17bc:	1885883a 	add	r2,r3,r2
    17c0:	10800003 	ldbu	r2,0(r2)
    17c4:	e0bff805 	stb	r2,-32(fp)
		c2 = t2[place];
    17c8:	e0bff717 	ldw	r2,-36(fp)
    17cc:	e0c00217 	ldw	r3,8(fp)
    17d0:	1885883a 	add	r2,r3,r2
    17d4:	10800003 	ldbu	r2,0(r2)
    17d8:	e0bff845 	stb	r2,-31(fp)
void Game::drawTextDifference(int x, int y, char *t1, char *t2){
	int place = 0;

	char c1 = t1[place];
	char c2 = t2[place];
	while(c1){
    17dc:	003faf06 	br	169c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700169c>

		place++;
		c1 = t1[place];
		c2 = t2[place];
	}
};
    17e0:	0001883a 	nop
    17e4:	e037883a 	mov	sp,fp
    17e8:	dfc00117 	ldw	ra,4(sp)
    17ec:	df000017 	ldw	fp,0(sp)
    17f0:	dec00204 	addi	sp,sp,8
    17f4:	f800283a 	ret

000017f8 <_ZN4Game13drawScoreTextEv>:

void Game::drawScoreText(){
    17f8:	defffd04 	addi	sp,sp,-12
    17fc:	dfc00215 	stw	ra,8(sp)
    1800:	df000115 	stw	fp,4(sp)
    1804:	df000104 	addi	fp,sp,4
    1808:	e13fff15 	stw	r4,-4(fp)
	vi->setOffset(SCORE_OFFSET_X, SCORE_OFFSET_Y);
    180c:	e0bfff17 	ldw	r2,-4(fp)
    1810:	10800117 	ldw	r2,4(r2)
    1814:	01800504 	movi	r6,20
    1818:	014035c4 	movi	r5,215
    181c:	1009883a 	mov	r4,r2
    1820:	00034d00 	call	34d0 <_ZN14VideoInterface9setOffsetEii>
	vi->setColor(SCORE_TEXT_COLOR);
    1824:	e0bfff17 	ldw	r2,-4(fp)
    1828:	10800117 	ldw	r2,4(r2)
    182c:	016a2814 	movui	r5,43168
    1830:	1009883a 	mov	r4,r2
    1834:	00036640 	call	3664 <_ZN14VideoInterface8setColorEt>

	drawText(0, 0, "HI-SCORE");
    1838:	01c000b4 	movhi	r7,2
    183c:	39cfa004 	addi	r7,r7,16000
    1840:	000d883a 	mov	r6,zero
    1844:	000b883a 	mov	r5,zero
    1848:	e13fff17 	ldw	r4,-4(fp)
    184c:	00015ac0 	call	15ac <_ZN4Game8drawTextEiiPc>
	drawText(8 , 32, "1UP");
    1850:	01c000b4 	movhi	r7,2
    1854:	39cfa304 	addi	r7,r7,16012
    1858:	01800804 	movi	r6,32
    185c:	01400204 	movi	r5,8
    1860:	e13fff17 	ldw	r4,-4(fp)
    1864:	00015ac0 	call	15ac <_ZN4Game8drawTextEiiPc>
//	drawText(8 , 32 * 2, "2UP");

	vi->resetOffset();
    1868:	e0bfff17 	ldw	r2,-4(fp)
    186c:	10800117 	ldw	r2,4(r2)
    1870:	1009883a 	mov	r4,r2
    1874:	00035140 	call	3514 <_ZN14VideoInterface11resetOffsetEv>
};
    1878:	0001883a 	nop
    187c:	e037883a 	mov	sp,fp
    1880:	dfc00117 	ldw	ra,4(sp)
    1884:	df000017 	ldw	fp,0(sp)
    1888:	dec00204 	addi	sp,sp,8
    188c:	f800283a 	ret

00001890 <_ZN4Game9drawScoreEv>:

void Game::drawScore(){
    1890:	defff804 	addi	sp,sp,-32
    1894:	dfc00715 	stw	ra,28(sp)
    1898:	df000615 	stw	fp,24(sp)
    189c:	df000604 	addi	fp,sp,24
    18a0:	e13fff15 	stw	r4,-4(fp)
	vi->setOffset(SCORE_OFFSET_X, SCORE_OFFSET_Y);
    18a4:	e0bfff17 	ldw	r2,-4(fp)
    18a8:	10800117 	ldw	r2,4(r2)
    18ac:	01800504 	movi	r6,20
    18b0:	014035c4 	movi	r5,215
    18b4:	1009883a 	mov	r4,r2
    18b8:	00034d00 	call	34d0 <_ZN14VideoInterface9setOffsetEii>
	vi->setColor(SCORE_COLOR);
    18bc:	e0bfff17 	ldw	r2,-4(fp)
    18c0:	10800117 	ldw	r2,4(r2)
    18c4:	017fffd4 	movui	r5,65535
    18c8:	1009883a 	mov	r4,r2
    18cc:	00036640 	call	3664 <_ZN14VideoInterface8setColorEt>

	char text_old[8] = { 0 };
    18d0:	e03ffb15 	stw	zero,-20(fp)
    18d4:	e03ffc15 	stw	zero,-16(fp)
	char text_new[8] = { 0 };
    18d8:	e03ffd15 	stw	zero,-12(fp)
    18dc:	e03ffe15 	stw	zero,-8(fp)

	if(cur_score > cur_hscore){
    18e0:	e0bfff17 	ldw	r2,-4(fp)
    18e4:	10808017 	ldw	r2,512(r2)
    18e8:	e0ffff17 	ldw	r3,-4(fp)
    18ec:	18c08217 	ldw	r3,520(r3)
    18f0:	1880040e 	bge	r3,r2,1904 <_ZN4Game9drawScoreEv+0x74>
		cur_hscore = cur_score;
    18f4:	e0bfff17 	ldw	r2,-4(fp)
    18f8:	10c08017 	ldw	r3,512(r2)
    18fc:	e0bfff17 	ldw	r2,-4(fp)
    1900:	10c08215 	stw	r3,520(r2)
	}

	if(cur_hscore != old_hscore){
    1904:	e0bfff17 	ldw	r2,-4(fp)
    1908:	10c08217 	ldw	r3,520(r2)
    190c:	e0bfff17 	ldw	r2,-4(fp)
    1910:	10808317 	ldw	r2,524(r2)
    1914:	18801c26 	beq	r3,r2,1988 <_ZN4Game9drawScoreEv+0xf8>
		sprintf(text_old, "%*d", 7, old_hscore);
    1918:	e0bfff17 	ldw	r2,-4(fp)
    191c:	10808317 	ldw	r2,524(r2)
    1920:	100f883a 	mov	r7,r2
    1924:	018001c4 	movi	r6,7
    1928:	014000b4 	movhi	r5,2
    192c:	294fa404 	addi	r5,r5,16016
    1930:	e13ffb04 	addi	r4,fp,-20
    1934:	00088480 	call	8848 <sprintf>
		sprintf(text_new, "%*d", 7, cur_hscore);
    1938:	e0bfff17 	ldw	r2,-4(fp)
    193c:	10c08217 	ldw	r3,520(r2)
    1940:	e0bffd04 	addi	r2,fp,-12
    1944:	180f883a 	mov	r7,r3
    1948:	018001c4 	movi	r6,7
    194c:	014000b4 	movhi	r5,2
    1950:	294fa404 	addi	r5,r5,16016
    1954:	1009883a 	mov	r4,r2
    1958:	00088480 	call	8848 <sprintf>
		drawTextDifference(0, 16, text_old, text_new);
    195c:	e0bffd04 	addi	r2,fp,-12
    1960:	d8800015 	stw	r2,0(sp)
    1964:	e1fffb04 	addi	r7,fp,-20
    1968:	01800404 	movi	r6,16
    196c:	000b883a 	mov	r5,zero
    1970:	e13fff17 	ldw	r4,-4(fp)
    1974:	00016500 	call	1650 <_ZN4Game18drawTextDifferenceEiiPcS0_>
		old_hscore = cur_hscore;
    1978:	e0bfff17 	ldw	r2,-4(fp)
    197c:	10c08217 	ldw	r3,520(r2)
    1980:	e0bfff17 	ldw	r2,-4(fp)
    1984:	10c08315 	stw	r3,524(r2)
	}

	if(cur_score != old_score){
    1988:	e0bfff17 	ldw	r2,-4(fp)
    198c:	10c08017 	ldw	r3,512(r2)
    1990:	e0bfff17 	ldw	r2,-4(fp)
    1994:	10808117 	ldw	r2,516(r2)
    1998:	18801c26 	beq	r3,r2,1a0c <_ZN4Game9drawScoreEv+0x17c>
		sprintf(text_old, "%*d", 7, old_score);
    199c:	e0bfff17 	ldw	r2,-4(fp)
    19a0:	10808117 	ldw	r2,516(r2)
    19a4:	100f883a 	mov	r7,r2
    19a8:	018001c4 	movi	r6,7
    19ac:	014000b4 	movhi	r5,2
    19b0:	294fa404 	addi	r5,r5,16016
    19b4:	e13ffb04 	addi	r4,fp,-20
    19b8:	00088480 	call	8848 <sprintf>
		sprintf(text_new, "%*d", 7, cur_score);
    19bc:	e0bfff17 	ldw	r2,-4(fp)
    19c0:	10c08017 	ldw	r3,512(r2)
    19c4:	e0bffd04 	addi	r2,fp,-12
    19c8:	180f883a 	mov	r7,r3
    19cc:	018001c4 	movi	r6,7
    19d0:	014000b4 	movhi	r5,2
    19d4:	294fa404 	addi	r5,r5,16016
    19d8:	1009883a 	mov	r4,r2
    19dc:	00088480 	call	8848 <sprintf>
		drawTextDifference(0, 48, text_old, text_new);
    19e0:	e0bffd04 	addi	r2,fp,-12
    19e4:	d8800015 	stw	r2,0(sp)
    19e8:	e1fffb04 	addi	r7,fp,-20
    19ec:	01800c04 	movi	r6,48
    19f0:	000b883a 	mov	r5,zero
    19f4:	e13fff17 	ldw	r4,-4(fp)
    19f8:	00016500 	call	1650 <_ZN4Game18drawTextDifferenceEiiPcS0_>
		old_score = cur_score;
    19fc:	e0bfff17 	ldw	r2,-4(fp)
    1a00:	10c08017 	ldw	r3,512(r2)
    1a04:	e0bfff17 	ldw	r2,-4(fp)
    1a08:	10c08115 	stw	r3,516(r2)
	}

	vi->resetOffset();
    1a0c:	e0bfff17 	ldw	r2,-4(fp)
    1a10:	10800117 	ldw	r2,4(r2)
    1a14:	1009883a 	mov	r4,r2
    1a18:	00035140 	call	3514 <_ZN14VideoInterface11resetOffsetEv>
};
    1a1c:	0001883a 	nop
    1a20:	e037883a 	mov	sp,fp
    1a24:	dfc00117 	ldw	ra,4(sp)
    1a28:	df000017 	ldw	fp,0(sp)
    1a2c:	dec00204 	addi	sp,sp,8
    1a30:	f800283a 	ret

00001a34 <_ZN4Game7drawMapEv>:

void Game::drawMap(){
    1a34:	defff904 	addi	sp,sp,-28
    1a38:	dfc00615 	stw	ra,24(sp)
    1a3c:	df000515 	stw	fp,20(sp)
    1a40:	df000504 	addi	fp,sp,20
    1a44:	e13fff15 	stw	r4,-4(fp)
	vi->setOffset(MAP_OFFSET_X, MAP_OFFSET_Y);
    1a48:	e0bfff17 	ldw	r2,-4(fp)
    1a4c:	10800117 	ldw	r2,4(r2)
    1a50:	01800304 	movi	r6,12
    1a54:	01400b84 	movi	r5,46
    1a58:	1009883a 	mov	r4,r2
    1a5c:	00034d00 	call	34d0 <_ZN14VideoInterface9setOffsetEii>
	for(int v = 0; v < 27; v++){
    1a60:	e03ffd15 	stw	zero,-12(fp)
    1a64:	e0bffd17 	ldw	r2,-12(fp)
    1a68:	108006c8 	cmpgei	r2,r2,27
    1a6c:	1004481e 	bne	r2,zero,2b90 <_ZN4Game7drawMapEv+0x115c>
		for(int h = 0; h < 21; h++){
    1a70:	e03ffe15 	stw	zero,-8(fp)
    1a74:	e0bffe17 	ldw	r2,-8(fp)
    1a78:	10800548 	cmpgei	r2,r2,21
    1a7c:	1004401e 	bne	r2,zero,2b80 <_ZN4Game7drawMapEv+0x114c>
			if(simpleMap){ // for testing
    1a80:	e0bfff17 	ldw	r2,-4(fp)
    1a84:	10807f03 	ldbu	r2,508(r2)
    1a88:	10803fcc 	andi	r2,r2,255
    1a8c:	10002026 	beq	r2,zero,1b10 <_ZN4Game7drawMapEv+0xdc>
				if(!walkable(map[v][h]))
    1a90:	e0ffff17 	ldw	r3,-4(fp)
    1a94:	e0bffd17 	ldw	r2,-12(fp)
    1a98:	11000564 	muli	r4,r2,21
    1a9c:	e0bffe17 	ldw	r2,-8(fp)
    1aa0:	2085883a 	add	r2,r4,r2
    1aa4:	10802184 	addi	r2,r2,134
    1aa8:	1085883a 	add	r2,r2,r2
    1aac:	1085883a 	add	r2,r2,r2
    1ab0:	1885883a 	add	r2,r3,r2
    1ab4:	10800017 	ldw	r2,0(r2)
    1ab8:	100b883a 	mov	r5,r2
    1abc:	e13fff17 	ldw	r4,-4(fp)
    1ac0:	00012b80 	call	12b8 <_ZN4Game8walkableE10map_item_t>
    1ac4:	1080005c 	xori	r2,r2,1
    1ac8:	10803fcc 	andi	r2,r2,255
    1acc:	10042826 	beq	r2,zero,2b70 <_ZN4Game7drawMapEv+0x113c>
					vi->drawRect(H(0), V(0), 8, 8, WALL_COLOR);
    1ad0:	e0bfff17 	ldw	r2,-4(fp)
    1ad4:	10c00117 	ldw	r3,4(r2)
    1ad8:	e0bffe17 	ldw	r2,-8(fp)
    1adc:	100890fa 	slli	r4,r2,3
    1ae0:	e0bffd17 	ldw	r2,-12(fp)
    1ae4:	100a90fa 	slli	r5,r2,3
    1ae8:	00809784 	movi	r2,606
    1aec:	d8800115 	stw	r2,4(sp)
    1af0:	00800204 	movi	r2,8
    1af4:	d8800015 	stw	r2,0(sp)
    1af8:	01c00204 	movi	r7,8
    1afc:	280d883a 	mov	r6,r5
    1b00:	200b883a 	mov	r5,r4
    1b04:	1809883a 	mov	r4,r3
    1b08:	00038f40 	call	38f4 <_ZN14VideoInterface8drawRectEiiiit>
    1b0c:	00041806 	br	2b70 <_ZN4Game7drawMapEv+0x113c>
			}else{
				switch(map[v][h]){
    1b10:	e0ffff17 	ldw	r3,-4(fp)
    1b14:	e0bffd17 	ldw	r2,-12(fp)
    1b18:	11000564 	muli	r4,r2,21
    1b1c:	e0bffe17 	ldw	r2,-8(fp)
    1b20:	2085883a 	add	r2,r4,r2
    1b24:	10802184 	addi	r2,r2,134
    1b28:	1085883a 	add	r2,r2,r2
    1b2c:	1085883a 	add	r2,r2,r2
    1b30:	1885883a 	add	r2,r3,r2
    1b34:	10800017 	ldw	r2,0(r2)
    1b38:	10c004a8 	cmpgeui	r3,r2,18
    1b3c:	18040b1e 	bne	r3,zero,2b6c <_ZN4Game7drawMapEv+0x1138>
    1b40:	100690ba 	slli	r3,r2,2
    1b44:	00800034 	movhi	r2,0
    1b48:	1086d604 	addi	r2,r2,7000
    1b4c:	1885883a 	add	r2,r3,r2
    1b50:	10800017 	ldw	r2,0(r2)
    1b54:	1000683a 	jmp	r2
    1b58:	00002b6c 	andhi	zero,zero,173
    1b5c:	00001ba0 	cmpeqi	zero,zero,110
    1b60:	00002b6c 	andhi	zero,zero,173
    1b64:	00001be8 	cmpgeui	zero,zero,111
    1b68:	00001d40 	call	1d4 <alt_instruction_exception_entry>
    1b6c:	00001e90 	cmplti	zero,zero,122
    1b70:	00001fe0 	cmpeqi	zero,zero,127
    1b74:	00002128 	cmpgeui	zero,zero,132
    1b78:	000021b4 	movhi	zero,134
    1b7c:	00002240 	call	224 <alt_instruction_exception_entry+0x50>
    1b80:	0000239c 	xori	zero,zero,142
    1b84:	00002500 	call	250 <_start+0x8>
    1b88:	0000265c 	xori	zero,zero,153
    1b8c:	000027c0 	call	27c <_start+0x34>
    1b90:	00002894 	movui	zero,162
    1b94:	00002970 	cmpltui	zero,zero,165
    1b98:	00002a44 	movi	zero,169
    1b9c:	00002b20 	cmpeqi	zero,zero,172
					case pd:
						vi->drawRect(H(3), V(3), 2, 2, PAC_DOT_COLOR);
    1ba0:	e0bfff17 	ldw	r2,-4(fp)
    1ba4:	10c00117 	ldw	r3,4(r2)
    1ba8:	e0bffe17 	ldw	r2,-8(fp)
    1bac:	100490fa 	slli	r2,r2,3
    1bb0:	110000c4 	addi	r4,r2,3
    1bb4:	e0bffd17 	ldw	r2,-12(fp)
    1bb8:	100490fa 	slli	r2,r2,3
    1bbc:	114000c4 	addi	r5,r2,3
    1bc0:	00bf4814 	movui	r2,64800
    1bc4:	d8800115 	stw	r2,4(sp)
    1bc8:	00800084 	movi	r2,2
    1bcc:	d8800015 	stw	r2,0(sp)
    1bd0:	01c00084 	movi	r7,2
    1bd4:	280d883a 	mov	r6,r5
    1bd8:	200b883a 	mov	r5,r4
    1bdc:	1809883a 	mov	r4,r3
    1be0:	00038f40 	call	38f4 <_ZN14VideoInterface8drawRectEiiiit>
						break;
    1be4:	0003e206 	br	2b70 <_ZN4Game7drawMapEv+0x113c>
					case c1:
						vi->drawLine(H(4), V(2), H(7), V(2), WALL_COLOR);
    1be8:	e0bfff17 	ldw	r2,-4(fp)
    1bec:	11000117 	ldw	r4,4(r2)
    1bf0:	e0bffe17 	ldw	r2,-8(fp)
    1bf4:	100490fa 	slli	r2,r2,3
    1bf8:	11400104 	addi	r5,r2,4
    1bfc:	e0bffd17 	ldw	r2,-12(fp)
    1c00:	100490fa 	slli	r2,r2,3
    1c04:	11800084 	addi	r6,r2,2
    1c08:	e0bffe17 	ldw	r2,-8(fp)
    1c0c:	100490fa 	slli	r2,r2,3
    1c10:	11c001c4 	addi	r7,r2,7
    1c14:	e0bffd17 	ldw	r2,-12(fp)
    1c18:	100490fa 	slli	r2,r2,3
    1c1c:	10800084 	addi	r2,r2,2
    1c20:	00c09784 	movi	r3,606
    1c24:	d8c00115 	stw	r3,4(sp)
    1c28:	d8800015 	stw	r2,0(sp)
    1c2c:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(2), V(4), H(2), V(7), WALL_COLOR);
    1c30:	e0bfff17 	ldw	r2,-4(fp)
    1c34:	11000117 	ldw	r4,4(r2)
    1c38:	e0bffe17 	ldw	r2,-8(fp)
    1c3c:	100490fa 	slli	r2,r2,3
    1c40:	11400084 	addi	r5,r2,2
    1c44:	e0bffd17 	ldw	r2,-12(fp)
    1c48:	100490fa 	slli	r2,r2,3
    1c4c:	11800104 	addi	r6,r2,4
    1c50:	e0bffe17 	ldw	r2,-8(fp)
    1c54:	100490fa 	slli	r2,r2,3
    1c58:	11c00084 	addi	r7,r2,2
    1c5c:	e0bffd17 	ldw	r2,-12(fp)
    1c60:	100490fa 	slli	r2,r2,3
    1c64:	108001c4 	addi	r2,r2,7
    1c68:	00c09784 	movi	r3,606
    1c6c:	d8c00115 	stw	r3,4(sp)
    1c70:	d8800015 	stw	r2,0(sp)
    1c74:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawPixel(H(3), V(3), WALL_COLOR);
    1c78:	e0bfff17 	ldw	r2,-4(fp)
    1c7c:	10c00117 	ldw	r3,4(r2)
    1c80:	e0bffe17 	ldw	r2,-8(fp)
    1c84:	100490fa 	slli	r2,r2,3
    1c88:	110000c4 	addi	r4,r2,3
    1c8c:	e0bffd17 	ldw	r2,-12(fp)
    1c90:	100490fa 	slli	r2,r2,3
    1c94:	108000c4 	addi	r2,r2,3
    1c98:	01c09784 	movi	r7,606
    1c9c:	100d883a 	mov	r6,r2
    1ca0:	200b883a 	mov	r5,r4
    1ca4:	1809883a 	mov	r4,r3
    1ca8:	00035a40 	call	35a4 <_ZN14VideoInterface9drawPixelEiit>
						vi->drawLine(H(6), V(5), H(7), V(5), WALL_COLOR);
    1cac:	e0bfff17 	ldw	r2,-4(fp)
    1cb0:	11000117 	ldw	r4,4(r2)
    1cb4:	e0bffe17 	ldw	r2,-8(fp)
    1cb8:	100490fa 	slli	r2,r2,3
    1cbc:	11400184 	addi	r5,r2,6
    1cc0:	e0bffd17 	ldw	r2,-12(fp)
    1cc4:	100490fa 	slli	r2,r2,3
    1cc8:	11800144 	addi	r6,r2,5
    1ccc:	e0bffe17 	ldw	r2,-8(fp)
    1cd0:	100490fa 	slli	r2,r2,3
    1cd4:	11c001c4 	addi	r7,r2,7
    1cd8:	e0bffd17 	ldw	r2,-12(fp)
    1cdc:	100490fa 	slli	r2,r2,3
    1ce0:	10800144 	addi	r2,r2,5
    1ce4:	00c09784 	movi	r3,606
    1ce8:	d8c00115 	stw	r3,4(sp)
    1cec:	d8800015 	stw	r2,0(sp)
    1cf0:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(5), V(6), H(5), V(7), WALL_COLOR);
    1cf4:	e0bfff17 	ldw	r2,-4(fp)
    1cf8:	11000117 	ldw	r4,4(r2)
    1cfc:	e0bffe17 	ldw	r2,-8(fp)
    1d00:	100490fa 	slli	r2,r2,3
    1d04:	11400144 	addi	r5,r2,5
    1d08:	e0bffd17 	ldw	r2,-12(fp)
    1d0c:	100490fa 	slli	r2,r2,3
    1d10:	11800184 	addi	r6,r2,6
    1d14:	e0bffe17 	ldw	r2,-8(fp)
    1d18:	100490fa 	slli	r2,r2,3
    1d1c:	11c00144 	addi	r7,r2,5
    1d20:	e0bffd17 	ldw	r2,-12(fp)
    1d24:	100490fa 	slli	r2,r2,3
    1d28:	108001c4 	addi	r2,r2,7
    1d2c:	00c09784 	movi	r3,606
    1d30:	d8c00115 	stw	r3,4(sp)
    1d34:	d8800015 	stw	r2,0(sp)
    1d38:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						break;
    1d3c:	00038c06 	br	2b70 <_ZN4Game7drawMapEv+0x113c>
					case c2:
						vi->drawLine(H(0), V(2), H(3), V(2), WALL_COLOR);
    1d40:	e0bfff17 	ldw	r2,-4(fp)
    1d44:	11000117 	ldw	r4,4(r2)
    1d48:	e0bffe17 	ldw	r2,-8(fp)
    1d4c:	100a90fa 	slli	r5,r2,3
    1d50:	e0bffd17 	ldw	r2,-12(fp)
    1d54:	100490fa 	slli	r2,r2,3
    1d58:	11800084 	addi	r6,r2,2
    1d5c:	e0bffe17 	ldw	r2,-8(fp)
    1d60:	100490fa 	slli	r2,r2,3
    1d64:	11c000c4 	addi	r7,r2,3
    1d68:	e0bffd17 	ldw	r2,-12(fp)
    1d6c:	100490fa 	slli	r2,r2,3
    1d70:	10800084 	addi	r2,r2,2
    1d74:	00c09784 	movi	r3,606
    1d78:	d8c00115 	stw	r3,4(sp)
    1d7c:	d8800015 	stw	r2,0(sp)
    1d80:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(5), V(4), H(5), V(7), WALL_COLOR);
    1d84:	e0bfff17 	ldw	r2,-4(fp)
    1d88:	11000117 	ldw	r4,4(r2)
    1d8c:	e0bffe17 	ldw	r2,-8(fp)
    1d90:	100490fa 	slli	r2,r2,3
    1d94:	11400144 	addi	r5,r2,5
    1d98:	e0bffd17 	ldw	r2,-12(fp)
    1d9c:	100490fa 	slli	r2,r2,3
    1da0:	11800104 	addi	r6,r2,4
    1da4:	e0bffe17 	ldw	r2,-8(fp)
    1da8:	100490fa 	slli	r2,r2,3
    1dac:	11c00144 	addi	r7,r2,5
    1db0:	e0bffd17 	ldw	r2,-12(fp)
    1db4:	100490fa 	slli	r2,r2,3
    1db8:	108001c4 	addi	r2,r2,7
    1dbc:	00c09784 	movi	r3,606
    1dc0:	d8c00115 	stw	r3,4(sp)
    1dc4:	d8800015 	stw	r2,0(sp)
    1dc8:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawPixel(H(4), V(3), WALL_COLOR);
    1dcc:	e0bfff17 	ldw	r2,-4(fp)
    1dd0:	10c00117 	ldw	r3,4(r2)
    1dd4:	e0bffe17 	ldw	r2,-8(fp)
    1dd8:	100490fa 	slli	r2,r2,3
    1ddc:	11000104 	addi	r4,r2,4
    1de0:	e0bffd17 	ldw	r2,-12(fp)
    1de4:	100490fa 	slli	r2,r2,3
    1de8:	108000c4 	addi	r2,r2,3
    1dec:	01c09784 	movi	r7,606
    1df0:	100d883a 	mov	r6,r2
    1df4:	200b883a 	mov	r5,r4
    1df8:	1809883a 	mov	r4,r3
    1dfc:	00035a40 	call	35a4 <_ZN14VideoInterface9drawPixelEiit>
						vi->drawLine(H(0), V(5), H(1), V(5), WALL_COLOR);
    1e00:	e0bfff17 	ldw	r2,-4(fp)
    1e04:	11000117 	ldw	r4,4(r2)
    1e08:	e0bffe17 	ldw	r2,-8(fp)
    1e0c:	100a90fa 	slli	r5,r2,3
    1e10:	e0bffd17 	ldw	r2,-12(fp)
    1e14:	100490fa 	slli	r2,r2,3
    1e18:	11800144 	addi	r6,r2,5
    1e1c:	e0bffe17 	ldw	r2,-8(fp)
    1e20:	100490fa 	slli	r2,r2,3
    1e24:	11c00044 	addi	r7,r2,1
    1e28:	e0bffd17 	ldw	r2,-12(fp)
    1e2c:	100490fa 	slli	r2,r2,3
    1e30:	10800144 	addi	r2,r2,5
    1e34:	00c09784 	movi	r3,606
    1e38:	d8c00115 	stw	r3,4(sp)
    1e3c:	d8800015 	stw	r2,0(sp)
    1e40:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(2), V(5), H(2), V(7), WALL_COLOR);
    1e44:	e0bfff17 	ldw	r2,-4(fp)
    1e48:	11000117 	ldw	r4,4(r2)
    1e4c:	e0bffe17 	ldw	r2,-8(fp)
    1e50:	100490fa 	slli	r2,r2,3
    1e54:	11400084 	addi	r5,r2,2
    1e58:	e0bffd17 	ldw	r2,-12(fp)
    1e5c:	100490fa 	slli	r2,r2,3
    1e60:	11800144 	addi	r6,r2,5
    1e64:	e0bffe17 	ldw	r2,-8(fp)
    1e68:	100490fa 	slli	r2,r2,3
    1e6c:	11c00084 	addi	r7,r2,2
    1e70:	e0bffd17 	ldw	r2,-12(fp)
    1e74:	100490fa 	slli	r2,r2,3
    1e78:	108001c4 	addi	r2,r2,7
    1e7c:	00c09784 	movi	r3,606
    1e80:	d8c00115 	stw	r3,4(sp)
    1e84:	d8800015 	stw	r2,0(sp)
    1e88:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						break;
    1e8c:	00033806 	br	2b70 <_ZN4Game7drawMapEv+0x113c>
					case c3:
						vi->drawLine(H(2), V(0), H(2), V(3), WALL_COLOR);
    1e90:	e0bfff17 	ldw	r2,-4(fp)
    1e94:	11000117 	ldw	r4,4(r2)
    1e98:	e0bffe17 	ldw	r2,-8(fp)
    1e9c:	100490fa 	slli	r2,r2,3
    1ea0:	11400084 	addi	r5,r2,2
    1ea4:	e0bffd17 	ldw	r2,-12(fp)
    1ea8:	100c90fa 	slli	r6,r2,3
    1eac:	e0bffe17 	ldw	r2,-8(fp)
    1eb0:	100490fa 	slli	r2,r2,3
    1eb4:	11c00084 	addi	r7,r2,2
    1eb8:	e0bffd17 	ldw	r2,-12(fp)
    1ebc:	100490fa 	slli	r2,r2,3
    1ec0:	108000c4 	addi	r2,r2,3
    1ec4:	00c09784 	movi	r3,606
    1ec8:	d8c00115 	stw	r3,4(sp)
    1ecc:	d8800015 	stw	r2,0(sp)
    1ed0:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(4), V(5), H(7), V(5), WALL_COLOR);
    1ed4:	e0bfff17 	ldw	r2,-4(fp)
    1ed8:	11000117 	ldw	r4,4(r2)
    1edc:	e0bffe17 	ldw	r2,-8(fp)
    1ee0:	100490fa 	slli	r2,r2,3
    1ee4:	11400104 	addi	r5,r2,4
    1ee8:	e0bffd17 	ldw	r2,-12(fp)
    1eec:	100490fa 	slli	r2,r2,3
    1ef0:	11800144 	addi	r6,r2,5
    1ef4:	e0bffe17 	ldw	r2,-8(fp)
    1ef8:	100490fa 	slli	r2,r2,3
    1efc:	11c001c4 	addi	r7,r2,7
    1f00:	e0bffd17 	ldw	r2,-12(fp)
    1f04:	100490fa 	slli	r2,r2,3
    1f08:	10800144 	addi	r2,r2,5
    1f0c:	00c09784 	movi	r3,606
    1f10:	d8c00115 	stw	r3,4(sp)
    1f14:	d8800015 	stw	r2,0(sp)
    1f18:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawPixel(H(3), V(4), WALL_COLOR);
    1f1c:	e0bfff17 	ldw	r2,-4(fp)
    1f20:	10c00117 	ldw	r3,4(r2)
    1f24:	e0bffe17 	ldw	r2,-8(fp)
    1f28:	100490fa 	slli	r2,r2,3
    1f2c:	110000c4 	addi	r4,r2,3
    1f30:	e0bffd17 	ldw	r2,-12(fp)
    1f34:	100490fa 	slli	r2,r2,3
    1f38:	10800104 	addi	r2,r2,4
    1f3c:	01c09784 	movi	r7,606
    1f40:	100d883a 	mov	r6,r2
    1f44:	200b883a 	mov	r5,r4
    1f48:	1809883a 	mov	r4,r3
    1f4c:	00035a40 	call	35a4 <_ZN14VideoInterface9drawPixelEiit>
						vi->drawLine(H(5), V(0), H(5), V(1), WALL_COLOR);
    1f50:	e0bfff17 	ldw	r2,-4(fp)
    1f54:	11000117 	ldw	r4,4(r2)
    1f58:	e0bffe17 	ldw	r2,-8(fp)
    1f5c:	100490fa 	slli	r2,r2,3
    1f60:	11400144 	addi	r5,r2,5
    1f64:	e0bffd17 	ldw	r2,-12(fp)
    1f68:	100c90fa 	slli	r6,r2,3
    1f6c:	e0bffe17 	ldw	r2,-8(fp)
    1f70:	100490fa 	slli	r2,r2,3
    1f74:	11c00144 	addi	r7,r2,5
    1f78:	e0bffd17 	ldw	r2,-12(fp)
    1f7c:	100490fa 	slli	r2,r2,3
    1f80:	10800044 	addi	r2,r2,1
    1f84:	00c09784 	movi	r3,606
    1f88:	d8c00115 	stw	r3,4(sp)
    1f8c:	d8800015 	stw	r2,0(sp)
    1f90:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(6), V(2), H(7), V(2), WALL_COLOR);
    1f94:	e0bfff17 	ldw	r2,-4(fp)
    1f98:	11000117 	ldw	r4,4(r2)
    1f9c:	e0bffe17 	ldw	r2,-8(fp)
    1fa0:	100490fa 	slli	r2,r2,3
    1fa4:	11400184 	addi	r5,r2,6
    1fa8:	e0bffd17 	ldw	r2,-12(fp)
    1fac:	100490fa 	slli	r2,r2,3
    1fb0:	11800084 	addi	r6,r2,2
    1fb4:	e0bffe17 	ldw	r2,-8(fp)
    1fb8:	100490fa 	slli	r2,r2,3
    1fbc:	11c001c4 	addi	r7,r2,7
    1fc0:	e0bffd17 	ldw	r2,-12(fp)
    1fc4:	100490fa 	slli	r2,r2,3
    1fc8:	10800084 	addi	r2,r2,2
    1fcc:	00c09784 	movi	r3,606
    1fd0:	d8c00115 	stw	r3,4(sp)
    1fd4:	d8800015 	stw	r2,0(sp)
    1fd8:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						break;
    1fdc:	0002e406 	br	2b70 <_ZN4Game7drawMapEv+0x113c>
					case c4:
						vi->drawLine(H(5), V(0), H(5), V(3), WALL_COLOR);
    1fe0:	e0bfff17 	ldw	r2,-4(fp)
    1fe4:	11000117 	ldw	r4,4(r2)
    1fe8:	e0bffe17 	ldw	r2,-8(fp)
    1fec:	100490fa 	slli	r2,r2,3
    1ff0:	11400144 	addi	r5,r2,5
    1ff4:	e0bffd17 	ldw	r2,-12(fp)
    1ff8:	100c90fa 	slli	r6,r2,3
    1ffc:	e0bffe17 	ldw	r2,-8(fp)
    2000:	100490fa 	slli	r2,r2,3
    2004:	11c00144 	addi	r7,r2,5
    2008:	e0bffd17 	ldw	r2,-12(fp)
    200c:	100490fa 	slli	r2,r2,3
    2010:	108000c4 	addi	r2,r2,3
    2014:	00c09784 	movi	r3,606
    2018:	d8c00115 	stw	r3,4(sp)
    201c:	d8800015 	stw	r2,0(sp)
    2020:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(0), V(5), H(3), V(5), WALL_COLOR);
    2024:	e0bfff17 	ldw	r2,-4(fp)
    2028:	11000117 	ldw	r4,4(r2)
    202c:	e0bffe17 	ldw	r2,-8(fp)
    2030:	100a90fa 	slli	r5,r2,3
    2034:	e0bffd17 	ldw	r2,-12(fp)
    2038:	100490fa 	slli	r2,r2,3
    203c:	11800144 	addi	r6,r2,5
    2040:	e0bffe17 	ldw	r2,-8(fp)
    2044:	100490fa 	slli	r2,r2,3
    2048:	11c000c4 	addi	r7,r2,3
    204c:	e0bffd17 	ldw	r2,-12(fp)
    2050:	100490fa 	slli	r2,r2,3
    2054:	10800144 	addi	r2,r2,5
    2058:	00c09784 	movi	r3,606
    205c:	d8c00115 	stw	r3,4(sp)
    2060:	d8800015 	stw	r2,0(sp)
    2064:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawPixel(H(4), V(4), WALL_COLOR);
    2068:	e0bfff17 	ldw	r2,-4(fp)
    206c:	10c00117 	ldw	r3,4(r2)
    2070:	e0bffe17 	ldw	r2,-8(fp)
    2074:	100490fa 	slli	r2,r2,3
    2078:	11000104 	addi	r4,r2,4
    207c:	e0bffd17 	ldw	r2,-12(fp)
    2080:	100490fa 	slli	r2,r2,3
    2084:	10800104 	addi	r2,r2,4
    2088:	01c09784 	movi	r7,606
    208c:	100d883a 	mov	r6,r2
    2090:	200b883a 	mov	r5,r4
    2094:	1809883a 	mov	r4,r3
    2098:	00035a40 	call	35a4 <_ZN14VideoInterface9drawPixelEiit>
						vi->drawLine(H(2), V(0), H(2), V(1), WALL_COLOR);
    209c:	e0bfff17 	ldw	r2,-4(fp)
    20a0:	11000117 	ldw	r4,4(r2)
    20a4:	e0bffe17 	ldw	r2,-8(fp)
    20a8:	100490fa 	slli	r2,r2,3
    20ac:	11400084 	addi	r5,r2,2
    20b0:	e0bffd17 	ldw	r2,-12(fp)
    20b4:	100c90fa 	slli	r6,r2,3
    20b8:	e0bffe17 	ldw	r2,-8(fp)
    20bc:	100490fa 	slli	r2,r2,3
    20c0:	11c00084 	addi	r7,r2,2
    20c4:	e0bffd17 	ldw	r2,-12(fp)
    20c8:	100490fa 	slli	r2,r2,3
    20cc:	10800044 	addi	r2,r2,1
    20d0:	00c09784 	movi	r3,606
    20d4:	d8c00115 	stw	r3,4(sp)
    20d8:	d8800015 	stw	r2,0(sp)
    20dc:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(0), V(2), H(1), V(2), WALL_COLOR);
    20e0:	e0bfff17 	ldw	r2,-4(fp)
    20e4:	11000117 	ldw	r4,4(r2)
    20e8:	e0bffe17 	ldw	r2,-8(fp)
    20ec:	100a90fa 	slli	r5,r2,3
    20f0:	e0bffd17 	ldw	r2,-12(fp)
    20f4:	100490fa 	slli	r2,r2,3
    20f8:	11800084 	addi	r6,r2,2
    20fc:	e0bffe17 	ldw	r2,-8(fp)
    2100:	100490fa 	slli	r2,r2,3
    2104:	11c00044 	addi	r7,r2,1
    2108:	e0bffd17 	ldw	r2,-12(fp)
    210c:	100490fa 	slli	r2,r2,3
    2110:	10800084 	addi	r2,r2,2
    2114:	00c09784 	movi	r3,606
    2118:	d8c00115 	stw	r3,4(sp)
    211c:	d8800015 	stw	r2,0(sp)
    2120:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						break;
    2124:	00029206 	br	2b70 <_ZN4Game7drawMapEv+0x113c>
					case ph:
						vi->drawLine(H(0), V(2), H(7), V(2), WALL_COLOR);
    2128:	e0bfff17 	ldw	r2,-4(fp)
    212c:	11000117 	ldw	r4,4(r2)
    2130:	e0bffe17 	ldw	r2,-8(fp)
    2134:	100a90fa 	slli	r5,r2,3
    2138:	e0bffd17 	ldw	r2,-12(fp)
    213c:	100490fa 	slli	r2,r2,3
    2140:	11800084 	addi	r6,r2,2
    2144:	e0bffe17 	ldw	r2,-8(fp)
    2148:	100490fa 	slli	r2,r2,3
    214c:	11c001c4 	addi	r7,r2,7
    2150:	e0bffd17 	ldw	r2,-12(fp)
    2154:	100490fa 	slli	r2,r2,3
    2158:	10800084 	addi	r2,r2,2
    215c:	00c09784 	movi	r3,606
    2160:	d8c00115 	stw	r3,4(sp)
    2164:	d8800015 	stw	r2,0(sp)
    2168:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(0), V(5), H(7), V(5), WALL_COLOR);
    216c:	e0bfff17 	ldw	r2,-4(fp)
    2170:	11000117 	ldw	r4,4(r2)
    2174:	e0bffe17 	ldw	r2,-8(fp)
    2178:	100a90fa 	slli	r5,r2,3
    217c:	e0bffd17 	ldw	r2,-12(fp)
    2180:	100490fa 	slli	r2,r2,3
    2184:	11800144 	addi	r6,r2,5
    2188:	e0bffe17 	ldw	r2,-8(fp)
    218c:	100490fa 	slli	r2,r2,3
    2190:	11c001c4 	addi	r7,r2,7
    2194:	e0bffd17 	ldw	r2,-12(fp)
    2198:	100490fa 	slli	r2,r2,3
    219c:	10800144 	addi	r2,r2,5
    21a0:	00c09784 	movi	r3,606
    21a4:	d8c00115 	stw	r3,4(sp)
    21a8:	d8800015 	stw	r2,0(sp)
    21ac:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						break;
    21b0:	00026f06 	br	2b70 <_ZN4Game7drawMapEv+0x113c>
					case pv:
						vi->drawLine(H(2), V(0), H(2), V(7), WALL_COLOR);
    21b4:	e0bfff17 	ldw	r2,-4(fp)
    21b8:	11000117 	ldw	r4,4(r2)
    21bc:	e0bffe17 	ldw	r2,-8(fp)
    21c0:	100490fa 	slli	r2,r2,3
    21c4:	11400084 	addi	r5,r2,2
    21c8:	e0bffd17 	ldw	r2,-12(fp)
    21cc:	100c90fa 	slli	r6,r2,3
    21d0:	e0bffe17 	ldw	r2,-8(fp)
    21d4:	100490fa 	slli	r2,r2,3
    21d8:	11c00084 	addi	r7,r2,2
    21dc:	e0bffd17 	ldw	r2,-12(fp)
    21e0:	100490fa 	slli	r2,r2,3
    21e4:	108001c4 	addi	r2,r2,7
    21e8:	00c09784 	movi	r3,606
    21ec:	d8c00115 	stw	r3,4(sp)
    21f0:	d8800015 	stw	r2,0(sp)
    21f4:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(5), V(0), H(5), V(7), WALL_COLOR);
    21f8:	e0bfff17 	ldw	r2,-4(fp)
    21fc:	11000117 	ldw	r4,4(r2)
    2200:	e0bffe17 	ldw	r2,-8(fp)
    2204:	100490fa 	slli	r2,r2,3
    2208:	11400144 	addi	r5,r2,5
    220c:	e0bffd17 	ldw	r2,-12(fp)
    2210:	100c90fa 	slli	r6,r2,3
    2214:	e0bffe17 	ldw	r2,-8(fp)
    2218:	100490fa 	slli	r2,r2,3
    221c:	11c00144 	addi	r7,r2,5
    2220:	e0bffd17 	ldw	r2,-12(fp)
    2224:	100490fa 	slli	r2,r2,3
    2228:	108001c4 	addi	r2,r2,7
    222c:	00c09784 	movi	r3,606
    2230:	d8c00115 	stw	r3,4(sp)
    2234:	d8800015 	stw	r2,0(sp)
    2238:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						break;
    223c:	00024c06 	br	2b70 <_ZN4Game7drawMapEv+0x113c>
					case tu:
						vi->drawLine(H(0), V(5), H(7), V(5), WALL_COLOR);
    2240:	e0bfff17 	ldw	r2,-4(fp)
    2244:	11000117 	ldw	r4,4(r2)
    2248:	e0bffe17 	ldw	r2,-8(fp)
    224c:	100a90fa 	slli	r5,r2,3
    2250:	e0bffd17 	ldw	r2,-12(fp)
    2254:	100490fa 	slli	r2,r2,3
    2258:	11800144 	addi	r6,r2,5
    225c:	e0bffe17 	ldw	r2,-8(fp)
    2260:	100490fa 	slli	r2,r2,3
    2264:	11c001c4 	addi	r7,r2,7
    2268:	e0bffd17 	ldw	r2,-12(fp)
    226c:	100490fa 	slli	r2,r2,3
    2270:	10800144 	addi	r2,r2,5
    2274:	00c09784 	movi	r3,606
    2278:	d8c00115 	stw	r3,4(sp)
    227c:	d8800015 	stw	r2,0(sp)
    2280:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(0), V(2), H(1), V(2), WALL_COLOR);
    2284:	e0bfff17 	ldw	r2,-4(fp)
    2288:	11000117 	ldw	r4,4(r2)
    228c:	e0bffe17 	ldw	r2,-8(fp)
    2290:	100a90fa 	slli	r5,r2,3
    2294:	e0bffd17 	ldw	r2,-12(fp)
    2298:	100490fa 	slli	r2,r2,3
    229c:	11800084 	addi	r6,r2,2
    22a0:	e0bffe17 	ldw	r2,-8(fp)
    22a4:	100490fa 	slli	r2,r2,3
    22a8:	11c00044 	addi	r7,r2,1
    22ac:	e0bffd17 	ldw	r2,-12(fp)
    22b0:	100490fa 	slli	r2,r2,3
    22b4:	10800084 	addi	r2,r2,2
    22b8:	00c09784 	movi	r3,606
    22bc:	d8c00115 	stw	r3,4(sp)
    22c0:	d8800015 	stw	r2,0(sp)
    22c4:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(6), V(2), H(7), V(2), WALL_COLOR);
    22c8:	e0bfff17 	ldw	r2,-4(fp)
    22cc:	11000117 	ldw	r4,4(r2)
    22d0:	e0bffe17 	ldw	r2,-8(fp)
    22d4:	100490fa 	slli	r2,r2,3
    22d8:	11400184 	addi	r5,r2,6
    22dc:	e0bffd17 	ldw	r2,-12(fp)
    22e0:	100490fa 	slli	r2,r2,3
    22e4:	11800084 	addi	r6,r2,2
    22e8:	e0bffe17 	ldw	r2,-8(fp)
    22ec:	100490fa 	slli	r2,r2,3
    22f0:	11c001c4 	addi	r7,r2,7
    22f4:	e0bffd17 	ldw	r2,-12(fp)
    22f8:	100490fa 	slli	r2,r2,3
    22fc:	10800084 	addi	r2,r2,2
    2300:	00c09784 	movi	r3,606
    2304:	d8c00115 	stw	r3,4(sp)
    2308:	d8800015 	stw	r2,0(sp)
    230c:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(2), V(0), H(2), V(1), WALL_COLOR);
    2310:	e0bfff17 	ldw	r2,-4(fp)
    2314:	11000117 	ldw	r4,4(r2)
    2318:	e0bffe17 	ldw	r2,-8(fp)
    231c:	100490fa 	slli	r2,r2,3
    2320:	11400084 	addi	r5,r2,2
    2324:	e0bffd17 	ldw	r2,-12(fp)
    2328:	100c90fa 	slli	r6,r2,3
    232c:	e0bffe17 	ldw	r2,-8(fp)
    2330:	100490fa 	slli	r2,r2,3
    2334:	11c00084 	addi	r7,r2,2
    2338:	e0bffd17 	ldw	r2,-12(fp)
    233c:	100490fa 	slli	r2,r2,3
    2340:	10800044 	addi	r2,r2,1
    2344:	00c09784 	movi	r3,606
    2348:	d8c00115 	stw	r3,4(sp)
    234c:	d8800015 	stw	r2,0(sp)
    2350:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(5), V(0), H(5), V(1), WALL_COLOR);
    2354:	e0bfff17 	ldw	r2,-4(fp)
    2358:	11000117 	ldw	r4,4(r2)
    235c:	e0bffe17 	ldw	r2,-8(fp)
    2360:	100490fa 	slli	r2,r2,3
    2364:	11400144 	addi	r5,r2,5
    2368:	e0bffd17 	ldw	r2,-12(fp)
    236c:	100c90fa 	slli	r6,r2,3
    2370:	e0bffe17 	ldw	r2,-8(fp)
    2374:	100490fa 	slli	r2,r2,3
    2378:	11c00144 	addi	r7,r2,5
    237c:	e0bffd17 	ldw	r2,-12(fp)
    2380:	100490fa 	slli	r2,r2,3
    2384:	10800044 	addi	r2,r2,1
    2388:	00c09784 	movi	r3,606
    238c:	d8c00115 	stw	r3,4(sp)
    2390:	d8800015 	stw	r2,0(sp)
    2394:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						break;
    2398:	0001f506 	br	2b70 <_ZN4Game7drawMapEv+0x113c>
					case td:
						vi->drawLine(H(0), V(2), H(7), V(2), WALL_COLOR);
    239c:	e0bfff17 	ldw	r2,-4(fp)
    23a0:	11000117 	ldw	r4,4(r2)
    23a4:	e0bffe17 	ldw	r2,-8(fp)
    23a8:	100a90fa 	slli	r5,r2,3
    23ac:	e0bffd17 	ldw	r2,-12(fp)
    23b0:	100490fa 	slli	r2,r2,3
    23b4:	11800084 	addi	r6,r2,2
    23b8:	e0bffe17 	ldw	r2,-8(fp)
    23bc:	100490fa 	slli	r2,r2,3
    23c0:	11c001c4 	addi	r7,r2,7
    23c4:	e0bffd17 	ldw	r2,-12(fp)
    23c8:	100490fa 	slli	r2,r2,3
    23cc:	10800084 	addi	r2,r2,2
    23d0:	00c09784 	movi	r3,606
    23d4:	d8c00115 	stw	r3,4(sp)
    23d8:	d8800015 	stw	r2,0(sp)
    23dc:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(0), V(5), H(1), V(5), WALL_COLOR);
    23e0:	e0bfff17 	ldw	r2,-4(fp)
    23e4:	11000117 	ldw	r4,4(r2)
    23e8:	e0bffe17 	ldw	r2,-8(fp)
    23ec:	100a90fa 	slli	r5,r2,3
    23f0:	e0bffd17 	ldw	r2,-12(fp)
    23f4:	100490fa 	slli	r2,r2,3
    23f8:	11800144 	addi	r6,r2,5
    23fc:	e0bffe17 	ldw	r2,-8(fp)
    2400:	100490fa 	slli	r2,r2,3
    2404:	11c00044 	addi	r7,r2,1
    2408:	e0bffd17 	ldw	r2,-12(fp)
    240c:	100490fa 	slli	r2,r2,3
    2410:	10800144 	addi	r2,r2,5
    2414:	00c09784 	movi	r3,606
    2418:	d8c00115 	stw	r3,4(sp)
    241c:	d8800015 	stw	r2,0(sp)
    2420:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(6), V(5), H(7), V(5), WALL_COLOR);
    2424:	e0bfff17 	ldw	r2,-4(fp)
    2428:	11000117 	ldw	r4,4(r2)
    242c:	e0bffe17 	ldw	r2,-8(fp)
    2430:	100490fa 	slli	r2,r2,3
    2434:	11400184 	addi	r5,r2,6
    2438:	e0bffd17 	ldw	r2,-12(fp)
    243c:	100490fa 	slli	r2,r2,3
    2440:	11800144 	addi	r6,r2,5
    2444:	e0bffe17 	ldw	r2,-8(fp)
    2448:	100490fa 	slli	r2,r2,3
    244c:	11c001c4 	addi	r7,r2,7
    2450:	e0bffd17 	ldw	r2,-12(fp)
    2454:	100490fa 	slli	r2,r2,3
    2458:	10800144 	addi	r2,r2,5
    245c:	00c09784 	movi	r3,606
    2460:	d8c00115 	stw	r3,4(sp)
    2464:	d8800015 	stw	r2,0(sp)
    2468:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(2), V(6), H(2), V(7), WALL_COLOR);
    246c:	e0bfff17 	ldw	r2,-4(fp)
    2470:	11000117 	ldw	r4,4(r2)
    2474:	e0bffe17 	ldw	r2,-8(fp)
    2478:	100490fa 	slli	r2,r2,3
    247c:	11400084 	addi	r5,r2,2
    2480:	e0bffd17 	ldw	r2,-12(fp)
    2484:	100490fa 	slli	r2,r2,3
    2488:	11800184 	addi	r6,r2,6
    248c:	e0bffe17 	ldw	r2,-8(fp)
    2490:	100490fa 	slli	r2,r2,3
    2494:	11c00084 	addi	r7,r2,2
    2498:	e0bffd17 	ldw	r2,-12(fp)
    249c:	100490fa 	slli	r2,r2,3
    24a0:	108001c4 	addi	r2,r2,7
    24a4:	00c09784 	movi	r3,606
    24a8:	d8c00115 	stw	r3,4(sp)
    24ac:	d8800015 	stw	r2,0(sp)
    24b0:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(5), V(6), H(5), V(7), WALL_COLOR);
    24b4:	e0bfff17 	ldw	r2,-4(fp)
    24b8:	11000117 	ldw	r4,4(r2)
    24bc:	e0bffe17 	ldw	r2,-8(fp)
    24c0:	100490fa 	slli	r2,r2,3
    24c4:	11400144 	addi	r5,r2,5
    24c8:	e0bffd17 	ldw	r2,-12(fp)
    24cc:	100490fa 	slli	r2,r2,3
    24d0:	11800184 	addi	r6,r2,6
    24d4:	e0bffe17 	ldw	r2,-8(fp)
    24d8:	100490fa 	slli	r2,r2,3
    24dc:	11c00144 	addi	r7,r2,5
    24e0:	e0bffd17 	ldw	r2,-12(fp)
    24e4:	100490fa 	slli	r2,r2,3
    24e8:	108001c4 	addi	r2,r2,7
    24ec:	00c09784 	movi	r3,606
    24f0:	d8c00115 	stw	r3,4(sp)
    24f4:	d8800015 	stw	r2,0(sp)
    24f8:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						break;
    24fc:	00019c06 	br	2b70 <_ZN4Game7drawMapEv+0x113c>
					case tl:
						vi->drawLine(H(5), V(0), H(5), V(7), WALL_COLOR);
    2500:	e0bfff17 	ldw	r2,-4(fp)
    2504:	11000117 	ldw	r4,4(r2)
    2508:	e0bffe17 	ldw	r2,-8(fp)
    250c:	100490fa 	slli	r2,r2,3
    2510:	11400144 	addi	r5,r2,5
    2514:	e0bffd17 	ldw	r2,-12(fp)
    2518:	100c90fa 	slli	r6,r2,3
    251c:	e0bffe17 	ldw	r2,-8(fp)
    2520:	100490fa 	slli	r2,r2,3
    2524:	11c00144 	addi	r7,r2,5
    2528:	e0bffd17 	ldw	r2,-12(fp)
    252c:	100490fa 	slli	r2,r2,3
    2530:	108001c4 	addi	r2,r2,7
    2534:	00c09784 	movi	r3,606
    2538:	d8c00115 	stw	r3,4(sp)
    253c:	d8800015 	stw	r2,0(sp)
    2540:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(2), V(0), H(2), V(1), WALL_COLOR);
    2544:	e0bfff17 	ldw	r2,-4(fp)
    2548:	11000117 	ldw	r4,4(r2)
    254c:	e0bffe17 	ldw	r2,-8(fp)
    2550:	100490fa 	slli	r2,r2,3
    2554:	11400084 	addi	r5,r2,2
    2558:	e0bffd17 	ldw	r2,-12(fp)
    255c:	100c90fa 	slli	r6,r2,3
    2560:	e0bffe17 	ldw	r2,-8(fp)
    2564:	100490fa 	slli	r2,r2,3
    2568:	11c00084 	addi	r7,r2,2
    256c:	e0bffd17 	ldw	r2,-12(fp)
    2570:	100490fa 	slli	r2,r2,3
    2574:	10800044 	addi	r2,r2,1
    2578:	00c09784 	movi	r3,606
    257c:	d8c00115 	stw	r3,4(sp)
    2580:	d8800015 	stw	r2,0(sp)
    2584:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(0), V(2), H(1), V(2), WALL_COLOR);
    2588:	e0bfff17 	ldw	r2,-4(fp)
    258c:	11000117 	ldw	r4,4(r2)
    2590:	e0bffe17 	ldw	r2,-8(fp)
    2594:	100a90fa 	slli	r5,r2,3
    2598:	e0bffd17 	ldw	r2,-12(fp)
    259c:	100490fa 	slli	r2,r2,3
    25a0:	11800084 	addi	r6,r2,2
    25a4:	e0bffe17 	ldw	r2,-8(fp)
    25a8:	100490fa 	slli	r2,r2,3
    25ac:	11c00044 	addi	r7,r2,1
    25b0:	e0bffd17 	ldw	r2,-12(fp)
    25b4:	100490fa 	slli	r2,r2,3
    25b8:	10800084 	addi	r2,r2,2
    25bc:	00c09784 	movi	r3,606
    25c0:	d8c00115 	stw	r3,4(sp)
    25c4:	d8800015 	stw	r2,0(sp)
    25c8:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(0), V(5), H(1), V(5), WALL_COLOR);
    25cc:	e0bfff17 	ldw	r2,-4(fp)
    25d0:	11000117 	ldw	r4,4(r2)
    25d4:	e0bffe17 	ldw	r2,-8(fp)
    25d8:	100a90fa 	slli	r5,r2,3
    25dc:	e0bffd17 	ldw	r2,-12(fp)
    25e0:	100490fa 	slli	r2,r2,3
    25e4:	11800144 	addi	r6,r2,5
    25e8:	e0bffe17 	ldw	r2,-8(fp)
    25ec:	100490fa 	slli	r2,r2,3
    25f0:	11c00044 	addi	r7,r2,1
    25f4:	e0bffd17 	ldw	r2,-12(fp)
    25f8:	100490fa 	slli	r2,r2,3
    25fc:	10800144 	addi	r2,r2,5
    2600:	00c09784 	movi	r3,606
    2604:	d8c00115 	stw	r3,4(sp)
    2608:	d8800015 	stw	r2,0(sp)
    260c:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(2), V(6), H(2), V(7), WALL_COLOR);
    2610:	e0bfff17 	ldw	r2,-4(fp)
    2614:	11000117 	ldw	r4,4(r2)
    2618:	e0bffe17 	ldw	r2,-8(fp)
    261c:	100490fa 	slli	r2,r2,3
    2620:	11400084 	addi	r5,r2,2
    2624:	e0bffd17 	ldw	r2,-12(fp)
    2628:	100490fa 	slli	r2,r2,3
    262c:	11800184 	addi	r6,r2,6
    2630:	e0bffe17 	ldw	r2,-8(fp)
    2634:	100490fa 	slli	r2,r2,3
    2638:	11c00084 	addi	r7,r2,2
    263c:	e0bffd17 	ldw	r2,-12(fp)
    2640:	100490fa 	slli	r2,r2,3
    2644:	108001c4 	addi	r2,r2,7
    2648:	00c09784 	movi	r3,606
    264c:	d8c00115 	stw	r3,4(sp)
    2650:	d8800015 	stw	r2,0(sp)
    2654:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						break;
    2658:	00014506 	br	2b70 <_ZN4Game7drawMapEv+0x113c>
					case tr:
						vi->drawLine(H(2), V(0), H(2), V(7), WALL_COLOR);
    265c:	e0bfff17 	ldw	r2,-4(fp)
    2660:	11000117 	ldw	r4,4(r2)
    2664:	e0bffe17 	ldw	r2,-8(fp)
    2668:	100490fa 	slli	r2,r2,3
    266c:	11400084 	addi	r5,r2,2
    2670:	e0bffd17 	ldw	r2,-12(fp)
    2674:	100c90fa 	slli	r6,r2,3
    2678:	e0bffe17 	ldw	r2,-8(fp)
    267c:	100490fa 	slli	r2,r2,3
    2680:	11c00084 	addi	r7,r2,2
    2684:	e0bffd17 	ldw	r2,-12(fp)
    2688:	100490fa 	slli	r2,r2,3
    268c:	108001c4 	addi	r2,r2,7
    2690:	00c09784 	movi	r3,606
    2694:	d8c00115 	stw	r3,4(sp)
    2698:	d8800015 	stw	r2,0(sp)
    269c:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(5), V(0), H(5), V(1), WALL_COLOR);
    26a0:	e0bfff17 	ldw	r2,-4(fp)
    26a4:	11000117 	ldw	r4,4(r2)
    26a8:	e0bffe17 	ldw	r2,-8(fp)
    26ac:	100490fa 	slli	r2,r2,3
    26b0:	11400144 	addi	r5,r2,5
    26b4:	e0bffd17 	ldw	r2,-12(fp)
    26b8:	100c90fa 	slli	r6,r2,3
    26bc:	e0bffe17 	ldw	r2,-8(fp)
    26c0:	100490fa 	slli	r2,r2,3
    26c4:	11c00144 	addi	r7,r2,5
    26c8:	e0bffd17 	ldw	r2,-12(fp)
    26cc:	100490fa 	slli	r2,r2,3
    26d0:	10800044 	addi	r2,r2,1
    26d4:	00c09784 	movi	r3,606
    26d8:	d8c00115 	stw	r3,4(sp)
    26dc:	d8800015 	stw	r2,0(sp)
    26e0:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(6), V(2), H(7), V(2), WALL_COLOR);
    26e4:	e0bfff17 	ldw	r2,-4(fp)
    26e8:	11000117 	ldw	r4,4(r2)
    26ec:	e0bffe17 	ldw	r2,-8(fp)
    26f0:	100490fa 	slli	r2,r2,3
    26f4:	11400184 	addi	r5,r2,6
    26f8:	e0bffd17 	ldw	r2,-12(fp)
    26fc:	100490fa 	slli	r2,r2,3
    2700:	11800084 	addi	r6,r2,2
    2704:	e0bffe17 	ldw	r2,-8(fp)
    2708:	100490fa 	slli	r2,r2,3
    270c:	11c001c4 	addi	r7,r2,7
    2710:	e0bffd17 	ldw	r2,-12(fp)
    2714:	100490fa 	slli	r2,r2,3
    2718:	10800084 	addi	r2,r2,2
    271c:	00c09784 	movi	r3,606
    2720:	d8c00115 	stw	r3,4(sp)
    2724:	d8800015 	stw	r2,0(sp)
    2728:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(6), V(5), H(7), V(5), WALL_COLOR);
    272c:	e0bfff17 	ldw	r2,-4(fp)
    2730:	11000117 	ldw	r4,4(r2)
    2734:	e0bffe17 	ldw	r2,-8(fp)
    2738:	100490fa 	slli	r2,r2,3
    273c:	11400184 	addi	r5,r2,6
    2740:	e0bffd17 	ldw	r2,-12(fp)
    2744:	100490fa 	slli	r2,r2,3
    2748:	11800144 	addi	r6,r2,5
    274c:	e0bffe17 	ldw	r2,-8(fp)
    2750:	100490fa 	slli	r2,r2,3
    2754:	11c001c4 	addi	r7,r2,7
    2758:	e0bffd17 	ldw	r2,-12(fp)
    275c:	100490fa 	slli	r2,r2,3
    2760:	10800144 	addi	r2,r2,5
    2764:	00c09784 	movi	r3,606
    2768:	d8c00115 	stw	r3,4(sp)
    276c:	d8800015 	stw	r2,0(sp)
    2770:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(5), V(6), H(5), V(7), WALL_COLOR);
    2774:	e0bfff17 	ldw	r2,-4(fp)
    2778:	11000117 	ldw	r4,4(r2)
    277c:	e0bffe17 	ldw	r2,-8(fp)
    2780:	100490fa 	slli	r2,r2,3
    2784:	11400144 	addi	r5,r2,5
    2788:	e0bffd17 	ldw	r2,-12(fp)
    278c:	100490fa 	slli	r2,r2,3
    2790:	11800184 	addi	r6,r2,6
    2794:	e0bffe17 	ldw	r2,-8(fp)
    2798:	100490fa 	slli	r2,r2,3
    279c:	11c00144 	addi	r7,r2,5
    27a0:	e0bffd17 	ldw	r2,-12(fp)
    27a4:	100490fa 	slli	r2,r2,3
    27a8:	108001c4 	addi	r2,r2,7
    27ac:	00c09784 	movi	r3,606
    27b0:	d8c00115 	stw	r3,4(sp)
    27b4:	d8800015 	stw	r2,0(sp)
    27b8:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						break;
    27bc:	0000ec06 	br	2b70 <_ZN4Game7drawMapEv+0x113c>
					case cu:
						vi->drawLine(H(2), V(0), H(2), V(3), WALL_COLOR);
    27c0:	e0bfff17 	ldw	r2,-4(fp)
    27c4:	11000117 	ldw	r4,4(r2)
    27c8:	e0bffe17 	ldw	r2,-8(fp)
    27cc:	100490fa 	slli	r2,r2,3
    27d0:	11400084 	addi	r5,r2,2
    27d4:	e0bffd17 	ldw	r2,-12(fp)
    27d8:	100c90fa 	slli	r6,r2,3
    27dc:	e0bffe17 	ldw	r2,-8(fp)
    27e0:	100490fa 	slli	r2,r2,3
    27e4:	11c00084 	addi	r7,r2,2
    27e8:	e0bffd17 	ldw	r2,-12(fp)
    27ec:	100490fa 	slli	r2,r2,3
    27f0:	108000c4 	addi	r2,r2,3
    27f4:	00c09784 	movi	r3,606
    27f8:	d8c00115 	stw	r3,4(sp)
    27fc:	d8800015 	stw	r2,0(sp)
    2800:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(5), V(0), H(5), V(3), WALL_COLOR);
    2804:	e0bfff17 	ldw	r2,-4(fp)
    2808:	11000117 	ldw	r4,4(r2)
    280c:	e0bffe17 	ldw	r2,-8(fp)
    2810:	100490fa 	slli	r2,r2,3
    2814:	11400144 	addi	r5,r2,5
    2818:	e0bffd17 	ldw	r2,-12(fp)
    281c:	100c90fa 	slli	r6,r2,3
    2820:	e0bffe17 	ldw	r2,-8(fp)
    2824:	100490fa 	slli	r2,r2,3
    2828:	11c00144 	addi	r7,r2,5
    282c:	e0bffd17 	ldw	r2,-12(fp)
    2830:	100490fa 	slli	r2,r2,3
    2834:	108000c4 	addi	r2,r2,3
    2838:	00c09784 	movi	r3,606
    283c:	d8c00115 	stw	r3,4(sp)
    2840:	d8800015 	stw	r2,0(sp)
    2844:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(3), V(4), H(4), V(4), WALL_COLOR);
    2848:	e0bfff17 	ldw	r2,-4(fp)
    284c:	11000117 	ldw	r4,4(r2)
    2850:	e0bffe17 	ldw	r2,-8(fp)
    2854:	100490fa 	slli	r2,r2,3
    2858:	114000c4 	addi	r5,r2,3
    285c:	e0bffd17 	ldw	r2,-12(fp)
    2860:	100490fa 	slli	r2,r2,3
    2864:	11800104 	addi	r6,r2,4
    2868:	e0bffe17 	ldw	r2,-8(fp)
    286c:	100490fa 	slli	r2,r2,3
    2870:	11c00104 	addi	r7,r2,4
    2874:	e0bffd17 	ldw	r2,-12(fp)
    2878:	100490fa 	slli	r2,r2,3
    287c:	10800104 	addi	r2,r2,4
    2880:	00c09784 	movi	r3,606
    2884:	d8c00115 	stw	r3,4(sp)
    2888:	d8800015 	stw	r2,0(sp)
    288c:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						break;
    2890:	0000b706 	br	2b70 <_ZN4Game7drawMapEv+0x113c>
					case cd:
						vi->drawLine(H(2), V(4), H(2), V(7), WALL_COLOR);
    2894:	e0bfff17 	ldw	r2,-4(fp)
    2898:	11000117 	ldw	r4,4(r2)
    289c:	e0bffe17 	ldw	r2,-8(fp)
    28a0:	100490fa 	slli	r2,r2,3
    28a4:	11400084 	addi	r5,r2,2
    28a8:	e0bffd17 	ldw	r2,-12(fp)
    28ac:	100490fa 	slli	r2,r2,3
    28b0:	11800104 	addi	r6,r2,4
    28b4:	e0bffe17 	ldw	r2,-8(fp)
    28b8:	100490fa 	slli	r2,r2,3
    28bc:	11c00084 	addi	r7,r2,2
    28c0:	e0bffd17 	ldw	r2,-12(fp)
    28c4:	100490fa 	slli	r2,r2,3
    28c8:	108001c4 	addi	r2,r2,7
    28cc:	00c09784 	movi	r3,606
    28d0:	d8c00115 	stw	r3,4(sp)
    28d4:	d8800015 	stw	r2,0(sp)
    28d8:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(5), V(4), H(5), V(7), WALL_COLOR);
    28dc:	e0bfff17 	ldw	r2,-4(fp)
    28e0:	11000117 	ldw	r4,4(r2)
    28e4:	e0bffe17 	ldw	r2,-8(fp)
    28e8:	100490fa 	slli	r2,r2,3
    28ec:	11400144 	addi	r5,r2,5
    28f0:	e0bffd17 	ldw	r2,-12(fp)
    28f4:	100490fa 	slli	r2,r2,3
    28f8:	11800104 	addi	r6,r2,4
    28fc:	e0bffe17 	ldw	r2,-8(fp)
    2900:	100490fa 	slli	r2,r2,3
    2904:	11c00144 	addi	r7,r2,5
    2908:	e0bffd17 	ldw	r2,-12(fp)
    290c:	100490fa 	slli	r2,r2,3
    2910:	108001c4 	addi	r2,r2,7
    2914:	00c09784 	movi	r3,606
    2918:	d8c00115 	stw	r3,4(sp)
    291c:	d8800015 	stw	r2,0(sp)
    2920:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(3), V(3), H(4), V(3), WALL_COLOR);
    2924:	e0bfff17 	ldw	r2,-4(fp)
    2928:	11000117 	ldw	r4,4(r2)
    292c:	e0bffe17 	ldw	r2,-8(fp)
    2930:	100490fa 	slli	r2,r2,3
    2934:	114000c4 	addi	r5,r2,3
    2938:	e0bffd17 	ldw	r2,-12(fp)
    293c:	100490fa 	slli	r2,r2,3
    2940:	118000c4 	addi	r6,r2,3
    2944:	e0bffe17 	ldw	r2,-8(fp)
    2948:	100490fa 	slli	r2,r2,3
    294c:	11c00104 	addi	r7,r2,4
    2950:	e0bffd17 	ldw	r2,-12(fp)
    2954:	100490fa 	slli	r2,r2,3
    2958:	108000c4 	addi	r2,r2,3
    295c:	00c09784 	movi	r3,606
    2960:	d8c00115 	stw	r3,4(sp)
    2964:	d8800015 	stw	r2,0(sp)
    2968:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						break;
    296c:	00008006 	br	2b70 <_ZN4Game7drawMapEv+0x113c>
					case cl:
						vi->drawLine(H(0), V(2), H(3), V(2), WALL_COLOR);
    2970:	e0bfff17 	ldw	r2,-4(fp)
    2974:	11000117 	ldw	r4,4(r2)
    2978:	e0bffe17 	ldw	r2,-8(fp)
    297c:	100a90fa 	slli	r5,r2,3
    2980:	e0bffd17 	ldw	r2,-12(fp)
    2984:	100490fa 	slli	r2,r2,3
    2988:	11800084 	addi	r6,r2,2
    298c:	e0bffe17 	ldw	r2,-8(fp)
    2990:	100490fa 	slli	r2,r2,3
    2994:	11c000c4 	addi	r7,r2,3
    2998:	e0bffd17 	ldw	r2,-12(fp)
    299c:	100490fa 	slli	r2,r2,3
    29a0:	10800084 	addi	r2,r2,2
    29a4:	00c09784 	movi	r3,606
    29a8:	d8c00115 	stw	r3,4(sp)
    29ac:	d8800015 	stw	r2,0(sp)
    29b0:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(0), V(5), H(3), V(5), WALL_COLOR);
    29b4:	e0bfff17 	ldw	r2,-4(fp)
    29b8:	11000117 	ldw	r4,4(r2)
    29bc:	e0bffe17 	ldw	r2,-8(fp)
    29c0:	100a90fa 	slli	r5,r2,3
    29c4:	e0bffd17 	ldw	r2,-12(fp)
    29c8:	100490fa 	slli	r2,r2,3
    29cc:	11800144 	addi	r6,r2,5
    29d0:	e0bffe17 	ldw	r2,-8(fp)
    29d4:	100490fa 	slli	r2,r2,3
    29d8:	11c000c4 	addi	r7,r2,3
    29dc:	e0bffd17 	ldw	r2,-12(fp)
    29e0:	100490fa 	slli	r2,r2,3
    29e4:	10800144 	addi	r2,r2,5
    29e8:	00c09784 	movi	r3,606
    29ec:	d8c00115 	stw	r3,4(sp)
    29f0:	d8800015 	stw	r2,0(sp)
    29f4:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(4), V(3), H(4), V(4), WALL_COLOR);
    29f8:	e0bfff17 	ldw	r2,-4(fp)
    29fc:	11000117 	ldw	r4,4(r2)
    2a00:	e0bffe17 	ldw	r2,-8(fp)
    2a04:	100490fa 	slli	r2,r2,3
    2a08:	11400104 	addi	r5,r2,4
    2a0c:	e0bffd17 	ldw	r2,-12(fp)
    2a10:	100490fa 	slli	r2,r2,3
    2a14:	118000c4 	addi	r6,r2,3
    2a18:	e0bffe17 	ldw	r2,-8(fp)
    2a1c:	100490fa 	slli	r2,r2,3
    2a20:	11c00104 	addi	r7,r2,4
    2a24:	e0bffd17 	ldw	r2,-12(fp)
    2a28:	100490fa 	slli	r2,r2,3
    2a2c:	10800104 	addi	r2,r2,4
    2a30:	00c09784 	movi	r3,606
    2a34:	d8c00115 	stw	r3,4(sp)
    2a38:	d8800015 	stw	r2,0(sp)
    2a3c:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						break;
    2a40:	00004b06 	br	2b70 <_ZN4Game7drawMapEv+0x113c>
					case cr:
						vi->drawLine(H(4), V(2), H(7), V(2), WALL_COLOR);
    2a44:	e0bfff17 	ldw	r2,-4(fp)
    2a48:	11000117 	ldw	r4,4(r2)
    2a4c:	e0bffe17 	ldw	r2,-8(fp)
    2a50:	100490fa 	slli	r2,r2,3
    2a54:	11400104 	addi	r5,r2,4
    2a58:	e0bffd17 	ldw	r2,-12(fp)
    2a5c:	100490fa 	slli	r2,r2,3
    2a60:	11800084 	addi	r6,r2,2
    2a64:	e0bffe17 	ldw	r2,-8(fp)
    2a68:	100490fa 	slli	r2,r2,3
    2a6c:	11c001c4 	addi	r7,r2,7
    2a70:	e0bffd17 	ldw	r2,-12(fp)
    2a74:	100490fa 	slli	r2,r2,3
    2a78:	10800084 	addi	r2,r2,2
    2a7c:	00c09784 	movi	r3,606
    2a80:	d8c00115 	stw	r3,4(sp)
    2a84:	d8800015 	stw	r2,0(sp)
    2a88:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(4), V(5), H(7), V(5), WALL_COLOR);
    2a8c:	e0bfff17 	ldw	r2,-4(fp)
    2a90:	11000117 	ldw	r4,4(r2)
    2a94:	e0bffe17 	ldw	r2,-8(fp)
    2a98:	100490fa 	slli	r2,r2,3
    2a9c:	11400104 	addi	r5,r2,4
    2aa0:	e0bffd17 	ldw	r2,-12(fp)
    2aa4:	100490fa 	slli	r2,r2,3
    2aa8:	11800144 	addi	r6,r2,5
    2aac:	e0bffe17 	ldw	r2,-8(fp)
    2ab0:	100490fa 	slli	r2,r2,3
    2ab4:	11c001c4 	addi	r7,r2,7
    2ab8:	e0bffd17 	ldw	r2,-12(fp)
    2abc:	100490fa 	slli	r2,r2,3
    2ac0:	10800144 	addi	r2,r2,5
    2ac4:	00c09784 	movi	r3,606
    2ac8:	d8c00115 	stw	r3,4(sp)
    2acc:	d8800015 	stw	r2,0(sp)
    2ad0:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						vi->drawLine(H(3), V(3), H(3), V(4), WALL_COLOR);
    2ad4:	e0bfff17 	ldw	r2,-4(fp)
    2ad8:	11000117 	ldw	r4,4(r2)
    2adc:	e0bffe17 	ldw	r2,-8(fp)
    2ae0:	100490fa 	slli	r2,r2,3
    2ae4:	114000c4 	addi	r5,r2,3
    2ae8:	e0bffd17 	ldw	r2,-12(fp)
    2aec:	100490fa 	slli	r2,r2,3
    2af0:	118000c4 	addi	r6,r2,3
    2af4:	e0bffe17 	ldw	r2,-8(fp)
    2af8:	100490fa 	slli	r2,r2,3
    2afc:	11c000c4 	addi	r7,r2,3
    2b00:	e0bffd17 	ldw	r2,-12(fp)
    2b04:	100490fa 	slli	r2,r2,3
    2b08:	10800104 	addi	r2,r2,4
    2b0c:	00c09784 	movi	r3,606
    2b10:	d8c00115 	stw	r3,4(sp)
    2b14:	d8800015 	stw	r2,0(sp)
    2b18:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						break;
    2b1c:	00001406 	br	2b70 <_ZN4Game7drawMapEv+0x113c>
					case gc:
						vi->drawLine(H(-3), V(4), H(10), V(4), WALL_COLOR);
    2b20:	e0bfff17 	ldw	r2,-4(fp)
    2b24:	11000117 	ldw	r4,4(r2)
    2b28:	e0bffe17 	ldw	r2,-8(fp)
    2b2c:	100490fa 	slli	r2,r2,3
    2b30:	117fff44 	addi	r5,r2,-3
    2b34:	e0bffd17 	ldw	r2,-12(fp)
    2b38:	100490fa 	slli	r2,r2,3
    2b3c:	11800104 	addi	r6,r2,4
    2b40:	e0bffe17 	ldw	r2,-8(fp)
    2b44:	100490fa 	slli	r2,r2,3
    2b48:	11c00284 	addi	r7,r2,10
    2b4c:	e0bffd17 	ldw	r2,-12(fp)
    2b50:	100490fa 	slli	r2,r2,3
    2b54:	10800104 	addi	r2,r2,4
    2b58:	00c09784 	movi	r3,606
    2b5c:	d8c00115 	stw	r3,4(sp)
    2b60:	d8800015 	stw	r2,0(sp)
    2b64:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
						break;
    2b68:	00000106 	br	2b70 <_ZN4Game7drawMapEv+0x113c>
					default: break;
    2b6c:	0001883a 	nop
};

void Game::drawMap(){
	vi->setOffset(MAP_OFFSET_X, MAP_OFFSET_Y);
	for(int v = 0; v < 27; v++){
		for(int h = 0; h < 21; h++){
    2b70:	e0bffe17 	ldw	r2,-8(fp)
    2b74:	10800044 	addi	r2,r2,1
    2b78:	e0bffe15 	stw	r2,-8(fp)
    2b7c:	003bbd06 	br	1a74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a74>
	vi->resetOffset();
};

void Game::drawMap(){
	vi->setOffset(MAP_OFFSET_X, MAP_OFFSET_Y);
	for(int v = 0; v < 27; v++){
    2b80:	e0bffd17 	ldw	r2,-12(fp)
    2b84:	10800044 	addi	r2,r2,1
    2b88:	e0bffd15 	stw	r2,-12(fp)
    2b8c:	003bb506 	br	1a64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7001a64>
				}
			}

		}
	}
	vi->resetOffset();
    2b90:	e0bfff17 	ldw	r2,-4(fp)
    2b94:	10800117 	ldw	r2,4(r2)
    2b98:	1009883a 	mov	r4,r2
    2b9c:	00035140 	call	3514 <_ZN14VideoInterface11resetOffsetEv>
};
    2ba0:	0001883a 	nop
    2ba4:	e037883a 	mov	sp,fp
    2ba8:	dfc00117 	ldw	ra,4(sp)
    2bac:	df000017 	ldw	fp,0(sp)
    2bb0:	dec00204 	addi	sp,sp,8
    2bb4:	f800283a 	ret

00002bb8 <_ZN8KeyboardC1Ev>:
 *      Author: natha
 */

#include "Keyboard.h"

Keyboard::Keyboard(){
    2bb8:	defffd04 	addi	sp,sp,-12
    2bbc:	dfc00215 	stw	ra,8(sp)
    2bc0:	df000115 	stw	fp,4(sp)
    2bc4:	df000104 	addi	fp,sp,4
    2bc8:	e13fff15 	stw	r4,-4(fp)
    2bcc:	e0bfff17 	ldw	r2,-4(fp)
    2bd0:	1009883a 	mov	r4,r2
    2bd4:	00002840 	call	284 <_ZN19ControllerInterfaceC1Ev>
    2bd8:	008000b4 	movhi	r2,2
    2bdc:	108fb904 	addi	r2,r2,16100
    2be0:	e0ffff17 	ldw	r3,-4(fp)
    2be4:	18800015 	stw	r2,0(r3)
	this->PS2_dev = alt_up_ps2_open_dev ("/dev/PS2_Port");
    2be8:	010000b4 	movhi	r4,2
    2bec:	210fa504 	addi	r4,r4,16020
    2bf0:	0021cb00 	call	21cb0 <alt_up_ps2_open_dev>
    2bf4:	1007883a 	mov	r3,r2
    2bf8:	e0bfff17 	ldw	r2,-4(fp)
    2bfc:	10c00215 	stw	r3,8(r2)
	if (this->PS2_dev == NULL)
    2c00:	e0bfff17 	ldw	r2,-4(fp)
    2c04:	10800217 	ldw	r2,8(r2)
    2c08:	1000041e 	bne	r2,zero,2c1c <_ZN8KeyboardC1Ev+0x64>
		printf("Error: could not open PS2 device\n");
    2c0c:	010000b4 	movhi	r4,2
    2c10:	210fa904 	addi	r4,r4,16036
    2c14:	00084840 	call	8484 <puts>
    2c18:	00000306 	br	2c28 <_ZN8KeyboardC1Ev+0x70>
	else
		printf("Opened PS2 device\n");
    2c1c:	010000b4 	movhi	r4,2
    2c20:	210fb204 	addi	r4,r4,16072
    2c24:	00084840 	call	8484 <puts>

	alt_up_ps2_write_data_byte (this->PS2_dev, 0xFF);
    2c28:	e0bfff17 	ldw	r2,-4(fp)
    2c2c:	10800217 	ldw	r2,8(r2)
    2c30:	01403fc4 	movi	r5,255
    2c34:	1009883a 	mov	r4,r2
    2c38:	00218e80 	call	218e8 <alt_up_ps2_write_data_byte>
	alt_up_ps2_enable_read_interrupt(this->PS2_dev);
    2c3c:	e0bfff17 	ldw	r2,-4(fp)
    2c40:	10800217 	ldw	r2,8(r2)
    2c44:	1009883a 	mov	r4,r2
    2c48:	002182c0 	call	2182c <alt_up_ps2_enable_read_interrupt>

	byte1 = 0, byte2 = 0, byte3 = 0;
    2c4c:	e0bfff17 	ldw	r2,-4(fp)
    2c50:	10000305 	stb	zero,12(r2)
    2c54:	e0bfff17 	ldw	r2,-4(fp)
    2c58:	10000345 	stb	zero,13(r2)
    2c5c:	e0bfff17 	ldw	r2,-4(fp)
    2c60:	10000385 	stb	zero,14(r2)
};
    2c64:	0001883a 	nop
    2c68:	e037883a 	mov	sp,fp
    2c6c:	dfc00117 	ldw	ra,4(sp)
    2c70:	df000017 	ldw	fp,0(sp)
    2c74:	dec00204 	addi	sp,sp,8
    2c78:	f800283a 	ret

00002c7c <_ZN8Keyboard6updateEv>:

void Keyboard::update(){
    2c7c:	defffd04 	addi	sp,sp,-12
    2c80:	dfc00215 	stw	ra,8(sp)
    2c84:	df000115 	stw	fp,4(sp)
    2c88:	df000104 	addi	fp,sp,4
    2c8c:	e13fff15 	stw	r4,-4(fp)
	while(alt_up_ps2_read_data_byte (PS2_dev, &PS2_data) == 0)
    2c90:	e0bfff17 	ldw	r2,-4(fp)
    2c94:	10c00217 	ldw	r3,8(r2)
    2c98:	e0bfff17 	ldw	r2,-4(fp)
    2c9c:	108003c4 	addi	r2,r2,15
    2ca0:	100b883a 	mov	r5,r2
    2ca4:	1809883a 	mov	r4,r3
    2ca8:	0021ac40 	call	21ac4 <alt_up_ps2_read_data_byte>
    2cac:	1005003a 	cmpeq	r2,r2,zero
    2cb0:	10803fcc 	andi	r2,r2,255
    2cb4:	10004126 	beq	r2,zero,2dbc <_ZN8Keyboard6updateEv+0x140>
	{
		/* shift the next data byte into the display */
		byte1 = byte2;
    2cb8:	e0bfff17 	ldw	r2,-4(fp)
    2cbc:	10c00343 	ldbu	r3,13(r2)
    2cc0:	e0bfff17 	ldw	r2,-4(fp)
    2cc4:	10c00305 	stb	r3,12(r2)
		byte2 = byte3;
    2cc8:	e0bfff17 	ldw	r2,-4(fp)
    2ccc:	10c00383 	ldbu	r3,14(r2)
    2cd0:	e0bfff17 	ldw	r2,-4(fp)
    2cd4:	10c00345 	stb	r3,13(r2)
		byte3 = PS2_data;
    2cd8:	e0bfff17 	ldw	r2,-4(fp)
    2cdc:	10c003c3 	ldbu	r3,15(r2)
    2ce0:	e0bfff17 	ldw	r2,-4(fp)
    2ce4:	10c00385 	stb	r3,14(r2)

		//printf("%d-%d-%d \n\r", byte1, byte2, byte3);
		if(byte2 == 224 && byte3 == 107)
    2ce8:	e0bfff17 	ldw	r2,-4(fp)
    2cec:	10800343 	ldbu	r2,13(r2)
    2cf0:	10803fcc 	andi	r2,r2,255
    2cf4:	10803818 	cmpnei	r2,r2,224
    2cf8:	1000081e 	bne	r2,zero,2d1c <_ZN8Keyboard6updateEv+0xa0>
    2cfc:	e0bfff17 	ldw	r2,-4(fp)
    2d00:	10800383 	ldbu	r2,14(r2)
    2d04:	10803fcc 	andi	r2,r2,255
    2d08:	10801ad8 	cmpnei	r2,r2,107
    2d0c:	1000031e 	bne	r2,zero,2d1c <_ZN8Keyboard6updateEv+0xa0>
			this->activeButton = BUTTON_LEFT;
    2d10:	e0bfff17 	ldw	r2,-4(fp)
    2d14:	00c000c4 	movi	r3,3
    2d18:	10c00115 	stw	r3,4(r2)
		if(byte2 == 224 && byte3 == 117)
    2d1c:	e0bfff17 	ldw	r2,-4(fp)
    2d20:	10800343 	ldbu	r2,13(r2)
    2d24:	10803fcc 	andi	r2,r2,255
    2d28:	10803818 	cmpnei	r2,r2,224
    2d2c:	1000081e 	bne	r2,zero,2d50 <_ZN8Keyboard6updateEv+0xd4>
    2d30:	e0bfff17 	ldw	r2,-4(fp)
    2d34:	10800383 	ldbu	r2,14(r2)
    2d38:	10803fcc 	andi	r2,r2,255
    2d3c:	10801d58 	cmpnei	r2,r2,117
    2d40:	1000031e 	bne	r2,zero,2d50 <_ZN8Keyboard6updateEv+0xd4>
			this->activeButton = BUTTON_UP;
    2d44:	e0bfff17 	ldw	r2,-4(fp)
    2d48:	00c00044 	movi	r3,1
    2d4c:	10c00115 	stw	r3,4(r2)
		if(byte2 == 224 && byte3 == 116)
    2d50:	e0bfff17 	ldw	r2,-4(fp)
    2d54:	10800343 	ldbu	r2,13(r2)
    2d58:	10803fcc 	andi	r2,r2,255
    2d5c:	10803818 	cmpnei	r2,r2,224
    2d60:	1000081e 	bne	r2,zero,2d84 <_ZN8Keyboard6updateEv+0x108>
    2d64:	e0bfff17 	ldw	r2,-4(fp)
    2d68:	10800383 	ldbu	r2,14(r2)
    2d6c:	10803fcc 	andi	r2,r2,255
    2d70:	10801d18 	cmpnei	r2,r2,116
    2d74:	1000031e 	bne	r2,zero,2d84 <_ZN8Keyboard6updateEv+0x108>
			this->activeButton = BUTTON_RIGHT;
    2d78:	e0bfff17 	ldw	r2,-4(fp)
    2d7c:	00c00104 	movi	r3,4
    2d80:	10c00115 	stw	r3,4(r2)
		if(byte2 == 224 && byte3 == 114)
    2d84:	e0bfff17 	ldw	r2,-4(fp)
    2d88:	10800343 	ldbu	r2,13(r2)
    2d8c:	10803fcc 	andi	r2,r2,255
    2d90:	10803818 	cmpnei	r2,r2,224
    2d94:	103fbe1e 	bne	r2,zero,2c90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c90>
    2d98:	e0bfff17 	ldw	r2,-4(fp)
    2d9c:	10800383 	ldbu	r2,14(r2)
    2da0:	10803fcc 	andi	r2,r2,255
    2da4:	10801c98 	cmpnei	r2,r2,114
    2da8:	103fb91e 	bne	r2,zero,2c90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c90>
			this->activeButton = BUTTON_DOWN;
    2dac:	e0bfff17 	ldw	r2,-4(fp)
    2db0:	00c00084 	movi	r3,2
    2db4:	10c00115 	stw	r3,4(r2)

	byte1 = 0, byte2 = 0, byte3 = 0;
};

void Keyboard::update(){
	while(alt_up_ps2_read_data_byte (PS2_dev, &PS2_data) == 0)
    2db8:	003fb506 	br	2c90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7002c90>
		if(byte2 == 224 && byte3 == 114)
			this->activeButton = BUTTON_DOWN;
//		if(byte2 == 41 && byte3 == 41) // SPACE
//			pm->setDir(DIR_NO_DIR);
	}
};
    2dbc:	0001883a 	nop
    2dc0:	e037883a 	mov	sp,fp
    2dc4:	dfc00117 	ldw	ra,4(sp)
    2dc8:	df000017 	ldw	fp,0(sp)
    2dcc:	dec00204 	addi	sp,sp,8
    2dd0:	f800283a 	ret

00002dd4 <_ZN6PacManC1Eii>:
 *      Author: natha
 */

#include "PacMan.h"

PacMan::PacMan(int x, int y) : Entity(x, y) {
    2dd4:	defffb04 	addi	sp,sp,-20
    2dd8:	dfc00415 	stw	ra,16(sp)
    2ddc:	df000315 	stw	fp,12(sp)
    2de0:	df000304 	addi	fp,sp,12
    2de4:	e13ffd15 	stw	r4,-12(fp)
    2de8:	e17ffe15 	stw	r5,-8(fp)
    2dec:	e1bfff15 	stw	r6,-4(fp)
    2df0:	e0bffd17 	ldw	r2,-12(fp)
    2df4:	e1bfff17 	ldw	r6,-4(fp)
    2df8:	e17ffe17 	ldw	r5,-8(fp)
    2dfc:	1009883a 	mov	r4,r2
    2e00:	00002f80 	call	2f8 <_ZN6EntityC1Eii>
    2e04:	008000b4 	movhi	r2,2
    2e08:	10902e04 	addi	r2,r2,16568
    2e0c:	e0fffd17 	ldw	r3,-12(fp)
    2e10:	18800015 	stw	r2,0(r3)
    2e14:	e0bffd17 	ldw	r2,-12(fp)
    2e18:	10000c15 	stw	zero,48(r2)
    2e1c:	e0bffd17 	ldw	r2,-12(fp)
    2e20:	10000d15 	stw	zero,52(r2)
    2e24:	e0bffd17 	ldw	r2,-12(fp)
    2e28:	00c00044 	movi	r3,1
    2e2c:	10c00e15 	stw	r3,56(r2)
    2e30:	e0bffd17 	ldw	r2,-12(fp)
    2e34:	00ff4804 	movi	r3,-736
    2e38:	10c00f0d 	sth	r3,60(r2)
    2e3c:	e0fffd17 	ldw	r3,-12(fp)
    2e40:	008000b4 	movhi	r2,2
    2e44:	108fbf84 	addi	r2,r2,16126
    2e48:	18c00f84 	addi	r3,r3,62
    2e4c:	1009883a 	mov	r4,r2
    2e50:	00806c04 	movi	r2,432
    2e54:	100d883a 	mov	r6,r2
    2e58:	200b883a 	mov	r5,r4
    2e5c:	1809883a 	mov	r4,r3
    2e60:	00080e80 	call	80e8 <memcpy>
	this->width = 12;
    2e64:	e0bffd17 	ldw	r2,-12(fp)
    2e68:	00c00304 	movi	r3,12
    2e6c:	10c00515 	stw	r3,20(r2)
	this->height = 12;
    2e70:	e0bffd17 	ldw	r2,-12(fp)
    2e74:	00c00304 	movi	r3,12
    2e78:	10c00615 	stw	r3,24(r2)
	this->curr_dir = DIR_NO_DIR;
    2e7c:	e0bffd17 	ldw	r2,-12(fp)
    2e80:	00c00104 	movi	r3,4
    2e84:	10c00915 	stw	r3,36(r2)
	this->velocity = 50;
    2e88:	e0bffd17 	ldw	r2,-12(fp)
    2e8c:	00c00c84 	movi	r3,50
    2e90:	10c00715 	stw	r3,28(r2)
};
    2e94:	0001883a 	nop
    2e98:	e037883a 	mov	sp,fp
    2e9c:	dfc00117 	ldw	ra,4(sp)
    2ea0:	df000017 	ldw	fp,0(sp)
    2ea4:	dec00204 	addi	sp,sp,8
    2ea8:	f800283a 	ret

00002eac <_ZN6PacMan8getColorEi5E_DIRii>:


uint16_t PacMan::getColor(int frame, e_dir_t dir, int x, int y){
    2eac:	defffa04 	addi	sp,sp,-24
    2eb0:	df000515 	stw	fp,20(sp)
    2eb4:	df000504 	addi	fp,sp,20
    2eb8:	e13ffc15 	stw	r4,-16(fp)
    2ebc:	e17ffd15 	stw	r5,-12(fp)
    2ec0:	e1bffe15 	stw	r6,-8(fp)
    2ec4:	e1ffff15 	stw	r7,-4(fp)
	if(x < 0 || x > this->width - 1)
    2ec8:	e0bfff17 	ldw	r2,-4(fp)
    2ecc:	10000516 	blt	r2,zero,2ee4 <_ZN6PacMan8getColorEi5E_DIRii+0x38>
    2ed0:	e0bffc17 	ldw	r2,-16(fp)
    2ed4:	10800517 	ldw	r2,20(r2)
    2ed8:	10ffffc4 	addi	r3,r2,-1
    2edc:	e0bfff17 	ldw	r2,-4(fp)
    2ee0:	1880020e 	bge	r3,r2,2eec <_ZN6PacMan8getColorEi5E_DIRii+0x40>
		return NULL;
    2ee4:	0005883a 	mov	r2,zero
    2ee8:	00005e06 	br	3064 <_ZN6PacMan8getColorEi5E_DIRii+0x1b8>
	if(y < 0 || y > this->height - 1)
    2eec:	e0800117 	ldw	r2,4(fp)
    2ef0:	10000516 	blt	r2,zero,2f08 <_ZN6PacMan8getColorEi5E_DIRii+0x5c>
    2ef4:	e0bffc17 	ldw	r2,-16(fp)
    2ef8:	10800617 	ldw	r2,24(r2)
    2efc:	10ffffc4 	addi	r3,r2,-1
    2f00:	e0800117 	ldw	r2,4(fp)
    2f04:	1880020e 	bge	r3,r2,2f10 <_ZN6PacMan8getColorEi5E_DIRii+0x64>
		return NULL;
    2f08:	0005883a 	mov	r2,zero
    2f0c:	00005506 	br	3064 <_ZN6PacMan8getColorEi5E_DIRii+0x1b8>

	uint8_t color_num;
	switch(dir){
    2f10:	e0bffe17 	ldw	r2,-8(fp)
    2f14:	10c00168 	cmpgeui	r3,r2,5
    2f18:	1800471e 	bne	r3,zero,3038 <_ZN6PacMan8getColorEi5E_DIRii+0x18c>
    2f1c:	100690ba 	slli	r3,r2,2
    2f20:	00800034 	movhi	r2,0
    2f24:	108bcd04 	addi	r2,r2,12084
    2f28:	1885883a 	add	r2,r3,r2
    2f2c:	10800017 	ldw	r2,0(r2)
    2f30:	1000683a 	jmp	r2
    2f34:	00002ff4 	movhi	zero,191
    2f38:	00002fc0 	call	2fc <_ZN6EntityC1Eii+0x4>
    2f3c:	00002f7c 	xorhi	zero,zero,189
    2f40:	00002f48 	cmpgei	zero,zero,189
    2f44:	00002f48 	cmpgei	zero,zero,189
	case DIR_NO_DIR:
	case DIR_RIGHT:
		color_num = this->bmp[frame][y][x]; break;
    2f48:	e0fffc17 	ldw	r3,-16(fp)
    2f4c:	e1000117 	ldw	r4,4(fp)
    2f50:	e0bffd17 	ldw	r2,-12(fp)
    2f54:	21000324 	muli	r4,r4,12
    2f58:	10802424 	muli	r2,r2,144
    2f5c:	2085883a 	add	r2,r4,r2
    2f60:	1887883a 	add	r3,r3,r2
    2f64:	e0bfff17 	ldw	r2,-4(fp)
    2f68:	1885883a 	add	r2,r3,r2
    2f6c:	10800f84 	addi	r2,r2,62
    2f70:	10800003 	ldbu	r2,0(r2)
    2f74:	e0bffb05 	stb	r2,-20(fp)
    2f78:	00002f06 	br	3038 <_ZN6PacMan8getColorEi5E_DIRii+0x18c>
	case DIR_LEFT:
		color_num = this->bmp[frame][y][this->width - 1 - x]; break;
    2f7c:	e0bffc17 	ldw	r2,-16(fp)
    2f80:	10800517 	ldw	r2,20(r2)
    2f84:	10ffffc4 	addi	r3,r2,-1
    2f88:	e0bfff17 	ldw	r2,-4(fp)
    2f8c:	1885c83a 	sub	r2,r3,r2
    2f90:	e13ffc17 	ldw	r4,-16(fp)
    2f94:	e1400117 	ldw	r5,4(fp)
    2f98:	e0fffd17 	ldw	r3,-12(fp)
    2f9c:	29400324 	muli	r5,r5,12
    2fa0:	18c02424 	muli	r3,r3,144
    2fa4:	28c7883a 	add	r3,r5,r3
    2fa8:	20c7883a 	add	r3,r4,r3
    2fac:	1885883a 	add	r2,r3,r2
    2fb0:	10800f84 	addi	r2,r2,62
    2fb4:	10800003 	ldbu	r2,0(r2)
    2fb8:	e0bffb05 	stb	r2,-20(fp)
    2fbc:	00001e06 	br	3038 <_ZN6PacMan8getColorEi5E_DIRii+0x18c>
	case DIR_DOWN:
		color_num = this->bmp[frame][x][y]; break;
    2fc0:	e0fffc17 	ldw	r3,-16(fp)
    2fc4:	e13fff17 	ldw	r4,-4(fp)
    2fc8:	e0bffd17 	ldw	r2,-12(fp)
    2fcc:	21000324 	muli	r4,r4,12
    2fd0:	10802424 	muli	r2,r2,144
    2fd4:	2085883a 	add	r2,r4,r2
    2fd8:	1887883a 	add	r3,r3,r2
    2fdc:	e0800117 	ldw	r2,4(fp)
    2fe0:	1885883a 	add	r2,r3,r2
    2fe4:	10800f84 	addi	r2,r2,62
    2fe8:	10800003 	ldbu	r2,0(r2)
    2fec:	e0bffb05 	stb	r2,-20(fp)
    2ff0:	00001106 	br	3038 <_ZN6PacMan8getColorEi5E_DIRii+0x18c>
	case DIR_UP:
		color_num = this->bmp[frame][x][this->height - 1 - y]; break;
    2ff4:	e0bffc17 	ldw	r2,-16(fp)
    2ff8:	10800617 	ldw	r2,24(r2)
    2ffc:	10ffffc4 	addi	r3,r2,-1
    3000:	e0800117 	ldw	r2,4(fp)
    3004:	1885c83a 	sub	r2,r3,r2
    3008:	e13ffc17 	ldw	r4,-16(fp)
    300c:	e17fff17 	ldw	r5,-4(fp)
    3010:	e0fffd17 	ldw	r3,-12(fp)
    3014:	29400324 	muli	r5,r5,12
    3018:	18c02424 	muli	r3,r3,144
    301c:	28c7883a 	add	r3,r5,r3
    3020:	20c7883a 	add	r3,r4,r3
    3024:	1885883a 	add	r2,r3,r2
    3028:	10800f84 	addi	r2,r2,62
    302c:	10800003 	ldbu	r2,0(r2)
    3030:	e0bffb05 	stb	r2,-20(fp)
    3034:	0001883a 	nop
	}
	if(color_num)
    3038:	e0bffb03 	ldbu	r2,-20(fp)
    303c:	10000826 	beq	r2,zero,3060 <_ZN6PacMan8getColorEi5E_DIRii+0x1b4>
		return this->bmp_colors[color_num - 1];
    3040:	e0bffb03 	ldbu	r2,-20(fp)
    3044:	10bfffc4 	addi	r2,r2,-1
    3048:	e0fffc17 	ldw	r3,-16(fp)
    304c:	10800784 	addi	r2,r2,30
    3050:	1085883a 	add	r2,r2,r2
    3054:	1885883a 	add	r2,r3,r2
    3058:	1080000b 	ldhu	r2,0(r2)
    305c:	00000106 	br	3064 <_ZN6PacMan8getColorEi5E_DIRii+0x1b8>

	return NULL;
    3060:	0005883a 	mov	r2,zero
}
    3064:	e037883a 	mov	sp,fp
    3068:	df000017 	ldw	fp,0(sp)
    306c:	dec00104 	addi	sp,sp,4
    3070:	f800283a 	ret

00003074 <_ZN6PacMan5_drawEP14VideoInterface>:

void PacMan::_draw(VideoInterface* vi){
    3074:	defff604 	addi	sp,sp,-40
    3078:	dfc00915 	stw	ra,36(sp)
    307c:	df000815 	stw	fp,32(sp)
    3080:	df000804 	addi	fp,sp,32
    3084:	e13ffe15 	stw	r4,-8(fp)
    3088:	e17fff15 	stw	r5,-4(fp)
	uint16_t color1;
	uint16_t color2;
	for(int y = 0; y < this->width; y++){
    308c:	e03ff915 	stw	zero,-28(fp)
    3090:	e0bffe17 	ldw	r2,-8(fp)
    3094:	10800517 	ldw	r2,20(r2)
    3098:	e0fff917 	ldw	r3,-28(fp)
    309c:	1880440e 	bge	r3,r2,31b0 <_ZN6PacMan5_drawEP14VideoInterface+0x13c>
		for(int x = 0; x < this->width; x++){
    30a0:	e03ffa15 	stw	zero,-24(fp)
    30a4:	e0bffe17 	ldw	r2,-8(fp)
    30a8:	10800517 	ldw	r2,20(r2)
    30ac:	e0fffa17 	ldw	r3,-24(fp)
    30b0:	18803b0e 	bge	r3,r2,31a0 <_ZN6PacMan5_drawEP14VideoInterface+0x12c>
			color1 = getColor(this->last_frame, this->prev_dir, x, y);
    30b4:	e0bffe17 	ldw	r2,-8(fp)
    30b8:	10c00d17 	ldw	r3,52(r2)
    30bc:	e0bffe17 	ldw	r2,-8(fp)
    30c0:	11000a17 	ldw	r4,40(r2)
    30c4:	e0bff917 	ldw	r2,-28(fp)
    30c8:	d8800015 	stw	r2,0(sp)
    30cc:	e1fffa17 	ldw	r7,-24(fp)
    30d0:	200d883a 	mov	r6,r4
    30d4:	180b883a 	mov	r5,r3
    30d8:	e13ffe17 	ldw	r4,-8(fp)
    30dc:	0002eac0 	call	2eac <_ZN6PacMan8getColorEi5E_DIRii>
    30e0:	e0bffd0d 	sth	r2,-12(fp)
			color2 = getColor(this->curr_frame, this->curr_dir, (this->prev_x - this->x) + x, (this->prev_y - this->y) + y);
    30e4:	e0bffe17 	ldw	r2,-8(fp)
    30e8:	11000c17 	ldw	r4,48(r2)
    30ec:	e0bffe17 	ldw	r2,-8(fp)
    30f0:	11400917 	ldw	r5,36(r2)
    30f4:	e0bffe17 	ldw	r2,-8(fp)
    30f8:	10c00317 	ldw	r3,12(r2)
    30fc:	e0bffe17 	ldw	r2,-8(fp)
    3100:	10800117 	ldw	r2,4(r2)
    3104:	1887c83a 	sub	r3,r3,r2
    3108:	e0bffa17 	ldw	r2,-24(fp)
    310c:	188d883a 	add	r6,r3,r2
    3110:	e0bffe17 	ldw	r2,-8(fp)
    3114:	10c00417 	ldw	r3,16(r2)
    3118:	e0bffe17 	ldw	r2,-8(fp)
    311c:	10800217 	ldw	r2,8(r2)
    3120:	1887c83a 	sub	r3,r3,r2
    3124:	e0bff917 	ldw	r2,-28(fp)
    3128:	1885883a 	add	r2,r3,r2
    312c:	d8800015 	stw	r2,0(sp)
    3130:	300f883a 	mov	r7,r6
    3134:	280d883a 	mov	r6,r5
    3138:	200b883a 	mov	r5,r4
    313c:	e13ffe17 	ldw	r4,-8(fp)
    3140:	0002eac0 	call	2eac <_ZN6PacMan8getColorEi5E_DIRii>
    3144:	e0bffd8d 	sth	r2,-10(fp)
			if(color1 != color2)
    3148:	e0fffd0b 	ldhu	r3,-12(fp)
    314c:	e0bffd8b 	ldhu	r2,-10(fp)
    3150:	18800f26 	beq	r3,r2,3190 <_ZN6PacMan5_drawEP14VideoInterface+0x11c>
				vi->drawPixel(this->prev_x + x - 2, this->prev_y + y - 2, 0);
    3154:	e0bffe17 	ldw	r2,-8(fp)
    3158:	10c00317 	ldw	r3,12(r2)
    315c:	e0bffa17 	ldw	r2,-24(fp)
    3160:	1885883a 	add	r2,r3,r2
    3164:	113fff84 	addi	r4,r2,-2
    3168:	e0bffe17 	ldw	r2,-8(fp)
    316c:	10c00417 	ldw	r3,16(r2)
    3170:	e0bff917 	ldw	r2,-28(fp)
    3174:	1885883a 	add	r2,r3,r2
    3178:	10bfff84 	addi	r2,r2,-2
    317c:	000f883a 	mov	r7,zero
    3180:	100d883a 	mov	r6,r2
    3184:	200b883a 	mov	r5,r4
    3188:	e13fff17 	ldw	r4,-4(fp)
    318c:	00035a40 	call	35a4 <_ZN14VideoInterface9drawPixelEiit>

void PacMan::_draw(VideoInterface* vi){
	uint16_t color1;
	uint16_t color2;
	for(int y = 0; y < this->width; y++){
		for(int x = 0; x < this->width; x++){
    3190:	e0bffa17 	ldw	r2,-24(fp)
    3194:	10800044 	addi	r2,r2,1
    3198:	e0bffa15 	stw	r2,-24(fp)
    319c:	003fc106 	br	30a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70030a4>
}

void PacMan::_draw(VideoInterface* vi){
	uint16_t color1;
	uint16_t color2;
	for(int y = 0; y < this->width; y++){
    31a0:	e0bff917 	ldw	r2,-28(fp)
    31a4:	10800044 	addi	r2,r2,1
    31a8:	e0bff915 	stw	r2,-28(fp)
    31ac:	003fb806 	br	3090 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003090>
			if(color1 != color2)
				vi->drawPixel(this->prev_x + x - 2, this->prev_y + y - 2, 0);
		}
	}

	for(int y = 0; y < this->width; y++){
    31b0:	e03ffb15 	stw	zero,-20(fp)
    31b4:	e0bffe17 	ldw	r2,-8(fp)
    31b8:	10800517 	ldw	r2,20(r2)
    31bc:	e0fffb17 	ldw	r3,-20(fp)
    31c0:	18802b0e 	bge	r3,r2,3270 <_ZN6PacMan5_drawEP14VideoInterface+0x1fc>
		for(int x = 0; x < this->width; x++){
    31c4:	e03ffc15 	stw	zero,-16(fp)
    31c8:	e0bffe17 	ldw	r2,-8(fp)
    31cc:	10800517 	ldw	r2,20(r2)
    31d0:	e0fffc17 	ldw	r3,-16(fp)
    31d4:	1880220e 	bge	r3,r2,3260 <_ZN6PacMan5_drawEP14VideoInterface+0x1ec>
			color1 = getColor(this->curr_frame, this->curr_dir, x, y);
    31d8:	e0bffe17 	ldw	r2,-8(fp)
    31dc:	10c00c17 	ldw	r3,48(r2)
    31e0:	e0bffe17 	ldw	r2,-8(fp)
    31e4:	11000917 	ldw	r4,36(r2)
    31e8:	e0bffb17 	ldw	r2,-20(fp)
    31ec:	d8800015 	stw	r2,0(sp)
    31f0:	e1fffc17 	ldw	r7,-16(fp)
    31f4:	200d883a 	mov	r6,r4
    31f8:	180b883a 	mov	r5,r3
    31fc:	e13ffe17 	ldw	r4,-8(fp)
    3200:	0002eac0 	call	2eac <_ZN6PacMan8getColorEi5E_DIRii>
    3204:	e0bffd0d 	sth	r2,-12(fp)
			if(color1 != NULL)
    3208:	e0bffd0b 	ldhu	r2,-12(fp)
    320c:	10001026 	beq	r2,zero,3250 <_ZN6PacMan5_drawEP14VideoInterface+0x1dc>
				vi->drawPixel(this->x + x - 2, this->y + y - 2, color1);
    3210:	e0bffe17 	ldw	r2,-8(fp)
    3214:	10c00117 	ldw	r3,4(r2)
    3218:	e0bffc17 	ldw	r2,-16(fp)
    321c:	1885883a 	add	r2,r3,r2
    3220:	113fff84 	addi	r4,r2,-2
    3224:	e0bffe17 	ldw	r2,-8(fp)
    3228:	10c00217 	ldw	r3,8(r2)
    322c:	e0bffb17 	ldw	r2,-20(fp)
    3230:	1885883a 	add	r2,r3,r2
    3234:	10bfff84 	addi	r2,r2,-2
    3238:	e0fffd0b 	ldhu	r3,-12(fp)
    323c:	180f883a 	mov	r7,r3
    3240:	100d883a 	mov	r6,r2
    3244:	200b883a 	mov	r5,r4
    3248:	e13fff17 	ldw	r4,-4(fp)
    324c:	00035a40 	call	35a4 <_ZN14VideoInterface9drawPixelEiit>
				vi->drawPixel(this->prev_x + x - 2, this->prev_y + y - 2, 0);
		}
	}

	for(int y = 0; y < this->width; y++){
		for(int x = 0; x < this->width; x++){
    3250:	e0bffc17 	ldw	r2,-16(fp)
    3254:	10800044 	addi	r2,r2,1
    3258:	e0bffc15 	stw	r2,-16(fp)
    325c:	003fda06 	br	31c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70031c8>
			if(color1 != color2)
				vi->drawPixel(this->prev_x + x - 2, this->prev_y + y - 2, 0);
		}
	}

	for(int y = 0; y < this->width; y++){
    3260:	e0bffb17 	ldw	r2,-20(fp)
    3264:	10800044 	addi	r2,r2,1
    3268:	e0bffb15 	stw	r2,-20(fp)
    326c:	003fd106 	br	31b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70031b4>
			color1 = getColor(this->curr_frame, this->curr_dir, x, y);
			if(color1 != NULL)
				vi->drawPixel(this->x + x - 2, this->y + y - 2, color1);
		}
	}
};
    3270:	0001883a 	nop
    3274:	e037883a 	mov	sp,fp
    3278:	dfc00117 	ldw	ra,4(sp)
    327c:	df000017 	ldw	fp,0(sp)
    3280:	dec00204 	addi	sp,sp,8
    3284:	f800283a 	ret

00003288 <_ZN6PacMan7_updateEi>:

void PacMan::_update(int elapsedTime){
    3288:	defffd04 	addi	sp,sp,-12
    328c:	df000215 	stw	fp,8(sp)
    3290:	df000204 	addi	fp,sp,8
    3294:	e13ffe15 	stw	r4,-8(fp)
    3298:	e17fff15 	stw	r5,-4(fp)
	this->last_frame = this->curr_frame;
    329c:	e0bffe17 	ldw	r2,-8(fp)
    32a0:	10c00c17 	ldw	r3,48(r2)
    32a4:	e0bffe17 	ldw	r2,-8(fp)
    32a8:	10c00d15 	stw	r3,52(r2)

	if(this->curr_dir != DIR_NO_DIR){
    32ac:	e0bffe17 	ldw	r2,-8(fp)
    32b0:	10800917 	ldw	r2,36(r2)
    32b4:	10800120 	cmpeqi	r2,r2,4
    32b8:	1000261e 	bne	r2,zero,3354 <_ZN6PacMan7_updateEi+0xcc>
		if(this->frame_dir){
    32bc:	e0bffe17 	ldw	r2,-8(fp)
    32c0:	10800e17 	ldw	r2,56(r2)
    32c4:	10001226 	beq	r2,zero,3310 <_ZN6PacMan7_updateEi+0x88>
			if(this->curr_frame < 2){
    32c8:	e0bffe17 	ldw	r2,-8(fp)
    32cc:	10800c17 	ldw	r2,48(r2)
    32d0:	10800088 	cmpgei	r2,r2,2
    32d4:	1000061e 	bne	r2,zero,32f0 <_ZN6PacMan7_updateEi+0x68>
				this->curr_frame++;
    32d8:	e0bffe17 	ldw	r2,-8(fp)
    32dc:	10800c17 	ldw	r2,48(r2)
    32e0:	10c00044 	addi	r3,r2,1
    32e4:	e0bffe17 	ldw	r2,-8(fp)
    32e8:	10c00c15 	stw	r3,48(r2)
    32ec:	00001906 	br	3354 <_ZN6PacMan7_updateEi+0xcc>
			}else{
				this->curr_frame--;
    32f0:	e0bffe17 	ldw	r2,-8(fp)
    32f4:	10800c17 	ldw	r2,48(r2)
    32f8:	10ffffc4 	addi	r3,r2,-1
    32fc:	e0bffe17 	ldw	r2,-8(fp)
    3300:	10c00c15 	stw	r3,48(r2)
				this->frame_dir = 0;
    3304:	e0bffe17 	ldw	r2,-8(fp)
    3308:	10000e15 	stw	zero,56(r2)
    330c:	00001106 	br	3354 <_ZN6PacMan7_updateEi+0xcc>
			}
		}else{
			if(this->curr_frame > 0){
    3310:	e0bffe17 	ldw	r2,-8(fp)
    3314:	10800c17 	ldw	r2,48(r2)
    3318:	0080060e 	bge	zero,r2,3334 <_ZN6PacMan7_updateEi+0xac>
				this->curr_frame--;
    331c:	e0bffe17 	ldw	r2,-8(fp)
    3320:	10800c17 	ldw	r2,48(r2)
    3324:	10ffffc4 	addi	r3,r2,-1
    3328:	e0bffe17 	ldw	r2,-8(fp)
    332c:	10c00c15 	stw	r3,48(r2)
    3330:	00000806 	br	3354 <_ZN6PacMan7_updateEi+0xcc>
			}else{
				this->curr_frame++;
    3334:	e0bffe17 	ldw	r2,-8(fp)
    3338:	10800c17 	ldw	r2,48(r2)
    333c:	10c00044 	addi	r3,r2,1
    3340:	e0bffe17 	ldw	r2,-8(fp)
    3344:	10c00c15 	stw	r3,48(r2)
				this->frame_dir = 1;
    3348:	e0bffe17 	ldw	r2,-8(fp)
    334c:	00c00044 	movi	r3,1
    3350:	10c00e15 	stw	r3,56(r2)
			}
		}
	}
	this->redraw = 1;
    3354:	e0bffe17 	ldw	r2,-8(fp)
    3358:	00c00044 	movi	r3,1
    335c:	10c00805 	stb	r3,32(r2)
};
    3360:	0001883a 	nop
    3364:	e037883a 	mov	sp,fp
    3368:	df000017 	ldw	fp,0(sp)
    336c:	dec00104 	addi	sp,sp,4
    3370:	f800283a 	ret

00003374 <_ZN3VGAC1EPsiii>:
 *      Author: natha
 */

#include "VGA.h"

VGA::VGA(short* pixel_buffer, int width, int height, int scale) : VideoInterface(width, height, scale) {
    3374:	defffa04 	addi	sp,sp,-24
    3378:	dfc00515 	stw	ra,20(sp)
    337c:	df000415 	stw	fp,16(sp)
    3380:	df000404 	addi	fp,sp,16
    3384:	e13ffc15 	stw	r4,-16(fp)
    3388:	e17ffd15 	stw	r5,-12(fp)
    338c:	e1bffe15 	stw	r6,-8(fp)
    3390:	e1ffff15 	stw	r7,-4(fp)
    3394:	e0bffc17 	ldw	r2,-16(fp)
    3398:	e1c00217 	ldw	r7,8(fp)
    339c:	e1bfff17 	ldw	r6,-4(fp)
    33a0:	e17ffe17 	ldw	r5,-8(fp)
    33a4:	1009883a 	mov	r4,r2
    33a8:	00034500 	call	3450 <_ZN14VideoInterfaceC1Eiii>
    33ac:	008000b4 	movhi	r2,2
    33b0:	10903504 	addi	r2,r2,16596
    33b4:	e0fffc17 	ldw	r3,-16(fp)
    33b8:	18800015 	stw	r2,0(r3)
	this->pbuffer = pixel_buffer;
    33bc:	e0bffc17 	ldw	r2,-16(fp)
    33c0:	e0fffd17 	ldw	r3,-12(fp)
    33c4:	10c00815 	stw	r3,32(r2)
};
    33c8:	0001883a 	nop
    33cc:	e037883a 	mov	sp,fp
    33d0:	dfc00117 	ldw	ra,4(sp)
    33d4:	df000017 	ldw	fp,0(sp)
    33d8:	dec00204 	addi	sp,sp,8
    33dc:	f800283a 	ret

000033e0 <_ZN3VGA18_internalDrawPixelEiit>:

void VGA::_internalDrawPixel(int x, int y, uint16_t color){
    33e0:	defff904 	addi	sp,sp,-28
    33e4:	df000615 	stw	fp,24(sp)
    33e8:	df000604 	addi	fp,sp,24
    33ec:	e13ffc15 	stw	r4,-16(fp)
    33f0:	e17ffd15 	stw	r5,-12(fp)
    33f4:	e1bffe15 	stw	r6,-8(fp)
    33f8:	3805883a 	mov	r2,r7
    33fc:	e0bfff0d 	sth	r2,-4(fp)
	volatile short* pbuff = this->pbuffer;
    3400:	e0bffc17 	ldw	r2,-16(fp)
    3404:	10800817 	ldw	r2,32(r2)
    3408:	e0bffa15 	stw	r2,-24(fp)

	int offset = (y << 9) + x;
    340c:	e0bffe17 	ldw	r2,-8(fp)
    3410:	1006927a 	slli	r3,r2,9
    3414:	e0bffd17 	ldw	r2,-12(fp)
    3418:	1885883a 	add	r2,r3,r2
    341c:	e0bffb15 	stw	r2,-20(fp)
	*(pbuff + offset) = (short)color;
    3420:	e0bffb17 	ldw	r2,-20(fp)
    3424:	1085883a 	add	r2,r2,r2
    3428:	1007883a 	mov	r3,r2
    342c:	e0bffa17 	ldw	r2,-24(fp)
    3430:	10c5883a 	add	r2,r2,r3
    3434:	e0ffff0b 	ldhu	r3,-4(fp)
    3438:	10c0000d 	sth	r3,0(r2)
};
    343c:	0001883a 	nop
    3440:	e037883a 	mov	sp,fp
    3444:	df000017 	ldw	fp,0(sp)
    3448:	dec00104 	addi	sp,sp,4
    344c:	f800283a 	ret

00003450 <_ZN14VideoInterfaceC1Eiii>:
 *      Author: natha
 */

#include "VideoInterface.h"

VideoInterface::VideoInterface(int width, int height, int scale){
    3450:	defffb04 	addi	sp,sp,-20
    3454:	df000415 	stw	fp,16(sp)
    3458:	df000404 	addi	fp,sp,16
    345c:	e13ffc15 	stw	r4,-16(fp)
    3460:	e17ffd15 	stw	r5,-12(fp)
    3464:	e1bffe15 	stw	r6,-8(fp)
    3468:	e1ffff15 	stw	r7,-4(fp)
    346c:	008000b4 	movhi	r2,2
    3470:	10904004 	addi	r2,r2,16640
    3474:	e0fffc17 	ldw	r3,-16(fp)
    3478:	18800015 	stw	r2,0(r3)
	this->width = width;
    347c:	e0bffc17 	ldw	r2,-16(fp)
    3480:	e0fffd17 	ldw	r3,-12(fp)
    3484:	10c00315 	stw	r3,12(r2)
	this->height = height;
    3488:	e0bffc17 	ldw	r2,-16(fp)
    348c:	e0fffe17 	ldw	r3,-8(fp)
    3490:	10c00415 	stw	r3,16(r2)
	this->scale = scale;
    3494:	e0bffc17 	ldw	r2,-16(fp)
    3498:	e0ffff17 	ldw	r3,-4(fp)
    349c:	10c00515 	stw	r3,20(r2)
	this->viLA = BRESENHAM;
    34a0:	e0bffc17 	ldw	r2,-16(fp)
    34a4:	00c00044 	movi	r3,1
    34a8:	10c00115 	stw	r3,4(r2)
	this->x_offset = 0;
    34ac:	e0bffc17 	ldw	r2,-16(fp)
    34b0:	10000615 	stw	zero,24(r2)
	this->y_offset = 0;
    34b4:	e0bffc17 	ldw	r2,-16(fp)
    34b8:	10000715 	stw	zero,28(r2)
};
    34bc:	0001883a 	nop
    34c0:	e037883a 	mov	sp,fp
    34c4:	df000017 	ldw	fp,0(sp)
    34c8:	dec00104 	addi	sp,sp,4
    34cc:	f800283a 	ret

000034d0 <_ZN14VideoInterface9setOffsetEii>:

void VideoInterface::setOffset(int x, int y){
    34d0:	defffc04 	addi	sp,sp,-16
    34d4:	df000315 	stw	fp,12(sp)
    34d8:	df000304 	addi	fp,sp,12
    34dc:	e13ffd15 	stw	r4,-12(fp)
    34e0:	e17ffe15 	stw	r5,-8(fp)
    34e4:	e1bfff15 	stw	r6,-4(fp)
	this->x_offset = x;
    34e8:	e0bffd17 	ldw	r2,-12(fp)
    34ec:	e0fffe17 	ldw	r3,-8(fp)
    34f0:	10c00615 	stw	r3,24(r2)
	this->y_offset = y;
    34f4:	e0bffd17 	ldw	r2,-12(fp)
    34f8:	e0ffff17 	ldw	r3,-4(fp)
    34fc:	10c00715 	stw	r3,28(r2)
};
    3500:	0001883a 	nop
    3504:	e037883a 	mov	sp,fp
    3508:	df000017 	ldw	fp,0(sp)
    350c:	dec00104 	addi	sp,sp,4
    3510:	f800283a 	ret

00003514 <_ZN14VideoInterface11resetOffsetEv>:

void VideoInterface::resetOffset(){
    3514:	defffd04 	addi	sp,sp,-12
    3518:	dfc00215 	stw	ra,8(sp)
    351c:	df000115 	stw	fp,4(sp)
    3520:	df000104 	addi	fp,sp,4
    3524:	e13fff15 	stw	r4,-4(fp)
	setOffset(0, 0);
    3528:	000d883a 	mov	r6,zero
    352c:	000b883a 	mov	r5,zero
    3530:	e13fff17 	ldw	r4,-4(fp)
    3534:	00034d00 	call	34d0 <_ZN14VideoInterface9setOffsetEii>
};
    3538:	0001883a 	nop
    353c:	e037883a 	mov	sp,fp
    3540:	dfc00117 	ldw	ra,4(sp)
    3544:	df000017 	ldw	fp,0(sp)
    3548:	dec00204 	addi	sp,sp,8
    354c:	f800283a 	ret

00003550 <_ZN14VideoInterface9drawPixelEii>:

void VideoInterface::drawPixel(int x, int y){
    3550:	defffb04 	addi	sp,sp,-20
    3554:	dfc00415 	stw	ra,16(sp)
    3558:	df000315 	stw	fp,12(sp)
    355c:	df000304 	addi	fp,sp,12
    3560:	e13ffd15 	stw	r4,-12(fp)
    3564:	e17ffe15 	stw	r5,-8(fp)
    3568:	e1bfff15 	stw	r6,-4(fp)
	this->drawPixel(x, y, this->color);
    356c:	e0bffd17 	ldw	r2,-12(fp)
    3570:	1080020b 	ldhu	r2,8(r2)
    3574:	10bfffcc 	andi	r2,r2,65535
    3578:	100f883a 	mov	r7,r2
    357c:	e1bfff17 	ldw	r6,-4(fp)
    3580:	e17ffe17 	ldw	r5,-8(fp)
    3584:	e13ffd17 	ldw	r4,-12(fp)
    3588:	00035a40 	call	35a4 <_ZN14VideoInterface9drawPixelEiit>
};
    358c:	0001883a 	nop
    3590:	e037883a 	mov	sp,fp
    3594:	dfc00117 	ldw	ra,4(sp)
    3598:	df000017 	ldw	fp,0(sp)
    359c:	dec00204 	addi	sp,sp,8
    35a0:	f800283a 	ret

000035a4 <_ZN14VideoInterface9drawPixelEiit>:

void VideoInterface::drawPixel(int x, int y, uint16_t color){
    35a4:	defffa04 	addi	sp,sp,-24
    35a8:	dfc00515 	stw	ra,20(sp)
    35ac:	df000415 	stw	fp,16(sp)
    35b0:	df000404 	addi	fp,sp,16
    35b4:	e13ffc15 	stw	r4,-16(fp)
    35b8:	e17ffd15 	stw	r5,-12(fp)
    35bc:	e1bffe15 	stw	r6,-8(fp)
    35c0:	3805883a 	mov	r2,r7
    35c4:	e0bfff0d 	sth	r2,-4(fp)
	if(x < 0 || x > this->width - 1) return;
    35c8:	e0bffd17 	ldw	r2,-12(fp)
    35cc:	10001d16 	blt	r2,zero,3644 <_ZN14VideoInterface9drawPixelEiit+0xa0>
    35d0:	e0bffc17 	ldw	r2,-16(fp)
    35d4:	10800317 	ldw	r2,12(r2)
    35d8:	10ffffc4 	addi	r3,r2,-1
    35dc:	e0bffd17 	ldw	r2,-12(fp)
    35e0:	18801816 	blt	r3,r2,3644 <_ZN14VideoInterface9drawPixelEiit+0xa0>
	if(y < 0 || y > this->height - 1) return;
    35e4:	e0bffe17 	ldw	r2,-8(fp)
    35e8:	10001816 	blt	r2,zero,364c <_ZN14VideoInterface9drawPixelEiit+0xa8>
    35ec:	e0bffc17 	ldw	r2,-16(fp)
    35f0:	10800417 	ldw	r2,16(r2)
    35f4:	10ffffc4 	addi	r3,r2,-1
    35f8:	e0bffe17 	ldw	r2,-8(fp)
    35fc:	18801316 	blt	r3,r2,364c <_ZN14VideoInterface9drawPixelEiit+0xa8>
	this->_internalDrawPixel(this->x_offset + x, this->y_offset + y, color);
    3600:	e0bffc17 	ldw	r2,-16(fp)
    3604:	10800017 	ldw	r2,0(r2)
    3608:	10800017 	ldw	r2,0(r2)
    360c:	e0fffc17 	ldw	r3,-16(fp)
    3610:	19000617 	ldw	r4,24(r3)
    3614:	e0fffd17 	ldw	r3,-12(fp)
    3618:	20cb883a 	add	r5,r4,r3
    361c:	e0fffc17 	ldw	r3,-16(fp)
    3620:	19000717 	ldw	r4,28(r3)
    3624:	e0fffe17 	ldw	r3,-8(fp)
    3628:	20c7883a 	add	r3,r4,r3
    362c:	e13fff0b 	ldhu	r4,-4(fp)
    3630:	200f883a 	mov	r7,r4
    3634:	180d883a 	mov	r6,r3
    3638:	e13ffc17 	ldw	r4,-16(fp)
    363c:	103ee83a 	callr	r2
    3640:	00000306 	br	3650 <_ZN14VideoInterface9drawPixelEiit+0xac>
void VideoInterface::drawPixel(int x, int y){
	this->drawPixel(x, y, this->color);
};

void VideoInterface::drawPixel(int x, int y, uint16_t color){
	if(x < 0 || x > this->width - 1) return;
    3644:	0001883a 	nop
    3648:	00000106 	br	3650 <_ZN14VideoInterface9drawPixelEiit+0xac>
	if(y < 0 || y > this->height - 1) return;
    364c:	0001883a 	nop
	this->_internalDrawPixel(this->x_offset + x, this->y_offset + y, color);
};
    3650:	e037883a 	mov	sp,fp
    3654:	dfc00117 	ldw	ra,4(sp)
    3658:	df000017 	ldw	fp,0(sp)
    365c:	dec00204 	addi	sp,sp,8
    3660:	f800283a 	ret

00003664 <_ZN14VideoInterface8setColorEt>:

void VideoInterface::setColor(uint16_t color){
    3664:	defffd04 	addi	sp,sp,-12
    3668:	df000215 	stw	fp,8(sp)
    366c:	df000204 	addi	fp,sp,8
    3670:	e13ffe15 	stw	r4,-8(fp)
    3674:	2805883a 	mov	r2,r5
    3678:	e0bfff0d 	sth	r2,-4(fp)
	this->color = color;
    367c:	e0bffe17 	ldw	r2,-8(fp)
    3680:	e0ffff0b 	ldhu	r3,-4(fp)
    3684:	10c0020d 	sth	r3,8(r2)
};
    3688:	0001883a 	nop
    368c:	e037883a 	mov	sp,fp
    3690:	df000017 	ldw	fp,0(sp)
    3694:	dec00104 	addi	sp,sp,4
    3698:	f800283a 	ret

0000369c <_ZN14VideoInterface5clearEt>:

void VideoInterface::clear(uint16_t color){
    369c:	defff904 	addi	sp,sp,-28
    36a0:	dfc00615 	stw	ra,24(sp)
    36a4:	df000515 	stw	fp,20(sp)
    36a8:	df000504 	addi	fp,sp,20
    36ac:	e13ffe15 	stw	r4,-8(fp)
    36b0:	2805883a 	mov	r2,r5
    36b4:	e0bfff0d 	sth	r2,-4(fp)
	uint16_t tcol = this->color;
    36b8:	e0bffe17 	ldw	r2,-8(fp)
    36bc:	1080020b 	ldhu	r2,8(r2)
    36c0:	e0bffd0d 	sth	r2,-12(fp)
	this->setColor(color);
    36c4:	e0bfff0b 	ldhu	r2,-4(fp)
    36c8:	100b883a 	mov	r5,r2
    36cc:	e13ffe17 	ldw	r4,-8(fp)
    36d0:	00036640 	call	3664 <_ZN14VideoInterface8setColorEt>
	for(int y = 0; y < height; y++){
    36d4:	e03ffb15 	stw	zero,-20(fp)
    36d8:	e0bffe17 	ldw	r2,-8(fp)
    36dc:	10800417 	ldw	r2,16(r2)
    36e0:	e0fffb17 	ldw	r3,-20(fp)
    36e4:	1880110e 	bge	r3,r2,372c <_ZN14VideoInterface5clearEt+0x90>
		for(int x = 0; x < width; x++){
    36e8:	e03ffc15 	stw	zero,-16(fp)
    36ec:	e0bffe17 	ldw	r2,-8(fp)
    36f0:	10800317 	ldw	r2,12(r2)
    36f4:	e0fffc17 	ldw	r3,-16(fp)
    36f8:	1880080e 	bge	r3,r2,371c <_ZN14VideoInterface5clearEt+0x80>
			this->drawPixel(x, y);
    36fc:	e1bffb17 	ldw	r6,-20(fp)
    3700:	e17ffc17 	ldw	r5,-16(fp)
    3704:	e13ffe17 	ldw	r4,-8(fp)
    3708:	00035500 	call	3550 <_ZN14VideoInterface9drawPixelEii>

void VideoInterface::clear(uint16_t color){
	uint16_t tcol = this->color;
	this->setColor(color);
	for(int y = 0; y < height; y++){
		for(int x = 0; x < width; x++){
    370c:	e0bffc17 	ldw	r2,-16(fp)
    3710:	10800044 	addi	r2,r2,1
    3714:	e0bffc15 	stw	r2,-16(fp)
    3718:	003ff406 	br	36ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70036ec>
};

void VideoInterface::clear(uint16_t color){
	uint16_t tcol = this->color;
	this->setColor(color);
	for(int y = 0; y < height; y++){
    371c:	e0bffb17 	ldw	r2,-20(fp)
    3720:	10800044 	addi	r2,r2,1
    3724:	e0bffb15 	stw	r2,-20(fp)
    3728:	003feb06 	br	36d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70036d8>
		for(int x = 0; x < width; x++){
			this->drawPixel(x, y);
		}
	}
	this->setColor(tcol);
    372c:	e0bffd0b 	ldhu	r2,-12(fp)
    3730:	100b883a 	mov	r5,r2
    3734:	e13ffe17 	ldw	r4,-8(fp)
    3738:	00036640 	call	3664 <_ZN14VideoInterface8setColorEt>
};
    373c:	0001883a 	nop
    3740:	e037883a 	mov	sp,fp
    3744:	dfc00117 	ldw	ra,4(sp)
    3748:	df000017 	ldw	fp,0(sp)
    374c:	dec00204 	addi	sp,sp,8
    3750:	f800283a 	ret

00003754 <_ZN14VideoInterface10setLineAlgE9viLineAlg>:

void VideoInterface::setLineAlg(enum viLineAlg viLA){
    3754:	defffd04 	addi	sp,sp,-12
    3758:	df000215 	stw	fp,8(sp)
    375c:	df000204 	addi	fp,sp,8
    3760:	e13ffe15 	stw	r4,-8(fp)
    3764:	e17fff15 	stw	r5,-4(fp)
	this->viLA = viLA;
    3768:	e0bffe17 	ldw	r2,-8(fp)
    376c:	e0ffff17 	ldw	r3,-4(fp)
    3770:	10c00115 	stw	r3,4(r2)
};
    3774:	0001883a 	nop
    3778:	e037883a 	mov	sp,fp
    377c:	df000017 	ldw	fp,0(sp)
    3780:	dec00104 	addi	sp,sp,4
    3784:	f800283a 	ret

00003788 <_ZN14VideoInterface8drawLineEiiii>:

void VideoInterface::drawLine(int x0, int y0, int x1, int y1){
    3788:	defff804 	addi	sp,sp,-32
    378c:	dfc00715 	stw	ra,28(sp)
    3790:	df000615 	stw	fp,24(sp)
    3794:	df000604 	addi	fp,sp,24
    3798:	e13ffc15 	stw	r4,-16(fp)
    379c:	e17ffd15 	stw	r5,-12(fp)
    37a0:	e1bffe15 	stw	r6,-8(fp)
    37a4:	e1ffff15 	stw	r7,-4(fp)
	this->drawLine(x0, y0, x1, y1, this->color);
    37a8:	e0bffc17 	ldw	r2,-16(fp)
    37ac:	1080020b 	ldhu	r2,8(r2)
    37b0:	10bfffcc 	andi	r2,r2,65535
    37b4:	d8800115 	stw	r2,4(sp)
    37b8:	e0800217 	ldw	r2,8(fp)
    37bc:	d8800015 	stw	r2,0(sp)
    37c0:	e1ffff17 	ldw	r7,-4(fp)
    37c4:	e1bffe17 	ldw	r6,-8(fp)
    37c8:	e17ffd17 	ldw	r5,-12(fp)
    37cc:	e13ffc17 	ldw	r4,-16(fp)
    37d0:	00037ec0 	call	37ec <_ZN14VideoInterface8drawLineEiiiit>
};
    37d4:	0001883a 	nop
    37d8:	e037883a 	mov	sp,fp
    37dc:	dfc00117 	ldw	ra,4(sp)
    37e0:	df000017 	ldw	fp,0(sp)
    37e4:	dec00204 	addi	sp,sp,8
    37e8:	f800283a 	ret

000037ec <_ZN14VideoInterface8drawLineEiiiit>:

void VideoInterface::drawLine(int x0, int y0, int x1, int y1, uint16_t color){
    37ec:	defff704 	addi	sp,sp,-36
    37f0:	dfc00815 	stw	ra,32(sp)
    37f4:	df000715 	stw	fp,28(sp)
    37f8:	df000704 	addi	fp,sp,28
    37fc:	e13ffb15 	stw	r4,-20(fp)
    3800:	e17ffc15 	stw	r5,-16(fp)
    3804:	e1bffd15 	stw	r6,-12(fp)
    3808:	e1fffe15 	stw	r7,-8(fp)
    380c:	e0800317 	ldw	r2,12(fp)
    3810:	e0bfff0d 	sth	r2,-4(fp)
	if(this->viLA == DDA) this->_drawLineDDA(x0, y0, x1, y1, color);
    3814:	e0bffb17 	ldw	r2,-20(fp)
    3818:	10800117 	ldw	r2,4(r2)
    381c:	1000091e 	bne	r2,zero,3844 <_ZN14VideoInterface8drawLineEiiiit+0x58>
    3820:	e0bfff0b 	ldhu	r2,-4(fp)
    3824:	d8800115 	stw	r2,4(sp)
    3828:	e0800217 	ldw	r2,8(fp)
    382c:	d8800015 	stw	r2,0(sp)
    3830:	e1fffe17 	ldw	r7,-8(fp)
    3834:	e1bffd17 	ldw	r6,-12(fp)
    3838:	e17ffc17 	ldw	r5,-16(fp)
    383c:	e13ffb17 	ldw	r4,-20(fp)
    3840:	00039a40 	call	39a4 <_ZN14VideoInterface12_drawLineDDAEiiiit>
	if(this->viLA == BRESENHAM) this->_drawLineBRESENHAM(x0, y0, x1, y1, color);
    3844:	e0bffb17 	ldw	r2,-20(fp)
    3848:	10800117 	ldw	r2,4(r2)
    384c:	10800058 	cmpnei	r2,r2,1
    3850:	1000091e 	bne	r2,zero,3878 <_ZN14VideoInterface8drawLineEiiiit+0x8c>
    3854:	e0bfff0b 	ldhu	r2,-4(fp)
    3858:	d8800115 	stw	r2,4(sp)
    385c:	e0800217 	ldw	r2,8(fp)
    3860:	d8800015 	stw	r2,0(sp)
    3864:	e1fffe17 	ldw	r7,-8(fp)
    3868:	e1bffd17 	ldw	r6,-12(fp)
    386c:	e17ffc17 	ldw	r5,-16(fp)
    3870:	e13ffb17 	ldw	r4,-20(fp)
    3874:	0003b640 	call	3b64 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit>
};
    3878:	0001883a 	nop
    387c:	e037883a 	mov	sp,fp
    3880:	dfc00117 	ldw	ra,4(sp)
    3884:	df000017 	ldw	fp,0(sp)
    3888:	dec00204 	addi	sp,sp,8
    388c:	f800283a 	ret

00003890 <_ZN14VideoInterface8drawRectEiiii>:

void VideoInterface::drawRect(int x, int y, int width, int height){
    3890:	defff804 	addi	sp,sp,-32
    3894:	dfc00715 	stw	ra,28(sp)
    3898:	df000615 	stw	fp,24(sp)
    389c:	df000604 	addi	fp,sp,24
    38a0:	e13ffc15 	stw	r4,-16(fp)
    38a4:	e17ffd15 	stw	r5,-12(fp)
    38a8:	e1bffe15 	stw	r6,-8(fp)
    38ac:	e1ffff15 	stw	r7,-4(fp)
	this->drawRect(x, y, width, height, this->color);
    38b0:	e0bffc17 	ldw	r2,-16(fp)
    38b4:	1080020b 	ldhu	r2,8(r2)
    38b8:	10bfffcc 	andi	r2,r2,65535
    38bc:	d8800115 	stw	r2,4(sp)
    38c0:	e0800217 	ldw	r2,8(fp)
    38c4:	d8800015 	stw	r2,0(sp)
    38c8:	e1ffff17 	ldw	r7,-4(fp)
    38cc:	e1bffe17 	ldw	r6,-8(fp)
    38d0:	e17ffd17 	ldw	r5,-12(fp)
    38d4:	e13ffc17 	ldw	r4,-16(fp)
    38d8:	00038f40 	call	38f4 <_ZN14VideoInterface8drawRectEiiiit>
};
    38dc:	0001883a 	nop
    38e0:	e037883a 	mov	sp,fp
    38e4:	dfc00117 	ldw	ra,4(sp)
    38e8:	df000017 	ldw	fp,0(sp)
    38ec:	dec00204 	addi	sp,sp,8
    38f0:	f800283a 	ret

000038f4 <_ZN14VideoInterface8drawRectEiiiit>:

void VideoInterface::drawRect(int x, int y, int width, int height, uint16_t color){
    38f4:	defff704 	addi	sp,sp,-36
    38f8:	dfc00815 	stw	ra,32(sp)
    38fc:	df000715 	stw	fp,28(sp)
    3900:	df000704 	addi	fp,sp,28
    3904:	e13ffb15 	stw	r4,-20(fp)
    3908:	e17ffc15 	stw	r5,-16(fp)
    390c:	e1bffd15 	stw	r6,-12(fp)
    3910:	e1fffe15 	stw	r7,-8(fp)
    3914:	e0800317 	ldw	r2,12(fp)
    3918:	e0bfff0d 	sth	r2,-4(fp)
	for(int _y = 0; _y < height; _y++){
    391c:	e03ff915 	stw	zero,-28(fp)
    3920:	e0fff917 	ldw	r3,-28(fp)
    3924:	e0800217 	ldw	r2,8(fp)
    3928:	1880180e 	bge	r3,r2,398c <_ZN14VideoInterface8drawRectEiiiit+0x98>
		for(int _x = 0; _x < width; _x++){
    392c:	e03ffa15 	stw	zero,-24(fp)
    3930:	e0fffa17 	ldw	r3,-24(fp)
    3934:	e0bffe17 	ldw	r2,-8(fp)
    3938:	1880100e 	bge	r3,r2,397c <_ZN14VideoInterface8drawRectEiiiit+0x88>
			this->drawPixel(x + _x, y + _y, color);
    393c:	e0fffc17 	ldw	r3,-16(fp)
    3940:	e0bffa17 	ldw	r2,-24(fp)
    3944:	1889883a 	add	r4,r3,r2
    3948:	e0fffd17 	ldw	r3,-12(fp)
    394c:	e0bff917 	ldw	r2,-28(fp)
    3950:	1885883a 	add	r2,r3,r2
    3954:	e0ffff0b 	ldhu	r3,-4(fp)
    3958:	180f883a 	mov	r7,r3
    395c:	100d883a 	mov	r6,r2
    3960:	200b883a 	mov	r5,r4
    3964:	e13ffb17 	ldw	r4,-20(fp)
    3968:	00035a40 	call	35a4 <_ZN14VideoInterface9drawPixelEiit>
	this->drawRect(x, y, width, height, this->color);
};

void VideoInterface::drawRect(int x, int y, int width, int height, uint16_t color){
	for(int _y = 0; _y < height; _y++){
		for(int _x = 0; _x < width; _x++){
    396c:	e0bffa17 	ldw	r2,-24(fp)
    3970:	10800044 	addi	r2,r2,1
    3974:	e0bffa15 	stw	r2,-24(fp)
    3978:	003fed06 	br	3930 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003930>
void VideoInterface::drawRect(int x, int y, int width, int height){
	this->drawRect(x, y, width, height, this->color);
};

void VideoInterface::drawRect(int x, int y, int width, int height, uint16_t color){
	for(int _y = 0; _y < height; _y++){
    397c:	e0bff917 	ldw	r2,-28(fp)
    3980:	10800044 	addi	r2,r2,1
    3984:	e0bff915 	stw	r2,-28(fp)
    3988:	003fe506 	br	3920 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003920>
		for(int _x = 0; _x < width; _x++){
			this->drawPixel(x + _x, y + _y, color);
		}
	}
};
    398c:	0001883a 	nop
    3990:	e037883a 	mov	sp,fp
    3994:	dfc00117 	ldw	ra,4(sp)
    3998:	df000017 	ldw	fp,0(sp)
    399c:	dec00204 	addi	sp,sp,8
    39a0:	f800283a 	ret

000039a4 <_ZN14VideoInterface12_drawLineDDAEiiiit>:

void VideoInterface::_drawLineDDA(int x0, int y0, int x1, int y1, uint16_t color){
    39a4:	defff204 	addi	sp,sp,-56
    39a8:	dfc00d15 	stw	ra,52(sp)
    39ac:	df000c15 	stw	fp,48(sp)
    39b0:	dc000b15 	stw	r16,44(sp)
    39b4:	df000c04 	addi	fp,sp,48
    39b8:	e13ffa15 	stw	r4,-24(fp)
    39bc:	e17ffb15 	stw	r5,-20(fp)
    39c0:	e1bffc15 	stw	r6,-16(fp)
    39c4:	e1fffd15 	stw	r7,-12(fp)
    39c8:	e0800317 	ldw	r2,12(fp)
    39cc:	e0bffe0d 	sth	r2,-8(fp)
	float x, y, dx, dy, step;

	dx = (float)abs(x1 - x0);
    39d0:	e0fffd17 	ldw	r3,-12(fp)
    39d4:	e0bffb17 	ldw	r2,-20(fp)
    39d8:	1885c83a 	sub	r2,r3,r2
    39dc:	1000010e 	bge	r2,zero,39e4 <_ZN14VideoInterface12_drawLineDDAEiiiit+0x40>
    39e0:	0085c83a 	sub	r2,zero,r2
    39e4:	1009883a 	mov	r4,r2
    39e8:	00066dc0 	call	66dc <__floatsisf>
    39ec:	1007883a 	mov	r3,r2
    39f0:	e0fff715 	stw	r3,-36(fp)
	dy = (float)abs(y1 - y0);
    39f4:	e0c00217 	ldw	r3,8(fp)
    39f8:	e0bffc17 	ldw	r2,-16(fp)
    39fc:	1885c83a 	sub	r2,r3,r2
    3a00:	1000010e 	bge	r2,zero,3a08 <_ZN14VideoInterface12_drawLineDDAEiiiit+0x64>
    3a04:	0085c83a 	sub	r2,zero,r2
    3a08:	1009883a 	mov	r4,r2
    3a0c:	00066dc0 	call	66dc <__floatsisf>
    3a10:	1007883a 	mov	r3,r2
    3a14:	e0fff815 	stw	r3,-32(fp)

	step = (dx >= dy) ? dx : dy;
    3a18:	e17ff817 	ldw	r5,-32(fp)
    3a1c:	e13ff717 	ldw	r4,-36(fp)
    3a20:	00064e80 	call	64e8 <__gesf2>
    3a24:	10000216 	blt	r2,zero,3a30 <_ZN14VideoInterface12_drawLineDDAEiiiit+0x8c>
    3a28:	e0bff717 	ldw	r2,-36(fp)
    3a2c:	00000106 	br	3a34 <_ZN14VideoInterface12_drawLineDDAEiiiit+0x90>
    3a30:	e0bff817 	ldw	r2,-32(fp)
    3a34:	e0bff915 	stw	r2,-28(fp)

	dx = dx / step;
    3a38:	e0fff717 	ldw	r3,-36(fp)
    3a3c:	e0bff917 	ldw	r2,-28(fp)
    3a40:	1885fff2 	custom	255,r2,r3,r2
    3a44:	e0bff715 	stw	r2,-36(fp)
	dy = dy / step;
    3a48:	e0fff817 	ldw	r3,-32(fp)
    3a4c:	e0bff917 	ldw	r2,-28(fp)
    3a50:	1885fff2 	custom	255,r2,r3,r2
    3a54:	e0bff815 	stw	r2,-32(fp)

	x = x0;
    3a58:	e13ffb17 	ldw	r4,-20(fp)
    3a5c:	00066dc0 	call	66dc <__floatsisf>
    3a60:	1007883a 	mov	r3,r2
    3a64:	e0fff415 	stw	r3,-48(fp)
	y = y0;
    3a68:	e13ffc17 	ldw	r4,-16(fp)
    3a6c:	00066dc0 	call	66dc <__floatsisf>
    3a70:	1007883a 	mov	r3,r2
    3a74:	e0fff515 	stw	r3,-44(fp)

	for(int i = 0; i < step; i++){
    3a78:	e03ff615 	stw	zero,-40(fp)
    3a7c:	e13ff617 	ldw	r4,-40(fp)
    3a80:	00066dc0 	call	66dc <__floatsisf>
    3a84:	1007883a 	mov	r3,r2
    3a88:	e17ff917 	ldw	r5,-28(fp)
    3a8c:	1809883a 	mov	r4,r3
    3a90:	00065a40 	call	65a4 <__lesf2>
    3a94:	10000116 	blt	r2,zero,3a9c <_ZN14VideoInterface12_drawLineDDAEiiiit+0xf8>
		this->drawPixel(round(x), round(y), color);
		x += dx;
		y += dy;
	}
};
    3a98:	00002c06 	br	3b4c <_ZN14VideoInterface12_drawLineDDAEiiiit+0x1a8>

	x = x0;
	y = y0;

	for(int i = 0; i < step; i++){
		this->drawPixel(round(x), round(y), color);
    3a9c:	e13ff417 	ldw	r4,-48(fp)
    3aa0:	00072080 	call	7208 <__extendsfdf2>
    3aa4:	100b883a 	mov	r5,r2
    3aa8:	180d883a 	mov	r6,r3
    3aac:	2809883a 	mov	r4,r5
    3ab0:	300b883a 	mov	r5,r6
    3ab4:	0005e9c0 	call	5e9c <round>
    3ab8:	100b883a 	mov	r5,r2
    3abc:	180d883a 	mov	r6,r3
    3ac0:	2809883a 	mov	r4,r5
    3ac4:	300b883a 	mov	r5,r6
    3ac8:	00070ac0 	call	70ac <__fixdfsi>
    3acc:	1021883a 	mov	r16,r2
    3ad0:	e13ff517 	ldw	r4,-44(fp)
    3ad4:	00072080 	call	7208 <__extendsfdf2>
    3ad8:	100b883a 	mov	r5,r2
    3adc:	180d883a 	mov	r6,r3
    3ae0:	2809883a 	mov	r4,r5
    3ae4:	300b883a 	mov	r5,r6
    3ae8:	0005e9c0 	call	5e9c <round>
    3aec:	100b883a 	mov	r5,r2
    3af0:	180d883a 	mov	r6,r3
    3af4:	2809883a 	mov	r4,r5
    3af8:	300b883a 	mov	r5,r6
    3afc:	00070ac0 	call	70ac <__fixdfsi>
    3b00:	1007883a 	mov	r3,r2
    3b04:	e0bffe0b 	ldhu	r2,-8(fp)
    3b08:	100f883a 	mov	r7,r2
    3b0c:	180d883a 	mov	r6,r3
    3b10:	800b883a 	mov	r5,r16
    3b14:	e13ffa17 	ldw	r4,-24(fp)
    3b18:	00035a40 	call	35a4 <_ZN14VideoInterface9drawPixelEiit>
		x += dx;
    3b1c:	e0fff417 	ldw	r3,-48(fp)
    3b20:	e0bff717 	ldw	r2,-36(fp)
    3b24:	1885ff72 	custom	253,r2,r3,r2
    3b28:	e0bff415 	stw	r2,-48(fp)
		y += dy;
    3b2c:	e0fff517 	ldw	r3,-44(fp)
    3b30:	e0bff817 	ldw	r2,-32(fp)
    3b34:	1885ff72 	custom	253,r2,r3,r2
    3b38:	e0bff515 	stw	r2,-44(fp)
	dy = dy / step;

	x = x0;
	y = y0;

	for(int i = 0; i < step; i++){
    3b3c:	e0bff617 	ldw	r2,-40(fp)
    3b40:	10800044 	addi	r2,r2,1
    3b44:	e0bff615 	stw	r2,-40(fp)
    3b48:	003fcc06 	br	3a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003a7c>
		this->drawPixel(round(x), round(y), color);
		x += dx;
		y += dy;
	}
};
    3b4c:	e6ffff04 	addi	sp,fp,-4
    3b50:	dfc00217 	ldw	ra,8(sp)
    3b54:	df000117 	ldw	fp,4(sp)
    3b58:	dc000017 	ldw	r16,0(sp)
    3b5c:	dec00304 	addi	sp,sp,12
    3b60:	f800283a 	ret

00003b64 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit>:

void VideoInterface::_drawLineBRESENHAM(int x0, int y0, int x1, int y1, uint16_t color){
    3b64:	deffea04 	addi	sp,sp,-88
    3b68:	dfc01515 	stw	ra,84(sp)
    3b6c:	df001415 	stw	fp,80(sp)
    3b70:	dcc01315 	stw	r19,76(sp)
    3b74:	dc801215 	stw	r18,72(sp)
    3b78:	dc401115 	stw	r17,68(sp)
    3b7c:	dc001015 	stw	r16,64(sp)
    3b80:	df001404 	addi	fp,sp,80
    3b84:	e13ff715 	stw	r4,-36(fp)
    3b88:	e17ff815 	stw	r5,-32(fp)
    3b8c:	e1bff915 	stw	r6,-28(fp)
    3b90:	e1fffa15 	stw	r7,-24(fp)
    3b94:	e0800317 	ldw	r2,12(fp)
    3b98:	e0bffb0d 	sth	r2,-20(fp)
	int x, y, dx, dy, dx1, dy1, px, py, xe, ye, i;
	dx = x1 - x0;
    3b9c:	e0fffa17 	ldw	r3,-24(fp)
    3ba0:	e0bff817 	ldw	r2,-32(fp)
    3ba4:	1885c83a 	sub	r2,r3,r2
    3ba8:	e0bff315 	stw	r2,-52(fp)
	dy = y1 - y0;
    3bac:	e0c00217 	ldw	r3,8(fp)
    3bb0:	e0bff917 	ldw	r2,-28(fp)
    3bb4:	1885c83a 	sub	r2,r3,r2
    3bb8:	e0bff415 	stw	r2,-48(fp)
	dx1 = fabs(dx);
    3bbc:	e13ff317 	ldw	r4,-52(fp)
    3bc0:	000712c0 	call	712c <__floatsidf>
    3bc4:	1009883a 	mov	r4,r2
    3bc8:	180b883a 	mov	r5,r3
    3bcc:	2025883a 	mov	r18,r4
    3bd0:	00a00034 	movhi	r2,32768
    3bd4:	10bfffc4 	addi	r2,r2,-1
    3bd8:	28a6703a 	and	r19,r5,r2
    3bdc:	9009883a 	mov	r4,r18
    3be0:	980b883a 	mov	r5,r19
    3be4:	00070ac0 	call	70ac <__fixdfsi>
    3be8:	e0bff515 	stw	r2,-44(fp)
	dy1 = fabs(dy);
    3bec:	e13ff417 	ldw	r4,-48(fp)
    3bf0:	000712c0 	call	712c <__floatsidf>
    3bf4:	1009883a 	mov	r4,r2
    3bf8:	180b883a 	mov	r5,r3
    3bfc:	2021883a 	mov	r16,r4
    3c00:	00a00034 	movhi	r2,32768
    3c04:	10bfffc4 	addi	r2,r2,-1
    3c08:	28a2703a 	and	r17,r5,r2
    3c0c:	8009883a 	mov	r4,r16
    3c10:	880b883a 	mov	r5,r17
    3c14:	00070ac0 	call	70ac <__fixdfsi>
    3c18:	e0bff615 	stw	r2,-40(fp)
	px = 2*dy1 - dx1;
    3c1c:	e0bff617 	ldw	r2,-40(fp)
    3c20:	1085883a 	add	r2,r2,r2
    3c24:	1007883a 	mov	r3,r2
    3c28:	e0bff517 	ldw	r2,-44(fp)
    3c2c:	1885c83a 	sub	r2,r3,r2
    3c30:	e0bfee15 	stw	r2,-72(fp)
	py = 2*dx1 - dy1;
    3c34:	e0bff517 	ldw	r2,-44(fp)
    3c38:	1085883a 	add	r2,r2,r2
    3c3c:	1007883a 	mov	r3,r2
    3c40:	e0bff617 	ldw	r2,-40(fp)
    3c44:	1885c83a 	sub	r2,r3,r2
    3c48:	e0bfef15 	stw	r2,-68(fp)
	if(dy1 <= dx1 ){
    3c4c:	e0bff617 	ldw	r2,-40(fp)
    3c50:	e0fff517 	ldw	r3,-44(fp)
    3c54:	18804616 	blt	r3,r2,3d70 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x20c>
		if(dx >= 0){
    3c58:	e0bff317 	ldw	r2,-52(fp)
    3c5c:	10000716 	blt	r2,zero,3c7c <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x118>
			x = x0;
    3c60:	e0bff817 	ldw	r2,-32(fp)
    3c64:	e0bfec15 	stw	r2,-80(fp)
			y = y0;
    3c68:	e0bff917 	ldw	r2,-28(fp)
    3c6c:	e0bfed15 	stw	r2,-76(fp)
			xe = x1;
    3c70:	e0bffa17 	ldw	r2,-24(fp)
    3c74:	e0bff015 	stw	r2,-64(fp)
    3c78:	00000606 	br	3c94 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x130>
		}else{
			x = x1;
    3c7c:	e0bffa17 	ldw	r2,-24(fp)
    3c80:	e0bfec15 	stw	r2,-80(fp)
			y = y1;
    3c84:	e0800217 	ldw	r2,8(fp)
    3c88:	e0bfed15 	stw	r2,-76(fp)
			xe = x0;
    3c8c:	e0bff817 	ldw	r2,-32(fp)
    3c90:	e0bff015 	stw	r2,-64(fp)
		}
		this->drawPixel(x, y, color);
    3c94:	e0bffb0b 	ldhu	r2,-20(fp)
    3c98:	100f883a 	mov	r7,r2
    3c9c:	e1bfed17 	ldw	r6,-76(fp)
    3ca0:	e17fec17 	ldw	r5,-80(fp)
    3ca4:	e13ff717 	ldw	r4,-36(fp)
    3ca8:	00035a40 	call	35a4 <_ZN14VideoInterface9drawPixelEiit>
		for(i = 0; x < xe; i++){
    3cac:	e03ff215 	stw	zero,-56(fp)
    3cb0:	e0ffec17 	ldw	r3,-80(fp)
    3cb4:	e0bff017 	ldw	r2,-64(fp)
    3cb8:	1880730e 	bge	r3,r2,3e88 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x324>
			x += 1;
    3cbc:	e0bfec17 	ldw	r2,-80(fp)
    3cc0:	10800044 	addi	r2,r2,1
    3cc4:	e0bfec15 	stw	r2,-80(fp)
			if(px < 0){
    3cc8:	e0bfee17 	ldw	r2,-72(fp)
    3ccc:	1000070e 	bge	r2,zero,3cec <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x188>
				px += 2*dy1;
    3cd0:	e0bff617 	ldw	r2,-40(fp)
    3cd4:	1085883a 	add	r2,r2,r2
    3cd8:	1007883a 	mov	r3,r2
    3cdc:	e0bfee17 	ldw	r2,-72(fp)
    3ce0:	10c5883a 	add	r2,r2,r3
    3ce4:	e0bfee15 	stw	r2,-72(fp)
    3ce8:	00001706 	br	3d48 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x1e4>
			}else{
				if((dx < 0 && dy < 0)||(dx > 0 && dy > 0)){
    3cec:	e0bff317 	ldw	r2,-52(fp)
    3cf0:	1000020e 	bge	r2,zero,3cfc <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x198>
    3cf4:	e0bff417 	ldw	r2,-48(fp)
    3cf8:	10000416 	blt	r2,zero,3d0c <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x1a8>
    3cfc:	e0bff317 	ldw	r2,-52(fp)
    3d00:	0080060e 	bge	zero,r2,3d1c <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x1b8>
    3d04:	e0bff417 	ldw	r2,-48(fp)
    3d08:	0080040e 	bge	zero,r2,3d1c <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x1b8>
					y += 1;
    3d0c:	e0bfed17 	ldw	r2,-76(fp)
    3d10:	10800044 	addi	r2,r2,1
    3d14:	e0bfed15 	stw	r2,-76(fp)
    3d18:	00000306 	br	3d28 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x1c4>
				}else{
					y -= 1;
    3d1c:	e0bfed17 	ldw	r2,-76(fp)
    3d20:	10bfffc4 	addi	r2,r2,-1
    3d24:	e0bfed15 	stw	r2,-76(fp)
				}
				px = px + 2*(dy1 - dx1);
    3d28:	e0fff617 	ldw	r3,-40(fp)
    3d2c:	e0bff517 	ldw	r2,-44(fp)
    3d30:	1885c83a 	sub	r2,r3,r2
    3d34:	1085883a 	add	r2,r2,r2
    3d38:	1007883a 	mov	r3,r2
    3d3c:	e0bfee17 	ldw	r2,-72(fp)
    3d40:	10c5883a 	add	r2,r2,r3
    3d44:	e0bfee15 	stw	r2,-72(fp)
			}
			this->drawPixel(x, y, color);
    3d48:	e0bffb0b 	ldhu	r2,-20(fp)
    3d4c:	100f883a 	mov	r7,r2
    3d50:	e1bfed17 	ldw	r6,-76(fp)
    3d54:	e17fec17 	ldw	r5,-80(fp)
    3d58:	e13ff717 	ldw	r4,-36(fp)
    3d5c:	00035a40 	call	35a4 <_ZN14VideoInterface9drawPixelEiit>
			x = x1;
			y = y1;
			xe = x0;
		}
		this->drawPixel(x, y, color);
		for(i = 0; x < xe; i++){
    3d60:	e0bff217 	ldw	r2,-56(fp)
    3d64:	10800044 	addi	r2,r2,1
    3d68:	e0bff215 	stw	r2,-56(fp)
    3d6c:	003fd006 	br	3cb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003cb0>
				px = px + 2*(dy1 - dx1);
			}
			this->drawPixel(x, y, color);
		}
	}else{
		if(dy >= 0){
    3d70:	e0bff417 	ldw	r2,-48(fp)
    3d74:	10000716 	blt	r2,zero,3d94 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x230>
			x = x0;
    3d78:	e0bff817 	ldw	r2,-32(fp)
    3d7c:	e0bfec15 	stw	r2,-80(fp)
			y = y0;
    3d80:	e0bff917 	ldw	r2,-28(fp)
    3d84:	e0bfed15 	stw	r2,-76(fp)
			ye = y1;
    3d88:	e0800217 	ldw	r2,8(fp)
    3d8c:	e0bff115 	stw	r2,-60(fp)
    3d90:	00000606 	br	3dac <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x248>
		}else{
			x = x1;
    3d94:	e0bffa17 	ldw	r2,-24(fp)
    3d98:	e0bfec15 	stw	r2,-80(fp)
			y = y1;
    3d9c:	e0800217 	ldw	r2,8(fp)
    3da0:	e0bfed15 	stw	r2,-76(fp)
			ye = y0;
    3da4:	e0bff917 	ldw	r2,-28(fp)
    3da8:	e0bff115 	stw	r2,-60(fp)
		}
		this->drawPixel(x, y, color);
    3dac:	e0bffb0b 	ldhu	r2,-20(fp)
    3db0:	100f883a 	mov	r7,r2
    3db4:	e1bfed17 	ldw	r6,-76(fp)
    3db8:	e17fec17 	ldw	r5,-80(fp)
    3dbc:	e13ff717 	ldw	r4,-36(fp)
    3dc0:	00035a40 	call	35a4 <_ZN14VideoInterface9drawPixelEiit>
		for(i = 0;y < ye; i++){
    3dc4:	e03ff215 	stw	zero,-56(fp)
    3dc8:	e0ffed17 	ldw	r3,-76(fp)
    3dcc:	e0bff117 	ldw	r2,-60(fp)
    3dd0:	18802d0e 	bge	r3,r2,3e88 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x324>
			y += 1;
    3dd4:	e0bfed17 	ldw	r2,-76(fp)
    3dd8:	10800044 	addi	r2,r2,1
    3ddc:	e0bfed15 	stw	r2,-76(fp)
			if(py <= 0){
    3de0:	e0bfef17 	ldw	r2,-68(fp)
    3de4:	00800716 	blt	zero,r2,3e04 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x2a0>
				py = py + 2*dx1;
    3de8:	e0bff517 	ldw	r2,-44(fp)
    3dec:	1085883a 	add	r2,r2,r2
    3df0:	1007883a 	mov	r3,r2
    3df4:	e0bfef17 	ldw	r2,-68(fp)
    3df8:	10c5883a 	add	r2,r2,r3
    3dfc:	e0bfef15 	stw	r2,-68(fp)
    3e00:	00001706 	br	3e60 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x2fc>
			}else{
				if((dx < 0 && dy < 0)||(dx > 0 && dy > 0)){
    3e04:	e0bff317 	ldw	r2,-52(fp)
    3e08:	1000020e 	bge	r2,zero,3e14 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x2b0>
    3e0c:	e0bff417 	ldw	r2,-48(fp)
    3e10:	10000416 	blt	r2,zero,3e24 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x2c0>
    3e14:	e0bff317 	ldw	r2,-52(fp)
    3e18:	0080060e 	bge	zero,r2,3e34 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x2d0>
    3e1c:	e0bff417 	ldw	r2,-48(fp)
    3e20:	0080040e 	bge	zero,r2,3e34 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x2d0>
					x += 1;
    3e24:	e0bfec17 	ldw	r2,-80(fp)
    3e28:	10800044 	addi	r2,r2,1
    3e2c:	e0bfec15 	stw	r2,-80(fp)
    3e30:	00000306 	br	3e40 <_ZN14VideoInterface18_drawLineBRESENHAMEiiiit+0x2dc>
				}else{
					x -= 1;
    3e34:	e0bfec17 	ldw	r2,-80(fp)
    3e38:	10bfffc4 	addi	r2,r2,-1
    3e3c:	e0bfec15 	stw	r2,-80(fp)
				}
				py = py + 2*(dx1 - dy1);
    3e40:	e0fff517 	ldw	r3,-44(fp)
    3e44:	e0bff617 	ldw	r2,-40(fp)
    3e48:	1885c83a 	sub	r2,r3,r2
    3e4c:	1085883a 	add	r2,r2,r2
    3e50:	1007883a 	mov	r3,r2
    3e54:	e0bfef17 	ldw	r2,-68(fp)
    3e58:	10c5883a 	add	r2,r2,r3
    3e5c:	e0bfef15 	stw	r2,-68(fp)
			}
			this->drawPixel(x, y, color);
    3e60:	e0bffb0b 	ldhu	r2,-20(fp)
    3e64:	100f883a 	mov	r7,r2
    3e68:	e1bfed17 	ldw	r6,-76(fp)
    3e6c:	e17fec17 	ldw	r5,-80(fp)
    3e70:	e13ff717 	ldw	r4,-36(fp)
    3e74:	00035a40 	call	35a4 <_ZN14VideoInterface9drawPixelEiit>
			x = x1;
			y = y1;
			ye = y0;
		}
		this->drawPixel(x, y, color);
		for(i = 0;y < ye; i++){
    3e78:	e0bff217 	ldw	r2,-56(fp)
    3e7c:	10800044 	addi	r2,r2,1
    3e80:	e0bff215 	stw	r2,-56(fp)
    3e84:	003fd006 	br	3dc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003dc8>
				py = py + 2*(dx1 - dy1);
			}
			this->drawPixel(x, y, color);
		}
	}
};
    3e88:	0001883a 	nop
    3e8c:	e6fffc04 	addi	sp,fp,-16
    3e90:	dfc00517 	ldw	ra,20(sp)
    3e94:	df000417 	ldw	fp,16(sp)
    3e98:	dcc00317 	ldw	r19,12(sp)
    3e9c:	dc800217 	ldw	r18,8(sp)
    3ea0:	dc400117 	ldw	r17,4(sp)
    3ea4:	dc000017 	ldw	r16,0(sp)
    3ea8:	dec00604 	addi	sp,sp,24
    3eac:	f800283a 	ret

00003eb0 <_Z4JTAGPKc>:
#define TASK1_PRIORITY      1
#define TASK2_PRIORITY      2
#define TASK3_PRIORITY      3

void JTAG(const char* str)
{
    3eb0:	defffc04 	addi	sp,sp,-16
    3eb4:	df000315 	stw	fp,12(sp)
    3eb8:	df000304 	addi	fp,sp,12
    3ebc:	e13fff15 	stw	r4,-4(fp)
	volatile int * JTAG_UART_ptr 	= (int *) 0x10001000;
    3ec0:	00840034 	movhi	r2,4096
    3ec4:	10840004 	addi	r2,r2,4096
    3ec8:	e0bffd15 	stw	r2,-12(fp)
	int control = *(JTAG_UART_ptr + 1);
    3ecc:	e0bffd17 	ldw	r2,-12(fp)
    3ed0:	10800104 	addi	r2,r2,4
    3ed4:	10800017 	ldw	r2,0(r2)
    3ed8:	e0bffe15 	stw	r2,-8(fp)
	while(*(str)){
    3edc:	e0bfff17 	ldw	r2,-4(fp)
    3ee0:	10800003 	ldbu	r2,0(r2)
    3ee4:	10803fcc 	andi	r2,r2,255
    3ee8:	1080201c 	xori	r2,r2,128
    3eec:	10bfe004 	addi	r2,r2,-128
    3ef0:	10000d26 	beq	r2,zero,3f28 <_Z4JTAGPKc+0x78>
		if (control & 0xFFFF0000)
    3ef4:	e0bffe17 	ldw	r2,-8(fp)
    3ef8:	10bfffec 	andhi	r2,r2,65535
    3efc:	103ff726 	beq	r2,zero,3edc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003edc>
			*(JTAG_UART_ptr) = *(str++);
    3f00:	e0bfff17 	ldw	r2,-4(fp)
    3f04:	10c00044 	addi	r3,r2,1
    3f08:	e0ffff15 	stw	r3,-4(fp)
    3f0c:	10800003 	ldbu	r2,0(r2)
    3f10:	10c03fcc 	andi	r3,r2,255
    3f14:	18c0201c 	xori	r3,r3,128
    3f18:	18ffe004 	addi	r3,r3,-128
    3f1c:	e0bffd17 	ldw	r2,-12(fp)
    3f20:	10c00015 	stw	r3,0(r2)

void JTAG(const char* str)
{
	volatile int * JTAG_UART_ptr 	= (int *) 0x10001000;
	int control = *(JTAG_UART_ptr + 1);
	while(*(str)){
    3f24:	003fed06 	br	3edc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7003edc>
		if (control & 0xFFFF0000)
			*(JTAG_UART_ptr) = *(str++);
	}
}
    3f28:	0001883a 	nop
    3f2c:	e037883a 	mov	sp,fp
    3f30:	df000017 	ldw	fp,0(sp)
    3f34:	dec00104 	addi	sp,sp,4
    3f38:	f800283a 	ret

00003f3c <main>:

void GameLoop(void* pdata);
void gfxLoop(void* pdata);
void inputLoop(void* pdata);

int main(void){
    3f3c:	defd3304 	addi	sp,sp,-2868
    3f40:	dfc2cc15 	stw	ra,2864(sp)
    3f44:	df02cb15 	stw	fp,2860(sp)
    3f48:	df02cb04 	addi	fp,sp,2860
	JTAG("Starting App\r\n");
    3f4c:	010000b4 	movhi	r4,2
    3f50:	2111fa04 	addi	r4,r4,18408
    3f54:	0003eb00 	call	3eb0 <_Z4JTAGPKc>

	VGA vga((short*)0x08000000, 320, 240, 1);
    3f58:	00800044 	movi	r2,1
    3f5c:	d8800015 	stw	r2,0(sp)
    3f60:	01c03c04 	movi	r7,240
    3f64:	01805004 	movi	r6,320
    3f68:	01420034 	movhi	r5,2048
    3f6c:	e13d3604 	addi	r4,fp,-2856
    3f70:	00033740 	call	3374 <_ZN3VGAC1EPsiii>
	Keyboard kb;
    3f74:	e0bd3f04 	addi	r2,fp,-2820
    3f78:	1009883a 	mov	r4,r2
    3f7c:	0002bb80 	call	2bb8 <_ZN8KeyboardC1Ev>
	Game game(&kb, &vga);
    3f80:	e0fd3f04 	addi	r3,fp,-2820
    3f84:	e0bd4304 	addi	r2,fp,-2804
    3f88:	e1bd3604 	addi	r6,fp,-2856
    3f8c:	180b883a 	mov	r5,r3
    3f90:	1009883a 	mov	r4,r2
    3f94:	00005f00 	call	5f0 <_ZN4GameC1EP19ControllerInterfaceP14VideoInterface>

	OSTaskCreate(GameLoop, (void*) &game, &task3_stk[TASK_STACKSIZE-1],  TASK1_PRIORITY);
    3f98:	e0bd4304 	addi	r2,fp,-2804
    3f9c:	01c00044 	movi	r7,1
    3fa0:	018000f4 	movhi	r6,3
    3fa4:	31941504 	addi	r6,r6,20564
    3fa8:	100b883a 	mov	r5,r2
    3fac:	01000034 	movhi	r4,0
    3fb0:	21102c04 	addi	r4,r4,16560
    3fb4:	001dfb80 	call	1dfb8 <OSTaskCreate>
	OSTaskCreate(gfxLoop,  (void*) &game, &task1_stk[TASK_STACKSIZE-1],  TASK2_PRIORITY);
    3fb8:	e0bd4304 	addi	r2,fp,-2804
    3fbc:	01c00084 	movi	r7,2
    3fc0:	018000f4 	movhi	r6,3
    3fc4:	31b41504 	addi	r6,r6,-12204
    3fc8:	100b883a 	mov	r5,r2
    3fcc:	01000034 	movhi	r4,0
    3fd0:	21100504 	addi	r4,r4,16404
    3fd4:	001dfb80 	call	1dfb8 <OSTaskCreate>
	OSTaskCreate(inputLoop,(void*) &kb, &task2_stk[TASK_STACKSIZE-1],  TASK3_PRIORITY);
    3fd8:	e0bd3f04 	addi	r2,fp,-2820
    3fdc:	01c000c4 	movi	r7,3
    3fe0:	018000f4 	movhi	r6,3
    3fe4:	31841504 	addi	r6,r6,4180
    3fe8:	100b883a 	mov	r5,r2
    3fec:	01000034 	movhi	r4,0
    3ff0:	21101704 	addi	r4,r4,16476
    3ff4:	001dfb80 	call	1dfb8 <OSTaskCreate>

	OSStart();
    3ff8:	0018abc0 	call	18abc <OSStart>
	return 0;
    3ffc:	0005883a 	mov	r2,zero
}
    4000:	e037883a 	mov	sp,fp
    4004:	dfc00117 	ldw	ra,4(sp)
    4008:	df000017 	ldw	fp,0(sp)
    400c:	dec00204 	addi	sp,sp,8
    4010:	f800283a 	ret

00004014 <_Z7gfxLoopPv>:

void gfxLoop(void* pdata){
    4014:	defffc04 	addi	sp,sp,-16
    4018:	dfc00315 	stw	ra,12(sp)
    401c:	df000215 	stw	fp,8(sp)
    4020:	df000204 	addi	fp,sp,8
    4024:	e13fff15 	stw	r4,-4(fp)
	JTAG("GFX Started\r\n");
    4028:	010000b4 	movhi	r4,2
    402c:	2111fe04 	addi	r4,r4,18424
    4030:	0003eb00 	call	3eb0 <_Z4JTAGPKc>

	Game* game = (Game*) pdata;
    4034:	e0bfff17 	ldw	r2,-4(fp)
    4038:	e0bffe15 	stw	r2,-8(fp)
	while(1){
		game->draw();
    403c:	e13ffe17 	ldw	r4,-8(fp)
    4040:	00009200 	call	920 <_ZN4Game4drawEv>
		OSTimeDlyHMSM(0, 0, 0, 100);
    4044:	01c01904 	movi	r7,100
    4048:	000d883a 	mov	r6,zero
    404c:	000b883a 	mov	r5,zero
    4050:	0009883a 	mov	r4,zero
    4054:	001f3380 	call	1f338 <OSTimeDlyHMSM>

void gfxLoop(void* pdata){
	JTAG("GFX Started\r\n");

	Game* game = (Game*) pdata;
	while(1){
    4058:	003ff806 	br	403c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700403c>

0000405c <_Z9inputLoopPv>:
		game->draw();
		OSTimeDlyHMSM(0, 0, 0, 100);
	}
}

void inputLoop(void* pdata){
    405c:	defffc04 	addi	sp,sp,-16
    4060:	dfc00315 	stw	ra,12(sp)
    4064:	df000215 	stw	fp,8(sp)
    4068:	df000204 	addi	fp,sp,8
    406c:	e13fff15 	stw	r4,-4(fp)
	JTAG("Input polling started \r\n");
    4070:	010000b4 	movhi	r4,2
    4074:	21120204 	addi	r4,r4,18440
    4078:	0003eb00 	call	3eb0 <_Z4JTAGPKc>

	Keyboard* kb = (Keyboard*) pdata;
    407c:	e0bfff17 	ldw	r2,-4(fp)
    4080:	e0bffe15 	stw	r2,-8(fp)


	while(1)
	{
		kb->update();
    4084:	e0bffe17 	ldw	r2,-8(fp)
    4088:	10800017 	ldw	r2,0(r2)
    408c:	10800017 	ldw	r2,0(r2)
    4090:	e13ffe17 	ldw	r4,-8(fp)
    4094:	103ee83a 	callr	r2
		OSTimeDlyHMSM(0, 0, 0, 100);
    4098:	01c01904 	movi	r7,100
    409c:	000d883a 	mov	r6,zero
    40a0:	000b883a 	mov	r5,zero
    40a4:	0009883a 	mov	r4,zero
    40a8:	001f3380 	call	1f338 <OSTimeDlyHMSM>
	JTAG("Input polling started \r\n");

	Keyboard* kb = (Keyboard*) pdata;


	while(1)
    40ac:	003ff506 	br	4084 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004084>

000040b0 <_Z8GameLoopPv>:
		kb->update();
		OSTimeDlyHMSM(0, 0, 0, 100);
	}
}

void GameLoop(void* pdata){
    40b0:	defffc04 	addi	sp,sp,-16
    40b4:	dfc00315 	stw	ra,12(sp)
    40b8:	df000215 	stw	fp,8(sp)
    40bc:	df000204 	addi	fp,sp,8
    40c0:	e13fff15 	stw	r4,-4(fp)
	Game* game = (Game*) pdata;
    40c4:	e0bfff17 	ldw	r2,-4(fp)
    40c8:	e0bffe15 	stw	r2,-8(fp)

	while (1)
	{
		game->update(100);
    40cc:	01401904 	movi	r5,100
    40d0:	e13ffe17 	ldw	r4,-8(fp)
    40d4:	00007500 	call	750 <_ZN4Game6updateEi>
		OSTimeDlyHMSM(0, 0, 0, 100);
    40d8:	01c01904 	movi	r7,100
    40dc:	000d883a 	mov	r6,zero
    40e0:	000b883a 	mov	r5,zero
    40e4:	0009883a 	mov	r4,zero
    40e8:	001f3380 	call	1f338 <OSTimeDlyHMSM>
}

void GameLoop(void* pdata){
	Game* game = (Game*) pdata;

	while (1)
    40ec:	003ff706 	br	40cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70040cc>

000040f0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
    40f0:	008000b4 	movhi	r2,2
    40f4:	10921804 	addi	r2,r2,18528
    40f8:	20800015 	stw	r2,0(r4)
    40fc:	00044441 	jmpi	4444 <_ZN10__cxxabiv117__class_type_infoD1Ev>

00004100 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
    4100:	defffe04 	addi	sp,sp,-8
    4104:	008000b4 	movhi	r2,2
    4108:	dc000015 	stw	r16,0(sp)
    410c:	dfc00115 	stw	ra,4(sp)
    4110:	10921804 	addi	r2,r2,18528
    4114:	20800015 	stw	r2,0(r4)
    4118:	2021883a 	mov	r16,r4
    411c:	00044440 	call	4444 <_ZN10__cxxabiv117__class_type_infoD1Ev>
    4120:	8009883a 	mov	r4,r16
    4124:	dfc00117 	ldw	ra,4(sp)
    4128:	dc000017 	ldw	r16,0(sp)
    412c:	dec00204 	addi	sp,sp,8
    4130:	00047181 	jmpi	4718 <_ZdlPv>

00004134 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
    4134:	defff504 	addi	sp,sp,-44
    4138:	dc000115 	stw	r16,4(sp)
    413c:	38800117 	ldw	r2,4(r7)
    4140:	24000117 	ldw	r16,4(r4)
    4144:	df000915 	stw	fp,36(sp)
    4148:	ddc00815 	stw	r23,32(sp)
    414c:	dd800715 	stw	r22,28(sp)
    4150:	dcc00415 	stw	r19,16(sp)
    4154:	dc800315 	stw	r18,12(sp)
    4158:	dc400215 	stw	r17,8(sp)
    415c:	dfc00a15 	stw	ra,40(sp)
    4160:	dd400615 	stw	r21,24(sp)
    4164:	dd000515 	stw	r20,20(sp)
    4168:	2823883a 	mov	r17,r5
    416c:	3039883a 	mov	fp,r6
    4170:	dcc00b17 	ldw	r19,44(sp)
    4174:	ddc00c17 	ldw	r23,48(sp)
    4178:	dd800d17 	ldw	r22,52(sp)
    417c:	dc800e17 	ldw	r18,56(sp)
    4180:	80800b26 	beq	r16,r2,41b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
    4184:	80c00007 	ldb	r3,0(r16)
    4188:	2029883a 	mov	r20,r4
    418c:	01000a84 	movi	r4,42
    4190:	382b883a 	mov	r21,r7
    4194:	19001a26 	beq	r3,r4,4200 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    4198:	100b883a 	mov	r5,r2
    419c:	8009883a 	mov	r4,r16
    41a0:	d8c00015 	stw	r3,0(sp)
    41a4:	00088b40 	call	88b4 <strcmp>
    41a8:	d8c00017 	ldw	r3,0(sp)
    41ac:	1000141e 	bne	r2,zero,4200 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xcc>
    41b0:	94c00015 	stw	r19,0(r18)
    41b4:	97000115 	stw	fp,4(r18)
    41b8:	88002816 	blt	r17,zero,425c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x128>
    41bc:	9c63883a 	add	r17,r19,r17
    41c0:	b4403226 	beq	r22,r17,428c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
    41c4:	00800044 	movi	r2,1
    41c8:	90800315 	stw	r2,12(r18)
    41cc:	0005883a 	mov	r2,zero
    41d0:	dfc00a17 	ldw	ra,40(sp)
    41d4:	df000917 	ldw	fp,36(sp)
    41d8:	ddc00817 	ldw	r23,32(sp)
    41dc:	dd800717 	ldw	r22,28(sp)
    41e0:	dd400617 	ldw	r21,24(sp)
    41e4:	dd000517 	ldw	r20,20(sp)
    41e8:	dcc00417 	ldw	r19,16(sp)
    41ec:	dc800317 	ldw	r18,12(sp)
    41f0:	dc400217 	ldw	r17,8(sp)
    41f4:	dc000117 	ldw	r16,4(sp)
    41f8:	dec00b04 	addi	sp,sp,44
    41fc:	f800283a 	ret
    4200:	9d801926 	beq	r19,r22,4268 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
    4204:	a1000217 	ldw	r4,8(r20)
    4208:	a80f883a 	mov	r7,r21
    420c:	e00d883a 	mov	r6,fp
    4210:	20800017 	ldw	r2,0(r4)
    4214:	dc800e15 	stw	r18,56(sp)
    4218:	dd800d15 	stw	r22,52(sp)
    421c:	ddc00c15 	stw	r23,48(sp)
    4220:	dcc00b15 	stw	r19,44(sp)
    4224:	10800717 	ldw	r2,28(r2)
    4228:	880b883a 	mov	r5,r17
    422c:	dfc00a17 	ldw	ra,40(sp)
    4230:	df000917 	ldw	fp,36(sp)
    4234:	ddc00817 	ldw	r23,32(sp)
    4238:	dd800717 	ldw	r22,28(sp)
    423c:	dd400617 	ldw	r21,24(sp)
    4240:	dd000517 	ldw	r20,20(sp)
    4244:	dcc00417 	ldw	r19,16(sp)
    4248:	dc800317 	ldw	r18,12(sp)
    424c:	dc400217 	ldw	r17,8(sp)
    4250:	dc000117 	ldw	r16,4(sp)
    4254:	dec00b04 	addi	sp,sp,44
    4258:	1000683a 	jmp	r2
    425c:	00bfff84 	movi	r2,-2
    4260:	88bfda1e 	bne	r17,r2,41cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041cc>
    4264:	003fd706 	br	41c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041c4>
    4268:	b9400117 	ldw	r5,4(r23)
    426c:	81400526 	beq	r16,r5,4284 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
    4270:	00800a84 	movi	r2,42
    4274:	18bfe326 	beq	r3,r2,4204 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004204>
    4278:	8009883a 	mov	r4,r16
    427c:	00088b40 	call	88b4 <strcmp>
    4280:	103fe01e 	bne	r2,zero,4204 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004204>
    4284:	97000215 	stw	fp,8(r18)
    4288:	003fd006 	br	41cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041cc>
    428c:	00800184 	movi	r2,6
    4290:	003fcd06 	br	41c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70041c8>

00004294 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
    4294:	defffa04 	addi	sp,sp,-24
    4298:	dc000215 	stw	r16,8(sp)
    429c:	dc000617 	ldw	r16,24(sp)
    42a0:	dc800415 	stw	r18,16(sp)
    42a4:	dc400315 	stw	r17,12(sp)
    42a8:	dfc00515 	stw	ra,20(sp)
    42ac:	2023883a 	mov	r17,r4
    42b0:	2825883a 	mov	r18,r5
    42b4:	81800b26 	beq	r16,r6,42e4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
    42b8:	89000217 	ldw	r4,8(r17)
    42bc:	900b883a 	mov	r5,r18
    42c0:	20800017 	ldw	r2,0(r4)
    42c4:	dc000615 	stw	r16,24(sp)
    42c8:	10800817 	ldw	r2,32(r2)
    42cc:	dfc00517 	ldw	ra,20(sp)
    42d0:	dc800417 	ldw	r18,16(sp)
    42d4:	dc400317 	ldw	r17,12(sp)
    42d8:	dc000217 	ldw	r16,8(sp)
    42dc:	dec00604 	addi	sp,sp,24
    42e0:	1000683a 	jmp	r2
    42e4:	21000117 	ldw	r4,4(r4)
    42e8:	39400117 	ldw	r5,4(r7)
    42ec:	21400926 	beq	r4,r5,4314 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
    42f0:	20c00007 	ldb	r3,0(r4)
    42f4:	00800a84 	movi	r2,42
    42f8:	18bfef26 	beq	r3,r2,42b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70042b8>
    42fc:	d9800015 	stw	r6,0(sp)
    4300:	d9c00115 	stw	r7,4(sp)
    4304:	00088b40 	call	88b4 <strcmp>
    4308:	d9800017 	ldw	r6,0(sp)
    430c:	d9c00117 	ldw	r7,4(sp)
    4310:	103fe91e 	bne	r2,zero,42b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70042b8>
    4314:	00800184 	movi	r2,6
    4318:	dfc00517 	ldw	ra,20(sp)
    431c:	dc800417 	ldw	r18,16(sp)
    4320:	dc400317 	ldw	r17,12(sp)
    4324:	dc000217 	ldw	r16,8(sp)
    4328:	dec00604 	addi	sp,sp,24
    432c:	f800283a 	ret

00004330 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
    4330:	defffb04 	addi	sp,sp,-20
    4334:	dcc00315 	stw	r19,12(sp)
    4338:	dc800215 	stw	r18,8(sp)
    433c:	dc400115 	stw	r17,4(sp)
    4340:	dc000015 	stw	r16,0(sp)
    4344:	dfc00415 	stw	ra,16(sp)
    4348:	2027883a 	mov	r19,r4
    434c:	2821883a 	mov	r16,r5
    4350:	3023883a 	mov	r17,r6
    4354:	3825883a 	mov	r18,r7
    4358:	00044880 	call	4488 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
    435c:	10c03fcc 	andi	r3,r2,255
    4360:	18000726 	beq	r3,zero,4380 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
    4364:	dfc00417 	ldw	ra,16(sp)
    4368:	dcc00317 	ldw	r19,12(sp)
    436c:	dc800217 	ldw	r18,8(sp)
    4370:	dc400117 	ldw	r17,4(sp)
    4374:	dc000017 	ldw	r16,0(sp)
    4378:	dec00504 	addi	sp,sp,20
    437c:	f800283a 	ret
    4380:	99000217 	ldw	r4,8(r19)
    4384:	900f883a 	mov	r7,r18
    4388:	880d883a 	mov	r6,r17
    438c:	20800017 	ldw	r2,0(r4)
    4390:	800b883a 	mov	r5,r16
    4394:	10800617 	ldw	r2,24(r2)
    4398:	dfc00417 	ldw	ra,16(sp)
    439c:	dcc00317 	ldw	r19,12(sp)
    43a0:	dc800217 	ldw	r18,8(sp)
    43a4:	dc400117 	ldw	r17,4(sp)
    43a8:	dc000017 	ldw	r16,0(sp)
    43ac:	dec00504 	addi	sp,sp,20
    43b0:	1000683a 	jmp	r2

000043b4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
    43b4:	20800017 	ldw	r2,0(r4)
    43b8:	defffa04 	addi	sp,sp,-24
    43bc:	dc000415 	stw	r16,16(sp)
    43c0:	10800617 	ldw	r2,24(r2)
    43c4:	3021883a 	mov	r16,r6
    43c8:	31800017 	ldw	r6,0(r6)
    43cc:	00c00404 	movi	r3,16
    43d0:	d8c00215 	stw	r3,8(sp)
    43d4:	dfc00515 	stw	ra,20(sp)
    43d8:	d8000015 	stw	zero,0(sp)
    43dc:	d8000115 	stw	zero,4(sp)
    43e0:	d8000315 	stw	zero,12(sp)
    43e4:	d80f883a 	mov	r7,sp
    43e8:	103ee83a 	callr	r2
    43ec:	d8800117 	ldw	r2,4(sp)
    43f0:	00c00184 	movi	r3,6
    43f4:	1080018c 	andi	r2,r2,6
    43f8:	10c00526 	beq	r2,r3,4410 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
    43fc:	0005883a 	mov	r2,zero
    4400:	dfc00517 	ldw	ra,20(sp)
    4404:	dc000417 	ldw	r16,16(sp)
    4408:	dec00604 	addi	sp,sp,24
    440c:	f800283a 	ret
    4410:	d8c00017 	ldw	r3,0(sp)
    4414:	00800044 	movi	r2,1
    4418:	80c00015 	stw	r3,0(r16)
    441c:	dfc00517 	ldw	ra,20(sp)
    4420:	dc000417 	ldw	r16,16(sp)
    4424:	dec00604 	addi	sp,sp,24
    4428:	f800283a 	ret

0000442c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
    442c:	d8800017 	ldw	r2,0(sp)
    4430:	11800226 	beq	r2,r6,443c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
    4434:	00800044 	movi	r2,1
    4438:	f800283a 	ret
    443c:	00800184 	movi	r2,6
    4440:	f800283a 	ret

00004444 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
    4444:	008000b4 	movhi	r2,2
    4448:	10922f04 	addi	r2,r2,18620
    444c:	20800015 	stw	r2,0(r4)
    4450:	000467c1 	jmpi	467c <_ZNSt9type_infoD1Ev>

00004454 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
    4454:	defffe04 	addi	sp,sp,-8
    4458:	008000b4 	movhi	r2,2
    445c:	dc000015 	stw	r16,0(sp)
    4460:	dfc00115 	stw	ra,4(sp)
    4464:	10922f04 	addi	r2,r2,18620
    4468:	20800015 	stw	r2,0(r4)
    446c:	2021883a 	mov	r16,r4
    4470:	000467c0 	call	467c <_ZNSt9type_infoD1Ev>
    4474:	8009883a 	mov	r4,r16
    4478:	dfc00117 	ldw	ra,4(sp)
    447c:	dc000017 	ldw	r16,0(sp)
    4480:	dec00204 	addi	sp,sp,8
    4484:	00047181 	jmpi	4718 <_ZdlPv>

00004488 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
    4488:	21000117 	ldw	r4,4(r4)
    448c:	29400117 	ldw	r5,4(r5)
    4490:	defffd04 	addi	sp,sp,-12
    4494:	dc400115 	stw	r17,4(sp)
    4498:	dc000015 	stw	r16,0(sp)
    449c:	dfc00215 	stw	ra,8(sp)
    44a0:	3023883a 	mov	r17,r6
    44a4:	3821883a 	mov	r16,r7
    44a8:	21400526 	beq	r4,r5,44c0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
    44ac:	20c00007 	ldb	r3,0(r4)
    44b0:	00800a84 	movi	r2,42
    44b4:	18800d26 	beq	r3,r2,44ec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    44b8:	00088b40 	call	88b4 <strcmp>
    44bc:	10000b1e 	bne	r2,zero,44ec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x64>
    44c0:	00800204 	movi	r2,8
    44c4:	80800315 	stw	r2,12(r16)
    44c8:	00800184 	movi	r2,6
    44cc:	80800115 	stw	r2,4(r16)
    44d0:	84400015 	stw	r17,0(r16)
    44d4:	00800044 	movi	r2,1
    44d8:	dfc00217 	ldw	ra,8(sp)
    44dc:	dc400117 	ldw	r17,4(sp)
    44e0:	dc000017 	ldw	r16,0(sp)
    44e4:	dec00304 	addi	sp,sp,12
    44e8:	f800283a 	ret
    44ec:	0005883a 	mov	r2,zero
    44f0:	003ff906 	br	44d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70044d8>

000044f4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
    44f4:	defffa04 	addi	sp,sp,-24
    44f8:	dc800415 	stw	r18,16(sp)
    44fc:	d8800817 	ldw	r2,32(sp)
    4500:	dc800617 	ldw	r18,24(sp)
    4504:	dc400315 	stw	r17,12(sp)
    4508:	dc000215 	stw	r16,8(sp)
    450c:	dfc00515 	stw	ra,20(sp)
    4510:	dc400917 	ldw	r17,36(sp)
    4514:	24000117 	ldw	r16,4(r4)
    4518:	90801526 	beq	r18,r2,4570 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x7c>
    451c:	39400117 	ldw	r5,4(r7)
    4520:	2c000826 	beq	r5,r16,4544 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x50>
    4524:	80c00007 	ldb	r3,0(r16)
    4528:	00800a84 	movi	r2,42
    452c:	18800926 	beq	r3,r2,4554 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    4530:	8009883a 	mov	r4,r16
    4534:	d9800115 	stw	r6,4(sp)
    4538:	00088b40 	call	88b4 <strcmp>
    453c:	d9800117 	ldw	r6,4(sp)
    4540:	1000041e 	bne	r2,zero,4554 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
    4544:	00800044 	movi	r2,1
    4548:	8c800015 	stw	r18,0(r17)
    454c:	89800115 	stw	r6,4(r17)
    4550:	88800315 	stw	r2,12(r17)
    4554:	0005883a 	mov	r2,zero
    4558:	dfc00517 	ldw	ra,20(sp)
    455c:	dc800417 	ldw	r18,16(sp)
    4560:	dc400317 	ldw	r17,12(sp)
    4564:	dc000217 	ldw	r16,8(sp)
    4568:	dec00604 	addi	sp,sp,24
    456c:	f800283a 	ret
    4570:	d8800717 	ldw	r2,28(sp)
    4574:	11400117 	ldw	r5,4(r2)
    4578:	81400a26 	beq	r16,r5,45a4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb0>
    457c:	80c00007 	ldb	r3,0(r16)
    4580:	00800a84 	movi	r2,42
    4584:	18800c26 	beq	r3,r2,45b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
    4588:	8009883a 	mov	r4,r16
    458c:	d9800115 	stw	r6,4(sp)
    4590:	d9c00015 	stw	r7,0(sp)
    4594:	00088b40 	call	88b4 <strcmp>
    4598:	d9800117 	ldw	r6,4(sp)
    459c:	d9c00017 	ldw	r7,0(sp)
    45a0:	1000021e 	bne	r2,zero,45ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
    45a4:	89800215 	stw	r6,8(r17)
    45a8:	003fea06 	br	4554 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004554>
    45ac:	39400117 	ldw	r5,4(r7)
    45b0:	817fdf1e 	bne	r16,r5,4530 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004530>
    45b4:	003fe306 	br	4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>
    45b8:	38800117 	ldw	r2,4(r7)
    45bc:	80bfe51e 	bne	r16,r2,4554 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004554>
    45c0:	003fe006 	br	4544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004544>

000045c4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
    45c4:	20800117 	ldw	r2,4(r4)
    45c8:	28c00117 	ldw	r3,4(r5)
    45cc:	10c02926 	beq	r2,r3,4674 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
    45d0:	defffb04 	addi	sp,sp,-20
    45d4:	dcc00315 	stw	r19,12(sp)
    45d8:	dc800215 	stw	r18,8(sp)
    45dc:	dc400115 	stw	r17,4(sp)
    45e0:	dc000015 	stw	r16,0(sp)
    45e4:	dfc00415 	stw	ra,16(sp)
    45e8:	2821883a 	mov	r16,r5
    45ec:	11400007 	ldb	r5,0(r2)
    45f0:	2025883a 	mov	r18,r4
    45f4:	01000a84 	movi	r4,42
    45f8:	3823883a 	mov	r17,r7
    45fc:	3027883a 	mov	r19,r6
    4600:	29000626 	beq	r5,r4,461c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    4604:	180b883a 	mov	r5,r3
    4608:	1009883a 	mov	r4,r2
    460c:	00088b40 	call	88b4 <strcmp>
    4610:	1000021e 	bne	r2,zero,461c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x58>
    4614:	00800044 	movi	r2,1
    4618:	00000306 	br	4628 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
    461c:	008000c4 	movi	r2,3
    4620:	1440082e 	bgeu	r2,r17,4644 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
    4624:	0005883a 	mov	r2,zero
    4628:	dfc00417 	ldw	ra,16(sp)
    462c:	dcc00317 	ldw	r19,12(sp)
    4630:	dc800217 	ldw	r18,8(sp)
    4634:	dc400117 	ldw	r17,4(sp)
    4638:	dc000017 	ldw	r16,0(sp)
    463c:	dec00504 	addi	sp,sp,20
    4640:	f800283a 	ret
    4644:	80800017 	ldw	r2,0(r16)
    4648:	980d883a 	mov	r6,r19
    464c:	900b883a 	mov	r5,r18
    4650:	10800517 	ldw	r2,20(r2)
    4654:	8009883a 	mov	r4,r16
    4658:	dfc00417 	ldw	ra,16(sp)
    465c:	dcc00317 	ldw	r19,12(sp)
    4660:	dc800217 	ldw	r18,8(sp)
    4664:	dc400117 	ldw	r17,4(sp)
    4668:	dc000017 	ldw	r16,0(sp)
    466c:	dec00504 	addi	sp,sp,20
    4670:	1000683a 	jmp	r2
    4674:	00800044 	movi	r2,1
    4678:	f800283a 	ret

0000467c <_ZNSt9type_infoD1Ev>:
    467c:	f800283a 	ret

00004680 <_ZNKSt9type_info14__is_pointer_pEv>:
    4680:	0005883a 	mov	r2,zero
    4684:	f800283a 	ret

00004688 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
    4688:	0005883a 	mov	r2,zero
    468c:	f800283a 	ret

00004690 <_ZNSt9type_infoD0Ev>:
    4690:	00047181 	jmpi	4718 <_ZdlPv>

00004694 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
    4694:	21000117 	ldw	r4,4(r4)
    4698:	29400117 	ldw	r5,4(r5)
    469c:	21400c26 	beq	r4,r5,46d0 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
    46a0:	20c00007 	ldb	r3,0(r4)
    46a4:	00800a84 	movi	r2,42
    46a8:	18800726 	beq	r3,r2,46c8 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
    46ac:	deffff04 	addi	sp,sp,-4
    46b0:	dfc00015 	stw	ra,0(sp)
    46b4:	00088b40 	call	88b4 <strcmp>
    46b8:	1005003a 	cmpeq	r2,r2,zero
    46bc:	dfc00017 	ldw	ra,0(sp)
    46c0:	dec00104 	addi	sp,sp,4
    46c4:	f800283a 	ret
    46c8:	0005883a 	mov	r2,zero
    46cc:	f800283a 	ret
    46d0:	00800044 	movi	r2,1
    46d4:	f800283a 	ret

000046d8 <__cxa_pure_virtual>:
    46d8:	014000b4 	movhi	r5,2
    46dc:	deffff04 	addi	sp,sp,-4
    46e0:	29524404 	addi	r5,r5,18704
    46e4:	018006c4 	movi	r6,27
    46e8:	01000084 	movi	r4,2
    46ec:	dfc00015 	stw	ra,0(sp)
    46f0:	0017b400 	call	17b40 <write>
    46f4:	00047dc0 	call	47dc <_ZSt9terminatev>

000046f8 <__cxa_deleted_virtual>:
    46f8:	014000b4 	movhi	r5,2
    46fc:	deffff04 	addi	sp,sp,-4
    4700:	29524b04 	addi	r5,r5,18732
    4704:	01800784 	movi	r6,30
    4708:	01000084 	movi	r4,2
    470c:	dfc00015 	stw	ra,0(sp)
    4710:	0017b400 	call	17b40 <write>
    4714:	00047dc0 	call	47dc <_ZSt9terminatev>

00004718 <_ZdlPv>:
    4718:	00078c81 	jmpi	78c8 <free>

0000471c <_ZN10__cxxabiv111__terminateEPFvvE>:
    471c:	00800034 	movhi	r2,0
    4720:	deffef04 	addi	sp,sp,-68
    4724:	10940604 	addi	r2,r2,20504
    4728:	d8800615 	stw	r2,24(sp)
    472c:	008000b4 	movhi	r2,2
    4730:	108d3404 	addi	r2,r2,13520
    4734:	d8800715 	stw	r2,28(sp)
    4738:	00800034 	movhi	r2,0
    473c:	1091dd04 	addi	r2,r2,18292
    4740:	d9000d15 	stw	r4,52(sp)
    4744:	d809883a 	mov	r4,sp
    4748:	d8800915 	stw	r2,36(sp)
    474c:	dfc01015 	stw	ra,64(sp)
    4750:	df000f15 	stw	fp,60(sp)
    4754:	dec00815 	stw	sp,32(sp)
    4758:	dec00a15 	stw	sp,40(sp)
    475c:	00075200 	call	7520 <_Unwind_SjLj_Register>
    4760:	00800044 	movi	r2,1
    4764:	d8800115 	stw	r2,4(sp)
    4768:	d8800d17 	ldw	r2,52(sp)
    476c:	103ee83a 	callr	r2
    4770:	000789c0 	call	789c <abort>
    4774:	d8c00217 	ldw	r3,8(sp)
    4778:	d8800117 	ldw	r2,4(sp)
    477c:	d8c00d15 	stw	r3,52(sp)
    4780:	d8c00317 	ldw	r3,12(sp)
    4784:	d8c00e15 	stw	r3,56(sp)
    4788:	10000b26 	beq	r2,zero,47b8 <_ZN10__cxxabiv111__terminateEPFvvE+0x9c>
    478c:	10bfffc4 	addi	r2,r2,-1
    4790:	10000126 	beq	r2,zero,4798 <_ZN10__cxxabiv111__terminateEPFvvE+0x7c>
    4794:	003b68fa 	trap	3
    4798:	d8000115 	stw	zero,4(sp)
    479c:	00059040 	call	5904 <__cxa_end_catch>
    47a0:	d8c00e17 	ldw	r3,56(sp)
    47a4:	00bfffc4 	movi	r2,-1
    47a8:	18800826 	beq	r3,r2,47cc <_ZN10__cxxabiv111__terminateEPFvvE+0xb0>
    47ac:	d9000d17 	ldw	r4,52(sp)
    47b0:	d8800115 	stw	r2,4(sp)
    47b4:	000771c0 	call	771c <_Unwind_SjLj_Resume>
    47b8:	d9000d17 	ldw	r4,52(sp)
    47bc:	00058500 	call	5850 <__cxa_begin_catch>
    47c0:	00800084 	movi	r2,2
    47c4:	d8800115 	stw	r2,4(sp)
    47c8:	000789c0 	call	789c <abort>
    47cc:	d8800e17 	ldw	r2,56(sp)
    47d0:	d9000d17 	ldw	r4,52(sp)
    47d4:	d8800115 	stw	r2,4(sp)
    47d8:	00056180 	call	5618 <__cxa_call_unexpected>

000047dc <_ZSt9terminatev>:
    47dc:	008000b4 	movhi	r2,2
    47e0:	109bc504 	addi	r2,r2,28436
    47e4:	11000017 	ldw	r4,0(r2)
    47e8:	deffff04 	addi	sp,sp,-4
    47ec:	dfc00015 	stw	ra,0(sp)
    47f0:	000471c0 	call	471c <_ZN10__cxxabiv111__terminateEPFvvE>

000047f4 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
    47f4:	deffff04 	addi	sp,sp,-4
    47f8:	dfc00015 	stw	ra,0(sp)
    47fc:	203ee83a 	callr	r4
    4800:	00047dc0 	call	47dc <_ZSt9terminatev>

00004804 <_ZSt10unexpectedv>:
    4804:	008000b4 	movhi	r2,2
    4808:	109bc604 	addi	r2,r2,28440
    480c:	11000017 	ldw	r4,0(r2)
    4810:	deffff04 	addi	sp,sp,-4
    4814:	dfc00015 	stw	ra,0(sp)
    4818:	00047f40 	call	47f4 <_ZN10__cxxabiv112__unexpectedEPFvvE>

0000481c <_ZSt13set_terminatePFvvE>:
    481c:	00c000b4 	movhi	r3,2
    4820:	18dbc504 	addi	r3,r3,28436
    4824:	18800017 	ldw	r2,0(r3)
    4828:	19000015 	stw	r4,0(r3)
    482c:	f800283a 	ret

00004830 <_ZSt13get_terminatev>:
    4830:	008000b4 	movhi	r2,2
    4834:	109bc504 	addi	r2,r2,28436
    4838:	10800017 	ldw	r2,0(r2)
    483c:	f800283a 	ret

00004840 <_ZSt14set_unexpectedPFvvE>:
    4840:	00c000b4 	movhi	r3,2
    4844:	18dbc604 	addi	r3,r3,28440
    4848:	18800017 	ldw	r2,0(r3)
    484c:	19000015 	stw	r4,0(r3)
    4850:	f800283a 	ret

00004854 <_ZSt14get_unexpectedv>:
    4854:	008000b4 	movhi	r2,2
    4858:	109bc604 	addi	r2,r2,28440
    485c:	10800017 	ldw	r2,0(r2)
    4860:	f800283a 	ret

00004864 <_ZL21size_of_encoded_valueh>:
    4864:	deffff04 	addi	sp,sp,-4
    4868:	dfc00015 	stw	ra,0(sp)
    486c:	20c03fcc 	andi	r3,r4,255
    4870:	00803fc4 	movi	r2,255
    4874:	18802026 	beq	r3,r2,48f8 <_ZL21size_of_encoded_valueh+0x94>
    4878:	210001cc 	andi	r4,r4,7
    487c:	00800144 	movi	r2,5
    4880:	11001c36 	bltu	r2,r4,48f4 <_ZL21size_of_encoded_valueh+0x90>
    4884:	200890ba 	slli	r4,r4,2
    4888:	00800034 	movhi	r2,0
    488c:	10922704 	addi	r2,r2,18588
    4890:	2089883a 	add	r4,r4,r2
    4894:	20800017 	ldw	r2,0(r4)
    4898:	1000683a 	jmp	r2
    489c:	000048b4 	movhi	zero,290
    48a0:	000048f4 	movhi	zero,291
    48a4:	000048c4 	movi	zero,291
    48a8:	000048b4 	movhi	zero,290
    48ac:	000048e4 	muli	zero,zero,291
    48b0:	000048d4 	movui	zero,291
    48b4:	00800104 	movi	r2,4
    48b8:	dfc00017 	ldw	ra,0(sp)
    48bc:	dec00104 	addi	sp,sp,4
    48c0:	f800283a 	ret
    48c4:	00800084 	movi	r2,2
    48c8:	dfc00017 	ldw	ra,0(sp)
    48cc:	dec00104 	addi	sp,sp,4
    48d0:	f800283a 	ret
    48d4:	00800044 	movi	r2,1
    48d8:	dfc00017 	ldw	ra,0(sp)
    48dc:	dec00104 	addi	sp,sp,4
    48e0:	f800283a 	ret
    48e4:	00800204 	movi	r2,8
    48e8:	dfc00017 	ldw	ra,0(sp)
    48ec:	dec00104 	addi	sp,sp,4
    48f0:	f800283a 	ret
    48f4:	000789c0 	call	789c <abort>
    48f8:	0005883a 	mov	r2,zero
    48fc:	dfc00017 	ldw	ra,0(sp)
    4900:	dec00104 	addi	sp,sp,4
    4904:	f800283a 	ret

00004908 <_ZL28read_encoded_value_with_basehjPKhPj>:
    4908:	deffff04 	addi	sp,sp,-4
    490c:	dfc00015 	stw	ra,0(sp)
    4910:	20c03fcc 	andi	r3,r4,255
    4914:	00801404 	movi	r2,80
    4918:	18807326 	beq	r3,r2,4ae8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e0>
    491c:	20c003cc 	andi	r3,r4,15
    4920:	00800304 	movi	r2,12
    4924:	10c06f36 	bltu	r2,r3,4ae4 <_ZL28read_encoded_value_with_basehjPKhPj+0x1dc>
    4928:	180690ba 	slli	r3,r3,2
    492c:	02000034 	movhi	r8,0
    4930:	42125004 	addi	r8,r8,18752
    4934:	1a07883a 	add	r3,r3,r8
    4938:	18800017 	ldw	r2,0(r3)
    493c:	1000683a 	jmp	r2
    4940:	00004974 	movhi	zero,293
    4944:	00004a90 	cmplti	zero,zero,298
    4948:	00004acc 	andi	zero,zero,299
    494c:	00004974 	movhi	zero,293
    4950:	000049d8 	cmpnei	zero,zero,295
    4954:	00004a2c 	andhi	zero,zero,296
    4958:	00004ae4 	muli	zero,zero,299
    495c:	00004ae4 	muli	zero,zero,299
    4960:	00004ae4 	muli	zero,zero,299
    4964:	00004a38 	rdprs	zero,zero,296
    4968:	00004a08 	cmpgei	zero,zero,296
    496c:	00004974 	movhi	zero,293
    4970:	000049d8 	cmpnei	zero,zero,295
    4974:	30800043 	ldbu	r2,1(r6)
    4978:	30c00083 	ldbu	r3,2(r6)
    497c:	324000c3 	ldbu	r9,3(r6)
    4980:	32000003 	ldbu	r8,0(r6)
    4984:	1004923a 	slli	r2,r2,8
    4988:	1806943a 	slli	r3,r3,16
    498c:	4812963a 	slli	r9,r9,24
    4990:	1204b03a 	or	r2,r2,r8
    4994:	1884b03a 	or	r2,r3,r2
    4998:	4886b03a 	or	r3,r9,r2
    499c:	30800104 	addi	r2,r6,4
    49a0:	18000926 	beq	r3,zero,49c8 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    49a4:	22001c0c 	andi	r8,r4,112
    49a8:	02400404 	movi	r9,16
    49ac:	42405726 	beq	r8,r9,4b0c <_ZL28read_encoded_value_with_basehjPKhPj+0x204>
    49b0:	21003fcc 	andi	r4,r4,255
    49b4:	2100201c 	xori	r4,r4,128
    49b8:	213fe004 	addi	r4,r4,-128
    49bc:	1947883a 	add	r3,r3,r5
    49c0:	2000010e 	bge	r4,zero,49c8 <_ZL28read_encoded_value_with_basehjPKhPj+0xc0>
    49c4:	18c00017 	ldw	r3,0(r3)
    49c8:	38c00015 	stw	r3,0(r7)
    49cc:	dfc00017 	ldw	ra,0(sp)
    49d0:	dec00104 	addi	sp,sp,4
    49d4:	f800283a 	ret
    49d8:	30800043 	ldbu	r2,1(r6)
    49dc:	30c00083 	ldbu	r3,2(r6)
    49e0:	324000c3 	ldbu	r9,3(r6)
    49e4:	32000003 	ldbu	r8,0(r6)
    49e8:	1004923a 	slli	r2,r2,8
    49ec:	1806943a 	slli	r3,r3,16
    49f0:	4812963a 	slli	r9,r9,24
    49f4:	1204b03a 	or	r2,r2,r8
    49f8:	1884b03a 	or	r2,r3,r2
    49fc:	4886b03a 	or	r3,r9,r2
    4a00:	30800204 	addi	r2,r6,8
    4a04:	003fe606 	br	49a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70049a0>
    4a08:	30c00043 	ldbu	r3,1(r6)
    4a0c:	32000003 	ldbu	r8,0(r6)
    4a10:	30800084 	addi	r2,r6,2
    4a14:	1806923a 	slli	r3,r3,8
    4a18:	1a06b03a 	or	r3,r3,r8
    4a1c:	18ffffcc 	andi	r3,r3,65535
    4a20:	18e0001c 	xori	r3,r3,32768
    4a24:	18e00004 	addi	r3,r3,-32768
    4a28:	003fdd06 	br	49a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70049a0>
    4a2c:	30c00003 	ldbu	r3,0(r6)
    4a30:	30800044 	addi	r2,r6,1
    4a34:	003fda06 	br	49a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70049a0>
    4a38:	3017883a 	mov	r11,r6
    4a3c:	0007883a 	mov	r3,zero
    4a40:	0013883a 	mov	r9,zero
    4a44:	5a800003 	ldbu	r10,0(r11)
    4a48:	58800044 	addi	r2,r11,1
    4a4c:	1017883a 	mov	r11,r2
    4a50:	52001fcc 	andi	r8,r10,127
    4a54:	4250983a 	sll	r8,r8,r9
    4a58:	53003fcc 	andi	r12,r10,255
    4a5c:	6300201c 	xori	r12,r12,128
    4a60:	633fe004 	addi	r12,r12,-128
    4a64:	1a06b03a 	or	r3,r3,r8
    4a68:	4a4001c4 	addi	r9,r9,7
    4a6c:	603ff516 	blt	r12,zero,4a44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004a44>
    4a70:	020007c4 	movi	r8,31
    4a74:	427fca36 	bltu	r8,r9,49a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70049a0>
    4a78:	5280100c 	andi	r10,r10,64
    4a7c:	503fc826 	beq	r10,zero,49a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70049a0>
    4a80:	023fffc4 	movi	r8,-1
    4a84:	4252983a 	sll	r9,r8,r9
    4a88:	1a46b03a 	or	r3,r3,r9
    4a8c:	003fc506 	br	49a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70049a4>
    4a90:	3017883a 	mov	r11,r6
    4a94:	0007883a 	mov	r3,zero
    4a98:	0015883a 	mov	r10,zero
    4a9c:	5a000003 	ldbu	r8,0(r11)
    4aa0:	58800044 	addi	r2,r11,1
    4aa4:	1017883a 	mov	r11,r2
    4aa8:	42401fcc 	andi	r9,r8,127
    4aac:	4a92983a 	sll	r9,r9,r10
    4ab0:	42003fcc 	andi	r8,r8,255
    4ab4:	4200201c 	xori	r8,r8,128
    4ab8:	423fe004 	addi	r8,r8,-128
    4abc:	1a46b03a 	or	r3,r3,r9
    4ac0:	528001c4 	addi	r10,r10,7
    4ac4:	403ff516 	blt	r8,zero,4a9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004a9c>
    4ac8:	003fb506 	br	49a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70049a0>
    4acc:	30c00043 	ldbu	r3,1(r6)
    4ad0:	32000003 	ldbu	r8,0(r6)
    4ad4:	30800084 	addi	r2,r6,2
    4ad8:	1806923a 	slli	r3,r3,8
    4adc:	1a06b03a 	or	r3,r3,r8
    4ae0:	003faf06 	br	49a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70049a0>
    4ae4:	000789c0 	call	789c <abort>
    4ae8:	308000c4 	addi	r2,r6,3
    4aec:	00ffff04 	movi	r3,-4
    4af0:	10c4703a 	and	r2,r2,r3
    4af4:	10c00017 	ldw	r3,0(r2)
    4af8:	10800104 	addi	r2,r2,4
    4afc:	38c00015 	stw	r3,0(r7)
    4b00:	dfc00017 	ldw	ra,0(sp)
    4b04:	dec00104 	addi	sp,sp,4
    4b08:	f800283a 	ret
    4b0c:	300b883a 	mov	r5,r6
    4b10:	003fa706 	br	49b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70049b0>

00004b14 <_ZL15get_ttype_entryP16lsda_header_infom>:
    4b14:	defffc04 	addi	sp,sp,-16
    4b18:	dfc00315 	stw	ra,12(sp)
    4b1c:	dc400215 	stw	r17,8(sp)
    4b20:	dc000115 	stw	r16,4(sp)
    4b24:	2021883a 	mov	r16,r4
    4b28:	21000503 	ldbu	r4,20(r4)
    4b2c:	2823883a 	mov	r17,r5
    4b30:	00048640 	call	4864 <_ZL21size_of_encoded_valueh>
    4b34:	1445383a 	mul	r2,r2,r17
    4b38:	81800317 	ldw	r6,12(r16)
    4b3c:	81400217 	ldw	r5,8(r16)
    4b40:	81000503 	ldbu	r4,20(r16)
    4b44:	d80f883a 	mov	r7,sp
    4b48:	308dc83a 	sub	r6,r6,r2
    4b4c:	00049080 	call	4908 <_ZL28read_encoded_value_with_basehjPKhPj>
    4b50:	d8800017 	ldw	r2,0(sp)
    4b54:	dfc00317 	ldw	ra,12(sp)
    4b58:	dc400217 	ldw	r17,8(sp)
    4b5c:	dc000117 	ldw	r16,4(sp)
    4b60:	dec00404 	addi	sp,sp,16
    4b64:	f800283a 	ret

00004b68 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
    4b68:	deffff04 	addi	sp,sp,-4
    4b6c:	dfc00015 	stw	ra,0(sp)
    4b70:	20c03fcc 	andi	r3,r4,255
    4b74:	00803fc4 	movi	r2,255
    4b78:	18800e26 	beq	r3,r2,4bb4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    4b7c:	20801c0c 	andi	r2,r4,112
    4b80:	00c00804 	movi	r3,32
    4b84:	10c01726 	beq	r2,r3,4be4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x7c>
    4b88:	18800e2e 	bgeu	r3,r2,4bc4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x5c>
    4b8c:	00c01004 	movi	r3,64
    4b90:	10c01026 	beq	r2,r3,4bd4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x6c>
    4b94:	00c01404 	movi	r3,80
    4b98:	10c00626 	beq	r2,r3,4bb4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x4c>
    4b9c:	00c00c04 	movi	r3,48
    4ba0:	10c00b1e 	bne	r2,r3,4bd0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
    4ba4:	2809883a 	mov	r4,r5
    4ba8:	dfc00017 	ldw	ra,0(sp)
    4bac:	dec00104 	addi	sp,sp,4
    4bb0:	00075f81 	jmpi	75f8 <_Unwind_GetDataRelBase>
    4bb4:	0005883a 	mov	r2,zero
    4bb8:	dfc00017 	ldw	ra,0(sp)
    4bbc:	dec00104 	addi	sp,sp,4
    4bc0:	f800283a 	ret
    4bc4:	103ffb26 	beq	r2,zero,4bb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004bb4>
    4bc8:	00c00404 	movi	r3,16
    4bcc:	10fff926 	beq	r2,r3,4bb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004bb4>
    4bd0:	000789c0 	call	789c <abort>
    4bd4:	2809883a 	mov	r4,r5
    4bd8:	dfc00017 	ldw	ra,0(sp)
    4bdc:	dec00104 	addi	sp,sp,4
    4be0:	00075e81 	jmpi	75e8 <_Unwind_GetRegionStart>
    4be4:	2809883a 	mov	r4,r5
    4be8:	dfc00017 	ldw	ra,0(sp)
    4bec:	dec00104 	addi	sp,sp,4
    4bf0:	00076001 	jmpi	7600 <_Unwind_GetTextRelBase>

00004bf4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
    4bf4:	defffb04 	addi	sp,sp,-20
    4bf8:	dcc00315 	stw	r19,12(sp)
    4bfc:	dc400115 	stw	r17,4(sp)
    4c00:	dc000015 	stw	r16,0(sp)
    4c04:	dfc00415 	stw	ra,16(sp)
    4c08:	dc800215 	stw	r18,8(sp)
    4c0c:	2027883a 	mov	r19,r4
    4c10:	2821883a 	mov	r16,r5
    4c14:	3023883a 	mov	r17,r6
    4c18:	20003f26 	beq	r4,zero,4d18 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x124>
    4c1c:	00075e80 	call	75e8 <_Unwind_GetRegionStart>
    4c20:	88800015 	stw	r2,0(r17)
    4c24:	84800003 	ldbu	r18,0(r16)
    4c28:	00c03fc4 	movi	r3,255
    4c2c:	84000044 	addi	r16,r16,1
    4c30:	90c03726 	beq	r18,r3,4d10 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x11c>
    4c34:	980b883a 	mov	r5,r19
    4c38:	9009883a 	mov	r4,r18
    4c3c:	0004b680 	call	4b68 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    4c40:	800d883a 	mov	r6,r16
    4c44:	89c00104 	addi	r7,r17,4
    4c48:	100b883a 	mov	r5,r2
    4c4c:	9009883a 	mov	r4,r18
    4c50:	00049080 	call	4908 <_ZL28read_encoded_value_with_basehjPKhPj>
    4c54:	1021883a 	mov	r16,r2
    4c58:	80c00003 	ldbu	r3,0(r16)
    4c5c:	01003fc4 	movi	r4,255
    4c60:	80800044 	addi	r2,r16,1
    4c64:	88c00505 	stb	r3,20(r17)
    4c68:	18c03fcc 	andi	r3,r3,255
    4c6c:	19002c26 	beq	r3,r4,4d20 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x12c>
    4c70:	100f883a 	mov	r7,r2
    4c74:	000d883a 	mov	r6,zero
    4c78:	000b883a 	mov	r5,zero
    4c7c:	38c00003 	ldbu	r3,0(r7)
    4c80:	10800044 	addi	r2,r2,1
    4c84:	100f883a 	mov	r7,r2
    4c88:	19001fcc 	andi	r4,r3,127
    4c8c:	2148983a 	sll	r4,r4,r5
    4c90:	18c03fcc 	andi	r3,r3,255
    4c94:	18c0201c 	xori	r3,r3,128
    4c98:	18ffe004 	addi	r3,r3,-128
    4c9c:	310cb03a 	or	r6,r6,r4
    4ca0:	294001c4 	addi	r5,r5,7
    4ca4:	183ff516 	blt	r3,zero,4c7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004c7c>
    4ca8:	118d883a 	add	r6,r2,r6
    4cac:	89800315 	stw	r6,12(r17)
    4cb0:	10c00003 	ldbu	r3,0(r2)
    4cb4:	000d883a 	mov	r6,zero
    4cb8:	10800044 	addi	r2,r2,1
    4cbc:	88c00545 	stb	r3,21(r17)
    4cc0:	000b883a 	mov	r5,zero
    4cc4:	10c00003 	ldbu	r3,0(r2)
    4cc8:	10800044 	addi	r2,r2,1
    4ccc:	19001fcc 	andi	r4,r3,127
    4cd0:	2148983a 	sll	r4,r4,r5
    4cd4:	18c03fcc 	andi	r3,r3,255
    4cd8:	18c0201c 	xori	r3,r3,128
    4cdc:	18ffe004 	addi	r3,r3,-128
    4ce0:	310cb03a 	or	r6,r6,r4
    4ce4:	294001c4 	addi	r5,r5,7
    4ce8:	183ff616 	blt	r3,zero,4cc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004cc4>
    4cec:	118d883a 	add	r6,r2,r6
    4cf0:	89800415 	stw	r6,16(r17)
    4cf4:	dfc00417 	ldw	ra,16(sp)
    4cf8:	dcc00317 	ldw	r19,12(sp)
    4cfc:	dc800217 	ldw	r18,8(sp)
    4d00:	dc400117 	ldw	r17,4(sp)
    4d04:	dc000017 	ldw	r16,0(sp)
    4d08:	dec00504 	addi	sp,sp,20
    4d0c:	f800283a 	ret
    4d10:	88800115 	stw	r2,4(r17)
    4d14:	003fd006 	br	4c58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004c58>
    4d18:	0005883a 	mov	r2,zero
    4d1c:	003fc006 	br	4c20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004c20>
    4d20:	88000315 	stw	zero,12(r17)
    4d24:	003fe206 	br	4cb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004cb0>

00004d28 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
    4d28:	28800017 	ldw	r2,0(r5)
    4d2c:	30c00017 	ldw	r3,0(r6)
    4d30:	defffb04 	addi	sp,sp,-20
    4d34:	10800217 	ldw	r2,8(r2)
    4d38:	dc400315 	stw	r17,12(sp)
    4d3c:	dc000215 	stw	r16,8(sp)
    4d40:	d9400115 	stw	r5,4(sp)
    4d44:	dfc00415 	stw	ra,16(sp)
    4d48:	2021883a 	mov	r16,r4
    4d4c:	d8c00015 	stw	r3,0(sp)
    4d50:	2809883a 	mov	r4,r5
    4d54:	3023883a 	mov	r17,r6
    4d58:	103ee83a 	callr	r2
    4d5c:	10803fcc 	andi	r2,r2,255
    4d60:	d9400117 	ldw	r5,4(sp)
    4d64:	10000326 	beq	r2,zero,4d74 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x4c>
    4d68:	d8800017 	ldw	r2,0(sp)
    4d6c:	10800017 	ldw	r2,0(r2)
    4d70:	d8800015 	stw	r2,0(sp)
    4d74:	80800017 	ldw	r2,0(r16)
    4d78:	01c00044 	movi	r7,1
    4d7c:	d80d883a 	mov	r6,sp
    4d80:	10800417 	ldw	r2,16(r2)
    4d84:	8009883a 	mov	r4,r16
    4d88:	103ee83a 	callr	r2
    4d8c:	10c03fcc 	andi	r3,r2,255
    4d90:	18000226 	beq	r3,zero,4d9c <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x74>
    4d94:	d8c00017 	ldw	r3,0(sp)
    4d98:	88c00015 	stw	r3,0(r17)
    4d9c:	dfc00417 	ldw	ra,16(sp)
    4da0:	dc400317 	ldw	r17,12(sp)
    4da4:	dc000217 	ldw	r16,8(sp)
    4da8:	dec00504 	addi	sp,sp,20
    4dac:	f800283a 	ret

00004db0 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
    4db0:	defff604 	addi	sp,sp,-40
    4db4:	dc000415 	stw	r16,16(sp)
    4db8:	3821d23a 	srai	r16,r7,8
    4dbc:	dc800615 	stw	r18,24(sp)
    4dc0:	dc400515 	stw	r17,20(sp)
    4dc4:	dfc00915 	stw	ra,36(sp)
    4dc8:	dd000815 	stw	r20,32(sp)
    4dcc:	dcc00715 	stw	r19,28(sp)
    4dd0:	d9400215 	stw	r5,8(sp)
    4dd4:	3825883a 	mov	r18,r7
    4dd8:	2023883a 	mov	r17,r4
    4ddc:	8000010e 	bge	r16,zero,4de4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x34>
    4de0:	0421c83a 	sub	r16,zero,r16
    4de4:	000b883a 	mov	r5,zero
    4de8:	01000144 	movi	r4,5
    4dec:	d9800315 	stw	r6,12(sp)
    4df0:	0004b680 	call	4b68 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    4df4:	d9800317 	ldw	r6,12(sp)
    4df8:	d9c00104 	addi	r7,sp,4
    4dfc:	100b883a 	mov	r5,r2
    4e00:	01000144 	movi	r4,5
    4e04:	00049080 	call	4908 <_ZL28read_encoded_value_with_basehjPKhPj>
    4e08:	11fffe64 	muli	r7,r2,-7
    4e0c:	0007883a 	mov	r3,zero
    4e10:	11400003 	ldbu	r5,0(r2)
    4e14:	110001e4 	muli	r4,r2,7
    4e18:	10800044 	addi	r2,r2,1
    4e1c:	29801fcc 	andi	r6,r5,127
    4e20:	21c9883a 	add	r4,r4,r7
    4e24:	3108983a 	sll	r4,r6,r4
    4e28:	29403fcc 	andi	r5,r5,255
    4e2c:	2940201c 	xori	r5,r5,128
    4e30:	297fe004 	addi	r5,r5,-128
    4e34:	1906b03a 	or	r3,r3,r4
    4e38:	283ff516 	blt	r5,zero,4e10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004e10>
    4e3c:	10c5883a 	add	r2,r2,r3
    4e40:	11fffe64 	muli	r7,r2,-7
    4e44:	0009883a 	mov	r4,zero
    4e48:	11400003 	ldbu	r5,0(r2)
    4e4c:	10c001e4 	muli	r3,r2,7
    4e50:	10800044 	addi	r2,r2,1
    4e54:	29801fcc 	andi	r6,r5,127
    4e58:	19c7883a 	add	r3,r3,r7
    4e5c:	30c6983a 	sll	r3,r6,r3
    4e60:	29403fcc 	andi	r5,r5,255
    4e64:	2940201c 	xori	r5,r5,128
    4e68:	297fe004 	addi	r5,r5,-128
    4e6c:	20c8b03a 	or	r4,r4,r3
    4e70:	283ff516 	blt	r5,zero,4e48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004e48>
    4e74:	80c03fcc 	andi	r3,r16,255
    4e78:	18ffffc4 	addi	r3,r3,-1
    4e7c:	10c7883a 	add	r3,r2,r3
    4e80:	210000c4 	addi	r4,r4,3
    4e84:	197ffe64 	muli	r5,r3,-7
    4e88:	2085883a 	add	r2,r4,r2
    4e8c:	04ffff04 	movi	r19,-4
    4e90:	14e6703a 	and	r19,r2,r19
    4e94:	0021883a 	mov	r16,zero
    4e98:	18800003 	ldbu	r2,0(r3)
    4e9c:	190001e4 	muli	r4,r3,7
    4ea0:	1d000044 	addi	r20,r3,1
    4ea4:	10c01fcc 	andi	r3,r2,127
    4ea8:	2149883a 	add	r4,r4,r5
    4eac:	1908983a 	sll	r4,r3,r4
    4eb0:	10803fcc 	andi	r2,r2,255
    4eb4:	1080201c 	xori	r2,r2,128
    4eb8:	10bfe004 	addi	r2,r2,-128
    4ebc:	a007883a 	mov	r3,r20
    4ec0:	8120b03a 	or	r16,r16,r4
    4ec4:	103ff416 	blt	r2,zero,4e98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004e98>
    4ec8:	94803fcc 	andi	r18,r18,255
    4ecc:	80001f26 	beq	r16,zero,4f4c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x19c>
    4ed0:	9009883a 	mov	r4,r18
    4ed4:	00048640 	call	4864 <_ZL21size_of_encoded_valueh>
    4ed8:	81bfffc4 	addi	r6,r16,-1
    4edc:	308d383a 	mul	r6,r6,r2
    4ee0:	d9400a17 	ldw	r5,40(sp)
    4ee4:	d80f883a 	mov	r7,sp
    4ee8:	9009883a 	mov	r4,r18
    4eec:	34cd883a 	add	r6,r6,r19
    4ef0:	00049080 	call	4908 <_ZL28read_encoded_value_with_basehjPKhPj>
    4ef4:	d9000017 	ldw	r4,0(sp)
    4ef8:	d9800204 	addi	r6,sp,8
    4efc:	880b883a 	mov	r5,r17
    4f00:	0004d280 	call	4d28 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    4f04:	10c03fcc 	andi	r3,r2,255
    4f08:	1800111e 	bne	r3,zero,4f50 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1a0>
    4f0c:	a17ffe64 	muli	r5,r20,-7
    4f10:	a007883a 	mov	r3,r20
    4f14:	0021883a 	mov	r16,zero
    4f18:	19000003 	ldbu	r4,0(r3)
    4f1c:	18c001e4 	muli	r3,r3,7
    4f20:	a5000044 	addi	r20,r20,1
    4f24:	20801fcc 	andi	r2,r4,127
    4f28:	1947883a 	add	r3,r3,r5
    4f2c:	10c4983a 	sll	r2,r2,r3
    4f30:	21003fcc 	andi	r4,r4,255
    4f34:	2100201c 	xori	r4,r4,128
    4f38:	213fe004 	addi	r4,r4,-128
    4f3c:	a007883a 	mov	r3,r20
    4f40:	80a0b03a 	or	r16,r16,r2
    4f44:	203ff416 	blt	r4,zero,4f18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004f18>
    4f48:	003fe006 	br	4ecc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004ecc>
    4f4c:	0005883a 	mov	r2,zero
    4f50:	dfc00917 	ldw	ra,36(sp)
    4f54:	dd000817 	ldw	r20,32(sp)
    4f58:	dcc00717 	ldw	r19,28(sp)
    4f5c:	dc800617 	ldw	r18,24(sp)
    4f60:	dc400517 	ldw	r17,20(sp)
    4f64:	dc000417 	ldw	r16,16(sp)
    4f68:	dec00a04 	addi	sp,sp,40
    4f6c:	f800283a 	ret

00004f70 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
    4f70:	defffb04 	addi	sp,sp,-20
    4f74:	dc000115 	stw	r16,4(sp)
    4f78:	24000317 	ldw	r16,12(r4)
    4f7c:	01ce303a 	nor	r7,zero,r7
    4f80:	dc800315 	stw	r18,12(sp)
    4f84:	dc400215 	stw	r17,8(sp)
    4f88:	dfc00415 	stw	ra,16(sp)
    4f8c:	2023883a 	mov	r17,r4
    4f90:	2825883a 	mov	r18,r5
    4f94:	d9800015 	stw	r6,0(sp)
    4f98:	81e1883a 	add	r16,r16,r7
    4f9c:	800d883a 	mov	r6,r16
    4fa0:	000b883a 	mov	r5,zero
    4fa4:	0009883a 	mov	r4,zero
    4fa8:	30800003 	ldbu	r2,0(r6)
    4fac:	84000044 	addi	r16,r16,1
    4fb0:	800d883a 	mov	r6,r16
    4fb4:	10c01fcc 	andi	r3,r2,127
    4fb8:	1906983a 	sll	r3,r3,r4
    4fbc:	10803fcc 	andi	r2,r2,255
    4fc0:	1080201c 	xori	r2,r2,128
    4fc4:	10bfe004 	addi	r2,r2,-128
    4fc8:	28cab03a 	or	r5,r5,r3
    4fcc:	210001c4 	addi	r4,r4,7
    4fd0:	103ff516 	blt	r2,zero,4fa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004fa8>
    4fd4:	28000e26 	beq	r5,zero,5010 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xa0>
    4fd8:	8809883a 	mov	r4,r17
    4fdc:	0004b140 	call	4b14 <_ZL15get_ttype_entryP16lsda_header_infom>
    4fe0:	d80d883a 	mov	r6,sp
    4fe4:	900b883a 	mov	r5,r18
    4fe8:	1009883a 	mov	r4,r2
    4fec:	0004d280 	call	4d28 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    4ff0:	10c03fcc 	andi	r3,r2,255
    4ff4:	183fe926 	beq	r3,zero,4f9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004f9c>
    4ff8:	dfc00417 	ldw	ra,16(sp)
    4ffc:	dc800317 	ldw	r18,12(sp)
    5000:	dc400217 	ldw	r17,8(sp)
    5004:	dc000117 	ldw	r16,4(sp)
    5008:	dec00504 	addi	sp,sp,20
    500c:	f800283a 	ret
    5010:	0005883a 	mov	r2,zero
    5014:	003ff806 	br	4ff8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7004ff8>

00005018 <__gxx_personality_sj0>:
    5018:	00800034 	movhi	r2,0
    501c:	deffdd04 	addi	sp,sp,-140
    5020:	10940604 	addi	r2,r2,20504
    5024:	d8800e15 	stw	r2,56(sp)
    5028:	008000b4 	movhi	r2,2
    502c:	108d3a04 	addi	r2,r2,13544
    5030:	d8800f15 	stw	r2,60(sp)
    5034:	00800034 	movhi	r2,0
    5038:	10957c04 	addi	r2,r2,22000
    503c:	d9001515 	stw	r4,84(sp)
    5040:	d9000804 	addi	r4,sp,32
    5044:	d8801115 	stw	r2,68(sp)
    5048:	dfc02215 	stw	ra,136(sp)
    504c:	df002115 	stw	fp,132(sp)
    5050:	dec01015 	stw	sp,64(sp)
    5054:	dec01215 	stw	sp,72(sp)
    5058:	d9401915 	stw	r5,100(sp)
    505c:	d9801615 	stw	r6,88(sp)
    5060:	d9c01715 	stw	r7,92(sp)
    5064:	00075200 	call	7520 <_Unwind_SjLj_Register>
    5068:	d8c01517 	ldw	r3,84(sp)
    506c:	d8000715 	stw	zero,28(sp)
    5070:	d8000615 	stw	zero,24(sp)
    5074:	00800044 	movi	r2,1
    5078:	18800926 	beq	r3,r2,50a0 <__gxx_personality_sj0+0x88>
    507c:	01c000c4 	movi	r7,3
    5080:	d9c01515 	stw	r7,84(sp)
    5084:	d9000804 	addi	r4,sp,32
    5088:	00075380 	call	7538 <_Unwind_SjLj_Unregister>
    508c:	d8801517 	ldw	r2,84(sp)
    5090:	dfc02217 	ldw	ra,136(sp)
    5094:	df002117 	ldw	fp,132(sp)
    5098:	dec02304 	addi	sp,sp,140
    509c:	f800283a 	ret
    50a0:	d9001617 	ldw	r4,88(sp)
    50a4:	00af3574 	movhi	r2,48341
    50a8:	d9c01717 	ldw	r7,92(sp)
    50ac:	10b54004 	addi	r2,r2,-11008
    50b0:	00ee2cb4 	movhi	r3,47282
    50b4:	2085883a 	add	r2,r4,r2
    50b8:	18eaaf04 	addi	r3,r3,-21828
    50bc:	d8801b15 	stw	r2,108(sp)
    50c0:	38c7883a 	add	r3,r7,r3
    50c4:	1105803a 	cmpltu	r2,r2,r4
    50c8:	10c7883a 	add	r3,r2,r3
    50cc:	d8c01c15 	stw	r3,112(sp)
    50d0:	d8c01917 	ldw	r3,100(sp)
    50d4:	00800184 	movi	r2,6
    50d8:	18805426 	beq	r3,r2,522c <__gxx_personality_sj0+0x214>
    50dc:	d9002417 	ldw	r4,144(sp)
    50e0:	00bfffc4 	movi	r2,-1
    50e4:	d8800915 	stw	r2,36(sp)
    50e8:	00075dc0 	call	75dc <_Unwind_GetLanguageSpecificData>
    50ec:	d8801a15 	stw	r2,104(sp)
    50f0:	1000c926 	beq	r2,zero,5418 <__gxx_personality_sj0+0x400>
    50f4:	d9002417 	ldw	r4,144(sp)
    50f8:	d80d883a 	mov	r6,sp
    50fc:	100b883a 	mov	r5,r2
    5100:	0004bf40 	call	4bf4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    5104:	d9402417 	ldw	r5,144(sp)
    5108:	d9000503 	ldbu	r4,20(sp)
    510c:	d8801515 	stw	r2,84(sp)
    5110:	0004b680 	call	4b68 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    5114:	d9002417 	ldw	r4,144(sp)
    5118:	d9400604 	addi	r5,sp,24
    511c:	d8800215 	stw	r2,8(sp)
    5120:	00075ac0 	call	75ac <_Unwind_GetIPInfo>
    5124:	d8c00617 	ldw	r3,24(sp)
    5128:	18006126 	beq	r3,zero,52b0 <__gxx_personality_sj0+0x298>
    512c:	1000ba16 	blt	r2,zero,5418 <__gxx_personality_sj0+0x400>
    5130:	10002f1e 	bne	r2,zero,51f0 <__gxx_personality_sj0+0x1d8>
    5134:	d8001515 	stw	zero,84(sp)
    5138:	d8001f15 	stw	zero,124(sp)
    513c:	d8001815 	stw	zero,96(sp)
    5140:	00c00044 	movi	r3,1
    5144:	d9001917 	ldw	r4,100(sp)
    5148:	2080004c 	andi	r2,r4,1
    514c:	1000b51e 	bne	r2,zero,5424 <__gxx_personality_sj0+0x40c>
    5150:	d9001917 	ldw	r4,100(sp)
    5154:	2080020c 	andi	r2,r4,8
    5158:	1000b71e 	bne	r2,zero,5438 <__gxx_personality_sj0+0x420>
    515c:	d9c01c17 	ldw	r7,112(sp)
    5160:	3800b826 	beq	r7,zero,5444 <__gxx_personality_sj0+0x42c>
    5164:	00800044 	movi	r2,1
    5168:	1880b526 	beq	r3,r2,5440 <__gxx_personality_sj0+0x428>
    516c:	d9c01517 	ldw	r7,84(sp)
    5170:	3800f516 	blt	r7,zero,5548 <__gxx_personality_sj0+0x530>
    5174:	d9002417 	ldw	r4,144(sp)
    5178:	d9802317 	ldw	r6,140(sp)
    517c:	00bfffc4 	movi	r2,-1
    5180:	000b883a 	mov	r5,zero
    5184:	d8800915 	stw	r2,36(sp)
    5188:	00075800 	call	7580 <_Unwind_SetGR>
    518c:	d9801517 	ldw	r6,84(sp)
    5190:	d9002417 	ldw	r4,144(sp)
    5194:	01400044 	movi	r5,1
    5198:	00075800 	call	7580 <_Unwind_SetGR>
    519c:	d9002417 	ldw	r4,144(sp)
    51a0:	d9401f17 	ldw	r5,124(sp)
    51a4:	00075cc0 	call	75cc <_Unwind_SetIP>
    51a8:	010001c4 	movi	r4,7
    51ac:	d9001515 	stw	r4,84(sp)
    51b0:	003fb406 	br	5084 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005084>
    51b4:	000f883a 	mov	r7,zero
    51b8:	000d883a 	mov	r6,zero
    51bc:	19000003 	ldbu	r4,0(r3)
    51c0:	18c00044 	addi	r3,r3,1
    51c4:	d8c01515 	stw	r3,84(sp)
    51c8:	21401fcc 	andi	r5,r4,127
    51cc:	298a983a 	sll	r5,r5,r6
    51d0:	21003fcc 	andi	r4,r4,255
    51d4:	2100201c 	xori	r4,r4,128
    51d8:	213fe004 	addi	r4,r4,-128
    51dc:	394eb03a 	or	r7,r7,r5
    51e0:	318001c4 	addi	r6,r6,7
    51e4:	203ff516 	blt	r4,zero,51bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70051bc>
    51e8:	10bfffc4 	addi	r2,r2,-1
    51ec:	10003226 	beq	r2,zero,52b8 <__gxx_personality_sj0+0x2a0>
    51f0:	d9c01517 	ldw	r7,84(sp)
    51f4:	0011883a 	mov	r8,zero
    51f8:	000d883a 	mov	r6,zero
    51fc:	39000003 	ldbu	r4,0(r7)
    5200:	38c00044 	addi	r3,r7,1
    5204:	180f883a 	mov	r7,r3
    5208:	21401fcc 	andi	r5,r4,127
    520c:	298a983a 	sll	r5,r5,r6
    5210:	21003fcc 	andi	r4,r4,255
    5214:	2100201c 	xori	r4,r4,128
    5218:	213fe004 	addi	r4,r4,-128
    521c:	4150b03a 	or	r8,r8,r5
    5220:	318001c4 	addi	r6,r6,7
    5224:	203ff516 	blt	r4,zero,51fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70051fc>
    5228:	003fe206 	br	51b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70051b4>
    522c:	d9001c17 	ldw	r4,112(sp)
    5230:	203faa1e 	bne	r4,zero,50dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70050dc>
    5234:	d9c01517 	ldw	r7,84(sp)
    5238:	d8801b17 	ldw	r2,108(sp)
    523c:	38bfa736 	bltu	r7,r2,50dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70050dc>
    5240:	d8c02317 	ldw	r3,140(sp)
    5244:	18fffe17 	ldw	r3,-8(r3)
    5248:	d8c01f15 	stw	r3,124(sp)
    524c:	18008226 	beq	r3,zero,5458 <__gxx_personality_sj0+0x440>
    5250:	d9002317 	ldw	r4,140(sp)
    5254:	d9c02317 	ldw	r7,140(sp)
    5258:	213ffb17 	ldw	r4,-20(r4)
    525c:	39fffd17 	ldw	r7,-12(r7)
    5260:	d9001515 	stw	r4,84(sp)
    5264:	d9c01a15 	stw	r7,104(sp)
    5268:	d8801517 	ldw	r2,84(sp)
    526c:	103fc10e 	bge	r2,zero,5174 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005174>
    5270:	d9002417 	ldw	r4,144(sp)
    5274:	d9401a17 	ldw	r5,104(sp)
    5278:	d80d883a 	mov	r6,sp
    527c:	00bfffc4 	movi	r2,-1
    5280:	d8800915 	stw	r2,36(sp)
    5284:	0004bf40 	call	4bf4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    5288:	d9402417 	ldw	r5,144(sp)
    528c:	d9000503 	ldbu	r4,20(sp)
    5290:	0004b680 	call	4b68 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    5294:	d9000503 	ldbu	r4,20(sp)
    5298:	d9402417 	ldw	r5,144(sp)
    529c:	d8800215 	stw	r2,8(sp)
    52a0:	0004b680 	call	4b68 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
    52a4:	d8c02317 	ldw	r3,140(sp)
    52a8:	18bffe15 	stw	r2,-8(r3)
    52ac:	003fb106 	br	5174 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005174>
    52b0:	10bfffc4 	addi	r2,r2,-1
    52b4:	003f9d06 	br	512c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700512c>
    52b8:	42000044 	addi	r8,r8,1
    52bc:	da001f15 	stw	r8,124(sp)
    52c0:	38005326 	beq	r7,zero,5410 <__gxx_personality_sj0+0x3f8>
    52c4:	d8800417 	ldw	r2,16(sp)
    52c8:	39ffffc4 	addi	r7,r7,-1
    52cc:	11c5883a 	add	r2,r2,r7
    52d0:	d8801815 	stw	r2,96(sp)
    52d4:	40005026 	beq	r8,zero,5418 <__gxx_personality_sj0+0x400>
    52d8:	10007426 	beq	r2,zero,54ac <__gxx_personality_sj0+0x494>
    52dc:	d8801917 	ldw	r2,100(sp)
    52e0:	1080020c 	andi	r2,r2,8
    52e4:	d8802015 	stw	r2,128(sp)
    52e8:	1000a21e 	bne	r2,zero,5574 <__gxx_personality_sj0+0x55c>
    52ec:	d8c01c17 	ldw	r3,112(sp)
    52f0:	1800b026 	beq	r3,zero,55b4 <__gxx_personality_sj0+0x59c>
    52f4:	01c000b4 	movhi	r7,2
    52f8:	39dbcb04 	addi	r7,r7,28460
    52fc:	d9c01e15 	stw	r7,120(sp)
    5300:	d8001d05 	stb	zero,116(sp)
    5304:	d8c01817 	ldw	r3,96(sp)
    5308:	d8001515 	stw	zero,84(sp)
    530c:	0009883a 	mov	r4,zero
    5310:	19400003 	ldbu	r5,0(r3)
    5314:	18800044 	addi	r2,r3,1
    5318:	d9c01517 	ldw	r7,84(sp)
    531c:	28c01fcc 	andi	r3,r5,127
    5320:	1906983a 	sll	r3,r3,r4
    5324:	29803fcc 	andi	r6,r5,255
    5328:	3180201c 	xori	r6,r6,128
    532c:	38ceb03a 	or	r7,r7,r3
    5330:	d8801715 	stw	r2,92(sp)
    5334:	31bfe004 	addi	r6,r6,-128
    5338:	d9c01515 	stw	r7,84(sp)
    533c:	210001c4 	addi	r4,r4,7
    5340:	1007883a 	mov	r3,r2
    5344:	303ff216 	blt	r6,zero,5310 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005310>
    5348:	00c007c4 	movi	r3,31
    534c:	19000836 	bltu	r3,r4,5370 <__gxx_personality_sj0+0x358>
    5350:	2940100c 	andi	r5,r5,64
    5354:	28000626 	beq	r5,zero,5370 <__gxx_personality_sj0+0x358>
    5358:	01c00044 	movi	r7,1
    535c:	3908983a 	sll	r4,r7,r4
    5360:	d8c01517 	ldw	r3,84(sp)
    5364:	0109c83a 	sub	r4,zero,r4
    5368:	1906b03a 	or	r3,r3,r4
    536c:	d8c01515 	stw	r3,84(sp)
    5370:	d8001615 	stw	zero,88(sp)
    5374:	0009883a 	mov	r4,zero
    5378:	11400003 	ldbu	r5,0(r2)
    537c:	d9c01617 	ldw	r7,88(sp)
    5380:	10800044 	addi	r2,r2,1
    5384:	28c01fcc 	andi	r3,r5,127
    5388:	1906983a 	sll	r3,r3,r4
    538c:	29803fcc 	andi	r6,r5,255
    5390:	3180201c 	xori	r6,r6,128
    5394:	38ceb03a 	or	r7,r7,r3
    5398:	31bfe004 	addi	r6,r6,-128
    539c:	d9c01615 	stw	r7,88(sp)
    53a0:	210001c4 	addi	r4,r4,7
    53a4:	303ff416 	blt	r6,zero,5378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005378>
    53a8:	008007c4 	movi	r2,31
    53ac:	11000736 	bltu	r2,r4,53cc <__gxx_personality_sj0+0x3b4>
    53b0:	2940100c 	andi	r5,r5,64
    53b4:	28000526 	beq	r5,zero,53cc <__gxx_personality_sj0+0x3b4>
    53b8:	00c00044 	movi	r3,1
    53bc:	1908983a 	sll	r4,r3,r4
    53c0:	0109c83a 	sub	r4,zero,r4
    53c4:	390eb03a 	or	r7,r7,r4
    53c8:	d9c01615 	stw	r7,88(sp)
    53cc:	d9001517 	ldw	r4,84(sp)
    53d0:	20003c26 	beq	r4,zero,54c4 <__gxx_personality_sj0+0x4ac>
    53d4:	01003e0e 	bge	zero,r4,54d0 <__gxx_personality_sj0+0x4b8>
    53d8:	01ffffc4 	movi	r7,-1
    53dc:	200b883a 	mov	r5,r4
    53e0:	d809883a 	mov	r4,sp
    53e4:	d9c00915 	stw	r7,36(sp)
    53e8:	0004b140 	call	4b14 <_ZL15get_ttype_entryP16lsda_header_infom>
    53ec:	10005f26 	beq	r2,zero,556c <__gxx_personality_sj0+0x554>
    53f0:	d8c01e17 	ldw	r3,120(sp)
    53f4:	1800571e 	bne	r3,zero,5554 <__gxx_personality_sj0+0x53c>
    53f8:	d9001617 	ldw	r4,88(sp)
    53fc:	20002926 	beq	r4,zero,54a4 <__gxx_personality_sj0+0x48c>
    5400:	d9c01717 	ldw	r7,92(sp)
    5404:	390f883a 	add	r7,r7,r4
    5408:	d9c01815 	stw	r7,96(sp)
    540c:	003fbd06 	br	5304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005304>
    5410:	d8c01f17 	ldw	r3,124(sp)
    5414:	1800251e 	bne	r3,zero,54ac <__gxx_personality_sj0+0x494>
    5418:	01000204 	movi	r4,8
    541c:	d9001515 	stw	r4,84(sp)
    5420:	003f1806 	br	5084 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005084>
    5424:	d8801c17 	ldw	r2,112(sp)
    5428:	10000d26 	beq	r2,zero,5460 <__gxx_personality_sj0+0x448>
    542c:	00800184 	movi	r2,6
    5430:	d8801515 	stw	r2,84(sp)
    5434:	003f1306 	br	5084 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005084>
    5438:	00800044 	movi	r2,1
    543c:	18bf4d1e 	bne	r3,r2,5174 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005174>
    5440:	00047dc0 	call	47dc <_ZSt9terminatev>
    5444:	d9001b17 	ldw	r4,108(sp)
    5448:	00800044 	movi	r2,1
    544c:	113f4536 	bltu	r2,r4,5164 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005164>
    5450:	00800044 	movi	r2,1
    5454:	18bf841e 	bne	r3,r2,5268 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005268>
    5458:	d9002317 	ldw	r4,140(sp)
    545c:	0005b300 	call	5b30 <__cxa_call_terminate>
    5460:	d8c01b17 	ldw	r3,108(sp)
    5464:	00800044 	movi	r2,1
    5468:	10fff036 	bltu	r2,r3,542c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700542c>
    546c:	d9002317 	ldw	r4,140(sp)
    5470:	d8801817 	ldw	r2,96(sp)
    5474:	d9c01517 	ldw	r7,84(sp)
    5478:	d8c01a17 	ldw	r3,104(sp)
    547c:	20bffc15 	stw	r2,-16(r4)
    5480:	d8800717 	ldw	r2,28(sp)
    5484:	21fffb15 	stw	r7,-20(r4)
    5488:	d9c01f17 	ldw	r7,124(sp)
    548c:	20bfff15 	stw	r2,-4(r4)
    5490:	00800184 	movi	r2,6
    5494:	20fffd15 	stw	r3,-12(r4)
    5498:	21fffe15 	stw	r7,-8(r4)
    549c:	d8801515 	stw	r2,84(sp)
    54a0:	003ef806 	br	5084 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005084>
    54a4:	d8801d03 	ldbu	r2,116(sp)
    54a8:	103fdb26 	beq	r2,zero,5418 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005418>
    54ac:	d8c01917 	ldw	r3,100(sp)
    54b0:	1880004c 	andi	r2,r3,1
    54b4:	103fd81e 	bne	r2,zero,5418 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005418>
    54b8:	d8001515 	stw	zero,84(sp)
    54bc:	00c00084 	movi	r3,2
    54c0:	003f2306 	br	5150 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005150>
    54c4:	00c00044 	movi	r3,1
    54c8:	d8c01d05 	stb	r3,116(sp)
    54cc:	003fca06 	br	53f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70053f8>
    54d0:	d9001e17 	ldw	r4,120(sp)
    54d4:	20000426 	beq	r4,zero,54e8 <__gxx_personality_sj0+0x4d0>
    54d8:	d9c02017 	ldw	r7,128(sp)
    54dc:	3800021e 	bne	r7,zero,54e8 <__gxx_personality_sj0+0x4d0>
    54e0:	d8801c17 	ldw	r2,112(sp)
    54e4:	10002726 	beq	r2,zero,5584 <__gxx_personality_sj0+0x56c>
    54e8:	d8801517 	ldw	r2,84(sp)
    54ec:	000d883a 	mov	r6,zero
    54f0:	000b883a 	mov	r5,zero
    54f4:	0088303a 	nor	r4,zero,r2
    54f8:	d8800317 	ldw	r2,12(sp)
    54fc:	1109883a 	add	r4,r2,r4
    5500:	20800003 	ldbu	r2,0(r4)
    5504:	21000044 	addi	r4,r4,1
    5508:	10c01fcc 	andi	r3,r2,127
    550c:	1946983a 	sll	r3,r3,r5
    5510:	10803fcc 	andi	r2,r2,255
    5514:	1080201c 	xori	r2,r2,128
    5518:	10bfe004 	addi	r2,r2,-128
    551c:	30ccb03a 	or	r6,r6,r3
    5520:	294001c4 	addi	r5,r5,7
    5524:	103ff616 	blt	r2,zero,5500 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005500>
    5528:	3005003a 	cmpeq	r2,r6,zero
    552c:	10803fcc 	andi	r2,r2,255
    5530:	103fb126 	beq	r2,zero,53f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70053f8>
    5534:	d9c01917 	ldw	r7,100(sp)
    5538:	3880004c 	andi	r2,r7,1
    553c:	103fb91e 	bne	r2,zero,5424 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005424>
    5540:	d8802017 	ldw	r2,128(sp)
    5544:	10002d26 	beq	r2,zero,55fc <__gxx_personality_sj0+0x5e4>
    5548:	00800044 	movi	r2,1
    554c:	d8800915 	stw	r2,36(sp)
    5550:	00048040 	call	4804 <_ZSt10unexpectedv>
    5554:	d9800704 	addi	r6,sp,28
    5558:	180b883a 	mov	r5,r3
    555c:	1009883a 	mov	r4,r2
    5560:	0004d280 	call	4d28 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
    5564:	10803fcc 	andi	r2,r2,255
    5568:	103fa326 	beq	r2,zero,53f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70053f8>
    556c:	00c000c4 	movi	r3,3
    5570:	003ef406 	br	5144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005144>
    5574:	010000b4 	movhi	r4,2
    5578:	211bc904 	addi	r4,r4,28452
    557c:	d9001e15 	stw	r4,120(sp)
    5580:	003f5f06 	br	5300 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005300>
    5584:	d9001b17 	ldw	r4,108(sp)
    5588:	00c00044 	movi	r3,1
    558c:	193fd636 	bltu	r3,r4,54e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70054e8>
    5590:	01ffffc4 	movi	r7,-1
    5594:	d9c00915 	stw	r7,36(sp)
    5598:	d9800717 	ldw	r6,28(sp)
    559c:	d9c01517 	ldw	r7,84(sp)
    55a0:	d9401e17 	ldw	r5,120(sp)
    55a4:	d809883a 	mov	r4,sp
    55a8:	0004f700 	call	4f70 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    55ac:	1080005c 	xori	r2,r2,1
    55b0:	003fde06 	br	552c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700552c>
    55b4:	d9001b17 	ldw	r4,108(sp)
    55b8:	00800044 	movi	r2,1
    55bc:	113f4d36 	bltu	r2,r4,52f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70052f4>
    55c0:	d9c02317 	ldw	r7,140(sp)
    55c4:	38800017 	ldw	r2,0(r7)
    55c8:	1080004c 	andi	r2,r2,1
    55cc:	1000061e 	bne	r2,zero,55e8 <__gxx_personality_sj0+0x5d0>
    55d0:	d8c02317 	ldw	r3,140(sp)
    55d4:	18800504 	addi	r2,r3,20
    55d8:	d8800715 	stw	r2,28(sp)
    55dc:	10bff017 	ldw	r2,-64(r2)
    55e0:	d8801e15 	stw	r2,120(sp)
    55e4:	003f4606 	br	5300 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005300>
    55e8:	38bff517 	ldw	r2,-44(r7)
    55ec:	003ffa06 	br	55d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70055d8>
    55f0:	d9000a17 	ldw	r4,40(sp)
    55f4:	00058500 	call	5850 <__cxa_begin_catch>
    55f8:	003f9106 	br	5440 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005440>
    55fc:	d9c01c17 	ldw	r7,112(sp)
    5600:	383eda1e 	bne	r7,zero,516c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700516c>
    5604:	d8c01b17 	ldw	r3,108(sp)
    5608:	00800044 	movi	r2,1
    560c:	10fed736 	bltu	r2,r3,516c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700516c>
    5610:	00c000c4 	movi	r3,3
    5614:	003f8e06 	br	5450 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005450>

00005618 <__cxa_call_unexpected>:
    5618:	00800034 	movhi	r2,0
    561c:	deffe604 	addi	sp,sp,-104
    5620:	10940604 	addi	r2,r2,20504
    5624:	d8800d15 	stw	r2,52(sp)
    5628:	008000b4 	movhi	r2,2
    562c:	108d3e04 	addi	r2,r2,13560
    5630:	d8800e15 	stw	r2,56(sp)
    5634:	d8800104 	addi	r2,sp,4
    5638:	d8800f15 	stw	r2,60(sp)
    563c:	00800034 	movhi	r2,0
    5640:	1095a904 	addi	r2,r2,22180
    5644:	d9001415 	stw	r4,80(sp)
    5648:	d9000704 	addi	r4,sp,28
    564c:	dfc01915 	stw	ra,100(sp)
    5650:	d8801015 	stw	r2,64(sp)
    5654:	df001815 	stw	fp,96(sp)
    5658:	dec01115 	stw	sp,68(sp)
    565c:	00075200 	call	7520 <_Unwind_SjLj_Register>
    5660:	d9001417 	ldw	r4,80(sp)
    5664:	00058500 	call	5850 <__cxa_begin_catch>
    5668:	d8c01417 	ldw	r3,80(sp)
    566c:	18bffe17 	ldw	r2,-8(r3)
    5670:	193ff717 	ldw	r4,-36(r3)
    5674:	18fffd17 	ldw	r3,-12(r3)
    5678:	d8800315 	stw	r2,12(sp)
    567c:	d8c01615 	stw	r3,88(sp)
    5680:	d8c01417 	ldw	r3,80(sp)
    5684:	18fffb17 	ldw	r3,-20(r3)
    5688:	d8c01515 	stw	r3,84(sp)
    568c:	d8c01417 	ldw	r3,80(sp)
    5690:	18fff817 	ldw	r3,-32(r3)
    5694:	d8c01415 	stw	r3,80(sp)
    5698:	00c00044 	movi	r3,1
    569c:	d8c00815 	stw	r3,32(sp)
    56a0:	00047f40 	call	47f4 <_ZN10__cxxabiv112__unexpectedEPFvvE>
    56a4:	d8c00917 	ldw	r3,36(sp)
    56a8:	d8800817 	ldw	r2,32(sp)
    56ac:	d8c01715 	stw	r3,92(sp)
    56b0:	10000a26 	beq	r2,zero,56dc <__cxa_call_unexpected+0xc4>
    56b4:	10bfffc4 	addi	r2,r2,-1
    56b8:	10000126 	beq	r2,zero,56c0 <__cxa_call_unexpected+0xa8>
    56bc:	003b68fa 	trap	3
    56c0:	d8000815 	stw	zero,32(sp)
    56c4:	00059040 	call	5904 <__cxa_end_catch>
    56c8:	00059040 	call	5904 <__cxa_end_catch>
    56cc:	d9001717 	ldw	r4,92(sp)
    56d0:	00bfffc4 	movi	r2,-1
    56d4:	d8800815 	stw	r2,32(sp)
    56d8:	000771c0 	call	771c <_Unwind_SjLj_Resume>
    56dc:	d9001717 	ldw	r4,92(sp)
    56e0:	00058500 	call	5850 <__cxa_begin_catch>
    56e4:	0005e840 	call	5e84 <__cxa_get_globals_fast>
    56e8:	10800017 	ldw	r2,0(r2)
    56ec:	10c00b17 	ldw	r3,44(r2)
    56f0:	18c0004c 	andi	r3,r3,1
    56f4:	18001e26 	beq	r3,zero,5770 <__cxa_call_unexpected+0x158>
    56f8:	10800017 	ldw	r2,0(r2)
    56fc:	d8801715 	stw	r2,92(sp)
    5700:	d8801517 	ldw	r2,84(sp)
    5704:	00802b0e 	bge	zero,r2,57b4 <__cxa_call_unexpected+0x19c>
    5708:	d8c01717 	ldw	r3,92(sp)
    570c:	d8800317 	ldw	r2,12(sp)
    5710:	d9c01517 	ldw	r7,84(sp)
    5714:	193ff017 	ldw	r4,-64(r3)
    5718:	d9801617 	ldw	r6,88(sp)
    571c:	d8800015 	stw	r2,0(sp)
    5720:	180b883a 	mov	r5,r3
    5724:	00800084 	movi	r2,2
    5728:	d8800815 	stw	r2,32(sp)
    572c:	0004db00 	call	4db0 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    5730:	10803fcc 	andi	r2,r2,255
    5734:	10001e1e 	bne	r2,zero,57b0 <__cxa_call_unexpected+0x198>
    5738:	d8800317 	ldw	r2,12(sp)
    573c:	d9c01517 	ldw	r7,84(sp)
    5740:	d9801617 	ldw	r6,88(sp)
    5744:	010000b4 	movhi	r4,2
    5748:	d8800015 	stw	r2,0(sp)
    574c:	21126504 	addi	r4,r4,18836
    5750:	00800084 	movi	r2,2
    5754:	000b883a 	mov	r5,zero
    5758:	d8800815 	stw	r2,32(sp)
    575c:	0004db00 	call	4db0 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
    5760:	10803fcc 	andi	r2,r2,255
    5764:	1000051e 	bne	r2,zero,577c <__cxa_call_unexpected+0x164>
    5768:	d9001417 	ldw	r4,80(sp)
    576c:	000471c0 	call	471c <_ZN10__cxxabiv111__terminateEPFvvE>
    5770:	10801004 	addi	r2,r2,64
    5774:	d8801715 	stw	r2,92(sp)
    5778:	003fe106 	br	5700 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005700>
    577c:	01000104 	movi	r4,4
    5780:	0005ce80 	call	5ce8 <__cxa_allocate_exception>
    5784:	00c000b4 	movhi	r3,2
    5788:	18d28004 	addi	r3,r3,18944
    578c:	01800034 	movhi	r6,0
    5790:	014000b4 	movhi	r5,2
    5794:	10c00015 	stw	r3,0(r2)
    5798:	31979404 	addi	r6,r6,24144
    579c:	00c00084 	movi	r3,2
    57a0:	29526504 	addi	r5,r5,18836
    57a4:	1009883a 	mov	r4,r2
    57a8:	d8c00815 	stw	r3,32(sp)
    57ac:	0005a1c0 	call	5a1c <__cxa_throw>
    57b0:	0005aac0 	call	5aac <__cxa_rethrow>
    57b4:	d9401617 	ldw	r5,88(sp)
    57b8:	00800084 	movi	r2,2
    57bc:	d9800104 	addi	r6,sp,4
    57c0:	0009883a 	mov	r4,zero
    57c4:	d8800815 	stw	r2,32(sp)
    57c8:	0004bf40 	call	4bf4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
    57cc:	d9801717 	ldw	r6,92(sp)
    57d0:	d9c01517 	ldw	r7,84(sp)
    57d4:	d9000104 	addi	r4,sp,4
    57d8:	317ff017 	ldw	r5,-64(r6)
    57dc:	0004f700 	call	4f70 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    57e0:	10803fcc 	andi	r2,r2,255
    57e4:	1000171e 	bne	r2,zero,5844 <__cxa_call_unexpected+0x22c>
    57e8:	d9c01517 	ldw	r7,84(sp)
    57ec:	014000b4 	movhi	r5,2
    57f0:	00800084 	movi	r2,2
    57f4:	29526504 	addi	r5,r5,18836
    57f8:	000d883a 	mov	r6,zero
    57fc:	d9000104 	addi	r4,sp,4
    5800:	d8800815 	stw	r2,32(sp)
    5804:	0004f700 	call	4f70 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
    5808:	10803fcc 	andi	r2,r2,255
    580c:	103fd626 	beq	r2,zero,5768 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005768>
    5810:	01000104 	movi	r4,4
    5814:	0005ce80 	call	5ce8 <__cxa_allocate_exception>
    5818:	00c000b4 	movhi	r3,2
    581c:	18d28004 	addi	r3,r3,18944
    5820:	01800034 	movhi	r6,0
    5824:	014000b4 	movhi	r5,2
    5828:	10c00015 	stw	r3,0(r2)
    582c:	31979404 	addi	r6,r6,24144
    5830:	00c00084 	movi	r3,2
    5834:	29526504 	addi	r5,r5,18836
    5838:	1009883a 	mov	r4,r2
    583c:	d8c00815 	stw	r3,32(sp)
    5840:	0005a1c0 	call	5a1c <__cxa_throw>
    5844:	0005aac0 	call	5aac <__cxa_rethrow>

00005848 <__cxa_get_exception_ptr>:
    5848:	20bfff17 	ldw	r2,-4(r4)
    584c:	f800283a 	ret

00005850 <__cxa_begin_catch>:
    5850:	defffe04 	addi	sp,sp,-8
    5854:	dc000015 	stw	r16,0(sp)
    5858:	dfc00115 	stw	ra,4(sp)
    585c:	2021883a 	mov	r16,r4
    5860:	0005e900 	call	5e90 <__cxa_get_globals>
    5864:	81000017 	ldw	r4,0(r16)
    5868:	80c00117 	ldw	r3,4(r16)
    586c:	01af3574 	movhi	r6,48341
    5870:	31b54004 	addi	r6,r6,-11008
    5874:	016e2cb4 	movhi	r5,47282
    5878:	296aaf04 	addi	r5,r5,-21828
    587c:	218d883a 	add	r6,r4,r6
    5880:	3109803a 	cmpltu	r4,r6,r4
    5884:	1947883a 	add	r3,r3,r5
    5888:	20c7883a 	add	r3,r4,r3
    588c:	817ff504 	addi	r5,r16,-44
    5890:	11000017 	ldw	r4,0(r2)
    5894:	18000726 	beq	r3,zero,58b4 <__cxa_begin_catch+0x64>
    5898:	2000191e 	bne	r4,zero,5900 <__cxa_begin_catch+0xb0>
    589c:	11400015 	stw	r5,0(r2)
    58a0:	0005883a 	mov	r2,zero
    58a4:	dfc00117 	ldw	ra,4(sp)
    58a8:	dc000017 	ldw	r16,0(sp)
    58ac:	dec00204 	addi	sp,sp,8
    58b0:	f800283a 	ret
    58b4:	01c00044 	movi	r7,1
    58b8:	39bff736 	bltu	r7,r6,5898 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005898>
    58bc:	80fffa17 	ldw	r3,-24(r16)
    58c0:	18000d16 	blt	r3,zero,58f8 <__cxa_begin_catch+0xa8>
    58c4:	18c00044 	addi	r3,r3,1
    58c8:	11800117 	ldw	r6,4(r2)
    58cc:	80fffa15 	stw	r3,-24(r16)
    58d0:	30ffffc4 	addi	r3,r6,-1
    58d4:	10c00115 	stw	r3,4(r2)
    58d8:	21400226 	beq	r4,r5,58e4 <__cxa_begin_catch+0x94>
    58dc:	813ff915 	stw	r4,-28(r16)
    58e0:	11400015 	stw	r5,0(r2)
    58e4:	80bfff17 	ldw	r2,-4(r16)
    58e8:	dfc00117 	ldw	ra,4(sp)
    58ec:	dc000017 	ldw	r16,0(sp)
    58f0:	dec00204 	addi	sp,sp,8
    58f4:	f800283a 	ret
    58f8:	38c7c83a 	sub	r3,r7,r3
    58fc:	003ff206 	br	58c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70058c8>
    5900:	00047dc0 	call	47dc <_ZSt9terminatev>

00005904 <__cxa_end_catch>:
    5904:	deffff04 	addi	sp,sp,-4
    5908:	dfc00015 	stw	ra,0(sp)
    590c:	0005e840 	call	5e84 <__cxa_get_globals_fast>
    5910:	11000017 	ldw	r4,0(r2)
    5914:	20001426 	beq	r4,zero,5968 <__cxa_end_catch+0x64>
    5918:	21400b17 	ldw	r5,44(r4)
    591c:	01ef3574 	movhi	r7,48341
    5920:	39f54004 	addi	r7,r7,-11008
    5924:	29cf883a 	add	r7,r5,r7
    5928:	20c00c17 	ldw	r3,48(r4)
    592c:	394d803a 	cmpltu	r6,r7,r5
    5930:	016e2cb4 	movhi	r5,47282
    5934:	296aaf04 	addi	r5,r5,-21828
    5938:	1947883a 	add	r3,r3,r5
    593c:	30c7883a 	add	r3,r6,r3
    5940:	18000c1e 	bne	r3,zero,5974 <__cxa_end_catch+0x70>
    5944:	00c00044 	movi	r3,1
    5948:	19c00a36 	bltu	r3,r7,5974 <__cxa_end_catch+0x70>
    594c:	20c00517 	ldw	r3,20(r4)
    5950:	18000d16 	blt	r3,zero,5988 <__cxa_end_catch+0x84>
    5954:	18ffffc4 	addi	r3,r3,-1
    5958:	18001026 	beq	r3,zero,599c <__cxa_end_catch+0x98>
    595c:	00bfffc4 	movi	r2,-1
    5960:	18801426 	beq	r3,r2,59b4 <__cxa_end_catch+0xb0>
    5964:	20c00515 	stw	r3,20(r4)
    5968:	dfc00017 	ldw	ra,0(sp)
    596c:	dec00104 	addi	sp,sp,4
    5970:	f800283a 	ret
    5974:	21000b04 	addi	r4,r4,44
    5978:	10000015 	stw	zero,0(r2)
    597c:	dfc00017 	ldw	ra,0(sp)
    5980:	dec00104 	addi	sp,sp,4
    5984:	00077ac1 	jmpi	77ac <_Unwind_DeleteException>
    5988:	18c00044 	addi	r3,r3,1
    598c:	183ff51e 	bne	r3,zero,5964 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005964>
    5990:	21400417 	ldw	r5,16(r4)
    5994:	11400015 	stw	r5,0(r2)
    5998:	003ff206 	br	5964 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005964>
    599c:	20c00417 	ldw	r3,16(r4)
    59a0:	21000b04 	addi	r4,r4,44
    59a4:	10c00015 	stw	r3,0(r2)
    59a8:	dfc00017 	ldw	ra,0(sp)
    59ac:	dec00104 	addi	sp,sp,4
    59b0:	00077ac1 	jmpi	77ac <_Unwind_DeleteException>
    59b4:	00047dc0 	call	47dc <_ZSt9terminatev>

000059b8 <_ZSt18uncaught_exceptionv>:
    59b8:	deffff04 	addi	sp,sp,-4
    59bc:	dfc00015 	stw	ra,0(sp)
    59c0:	0005e900 	call	5e90 <__cxa_get_globals>
    59c4:	10800117 	ldw	r2,4(r2)
    59c8:	1004c03a 	cmpne	r2,r2,zero
    59cc:	dfc00017 	ldw	ra,0(sp)
    59d0:	dec00104 	addi	sp,sp,4
    59d4:	f800283a 	ret

000059d8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
    59d8:	defffe04 	addi	sp,sp,-8
    59dc:	dfc00115 	stw	ra,4(sp)
    59e0:	dc000015 	stw	r16,0(sp)
    59e4:	00800044 	movi	r2,1
    59e8:	11000a36 	bltu	r2,r4,5a14 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x3c>
    59ec:	28bff617 	ldw	r2,-40(r5)
    59f0:	2c000504 	addi	r16,r5,20
    59f4:	10000226 	beq	r2,zero,5a00 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x28>
    59f8:	8009883a 	mov	r4,r16
    59fc:	103ee83a 	callr	r2
    5a00:	8009883a 	mov	r4,r16
    5a04:	dfc00117 	ldw	ra,4(sp)
    5a08:	dc000017 	ldw	r16,0(sp)
    5a0c:	dec00204 	addi	sp,sp,8
    5a10:	0005d481 	jmpi	5d48 <__cxa_free_exception>
    5a14:	293ff817 	ldw	r4,-32(r5)
    5a18:	000471c0 	call	471c <_ZN10__cxxabiv111__terminateEPFvvE>

00005a1c <__cxa_throw>:
    5a1c:	defffb04 	addi	sp,sp,-20
    5a20:	dfc00415 	stw	ra,16(sp)
    5a24:	dcc00315 	stw	r19,12(sp)
    5a28:	dc800215 	stw	r18,8(sp)
    5a2c:	2827883a 	mov	r19,r5
    5a30:	3025883a 	mov	r18,r6
    5a34:	dc400115 	stw	r17,4(sp)
    5a38:	dc000015 	stw	r16,0(sp)
    5a3c:	2021883a 	mov	r16,r4
    5a40:	0005e900 	call	5e90 <__cxa_get_globals>
    5a44:	10c00117 	ldw	r3,4(r2)
    5a48:	847ffb04 	addi	r17,r16,-20
    5a4c:	18c00044 	addi	r3,r3,1
    5a50:	10c00115 	stw	r3,4(r2)
    5a54:	00800044 	movi	r2,1
    5a58:	80bfef15 	stw	r2,-68(r16)
    5a5c:	84fff015 	stw	r19,-64(r16)
    5a60:	84bff115 	stw	r18,-60(r16)
    5a64:	00048540 	call	4854 <_ZSt14get_unexpectedv>
    5a68:	80bff215 	stw	r2,-56(r16)
    5a6c:	00048300 	call	4830 <_ZSt13get_terminatev>
    5a70:	80bff315 	stw	r2,-52(r16)
    5a74:	0090caf4 	movhi	r2,17195
    5a78:	108ac004 	addi	r2,r2,11008
    5a7c:	80bffb15 	stw	r2,-20(r16)
    5a80:	0091d3b4 	movhi	r2,18254
    5a84:	109550c4 	addi	r2,r2,21827
    5a88:	80bffc15 	stw	r2,-16(r16)
    5a8c:	00800034 	movhi	r2,0
    5a90:	10967604 	addi	r2,r2,23000
    5a94:	8809883a 	mov	r4,r17
    5a98:	80bffd15 	stw	r2,-12(r16)
    5a9c:	00076080 	call	7608 <_Unwind_SjLj_RaiseException>
    5aa0:	8809883a 	mov	r4,r17
    5aa4:	00058500 	call	5850 <__cxa_begin_catch>
    5aa8:	00047dc0 	call	47dc <_ZSt9terminatev>

00005aac <__cxa_rethrow>:
    5aac:	defffe04 	addi	sp,sp,-8
    5ab0:	dfc00115 	stw	ra,4(sp)
    5ab4:	dc000015 	stw	r16,0(sp)
    5ab8:	0005e900 	call	5e90 <__cxa_get_globals>
    5abc:	10c00117 	ldw	r3,4(r2)
    5ac0:	11000017 	ldw	r4,0(r2)
    5ac4:	18c00044 	addi	r3,r3,1
    5ac8:	10c00115 	stw	r3,4(r2)
    5acc:	20001126 	beq	r4,zero,5b14 <__cxa_rethrow+0x68>
    5ad0:	21400b17 	ldw	r5,44(r4)
    5ad4:	01ef3574 	movhi	r7,48341
    5ad8:	39f54004 	addi	r7,r7,-11008
    5adc:	29cf883a 	add	r7,r5,r7
    5ae0:	20c00c17 	ldw	r3,48(r4)
    5ae4:	394d803a 	cmpltu	r6,r7,r5
    5ae8:	016e2cb4 	movhi	r5,47282
    5aec:	296aaf04 	addi	r5,r5,-21828
    5af0:	1947883a 	add	r3,r3,r5
    5af4:	30c7883a 	add	r3,r6,r3
    5af8:	18000726 	beq	r3,zero,5b18 <__cxa_rethrow+0x6c>
    5afc:	10000015 	stw	zero,0(r2)
    5b00:	24000b04 	addi	r16,r4,44
    5b04:	8009883a 	mov	r4,r16
    5b08:	00077600 	call	7760 <_Unwind_SjLj_Resume_or_Rethrow>
    5b0c:	8009883a 	mov	r4,r16
    5b10:	00058500 	call	5850 <__cxa_begin_catch>
    5b14:	00047dc0 	call	47dc <_ZSt9terminatev>
    5b18:	00c00044 	movi	r3,1
    5b1c:	19fff736 	bltu	r3,r7,5afc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005afc>
    5b20:	20800517 	ldw	r2,20(r4)
    5b24:	0085c83a 	sub	r2,zero,r2
    5b28:	20800515 	stw	r2,20(r4)
    5b2c:	003ff406 	br	5b00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b00>

00005b30 <__cxa_call_terminate>:
    5b30:	defffe04 	addi	sp,sp,-8
    5b34:	dfc00115 	stw	ra,4(sp)
    5b38:	dc000015 	stw	r16,0(sp)
    5b3c:	20000d26 	beq	r4,zero,5b74 <__cxa_call_terminate+0x44>
    5b40:	2021883a 	mov	r16,r4
    5b44:	00058500 	call	5850 <__cxa_begin_catch>
    5b48:	80c00017 	ldw	r3,0(r16)
    5b4c:	016f3574 	movhi	r5,48341
    5b50:	29754004 	addi	r5,r5,-11008
    5b54:	194b883a 	add	r5,r3,r5
    5b58:	80800117 	ldw	r2,4(r16)
    5b5c:	28c9803a 	cmpltu	r4,r5,r3
    5b60:	00ee2cb4 	movhi	r3,47282
    5b64:	18eaaf04 	addi	r3,r3,-21828
    5b68:	10c5883a 	add	r2,r2,r3
    5b6c:	2085883a 	add	r2,r4,r2
    5b70:	10000126 	beq	r2,zero,5b78 <__cxa_call_terminate+0x48>
    5b74:	00047dc0 	call	47dc <_ZSt9terminatev>
    5b78:	00800044 	movi	r2,1
    5b7c:	117ffd36 	bltu	r2,r5,5b74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005b74>
    5b80:	813ff817 	ldw	r4,-32(r16)
    5b84:	000471c0 	call	471c <_ZN10__cxxabiv111__terminateEPFvvE>

00005b88 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
    5b88:	018000f4 	movhi	r6,3
    5b8c:	31941604 	addi	r6,r6,20568
    5b90:	31400117 	ldw	r5,4(r6)
    5b94:	223fff04 	addi	r8,r4,-4
    5b98:	227fff17 	ldw	r9,-4(r4)
    5b9c:	28001326 	beq	r5,zero,5bec <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x64>
    5ba0:	424f883a 	add	r7,r8,r9
    5ba4:	29c01426 	beq	r5,r7,5bf8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
    5ba8:	28c00117 	ldw	r3,4(r5)
    5bac:	18001c26 	beq	r3,zero,5c20 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
    5bb0:	38c00336 	bltu	r7,r3,5bc0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x38>
    5bb4:	00001e06 	br	5c30 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa8>
    5bb8:	3880052e 	bgeu	r7,r2,5bd0 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x48>
    5bbc:	1007883a 	mov	r3,r2
    5bc0:	18800117 	ldw	r2,4(r3)
    5bc4:	29800104 	addi	r6,r5,4
    5bc8:	180b883a 	mov	r5,r3
    5bcc:	103ffa1e 	bne	r2,zero,5bb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005bb8>
    5bd0:	19400017 	ldw	r5,0(r3)
    5bd4:	194f883a 	add	r7,r3,r5
    5bd8:	41c00e26 	beq	r8,r7,5c14 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x8c>
    5bdc:	20800015 	stw	r2,0(r4)
    5be0:	30800017 	ldw	r2,0(r6)
    5be4:	12000115 	stw	r8,4(r2)
    5be8:	f800283a 	ret
    5bec:	20000015 	stw	zero,0(r4)
    5bf0:	32000115 	stw	r8,4(r6)
    5bf4:	f800283a 	ret
    5bf8:	28c00017 	ldw	r3,0(r5)
    5bfc:	28800117 	ldw	r2,4(r5)
    5c00:	1a53883a 	add	r9,r3,r9
    5c04:	227fff15 	stw	r9,-4(r4)
    5c08:	20800015 	stw	r2,0(r4)
    5c0c:	32000115 	stw	r8,4(r6)
    5c10:	f800283a 	ret
    5c14:	494b883a 	add	r5,r9,r5
    5c18:	19400015 	stw	r5,0(r3)
    5c1c:	f800283a 	ret
    5c20:	0005883a 	mov	r2,zero
    5c24:	2807883a 	mov	r3,r5
    5c28:	31800104 	addi	r6,r6,4
    5c2c:	003fe806 	br	5bd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005bd0>
    5c30:	1805883a 	mov	r2,r3
    5c34:	31800104 	addi	r6,r6,4
    5c38:	2807883a 	mov	r3,r5
    5c3c:	003fe406 	br	5bd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005bd0>

00005c40 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
    5c40:	20800104 	addi	r2,r4,4
    5c44:	00c001c4 	movi	r3,7
    5c48:	1880112e 	bgeu	r3,r2,5c90 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
    5c4c:	20c9883a 	add	r4,r4,r3
    5c50:	00bfff04 	movi	r2,-4
    5c54:	208a703a 	and	r5,r4,r2
    5c58:	018000f4 	movhi	r6,3
    5c5c:	31941604 	addi	r6,r6,20568
    5c60:	30c00117 	ldw	r3,4(r6)
    5c64:	18000826 	beq	r3,zero,5c88 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
    5c68:	19000017 	ldw	r4,0(r3)
    5c6c:	21400436 	bltu	r4,r5,5c80 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x40>
    5c70:	00001a06 	br	5cdc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x9c>
    5c74:	11000017 	ldw	r4,0(r2)
    5c78:	2140072e 	bgeu	r4,r5,5c98 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
    5c7c:	1007883a 	mov	r3,r2
    5c80:	18800117 	ldw	r2,4(r3)
    5c84:	103ffb1e 	bne	r2,zero,5c74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c74>
    5c88:	0005883a 	mov	r2,zero
    5c8c:	f800283a 	ret
    5c90:	01400204 	movi	r5,8
    5c94:	003ff006 	br	5c58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c58>
    5c98:	18c00104 	addi	r3,r3,4
    5c9c:	2149c83a 	sub	r4,r4,r5
    5ca0:	018001c4 	movi	r6,7
    5ca4:	3100092e 	bgeu	r6,r4,5ccc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x8c>
    5ca8:	11c00117 	ldw	r7,4(r2)
    5cac:	114d883a 	add	r6,r2,r5
    5cb0:	31000015 	stw	r4,0(r6)
    5cb4:	31c00115 	stw	r7,4(r6)
    5cb8:	18800017 	ldw	r2,0(r3)
    5cbc:	11400015 	stw	r5,0(r2)
    5cc0:	19800015 	stw	r6,0(r3)
    5cc4:	10800104 	addi	r2,r2,4
    5cc8:	f800283a 	ret
    5ccc:	11000117 	ldw	r4,4(r2)
    5cd0:	10800104 	addi	r2,r2,4
    5cd4:	19000015 	stw	r4,0(r3)
    5cd8:	f800283a 	ret
    5cdc:	1805883a 	mov	r2,r3
    5ce0:	30c00104 	addi	r3,r6,4
    5ce4:	003fed06 	br	5c9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005c9c>

00005ce8 <__cxa_allocate_exception>:
    5ce8:	defffd04 	addi	sp,sp,-12
    5cec:	dc400115 	stw	r17,4(sp)
    5cf0:	24401104 	addi	r17,r4,68
    5cf4:	8809883a 	mov	r4,r17
    5cf8:	dc000015 	stw	r16,0(sp)
    5cfc:	dfc00215 	stw	ra,8(sp)
    5d00:	00078b40 	call	78b4 <malloc>
    5d04:	1021883a 	mov	r16,r2
    5d08:	10000a26 	beq	r2,zero,5d34 <__cxa_allocate_exception+0x4c>
    5d0c:	01801104 	movi	r6,68
    5d10:	000b883a 	mov	r5,zero
    5d14:	8009883a 	mov	r4,r16
    5d18:	00082300 	call	8230 <memset>
    5d1c:	80801104 	addi	r2,r16,68
    5d20:	dfc00217 	ldw	ra,8(sp)
    5d24:	dc400117 	ldw	r17,4(sp)
    5d28:	dc000017 	ldw	r16,0(sp)
    5d2c:	dec00304 	addi	sp,sp,12
    5d30:	f800283a 	ret
    5d34:	8809883a 	mov	r4,r17
    5d38:	0005c400 	call	5c40 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    5d3c:	1021883a 	mov	r16,r2
    5d40:	103ff21e 	bne	r2,zero,5d0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d0c>
    5d44:	00047dc0 	call	47dc <_ZSt9terminatev>

00005d48 <__cxa_free_exception>:
    5d48:	00c000f4 	movhi	r3,3
    5d4c:	18d41604 	addi	r3,r3,20568
    5d50:	18800217 	ldw	r2,8(r3)
    5d54:	213fef04 	addi	r4,r4,-68
    5d58:	1100042e 	bgeu	r2,r4,5d6c <__cxa_free_exception+0x24>
    5d5c:	18c00317 	ldw	r3,12(r3)
    5d60:	10c5883a 	add	r2,r2,r3
    5d64:	2080012e 	bgeu	r4,r2,5d6c <__cxa_free_exception+0x24>
    5d68:	0005b881 	jmpi	5b88 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    5d6c:	00078c81 	jmpi	78c8 <free>

00005d70 <__cxa_allocate_dependent_exception>:
    5d70:	defffe04 	addi	sp,sp,-8
    5d74:	01001004 	movi	r4,64
    5d78:	dc000015 	stw	r16,0(sp)
    5d7c:	dfc00115 	stw	ra,4(sp)
    5d80:	00078b40 	call	78b4 <malloc>
    5d84:	1021883a 	mov	r16,r2
    5d88:	10000926 	beq	r2,zero,5db0 <__cxa_allocate_dependent_exception+0x40>
    5d8c:	01801004 	movi	r6,64
    5d90:	000b883a 	mov	r5,zero
    5d94:	8009883a 	mov	r4,r16
    5d98:	00082300 	call	8230 <memset>
    5d9c:	8005883a 	mov	r2,r16
    5da0:	dfc00117 	ldw	ra,4(sp)
    5da4:	dc000017 	ldw	r16,0(sp)
    5da8:	dec00204 	addi	sp,sp,8
    5dac:	f800283a 	ret
    5db0:	01001004 	movi	r4,64
    5db4:	0005c400 	call	5c40 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
    5db8:	1021883a 	mov	r16,r2
    5dbc:	103ff31e 	bne	r2,zero,5d8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005d8c>
    5dc0:	00047dc0 	call	47dc <_ZSt9terminatev>

00005dc4 <__cxa_free_dependent_exception>:
    5dc4:	014000f4 	movhi	r5,3
    5dc8:	29541604 	addi	r5,r5,20568
    5dcc:	28c00217 	ldw	r3,8(r5)
    5dd0:	2005883a 	mov	r2,r4
    5dd4:	1900042e 	bgeu	r3,r4,5de8 <__cxa_free_dependent_exception+0x24>
    5dd8:	29400317 	ldw	r5,12(r5)
    5ddc:	1947883a 	add	r3,r3,r5
    5de0:	20c0012e 	bgeu	r4,r3,5de8 <__cxa_free_dependent_exception+0x24>
    5de4:	0005b881 	jmpi	5b88 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
    5de8:	1009883a 	mov	r4,r2
    5dec:	00078c81 	jmpi	78c8 <free>

00005df0 <_GLOBAL__sub_I___cxa_allocate_exception>:
    5df0:	defffd04 	addi	sp,sp,-12
    5df4:	dc400115 	stw	r17,4(sp)
    5df8:	dc000015 	stw	r16,0(sp)
    5dfc:	04424004 	movi	r17,2304
    5e00:	040000f4 	movhi	r16,3
    5e04:	84141604 	addi	r16,r16,20568
    5e08:	8809883a 	mov	r4,r17
    5e0c:	dfc00215 	stw	ra,8(sp)
    5e10:	84400315 	stw	r17,12(r16)
    5e14:	00078b40 	call	78b4 <malloc>
    5e18:	80800215 	stw	r2,8(r16)
    5e1c:	10000826 	beq	r2,zero,5e40 <_GLOBAL__sub_I___cxa_allocate_exception+0x50>
    5e20:	80800115 	stw	r2,4(r16)
    5e24:	14400015 	stw	r17,0(r2)
    5e28:	10000115 	stw	zero,4(r2)
    5e2c:	dfc00217 	ldw	ra,8(sp)
    5e30:	dc400117 	ldw	r17,4(sp)
    5e34:	dc000017 	ldw	r16,0(sp)
    5e38:	dec00304 	addi	sp,sp,12
    5e3c:	f800283a 	ret
    5e40:	80000315 	stw	zero,12(r16)
    5e44:	80000115 	stw	zero,4(r16)
    5e48:	003ff806 	br	5e2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005e2c>

00005e4c <_ZNSt9exceptionD1Ev>:
    5e4c:	f800283a 	ret

00005e50 <_ZNSt13bad_exceptionD1Ev>:
    5e50:	f800283a 	ret

00005e54 <_ZNKSt9exception4whatEv>:
    5e54:	008000b4 	movhi	r2,2
    5e58:	10925304 	addi	r2,r2,18764
    5e5c:	f800283a 	ret

00005e60 <_ZNKSt13bad_exception4whatEv>:
    5e60:	008000b4 	movhi	r2,2
    5e64:	10925704 	addi	r2,r2,18780
    5e68:	f800283a 	ret

00005e6c <_ZNSt9exceptionD0Ev>:
    5e6c:	00047181 	jmpi	4718 <_ZdlPv>

00005e70 <_ZNSt13bad_exceptionD0Ev>:
    5e70:	00047181 	jmpi	4718 <_ZdlPv>

00005e74 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
    5e74:	f800283a 	ret

00005e78 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
    5e78:	00047181 	jmpi	4718 <_ZdlPv>

00005e7c <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
    5e7c:	f800283a 	ret

00005e80 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
    5e80:	00047181 	jmpi	4718 <_ZdlPv>

00005e84 <__cxa_get_globals_fast>:
    5e84:	008000f4 	movhi	r2,3
    5e88:	10a3ec04 	addi	r2,r2,-28752
    5e8c:	f800283a 	ret

00005e90 <__cxa_get_globals>:
    5e90:	008000f4 	movhi	r2,3
    5e94:	10a3ec04 	addi	r2,r2,-28752
    5e98:	f800283a 	ret

00005e9c <round>:
    5e9c:	289ffc2c 	andhi	r2,r5,32752
    5ea0:	1005d53a 	srai	r2,r2,20
    5ea4:	024004c4 	movi	r9,19
    5ea8:	2807883a 	mov	r3,r5
    5eac:	123f0044 	addi	r8,r2,-1023
    5eb0:	200d883a 	mov	r6,r4
    5eb4:	280f883a 	mov	r7,r5
    5eb8:	4a000916 	blt	r9,r8,5ee0 <round+0x44>
    5ebc:	40002516 	blt	r8,zero,5f54 <round+0xb8>
    5ec0:	00800434 	movhi	r2,16
    5ec4:	10bfffc4 	addi	r2,r2,-1
    5ec8:	1205d83a 	sra	r2,r2,r8
    5ecc:	2888703a 	and	r4,r5,r2
    5ed0:	2000181e 	bne	r4,zero,5f34 <round+0x98>
    5ed4:	3000171e 	bne	r6,zero,5f34 <round+0x98>
    5ed8:	0005883a 	mov	r2,zero
    5edc:	f800283a 	ret
    5ee0:	02400cc4 	movi	r9,51
    5ee4:	4a00040e 	bge	r9,r8,5ef8 <round+0x5c>
    5ee8:	00810004 	movi	r2,1024
    5eec:	40802126 	beq	r8,r2,5f74 <round+0xd8>
    5ef0:	3005883a 	mov	r2,r6
    5ef4:	f800283a 	ret
    5ef8:	013fffc4 	movi	r4,-1
    5efc:	10befb44 	addi	r2,r2,-1043
    5f00:	2084d83a 	srl	r2,r4,r2
    5f04:	3088703a 	and	r4,r6,r2
    5f08:	20001726 	beq	r4,zero,5f68 <round+0xcc>
    5f0c:	4a11c83a 	sub	r8,r9,r8
    5f10:	02400044 	movi	r9,1
    5f14:	4a10983a 	sll	r8,r9,r8
    5f18:	4191883a 	add	r8,r8,r6
    5f1c:	4180012e 	bgeu	r8,r6,5f24 <round+0x88>
    5f20:	2a47883a 	add	r3,r5,r9
    5f24:	0084303a 	nor	r2,zero,r2
    5f28:	120c703a 	and	r6,r2,r8
    5f2c:	3005883a 	mov	r2,r6
    5f30:	f800283a 	ret
    5f34:	00c00234 	movhi	r3,8
    5f38:	1a07d83a 	sra	r3,r3,r8
    5f3c:	0084303a 	nor	r2,zero,r2
    5f40:	000d883a 	mov	r6,zero
    5f44:	19c7883a 	add	r3,r3,r7
    5f48:	1886703a 	and	r3,r3,r2
    5f4c:	3005883a 	mov	r2,r6
    5f50:	f800283a 	ret
    5f54:	00bfffc4 	movi	r2,-1
    5f58:	28e0002c 	andhi	r3,r5,32768
    5f5c:	40800c26 	beq	r8,r2,5f90 <round+0xf4>
    5f60:	000d883a 	mov	r6,zero
    5f64:	003fe206 	br	5ef0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005ef0>
    5f68:	3005883a 	mov	r2,r6
    5f6c:	2807883a 	mov	r3,r5
    5f70:	f800283a 	ret
    5f74:	deffff04 	addi	sp,sp,-4
    5f78:	280f883a 	mov	r7,r5
    5f7c:	dfc00015 	stw	ra,0(sp)
    5f80:	00068000 	call	6800 <__adddf3>
    5f84:	dfc00017 	ldw	ra,0(sp)
    5f88:	dec00104 	addi	sp,sp,4
    5f8c:	f800283a 	ret
    5f90:	18cffc34 	orhi	r3,r3,16368
    5f94:	000d883a 	mov	r6,zero
    5f98:	003fd506 	br	5ef0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005ef0>

00005f9c <roundf>:
    5f9c:	20dfe02c 	andhi	r3,r4,32640
    5fa0:	1806d5fa 	srli	r3,r3,23
    5fa4:	01400584 	movi	r5,22
    5fa8:	2005883a 	mov	r2,r4
    5fac:	18ffe044 	addi	r3,r3,-127
    5fb0:	28c00c16 	blt	r5,r3,5fe4 <roundf+0x48>
    5fb4:	18001516 	blt	r3,zero,600c <roundf+0x70>
    5fb8:	01002034 	movhi	r4,128
    5fbc:	213fffc4 	addi	r4,r4,-1
    5fc0:	20c9d83a 	sra	r4,r4,r3
    5fc4:	208a703a 	and	r5,r4,r2
    5fc8:	28000826 	beq	r5,zero,5fec <roundf+0x50>
    5fcc:	01401034 	movhi	r5,64
    5fd0:	28c7d83a 	sra	r3,r5,r3
    5fd4:	0108303a 	nor	r4,zero,r4
    5fd8:	1885883a 	add	r2,r3,r2
    5fdc:	2084703a 	and	r2,r4,r2
    5fe0:	f800283a 	ret
    5fe4:	01402004 	movi	r5,128
    5fe8:	19400126 	beq	r3,r5,5ff0 <roundf+0x54>
    5fec:	f800283a 	ret
    5ff0:	deffff04 	addi	sp,sp,-4
    5ff4:	200b883a 	mov	r5,r4
    5ff8:	dfc00015 	stw	ra,0(sp)
    5ffc:	00060200 	call	6020 <__addsf3>
    6000:	dfc00017 	ldw	ra,0(sp)
    6004:	dec00104 	addi	sp,sp,4
    6008:	f800283a 	ret
    600c:	20a0002c 	andhi	r2,r4,32768
    6010:	013fffc4 	movi	r4,-1
    6014:	193ff51e 	bne	r3,r4,5fec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7005fec>
    6018:	108fe034 	orhi	r2,r2,16256
    601c:	f800283a 	ret

00006020 <__addsf3>:
    6020:	defffc04 	addi	sp,sp,-16
    6024:	2004d7fa 	srli	r2,r4,31
    6028:	280cd5fa 	srli	r6,r5,23
    602c:	dc000015 	stw	r16,0(sp)
    6030:	00c02034 	movhi	r3,128
    6034:	2020d5fa 	srli	r16,r4,23
    6038:	280ed7fa 	srli	r7,r5,31
    603c:	18ffffc4 	addi	r3,r3,-1
    6040:	dc400115 	stw	r17,4(sp)
    6044:	1908703a 	and	r4,r3,r4
    6048:	194a703a 	and	r5,r3,r5
    604c:	dfc00315 	stw	ra,12(sp)
    6050:	dc800215 	stw	r18,8(sp)
    6054:	14403fcc 	andi	r17,r2,255
    6058:	84003fcc 	andi	r16,r16,255
    605c:	200890fa 	slli	r4,r4,3
    6060:	31803fcc 	andi	r6,r6,255
    6064:	280a90fa 	slli	r5,r5,3
    6068:	89c05026 	beq	r17,r7,61ac <__addsf3+0x18c>
    606c:	8185c83a 	sub	r2,r16,r6
    6070:	00807a0e 	bge	zero,r2,625c <__addsf3+0x23c>
    6074:	30001e1e 	bne	r6,zero,60f0 <__addsf3+0xd0>
    6078:	28006d1e 	bne	r5,zero,6230 <__addsf3+0x210>
    607c:	208001cc 	andi	r2,r4,7
    6080:	10000426 	beq	r2,zero,6094 <__addsf3+0x74>
    6084:	208003cc 	andi	r2,r4,15
    6088:	00c00104 	movi	r3,4
    608c:	10c00126 	beq	r2,r3,6094 <__addsf3+0x74>
    6090:	20c9883a 	add	r4,r4,r3
    6094:	2081002c 	andhi	r2,r4,1024
    6098:	10003926 	beq	r2,zero,6180 <__addsf3+0x160>
    609c:	84000044 	addi	r16,r16,1
    60a0:	00803fc4 	movi	r2,255
    60a4:	80807826 	beq	r16,r2,6288 <__addsf3+0x268>
    60a8:	200891ba 	slli	r4,r4,6
    60ac:	8805883a 	mov	r2,r17
    60b0:	2008d27a 	srli	r4,r4,9
    60b4:	84003fcc 	andi	r16,r16,255
    60b8:	800695fa 	slli	r3,r16,23
    60bc:	10803fcc 	andi	r2,r2,255
    60c0:	04002034 	movhi	r16,128
    60c4:	843fffc4 	addi	r16,r16,-1
    60c8:	100497fa 	slli	r2,r2,31
    60cc:	2408703a 	and	r4,r4,r16
    60d0:	20e0b03a 	or	r16,r4,r3
    60d4:	8084b03a 	or	r2,r16,r2
    60d8:	dfc00317 	ldw	ra,12(sp)
    60dc:	dc800217 	ldw	r18,8(sp)
    60e0:	dc400117 	ldw	r17,4(sp)
    60e4:	dc000017 	ldw	r16,0(sp)
    60e8:	dec00404 	addi	sp,sp,16
    60ec:	f800283a 	ret
    60f0:	00c03fc4 	movi	r3,255
    60f4:	80ffe126 	beq	r16,r3,607c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700607c>
    60f8:	29410034 	orhi	r5,r5,1024
    60fc:	00c006c4 	movi	r3,27
    6100:	18807516 	blt	r3,r2,62d8 <__addsf3+0x2b8>
    6104:	00c00804 	movi	r3,32
    6108:	1887c83a 	sub	r3,r3,r2
    610c:	28c6983a 	sll	r3,r5,r3
    6110:	288ad83a 	srl	r5,r5,r2
    6114:	1804c03a 	cmpne	r2,r3,zero
    6118:	288ab03a 	or	r5,r5,r2
    611c:	2149c83a 	sub	r4,r4,r5
    6120:	2081002c 	andhi	r2,r4,1024
    6124:	10001426 	beq	r2,zero,6178 <__addsf3+0x158>
    6128:	04810034 	movhi	r18,1024
    612c:	94bfffc4 	addi	r18,r18,-1
    6130:	24a4703a 	and	r18,r4,r18
    6134:	9009883a 	mov	r4,r18
    6138:	00078380 	call	7838 <__clzsi2>
    613c:	10bffec4 	addi	r2,r2,-5
    6140:	90a4983a 	sll	r18,r18,r2
    6144:	14005416 	blt	r2,r16,6298 <__addsf3+0x278>
    6148:	1405c83a 	sub	r2,r2,r16
    614c:	11000044 	addi	r4,r2,1
    6150:	00800804 	movi	r2,32
    6154:	1105c83a 	sub	r2,r2,r4
    6158:	9084983a 	sll	r2,r18,r2
    615c:	9124d83a 	srl	r18,r18,r4
    6160:	0021883a 	mov	r16,zero
    6164:	1008c03a 	cmpne	r4,r2,zero
    6168:	9108b03a 	or	r4,r18,r4
    616c:	003fc306 	br	607c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700607c>
    6170:	1000db26 	beq	r2,zero,64e0 <__addsf3+0x4c0>
    6174:	1009883a 	mov	r4,r2
    6178:	208001cc 	andi	r2,r4,7
    617c:	103fc11e 	bne	r2,zero,6084 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006084>
    6180:	2006d0fa 	srli	r3,r4,3
    6184:	01003fc4 	movi	r4,255
    6188:	8805883a 	mov	r2,r17
    618c:	8100241e 	bne	r16,r4,6220 <__addsf3+0x200>
    6190:	18006e26 	beq	r3,zero,634c <__addsf3+0x32c>
    6194:	19001034 	orhi	r4,r3,64
    6198:	00c02034 	movhi	r3,128
    619c:	18ffffc4 	addi	r3,r3,-1
    61a0:	043fffc4 	movi	r16,-1
    61a4:	20c8703a 	and	r4,r4,r3
    61a8:	003fc206 	br	60b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70060b4>
    61ac:	8187c83a 	sub	r3,r16,r6
    61b0:	00c03e0e 	bge	zero,r3,62ac <__addsf3+0x28c>
    61b4:	30002326 	beq	r6,zero,6244 <__addsf3+0x224>
    61b8:	01803fc4 	movi	r6,255
    61bc:	81bfaf26 	beq	r16,r6,607c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700607c>
    61c0:	29410034 	orhi	r5,r5,1024
    61c4:	018006c4 	movi	r6,27
    61c8:	30c07416 	blt	r6,r3,639c <__addsf3+0x37c>
    61cc:	01800804 	movi	r6,32
    61d0:	30cdc83a 	sub	r6,r6,r3
    61d4:	298c983a 	sll	r6,r5,r6
    61d8:	28cad83a 	srl	r5,r5,r3
    61dc:	3006c03a 	cmpne	r3,r6,zero
    61e0:	28cab03a 	or	r5,r5,r3
    61e4:	2149883a 	add	r4,r4,r5
    61e8:	20c1002c 	andhi	r3,r4,1024
    61ec:	183fe226 	beq	r3,zero,6178 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006178>
    61f0:	84000044 	addi	r16,r16,1
    61f4:	00c03fc4 	movi	r3,255
    61f8:	80c05426 	beq	r16,r3,634c <__addsf3+0x32c>
    61fc:	00bf0034 	movhi	r2,64512
    6200:	10bfffc4 	addi	r2,r2,-1
    6204:	20c0004c 	andi	r3,r4,1
    6208:	2088703a 	and	r4,r4,r2
    620c:	2008d07a 	srli	r4,r4,1
    6210:	20c8b03a 	or	r4,r4,r3
    6214:	003f9906 	br	607c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700607c>
    6218:	0007883a 	mov	r3,zero
    621c:	0005883a 	mov	r2,zero
    6220:	01002034 	movhi	r4,128
    6224:	213fffc4 	addi	r4,r4,-1
    6228:	1908703a 	and	r4,r3,r4
    622c:	003fa106 	br	60b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70060b4>
    6230:	10bfffc4 	addi	r2,r2,-1
    6234:	103fb926 	beq	r2,zero,611c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700611c>
    6238:	00c03fc4 	movi	r3,255
    623c:	80ffaf1e 	bne	r16,r3,60fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70060fc>
    6240:	003f8e06 	br	607c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700607c>
    6244:	283f8d26 	beq	r5,zero,607c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700607c>
    6248:	18ffffc4 	addi	r3,r3,-1
    624c:	183fe526 	beq	r3,zero,61e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061e4>
    6250:	01803fc4 	movi	r6,255
    6254:	81bfdb1e 	bne	r16,r6,61c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061c4>
    6258:	003f8806 	br	607c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700607c>
    625c:	1000201e 	bne	r2,zero,62e0 <__addsf3+0x2c0>
    6260:	80800044 	addi	r2,r16,1
    6264:	10803fcc 	andi	r2,r2,255
    6268:	01800044 	movi	r6,1
    626c:	3080450e 	bge	r6,r2,6384 <__addsf3+0x364>
    6270:	2165c83a 	sub	r18,r4,r5
    6274:	90c1002c 	andhi	r3,r18,1024
    6278:	18002b26 	beq	r3,zero,6328 <__addsf3+0x308>
    627c:	2925c83a 	sub	r18,r5,r4
    6280:	3823883a 	mov	r17,r7
    6284:	003fab06 	br	6134 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006134>
    6288:	8805883a 	mov	r2,r17
    628c:	043fffc4 	movi	r16,-1
    6290:	0009883a 	mov	r4,zero
    6294:	003f8706 	br	60b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70060b4>
    6298:	013f0034 	movhi	r4,64512
    629c:	213fffc4 	addi	r4,r4,-1
    62a0:	80a1c83a 	sub	r16,r16,r2
    62a4:	9108703a 	and	r4,r18,r4
    62a8:	003f7406 	br	607c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700607c>
    62ac:	1800411e 	bne	r3,zero,63b4 <__addsf3+0x394>
    62b0:	80c00044 	addi	r3,r16,1
    62b4:	19c03fcc 	andi	r7,r3,255
    62b8:	01800044 	movi	r6,1
    62bc:	31c0260e 	bge	r6,r7,6358 <__addsf3+0x338>
    62c0:	01803fc4 	movi	r6,255
    62c4:	19802126 	beq	r3,r6,634c <__addsf3+0x32c>
    62c8:	2149883a 	add	r4,r4,r5
    62cc:	2008d07a 	srli	r4,r4,1
    62d0:	1821883a 	mov	r16,r3
    62d4:	003f6906 	br	607c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700607c>
    62d8:	01400044 	movi	r5,1
    62dc:	003f8f06 	br	611c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700611c>
    62e0:	8000151e 	bne	r16,zero,6338 <__addsf3+0x318>
    62e4:	20002f26 	beq	r4,zero,63a4 <__addsf3+0x384>
    62e8:	0084303a 	nor	r2,zero,r2
    62ec:	10000a26 	beq	r2,zero,6318 <__addsf3+0x2f8>
    62f0:	00c03fc4 	movi	r3,255
    62f4:	30c02b26 	beq	r6,r3,63a4 <__addsf3+0x384>
    62f8:	00c006c4 	movi	r3,27
    62fc:	18806d16 	blt	r3,r2,64b4 <__addsf3+0x494>
    6300:	00c00804 	movi	r3,32
    6304:	1887c83a 	sub	r3,r3,r2
    6308:	20c6983a 	sll	r3,r4,r3
    630c:	2084d83a 	srl	r2,r4,r2
    6310:	1808c03a 	cmpne	r4,r3,zero
    6314:	1108b03a 	or	r4,r2,r4
    6318:	2909c83a 	sub	r4,r5,r4
    631c:	3021883a 	mov	r16,r6
    6320:	3823883a 	mov	r17,r7
    6324:	003f7e06 	br	6120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006120>
    6328:	903f821e 	bne	r18,zero,6134 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006134>
    632c:	0005883a 	mov	r2,zero
    6330:	0021883a 	mov	r16,zero
    6334:	003fba06 	br	6220 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006220>
    6338:	00c03fc4 	movi	r3,255
    633c:	30c01926 	beq	r6,r3,63a4 <__addsf3+0x384>
    6340:	0085c83a 	sub	r2,zero,r2
    6344:	21010034 	orhi	r4,r4,1024
    6348:	003feb06 	br	62f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70062f8>
    634c:	043fffc4 	movi	r16,-1
    6350:	0009883a 	mov	r4,zero
    6354:	003f5706 	br	60b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70060b4>
    6358:	80004a1e 	bne	r16,zero,6484 <__addsf3+0x464>
    635c:	20005926 	beq	r4,zero,64c4 <__addsf3+0x4a4>
    6360:	283f4626 	beq	r5,zero,607c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700607c>
    6364:	2149883a 	add	r4,r4,r5
    6368:	2081002c 	andhi	r2,r4,1024
    636c:	103f8226 	beq	r2,zero,6178 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006178>
    6370:	00bf0034 	movhi	r2,64512
    6374:	10bfffc4 	addi	r2,r2,-1
    6378:	3021883a 	mov	r16,r6
    637c:	2088703a 	and	r4,r4,r2
    6380:	003f3e06 	br	607c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700607c>
    6384:	8000121e 	bne	r16,zero,63d0 <__addsf3+0x3b0>
    6388:	2000261e 	bne	r4,zero,6424 <__addsf3+0x404>
    638c:	283fa226 	beq	r5,zero,6218 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006218>
    6390:	2809883a 	mov	r4,r5
    6394:	3823883a 	mov	r17,r7
    6398:	003f3806 	br	607c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700607c>
    639c:	01400044 	movi	r5,1
    63a0:	003f9006 	br	61e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061e4>
    63a4:	2809883a 	mov	r4,r5
    63a8:	3021883a 	mov	r16,r6
    63ac:	3823883a 	mov	r17,r7
    63b0:	003f3206 	br	607c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700607c>
    63b4:	80000c1e 	bne	r16,zero,63e8 <__addsf3+0x3c8>
    63b8:	20002f26 	beq	r4,zero,6478 <__addsf3+0x458>
    63bc:	00c6303a 	nor	r3,zero,r3
    63c0:	18002b1e 	bne	r3,zero,6470 <__addsf3+0x450>
    63c4:	2149883a 	add	r4,r4,r5
    63c8:	3021883a 	mov	r16,r6
    63cc:	003f8606 	br	61e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061e8>
    63d0:	20001b1e 	bne	r4,zero,6440 <__addsf3+0x420>
    63d4:	28003926 	beq	r5,zero,64bc <__addsf3+0x49c>
    63d8:	2809883a 	mov	r4,r5
    63dc:	3823883a 	mov	r17,r7
    63e0:	04003fc4 	movi	r16,255
    63e4:	003f2506 	br	607c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700607c>
    63e8:	01c03fc4 	movi	r7,255
    63ec:	31c02226 	beq	r6,r7,6478 <__addsf3+0x458>
    63f0:	00c7c83a 	sub	r3,zero,r3
    63f4:	21010034 	orhi	r4,r4,1024
    63f8:	01c006c4 	movi	r7,27
    63fc:	38c03616 	blt	r7,r3,64d8 <__addsf3+0x4b8>
    6400:	01c00804 	movi	r7,32
    6404:	38cfc83a 	sub	r7,r7,r3
    6408:	21ce983a 	sll	r7,r4,r7
    640c:	20c6d83a 	srl	r3,r4,r3
    6410:	3808c03a 	cmpne	r4,r7,zero
    6414:	1906b03a 	or	r3,r3,r4
    6418:	1949883a 	add	r4,r3,r5
    641c:	3021883a 	mov	r16,r6
    6420:	003f7106 	br	61e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70061e8>
    6424:	283f1526 	beq	r5,zero,607c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700607c>
    6428:	2145c83a 	sub	r2,r4,r5
    642c:	10c1002c 	andhi	r3,r2,1024
    6430:	183f4f26 	beq	r3,zero,6170 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006170>
    6434:	2909c83a 	sub	r4,r5,r4
    6438:	3823883a 	mov	r17,r7
    643c:	003f0f06 	br	607c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700607c>
    6440:	28001a26 	beq	r5,zero,64ac <__addsf3+0x48c>
    6444:	2008d0fa 	srli	r4,r4,3
    6448:	2080102c 	andhi	r2,r4,64
    644c:	10000526 	beq	r2,zero,6464 <__addsf3+0x444>
    6450:	280ad0fa 	srli	r5,r5,3
    6454:	2880102c 	andhi	r2,r5,64
    6458:	1000021e 	bne	r2,zero,6464 <__addsf3+0x444>
    645c:	2809883a 	mov	r4,r5
    6460:	3823883a 	mov	r17,r7
    6464:	200890fa 	slli	r4,r4,3
    6468:	04003fc4 	movi	r16,255
    646c:	003f0306 	br	607c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700607c>
    6470:	01c03fc4 	movi	r7,255
    6474:	31ffe01e 	bne	r6,r7,63f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70063f8>
    6478:	2809883a 	mov	r4,r5
    647c:	3021883a 	mov	r16,r6
    6480:	003efe06 	br	607c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700607c>
    6484:	20001126 	beq	r4,zero,64cc <__addsf3+0x4ac>
    6488:	28000826 	beq	r5,zero,64ac <__addsf3+0x48c>
    648c:	2008d0fa 	srli	r4,r4,3
    6490:	2080102c 	andhi	r2,r4,64
    6494:	103ff326 	beq	r2,zero,6464 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006464>
    6498:	280ad0fa 	srli	r5,r5,3
    649c:	2880102c 	andhi	r2,r5,64
    64a0:	103ff01e 	bne	r2,zero,6464 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006464>
    64a4:	2809883a 	mov	r4,r5
    64a8:	003fee06 	br	6464 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006464>
    64ac:	04003fc4 	movi	r16,255
    64b0:	003ef206 	br	607c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700607c>
    64b4:	01000044 	movi	r4,1
    64b8:	003f9706 	br	6318 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006318>
    64bc:	0005883a 	mov	r2,zero
    64c0:	003f3406 	br	6194 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006194>
    64c4:	2809883a 	mov	r4,r5
    64c8:	003eec06 	br	607c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700607c>
    64cc:	2809883a 	mov	r4,r5
    64d0:	04003fc4 	movi	r16,255
    64d4:	003ee906 	br	607c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700607c>
    64d8:	00c00044 	movi	r3,1
    64dc:	003fce06 	br	6418 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006418>
    64e0:	0005883a 	mov	r2,zero
    64e4:	003f4e06 	br	6220 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006220>

000064e8 <__gesf2>:
    64e8:	2004d5fa 	srli	r2,r4,23
    64ec:	2806d5fa 	srli	r3,r5,23
    64f0:	01802034 	movhi	r6,128
    64f4:	31bfffc4 	addi	r6,r6,-1
    64f8:	10803fcc 	andi	r2,r2,255
    64fc:	01c03fc4 	movi	r7,255
    6500:	3110703a 	and	r8,r6,r4
    6504:	18c03fcc 	andi	r3,r3,255
    6508:	314c703a 	and	r6,r6,r5
    650c:	2008d7fa 	srli	r4,r4,31
    6510:	280ad7fa 	srli	r5,r5,31
    6514:	11c01926 	beq	r2,r7,657c <__gesf2+0x94>
    6518:	01c03fc4 	movi	r7,255
    651c:	19c00f26 	beq	r3,r7,655c <__gesf2+0x74>
    6520:	1000061e 	bne	r2,zero,653c <__gesf2+0x54>
    6524:	400f003a 	cmpeq	r7,r8,zero
    6528:	1800071e 	bne	r3,zero,6548 <__gesf2+0x60>
    652c:	3000061e 	bne	r6,zero,6548 <__gesf2+0x60>
    6530:	0005883a 	mov	r2,zero
    6534:	40000e1e 	bne	r8,zero,6570 <__gesf2+0x88>
    6538:	f800283a 	ret
    653c:	18000a1e 	bne	r3,zero,6568 <__gesf2+0x80>
    6540:	30000b26 	beq	r6,zero,6570 <__gesf2+0x88>
    6544:	000f883a 	mov	r7,zero
    6548:	29403fcc 	andi	r5,r5,255
    654c:	38000726 	beq	r7,zero,656c <__gesf2+0x84>
    6550:	28000826 	beq	r5,zero,6574 <__gesf2+0x8c>
    6554:	00800044 	movi	r2,1
    6558:	f800283a 	ret
    655c:	303ff026 	beq	r6,zero,6520 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006520>
    6560:	00bfff84 	movi	r2,-2
    6564:	f800283a 	ret
    6568:	29403fcc 	andi	r5,r5,255
    656c:	21400526 	beq	r4,r5,6584 <__gesf2+0x9c>
    6570:	203ff826 	beq	r4,zero,6554 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006554>
    6574:	00bfffc4 	movi	r2,-1
    6578:	f800283a 	ret
    657c:	403fe626 	beq	r8,zero,6518 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006518>
    6580:	003ff706 	br	6560 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006560>
    6584:	18bffa16 	blt	r3,r2,6570 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006570>
    6588:	10c00216 	blt	r2,r3,6594 <__gesf2+0xac>
    658c:	323ff836 	bltu	r6,r8,6570 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006570>
    6590:	4180022e 	bgeu	r8,r6,659c <__gesf2+0xb4>
    6594:	203fef1e 	bne	r4,zero,6554 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006554>
    6598:	003ff606 	br	6574 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006574>
    659c:	0005883a 	mov	r2,zero
    65a0:	f800283a 	ret

000065a4 <__lesf2>:
    65a4:	2004d5fa 	srli	r2,r4,23
    65a8:	280cd5fa 	srli	r6,r5,23
    65ac:	00c02034 	movhi	r3,128
    65b0:	18ffffc4 	addi	r3,r3,-1
    65b4:	10803fcc 	andi	r2,r2,255
    65b8:	01c03fc4 	movi	r7,255
    65bc:	1910703a 	and	r8,r3,r4
    65c0:	31803fcc 	andi	r6,r6,255
    65c4:	1946703a 	and	r3,r3,r5
    65c8:	2008d7fa 	srli	r4,r4,31
    65cc:	280ad7fa 	srli	r5,r5,31
    65d0:	11c01b26 	beq	r2,r7,6640 <__lesf2+0x9c>
    65d4:	01c03fc4 	movi	r7,255
    65d8:	31c01126 	beq	r6,r7,6620 <__lesf2+0x7c>
    65dc:	1000071e 	bne	r2,zero,65fc <__lesf2+0x58>
    65e0:	400f003a 	cmpeq	r7,r8,zero
    65e4:	21003fcc 	andi	r4,r4,255
    65e8:	3000081e 	bne	r6,zero,660c <__lesf2+0x68>
    65ec:	1800071e 	bne	r3,zero,660c <__lesf2+0x68>
    65f0:	0005883a 	mov	r2,zero
    65f4:	40000f1e 	bne	r8,zero,6634 <__lesf2+0x90>
    65f8:	f800283a 	ret
    65fc:	21003fcc 	andi	r4,r4,255
    6600:	30000a1e 	bne	r6,zero,662c <__lesf2+0x88>
    6604:	18000b26 	beq	r3,zero,6634 <__lesf2+0x90>
    6608:	000f883a 	mov	r7,zero
    660c:	29403fcc 	andi	r5,r5,255
    6610:	38000726 	beq	r7,zero,6630 <__lesf2+0x8c>
    6614:	28000826 	beq	r5,zero,6638 <__lesf2+0x94>
    6618:	00800044 	movi	r2,1
    661c:	f800283a 	ret
    6620:	183fee26 	beq	r3,zero,65dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70065dc>
    6624:	00800084 	movi	r2,2
    6628:	f800283a 	ret
    662c:	29403fcc 	andi	r5,r5,255
    6630:	21400626 	beq	r4,r5,664c <__lesf2+0xa8>
    6634:	203ff826 	beq	r4,zero,6618 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006618>
    6638:	00bfffc4 	movi	r2,-1
    663c:	f800283a 	ret
    6640:	403fe426 	beq	r8,zero,65d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70065d4>
    6644:	00800084 	movi	r2,2
    6648:	f800283a 	ret
    664c:	30bff916 	blt	r6,r2,6634 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006634>
    6650:	11800216 	blt	r2,r6,665c <__lesf2+0xb8>
    6654:	1a3ff736 	bltu	r3,r8,6634 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006634>
    6658:	40c0022e 	bgeu	r8,r3,6664 <__lesf2+0xc0>
    665c:	203fee1e 	bne	r4,zero,6618 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006618>
    6660:	003ff506 	br	6638 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006638>
    6664:	0005883a 	mov	r2,zero
    6668:	f800283a 	ret

0000666c <__fixsfsi>:
    666c:	200ad5fa 	srli	r5,r4,23
    6670:	00c02034 	movhi	r3,128
    6674:	18ffffc4 	addi	r3,r3,-1
    6678:	29403fcc 	andi	r5,r5,255
    667c:	00801f84 	movi	r2,126
    6680:	1906703a 	and	r3,r3,r4
    6684:	2008d7fa 	srli	r4,r4,31
    6688:	11400e0e 	bge	r2,r5,66c4 <__fixsfsi+0x58>
    668c:	00802744 	movi	r2,157
    6690:	11400816 	blt	r2,r5,66b4 <__fixsfsi+0x48>
    6694:	00802544 	movi	r2,149
    6698:	18c02034 	orhi	r3,r3,128
    669c:	11400b0e 	bge	r2,r5,66cc <__fixsfsi+0x60>
    66a0:	28bfda84 	addi	r2,r5,-150
    66a4:	1884983a 	sll	r2,r3,r2
    66a8:	20000726 	beq	r4,zero,66c8 <__fixsfsi+0x5c>
    66ac:	0085c83a 	sub	r2,zero,r2
    66b0:	f800283a 	ret
    66b4:	00a00034 	movhi	r2,32768
    66b8:	10bfffc4 	addi	r2,r2,-1
    66bc:	2085883a 	add	r2,r4,r2
    66c0:	f800283a 	ret
    66c4:	0005883a 	mov	r2,zero
    66c8:	f800283a 	ret
    66cc:	00802584 	movi	r2,150
    66d0:	1145c83a 	sub	r2,r2,r5
    66d4:	1884d83a 	srl	r2,r3,r2
    66d8:	003ff306 	br	66a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70066a8>

000066dc <__floatsisf>:
    66dc:	defffd04 	addi	sp,sp,-12
    66e0:	dfc00215 	stw	ra,8(sp)
    66e4:	dc400115 	stw	r17,4(sp)
    66e8:	dc000015 	stw	r16,0(sp)
    66ec:	20003526 	beq	r4,zero,67c4 <__floatsisf+0xe8>
    66f0:	2021883a 	mov	r16,r4
    66f4:	2022d7fa 	srli	r17,r4,31
    66f8:	20003616 	blt	r4,zero,67d4 <__floatsisf+0xf8>
    66fc:	8009883a 	mov	r4,r16
    6700:	00078380 	call	7838 <__clzsi2>
    6704:	00c02784 	movi	r3,158
    6708:	1887c83a 	sub	r3,r3,r2
    670c:	01002584 	movi	r4,150
    6710:	20c01416 	blt	r4,r3,6764 <__floatsisf+0x88>
    6714:	20c9c83a 	sub	r4,r4,r3
    6718:	8120983a 	sll	r16,r16,r4
    671c:	00802034 	movhi	r2,128
    6720:	10bfffc4 	addi	r2,r2,-1
    6724:	8809883a 	mov	r4,r17
    6728:	80a0703a 	and	r16,r16,r2
    672c:	18803fcc 	andi	r2,r3,255
    6730:	100695fa 	slli	r3,r2,23
    6734:	20803fcc 	andi	r2,r4,255
    6738:	100897fa 	slli	r4,r2,31
    673c:	00802034 	movhi	r2,128
    6740:	10bfffc4 	addi	r2,r2,-1
    6744:	8084703a 	and	r2,r16,r2
    6748:	10c4b03a 	or	r2,r2,r3
    674c:	1104b03a 	or	r2,r2,r4
    6750:	dfc00217 	ldw	ra,8(sp)
    6754:	dc400117 	ldw	r17,4(sp)
    6758:	dc000017 	ldw	r16,0(sp)
    675c:	dec00304 	addi	sp,sp,12
    6760:	f800283a 	ret
    6764:	01002644 	movi	r4,153
    6768:	20c01c16 	blt	r4,r3,67dc <__floatsisf+0x100>
    676c:	20c9c83a 	sub	r4,r4,r3
    6770:	8120983a 	sll	r16,r16,r4
    6774:	013f0034 	movhi	r4,64512
    6778:	213fffc4 	addi	r4,r4,-1
    677c:	814001cc 	andi	r5,r16,7
    6780:	8108703a 	and	r4,r16,r4
    6784:	28000426 	beq	r5,zero,6798 <__floatsisf+0xbc>
    6788:	840003cc 	andi	r16,r16,15
    678c:	01400104 	movi	r5,4
    6790:	81400126 	beq	r16,r5,6798 <__floatsisf+0xbc>
    6794:	2149883a 	add	r4,r4,r5
    6798:	2141002c 	andhi	r5,r4,1024
    679c:	28000526 	beq	r5,zero,67b4 <__floatsisf+0xd8>
    67a0:	00c027c4 	movi	r3,159
    67a4:	1887c83a 	sub	r3,r3,r2
    67a8:	00bf0034 	movhi	r2,64512
    67ac:	10bfffc4 	addi	r2,r2,-1
    67b0:	2088703a 	and	r4,r4,r2
    67b4:	202091ba 	slli	r16,r4,6
    67b8:	8809883a 	mov	r4,r17
    67bc:	8020d27a 	srli	r16,r16,9
    67c0:	003fda06 	br	672c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700672c>
    67c4:	0009883a 	mov	r4,zero
    67c8:	0007883a 	mov	r3,zero
    67cc:	0021883a 	mov	r16,zero
    67d0:	003fd606 	br	672c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700672c>
    67d4:	0121c83a 	sub	r16,zero,r4
    67d8:	003fc806 	br	66fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70066fc>
    67dc:	01002e44 	movi	r4,185
    67e0:	20c9c83a 	sub	r4,r4,r3
    67e4:	01400144 	movi	r5,5
    67e8:	8108983a 	sll	r4,r16,r4
    67ec:	288bc83a 	sub	r5,r5,r2
    67f0:	8160d83a 	srl	r16,r16,r5
    67f4:	2008c03a 	cmpne	r4,r4,zero
    67f8:	8120b03a 	or	r16,r16,r4
    67fc:	003fdd06 	br	6774 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006774>

00006800 <__adddf3>:
    6800:	02c00434 	movhi	r11,16
    6804:	5affffc4 	addi	r11,r11,-1
    6808:	2806d7fa 	srli	r3,r5,31
    680c:	2ad4703a 	and	r10,r5,r11
    6810:	3ad2703a 	and	r9,r7,r11
    6814:	3804d53a 	srli	r2,r7,20
    6818:	3018d77a 	srli	r12,r6,29
    681c:	280ad53a 	srli	r5,r5,20
    6820:	501490fa 	slli	r10,r10,3
    6824:	2010d77a 	srli	r8,r4,29
    6828:	481290fa 	slli	r9,r9,3
    682c:	380ed7fa 	srli	r7,r7,31
    6830:	defffb04 	addi	sp,sp,-20
    6834:	dc800215 	stw	r18,8(sp)
    6838:	dc400115 	stw	r17,4(sp)
    683c:	dc000015 	stw	r16,0(sp)
    6840:	dfc00415 	stw	ra,16(sp)
    6844:	dcc00315 	stw	r19,12(sp)
    6848:	1c803fcc 	andi	r18,r3,255
    684c:	2c01ffcc 	andi	r16,r5,2047
    6850:	5210b03a 	or	r8,r10,r8
    6854:	202290fa 	slli	r17,r4,3
    6858:	1081ffcc 	andi	r2,r2,2047
    685c:	4b12b03a 	or	r9,r9,r12
    6860:	300c90fa 	slli	r6,r6,3
    6864:	91c07526 	beq	r18,r7,6a3c <__adddf3+0x23c>
    6868:	8087c83a 	sub	r3,r16,r2
    686c:	00c0ab0e 	bge	zero,r3,6b1c <__adddf3+0x31c>
    6870:	10002a1e 	bne	r2,zero,691c <__adddf3+0x11c>
    6874:	4984b03a 	or	r2,r9,r6
    6878:	1000961e 	bne	r2,zero,6ad4 <__adddf3+0x2d4>
    687c:	888001cc 	andi	r2,r17,7
    6880:	10000726 	beq	r2,zero,68a0 <__adddf3+0xa0>
    6884:	888003cc 	andi	r2,r17,15
    6888:	00c00104 	movi	r3,4
    688c:	10c00426 	beq	r2,r3,68a0 <__adddf3+0xa0>
    6890:	88c7883a 	add	r3,r17,r3
    6894:	1c63803a 	cmpltu	r17,r3,r17
    6898:	4451883a 	add	r8,r8,r17
    689c:	1823883a 	mov	r17,r3
    68a0:	4080202c 	andhi	r2,r8,128
    68a4:	10005926 	beq	r2,zero,6a0c <__adddf3+0x20c>
    68a8:	84000044 	addi	r16,r16,1
    68ac:	0081ffc4 	movi	r2,2047
    68b0:	8080ba26 	beq	r16,r2,6b9c <__adddf3+0x39c>
    68b4:	00bfe034 	movhi	r2,65408
    68b8:	10bfffc4 	addi	r2,r2,-1
    68bc:	4090703a 	and	r8,r8,r2
    68c0:	4004977a 	slli	r2,r8,29
    68c4:	4010927a 	slli	r8,r8,9
    68c8:	8822d0fa 	srli	r17,r17,3
    68cc:	8401ffcc 	andi	r16,r16,2047
    68d0:	4010d33a 	srli	r8,r8,12
    68d4:	9007883a 	mov	r3,r18
    68d8:	1444b03a 	or	r2,r2,r17
    68dc:	8401ffcc 	andi	r16,r16,2047
    68e0:	8020953a 	slli	r16,r16,20
    68e4:	18c03fcc 	andi	r3,r3,255
    68e8:	01000434 	movhi	r4,16
    68ec:	213fffc4 	addi	r4,r4,-1
    68f0:	180697fa 	slli	r3,r3,31
    68f4:	4110703a 	and	r8,r8,r4
    68f8:	4410b03a 	or	r8,r8,r16
    68fc:	40c6b03a 	or	r3,r8,r3
    6900:	dfc00417 	ldw	ra,16(sp)
    6904:	dcc00317 	ldw	r19,12(sp)
    6908:	dc800217 	ldw	r18,8(sp)
    690c:	dc400117 	ldw	r17,4(sp)
    6910:	dc000017 	ldw	r16,0(sp)
    6914:	dec00504 	addi	sp,sp,20
    6918:	f800283a 	ret
    691c:	0081ffc4 	movi	r2,2047
    6920:	80bfd626 	beq	r16,r2,687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700687c>
    6924:	4a402034 	orhi	r9,r9,128
    6928:	00800e04 	movi	r2,56
    692c:	10c09f16 	blt	r2,r3,6bac <__adddf3+0x3ac>
    6930:	008007c4 	movi	r2,31
    6934:	10c0c216 	blt	r2,r3,6c40 <__adddf3+0x440>
    6938:	00800804 	movi	r2,32
    693c:	10c5c83a 	sub	r2,r2,r3
    6940:	488a983a 	sll	r5,r9,r2
    6944:	30c8d83a 	srl	r4,r6,r3
    6948:	3084983a 	sll	r2,r6,r2
    694c:	48c6d83a 	srl	r3,r9,r3
    6950:	290cb03a 	or	r6,r5,r4
    6954:	1004c03a 	cmpne	r2,r2,zero
    6958:	308cb03a 	or	r6,r6,r2
    695c:	898dc83a 	sub	r6,r17,r6
    6960:	89a3803a 	cmpltu	r17,r17,r6
    6964:	40d1c83a 	sub	r8,r8,r3
    6968:	4451c83a 	sub	r8,r8,r17
    696c:	3023883a 	mov	r17,r6
    6970:	4080202c 	andhi	r2,r8,128
    6974:	10002326 	beq	r2,zero,6a04 <__adddf3+0x204>
    6978:	04c02034 	movhi	r19,128
    697c:	9cffffc4 	addi	r19,r19,-1
    6980:	44e6703a 	and	r19,r8,r19
    6984:	98007626 	beq	r19,zero,6b60 <__adddf3+0x360>
    6988:	9809883a 	mov	r4,r19
    698c:	00078380 	call	7838 <__clzsi2>
    6990:	10fffe04 	addi	r3,r2,-8
    6994:	010007c4 	movi	r4,31
    6998:	20c07716 	blt	r4,r3,6b78 <__adddf3+0x378>
    699c:	00800804 	movi	r2,32
    69a0:	10c5c83a 	sub	r2,r2,r3
    69a4:	8884d83a 	srl	r2,r17,r2
    69a8:	98d0983a 	sll	r8,r19,r3
    69ac:	88e2983a 	sll	r17,r17,r3
    69b0:	1204b03a 	or	r2,r2,r8
    69b4:	1c007416 	blt	r3,r16,6b88 <__adddf3+0x388>
    69b8:	1c21c83a 	sub	r16,r3,r16
    69bc:	82000044 	addi	r8,r16,1
    69c0:	00c007c4 	movi	r3,31
    69c4:	1a009116 	blt	r3,r8,6c0c <__adddf3+0x40c>
    69c8:	00c00804 	movi	r3,32
    69cc:	1a07c83a 	sub	r3,r3,r8
    69d0:	8a08d83a 	srl	r4,r17,r8
    69d4:	88e2983a 	sll	r17,r17,r3
    69d8:	10c6983a 	sll	r3,r2,r3
    69dc:	1210d83a 	srl	r8,r2,r8
    69e0:	8804c03a 	cmpne	r2,r17,zero
    69e4:	1906b03a 	or	r3,r3,r4
    69e8:	18a2b03a 	or	r17,r3,r2
    69ec:	0021883a 	mov	r16,zero
    69f0:	003fa206 	br	687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700687c>
    69f4:	1890b03a 	or	r8,r3,r2
    69f8:	40017d26 	beq	r8,zero,6ff0 <__adddf3+0x7f0>
    69fc:	1011883a 	mov	r8,r2
    6a00:	1823883a 	mov	r17,r3
    6a04:	888001cc 	andi	r2,r17,7
    6a08:	103f9e1e 	bne	r2,zero,6884 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006884>
    6a0c:	4004977a 	slli	r2,r8,29
    6a10:	8822d0fa 	srli	r17,r17,3
    6a14:	4010d0fa 	srli	r8,r8,3
    6a18:	9007883a 	mov	r3,r18
    6a1c:	1444b03a 	or	r2,r2,r17
    6a20:	0101ffc4 	movi	r4,2047
    6a24:	81002426 	beq	r16,r4,6ab8 <__adddf3+0x2b8>
    6a28:	8120703a 	and	r16,r16,r4
    6a2c:	01000434 	movhi	r4,16
    6a30:	213fffc4 	addi	r4,r4,-1
    6a34:	4110703a 	and	r8,r8,r4
    6a38:	003fa806 	br	68dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70068dc>
    6a3c:	8089c83a 	sub	r4,r16,r2
    6a40:	01005e0e 	bge	zero,r4,6bbc <__adddf3+0x3bc>
    6a44:	10002b26 	beq	r2,zero,6af4 <__adddf3+0x2f4>
    6a48:	0081ffc4 	movi	r2,2047
    6a4c:	80bf8b26 	beq	r16,r2,687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700687c>
    6a50:	4a402034 	orhi	r9,r9,128
    6a54:	00800e04 	movi	r2,56
    6a58:	1100a40e 	bge	r2,r4,6cec <__adddf3+0x4ec>
    6a5c:	498cb03a 	or	r6,r9,r6
    6a60:	300ac03a 	cmpne	r5,r6,zero
    6a64:	0013883a 	mov	r9,zero
    6a68:	2c4b883a 	add	r5,r5,r17
    6a6c:	2c63803a 	cmpltu	r17,r5,r17
    6a70:	4a11883a 	add	r8,r9,r8
    6a74:	8a11883a 	add	r8,r17,r8
    6a78:	2823883a 	mov	r17,r5
    6a7c:	4080202c 	andhi	r2,r8,128
    6a80:	103fe026 	beq	r2,zero,6a04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a04>
    6a84:	84000044 	addi	r16,r16,1
    6a88:	0081ffc4 	movi	r2,2047
    6a8c:	8080d226 	beq	r16,r2,6dd8 <__adddf3+0x5d8>
    6a90:	00bfe034 	movhi	r2,65408
    6a94:	10bfffc4 	addi	r2,r2,-1
    6a98:	4090703a 	and	r8,r8,r2
    6a9c:	880ad07a 	srli	r5,r17,1
    6aa0:	400897fa 	slli	r4,r8,31
    6aa4:	88c0004c 	andi	r3,r17,1
    6aa8:	28e2b03a 	or	r17,r5,r3
    6aac:	4010d07a 	srli	r8,r8,1
    6ab0:	2462b03a 	or	r17,r4,r17
    6ab4:	003f7106 	br	687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700687c>
    6ab8:	4088b03a 	or	r4,r8,r2
    6abc:	20014526 	beq	r4,zero,6fd4 <__adddf3+0x7d4>
    6ac0:	01000434 	movhi	r4,16
    6ac4:	42000234 	orhi	r8,r8,8
    6ac8:	213fffc4 	addi	r4,r4,-1
    6acc:	4110703a 	and	r8,r8,r4
    6ad0:	003f8206 	br	68dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70068dc>
    6ad4:	18ffffc4 	addi	r3,r3,-1
    6ad8:	1800491e 	bne	r3,zero,6c00 <__adddf3+0x400>
    6adc:	898bc83a 	sub	r5,r17,r6
    6ae0:	8963803a 	cmpltu	r17,r17,r5
    6ae4:	4251c83a 	sub	r8,r8,r9
    6ae8:	4451c83a 	sub	r8,r8,r17
    6aec:	2823883a 	mov	r17,r5
    6af0:	003f9f06 	br	6970 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006970>
    6af4:	4984b03a 	or	r2,r9,r6
    6af8:	103f6026 	beq	r2,zero,687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700687c>
    6afc:	213fffc4 	addi	r4,r4,-1
    6b00:	2000931e 	bne	r4,zero,6d50 <__adddf3+0x550>
    6b04:	898d883a 	add	r6,r17,r6
    6b08:	3463803a 	cmpltu	r17,r6,r17
    6b0c:	4251883a 	add	r8,r8,r9
    6b10:	8a11883a 	add	r8,r17,r8
    6b14:	3023883a 	mov	r17,r6
    6b18:	003fd806 	br	6a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a7c>
    6b1c:	1800541e 	bne	r3,zero,6c70 <__adddf3+0x470>
    6b20:	80800044 	addi	r2,r16,1
    6b24:	1081ffcc 	andi	r2,r2,2047
    6b28:	00c00044 	movi	r3,1
    6b2c:	1880a00e 	bge	r3,r2,6db0 <__adddf3+0x5b0>
    6b30:	8989c83a 	sub	r4,r17,r6
    6b34:	8905803a 	cmpltu	r2,r17,r4
    6b38:	4267c83a 	sub	r19,r8,r9
    6b3c:	98a7c83a 	sub	r19,r19,r2
    6b40:	9880202c 	andhi	r2,r19,128
    6b44:	10006326 	beq	r2,zero,6cd4 <__adddf3+0x4d4>
    6b48:	3463c83a 	sub	r17,r6,r17
    6b4c:	4a07c83a 	sub	r3,r9,r8
    6b50:	344d803a 	cmpltu	r6,r6,r17
    6b54:	19a7c83a 	sub	r19,r3,r6
    6b58:	3825883a 	mov	r18,r7
    6b5c:	983f8a1e 	bne	r19,zero,6988 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006988>
    6b60:	8809883a 	mov	r4,r17
    6b64:	00078380 	call	7838 <__clzsi2>
    6b68:	10800804 	addi	r2,r2,32
    6b6c:	10fffe04 	addi	r3,r2,-8
    6b70:	010007c4 	movi	r4,31
    6b74:	20ff890e 	bge	r4,r3,699c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700699c>
    6b78:	10bff604 	addi	r2,r2,-40
    6b7c:	8884983a 	sll	r2,r17,r2
    6b80:	0023883a 	mov	r17,zero
    6b84:	1c3f8c0e 	bge	r3,r16,69b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70069b8>
    6b88:	023fe034 	movhi	r8,65408
    6b8c:	423fffc4 	addi	r8,r8,-1
    6b90:	80e1c83a 	sub	r16,r16,r3
    6b94:	1210703a 	and	r8,r2,r8
    6b98:	003f3806 	br	687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700687c>
    6b9c:	9007883a 	mov	r3,r18
    6ba0:	0011883a 	mov	r8,zero
    6ba4:	0005883a 	mov	r2,zero
    6ba8:	003f4c06 	br	68dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70068dc>
    6bac:	498cb03a 	or	r6,r9,r6
    6bb0:	300cc03a 	cmpne	r6,r6,zero
    6bb4:	0007883a 	mov	r3,zero
    6bb8:	003f6806 	br	695c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700695c>
    6bbc:	20009c1e 	bne	r4,zero,6e30 <__adddf3+0x630>
    6bc0:	80800044 	addi	r2,r16,1
    6bc4:	1141ffcc 	andi	r5,r2,2047
    6bc8:	01000044 	movi	r4,1
    6bcc:	2140670e 	bge	r4,r5,6d6c <__adddf3+0x56c>
    6bd0:	0101ffc4 	movi	r4,2047
    6bd4:	11007f26 	beq	r2,r4,6dd4 <__adddf3+0x5d4>
    6bd8:	898d883a 	add	r6,r17,r6
    6bdc:	4247883a 	add	r3,r8,r9
    6be0:	3451803a 	cmpltu	r8,r6,r17
    6be4:	40d1883a 	add	r8,r8,r3
    6be8:	402297fa 	slli	r17,r8,31
    6bec:	300cd07a 	srli	r6,r6,1
    6bf0:	4010d07a 	srli	r8,r8,1
    6bf4:	1021883a 	mov	r16,r2
    6bf8:	89a2b03a 	or	r17,r17,r6
    6bfc:	003f1f06 	br	687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700687c>
    6c00:	0081ffc4 	movi	r2,2047
    6c04:	80bf481e 	bne	r16,r2,6928 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006928>
    6c08:	003f1c06 	br	687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700687c>
    6c0c:	843ff844 	addi	r16,r16,-31
    6c10:	01000804 	movi	r4,32
    6c14:	1406d83a 	srl	r3,r2,r16
    6c18:	41005026 	beq	r8,r4,6d5c <__adddf3+0x55c>
    6c1c:	01001004 	movi	r4,64
    6c20:	2211c83a 	sub	r8,r4,r8
    6c24:	1204983a 	sll	r2,r2,r8
    6c28:	88a2b03a 	or	r17,r17,r2
    6c2c:	8822c03a 	cmpne	r17,r17,zero
    6c30:	1c62b03a 	or	r17,r3,r17
    6c34:	0011883a 	mov	r8,zero
    6c38:	0021883a 	mov	r16,zero
    6c3c:	003f7106 	br	6a04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a04>
    6c40:	193ff804 	addi	r4,r3,-32
    6c44:	00800804 	movi	r2,32
    6c48:	4908d83a 	srl	r4,r9,r4
    6c4c:	18804526 	beq	r3,r2,6d64 <__adddf3+0x564>
    6c50:	00801004 	movi	r2,64
    6c54:	10c5c83a 	sub	r2,r2,r3
    6c58:	4886983a 	sll	r3,r9,r2
    6c5c:	198cb03a 	or	r6,r3,r6
    6c60:	300cc03a 	cmpne	r6,r6,zero
    6c64:	218cb03a 	or	r6,r4,r6
    6c68:	0007883a 	mov	r3,zero
    6c6c:	003f3b06 	br	695c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700695c>
    6c70:	80002a26 	beq	r16,zero,6d1c <__adddf3+0x51c>
    6c74:	0101ffc4 	movi	r4,2047
    6c78:	11006826 	beq	r2,r4,6e1c <__adddf3+0x61c>
    6c7c:	00c7c83a 	sub	r3,zero,r3
    6c80:	42002034 	orhi	r8,r8,128
    6c84:	01000e04 	movi	r4,56
    6c88:	20c07c16 	blt	r4,r3,6e7c <__adddf3+0x67c>
    6c8c:	010007c4 	movi	r4,31
    6c90:	20c0da16 	blt	r4,r3,6ffc <__adddf3+0x7fc>
    6c94:	01000804 	movi	r4,32
    6c98:	20c9c83a 	sub	r4,r4,r3
    6c9c:	4114983a 	sll	r10,r8,r4
    6ca0:	88cad83a 	srl	r5,r17,r3
    6ca4:	8908983a 	sll	r4,r17,r4
    6ca8:	40c6d83a 	srl	r3,r8,r3
    6cac:	5162b03a 	or	r17,r10,r5
    6cb0:	2008c03a 	cmpne	r4,r4,zero
    6cb4:	8922b03a 	or	r17,r17,r4
    6cb8:	3463c83a 	sub	r17,r6,r17
    6cbc:	48c7c83a 	sub	r3,r9,r3
    6cc0:	344d803a 	cmpltu	r6,r6,r17
    6cc4:	1991c83a 	sub	r8,r3,r6
    6cc8:	1021883a 	mov	r16,r2
    6ccc:	3825883a 	mov	r18,r7
    6cd0:	003f2706 	br	6970 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006970>
    6cd4:	24d0b03a 	or	r8,r4,r19
    6cd8:	40001b1e 	bne	r8,zero,6d48 <__adddf3+0x548>
    6cdc:	0005883a 	mov	r2,zero
    6ce0:	0007883a 	mov	r3,zero
    6ce4:	0021883a 	mov	r16,zero
    6ce8:	003f4d06 	br	6a20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a20>
    6cec:	008007c4 	movi	r2,31
    6cf0:	11003c16 	blt	r2,r4,6de4 <__adddf3+0x5e4>
    6cf4:	00800804 	movi	r2,32
    6cf8:	1105c83a 	sub	r2,r2,r4
    6cfc:	488e983a 	sll	r7,r9,r2
    6d00:	310ad83a 	srl	r5,r6,r4
    6d04:	3084983a 	sll	r2,r6,r2
    6d08:	4912d83a 	srl	r9,r9,r4
    6d0c:	394ab03a 	or	r5,r7,r5
    6d10:	1004c03a 	cmpne	r2,r2,zero
    6d14:	288ab03a 	or	r5,r5,r2
    6d18:	003f5306 	br	6a68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a68>
    6d1c:	4448b03a 	or	r4,r8,r17
    6d20:	20003e26 	beq	r4,zero,6e1c <__adddf3+0x61c>
    6d24:	00c6303a 	nor	r3,zero,r3
    6d28:	18003a1e 	bne	r3,zero,6e14 <__adddf3+0x614>
    6d2c:	3463c83a 	sub	r17,r6,r17
    6d30:	4a07c83a 	sub	r3,r9,r8
    6d34:	344d803a 	cmpltu	r6,r6,r17
    6d38:	1991c83a 	sub	r8,r3,r6
    6d3c:	1021883a 	mov	r16,r2
    6d40:	3825883a 	mov	r18,r7
    6d44:	003f0a06 	br	6970 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006970>
    6d48:	2023883a 	mov	r17,r4
    6d4c:	003f0d06 	br	6984 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006984>
    6d50:	0081ffc4 	movi	r2,2047
    6d54:	80bf3f1e 	bne	r16,r2,6a54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a54>
    6d58:	003ec806 	br	687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700687c>
    6d5c:	0005883a 	mov	r2,zero
    6d60:	003fb106 	br	6c28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c28>
    6d64:	0007883a 	mov	r3,zero
    6d68:	003fbc06 	br	6c5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c5c>
    6d6c:	4444b03a 	or	r2,r8,r17
    6d70:	8000871e 	bne	r16,zero,6f90 <__adddf3+0x790>
    6d74:	1000ba26 	beq	r2,zero,7060 <__adddf3+0x860>
    6d78:	4984b03a 	or	r2,r9,r6
    6d7c:	103ebf26 	beq	r2,zero,687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700687c>
    6d80:	8985883a 	add	r2,r17,r6
    6d84:	4247883a 	add	r3,r8,r9
    6d88:	1451803a 	cmpltu	r8,r2,r17
    6d8c:	40d1883a 	add	r8,r8,r3
    6d90:	40c0202c 	andhi	r3,r8,128
    6d94:	1023883a 	mov	r17,r2
    6d98:	183f1a26 	beq	r3,zero,6a04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a04>
    6d9c:	00bfe034 	movhi	r2,65408
    6da0:	10bfffc4 	addi	r2,r2,-1
    6da4:	2021883a 	mov	r16,r4
    6da8:	4090703a 	and	r8,r8,r2
    6dac:	003eb306 	br	687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700687c>
    6db0:	4444b03a 	or	r2,r8,r17
    6db4:	8000291e 	bne	r16,zero,6e5c <__adddf3+0x65c>
    6db8:	10004b1e 	bne	r2,zero,6ee8 <__adddf3+0x6e8>
    6dbc:	4990b03a 	or	r8,r9,r6
    6dc0:	40008b26 	beq	r8,zero,6ff0 <__adddf3+0x7f0>
    6dc4:	4811883a 	mov	r8,r9
    6dc8:	3023883a 	mov	r17,r6
    6dcc:	3825883a 	mov	r18,r7
    6dd0:	003eaa06 	br	687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700687c>
    6dd4:	1021883a 	mov	r16,r2
    6dd8:	0011883a 	mov	r8,zero
    6ddc:	0005883a 	mov	r2,zero
    6de0:	003f0f06 	br	6a20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a20>
    6de4:	217ff804 	addi	r5,r4,-32
    6de8:	00800804 	movi	r2,32
    6dec:	494ad83a 	srl	r5,r9,r5
    6df0:	20807d26 	beq	r4,r2,6fe8 <__adddf3+0x7e8>
    6df4:	00801004 	movi	r2,64
    6df8:	1109c83a 	sub	r4,r2,r4
    6dfc:	4912983a 	sll	r9,r9,r4
    6e00:	498cb03a 	or	r6,r9,r6
    6e04:	300cc03a 	cmpne	r6,r6,zero
    6e08:	298ab03a 	or	r5,r5,r6
    6e0c:	0013883a 	mov	r9,zero
    6e10:	003f1506 	br	6a68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a68>
    6e14:	0101ffc4 	movi	r4,2047
    6e18:	113f9a1e 	bne	r2,r4,6c84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006c84>
    6e1c:	4811883a 	mov	r8,r9
    6e20:	3023883a 	mov	r17,r6
    6e24:	1021883a 	mov	r16,r2
    6e28:	3825883a 	mov	r18,r7
    6e2c:	003e9306 	br	687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700687c>
    6e30:	8000161e 	bne	r16,zero,6e8c <__adddf3+0x68c>
    6e34:	444ab03a 	or	r5,r8,r17
    6e38:	28005126 	beq	r5,zero,6f80 <__adddf3+0x780>
    6e3c:	0108303a 	nor	r4,zero,r4
    6e40:	20004d1e 	bne	r4,zero,6f78 <__adddf3+0x778>
    6e44:	89a3883a 	add	r17,r17,r6
    6e48:	4253883a 	add	r9,r8,r9
    6e4c:	898d803a 	cmpltu	r6,r17,r6
    6e50:	3251883a 	add	r8,r6,r9
    6e54:	1021883a 	mov	r16,r2
    6e58:	003f0806 	br	6a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a7c>
    6e5c:	1000301e 	bne	r2,zero,6f20 <__adddf3+0x720>
    6e60:	4984b03a 	or	r2,r9,r6
    6e64:	10007126 	beq	r2,zero,702c <__adddf3+0x82c>
    6e68:	4811883a 	mov	r8,r9
    6e6c:	3023883a 	mov	r17,r6
    6e70:	3825883a 	mov	r18,r7
    6e74:	0401ffc4 	movi	r16,2047
    6e78:	003e8006 	br	687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700687c>
    6e7c:	4462b03a 	or	r17,r8,r17
    6e80:	8822c03a 	cmpne	r17,r17,zero
    6e84:	0007883a 	mov	r3,zero
    6e88:	003f8b06 	br	6cb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006cb8>
    6e8c:	0141ffc4 	movi	r5,2047
    6e90:	11403b26 	beq	r2,r5,6f80 <__adddf3+0x780>
    6e94:	0109c83a 	sub	r4,zero,r4
    6e98:	42002034 	orhi	r8,r8,128
    6e9c:	01400e04 	movi	r5,56
    6ea0:	29006716 	blt	r5,r4,7040 <__adddf3+0x840>
    6ea4:	014007c4 	movi	r5,31
    6ea8:	29007016 	blt	r5,r4,706c <__adddf3+0x86c>
    6eac:	01400804 	movi	r5,32
    6eb0:	290bc83a 	sub	r5,r5,r4
    6eb4:	4154983a 	sll	r10,r8,r5
    6eb8:	890ed83a 	srl	r7,r17,r4
    6ebc:	894a983a 	sll	r5,r17,r5
    6ec0:	4108d83a 	srl	r4,r8,r4
    6ec4:	51e2b03a 	or	r17,r10,r7
    6ec8:	280ac03a 	cmpne	r5,r5,zero
    6ecc:	8962b03a 	or	r17,r17,r5
    6ed0:	89a3883a 	add	r17,r17,r6
    6ed4:	2253883a 	add	r9,r4,r9
    6ed8:	898d803a 	cmpltu	r6,r17,r6
    6edc:	3251883a 	add	r8,r6,r9
    6ee0:	1021883a 	mov	r16,r2
    6ee4:	003ee506 	br	6a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a7c>
    6ee8:	4984b03a 	or	r2,r9,r6
    6eec:	103e6326 	beq	r2,zero,687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700687c>
    6ef0:	8987c83a 	sub	r3,r17,r6
    6ef4:	88c9803a 	cmpltu	r4,r17,r3
    6ef8:	4245c83a 	sub	r2,r8,r9
    6efc:	1105c83a 	sub	r2,r2,r4
    6f00:	1100202c 	andhi	r4,r2,128
    6f04:	203ebb26 	beq	r4,zero,69f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70069f4>
    6f08:	3463c83a 	sub	r17,r6,r17
    6f0c:	4a07c83a 	sub	r3,r9,r8
    6f10:	344d803a 	cmpltu	r6,r6,r17
    6f14:	1991c83a 	sub	r8,r3,r6
    6f18:	3825883a 	mov	r18,r7
    6f1c:	003e5706 	br	687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700687c>
    6f20:	4984b03a 	or	r2,r9,r6
    6f24:	10002e26 	beq	r2,zero,6fe0 <__adddf3+0x7e0>
    6f28:	4004d0fa 	srli	r2,r8,3
    6f2c:	8822d0fa 	srli	r17,r17,3
    6f30:	4010977a 	slli	r8,r8,29
    6f34:	10c0022c 	andhi	r3,r2,8
    6f38:	4462b03a 	or	r17,r8,r17
    6f3c:	18000826 	beq	r3,zero,6f60 <__adddf3+0x760>
    6f40:	4808d0fa 	srli	r4,r9,3
    6f44:	20c0022c 	andhi	r3,r4,8
    6f48:	1800051e 	bne	r3,zero,6f60 <__adddf3+0x760>
    6f4c:	300cd0fa 	srli	r6,r6,3
    6f50:	4806977a 	slli	r3,r9,29
    6f54:	2005883a 	mov	r2,r4
    6f58:	3825883a 	mov	r18,r7
    6f5c:	19a2b03a 	or	r17,r3,r6
    6f60:	8810d77a 	srli	r8,r17,29
    6f64:	100490fa 	slli	r2,r2,3
    6f68:	882290fa 	slli	r17,r17,3
    6f6c:	0401ffc4 	movi	r16,2047
    6f70:	4090b03a 	or	r8,r8,r2
    6f74:	003e4106 	br	687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700687c>
    6f78:	0141ffc4 	movi	r5,2047
    6f7c:	117fc71e 	bne	r2,r5,6e9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006e9c>
    6f80:	4811883a 	mov	r8,r9
    6f84:	3023883a 	mov	r17,r6
    6f88:	1021883a 	mov	r16,r2
    6f8c:	003e3b06 	br	687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700687c>
    6f90:	10002f26 	beq	r2,zero,7050 <__adddf3+0x850>
    6f94:	4984b03a 	or	r2,r9,r6
    6f98:	10001126 	beq	r2,zero,6fe0 <__adddf3+0x7e0>
    6f9c:	4004d0fa 	srli	r2,r8,3
    6fa0:	8822d0fa 	srli	r17,r17,3
    6fa4:	4010977a 	slli	r8,r8,29
    6fa8:	10c0022c 	andhi	r3,r2,8
    6fac:	4462b03a 	or	r17,r8,r17
    6fb0:	183feb26 	beq	r3,zero,6f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f60>
    6fb4:	4808d0fa 	srli	r4,r9,3
    6fb8:	20c0022c 	andhi	r3,r4,8
    6fbc:	183fe81e 	bne	r3,zero,6f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f60>
    6fc0:	300cd0fa 	srli	r6,r6,3
    6fc4:	4806977a 	slli	r3,r9,29
    6fc8:	2005883a 	mov	r2,r4
    6fcc:	19a2b03a 	or	r17,r3,r6
    6fd0:	003fe306 	br	6f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006f60>
    6fd4:	0011883a 	mov	r8,zero
    6fd8:	0005883a 	mov	r2,zero
    6fdc:	003e3f06 	br	68dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70068dc>
    6fe0:	0401ffc4 	movi	r16,2047
    6fe4:	003e2506 	br	687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700687c>
    6fe8:	0013883a 	mov	r9,zero
    6fec:	003f8406 	br	6e00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006e00>
    6ff0:	0005883a 	mov	r2,zero
    6ff4:	0007883a 	mov	r3,zero
    6ff8:	003e8906 	br	6a20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a20>
    6ffc:	197ff804 	addi	r5,r3,-32
    7000:	01000804 	movi	r4,32
    7004:	414ad83a 	srl	r5,r8,r5
    7008:	19002426 	beq	r3,r4,709c <__adddf3+0x89c>
    700c:	01001004 	movi	r4,64
    7010:	20c7c83a 	sub	r3,r4,r3
    7014:	40c6983a 	sll	r3,r8,r3
    7018:	1c46b03a 	or	r3,r3,r17
    701c:	1806c03a 	cmpne	r3,r3,zero
    7020:	28e2b03a 	or	r17,r5,r3
    7024:	0007883a 	mov	r3,zero
    7028:	003f2306 	br	6cb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006cb8>
    702c:	0007883a 	mov	r3,zero
    7030:	5811883a 	mov	r8,r11
    7034:	00bfffc4 	movi	r2,-1
    7038:	0401ffc4 	movi	r16,2047
    703c:	003e7806 	br	6a20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006a20>
    7040:	4462b03a 	or	r17,r8,r17
    7044:	8822c03a 	cmpne	r17,r17,zero
    7048:	0009883a 	mov	r4,zero
    704c:	003fa006 	br	6ed0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ed0>
    7050:	4811883a 	mov	r8,r9
    7054:	3023883a 	mov	r17,r6
    7058:	0401ffc4 	movi	r16,2047
    705c:	003e0706 	br	687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700687c>
    7060:	4811883a 	mov	r8,r9
    7064:	3023883a 	mov	r17,r6
    7068:	003e0406 	br	687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700687c>
    706c:	21fff804 	addi	r7,r4,-32
    7070:	01400804 	movi	r5,32
    7074:	41ced83a 	srl	r7,r8,r7
    7078:	21400a26 	beq	r4,r5,70a4 <__adddf3+0x8a4>
    707c:	01401004 	movi	r5,64
    7080:	2909c83a 	sub	r4,r5,r4
    7084:	4108983a 	sll	r4,r8,r4
    7088:	2448b03a 	or	r4,r4,r17
    708c:	2008c03a 	cmpne	r4,r4,zero
    7090:	3922b03a 	or	r17,r7,r4
    7094:	0009883a 	mov	r4,zero
    7098:	003f8d06 	br	6ed0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7006ed0>
    709c:	0007883a 	mov	r3,zero
    70a0:	003fdd06 	br	7018 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007018>
    70a4:	0009883a 	mov	r4,zero
    70a8:	003ff706 	br	7088 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007088>

000070ac <__fixdfsi>:
    70ac:	280cd53a 	srli	r6,r5,20
    70b0:	00c00434 	movhi	r3,16
    70b4:	18ffffc4 	addi	r3,r3,-1
    70b8:	3181ffcc 	andi	r6,r6,2047
    70bc:	01c0ff84 	movi	r7,1022
    70c0:	28c6703a 	and	r3,r5,r3
    70c4:	280ad7fa 	srli	r5,r5,31
    70c8:	3980120e 	bge	r7,r6,7114 <__fixdfsi+0x68>
    70cc:	00810744 	movi	r2,1053
    70d0:	11800c16 	blt	r2,r6,7104 <__fixdfsi+0x58>
    70d4:	00810cc4 	movi	r2,1075
    70d8:	1185c83a 	sub	r2,r2,r6
    70dc:	01c007c4 	movi	r7,31
    70e0:	18c00434 	orhi	r3,r3,16
    70e4:	38800d16 	blt	r7,r2,711c <__fixdfsi+0x70>
    70e8:	31befb44 	addi	r6,r6,-1043
    70ec:	2084d83a 	srl	r2,r4,r2
    70f0:	1986983a 	sll	r3,r3,r6
    70f4:	1884b03a 	or	r2,r3,r2
    70f8:	28000726 	beq	r5,zero,7118 <__fixdfsi+0x6c>
    70fc:	0085c83a 	sub	r2,zero,r2
    7100:	f800283a 	ret
    7104:	00a00034 	movhi	r2,32768
    7108:	10bfffc4 	addi	r2,r2,-1
    710c:	2885883a 	add	r2,r5,r2
    7110:	f800283a 	ret
    7114:	0005883a 	mov	r2,zero
    7118:	f800283a 	ret
    711c:	008104c4 	movi	r2,1043
    7120:	1185c83a 	sub	r2,r2,r6
    7124:	1884d83a 	srl	r2,r3,r2
    7128:	003ff306 	br	70f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70070f8>

0000712c <__floatsidf>:
    712c:	defffd04 	addi	sp,sp,-12
    7130:	dfc00215 	stw	ra,8(sp)
    7134:	dc400115 	stw	r17,4(sp)
    7138:	dc000015 	stw	r16,0(sp)
    713c:	20002b26 	beq	r4,zero,71ec <__floatsidf+0xc0>
    7140:	2023883a 	mov	r17,r4
    7144:	2020d7fa 	srli	r16,r4,31
    7148:	20002d16 	blt	r4,zero,7200 <__floatsidf+0xd4>
    714c:	8809883a 	mov	r4,r17
    7150:	00078380 	call	7838 <__clzsi2>
    7154:	01410784 	movi	r5,1054
    7158:	288bc83a 	sub	r5,r5,r2
    715c:	01010cc4 	movi	r4,1075
    7160:	2149c83a 	sub	r4,r4,r5
    7164:	00c007c4 	movi	r3,31
    7168:	1900160e 	bge	r3,r4,71c4 <__floatsidf+0x98>
    716c:	00c104c4 	movi	r3,1043
    7170:	1947c83a 	sub	r3,r3,r5
    7174:	88c6983a 	sll	r3,r17,r3
    7178:	00800434 	movhi	r2,16
    717c:	10bfffc4 	addi	r2,r2,-1
    7180:	1886703a 	and	r3,r3,r2
    7184:	2941ffcc 	andi	r5,r5,2047
    7188:	800d883a 	mov	r6,r16
    718c:	0005883a 	mov	r2,zero
    7190:	280a953a 	slli	r5,r5,20
    7194:	31803fcc 	andi	r6,r6,255
    7198:	01000434 	movhi	r4,16
    719c:	300c97fa 	slli	r6,r6,31
    71a0:	213fffc4 	addi	r4,r4,-1
    71a4:	1906703a 	and	r3,r3,r4
    71a8:	1946b03a 	or	r3,r3,r5
    71ac:	1986b03a 	or	r3,r3,r6
    71b0:	dfc00217 	ldw	ra,8(sp)
    71b4:	dc400117 	ldw	r17,4(sp)
    71b8:	dc000017 	ldw	r16,0(sp)
    71bc:	dec00304 	addi	sp,sp,12
    71c0:	f800283a 	ret
    71c4:	00c002c4 	movi	r3,11
    71c8:	1887c83a 	sub	r3,r3,r2
    71cc:	88c6d83a 	srl	r3,r17,r3
    71d0:	8904983a 	sll	r2,r17,r4
    71d4:	01000434 	movhi	r4,16
    71d8:	213fffc4 	addi	r4,r4,-1
    71dc:	2941ffcc 	andi	r5,r5,2047
    71e0:	1906703a 	and	r3,r3,r4
    71e4:	800d883a 	mov	r6,r16
    71e8:	003fe906 	br	7190 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007190>
    71ec:	000d883a 	mov	r6,zero
    71f0:	000b883a 	mov	r5,zero
    71f4:	0007883a 	mov	r3,zero
    71f8:	0005883a 	mov	r2,zero
    71fc:	003fe406 	br	7190 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007190>
    7200:	0123c83a 	sub	r17,zero,r4
    7204:	003fd106 	br	714c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700714c>

00007208 <__extendsfdf2>:
    7208:	200ad5fa 	srli	r5,r4,23
    720c:	defffd04 	addi	sp,sp,-12
    7210:	dc400115 	stw	r17,4(sp)
    7214:	29403fcc 	andi	r5,r5,255
    7218:	29800044 	addi	r6,r5,1
    721c:	04402034 	movhi	r17,128
    7220:	dc000015 	stw	r16,0(sp)
    7224:	8c7fffc4 	addi	r17,r17,-1
    7228:	dfc00215 	stw	ra,8(sp)
    722c:	31803fcc 	andi	r6,r6,255
    7230:	00800044 	movi	r2,1
    7234:	8922703a 	and	r17,r17,r4
    7238:	2020d7fa 	srli	r16,r4,31
    723c:	1180110e 	bge	r2,r6,7284 <__extendsfdf2+0x7c>
    7240:	880cd0fa 	srli	r6,r17,3
    7244:	8822977a 	slli	r17,r17,29
    7248:	2940e004 	addi	r5,r5,896
    724c:	2941ffcc 	andi	r5,r5,2047
    7250:	2804953a 	slli	r2,r5,20
    7254:	01400434 	movhi	r5,16
    7258:	800697fa 	slli	r3,r16,31
    725c:	297fffc4 	addi	r5,r5,-1
    7260:	314a703a 	and	r5,r6,r5
    7264:	288ab03a 	or	r5,r5,r2
    7268:	28c6b03a 	or	r3,r5,r3
    726c:	8805883a 	mov	r2,r17
    7270:	dfc00217 	ldw	ra,8(sp)
    7274:	dc400117 	ldw	r17,4(sp)
    7278:	dc000017 	ldw	r16,0(sp)
    727c:	dec00304 	addi	sp,sp,12
    7280:	f800283a 	ret
    7284:	2800111e 	bne	r5,zero,72cc <__extendsfdf2+0xc4>
    7288:	88001c26 	beq	r17,zero,72fc <__extendsfdf2+0xf4>
    728c:	8809883a 	mov	r4,r17
    7290:	00078380 	call	7838 <__clzsi2>
    7294:	00c00284 	movi	r3,10
    7298:	18801b16 	blt	r3,r2,7308 <__extendsfdf2+0x100>
    729c:	018002c4 	movi	r6,11
    72a0:	308dc83a 	sub	r6,r6,r2
    72a4:	11000544 	addi	r4,r2,21
    72a8:	8986d83a 	srl	r3,r17,r6
    72ac:	8922983a 	sll	r17,r17,r4
    72b0:	0180e244 	movi	r6,905
    72b4:	01400434 	movhi	r5,16
    72b8:	3085c83a 	sub	r2,r6,r2
    72bc:	297fffc4 	addi	r5,r5,-1
    72c0:	194c703a 	and	r6,r3,r5
    72c4:	1141ffcc 	andi	r5,r2,2047
    72c8:	003fe006 	br	724c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700724c>
    72cc:	88000826 	beq	r17,zero,72f0 <__extendsfdf2+0xe8>
    72d0:	880cd0fa 	srli	r6,r17,3
    72d4:	00800434 	movhi	r2,16
    72d8:	10bfffc4 	addi	r2,r2,-1
    72dc:	31800234 	orhi	r6,r6,8
    72e0:	8822977a 	slli	r17,r17,29
    72e4:	308c703a 	and	r6,r6,r2
    72e8:	0141ffc4 	movi	r5,2047
    72ec:	003fd706 	br	724c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700724c>
    72f0:	0141ffc4 	movi	r5,2047
    72f4:	000d883a 	mov	r6,zero
    72f8:	003fd406 	br	724c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700724c>
    72fc:	000b883a 	mov	r5,zero
    7300:	000d883a 	mov	r6,zero
    7304:	003fd106 	br	724c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700724c>
    7308:	11bffd44 	addi	r6,r2,-11
    730c:	8986983a 	sll	r3,r17,r6
    7310:	0023883a 	mov	r17,zero
    7314:	003fe606 	br	72b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70072b0>

00007318 <_Unwind_ForcedUnwind_Phase2>:
    7318:	defff404 	addi	sp,sp,-48
    731c:	dd800915 	stw	r22,36(sp)
    7320:	058000f4 	movhi	r22,3
    7324:	ddc00a15 	stw	r23,40(sp)
    7328:	dd400815 	stw	r21,32(sp)
    732c:	dd000715 	stw	r20,28(sp)
    7330:	dcc00615 	stw	r19,24(sp)
    7334:	dc400415 	stw	r17,16(sp)
    7338:	dc000315 	stw	r16,12(sp)
    733c:	dfc00b15 	stw	ra,44(sp)
    7340:	dc800515 	stw	r18,20(sp)
    7344:	2021883a 	mov	r16,r4
    7348:	2823883a 	mov	r17,r5
    734c:	24c00317 	ldw	r19,12(r4)
    7350:	25000417 	ldw	r20,16(r4)
    7354:	28c00017 	ldw	r3,0(r5)
    7358:	b5a3ee04 	addi	r22,r22,-28744
    735c:	054001c4 	movi	r21,7
    7360:	05c00204 	movi	r23,8
    7364:	00001606 	br	73c0 <_Unwind_ForcedUnwind_Phase2+0xa8>
    7368:	81800017 	ldw	r6,0(r16)
    736c:	81c00117 	ldw	r7,4(r16)
    7370:	1c800617 	ldw	r18,24(r3)
    7374:	dd000215 	stw	r20,8(sp)
    7378:	dc400115 	stw	r17,4(sp)
    737c:	dc000015 	stw	r16,0(sp)
    7380:	983ee83a 	callr	r19
    7384:	01400284 	movi	r5,10
    7388:	01000044 	movi	r4,1
    738c:	1000241e 	bne	r2,zero,7420 <_Unwind_ForcedUnwind_Phase2+0x108>
    7390:	90000726 	beq	r18,zero,73b0 <_Unwind_ForcedUnwind_Phase2+0x98>
    7394:	81800017 	ldw	r6,0(r16)
    7398:	81c00117 	ldw	r7,4(r16)
    739c:	dc400115 	stw	r17,4(sp)
    73a0:	dc000015 	stw	r16,0(sp)
    73a4:	903ee83a 	callr	r18
    73a8:	15401f26 	beq	r2,r21,7428 <_Unwind_ForcedUnwind_Phase2+0x110>
    73ac:	15c01c1e 	bne	r2,r23,7420 <_Unwind_ForcedUnwind_Phase2+0x108>
    73b0:	88800017 	ldw	r2,0(r17)
    73b4:	10c00017 	ldw	r3,0(r2)
    73b8:	b0c00015 	stw	r3,0(r22)
    73bc:	88c00015 	stw	r3,0(r17)
    73c0:	01400284 	movi	r5,10
    73c4:	01000044 	movi	r4,1
    73c8:	183fe71e 	bne	r3,zero,7368 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007368>
    73cc:	81800017 	ldw	r6,0(r16)
    73d0:	81c00117 	ldw	r7,4(r16)
    73d4:	01400684 	movi	r5,26
    73d8:	dd000215 	stw	r20,8(sp)
    73dc:	dc400115 	stw	r17,4(sp)
    73e0:	dc000015 	stw	r16,0(sp)
    73e4:	01000044 	movi	r4,1
    73e8:	983ee83a 	callr	r19
    73ec:	10000c1e 	bne	r2,zero,7420 <_Unwind_ForcedUnwind_Phase2+0x108>
    73f0:	00800144 	movi	r2,5
    73f4:	dfc00b17 	ldw	ra,44(sp)
    73f8:	ddc00a17 	ldw	r23,40(sp)
    73fc:	dd800917 	ldw	r22,36(sp)
    7400:	dd400817 	ldw	r21,32(sp)
    7404:	dd000717 	ldw	r20,28(sp)
    7408:	dcc00617 	ldw	r19,24(sp)
    740c:	dc800517 	ldw	r18,20(sp)
    7410:	dc400417 	ldw	r17,16(sp)
    7414:	dc000317 	ldw	r16,12(sp)
    7418:	dec00c04 	addi	sp,sp,48
    741c:	f800283a 	ret
    7420:	00800084 	movi	r2,2
    7424:	003ff306 	br	73f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70073f4>
    7428:	a805883a 	mov	r2,r21
    742c:	003ff106 	br	73f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70073f4>

00007430 <_Unwind_RaiseException_Phase2>:
    7430:	28c00017 	ldw	r3,0(r5)
    7434:	defff804 	addi	sp,sp,-32
    7438:	dcc00515 	stw	r19,20(sp)
    743c:	dc800415 	stw	r18,16(sp)
    7440:	dc400315 	stw	r17,12(sp)
    7444:	dc000215 	stw	r16,8(sp)
    7448:	dfc00715 	stw	ra,28(sp)
    744c:	dd000615 	stw	r20,24(sp)
    7450:	2823883a 	mov	r17,r5
    7454:	2021883a 	mov	r16,r4
    7458:	048001c4 	movi	r18,7
    745c:	04c00204 	movi	r19,8
    7460:	18001326 	beq	r3,zero,74b0 <_Unwind_RaiseException_Phase2+0x80>
    7464:	81000417 	ldw	r4,16(r16)
    7468:	1a000617 	ldw	r8,24(r3)
    746c:	19001926 	beq	r3,r4,74d4 <_Unwind_RaiseException_Phase2+0xa4>
    7470:	40000c26 	beq	r8,zero,74a4 <_Unwind_RaiseException_Phase2+0x74>
    7474:	01400084 	movi	r5,2
    7478:	0029883a 	mov	r20,zero
    747c:	81800017 	ldw	r6,0(r16)
    7480:	81c00117 	ldw	r7,4(r16)
    7484:	01000044 	movi	r4,1
    7488:	dc400115 	stw	r17,4(sp)
    748c:	dc000015 	stw	r16,0(sp)
    7490:	403ee83a 	callr	r8
    7494:	14801326 	beq	r2,r18,74e4 <_Unwind_RaiseException_Phase2+0xb4>
    7498:	14c0051e 	bne	r2,r19,74b0 <_Unwind_RaiseException_Phase2+0x80>
    749c:	a000131e 	bne	r20,zero,74ec <_Unwind_RaiseException_Phase2+0xbc>
    74a0:	88c00017 	ldw	r3,0(r17)
    74a4:	18c00017 	ldw	r3,0(r3)
    74a8:	88c00015 	stw	r3,0(r17)
    74ac:	183fed1e 	bne	r3,zero,7464 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007464>
    74b0:	00800084 	movi	r2,2
    74b4:	dfc00717 	ldw	ra,28(sp)
    74b8:	dd000617 	ldw	r20,24(sp)
    74bc:	dcc00517 	ldw	r19,20(sp)
    74c0:	dc800417 	ldw	r18,16(sp)
    74c4:	dc400317 	ldw	r17,12(sp)
    74c8:	dc000217 	ldw	r16,8(sp)
    74cc:	dec00804 	addi	sp,sp,32
    74d0:	f800283a 	ret
    74d4:	40000526 	beq	r8,zero,74ec <_Unwind_RaiseException_Phase2+0xbc>
    74d8:	01400184 	movi	r5,6
    74dc:	05000104 	movi	r20,4
    74e0:	003fe606 	br	747c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700747c>
    74e4:	9005883a 	mov	r2,r18
    74e8:	003ff206 	br	74b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70074b4>
    74ec:	000789c0 	call	789c <abort>

000074f0 <uw_install_context.isra.1>:
    74f0:	20c00017 	ldw	r3,0(r4)
    74f4:	deffff04 	addi	sp,sp,-4
    74f8:	014000f4 	movhi	r5,3
    74fc:	19000917 	ldw	r4,36(r3)
    7500:	df000015 	stw	fp,0(sp)
    7504:	18800804 	addi	r2,r3,32
    7508:	d839883a 	mov	fp,sp
    750c:	2963ee04 	addi	r5,r5,-28744
    7510:	28c00015 	stw	r3,0(r5)
    7514:	17000017 	ldw	fp,0(r2)
    7518:	1ec00a17 	ldw	sp,40(r3)
    751c:	2000683a 	jmp	r4

00007520 <_Unwind_SjLj_Register>:
    7520:	008000f4 	movhi	r2,3
    7524:	10a3ee04 	addi	r2,r2,-28744
    7528:	10c00017 	ldw	r3,0(r2)
    752c:	11000015 	stw	r4,0(r2)
    7530:	20c00015 	stw	r3,0(r4)
    7534:	f800283a 	ret

00007538 <_Unwind_SjLj_Unregister>:
    7538:	20c00017 	ldw	r3,0(r4)
    753c:	008000f4 	movhi	r2,3
    7540:	10a3ee04 	addi	r2,r2,-28744
    7544:	10c00015 	stw	r3,0(r2)
    7548:	f800283a 	ret

0000754c <_Unwind_GetGR>:
    754c:	20800017 	ldw	r2,0(r4)
    7550:	29400084 	addi	r5,r5,2
    7554:	294b883a 	add	r5,r5,r5
    7558:	294b883a 	add	r5,r5,r5
    755c:	114b883a 	add	r5,r2,r5
    7560:	28800017 	ldw	r2,0(r5)
    7564:	f800283a 	ret

00007568 <_Unwind_GetCFA>:
    7568:	20800017 	ldw	r2,0(r4)
    756c:	10000226 	beq	r2,zero,7578 <_Unwind_GetCFA+0x10>
    7570:	10800a17 	ldw	r2,40(r2)
    7574:	f800283a 	ret
    7578:	0005883a 	mov	r2,zero
    757c:	f800283a 	ret

00007580 <_Unwind_SetGR>:
    7580:	20800017 	ldw	r2,0(r4)
    7584:	29400084 	addi	r5,r5,2
    7588:	294b883a 	add	r5,r5,r5
    758c:	294b883a 	add	r5,r5,r5
    7590:	114b883a 	add	r5,r2,r5
    7594:	29800015 	stw	r6,0(r5)
    7598:	f800283a 	ret

0000759c <_Unwind_GetIP>:
    759c:	20800017 	ldw	r2,0(r4)
    75a0:	10800117 	ldw	r2,4(r2)
    75a4:	10800044 	addi	r2,r2,1
    75a8:	f800283a 	ret

000075ac <_Unwind_GetIPInfo>:
    75ac:	20800017 	ldw	r2,0(r4)
    75b0:	28000015 	stw	zero,0(r5)
    75b4:	10000326 	beq	r2,zero,75c4 <_Unwind_GetIPInfo+0x18>
    75b8:	10800117 	ldw	r2,4(r2)
    75bc:	10800044 	addi	r2,r2,1
    75c0:	f800283a 	ret
    75c4:	0005883a 	mov	r2,zero
    75c8:	f800283a 	ret

000075cc <_Unwind_SetIP>:
    75cc:	20800017 	ldw	r2,0(r4)
    75d0:	297fffc4 	addi	r5,r5,-1
    75d4:	11400115 	stw	r5,4(r2)
    75d8:	f800283a 	ret

000075dc <_Unwind_GetLanguageSpecificData>:
    75dc:	20800017 	ldw	r2,0(r4)
    75e0:	10800717 	ldw	r2,28(r2)
    75e4:	f800283a 	ret

000075e8 <_Unwind_GetRegionStart>:
    75e8:	0005883a 	mov	r2,zero
    75ec:	f800283a 	ret

000075f0 <_Unwind_FindEnclosingFunction>:
    75f0:	0005883a 	mov	r2,zero
    75f4:	f800283a 	ret

000075f8 <_Unwind_GetDataRelBase>:
    75f8:	0005883a 	mov	r2,zero
    75fc:	f800283a 	ret

00007600 <_Unwind_GetTextRelBase>:
    7600:	0005883a 	mov	r2,zero
    7604:	f800283a 	ret

00007608 <_Unwind_SjLj_RaiseException>:
    7608:	008000f4 	movhi	r2,3
    760c:	defff804 	addi	sp,sp,-32
    7610:	10a3ee04 	addi	r2,r2,-28744
    7614:	dc800515 	stw	r18,20(sp)
    7618:	14800017 	ldw	r18,0(r2)
    761c:	dfc00715 	stw	ra,28(sp)
    7620:	dcc00615 	stw	r19,24(sp)
    7624:	dc400415 	stw	r17,16(sp)
    7628:	dc000315 	stw	r16,12(sp)
    762c:	dc800215 	stw	r18,8(sp)
    7630:	90001426 	beq	r18,zero,7684 <_Unwind_SjLj_RaiseException+0x7c>
    7634:	2021883a 	mov	r16,r4
    7638:	9005883a 	mov	r2,r18
    763c:	04400184 	movi	r17,6
    7640:	04c00204 	movi	r19,8
    7644:	10800617 	ldw	r2,24(r2)
    7648:	10000a26 	beq	r2,zero,7674 <_Unwind_SjLj_RaiseException+0x6c>
    764c:	81800017 	ldw	r6,0(r16)
    7650:	81c00117 	ldw	r7,4(r16)
    7654:	01400044 	movi	r5,1
    7658:	d8c00204 	addi	r3,sp,8
    765c:	d8c00115 	stw	r3,4(sp)
    7660:	dc000015 	stw	r16,0(sp)
    7664:	2809883a 	mov	r4,r5
    7668:	103ee83a 	callr	r2
    766c:	14400d26 	beq	r2,r17,76a4 <_Unwind_SjLj_RaiseException+0x9c>
    7670:	14c0171e 	bne	r2,r19,76d0 <_Unwind_SjLj_RaiseException+0xc8>
    7674:	d8800217 	ldw	r2,8(sp)
    7678:	10800017 	ldw	r2,0(r2)
    767c:	d8800215 	stw	r2,8(sp)
    7680:	103ff01e 	bne	r2,zero,7644 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007644>
    7684:	00800144 	movi	r2,5
    7688:	dfc00717 	ldw	ra,28(sp)
    768c:	dcc00617 	ldw	r19,24(sp)
    7690:	dc800517 	ldw	r18,20(sp)
    7694:	dc400417 	ldw	r17,16(sp)
    7698:	dc000317 	ldw	r16,12(sp)
    769c:	dec00804 	addi	sp,sp,32
    76a0:	f800283a 	ret
    76a4:	d8800217 	ldw	r2,8(sp)
    76a8:	80000315 	stw	zero,12(r16)
    76ac:	d9400204 	addi	r5,sp,8
    76b0:	80800415 	stw	r2,16(r16)
    76b4:	8009883a 	mov	r4,r16
    76b8:	dc800215 	stw	r18,8(sp)
    76bc:	00074300 	call	7430 <_Unwind_RaiseException_Phase2>
    76c0:	00c001c4 	movi	r3,7
    76c4:	10fff01e 	bne	r2,r3,7688 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007688>
    76c8:	d9000204 	addi	r4,sp,8
    76cc:	00074f00 	call	74f0 <uw_install_context.isra.1>
    76d0:	008000c4 	movi	r2,3
    76d4:	003fec06 	br	7688 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007688>

000076d8 <_Unwind_SjLj_ForcedUnwind>:
    76d8:	00c000f4 	movhi	r3,3
    76dc:	18e3ee04 	addi	r3,r3,-28744
    76e0:	defffe04 	addi	sp,sp,-8
    76e4:	18c00017 	ldw	r3,0(r3)
    76e8:	dfc00115 	stw	ra,4(sp)
    76ec:	21400315 	stw	r5,12(r4)
    76f0:	21800415 	stw	r6,16(r4)
    76f4:	d80b883a 	mov	r5,sp
    76f8:	d8c00015 	stw	r3,0(sp)
    76fc:	00073180 	call	7318 <_Unwind_ForcedUnwind_Phase2>
    7700:	00c001c4 	movi	r3,7
    7704:	10c00326 	beq	r2,r3,7714 <_Unwind_SjLj_ForcedUnwind+0x3c>
    7708:	dfc00117 	ldw	ra,4(sp)
    770c:	dec00204 	addi	sp,sp,8
    7710:	f800283a 	ret
    7714:	d809883a 	mov	r4,sp
    7718:	00074f00 	call	74f0 <uw_install_context.isra.1>

0000771c <_Unwind_SjLj_Resume>:
    771c:	00c000f4 	movhi	r3,3
    7720:	18e3ee04 	addi	r3,r3,-28744
    7724:	18c00017 	ldw	r3,0(r3)
    7728:	20800317 	ldw	r2,12(r4)
    772c:	defffe04 	addi	sp,sp,-8
    7730:	dfc00115 	stw	ra,4(sp)
    7734:	d8c00015 	stw	r3,0(sp)
    7738:	d80b883a 	mov	r5,sp
    773c:	1000041e 	bne	r2,zero,7750 <_Unwind_SjLj_Resume+0x34>
    7740:	00074300 	call	7430 <_Unwind_RaiseException_Phase2>
    7744:	00c001c4 	movi	r3,7
    7748:	10c00326 	beq	r2,r3,7758 <_Unwind_SjLj_Resume+0x3c>
    774c:	000789c0 	call	789c <abort>
    7750:	00073180 	call	7318 <_Unwind_ForcedUnwind_Phase2>
    7754:	003ffb06 	br	7744 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007744>
    7758:	d809883a 	mov	r4,sp
    775c:	00074f00 	call	74f0 <uw_install_context.isra.1>

00007760 <_Unwind_SjLj_Resume_or_Rethrow>:
    7760:	20800317 	ldw	r2,12(r4)
    7764:	defffe04 	addi	sp,sp,-8
    7768:	dfc00115 	stw	ra,4(sp)
    776c:	1000041e 	bne	r2,zero,7780 <_Unwind_SjLj_Resume_or_Rethrow+0x20>
    7770:	00076080 	call	7608 <_Unwind_SjLj_RaiseException>
    7774:	dfc00117 	ldw	ra,4(sp)
    7778:	dec00204 	addi	sp,sp,8
    777c:	f800283a 	ret
    7780:	008000f4 	movhi	r2,3
    7784:	10a3ee04 	addi	r2,r2,-28744
    7788:	10800017 	ldw	r2,0(r2)
    778c:	d80b883a 	mov	r5,sp
    7790:	d8800015 	stw	r2,0(sp)
    7794:	00073180 	call	7318 <_Unwind_ForcedUnwind_Phase2>
    7798:	00c001c4 	movi	r3,7
    779c:	10c00126 	beq	r2,r3,77a4 <_Unwind_SjLj_Resume_or_Rethrow+0x44>
    77a0:	000789c0 	call	789c <abort>
    77a4:	d809883a 	mov	r4,sp
    77a8:	00074f00 	call	74f0 <uw_install_context.isra.1>

000077ac <_Unwind_DeleteException>:
    77ac:	20800217 	ldw	r2,8(r4)
    77b0:	10000326 	beq	r2,zero,77c0 <_Unwind_DeleteException+0x14>
    77b4:	200b883a 	mov	r5,r4
    77b8:	01000044 	movi	r4,1
    77bc:	1000683a 	jmp	r2
    77c0:	f800283a 	ret

000077c4 <_Unwind_Backtrace>:
    77c4:	008000f4 	movhi	r2,3
    77c8:	10a3ee04 	addi	r2,r2,-28744
    77cc:	10800017 	ldw	r2,0(r2)
    77d0:	defffc04 	addi	sp,sp,-16
    77d4:	dc400215 	stw	r17,8(sp)
    77d8:	dc000115 	stw	r16,4(sp)
    77dc:	dfc00315 	stw	ra,12(sp)
    77e0:	2023883a 	mov	r17,r4
    77e4:	2821883a 	mov	r16,r5
    77e8:	d8800015 	stw	r2,0(sp)
    77ec:	00000506 	br	7804 <_Unwind_Backtrace+0x40>
    77f0:	883ee83a 	callr	r17
    77f4:	10000e1e 	bne	r2,zero,7830 <_Unwind_Backtrace+0x6c>
    77f8:	d8800017 	ldw	r2,0(sp)
    77fc:	10800017 	ldw	r2,0(r2)
    7800:	d8800015 	stw	r2,0(sp)
    7804:	800b883a 	mov	r5,r16
    7808:	d809883a 	mov	r4,sp
    780c:	103ff81e 	bne	r2,zero,77f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70077f0>
    7810:	883ee83a 	callr	r17
    7814:	1000061e 	bne	r2,zero,7830 <_Unwind_Backtrace+0x6c>
    7818:	00800144 	movi	r2,5
    781c:	dfc00317 	ldw	ra,12(sp)
    7820:	dc400217 	ldw	r17,8(sp)
    7824:	dc000117 	ldw	r16,4(sp)
    7828:	dec00404 	addi	sp,sp,16
    782c:	f800283a 	ret
    7830:	008000c4 	movi	r2,3
    7834:	003ff906 	br	781c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700781c>

00007838 <__clzsi2>:
    7838:	00bfffd4 	movui	r2,65535
    783c:	11000536 	bltu	r2,r4,7854 <__clzsi2+0x1c>
    7840:	00803fc4 	movi	r2,255
    7844:	11000f36 	bltu	r2,r4,7884 <__clzsi2+0x4c>
    7848:	00800804 	movi	r2,32
    784c:	0007883a 	mov	r3,zero
    7850:	00000506 	br	7868 <__clzsi2+0x30>
    7854:	00804034 	movhi	r2,256
    7858:	10bfffc4 	addi	r2,r2,-1
    785c:	11000c2e 	bgeu	r2,r4,7890 <__clzsi2+0x58>
    7860:	00800204 	movi	r2,8
    7864:	00c00604 	movi	r3,24
    7868:	20c8d83a 	srl	r4,r4,r3
    786c:	00c000b4 	movhi	r3,2
    7870:	18d28d04 	addi	r3,r3,18996
    7874:	1909883a 	add	r4,r3,r4
    7878:	20c00003 	ldbu	r3,0(r4)
    787c:	10c5c83a 	sub	r2,r2,r3
    7880:	f800283a 	ret
    7884:	00800604 	movi	r2,24
    7888:	00c00204 	movi	r3,8
    788c:	003ff606 	br	7868 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007868>
    7890:	00800404 	movi	r2,16
    7894:	1007883a 	mov	r3,r2
    7898:	003ff306 	br	7868 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007868>

0000789c <abort>:
    789c:	deffff04 	addi	sp,sp,-4
    78a0:	01000184 	movi	r4,6
    78a4:	dfc00015 	stw	ra,0(sp)
    78a8:	00087400 	call	8740 <raise>
    78ac:	01000044 	movi	r4,1
    78b0:	00172740 	call	17274 <_exit>

000078b4 <malloc>:
    78b4:	008000b4 	movhi	r2,2
    78b8:	109bd004 	addi	r2,r2,28480
    78bc:	200b883a 	mov	r5,r4
    78c0:	11000017 	ldw	r4,0(r2)
    78c4:	00078dc1 	jmpi	78dc <_malloc_r>

000078c8 <free>:
    78c8:	008000b4 	movhi	r2,2
    78cc:	109bd004 	addi	r2,r2,28480
    78d0:	200b883a 	mov	r5,r4
    78d4:	11000017 	ldw	r4,0(r2)
    78d8:	000f0181 	jmpi	f018 <_free_r>

000078dc <_malloc_r>:
    78dc:	defff504 	addi	sp,sp,-44
    78e0:	dc800315 	stw	r18,12(sp)
    78e4:	dfc00a15 	stw	ra,40(sp)
    78e8:	df000915 	stw	fp,36(sp)
    78ec:	ddc00815 	stw	r23,32(sp)
    78f0:	dd800715 	stw	r22,28(sp)
    78f4:	dd400615 	stw	r21,24(sp)
    78f8:	dd000515 	stw	r20,20(sp)
    78fc:	dcc00415 	stw	r19,16(sp)
    7900:	dc400215 	stw	r17,8(sp)
    7904:	dc000115 	stw	r16,4(sp)
    7908:	288002c4 	addi	r2,r5,11
    790c:	00c00584 	movi	r3,22
    7910:	2025883a 	mov	r18,r4
    7914:	18807f2e 	bgeu	r3,r2,7b14 <_malloc_r+0x238>
    7918:	047ffe04 	movi	r17,-8
    791c:	1462703a 	and	r17,r2,r17
    7920:	8800a316 	blt	r17,zero,7bb0 <_malloc_r+0x2d4>
    7924:	8940a236 	bltu	r17,r5,7bb0 <_malloc_r+0x2d4>
    7928:	0017d5c0 	call	17d5c <__malloc_lock>
    792c:	00807dc4 	movi	r2,503
    7930:	1441e92e 	bgeu	r2,r17,80d8 <_malloc_r+0x7fc>
    7934:	8804d27a 	srli	r2,r17,9
    7938:	1000a126 	beq	r2,zero,7bc0 <_malloc_r+0x2e4>
    793c:	00c00104 	movi	r3,4
    7940:	18811e36 	bltu	r3,r2,7dbc <_malloc_r+0x4e0>
    7944:	8804d1ba 	srli	r2,r17,6
    7948:	12000e44 	addi	r8,r2,57
    794c:	11c00e04 	addi	r7,r2,56
    7950:	4209883a 	add	r4,r8,r8
    7954:	04c000b4 	movhi	r19,2
    7958:	2109883a 	add	r4,r4,r4
    795c:	9cd40c04 	addi	r19,r19,20528
    7960:	2109883a 	add	r4,r4,r4
    7964:	9909883a 	add	r4,r19,r4
    7968:	24000117 	ldw	r16,4(r4)
    796c:	213ffe04 	addi	r4,r4,-8
    7970:	24009726 	beq	r4,r16,7bd0 <_malloc_r+0x2f4>
    7974:	80800117 	ldw	r2,4(r16)
    7978:	01bfff04 	movi	r6,-4
    797c:	014003c4 	movi	r5,15
    7980:	1184703a 	and	r2,r2,r6
    7984:	1447c83a 	sub	r3,r2,r17
    7988:	28c00716 	blt	r5,r3,79a8 <_malloc_r+0xcc>
    798c:	1800920e 	bge	r3,zero,7bd8 <_malloc_r+0x2fc>
    7990:	84000317 	ldw	r16,12(r16)
    7994:	24008e26 	beq	r4,r16,7bd0 <_malloc_r+0x2f4>
    7998:	80800117 	ldw	r2,4(r16)
    799c:	1184703a 	and	r2,r2,r6
    79a0:	1447c83a 	sub	r3,r2,r17
    79a4:	28fff90e 	bge	r5,r3,798c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700798c>
    79a8:	3809883a 	mov	r4,r7
    79ac:	018000b4 	movhi	r6,2
    79b0:	9c000417 	ldw	r16,16(r19)
    79b4:	31940c04 	addi	r6,r6,20528
    79b8:	32000204 	addi	r8,r6,8
    79bc:	82013426 	beq	r16,r8,7e90 <_malloc_r+0x5b4>
    79c0:	80c00117 	ldw	r3,4(r16)
    79c4:	00bfff04 	movi	r2,-4
    79c8:	188e703a 	and	r7,r3,r2
    79cc:	3c45c83a 	sub	r2,r7,r17
    79d0:	00c003c4 	movi	r3,15
    79d4:	18811f16 	blt	r3,r2,7e54 <_malloc_r+0x578>
    79d8:	32000515 	stw	r8,20(r6)
    79dc:	32000415 	stw	r8,16(r6)
    79e0:	10007f0e 	bge	r2,zero,7be0 <_malloc_r+0x304>
    79e4:	00807fc4 	movi	r2,511
    79e8:	11c0fd36 	bltu	r2,r7,7de0 <_malloc_r+0x504>
    79ec:	3806d0fa 	srli	r3,r7,3
    79f0:	01c00044 	movi	r7,1
    79f4:	30800117 	ldw	r2,4(r6)
    79f8:	19400044 	addi	r5,r3,1
    79fc:	294b883a 	add	r5,r5,r5
    7a00:	1807d0ba 	srai	r3,r3,2
    7a04:	294b883a 	add	r5,r5,r5
    7a08:	294b883a 	add	r5,r5,r5
    7a0c:	298b883a 	add	r5,r5,r6
    7a10:	38c6983a 	sll	r3,r7,r3
    7a14:	29c00017 	ldw	r7,0(r5)
    7a18:	2a7ffe04 	addi	r9,r5,-8
    7a1c:	1886b03a 	or	r3,r3,r2
    7a20:	82400315 	stw	r9,12(r16)
    7a24:	81c00215 	stw	r7,8(r16)
    7a28:	30c00115 	stw	r3,4(r6)
    7a2c:	2c000015 	stw	r16,0(r5)
    7a30:	3c000315 	stw	r16,12(r7)
    7a34:	2005d0ba 	srai	r2,r4,2
    7a38:	01400044 	movi	r5,1
    7a3c:	288a983a 	sll	r5,r5,r2
    7a40:	19406f36 	bltu	r3,r5,7c00 <_malloc_r+0x324>
    7a44:	28c4703a 	and	r2,r5,r3
    7a48:	10000a1e 	bne	r2,zero,7a74 <_malloc_r+0x198>
    7a4c:	00bfff04 	movi	r2,-4
    7a50:	294b883a 	add	r5,r5,r5
    7a54:	2088703a 	and	r4,r4,r2
    7a58:	28c4703a 	and	r2,r5,r3
    7a5c:	21000104 	addi	r4,r4,4
    7a60:	1000041e 	bne	r2,zero,7a74 <_malloc_r+0x198>
    7a64:	294b883a 	add	r5,r5,r5
    7a68:	28c4703a 	and	r2,r5,r3
    7a6c:	21000104 	addi	r4,r4,4
    7a70:	103ffc26 	beq	r2,zero,7a64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a64>
    7a74:	02bfff04 	movi	r10,-4
    7a78:	024003c4 	movi	r9,15
    7a7c:	21800044 	addi	r6,r4,1
    7a80:	318d883a 	add	r6,r6,r6
    7a84:	318d883a 	add	r6,r6,r6
    7a88:	318d883a 	add	r6,r6,r6
    7a8c:	998d883a 	add	r6,r19,r6
    7a90:	333ffe04 	addi	r12,r6,-8
    7a94:	2017883a 	mov	r11,r4
    7a98:	31800104 	addi	r6,r6,4
    7a9c:	34000017 	ldw	r16,0(r6)
    7aa0:	31fffd04 	addi	r7,r6,-12
    7aa4:	81c0041e 	bne	r16,r7,7ab8 <_malloc_r+0x1dc>
    7aa8:	0000fb06 	br	7e98 <_malloc_r+0x5bc>
    7aac:	1801030e 	bge	r3,zero,7ebc <_malloc_r+0x5e0>
    7ab0:	84000317 	ldw	r16,12(r16)
    7ab4:	81c0f826 	beq	r16,r7,7e98 <_malloc_r+0x5bc>
    7ab8:	80800117 	ldw	r2,4(r16)
    7abc:	1284703a 	and	r2,r2,r10
    7ac0:	1447c83a 	sub	r3,r2,r17
    7ac4:	48fff90e 	bge	r9,r3,7aac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007aac>
    7ac8:	80800317 	ldw	r2,12(r16)
    7acc:	81000217 	ldw	r4,8(r16)
    7ad0:	89400054 	ori	r5,r17,1
    7ad4:	81400115 	stw	r5,4(r16)
    7ad8:	20800315 	stw	r2,12(r4)
    7adc:	11000215 	stw	r4,8(r2)
    7ae0:	8463883a 	add	r17,r16,r17
    7ae4:	9c400515 	stw	r17,20(r19)
    7ae8:	9c400415 	stw	r17,16(r19)
    7aec:	18800054 	ori	r2,r3,1
    7af0:	88800115 	stw	r2,4(r17)
    7af4:	8a000315 	stw	r8,12(r17)
    7af8:	8a000215 	stw	r8,8(r17)
    7afc:	88e3883a 	add	r17,r17,r3
    7b00:	88c00015 	stw	r3,0(r17)
    7b04:	9009883a 	mov	r4,r18
    7b08:	0017e7c0 	call	17e7c <__malloc_unlock>
    7b0c:	80800204 	addi	r2,r16,8
    7b10:	00001b06 	br	7b80 <_malloc_r+0x2a4>
    7b14:	04400404 	movi	r17,16
    7b18:	89402536 	bltu	r17,r5,7bb0 <_malloc_r+0x2d4>
    7b1c:	0017d5c0 	call	17d5c <__malloc_lock>
    7b20:	00800184 	movi	r2,6
    7b24:	01000084 	movi	r4,2
    7b28:	04c000b4 	movhi	r19,2
    7b2c:	1085883a 	add	r2,r2,r2
    7b30:	9cd40c04 	addi	r19,r19,20528
    7b34:	1085883a 	add	r2,r2,r2
    7b38:	9885883a 	add	r2,r19,r2
    7b3c:	14000117 	ldw	r16,4(r2)
    7b40:	10fffe04 	addi	r3,r2,-8
    7b44:	80c0d926 	beq	r16,r3,7eac <_malloc_r+0x5d0>
    7b48:	80c00117 	ldw	r3,4(r16)
    7b4c:	81000317 	ldw	r4,12(r16)
    7b50:	00bfff04 	movi	r2,-4
    7b54:	1884703a 	and	r2,r3,r2
    7b58:	81400217 	ldw	r5,8(r16)
    7b5c:	8085883a 	add	r2,r16,r2
    7b60:	10c00117 	ldw	r3,4(r2)
    7b64:	29000315 	stw	r4,12(r5)
    7b68:	21400215 	stw	r5,8(r4)
    7b6c:	18c00054 	ori	r3,r3,1
    7b70:	10c00115 	stw	r3,4(r2)
    7b74:	9009883a 	mov	r4,r18
    7b78:	0017e7c0 	call	17e7c <__malloc_unlock>
    7b7c:	80800204 	addi	r2,r16,8
    7b80:	dfc00a17 	ldw	ra,40(sp)
    7b84:	df000917 	ldw	fp,36(sp)
    7b88:	ddc00817 	ldw	r23,32(sp)
    7b8c:	dd800717 	ldw	r22,28(sp)
    7b90:	dd400617 	ldw	r21,24(sp)
    7b94:	dd000517 	ldw	r20,20(sp)
    7b98:	dcc00417 	ldw	r19,16(sp)
    7b9c:	dc800317 	ldw	r18,12(sp)
    7ba0:	dc400217 	ldw	r17,8(sp)
    7ba4:	dc000117 	ldw	r16,4(sp)
    7ba8:	dec00b04 	addi	sp,sp,44
    7bac:	f800283a 	ret
    7bb0:	00800304 	movi	r2,12
    7bb4:	90800015 	stw	r2,0(r18)
    7bb8:	0005883a 	mov	r2,zero
    7bbc:	003ff006 	br	7b80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b80>
    7bc0:	01002004 	movi	r4,128
    7bc4:	02001004 	movi	r8,64
    7bc8:	01c00fc4 	movi	r7,63
    7bcc:	003f6106 	br	7954 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007954>
    7bd0:	4009883a 	mov	r4,r8
    7bd4:	003f7506 	br	79ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70079ac>
    7bd8:	81000317 	ldw	r4,12(r16)
    7bdc:	003fde06 	br	7b58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b58>
    7be0:	81c5883a 	add	r2,r16,r7
    7be4:	11400117 	ldw	r5,4(r2)
    7be8:	9009883a 	mov	r4,r18
    7bec:	29400054 	ori	r5,r5,1
    7bf0:	11400115 	stw	r5,4(r2)
    7bf4:	0017e7c0 	call	17e7c <__malloc_unlock>
    7bf8:	80800204 	addi	r2,r16,8
    7bfc:	003fe006 	br	7b80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b80>
    7c00:	9c000217 	ldw	r16,8(r19)
    7c04:	00bfff04 	movi	r2,-4
    7c08:	85800117 	ldw	r22,4(r16)
    7c0c:	b0ac703a 	and	r22,r22,r2
    7c10:	b4400336 	bltu	r22,r17,7c20 <_malloc_r+0x344>
    7c14:	b445c83a 	sub	r2,r22,r17
    7c18:	00c003c4 	movi	r3,15
    7c1c:	18805d16 	blt	r3,r2,7d94 <_malloc_r+0x4b8>
    7c20:	05c000b4 	movhi	r23,2
    7c24:	008000f4 	movhi	r2,3
    7c28:	10a3f104 	addi	r2,r2,-28732
    7c2c:	bddbcd04 	addi	r23,r23,28468
    7c30:	15400017 	ldw	r21,0(r2)
    7c34:	b8c00017 	ldw	r3,0(r23)
    7c38:	00bfffc4 	movi	r2,-1
    7c3c:	858d883a 	add	r6,r16,r22
    7c40:	8d6b883a 	add	r21,r17,r21
    7c44:	1880ea26 	beq	r3,r2,7ff0 <_malloc_r+0x714>
    7c48:	ad4403c4 	addi	r21,r21,4111
    7c4c:	00bc0004 	movi	r2,-4096
    7c50:	a8aa703a 	and	r21,r21,r2
    7c54:	a80b883a 	mov	r5,r21
    7c58:	9009883a 	mov	r4,r18
    7c5c:	d9800015 	stw	r6,0(sp)
    7c60:	00084980 	call	8498 <_sbrk_r>
    7c64:	1029883a 	mov	r20,r2
    7c68:	00bfffc4 	movi	r2,-1
    7c6c:	d9800017 	ldw	r6,0(sp)
    7c70:	a080e826 	beq	r20,r2,8014 <_malloc_r+0x738>
    7c74:	a180a636 	bltu	r20,r6,7f10 <_malloc_r+0x634>
    7c78:	070000f4 	movhi	fp,3
    7c7c:	e7141a04 	addi	fp,fp,20584
    7c80:	e0800017 	ldw	r2,0(fp)
    7c84:	a887883a 	add	r3,r21,r2
    7c88:	e0c00015 	stw	r3,0(fp)
    7c8c:	3500e626 	beq	r6,r20,8028 <_malloc_r+0x74c>
    7c90:	b9000017 	ldw	r4,0(r23)
    7c94:	00bfffc4 	movi	r2,-1
    7c98:	2080ee26 	beq	r4,r2,8054 <_malloc_r+0x778>
    7c9c:	a185c83a 	sub	r2,r20,r6
    7ca0:	10c5883a 	add	r2,r2,r3
    7ca4:	e0800015 	stw	r2,0(fp)
    7ca8:	a0c001cc 	andi	r3,r20,7
    7cac:	1800bc26 	beq	r3,zero,7fa0 <_malloc_r+0x6c4>
    7cb0:	a0e9c83a 	sub	r20,r20,r3
    7cb4:	00840204 	movi	r2,4104
    7cb8:	a5000204 	addi	r20,r20,8
    7cbc:	10c7c83a 	sub	r3,r2,r3
    7cc0:	a545883a 	add	r2,r20,r21
    7cc4:	1083ffcc 	andi	r2,r2,4095
    7cc8:	18abc83a 	sub	r21,r3,r2
    7ccc:	a80b883a 	mov	r5,r21
    7cd0:	9009883a 	mov	r4,r18
    7cd4:	00084980 	call	8498 <_sbrk_r>
    7cd8:	00ffffc4 	movi	r3,-1
    7cdc:	10c0e126 	beq	r2,r3,8064 <_malloc_r+0x788>
    7ce0:	1505c83a 	sub	r2,r2,r20
    7ce4:	1545883a 	add	r2,r2,r21
    7ce8:	10800054 	ori	r2,r2,1
    7cec:	e0c00017 	ldw	r3,0(fp)
    7cf0:	9d000215 	stw	r20,8(r19)
    7cf4:	a0800115 	stw	r2,4(r20)
    7cf8:	a8c7883a 	add	r3,r21,r3
    7cfc:	e0c00015 	stw	r3,0(fp)
    7d00:	84c00e26 	beq	r16,r19,7d3c <_malloc_r+0x460>
    7d04:	018003c4 	movi	r6,15
    7d08:	3580a72e 	bgeu	r6,r22,7fa8 <_malloc_r+0x6cc>
    7d0c:	81400117 	ldw	r5,4(r16)
    7d10:	013ffe04 	movi	r4,-8
    7d14:	b0bffd04 	addi	r2,r22,-12
    7d18:	1104703a 	and	r2,r2,r4
    7d1c:	2900004c 	andi	r4,r5,1
    7d20:	2088b03a 	or	r4,r4,r2
    7d24:	81000115 	stw	r4,4(r16)
    7d28:	01400144 	movi	r5,5
    7d2c:	8089883a 	add	r4,r16,r2
    7d30:	21400115 	stw	r5,4(r4)
    7d34:	21400215 	stw	r5,8(r4)
    7d38:	3080cd36 	bltu	r6,r2,8070 <_malloc_r+0x794>
    7d3c:	008000f4 	movhi	r2,3
    7d40:	10a3f004 	addi	r2,r2,-28736
    7d44:	11000017 	ldw	r4,0(r2)
    7d48:	20c0012e 	bgeu	r4,r3,7d50 <_malloc_r+0x474>
    7d4c:	10c00015 	stw	r3,0(r2)
    7d50:	008000f4 	movhi	r2,3
    7d54:	10a3ef04 	addi	r2,r2,-28740
    7d58:	11000017 	ldw	r4,0(r2)
    7d5c:	9c000217 	ldw	r16,8(r19)
    7d60:	20c0012e 	bgeu	r4,r3,7d68 <_malloc_r+0x48c>
    7d64:	10c00015 	stw	r3,0(r2)
    7d68:	80c00117 	ldw	r3,4(r16)
    7d6c:	00bfff04 	movi	r2,-4
    7d70:	1886703a 	and	r3,r3,r2
    7d74:	1c45c83a 	sub	r2,r3,r17
    7d78:	1c400236 	bltu	r3,r17,7d84 <_malloc_r+0x4a8>
    7d7c:	00c003c4 	movi	r3,15
    7d80:	18800416 	blt	r3,r2,7d94 <_malloc_r+0x4b8>
    7d84:	9009883a 	mov	r4,r18
    7d88:	0017e7c0 	call	17e7c <__malloc_unlock>
    7d8c:	0005883a 	mov	r2,zero
    7d90:	003f7b06 	br	7b80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b80>
    7d94:	88c00054 	ori	r3,r17,1
    7d98:	80c00115 	stw	r3,4(r16)
    7d9c:	8463883a 	add	r17,r16,r17
    7da0:	10800054 	ori	r2,r2,1
    7da4:	9c400215 	stw	r17,8(r19)
    7da8:	88800115 	stw	r2,4(r17)
    7dac:	9009883a 	mov	r4,r18
    7db0:	0017e7c0 	call	17e7c <__malloc_unlock>
    7db4:	80800204 	addi	r2,r16,8
    7db8:	003f7106 	br	7b80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b80>
    7dbc:	00c00504 	movi	r3,20
    7dc0:	18804a2e 	bgeu	r3,r2,7eec <_malloc_r+0x610>
    7dc4:	00c01504 	movi	r3,84
    7dc8:	18806e36 	bltu	r3,r2,7f84 <_malloc_r+0x6a8>
    7dcc:	8804d33a 	srli	r2,r17,12
    7dd0:	12001bc4 	addi	r8,r2,111
    7dd4:	11c01b84 	addi	r7,r2,110
    7dd8:	4209883a 	add	r4,r8,r8
    7ddc:	003edd06 	br	7954 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007954>
    7de0:	3804d27a 	srli	r2,r7,9
    7de4:	00c00104 	movi	r3,4
    7de8:	1880442e 	bgeu	r3,r2,7efc <_malloc_r+0x620>
    7dec:	00c00504 	movi	r3,20
    7df0:	18808136 	bltu	r3,r2,7ff8 <_malloc_r+0x71c>
    7df4:	11401704 	addi	r5,r2,92
    7df8:	10c016c4 	addi	r3,r2,91
    7dfc:	294b883a 	add	r5,r5,r5
    7e00:	294b883a 	add	r5,r5,r5
    7e04:	294b883a 	add	r5,r5,r5
    7e08:	994b883a 	add	r5,r19,r5
    7e0c:	28800017 	ldw	r2,0(r5)
    7e10:	018000b4 	movhi	r6,2
    7e14:	297ffe04 	addi	r5,r5,-8
    7e18:	31940c04 	addi	r6,r6,20528
    7e1c:	28806526 	beq	r5,r2,7fb4 <_malloc_r+0x6d8>
    7e20:	01bfff04 	movi	r6,-4
    7e24:	10c00117 	ldw	r3,4(r2)
    7e28:	1986703a 	and	r3,r3,r6
    7e2c:	38c0022e 	bgeu	r7,r3,7e38 <_malloc_r+0x55c>
    7e30:	10800217 	ldw	r2,8(r2)
    7e34:	28bffb1e 	bne	r5,r2,7e24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007e24>
    7e38:	11400317 	ldw	r5,12(r2)
    7e3c:	98c00117 	ldw	r3,4(r19)
    7e40:	81400315 	stw	r5,12(r16)
    7e44:	80800215 	stw	r2,8(r16)
    7e48:	2c000215 	stw	r16,8(r5)
    7e4c:	14000315 	stw	r16,12(r2)
    7e50:	003ef806 	br	7a34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a34>
    7e54:	88c00054 	ori	r3,r17,1
    7e58:	80c00115 	stw	r3,4(r16)
    7e5c:	8463883a 	add	r17,r16,r17
    7e60:	34400515 	stw	r17,20(r6)
    7e64:	34400415 	stw	r17,16(r6)
    7e68:	10c00054 	ori	r3,r2,1
    7e6c:	8a000315 	stw	r8,12(r17)
    7e70:	8a000215 	stw	r8,8(r17)
    7e74:	88c00115 	stw	r3,4(r17)
    7e78:	88a3883a 	add	r17,r17,r2
    7e7c:	88800015 	stw	r2,0(r17)
    7e80:	9009883a 	mov	r4,r18
    7e84:	0017e7c0 	call	17e7c <__malloc_unlock>
    7e88:	80800204 	addi	r2,r16,8
    7e8c:	003f3c06 	br	7b80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b80>
    7e90:	30c00117 	ldw	r3,4(r6)
    7e94:	003ee706 	br	7a34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a34>
    7e98:	5ac00044 	addi	r11,r11,1
    7e9c:	588000cc 	andi	r2,r11,3
    7ea0:	31800204 	addi	r6,r6,8
    7ea4:	103efd1e 	bne	r2,zero,7a9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a9c>
    7ea8:	00002406 	br	7f3c <_malloc_r+0x660>
    7eac:	14000317 	ldw	r16,12(r2)
    7eb0:	143f251e 	bne	r2,r16,7b48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b48>
    7eb4:	21000084 	addi	r4,r4,2
    7eb8:	003ebc06 	br	79ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70079ac>
    7ebc:	8085883a 	add	r2,r16,r2
    7ec0:	10c00117 	ldw	r3,4(r2)
    7ec4:	81000317 	ldw	r4,12(r16)
    7ec8:	81400217 	ldw	r5,8(r16)
    7ecc:	18c00054 	ori	r3,r3,1
    7ed0:	10c00115 	stw	r3,4(r2)
    7ed4:	29000315 	stw	r4,12(r5)
    7ed8:	21400215 	stw	r5,8(r4)
    7edc:	9009883a 	mov	r4,r18
    7ee0:	0017e7c0 	call	17e7c <__malloc_unlock>
    7ee4:	80800204 	addi	r2,r16,8
    7ee8:	003f2506 	br	7b80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b80>
    7eec:	12001704 	addi	r8,r2,92
    7ef0:	11c016c4 	addi	r7,r2,91
    7ef4:	4209883a 	add	r4,r8,r8
    7ef8:	003e9606 	br	7954 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007954>
    7efc:	3804d1ba 	srli	r2,r7,6
    7f00:	11400e44 	addi	r5,r2,57
    7f04:	10c00e04 	addi	r3,r2,56
    7f08:	294b883a 	add	r5,r5,r5
    7f0c:	003fbc06 	br	7e00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007e00>
    7f10:	84ff5926 	beq	r16,r19,7c78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c78>
    7f14:	008000b4 	movhi	r2,2
    7f18:	10940c04 	addi	r2,r2,20528
    7f1c:	14000217 	ldw	r16,8(r2)
    7f20:	00bfff04 	movi	r2,-4
    7f24:	80c00117 	ldw	r3,4(r16)
    7f28:	1886703a 	and	r3,r3,r2
    7f2c:	003f9106 	br	7d74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d74>
    7f30:	60800217 	ldw	r2,8(r12)
    7f34:	213fffc4 	addi	r4,r4,-1
    7f38:	1300651e 	bne	r2,r12,80d0 <_malloc_r+0x7f4>
    7f3c:	208000cc 	andi	r2,r4,3
    7f40:	633ffe04 	addi	r12,r12,-8
    7f44:	103ffa1e 	bne	r2,zero,7f30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f30>
    7f48:	98800117 	ldw	r2,4(r19)
    7f4c:	0146303a 	nor	r3,zero,r5
    7f50:	1884703a 	and	r2,r3,r2
    7f54:	98800115 	stw	r2,4(r19)
    7f58:	294b883a 	add	r5,r5,r5
    7f5c:	117f2836 	bltu	r2,r5,7c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c00>
    7f60:	283f2726 	beq	r5,zero,7c00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c00>
    7f64:	2886703a 	and	r3,r5,r2
    7f68:	5809883a 	mov	r4,r11
    7f6c:	183ec31e 	bne	r3,zero,7a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a7c>
    7f70:	294b883a 	add	r5,r5,r5
    7f74:	2886703a 	and	r3,r5,r2
    7f78:	21000104 	addi	r4,r4,4
    7f7c:	183ffc26 	beq	r3,zero,7f70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f70>
    7f80:	003ebe06 	br	7a7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007a7c>
    7f84:	00c05504 	movi	r3,340
    7f88:	18801236 	bltu	r3,r2,7fd4 <_malloc_r+0x6f8>
    7f8c:	8804d3fa 	srli	r2,r17,15
    7f90:	12001e04 	addi	r8,r2,120
    7f94:	11c01dc4 	addi	r7,r2,119
    7f98:	4209883a 	add	r4,r8,r8
    7f9c:	003e6d06 	br	7954 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007954>
    7fa0:	00c40004 	movi	r3,4096
    7fa4:	003f4606 	br	7cc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007cc0>
    7fa8:	00800044 	movi	r2,1
    7fac:	a0800115 	stw	r2,4(r20)
    7fb0:	003f7406 	br	7d84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d84>
    7fb4:	1805d0ba 	srai	r2,r3,2
    7fb8:	01c00044 	movi	r7,1
    7fbc:	30c00117 	ldw	r3,4(r6)
    7fc0:	388e983a 	sll	r7,r7,r2
    7fc4:	2805883a 	mov	r2,r5
    7fc8:	38c6b03a 	or	r3,r7,r3
    7fcc:	30c00115 	stw	r3,4(r6)
    7fd0:	003f9b06 	br	7e40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007e40>
    7fd4:	00c15504 	movi	r3,1364
    7fd8:	18801a36 	bltu	r3,r2,8044 <_malloc_r+0x768>
    7fdc:	8804d4ba 	srli	r2,r17,18
    7fe0:	12001f44 	addi	r8,r2,125
    7fe4:	11c01f04 	addi	r7,r2,124
    7fe8:	4209883a 	add	r4,r8,r8
    7fec:	003e5906 	br	7954 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007954>
    7ff0:	ad400404 	addi	r21,r21,16
    7ff4:	003f1706 	br	7c54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c54>
    7ff8:	00c01504 	movi	r3,84
    7ffc:	18802336 	bltu	r3,r2,808c <_malloc_r+0x7b0>
    8000:	3804d33a 	srli	r2,r7,12
    8004:	11401bc4 	addi	r5,r2,111
    8008:	10c01b84 	addi	r3,r2,110
    800c:	294b883a 	add	r5,r5,r5
    8010:	003f7b06 	br	7e00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007e00>
    8014:	9c000217 	ldw	r16,8(r19)
    8018:	00bfff04 	movi	r2,-4
    801c:	80c00117 	ldw	r3,4(r16)
    8020:	1886703a 	and	r3,r3,r2
    8024:	003f5306 	br	7d74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d74>
    8028:	3083ffcc 	andi	r2,r6,4095
    802c:	103f181e 	bne	r2,zero,7c90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007c90>
    8030:	99000217 	ldw	r4,8(r19)
    8034:	b545883a 	add	r2,r22,r21
    8038:	10800054 	ori	r2,r2,1
    803c:	20800115 	stw	r2,4(r4)
    8040:	003f3e06 	br	7d3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d3c>
    8044:	01003f84 	movi	r4,254
    8048:	02001fc4 	movi	r8,127
    804c:	01c01f84 	movi	r7,126
    8050:	003e4006 	br	7954 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007954>
    8054:	008000b4 	movhi	r2,2
    8058:	109bcd04 	addi	r2,r2,28468
    805c:	15000015 	stw	r20,0(r2)
    8060:	003f1106 	br	7ca8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007ca8>
    8064:	00800044 	movi	r2,1
    8068:	002b883a 	mov	r21,zero
    806c:	003f1f06 	br	7cec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007cec>
    8070:	81400204 	addi	r5,r16,8
    8074:	9009883a 	mov	r4,r18
    8078:	000f0180 	call	f018 <_free_r>
    807c:	008000f4 	movhi	r2,3
    8080:	10941a04 	addi	r2,r2,20584
    8084:	10c00017 	ldw	r3,0(r2)
    8088:	003f2c06 	br	7d3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007d3c>
    808c:	00c05504 	movi	r3,340
    8090:	18800536 	bltu	r3,r2,80a8 <_malloc_r+0x7cc>
    8094:	3804d3fa 	srli	r2,r7,15
    8098:	11401e04 	addi	r5,r2,120
    809c:	10c01dc4 	addi	r3,r2,119
    80a0:	294b883a 	add	r5,r5,r5
    80a4:	003f5606 	br	7e00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007e00>
    80a8:	00c15504 	movi	r3,1364
    80ac:	18800536 	bltu	r3,r2,80c4 <_malloc_r+0x7e8>
    80b0:	3804d4ba 	srli	r2,r7,18
    80b4:	11401f44 	addi	r5,r2,125
    80b8:	10c01f04 	addi	r3,r2,124
    80bc:	294b883a 	add	r5,r5,r5
    80c0:	003f4f06 	br	7e00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007e00>
    80c4:	01403f84 	movi	r5,254
    80c8:	00c01f84 	movi	r3,126
    80cc:	003f4c06 	br	7e00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007e00>
    80d0:	98800117 	ldw	r2,4(r19)
    80d4:	003fa006 	br	7f58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007f58>
    80d8:	8808d0fa 	srli	r4,r17,3
    80dc:	20800044 	addi	r2,r4,1
    80e0:	1085883a 	add	r2,r2,r2
    80e4:	003e9006 	br	7b28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7007b28>

000080e8 <memcpy>:
    80e8:	defffd04 	addi	sp,sp,-12
    80ec:	dfc00215 	stw	ra,8(sp)
    80f0:	dc400115 	stw	r17,4(sp)
    80f4:	dc000015 	stw	r16,0(sp)
    80f8:	00c003c4 	movi	r3,15
    80fc:	2005883a 	mov	r2,r4
    8100:	1980452e 	bgeu	r3,r6,8218 <memcpy+0x130>
    8104:	2906b03a 	or	r3,r5,r4
    8108:	18c000cc 	andi	r3,r3,3
    810c:	1800441e 	bne	r3,zero,8220 <memcpy+0x138>
    8110:	347ffc04 	addi	r17,r6,-16
    8114:	8822d13a 	srli	r17,r17,4
    8118:	28c00104 	addi	r3,r5,4
    811c:	23400104 	addi	r13,r4,4
    8120:	8820913a 	slli	r16,r17,4
    8124:	2b000204 	addi	r12,r5,8
    8128:	22c00204 	addi	r11,r4,8
    812c:	84000504 	addi	r16,r16,20
    8130:	2a800304 	addi	r10,r5,12
    8134:	22400304 	addi	r9,r4,12
    8138:	2c21883a 	add	r16,r5,r16
    813c:	2811883a 	mov	r8,r5
    8140:	200f883a 	mov	r7,r4
    8144:	41000017 	ldw	r4,0(r8)
    8148:	1fc00017 	ldw	ra,0(r3)
    814c:	63c00017 	ldw	r15,0(r12)
    8150:	39000015 	stw	r4,0(r7)
    8154:	53800017 	ldw	r14,0(r10)
    8158:	6fc00015 	stw	ra,0(r13)
    815c:	5bc00015 	stw	r15,0(r11)
    8160:	4b800015 	stw	r14,0(r9)
    8164:	18c00404 	addi	r3,r3,16
    8168:	39c00404 	addi	r7,r7,16
    816c:	42000404 	addi	r8,r8,16
    8170:	6b400404 	addi	r13,r13,16
    8174:	63000404 	addi	r12,r12,16
    8178:	5ac00404 	addi	r11,r11,16
    817c:	52800404 	addi	r10,r10,16
    8180:	4a400404 	addi	r9,r9,16
    8184:	1c3fef1e 	bne	r3,r16,8144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008144>
    8188:	89c00044 	addi	r7,r17,1
    818c:	380e913a 	slli	r7,r7,4
    8190:	310003cc 	andi	r4,r6,15
    8194:	02c000c4 	movi	r11,3
    8198:	11c7883a 	add	r3,r2,r7
    819c:	29cb883a 	add	r5,r5,r7
    81a0:	5900212e 	bgeu	r11,r4,8228 <memcpy+0x140>
    81a4:	1813883a 	mov	r9,r3
    81a8:	2811883a 	mov	r8,r5
    81ac:	200f883a 	mov	r7,r4
    81b0:	42800017 	ldw	r10,0(r8)
    81b4:	4a400104 	addi	r9,r9,4
    81b8:	39ffff04 	addi	r7,r7,-4
    81bc:	4abfff15 	stw	r10,-4(r9)
    81c0:	42000104 	addi	r8,r8,4
    81c4:	59fffa36 	bltu	r11,r7,81b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70081b0>
    81c8:	213fff04 	addi	r4,r4,-4
    81cc:	2008d0ba 	srli	r4,r4,2
    81d0:	318000cc 	andi	r6,r6,3
    81d4:	21000044 	addi	r4,r4,1
    81d8:	2109883a 	add	r4,r4,r4
    81dc:	2109883a 	add	r4,r4,r4
    81e0:	1907883a 	add	r3,r3,r4
    81e4:	290b883a 	add	r5,r5,r4
    81e8:	30000626 	beq	r6,zero,8204 <memcpy+0x11c>
    81ec:	198d883a 	add	r6,r3,r6
    81f0:	29c00003 	ldbu	r7,0(r5)
    81f4:	18c00044 	addi	r3,r3,1
    81f8:	29400044 	addi	r5,r5,1
    81fc:	19ffffc5 	stb	r7,-1(r3)
    8200:	19bffb1e 	bne	r3,r6,81f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70081f0>
    8204:	dfc00217 	ldw	ra,8(sp)
    8208:	dc400117 	ldw	r17,4(sp)
    820c:	dc000017 	ldw	r16,0(sp)
    8210:	dec00304 	addi	sp,sp,12
    8214:	f800283a 	ret
    8218:	2007883a 	mov	r3,r4
    821c:	003ff206 	br	81e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70081e8>
    8220:	2007883a 	mov	r3,r4
    8224:	003ff106 	br	81ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70081ec>
    8228:	200d883a 	mov	r6,r4
    822c:	003fee06 	br	81e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70081e8>

00008230 <memset>:
    8230:	20c000cc 	andi	r3,r4,3
    8234:	2005883a 	mov	r2,r4
    8238:	18004426 	beq	r3,zero,834c <memset+0x11c>
    823c:	31ffffc4 	addi	r7,r6,-1
    8240:	30004026 	beq	r6,zero,8344 <memset+0x114>
    8244:	2813883a 	mov	r9,r5
    8248:	200d883a 	mov	r6,r4
    824c:	2007883a 	mov	r3,r4
    8250:	00000406 	br	8264 <memset+0x34>
    8254:	3a3fffc4 	addi	r8,r7,-1
    8258:	31800044 	addi	r6,r6,1
    825c:	38003926 	beq	r7,zero,8344 <memset+0x114>
    8260:	400f883a 	mov	r7,r8
    8264:	18c00044 	addi	r3,r3,1
    8268:	32400005 	stb	r9,0(r6)
    826c:	1a0000cc 	andi	r8,r3,3
    8270:	403ff81e 	bne	r8,zero,8254 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008254>
    8274:	010000c4 	movi	r4,3
    8278:	21c02d2e 	bgeu	r4,r7,8330 <memset+0x100>
    827c:	29003fcc 	andi	r4,r5,255
    8280:	200c923a 	slli	r6,r4,8
    8284:	3108b03a 	or	r4,r6,r4
    8288:	200c943a 	slli	r6,r4,16
    828c:	218cb03a 	or	r6,r4,r6
    8290:	010003c4 	movi	r4,15
    8294:	21c0182e 	bgeu	r4,r7,82f8 <memset+0xc8>
    8298:	3b3ffc04 	addi	r12,r7,-16
    829c:	6018d13a 	srli	r12,r12,4
    82a0:	1a000104 	addi	r8,r3,4
    82a4:	1ac00204 	addi	r11,r3,8
    82a8:	6008913a 	slli	r4,r12,4
    82ac:	1a800304 	addi	r10,r3,12
    82b0:	1813883a 	mov	r9,r3
    82b4:	21000504 	addi	r4,r4,20
    82b8:	1909883a 	add	r4,r3,r4
    82bc:	49800015 	stw	r6,0(r9)
    82c0:	41800015 	stw	r6,0(r8)
    82c4:	59800015 	stw	r6,0(r11)
    82c8:	51800015 	stw	r6,0(r10)
    82cc:	42000404 	addi	r8,r8,16
    82d0:	4a400404 	addi	r9,r9,16
    82d4:	5ac00404 	addi	r11,r11,16
    82d8:	52800404 	addi	r10,r10,16
    82dc:	413ff71e 	bne	r8,r4,82bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70082bc>
    82e0:	63000044 	addi	r12,r12,1
    82e4:	6018913a 	slli	r12,r12,4
    82e8:	39c003cc 	andi	r7,r7,15
    82ec:	010000c4 	movi	r4,3
    82f0:	1b07883a 	add	r3,r3,r12
    82f4:	21c00e2e 	bgeu	r4,r7,8330 <memset+0x100>
    82f8:	1813883a 	mov	r9,r3
    82fc:	3811883a 	mov	r8,r7
    8300:	010000c4 	movi	r4,3
    8304:	49800015 	stw	r6,0(r9)
    8308:	423fff04 	addi	r8,r8,-4
    830c:	4a400104 	addi	r9,r9,4
    8310:	223ffc36 	bltu	r4,r8,8304 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008304>
    8314:	393fff04 	addi	r4,r7,-4
    8318:	2008d0ba 	srli	r4,r4,2
    831c:	39c000cc 	andi	r7,r7,3
    8320:	21000044 	addi	r4,r4,1
    8324:	2109883a 	add	r4,r4,r4
    8328:	2109883a 	add	r4,r4,r4
    832c:	1907883a 	add	r3,r3,r4
    8330:	38000526 	beq	r7,zero,8348 <memset+0x118>
    8334:	19cf883a 	add	r7,r3,r7
    8338:	19400005 	stb	r5,0(r3)
    833c:	18c00044 	addi	r3,r3,1
    8340:	38fffd1e 	bne	r7,r3,8338 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008338>
    8344:	f800283a 	ret
    8348:	f800283a 	ret
    834c:	2007883a 	mov	r3,r4
    8350:	300f883a 	mov	r7,r6
    8354:	003fc706 	br	8274 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008274>

00008358 <_printf_r>:
    8358:	defffd04 	addi	sp,sp,-12
    835c:	2805883a 	mov	r2,r5
    8360:	dfc00015 	stw	ra,0(sp)
    8364:	d9800115 	stw	r6,4(sp)
    8368:	d9c00215 	stw	r7,8(sp)
    836c:	21400217 	ldw	r5,8(r4)
    8370:	d9c00104 	addi	r7,sp,4
    8374:	100d883a 	mov	r6,r2
    8378:	000ac000 	call	ac00 <___vfprintf_internal_r>
    837c:	dfc00017 	ldw	ra,0(sp)
    8380:	dec00304 	addi	sp,sp,12
    8384:	f800283a 	ret

00008388 <printf>:
    8388:	defffc04 	addi	sp,sp,-16
    838c:	dfc00015 	stw	ra,0(sp)
    8390:	d9400115 	stw	r5,4(sp)
    8394:	d9800215 	stw	r6,8(sp)
    8398:	d9c00315 	stw	r7,12(sp)
    839c:	008000b4 	movhi	r2,2
    83a0:	109bd004 	addi	r2,r2,28480
    83a4:	10800017 	ldw	r2,0(r2)
    83a8:	200b883a 	mov	r5,r4
    83ac:	d9800104 	addi	r6,sp,4
    83b0:	11000217 	ldw	r4,8(r2)
    83b4:	000cdf80 	call	cdf8 <__vfprintf_internal>
    83b8:	dfc00017 	ldw	ra,0(sp)
    83bc:	dec00404 	addi	sp,sp,16
    83c0:	f800283a 	ret

000083c4 <_puts_r>:
    83c4:	defff604 	addi	sp,sp,-40
    83c8:	dc000715 	stw	r16,28(sp)
    83cc:	2021883a 	mov	r16,r4
    83d0:	2809883a 	mov	r4,r5
    83d4:	dc400815 	stw	r17,32(sp)
    83d8:	dfc00915 	stw	ra,36(sp)
    83dc:	2823883a 	mov	r17,r5
    83e0:	00089900 	call	8990 <strlen>
    83e4:	10c00044 	addi	r3,r2,1
    83e8:	d8800115 	stw	r2,4(sp)
    83ec:	008000b4 	movhi	r2,2
    83f0:	1092cd04 	addi	r2,r2,19252
    83f4:	d8800215 	stw	r2,8(sp)
    83f8:	00800044 	movi	r2,1
    83fc:	d8800315 	stw	r2,12(sp)
    8400:	00800084 	movi	r2,2
    8404:	dc400015 	stw	r17,0(sp)
    8408:	d8c00615 	stw	r3,24(sp)
    840c:	dec00415 	stw	sp,16(sp)
    8410:	d8800515 	stw	r2,20(sp)
    8414:	80000226 	beq	r16,zero,8420 <_puts_r+0x5c>
    8418:	80800e17 	ldw	r2,56(r16)
    841c:	10001426 	beq	r2,zero,8470 <_puts_r+0xac>
    8420:	81400217 	ldw	r5,8(r16)
    8424:	2880030b 	ldhu	r2,12(r5)
    8428:	10c8000c 	andi	r3,r2,8192
    842c:	1800061e 	bne	r3,zero,8448 <_puts_r+0x84>
    8430:	29001917 	ldw	r4,100(r5)
    8434:	00f7ffc4 	movi	r3,-8193
    8438:	10880014 	ori	r2,r2,8192
    843c:	20c6703a 	and	r3,r4,r3
    8440:	2880030d 	sth	r2,12(r5)
    8444:	28c01915 	stw	r3,100(r5)
    8448:	d9800404 	addi	r6,sp,16
    844c:	8009883a 	mov	r4,r16
    8450:	000f3280 	call	f328 <__sfvwrite_r>
    8454:	1000091e 	bne	r2,zero,847c <_puts_r+0xb8>
    8458:	00800284 	movi	r2,10
    845c:	dfc00917 	ldw	ra,36(sp)
    8460:	dc400817 	ldw	r17,32(sp)
    8464:	dc000717 	ldw	r16,28(sp)
    8468:	dec00a04 	addi	sp,sp,40
    846c:	f800283a 	ret
    8470:	8009883a 	mov	r4,r16
    8474:	000eea40 	call	eea4 <__sinit>
    8478:	003fe906 	br	8420 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008420>
    847c:	00bfffc4 	movi	r2,-1
    8480:	003ff606 	br	845c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700845c>

00008484 <puts>:
    8484:	008000b4 	movhi	r2,2
    8488:	109bd004 	addi	r2,r2,28480
    848c:	200b883a 	mov	r5,r4
    8490:	11000017 	ldw	r4,0(r2)
    8494:	00083c41 	jmpi	83c4 <_puts_r>

00008498 <_sbrk_r>:
    8498:	defffd04 	addi	sp,sp,-12
    849c:	dc000015 	stw	r16,0(sp)
    84a0:	040000f4 	movhi	r16,3
    84a4:	dc400115 	stw	r17,4(sp)
    84a8:	8423f204 	addi	r16,r16,-28728
    84ac:	2023883a 	mov	r17,r4
    84b0:	2809883a 	mov	r4,r5
    84b4:	dfc00215 	stw	ra,8(sp)
    84b8:	80000015 	stw	zero,0(r16)
    84bc:	0017a540 	call	17a54 <sbrk>
    84c0:	00ffffc4 	movi	r3,-1
    84c4:	10c00526 	beq	r2,r3,84dc <_sbrk_r+0x44>
    84c8:	dfc00217 	ldw	ra,8(sp)
    84cc:	dc400117 	ldw	r17,4(sp)
    84d0:	dc000017 	ldw	r16,0(sp)
    84d4:	dec00304 	addi	sp,sp,12
    84d8:	f800283a 	ret
    84dc:	80c00017 	ldw	r3,0(r16)
    84e0:	183ff926 	beq	r3,zero,84c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084c8>
    84e4:	88c00015 	stw	r3,0(r17)
    84e8:	003ff706 	br	84c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70084c8>

000084ec <_init_signal_r>:
    84ec:	2080b717 	ldw	r2,732(r4)
    84f0:	10000226 	beq	r2,zero,84fc <_init_signal_r+0x10>
    84f4:	0005883a 	mov	r2,zero
    84f8:	f800283a 	ret
    84fc:	defffe04 	addi	sp,sp,-8
    8500:	01402004 	movi	r5,128
    8504:	dc000015 	stw	r16,0(sp)
    8508:	dfc00115 	stw	ra,4(sp)
    850c:	2021883a 	mov	r16,r4
    8510:	00078dc0 	call	78dc <_malloc_r>
    8514:	8080b715 	stw	r2,732(r16)
    8518:	10000d26 	beq	r2,zero,8550 <_init_signal_r+0x64>
    851c:	0007883a 	mov	r3,zero
    8520:	01002004 	movi	r4,128
    8524:	00000106 	br	852c <_init_signal_r+0x40>
    8528:	8080b717 	ldw	r2,732(r16)
    852c:	10c5883a 	add	r2,r2,r3
    8530:	10000015 	stw	zero,0(r2)
    8534:	18c00104 	addi	r3,r3,4
    8538:	193ffb1e 	bne	r3,r4,8528 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008528>
    853c:	0005883a 	mov	r2,zero
    8540:	dfc00117 	ldw	ra,4(sp)
    8544:	dc000017 	ldw	r16,0(sp)
    8548:	dec00204 	addi	sp,sp,8
    854c:	f800283a 	ret
    8550:	00bfffc4 	movi	r2,-1
    8554:	003ffa06 	br	8540 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008540>

00008558 <_signal_r>:
    8558:	00c007c4 	movi	r3,31
    855c:	19401536 	bltu	r3,r5,85b4 <_signal_r+0x5c>
    8560:	2080b717 	ldw	r2,732(r4)
    8564:	defffc04 	addi	sp,sp,-16
    8568:	dc800215 	stw	r18,8(sp)
    856c:	dc400115 	stw	r17,4(sp)
    8570:	dc000015 	stw	r16,0(sp)
    8574:	dfc00315 	stw	ra,12(sp)
    8578:	3023883a 	mov	r17,r6
    857c:	2021883a 	mov	r16,r4
    8580:	2825883a 	mov	r18,r5
    8584:	10000f26 	beq	r2,zero,85c4 <_signal_r+0x6c>
    8588:	948b883a 	add	r5,r18,r18
    858c:	294b883a 	add	r5,r5,r5
    8590:	114b883a 	add	r5,r2,r5
    8594:	28800017 	ldw	r2,0(r5)
    8598:	2c400015 	stw	r17,0(r5)
    859c:	dfc00317 	ldw	ra,12(sp)
    85a0:	dc800217 	ldw	r18,8(sp)
    85a4:	dc400117 	ldw	r17,4(sp)
    85a8:	dc000017 	ldw	r16,0(sp)
    85ac:	dec00404 	addi	sp,sp,16
    85b0:	f800283a 	ret
    85b4:	00c00584 	movi	r3,22
    85b8:	20c00015 	stw	r3,0(r4)
    85bc:	00bfffc4 	movi	r2,-1
    85c0:	f800283a 	ret
    85c4:	00084ec0 	call	84ec <_init_signal_r>
    85c8:	1000021e 	bne	r2,zero,85d4 <_signal_r+0x7c>
    85cc:	8080b717 	ldw	r2,732(r16)
    85d0:	003fed06 	br	8588 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008588>
    85d4:	00bfffc4 	movi	r2,-1
    85d8:	003ff006 	br	859c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700859c>

000085dc <_raise_r>:
    85dc:	008007c4 	movi	r2,31
    85e0:	11402936 	bltu	r2,r5,8688 <_raise_r+0xac>
    85e4:	20c0b717 	ldw	r3,732(r4)
    85e8:	defffd04 	addi	sp,sp,-12
    85ec:	dc400115 	stw	r17,4(sp)
    85f0:	dc000015 	stw	r16,0(sp)
    85f4:	dfc00215 	stw	ra,8(sp)
    85f8:	2021883a 	mov	r16,r4
    85fc:	2823883a 	mov	r17,r5
    8600:	18001726 	beq	r3,zero,8660 <_raise_r+0x84>
    8604:	2945883a 	add	r2,r5,r5
    8608:	1085883a 	add	r2,r2,r2
    860c:	1887883a 	add	r3,r3,r2
    8610:	19800017 	ldw	r6,0(r3)
    8614:	30001226 	beq	r6,zero,8660 <_raise_r+0x84>
    8618:	00800044 	movi	r2,1
    861c:	30800e26 	beq	r6,r2,8658 <_raise_r+0x7c>
    8620:	013fffc4 	movi	r4,-1
    8624:	31000926 	beq	r6,r4,864c <_raise_r+0x70>
    8628:	18000015 	stw	zero,0(r3)
    862c:	2809883a 	mov	r4,r5
    8630:	303ee83a 	callr	r6
    8634:	0005883a 	mov	r2,zero
    8638:	dfc00217 	ldw	ra,8(sp)
    863c:	dc400117 	ldw	r17,4(sp)
    8640:	dc000017 	ldw	r16,0(sp)
    8644:	dec00304 	addi	sp,sp,12
    8648:	f800283a 	ret
    864c:	00c00584 	movi	r3,22
    8650:	80c00015 	stw	r3,0(r16)
    8654:	003ff806 	br	8638 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008638>
    8658:	0005883a 	mov	r2,zero
    865c:	003ff606 	br	8638 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008638>
    8660:	8009883a 	mov	r4,r16
    8664:	00087ec0 	call	87ec <_getpid_r>
    8668:	880d883a 	mov	r6,r17
    866c:	100b883a 	mov	r5,r2
    8670:	8009883a 	mov	r4,r16
    8674:	dfc00217 	ldw	ra,8(sp)
    8678:	dc400117 	ldw	r17,4(sp)
    867c:	dc000017 	ldw	r16,0(sp)
    8680:	dec00304 	addi	sp,sp,12
    8684:	00087901 	jmpi	8790 <_kill_r>
    8688:	00800584 	movi	r2,22
    868c:	20800015 	stw	r2,0(r4)
    8690:	00bfffc4 	movi	r2,-1
    8694:	f800283a 	ret

00008698 <__sigtramp_r>:
    8698:	008007c4 	movi	r2,31
    869c:	11402436 	bltu	r2,r5,8730 <__sigtramp_r+0x98>
    86a0:	20c0b717 	ldw	r3,732(r4)
    86a4:	defffd04 	addi	sp,sp,-12
    86a8:	dc400115 	stw	r17,4(sp)
    86ac:	dc000015 	stw	r16,0(sp)
    86b0:	dfc00215 	stw	ra,8(sp)
    86b4:	2021883a 	mov	r16,r4
    86b8:	2823883a 	mov	r17,r5
    86bc:	18001826 	beq	r3,zero,8720 <__sigtramp_r+0x88>
    86c0:	8c45883a 	add	r2,r17,r17
    86c4:	1085883a 	add	r2,r2,r2
    86c8:	1885883a 	add	r2,r3,r2
    86cc:	10c00017 	ldw	r3,0(r2)
    86d0:	18001126 	beq	r3,zero,8718 <__sigtramp_r+0x80>
    86d4:	013fffc4 	movi	r4,-1
    86d8:	19000d26 	beq	r3,r4,8710 <__sigtramp_r+0x78>
    86dc:	01000044 	movi	r4,1
    86e0:	19000926 	beq	r3,r4,8708 <__sigtramp_r+0x70>
    86e4:	10000015 	stw	zero,0(r2)
    86e8:	8809883a 	mov	r4,r17
    86ec:	183ee83a 	callr	r3
    86f0:	0005883a 	mov	r2,zero
    86f4:	dfc00217 	ldw	ra,8(sp)
    86f8:	dc400117 	ldw	r17,4(sp)
    86fc:	dc000017 	ldw	r16,0(sp)
    8700:	dec00304 	addi	sp,sp,12
    8704:	f800283a 	ret
    8708:	008000c4 	movi	r2,3
    870c:	003ff906 	br	86f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70086f4>
    8710:	00800084 	movi	r2,2
    8714:	003ff706 	br	86f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70086f4>
    8718:	00800044 	movi	r2,1
    871c:	003ff506 	br	86f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70086f4>
    8720:	00084ec0 	call	84ec <_init_signal_r>
    8724:	1000041e 	bne	r2,zero,8738 <__sigtramp_r+0xa0>
    8728:	80c0b717 	ldw	r3,732(r16)
    872c:	003fe406 	br	86c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70086c0>
    8730:	00bfffc4 	movi	r2,-1
    8734:	f800283a 	ret
    8738:	00bfffc4 	movi	r2,-1
    873c:	003fed06 	br	86f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70086f4>

00008740 <raise>:
    8740:	008000b4 	movhi	r2,2
    8744:	109bd004 	addi	r2,r2,28480
    8748:	200b883a 	mov	r5,r4
    874c:	11000017 	ldw	r4,0(r2)
    8750:	00085dc1 	jmpi	85dc <_raise_r>

00008754 <signal>:
    8754:	008000b4 	movhi	r2,2
    8758:	109bd004 	addi	r2,r2,28480
    875c:	280d883a 	mov	r6,r5
    8760:	200b883a 	mov	r5,r4
    8764:	11000017 	ldw	r4,0(r2)
    8768:	00085581 	jmpi	8558 <_signal_r>

0000876c <_init_signal>:
    876c:	008000b4 	movhi	r2,2
    8770:	109bd004 	addi	r2,r2,28480
    8774:	11000017 	ldw	r4,0(r2)
    8778:	00084ec1 	jmpi	84ec <_init_signal_r>

0000877c <__sigtramp>:
    877c:	008000b4 	movhi	r2,2
    8780:	109bd004 	addi	r2,r2,28480
    8784:	200b883a 	mov	r5,r4
    8788:	11000017 	ldw	r4,0(r2)
    878c:	00086981 	jmpi	8698 <__sigtramp_r>

00008790 <_kill_r>:
    8790:	defffd04 	addi	sp,sp,-12
    8794:	2805883a 	mov	r2,r5
    8798:	dc000015 	stw	r16,0(sp)
    879c:	040000f4 	movhi	r16,3
    87a0:	dc400115 	stw	r17,4(sp)
    87a4:	8423f204 	addi	r16,r16,-28728
    87a8:	2023883a 	mov	r17,r4
    87ac:	300b883a 	mov	r5,r6
    87b0:	1009883a 	mov	r4,r2
    87b4:	dfc00215 	stw	ra,8(sp)
    87b8:	80000015 	stw	zero,0(r16)
    87bc:	00174d00 	call	174d0 <kill>
    87c0:	00ffffc4 	movi	r3,-1
    87c4:	10c00526 	beq	r2,r3,87dc <_kill_r+0x4c>
    87c8:	dfc00217 	ldw	ra,8(sp)
    87cc:	dc400117 	ldw	r17,4(sp)
    87d0:	dc000017 	ldw	r16,0(sp)
    87d4:	dec00304 	addi	sp,sp,12
    87d8:	f800283a 	ret
    87dc:	80c00017 	ldw	r3,0(r16)
    87e0:	183ff926 	beq	r3,zero,87c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70087c8>
    87e4:	88c00015 	stw	r3,0(r17)
    87e8:	003ff706 	br	87c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70087c8>

000087ec <_getpid_r>:
    87ec:	00173941 	jmpi	17394 <getpid>

000087f0 <_sprintf_r>:
    87f0:	deffe404 	addi	sp,sp,-112
    87f4:	2807883a 	mov	r3,r5
    87f8:	dfc01a15 	stw	ra,104(sp)
    87fc:	d9c01b15 	stw	r7,108(sp)
    8800:	00a00034 	movhi	r2,32768
    8804:	10bfffc4 	addi	r2,r2,-1
    8808:	02008204 	movi	r8,520
    880c:	d8800215 	stw	r2,8(sp)
    8810:	d8800515 	stw	r2,20(sp)
    8814:	d9c01b04 	addi	r7,sp,108
    8818:	d80b883a 	mov	r5,sp
    881c:	00bfffc4 	movi	r2,-1
    8820:	d8c00015 	stw	r3,0(sp)
    8824:	d8c00415 	stw	r3,16(sp)
    8828:	da00030d 	sth	r8,12(sp)
    882c:	d880038d 	sth	r2,14(sp)
    8830:	0008a280 	call	8a28 <___svfprintf_internal_r>
    8834:	d8c00017 	ldw	r3,0(sp)
    8838:	18000005 	stb	zero,0(r3)
    883c:	dfc01a17 	ldw	ra,104(sp)
    8840:	dec01c04 	addi	sp,sp,112
    8844:	f800283a 	ret

00008848 <sprintf>:
    8848:	deffe304 	addi	sp,sp,-116
    884c:	2007883a 	mov	r3,r4
    8850:	dfc01a15 	stw	ra,104(sp)
    8854:	d9801b15 	stw	r6,108(sp)
    8858:	d9c01c15 	stw	r7,112(sp)
    885c:	010000b4 	movhi	r4,2
    8860:	211bd004 	addi	r4,r4,28480
    8864:	21000017 	ldw	r4,0(r4)
    8868:	00a00034 	movhi	r2,32768
    886c:	10bfffc4 	addi	r2,r2,-1
    8870:	280d883a 	mov	r6,r5
    8874:	02008204 	movi	r8,520
    8878:	d8800215 	stw	r2,8(sp)
    887c:	d8800515 	stw	r2,20(sp)
    8880:	d9c01b04 	addi	r7,sp,108
    8884:	d80b883a 	mov	r5,sp
    8888:	00bfffc4 	movi	r2,-1
    888c:	d8c00015 	stw	r3,0(sp)
    8890:	d8c00415 	stw	r3,16(sp)
    8894:	da00030d 	sth	r8,12(sp)
    8898:	d880038d 	sth	r2,14(sp)
    889c:	0008a280 	call	8a28 <___svfprintf_internal_r>
    88a0:	d8c00017 	ldw	r3,0(sp)
    88a4:	18000005 	stb	zero,0(r3)
    88a8:	dfc01a17 	ldw	ra,104(sp)
    88ac:	dec01d04 	addi	sp,sp,116
    88b0:	f800283a 	ret

000088b4 <strcmp>:
    88b4:	2144b03a 	or	r2,r4,r5
    88b8:	108000cc 	andi	r2,r2,3
    88bc:	1000171e 	bne	r2,zero,891c <strcmp+0x68>
    88c0:	20800017 	ldw	r2,0(r4)
    88c4:	28c00017 	ldw	r3,0(r5)
    88c8:	10c0141e 	bne	r2,r3,891c <strcmp+0x68>
    88cc:	027fbff4 	movhi	r9,65279
    88d0:	4a7fbfc4 	addi	r9,r9,-257
    88d4:	0086303a 	nor	r3,zero,r2
    88d8:	02202074 	movhi	r8,32897
    88dc:	1245883a 	add	r2,r2,r9
    88e0:	42202004 	addi	r8,r8,-32640
    88e4:	10c4703a 	and	r2,r2,r3
    88e8:	1204703a 	and	r2,r2,r8
    88ec:	10000226 	beq	r2,zero,88f8 <strcmp+0x44>
    88f0:	00002306 	br	8980 <strcmp+0xcc>
    88f4:	1000221e 	bne	r2,zero,8980 <strcmp+0xcc>
    88f8:	21000104 	addi	r4,r4,4
    88fc:	20c00017 	ldw	r3,0(r4)
    8900:	29400104 	addi	r5,r5,4
    8904:	29800017 	ldw	r6,0(r5)
    8908:	1a4f883a 	add	r7,r3,r9
    890c:	00c4303a 	nor	r2,zero,r3
    8910:	3884703a 	and	r2,r7,r2
    8914:	1204703a 	and	r2,r2,r8
    8918:	19bff626 	beq	r3,r6,88f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70088f4>
    891c:	20800003 	ldbu	r2,0(r4)
    8920:	10c03fcc 	andi	r3,r2,255
    8924:	18c0201c 	xori	r3,r3,128
    8928:	18ffe004 	addi	r3,r3,-128
    892c:	18000c26 	beq	r3,zero,8960 <strcmp+0xac>
    8930:	29800007 	ldb	r6,0(r5)
    8934:	19800326 	beq	r3,r6,8944 <strcmp+0x90>
    8938:	00001306 	br	8988 <strcmp+0xd4>
    893c:	29800007 	ldb	r6,0(r5)
    8940:	11800b1e 	bne	r2,r6,8970 <strcmp+0xbc>
    8944:	21000044 	addi	r4,r4,1
    8948:	20c00003 	ldbu	r3,0(r4)
    894c:	29400044 	addi	r5,r5,1
    8950:	18803fcc 	andi	r2,r3,255
    8954:	1080201c 	xori	r2,r2,128
    8958:	10bfe004 	addi	r2,r2,-128
    895c:	103ff71e 	bne	r2,zero,893c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700893c>
    8960:	0007883a 	mov	r3,zero
    8964:	28800003 	ldbu	r2,0(r5)
    8968:	1885c83a 	sub	r2,r3,r2
    896c:	f800283a 	ret
    8970:	28800003 	ldbu	r2,0(r5)
    8974:	18c03fcc 	andi	r3,r3,255
    8978:	1885c83a 	sub	r2,r3,r2
    897c:	f800283a 	ret
    8980:	0005883a 	mov	r2,zero
    8984:	f800283a 	ret
    8988:	10c03fcc 	andi	r3,r2,255
    898c:	003ff506 	br	8964 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008964>

00008990 <strlen>:
    8990:	208000cc 	andi	r2,r4,3
    8994:	10002026 	beq	r2,zero,8a18 <strlen+0x88>
    8998:	20800007 	ldb	r2,0(r4)
    899c:	10002026 	beq	r2,zero,8a20 <strlen+0x90>
    89a0:	2005883a 	mov	r2,r4
    89a4:	00000206 	br	89b0 <strlen+0x20>
    89a8:	10c00007 	ldb	r3,0(r2)
    89ac:	18001826 	beq	r3,zero,8a10 <strlen+0x80>
    89b0:	10800044 	addi	r2,r2,1
    89b4:	10c000cc 	andi	r3,r2,3
    89b8:	183ffb1e 	bne	r3,zero,89a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089a8>
    89bc:	10c00017 	ldw	r3,0(r2)
    89c0:	01ffbff4 	movhi	r7,65279
    89c4:	39ffbfc4 	addi	r7,r7,-257
    89c8:	00ca303a 	nor	r5,zero,r3
    89cc:	01a02074 	movhi	r6,32897
    89d0:	19c7883a 	add	r3,r3,r7
    89d4:	31a02004 	addi	r6,r6,-32640
    89d8:	1946703a 	and	r3,r3,r5
    89dc:	1986703a 	and	r3,r3,r6
    89e0:	1800091e 	bne	r3,zero,8a08 <strlen+0x78>
    89e4:	10800104 	addi	r2,r2,4
    89e8:	10c00017 	ldw	r3,0(r2)
    89ec:	19cb883a 	add	r5,r3,r7
    89f0:	00c6303a 	nor	r3,zero,r3
    89f4:	28c6703a 	and	r3,r5,r3
    89f8:	1986703a 	and	r3,r3,r6
    89fc:	183ff926 	beq	r3,zero,89e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089e4>
    8a00:	00000106 	br	8a08 <strlen+0x78>
    8a04:	10800044 	addi	r2,r2,1
    8a08:	10c00007 	ldb	r3,0(r2)
    8a0c:	183ffd1e 	bne	r3,zero,8a04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a04>
    8a10:	1105c83a 	sub	r2,r2,r4
    8a14:	f800283a 	ret
    8a18:	2005883a 	mov	r2,r4
    8a1c:	003fe706 	br	89bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70089bc>
    8a20:	0005883a 	mov	r2,zero
    8a24:	f800283a 	ret

00008a28 <___svfprintf_internal_r>:
    8a28:	deffb704 	addi	sp,sp,-292
    8a2c:	dfc04815 	stw	ra,288(sp)
    8a30:	ddc04615 	stw	r23,280(sp)
    8a34:	d9402c15 	stw	r5,176(sp)
    8a38:	d9003915 	stw	r4,228(sp)
    8a3c:	302f883a 	mov	r23,r6
    8a40:	d9c02d15 	stw	r7,180(sp)
    8a44:	df004715 	stw	fp,284(sp)
    8a48:	dd804515 	stw	r22,276(sp)
    8a4c:	dd404415 	stw	r21,272(sp)
    8a50:	dd004315 	stw	r20,268(sp)
    8a54:	dcc04215 	stw	r19,264(sp)
    8a58:	dc804115 	stw	r18,260(sp)
    8a5c:	dc404015 	stw	r17,256(sp)
    8a60:	dc003f15 	stw	r16,252(sp)
    8a64:	000fa180 	call	fa18 <_localeconv_r>
    8a68:	10800017 	ldw	r2,0(r2)
    8a6c:	1009883a 	mov	r4,r2
    8a70:	d8803415 	stw	r2,208(sp)
    8a74:	00089900 	call	8990 <strlen>
    8a78:	d8c02c17 	ldw	r3,176(sp)
    8a7c:	d8803815 	stw	r2,224(sp)
    8a80:	1880030b 	ldhu	r2,12(r3)
    8a84:	1080200c 	andi	r2,r2,128
    8a88:	10000226 	beq	r2,zero,8a94 <___svfprintf_internal_r+0x6c>
    8a8c:	18800417 	ldw	r2,16(r3)
    8a90:	10067f26 	beq	r2,zero,a490 <___svfprintf_internal_r+0x1a68>
    8a94:	dcc03917 	ldw	r19,228(sp)
    8a98:	d8c00404 	addi	r3,sp,16
    8a9c:	054000b4 	movhi	r21,2
    8aa0:	d9001e04 	addi	r4,sp,120
    8aa4:	ad52de84 	addi	r21,r21,19322
    8aa8:	d8c01e15 	stw	r3,120(sp)
    8aac:	d8002015 	stw	zero,128(sp)
    8ab0:	d8001f15 	stw	zero,124(sp)
    8ab4:	d8003315 	stw	zero,204(sp)
    8ab8:	d8003615 	stw	zero,216(sp)
    8abc:	d8003715 	stw	zero,220(sp)
    8ac0:	1811883a 	mov	r8,r3
    8ac4:	d8003a15 	stw	zero,232(sp)
    8ac8:	d8003b15 	stw	zero,236(sp)
    8acc:	d8002f15 	stw	zero,188(sp)
    8ad0:	d9002815 	stw	r4,160(sp)
    8ad4:	b8800007 	ldb	r2,0(r23)
    8ad8:	10026726 	beq	r2,zero,9478 <___svfprintf_internal_r+0xa50>
    8adc:	00c00944 	movi	r3,37
    8ae0:	b821883a 	mov	r16,r23
    8ae4:	10c0021e 	bne	r2,r3,8af0 <___svfprintf_internal_r+0xc8>
    8ae8:	00001406 	br	8b3c <___svfprintf_internal_r+0x114>
    8aec:	10c00326 	beq	r2,r3,8afc <___svfprintf_internal_r+0xd4>
    8af0:	84000044 	addi	r16,r16,1
    8af4:	80800007 	ldb	r2,0(r16)
    8af8:	103ffc1e 	bne	r2,zero,8aec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008aec>
    8afc:	85e3c83a 	sub	r17,r16,r23
    8b00:	88000e26 	beq	r17,zero,8b3c <___svfprintf_internal_r+0x114>
    8b04:	d8c02017 	ldw	r3,128(sp)
    8b08:	d8801f17 	ldw	r2,124(sp)
    8b0c:	45c00015 	stw	r23,0(r8)
    8b10:	1c47883a 	add	r3,r3,r17
    8b14:	10800044 	addi	r2,r2,1
    8b18:	d8c02015 	stw	r3,128(sp)
    8b1c:	44400115 	stw	r17,4(r8)
    8b20:	d8801f15 	stw	r2,124(sp)
    8b24:	00c001c4 	movi	r3,7
    8b28:	18809716 	blt	r3,r2,8d88 <___svfprintf_internal_r+0x360>
    8b2c:	42000204 	addi	r8,r8,8
    8b30:	d9402f17 	ldw	r5,188(sp)
    8b34:	2c4b883a 	add	r5,r5,r17
    8b38:	d9402f15 	stw	r5,188(sp)
    8b3c:	80800007 	ldb	r2,0(r16)
    8b40:	10009826 	beq	r2,zero,8da4 <___svfprintf_internal_r+0x37c>
    8b44:	84400047 	ldb	r17,1(r16)
    8b48:	00bfffc4 	movi	r2,-1
    8b4c:	85c00044 	addi	r23,r16,1
    8b50:	d8002785 	stb	zero,158(sp)
    8b54:	0007883a 	mov	r3,zero
    8b58:	000f883a 	mov	r7,zero
    8b5c:	d8802915 	stw	r2,164(sp)
    8b60:	d8003115 	stw	zero,196(sp)
    8b64:	0025883a 	mov	r18,zero
    8b68:	01401604 	movi	r5,88
    8b6c:	01800244 	movi	r6,9
    8b70:	02800a84 	movi	r10,42
    8b74:	02401b04 	movi	r9,108
    8b78:	bdc00044 	addi	r23,r23,1
    8b7c:	88bff804 	addi	r2,r17,-32
    8b80:	2882f036 	bltu	r5,r2,9744 <___svfprintf_internal_r+0xd1c>
    8b84:	100490ba 	slli	r2,r2,2
    8b88:	01000074 	movhi	r4,1
    8b8c:	2122e704 	addi	r4,r4,-29796
    8b90:	1105883a 	add	r2,r2,r4
    8b94:	10800017 	ldw	r2,0(r2)
    8b98:	1000683a 	jmp	r2
    8b9c:	000096ac 	andhi	zero,zero,602
    8ba0:	00009744 	movi	zero,605
    8ba4:	00009744 	movi	zero,605
    8ba8:	000096a0 	cmpeqi	zero,zero,602
    8bac:	00009744 	movi	zero,605
    8bb0:	00009744 	movi	zero,605
    8bb4:	00009744 	movi	zero,605
    8bb8:	00009744 	movi	zero,605
    8bbc:	00009744 	movi	zero,605
    8bc0:	00009744 	movi	zero,605
    8bc4:	00008e00 	call	8e0 <_ZN4Game6updateEi+0x190>
    8bc8:	000095dc 	xori	zero,zero,599
    8bcc:	00009744 	movi	zero,605
    8bd0:	00008d10 	cmplti	zero,zero,564
    8bd4:	00008e28 	cmpgeui	zero,zero,568
    8bd8:	00009744 	movi	zero,605
    8bdc:	00008e9c 	xori	zero,zero,570
    8be0:	00008e68 	cmpgeui	zero,zero,569
    8be4:	00008e68 	cmpgeui	zero,zero,569
    8be8:	00008e68 	cmpgeui	zero,zero,569
    8bec:	00008e68 	cmpgeui	zero,zero,569
    8bf0:	00008e68 	cmpgeui	zero,zero,569
    8bf4:	00008e68 	cmpgeui	zero,zero,569
    8bf8:	00008e68 	cmpgeui	zero,zero,569
    8bfc:	00008e68 	cmpgeui	zero,zero,569
    8c00:	00008e68 	cmpgeui	zero,zero,569
    8c04:	00009744 	movi	zero,605
    8c08:	00009744 	movi	zero,605
    8c0c:	00009744 	movi	zero,605
    8c10:	00009744 	movi	zero,605
    8c14:	00009744 	movi	zero,605
    8c18:	00009744 	movi	zero,605
    8c1c:	00009744 	movi	zero,605
    8c20:	00009744 	movi	zero,605
    8c24:	00009744 	movi	zero,605
    8c28:	00009744 	movi	zero,605
    8c2c:	00008f54 	movui	zero,573
    8c30:	00008ea8 	cmpgeui	zero,zero,570
    8c34:	00009744 	movi	zero,605
    8c38:	00008ea8 	cmpgeui	zero,zero,570
    8c3c:	00009744 	movi	zero,605
    8c40:	00009744 	movi	zero,605
    8c44:	00009744 	movi	zero,605
    8c48:	00009744 	movi	zero,605
    8c4c:	00008f48 	cmpgei	zero,zero,573
    8c50:	00009744 	movi	zero,605
    8c54:	00009744 	movi	zero,605
    8c58:	00009010 	cmplti	zero,zero,576
    8c5c:	00009744 	movi	zero,605
    8c60:	00009744 	movi	zero,605
    8c64:	00009744 	movi	zero,605
    8c68:	00009744 	movi	zero,605
    8c6c:	00009744 	movi	zero,605
    8c70:	00009480 	call	948 <_ZN4Game4drawEv+0x28>
    8c74:	00009744 	movi	zero,605
    8c78:	00009744 	movi	zero,605
    8c7c:	000094e0 	cmpeqi	zero,zero,595
    8c80:	00009744 	movi	zero,605
    8c84:	00009744 	movi	zero,605
    8c88:	00009744 	movi	zero,605
    8c8c:	00009744 	movi	zero,605
    8c90:	00009744 	movi	zero,605
    8c94:	00009744 	movi	zero,605
    8c98:	00009744 	movi	zero,605
    8c9c:	00009744 	movi	zero,605
    8ca0:	00009744 	movi	zero,605
    8ca4:	00009744 	movi	zero,605
    8ca8:	00009590 	cmplti	zero,zero,598
    8cac:	000096cc 	andi	zero,zero,603
    8cb0:	00008ea8 	cmpgeui	zero,zero,570
    8cb4:	00008ea8 	cmpgeui	zero,zero,570
    8cb8:	00008ea8 	cmpgeui	zero,zero,570
    8cbc:	00009720 	cmpeqi	zero,zero,604
    8cc0:	000096cc 	andi	zero,zero,603
    8cc4:	00009744 	movi	zero,605
    8cc8:	00009744 	movi	zero,605
    8ccc:	000096dc 	xori	zero,zero,603
    8cd0:	00009744 	movi	zero,605
    8cd4:	000096ec 	andhi	zero,zero,603
    8cd8:	000095cc 	andi	zero,zero,599
    8cdc:	00008d1c 	xori	zero,zero,564
    8ce0:	000095ec 	andhi	zero,zero,599
    8ce4:	00009744 	movi	zero,605
    8ce8:	000095f8 	rdprs	zero,zero,599
    8cec:	00009744 	movi	zero,605
    8cf0:	00009654 	movui	zero,601
    8cf4:	00009744 	movi	zero,605
    8cf8:	00009744 	movi	zero,605
    8cfc:	00009664 	muli	zero,zero,601
    8d00:	d9003117 	ldw	r4,196(sp)
    8d04:	d8802d15 	stw	r2,180(sp)
    8d08:	0109c83a 	sub	r4,zero,r4
    8d0c:	d9003115 	stw	r4,196(sp)
    8d10:	94800114 	ori	r18,r18,4
    8d14:	bc400007 	ldb	r17,0(r23)
    8d18:	003f9706 	br	8b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b78>
    8d1c:	00800c04 	movi	r2,48
    8d20:	d9002d17 	ldw	r4,180(sp)
    8d24:	d9402917 	ldw	r5,164(sp)
    8d28:	d8802705 	stb	r2,156(sp)
    8d2c:	00801e04 	movi	r2,120
    8d30:	d8802745 	stb	r2,157(sp)
    8d34:	d8002785 	stb	zero,158(sp)
    8d38:	20c00104 	addi	r3,r4,4
    8d3c:	25000017 	ldw	r20,0(r4)
    8d40:	002d883a 	mov	r22,zero
    8d44:	90800094 	ori	r2,r18,2
    8d48:	28028616 	blt	r5,zero,9764 <___svfprintf_internal_r+0xd3c>
    8d4c:	00bfdfc4 	movi	r2,-129
    8d50:	90a4703a 	and	r18,r18,r2
    8d54:	d8c02d15 	stw	r3,180(sp)
    8d58:	94800094 	ori	r18,r18,2
    8d5c:	a002731e 	bne	r20,zero,972c <___svfprintf_internal_r+0xd04>
    8d60:	008000b4 	movhi	r2,2
    8d64:	1092d704 	addi	r2,r2,19292
    8d68:	d8803a15 	stw	r2,232(sp)
    8d6c:	04401e04 	movi	r17,120
    8d70:	d8c02917 	ldw	r3,164(sp)
    8d74:	0039883a 	mov	fp,zero
    8d78:	1801d526 	beq	r3,zero,94d0 <___svfprintf_internal_r+0xaa8>
    8d7c:	0029883a 	mov	r20,zero
    8d80:	002d883a 	mov	r22,zero
    8d84:	0001f106 	br	954c <___svfprintf_internal_r+0xb24>
    8d88:	d9402c17 	ldw	r5,176(sp)
    8d8c:	d9801e04 	addi	r6,sp,120
    8d90:	9809883a 	mov	r4,r19
    8d94:	00115540 	call	11554 <__ssprint_r>
    8d98:	1000081e 	bne	r2,zero,8dbc <___svfprintf_internal_r+0x394>
    8d9c:	da000404 	addi	r8,sp,16
    8da0:	003f6306 	br	8b30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b30>
    8da4:	d8802017 	ldw	r2,128(sp)
    8da8:	10000426 	beq	r2,zero,8dbc <___svfprintf_internal_r+0x394>
    8dac:	d9402c17 	ldw	r5,176(sp)
    8db0:	d9003917 	ldw	r4,228(sp)
    8db4:	d9801e04 	addi	r6,sp,120
    8db8:	00115540 	call	11554 <__ssprint_r>
    8dbc:	d8802c17 	ldw	r2,176(sp)
    8dc0:	10c0030b 	ldhu	r3,12(r2)
    8dc4:	d8802f17 	ldw	r2,188(sp)
    8dc8:	18c0100c 	andi	r3,r3,64
    8dcc:	1805f51e 	bne	r3,zero,a5a4 <___svfprintf_internal_r+0x1b7c>
    8dd0:	dfc04817 	ldw	ra,288(sp)
    8dd4:	df004717 	ldw	fp,284(sp)
    8dd8:	ddc04617 	ldw	r23,280(sp)
    8ddc:	dd804517 	ldw	r22,276(sp)
    8de0:	dd404417 	ldw	r21,272(sp)
    8de4:	dd004317 	ldw	r20,268(sp)
    8de8:	dcc04217 	ldw	r19,264(sp)
    8dec:	dc804117 	ldw	r18,260(sp)
    8df0:	dc404017 	ldw	r17,256(sp)
    8df4:	dc003f17 	ldw	r16,252(sp)
    8df8:	dec04904 	addi	sp,sp,292
    8dfc:	f800283a 	ret
    8e00:	d8802d17 	ldw	r2,180(sp)
    8e04:	d9002d17 	ldw	r4,180(sp)
    8e08:	10800017 	ldw	r2,0(r2)
    8e0c:	d8803115 	stw	r2,196(sp)
    8e10:	20800104 	addi	r2,r4,4
    8e14:	d9003117 	ldw	r4,196(sp)
    8e18:	203fb916 	blt	r4,zero,8d00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d00>
    8e1c:	d8802d15 	stw	r2,180(sp)
    8e20:	bc400007 	ldb	r17,0(r23)
    8e24:	003f5406 	br	8b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b78>
    8e28:	bc400007 	ldb	r17,0(r23)
    8e2c:	bac00044 	addi	r11,r23,1
    8e30:	8a873926 	beq	r17,r10,ab18 <___svfprintf_internal_r+0x20f0>
    8e34:	88bff404 	addi	r2,r17,-48
    8e38:	0009883a 	mov	r4,zero
    8e3c:	30868836 	bltu	r6,r2,a860 <___svfprintf_internal_r+0x1e38>
    8e40:	5c400007 	ldb	r17,0(r11)
    8e44:	210002a4 	muli	r4,r4,10
    8e48:	5dc00044 	addi	r23,r11,1
    8e4c:	b817883a 	mov	r11,r23
    8e50:	2089883a 	add	r4,r4,r2
    8e54:	88bff404 	addi	r2,r17,-48
    8e58:	30bff92e 	bgeu	r6,r2,8e40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008e40>
    8e5c:	2005d716 	blt	r4,zero,a5bc <___svfprintf_internal_r+0x1b94>
    8e60:	d9002915 	stw	r4,164(sp)
    8e64:	003f4506 	br	8b7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b7c>
    8e68:	b809883a 	mov	r4,r23
    8e6c:	d8003115 	stw	zero,196(sp)
    8e70:	88bff404 	addi	r2,r17,-48
    8e74:	0017883a 	mov	r11,zero
    8e78:	24400007 	ldb	r17,0(r4)
    8e7c:	5ac002a4 	muli	r11,r11,10
    8e80:	bdc00044 	addi	r23,r23,1
    8e84:	b809883a 	mov	r4,r23
    8e88:	12d7883a 	add	r11,r2,r11
    8e8c:	88bff404 	addi	r2,r17,-48
    8e90:	30bff92e 	bgeu	r6,r2,8e78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008e78>
    8e94:	dac03115 	stw	r11,196(sp)
    8e98:	003f3806 	br	8b7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b7c>
    8e9c:	94802014 	ori	r18,r18,128
    8ea0:	bc400007 	ldb	r17,0(r23)
    8ea4:	003f3406 	br	8b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b78>
    8ea8:	18c03fcc 	andi	r3,r3,255
    8eac:	1807471e 	bne	r3,zero,abcc <___svfprintf_internal_r+0x21a4>
    8eb0:	9080020c 	andi	r2,r18,8
    8eb4:	10047d26 	beq	r2,zero,a0ac <___svfprintf_internal_r+0x1684>
    8eb8:	d8c02d17 	ldw	r3,180(sp)
    8ebc:	d9002d17 	ldw	r4,180(sp)
    8ec0:	d9402d17 	ldw	r5,180(sp)
    8ec4:	18c00017 	ldw	r3,0(r3)
    8ec8:	21000117 	ldw	r4,4(r4)
    8ecc:	29400204 	addi	r5,r5,8
    8ed0:	d8c03615 	stw	r3,216(sp)
    8ed4:	d9003715 	stw	r4,220(sp)
    8ed8:	d9402d15 	stw	r5,180(sp)
    8edc:	d9003617 	ldw	r4,216(sp)
    8ee0:	d9403717 	ldw	r5,220(sp)
    8ee4:	da003e15 	stw	r8,248(sp)
    8ee8:	04000044 	movi	r16,1
    8eec:	00113a40 	call	113a4 <__fpclassifyd>
    8ef0:	da003e17 	ldw	r8,248(sp)
    8ef4:	14044b1e 	bne	r2,r16,a024 <___svfprintf_internal_r+0x15fc>
    8ef8:	d9003617 	ldw	r4,216(sp)
    8efc:	d9403717 	ldw	r5,220(sp)
    8f00:	000d883a 	mov	r6,zero
    8f04:	000f883a 	mov	r7,zero
    8f08:	0015f8c0 	call	15f8c <__ledf2>
    8f0c:	da003e17 	ldw	r8,248(sp)
    8f10:	1005f316 	blt	r2,zero,a6e0 <___svfprintf_internal_r+0x1cb8>
    8f14:	df002783 	ldbu	fp,158(sp)
    8f18:	008011c4 	movi	r2,71
    8f1c:	1445590e 	bge	r2,r17,a484 <___svfprintf_internal_r+0x1a5c>
    8f20:	040000b4 	movhi	r16,2
    8f24:	8412cf04 	addi	r16,r16,19260
    8f28:	00c000c4 	movi	r3,3
    8f2c:	00bfdfc4 	movi	r2,-129
    8f30:	d8c02a15 	stw	r3,168(sp)
    8f34:	90a4703a 	and	r18,r18,r2
    8f38:	d8c02e15 	stw	r3,184(sp)
    8f3c:	d8002915 	stw	zero,164(sp)
    8f40:	d8003215 	stw	zero,200(sp)
    8f44:	00006606 	br	90e0 <___svfprintf_internal_r+0x6b8>
    8f48:	94800214 	ori	r18,r18,8
    8f4c:	bc400007 	ldb	r17,0(r23)
    8f50:	003f0906 	br	8b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b78>
    8f54:	18c03fcc 	andi	r3,r3,255
    8f58:	1807181e 	bne	r3,zero,abbc <___svfprintf_internal_r+0x2194>
    8f5c:	94800414 	ori	r18,r18,16
    8f60:	9080080c 	andi	r2,r18,32
    8f64:	10039626 	beq	r2,zero,9dc0 <___svfprintf_internal_r+0x1398>
    8f68:	d9402d17 	ldw	r5,180(sp)
    8f6c:	28800117 	ldw	r2,4(r5)
    8f70:	2d000017 	ldw	r20,0(r5)
    8f74:	29400204 	addi	r5,r5,8
    8f78:	d9402d15 	stw	r5,180(sp)
    8f7c:	102d883a 	mov	r22,r2
    8f80:	10039816 	blt	r2,zero,9de4 <___svfprintf_internal_r+0x13bc>
    8f84:	d9402917 	ldw	r5,164(sp)
    8f88:	df002783 	ldbu	fp,158(sp)
    8f8c:	2803ab16 	blt	r5,zero,9e3c <___svfprintf_internal_r+0x1414>
    8f90:	00ffdfc4 	movi	r3,-129
    8f94:	a584b03a 	or	r2,r20,r22
    8f98:	90e4703a 	and	r18,r18,r3
    8f9c:	10014a26 	beq	r2,zero,94c8 <___svfprintf_internal_r+0xaa0>
    8fa0:	b0034b26 	beq	r22,zero,9cd0 <___svfprintf_internal_r+0x12a8>
    8fa4:	dc402a15 	stw	r17,168(sp)
    8fa8:	dc001e04 	addi	r16,sp,120
    8fac:	b023883a 	mov	r17,r22
    8fb0:	402d883a 	mov	r22,r8
    8fb4:	a009883a 	mov	r4,r20
    8fb8:	880b883a 	mov	r5,r17
    8fbc:	01800284 	movi	r6,10
    8fc0:	000f883a 	mov	r7,zero
    8fc4:	0014e540 	call	14e54 <__umoddi3>
    8fc8:	10800c04 	addi	r2,r2,48
    8fcc:	843fffc4 	addi	r16,r16,-1
    8fd0:	a009883a 	mov	r4,r20
    8fd4:	880b883a 	mov	r5,r17
    8fd8:	80800005 	stb	r2,0(r16)
    8fdc:	01800284 	movi	r6,10
    8fe0:	000f883a 	mov	r7,zero
    8fe4:	00148dc0 	call	148dc <__udivdi3>
    8fe8:	1029883a 	mov	r20,r2
    8fec:	10c4b03a 	or	r2,r2,r3
    8ff0:	1823883a 	mov	r17,r3
    8ff4:	103fef1e 	bne	r2,zero,8fb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fb4>
    8ff8:	d8c02817 	ldw	r3,160(sp)
    8ffc:	dc402a17 	ldw	r17,168(sp)
    9000:	b011883a 	mov	r8,r22
    9004:	1c07c83a 	sub	r3,r3,r16
    9008:	d8c02e15 	stw	r3,184(sp)
    900c:	00002e06 	br	90c8 <___svfprintf_internal_r+0x6a0>
    9010:	18c03fcc 	andi	r3,r3,255
    9014:	1806e71e 	bne	r3,zero,abb4 <___svfprintf_internal_r+0x218c>
    9018:	94800414 	ori	r18,r18,16
    901c:	9080080c 	andi	r2,r18,32
    9020:	1002d426 	beq	r2,zero,9b74 <___svfprintf_internal_r+0x114c>
    9024:	d9402d17 	ldw	r5,180(sp)
    9028:	d8c02917 	ldw	r3,164(sp)
    902c:	d8002785 	stb	zero,158(sp)
    9030:	28800204 	addi	r2,r5,8
    9034:	2d000017 	ldw	r20,0(r5)
    9038:	2d800117 	ldw	r22,4(r5)
    903c:	18041516 	blt	r3,zero,a094 <___svfprintf_internal_r+0x166c>
    9040:	013fdfc4 	movi	r4,-129
    9044:	a586b03a 	or	r3,r20,r22
    9048:	d8802d15 	stw	r2,180(sp)
    904c:	9124703a 	and	r18,r18,r4
    9050:	1802d51e 	bne	r3,zero,9ba8 <___svfprintf_internal_r+0x1180>
    9054:	d9402917 	ldw	r5,164(sp)
    9058:	0039883a 	mov	fp,zero
    905c:	2806be26 	beq	r5,zero,ab58 <___svfprintf_internal_r+0x2130>
    9060:	0029883a 	mov	r20,zero
    9064:	002d883a 	mov	r22,zero
    9068:	dc001e04 	addi	r16,sp,120
    906c:	a006d0fa 	srli	r3,r20,3
    9070:	b008977a 	slli	r4,r22,29
    9074:	b02cd0fa 	srli	r22,r22,3
    9078:	a50001cc 	andi	r20,r20,7
    907c:	a0800c04 	addi	r2,r20,48
    9080:	843fffc4 	addi	r16,r16,-1
    9084:	20e8b03a 	or	r20,r4,r3
    9088:	80800005 	stb	r2,0(r16)
    908c:	a586b03a 	or	r3,r20,r22
    9090:	183ff61e 	bne	r3,zero,906c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700906c>
    9094:	90c0004c 	andi	r3,r18,1
    9098:	18013926 	beq	r3,zero,9580 <___svfprintf_internal_r+0xb58>
    909c:	10803fcc 	andi	r2,r2,255
    90a0:	1080201c 	xori	r2,r2,128
    90a4:	10bfe004 	addi	r2,r2,-128
    90a8:	00c00c04 	movi	r3,48
    90ac:	10c13426 	beq	r2,r3,9580 <___svfprintf_internal_r+0xb58>
    90b0:	80ffffc5 	stb	r3,-1(r16)
    90b4:	d8c02817 	ldw	r3,160(sp)
    90b8:	80bfffc4 	addi	r2,r16,-1
    90bc:	1021883a 	mov	r16,r2
    90c0:	1887c83a 	sub	r3,r3,r2
    90c4:	d8c02e15 	stw	r3,184(sp)
    90c8:	d8802e17 	ldw	r2,184(sp)
    90cc:	d9002917 	ldw	r4,164(sp)
    90d0:	1100010e 	bge	r2,r4,90d8 <___svfprintf_internal_r+0x6b0>
    90d4:	2005883a 	mov	r2,r4
    90d8:	d8802a15 	stw	r2,168(sp)
    90dc:	d8003215 	stw	zero,200(sp)
    90e0:	e7003fcc 	andi	fp,fp,255
    90e4:	e700201c 	xori	fp,fp,128
    90e8:	e73fe004 	addi	fp,fp,-128
    90ec:	e0000326 	beq	fp,zero,90fc <___svfprintf_internal_r+0x6d4>
    90f0:	d8c02a17 	ldw	r3,168(sp)
    90f4:	18c00044 	addi	r3,r3,1
    90f8:	d8c02a15 	stw	r3,168(sp)
    90fc:	90c0008c 	andi	r3,r18,2
    9100:	d8c02b15 	stw	r3,172(sp)
    9104:	18000326 	beq	r3,zero,9114 <___svfprintf_internal_r+0x6ec>
    9108:	d8c02a17 	ldw	r3,168(sp)
    910c:	18c00084 	addi	r3,r3,2
    9110:	d8c02a15 	stw	r3,168(sp)
    9114:	90c0210c 	andi	r3,r18,132
    9118:	d8c03015 	stw	r3,192(sp)
    911c:	1801a11e 	bne	r3,zero,97a4 <___svfprintf_internal_r+0xd7c>
    9120:	d9003117 	ldw	r4,196(sp)
    9124:	d8c02a17 	ldw	r3,168(sp)
    9128:	20e9c83a 	sub	r20,r4,r3
    912c:	05019d0e 	bge	zero,r20,97a4 <___svfprintf_internal_r+0xd7c>
    9130:	02400404 	movi	r9,16
    9134:	d8c02017 	ldw	r3,128(sp)
    9138:	d8801f17 	ldw	r2,124(sp)
    913c:	4d051b0e 	bge	r9,r20,a5ac <___svfprintf_internal_r+0x1b84>
    9140:	014000b4 	movhi	r5,2
    9144:	2952e284 	addi	r5,r5,19338
    9148:	dc403c15 	stw	r17,240(sp)
    914c:	d9403515 	stw	r5,212(sp)
    9150:	a023883a 	mov	r17,r20
    9154:	482d883a 	mov	r22,r9
    9158:	9029883a 	mov	r20,r18
    915c:	070001c4 	movi	fp,7
    9160:	8025883a 	mov	r18,r16
    9164:	dc002c17 	ldw	r16,176(sp)
    9168:	00000306 	br	9178 <___svfprintf_internal_r+0x750>
    916c:	8c7ffc04 	addi	r17,r17,-16
    9170:	42000204 	addi	r8,r8,8
    9174:	b440130e 	bge	r22,r17,91c4 <___svfprintf_internal_r+0x79c>
    9178:	010000b4 	movhi	r4,2
    917c:	18c00404 	addi	r3,r3,16
    9180:	10800044 	addi	r2,r2,1
    9184:	2112e284 	addi	r4,r4,19338
    9188:	41000015 	stw	r4,0(r8)
    918c:	45800115 	stw	r22,4(r8)
    9190:	d8c02015 	stw	r3,128(sp)
    9194:	d8801f15 	stw	r2,124(sp)
    9198:	e0bff40e 	bge	fp,r2,916c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700916c>
    919c:	d9801e04 	addi	r6,sp,120
    91a0:	800b883a 	mov	r5,r16
    91a4:	9809883a 	mov	r4,r19
    91a8:	00115540 	call	11554 <__ssprint_r>
    91ac:	103f031e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    91b0:	8c7ffc04 	addi	r17,r17,-16
    91b4:	d8c02017 	ldw	r3,128(sp)
    91b8:	d8801f17 	ldw	r2,124(sp)
    91bc:	da000404 	addi	r8,sp,16
    91c0:	b47fed16 	blt	r22,r17,9178 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009178>
    91c4:	9021883a 	mov	r16,r18
    91c8:	a025883a 	mov	r18,r20
    91cc:	8829883a 	mov	r20,r17
    91d0:	dc403c17 	ldw	r17,240(sp)
    91d4:	d9403517 	ldw	r5,212(sp)
    91d8:	a0c7883a 	add	r3,r20,r3
    91dc:	10800044 	addi	r2,r2,1
    91e0:	41400015 	stw	r5,0(r8)
    91e4:	45000115 	stw	r20,4(r8)
    91e8:	d8c02015 	stw	r3,128(sp)
    91ec:	d8801f15 	stw	r2,124(sp)
    91f0:	010001c4 	movi	r4,7
    91f4:	20829f16 	blt	r4,r2,9c74 <___svfprintf_internal_r+0x124c>
    91f8:	df002787 	ldb	fp,158(sp)
    91fc:	42000204 	addi	r8,r8,8
    9200:	e0000c26 	beq	fp,zero,9234 <___svfprintf_internal_r+0x80c>
    9204:	d8801f17 	ldw	r2,124(sp)
    9208:	d9002784 	addi	r4,sp,158
    920c:	18c00044 	addi	r3,r3,1
    9210:	10800044 	addi	r2,r2,1
    9214:	41000015 	stw	r4,0(r8)
    9218:	01000044 	movi	r4,1
    921c:	41000115 	stw	r4,4(r8)
    9220:	d8c02015 	stw	r3,128(sp)
    9224:	d8801f15 	stw	r2,124(sp)
    9228:	010001c4 	movi	r4,7
    922c:	20823816 	blt	r4,r2,9b10 <___svfprintf_internal_r+0x10e8>
    9230:	42000204 	addi	r8,r8,8
    9234:	d8802b17 	ldw	r2,172(sp)
    9238:	10000c26 	beq	r2,zero,926c <___svfprintf_internal_r+0x844>
    923c:	d8801f17 	ldw	r2,124(sp)
    9240:	d9002704 	addi	r4,sp,156
    9244:	18c00084 	addi	r3,r3,2
    9248:	10800044 	addi	r2,r2,1
    924c:	41000015 	stw	r4,0(r8)
    9250:	01000084 	movi	r4,2
    9254:	41000115 	stw	r4,4(r8)
    9258:	d8c02015 	stw	r3,128(sp)
    925c:	d8801f15 	stw	r2,124(sp)
    9260:	010001c4 	movi	r4,7
    9264:	20823216 	blt	r4,r2,9b30 <___svfprintf_internal_r+0x1108>
    9268:	42000204 	addi	r8,r8,8
    926c:	d9003017 	ldw	r4,192(sp)
    9270:	00802004 	movi	r2,128
    9274:	20819726 	beq	r4,r2,98d4 <___svfprintf_internal_r+0xeac>
    9278:	d9402917 	ldw	r5,164(sp)
    927c:	d8802e17 	ldw	r2,184(sp)
    9280:	28adc83a 	sub	r22,r5,r2
    9284:	05802f0e 	bge	zero,r22,9344 <___svfprintf_internal_r+0x91c>
    9288:	07000404 	movi	fp,16
    928c:	d8801f17 	ldw	r2,124(sp)
    9290:	e583c00e 	bge	fp,r22,a194 <___svfprintf_internal_r+0x176c>
    9294:	014000b4 	movhi	r5,2
    9298:	2952de84 	addi	r5,r5,19322
    929c:	dc402915 	stw	r17,164(sp)
    92a0:	d9402b15 	stw	r5,172(sp)
    92a4:	b023883a 	mov	r17,r22
    92a8:	050001c4 	movi	r20,7
    92ac:	902d883a 	mov	r22,r18
    92b0:	8025883a 	mov	r18,r16
    92b4:	dc002c17 	ldw	r16,176(sp)
    92b8:	00000306 	br	92c8 <___svfprintf_internal_r+0x8a0>
    92bc:	8c7ffc04 	addi	r17,r17,-16
    92c0:	42000204 	addi	r8,r8,8
    92c4:	e440110e 	bge	fp,r17,930c <___svfprintf_internal_r+0x8e4>
    92c8:	18c00404 	addi	r3,r3,16
    92cc:	10800044 	addi	r2,r2,1
    92d0:	45400015 	stw	r21,0(r8)
    92d4:	47000115 	stw	fp,4(r8)
    92d8:	d8c02015 	stw	r3,128(sp)
    92dc:	d8801f15 	stw	r2,124(sp)
    92e0:	a0bff60e 	bge	r20,r2,92bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70092bc>
    92e4:	d9801e04 	addi	r6,sp,120
    92e8:	800b883a 	mov	r5,r16
    92ec:	9809883a 	mov	r4,r19
    92f0:	00115540 	call	11554 <__ssprint_r>
    92f4:	103eb11e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    92f8:	8c7ffc04 	addi	r17,r17,-16
    92fc:	d8c02017 	ldw	r3,128(sp)
    9300:	d8801f17 	ldw	r2,124(sp)
    9304:	da000404 	addi	r8,sp,16
    9308:	e47fef16 	blt	fp,r17,92c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70092c8>
    930c:	9021883a 	mov	r16,r18
    9310:	b025883a 	mov	r18,r22
    9314:	882d883a 	mov	r22,r17
    9318:	dc402917 	ldw	r17,164(sp)
    931c:	d9002b17 	ldw	r4,172(sp)
    9320:	1d87883a 	add	r3,r3,r22
    9324:	10800044 	addi	r2,r2,1
    9328:	41000015 	stw	r4,0(r8)
    932c:	45800115 	stw	r22,4(r8)
    9330:	d8c02015 	stw	r3,128(sp)
    9334:	d8801f15 	stw	r2,124(sp)
    9338:	010001c4 	movi	r4,7
    933c:	2081ec16 	blt	r4,r2,9af0 <___svfprintf_internal_r+0x10c8>
    9340:	42000204 	addi	r8,r8,8
    9344:	9080400c 	andi	r2,r18,256
    9348:	1001181e 	bne	r2,zero,97ac <___svfprintf_internal_r+0xd84>
    934c:	d9402e17 	ldw	r5,184(sp)
    9350:	d8801f17 	ldw	r2,124(sp)
    9354:	44000015 	stw	r16,0(r8)
    9358:	1947883a 	add	r3,r3,r5
    935c:	10800044 	addi	r2,r2,1
    9360:	41400115 	stw	r5,4(r8)
    9364:	d8c02015 	stw	r3,128(sp)
    9368:	d8801f15 	stw	r2,124(sp)
    936c:	010001c4 	movi	r4,7
    9370:	2081d116 	blt	r4,r2,9ab8 <___svfprintf_internal_r+0x1090>
    9374:	42000204 	addi	r8,r8,8
    9378:	9480010c 	andi	r18,r18,4
    937c:	90003226 	beq	r18,zero,9448 <___svfprintf_internal_r+0xa20>
    9380:	d9403117 	ldw	r5,196(sp)
    9384:	d8802a17 	ldw	r2,168(sp)
    9388:	28a1c83a 	sub	r16,r5,r2
    938c:	04002e0e 	bge	zero,r16,9448 <___svfprintf_internal_r+0xa20>
    9390:	04400404 	movi	r17,16
    9394:	d8801f17 	ldw	r2,124(sp)
    9398:	8c04b90e 	bge	r17,r16,a680 <___svfprintf_internal_r+0x1c58>
    939c:	014000b4 	movhi	r5,2
    93a0:	2952e284 	addi	r5,r5,19338
    93a4:	d9403515 	stw	r5,212(sp)
    93a8:	048001c4 	movi	r18,7
    93ac:	dd002c17 	ldw	r20,176(sp)
    93b0:	00000306 	br	93c0 <___svfprintf_internal_r+0x998>
    93b4:	843ffc04 	addi	r16,r16,-16
    93b8:	42000204 	addi	r8,r8,8
    93bc:	8c00130e 	bge	r17,r16,940c <___svfprintf_internal_r+0x9e4>
    93c0:	010000b4 	movhi	r4,2
    93c4:	18c00404 	addi	r3,r3,16
    93c8:	10800044 	addi	r2,r2,1
    93cc:	2112e284 	addi	r4,r4,19338
    93d0:	41000015 	stw	r4,0(r8)
    93d4:	44400115 	stw	r17,4(r8)
    93d8:	d8c02015 	stw	r3,128(sp)
    93dc:	d8801f15 	stw	r2,124(sp)
    93e0:	90bff40e 	bge	r18,r2,93b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70093b4>
    93e4:	d9801e04 	addi	r6,sp,120
    93e8:	a00b883a 	mov	r5,r20
    93ec:	9809883a 	mov	r4,r19
    93f0:	00115540 	call	11554 <__ssprint_r>
    93f4:	103e711e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    93f8:	843ffc04 	addi	r16,r16,-16
    93fc:	d8c02017 	ldw	r3,128(sp)
    9400:	d8801f17 	ldw	r2,124(sp)
    9404:	da000404 	addi	r8,sp,16
    9408:	8c3fed16 	blt	r17,r16,93c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70093c0>
    940c:	d9403517 	ldw	r5,212(sp)
    9410:	1c07883a 	add	r3,r3,r16
    9414:	10800044 	addi	r2,r2,1
    9418:	41400015 	stw	r5,0(r8)
    941c:	44000115 	stw	r16,4(r8)
    9420:	d8c02015 	stw	r3,128(sp)
    9424:	d8801f15 	stw	r2,124(sp)
    9428:	010001c4 	movi	r4,7
    942c:	2080060e 	bge	r4,r2,9448 <___svfprintf_internal_r+0xa20>
    9430:	d9402c17 	ldw	r5,176(sp)
    9434:	d9801e04 	addi	r6,sp,120
    9438:	9809883a 	mov	r4,r19
    943c:	00115540 	call	11554 <__ssprint_r>
    9440:	103e5e1e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    9444:	d8c02017 	ldw	r3,128(sp)
    9448:	d8803117 	ldw	r2,196(sp)
    944c:	d9002a17 	ldw	r4,168(sp)
    9450:	1100010e 	bge	r2,r4,9458 <___svfprintf_internal_r+0xa30>
    9454:	2005883a 	mov	r2,r4
    9458:	d9402f17 	ldw	r5,188(sp)
    945c:	288b883a 	add	r5,r5,r2
    9460:	d9402f15 	stw	r5,188(sp)
    9464:	18019c1e 	bne	r3,zero,9ad8 <___svfprintf_internal_r+0x10b0>
    9468:	b8800007 	ldb	r2,0(r23)
    946c:	d8001f15 	stw	zero,124(sp)
    9470:	da000404 	addi	r8,sp,16
    9474:	103d991e 	bne	r2,zero,8adc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008adc>
    9478:	b821883a 	mov	r16,r23
    947c:	003daf06 	br	8b3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b3c>
    9480:	18c03fcc 	andi	r3,r3,255
    9484:	1805c71e 	bne	r3,zero,aba4 <___svfprintf_internal_r+0x217c>
    9488:	94800414 	ori	r18,r18,16
    948c:	9080080c 	andi	r2,r18,32
    9490:	10020126 	beq	r2,zero,9c98 <___svfprintf_internal_r+0x1270>
    9494:	d8802d17 	ldw	r2,180(sp)
    9498:	d9002917 	ldw	r4,164(sp)
    949c:	d8002785 	stb	zero,158(sp)
    94a0:	10c00204 	addi	r3,r2,8
    94a4:	15000017 	ldw	r20,0(r2)
    94a8:	15800117 	ldw	r22,4(r2)
    94ac:	20038e16 	blt	r4,zero,a2e8 <___svfprintf_internal_r+0x18c0>
    94b0:	013fdfc4 	movi	r4,-129
    94b4:	a584b03a 	or	r2,r20,r22
    94b8:	d8c02d15 	stw	r3,180(sp)
    94bc:	9124703a 	and	r18,r18,r4
    94c0:	0039883a 	mov	fp,zero
    94c4:	103eb61e 	bne	r2,zero,8fa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fa0>
    94c8:	d8802917 	ldw	r2,164(sp)
    94cc:	1002c81e 	bne	r2,zero,9ff0 <___svfprintf_internal_r+0x15c8>
    94d0:	d8002915 	stw	zero,164(sp)
    94d4:	d8002e15 	stw	zero,184(sp)
    94d8:	dc001e04 	addi	r16,sp,120
    94dc:	003efa06 	br	90c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090c8>
    94e0:	18c03fcc 	andi	r3,r3,255
    94e4:	1805ad1e 	bne	r3,zero,ab9c <___svfprintf_internal_r+0x2174>
    94e8:	014000b4 	movhi	r5,2
    94ec:	2952d204 	addi	r5,r5,19272
    94f0:	d9403a15 	stw	r5,232(sp)
    94f4:	9080080c 	andi	r2,r18,32
    94f8:	10006126 	beq	r2,zero,9680 <___svfprintf_internal_r+0xc58>
    94fc:	d8802d17 	ldw	r2,180(sp)
    9500:	15000017 	ldw	r20,0(r2)
    9504:	15800117 	ldw	r22,4(r2)
    9508:	10800204 	addi	r2,r2,8
    950c:	d8802d15 	stw	r2,180(sp)
    9510:	9080004c 	andi	r2,r18,1
    9514:	10018e26 	beq	r2,zero,9b50 <___svfprintf_internal_r+0x1128>
    9518:	a584b03a 	or	r2,r20,r22
    951c:	10030926 	beq	r2,zero,a144 <___svfprintf_internal_r+0x171c>
    9520:	d8c02917 	ldw	r3,164(sp)
    9524:	00800c04 	movi	r2,48
    9528:	d8802705 	stb	r2,156(sp)
    952c:	dc402745 	stb	r17,157(sp)
    9530:	d8002785 	stb	zero,158(sp)
    9534:	90800094 	ori	r2,r18,2
    9538:	18048716 	blt	r3,zero,a758 <___svfprintf_internal_r+0x1d30>
    953c:	00bfdfc4 	movi	r2,-129
    9540:	90a4703a 	and	r18,r18,r2
    9544:	94800094 	ori	r18,r18,2
    9548:	0039883a 	mov	fp,zero
    954c:	d9003a17 	ldw	r4,232(sp)
    9550:	dc001e04 	addi	r16,sp,120
    9554:	a08003cc 	andi	r2,r20,15
    9558:	b006973a 	slli	r3,r22,28
    955c:	2085883a 	add	r2,r4,r2
    9560:	a028d13a 	srli	r20,r20,4
    9564:	10800003 	ldbu	r2,0(r2)
    9568:	b02cd13a 	srli	r22,r22,4
    956c:	843fffc4 	addi	r16,r16,-1
    9570:	1d28b03a 	or	r20,r3,r20
    9574:	80800005 	stb	r2,0(r16)
    9578:	a584b03a 	or	r2,r20,r22
    957c:	103ff51e 	bne	r2,zero,9554 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009554>
    9580:	d8c02817 	ldw	r3,160(sp)
    9584:	1c07c83a 	sub	r3,r3,r16
    9588:	d8c02e15 	stw	r3,184(sp)
    958c:	003ece06 	br	90c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090c8>
    9590:	d8c02d17 	ldw	r3,180(sp)
    9594:	d9002d17 	ldw	r4,180(sp)
    9598:	d8002785 	stb	zero,158(sp)
    959c:	18800017 	ldw	r2,0(r3)
    95a0:	21000104 	addi	r4,r4,4
    95a4:	00c00044 	movi	r3,1
    95a8:	d8c02a15 	stw	r3,168(sp)
    95ac:	d8801405 	stb	r2,80(sp)
    95b0:	d9002d15 	stw	r4,180(sp)
    95b4:	d8c02e15 	stw	r3,184(sp)
    95b8:	d8002915 	stw	zero,164(sp)
    95bc:	d8003215 	stw	zero,200(sp)
    95c0:	dc001404 	addi	r16,sp,80
    95c4:	0039883a 	mov	fp,zero
    95c8:	003ecc06 	br	90fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090fc>
    95cc:	18c03fcc 	andi	r3,r3,255
    95d0:	183e9226 	beq	r3,zero,901c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700901c>
    95d4:	d9c02785 	stb	r7,158(sp)
    95d8:	003e9006 	br	901c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700901c>
    95dc:	00c00044 	movi	r3,1
    95e0:	01c00ac4 	movi	r7,43
    95e4:	bc400007 	ldb	r17,0(r23)
    95e8:	003d6306 	br	8b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b78>
    95ec:	94800814 	ori	r18,r18,32
    95f0:	bc400007 	ldb	r17,0(r23)
    95f4:	003d6006 	br	8b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b78>
    95f8:	d8c02d17 	ldw	r3,180(sp)
    95fc:	d8002785 	stb	zero,158(sp)
    9600:	1c000017 	ldw	r16,0(r3)
    9604:	1d000104 	addi	r20,r3,4
    9608:	80040f26 	beq	r16,zero,a648 <___svfprintf_internal_r+0x1c20>
    960c:	d9002917 	ldw	r4,164(sp)
    9610:	2003dc16 	blt	r4,zero,a584 <___svfprintf_internal_r+0x1b5c>
    9614:	200d883a 	mov	r6,r4
    9618:	000b883a 	mov	r5,zero
    961c:	8009883a 	mov	r4,r16
    9620:	da003e15 	stw	r8,248(sp)
    9624:	000fc040 	call	fc04 <memchr>
    9628:	da003e17 	ldw	r8,248(sp)
    962c:	10045826 	beq	r2,zero,a790 <___svfprintf_internal_r+0x1d68>
    9630:	1405c83a 	sub	r2,r2,r16
    9634:	d8802e15 	stw	r2,184(sp)
    9638:	1003d816 	blt	r2,zero,a59c <___svfprintf_internal_r+0x1b74>
    963c:	df002783 	ldbu	fp,158(sp)
    9640:	d8802a15 	stw	r2,168(sp)
    9644:	dd002d15 	stw	r20,180(sp)
    9648:	d8002915 	stw	zero,164(sp)
    964c:	d8003215 	stw	zero,200(sp)
    9650:	003ea306 	br	90e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090e0>
    9654:	18c03fcc 	andi	r3,r3,255
    9658:	183f8c26 	beq	r3,zero,948c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700948c>
    965c:	d9c02785 	stb	r7,158(sp)
    9660:	003f8a06 	br	948c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700948c>
    9664:	18c03fcc 	andi	r3,r3,255
    9668:	1805631e 	bne	r3,zero,abf8 <___svfprintf_internal_r+0x21d0>
    966c:	014000b4 	movhi	r5,2
    9670:	2952d704 	addi	r5,r5,19292
    9674:	d9403a15 	stw	r5,232(sp)
    9678:	9080080c 	andi	r2,r18,32
    967c:	103f9f1e 	bne	r2,zero,94fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70094fc>
    9680:	9080040c 	andi	r2,r18,16
    9684:	10029c26 	beq	r2,zero,a0f8 <___svfprintf_internal_r+0x16d0>
    9688:	d8c02d17 	ldw	r3,180(sp)
    968c:	002d883a 	mov	r22,zero
    9690:	1d000017 	ldw	r20,0(r3)
    9694:	18c00104 	addi	r3,r3,4
    9698:	d8c02d15 	stw	r3,180(sp)
    969c:	003f9c06 	br	9510 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009510>
    96a0:	94800054 	ori	r18,r18,1
    96a4:	bc400007 	ldb	r17,0(r23)
    96a8:	003d3306 	br	8b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b78>
    96ac:	38803fcc 	andi	r2,r7,255
    96b0:	1080201c 	xori	r2,r2,128
    96b4:	10bfe004 	addi	r2,r2,-128
    96b8:	1002971e 	bne	r2,zero,a118 <___svfprintf_internal_r+0x16f0>
    96bc:	00c00044 	movi	r3,1
    96c0:	01c00804 	movi	r7,32
    96c4:	bc400007 	ldb	r17,0(r23)
    96c8:	003d2b06 	br	8b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b78>
    96cc:	18c03fcc 	andi	r3,r3,255
    96d0:	183e2326 	beq	r3,zero,8f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f60>
    96d4:	d9c02785 	stb	r7,158(sp)
    96d8:	003e2106 	br	8f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f60>
    96dc:	bc400007 	ldb	r17,0(r23)
    96e0:	8a430426 	beq	r17,r9,a2f4 <___svfprintf_internal_r+0x18cc>
    96e4:	94800414 	ori	r18,r18,16
    96e8:	003d2306 	br	8b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b78>
    96ec:	18c03fcc 	andi	r3,r3,255
    96f0:	18053f1e 	bne	r3,zero,abf0 <___svfprintf_internal_r+0x21c8>
    96f4:	9080080c 	andi	r2,r18,32
    96f8:	10028926 	beq	r2,zero,a120 <___svfprintf_internal_r+0x16f8>
    96fc:	d9402d17 	ldw	r5,180(sp)
    9700:	d9002f17 	ldw	r4,188(sp)
    9704:	28800017 	ldw	r2,0(r5)
    9708:	2007d7fa 	srai	r3,r4,31
    970c:	29400104 	addi	r5,r5,4
    9710:	d9402d15 	stw	r5,180(sp)
    9714:	11000015 	stw	r4,0(r2)
    9718:	10c00115 	stw	r3,4(r2)
    971c:	003ced06 	br	8ad4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ad4>
    9720:	94801014 	ori	r18,r18,64
    9724:	bc400007 	ldb	r17,0(r23)
    9728:	003d1306 	br	8b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b78>
    972c:	010000b4 	movhi	r4,2
    9730:	2112d704 	addi	r4,r4,19292
    9734:	0039883a 	mov	fp,zero
    9738:	d9003a15 	stw	r4,232(sp)
    973c:	04401e04 	movi	r17,120
    9740:	003f8206 	br	954c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700954c>
    9744:	18c03fcc 	andi	r3,r3,255
    9748:	1805221e 	bne	r3,zero,abd4 <___svfprintf_internal_r+0x21ac>
    974c:	883d9526 	beq	r17,zero,8da4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008da4>
    9750:	00c00044 	movi	r3,1
    9754:	d8c02a15 	stw	r3,168(sp)
    9758:	dc401405 	stb	r17,80(sp)
    975c:	d8002785 	stb	zero,158(sp)
    9760:	003f9406 	br	95b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70095b4>
    9764:	010000b4 	movhi	r4,2
    9768:	2112d704 	addi	r4,r4,19292
    976c:	d9003a15 	stw	r4,232(sp)
    9770:	d8c02d15 	stw	r3,180(sp)
    9774:	1025883a 	mov	r18,r2
    9778:	04401e04 	movi	r17,120
    977c:	a584b03a 	or	r2,r20,r22
    9780:	1000fa1e 	bne	r2,zero,9b6c <___svfprintf_internal_r+0x1144>
    9784:	0039883a 	mov	fp,zero
    9788:	00800084 	movi	r2,2
    978c:	10803fcc 	andi	r2,r2,255
    9790:	00c00044 	movi	r3,1
    9794:	10c21626 	beq	r2,r3,9ff0 <___svfprintf_internal_r+0x15c8>
    9798:	00c00084 	movi	r3,2
    979c:	10fe301e 	bne	r2,r3,9060 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009060>
    97a0:	003d7606 	br	8d7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d7c>
    97a4:	d8c02017 	ldw	r3,128(sp)
    97a8:	003e9506 	br	9200 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009200>
    97ac:	00801944 	movi	r2,101
    97b0:	14407c0e 	bge	r2,r17,99a4 <___svfprintf_internal_r+0xf7c>
    97b4:	d9003617 	ldw	r4,216(sp)
    97b8:	d9403717 	ldw	r5,220(sp)
    97bc:	000d883a 	mov	r6,zero
    97c0:	000f883a 	mov	r7,zero
    97c4:	d8c03d15 	stw	r3,244(sp)
    97c8:	da003e15 	stw	r8,248(sp)
    97cc:	0015e280 	call	15e28 <__eqdf2>
    97d0:	d8c03d17 	ldw	r3,244(sp)
    97d4:	da003e17 	ldw	r8,248(sp)
    97d8:	1000f51e 	bne	r2,zero,9bb0 <___svfprintf_internal_r+0x1188>
    97dc:	d8801f17 	ldw	r2,124(sp)
    97e0:	010000b4 	movhi	r4,2
    97e4:	2112de04 	addi	r4,r4,19320
    97e8:	18c00044 	addi	r3,r3,1
    97ec:	10800044 	addi	r2,r2,1
    97f0:	41000015 	stw	r4,0(r8)
    97f4:	01000044 	movi	r4,1
    97f8:	41000115 	stw	r4,4(r8)
    97fc:	d8c02015 	stw	r3,128(sp)
    9800:	d8801f15 	stw	r2,124(sp)
    9804:	010001c4 	movi	r4,7
    9808:	20826616 	blt	r4,r2,a1a4 <___svfprintf_internal_r+0x177c>
    980c:	42000204 	addi	r8,r8,8
    9810:	d8802617 	ldw	r2,152(sp)
    9814:	d9403317 	ldw	r5,204(sp)
    9818:	11400216 	blt	r2,r5,9824 <___svfprintf_internal_r+0xdfc>
    981c:	9080004c 	andi	r2,r18,1
    9820:	103ed526 	beq	r2,zero,9378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009378>
    9824:	d8803817 	ldw	r2,224(sp)
    9828:	d9003417 	ldw	r4,208(sp)
    982c:	d9403817 	ldw	r5,224(sp)
    9830:	1887883a 	add	r3,r3,r2
    9834:	d8801f17 	ldw	r2,124(sp)
    9838:	41000015 	stw	r4,0(r8)
    983c:	41400115 	stw	r5,4(r8)
    9840:	10800044 	addi	r2,r2,1
    9844:	d8c02015 	stw	r3,128(sp)
    9848:	d8801f15 	stw	r2,124(sp)
    984c:	010001c4 	movi	r4,7
    9850:	2082af16 	blt	r4,r2,a310 <___svfprintf_internal_r+0x18e8>
    9854:	42000204 	addi	r8,r8,8
    9858:	d8803317 	ldw	r2,204(sp)
    985c:	143fffc4 	addi	r16,r2,-1
    9860:	043ec50e 	bge	zero,r16,9378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009378>
    9864:	04400404 	movi	r17,16
    9868:	d8801f17 	ldw	r2,124(sp)
    986c:	8c00860e 	bge	r17,r16,9a88 <___svfprintf_internal_r+0x1060>
    9870:	014000b4 	movhi	r5,2
    9874:	2952de84 	addi	r5,r5,19322
    9878:	d9402b15 	stw	r5,172(sp)
    987c:	058001c4 	movi	r22,7
    9880:	dd002c17 	ldw	r20,176(sp)
    9884:	00000306 	br	9894 <___svfprintf_internal_r+0xe6c>
    9888:	42000204 	addi	r8,r8,8
    988c:	843ffc04 	addi	r16,r16,-16
    9890:	8c00800e 	bge	r17,r16,9a94 <___svfprintf_internal_r+0x106c>
    9894:	18c00404 	addi	r3,r3,16
    9898:	10800044 	addi	r2,r2,1
    989c:	45400015 	stw	r21,0(r8)
    98a0:	44400115 	stw	r17,4(r8)
    98a4:	d8c02015 	stw	r3,128(sp)
    98a8:	d8801f15 	stw	r2,124(sp)
    98ac:	b0bff60e 	bge	r22,r2,9888 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009888>
    98b0:	d9801e04 	addi	r6,sp,120
    98b4:	a00b883a 	mov	r5,r20
    98b8:	9809883a 	mov	r4,r19
    98bc:	00115540 	call	11554 <__ssprint_r>
    98c0:	103d3e1e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    98c4:	d8c02017 	ldw	r3,128(sp)
    98c8:	d8801f17 	ldw	r2,124(sp)
    98cc:	da000404 	addi	r8,sp,16
    98d0:	003fee06 	br	988c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700988c>
    98d4:	d9403117 	ldw	r5,196(sp)
    98d8:	d8802a17 	ldw	r2,168(sp)
    98dc:	28adc83a 	sub	r22,r5,r2
    98e0:	05be650e 	bge	zero,r22,9278 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009278>
    98e4:	07000404 	movi	fp,16
    98e8:	d8801f17 	ldw	r2,124(sp)
    98ec:	e583a20e 	bge	fp,r22,a778 <___svfprintf_internal_r+0x1d50>
    98f0:	014000b4 	movhi	r5,2
    98f4:	2952de84 	addi	r5,r5,19322
    98f8:	dc403015 	stw	r17,192(sp)
    98fc:	d9402b15 	stw	r5,172(sp)
    9900:	b023883a 	mov	r17,r22
    9904:	050001c4 	movi	r20,7
    9908:	902d883a 	mov	r22,r18
    990c:	8025883a 	mov	r18,r16
    9910:	dc002c17 	ldw	r16,176(sp)
    9914:	00000306 	br	9924 <___svfprintf_internal_r+0xefc>
    9918:	8c7ffc04 	addi	r17,r17,-16
    991c:	42000204 	addi	r8,r8,8
    9920:	e440110e 	bge	fp,r17,9968 <___svfprintf_internal_r+0xf40>
    9924:	18c00404 	addi	r3,r3,16
    9928:	10800044 	addi	r2,r2,1
    992c:	45400015 	stw	r21,0(r8)
    9930:	47000115 	stw	fp,4(r8)
    9934:	d8c02015 	stw	r3,128(sp)
    9938:	d8801f15 	stw	r2,124(sp)
    993c:	a0bff60e 	bge	r20,r2,9918 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009918>
    9940:	d9801e04 	addi	r6,sp,120
    9944:	800b883a 	mov	r5,r16
    9948:	9809883a 	mov	r4,r19
    994c:	00115540 	call	11554 <__ssprint_r>
    9950:	103d1a1e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    9954:	8c7ffc04 	addi	r17,r17,-16
    9958:	d8c02017 	ldw	r3,128(sp)
    995c:	d8801f17 	ldw	r2,124(sp)
    9960:	da000404 	addi	r8,sp,16
    9964:	e47fef16 	blt	fp,r17,9924 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009924>
    9968:	9021883a 	mov	r16,r18
    996c:	b025883a 	mov	r18,r22
    9970:	882d883a 	mov	r22,r17
    9974:	dc403017 	ldw	r17,192(sp)
    9978:	d9002b17 	ldw	r4,172(sp)
    997c:	1d87883a 	add	r3,r3,r22
    9980:	10800044 	addi	r2,r2,1
    9984:	41000015 	stw	r4,0(r8)
    9988:	45800115 	stw	r22,4(r8)
    998c:	d8c02015 	stw	r3,128(sp)
    9990:	d8801f15 	stw	r2,124(sp)
    9994:	010001c4 	movi	r4,7
    9998:	20819a16 	blt	r4,r2,a004 <___svfprintf_internal_r+0x15dc>
    999c:	42000204 	addi	r8,r8,8
    99a0:	003e3506 	br	9278 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009278>
    99a4:	d9403317 	ldw	r5,204(sp)
    99a8:	00800044 	movi	r2,1
    99ac:	18c00044 	addi	r3,r3,1
    99b0:	1141710e 	bge	r2,r5,9f78 <___svfprintf_internal_r+0x1550>
    99b4:	dc401f17 	ldw	r17,124(sp)
    99b8:	00800044 	movi	r2,1
    99bc:	40800115 	stw	r2,4(r8)
    99c0:	8c400044 	addi	r17,r17,1
    99c4:	44000015 	stw	r16,0(r8)
    99c8:	d8c02015 	stw	r3,128(sp)
    99cc:	dc401f15 	stw	r17,124(sp)
    99d0:	008001c4 	movi	r2,7
    99d4:	14417416 	blt	r2,r17,9fa8 <___svfprintf_internal_r+0x1580>
    99d8:	42000204 	addi	r8,r8,8
    99dc:	d8803817 	ldw	r2,224(sp)
    99e0:	d9003417 	ldw	r4,208(sp)
    99e4:	8c400044 	addi	r17,r17,1
    99e8:	10c7883a 	add	r3,r2,r3
    99ec:	40800115 	stw	r2,4(r8)
    99f0:	41000015 	stw	r4,0(r8)
    99f4:	d8c02015 	stw	r3,128(sp)
    99f8:	dc401f15 	stw	r17,124(sp)
    99fc:	008001c4 	movi	r2,7
    9a00:	14417216 	blt	r2,r17,9fcc <___svfprintf_internal_r+0x15a4>
    9a04:	45800204 	addi	r22,r8,8
    9a08:	d9003617 	ldw	r4,216(sp)
    9a0c:	d9403717 	ldw	r5,220(sp)
    9a10:	000d883a 	mov	r6,zero
    9a14:	000f883a 	mov	r7,zero
    9a18:	d8c03d15 	stw	r3,244(sp)
    9a1c:	0015e280 	call	15e28 <__eqdf2>
    9a20:	d8c03d17 	ldw	r3,244(sp)
    9a24:	1000b326 	beq	r2,zero,9cf4 <___svfprintf_internal_r+0x12cc>
    9a28:	d9403317 	ldw	r5,204(sp)
    9a2c:	84000044 	addi	r16,r16,1
    9a30:	8c400044 	addi	r17,r17,1
    9a34:	28bfffc4 	addi	r2,r5,-1
    9a38:	1887883a 	add	r3,r3,r2
    9a3c:	b0800115 	stw	r2,4(r22)
    9a40:	b4000015 	stw	r16,0(r22)
    9a44:	d8c02015 	stw	r3,128(sp)
    9a48:	dc401f15 	stw	r17,124(sp)
    9a4c:	008001c4 	movi	r2,7
    9a50:	1440d216 	blt	r2,r17,9d9c <___svfprintf_internal_r+0x1374>
    9a54:	b5800204 	addi	r22,r22,8
    9a58:	d9003b17 	ldw	r4,236(sp)
    9a5c:	df0022c4 	addi	fp,sp,139
    9a60:	8c400044 	addi	r17,r17,1
    9a64:	20c7883a 	add	r3,r4,r3
    9a68:	b7000015 	stw	fp,0(r22)
    9a6c:	b1000115 	stw	r4,4(r22)
    9a70:	d8c02015 	stw	r3,128(sp)
    9a74:	dc401f15 	stw	r17,124(sp)
    9a78:	008001c4 	movi	r2,7
    9a7c:	14400e16 	blt	r2,r17,9ab8 <___svfprintf_internal_r+0x1090>
    9a80:	b2000204 	addi	r8,r22,8
    9a84:	003e3c06 	br	9378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009378>
    9a88:	010000b4 	movhi	r4,2
    9a8c:	2112de84 	addi	r4,r4,19322
    9a90:	d9002b15 	stw	r4,172(sp)
    9a94:	d9002b17 	ldw	r4,172(sp)
    9a98:	1c07883a 	add	r3,r3,r16
    9a9c:	44000115 	stw	r16,4(r8)
    9aa0:	41000015 	stw	r4,0(r8)
    9aa4:	10800044 	addi	r2,r2,1
    9aa8:	d8c02015 	stw	r3,128(sp)
    9aac:	d8801f15 	stw	r2,124(sp)
    9ab0:	010001c4 	movi	r4,7
    9ab4:	20be2f0e 	bge	r4,r2,9374 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009374>
    9ab8:	d9402c17 	ldw	r5,176(sp)
    9abc:	d9801e04 	addi	r6,sp,120
    9ac0:	9809883a 	mov	r4,r19
    9ac4:	00115540 	call	11554 <__ssprint_r>
    9ac8:	103cbc1e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    9acc:	d8c02017 	ldw	r3,128(sp)
    9ad0:	da000404 	addi	r8,sp,16
    9ad4:	003e2806 	br	9378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009378>
    9ad8:	d9402c17 	ldw	r5,176(sp)
    9adc:	d9801e04 	addi	r6,sp,120
    9ae0:	9809883a 	mov	r4,r19
    9ae4:	00115540 	call	11554 <__ssprint_r>
    9ae8:	103e5f26 	beq	r2,zero,9468 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009468>
    9aec:	003cb306 	br	8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    9af0:	d9402c17 	ldw	r5,176(sp)
    9af4:	d9801e04 	addi	r6,sp,120
    9af8:	9809883a 	mov	r4,r19
    9afc:	00115540 	call	11554 <__ssprint_r>
    9b00:	103cae1e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    9b04:	d8c02017 	ldw	r3,128(sp)
    9b08:	da000404 	addi	r8,sp,16
    9b0c:	003e0d06 	br	9344 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009344>
    9b10:	d9402c17 	ldw	r5,176(sp)
    9b14:	d9801e04 	addi	r6,sp,120
    9b18:	9809883a 	mov	r4,r19
    9b1c:	00115540 	call	11554 <__ssprint_r>
    9b20:	103ca61e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    9b24:	d8c02017 	ldw	r3,128(sp)
    9b28:	da000404 	addi	r8,sp,16
    9b2c:	003dc106 	br	9234 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009234>
    9b30:	d9402c17 	ldw	r5,176(sp)
    9b34:	d9801e04 	addi	r6,sp,120
    9b38:	9809883a 	mov	r4,r19
    9b3c:	00115540 	call	11554 <__ssprint_r>
    9b40:	103c9e1e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    9b44:	d8c02017 	ldw	r3,128(sp)
    9b48:	da000404 	addi	r8,sp,16
    9b4c:	003dc706 	br	926c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700926c>
    9b50:	d8802917 	ldw	r2,164(sp)
    9b54:	d8002785 	stb	zero,158(sp)
    9b58:	103f0816 	blt	r2,zero,977c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700977c>
    9b5c:	00ffdfc4 	movi	r3,-129
    9b60:	a584b03a 	or	r2,r20,r22
    9b64:	90e4703a 	and	r18,r18,r3
    9b68:	103c8126 	beq	r2,zero,8d70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d70>
    9b6c:	0039883a 	mov	fp,zero
    9b70:	003e7606 	br	954c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700954c>
    9b74:	9080040c 	andi	r2,r18,16
    9b78:	10013d26 	beq	r2,zero,a070 <___svfprintf_internal_r+0x1648>
    9b7c:	d9002d17 	ldw	r4,180(sp)
    9b80:	d9402917 	ldw	r5,164(sp)
    9b84:	d8002785 	stb	zero,158(sp)
    9b88:	20800104 	addi	r2,r4,4
    9b8c:	25000017 	ldw	r20,0(r4)
    9b90:	002d883a 	mov	r22,zero
    9b94:	28013f16 	blt	r5,zero,a094 <___svfprintf_internal_r+0x166c>
    9b98:	00ffdfc4 	movi	r3,-129
    9b9c:	d8802d15 	stw	r2,180(sp)
    9ba0:	90e4703a 	and	r18,r18,r3
    9ba4:	a03d2b26 	beq	r20,zero,9054 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009054>
    9ba8:	0039883a 	mov	fp,zero
    9bac:	003d2e06 	br	9068 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009068>
    9bb0:	dc402617 	ldw	r17,152(sp)
    9bb4:	0441830e 	bge	zero,r17,a1c4 <___svfprintf_internal_r+0x179c>
    9bb8:	dc403217 	ldw	r17,200(sp)
    9bbc:	d8803317 	ldw	r2,204(sp)
    9bc0:	1440010e 	bge	r2,r17,9bc8 <___svfprintf_internal_r+0x11a0>
    9bc4:	1023883a 	mov	r17,r2
    9bc8:	04400a0e 	bge	zero,r17,9bf4 <___svfprintf_internal_r+0x11cc>
    9bcc:	d8801f17 	ldw	r2,124(sp)
    9bd0:	1c47883a 	add	r3,r3,r17
    9bd4:	44000015 	stw	r16,0(r8)
    9bd8:	10800044 	addi	r2,r2,1
    9bdc:	44400115 	stw	r17,4(r8)
    9be0:	d8c02015 	stw	r3,128(sp)
    9be4:	d8801f15 	stw	r2,124(sp)
    9be8:	010001c4 	movi	r4,7
    9bec:	20827516 	blt	r4,r2,a5c4 <___svfprintf_internal_r+0x1b9c>
    9bf0:	42000204 	addi	r8,r8,8
    9bf4:	88027b16 	blt	r17,zero,a5e4 <___svfprintf_internal_r+0x1bbc>
    9bf8:	d9003217 	ldw	r4,200(sp)
    9bfc:	2463c83a 	sub	r17,r4,r17
    9c00:	0440990e 	bge	zero,r17,9e68 <___svfprintf_internal_r+0x1440>
    9c04:	05800404 	movi	r22,16
    9c08:	d8801f17 	ldw	r2,124(sp)
    9c0c:	b441530e 	bge	r22,r17,a15c <___svfprintf_internal_r+0x1734>
    9c10:	010000b4 	movhi	r4,2
    9c14:	2112de84 	addi	r4,r4,19322
    9c18:	d9002b15 	stw	r4,172(sp)
    9c1c:	070001c4 	movi	fp,7
    9c20:	dd002c17 	ldw	r20,176(sp)
    9c24:	00000306 	br	9c34 <___svfprintf_internal_r+0x120c>
    9c28:	42000204 	addi	r8,r8,8
    9c2c:	8c7ffc04 	addi	r17,r17,-16
    9c30:	b4414d0e 	bge	r22,r17,a168 <___svfprintf_internal_r+0x1740>
    9c34:	18c00404 	addi	r3,r3,16
    9c38:	10800044 	addi	r2,r2,1
    9c3c:	45400015 	stw	r21,0(r8)
    9c40:	45800115 	stw	r22,4(r8)
    9c44:	d8c02015 	stw	r3,128(sp)
    9c48:	d8801f15 	stw	r2,124(sp)
    9c4c:	e0bff60e 	bge	fp,r2,9c28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009c28>
    9c50:	d9801e04 	addi	r6,sp,120
    9c54:	a00b883a 	mov	r5,r20
    9c58:	9809883a 	mov	r4,r19
    9c5c:	00115540 	call	11554 <__ssprint_r>
    9c60:	103c561e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    9c64:	d8c02017 	ldw	r3,128(sp)
    9c68:	d8801f17 	ldw	r2,124(sp)
    9c6c:	da000404 	addi	r8,sp,16
    9c70:	003fee06 	br	9c2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009c2c>
    9c74:	d9402c17 	ldw	r5,176(sp)
    9c78:	d9801e04 	addi	r6,sp,120
    9c7c:	9809883a 	mov	r4,r19
    9c80:	00115540 	call	11554 <__ssprint_r>
    9c84:	103c4d1e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    9c88:	d8c02017 	ldw	r3,128(sp)
    9c8c:	df002787 	ldb	fp,158(sp)
    9c90:	da000404 	addi	r8,sp,16
    9c94:	003d5a06 	br	9200 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009200>
    9c98:	9080040c 	andi	r2,r18,16
    9c9c:	10005c26 	beq	r2,zero,9e10 <___svfprintf_internal_r+0x13e8>
    9ca0:	d9402d17 	ldw	r5,180(sp)
    9ca4:	d8c02917 	ldw	r3,164(sp)
    9ca8:	d8002785 	stb	zero,158(sp)
    9cac:	28800104 	addi	r2,r5,4
    9cb0:	2d000017 	ldw	r20,0(r5)
    9cb4:	002d883a 	mov	r22,zero
    9cb8:	18005e16 	blt	r3,zero,9e34 <___svfprintf_internal_r+0x140c>
    9cbc:	00ffdfc4 	movi	r3,-129
    9cc0:	d8802d15 	stw	r2,180(sp)
    9cc4:	90e4703a 	and	r18,r18,r3
    9cc8:	0039883a 	mov	fp,zero
    9ccc:	a03dfe26 	beq	r20,zero,94c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70094c8>
    9cd0:	00800244 	movi	r2,9
    9cd4:	153cb336 	bltu	r2,r20,8fa4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fa4>
    9cd8:	a5000c04 	addi	r20,r20,48
    9cdc:	dc001dc4 	addi	r16,sp,119
    9ce0:	dd001dc5 	stb	r20,119(sp)
    9ce4:	d8c02817 	ldw	r3,160(sp)
    9ce8:	1c07c83a 	sub	r3,r3,r16
    9cec:	d8c02e15 	stw	r3,184(sp)
    9cf0:	003cf506 	br	90c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090c8>
    9cf4:	d8803317 	ldw	r2,204(sp)
    9cf8:	143fffc4 	addi	r16,r2,-1
    9cfc:	043f560e 	bge	zero,r16,9a58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a58>
    9d00:	07000404 	movi	fp,16
    9d04:	e403530e 	bge	fp,r16,aa54 <___svfprintf_internal_r+0x202c>
    9d08:	014000b4 	movhi	r5,2
    9d0c:	2952de84 	addi	r5,r5,19322
    9d10:	d9402b15 	stw	r5,172(sp)
    9d14:	01c001c4 	movi	r7,7
    9d18:	dd002c17 	ldw	r20,176(sp)
    9d1c:	00000306 	br	9d2c <___svfprintf_internal_r+0x1304>
    9d20:	843ffc04 	addi	r16,r16,-16
    9d24:	b5800204 	addi	r22,r22,8
    9d28:	e400130e 	bge	fp,r16,9d78 <___svfprintf_internal_r+0x1350>
    9d2c:	18c00404 	addi	r3,r3,16
    9d30:	8c400044 	addi	r17,r17,1
    9d34:	b5400015 	stw	r21,0(r22)
    9d38:	b7000115 	stw	fp,4(r22)
    9d3c:	d8c02015 	stw	r3,128(sp)
    9d40:	dc401f15 	stw	r17,124(sp)
    9d44:	3c7ff60e 	bge	r7,r17,9d20 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009d20>
    9d48:	d9801e04 	addi	r6,sp,120
    9d4c:	a00b883a 	mov	r5,r20
    9d50:	9809883a 	mov	r4,r19
    9d54:	d9c03d15 	stw	r7,244(sp)
    9d58:	00115540 	call	11554 <__ssprint_r>
    9d5c:	d9c03d17 	ldw	r7,244(sp)
    9d60:	103c161e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    9d64:	843ffc04 	addi	r16,r16,-16
    9d68:	d8c02017 	ldw	r3,128(sp)
    9d6c:	dc401f17 	ldw	r17,124(sp)
    9d70:	dd800404 	addi	r22,sp,16
    9d74:	e43fed16 	blt	fp,r16,9d2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009d2c>
    9d78:	d8802b17 	ldw	r2,172(sp)
    9d7c:	1c07883a 	add	r3,r3,r16
    9d80:	8c400044 	addi	r17,r17,1
    9d84:	b0800015 	stw	r2,0(r22)
    9d88:	b4000115 	stw	r16,4(r22)
    9d8c:	d8c02015 	stw	r3,128(sp)
    9d90:	dc401f15 	stw	r17,124(sp)
    9d94:	008001c4 	movi	r2,7
    9d98:	147f2e0e 	bge	r2,r17,9a54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a54>
    9d9c:	d9402c17 	ldw	r5,176(sp)
    9da0:	d9801e04 	addi	r6,sp,120
    9da4:	9809883a 	mov	r4,r19
    9da8:	00115540 	call	11554 <__ssprint_r>
    9dac:	103c031e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    9db0:	d8c02017 	ldw	r3,128(sp)
    9db4:	dc401f17 	ldw	r17,124(sp)
    9db8:	dd800404 	addi	r22,sp,16
    9dbc:	003f2606 	br	9a58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a58>
    9dc0:	9080040c 	andi	r2,r18,16
    9dc4:	1000c326 	beq	r2,zero,a0d4 <___svfprintf_internal_r+0x16ac>
    9dc8:	d8802d17 	ldw	r2,180(sp)
    9dcc:	15000017 	ldw	r20,0(r2)
    9dd0:	10800104 	addi	r2,r2,4
    9dd4:	d8802d15 	stw	r2,180(sp)
    9dd8:	a02dd7fa 	srai	r22,r20,31
    9ddc:	b005883a 	mov	r2,r22
    9de0:	103c680e 	bge	r2,zero,8f84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f84>
    9de4:	0529c83a 	sub	r20,zero,r20
    9de8:	a004c03a 	cmpne	r2,r20,zero
    9dec:	05adc83a 	sub	r22,zero,r22
    9df0:	b0adc83a 	sub	r22,r22,r2
    9df4:	d8802917 	ldw	r2,164(sp)
    9df8:	07000b44 	movi	fp,45
    9dfc:	df002785 	stb	fp,158(sp)
    9e00:	10022e16 	blt	r2,zero,a6bc <___svfprintf_internal_r+0x1c94>
    9e04:	00bfdfc4 	movi	r2,-129
    9e08:	90a4703a 	and	r18,r18,r2
    9e0c:	003c6406 	br	8fa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fa0>
    9e10:	9080100c 	andi	r2,r18,64
    9e14:	d8002785 	stb	zero,158(sp)
    9e18:	10012526 	beq	r2,zero,a2b0 <___svfprintf_internal_r+0x1888>
    9e1c:	d9002d17 	ldw	r4,180(sp)
    9e20:	d9402917 	ldw	r5,164(sp)
    9e24:	002d883a 	mov	r22,zero
    9e28:	20800104 	addi	r2,r4,4
    9e2c:	2500000b 	ldhu	r20,0(r4)
    9e30:	283fa20e 	bge	r5,zero,9cbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009cbc>
    9e34:	d8802d15 	stw	r2,180(sp)
    9e38:	0039883a 	mov	fp,zero
    9e3c:	a584b03a 	or	r2,r20,r22
    9e40:	103c571e 	bne	r2,zero,8fa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fa0>
    9e44:	00800044 	movi	r2,1
    9e48:	003e5006 	br	978c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700978c>
    9e4c:	d9402c17 	ldw	r5,176(sp)
    9e50:	d9801e04 	addi	r6,sp,120
    9e54:	9809883a 	mov	r4,r19
    9e58:	00115540 	call	11554 <__ssprint_r>
    9e5c:	103bd71e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    9e60:	d8c02017 	ldw	r3,128(sp)
    9e64:	da000404 	addi	r8,sp,16
    9e68:	d9003217 	ldw	r4,200(sp)
    9e6c:	d8802617 	ldw	r2,152(sp)
    9e70:	d9403317 	ldw	r5,204(sp)
    9e74:	8123883a 	add	r17,r16,r4
    9e78:	11400216 	blt	r2,r5,9e84 <___svfprintf_internal_r+0x145c>
    9e7c:	9100004c 	andi	r4,r18,1
    9e80:	20000d26 	beq	r4,zero,9eb8 <___svfprintf_internal_r+0x1490>
    9e84:	d9003817 	ldw	r4,224(sp)
    9e88:	d9403417 	ldw	r5,208(sp)
    9e8c:	1907883a 	add	r3,r3,r4
    9e90:	d9001f17 	ldw	r4,124(sp)
    9e94:	41400015 	stw	r5,0(r8)
    9e98:	d9403817 	ldw	r5,224(sp)
    9e9c:	21000044 	addi	r4,r4,1
    9ea0:	d8c02015 	stw	r3,128(sp)
    9ea4:	41400115 	stw	r5,4(r8)
    9ea8:	d9001f15 	stw	r4,124(sp)
    9eac:	014001c4 	movi	r5,7
    9eb0:	2901dc16 	blt	r5,r4,a624 <___svfprintf_internal_r+0x1bfc>
    9eb4:	42000204 	addi	r8,r8,8
    9eb8:	d9003317 	ldw	r4,204(sp)
    9ebc:	8121883a 	add	r16,r16,r4
    9ec0:	2085c83a 	sub	r2,r4,r2
    9ec4:	8461c83a 	sub	r16,r16,r17
    9ec8:	1400010e 	bge	r2,r16,9ed0 <___svfprintf_internal_r+0x14a8>
    9ecc:	1021883a 	mov	r16,r2
    9ed0:	04000a0e 	bge	zero,r16,9efc <___svfprintf_internal_r+0x14d4>
    9ed4:	d9001f17 	ldw	r4,124(sp)
    9ed8:	1c07883a 	add	r3,r3,r16
    9edc:	44400015 	stw	r17,0(r8)
    9ee0:	21000044 	addi	r4,r4,1
    9ee4:	44000115 	stw	r16,4(r8)
    9ee8:	d8c02015 	stw	r3,128(sp)
    9eec:	d9001f15 	stw	r4,124(sp)
    9ef0:	014001c4 	movi	r5,7
    9ef4:	2901e616 	blt	r5,r4,a690 <___svfprintf_internal_r+0x1c68>
    9ef8:	42000204 	addi	r8,r8,8
    9efc:	8001f616 	blt	r16,zero,a6d8 <___svfprintf_internal_r+0x1cb0>
    9f00:	1421c83a 	sub	r16,r2,r16
    9f04:	043d1c0e 	bge	zero,r16,9378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009378>
    9f08:	04400404 	movi	r17,16
    9f0c:	d8801f17 	ldw	r2,124(sp)
    9f10:	8c3edd0e 	bge	r17,r16,9a88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a88>
    9f14:	014000b4 	movhi	r5,2
    9f18:	2952de84 	addi	r5,r5,19322
    9f1c:	d9402b15 	stw	r5,172(sp)
    9f20:	058001c4 	movi	r22,7
    9f24:	dd002c17 	ldw	r20,176(sp)
    9f28:	00000306 	br	9f38 <___svfprintf_internal_r+0x1510>
    9f2c:	42000204 	addi	r8,r8,8
    9f30:	843ffc04 	addi	r16,r16,-16
    9f34:	8c3ed70e 	bge	r17,r16,9a94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a94>
    9f38:	18c00404 	addi	r3,r3,16
    9f3c:	10800044 	addi	r2,r2,1
    9f40:	45400015 	stw	r21,0(r8)
    9f44:	44400115 	stw	r17,4(r8)
    9f48:	d8c02015 	stw	r3,128(sp)
    9f4c:	d8801f15 	stw	r2,124(sp)
    9f50:	b0bff60e 	bge	r22,r2,9f2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f2c>
    9f54:	d9801e04 	addi	r6,sp,120
    9f58:	a00b883a 	mov	r5,r20
    9f5c:	9809883a 	mov	r4,r19
    9f60:	00115540 	call	11554 <__ssprint_r>
    9f64:	103b951e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    9f68:	d8c02017 	ldw	r3,128(sp)
    9f6c:	d8801f17 	ldw	r2,124(sp)
    9f70:	da000404 	addi	r8,sp,16
    9f74:	003fee06 	br	9f30 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f30>
    9f78:	9088703a 	and	r4,r18,r2
    9f7c:	203e8d1e 	bne	r4,zero,99b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70099b4>
    9f80:	dc401f17 	ldw	r17,124(sp)
    9f84:	40800115 	stw	r2,4(r8)
    9f88:	44000015 	stw	r16,0(r8)
    9f8c:	8c400044 	addi	r17,r17,1
    9f90:	d8c02015 	stw	r3,128(sp)
    9f94:	dc401f15 	stw	r17,124(sp)
    9f98:	008001c4 	movi	r2,7
    9f9c:	147f7f16 	blt	r2,r17,9d9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009d9c>
    9fa0:	45800204 	addi	r22,r8,8
    9fa4:	003eac06 	br	9a58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a58>
    9fa8:	d9402c17 	ldw	r5,176(sp)
    9fac:	d9801e04 	addi	r6,sp,120
    9fb0:	9809883a 	mov	r4,r19
    9fb4:	00115540 	call	11554 <__ssprint_r>
    9fb8:	103b801e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    9fbc:	d8c02017 	ldw	r3,128(sp)
    9fc0:	dc401f17 	ldw	r17,124(sp)
    9fc4:	da000404 	addi	r8,sp,16
    9fc8:	003e8406 	br	99dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70099dc>
    9fcc:	d9402c17 	ldw	r5,176(sp)
    9fd0:	d9801e04 	addi	r6,sp,120
    9fd4:	9809883a 	mov	r4,r19
    9fd8:	00115540 	call	11554 <__ssprint_r>
    9fdc:	103b771e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    9fe0:	d8c02017 	ldw	r3,128(sp)
    9fe4:	dc401f17 	ldw	r17,124(sp)
    9fe8:	dd800404 	addi	r22,sp,16
    9fec:	003e8606 	br	9a08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009a08>
    9ff0:	0029883a 	mov	r20,zero
    9ff4:	a5000c04 	addi	r20,r20,48
    9ff8:	dc001dc4 	addi	r16,sp,119
    9ffc:	dd001dc5 	stb	r20,119(sp)
    a000:	003f3806 	br	9ce4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ce4>
    a004:	d9402c17 	ldw	r5,176(sp)
    a008:	d9801e04 	addi	r6,sp,120
    a00c:	9809883a 	mov	r4,r19
    a010:	00115540 	call	11554 <__ssprint_r>
    a014:	103b691e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    a018:	d8c02017 	ldw	r3,128(sp)
    a01c:	da000404 	addi	r8,sp,16
    a020:	003c9506 	br	9278 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009278>
    a024:	d9003617 	ldw	r4,216(sp)
    a028:	d9403717 	ldw	r5,220(sp)
    a02c:	da003e15 	stw	r8,248(sp)
    a030:	00113a40 	call	113a4 <__fpclassifyd>
    a034:	da003e17 	ldw	r8,248(sp)
    a038:	1000bd1e 	bne	r2,zero,a330 <___svfprintf_internal_r+0x1908>
    a03c:	008011c4 	movi	r2,71
    a040:	14411e0e 	bge	r2,r17,a4bc <___svfprintf_internal_r+0x1a94>
    a044:	040000b4 	movhi	r16,2
    a048:	8412d104 	addi	r16,r16,19268
    a04c:	00c000c4 	movi	r3,3
    a050:	00bfdfc4 	movi	r2,-129
    a054:	d8c02a15 	stw	r3,168(sp)
    a058:	90a4703a 	and	r18,r18,r2
    a05c:	df002783 	ldbu	fp,158(sp)
    a060:	d8c02e15 	stw	r3,184(sp)
    a064:	d8002915 	stw	zero,164(sp)
    a068:	d8003215 	stw	zero,200(sp)
    a06c:	003c1c06 	br	90e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090e0>
    a070:	9080100c 	andi	r2,r18,64
    a074:	d8002785 	stb	zero,158(sp)
    a078:	10009426 	beq	r2,zero,a2cc <___svfprintf_internal_r+0x18a4>
    a07c:	d8c02d17 	ldw	r3,180(sp)
    a080:	d9002917 	ldw	r4,164(sp)
    a084:	002d883a 	mov	r22,zero
    a088:	18800104 	addi	r2,r3,4
    a08c:	1d00000b 	ldhu	r20,0(r3)
    a090:	203ec10e 	bge	r4,zero,9b98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b98>
    a094:	a586b03a 	or	r3,r20,r22
    a098:	d8802d15 	stw	r2,180(sp)
    a09c:	183ec21e 	bne	r3,zero,9ba8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009ba8>
    a0a0:	0039883a 	mov	fp,zero
    a0a4:	0005883a 	mov	r2,zero
    a0a8:	003db806 	br	978c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700978c>
    a0ac:	d8802d17 	ldw	r2,180(sp)
    a0b0:	d8c02d17 	ldw	r3,180(sp)
    a0b4:	d9002d17 	ldw	r4,180(sp)
    a0b8:	10800017 	ldw	r2,0(r2)
    a0bc:	18c00117 	ldw	r3,4(r3)
    a0c0:	21000204 	addi	r4,r4,8
    a0c4:	d8803615 	stw	r2,216(sp)
    a0c8:	d8c03715 	stw	r3,220(sp)
    a0cc:	d9002d15 	stw	r4,180(sp)
    a0d0:	003b8206 	br	8edc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008edc>
    a0d4:	9080100c 	andi	r2,r18,64
    a0d8:	10010726 	beq	r2,zero,a4f8 <___svfprintf_internal_r+0x1ad0>
    a0dc:	d8c02d17 	ldw	r3,180(sp)
    a0e0:	1d00000f 	ldh	r20,0(r3)
    a0e4:	18c00104 	addi	r3,r3,4
    a0e8:	d8c02d15 	stw	r3,180(sp)
    a0ec:	a02dd7fa 	srai	r22,r20,31
    a0f0:	b005883a 	mov	r2,r22
    a0f4:	003ba206 	br	8f80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f80>
    a0f8:	9080100c 	andi	r2,r18,64
    a0fc:	10010526 	beq	r2,zero,a514 <___svfprintf_internal_r+0x1aec>
    a100:	d9002d17 	ldw	r4,180(sp)
    a104:	002d883a 	mov	r22,zero
    a108:	2500000b 	ldhu	r20,0(r4)
    a10c:	21000104 	addi	r4,r4,4
    a110:	d9002d15 	stw	r4,180(sp)
    a114:	003cfe06 	br	9510 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009510>
    a118:	bc400007 	ldb	r17,0(r23)
    a11c:	003a9606 	br	8b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b78>
    a120:	9080040c 	andi	r2,r18,16
    a124:	10010126 	beq	r2,zero,a52c <___svfprintf_internal_r+0x1b04>
    a128:	d9402d17 	ldw	r5,180(sp)
    a12c:	d8c02f17 	ldw	r3,188(sp)
    a130:	28800017 	ldw	r2,0(r5)
    a134:	29400104 	addi	r5,r5,4
    a138:	d9402d15 	stw	r5,180(sp)
    a13c:	10c00015 	stw	r3,0(r2)
    a140:	003a6406 	br	8ad4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ad4>
    a144:	d9002917 	ldw	r4,164(sp)
    a148:	d8002785 	stb	zero,158(sp)
    a14c:	203d8d16 	blt	r4,zero,9784 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009784>
    a150:	00bfdfc4 	movi	r2,-129
    a154:	90a4703a 	and	r18,r18,r2
    a158:	003b0506 	br	8d70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008d70>
    a15c:	014000b4 	movhi	r5,2
    a160:	2952de84 	addi	r5,r5,19322
    a164:	d9402b15 	stw	r5,172(sp)
    a168:	d9402b17 	ldw	r5,172(sp)
    a16c:	1c47883a 	add	r3,r3,r17
    a170:	10800044 	addi	r2,r2,1
    a174:	41400015 	stw	r5,0(r8)
    a178:	44400115 	stw	r17,4(r8)
    a17c:	d8c02015 	stw	r3,128(sp)
    a180:	d8801f15 	stw	r2,124(sp)
    a184:	010001c4 	movi	r4,7
    a188:	20bf3016 	blt	r4,r2,9e4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e4c>
    a18c:	42000204 	addi	r8,r8,8
    a190:	003f3506 	br	9e68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e68>
    a194:	010000b4 	movhi	r4,2
    a198:	2112de84 	addi	r4,r4,19322
    a19c:	d9002b15 	stw	r4,172(sp)
    a1a0:	003c5e06 	br	931c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700931c>
    a1a4:	d9402c17 	ldw	r5,176(sp)
    a1a8:	d9801e04 	addi	r6,sp,120
    a1ac:	9809883a 	mov	r4,r19
    a1b0:	00115540 	call	11554 <__ssprint_r>
    a1b4:	103b011e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    a1b8:	d8c02017 	ldw	r3,128(sp)
    a1bc:	da000404 	addi	r8,sp,16
    a1c0:	003d9306 	br	9810 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009810>
    a1c4:	d8801f17 	ldw	r2,124(sp)
    a1c8:	014000b4 	movhi	r5,2
    a1cc:	01000044 	movi	r4,1
    a1d0:	18c00044 	addi	r3,r3,1
    a1d4:	10800044 	addi	r2,r2,1
    a1d8:	2952de04 	addi	r5,r5,19320
    a1dc:	41000115 	stw	r4,4(r8)
    a1e0:	41400015 	stw	r5,0(r8)
    a1e4:	d8c02015 	stw	r3,128(sp)
    a1e8:	d8801f15 	stw	r2,124(sp)
    a1ec:	010001c4 	movi	r4,7
    a1f0:	2080b516 	blt	r4,r2,a4c8 <___svfprintf_internal_r+0x1aa0>
    a1f4:	42000204 	addi	r8,r8,8
    a1f8:	8800041e 	bne	r17,zero,a20c <___svfprintf_internal_r+0x17e4>
    a1fc:	d8803317 	ldw	r2,204(sp)
    a200:	1000021e 	bne	r2,zero,a20c <___svfprintf_internal_r+0x17e4>
    a204:	9080004c 	andi	r2,r18,1
    a208:	103c5b26 	beq	r2,zero,9378 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009378>
    a20c:	d9003817 	ldw	r4,224(sp)
    a210:	d8801f17 	ldw	r2,124(sp)
    a214:	d9403417 	ldw	r5,208(sp)
    a218:	20c7883a 	add	r3,r4,r3
    a21c:	10800044 	addi	r2,r2,1
    a220:	41000115 	stw	r4,4(r8)
    a224:	41400015 	stw	r5,0(r8)
    a228:	d8c02015 	stw	r3,128(sp)
    a22c:	d8801f15 	stw	r2,124(sp)
    a230:	010001c4 	movi	r4,7
    a234:	20818016 	blt	r4,r2,a838 <___svfprintf_internal_r+0x1e10>
    a238:	42000204 	addi	r8,r8,8
    a23c:	0463c83a 	sub	r17,zero,r17
    a240:	0440cb0e 	bge	zero,r17,a570 <___svfprintf_internal_r+0x1b48>
    a244:	05800404 	movi	r22,16
    a248:	b440e80e 	bge	r22,r17,a5ec <___svfprintf_internal_r+0x1bc4>
    a24c:	014000b4 	movhi	r5,2
    a250:	2952de84 	addi	r5,r5,19322
    a254:	d9402b15 	stw	r5,172(sp)
    a258:	070001c4 	movi	fp,7
    a25c:	dd002c17 	ldw	r20,176(sp)
    a260:	00000306 	br	a270 <___svfprintf_internal_r+0x1848>
    a264:	42000204 	addi	r8,r8,8
    a268:	8c7ffc04 	addi	r17,r17,-16
    a26c:	b440e20e 	bge	r22,r17,a5f8 <___svfprintf_internal_r+0x1bd0>
    a270:	18c00404 	addi	r3,r3,16
    a274:	10800044 	addi	r2,r2,1
    a278:	45400015 	stw	r21,0(r8)
    a27c:	45800115 	stw	r22,4(r8)
    a280:	d8c02015 	stw	r3,128(sp)
    a284:	d8801f15 	stw	r2,124(sp)
    a288:	e0bff60e 	bge	fp,r2,a264 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a264>
    a28c:	d9801e04 	addi	r6,sp,120
    a290:	a00b883a 	mov	r5,r20
    a294:	9809883a 	mov	r4,r19
    a298:	00115540 	call	11554 <__ssprint_r>
    a29c:	103ac71e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    a2a0:	d8c02017 	ldw	r3,128(sp)
    a2a4:	d8801f17 	ldw	r2,124(sp)
    a2a8:	da000404 	addi	r8,sp,16
    a2ac:	003fee06 	br	a268 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a268>
    a2b0:	d8c02d17 	ldw	r3,180(sp)
    a2b4:	d9002917 	ldw	r4,164(sp)
    a2b8:	002d883a 	mov	r22,zero
    a2bc:	18800104 	addi	r2,r3,4
    a2c0:	1d000017 	ldw	r20,0(r3)
    a2c4:	203e7d0e 	bge	r4,zero,9cbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009cbc>
    a2c8:	003eda06 	br	9e34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e34>
    a2cc:	d9402d17 	ldw	r5,180(sp)
    a2d0:	d8c02917 	ldw	r3,164(sp)
    a2d4:	002d883a 	mov	r22,zero
    a2d8:	28800104 	addi	r2,r5,4
    a2dc:	2d000017 	ldw	r20,0(r5)
    a2e0:	183e2d0e 	bge	r3,zero,9b98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009b98>
    a2e4:	003f6b06 	br	a094 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a094>
    a2e8:	d8c02d15 	stw	r3,180(sp)
    a2ec:	0039883a 	mov	fp,zero
    a2f0:	003ed206 	br	9e3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009e3c>
    a2f4:	bc400043 	ldbu	r17,1(r23)
    a2f8:	94800814 	ori	r18,r18,32
    a2fc:	bdc00044 	addi	r23,r23,1
    a300:	8c403fcc 	andi	r17,r17,255
    a304:	8c40201c 	xori	r17,r17,128
    a308:	8c7fe004 	addi	r17,r17,-128
    a30c:	003a1a06 	br	8b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b78>
    a310:	d9402c17 	ldw	r5,176(sp)
    a314:	d9801e04 	addi	r6,sp,120
    a318:	9809883a 	mov	r4,r19
    a31c:	00115540 	call	11554 <__ssprint_r>
    a320:	103aa61e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    a324:	d8c02017 	ldw	r3,128(sp)
    a328:	da000404 	addi	r8,sp,16
    a32c:	003d4a06 	br	9858 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009858>
    a330:	d9002917 	ldw	r4,164(sp)
    a334:	05bff7c4 	movi	r22,-33
    a338:	00bfffc4 	movi	r2,-1
    a33c:	8dac703a 	and	r22,r17,r22
    a340:	20806a26 	beq	r4,r2,a4ec <___svfprintf_internal_r+0x1ac4>
    a344:	008011c4 	movi	r2,71
    a348:	b0813726 	beq	r22,r2,a828 <___svfprintf_internal_r+0x1e00>
    a34c:	d9003717 	ldw	r4,220(sp)
    a350:	90c04014 	ori	r3,r18,256
    a354:	d8c02b15 	stw	r3,172(sp)
    a358:	20015d16 	blt	r4,zero,a8d0 <___svfprintf_internal_r+0x1ea8>
    a35c:	dd003717 	ldw	r20,220(sp)
    a360:	d8002a05 	stb	zero,168(sp)
    a364:	00801984 	movi	r2,102
    a368:	88814026 	beq	r17,r2,a86c <___svfprintf_internal_r+0x1e44>
    a36c:	00801184 	movi	r2,70
    a370:	88817126 	beq	r17,r2,a938 <___svfprintf_internal_r+0x1f10>
    a374:	00801144 	movi	r2,69
    a378:	b0816226 	beq	r22,r2,a904 <___svfprintf_internal_r+0x1edc>
    a37c:	d8c02917 	ldw	r3,164(sp)
    a380:	d8802104 	addi	r2,sp,132
    a384:	d8800315 	stw	r2,12(sp)
    a388:	d9403617 	ldw	r5,216(sp)
    a38c:	d8802504 	addi	r2,sp,148
    a390:	d8800215 	stw	r2,8(sp)
    a394:	d8802604 	addi	r2,sp,152
    a398:	d8c00015 	stw	r3,0(sp)
    a39c:	d8800115 	stw	r2,4(sp)
    a3a0:	01c00084 	movi	r7,2
    a3a4:	a00d883a 	mov	r6,r20
    a3a8:	9809883a 	mov	r4,r19
    a3ac:	d8c03d15 	stw	r3,244(sp)
    a3b0:	da003e15 	stw	r8,248(sp)
    a3b4:	000d2240 	call	d224 <_dtoa_r>
    a3b8:	1021883a 	mov	r16,r2
    a3bc:	008019c4 	movi	r2,103
    a3c0:	d8c03d17 	ldw	r3,244(sp)
    a3c4:	da003e17 	ldw	r8,248(sp)
    a3c8:	8880e726 	beq	r17,r2,a768 <___svfprintf_internal_r+0x1d40>
    a3cc:	008011c4 	movi	r2,71
    a3d0:	8880d426 	beq	r17,r2,a724 <___svfprintf_internal_r+0x1cfc>
    a3d4:	80f9883a 	add	fp,r16,r3
    a3d8:	d9003617 	ldw	r4,216(sp)
    a3dc:	000d883a 	mov	r6,zero
    a3e0:	000f883a 	mov	r7,zero
    a3e4:	a00b883a 	mov	r5,r20
    a3e8:	da003e15 	stw	r8,248(sp)
    a3ec:	0015e280 	call	15e28 <__eqdf2>
    a3f0:	da003e17 	ldw	r8,248(sp)
    a3f4:	1000e426 	beq	r2,zero,a788 <___svfprintf_internal_r+0x1d60>
    a3f8:	d8802117 	ldw	r2,132(sp)
    a3fc:	1700062e 	bgeu	r2,fp,a418 <___svfprintf_internal_r+0x19f0>
    a400:	01000c04 	movi	r4,48
    a404:	10c00044 	addi	r3,r2,1
    a408:	d8c02115 	stw	r3,132(sp)
    a40c:	11000005 	stb	r4,0(r2)
    a410:	d8802117 	ldw	r2,132(sp)
    a414:	173ffb36 	bltu	r2,fp,a404 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a404>
    a418:	1405c83a 	sub	r2,r2,r16
    a41c:	d8803315 	stw	r2,204(sp)
    a420:	008011c4 	movi	r2,71
    a424:	b080c526 	beq	r22,r2,a73c <___svfprintf_internal_r+0x1d14>
    a428:	00801944 	movi	r2,101
    a42c:	1441d90e 	bge	r2,r17,ab94 <___svfprintf_internal_r+0x216c>
    a430:	d8c02617 	ldw	r3,152(sp)
    a434:	00801984 	movi	r2,102
    a438:	d8c03215 	stw	r3,200(sp)
    a43c:	88813426 	beq	r17,r2,a910 <___svfprintf_internal_r+0x1ee8>
    a440:	d8c03217 	ldw	r3,200(sp)
    a444:	d9003317 	ldw	r4,204(sp)
    a448:	19012516 	blt	r3,r4,a8e0 <___svfprintf_internal_r+0x1eb8>
    a44c:	9480004c 	andi	r18,r18,1
    a450:	9001841e 	bne	r18,zero,aa64 <___svfprintf_internal_r+0x203c>
    a454:	1805883a 	mov	r2,r3
    a458:	1801cc16 	blt	r3,zero,ab8c <___svfprintf_internal_r+0x2164>
    a45c:	d8c03217 	ldw	r3,200(sp)
    a460:	044019c4 	movi	r17,103
    a464:	d8c02e15 	stw	r3,184(sp)
    a468:	df002a07 	ldb	fp,168(sp)
    a46c:	e000a61e 	bne	fp,zero,a708 <___svfprintf_internal_r+0x1ce0>
    a470:	df002783 	ldbu	fp,158(sp)
    a474:	d8802a15 	stw	r2,168(sp)
    a478:	dc802b17 	ldw	r18,172(sp)
    a47c:	d8002915 	stw	zero,164(sp)
    a480:	003b1706 	br	90e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090e0>
    a484:	040000b4 	movhi	r16,2
    a488:	8412ce04 	addi	r16,r16,19256
    a48c:	003aa606 	br	8f28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f28>
    a490:	d9003917 	ldw	r4,228(sp)
    a494:	04001004 	movi	r16,64
    a498:	800b883a 	mov	r5,r16
    a49c:	00078dc0 	call	78dc <_malloc_r>
    a4a0:	d9002c17 	ldw	r4,176(sp)
    a4a4:	20800015 	stw	r2,0(r4)
    a4a8:	20800415 	stw	r2,16(r4)
    a4ac:	1001cb26 	beq	r2,zero,abdc <___svfprintf_internal_r+0x21b4>
    a4b0:	d8802c17 	ldw	r2,176(sp)
    a4b4:	14000515 	stw	r16,20(r2)
    a4b8:	00397606 	br	8a94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008a94>
    a4bc:	040000b4 	movhi	r16,2
    a4c0:	8412d004 	addi	r16,r16,19264
    a4c4:	003ee106 	br	a04c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a04c>
    a4c8:	d9402c17 	ldw	r5,176(sp)
    a4cc:	d9801e04 	addi	r6,sp,120
    a4d0:	9809883a 	mov	r4,r19
    a4d4:	00115540 	call	11554 <__ssprint_r>
    a4d8:	103a381e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    a4dc:	dc402617 	ldw	r17,152(sp)
    a4e0:	d8c02017 	ldw	r3,128(sp)
    a4e4:	da000404 	addi	r8,sp,16
    a4e8:	003f4306 	br	a1f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a1f8>
    a4ec:	01400184 	movi	r5,6
    a4f0:	d9402915 	stw	r5,164(sp)
    a4f4:	003f9506 	br	a34c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a34c>
    a4f8:	d9002d17 	ldw	r4,180(sp)
    a4fc:	25000017 	ldw	r20,0(r4)
    a500:	21000104 	addi	r4,r4,4
    a504:	d9002d15 	stw	r4,180(sp)
    a508:	a02dd7fa 	srai	r22,r20,31
    a50c:	b005883a 	mov	r2,r22
    a510:	003a9b06 	br	8f80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f80>
    a514:	d9402d17 	ldw	r5,180(sp)
    a518:	002d883a 	mov	r22,zero
    a51c:	2d000017 	ldw	r20,0(r5)
    a520:	29400104 	addi	r5,r5,4
    a524:	d9402d15 	stw	r5,180(sp)
    a528:	003bf906 	br	9510 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009510>
    a52c:	9480100c 	andi	r18,r18,64
    a530:	90006e26 	beq	r18,zero,a6ec <___svfprintf_internal_r+0x1cc4>
    a534:	d9002d17 	ldw	r4,180(sp)
    a538:	d9402f17 	ldw	r5,188(sp)
    a53c:	20800017 	ldw	r2,0(r4)
    a540:	21000104 	addi	r4,r4,4
    a544:	d9002d15 	stw	r4,180(sp)
    a548:	1140000d 	sth	r5,0(r2)
    a54c:	00396106 	br	8ad4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ad4>
    a550:	d9402c17 	ldw	r5,176(sp)
    a554:	d9801e04 	addi	r6,sp,120
    a558:	9809883a 	mov	r4,r19
    a55c:	00115540 	call	11554 <__ssprint_r>
    a560:	103a161e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    a564:	d8c02017 	ldw	r3,128(sp)
    a568:	d8801f17 	ldw	r2,124(sp)
    a56c:	da000404 	addi	r8,sp,16
    a570:	d9403317 	ldw	r5,204(sp)
    a574:	10800044 	addi	r2,r2,1
    a578:	44000015 	stw	r16,0(r8)
    a57c:	28c7883a 	add	r3,r5,r3
    a580:	003b7706 	br	9360 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009360>
    a584:	8009883a 	mov	r4,r16
    a588:	da003e15 	stw	r8,248(sp)
    a58c:	00089900 	call	8990 <strlen>
    a590:	d8802e15 	stw	r2,184(sp)
    a594:	da003e17 	ldw	r8,248(sp)
    a598:	103c280e 	bge	r2,zero,963c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700963c>
    a59c:	0005883a 	mov	r2,zero
    a5a0:	003c2606 	br	963c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700963c>
    a5a4:	00bfffc4 	movi	r2,-1
    a5a8:	003a0906 	br	8dd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dd0>
    a5ac:	010000b4 	movhi	r4,2
    a5b0:	2112e284 	addi	r4,r4,19338
    a5b4:	d9003515 	stw	r4,212(sp)
    a5b8:	003b0606 	br	91d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70091d4>
    a5bc:	013fffc4 	movi	r4,-1
    a5c0:	003a2706 	br	8e60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008e60>
    a5c4:	d9402c17 	ldw	r5,176(sp)
    a5c8:	d9801e04 	addi	r6,sp,120
    a5cc:	9809883a 	mov	r4,r19
    a5d0:	00115540 	call	11554 <__ssprint_r>
    a5d4:	1039f91e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    a5d8:	d8c02017 	ldw	r3,128(sp)
    a5dc:	da000404 	addi	r8,sp,16
    a5e0:	003d8406 	br	9bf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009bf4>
    a5e4:	0023883a 	mov	r17,zero
    a5e8:	003d8306 	br	9bf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009bf8>
    a5ec:	010000b4 	movhi	r4,2
    a5f0:	2112de84 	addi	r4,r4,19322
    a5f4:	d9002b15 	stw	r4,172(sp)
    a5f8:	d9002b17 	ldw	r4,172(sp)
    a5fc:	1c47883a 	add	r3,r3,r17
    a600:	10800044 	addi	r2,r2,1
    a604:	41000015 	stw	r4,0(r8)
    a608:	44400115 	stw	r17,4(r8)
    a60c:	d8c02015 	stw	r3,128(sp)
    a610:	d8801f15 	stw	r2,124(sp)
    a614:	010001c4 	movi	r4,7
    a618:	20bfcd16 	blt	r4,r2,a550 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a550>
    a61c:	42000204 	addi	r8,r8,8
    a620:	003fd306 	br	a570 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a570>
    a624:	d9402c17 	ldw	r5,176(sp)
    a628:	d9801e04 	addi	r6,sp,120
    a62c:	9809883a 	mov	r4,r19
    a630:	00115540 	call	11554 <__ssprint_r>
    a634:	1039e11e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    a638:	d8802617 	ldw	r2,152(sp)
    a63c:	d8c02017 	ldw	r3,128(sp)
    a640:	da000404 	addi	r8,sp,16
    a644:	003e1c06 	br	9eb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009eb8>
    a648:	d8802917 	ldw	r2,164(sp)
    a64c:	00c00184 	movi	r3,6
    a650:	1880012e 	bgeu	r3,r2,a658 <___svfprintf_internal_r+0x1c30>
    a654:	1805883a 	mov	r2,r3
    a658:	d8802e15 	stw	r2,184(sp)
    a65c:	1000f316 	blt	r2,zero,aa2c <___svfprintf_internal_r+0x2004>
    a660:	040000b4 	movhi	r16,2
    a664:	d8802a15 	stw	r2,168(sp)
    a668:	dd002d15 	stw	r20,180(sp)
    a66c:	d8002915 	stw	zero,164(sp)
    a670:	d8003215 	stw	zero,200(sp)
    a674:	8412dc04 	addi	r16,r16,19312
    a678:	0039883a 	mov	fp,zero
    a67c:	003a9f06 	br	90fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090fc>
    a680:	010000b4 	movhi	r4,2
    a684:	2112e284 	addi	r4,r4,19338
    a688:	d9003515 	stw	r4,212(sp)
    a68c:	003b5f06 	br	940c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700940c>
    a690:	d9402c17 	ldw	r5,176(sp)
    a694:	d9801e04 	addi	r6,sp,120
    a698:	9809883a 	mov	r4,r19
    a69c:	00115540 	call	11554 <__ssprint_r>
    a6a0:	1039c61e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    a6a4:	d8802617 	ldw	r2,152(sp)
    a6a8:	d9403317 	ldw	r5,204(sp)
    a6ac:	d8c02017 	ldw	r3,128(sp)
    a6b0:	da000404 	addi	r8,sp,16
    a6b4:	2885c83a 	sub	r2,r5,r2
    a6b8:	003e1006 	br	9efc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009efc>
    a6bc:	00800044 	movi	r2,1
    a6c0:	10803fcc 	andi	r2,r2,255
    a6c4:	00c00044 	movi	r3,1
    a6c8:	10fa3526 	beq	r2,r3,8fa0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008fa0>
    a6cc:	00c00084 	movi	r3,2
    a6d0:	10fb9e26 	beq	r2,r3,954c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700954c>
    a6d4:	003a6406 	br	9068 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009068>
    a6d8:	0021883a 	mov	r16,zero
    a6dc:	003e0806 	br	9f00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009f00>
    a6e0:	07000b44 	movi	fp,45
    a6e4:	df002785 	stb	fp,158(sp)
    a6e8:	003a0b06 	br	8f18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f18>
    a6ec:	d8c02d17 	ldw	r3,180(sp)
    a6f0:	d9002f17 	ldw	r4,188(sp)
    a6f4:	18800017 	ldw	r2,0(r3)
    a6f8:	18c00104 	addi	r3,r3,4
    a6fc:	d8c02d15 	stw	r3,180(sp)
    a700:	11000015 	stw	r4,0(r2)
    a704:	0038f306 	br	8ad4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008ad4>
    a708:	00c00b44 	movi	r3,45
    a70c:	d8c02785 	stb	r3,158(sp)
    a710:	d8802a15 	stw	r2,168(sp)
    a714:	dc802b17 	ldw	r18,172(sp)
    a718:	d8002915 	stw	zero,164(sp)
    a71c:	07000b44 	movi	fp,45
    a720:	003a7306 	br	90f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090f0>
    a724:	9080004c 	andi	r2,r18,1
    a728:	1000941e 	bne	r2,zero,a97c <___svfprintf_internal_r+0x1f54>
    a72c:	d8802117 	ldw	r2,132(sp)
    a730:	1405c83a 	sub	r2,r2,r16
    a734:	d8803315 	stw	r2,204(sp)
    a738:	b441161e 	bne	r22,r17,ab94 <___svfprintf_internal_r+0x216c>
    a73c:	dd802617 	ldw	r22,152(sp)
    a740:	00bfff44 	movi	r2,-3
    a744:	b0801a16 	blt	r22,r2,a7b0 <___svfprintf_internal_r+0x1d88>
    a748:	d9402917 	ldw	r5,164(sp)
    a74c:	2d801816 	blt	r5,r22,a7b0 <___svfprintf_internal_r+0x1d88>
    a750:	dd803215 	stw	r22,200(sp)
    a754:	003f3a06 	br	a440 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a440>
    a758:	1025883a 	mov	r18,r2
    a75c:	0039883a 	mov	fp,zero
    a760:	00800084 	movi	r2,2
    a764:	003fd606 	br	a6c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a6c0>
    a768:	9080004c 	andi	r2,r18,1
    a76c:	103f191e 	bne	r2,zero,a3d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a3d4>
    a770:	d8802117 	ldw	r2,132(sp)
    a774:	003f2806 	br	a418 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a418>
    a778:	010000b4 	movhi	r4,2
    a77c:	2112de84 	addi	r4,r4,19322
    a780:	d9002b15 	stw	r4,172(sp)
    a784:	003c7c06 	br	9978 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009978>
    a788:	e005883a 	mov	r2,fp
    a78c:	003f2206 	br	a418 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a418>
    a790:	d9402917 	ldw	r5,164(sp)
    a794:	df002783 	ldbu	fp,158(sp)
    a798:	dd002d15 	stw	r20,180(sp)
    a79c:	d9402a15 	stw	r5,168(sp)
    a7a0:	d9402e15 	stw	r5,184(sp)
    a7a4:	d8002915 	stw	zero,164(sp)
    a7a8:	d8003215 	stw	zero,200(sp)
    a7ac:	003a4c06 	br	90e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090e0>
    a7b0:	8c7fff84 	addi	r17,r17,-2
    a7b4:	b5bfffc4 	addi	r22,r22,-1
    a7b8:	dd802615 	stw	r22,152(sp)
    a7bc:	dc4022c5 	stb	r17,139(sp)
    a7c0:	b000c316 	blt	r22,zero,aad0 <___svfprintf_internal_r+0x20a8>
    a7c4:	00800ac4 	movi	r2,43
    a7c8:	d8802305 	stb	r2,140(sp)
    a7cc:	00800244 	movi	r2,9
    a7d0:	15806e16 	blt	r2,r22,a98c <___svfprintf_internal_r+0x1f64>
    a7d4:	00800c04 	movi	r2,48
    a7d8:	b5800c04 	addi	r22,r22,48
    a7dc:	d8802345 	stb	r2,141(sp)
    a7e0:	dd802385 	stb	r22,142(sp)
    a7e4:	d88023c4 	addi	r2,sp,143
    a7e8:	df0022c4 	addi	fp,sp,139
    a7ec:	d8c03317 	ldw	r3,204(sp)
    a7f0:	1739c83a 	sub	fp,r2,fp
    a7f4:	d9003317 	ldw	r4,204(sp)
    a7f8:	e0c7883a 	add	r3,fp,r3
    a7fc:	df003b15 	stw	fp,236(sp)
    a800:	d8c02e15 	stw	r3,184(sp)
    a804:	00800044 	movi	r2,1
    a808:	1100b70e 	bge	r2,r4,aae8 <___svfprintf_internal_r+0x20c0>
    a80c:	d8c02e17 	ldw	r3,184(sp)
    a810:	18c00044 	addi	r3,r3,1
    a814:	d8c02e15 	stw	r3,184(sp)
    a818:	1805883a 	mov	r2,r3
    a81c:	1800b016 	blt	r3,zero,aae0 <___svfprintf_internal_r+0x20b8>
    a820:	d8003215 	stw	zero,200(sp)
    a824:	003f1006 	br	a468 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a468>
    a828:	d8802917 	ldw	r2,164(sp)
    a82c:	103ec71e 	bne	r2,zero,a34c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a34c>
    a830:	dc002915 	stw	r16,164(sp)
    a834:	003ec506 	br	a34c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a34c>
    a838:	d9402c17 	ldw	r5,176(sp)
    a83c:	d9801e04 	addi	r6,sp,120
    a840:	9809883a 	mov	r4,r19
    a844:	00115540 	call	11554 <__ssprint_r>
    a848:	10395c1e 	bne	r2,zero,8dbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dbc>
    a84c:	dc402617 	ldw	r17,152(sp)
    a850:	d8c02017 	ldw	r3,128(sp)
    a854:	d8801f17 	ldw	r2,124(sp)
    a858:	da000404 	addi	r8,sp,16
    a85c:	003e7706 	br	a23c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a23c>
    a860:	582f883a 	mov	r23,r11
    a864:	d8002915 	stw	zero,164(sp)
    a868:	0038c406 	br	8b7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b7c>
    a86c:	d8c02917 	ldw	r3,164(sp)
    a870:	d8802104 	addi	r2,sp,132
    a874:	d8800315 	stw	r2,12(sp)
    a878:	d9403617 	ldw	r5,216(sp)
    a87c:	d8802504 	addi	r2,sp,148
    a880:	d8800215 	stw	r2,8(sp)
    a884:	d8802604 	addi	r2,sp,152
    a888:	d8c00015 	stw	r3,0(sp)
    a88c:	9809883a 	mov	r4,r19
    a890:	d8800115 	stw	r2,4(sp)
    a894:	01c000c4 	movi	r7,3
    a898:	a00d883a 	mov	r6,r20
    a89c:	da003e15 	stw	r8,248(sp)
    a8a0:	000d2240 	call	d224 <_dtoa_r>
    a8a4:	d9002917 	ldw	r4,164(sp)
    a8a8:	da003e17 	ldw	r8,248(sp)
    a8ac:	1021883a 	mov	r16,r2
    a8b0:	1139883a 	add	fp,r2,r4
    a8b4:	2007883a 	mov	r3,r4
    a8b8:	81000007 	ldb	r4,0(r16)
    a8bc:	00800c04 	movi	r2,48
    a8c0:	20806f26 	beq	r4,r2,aa80 <___svfprintf_internal_r+0x2058>
    a8c4:	d8c02617 	ldw	r3,152(sp)
    a8c8:	e0f9883a 	add	fp,fp,r3
    a8cc:	003ec206 	br	a3d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a3d8>
    a8d0:	00c00b44 	movi	r3,45
    a8d4:	2520003c 	xorhi	r20,r4,32768
    a8d8:	d8c02a05 	stb	r3,168(sp)
    a8dc:	003ea106 	br	a364 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a364>
    a8e0:	d8c03217 	ldw	r3,200(sp)
    a8e4:	00c0890e 	bge	zero,r3,ab0c <___svfprintf_internal_r+0x20e4>
    a8e8:	00800044 	movi	r2,1
    a8ec:	d9003317 	ldw	r4,204(sp)
    a8f0:	1105883a 	add	r2,r2,r4
    a8f4:	d8802e15 	stw	r2,184(sp)
    a8f8:	10005f16 	blt	r2,zero,aa78 <___svfprintf_internal_r+0x2050>
    a8fc:	044019c4 	movi	r17,103
    a900:	003ed906 	br	a468 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a468>
    a904:	d9002917 	ldw	r4,164(sp)
    a908:	20c00044 	addi	r3,r4,1
    a90c:	003e9c06 	br	a380 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a380>
    a910:	d9002917 	ldw	r4,164(sp)
    a914:	00c0680e 	bge	zero,r3,aab8 <___svfprintf_internal_r+0x2090>
    a918:	2000461e 	bne	r4,zero,aa34 <___svfprintf_internal_r+0x200c>
    a91c:	9480004c 	andi	r18,r18,1
    a920:	9000441e 	bne	r18,zero,aa34 <___svfprintf_internal_r+0x200c>
    a924:	1805883a 	mov	r2,r3
    a928:	1800a016 	blt	r3,zero,abac <___svfprintf_internal_r+0x2184>
    a92c:	d8c03217 	ldw	r3,200(sp)
    a930:	d8c02e15 	stw	r3,184(sp)
    a934:	003ecc06 	br	a468 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a468>
    a938:	d9402917 	ldw	r5,164(sp)
    a93c:	d8802104 	addi	r2,sp,132
    a940:	d8800315 	stw	r2,12(sp)
    a944:	d9400015 	stw	r5,0(sp)
    a948:	d8802504 	addi	r2,sp,148
    a94c:	d9403617 	ldw	r5,216(sp)
    a950:	d8800215 	stw	r2,8(sp)
    a954:	d8802604 	addi	r2,sp,152
    a958:	d8800115 	stw	r2,4(sp)
    a95c:	01c000c4 	movi	r7,3
    a960:	a00d883a 	mov	r6,r20
    a964:	9809883a 	mov	r4,r19
    a968:	da003e15 	stw	r8,248(sp)
    a96c:	000d2240 	call	d224 <_dtoa_r>
    a970:	d8c02917 	ldw	r3,164(sp)
    a974:	da003e17 	ldw	r8,248(sp)
    a978:	1021883a 	mov	r16,r2
    a97c:	00801184 	movi	r2,70
    a980:	80f9883a 	add	fp,r16,r3
    a984:	88bfcc26 	beq	r17,r2,a8b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8b8>
    a988:	003e9306 	br	a3d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a3d8>
    a98c:	df0022c4 	addi	fp,sp,139
    a990:	dc002915 	stw	r16,164(sp)
    a994:	9829883a 	mov	r20,r19
    a998:	e021883a 	mov	r16,fp
    a99c:	4027883a 	mov	r19,r8
    a9a0:	b009883a 	mov	r4,r22
    a9a4:	01400284 	movi	r5,10
    a9a8:	00154100 	call	15410 <__modsi3>
    a9ac:	10800c04 	addi	r2,r2,48
    a9b0:	843fffc4 	addi	r16,r16,-1
    a9b4:	b009883a 	mov	r4,r22
    a9b8:	01400284 	movi	r5,10
    a9bc:	80800005 	stb	r2,0(r16)
    a9c0:	001538c0 	call	1538c <__divsi3>
    a9c4:	102d883a 	mov	r22,r2
    a9c8:	00800244 	movi	r2,9
    a9cc:	15bff416 	blt	r2,r22,a9a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a9a0>
    a9d0:	9811883a 	mov	r8,r19
    a9d4:	b0800c04 	addi	r2,r22,48
    a9d8:	a027883a 	mov	r19,r20
    a9dc:	8029883a 	mov	r20,r16
    a9e0:	a17fffc4 	addi	r5,r20,-1
    a9e4:	a0bfffc5 	stb	r2,-1(r20)
    a9e8:	dc002917 	ldw	r16,164(sp)
    a9ec:	2f00752e 	bgeu	r5,fp,abc4 <___svfprintf_internal_r+0x219c>
    a9f0:	d9c02384 	addi	r7,sp,142
    a9f4:	3d0fc83a 	sub	r7,r7,r20
    a9f8:	d9002344 	addi	r4,sp,141
    a9fc:	e1cf883a 	add	r7,fp,r7
    aa00:	00000106 	br	aa08 <___svfprintf_internal_r+0x1fe0>
    aa04:	28800003 	ldbu	r2,0(r5)
    aa08:	20800005 	stb	r2,0(r4)
    aa0c:	21000044 	addi	r4,r4,1
    aa10:	29400044 	addi	r5,r5,1
    aa14:	21fffb1e 	bne	r4,r7,aa04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aa04>
    aa18:	d8802304 	addi	r2,sp,140
    aa1c:	1505c83a 	sub	r2,r2,r20
    aa20:	d8c02344 	addi	r3,sp,141
    aa24:	1885883a 	add	r2,r3,r2
    aa28:	003f7006 	br	a7ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a7ec>
    aa2c:	0005883a 	mov	r2,zero
    aa30:	003f0b06 	br	a660 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a660>
    aa34:	d9002917 	ldw	r4,164(sp)
    aa38:	d8c03217 	ldw	r3,200(sp)
    aa3c:	20800044 	addi	r2,r4,1
    aa40:	1885883a 	add	r2,r3,r2
    aa44:	d8802e15 	stw	r2,184(sp)
    aa48:	103e870e 	bge	r2,zero,a468 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a468>
    aa4c:	0005883a 	mov	r2,zero
    aa50:	003e8506 	br	a468 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a468>
    aa54:	010000b4 	movhi	r4,2
    aa58:	2112de84 	addi	r4,r4,19322
    aa5c:	d9002b15 	stw	r4,172(sp)
    aa60:	003cc506 	br	9d78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009d78>
    aa64:	d8c03217 	ldw	r3,200(sp)
    aa68:	18c00044 	addi	r3,r3,1
    aa6c:	d8c02e15 	stw	r3,184(sp)
    aa70:	1805883a 	mov	r2,r3
    aa74:	183fa10e 	bge	r3,zero,a8fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8fc>
    aa78:	0005883a 	mov	r2,zero
    aa7c:	003f9f06 	br	a8fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8fc>
    aa80:	d9003617 	ldw	r4,216(sp)
    aa84:	000d883a 	mov	r6,zero
    aa88:	000f883a 	mov	r7,zero
    aa8c:	a00b883a 	mov	r5,r20
    aa90:	d8c03d15 	stw	r3,244(sp)
    aa94:	da003e15 	stw	r8,248(sp)
    aa98:	0015e280 	call	15e28 <__eqdf2>
    aa9c:	d8c03d17 	ldw	r3,244(sp)
    aaa0:	da003e17 	ldw	r8,248(sp)
    aaa4:	103f8726 	beq	r2,zero,a8c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8c4>
    aaa8:	00800044 	movi	r2,1
    aaac:	10c7c83a 	sub	r3,r2,r3
    aab0:	d8c02615 	stw	r3,152(sp)
    aab4:	003f8406 	br	a8c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8c8>
    aab8:	20000e1e 	bne	r4,zero,aaf4 <___svfprintf_internal_r+0x20cc>
    aabc:	9480004c 	andi	r18,r18,1
    aac0:	90000c1e 	bne	r18,zero,aaf4 <___svfprintf_internal_r+0x20cc>
    aac4:	00800044 	movi	r2,1
    aac8:	d8802e15 	stw	r2,184(sp)
    aacc:	003e6606 	br	a468 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a468>
    aad0:	00800b44 	movi	r2,45
    aad4:	05adc83a 	sub	r22,zero,r22
    aad8:	d8802305 	stb	r2,140(sp)
    aadc:	003f3b06 	br	a7cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a7cc>
    aae0:	0005883a 	mov	r2,zero
    aae4:	003f4e06 	br	a820 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a820>
    aae8:	90a4703a 	and	r18,r18,r2
    aaec:	903f4a26 	beq	r18,zero,a818 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a818>
    aaf0:	003f4606 	br	a80c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a80c>
    aaf4:	d8c02917 	ldw	r3,164(sp)
    aaf8:	18c00084 	addi	r3,r3,2
    aafc:	d8c02e15 	stw	r3,184(sp)
    ab00:	1805883a 	mov	r2,r3
    ab04:	183e580e 	bge	r3,zero,a468 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a468>
    ab08:	003fd006 	br	aa4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aa4c>
    ab0c:	00800084 	movi	r2,2
    ab10:	10c5c83a 	sub	r2,r2,r3
    ab14:	003f7506 	br	a8ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a8ec>
    ab18:	d8802d17 	ldw	r2,180(sp)
    ab1c:	d9002d17 	ldw	r4,180(sp)
    ab20:	bc400043 	ldbu	r17,1(r23)
    ab24:	10800017 	ldw	r2,0(r2)
    ab28:	582f883a 	mov	r23,r11
    ab2c:	d8802915 	stw	r2,164(sp)
    ab30:	20800104 	addi	r2,r4,4
    ab34:	d9002917 	ldw	r4,164(sp)
    ab38:	d8802d15 	stw	r2,180(sp)
    ab3c:	203df00e 	bge	r4,zero,a300 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a300>
    ab40:	8c403fcc 	andi	r17,r17,255
    ab44:	00bfffc4 	movi	r2,-1
    ab48:	8c40201c 	xori	r17,r17,128
    ab4c:	d8802915 	stw	r2,164(sp)
    ab50:	8c7fe004 	addi	r17,r17,-128
    ab54:	00380806 	br	8b78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008b78>
    ab58:	9080004c 	andi	r2,r18,1
    ab5c:	0039883a 	mov	fp,zero
    ab60:	10000726 	beq	r2,zero,ab80 <___svfprintf_internal_r+0x2158>
    ab64:	d8c02817 	ldw	r3,160(sp)
    ab68:	dc001dc4 	addi	r16,sp,119
    ab6c:	00800c04 	movi	r2,48
    ab70:	1c07c83a 	sub	r3,r3,r16
    ab74:	d8801dc5 	stb	r2,119(sp)
    ab78:	d8c02e15 	stw	r3,184(sp)
    ab7c:	00395206 	br	90c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090c8>
    ab80:	d8002e15 	stw	zero,184(sp)
    ab84:	dc001e04 	addi	r16,sp,120
    ab88:	00394f06 	br	90c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70090c8>
    ab8c:	0005883a 	mov	r2,zero
    ab90:	003e3206 	br	a45c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a45c>
    ab94:	dd802617 	ldw	r22,152(sp)
    ab98:	003f0606 	br	a7b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a7b4>
    ab9c:	d9c02785 	stb	r7,158(sp)
    aba0:	003a5106 	br	94e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70094e8>
    aba4:	d9c02785 	stb	r7,158(sp)
    aba8:	003a3706 	br	9488 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009488>
    abac:	0005883a 	mov	r2,zero
    abb0:	003f5e06 	br	a92c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a92c>
    abb4:	d9c02785 	stb	r7,158(sp)
    abb8:	00391706 	br	9018 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7009018>
    abbc:	d9c02785 	stb	r7,158(sp)
    abc0:	0038e606 	br	8f5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008f5c>
    abc4:	d8802344 	addi	r2,sp,141
    abc8:	003f0806 	br	a7ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700a7ec>
    abcc:	d9c02785 	stb	r7,158(sp)
    abd0:	0038b706 	br	8eb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008eb0>
    abd4:	d9c02785 	stb	r7,158(sp)
    abd8:	003adc06 	br	974c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700974c>
    abdc:	d9403917 	ldw	r5,228(sp)
    abe0:	00800304 	movi	r2,12
    abe4:	28800015 	stw	r2,0(r5)
    abe8:	00bfffc4 	movi	r2,-1
    abec:	00387806 	br	8dd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7008dd0>
    abf0:	d9c02785 	stb	r7,158(sp)
    abf4:	003abf06 	br	96f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70096f4>
    abf8:	d9c02785 	stb	r7,158(sp)
    abfc:	003a9b06 	br	966c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700966c>

0000ac00 <___vfprintf_internal_r>:
    ac00:	deffb804 	addi	sp,sp,-288
    ac04:	dfc04715 	stw	ra,284(sp)
    ac08:	ddc04515 	stw	r23,276(sp)
    ac0c:	dd404315 	stw	r21,268(sp)
    ac10:	d9002c15 	stw	r4,176(sp)
    ac14:	282f883a 	mov	r23,r5
    ac18:	302b883a 	mov	r21,r6
    ac1c:	d9c02d15 	stw	r7,180(sp)
    ac20:	df004615 	stw	fp,280(sp)
    ac24:	dd804415 	stw	r22,272(sp)
    ac28:	dd004215 	stw	r20,264(sp)
    ac2c:	dcc04115 	stw	r19,260(sp)
    ac30:	dc804015 	stw	r18,256(sp)
    ac34:	dc403f15 	stw	r17,252(sp)
    ac38:	dc003e15 	stw	r16,248(sp)
    ac3c:	000fa180 	call	fa18 <_localeconv_r>
    ac40:	10800017 	ldw	r2,0(r2)
    ac44:	1009883a 	mov	r4,r2
    ac48:	d8803415 	stw	r2,208(sp)
    ac4c:	00089900 	call	8990 <strlen>
    ac50:	d8803715 	stw	r2,220(sp)
    ac54:	d8802c17 	ldw	r2,176(sp)
    ac58:	10000226 	beq	r2,zero,ac64 <___vfprintf_internal_r+0x64>
    ac5c:	10800e17 	ldw	r2,56(r2)
    ac60:	1000f926 	beq	r2,zero,b048 <___vfprintf_internal_r+0x448>
    ac64:	b880030b 	ldhu	r2,12(r23)
    ac68:	10c8000c 	andi	r3,r2,8192
    ac6c:	1800061e 	bne	r3,zero,ac88 <___vfprintf_internal_r+0x88>
    ac70:	b9001917 	ldw	r4,100(r23)
    ac74:	00f7ffc4 	movi	r3,-8193
    ac78:	10880014 	ori	r2,r2,8192
    ac7c:	20c6703a 	and	r3,r4,r3
    ac80:	b880030d 	sth	r2,12(r23)
    ac84:	b8c01915 	stw	r3,100(r23)
    ac88:	10c0020c 	andi	r3,r2,8
    ac8c:	1800c126 	beq	r3,zero,af94 <___vfprintf_internal_r+0x394>
    ac90:	b8c00417 	ldw	r3,16(r23)
    ac94:	1800bf26 	beq	r3,zero,af94 <___vfprintf_internal_r+0x394>
    ac98:	1080068c 	andi	r2,r2,26
    ac9c:	00c00284 	movi	r3,10
    aca0:	10c0c426 	beq	r2,r3,afb4 <___vfprintf_internal_r+0x3b4>
    aca4:	d8c00404 	addi	r3,sp,16
    aca8:	050000b4 	movhi	r20,2
    acac:	d9001e04 	addi	r4,sp,120
    acb0:	a512e684 	addi	r20,r20,19354
    acb4:	d8c01e15 	stw	r3,120(sp)
    acb8:	d8002015 	stw	zero,128(sp)
    acbc:	d8001f15 	stw	zero,124(sp)
    acc0:	d8003315 	stw	zero,204(sp)
    acc4:	d8003615 	stw	zero,216(sp)
    acc8:	d8003815 	stw	zero,224(sp)
    accc:	1811883a 	mov	r8,r3
    acd0:	d8003915 	stw	zero,228(sp)
    acd4:	d8003a15 	stw	zero,232(sp)
    acd8:	d8002f15 	stw	zero,188(sp)
    acdc:	d9002815 	stw	r4,160(sp)
    ace0:	a8800007 	ldb	r2,0(r21)
    ace4:	10027b26 	beq	r2,zero,b6d4 <___vfprintf_internal_r+0xad4>
    ace8:	00c00944 	movi	r3,37
    acec:	a821883a 	mov	r16,r21
    acf0:	10c0021e 	bne	r2,r3,acfc <___vfprintf_internal_r+0xfc>
    acf4:	00001406 	br	ad48 <___vfprintf_internal_r+0x148>
    acf8:	10c00326 	beq	r2,r3,ad08 <___vfprintf_internal_r+0x108>
    acfc:	84000044 	addi	r16,r16,1
    ad00:	80800007 	ldb	r2,0(r16)
    ad04:	103ffc1e 	bne	r2,zero,acf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700acf8>
    ad08:	8563c83a 	sub	r17,r16,r21
    ad0c:	88000e26 	beq	r17,zero,ad48 <___vfprintf_internal_r+0x148>
    ad10:	d8c02017 	ldw	r3,128(sp)
    ad14:	d8801f17 	ldw	r2,124(sp)
    ad18:	45400015 	stw	r21,0(r8)
    ad1c:	1c47883a 	add	r3,r3,r17
    ad20:	10800044 	addi	r2,r2,1
    ad24:	d8c02015 	stw	r3,128(sp)
    ad28:	44400115 	stw	r17,4(r8)
    ad2c:	d8801f15 	stw	r2,124(sp)
    ad30:	00c001c4 	movi	r3,7
    ad34:	1880a716 	blt	r3,r2,afd4 <___vfprintf_internal_r+0x3d4>
    ad38:	42000204 	addi	r8,r8,8
    ad3c:	d9402f17 	ldw	r5,188(sp)
    ad40:	2c4b883a 	add	r5,r5,r17
    ad44:	d9402f15 	stw	r5,188(sp)
    ad48:	80800007 	ldb	r2,0(r16)
    ad4c:	1000a826 	beq	r2,zero,aff0 <___vfprintf_internal_r+0x3f0>
    ad50:	84400047 	ldb	r17,1(r16)
    ad54:	00bfffc4 	movi	r2,-1
    ad58:	85400044 	addi	r21,r16,1
    ad5c:	d8002785 	stb	zero,158(sp)
    ad60:	0007883a 	mov	r3,zero
    ad64:	000f883a 	mov	r7,zero
    ad68:	d8802915 	stw	r2,164(sp)
    ad6c:	d8003115 	stw	zero,196(sp)
    ad70:	0025883a 	mov	r18,zero
    ad74:	01401604 	movi	r5,88
    ad78:	01800244 	movi	r6,9
    ad7c:	02800a84 	movi	r10,42
    ad80:	02401b04 	movi	r9,108
    ad84:	ad400044 	addi	r21,r21,1
    ad88:	88bff804 	addi	r2,r17,-32
    ad8c:	28830436 	bltu	r5,r2,b9a0 <___vfprintf_internal_r+0xda0>
    ad90:	100490ba 	slli	r2,r2,2
    ad94:	01000074 	movhi	r4,1
    ad98:	212b6a04 	addi	r4,r4,-21080
    ad9c:	1105883a 	add	r2,r2,r4
    ada0:	10800017 	ldw	r2,0(r2)
    ada4:	1000683a 	jmp	r2
    ada8:	0000b8c0 	call	b8c <_ZN4Game15distanceToWallsEP6EntityPiS2_S2_S2_+0x134>
    adac:	0000b9a0 	cmpeqi	zero,zero,742
    adb0:	0000b9a0 	cmpeqi	zero,zero,742
    adb4:	0000b8e0 	cmpeqi	zero,zero,739
    adb8:	0000b9a0 	cmpeqi	zero,zero,742
    adbc:	0000b9a0 	cmpeqi	zero,zero,742
    adc0:	0000b9a0 	cmpeqi	zero,zero,742
    adc4:	0000b9a0 	cmpeqi	zero,zero,742
    adc8:	0000b9a0 	cmpeqi	zero,zero,742
    adcc:	0000b9a0 	cmpeqi	zero,zero,742
    add0:	0000b054 	movui	zero,705
    add4:	0000b7fc 	xorhi	zero,zero,735
    add8:	0000b9a0 	cmpeqi	zero,zero,742
    addc:	0000af1c 	xori	zero,zero,700
    ade0:	0000b07c 	xorhi	zero,zero,705
    ade4:	0000b9a0 	cmpeqi	zero,zero,742
    ade8:	0000b0bc 	xorhi	zero,zero,706
    adec:	0000b0c8 	cmpgei	zero,zero,707
    adf0:	0000b0c8 	cmpgei	zero,zero,707
    adf4:	0000b0c8 	cmpgei	zero,zero,707
    adf8:	0000b0c8 	cmpgei	zero,zero,707
    adfc:	0000b0c8 	cmpgei	zero,zero,707
    ae00:	0000b0c8 	cmpgei	zero,zero,707
    ae04:	0000b0c8 	cmpgei	zero,zero,707
    ae08:	0000b0c8 	cmpgei	zero,zero,707
    ae0c:	0000b0c8 	cmpgei	zero,zero,707
    ae10:	0000b9a0 	cmpeqi	zero,zero,742
    ae14:	0000b9a0 	cmpeqi	zero,zero,742
    ae18:	0000b9a0 	cmpeqi	zero,zero,742
    ae1c:	0000b9a0 	cmpeqi	zero,zero,742
    ae20:	0000b9a0 	cmpeqi	zero,zero,742
    ae24:	0000b9a0 	cmpeqi	zero,zero,742
    ae28:	0000b9a0 	cmpeqi	zero,zero,742
    ae2c:	0000b9a0 	cmpeqi	zero,zero,742
    ae30:	0000b9a0 	cmpeqi	zero,zero,742
    ae34:	0000b9a0 	cmpeqi	zero,zero,742
    ae38:	0000b0fc 	xorhi	zero,zero,707
    ae3c:	0000b1b8 	rdprs	zero,zero,710
    ae40:	0000b9a0 	cmpeqi	zero,zero,742
    ae44:	0000b1b8 	rdprs	zero,zero,710
    ae48:	0000b9a0 	cmpeqi	zero,zero,742
    ae4c:	0000b9a0 	cmpeqi	zero,zero,742
    ae50:	0000b9a0 	cmpeqi	zero,zero,742
    ae54:	0000b9a0 	cmpeqi	zero,zero,742
    ae58:	0000b258 	cmpnei	zero,zero,713
    ae5c:	0000b9a0 	cmpeqi	zero,zero,742
    ae60:	0000b9a0 	cmpeqi	zero,zero,742
    ae64:	0000b264 	muli	zero,zero,713
    ae68:	0000b9a0 	cmpeqi	zero,zero,742
    ae6c:	0000b9a0 	cmpeqi	zero,zero,742
    ae70:	0000b9a0 	cmpeqi	zero,zero,742
    ae74:	0000b9a0 	cmpeqi	zero,zero,742
    ae78:	0000b9a0 	cmpeqi	zero,zero,742
    ae7c:	0000b6dc 	xori	zero,zero,731
    ae80:	0000b9a0 	cmpeqi	zero,zero,742
    ae84:	0000b9a0 	cmpeqi	zero,zero,742
    ae88:	0000b73c 	xorhi	zero,zero,732
    ae8c:	0000b9a0 	cmpeqi	zero,zero,742
    ae90:	0000b9a0 	cmpeqi	zero,zero,742
    ae94:	0000b9a0 	cmpeqi	zero,zero,742
    ae98:	0000b9a0 	cmpeqi	zero,zero,742
    ae9c:	0000b9a0 	cmpeqi	zero,zero,742
    aea0:	0000b9a0 	cmpeqi	zero,zero,742
    aea4:	0000b9a0 	cmpeqi	zero,zero,742
    aea8:	0000b9a0 	cmpeqi	zero,zero,742
    aeac:	0000b9a0 	cmpeqi	zero,zero,742
    aeb0:	0000b9a0 	cmpeqi	zero,zero,742
    aeb4:	0000b94c 	andi	zero,zero,741
    aeb8:	0000b8ec 	andhi	zero,zero,739
    aebc:	0000b1b8 	rdprs	zero,zero,710
    aec0:	0000b1b8 	rdprs	zero,zero,710
    aec4:	0000b1b8 	rdprs	zero,zero,710
    aec8:	0000b8fc 	xorhi	zero,zero,739
    aecc:	0000b8ec 	andhi	zero,zero,739
    aed0:	0000b9a0 	cmpeqi	zero,zero,742
    aed4:	0000b9a0 	cmpeqi	zero,zero,742
    aed8:	0000b908 	cmpgei	zero,zero,740
    aedc:	0000b9a0 	cmpeqi	zero,zero,742
    aee0:	0000b918 	cmpnei	zero,zero,740
    aee4:	0000b7ec 	andhi	zero,zero,735
    aee8:	0000af28 	cmpgeui	zero,zero,700
    aeec:	0000b80c 	andi	zero,zero,736
    aef0:	0000b9a0 	cmpeqi	zero,zero,742
    aef4:	0000b818 	cmpnei	zero,zero,736
    aef8:	0000b9a0 	cmpeqi	zero,zero,742
    aefc:	0000b874 	movhi	zero,737
    af00:	0000b9a0 	cmpeqi	zero,zero,742
    af04:	0000b9a0 	cmpeqi	zero,zero,742
    af08:	0000b884 	movi	zero,738
    af0c:	d9003117 	ldw	r4,196(sp)
    af10:	d8802d15 	stw	r2,180(sp)
    af14:	0109c83a 	sub	r4,zero,r4
    af18:	d9003115 	stw	r4,196(sp)
    af1c:	94800114 	ori	r18,r18,4
    af20:	ac400007 	ldb	r17,0(r21)
    af24:	003f9706 	br	ad84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad84>
    af28:	00800c04 	movi	r2,48
    af2c:	d9002d17 	ldw	r4,180(sp)
    af30:	d9402917 	ldw	r5,164(sp)
    af34:	d8802705 	stb	r2,156(sp)
    af38:	00801e04 	movi	r2,120
    af3c:	d8802745 	stb	r2,157(sp)
    af40:	d8002785 	stb	zero,158(sp)
    af44:	20c00104 	addi	r3,r4,4
    af48:	24c00017 	ldw	r19,0(r4)
    af4c:	002d883a 	mov	r22,zero
    af50:	90800094 	ori	r2,r18,2
    af54:	28029a16 	blt	r5,zero,b9c0 <___vfprintf_internal_r+0xdc0>
    af58:	00bfdfc4 	movi	r2,-129
    af5c:	90a4703a 	and	r18,r18,r2
    af60:	d8c02d15 	stw	r3,180(sp)
    af64:	94800094 	ori	r18,r18,2
    af68:	9802871e 	bne	r19,zero,b988 <___vfprintf_internal_r+0xd88>
    af6c:	008000b4 	movhi	r2,2
    af70:	1092d704 	addi	r2,r2,19292
    af74:	d8803915 	stw	r2,228(sp)
    af78:	04401e04 	movi	r17,120
    af7c:	d8802917 	ldw	r2,164(sp)
    af80:	0039883a 	mov	fp,zero
    af84:	1001e926 	beq	r2,zero,b72c <___vfprintf_internal_r+0xb2c>
    af88:	0027883a 	mov	r19,zero
    af8c:	002d883a 	mov	r22,zero
    af90:	00020506 	br	b7a8 <___vfprintf_internal_r+0xba8>
    af94:	d9002c17 	ldw	r4,176(sp)
    af98:	b80b883a 	mov	r5,r23
    af9c:	000ced00 	call	ced0 <__swsetup_r>
    afa0:	1005ac1e 	bne	r2,zero,c654 <___vfprintf_internal_r+0x1a54>
    afa4:	b880030b 	ldhu	r2,12(r23)
    afa8:	00c00284 	movi	r3,10
    afac:	1080068c 	andi	r2,r2,26
    afb0:	10ff3c1e 	bne	r2,r3,aca4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aca4>
    afb4:	b880038f 	ldh	r2,14(r23)
    afb8:	103f3a16 	blt	r2,zero,aca4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aca4>
    afbc:	d9c02d17 	ldw	r7,180(sp)
    afc0:	d9002c17 	ldw	r4,176(sp)
    afc4:	a80d883a 	mov	r6,r21
    afc8:	b80b883a 	mov	r5,r23
    afcc:	000ce140 	call	ce14 <__sbprintf>
    afd0:	00001106 	br	b018 <___vfprintf_internal_r+0x418>
    afd4:	d9002c17 	ldw	r4,176(sp)
    afd8:	d9801e04 	addi	r6,sp,120
    afdc:	b80b883a 	mov	r5,r23
    afe0:	0012a5c0 	call	12a5c <__sprint_r>
    afe4:	1000081e 	bne	r2,zero,b008 <___vfprintf_internal_r+0x408>
    afe8:	da000404 	addi	r8,sp,16
    afec:	003f5306 	br	ad3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad3c>
    aff0:	d8802017 	ldw	r2,128(sp)
    aff4:	10000426 	beq	r2,zero,b008 <___vfprintf_internal_r+0x408>
    aff8:	d9002c17 	ldw	r4,176(sp)
    affc:	d9801e04 	addi	r6,sp,120
    b000:	b80b883a 	mov	r5,r23
    b004:	0012a5c0 	call	12a5c <__sprint_r>
    b008:	b880030b 	ldhu	r2,12(r23)
    b00c:	1080100c 	andi	r2,r2,64
    b010:	1005901e 	bne	r2,zero,c654 <___vfprintf_internal_r+0x1a54>
    b014:	d8802f17 	ldw	r2,188(sp)
    b018:	dfc04717 	ldw	ra,284(sp)
    b01c:	df004617 	ldw	fp,280(sp)
    b020:	ddc04517 	ldw	r23,276(sp)
    b024:	dd804417 	ldw	r22,272(sp)
    b028:	dd404317 	ldw	r21,268(sp)
    b02c:	dd004217 	ldw	r20,264(sp)
    b030:	dcc04117 	ldw	r19,260(sp)
    b034:	dc804017 	ldw	r18,256(sp)
    b038:	dc403f17 	ldw	r17,252(sp)
    b03c:	dc003e17 	ldw	r16,248(sp)
    b040:	dec04804 	addi	sp,sp,288
    b044:	f800283a 	ret
    b048:	d9002c17 	ldw	r4,176(sp)
    b04c:	000eea40 	call	eea4 <__sinit>
    b050:	003f0406 	br	ac64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ac64>
    b054:	d8802d17 	ldw	r2,180(sp)
    b058:	d9002d17 	ldw	r4,180(sp)
    b05c:	10800017 	ldw	r2,0(r2)
    b060:	d8803115 	stw	r2,196(sp)
    b064:	20800104 	addi	r2,r4,4
    b068:	d9003117 	ldw	r4,196(sp)
    b06c:	203fa716 	blt	r4,zero,af0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af0c>
    b070:	d8802d15 	stw	r2,180(sp)
    b074:	ac400007 	ldb	r17,0(r21)
    b078:	003f4206 	br	ad84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad84>
    b07c:	ac400007 	ldb	r17,0(r21)
    b080:	aac00044 	addi	r11,r21,1
    b084:	8a872826 	beq	r17,r10,cd28 <___vfprintf_internal_r+0x2128>
    b088:	88bff404 	addi	r2,r17,-48
    b08c:	0009883a 	mov	r4,zero
    b090:	30867d36 	bltu	r6,r2,ca88 <___vfprintf_internal_r+0x1e88>
    b094:	5c400007 	ldb	r17,0(r11)
    b098:	210002a4 	muli	r4,r4,10
    b09c:	5d400044 	addi	r21,r11,1
    b0a0:	a817883a 	mov	r11,r21
    b0a4:	2089883a 	add	r4,r4,r2
    b0a8:	88bff404 	addi	r2,r17,-48
    b0ac:	30bff92e 	bgeu	r6,r2,b094 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b094>
    b0b0:	2005c916 	blt	r4,zero,c7d8 <___vfprintf_internal_r+0x1bd8>
    b0b4:	d9002915 	stw	r4,164(sp)
    b0b8:	003f3306 	br	ad88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad88>
    b0bc:	94802014 	ori	r18,r18,128
    b0c0:	ac400007 	ldb	r17,0(r21)
    b0c4:	003f2f06 	br	ad84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad84>
    b0c8:	a809883a 	mov	r4,r21
    b0cc:	d8003115 	stw	zero,196(sp)
    b0d0:	88bff404 	addi	r2,r17,-48
    b0d4:	0017883a 	mov	r11,zero
    b0d8:	24400007 	ldb	r17,0(r4)
    b0dc:	5ac002a4 	muli	r11,r11,10
    b0e0:	ad400044 	addi	r21,r21,1
    b0e4:	a809883a 	mov	r4,r21
    b0e8:	12d7883a 	add	r11,r2,r11
    b0ec:	88bff404 	addi	r2,r17,-48
    b0f0:	30bff92e 	bgeu	r6,r2,b0d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b0d8>
    b0f4:	dac03115 	stw	r11,196(sp)
    b0f8:	003f2306 	br	ad88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad88>
    b0fc:	18c03fcc 	andi	r3,r3,255
    b100:	18072b1e 	bne	r3,zero,cdb0 <___vfprintf_internal_r+0x21b0>
    b104:	94800414 	ori	r18,r18,16
    b108:	9080080c 	andi	r2,r18,32
    b10c:	10037b26 	beq	r2,zero,befc <___vfprintf_internal_r+0x12fc>
    b110:	d9402d17 	ldw	r5,180(sp)
    b114:	28800117 	ldw	r2,4(r5)
    b118:	2cc00017 	ldw	r19,0(r5)
    b11c:	29400204 	addi	r5,r5,8
    b120:	d9402d15 	stw	r5,180(sp)
    b124:	102d883a 	mov	r22,r2
    b128:	10044b16 	blt	r2,zero,c258 <___vfprintf_internal_r+0x1658>
    b12c:	d9402917 	ldw	r5,164(sp)
    b130:	df002783 	ldbu	fp,158(sp)
    b134:	2803bc16 	blt	r5,zero,c028 <___vfprintf_internal_r+0x1428>
    b138:	00ffdfc4 	movi	r3,-129
    b13c:	9d84b03a 	or	r2,r19,r22
    b140:	90e4703a 	and	r18,r18,r3
    b144:	10017726 	beq	r2,zero,b724 <___vfprintf_internal_r+0xb24>
    b148:	b0038326 	beq	r22,zero,bf58 <___vfprintf_internal_r+0x1358>
    b14c:	dc402a15 	stw	r17,168(sp)
    b150:	dc001e04 	addi	r16,sp,120
    b154:	b023883a 	mov	r17,r22
    b158:	402d883a 	mov	r22,r8
    b15c:	9809883a 	mov	r4,r19
    b160:	880b883a 	mov	r5,r17
    b164:	01800284 	movi	r6,10
    b168:	000f883a 	mov	r7,zero
    b16c:	0014e540 	call	14e54 <__umoddi3>
    b170:	10800c04 	addi	r2,r2,48
    b174:	843fffc4 	addi	r16,r16,-1
    b178:	9809883a 	mov	r4,r19
    b17c:	880b883a 	mov	r5,r17
    b180:	80800005 	stb	r2,0(r16)
    b184:	01800284 	movi	r6,10
    b188:	000f883a 	mov	r7,zero
    b18c:	00148dc0 	call	148dc <__udivdi3>
    b190:	1027883a 	mov	r19,r2
    b194:	10c4b03a 	or	r2,r2,r3
    b198:	1823883a 	mov	r17,r3
    b19c:	103fef1e 	bne	r2,zero,b15c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b15c>
    b1a0:	d8c02817 	ldw	r3,160(sp)
    b1a4:	dc402a17 	ldw	r17,168(sp)
    b1a8:	b011883a 	mov	r8,r22
    b1ac:	1c07c83a 	sub	r3,r3,r16
    b1b0:	d8c02e15 	stw	r3,184(sp)
    b1b4:	00005906 	br	b31c <___vfprintf_internal_r+0x71c>
    b1b8:	18c03fcc 	andi	r3,r3,255
    b1bc:	1806fa1e 	bne	r3,zero,cda8 <___vfprintf_internal_r+0x21a8>
    b1c0:	9080020c 	andi	r2,r18,8
    b1c4:	10048a26 	beq	r2,zero,c3f0 <___vfprintf_internal_r+0x17f0>
    b1c8:	d8c02d17 	ldw	r3,180(sp)
    b1cc:	d9002d17 	ldw	r4,180(sp)
    b1d0:	d9402d17 	ldw	r5,180(sp)
    b1d4:	18c00017 	ldw	r3,0(r3)
    b1d8:	21000117 	ldw	r4,4(r4)
    b1dc:	29400204 	addi	r5,r5,8
    b1e0:	d8c03615 	stw	r3,216(sp)
    b1e4:	d9003815 	stw	r4,224(sp)
    b1e8:	d9402d15 	stw	r5,180(sp)
    b1ec:	d9003617 	ldw	r4,216(sp)
    b1f0:	d9403817 	ldw	r5,224(sp)
    b1f4:	da003d15 	stw	r8,244(sp)
    b1f8:	04000044 	movi	r16,1
    b1fc:	00113a40 	call	113a4 <__fpclassifyd>
    b200:	da003d17 	ldw	r8,244(sp)
    b204:	14041f1e 	bne	r2,r16,c284 <___vfprintf_internal_r+0x1684>
    b208:	d9003617 	ldw	r4,216(sp)
    b20c:	d9403817 	ldw	r5,224(sp)
    b210:	000d883a 	mov	r6,zero
    b214:	000f883a 	mov	r7,zero
    b218:	0015f8c0 	call	15f8c <__ledf2>
    b21c:	da003d17 	ldw	r8,244(sp)
    b220:	1005be16 	blt	r2,zero,c91c <___vfprintf_internal_r+0x1d1c>
    b224:	df002783 	ldbu	fp,158(sp)
    b228:	008011c4 	movi	r2,71
    b22c:	1445330e 	bge	r2,r17,c6fc <___vfprintf_internal_r+0x1afc>
    b230:	040000b4 	movhi	r16,2
    b234:	8412cf04 	addi	r16,r16,19260
    b238:	00c000c4 	movi	r3,3
    b23c:	00bfdfc4 	movi	r2,-129
    b240:	d8c02a15 	stw	r3,168(sp)
    b244:	90a4703a 	and	r18,r18,r2
    b248:	d8c02e15 	stw	r3,184(sp)
    b24c:	d8002915 	stw	zero,164(sp)
    b250:	d8003215 	stw	zero,200(sp)
    b254:	00003706 	br	b334 <___vfprintf_internal_r+0x734>
    b258:	94800214 	ori	r18,r18,8
    b25c:	ac400007 	ldb	r17,0(r21)
    b260:	003ec806 	br	ad84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad84>
    b264:	18c03fcc 	andi	r3,r3,255
    b268:	1806db1e 	bne	r3,zero,cdd8 <___vfprintf_internal_r+0x21d8>
    b26c:	94800414 	ori	r18,r18,16
    b270:	9080080c 	andi	r2,r18,32
    b274:	1002d826 	beq	r2,zero,bdd8 <___vfprintf_internal_r+0x11d8>
    b278:	d9402d17 	ldw	r5,180(sp)
    b27c:	d8c02917 	ldw	r3,164(sp)
    b280:	d8002785 	stb	zero,158(sp)
    b284:	28800204 	addi	r2,r5,8
    b288:	2cc00017 	ldw	r19,0(r5)
    b28c:	2d800117 	ldw	r22,4(r5)
    b290:	18048f16 	blt	r3,zero,c4d0 <___vfprintf_internal_r+0x18d0>
    b294:	013fdfc4 	movi	r4,-129
    b298:	9d86b03a 	or	r3,r19,r22
    b29c:	d8802d15 	stw	r2,180(sp)
    b2a0:	9124703a 	and	r18,r18,r4
    b2a4:	1802d91e 	bne	r3,zero,be0c <___vfprintf_internal_r+0x120c>
    b2a8:	d8c02917 	ldw	r3,164(sp)
    b2ac:	0039883a 	mov	fp,zero
    b2b0:	1805c326 	beq	r3,zero,c9c0 <___vfprintf_internal_r+0x1dc0>
    b2b4:	0027883a 	mov	r19,zero
    b2b8:	002d883a 	mov	r22,zero
    b2bc:	dc001e04 	addi	r16,sp,120
    b2c0:	9806d0fa 	srli	r3,r19,3
    b2c4:	b008977a 	slli	r4,r22,29
    b2c8:	b02cd0fa 	srli	r22,r22,3
    b2cc:	9cc001cc 	andi	r19,r19,7
    b2d0:	98800c04 	addi	r2,r19,48
    b2d4:	843fffc4 	addi	r16,r16,-1
    b2d8:	20e6b03a 	or	r19,r4,r3
    b2dc:	80800005 	stb	r2,0(r16)
    b2e0:	9d86b03a 	or	r3,r19,r22
    b2e4:	183ff61e 	bne	r3,zero,b2c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2c0>
    b2e8:	90c0004c 	andi	r3,r18,1
    b2ec:	18013b26 	beq	r3,zero,b7dc <___vfprintf_internal_r+0xbdc>
    b2f0:	10803fcc 	andi	r2,r2,255
    b2f4:	1080201c 	xori	r2,r2,128
    b2f8:	10bfe004 	addi	r2,r2,-128
    b2fc:	00c00c04 	movi	r3,48
    b300:	10c13626 	beq	r2,r3,b7dc <___vfprintf_internal_r+0xbdc>
    b304:	80ffffc5 	stb	r3,-1(r16)
    b308:	d8c02817 	ldw	r3,160(sp)
    b30c:	80bfffc4 	addi	r2,r16,-1
    b310:	1021883a 	mov	r16,r2
    b314:	1887c83a 	sub	r3,r3,r2
    b318:	d8c02e15 	stw	r3,184(sp)
    b31c:	d8802e17 	ldw	r2,184(sp)
    b320:	d9002917 	ldw	r4,164(sp)
    b324:	1100010e 	bge	r2,r4,b32c <___vfprintf_internal_r+0x72c>
    b328:	2005883a 	mov	r2,r4
    b32c:	d8802a15 	stw	r2,168(sp)
    b330:	d8003215 	stw	zero,200(sp)
    b334:	e7003fcc 	andi	fp,fp,255
    b338:	e700201c 	xori	fp,fp,128
    b33c:	e73fe004 	addi	fp,fp,-128
    b340:	e0000326 	beq	fp,zero,b350 <___vfprintf_internal_r+0x750>
    b344:	d8c02a17 	ldw	r3,168(sp)
    b348:	18c00044 	addi	r3,r3,1
    b34c:	d8c02a15 	stw	r3,168(sp)
    b350:	90c0008c 	andi	r3,r18,2
    b354:	d8c02b15 	stw	r3,172(sp)
    b358:	18000326 	beq	r3,zero,b368 <___vfprintf_internal_r+0x768>
    b35c:	d8c02a17 	ldw	r3,168(sp)
    b360:	18c00084 	addi	r3,r3,2
    b364:	d8c02a15 	stw	r3,168(sp)
    b368:	90c0210c 	andi	r3,r18,132
    b36c:	d8c03015 	stw	r3,192(sp)
    b370:	1801a31e 	bne	r3,zero,ba00 <___vfprintf_internal_r+0xe00>
    b374:	d9003117 	ldw	r4,196(sp)
    b378:	d8c02a17 	ldw	r3,168(sp)
    b37c:	20e7c83a 	sub	r19,r4,r3
    b380:	04c19f0e 	bge	zero,r19,ba00 <___vfprintf_internal_r+0xe00>
    b384:	02400404 	movi	r9,16
    b388:	d8c02017 	ldw	r3,128(sp)
    b38c:	d8801f17 	ldw	r2,124(sp)
    b390:	4cc50d0e 	bge	r9,r19,c7c8 <___vfprintf_internal_r+0x1bc8>
    b394:	014000b4 	movhi	r5,2
    b398:	2952ea84 	addi	r5,r5,19370
    b39c:	dc403b15 	stw	r17,236(sp)
    b3a0:	d9403515 	stw	r5,212(sp)
    b3a4:	9823883a 	mov	r17,r19
    b3a8:	482d883a 	mov	r22,r9
    b3ac:	9027883a 	mov	r19,r18
    b3b0:	070001c4 	movi	fp,7
    b3b4:	8025883a 	mov	r18,r16
    b3b8:	dc002c17 	ldw	r16,176(sp)
    b3bc:	00000306 	br	b3cc <___vfprintf_internal_r+0x7cc>
    b3c0:	8c7ffc04 	addi	r17,r17,-16
    b3c4:	42000204 	addi	r8,r8,8
    b3c8:	b440130e 	bge	r22,r17,b418 <___vfprintf_internal_r+0x818>
    b3cc:	010000b4 	movhi	r4,2
    b3d0:	18c00404 	addi	r3,r3,16
    b3d4:	10800044 	addi	r2,r2,1
    b3d8:	2112ea84 	addi	r4,r4,19370
    b3dc:	41000015 	stw	r4,0(r8)
    b3e0:	45800115 	stw	r22,4(r8)
    b3e4:	d8c02015 	stw	r3,128(sp)
    b3e8:	d8801f15 	stw	r2,124(sp)
    b3ec:	e0bff40e 	bge	fp,r2,b3c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b3c0>
    b3f0:	d9801e04 	addi	r6,sp,120
    b3f4:	b80b883a 	mov	r5,r23
    b3f8:	8009883a 	mov	r4,r16
    b3fc:	0012a5c0 	call	12a5c <__sprint_r>
    b400:	103f011e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    b404:	8c7ffc04 	addi	r17,r17,-16
    b408:	d8c02017 	ldw	r3,128(sp)
    b40c:	d8801f17 	ldw	r2,124(sp)
    b410:	da000404 	addi	r8,sp,16
    b414:	b47fed16 	blt	r22,r17,b3cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b3cc>
    b418:	9021883a 	mov	r16,r18
    b41c:	9825883a 	mov	r18,r19
    b420:	8827883a 	mov	r19,r17
    b424:	dc403b17 	ldw	r17,236(sp)
    b428:	d9403517 	ldw	r5,212(sp)
    b42c:	98c7883a 	add	r3,r19,r3
    b430:	10800044 	addi	r2,r2,1
    b434:	41400015 	stw	r5,0(r8)
    b438:	44c00115 	stw	r19,4(r8)
    b43c:	d8c02015 	stw	r3,128(sp)
    b440:	d8801f15 	stw	r2,124(sp)
    b444:	010001c4 	movi	r4,7
    b448:	2082a316 	blt	r4,r2,bed8 <___vfprintf_internal_r+0x12d8>
    b44c:	df002787 	ldb	fp,158(sp)
    b450:	42000204 	addi	r8,r8,8
    b454:	e0000c26 	beq	fp,zero,b488 <___vfprintf_internal_r+0x888>
    b458:	d8801f17 	ldw	r2,124(sp)
    b45c:	d9002784 	addi	r4,sp,158
    b460:	18c00044 	addi	r3,r3,1
    b464:	10800044 	addi	r2,r2,1
    b468:	41000015 	stw	r4,0(r8)
    b46c:	01000044 	movi	r4,1
    b470:	41000115 	stw	r4,4(r8)
    b474:	d8c02015 	stw	r3,128(sp)
    b478:	d8801f15 	stw	r2,124(sp)
    b47c:	010001c4 	movi	r4,7
    b480:	20823c16 	blt	r4,r2,bd74 <___vfprintf_internal_r+0x1174>
    b484:	42000204 	addi	r8,r8,8
    b488:	d8802b17 	ldw	r2,172(sp)
    b48c:	10000c26 	beq	r2,zero,b4c0 <___vfprintf_internal_r+0x8c0>
    b490:	d8801f17 	ldw	r2,124(sp)
    b494:	d9002704 	addi	r4,sp,156
    b498:	18c00084 	addi	r3,r3,2
    b49c:	10800044 	addi	r2,r2,1
    b4a0:	41000015 	stw	r4,0(r8)
    b4a4:	01000084 	movi	r4,2
    b4a8:	41000115 	stw	r4,4(r8)
    b4ac:	d8c02015 	stw	r3,128(sp)
    b4b0:	d8801f15 	stw	r2,124(sp)
    b4b4:	010001c4 	movi	r4,7
    b4b8:	20823616 	blt	r4,r2,bd94 <___vfprintf_internal_r+0x1194>
    b4bc:	42000204 	addi	r8,r8,8
    b4c0:	d9003017 	ldw	r4,192(sp)
    b4c4:	00802004 	movi	r2,128
    b4c8:	20819926 	beq	r4,r2,bb30 <___vfprintf_internal_r+0xf30>
    b4cc:	d9402917 	ldw	r5,164(sp)
    b4d0:	d8802e17 	ldw	r2,184(sp)
    b4d4:	28adc83a 	sub	r22,r5,r2
    b4d8:	0580310e 	bge	zero,r22,b5a0 <___vfprintf_internal_r+0x9a0>
    b4dc:	07000404 	movi	fp,16
    b4e0:	d8801f17 	ldw	r2,124(sp)
    b4e4:	e584140e 	bge	fp,r22,c538 <___vfprintf_internal_r+0x1938>
    b4e8:	014000b4 	movhi	r5,2
    b4ec:	2952e684 	addi	r5,r5,19354
    b4f0:	dc402915 	stw	r17,164(sp)
    b4f4:	d9402b15 	stw	r5,172(sp)
    b4f8:	b023883a 	mov	r17,r22
    b4fc:	04c001c4 	movi	r19,7
    b500:	a82d883a 	mov	r22,r21
    b504:	902b883a 	mov	r21,r18
    b508:	8025883a 	mov	r18,r16
    b50c:	dc002c17 	ldw	r16,176(sp)
    b510:	00000306 	br	b520 <___vfprintf_internal_r+0x920>
    b514:	8c7ffc04 	addi	r17,r17,-16
    b518:	42000204 	addi	r8,r8,8
    b51c:	e440110e 	bge	fp,r17,b564 <___vfprintf_internal_r+0x964>
    b520:	18c00404 	addi	r3,r3,16
    b524:	10800044 	addi	r2,r2,1
    b528:	45000015 	stw	r20,0(r8)
    b52c:	47000115 	stw	fp,4(r8)
    b530:	d8c02015 	stw	r3,128(sp)
    b534:	d8801f15 	stw	r2,124(sp)
    b538:	98bff60e 	bge	r19,r2,b514 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b514>
    b53c:	d9801e04 	addi	r6,sp,120
    b540:	b80b883a 	mov	r5,r23
    b544:	8009883a 	mov	r4,r16
    b548:	0012a5c0 	call	12a5c <__sprint_r>
    b54c:	103eae1e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    b550:	8c7ffc04 	addi	r17,r17,-16
    b554:	d8c02017 	ldw	r3,128(sp)
    b558:	d8801f17 	ldw	r2,124(sp)
    b55c:	da000404 	addi	r8,sp,16
    b560:	e47fef16 	blt	fp,r17,b520 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b520>
    b564:	9021883a 	mov	r16,r18
    b568:	a825883a 	mov	r18,r21
    b56c:	b02b883a 	mov	r21,r22
    b570:	882d883a 	mov	r22,r17
    b574:	dc402917 	ldw	r17,164(sp)
    b578:	d9002b17 	ldw	r4,172(sp)
    b57c:	1d87883a 	add	r3,r3,r22
    b580:	10800044 	addi	r2,r2,1
    b584:	41000015 	stw	r4,0(r8)
    b588:	45800115 	stw	r22,4(r8)
    b58c:	d8c02015 	stw	r3,128(sp)
    b590:	d8801f15 	stw	r2,124(sp)
    b594:	010001c4 	movi	r4,7
    b598:	2081ee16 	blt	r4,r2,bd54 <___vfprintf_internal_r+0x1154>
    b59c:	42000204 	addi	r8,r8,8
    b5a0:	9080400c 	andi	r2,r18,256
    b5a4:	1001181e 	bne	r2,zero,ba08 <___vfprintf_internal_r+0xe08>
    b5a8:	d9402e17 	ldw	r5,184(sp)
    b5ac:	d8801f17 	ldw	r2,124(sp)
    b5b0:	44000015 	stw	r16,0(r8)
    b5b4:	1947883a 	add	r3,r3,r5
    b5b8:	10800044 	addi	r2,r2,1
    b5bc:	41400115 	stw	r5,4(r8)
    b5c0:	d8c02015 	stw	r3,128(sp)
    b5c4:	d8801f15 	stw	r2,124(sp)
    b5c8:	010001c4 	movi	r4,7
    b5cc:	2081d316 	blt	r4,r2,bd1c <___vfprintf_internal_r+0x111c>
    b5d0:	42000204 	addi	r8,r8,8
    b5d4:	9480010c 	andi	r18,r18,4
    b5d8:	90003226 	beq	r18,zero,b6a4 <___vfprintf_internal_r+0xaa4>
    b5dc:	d9403117 	ldw	r5,196(sp)
    b5e0:	d8802a17 	ldw	r2,168(sp)
    b5e4:	28a1c83a 	sub	r16,r5,r2
    b5e8:	04002e0e 	bge	zero,r16,b6a4 <___vfprintf_internal_r+0xaa4>
    b5ec:	04400404 	movi	r17,16
    b5f0:	d8801f17 	ldw	r2,124(sp)
    b5f4:	8c04a20e 	bge	r17,r16,c880 <___vfprintf_internal_r+0x1c80>
    b5f8:	014000b4 	movhi	r5,2
    b5fc:	2952ea84 	addi	r5,r5,19370
    b600:	d9403515 	stw	r5,212(sp)
    b604:	048001c4 	movi	r18,7
    b608:	dcc02c17 	ldw	r19,176(sp)
    b60c:	00000306 	br	b61c <___vfprintf_internal_r+0xa1c>
    b610:	843ffc04 	addi	r16,r16,-16
    b614:	42000204 	addi	r8,r8,8
    b618:	8c00130e 	bge	r17,r16,b668 <___vfprintf_internal_r+0xa68>
    b61c:	010000b4 	movhi	r4,2
    b620:	18c00404 	addi	r3,r3,16
    b624:	10800044 	addi	r2,r2,1
    b628:	2112ea84 	addi	r4,r4,19370
    b62c:	41000015 	stw	r4,0(r8)
    b630:	44400115 	stw	r17,4(r8)
    b634:	d8c02015 	stw	r3,128(sp)
    b638:	d8801f15 	stw	r2,124(sp)
    b63c:	90bff40e 	bge	r18,r2,b610 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b610>
    b640:	d9801e04 	addi	r6,sp,120
    b644:	b80b883a 	mov	r5,r23
    b648:	9809883a 	mov	r4,r19
    b64c:	0012a5c0 	call	12a5c <__sprint_r>
    b650:	103e6d1e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    b654:	843ffc04 	addi	r16,r16,-16
    b658:	d8c02017 	ldw	r3,128(sp)
    b65c:	d8801f17 	ldw	r2,124(sp)
    b660:	da000404 	addi	r8,sp,16
    b664:	8c3fed16 	blt	r17,r16,b61c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b61c>
    b668:	d9403517 	ldw	r5,212(sp)
    b66c:	1c07883a 	add	r3,r3,r16
    b670:	10800044 	addi	r2,r2,1
    b674:	41400015 	stw	r5,0(r8)
    b678:	44000115 	stw	r16,4(r8)
    b67c:	d8c02015 	stw	r3,128(sp)
    b680:	d8801f15 	stw	r2,124(sp)
    b684:	010001c4 	movi	r4,7
    b688:	2080060e 	bge	r4,r2,b6a4 <___vfprintf_internal_r+0xaa4>
    b68c:	d9002c17 	ldw	r4,176(sp)
    b690:	d9801e04 	addi	r6,sp,120
    b694:	b80b883a 	mov	r5,r23
    b698:	0012a5c0 	call	12a5c <__sprint_r>
    b69c:	103e5a1e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    b6a0:	d8c02017 	ldw	r3,128(sp)
    b6a4:	d8803117 	ldw	r2,196(sp)
    b6a8:	d9002a17 	ldw	r4,168(sp)
    b6ac:	1100010e 	bge	r2,r4,b6b4 <___vfprintf_internal_r+0xab4>
    b6b0:	2005883a 	mov	r2,r4
    b6b4:	d9402f17 	ldw	r5,188(sp)
    b6b8:	288b883a 	add	r5,r5,r2
    b6bc:	d9402f15 	stw	r5,188(sp)
    b6c0:	18019e1e 	bne	r3,zero,bd3c <___vfprintf_internal_r+0x113c>
    b6c4:	a8800007 	ldb	r2,0(r21)
    b6c8:	d8001f15 	stw	zero,124(sp)
    b6cc:	da000404 	addi	r8,sp,16
    b6d0:	103d851e 	bne	r2,zero,ace8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ace8>
    b6d4:	a821883a 	mov	r16,r21
    b6d8:	003d9b06 	br	ad48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad48>
    b6dc:	18c03fcc 	andi	r3,r3,255
    b6e0:	1805c11e 	bne	r3,zero,cde8 <___vfprintf_internal_r+0x21e8>
    b6e4:	94800414 	ori	r18,r18,16
    b6e8:	9080080c 	andi	r2,r18,32
    b6ec:	10020c26 	beq	r2,zero,bf20 <___vfprintf_internal_r+0x1320>
    b6f0:	d8802d17 	ldw	r2,180(sp)
    b6f4:	d9002917 	ldw	r4,164(sp)
    b6f8:	d8002785 	stb	zero,158(sp)
    b6fc:	10c00204 	addi	r3,r2,8
    b700:	14c00017 	ldw	r19,0(r2)
    b704:	15800117 	ldw	r22,4(r2)
    b708:	20040f16 	blt	r4,zero,c748 <___vfprintf_internal_r+0x1b48>
    b70c:	013fdfc4 	movi	r4,-129
    b710:	9d84b03a 	or	r2,r19,r22
    b714:	d8c02d15 	stw	r3,180(sp)
    b718:	9124703a 	and	r18,r18,r4
    b71c:	0039883a 	mov	fp,zero
    b720:	103e891e 	bne	r2,zero,b148 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b148>
    b724:	d9002917 	ldw	r4,164(sp)
    b728:	2002c11e 	bne	r4,zero,c230 <___vfprintf_internal_r+0x1630>
    b72c:	d8002915 	stw	zero,164(sp)
    b730:	d8002e15 	stw	zero,184(sp)
    b734:	dc001e04 	addi	r16,sp,120
    b738:	003ef806 	br	b31c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b31c>
    b73c:	18c03fcc 	andi	r3,r3,255
    b740:	18059d1e 	bne	r3,zero,cdb8 <___vfprintf_internal_r+0x21b8>
    b744:	014000b4 	movhi	r5,2
    b748:	2952d204 	addi	r5,r5,19272
    b74c:	d9403915 	stw	r5,228(sp)
    b750:	9080080c 	andi	r2,r18,32
    b754:	10005226 	beq	r2,zero,b8a0 <___vfprintf_internal_r+0xca0>
    b758:	d8802d17 	ldw	r2,180(sp)
    b75c:	14c00017 	ldw	r19,0(r2)
    b760:	15800117 	ldw	r22,4(r2)
    b764:	10800204 	addi	r2,r2,8
    b768:	d8802d15 	stw	r2,180(sp)
    b76c:	9080004c 	andi	r2,r18,1
    b770:	10019026 	beq	r2,zero,bdb4 <___vfprintf_internal_r+0x11b4>
    b774:	9d84b03a 	or	r2,r19,r22
    b778:	10036926 	beq	r2,zero,c520 <___vfprintf_internal_r+0x1920>
    b77c:	d8c02917 	ldw	r3,164(sp)
    b780:	00800c04 	movi	r2,48
    b784:	d8802705 	stb	r2,156(sp)
    b788:	dc402745 	stb	r17,157(sp)
    b78c:	d8002785 	stb	zero,158(sp)
    b790:	90800094 	ori	r2,r18,2
    b794:	18045d16 	blt	r3,zero,c90c <___vfprintf_internal_r+0x1d0c>
    b798:	00bfdfc4 	movi	r2,-129
    b79c:	90a4703a 	and	r18,r18,r2
    b7a0:	94800094 	ori	r18,r18,2
    b7a4:	0039883a 	mov	fp,zero
    b7a8:	d9003917 	ldw	r4,228(sp)
    b7ac:	dc001e04 	addi	r16,sp,120
    b7b0:	988003cc 	andi	r2,r19,15
    b7b4:	b006973a 	slli	r3,r22,28
    b7b8:	2085883a 	add	r2,r4,r2
    b7bc:	9826d13a 	srli	r19,r19,4
    b7c0:	10800003 	ldbu	r2,0(r2)
    b7c4:	b02cd13a 	srli	r22,r22,4
    b7c8:	843fffc4 	addi	r16,r16,-1
    b7cc:	1ce6b03a 	or	r19,r3,r19
    b7d0:	80800005 	stb	r2,0(r16)
    b7d4:	9d84b03a 	or	r2,r19,r22
    b7d8:	103ff51e 	bne	r2,zero,b7b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b7b0>
    b7dc:	d8c02817 	ldw	r3,160(sp)
    b7e0:	1c07c83a 	sub	r3,r3,r16
    b7e4:	d8c02e15 	stw	r3,184(sp)
    b7e8:	003ecc06 	br	b31c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b31c>
    b7ec:	18c03fcc 	andi	r3,r3,255
    b7f0:	183e9f26 	beq	r3,zero,b270 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b270>
    b7f4:	d9c02785 	stb	r7,158(sp)
    b7f8:	003e9d06 	br	b270 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b270>
    b7fc:	00c00044 	movi	r3,1
    b800:	01c00ac4 	movi	r7,43
    b804:	ac400007 	ldb	r17,0(r21)
    b808:	003d5e06 	br	ad84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad84>
    b80c:	94800814 	ori	r18,r18,32
    b810:	ac400007 	ldb	r17,0(r21)
    b814:	003d5b06 	br	ad84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad84>
    b818:	d8c02d17 	ldw	r3,180(sp)
    b81c:	d8002785 	stb	zero,158(sp)
    b820:	1c000017 	ldw	r16,0(r3)
    b824:	1cc00104 	addi	r19,r3,4
    b828:	80041926 	beq	r16,zero,c890 <___vfprintf_internal_r+0x1c90>
    b82c:	d9002917 	ldw	r4,164(sp)
    b830:	2003d016 	blt	r4,zero,c774 <___vfprintf_internal_r+0x1b74>
    b834:	200d883a 	mov	r6,r4
    b838:	000b883a 	mov	r5,zero
    b83c:	8009883a 	mov	r4,r16
    b840:	da003d15 	stw	r8,244(sp)
    b844:	000fc040 	call	fc04 <memchr>
    b848:	da003d17 	ldw	r8,244(sp)
    b84c:	10045426 	beq	r2,zero,c9a0 <___vfprintf_internal_r+0x1da0>
    b850:	1405c83a 	sub	r2,r2,r16
    b854:	d8802e15 	stw	r2,184(sp)
    b858:	1003cc16 	blt	r2,zero,c78c <___vfprintf_internal_r+0x1b8c>
    b85c:	df002783 	ldbu	fp,158(sp)
    b860:	d8802a15 	stw	r2,168(sp)
    b864:	dcc02d15 	stw	r19,180(sp)
    b868:	d8002915 	stw	zero,164(sp)
    b86c:	d8003215 	stw	zero,200(sp)
    b870:	003eb006 	br	b334 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b334>
    b874:	18c03fcc 	andi	r3,r3,255
    b878:	183f9b26 	beq	r3,zero,b6e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b6e8>
    b87c:	d9c02785 	stb	r7,158(sp)
    b880:	003f9906 	br	b6e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b6e8>
    b884:	18c03fcc 	andi	r3,r3,255
    b888:	1805551e 	bne	r3,zero,cde0 <___vfprintf_internal_r+0x21e0>
    b88c:	014000b4 	movhi	r5,2
    b890:	2952d704 	addi	r5,r5,19292
    b894:	d9403915 	stw	r5,228(sp)
    b898:	9080080c 	andi	r2,r18,32
    b89c:	103fae1e 	bne	r2,zero,b758 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b758>
    b8a0:	9080040c 	andi	r2,r18,16
    b8a4:	1002de26 	beq	r2,zero,c420 <___vfprintf_internal_r+0x1820>
    b8a8:	d8c02d17 	ldw	r3,180(sp)
    b8ac:	002d883a 	mov	r22,zero
    b8b0:	1cc00017 	ldw	r19,0(r3)
    b8b4:	18c00104 	addi	r3,r3,4
    b8b8:	d8c02d15 	stw	r3,180(sp)
    b8bc:	003fab06 	br	b76c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b76c>
    b8c0:	38803fcc 	andi	r2,r7,255
    b8c4:	1080201c 	xori	r2,r2,128
    b8c8:	10bfe004 	addi	r2,r2,-128
    b8cc:	1002d21e 	bne	r2,zero,c418 <___vfprintf_internal_r+0x1818>
    b8d0:	00c00044 	movi	r3,1
    b8d4:	01c00804 	movi	r7,32
    b8d8:	ac400007 	ldb	r17,0(r21)
    b8dc:	003d2906 	br	ad84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad84>
    b8e0:	94800054 	ori	r18,r18,1
    b8e4:	ac400007 	ldb	r17,0(r21)
    b8e8:	003d2606 	br	ad84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad84>
    b8ec:	18c03fcc 	andi	r3,r3,255
    b8f0:	183e0526 	beq	r3,zero,b108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b108>
    b8f4:	d9c02785 	stb	r7,158(sp)
    b8f8:	003e0306 	br	b108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b108>
    b8fc:	94801014 	ori	r18,r18,64
    b900:	ac400007 	ldb	r17,0(r21)
    b904:	003d1f06 	br	ad84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad84>
    b908:	ac400007 	ldb	r17,0(r21)
    b90c:	8a438726 	beq	r17,r9,c72c <___vfprintf_internal_r+0x1b2c>
    b910:	94800414 	ori	r18,r18,16
    b914:	003d1b06 	br	ad84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad84>
    b918:	18c03fcc 	andi	r3,r3,255
    b91c:	1805341e 	bne	r3,zero,cdf0 <___vfprintf_internal_r+0x21f0>
    b920:	9080080c 	andi	r2,r18,32
    b924:	1002cd26 	beq	r2,zero,c45c <___vfprintf_internal_r+0x185c>
    b928:	d9402d17 	ldw	r5,180(sp)
    b92c:	d9002f17 	ldw	r4,188(sp)
    b930:	28800017 	ldw	r2,0(r5)
    b934:	2007d7fa 	srai	r3,r4,31
    b938:	29400104 	addi	r5,r5,4
    b93c:	d9402d15 	stw	r5,180(sp)
    b940:	11000015 	stw	r4,0(r2)
    b944:	10c00115 	stw	r3,4(r2)
    b948:	003ce506 	br	ace0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ace0>
    b94c:	d8c02d17 	ldw	r3,180(sp)
    b950:	d9002d17 	ldw	r4,180(sp)
    b954:	d8002785 	stb	zero,158(sp)
    b958:	18800017 	ldw	r2,0(r3)
    b95c:	21000104 	addi	r4,r4,4
    b960:	00c00044 	movi	r3,1
    b964:	d8c02a15 	stw	r3,168(sp)
    b968:	d8801405 	stb	r2,80(sp)
    b96c:	d9002d15 	stw	r4,180(sp)
    b970:	d8c02e15 	stw	r3,184(sp)
    b974:	d8002915 	stw	zero,164(sp)
    b978:	d8003215 	stw	zero,200(sp)
    b97c:	dc001404 	addi	r16,sp,80
    b980:	0039883a 	mov	fp,zero
    b984:	003e7206 	br	b350 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b350>
    b988:	010000b4 	movhi	r4,2
    b98c:	2112d704 	addi	r4,r4,19292
    b990:	0039883a 	mov	fp,zero
    b994:	d9003915 	stw	r4,228(sp)
    b998:	04401e04 	movi	r17,120
    b99c:	003f8206 	br	b7a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b7a8>
    b9a0:	18c03fcc 	andi	r3,r3,255
    b9a4:	1805061e 	bne	r3,zero,cdc0 <___vfprintf_internal_r+0x21c0>
    b9a8:	883d9126 	beq	r17,zero,aff0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700aff0>
    b9ac:	00c00044 	movi	r3,1
    b9b0:	d8c02a15 	stw	r3,168(sp)
    b9b4:	dc401405 	stb	r17,80(sp)
    b9b8:	d8002785 	stb	zero,158(sp)
    b9bc:	003fec06 	br	b970 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b970>
    b9c0:	014000b4 	movhi	r5,2
    b9c4:	2952d704 	addi	r5,r5,19292
    b9c8:	d9403915 	stw	r5,228(sp)
    b9cc:	d8c02d15 	stw	r3,180(sp)
    b9d0:	1025883a 	mov	r18,r2
    b9d4:	04401e04 	movi	r17,120
    b9d8:	9d84b03a 	or	r2,r19,r22
    b9dc:	1000fc1e 	bne	r2,zero,bdd0 <___vfprintf_internal_r+0x11d0>
    b9e0:	0039883a 	mov	fp,zero
    b9e4:	00800084 	movi	r2,2
    b9e8:	10803fcc 	andi	r2,r2,255
    b9ec:	00c00044 	movi	r3,1
    b9f0:	10c20f26 	beq	r2,r3,c230 <___vfprintf_internal_r+0x1630>
    b9f4:	00c00084 	movi	r3,2
    b9f8:	10fd6326 	beq	r2,r3,af88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af88>
    b9fc:	003e2d06 	br	b2b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2b4>
    ba00:	d8c02017 	ldw	r3,128(sp)
    ba04:	003e9306 	br	b454 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b454>
    ba08:	00801944 	movi	r2,101
    ba0c:	14407e0e 	bge	r2,r17,bc08 <___vfprintf_internal_r+0x1008>
    ba10:	d9003617 	ldw	r4,216(sp)
    ba14:	d9403817 	ldw	r5,224(sp)
    ba18:	000d883a 	mov	r6,zero
    ba1c:	000f883a 	mov	r7,zero
    ba20:	d8c03c15 	stw	r3,240(sp)
    ba24:	da003d15 	stw	r8,244(sp)
    ba28:	0015e280 	call	15e28 <__eqdf2>
    ba2c:	d8c03c17 	ldw	r3,240(sp)
    ba30:	da003d17 	ldw	r8,244(sp)
    ba34:	1000f71e 	bne	r2,zero,be14 <___vfprintf_internal_r+0x1214>
    ba38:	d8801f17 	ldw	r2,124(sp)
    ba3c:	010000b4 	movhi	r4,2
    ba40:	2112de04 	addi	r4,r4,19320
    ba44:	18c00044 	addi	r3,r3,1
    ba48:	10800044 	addi	r2,r2,1
    ba4c:	41000015 	stw	r4,0(r8)
    ba50:	01000044 	movi	r4,1
    ba54:	41000115 	stw	r4,4(r8)
    ba58:	d8c02015 	stw	r3,128(sp)
    ba5c:	d8801f15 	stw	r2,124(sp)
    ba60:	010001c4 	movi	r4,7
    ba64:	2082b816 	blt	r4,r2,c548 <___vfprintf_internal_r+0x1948>
    ba68:	42000204 	addi	r8,r8,8
    ba6c:	d8802617 	ldw	r2,152(sp)
    ba70:	d9403317 	ldw	r5,204(sp)
    ba74:	11400216 	blt	r2,r5,ba80 <___vfprintf_internal_r+0xe80>
    ba78:	9080004c 	andi	r2,r18,1
    ba7c:	103ed526 	beq	r2,zero,b5d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5d4>
    ba80:	d8803717 	ldw	r2,220(sp)
    ba84:	d9003417 	ldw	r4,208(sp)
    ba88:	d9403717 	ldw	r5,220(sp)
    ba8c:	1887883a 	add	r3,r3,r2
    ba90:	d8801f17 	ldw	r2,124(sp)
    ba94:	41000015 	stw	r4,0(r8)
    ba98:	41400115 	stw	r5,4(r8)
    ba9c:	10800044 	addi	r2,r2,1
    baa0:	d8c02015 	stw	r3,128(sp)
    baa4:	d8801f15 	stw	r2,124(sp)
    baa8:	010001c4 	movi	r4,7
    baac:	20832916 	blt	r4,r2,c754 <___vfprintf_internal_r+0x1b54>
    bab0:	42000204 	addi	r8,r8,8
    bab4:	d8803317 	ldw	r2,204(sp)
    bab8:	143fffc4 	addi	r16,r2,-1
    babc:	043ec50e 	bge	zero,r16,b5d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5d4>
    bac0:	04400404 	movi	r17,16
    bac4:	d8801f17 	ldw	r2,124(sp)
    bac8:	8c00880e 	bge	r17,r16,bcec <___vfprintf_internal_r+0x10ec>
    bacc:	014000b4 	movhi	r5,2
    bad0:	2952e684 	addi	r5,r5,19354
    bad4:	d9402b15 	stw	r5,172(sp)
    bad8:	058001c4 	movi	r22,7
    badc:	dcc02c17 	ldw	r19,176(sp)
    bae0:	00000306 	br	baf0 <___vfprintf_internal_r+0xef0>
    bae4:	42000204 	addi	r8,r8,8
    bae8:	843ffc04 	addi	r16,r16,-16
    baec:	8c00820e 	bge	r17,r16,bcf8 <___vfprintf_internal_r+0x10f8>
    baf0:	18c00404 	addi	r3,r3,16
    baf4:	10800044 	addi	r2,r2,1
    baf8:	45000015 	stw	r20,0(r8)
    bafc:	44400115 	stw	r17,4(r8)
    bb00:	d8c02015 	stw	r3,128(sp)
    bb04:	d8801f15 	stw	r2,124(sp)
    bb08:	b0bff60e 	bge	r22,r2,bae4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bae4>
    bb0c:	d9801e04 	addi	r6,sp,120
    bb10:	b80b883a 	mov	r5,r23
    bb14:	9809883a 	mov	r4,r19
    bb18:	0012a5c0 	call	12a5c <__sprint_r>
    bb1c:	103d3a1e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    bb20:	d8c02017 	ldw	r3,128(sp)
    bb24:	d8801f17 	ldw	r2,124(sp)
    bb28:	da000404 	addi	r8,sp,16
    bb2c:	003fee06 	br	bae8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bae8>
    bb30:	d9403117 	ldw	r5,196(sp)
    bb34:	d8802a17 	ldw	r2,168(sp)
    bb38:	28adc83a 	sub	r22,r5,r2
    bb3c:	05be630e 	bge	zero,r22,b4cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b4cc>
    bb40:	07000404 	movi	fp,16
    bb44:	d8801f17 	ldw	r2,124(sp)
    bb48:	e5838f0e 	bge	fp,r22,c988 <___vfprintf_internal_r+0x1d88>
    bb4c:	014000b4 	movhi	r5,2
    bb50:	2952e684 	addi	r5,r5,19354
    bb54:	dc403015 	stw	r17,192(sp)
    bb58:	d9402b15 	stw	r5,172(sp)
    bb5c:	b023883a 	mov	r17,r22
    bb60:	04c001c4 	movi	r19,7
    bb64:	a82d883a 	mov	r22,r21
    bb68:	902b883a 	mov	r21,r18
    bb6c:	8025883a 	mov	r18,r16
    bb70:	dc002c17 	ldw	r16,176(sp)
    bb74:	00000306 	br	bb84 <___vfprintf_internal_r+0xf84>
    bb78:	8c7ffc04 	addi	r17,r17,-16
    bb7c:	42000204 	addi	r8,r8,8
    bb80:	e440110e 	bge	fp,r17,bbc8 <___vfprintf_internal_r+0xfc8>
    bb84:	18c00404 	addi	r3,r3,16
    bb88:	10800044 	addi	r2,r2,1
    bb8c:	45000015 	stw	r20,0(r8)
    bb90:	47000115 	stw	fp,4(r8)
    bb94:	d8c02015 	stw	r3,128(sp)
    bb98:	d8801f15 	stw	r2,124(sp)
    bb9c:	98bff60e 	bge	r19,r2,bb78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bb78>
    bba0:	d9801e04 	addi	r6,sp,120
    bba4:	b80b883a 	mov	r5,r23
    bba8:	8009883a 	mov	r4,r16
    bbac:	0012a5c0 	call	12a5c <__sprint_r>
    bbb0:	103d151e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    bbb4:	8c7ffc04 	addi	r17,r17,-16
    bbb8:	d8c02017 	ldw	r3,128(sp)
    bbbc:	d8801f17 	ldw	r2,124(sp)
    bbc0:	da000404 	addi	r8,sp,16
    bbc4:	e47fef16 	blt	fp,r17,bb84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bb84>
    bbc8:	9021883a 	mov	r16,r18
    bbcc:	a825883a 	mov	r18,r21
    bbd0:	b02b883a 	mov	r21,r22
    bbd4:	882d883a 	mov	r22,r17
    bbd8:	dc403017 	ldw	r17,192(sp)
    bbdc:	d9002b17 	ldw	r4,172(sp)
    bbe0:	1d87883a 	add	r3,r3,r22
    bbe4:	10800044 	addi	r2,r2,1
    bbe8:	41000015 	stw	r4,0(r8)
    bbec:	45800115 	stw	r22,4(r8)
    bbf0:	d8c02015 	stw	r3,128(sp)
    bbf4:	d8801f15 	stw	r2,124(sp)
    bbf8:	010001c4 	movi	r4,7
    bbfc:	20818e16 	blt	r4,r2,c238 <___vfprintf_internal_r+0x1638>
    bc00:	42000204 	addi	r8,r8,8
    bc04:	003e3106 	br	b4cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b4cc>
    bc08:	d9403317 	ldw	r5,204(sp)
    bc0c:	00800044 	movi	r2,1
    bc10:	18c00044 	addi	r3,r3,1
    bc14:	1141530e 	bge	r2,r5,c164 <___vfprintf_internal_r+0x1564>
    bc18:	dc401f17 	ldw	r17,124(sp)
    bc1c:	00800044 	movi	r2,1
    bc20:	40800115 	stw	r2,4(r8)
    bc24:	8c400044 	addi	r17,r17,1
    bc28:	44000015 	stw	r16,0(r8)
    bc2c:	d8c02015 	stw	r3,128(sp)
    bc30:	dc401f15 	stw	r17,124(sp)
    bc34:	008001c4 	movi	r2,7
    bc38:	14416b16 	blt	r2,r17,c1e8 <___vfprintf_internal_r+0x15e8>
    bc3c:	42000204 	addi	r8,r8,8
    bc40:	d8803717 	ldw	r2,220(sp)
    bc44:	d9003417 	ldw	r4,208(sp)
    bc48:	8c400044 	addi	r17,r17,1
    bc4c:	10c7883a 	add	r3,r2,r3
    bc50:	40800115 	stw	r2,4(r8)
    bc54:	41000015 	stw	r4,0(r8)
    bc58:	d8c02015 	stw	r3,128(sp)
    bc5c:	dc401f15 	stw	r17,124(sp)
    bc60:	008001c4 	movi	r2,7
    bc64:	14416916 	blt	r2,r17,c20c <___vfprintf_internal_r+0x160c>
    bc68:	45800204 	addi	r22,r8,8
    bc6c:	d9003617 	ldw	r4,216(sp)
    bc70:	d9403817 	ldw	r5,224(sp)
    bc74:	000d883a 	mov	r6,zero
    bc78:	000f883a 	mov	r7,zero
    bc7c:	d8c03c15 	stw	r3,240(sp)
    bc80:	0015e280 	call	15e28 <__eqdf2>
    bc84:	d8c03c17 	ldw	r3,240(sp)
    bc88:	1000bc26 	beq	r2,zero,bf7c <___vfprintf_internal_r+0x137c>
    bc8c:	d9403317 	ldw	r5,204(sp)
    bc90:	84000044 	addi	r16,r16,1
    bc94:	8c400044 	addi	r17,r17,1
    bc98:	28bfffc4 	addi	r2,r5,-1
    bc9c:	1887883a 	add	r3,r3,r2
    bca0:	b0800115 	stw	r2,4(r22)
    bca4:	b4000015 	stw	r16,0(r22)
    bca8:	d8c02015 	stw	r3,128(sp)
    bcac:	dc401f15 	stw	r17,124(sp)
    bcb0:	008001c4 	movi	r2,7
    bcb4:	14414316 	blt	r2,r17,c1c4 <___vfprintf_internal_r+0x15c4>
    bcb8:	b5800204 	addi	r22,r22,8
    bcbc:	d9003a17 	ldw	r4,232(sp)
    bcc0:	df0022c4 	addi	fp,sp,139
    bcc4:	8c400044 	addi	r17,r17,1
    bcc8:	20c7883a 	add	r3,r4,r3
    bccc:	b7000015 	stw	fp,0(r22)
    bcd0:	b1000115 	stw	r4,4(r22)
    bcd4:	d8c02015 	stw	r3,128(sp)
    bcd8:	dc401f15 	stw	r17,124(sp)
    bcdc:	008001c4 	movi	r2,7
    bce0:	14400e16 	blt	r2,r17,bd1c <___vfprintf_internal_r+0x111c>
    bce4:	b2000204 	addi	r8,r22,8
    bce8:	003e3a06 	br	b5d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5d4>
    bcec:	010000b4 	movhi	r4,2
    bcf0:	2112e684 	addi	r4,r4,19354
    bcf4:	d9002b15 	stw	r4,172(sp)
    bcf8:	d9002b17 	ldw	r4,172(sp)
    bcfc:	1c07883a 	add	r3,r3,r16
    bd00:	44000115 	stw	r16,4(r8)
    bd04:	41000015 	stw	r4,0(r8)
    bd08:	10800044 	addi	r2,r2,1
    bd0c:	d8c02015 	stw	r3,128(sp)
    bd10:	d8801f15 	stw	r2,124(sp)
    bd14:	010001c4 	movi	r4,7
    bd18:	20be2d0e 	bge	r4,r2,b5d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5d0>
    bd1c:	d9002c17 	ldw	r4,176(sp)
    bd20:	d9801e04 	addi	r6,sp,120
    bd24:	b80b883a 	mov	r5,r23
    bd28:	0012a5c0 	call	12a5c <__sprint_r>
    bd2c:	103cb61e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    bd30:	d8c02017 	ldw	r3,128(sp)
    bd34:	da000404 	addi	r8,sp,16
    bd38:	003e2606 	br	b5d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5d4>
    bd3c:	d9002c17 	ldw	r4,176(sp)
    bd40:	d9801e04 	addi	r6,sp,120
    bd44:	b80b883a 	mov	r5,r23
    bd48:	0012a5c0 	call	12a5c <__sprint_r>
    bd4c:	103e5d26 	beq	r2,zero,b6c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b6c4>
    bd50:	003cad06 	br	b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    bd54:	d9002c17 	ldw	r4,176(sp)
    bd58:	d9801e04 	addi	r6,sp,120
    bd5c:	b80b883a 	mov	r5,r23
    bd60:	0012a5c0 	call	12a5c <__sprint_r>
    bd64:	103ca81e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    bd68:	d8c02017 	ldw	r3,128(sp)
    bd6c:	da000404 	addi	r8,sp,16
    bd70:	003e0b06 	br	b5a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5a0>
    bd74:	d9002c17 	ldw	r4,176(sp)
    bd78:	d9801e04 	addi	r6,sp,120
    bd7c:	b80b883a 	mov	r5,r23
    bd80:	0012a5c0 	call	12a5c <__sprint_r>
    bd84:	103ca01e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    bd88:	d8c02017 	ldw	r3,128(sp)
    bd8c:	da000404 	addi	r8,sp,16
    bd90:	003dbd06 	br	b488 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b488>
    bd94:	d9002c17 	ldw	r4,176(sp)
    bd98:	d9801e04 	addi	r6,sp,120
    bd9c:	b80b883a 	mov	r5,r23
    bda0:	0012a5c0 	call	12a5c <__sprint_r>
    bda4:	103c981e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    bda8:	d8c02017 	ldw	r3,128(sp)
    bdac:	da000404 	addi	r8,sp,16
    bdb0:	003dc306 	br	b4c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b4c0>
    bdb4:	d8802917 	ldw	r2,164(sp)
    bdb8:	d8002785 	stb	zero,158(sp)
    bdbc:	103f0616 	blt	r2,zero,b9d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b9d8>
    bdc0:	00ffdfc4 	movi	r3,-129
    bdc4:	9d84b03a 	or	r2,r19,r22
    bdc8:	90e4703a 	and	r18,r18,r3
    bdcc:	103c6b26 	beq	r2,zero,af7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af7c>
    bdd0:	0039883a 	mov	fp,zero
    bdd4:	003e7406 	br	b7a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b7a8>
    bdd8:	9080040c 	andi	r2,r18,16
    bddc:	1001b326 	beq	r2,zero,c4ac <___vfprintf_internal_r+0x18ac>
    bde0:	d9002d17 	ldw	r4,180(sp)
    bde4:	d9402917 	ldw	r5,164(sp)
    bde8:	d8002785 	stb	zero,158(sp)
    bdec:	20800104 	addi	r2,r4,4
    bdf0:	24c00017 	ldw	r19,0(r4)
    bdf4:	002d883a 	mov	r22,zero
    bdf8:	2801b516 	blt	r5,zero,c4d0 <___vfprintf_internal_r+0x18d0>
    bdfc:	00ffdfc4 	movi	r3,-129
    be00:	d8802d15 	stw	r2,180(sp)
    be04:	90e4703a 	and	r18,r18,r3
    be08:	983d2726 	beq	r19,zero,b2a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2a8>
    be0c:	0039883a 	mov	fp,zero
    be10:	003d2a06 	br	b2bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2bc>
    be14:	dc402617 	ldw	r17,152(sp)
    be18:	0441d30e 	bge	zero,r17,c568 <___vfprintf_internal_r+0x1968>
    be1c:	dc403217 	ldw	r17,200(sp)
    be20:	d8803317 	ldw	r2,204(sp)
    be24:	1440010e 	bge	r2,r17,be2c <___vfprintf_internal_r+0x122c>
    be28:	1023883a 	mov	r17,r2
    be2c:	04400a0e 	bge	zero,r17,be58 <___vfprintf_internal_r+0x1258>
    be30:	d8801f17 	ldw	r2,124(sp)
    be34:	1c47883a 	add	r3,r3,r17
    be38:	44000015 	stw	r16,0(r8)
    be3c:	10800044 	addi	r2,r2,1
    be40:	44400115 	stw	r17,4(r8)
    be44:	d8c02015 	stw	r3,128(sp)
    be48:	d8801f15 	stw	r2,124(sp)
    be4c:	010001c4 	movi	r4,7
    be50:	20826516 	blt	r4,r2,c7e8 <___vfprintf_internal_r+0x1be8>
    be54:	42000204 	addi	r8,r8,8
    be58:	88026116 	blt	r17,zero,c7e0 <___vfprintf_internal_r+0x1be0>
    be5c:	d9003217 	ldw	r4,200(sp)
    be60:	2463c83a 	sub	r17,r4,r17
    be64:	04407b0e 	bge	zero,r17,c054 <___vfprintf_internal_r+0x1454>
    be68:	05800404 	movi	r22,16
    be6c:	d8801f17 	ldw	r2,124(sp)
    be70:	b4419d0e 	bge	r22,r17,c4e8 <___vfprintf_internal_r+0x18e8>
    be74:	010000b4 	movhi	r4,2
    be78:	2112e684 	addi	r4,r4,19354
    be7c:	d9002b15 	stw	r4,172(sp)
    be80:	070001c4 	movi	fp,7
    be84:	dcc02c17 	ldw	r19,176(sp)
    be88:	00000306 	br	be98 <___vfprintf_internal_r+0x1298>
    be8c:	42000204 	addi	r8,r8,8
    be90:	8c7ffc04 	addi	r17,r17,-16
    be94:	b441970e 	bge	r22,r17,c4f4 <___vfprintf_internal_r+0x18f4>
    be98:	18c00404 	addi	r3,r3,16
    be9c:	10800044 	addi	r2,r2,1
    bea0:	45000015 	stw	r20,0(r8)
    bea4:	45800115 	stw	r22,4(r8)
    bea8:	d8c02015 	stw	r3,128(sp)
    beac:	d8801f15 	stw	r2,124(sp)
    beb0:	e0bff60e 	bge	fp,r2,be8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be8c>
    beb4:	d9801e04 	addi	r6,sp,120
    beb8:	b80b883a 	mov	r5,r23
    bebc:	9809883a 	mov	r4,r19
    bec0:	0012a5c0 	call	12a5c <__sprint_r>
    bec4:	103c501e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    bec8:	d8c02017 	ldw	r3,128(sp)
    becc:	d8801f17 	ldw	r2,124(sp)
    bed0:	da000404 	addi	r8,sp,16
    bed4:	003fee06 	br	be90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be90>
    bed8:	d9002c17 	ldw	r4,176(sp)
    bedc:	d9801e04 	addi	r6,sp,120
    bee0:	b80b883a 	mov	r5,r23
    bee4:	0012a5c0 	call	12a5c <__sprint_r>
    bee8:	103c471e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    beec:	d8c02017 	ldw	r3,128(sp)
    bef0:	df002787 	ldb	fp,158(sp)
    bef4:	da000404 	addi	r8,sp,16
    bef8:	003d5606 	br	b454 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b454>
    befc:	9080040c 	andi	r2,r18,16
    bf00:	10016126 	beq	r2,zero,c488 <___vfprintf_internal_r+0x1888>
    bf04:	d8802d17 	ldw	r2,180(sp)
    bf08:	14c00017 	ldw	r19,0(r2)
    bf0c:	10800104 	addi	r2,r2,4
    bf10:	d8802d15 	stw	r2,180(sp)
    bf14:	982dd7fa 	srai	r22,r19,31
    bf18:	b005883a 	mov	r2,r22
    bf1c:	003c8206 	br	b128 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b128>
    bf20:	9080040c 	andi	r2,r18,16
    bf24:	10003526 	beq	r2,zero,bffc <___vfprintf_internal_r+0x13fc>
    bf28:	d9402d17 	ldw	r5,180(sp)
    bf2c:	d8c02917 	ldw	r3,164(sp)
    bf30:	d8002785 	stb	zero,158(sp)
    bf34:	28800104 	addi	r2,r5,4
    bf38:	2cc00017 	ldw	r19,0(r5)
    bf3c:	002d883a 	mov	r22,zero
    bf40:	18003716 	blt	r3,zero,c020 <___vfprintf_internal_r+0x1420>
    bf44:	00ffdfc4 	movi	r3,-129
    bf48:	d8802d15 	stw	r2,180(sp)
    bf4c:	90e4703a 	and	r18,r18,r3
    bf50:	0039883a 	mov	fp,zero
    bf54:	983df326 	beq	r19,zero,b724 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b724>
    bf58:	00800244 	movi	r2,9
    bf5c:	14fc7b36 	bltu	r2,r19,b14c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b14c>
    bf60:	d8c02817 	ldw	r3,160(sp)
    bf64:	dc001dc4 	addi	r16,sp,119
    bf68:	9cc00c04 	addi	r19,r19,48
    bf6c:	1c07c83a 	sub	r3,r3,r16
    bf70:	dcc01dc5 	stb	r19,119(sp)
    bf74:	d8c02e15 	stw	r3,184(sp)
    bf78:	003ce806 	br	b31c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b31c>
    bf7c:	d8803317 	ldw	r2,204(sp)
    bf80:	143fffc4 	addi	r16,r2,-1
    bf84:	043f4d0e 	bge	zero,r16,bcbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcbc>
    bf88:	07000404 	movi	fp,16
    bf8c:	e400810e 	bge	fp,r16,c194 <___vfprintf_internal_r+0x1594>
    bf90:	014000b4 	movhi	r5,2
    bf94:	2952e684 	addi	r5,r5,19354
    bf98:	d9402b15 	stw	r5,172(sp)
    bf9c:	01c001c4 	movi	r7,7
    bfa0:	dcc02c17 	ldw	r19,176(sp)
    bfa4:	00000306 	br	bfb4 <___vfprintf_internal_r+0x13b4>
    bfa8:	b5800204 	addi	r22,r22,8
    bfac:	843ffc04 	addi	r16,r16,-16
    bfb0:	e4007b0e 	bge	fp,r16,c1a0 <___vfprintf_internal_r+0x15a0>
    bfb4:	18c00404 	addi	r3,r3,16
    bfb8:	8c400044 	addi	r17,r17,1
    bfbc:	b5000015 	stw	r20,0(r22)
    bfc0:	b7000115 	stw	fp,4(r22)
    bfc4:	d8c02015 	stw	r3,128(sp)
    bfc8:	dc401f15 	stw	r17,124(sp)
    bfcc:	3c7ff60e 	bge	r7,r17,bfa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfa8>
    bfd0:	d9801e04 	addi	r6,sp,120
    bfd4:	b80b883a 	mov	r5,r23
    bfd8:	9809883a 	mov	r4,r19
    bfdc:	d9c03c15 	stw	r7,240(sp)
    bfe0:	0012a5c0 	call	12a5c <__sprint_r>
    bfe4:	d9c03c17 	ldw	r7,240(sp)
    bfe8:	103c071e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    bfec:	d8c02017 	ldw	r3,128(sp)
    bff0:	dc401f17 	ldw	r17,124(sp)
    bff4:	dd800404 	addi	r22,sp,16
    bff8:	003fec06 	br	bfac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bfac>
    bffc:	9080100c 	andi	r2,r18,64
    c000:	d8002785 	stb	zero,158(sp)
    c004:	10010e26 	beq	r2,zero,c440 <___vfprintf_internal_r+0x1840>
    c008:	d9002d17 	ldw	r4,180(sp)
    c00c:	d9402917 	ldw	r5,164(sp)
    c010:	002d883a 	mov	r22,zero
    c014:	20800104 	addi	r2,r4,4
    c018:	24c0000b 	ldhu	r19,0(r4)
    c01c:	283fc90e 	bge	r5,zero,bf44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf44>
    c020:	d8802d15 	stw	r2,180(sp)
    c024:	0039883a 	mov	fp,zero
    c028:	9d84b03a 	or	r2,r19,r22
    c02c:	103c461e 	bne	r2,zero,b148 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b148>
    c030:	00800044 	movi	r2,1
    c034:	003e6c06 	br	b9e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b9e8>
    c038:	d9002c17 	ldw	r4,176(sp)
    c03c:	d9801e04 	addi	r6,sp,120
    c040:	b80b883a 	mov	r5,r23
    c044:	0012a5c0 	call	12a5c <__sprint_r>
    c048:	103bef1e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    c04c:	d8c02017 	ldw	r3,128(sp)
    c050:	da000404 	addi	r8,sp,16
    c054:	d9003217 	ldw	r4,200(sp)
    c058:	d8802617 	ldw	r2,152(sp)
    c05c:	d9403317 	ldw	r5,204(sp)
    c060:	8123883a 	add	r17,r16,r4
    c064:	11400216 	blt	r2,r5,c070 <___vfprintf_internal_r+0x1470>
    c068:	9100004c 	andi	r4,r18,1
    c06c:	20000d26 	beq	r4,zero,c0a4 <___vfprintf_internal_r+0x14a4>
    c070:	d9003717 	ldw	r4,220(sp)
    c074:	d9403417 	ldw	r5,208(sp)
    c078:	1907883a 	add	r3,r3,r4
    c07c:	d9001f17 	ldw	r4,124(sp)
    c080:	41400015 	stw	r5,0(r8)
    c084:	d9403717 	ldw	r5,220(sp)
    c088:	21000044 	addi	r4,r4,1
    c08c:	d8c02015 	stw	r3,128(sp)
    c090:	41400115 	stw	r5,4(r8)
    c094:	d9001f15 	stw	r4,124(sp)
    c098:	014001c4 	movi	r5,7
    c09c:	2901e816 	blt	r5,r4,c840 <___vfprintf_internal_r+0x1c40>
    c0a0:	42000204 	addi	r8,r8,8
    c0a4:	d9003317 	ldw	r4,204(sp)
    c0a8:	8121883a 	add	r16,r16,r4
    c0ac:	2085c83a 	sub	r2,r4,r2
    c0b0:	8461c83a 	sub	r16,r16,r17
    c0b4:	1400010e 	bge	r2,r16,c0bc <___vfprintf_internal_r+0x14bc>
    c0b8:	1021883a 	mov	r16,r2
    c0bc:	04000a0e 	bge	zero,r16,c0e8 <___vfprintf_internal_r+0x14e8>
    c0c0:	d9001f17 	ldw	r4,124(sp)
    c0c4:	1c07883a 	add	r3,r3,r16
    c0c8:	44400015 	stw	r17,0(r8)
    c0cc:	21000044 	addi	r4,r4,1
    c0d0:	44000115 	stw	r16,4(r8)
    c0d4:	d8c02015 	stw	r3,128(sp)
    c0d8:	d9001f15 	stw	r4,124(sp)
    c0dc:	014001c4 	movi	r5,7
    c0e0:	2901fb16 	blt	r5,r4,c8d0 <___vfprintf_internal_r+0x1cd0>
    c0e4:	42000204 	addi	r8,r8,8
    c0e8:	8001f716 	blt	r16,zero,c8c8 <___vfprintf_internal_r+0x1cc8>
    c0ec:	1421c83a 	sub	r16,r2,r16
    c0f0:	043d380e 	bge	zero,r16,b5d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5d4>
    c0f4:	04400404 	movi	r17,16
    c0f8:	d8801f17 	ldw	r2,124(sp)
    c0fc:	8c3efb0e 	bge	r17,r16,bcec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcec>
    c100:	014000b4 	movhi	r5,2
    c104:	2952e684 	addi	r5,r5,19354
    c108:	d9402b15 	stw	r5,172(sp)
    c10c:	058001c4 	movi	r22,7
    c110:	dcc02c17 	ldw	r19,176(sp)
    c114:	00000306 	br	c124 <___vfprintf_internal_r+0x1524>
    c118:	42000204 	addi	r8,r8,8
    c11c:	843ffc04 	addi	r16,r16,-16
    c120:	8c3ef50e 	bge	r17,r16,bcf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcf8>
    c124:	18c00404 	addi	r3,r3,16
    c128:	10800044 	addi	r2,r2,1
    c12c:	45000015 	stw	r20,0(r8)
    c130:	44400115 	stw	r17,4(r8)
    c134:	d8c02015 	stw	r3,128(sp)
    c138:	d8801f15 	stw	r2,124(sp)
    c13c:	b0bff60e 	bge	r22,r2,c118 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c118>
    c140:	d9801e04 	addi	r6,sp,120
    c144:	b80b883a 	mov	r5,r23
    c148:	9809883a 	mov	r4,r19
    c14c:	0012a5c0 	call	12a5c <__sprint_r>
    c150:	103bad1e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    c154:	d8c02017 	ldw	r3,128(sp)
    c158:	d8801f17 	ldw	r2,124(sp)
    c15c:	da000404 	addi	r8,sp,16
    c160:	003fee06 	br	c11c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c11c>
    c164:	9088703a 	and	r4,r18,r2
    c168:	203eab1e 	bne	r4,zero,bc18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bc18>
    c16c:	dc401f17 	ldw	r17,124(sp)
    c170:	40800115 	stw	r2,4(r8)
    c174:	44000015 	stw	r16,0(r8)
    c178:	8c400044 	addi	r17,r17,1
    c17c:	d8c02015 	stw	r3,128(sp)
    c180:	dc401f15 	stw	r17,124(sp)
    c184:	008001c4 	movi	r2,7
    c188:	14400e16 	blt	r2,r17,c1c4 <___vfprintf_internal_r+0x15c4>
    c18c:	45800204 	addi	r22,r8,8
    c190:	003eca06 	br	bcbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcbc>
    c194:	010000b4 	movhi	r4,2
    c198:	2112e684 	addi	r4,r4,19354
    c19c:	d9002b15 	stw	r4,172(sp)
    c1a0:	d8802b17 	ldw	r2,172(sp)
    c1a4:	1c07883a 	add	r3,r3,r16
    c1a8:	8c400044 	addi	r17,r17,1
    c1ac:	b0800015 	stw	r2,0(r22)
    c1b0:	b4000115 	stw	r16,4(r22)
    c1b4:	d8c02015 	stw	r3,128(sp)
    c1b8:	dc401f15 	stw	r17,124(sp)
    c1bc:	008001c4 	movi	r2,7
    c1c0:	147ebd0e 	bge	r2,r17,bcb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcb8>
    c1c4:	d9002c17 	ldw	r4,176(sp)
    c1c8:	d9801e04 	addi	r6,sp,120
    c1cc:	b80b883a 	mov	r5,r23
    c1d0:	0012a5c0 	call	12a5c <__sprint_r>
    c1d4:	103b8c1e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    c1d8:	d8c02017 	ldw	r3,128(sp)
    c1dc:	dc401f17 	ldw	r17,124(sp)
    c1e0:	dd800404 	addi	r22,sp,16
    c1e4:	003eb506 	br	bcbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bcbc>
    c1e8:	d9002c17 	ldw	r4,176(sp)
    c1ec:	d9801e04 	addi	r6,sp,120
    c1f0:	b80b883a 	mov	r5,r23
    c1f4:	0012a5c0 	call	12a5c <__sprint_r>
    c1f8:	103b831e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    c1fc:	d8c02017 	ldw	r3,128(sp)
    c200:	dc401f17 	ldw	r17,124(sp)
    c204:	da000404 	addi	r8,sp,16
    c208:	003e8d06 	br	bc40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bc40>
    c20c:	d9002c17 	ldw	r4,176(sp)
    c210:	d9801e04 	addi	r6,sp,120
    c214:	b80b883a 	mov	r5,r23
    c218:	0012a5c0 	call	12a5c <__sprint_r>
    c21c:	103b7a1e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    c220:	d8c02017 	ldw	r3,128(sp)
    c224:	dc401f17 	ldw	r17,124(sp)
    c228:	dd800404 	addi	r22,sp,16
    c22c:	003e8f06 	br	bc6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bc6c>
    c230:	0027883a 	mov	r19,zero
    c234:	003f4a06 	br	bf60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf60>
    c238:	d9002c17 	ldw	r4,176(sp)
    c23c:	d9801e04 	addi	r6,sp,120
    c240:	b80b883a 	mov	r5,r23
    c244:	0012a5c0 	call	12a5c <__sprint_r>
    c248:	103b6f1e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    c24c:	d8c02017 	ldw	r3,128(sp)
    c250:	da000404 	addi	r8,sp,16
    c254:	003c9d06 	br	b4cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b4cc>
    c258:	04e7c83a 	sub	r19,zero,r19
    c25c:	9804c03a 	cmpne	r2,r19,zero
    c260:	05adc83a 	sub	r22,zero,r22
    c264:	b0adc83a 	sub	r22,r22,r2
    c268:	d8802917 	ldw	r2,164(sp)
    c26c:	07000b44 	movi	fp,45
    c270:	df002785 	stb	fp,158(sp)
    c274:	10017b16 	blt	r2,zero,c864 <___vfprintf_internal_r+0x1c64>
    c278:	00bfdfc4 	movi	r2,-129
    c27c:	90a4703a 	and	r18,r18,r2
    c280:	003bb106 	br	b148 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b148>
    c284:	d9003617 	ldw	r4,216(sp)
    c288:	d9403817 	ldw	r5,224(sp)
    c28c:	da003d15 	stw	r8,244(sp)
    c290:	00113a40 	call	113a4 <__fpclassifyd>
    c294:	da003d17 	ldw	r8,244(sp)
    c298:	1000f026 	beq	r2,zero,c65c <___vfprintf_internal_r+0x1a5c>
    c29c:	d9002917 	ldw	r4,164(sp)
    c2a0:	05bff7c4 	movi	r22,-33
    c2a4:	00bfffc4 	movi	r2,-1
    c2a8:	8dac703a 	and	r22,r17,r22
    c2ac:	20820026 	beq	r4,r2,cab0 <___vfprintf_internal_r+0x1eb0>
    c2b0:	008011c4 	movi	r2,71
    c2b4:	b081f726 	beq	r22,r2,ca94 <___vfprintf_internal_r+0x1e94>
    c2b8:	d9003817 	ldw	r4,224(sp)
    c2bc:	90c04014 	ori	r3,r18,256
    c2c0:	d8c02b15 	stw	r3,172(sp)
    c2c4:	20021516 	blt	r4,zero,cb1c <___vfprintf_internal_r+0x1f1c>
    c2c8:	dcc03817 	ldw	r19,224(sp)
    c2cc:	d8002a05 	stb	zero,168(sp)
    c2d0:	00801984 	movi	r2,102
    c2d4:	8881f926 	beq	r17,r2,cabc <___vfprintf_internal_r+0x1ebc>
    c2d8:	00801184 	movi	r2,70
    c2dc:	88821c26 	beq	r17,r2,cb50 <___vfprintf_internal_r+0x1f50>
    c2e0:	00801144 	movi	r2,69
    c2e4:	b081ef26 	beq	r22,r2,caa4 <___vfprintf_internal_r+0x1ea4>
    c2e8:	d8c02917 	ldw	r3,164(sp)
    c2ec:	d8802104 	addi	r2,sp,132
    c2f0:	d8800315 	stw	r2,12(sp)
    c2f4:	d9403617 	ldw	r5,216(sp)
    c2f8:	d8802504 	addi	r2,sp,148
    c2fc:	d9002c17 	ldw	r4,176(sp)
    c300:	d8800215 	stw	r2,8(sp)
    c304:	d8802604 	addi	r2,sp,152
    c308:	d8c00015 	stw	r3,0(sp)
    c30c:	d8800115 	stw	r2,4(sp)
    c310:	01c00084 	movi	r7,2
    c314:	980d883a 	mov	r6,r19
    c318:	d8c03c15 	stw	r3,240(sp)
    c31c:	da003d15 	stw	r8,244(sp)
    c320:	000d2240 	call	d224 <_dtoa_r>
    c324:	1021883a 	mov	r16,r2
    c328:	008019c4 	movi	r2,103
    c32c:	d8c03c17 	ldw	r3,240(sp)
    c330:	da003d17 	ldw	r8,244(sp)
    c334:	88817126 	beq	r17,r2,c8fc <___vfprintf_internal_r+0x1cfc>
    c338:	008011c4 	movi	r2,71
    c33c:	88829226 	beq	r17,r2,cd88 <___vfprintf_internal_r+0x2188>
    c340:	80f9883a 	add	fp,r16,r3
    c344:	d9003617 	ldw	r4,216(sp)
    c348:	000d883a 	mov	r6,zero
    c34c:	000f883a 	mov	r7,zero
    c350:	980b883a 	mov	r5,r19
    c354:	da003d15 	stw	r8,244(sp)
    c358:	0015e280 	call	15e28 <__eqdf2>
    c35c:	da003d17 	ldw	r8,244(sp)
    c360:	10018d26 	beq	r2,zero,c998 <___vfprintf_internal_r+0x1d98>
    c364:	d8802117 	ldw	r2,132(sp)
    c368:	1700062e 	bgeu	r2,fp,c384 <___vfprintf_internal_r+0x1784>
    c36c:	01000c04 	movi	r4,48
    c370:	10c00044 	addi	r3,r2,1
    c374:	d8c02115 	stw	r3,132(sp)
    c378:	11000005 	stb	r4,0(r2)
    c37c:	d8802117 	ldw	r2,132(sp)
    c380:	173ffb36 	bltu	r2,fp,c370 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c370>
    c384:	1405c83a 	sub	r2,r2,r16
    c388:	d8803315 	stw	r2,204(sp)
    c38c:	008011c4 	movi	r2,71
    c390:	b0817626 	beq	r22,r2,c96c <___vfprintf_internal_r+0x1d6c>
    c394:	00801944 	movi	r2,101
    c398:	1442810e 	bge	r2,r17,cda0 <___vfprintf_internal_r+0x21a0>
    c39c:	d8c02617 	ldw	r3,152(sp)
    c3a0:	00801984 	movi	r2,102
    c3a4:	d8c03215 	stw	r3,200(sp)
    c3a8:	8881fe26 	beq	r17,r2,cba4 <___vfprintf_internal_r+0x1fa4>
    c3ac:	d8c03217 	ldw	r3,200(sp)
    c3b0:	d9003317 	ldw	r4,204(sp)
    c3b4:	1901dd16 	blt	r3,r4,cb2c <___vfprintf_internal_r+0x1f2c>
    c3b8:	9480004c 	andi	r18,r18,1
    c3bc:	90022b1e 	bne	r18,zero,cc6c <___vfprintf_internal_r+0x206c>
    c3c0:	1805883a 	mov	r2,r3
    c3c4:	18028016 	blt	r3,zero,cdc8 <___vfprintf_internal_r+0x21c8>
    c3c8:	d8c03217 	ldw	r3,200(sp)
    c3cc:	044019c4 	movi	r17,103
    c3d0:	d8c02e15 	stw	r3,184(sp)
    c3d4:	df002a07 	ldb	fp,168(sp)
    c3d8:	e001531e 	bne	fp,zero,c928 <___vfprintf_internal_r+0x1d28>
    c3dc:	df002783 	ldbu	fp,158(sp)
    c3e0:	d8802a15 	stw	r2,168(sp)
    c3e4:	dc802b17 	ldw	r18,172(sp)
    c3e8:	d8002915 	stw	zero,164(sp)
    c3ec:	003bd106 	br	b334 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b334>
    c3f0:	d8802d17 	ldw	r2,180(sp)
    c3f4:	d8c02d17 	ldw	r3,180(sp)
    c3f8:	d9002d17 	ldw	r4,180(sp)
    c3fc:	10800017 	ldw	r2,0(r2)
    c400:	18c00117 	ldw	r3,4(r3)
    c404:	21000204 	addi	r4,r4,8
    c408:	d8803615 	stw	r2,216(sp)
    c40c:	d8c03815 	stw	r3,224(sp)
    c410:	d9002d15 	stw	r4,180(sp)
    c414:	003b7506 	br	b1ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b1ec>
    c418:	ac400007 	ldb	r17,0(r21)
    c41c:	003a5906 	br	ad84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad84>
    c420:	9080100c 	andi	r2,r18,64
    c424:	1000a826 	beq	r2,zero,c6c8 <___vfprintf_internal_r+0x1ac8>
    c428:	d9002d17 	ldw	r4,180(sp)
    c42c:	002d883a 	mov	r22,zero
    c430:	24c0000b 	ldhu	r19,0(r4)
    c434:	21000104 	addi	r4,r4,4
    c438:	d9002d15 	stw	r4,180(sp)
    c43c:	003ccb06 	br	b76c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b76c>
    c440:	d8c02d17 	ldw	r3,180(sp)
    c444:	d9002917 	ldw	r4,164(sp)
    c448:	002d883a 	mov	r22,zero
    c44c:	18800104 	addi	r2,r3,4
    c450:	1cc00017 	ldw	r19,0(r3)
    c454:	203ebb0e 	bge	r4,zero,bf44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bf44>
    c458:	003ef106 	br	c020 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c020>
    c45c:	9080040c 	andi	r2,r18,16
    c460:	1000921e 	bne	r2,zero,c6ac <___vfprintf_internal_r+0x1aac>
    c464:	9480100c 	andi	r18,r18,64
    c468:	90013926 	beq	r18,zero,c950 <___vfprintf_internal_r+0x1d50>
    c46c:	d9002d17 	ldw	r4,180(sp)
    c470:	d9402f17 	ldw	r5,188(sp)
    c474:	20800017 	ldw	r2,0(r4)
    c478:	21000104 	addi	r4,r4,4
    c47c:	d9002d15 	stw	r4,180(sp)
    c480:	1140000d 	sth	r5,0(r2)
    c484:	003a1606 	br	ace0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ace0>
    c488:	9080100c 	andi	r2,r18,64
    c48c:	10008026 	beq	r2,zero,c690 <___vfprintf_internal_r+0x1a90>
    c490:	d8c02d17 	ldw	r3,180(sp)
    c494:	1cc0000f 	ldh	r19,0(r3)
    c498:	18c00104 	addi	r3,r3,4
    c49c:	d8c02d15 	stw	r3,180(sp)
    c4a0:	982dd7fa 	srai	r22,r19,31
    c4a4:	b005883a 	mov	r2,r22
    c4a8:	003b1f06 	br	b128 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b128>
    c4ac:	9080100c 	andi	r2,r18,64
    c4b0:	d8002785 	stb	zero,158(sp)
    c4b4:	10008a1e 	bne	r2,zero,c6e0 <___vfprintf_internal_r+0x1ae0>
    c4b8:	d9402d17 	ldw	r5,180(sp)
    c4bc:	d8c02917 	ldw	r3,164(sp)
    c4c0:	002d883a 	mov	r22,zero
    c4c4:	28800104 	addi	r2,r5,4
    c4c8:	2cc00017 	ldw	r19,0(r5)
    c4cc:	183e4b0e 	bge	r3,zero,bdfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bdfc>
    c4d0:	9d86b03a 	or	r3,r19,r22
    c4d4:	d8802d15 	stw	r2,180(sp)
    c4d8:	183e4c1e 	bne	r3,zero,be0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be0c>
    c4dc:	0039883a 	mov	fp,zero
    c4e0:	0005883a 	mov	r2,zero
    c4e4:	003d4006 	br	b9e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b9e8>
    c4e8:	014000b4 	movhi	r5,2
    c4ec:	2952e684 	addi	r5,r5,19354
    c4f0:	d9402b15 	stw	r5,172(sp)
    c4f4:	d9402b17 	ldw	r5,172(sp)
    c4f8:	1c47883a 	add	r3,r3,r17
    c4fc:	10800044 	addi	r2,r2,1
    c500:	41400015 	stw	r5,0(r8)
    c504:	44400115 	stw	r17,4(r8)
    c508:	d8c02015 	stw	r3,128(sp)
    c50c:	d8801f15 	stw	r2,124(sp)
    c510:	010001c4 	movi	r4,7
    c514:	20bec816 	blt	r4,r2,c038 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c038>
    c518:	42000204 	addi	r8,r8,8
    c51c:	003ecd06 	br	c054 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c054>
    c520:	d9002917 	ldw	r4,164(sp)
    c524:	d8002785 	stb	zero,158(sp)
    c528:	203d2d16 	blt	r4,zero,b9e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b9e0>
    c52c:	00bfdfc4 	movi	r2,-129
    c530:	90a4703a 	and	r18,r18,r2
    c534:	003a9106 	br	af7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700af7c>
    c538:	010000b4 	movhi	r4,2
    c53c:	2112e684 	addi	r4,r4,19354
    c540:	d9002b15 	stw	r4,172(sp)
    c544:	003c0c06 	br	b578 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b578>
    c548:	d9002c17 	ldw	r4,176(sp)
    c54c:	d9801e04 	addi	r6,sp,120
    c550:	b80b883a 	mov	r5,r23
    c554:	0012a5c0 	call	12a5c <__sprint_r>
    c558:	103aab1e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    c55c:	d8c02017 	ldw	r3,128(sp)
    c560:	da000404 	addi	r8,sp,16
    c564:	003d4106 	br	ba6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ba6c>
    c568:	d8801f17 	ldw	r2,124(sp)
    c56c:	014000b4 	movhi	r5,2
    c570:	01000044 	movi	r4,1
    c574:	18c00044 	addi	r3,r3,1
    c578:	10800044 	addi	r2,r2,1
    c57c:	2952de04 	addi	r5,r5,19320
    c580:	41000115 	stw	r4,4(r8)
    c584:	41400015 	stw	r5,0(r8)
    c588:	d8c02015 	stw	r3,128(sp)
    c58c:	d8801f15 	stw	r2,124(sp)
    c590:	010001c4 	movi	r4,7
    c594:	20805c16 	blt	r4,r2,c708 <___vfprintf_internal_r+0x1b08>
    c598:	42000204 	addi	r8,r8,8
    c59c:	8800041e 	bne	r17,zero,c5b0 <___vfprintf_internal_r+0x19b0>
    c5a0:	d8803317 	ldw	r2,204(sp)
    c5a4:	1000021e 	bne	r2,zero,c5b0 <___vfprintf_internal_r+0x19b0>
    c5a8:	9080004c 	andi	r2,r18,1
    c5ac:	103c0926 	beq	r2,zero,b5d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5d4>
    c5b0:	d9003717 	ldw	r4,220(sp)
    c5b4:	d8801f17 	ldw	r2,124(sp)
    c5b8:	d9403417 	ldw	r5,208(sp)
    c5bc:	20c7883a 	add	r3,r4,r3
    c5c0:	10800044 	addi	r2,r2,1
    c5c4:	41000115 	stw	r4,4(r8)
    c5c8:	41400015 	stw	r5,0(r8)
    c5cc:	d8c02015 	stw	r3,128(sp)
    c5d0:	d8801f15 	stw	r2,124(sp)
    c5d4:	010001c4 	movi	r4,7
    c5d8:	20812116 	blt	r4,r2,ca60 <___vfprintf_internal_r+0x1e60>
    c5dc:	42000204 	addi	r8,r8,8
    c5e0:	0463c83a 	sub	r17,zero,r17
    c5e4:	0440730e 	bge	zero,r17,c7b4 <___vfprintf_internal_r+0x1bb4>
    c5e8:	05800404 	movi	r22,16
    c5ec:	b440860e 	bge	r22,r17,c808 <___vfprintf_internal_r+0x1c08>
    c5f0:	014000b4 	movhi	r5,2
    c5f4:	2952e684 	addi	r5,r5,19354
    c5f8:	d9402b15 	stw	r5,172(sp)
    c5fc:	070001c4 	movi	fp,7
    c600:	dcc02c17 	ldw	r19,176(sp)
    c604:	00000306 	br	c614 <___vfprintf_internal_r+0x1a14>
    c608:	42000204 	addi	r8,r8,8
    c60c:	8c7ffc04 	addi	r17,r17,-16
    c610:	b440800e 	bge	r22,r17,c814 <___vfprintf_internal_r+0x1c14>
    c614:	18c00404 	addi	r3,r3,16
    c618:	10800044 	addi	r2,r2,1
    c61c:	45000015 	stw	r20,0(r8)
    c620:	45800115 	stw	r22,4(r8)
    c624:	d8c02015 	stw	r3,128(sp)
    c628:	d8801f15 	stw	r2,124(sp)
    c62c:	e0bff60e 	bge	fp,r2,c608 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c608>
    c630:	d9801e04 	addi	r6,sp,120
    c634:	b80b883a 	mov	r5,r23
    c638:	9809883a 	mov	r4,r19
    c63c:	0012a5c0 	call	12a5c <__sprint_r>
    c640:	103a711e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    c644:	d8c02017 	ldw	r3,128(sp)
    c648:	d8801f17 	ldw	r2,124(sp)
    c64c:	da000404 	addi	r8,sp,16
    c650:	003fee06 	br	c60c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c60c>
    c654:	00bfffc4 	movi	r2,-1
    c658:	003a6f06 	br	b018 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b018>
    c65c:	008011c4 	movi	r2,71
    c660:	1440b816 	blt	r2,r17,c944 <___vfprintf_internal_r+0x1d44>
    c664:	040000b4 	movhi	r16,2
    c668:	8412d004 	addi	r16,r16,19264
    c66c:	00c000c4 	movi	r3,3
    c670:	00bfdfc4 	movi	r2,-129
    c674:	d8c02a15 	stw	r3,168(sp)
    c678:	90a4703a 	and	r18,r18,r2
    c67c:	df002783 	ldbu	fp,158(sp)
    c680:	d8c02e15 	stw	r3,184(sp)
    c684:	d8002915 	stw	zero,164(sp)
    c688:	d8003215 	stw	zero,200(sp)
    c68c:	003b2906 	br	b334 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b334>
    c690:	d9002d17 	ldw	r4,180(sp)
    c694:	24c00017 	ldw	r19,0(r4)
    c698:	21000104 	addi	r4,r4,4
    c69c:	d9002d15 	stw	r4,180(sp)
    c6a0:	982dd7fa 	srai	r22,r19,31
    c6a4:	b005883a 	mov	r2,r22
    c6a8:	003a9f06 	br	b128 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b128>
    c6ac:	d9402d17 	ldw	r5,180(sp)
    c6b0:	d8c02f17 	ldw	r3,188(sp)
    c6b4:	28800017 	ldw	r2,0(r5)
    c6b8:	29400104 	addi	r5,r5,4
    c6bc:	d9402d15 	stw	r5,180(sp)
    c6c0:	10c00015 	stw	r3,0(r2)
    c6c4:	00398606 	br	ace0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ace0>
    c6c8:	d9402d17 	ldw	r5,180(sp)
    c6cc:	002d883a 	mov	r22,zero
    c6d0:	2cc00017 	ldw	r19,0(r5)
    c6d4:	29400104 	addi	r5,r5,4
    c6d8:	d9402d15 	stw	r5,180(sp)
    c6dc:	003c2306 	br	b76c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b76c>
    c6e0:	d8c02d17 	ldw	r3,180(sp)
    c6e4:	d9002917 	ldw	r4,164(sp)
    c6e8:	002d883a 	mov	r22,zero
    c6ec:	18800104 	addi	r2,r3,4
    c6f0:	1cc0000b 	ldhu	r19,0(r3)
    c6f4:	203dc10e 	bge	r4,zero,bdfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bdfc>
    c6f8:	003f7506 	br	c4d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c4d0>
    c6fc:	040000b4 	movhi	r16,2
    c700:	8412ce04 	addi	r16,r16,19256
    c704:	003acc06 	br	b238 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b238>
    c708:	d9002c17 	ldw	r4,176(sp)
    c70c:	d9801e04 	addi	r6,sp,120
    c710:	b80b883a 	mov	r5,r23
    c714:	0012a5c0 	call	12a5c <__sprint_r>
    c718:	103a3b1e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    c71c:	dc402617 	ldw	r17,152(sp)
    c720:	d8c02017 	ldw	r3,128(sp)
    c724:	da000404 	addi	r8,sp,16
    c728:	003f9c06 	br	c59c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c59c>
    c72c:	ac400043 	ldbu	r17,1(r21)
    c730:	94800814 	ori	r18,r18,32
    c734:	ad400044 	addi	r21,r21,1
    c738:	8c403fcc 	andi	r17,r17,255
    c73c:	8c40201c 	xori	r17,r17,128
    c740:	8c7fe004 	addi	r17,r17,-128
    c744:	00398f06 	br	ad84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad84>
    c748:	d8c02d15 	stw	r3,180(sp)
    c74c:	0039883a 	mov	fp,zero
    c750:	003e3506 	br	c028 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c028>
    c754:	d9002c17 	ldw	r4,176(sp)
    c758:	d9801e04 	addi	r6,sp,120
    c75c:	b80b883a 	mov	r5,r23
    c760:	0012a5c0 	call	12a5c <__sprint_r>
    c764:	103a281e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    c768:	d8c02017 	ldw	r3,128(sp)
    c76c:	da000404 	addi	r8,sp,16
    c770:	003cd006 	br	bab4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bab4>
    c774:	8009883a 	mov	r4,r16
    c778:	da003d15 	stw	r8,244(sp)
    c77c:	00089900 	call	8990 <strlen>
    c780:	d8802e15 	stw	r2,184(sp)
    c784:	da003d17 	ldw	r8,244(sp)
    c788:	103c340e 	bge	r2,zero,b85c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b85c>
    c78c:	0005883a 	mov	r2,zero
    c790:	003c3206 	br	b85c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b85c>
    c794:	d9002c17 	ldw	r4,176(sp)
    c798:	d9801e04 	addi	r6,sp,120
    c79c:	b80b883a 	mov	r5,r23
    c7a0:	0012a5c0 	call	12a5c <__sprint_r>
    c7a4:	103a181e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    c7a8:	d8c02017 	ldw	r3,128(sp)
    c7ac:	d8801f17 	ldw	r2,124(sp)
    c7b0:	da000404 	addi	r8,sp,16
    c7b4:	d9403317 	ldw	r5,204(sp)
    c7b8:	10800044 	addi	r2,r2,1
    c7bc:	44000015 	stw	r16,0(r8)
    c7c0:	28c7883a 	add	r3,r5,r3
    c7c4:	003b7d06 	br	b5bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b5bc>
    c7c8:	010000b4 	movhi	r4,2
    c7cc:	2112ea84 	addi	r4,r4,19370
    c7d0:	d9003515 	stw	r4,212(sp)
    c7d4:	003b1406 	br	b428 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b428>
    c7d8:	013fffc4 	movi	r4,-1
    c7dc:	003a3506 	br	b0b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b0b4>
    c7e0:	0023883a 	mov	r17,zero
    c7e4:	003d9d06 	br	be5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be5c>
    c7e8:	d9002c17 	ldw	r4,176(sp)
    c7ec:	d9801e04 	addi	r6,sp,120
    c7f0:	b80b883a 	mov	r5,r23
    c7f4:	0012a5c0 	call	12a5c <__sprint_r>
    c7f8:	103a031e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    c7fc:	d8c02017 	ldw	r3,128(sp)
    c800:	da000404 	addi	r8,sp,16
    c804:	003d9406 	br	be58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700be58>
    c808:	010000b4 	movhi	r4,2
    c80c:	2112e684 	addi	r4,r4,19354
    c810:	d9002b15 	stw	r4,172(sp)
    c814:	d9002b17 	ldw	r4,172(sp)
    c818:	1c47883a 	add	r3,r3,r17
    c81c:	10800044 	addi	r2,r2,1
    c820:	41000015 	stw	r4,0(r8)
    c824:	44400115 	stw	r17,4(r8)
    c828:	d8c02015 	stw	r3,128(sp)
    c82c:	d8801f15 	stw	r2,124(sp)
    c830:	010001c4 	movi	r4,7
    c834:	20bfd716 	blt	r4,r2,c794 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c794>
    c838:	42000204 	addi	r8,r8,8
    c83c:	003fdd06 	br	c7b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c7b4>
    c840:	d9002c17 	ldw	r4,176(sp)
    c844:	d9801e04 	addi	r6,sp,120
    c848:	b80b883a 	mov	r5,r23
    c84c:	0012a5c0 	call	12a5c <__sprint_r>
    c850:	1039ed1e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    c854:	d8802617 	ldw	r2,152(sp)
    c858:	d8c02017 	ldw	r3,128(sp)
    c85c:	da000404 	addi	r8,sp,16
    c860:	003e1006 	br	c0a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c0a4>
    c864:	00800044 	movi	r2,1
    c868:	10803fcc 	andi	r2,r2,255
    c86c:	00c00044 	movi	r3,1
    c870:	10fa3526 	beq	r2,r3,b148 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b148>
    c874:	00c00084 	movi	r3,2
    c878:	10fbcb26 	beq	r2,r3,b7a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b7a8>
    c87c:	003a8f06 	br	b2bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b2bc>
    c880:	010000b4 	movhi	r4,2
    c884:	2112ea84 	addi	r4,r4,19370
    c888:	d9003515 	stw	r4,212(sp)
    c88c:	003b7606 	br	b668 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b668>
    c890:	d8802917 	ldw	r2,164(sp)
    c894:	00c00184 	movi	r3,6
    c898:	1880012e 	bgeu	r3,r2,c8a0 <___vfprintf_internal_r+0x1ca0>
    c89c:	1805883a 	mov	r2,r3
    c8a0:	d8802e15 	stw	r2,184(sp)
    c8a4:	1000ef16 	blt	r2,zero,cc64 <___vfprintf_internal_r+0x2064>
    c8a8:	040000b4 	movhi	r16,2
    c8ac:	d8802a15 	stw	r2,168(sp)
    c8b0:	dcc02d15 	stw	r19,180(sp)
    c8b4:	d8002915 	stw	zero,164(sp)
    c8b8:	d8003215 	stw	zero,200(sp)
    c8bc:	8412dc04 	addi	r16,r16,19312
    c8c0:	0039883a 	mov	fp,zero
    c8c4:	003aa206 	br	b350 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b350>
    c8c8:	0021883a 	mov	r16,zero
    c8cc:	003e0706 	br	c0ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c0ec>
    c8d0:	d9002c17 	ldw	r4,176(sp)
    c8d4:	d9801e04 	addi	r6,sp,120
    c8d8:	b80b883a 	mov	r5,r23
    c8dc:	0012a5c0 	call	12a5c <__sprint_r>
    c8e0:	1039c91e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    c8e4:	d8802617 	ldw	r2,152(sp)
    c8e8:	d9403317 	ldw	r5,204(sp)
    c8ec:	d8c02017 	ldw	r3,128(sp)
    c8f0:	da000404 	addi	r8,sp,16
    c8f4:	2885c83a 	sub	r2,r5,r2
    c8f8:	003dfb06 	br	c0e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c0e8>
    c8fc:	9080004c 	andi	r2,r18,1
    c900:	103e8f1e 	bne	r2,zero,c340 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c340>
    c904:	d8802117 	ldw	r2,132(sp)
    c908:	003e9e06 	br	c384 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c384>
    c90c:	1025883a 	mov	r18,r2
    c910:	0039883a 	mov	fp,zero
    c914:	00800084 	movi	r2,2
    c918:	003fd306 	br	c868 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c868>
    c91c:	07000b44 	movi	fp,45
    c920:	df002785 	stb	fp,158(sp)
    c924:	003a4006 	br	b228 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b228>
    c928:	00c00b44 	movi	r3,45
    c92c:	d8c02785 	stb	r3,158(sp)
    c930:	d8802a15 	stw	r2,168(sp)
    c934:	dc802b17 	ldw	r18,172(sp)
    c938:	d8002915 	stw	zero,164(sp)
    c93c:	07000b44 	movi	fp,45
    c940:	003a8006 	br	b344 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b344>
    c944:	040000b4 	movhi	r16,2
    c948:	8412d104 	addi	r16,r16,19268
    c94c:	003f4706 	br	c66c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c66c>
    c950:	d8c02d17 	ldw	r3,180(sp)
    c954:	d9002f17 	ldw	r4,188(sp)
    c958:	18800017 	ldw	r2,0(r3)
    c95c:	18c00104 	addi	r3,r3,4
    c960:	d8c02d15 	stw	r3,180(sp)
    c964:	11000015 	stw	r4,0(r2)
    c968:	0038dd06 	br	ace0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ace0>
    c96c:	dd802617 	ldw	r22,152(sp)
    c970:	00bfff44 	movi	r2,-3
    c974:	b0801c16 	blt	r22,r2,c9e8 <___vfprintf_internal_r+0x1de8>
    c978:	d9402917 	ldw	r5,164(sp)
    c97c:	2d801a16 	blt	r5,r22,c9e8 <___vfprintf_internal_r+0x1de8>
    c980:	dd803215 	stw	r22,200(sp)
    c984:	003e8906 	br	c3ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3ac>
    c988:	010000b4 	movhi	r4,2
    c98c:	2112e684 	addi	r4,r4,19354
    c990:	d9002b15 	stw	r4,172(sp)
    c994:	003c9106 	br	bbdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700bbdc>
    c998:	e005883a 	mov	r2,fp
    c99c:	003e7906 	br	c384 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c384>
    c9a0:	d9402917 	ldw	r5,164(sp)
    c9a4:	df002783 	ldbu	fp,158(sp)
    c9a8:	dcc02d15 	stw	r19,180(sp)
    c9ac:	d9402a15 	stw	r5,168(sp)
    c9b0:	d9402e15 	stw	r5,184(sp)
    c9b4:	d8002915 	stw	zero,164(sp)
    c9b8:	d8003215 	stw	zero,200(sp)
    c9bc:	003a5d06 	br	b334 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b334>
    c9c0:	9080004c 	andi	r2,r18,1
    c9c4:	0039883a 	mov	fp,zero
    c9c8:	10000426 	beq	r2,zero,c9dc <___vfprintf_internal_r+0x1ddc>
    c9cc:	00800c04 	movi	r2,48
    c9d0:	dc001dc4 	addi	r16,sp,119
    c9d4:	d8801dc5 	stb	r2,119(sp)
    c9d8:	003b8006 	br	b7dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b7dc>
    c9dc:	d8002e15 	stw	zero,184(sp)
    c9e0:	dc001e04 	addi	r16,sp,120
    c9e4:	003a4d06 	br	b31c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b31c>
    c9e8:	8c7fff84 	addi	r17,r17,-2
    c9ec:	b5bfffc4 	addi	r22,r22,-1
    c9f0:	dd802615 	stw	r22,152(sp)
    c9f4:	dc4022c5 	stb	r17,139(sp)
    c9f8:	b000bf16 	blt	r22,zero,ccf8 <___vfprintf_internal_r+0x20f8>
    c9fc:	00800ac4 	movi	r2,43
    ca00:	d8802305 	stb	r2,140(sp)
    ca04:	00800244 	movi	r2,9
    ca08:	15807016 	blt	r2,r22,cbcc <___vfprintf_internal_r+0x1fcc>
    ca0c:	00800c04 	movi	r2,48
    ca10:	b5800c04 	addi	r22,r22,48
    ca14:	d8802345 	stb	r2,141(sp)
    ca18:	dd802385 	stb	r22,142(sp)
    ca1c:	d88023c4 	addi	r2,sp,143
    ca20:	df0022c4 	addi	fp,sp,139
    ca24:	d8c03317 	ldw	r3,204(sp)
    ca28:	1739c83a 	sub	fp,r2,fp
    ca2c:	d9003317 	ldw	r4,204(sp)
    ca30:	e0c7883a 	add	r3,fp,r3
    ca34:	df003a15 	stw	fp,232(sp)
    ca38:	d8c02e15 	stw	r3,184(sp)
    ca3c:	00800044 	movi	r2,1
    ca40:	1100b30e 	bge	r2,r4,cd10 <___vfprintf_internal_r+0x2110>
    ca44:	d8c02e17 	ldw	r3,184(sp)
    ca48:	18c00044 	addi	r3,r3,1
    ca4c:	d8c02e15 	stw	r3,184(sp)
    ca50:	1805883a 	mov	r2,r3
    ca54:	1800ac16 	blt	r3,zero,cd08 <___vfprintf_internal_r+0x2108>
    ca58:	d8003215 	stw	zero,200(sp)
    ca5c:	003e5d06 	br	c3d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3d4>
    ca60:	d9002c17 	ldw	r4,176(sp)
    ca64:	d9801e04 	addi	r6,sp,120
    ca68:	b80b883a 	mov	r5,r23
    ca6c:	0012a5c0 	call	12a5c <__sprint_r>
    ca70:	1039651e 	bne	r2,zero,b008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b008>
    ca74:	dc402617 	ldw	r17,152(sp)
    ca78:	d8c02017 	ldw	r3,128(sp)
    ca7c:	d8801f17 	ldw	r2,124(sp)
    ca80:	da000404 	addi	r8,sp,16
    ca84:	003ed606 	br	c5e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c5e0>
    ca88:	582b883a 	mov	r21,r11
    ca8c:	d8002915 	stw	zero,164(sp)
    ca90:	0038bd06 	br	ad88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad88>
    ca94:	d8802917 	ldw	r2,164(sp)
    ca98:	103e071e 	bne	r2,zero,c2b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c2b8>
    ca9c:	dc002915 	stw	r16,164(sp)
    caa0:	003e0506 	br	c2b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c2b8>
    caa4:	d9002917 	ldw	r4,164(sp)
    caa8:	20c00044 	addi	r3,r4,1
    caac:	003e0f06 	br	c2ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c2ec>
    cab0:	01400184 	movi	r5,6
    cab4:	d9402915 	stw	r5,164(sp)
    cab8:	003dff06 	br	c2b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c2b8>
    cabc:	d8802104 	addi	r2,sp,132
    cac0:	d8800315 	stw	r2,12(sp)
    cac4:	d8802504 	addi	r2,sp,148
    cac8:	d8800215 	stw	r2,8(sp)
    cacc:	d8802604 	addi	r2,sp,152
    cad0:	d8800115 	stw	r2,4(sp)
    cad4:	d8802917 	ldw	r2,164(sp)
    cad8:	d9403617 	ldw	r5,216(sp)
    cadc:	d9002c17 	ldw	r4,176(sp)
    cae0:	d8800015 	stw	r2,0(sp)
    cae4:	01c000c4 	movi	r7,3
    cae8:	980d883a 	mov	r6,r19
    caec:	da003d15 	stw	r8,244(sp)
    caf0:	000d2240 	call	d224 <_dtoa_r>
    caf4:	d8c02917 	ldw	r3,164(sp)
    caf8:	da003d17 	ldw	r8,244(sp)
    cafc:	1021883a 	mov	r16,r2
    cb00:	10f9883a 	add	fp,r2,r3
    cb04:	81000007 	ldb	r4,0(r16)
    cb08:	00800c04 	movi	r2,48
    cb0c:	20805e26 	beq	r4,r2,cc88 <___vfprintf_internal_r+0x2088>
    cb10:	d8c02617 	ldw	r3,152(sp)
    cb14:	e0f9883a 	add	fp,fp,r3
    cb18:	003e0a06 	br	c344 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c344>
    cb1c:	00c00b44 	movi	r3,45
    cb20:	24e0003c 	xorhi	r19,r4,32768
    cb24:	d8c02a05 	stb	r3,168(sp)
    cb28:	003de906 	br	c2d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c2d0>
    cb2c:	d8c03217 	ldw	r3,200(sp)
    cb30:	00c07a0e 	bge	zero,r3,cd1c <___vfprintf_internal_r+0x211c>
    cb34:	00800044 	movi	r2,1
    cb38:	d9003317 	ldw	r4,204(sp)
    cb3c:	1105883a 	add	r2,r2,r4
    cb40:	d8802e15 	stw	r2,184(sp)
    cb44:	10004e16 	blt	r2,zero,cc80 <___vfprintf_internal_r+0x2080>
    cb48:	044019c4 	movi	r17,103
    cb4c:	003e2106 	br	c3d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3d4>
    cb50:	d9002917 	ldw	r4,164(sp)
    cb54:	d8802104 	addi	r2,sp,132
    cb58:	d8800315 	stw	r2,12(sp)
    cb5c:	d9000015 	stw	r4,0(sp)
    cb60:	d8802504 	addi	r2,sp,148
    cb64:	d9403617 	ldw	r5,216(sp)
    cb68:	d9002c17 	ldw	r4,176(sp)
    cb6c:	d8800215 	stw	r2,8(sp)
    cb70:	d8802604 	addi	r2,sp,152
    cb74:	d8800115 	stw	r2,4(sp)
    cb78:	01c000c4 	movi	r7,3
    cb7c:	980d883a 	mov	r6,r19
    cb80:	da003d15 	stw	r8,244(sp)
    cb84:	000d2240 	call	d224 <_dtoa_r>
    cb88:	d8c02917 	ldw	r3,164(sp)
    cb8c:	da003d17 	ldw	r8,244(sp)
    cb90:	1021883a 	mov	r16,r2
    cb94:	00801184 	movi	r2,70
    cb98:	80f9883a 	add	fp,r16,r3
    cb9c:	88bfd926 	beq	r17,r2,cb04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb04>
    cba0:	003de806 	br	c344 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c344>
    cba4:	d9002917 	ldw	r4,164(sp)
    cba8:	00c04d0e 	bge	zero,r3,cce0 <___vfprintf_internal_r+0x20e0>
    cbac:	2000441e 	bne	r4,zero,ccc0 <___vfprintf_internal_r+0x20c0>
    cbb0:	9480004c 	andi	r18,r18,1
    cbb4:	9000421e 	bne	r18,zero,ccc0 <___vfprintf_internal_r+0x20c0>
    cbb8:	1805883a 	mov	r2,r3
    cbbc:	18007016 	blt	r3,zero,cd80 <___vfprintf_internal_r+0x2180>
    cbc0:	d8c03217 	ldw	r3,200(sp)
    cbc4:	d8c02e15 	stw	r3,184(sp)
    cbc8:	003e0206 	br	c3d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3d4>
    cbcc:	df0022c4 	addi	fp,sp,139
    cbd0:	dc002915 	stw	r16,164(sp)
    cbd4:	4027883a 	mov	r19,r8
    cbd8:	e021883a 	mov	r16,fp
    cbdc:	b009883a 	mov	r4,r22
    cbe0:	01400284 	movi	r5,10
    cbe4:	00154100 	call	15410 <__modsi3>
    cbe8:	10800c04 	addi	r2,r2,48
    cbec:	843fffc4 	addi	r16,r16,-1
    cbf0:	b009883a 	mov	r4,r22
    cbf4:	01400284 	movi	r5,10
    cbf8:	80800005 	stb	r2,0(r16)
    cbfc:	001538c0 	call	1538c <__divsi3>
    cc00:	102d883a 	mov	r22,r2
    cc04:	00800244 	movi	r2,9
    cc08:	15bff416 	blt	r2,r22,cbdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbdc>
    cc0c:	9811883a 	mov	r8,r19
    cc10:	b0800c04 	addi	r2,r22,48
    cc14:	8027883a 	mov	r19,r16
    cc18:	997fffc4 	addi	r5,r19,-1
    cc1c:	98bfffc5 	stb	r2,-1(r19)
    cc20:	dc002917 	ldw	r16,164(sp)
    cc24:	2f006a2e 	bgeu	r5,fp,cdd0 <___vfprintf_internal_r+0x21d0>
    cc28:	d9c02384 	addi	r7,sp,142
    cc2c:	3ccfc83a 	sub	r7,r7,r19
    cc30:	d9002344 	addi	r4,sp,141
    cc34:	e1cf883a 	add	r7,fp,r7
    cc38:	00000106 	br	cc40 <___vfprintf_internal_r+0x2040>
    cc3c:	28800003 	ldbu	r2,0(r5)
    cc40:	20800005 	stb	r2,0(r4)
    cc44:	21000044 	addi	r4,r4,1
    cc48:	29400044 	addi	r5,r5,1
    cc4c:	393ffb1e 	bne	r7,r4,cc3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cc3c>
    cc50:	d8802304 	addi	r2,sp,140
    cc54:	14c5c83a 	sub	r2,r2,r19
    cc58:	d8c02344 	addi	r3,sp,141
    cc5c:	1885883a 	add	r2,r3,r2
    cc60:	003f7006 	br	ca24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca24>
    cc64:	0005883a 	mov	r2,zero
    cc68:	003f0f06 	br	c8a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c8a8>
    cc6c:	d8c03217 	ldw	r3,200(sp)
    cc70:	18c00044 	addi	r3,r3,1
    cc74:	d8c02e15 	stw	r3,184(sp)
    cc78:	1805883a 	mov	r2,r3
    cc7c:	183fb20e 	bge	r3,zero,cb48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb48>
    cc80:	0005883a 	mov	r2,zero
    cc84:	003fb006 	br	cb48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb48>
    cc88:	d9003617 	ldw	r4,216(sp)
    cc8c:	000d883a 	mov	r6,zero
    cc90:	000f883a 	mov	r7,zero
    cc94:	980b883a 	mov	r5,r19
    cc98:	d8c03c15 	stw	r3,240(sp)
    cc9c:	da003d15 	stw	r8,244(sp)
    cca0:	0015e280 	call	15e28 <__eqdf2>
    cca4:	d8c03c17 	ldw	r3,240(sp)
    cca8:	da003d17 	ldw	r8,244(sp)
    ccac:	103f9826 	beq	r2,zero,cb10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb10>
    ccb0:	00800044 	movi	r2,1
    ccb4:	10c7c83a 	sub	r3,r2,r3
    ccb8:	d8c02615 	stw	r3,152(sp)
    ccbc:	003f9506 	br	cb14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb14>
    ccc0:	d9002917 	ldw	r4,164(sp)
    ccc4:	d8c03217 	ldw	r3,200(sp)
    ccc8:	20800044 	addi	r2,r4,1
    cccc:	1885883a 	add	r2,r3,r2
    ccd0:	d8802e15 	stw	r2,184(sp)
    ccd4:	103dbf0e 	bge	r2,zero,c3d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3d4>
    ccd8:	0005883a 	mov	r2,zero
    ccdc:	003dbd06 	br	c3d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3d4>
    cce0:	2000211e 	bne	r4,zero,cd68 <___vfprintf_internal_r+0x2168>
    cce4:	9480004c 	andi	r18,r18,1
    cce8:	90001f1e 	bne	r18,zero,cd68 <___vfprintf_internal_r+0x2168>
    ccec:	00800044 	movi	r2,1
    ccf0:	d8802e15 	stw	r2,184(sp)
    ccf4:	003db706 	br	c3d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3d4>
    ccf8:	00800b44 	movi	r2,45
    ccfc:	05adc83a 	sub	r22,zero,r22
    cd00:	d8802305 	stb	r2,140(sp)
    cd04:	003f3f06 	br	ca04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca04>
    cd08:	0005883a 	mov	r2,zero
    cd0c:	003f5206 	br	ca58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca58>
    cd10:	90a4703a 	and	r18,r18,r2
    cd14:	903f4e26 	beq	r18,zero,ca50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca50>
    cd18:	003f4a06 	br	ca44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca44>
    cd1c:	00800084 	movi	r2,2
    cd20:	10c5c83a 	sub	r2,r2,r3
    cd24:	003f8406 	br	cb38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb38>
    cd28:	d8802d17 	ldw	r2,180(sp)
    cd2c:	d9002d17 	ldw	r4,180(sp)
    cd30:	ac400043 	ldbu	r17,1(r21)
    cd34:	10800017 	ldw	r2,0(r2)
    cd38:	582b883a 	mov	r21,r11
    cd3c:	d8802915 	stw	r2,164(sp)
    cd40:	20800104 	addi	r2,r4,4
    cd44:	d9002917 	ldw	r4,164(sp)
    cd48:	d8802d15 	stw	r2,180(sp)
    cd4c:	203e7a0e 	bge	r4,zero,c738 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c738>
    cd50:	8c403fcc 	andi	r17,r17,255
    cd54:	00bfffc4 	movi	r2,-1
    cd58:	8c40201c 	xori	r17,r17,128
    cd5c:	d8802915 	stw	r2,164(sp)
    cd60:	8c7fe004 	addi	r17,r17,-128
    cd64:	00380706 	br	ad84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ad84>
    cd68:	d8c02917 	ldw	r3,164(sp)
    cd6c:	18c00084 	addi	r3,r3,2
    cd70:	d8c02e15 	stw	r3,184(sp)
    cd74:	1805883a 	mov	r2,r3
    cd78:	183d960e 	bge	r3,zero,c3d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3d4>
    cd7c:	003fd606 	br	ccd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ccd8>
    cd80:	0005883a 	mov	r2,zero
    cd84:	003f8e06 	br	cbc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cbc0>
    cd88:	9080004c 	andi	r2,r18,1
    cd8c:	103f811e 	bne	r2,zero,cb94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cb94>
    cd90:	d8802117 	ldw	r2,132(sp)
    cd94:	1405c83a 	sub	r2,r2,r16
    cd98:	d8803315 	stw	r2,204(sp)
    cd9c:	b47ef326 	beq	r22,r17,c96c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c96c>
    cda0:	dd802617 	ldw	r22,152(sp)
    cda4:	003f1106 	br	c9ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c9ec>
    cda8:	d9c02785 	stb	r7,158(sp)
    cdac:	00390406 	br	b1c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b1c0>
    cdb0:	d9c02785 	stb	r7,158(sp)
    cdb4:	0038d306 	br	b104 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b104>
    cdb8:	d9c02785 	stb	r7,158(sp)
    cdbc:	003a6106 	br	b744 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b744>
    cdc0:	d9c02785 	stb	r7,158(sp)
    cdc4:	003af806 	br	b9a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b9a8>
    cdc8:	0005883a 	mov	r2,zero
    cdcc:	003d7e06 	br	c3c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700c3c8>
    cdd0:	d8802344 	addi	r2,sp,141
    cdd4:	003f1306 	br	ca24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ca24>
    cdd8:	d9c02785 	stb	r7,158(sp)
    cddc:	00392306 	br	b26c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b26c>
    cde0:	d9c02785 	stb	r7,158(sp)
    cde4:	003aa906 	br	b88c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b88c>
    cde8:	d9c02785 	stb	r7,158(sp)
    cdec:	003a3d06 	br	b6e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b6e4>
    cdf0:	d9c02785 	stb	r7,158(sp)
    cdf4:	003aca06 	br	b920 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700b920>

0000cdf8 <__vfprintf_internal>:
    cdf8:	008000b4 	movhi	r2,2
    cdfc:	109bd004 	addi	r2,r2,28480
    ce00:	300f883a 	mov	r7,r6
    ce04:	280d883a 	mov	r6,r5
    ce08:	200b883a 	mov	r5,r4
    ce0c:	11000017 	ldw	r4,0(r2)
    ce10:	000ac001 	jmpi	ac00 <___vfprintf_internal_r>

0000ce14 <__sbprintf>:
    ce14:	2880030b 	ldhu	r2,12(r5)
    ce18:	2ac01917 	ldw	r11,100(r5)
    ce1c:	2a80038b 	ldhu	r10,14(r5)
    ce20:	2a400717 	ldw	r9,28(r5)
    ce24:	2a000917 	ldw	r8,36(r5)
    ce28:	defee204 	addi	sp,sp,-1144
    ce2c:	00c10004 	movi	r3,1024
    ce30:	dc011a15 	stw	r16,1128(sp)
    ce34:	10bfff4c 	andi	r2,r2,65533
    ce38:	2821883a 	mov	r16,r5
    ce3c:	d8cb883a 	add	r5,sp,r3
    ce40:	dc811c15 	stw	r18,1136(sp)
    ce44:	dc411b15 	stw	r17,1132(sp)
    ce48:	dfc11d15 	stw	ra,1140(sp)
    ce4c:	2025883a 	mov	r18,r4
    ce50:	d881030d 	sth	r2,1036(sp)
    ce54:	dac11915 	stw	r11,1124(sp)
    ce58:	da81038d 	sth	r10,1038(sp)
    ce5c:	da410715 	stw	r9,1052(sp)
    ce60:	da010915 	stw	r8,1060(sp)
    ce64:	dec10015 	stw	sp,1024(sp)
    ce68:	dec10415 	stw	sp,1040(sp)
    ce6c:	d8c10215 	stw	r3,1032(sp)
    ce70:	d8c10515 	stw	r3,1044(sp)
    ce74:	d8010615 	stw	zero,1048(sp)
    ce78:	000ac000 	call	ac00 <___vfprintf_internal_r>
    ce7c:	1023883a 	mov	r17,r2
    ce80:	10000416 	blt	r2,zero,ce94 <__sbprintf+0x80>
    ce84:	d9410004 	addi	r5,sp,1024
    ce88:	9009883a 	mov	r4,r18
    ce8c:	000eac80 	call	eac8 <_fflush_r>
    ce90:	10000d1e 	bne	r2,zero,cec8 <__sbprintf+0xb4>
    ce94:	d881030b 	ldhu	r2,1036(sp)
    ce98:	1080100c 	andi	r2,r2,64
    ce9c:	10000326 	beq	r2,zero,ceac <__sbprintf+0x98>
    cea0:	8080030b 	ldhu	r2,12(r16)
    cea4:	10801014 	ori	r2,r2,64
    cea8:	8080030d 	sth	r2,12(r16)
    ceac:	8805883a 	mov	r2,r17
    ceb0:	dfc11d17 	ldw	ra,1140(sp)
    ceb4:	dc811c17 	ldw	r18,1136(sp)
    ceb8:	dc411b17 	ldw	r17,1132(sp)
    cebc:	dc011a17 	ldw	r16,1128(sp)
    cec0:	dec11e04 	addi	sp,sp,1144
    cec4:	f800283a 	ret
    cec8:	047fffc4 	movi	r17,-1
    cecc:	003ff106 	br	ce94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ce94>

0000ced0 <__swsetup_r>:
    ced0:	008000b4 	movhi	r2,2
    ced4:	defffd04 	addi	sp,sp,-12
    ced8:	109bd004 	addi	r2,r2,28480
    cedc:	dc400115 	stw	r17,4(sp)
    cee0:	2023883a 	mov	r17,r4
    cee4:	11000017 	ldw	r4,0(r2)
    cee8:	dc000015 	stw	r16,0(sp)
    ceec:	dfc00215 	stw	ra,8(sp)
    cef0:	2821883a 	mov	r16,r5
    cef4:	20000226 	beq	r4,zero,cf00 <__swsetup_r+0x30>
    cef8:	20800e17 	ldw	r2,56(r4)
    cefc:	10003126 	beq	r2,zero,cfc4 <__swsetup_r+0xf4>
    cf00:	8080030b 	ldhu	r2,12(r16)
    cf04:	10c0020c 	andi	r3,r2,8
    cf08:	1009883a 	mov	r4,r2
    cf0c:	18000f26 	beq	r3,zero,cf4c <__swsetup_r+0x7c>
    cf10:	80c00417 	ldw	r3,16(r16)
    cf14:	18001526 	beq	r3,zero,cf6c <__swsetup_r+0x9c>
    cf18:	1100004c 	andi	r4,r2,1
    cf1c:	20001c1e 	bne	r4,zero,cf90 <__swsetup_r+0xc0>
    cf20:	1080008c 	andi	r2,r2,2
    cf24:	1000291e 	bne	r2,zero,cfcc <__swsetup_r+0xfc>
    cf28:	80800517 	ldw	r2,20(r16)
    cf2c:	80800215 	stw	r2,8(r16)
    cf30:	18001c26 	beq	r3,zero,cfa4 <__swsetup_r+0xd4>
    cf34:	0005883a 	mov	r2,zero
    cf38:	dfc00217 	ldw	ra,8(sp)
    cf3c:	dc400117 	ldw	r17,4(sp)
    cf40:	dc000017 	ldw	r16,0(sp)
    cf44:	dec00304 	addi	sp,sp,12
    cf48:	f800283a 	ret
    cf4c:	2080040c 	andi	r2,r4,16
    cf50:	10002e26 	beq	r2,zero,d00c <__swsetup_r+0x13c>
    cf54:	2080010c 	andi	r2,r4,4
    cf58:	10001e1e 	bne	r2,zero,cfd4 <__swsetup_r+0x104>
    cf5c:	80c00417 	ldw	r3,16(r16)
    cf60:	20800214 	ori	r2,r4,8
    cf64:	8080030d 	sth	r2,12(r16)
    cf68:	183feb1e 	bne	r3,zero,cf18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf18>
    cf6c:	1100a00c 	andi	r4,r2,640
    cf70:	01408004 	movi	r5,512
    cf74:	217fe826 	beq	r4,r5,cf18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf18>
    cf78:	800b883a 	mov	r5,r16
    cf7c:	8809883a 	mov	r4,r17
    cf80:	000fa480 	call	fa48 <__smakebuf_r>
    cf84:	8080030b 	ldhu	r2,12(r16)
    cf88:	80c00417 	ldw	r3,16(r16)
    cf8c:	003fe206 	br	cf18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf18>
    cf90:	80800517 	ldw	r2,20(r16)
    cf94:	80000215 	stw	zero,8(r16)
    cf98:	0085c83a 	sub	r2,zero,r2
    cf9c:	80800615 	stw	r2,24(r16)
    cfa0:	183fe41e 	bne	r3,zero,cf34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf34>
    cfa4:	80c0030b 	ldhu	r3,12(r16)
    cfa8:	0005883a 	mov	r2,zero
    cfac:	1900200c 	andi	r4,r3,128
    cfb0:	203fe126 	beq	r4,zero,cf38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf38>
    cfb4:	18c01014 	ori	r3,r3,64
    cfb8:	80c0030d 	sth	r3,12(r16)
    cfbc:	00bfffc4 	movi	r2,-1
    cfc0:	003fdd06 	br	cf38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf38>
    cfc4:	000eea40 	call	eea4 <__sinit>
    cfc8:	003fcd06 	br	cf00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf00>
    cfcc:	0005883a 	mov	r2,zero
    cfd0:	003fd606 	br	cf2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf2c>
    cfd4:	81400c17 	ldw	r5,48(r16)
    cfd8:	28000626 	beq	r5,zero,cff4 <__swsetup_r+0x124>
    cfdc:	80801004 	addi	r2,r16,64
    cfe0:	28800326 	beq	r5,r2,cff0 <__swsetup_r+0x120>
    cfe4:	8809883a 	mov	r4,r17
    cfe8:	000f0180 	call	f018 <_free_r>
    cfec:	8100030b 	ldhu	r4,12(r16)
    cff0:	80000c15 	stw	zero,48(r16)
    cff4:	80c00417 	ldw	r3,16(r16)
    cff8:	00bff6c4 	movi	r2,-37
    cffc:	1108703a 	and	r4,r2,r4
    d000:	80000115 	stw	zero,4(r16)
    d004:	80c00015 	stw	r3,0(r16)
    d008:	003fd506 	br	cf60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf60>
    d00c:	00800244 	movi	r2,9
    d010:	88800015 	stw	r2,0(r17)
    d014:	20801014 	ori	r2,r4,64
    d018:	8080030d 	sth	r2,12(r16)
    d01c:	00bfffc4 	movi	r2,-1
    d020:	003fc506 	br	cf38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700cf38>

0000d024 <quorem>:
    d024:	defff704 	addi	sp,sp,-36
    d028:	dc800215 	stw	r18,8(sp)
    d02c:	20800417 	ldw	r2,16(r4)
    d030:	2c800417 	ldw	r18,16(r5)
    d034:	dfc00815 	stw	ra,32(sp)
    d038:	ddc00715 	stw	r23,28(sp)
    d03c:	dd800615 	stw	r22,24(sp)
    d040:	dd400515 	stw	r21,20(sp)
    d044:	dd000415 	stw	r20,16(sp)
    d048:	dcc00315 	stw	r19,12(sp)
    d04c:	dc400115 	stw	r17,4(sp)
    d050:	dc000015 	stw	r16,0(sp)
    d054:	14807116 	blt	r2,r18,d21c <quorem+0x1f8>
    d058:	94bfffc4 	addi	r18,r18,-1
    d05c:	94ad883a 	add	r22,r18,r18
    d060:	b5ad883a 	add	r22,r22,r22
    d064:	2c400504 	addi	r17,r5,20
    d068:	8da9883a 	add	r20,r17,r22
    d06c:	25400504 	addi	r21,r4,20
    d070:	282f883a 	mov	r23,r5
    d074:	adad883a 	add	r22,r21,r22
    d078:	a1400017 	ldw	r5,0(r20)
    d07c:	2021883a 	mov	r16,r4
    d080:	b1000017 	ldw	r4,0(r22)
    d084:	29400044 	addi	r5,r5,1
    d088:	00154840 	call	15484 <__udivsi3>
    d08c:	1027883a 	mov	r19,r2
    d090:	10002c26 	beq	r2,zero,d144 <quorem+0x120>
    d094:	a813883a 	mov	r9,r21
    d098:	880b883a 	mov	r5,r17
    d09c:	0009883a 	mov	r4,zero
    d0a0:	000d883a 	mov	r6,zero
    d0a4:	2a000017 	ldw	r8,0(r5)
    d0a8:	49c00017 	ldw	r7,0(r9)
    d0ac:	29400104 	addi	r5,r5,4
    d0b0:	40bfffcc 	andi	r2,r8,65535
    d0b4:	14c5383a 	mul	r2,r2,r19
    d0b8:	4010d43a 	srli	r8,r8,16
    d0bc:	38ffffcc 	andi	r3,r7,65535
    d0c0:	1105883a 	add	r2,r2,r4
    d0c4:	1008d43a 	srli	r4,r2,16
    d0c8:	44d1383a 	mul	r8,r8,r19
    d0cc:	198d883a 	add	r6,r3,r6
    d0d0:	10ffffcc 	andi	r3,r2,65535
    d0d4:	30c7c83a 	sub	r3,r6,r3
    d0d8:	380ed43a 	srli	r7,r7,16
    d0dc:	4105883a 	add	r2,r8,r4
    d0e0:	180dd43a 	srai	r6,r3,16
    d0e4:	113fffcc 	andi	r4,r2,65535
    d0e8:	390fc83a 	sub	r7,r7,r4
    d0ec:	398d883a 	add	r6,r7,r6
    d0f0:	300e943a 	slli	r7,r6,16
    d0f4:	18ffffcc 	andi	r3,r3,65535
    d0f8:	1008d43a 	srli	r4,r2,16
    d0fc:	38ceb03a 	or	r7,r7,r3
    d100:	49c00015 	stw	r7,0(r9)
    d104:	300dd43a 	srai	r6,r6,16
    d108:	4a400104 	addi	r9,r9,4
    d10c:	a17fe52e 	bgeu	r20,r5,d0a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d0a4>
    d110:	b0800017 	ldw	r2,0(r22)
    d114:	10000b1e 	bne	r2,zero,d144 <quorem+0x120>
    d118:	b0bfff04 	addi	r2,r22,-4
    d11c:	a880082e 	bgeu	r21,r2,d140 <quorem+0x11c>
    d120:	b0ffff17 	ldw	r3,-4(r22)
    d124:	18000326 	beq	r3,zero,d134 <quorem+0x110>
    d128:	00000506 	br	d140 <quorem+0x11c>
    d12c:	10c00017 	ldw	r3,0(r2)
    d130:	1800031e 	bne	r3,zero,d140 <quorem+0x11c>
    d134:	10bfff04 	addi	r2,r2,-4
    d138:	94bfffc4 	addi	r18,r18,-1
    d13c:	a8bffb36 	bltu	r21,r2,d12c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d12c>
    d140:	84800415 	stw	r18,16(r16)
    d144:	b80b883a 	mov	r5,r23
    d148:	8009883a 	mov	r4,r16
    d14c:	001070c0 	call	1070c <__mcmp>
    d150:	10002616 	blt	r2,zero,d1ec <quorem+0x1c8>
    d154:	9cc00044 	addi	r19,r19,1
    d158:	a805883a 	mov	r2,r21
    d15c:	000b883a 	mov	r5,zero
    d160:	11000017 	ldw	r4,0(r2)
    d164:	89800017 	ldw	r6,0(r17)
    d168:	10800104 	addi	r2,r2,4
    d16c:	20ffffcc 	andi	r3,r4,65535
    d170:	194b883a 	add	r5,r3,r5
    d174:	30ffffcc 	andi	r3,r6,65535
    d178:	28c7c83a 	sub	r3,r5,r3
    d17c:	300cd43a 	srli	r6,r6,16
    d180:	2008d43a 	srli	r4,r4,16
    d184:	180bd43a 	srai	r5,r3,16
    d188:	18ffffcc 	andi	r3,r3,65535
    d18c:	2189c83a 	sub	r4,r4,r6
    d190:	2149883a 	add	r4,r4,r5
    d194:	200c943a 	slli	r6,r4,16
    d198:	8c400104 	addi	r17,r17,4
    d19c:	200bd43a 	srai	r5,r4,16
    d1a0:	30c6b03a 	or	r3,r6,r3
    d1a4:	10ffff15 	stw	r3,-4(r2)
    d1a8:	a47fed2e 	bgeu	r20,r17,d160 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d160>
    d1ac:	9485883a 	add	r2,r18,r18
    d1b0:	1085883a 	add	r2,r2,r2
    d1b4:	a887883a 	add	r3,r21,r2
    d1b8:	18800017 	ldw	r2,0(r3)
    d1bc:	10000b1e 	bne	r2,zero,d1ec <quorem+0x1c8>
    d1c0:	18bfff04 	addi	r2,r3,-4
    d1c4:	a880082e 	bgeu	r21,r2,d1e8 <quorem+0x1c4>
    d1c8:	18ffff17 	ldw	r3,-4(r3)
    d1cc:	18000326 	beq	r3,zero,d1dc <quorem+0x1b8>
    d1d0:	00000506 	br	d1e8 <quorem+0x1c4>
    d1d4:	10c00017 	ldw	r3,0(r2)
    d1d8:	1800031e 	bne	r3,zero,d1e8 <quorem+0x1c4>
    d1dc:	10bfff04 	addi	r2,r2,-4
    d1e0:	94bfffc4 	addi	r18,r18,-1
    d1e4:	a8bffb36 	bltu	r21,r2,d1d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d1d4>
    d1e8:	84800415 	stw	r18,16(r16)
    d1ec:	9805883a 	mov	r2,r19
    d1f0:	dfc00817 	ldw	ra,32(sp)
    d1f4:	ddc00717 	ldw	r23,28(sp)
    d1f8:	dd800617 	ldw	r22,24(sp)
    d1fc:	dd400517 	ldw	r21,20(sp)
    d200:	dd000417 	ldw	r20,16(sp)
    d204:	dcc00317 	ldw	r19,12(sp)
    d208:	dc800217 	ldw	r18,8(sp)
    d20c:	dc400117 	ldw	r17,4(sp)
    d210:	dc000017 	ldw	r16,0(sp)
    d214:	dec00904 	addi	sp,sp,36
    d218:	f800283a 	ret
    d21c:	0005883a 	mov	r2,zero
    d220:	003ff306 	br	d1f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d1f0>

0000d224 <_dtoa_r>:
    d224:	20801017 	ldw	r2,64(r4)
    d228:	deffde04 	addi	sp,sp,-136
    d22c:	df002015 	stw	fp,128(sp)
    d230:	dcc01b15 	stw	r19,108(sp)
    d234:	dc801a15 	stw	r18,104(sp)
    d238:	dc401915 	stw	r17,100(sp)
    d23c:	dc001815 	stw	r16,96(sp)
    d240:	dfc02115 	stw	ra,132(sp)
    d244:	ddc01f15 	stw	r23,124(sp)
    d248:	dd801e15 	stw	r22,120(sp)
    d24c:	dd401d15 	stw	r21,116(sp)
    d250:	dd001c15 	stw	r20,112(sp)
    d254:	d9c00315 	stw	r7,12(sp)
    d258:	2039883a 	mov	fp,r4
    d25c:	3023883a 	mov	r17,r6
    d260:	2825883a 	mov	r18,r5
    d264:	dc002417 	ldw	r16,144(sp)
    d268:	3027883a 	mov	r19,r6
    d26c:	10000826 	beq	r2,zero,d290 <_dtoa_r+0x6c>
    d270:	21801117 	ldw	r6,68(r4)
    d274:	00c00044 	movi	r3,1
    d278:	100b883a 	mov	r5,r2
    d27c:	1986983a 	sll	r3,r3,r6
    d280:	11800115 	stw	r6,4(r2)
    d284:	10c00215 	stw	r3,8(r2)
    d288:	000feec0 	call	feec <_Bfree>
    d28c:	e0001015 	stw	zero,64(fp)
    d290:	88002e16 	blt	r17,zero,d34c <_dtoa_r+0x128>
    d294:	80000015 	stw	zero,0(r16)
    d298:	889ffc2c 	andhi	r2,r17,32752
    d29c:	00dffc34 	movhi	r3,32752
    d2a0:	10c01c26 	beq	r2,r3,d314 <_dtoa_r+0xf0>
    d2a4:	000d883a 	mov	r6,zero
    d2a8:	000f883a 	mov	r7,zero
    d2ac:	9009883a 	mov	r4,r18
    d2b0:	980b883a 	mov	r5,r19
    d2b4:	0015e280 	call	15e28 <__eqdf2>
    d2b8:	10002b1e 	bne	r2,zero,d368 <_dtoa_r+0x144>
    d2bc:	d9c02317 	ldw	r7,140(sp)
    d2c0:	00800044 	movi	r2,1
    d2c4:	38800015 	stw	r2,0(r7)
    d2c8:	d8802517 	ldw	r2,148(sp)
    d2cc:	10019e26 	beq	r2,zero,d948 <_dtoa_r+0x724>
    d2d0:	d8c02517 	ldw	r3,148(sp)
    d2d4:	008000b4 	movhi	r2,2
    d2d8:	1092de44 	addi	r2,r2,19321
    d2dc:	18800015 	stw	r2,0(r3)
    d2e0:	10bfffc4 	addi	r2,r2,-1
    d2e4:	dfc02117 	ldw	ra,132(sp)
    d2e8:	df002017 	ldw	fp,128(sp)
    d2ec:	ddc01f17 	ldw	r23,124(sp)
    d2f0:	dd801e17 	ldw	r22,120(sp)
    d2f4:	dd401d17 	ldw	r21,116(sp)
    d2f8:	dd001c17 	ldw	r20,112(sp)
    d2fc:	dcc01b17 	ldw	r19,108(sp)
    d300:	dc801a17 	ldw	r18,104(sp)
    d304:	dc401917 	ldw	r17,100(sp)
    d308:	dc001817 	ldw	r16,96(sp)
    d30c:	dec02204 	addi	sp,sp,136
    d310:	f800283a 	ret
    d314:	d8c02317 	ldw	r3,140(sp)
    d318:	0089c3c4 	movi	r2,9999
    d31c:	18800015 	stw	r2,0(r3)
    d320:	90017726 	beq	r18,zero,d900 <_dtoa_r+0x6dc>
    d324:	008000b4 	movhi	r2,2
    d328:	1092f204 	addi	r2,r2,19400
    d32c:	d9002517 	ldw	r4,148(sp)
    d330:	203fec26 	beq	r4,zero,d2e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d2e4>
    d334:	10c000c7 	ldb	r3,3(r2)
    d338:	1801781e 	bne	r3,zero,d91c <_dtoa_r+0x6f8>
    d33c:	10c000c4 	addi	r3,r2,3
    d340:	d9802517 	ldw	r6,148(sp)
    d344:	30c00015 	stw	r3,0(r6)
    d348:	003fe606 	br	d2e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d2e4>
    d34c:	04e00034 	movhi	r19,32768
    d350:	9cffffc4 	addi	r19,r19,-1
    d354:	00800044 	movi	r2,1
    d358:	8ce6703a 	and	r19,r17,r19
    d35c:	80800015 	stw	r2,0(r16)
    d360:	9823883a 	mov	r17,r19
    d364:	003fcc06 	br	d298 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d298>
    d368:	d8800204 	addi	r2,sp,8
    d36c:	d8800015 	stw	r2,0(sp)
    d370:	d9c00104 	addi	r7,sp,4
    d374:	900b883a 	mov	r5,r18
    d378:	980d883a 	mov	r6,r19
    d37c:	e009883a 	mov	r4,fp
    d380:	8820d53a 	srli	r16,r17,20
    d384:	0010ad80 	call	10ad8 <__d2b>
    d388:	d8800915 	stw	r2,36(sp)
    d38c:	8001651e 	bne	r16,zero,d924 <_dtoa_r+0x700>
    d390:	dd800217 	ldw	r22,8(sp)
    d394:	dc000117 	ldw	r16,4(sp)
    d398:	00800804 	movi	r2,32
    d39c:	b421883a 	add	r16,r22,r16
    d3a0:	80c10c84 	addi	r3,r16,1074
    d3a4:	10c2d10e 	bge	r2,r3,deec <_dtoa_r+0xcc8>
    d3a8:	00801004 	movi	r2,64
    d3ac:	81010484 	addi	r4,r16,1042
    d3b0:	10c7c83a 	sub	r3,r2,r3
    d3b4:	9108d83a 	srl	r4,r18,r4
    d3b8:	88e2983a 	sll	r17,r17,r3
    d3bc:	2448b03a 	or	r4,r4,r17
    d3c0:	00170940 	call	17094 <__floatunsidf>
    d3c4:	017f8434 	movhi	r5,65040
    d3c8:	01800044 	movi	r6,1
    d3cc:	1009883a 	mov	r4,r2
    d3d0:	194b883a 	add	r5,r3,r5
    d3d4:	843fffc4 	addi	r16,r16,-1
    d3d8:	d9801115 	stw	r6,68(sp)
    d3dc:	000d883a 	mov	r6,zero
    d3e0:	01cffe34 	movhi	r7,16376
    d3e4:	00167980 	call	16798 <__subdf3>
    d3e8:	0198dbf4 	movhi	r6,25455
    d3ec:	01cff4f4 	movhi	r7,16339
    d3f0:	3190d844 	addi	r6,r6,17249
    d3f4:	39e1e9c4 	addi	r7,r7,-30809
    d3f8:	1009883a 	mov	r4,r2
    d3fc:	180b883a 	mov	r5,r3
    d400:	00160800 	call	16080 <__muldf3>
    d404:	01a2d874 	movhi	r6,35681
    d408:	01cff1f4 	movhi	r7,16327
    d40c:	31b22cc4 	addi	r6,r6,-14157
    d410:	39e28a04 	addi	r7,r7,-30168
    d414:	180b883a 	mov	r5,r3
    d418:	1009883a 	mov	r4,r2
    d41c:	00068000 	call	6800 <__adddf3>
    d420:	8009883a 	mov	r4,r16
    d424:	1029883a 	mov	r20,r2
    d428:	1823883a 	mov	r17,r3
    d42c:	000712c0 	call	712c <__floatsidf>
    d430:	019427f4 	movhi	r6,20639
    d434:	01cff4f4 	movhi	r7,16339
    d438:	319e7ec4 	addi	r6,r6,31227
    d43c:	39d104c4 	addi	r7,r7,17427
    d440:	1009883a 	mov	r4,r2
    d444:	180b883a 	mov	r5,r3
    d448:	00160800 	call	16080 <__muldf3>
    d44c:	100d883a 	mov	r6,r2
    d450:	180f883a 	mov	r7,r3
    d454:	a009883a 	mov	r4,r20
    d458:	880b883a 	mov	r5,r17
    d45c:	00068000 	call	6800 <__adddf3>
    d460:	1009883a 	mov	r4,r2
    d464:	180b883a 	mov	r5,r3
    d468:	1029883a 	mov	r20,r2
    d46c:	1823883a 	mov	r17,r3
    d470:	00070ac0 	call	70ac <__fixdfsi>
    d474:	000d883a 	mov	r6,zero
    d478:	000f883a 	mov	r7,zero
    d47c:	a009883a 	mov	r4,r20
    d480:	880b883a 	mov	r5,r17
    d484:	d8800515 	stw	r2,20(sp)
    d488:	0015f8c0 	call	15f8c <__ledf2>
    d48c:	10028716 	blt	r2,zero,deac <_dtoa_r+0xc88>
    d490:	d8c00517 	ldw	r3,20(sp)
    d494:	00800584 	movi	r2,22
    d498:	10c27536 	bltu	r2,r3,de70 <_dtoa_r+0xc4c>
    d49c:	180490fa 	slli	r2,r3,3
    d4a0:	00c000b4 	movhi	r3,2
    d4a4:	18d30e04 	addi	r3,r3,19512
    d4a8:	1885883a 	add	r2,r3,r2
    d4ac:	11000017 	ldw	r4,0(r2)
    d4b0:	11400117 	ldw	r5,4(r2)
    d4b4:	900d883a 	mov	r6,r18
    d4b8:	980f883a 	mov	r7,r19
    d4bc:	0015eb00 	call	15eb0 <__gedf2>
    d4c0:	00828d0e 	bge	zero,r2,def8 <_dtoa_r+0xcd4>
    d4c4:	d9000517 	ldw	r4,20(sp)
    d4c8:	d8000e15 	stw	zero,56(sp)
    d4cc:	213fffc4 	addi	r4,r4,-1
    d4d0:	d9000515 	stw	r4,20(sp)
    d4d4:	b42dc83a 	sub	r22,r22,r16
    d4d8:	b5bfffc4 	addi	r22,r22,-1
    d4dc:	b0026f16 	blt	r22,zero,de9c <_dtoa_r+0xc78>
    d4e0:	d8000815 	stw	zero,32(sp)
    d4e4:	d9c00517 	ldw	r7,20(sp)
    d4e8:	38026416 	blt	r7,zero,de7c <_dtoa_r+0xc58>
    d4ec:	b1ed883a 	add	r22,r22,r7
    d4f0:	d9c00d15 	stw	r7,52(sp)
    d4f4:	d8000a15 	stw	zero,40(sp)
    d4f8:	d9800317 	ldw	r6,12(sp)
    d4fc:	00800244 	movi	r2,9
    d500:	11811436 	bltu	r2,r6,d954 <_dtoa_r+0x730>
    d504:	00800144 	movi	r2,5
    d508:	1184e10e 	bge	r2,r6,e890 <_dtoa_r+0x166c>
    d50c:	31bfff04 	addi	r6,r6,-4
    d510:	d9800315 	stw	r6,12(sp)
    d514:	0023883a 	mov	r17,zero
    d518:	d9800317 	ldw	r6,12(sp)
    d51c:	008000c4 	movi	r2,3
    d520:	30836726 	beq	r6,r2,e2c0 <_dtoa_r+0x109c>
    d524:	1183410e 	bge	r2,r6,e22c <_dtoa_r+0x1008>
    d528:	d9c00317 	ldw	r7,12(sp)
    d52c:	00800104 	movi	r2,4
    d530:	38827c26 	beq	r7,r2,df24 <_dtoa_r+0xd00>
    d534:	00800144 	movi	r2,5
    d538:	3884c41e 	bne	r7,r2,e84c <_dtoa_r+0x1628>
    d53c:	00800044 	movi	r2,1
    d540:	d8800b15 	stw	r2,44(sp)
    d544:	d8c00517 	ldw	r3,20(sp)
    d548:	d9002217 	ldw	r4,136(sp)
    d54c:	1907883a 	add	r3,r3,r4
    d550:	19800044 	addi	r6,r3,1
    d554:	d8c00c15 	stw	r3,48(sp)
    d558:	d9800615 	stw	r6,24(sp)
    d55c:	0183a40e 	bge	zero,r6,e3f0 <_dtoa_r+0x11cc>
    d560:	d9800617 	ldw	r6,24(sp)
    d564:	3021883a 	mov	r16,r6
    d568:	e0001115 	stw	zero,68(fp)
    d56c:	008005c4 	movi	r2,23
    d570:	1184c92e 	bgeu	r2,r6,e898 <_dtoa_r+0x1674>
    d574:	00c00044 	movi	r3,1
    d578:	00800104 	movi	r2,4
    d57c:	1085883a 	add	r2,r2,r2
    d580:	11000504 	addi	r4,r2,20
    d584:	180b883a 	mov	r5,r3
    d588:	18c00044 	addi	r3,r3,1
    d58c:	313ffb2e 	bgeu	r6,r4,d57c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d57c>
    d590:	e1401115 	stw	r5,68(fp)
    d594:	e009883a 	mov	r4,fp
    d598:	000fe440 	call	fe44 <_Balloc>
    d59c:	d8800715 	stw	r2,28(sp)
    d5a0:	e0801015 	stw	r2,64(fp)
    d5a4:	00800384 	movi	r2,14
    d5a8:	1400f736 	bltu	r2,r16,d988 <_dtoa_r+0x764>
    d5ac:	8800f626 	beq	r17,zero,d988 <_dtoa_r+0x764>
    d5b0:	d9c00517 	ldw	r7,20(sp)
    d5b4:	01c39a0e 	bge	zero,r7,e420 <_dtoa_r+0x11fc>
    d5b8:	388003cc 	andi	r2,r7,15
    d5bc:	100490fa 	slli	r2,r2,3
    d5c0:	382bd13a 	srai	r21,r7,4
    d5c4:	00c000b4 	movhi	r3,2
    d5c8:	18d30e04 	addi	r3,r3,19512
    d5cc:	1885883a 	add	r2,r3,r2
    d5d0:	a8c0040c 	andi	r3,r21,16
    d5d4:	12400017 	ldw	r9,0(r2)
    d5d8:	12000117 	ldw	r8,4(r2)
    d5dc:	18037926 	beq	r3,zero,e3c4 <_dtoa_r+0x11a0>
    d5e0:	008000b4 	movhi	r2,2
    d5e4:	10930404 	addi	r2,r2,19472
    d5e8:	11800817 	ldw	r6,32(r2)
    d5ec:	11c00917 	ldw	r7,36(r2)
    d5f0:	9009883a 	mov	r4,r18
    d5f4:	980b883a 	mov	r5,r19
    d5f8:	da001715 	stw	r8,92(sp)
    d5fc:	da401615 	stw	r9,88(sp)
    d600:	00155400 	call	15540 <__divdf3>
    d604:	da001717 	ldw	r8,92(sp)
    d608:	da401617 	ldw	r9,88(sp)
    d60c:	ad4003cc 	andi	r21,r21,15
    d610:	040000c4 	movi	r16,3
    d614:	1023883a 	mov	r17,r2
    d618:	1829883a 	mov	r20,r3
    d61c:	a8001126 	beq	r21,zero,d664 <_dtoa_r+0x440>
    d620:	05c000b4 	movhi	r23,2
    d624:	bdd30404 	addi	r23,r23,19472
    d628:	4805883a 	mov	r2,r9
    d62c:	4007883a 	mov	r3,r8
    d630:	a980004c 	andi	r6,r21,1
    d634:	1009883a 	mov	r4,r2
    d638:	a82bd07a 	srai	r21,r21,1
    d63c:	180b883a 	mov	r5,r3
    d640:	30000426 	beq	r6,zero,d654 <_dtoa_r+0x430>
    d644:	b9800017 	ldw	r6,0(r23)
    d648:	b9c00117 	ldw	r7,4(r23)
    d64c:	84000044 	addi	r16,r16,1
    d650:	00160800 	call	16080 <__muldf3>
    d654:	bdc00204 	addi	r23,r23,8
    d658:	a83ff51e 	bne	r21,zero,d630 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d630>
    d65c:	1013883a 	mov	r9,r2
    d660:	1811883a 	mov	r8,r3
    d664:	480d883a 	mov	r6,r9
    d668:	400f883a 	mov	r7,r8
    d66c:	8809883a 	mov	r4,r17
    d670:	a00b883a 	mov	r5,r20
    d674:	00155400 	call	15540 <__divdf3>
    d678:	d8800f15 	stw	r2,60(sp)
    d67c:	d8c01015 	stw	r3,64(sp)
    d680:	d8c00e17 	ldw	r3,56(sp)
    d684:	18000626 	beq	r3,zero,d6a0 <_dtoa_r+0x47c>
    d688:	d9000f17 	ldw	r4,60(sp)
    d68c:	d9401017 	ldw	r5,64(sp)
    d690:	000d883a 	mov	r6,zero
    d694:	01cffc34 	movhi	r7,16368
    d698:	0015f8c0 	call	15f8c <__ledf2>
    d69c:	10040b16 	blt	r2,zero,e6cc <_dtoa_r+0x14a8>
    d6a0:	8009883a 	mov	r4,r16
    d6a4:	000712c0 	call	712c <__floatsidf>
    d6a8:	d9800f17 	ldw	r6,60(sp)
    d6ac:	d9c01017 	ldw	r7,64(sp)
    d6b0:	1009883a 	mov	r4,r2
    d6b4:	180b883a 	mov	r5,r3
    d6b8:	00160800 	call	16080 <__muldf3>
    d6bc:	000d883a 	mov	r6,zero
    d6c0:	01d00734 	movhi	r7,16412
    d6c4:	1009883a 	mov	r4,r2
    d6c8:	180b883a 	mov	r5,r3
    d6cc:	00068000 	call	6800 <__adddf3>
    d6d0:	1021883a 	mov	r16,r2
    d6d4:	d8800617 	ldw	r2,24(sp)
    d6d8:	047f3034 	movhi	r17,64704
    d6dc:	1c63883a 	add	r17,r3,r17
    d6e0:	10031826 	beq	r2,zero,e344 <_dtoa_r+0x1120>
    d6e4:	d8c00517 	ldw	r3,20(sp)
    d6e8:	db000617 	ldw	r12,24(sp)
    d6ec:	d8c01315 	stw	r3,76(sp)
    d6f0:	d9000b17 	ldw	r4,44(sp)
    d6f4:	20038f26 	beq	r4,zero,e534 <_dtoa_r+0x1310>
    d6f8:	60bfffc4 	addi	r2,r12,-1
    d6fc:	100490fa 	slli	r2,r2,3
    d700:	00c000b4 	movhi	r3,2
    d704:	18d30e04 	addi	r3,r3,19512
    d708:	1885883a 	add	r2,r3,r2
    d70c:	11800017 	ldw	r6,0(r2)
    d710:	11c00117 	ldw	r7,4(r2)
    d714:	d8800717 	ldw	r2,28(sp)
    d718:	0009883a 	mov	r4,zero
    d71c:	014ff834 	movhi	r5,16352
    d720:	db001615 	stw	r12,88(sp)
    d724:	15c00044 	addi	r23,r2,1
    d728:	00155400 	call	15540 <__divdf3>
    d72c:	800d883a 	mov	r6,r16
    d730:	880f883a 	mov	r7,r17
    d734:	1009883a 	mov	r4,r2
    d738:	180b883a 	mov	r5,r3
    d73c:	00167980 	call	16798 <__subdf3>
    d740:	d9401017 	ldw	r5,64(sp)
    d744:	d9000f17 	ldw	r4,60(sp)
    d748:	102b883a 	mov	r21,r2
    d74c:	d8c01215 	stw	r3,72(sp)
    d750:	00070ac0 	call	70ac <__fixdfsi>
    d754:	1009883a 	mov	r4,r2
    d758:	1029883a 	mov	r20,r2
    d75c:	000712c0 	call	712c <__floatsidf>
    d760:	d9000f17 	ldw	r4,60(sp)
    d764:	d9401017 	ldw	r5,64(sp)
    d768:	100d883a 	mov	r6,r2
    d76c:	180f883a 	mov	r7,r3
    d770:	00167980 	call	16798 <__subdf3>
    d774:	1823883a 	mov	r17,r3
    d778:	d8c00717 	ldw	r3,28(sp)
    d77c:	d9401217 	ldw	r5,72(sp)
    d780:	a2000c04 	addi	r8,r20,48
    d784:	1021883a 	mov	r16,r2
    d788:	1a000005 	stb	r8,0(r3)
    d78c:	800d883a 	mov	r6,r16
    d790:	880f883a 	mov	r7,r17
    d794:	a809883a 	mov	r4,r21
    d798:	4029883a 	mov	r20,r8
    d79c:	0015eb00 	call	15eb0 <__gedf2>
    d7a0:	00841d16 	blt	zero,r2,e818 <_dtoa_r+0x15f4>
    d7a4:	800d883a 	mov	r6,r16
    d7a8:	880f883a 	mov	r7,r17
    d7ac:	0009883a 	mov	r4,zero
    d7b0:	014ffc34 	movhi	r5,16368
    d7b4:	00167980 	call	16798 <__subdf3>
    d7b8:	d9401217 	ldw	r5,72(sp)
    d7bc:	100d883a 	mov	r6,r2
    d7c0:	180f883a 	mov	r7,r3
    d7c4:	a809883a 	mov	r4,r21
    d7c8:	0015eb00 	call	15eb0 <__gedf2>
    d7cc:	db001617 	ldw	r12,88(sp)
    d7d0:	00840e16 	blt	zero,r2,e80c <_dtoa_r+0x15e8>
    d7d4:	00800044 	movi	r2,1
    d7d8:	13006b0e 	bge	r2,r12,d988 <_dtoa_r+0x764>
    d7dc:	d9000717 	ldw	r4,28(sp)
    d7e0:	dd800f15 	stw	r22,60(sp)
    d7e4:	dcc01015 	stw	r19,64(sp)
    d7e8:	2319883a 	add	r12,r4,r12
    d7ec:	dcc01217 	ldw	r19,72(sp)
    d7f0:	602d883a 	mov	r22,r12
    d7f4:	dc801215 	stw	r18,72(sp)
    d7f8:	b825883a 	mov	r18,r23
    d7fc:	00000906 	br	d824 <_dtoa_r+0x600>
    d800:	00167980 	call	16798 <__subdf3>
    d804:	a80d883a 	mov	r6,r21
    d808:	980f883a 	mov	r7,r19
    d80c:	1009883a 	mov	r4,r2
    d810:	180b883a 	mov	r5,r3
    d814:	0015f8c0 	call	15f8c <__ledf2>
    d818:	1003e816 	blt	r2,zero,e7bc <_dtoa_r+0x1598>
    d81c:	b825883a 	mov	r18,r23
    d820:	bd83e926 	beq	r23,r22,e7c8 <_dtoa_r+0x15a4>
    d824:	a809883a 	mov	r4,r21
    d828:	980b883a 	mov	r5,r19
    d82c:	000d883a 	mov	r6,zero
    d830:	01d00934 	movhi	r7,16420
    d834:	00160800 	call	16080 <__muldf3>
    d838:	000d883a 	mov	r6,zero
    d83c:	01d00934 	movhi	r7,16420
    d840:	8009883a 	mov	r4,r16
    d844:	880b883a 	mov	r5,r17
    d848:	102b883a 	mov	r21,r2
    d84c:	1827883a 	mov	r19,r3
    d850:	00160800 	call	16080 <__muldf3>
    d854:	180b883a 	mov	r5,r3
    d858:	1009883a 	mov	r4,r2
    d85c:	1821883a 	mov	r16,r3
    d860:	1023883a 	mov	r17,r2
    d864:	00070ac0 	call	70ac <__fixdfsi>
    d868:	1009883a 	mov	r4,r2
    d86c:	1029883a 	mov	r20,r2
    d870:	000712c0 	call	712c <__floatsidf>
    d874:	8809883a 	mov	r4,r17
    d878:	800b883a 	mov	r5,r16
    d87c:	100d883a 	mov	r6,r2
    d880:	180f883a 	mov	r7,r3
    d884:	00167980 	call	16798 <__subdf3>
    d888:	a5000c04 	addi	r20,r20,48
    d88c:	a80d883a 	mov	r6,r21
    d890:	980f883a 	mov	r7,r19
    d894:	1009883a 	mov	r4,r2
    d898:	180b883a 	mov	r5,r3
    d89c:	95000005 	stb	r20,0(r18)
    d8a0:	1021883a 	mov	r16,r2
    d8a4:	1823883a 	mov	r17,r3
    d8a8:	0015f8c0 	call	15f8c <__ledf2>
    d8ac:	bdc00044 	addi	r23,r23,1
    d8b0:	800d883a 	mov	r6,r16
    d8b4:	880f883a 	mov	r7,r17
    d8b8:	0009883a 	mov	r4,zero
    d8bc:	014ffc34 	movhi	r5,16368
    d8c0:	103fcf0e 	bge	r2,zero,d800 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d800>
    d8c4:	d8c01317 	ldw	r3,76(sp)
    d8c8:	d8c00515 	stw	r3,20(sp)
    d8cc:	d9400917 	ldw	r5,36(sp)
    d8d0:	e009883a 	mov	r4,fp
    d8d4:	000feec0 	call	feec <_Bfree>
    d8d8:	d9000517 	ldw	r4,20(sp)
    d8dc:	d9802317 	ldw	r6,140(sp)
    d8e0:	d9c02517 	ldw	r7,148(sp)
    d8e4:	b8000005 	stb	zero,0(r23)
    d8e8:	20800044 	addi	r2,r4,1
    d8ec:	30800015 	stw	r2,0(r6)
    d8f0:	3802aa26 	beq	r7,zero,e39c <_dtoa_r+0x1178>
    d8f4:	3dc00015 	stw	r23,0(r7)
    d8f8:	d8800717 	ldw	r2,28(sp)
    d8fc:	003e7906 	br	d2e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d2e4>
    d900:	00800434 	movhi	r2,16
    d904:	10bfffc4 	addi	r2,r2,-1
    d908:	88a2703a 	and	r17,r17,r2
    d90c:	883e851e 	bne	r17,zero,d324 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d324>
    d910:	008000b4 	movhi	r2,2
    d914:	1092ef04 	addi	r2,r2,19388
    d918:	003e8406 	br	d32c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d32c>
    d91c:	10c00204 	addi	r3,r2,8
    d920:	003e8706 	br	d340 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d340>
    d924:	01400434 	movhi	r5,16
    d928:	297fffc4 	addi	r5,r5,-1
    d92c:	994a703a 	and	r5,r19,r5
    d930:	9009883a 	mov	r4,r18
    d934:	843f0044 	addi	r16,r16,-1023
    d938:	294ffc34 	orhi	r5,r5,16368
    d93c:	dd800217 	ldw	r22,8(sp)
    d940:	d8001115 	stw	zero,68(sp)
    d944:	003ea506 	br	d3dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d3dc>
    d948:	008000b4 	movhi	r2,2
    d94c:	1092de04 	addi	r2,r2,19320
    d950:	003e6406 	br	d2e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d2e4>
    d954:	e0001115 	stw	zero,68(fp)
    d958:	000b883a 	mov	r5,zero
    d95c:	e009883a 	mov	r4,fp
    d960:	000fe440 	call	fe44 <_Balloc>
    d964:	01bfffc4 	movi	r6,-1
    d968:	01c00044 	movi	r7,1
    d96c:	d8800715 	stw	r2,28(sp)
    d970:	d9800c15 	stw	r6,48(sp)
    d974:	e0801015 	stw	r2,64(fp)
    d978:	d8000315 	stw	zero,12(sp)
    d97c:	d9c00b15 	stw	r7,44(sp)
    d980:	d9800615 	stw	r6,24(sp)
    d984:	d8002215 	stw	zero,136(sp)
    d988:	d8800117 	ldw	r2,4(sp)
    d98c:	10008916 	blt	r2,zero,dbb4 <_dtoa_r+0x990>
    d990:	d9000517 	ldw	r4,20(sp)
    d994:	00c00384 	movi	r3,14
    d998:	19008616 	blt	r3,r4,dbb4 <_dtoa_r+0x990>
    d99c:	200490fa 	slli	r2,r4,3
    d9a0:	00c000b4 	movhi	r3,2
    d9a4:	d9802217 	ldw	r6,136(sp)
    d9a8:	18d30e04 	addi	r3,r3,19512
    d9ac:	1885883a 	add	r2,r3,r2
    d9b0:	14000017 	ldw	r16,0(r2)
    d9b4:	14400117 	ldw	r17,4(r2)
    d9b8:	30016316 	blt	r6,zero,df48 <_dtoa_r+0xd24>
    d9bc:	800d883a 	mov	r6,r16
    d9c0:	880f883a 	mov	r7,r17
    d9c4:	9009883a 	mov	r4,r18
    d9c8:	980b883a 	mov	r5,r19
    d9cc:	00155400 	call	15540 <__divdf3>
    d9d0:	180b883a 	mov	r5,r3
    d9d4:	1009883a 	mov	r4,r2
    d9d8:	00070ac0 	call	70ac <__fixdfsi>
    d9dc:	1009883a 	mov	r4,r2
    d9e0:	102b883a 	mov	r21,r2
    d9e4:	000712c0 	call	712c <__floatsidf>
    d9e8:	800d883a 	mov	r6,r16
    d9ec:	880f883a 	mov	r7,r17
    d9f0:	1009883a 	mov	r4,r2
    d9f4:	180b883a 	mov	r5,r3
    d9f8:	00160800 	call	16080 <__muldf3>
    d9fc:	100d883a 	mov	r6,r2
    da00:	180f883a 	mov	r7,r3
    da04:	9009883a 	mov	r4,r18
    da08:	980b883a 	mov	r5,r19
    da0c:	00167980 	call	16798 <__subdf3>
    da10:	d9c00717 	ldw	r7,28(sp)
    da14:	1009883a 	mov	r4,r2
    da18:	a8800c04 	addi	r2,r21,48
    da1c:	38800005 	stb	r2,0(r7)
    da20:	3dc00044 	addi	r23,r7,1
    da24:	d9c00617 	ldw	r7,24(sp)
    da28:	01800044 	movi	r6,1
    da2c:	180b883a 	mov	r5,r3
    da30:	2005883a 	mov	r2,r4
    da34:	39803826 	beq	r7,r6,db18 <_dtoa_r+0x8f4>
    da38:	000d883a 	mov	r6,zero
    da3c:	01d00934 	movhi	r7,16420
    da40:	00160800 	call	16080 <__muldf3>
    da44:	000d883a 	mov	r6,zero
    da48:	000f883a 	mov	r7,zero
    da4c:	1009883a 	mov	r4,r2
    da50:	180b883a 	mov	r5,r3
    da54:	1025883a 	mov	r18,r2
    da58:	1827883a 	mov	r19,r3
    da5c:	0015e280 	call	15e28 <__eqdf2>
    da60:	103f9a26 	beq	r2,zero,d8cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8cc>
    da64:	d9c00617 	ldw	r7,24(sp)
    da68:	d8c00717 	ldw	r3,28(sp)
    da6c:	b829883a 	mov	r20,r23
    da70:	38bfffc4 	addi	r2,r7,-1
    da74:	18ad883a 	add	r22,r3,r2
    da78:	00000a06 	br	daa4 <_dtoa_r+0x880>
    da7c:	00160800 	call	16080 <__muldf3>
    da80:	000d883a 	mov	r6,zero
    da84:	000f883a 	mov	r7,zero
    da88:	1009883a 	mov	r4,r2
    da8c:	180b883a 	mov	r5,r3
    da90:	1025883a 	mov	r18,r2
    da94:	1827883a 	mov	r19,r3
    da98:	b829883a 	mov	r20,r23
    da9c:	0015e280 	call	15e28 <__eqdf2>
    daa0:	103f8a26 	beq	r2,zero,d8cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8cc>
    daa4:	800d883a 	mov	r6,r16
    daa8:	880f883a 	mov	r7,r17
    daac:	9009883a 	mov	r4,r18
    dab0:	980b883a 	mov	r5,r19
    dab4:	00155400 	call	15540 <__divdf3>
    dab8:	180b883a 	mov	r5,r3
    dabc:	1009883a 	mov	r4,r2
    dac0:	00070ac0 	call	70ac <__fixdfsi>
    dac4:	1009883a 	mov	r4,r2
    dac8:	102b883a 	mov	r21,r2
    dacc:	000712c0 	call	712c <__floatsidf>
    dad0:	800d883a 	mov	r6,r16
    dad4:	880f883a 	mov	r7,r17
    dad8:	1009883a 	mov	r4,r2
    dadc:	180b883a 	mov	r5,r3
    dae0:	00160800 	call	16080 <__muldf3>
    dae4:	100d883a 	mov	r6,r2
    dae8:	180f883a 	mov	r7,r3
    daec:	9009883a 	mov	r4,r18
    daf0:	980b883a 	mov	r5,r19
    daf4:	00167980 	call	16798 <__subdf3>
    daf8:	aa000c04 	addi	r8,r21,48
    dafc:	a2000005 	stb	r8,0(r20)
    db00:	000d883a 	mov	r6,zero
    db04:	01d00934 	movhi	r7,16420
    db08:	1009883a 	mov	r4,r2
    db0c:	180b883a 	mov	r5,r3
    db10:	a5c00044 	addi	r23,r20,1
    db14:	b53fd91e 	bne	r22,r20,da7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700da7c>
    db18:	100d883a 	mov	r6,r2
    db1c:	180f883a 	mov	r7,r3
    db20:	1009883a 	mov	r4,r2
    db24:	180b883a 	mov	r5,r3
    db28:	00068000 	call	6800 <__adddf3>
    db2c:	100d883a 	mov	r6,r2
    db30:	180f883a 	mov	r7,r3
    db34:	8009883a 	mov	r4,r16
    db38:	880b883a 	mov	r5,r17
    db3c:	1027883a 	mov	r19,r2
    db40:	1825883a 	mov	r18,r3
    db44:	0015f8c0 	call	15f8c <__ledf2>
    db48:	10000816 	blt	r2,zero,db6c <_dtoa_r+0x948>
    db4c:	980d883a 	mov	r6,r19
    db50:	900f883a 	mov	r7,r18
    db54:	8009883a 	mov	r4,r16
    db58:	880b883a 	mov	r5,r17
    db5c:	0015e280 	call	15e28 <__eqdf2>
    db60:	103f5a1e 	bne	r2,zero,d8cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8cc>
    db64:	ad40004c 	andi	r21,r21,1
    db68:	a83f5826 	beq	r21,zero,d8cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8cc>
    db6c:	bd3fffc3 	ldbu	r20,-1(r23)
    db70:	b8bfffc4 	addi	r2,r23,-1
    db74:	1007883a 	mov	r3,r2
    db78:	01400e44 	movi	r5,57
    db7c:	d9800717 	ldw	r6,28(sp)
    db80:	00000506 	br	db98 <_dtoa_r+0x974>
    db84:	18ffffc4 	addi	r3,r3,-1
    db88:	11824726 	beq	r2,r6,e4a8 <_dtoa_r+0x1284>
    db8c:	1d000003 	ldbu	r20,0(r3)
    db90:	102f883a 	mov	r23,r2
    db94:	10bfffc4 	addi	r2,r2,-1
    db98:	a1003fcc 	andi	r4,r20,255
    db9c:	2100201c 	xori	r4,r4,128
    dba0:	213fe004 	addi	r4,r4,-128
    dba4:	217ff726 	beq	r4,r5,db84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700db84>
    dba8:	a2000044 	addi	r8,r20,1
    dbac:	12000005 	stb	r8,0(r2)
    dbb0:	003f4606 	br	d8cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8cc>
    dbb4:	d9000b17 	ldw	r4,44(sp)
    dbb8:	2000c826 	beq	r4,zero,dedc <_dtoa_r+0xcb8>
    dbbc:	d9800317 	ldw	r6,12(sp)
    dbc0:	00c00044 	movi	r3,1
    dbc4:	1980f90e 	bge	r3,r6,dfac <_dtoa_r+0xd88>
    dbc8:	d8800617 	ldw	r2,24(sp)
    dbcc:	d8c00a17 	ldw	r3,40(sp)
    dbd0:	157fffc4 	addi	r21,r2,-1
    dbd4:	1d41f316 	blt	r3,r21,e3a4 <_dtoa_r+0x1180>
    dbd8:	1d6bc83a 	sub	r21,r3,r21
    dbdc:	d9c00617 	ldw	r7,24(sp)
    dbe0:	3802aa16 	blt	r7,zero,e68c <_dtoa_r+0x1468>
    dbe4:	dd000817 	ldw	r20,32(sp)
    dbe8:	d8800617 	ldw	r2,24(sp)
    dbec:	d8c00817 	ldw	r3,32(sp)
    dbf0:	01400044 	movi	r5,1
    dbf4:	e009883a 	mov	r4,fp
    dbf8:	1887883a 	add	r3,r3,r2
    dbfc:	d8c00815 	stw	r3,32(sp)
    dc00:	b0ad883a 	add	r22,r22,r2
    dc04:	00102500 	call	10250 <__i2b>
    dc08:	1023883a 	mov	r17,r2
    dc0c:	a0000826 	beq	r20,zero,dc30 <_dtoa_r+0xa0c>
    dc10:	0580070e 	bge	zero,r22,dc30 <_dtoa_r+0xa0c>
    dc14:	a005883a 	mov	r2,r20
    dc18:	b500b916 	blt	r22,r20,df00 <_dtoa_r+0xcdc>
    dc1c:	d9000817 	ldw	r4,32(sp)
    dc20:	a0a9c83a 	sub	r20,r20,r2
    dc24:	b0adc83a 	sub	r22,r22,r2
    dc28:	2089c83a 	sub	r4,r4,r2
    dc2c:	d9000815 	stw	r4,32(sp)
    dc30:	d9800a17 	ldw	r6,40(sp)
    dc34:	0181810e 	bge	zero,r6,e23c <_dtoa_r+0x1018>
    dc38:	d9c00b17 	ldw	r7,44(sp)
    dc3c:	3800b326 	beq	r7,zero,df0c <_dtoa_r+0xce8>
    dc40:	a800b226 	beq	r21,zero,df0c <_dtoa_r+0xce8>
    dc44:	880b883a 	mov	r5,r17
    dc48:	a80d883a 	mov	r6,r21
    dc4c:	e009883a 	mov	r4,fp
    dc50:	00104840 	call	10484 <__pow5mult>
    dc54:	d9800917 	ldw	r6,36(sp)
    dc58:	100b883a 	mov	r5,r2
    dc5c:	e009883a 	mov	r4,fp
    dc60:	1023883a 	mov	r17,r2
    dc64:	001028c0 	call	1028c <__multiply>
    dc68:	1021883a 	mov	r16,r2
    dc6c:	d8800a17 	ldw	r2,40(sp)
    dc70:	d9400917 	ldw	r5,36(sp)
    dc74:	e009883a 	mov	r4,fp
    dc78:	1545c83a 	sub	r2,r2,r21
    dc7c:	d8800a15 	stw	r2,40(sp)
    dc80:	000feec0 	call	feec <_Bfree>
    dc84:	d8c00a17 	ldw	r3,40(sp)
    dc88:	18009f1e 	bne	r3,zero,df08 <_dtoa_r+0xce4>
    dc8c:	05c00044 	movi	r23,1
    dc90:	e009883a 	mov	r4,fp
    dc94:	b80b883a 	mov	r5,r23
    dc98:	00102500 	call	10250 <__i2b>
    dc9c:	d9000d17 	ldw	r4,52(sp)
    dca0:	102b883a 	mov	r21,r2
    dca4:	2000ce26 	beq	r4,zero,dfe0 <_dtoa_r+0xdbc>
    dca8:	200d883a 	mov	r6,r4
    dcac:	100b883a 	mov	r5,r2
    dcb0:	e009883a 	mov	r4,fp
    dcb4:	00104840 	call	10484 <__pow5mult>
    dcb8:	d9800317 	ldw	r6,12(sp)
    dcbc:	102b883a 	mov	r21,r2
    dcc0:	b981810e 	bge	r23,r6,e2c8 <_dtoa_r+0x10a4>
    dcc4:	0027883a 	mov	r19,zero
    dcc8:	a8800417 	ldw	r2,16(r21)
    dccc:	05c00804 	movi	r23,32
    dcd0:	10800104 	addi	r2,r2,4
    dcd4:	1085883a 	add	r2,r2,r2
    dcd8:	1085883a 	add	r2,r2,r2
    dcdc:	a885883a 	add	r2,r21,r2
    dce0:	11000017 	ldw	r4,0(r2)
    dce4:	00101380 	call	10138 <__hi0bits>
    dce8:	b885c83a 	sub	r2,r23,r2
    dcec:	1585883a 	add	r2,r2,r22
    dcf0:	108007cc 	andi	r2,r2,31
    dcf4:	1000b326 	beq	r2,zero,dfc4 <_dtoa_r+0xda0>
    dcf8:	00c00804 	movi	r3,32
    dcfc:	1887c83a 	sub	r3,r3,r2
    dd00:	01000104 	movi	r4,4
    dd04:	20c2cd0e 	bge	r4,r3,e83c <_dtoa_r+0x1618>
    dd08:	00c00704 	movi	r3,28
    dd0c:	1885c83a 	sub	r2,r3,r2
    dd10:	d8c00817 	ldw	r3,32(sp)
    dd14:	a0a9883a 	add	r20,r20,r2
    dd18:	b0ad883a 	add	r22,r22,r2
    dd1c:	1887883a 	add	r3,r3,r2
    dd20:	d8c00815 	stw	r3,32(sp)
    dd24:	d9800817 	ldw	r6,32(sp)
    dd28:	0180040e 	bge	zero,r6,dd3c <_dtoa_r+0xb18>
    dd2c:	800b883a 	mov	r5,r16
    dd30:	e009883a 	mov	r4,fp
    dd34:	00105c40 	call	105c4 <__lshift>
    dd38:	1021883a 	mov	r16,r2
    dd3c:	0580050e 	bge	zero,r22,dd54 <_dtoa_r+0xb30>
    dd40:	a80b883a 	mov	r5,r21
    dd44:	b00d883a 	mov	r6,r22
    dd48:	e009883a 	mov	r4,fp
    dd4c:	00105c40 	call	105c4 <__lshift>
    dd50:	102b883a 	mov	r21,r2
    dd54:	d9c00e17 	ldw	r7,56(sp)
    dd58:	3801211e 	bne	r7,zero,e1e0 <_dtoa_r+0xfbc>
    dd5c:	d9800617 	ldw	r6,24(sp)
    dd60:	0181380e 	bge	zero,r6,e244 <_dtoa_r+0x1020>
    dd64:	d8c00b17 	ldw	r3,44(sp)
    dd68:	1800ab1e 	bne	r3,zero,e018 <_dtoa_r+0xdf4>
    dd6c:	dc800717 	ldw	r18,28(sp)
    dd70:	dcc00617 	ldw	r19,24(sp)
    dd74:	9029883a 	mov	r20,r18
    dd78:	00000206 	br	dd84 <_dtoa_r+0xb60>
    dd7c:	000ff140 	call	ff14 <__multadd>
    dd80:	1021883a 	mov	r16,r2
    dd84:	a80b883a 	mov	r5,r21
    dd88:	8009883a 	mov	r4,r16
    dd8c:	000d0240 	call	d024 <quorem>
    dd90:	10800c04 	addi	r2,r2,48
    dd94:	90800005 	stb	r2,0(r18)
    dd98:	94800044 	addi	r18,r18,1
    dd9c:	9507c83a 	sub	r3,r18,r20
    dda0:	000f883a 	mov	r7,zero
    dda4:	01800284 	movi	r6,10
    dda8:	800b883a 	mov	r5,r16
    ddac:	e009883a 	mov	r4,fp
    ddb0:	1cfff216 	blt	r3,r19,dd7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dd7c>
    ddb4:	1011883a 	mov	r8,r2
    ddb8:	d8800617 	ldw	r2,24(sp)
    ddbc:	0082370e 	bge	zero,r2,e69c <_dtoa_r+0x1478>
    ddc0:	d9000717 	ldw	r4,28(sp)
    ddc4:	0025883a 	mov	r18,zero
    ddc8:	20af883a 	add	r23,r4,r2
    ddcc:	01800044 	movi	r6,1
    ddd0:	800b883a 	mov	r5,r16
    ddd4:	e009883a 	mov	r4,fp
    ddd8:	da001715 	stw	r8,92(sp)
    dddc:	00105c40 	call	105c4 <__lshift>
    dde0:	a80b883a 	mov	r5,r21
    dde4:	1009883a 	mov	r4,r2
    dde8:	d8800915 	stw	r2,36(sp)
    ddec:	001070c0 	call	1070c <__mcmp>
    ddf0:	da001717 	ldw	r8,92(sp)
    ddf4:	0081800e 	bge	zero,r2,e3f8 <_dtoa_r+0x11d4>
    ddf8:	b93fffc3 	ldbu	r4,-1(r23)
    ddfc:	b8bfffc4 	addi	r2,r23,-1
    de00:	1007883a 	mov	r3,r2
    de04:	01800e44 	movi	r6,57
    de08:	d9c00717 	ldw	r7,28(sp)
    de0c:	00000506 	br	de24 <_dtoa_r+0xc00>
    de10:	18ffffc4 	addi	r3,r3,-1
    de14:	11c12326 	beq	r2,r7,e2a4 <_dtoa_r+0x1080>
    de18:	19000003 	ldbu	r4,0(r3)
    de1c:	102f883a 	mov	r23,r2
    de20:	10bfffc4 	addi	r2,r2,-1
    de24:	21403fcc 	andi	r5,r4,255
    de28:	2940201c 	xori	r5,r5,128
    de2c:	297fe004 	addi	r5,r5,-128
    de30:	29bff726 	beq	r5,r6,de10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de10>
    de34:	21000044 	addi	r4,r4,1
    de38:	11000005 	stb	r4,0(r2)
    de3c:	a80b883a 	mov	r5,r21
    de40:	e009883a 	mov	r4,fp
    de44:	000feec0 	call	feec <_Bfree>
    de48:	883ea026 	beq	r17,zero,d8cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8cc>
    de4c:	90000426 	beq	r18,zero,de60 <_dtoa_r+0xc3c>
    de50:	94400326 	beq	r18,r17,de60 <_dtoa_r+0xc3c>
    de54:	900b883a 	mov	r5,r18
    de58:	e009883a 	mov	r4,fp
    de5c:	000feec0 	call	feec <_Bfree>
    de60:	880b883a 	mov	r5,r17
    de64:	e009883a 	mov	r4,fp
    de68:	000feec0 	call	feec <_Bfree>
    de6c:	003e9706 	br	d8cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8cc>
    de70:	01800044 	movi	r6,1
    de74:	d9800e15 	stw	r6,56(sp)
    de78:	003d9606 	br	d4d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d4d4>
    de7c:	d8800817 	ldw	r2,32(sp)
    de80:	d8c00517 	ldw	r3,20(sp)
    de84:	d8000d15 	stw	zero,52(sp)
    de88:	10c5c83a 	sub	r2,r2,r3
    de8c:	00c9c83a 	sub	r4,zero,r3
    de90:	d8800815 	stw	r2,32(sp)
    de94:	d9000a15 	stw	r4,40(sp)
    de98:	003d9706 	br	d4f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d4f8>
    de9c:	05adc83a 	sub	r22,zero,r22
    dea0:	dd800815 	stw	r22,32(sp)
    dea4:	002d883a 	mov	r22,zero
    dea8:	003d8e06 	br	d4e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d4e4>
    deac:	d9000517 	ldw	r4,20(sp)
    deb0:	000712c0 	call	712c <__floatsidf>
    deb4:	100d883a 	mov	r6,r2
    deb8:	180f883a 	mov	r7,r3
    debc:	a009883a 	mov	r4,r20
    dec0:	880b883a 	mov	r5,r17
    dec4:	0015e280 	call	15e28 <__eqdf2>
    dec8:	103d7126 	beq	r2,zero,d490 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d490>
    decc:	d9c00517 	ldw	r7,20(sp)
    ded0:	39ffffc4 	addi	r7,r7,-1
    ded4:	d9c00515 	stw	r7,20(sp)
    ded8:	003d6d06 	br	d490 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d490>
    dedc:	dd400a17 	ldw	r21,40(sp)
    dee0:	dd000817 	ldw	r20,32(sp)
    dee4:	0023883a 	mov	r17,zero
    dee8:	003f4806 	br	dc0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dc0c>
    deec:	10e3c83a 	sub	r17,r2,r3
    def0:	9448983a 	sll	r4,r18,r17
    def4:	003d3206 	br	d3c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d3c0>
    def8:	d8000e15 	stw	zero,56(sp)
    defc:	003d7506 	br	d4d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d4d4>
    df00:	b005883a 	mov	r2,r22
    df04:	003f4506 	br	dc1c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dc1c>
    df08:	dc000915 	stw	r16,36(sp)
    df0c:	d9800a17 	ldw	r6,40(sp)
    df10:	d9400917 	ldw	r5,36(sp)
    df14:	e009883a 	mov	r4,fp
    df18:	00104840 	call	10484 <__pow5mult>
    df1c:	1021883a 	mov	r16,r2
    df20:	003f5a06 	br	dc8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dc8c>
    df24:	01c00044 	movi	r7,1
    df28:	d9c00b15 	stw	r7,44(sp)
    df2c:	d8802217 	ldw	r2,136(sp)
    df30:	0081280e 	bge	zero,r2,e3d4 <_dtoa_r+0x11b0>
    df34:	100d883a 	mov	r6,r2
    df38:	1021883a 	mov	r16,r2
    df3c:	d8800c15 	stw	r2,48(sp)
    df40:	d8800615 	stw	r2,24(sp)
    df44:	003d8806 	br	d568 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d568>
    df48:	d8800617 	ldw	r2,24(sp)
    df4c:	00be9b16 	blt	zero,r2,d9bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d9bc>
    df50:	10010f1e 	bne	r2,zero,e390 <_dtoa_r+0x116c>
    df54:	880b883a 	mov	r5,r17
    df58:	000d883a 	mov	r6,zero
    df5c:	01d00534 	movhi	r7,16404
    df60:	8009883a 	mov	r4,r16
    df64:	00160800 	call	16080 <__muldf3>
    df68:	900d883a 	mov	r6,r18
    df6c:	980f883a 	mov	r7,r19
    df70:	1009883a 	mov	r4,r2
    df74:	180b883a 	mov	r5,r3
    df78:	0015eb00 	call	15eb0 <__gedf2>
    df7c:	002b883a 	mov	r21,zero
    df80:	0023883a 	mov	r17,zero
    df84:	1000bf16 	blt	r2,zero,e284 <_dtoa_r+0x1060>
    df88:	d9802217 	ldw	r6,136(sp)
    df8c:	ddc00717 	ldw	r23,28(sp)
    df90:	018c303a 	nor	r6,zero,r6
    df94:	d9800515 	stw	r6,20(sp)
    df98:	a80b883a 	mov	r5,r21
    df9c:	e009883a 	mov	r4,fp
    dfa0:	000feec0 	call	feec <_Bfree>
    dfa4:	883e4926 	beq	r17,zero,d8cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8cc>
    dfa8:	003fad06 	br	de60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de60>
    dfac:	d9c01117 	ldw	r7,68(sp)
    dfb0:	3801bc26 	beq	r7,zero,e6a4 <_dtoa_r+0x1480>
    dfb4:	10810cc4 	addi	r2,r2,1075
    dfb8:	dd400a17 	ldw	r21,40(sp)
    dfbc:	dd000817 	ldw	r20,32(sp)
    dfc0:	003f0a06 	br	dbec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dbec>
    dfc4:	00800704 	movi	r2,28
    dfc8:	d9000817 	ldw	r4,32(sp)
    dfcc:	a0a9883a 	add	r20,r20,r2
    dfd0:	b0ad883a 	add	r22,r22,r2
    dfd4:	2089883a 	add	r4,r4,r2
    dfd8:	d9000815 	stw	r4,32(sp)
    dfdc:	003f5106 	br	dd24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dd24>
    dfe0:	d8c00317 	ldw	r3,12(sp)
    dfe4:	b8c1fc0e 	bge	r23,r3,e7d8 <_dtoa_r+0x15b4>
    dfe8:	0027883a 	mov	r19,zero
    dfec:	b805883a 	mov	r2,r23
    dff0:	003f3e06 	br	dcec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dcec>
    dff4:	880b883a 	mov	r5,r17
    dff8:	e009883a 	mov	r4,fp
    dffc:	000f883a 	mov	r7,zero
    e000:	01800284 	movi	r6,10
    e004:	000ff140 	call	ff14 <__multadd>
    e008:	d9000c17 	ldw	r4,48(sp)
    e00c:	1023883a 	mov	r17,r2
    e010:	0102040e 	bge	zero,r4,e824 <_dtoa_r+0x1600>
    e014:	d9000615 	stw	r4,24(sp)
    e018:	0500050e 	bge	zero,r20,e030 <_dtoa_r+0xe0c>
    e01c:	880b883a 	mov	r5,r17
    e020:	a00d883a 	mov	r6,r20
    e024:	e009883a 	mov	r4,fp
    e028:	00105c40 	call	105c4 <__lshift>
    e02c:	1023883a 	mov	r17,r2
    e030:	9801241e 	bne	r19,zero,e4c4 <_dtoa_r+0x12a0>
    e034:	8829883a 	mov	r20,r17
    e038:	d9000617 	ldw	r4,24(sp)
    e03c:	dcc00717 	ldw	r19,28(sp)
    e040:	9480004c 	andi	r18,r18,1
    e044:	20bfffc4 	addi	r2,r4,-1
    e048:	9885883a 	add	r2,r19,r2
    e04c:	d8800415 	stw	r2,16(sp)
    e050:	dc800615 	stw	r18,24(sp)
    e054:	a80b883a 	mov	r5,r21
    e058:	8009883a 	mov	r4,r16
    e05c:	000d0240 	call	d024 <quorem>
    e060:	880b883a 	mov	r5,r17
    e064:	8009883a 	mov	r4,r16
    e068:	102f883a 	mov	r23,r2
    e06c:	001070c0 	call	1070c <__mcmp>
    e070:	a80b883a 	mov	r5,r21
    e074:	a00d883a 	mov	r6,r20
    e078:	e009883a 	mov	r4,fp
    e07c:	102d883a 	mov	r22,r2
    e080:	001076c0 	call	1076c <__mdiff>
    e084:	1007883a 	mov	r3,r2
    e088:	10800317 	ldw	r2,12(r2)
    e08c:	bc800c04 	addi	r18,r23,48
    e090:	180b883a 	mov	r5,r3
    e094:	10004e1e 	bne	r2,zero,e1d0 <_dtoa_r+0xfac>
    e098:	8009883a 	mov	r4,r16
    e09c:	d8c01615 	stw	r3,88(sp)
    e0a0:	001070c0 	call	1070c <__mcmp>
    e0a4:	d8c01617 	ldw	r3,88(sp)
    e0a8:	e009883a 	mov	r4,fp
    e0ac:	d8801615 	stw	r2,88(sp)
    e0b0:	180b883a 	mov	r5,r3
    e0b4:	000feec0 	call	feec <_Bfree>
    e0b8:	d8801617 	ldw	r2,88(sp)
    e0bc:	1000041e 	bne	r2,zero,e0d0 <_dtoa_r+0xeac>
    e0c0:	d9800317 	ldw	r6,12(sp)
    e0c4:	3000021e 	bne	r6,zero,e0d0 <_dtoa_r+0xeac>
    e0c8:	d8c00617 	ldw	r3,24(sp)
    e0cc:	18003726 	beq	r3,zero,e1ac <_dtoa_r+0xf88>
    e0d0:	b0002016 	blt	r22,zero,e154 <_dtoa_r+0xf30>
    e0d4:	b000041e 	bne	r22,zero,e0e8 <_dtoa_r+0xec4>
    e0d8:	d9000317 	ldw	r4,12(sp)
    e0dc:	2000021e 	bne	r4,zero,e0e8 <_dtoa_r+0xec4>
    e0e0:	d8c00617 	ldw	r3,24(sp)
    e0e4:	18001b26 	beq	r3,zero,e154 <_dtoa_r+0xf30>
    e0e8:	00810716 	blt	zero,r2,e508 <_dtoa_r+0x12e4>
    e0ec:	d8c00417 	ldw	r3,16(sp)
    e0f0:	9d800044 	addi	r22,r19,1
    e0f4:	9c800005 	stb	r18,0(r19)
    e0f8:	b02f883a 	mov	r23,r22
    e0fc:	98c10626 	beq	r19,r3,e518 <_dtoa_r+0x12f4>
    e100:	800b883a 	mov	r5,r16
    e104:	000f883a 	mov	r7,zero
    e108:	01800284 	movi	r6,10
    e10c:	e009883a 	mov	r4,fp
    e110:	000ff140 	call	ff14 <__multadd>
    e114:	1021883a 	mov	r16,r2
    e118:	000f883a 	mov	r7,zero
    e11c:	01800284 	movi	r6,10
    e120:	880b883a 	mov	r5,r17
    e124:	e009883a 	mov	r4,fp
    e128:	8d002526 	beq	r17,r20,e1c0 <_dtoa_r+0xf9c>
    e12c:	000ff140 	call	ff14 <__multadd>
    e130:	a00b883a 	mov	r5,r20
    e134:	000f883a 	mov	r7,zero
    e138:	01800284 	movi	r6,10
    e13c:	e009883a 	mov	r4,fp
    e140:	1023883a 	mov	r17,r2
    e144:	000ff140 	call	ff14 <__multadd>
    e148:	1029883a 	mov	r20,r2
    e14c:	b027883a 	mov	r19,r22
    e150:	003fc006 	br	e054 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e054>
    e154:	9011883a 	mov	r8,r18
    e158:	00800e0e 	bge	zero,r2,e194 <_dtoa_r+0xf70>
    e15c:	800b883a 	mov	r5,r16
    e160:	01800044 	movi	r6,1
    e164:	e009883a 	mov	r4,fp
    e168:	da001715 	stw	r8,92(sp)
    e16c:	00105c40 	call	105c4 <__lshift>
    e170:	a80b883a 	mov	r5,r21
    e174:	1009883a 	mov	r4,r2
    e178:	1021883a 	mov	r16,r2
    e17c:	001070c0 	call	1070c <__mcmp>
    e180:	da001717 	ldw	r8,92(sp)
    e184:	0081960e 	bge	zero,r2,e7e0 <_dtoa_r+0x15bc>
    e188:	00800e44 	movi	r2,57
    e18c:	40817026 	beq	r8,r2,e750 <_dtoa_r+0x152c>
    e190:	ba000c44 	addi	r8,r23,49
    e194:	8825883a 	mov	r18,r17
    e198:	9dc00044 	addi	r23,r19,1
    e19c:	9a000005 	stb	r8,0(r19)
    e1a0:	a023883a 	mov	r17,r20
    e1a4:	dc000915 	stw	r16,36(sp)
    e1a8:	003f2406 	br	de3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de3c>
    e1ac:	00800e44 	movi	r2,57
    e1b0:	9011883a 	mov	r8,r18
    e1b4:	90816626 	beq	r18,r2,e750 <_dtoa_r+0x152c>
    e1b8:	05bff516 	blt	zero,r22,e190 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e190>
    e1bc:	003ff506 	br	e194 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e194>
    e1c0:	000ff140 	call	ff14 <__multadd>
    e1c4:	1023883a 	mov	r17,r2
    e1c8:	1029883a 	mov	r20,r2
    e1cc:	003fdf06 	br	e14c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e14c>
    e1d0:	e009883a 	mov	r4,fp
    e1d4:	000feec0 	call	feec <_Bfree>
    e1d8:	00800044 	movi	r2,1
    e1dc:	003fbc06 	br	e0d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e0d0>
    e1e0:	a80b883a 	mov	r5,r21
    e1e4:	8009883a 	mov	r4,r16
    e1e8:	001070c0 	call	1070c <__mcmp>
    e1ec:	103edb0e 	bge	r2,zero,dd5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dd5c>
    e1f0:	800b883a 	mov	r5,r16
    e1f4:	000f883a 	mov	r7,zero
    e1f8:	01800284 	movi	r6,10
    e1fc:	e009883a 	mov	r4,fp
    e200:	000ff140 	call	ff14 <__multadd>
    e204:	1021883a 	mov	r16,r2
    e208:	d8800517 	ldw	r2,20(sp)
    e20c:	d8c00b17 	ldw	r3,44(sp)
    e210:	10bfffc4 	addi	r2,r2,-1
    e214:	d8800515 	stw	r2,20(sp)
    e218:	183f761e 	bne	r3,zero,dff4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dff4>
    e21c:	d9000c17 	ldw	r4,48(sp)
    e220:	0101730e 	bge	zero,r4,e7f0 <_dtoa_r+0x15cc>
    e224:	d9000615 	stw	r4,24(sp)
    e228:	003ed006 	br	dd6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dd6c>
    e22c:	00800084 	movi	r2,2
    e230:	3081861e 	bne	r6,r2,e84c <_dtoa_r+0x1628>
    e234:	d8000b15 	stw	zero,44(sp)
    e238:	003f3c06 	br	df2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df2c>
    e23c:	dc000917 	ldw	r16,36(sp)
    e240:	003e9206 	br	dc8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dc8c>
    e244:	d9c00317 	ldw	r7,12(sp)
    e248:	00800084 	movi	r2,2
    e24c:	11fec50e 	bge	r2,r7,dd64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dd64>
    e250:	d9000617 	ldw	r4,24(sp)
    e254:	20013c1e 	bne	r4,zero,e748 <_dtoa_r+0x1524>
    e258:	a80b883a 	mov	r5,r21
    e25c:	000f883a 	mov	r7,zero
    e260:	01800144 	movi	r6,5
    e264:	e009883a 	mov	r4,fp
    e268:	000ff140 	call	ff14 <__multadd>
    e26c:	100b883a 	mov	r5,r2
    e270:	8009883a 	mov	r4,r16
    e274:	102b883a 	mov	r21,r2
    e278:	001070c0 	call	1070c <__mcmp>
    e27c:	dc000915 	stw	r16,36(sp)
    e280:	00bf410e 	bge	zero,r2,df88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df88>
    e284:	d9c00717 	ldw	r7,28(sp)
    e288:	00800c44 	movi	r2,49
    e28c:	38800005 	stb	r2,0(r7)
    e290:	d8800517 	ldw	r2,20(sp)
    e294:	3dc00044 	addi	r23,r7,1
    e298:	10800044 	addi	r2,r2,1
    e29c:	d8800515 	stw	r2,20(sp)
    e2a0:	003f3d06 	br	df98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df98>
    e2a4:	d9800517 	ldw	r6,20(sp)
    e2a8:	d9c00717 	ldw	r7,28(sp)
    e2ac:	00800c44 	movi	r2,49
    e2b0:	31800044 	addi	r6,r6,1
    e2b4:	d9800515 	stw	r6,20(sp)
    e2b8:	38800005 	stb	r2,0(r7)
    e2bc:	003edf06 	br	de3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de3c>
    e2c0:	d8000b15 	stw	zero,44(sp)
    e2c4:	003c9f06 	br	d544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d544>
    e2c8:	903e7e1e 	bne	r18,zero,dcc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dcc4>
    e2cc:	00800434 	movhi	r2,16
    e2d0:	10bfffc4 	addi	r2,r2,-1
    e2d4:	9884703a 	and	r2,r19,r2
    e2d8:	1000ea1e 	bne	r2,zero,e684 <_dtoa_r+0x1460>
    e2dc:	9cdffc2c 	andhi	r19,r19,32752
    e2e0:	9800e826 	beq	r19,zero,e684 <_dtoa_r+0x1460>
    e2e4:	d9c00817 	ldw	r7,32(sp)
    e2e8:	b5800044 	addi	r22,r22,1
    e2ec:	04c00044 	movi	r19,1
    e2f0:	39c00044 	addi	r7,r7,1
    e2f4:	d9c00815 	stw	r7,32(sp)
    e2f8:	d8800d17 	ldw	r2,52(sp)
    e2fc:	103e721e 	bne	r2,zero,dcc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dcc8>
    e300:	00800044 	movi	r2,1
    e304:	003e7906 	br	dcec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dcec>
    e308:	8009883a 	mov	r4,r16
    e30c:	000712c0 	call	712c <__floatsidf>
    e310:	d9800f17 	ldw	r6,60(sp)
    e314:	d9c01017 	ldw	r7,64(sp)
    e318:	1009883a 	mov	r4,r2
    e31c:	180b883a 	mov	r5,r3
    e320:	00160800 	call	16080 <__muldf3>
    e324:	000d883a 	mov	r6,zero
    e328:	01d00734 	movhi	r7,16412
    e32c:	1009883a 	mov	r4,r2
    e330:	180b883a 	mov	r5,r3
    e334:	00068000 	call	6800 <__adddf3>
    e338:	047f3034 	movhi	r17,64704
    e33c:	1021883a 	mov	r16,r2
    e340:	1c63883a 	add	r17,r3,r17
    e344:	d9000f17 	ldw	r4,60(sp)
    e348:	d9401017 	ldw	r5,64(sp)
    e34c:	000d883a 	mov	r6,zero
    e350:	01d00534 	movhi	r7,16404
    e354:	00167980 	call	16798 <__subdf3>
    e358:	800d883a 	mov	r6,r16
    e35c:	880f883a 	mov	r7,r17
    e360:	1009883a 	mov	r4,r2
    e364:	180b883a 	mov	r5,r3
    e368:	102b883a 	mov	r21,r2
    e36c:	1829883a 	mov	r20,r3
    e370:	0015eb00 	call	15eb0 <__gedf2>
    e374:	00806c16 	blt	zero,r2,e528 <_dtoa_r+0x1304>
    e378:	89e0003c 	xorhi	r7,r17,32768
    e37c:	800d883a 	mov	r6,r16
    e380:	a809883a 	mov	r4,r21
    e384:	a00b883a 	mov	r5,r20
    e388:	0015f8c0 	call	15f8c <__ledf2>
    e38c:	103d7e0e 	bge	r2,zero,d988 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d988>
    e390:	002b883a 	mov	r21,zero
    e394:	0023883a 	mov	r17,zero
    e398:	003efb06 	br	df88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df88>
    e39c:	d8800717 	ldw	r2,28(sp)
    e3a0:	003bd006 	br	d2e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d2e4>
    e3a4:	d9000a17 	ldw	r4,40(sp)
    e3a8:	d9800d17 	ldw	r6,52(sp)
    e3ac:	dd400a15 	stw	r21,40(sp)
    e3b0:	a905c83a 	sub	r2,r21,r4
    e3b4:	308d883a 	add	r6,r6,r2
    e3b8:	d9800d15 	stw	r6,52(sp)
    e3bc:	002b883a 	mov	r21,zero
    e3c0:	003e0606 	br	dbdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dbdc>
    e3c4:	9023883a 	mov	r17,r18
    e3c8:	9829883a 	mov	r20,r19
    e3cc:	04000084 	movi	r16,2
    e3d0:	003c9206 	br	d61c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d61c>
    e3d4:	04000044 	movi	r16,1
    e3d8:	dc000c15 	stw	r16,48(sp)
    e3dc:	dc000615 	stw	r16,24(sp)
    e3e0:	dc002215 	stw	r16,136(sp)
    e3e4:	e0001115 	stw	zero,68(fp)
    e3e8:	000b883a 	mov	r5,zero
    e3ec:	003c6906 	br	d594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d594>
    e3f0:	3021883a 	mov	r16,r6
    e3f4:	003ffb06 	br	e3e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e3e4>
    e3f8:	1000021e 	bne	r2,zero,e404 <_dtoa_r+0x11e0>
    e3fc:	4200004c 	andi	r8,r8,1
    e400:	403e7d1e 	bne	r8,zero,ddf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ddf8>
    e404:	01000c04 	movi	r4,48
    e408:	00000106 	br	e410 <_dtoa_r+0x11ec>
    e40c:	102f883a 	mov	r23,r2
    e410:	b8bfffc4 	addi	r2,r23,-1
    e414:	10c00007 	ldb	r3,0(r2)
    e418:	193ffc26 	beq	r3,r4,e40c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e40c>
    e41c:	003e8706 	br	de3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700de3c>
    e420:	d8800517 	ldw	r2,20(sp)
    e424:	00a3c83a 	sub	r17,zero,r2
    e428:	8800a426 	beq	r17,zero,e6bc <_dtoa_r+0x1498>
    e42c:	888003cc 	andi	r2,r17,15
    e430:	100490fa 	slli	r2,r2,3
    e434:	00c000b4 	movhi	r3,2
    e438:	18d30e04 	addi	r3,r3,19512
    e43c:	1885883a 	add	r2,r3,r2
    e440:	11800017 	ldw	r6,0(r2)
    e444:	11c00117 	ldw	r7,4(r2)
    e448:	9009883a 	mov	r4,r18
    e44c:	980b883a 	mov	r5,r19
    e450:	8823d13a 	srai	r17,r17,4
    e454:	00160800 	call	16080 <__muldf3>
    e458:	d8800f15 	stw	r2,60(sp)
    e45c:	d8c01015 	stw	r3,64(sp)
    e460:	8800e826 	beq	r17,zero,e804 <_dtoa_r+0x15e0>
    e464:	050000b4 	movhi	r20,2
    e468:	a5130404 	addi	r20,r20,19472
    e46c:	04000084 	movi	r16,2
    e470:	8980004c 	andi	r6,r17,1
    e474:	1009883a 	mov	r4,r2
    e478:	8823d07a 	srai	r17,r17,1
    e47c:	180b883a 	mov	r5,r3
    e480:	30000426 	beq	r6,zero,e494 <_dtoa_r+0x1270>
    e484:	a1800017 	ldw	r6,0(r20)
    e488:	a1c00117 	ldw	r7,4(r20)
    e48c:	84000044 	addi	r16,r16,1
    e490:	00160800 	call	16080 <__muldf3>
    e494:	a5000204 	addi	r20,r20,8
    e498:	883ff51e 	bne	r17,zero,e470 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e470>
    e49c:	d8800f15 	stw	r2,60(sp)
    e4a0:	d8c01015 	stw	r3,64(sp)
    e4a4:	003c7606 	br	d680 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d680>
    e4a8:	00c00c04 	movi	r3,48
    e4ac:	10c00005 	stb	r3,0(r2)
    e4b0:	d8c00517 	ldw	r3,20(sp)
    e4b4:	bd3fffc3 	ldbu	r20,-1(r23)
    e4b8:	18c00044 	addi	r3,r3,1
    e4bc:	d8c00515 	stw	r3,20(sp)
    e4c0:	003db906 	br	dba8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dba8>
    e4c4:	89400117 	ldw	r5,4(r17)
    e4c8:	e009883a 	mov	r4,fp
    e4cc:	000fe440 	call	fe44 <_Balloc>
    e4d0:	89800417 	ldw	r6,16(r17)
    e4d4:	89400304 	addi	r5,r17,12
    e4d8:	11000304 	addi	r4,r2,12
    e4dc:	31800084 	addi	r6,r6,2
    e4e0:	318d883a 	add	r6,r6,r6
    e4e4:	318d883a 	add	r6,r6,r6
    e4e8:	1027883a 	mov	r19,r2
    e4ec:	00080e80 	call	80e8 <memcpy>
    e4f0:	01800044 	movi	r6,1
    e4f4:	980b883a 	mov	r5,r19
    e4f8:	e009883a 	mov	r4,fp
    e4fc:	00105c40 	call	105c4 <__lshift>
    e500:	1029883a 	mov	r20,r2
    e504:	003ecc06 	br	e038 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e038>
    e508:	00800e44 	movi	r2,57
    e50c:	90809026 	beq	r18,r2,e750 <_dtoa_r+0x152c>
    e510:	92000044 	addi	r8,r18,1
    e514:	003f1f06 	br	e194 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e194>
    e518:	9011883a 	mov	r8,r18
    e51c:	8825883a 	mov	r18,r17
    e520:	a023883a 	mov	r17,r20
    e524:	003e2906 	br	ddcc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ddcc>
    e528:	002b883a 	mov	r21,zero
    e52c:	0023883a 	mov	r17,zero
    e530:	003f5406 	br	e284 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e284>
    e534:	61bfffc4 	addi	r6,r12,-1
    e538:	300490fa 	slli	r2,r6,3
    e53c:	00c000b4 	movhi	r3,2
    e540:	18d30e04 	addi	r3,r3,19512
    e544:	1885883a 	add	r2,r3,r2
    e548:	11000017 	ldw	r4,0(r2)
    e54c:	11400117 	ldw	r5,4(r2)
    e550:	d8800717 	ldw	r2,28(sp)
    e554:	880f883a 	mov	r7,r17
    e558:	d9801215 	stw	r6,72(sp)
    e55c:	800d883a 	mov	r6,r16
    e560:	db001615 	stw	r12,88(sp)
    e564:	15c00044 	addi	r23,r2,1
    e568:	00160800 	call	16080 <__muldf3>
    e56c:	d9401017 	ldw	r5,64(sp)
    e570:	d9000f17 	ldw	r4,60(sp)
    e574:	d8c01515 	stw	r3,84(sp)
    e578:	d8801415 	stw	r2,80(sp)
    e57c:	00070ac0 	call	70ac <__fixdfsi>
    e580:	1009883a 	mov	r4,r2
    e584:	1021883a 	mov	r16,r2
    e588:	000712c0 	call	712c <__floatsidf>
    e58c:	d9000f17 	ldw	r4,60(sp)
    e590:	d9401017 	ldw	r5,64(sp)
    e594:	100d883a 	mov	r6,r2
    e598:	180f883a 	mov	r7,r3
    e59c:	00167980 	call	16798 <__subdf3>
    e5a0:	1829883a 	mov	r20,r3
    e5a4:	d8c00717 	ldw	r3,28(sp)
    e5a8:	84000c04 	addi	r16,r16,48
    e5ac:	1023883a 	mov	r17,r2
    e5b0:	1c000005 	stb	r16,0(r3)
    e5b4:	db001617 	ldw	r12,88(sp)
    e5b8:	00800044 	movi	r2,1
    e5bc:	60802226 	beq	r12,r2,e648 <_dtoa_r+0x1424>
    e5c0:	d9c00717 	ldw	r7,28(sp)
    e5c4:	8805883a 	mov	r2,r17
    e5c8:	b82b883a 	mov	r21,r23
    e5cc:	3b19883a 	add	r12,r7,r12
    e5d0:	6023883a 	mov	r17,r12
    e5d4:	a007883a 	mov	r3,r20
    e5d8:	dc800f15 	stw	r18,60(sp)
    e5dc:	000d883a 	mov	r6,zero
    e5e0:	01d00934 	movhi	r7,16420
    e5e4:	1009883a 	mov	r4,r2
    e5e8:	180b883a 	mov	r5,r3
    e5ec:	00160800 	call	16080 <__muldf3>
    e5f0:	180b883a 	mov	r5,r3
    e5f4:	1009883a 	mov	r4,r2
    e5f8:	1829883a 	mov	r20,r3
    e5fc:	1025883a 	mov	r18,r2
    e600:	00070ac0 	call	70ac <__fixdfsi>
    e604:	1009883a 	mov	r4,r2
    e608:	1021883a 	mov	r16,r2
    e60c:	000712c0 	call	712c <__floatsidf>
    e610:	100d883a 	mov	r6,r2
    e614:	180f883a 	mov	r7,r3
    e618:	9009883a 	mov	r4,r18
    e61c:	a00b883a 	mov	r5,r20
    e620:	84000c04 	addi	r16,r16,48
    e624:	00167980 	call	16798 <__subdf3>
    e628:	ad400044 	addi	r21,r21,1
    e62c:	ac3fffc5 	stb	r16,-1(r21)
    e630:	ac7fea1e 	bne	r21,r17,e5dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e5dc>
    e634:	1023883a 	mov	r17,r2
    e638:	d8801217 	ldw	r2,72(sp)
    e63c:	dc800f17 	ldw	r18,60(sp)
    e640:	1829883a 	mov	r20,r3
    e644:	b8af883a 	add	r23,r23,r2
    e648:	d9001417 	ldw	r4,80(sp)
    e64c:	d9401517 	ldw	r5,84(sp)
    e650:	000d883a 	mov	r6,zero
    e654:	01cff834 	movhi	r7,16352
    e658:	00068000 	call	6800 <__adddf3>
    e65c:	880d883a 	mov	r6,r17
    e660:	a00f883a 	mov	r7,r20
    e664:	1009883a 	mov	r4,r2
    e668:	180b883a 	mov	r5,r3
    e66c:	0015f8c0 	call	15f8c <__ledf2>
    e670:	10003e0e 	bge	r2,zero,e76c <_dtoa_r+0x1548>
    e674:	d9001317 	ldw	r4,76(sp)
    e678:	bd3fffc3 	ldbu	r20,-1(r23)
    e67c:	d9000515 	stw	r4,20(sp)
    e680:	003d3b06 	br	db70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700db70>
    e684:	0027883a 	mov	r19,zero
    e688:	003f1b06 	br	e2f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e2f8>
    e68c:	d8800817 	ldw	r2,32(sp)
    e690:	11e9c83a 	sub	r20,r2,r7
    e694:	0005883a 	mov	r2,zero
    e698:	003d5406 	br	dbec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dbec>
    e69c:	00800044 	movi	r2,1
    e6a0:	003dc706 	br	ddc0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ddc0>
    e6a4:	d8c00217 	ldw	r3,8(sp)
    e6a8:	00800d84 	movi	r2,54
    e6ac:	dd400a17 	ldw	r21,40(sp)
    e6b0:	10c5c83a 	sub	r2,r2,r3
    e6b4:	dd000817 	ldw	r20,32(sp)
    e6b8:	003d4c06 	br	dbec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dbec>
    e6bc:	dc800f15 	stw	r18,60(sp)
    e6c0:	dcc01015 	stw	r19,64(sp)
    e6c4:	04000084 	movi	r16,2
    e6c8:	003bed06 	br	d680 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d680>
    e6cc:	d9000617 	ldw	r4,24(sp)
    e6d0:	203f0d26 	beq	r4,zero,e308 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e308>
    e6d4:	d9800c17 	ldw	r6,48(sp)
    e6d8:	01bcab0e 	bge	zero,r6,d988 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d988>
    e6dc:	d9401017 	ldw	r5,64(sp)
    e6e0:	d9000f17 	ldw	r4,60(sp)
    e6e4:	000d883a 	mov	r6,zero
    e6e8:	01d00934 	movhi	r7,16420
    e6ec:	00160800 	call	16080 <__muldf3>
    e6f0:	81000044 	addi	r4,r16,1
    e6f4:	d8800f15 	stw	r2,60(sp)
    e6f8:	d8c01015 	stw	r3,64(sp)
    e6fc:	000712c0 	call	712c <__floatsidf>
    e700:	d9800f17 	ldw	r6,60(sp)
    e704:	d9c01017 	ldw	r7,64(sp)
    e708:	1009883a 	mov	r4,r2
    e70c:	180b883a 	mov	r5,r3
    e710:	00160800 	call	16080 <__muldf3>
    e714:	01d00734 	movhi	r7,16412
    e718:	000d883a 	mov	r6,zero
    e71c:	1009883a 	mov	r4,r2
    e720:	180b883a 	mov	r5,r3
    e724:	00068000 	call	6800 <__adddf3>
    e728:	d9c00517 	ldw	r7,20(sp)
    e72c:	047f3034 	movhi	r17,64704
    e730:	1021883a 	mov	r16,r2
    e734:	39ffffc4 	addi	r7,r7,-1
    e738:	d9c01315 	stw	r7,76(sp)
    e73c:	1c63883a 	add	r17,r3,r17
    e740:	db000c17 	ldw	r12,48(sp)
    e744:	003bea06 	br	d6f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d6f0>
    e748:	dc000915 	stw	r16,36(sp)
    e74c:	003e0e06 	br	df88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700df88>
    e750:	01000e44 	movi	r4,57
    e754:	8825883a 	mov	r18,r17
    e758:	9dc00044 	addi	r23,r19,1
    e75c:	99000005 	stb	r4,0(r19)
    e760:	a023883a 	mov	r17,r20
    e764:	dc000915 	stw	r16,36(sp)
    e768:	003da406 	br	ddfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ddfc>
    e76c:	d9801417 	ldw	r6,80(sp)
    e770:	d9c01517 	ldw	r7,84(sp)
    e774:	0009883a 	mov	r4,zero
    e778:	014ff834 	movhi	r5,16352
    e77c:	00167980 	call	16798 <__subdf3>
    e780:	880d883a 	mov	r6,r17
    e784:	a00f883a 	mov	r7,r20
    e788:	1009883a 	mov	r4,r2
    e78c:	180b883a 	mov	r5,r3
    e790:	0015eb00 	call	15eb0 <__gedf2>
    e794:	00bc7c0e 	bge	zero,r2,d988 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d988>
    e798:	01000c04 	movi	r4,48
    e79c:	00000106 	br	e7a4 <_dtoa_r+0x1580>
    e7a0:	102f883a 	mov	r23,r2
    e7a4:	b8bfffc4 	addi	r2,r23,-1
    e7a8:	10c00007 	ldb	r3,0(r2)
    e7ac:	193ffc26 	beq	r3,r4,e7a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e7a0>
    e7b0:	d9801317 	ldw	r6,76(sp)
    e7b4:	d9800515 	stw	r6,20(sp)
    e7b8:	003c4406 	br	d8cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8cc>
    e7bc:	d9801317 	ldw	r6,76(sp)
    e7c0:	d9800515 	stw	r6,20(sp)
    e7c4:	003cea06 	br	db70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700db70>
    e7c8:	dd800f17 	ldw	r22,60(sp)
    e7cc:	dcc01017 	ldw	r19,64(sp)
    e7d0:	dc801217 	ldw	r18,72(sp)
    e7d4:	003c6c06 	br	d988 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d988>
    e7d8:	903e031e 	bne	r18,zero,dfe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dfe8>
    e7dc:	003ebb06 	br	e2cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e2cc>
    e7e0:	103e6c1e 	bne	r2,zero,e194 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e194>
    e7e4:	4080004c 	andi	r2,r8,1
    e7e8:	103e6a26 	beq	r2,zero,e194 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e194>
    e7ec:	003e6606 	br	e188 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e188>
    e7f0:	d8c00317 	ldw	r3,12(sp)
    e7f4:	00800084 	movi	r2,2
    e7f8:	10c02916 	blt	r2,r3,e8a0 <_dtoa_r+0x167c>
    e7fc:	d9000c17 	ldw	r4,48(sp)
    e800:	003e8806 	br	e224 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e224>
    e804:	04000084 	movi	r16,2
    e808:	003b9d06 	br	d680 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d680>
    e80c:	d9001317 	ldw	r4,76(sp)
    e810:	d9000515 	stw	r4,20(sp)
    e814:	003cd606 	br	db70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700db70>
    e818:	d8801317 	ldw	r2,76(sp)
    e81c:	d8800515 	stw	r2,20(sp)
    e820:	003c2a06 	br	d8cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d8cc>
    e824:	d9800317 	ldw	r6,12(sp)
    e828:	00800084 	movi	r2,2
    e82c:	11801516 	blt	r2,r6,e884 <_dtoa_r+0x1660>
    e830:	d9c00c17 	ldw	r7,48(sp)
    e834:	d9c00615 	stw	r7,24(sp)
    e838:	003df706 	br	e018 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e018>
    e83c:	193d3926 	beq	r3,r4,dd24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dd24>
    e840:	00c00f04 	movi	r3,60
    e844:	1885c83a 	sub	r2,r3,r2
    e848:	003ddf06 	br	dfc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700dfc8>
    e84c:	e009883a 	mov	r4,fp
    e850:	e0001115 	stw	zero,68(fp)
    e854:	000b883a 	mov	r5,zero
    e858:	000fe440 	call	fe44 <_Balloc>
    e85c:	d8800715 	stw	r2,28(sp)
    e860:	d8c00717 	ldw	r3,28(sp)
    e864:	00bfffc4 	movi	r2,-1
    e868:	01000044 	movi	r4,1
    e86c:	d8800c15 	stw	r2,48(sp)
    e870:	e0c01015 	stw	r3,64(fp)
    e874:	d9000b15 	stw	r4,44(sp)
    e878:	d8800615 	stw	r2,24(sp)
    e87c:	d8002215 	stw	zero,136(sp)
    e880:	003c4106 	br	d988 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d988>
    e884:	d8c00c17 	ldw	r3,48(sp)
    e888:	d8c00615 	stw	r3,24(sp)
    e88c:	003e7006 	br	e250 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e250>
    e890:	04400044 	movi	r17,1
    e894:	003b2006 	br	d518 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d518>
    e898:	000b883a 	mov	r5,zero
    e89c:	003b3d06 	br	d594 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700d594>
    e8a0:	d8800c17 	ldw	r2,48(sp)
    e8a4:	d8800615 	stw	r2,24(sp)
    e8a8:	003e6906 	br	e250 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e250>

0000e8ac <__sflush_r>:
    e8ac:	2880030b 	ldhu	r2,12(r5)
    e8b0:	defffb04 	addi	sp,sp,-20
    e8b4:	dcc00315 	stw	r19,12(sp)
    e8b8:	dc400115 	stw	r17,4(sp)
    e8bc:	dfc00415 	stw	ra,16(sp)
    e8c0:	dc800215 	stw	r18,8(sp)
    e8c4:	dc000015 	stw	r16,0(sp)
    e8c8:	10c0020c 	andi	r3,r2,8
    e8cc:	2823883a 	mov	r17,r5
    e8d0:	2027883a 	mov	r19,r4
    e8d4:	1800311e 	bne	r3,zero,e99c <__sflush_r+0xf0>
    e8d8:	28c00117 	ldw	r3,4(r5)
    e8dc:	10820014 	ori	r2,r2,2048
    e8e0:	2880030d 	sth	r2,12(r5)
    e8e4:	00c04b0e 	bge	zero,r3,ea14 <__sflush_r+0x168>
    e8e8:	8a000a17 	ldw	r8,40(r17)
    e8ec:	40002326 	beq	r8,zero,e97c <__sflush_r+0xd0>
    e8f0:	9c000017 	ldw	r16,0(r19)
    e8f4:	10c4000c 	andi	r3,r2,4096
    e8f8:	98000015 	stw	zero,0(r19)
    e8fc:	18004826 	beq	r3,zero,ea20 <__sflush_r+0x174>
    e900:	89801417 	ldw	r6,80(r17)
    e904:	10c0010c 	andi	r3,r2,4
    e908:	18000626 	beq	r3,zero,e924 <__sflush_r+0x78>
    e90c:	88c00117 	ldw	r3,4(r17)
    e910:	88800c17 	ldw	r2,48(r17)
    e914:	30cdc83a 	sub	r6,r6,r3
    e918:	10000226 	beq	r2,zero,e924 <__sflush_r+0x78>
    e91c:	88800f17 	ldw	r2,60(r17)
    e920:	308dc83a 	sub	r6,r6,r2
    e924:	89400717 	ldw	r5,28(r17)
    e928:	000f883a 	mov	r7,zero
    e92c:	9809883a 	mov	r4,r19
    e930:	403ee83a 	callr	r8
    e934:	00ffffc4 	movi	r3,-1
    e938:	10c04426 	beq	r2,r3,ea4c <__sflush_r+0x1a0>
    e93c:	88c0030b 	ldhu	r3,12(r17)
    e940:	89000417 	ldw	r4,16(r17)
    e944:	88000115 	stw	zero,4(r17)
    e948:	197dffcc 	andi	r5,r3,63487
    e94c:	8940030d 	sth	r5,12(r17)
    e950:	89000015 	stw	r4,0(r17)
    e954:	18c4000c 	andi	r3,r3,4096
    e958:	18002c1e 	bne	r3,zero,ea0c <__sflush_r+0x160>
    e95c:	89400c17 	ldw	r5,48(r17)
    e960:	9c000015 	stw	r16,0(r19)
    e964:	28000526 	beq	r5,zero,e97c <__sflush_r+0xd0>
    e968:	88801004 	addi	r2,r17,64
    e96c:	28800226 	beq	r5,r2,e978 <__sflush_r+0xcc>
    e970:	9809883a 	mov	r4,r19
    e974:	000f0180 	call	f018 <_free_r>
    e978:	88000c15 	stw	zero,48(r17)
    e97c:	0005883a 	mov	r2,zero
    e980:	dfc00417 	ldw	ra,16(sp)
    e984:	dcc00317 	ldw	r19,12(sp)
    e988:	dc800217 	ldw	r18,8(sp)
    e98c:	dc400117 	ldw	r17,4(sp)
    e990:	dc000017 	ldw	r16,0(sp)
    e994:	dec00504 	addi	sp,sp,20
    e998:	f800283a 	ret
    e99c:	2c800417 	ldw	r18,16(r5)
    e9a0:	903ff626 	beq	r18,zero,e97c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e97c>
    e9a4:	2c000017 	ldw	r16,0(r5)
    e9a8:	108000cc 	andi	r2,r2,3
    e9ac:	2c800015 	stw	r18,0(r5)
    e9b0:	84a1c83a 	sub	r16,r16,r18
    e9b4:	1000131e 	bne	r2,zero,ea04 <__sflush_r+0x158>
    e9b8:	28800517 	ldw	r2,20(r5)
    e9bc:	88800215 	stw	r2,8(r17)
    e9c0:	04000316 	blt	zero,r16,e9d0 <__sflush_r+0x124>
    e9c4:	003fed06 	br	e97c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e97c>
    e9c8:	90a5883a 	add	r18,r18,r2
    e9cc:	043feb0e 	bge	zero,r16,e97c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e97c>
    e9d0:	88800917 	ldw	r2,36(r17)
    e9d4:	89400717 	ldw	r5,28(r17)
    e9d8:	800f883a 	mov	r7,r16
    e9dc:	900d883a 	mov	r6,r18
    e9e0:	9809883a 	mov	r4,r19
    e9e4:	103ee83a 	callr	r2
    e9e8:	80a1c83a 	sub	r16,r16,r2
    e9ec:	00bff616 	blt	zero,r2,e9c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e9c8>
    e9f0:	88c0030b 	ldhu	r3,12(r17)
    e9f4:	00bfffc4 	movi	r2,-1
    e9f8:	18c01014 	ori	r3,r3,64
    e9fc:	88c0030d 	sth	r3,12(r17)
    ea00:	003fdf06 	br	e980 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e980>
    ea04:	0005883a 	mov	r2,zero
    ea08:	003fec06 	br	e9bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e9bc>
    ea0c:	88801415 	stw	r2,80(r17)
    ea10:	003fd206 	br	e95c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e95c>
    ea14:	28c00f17 	ldw	r3,60(r5)
    ea18:	00ffb316 	blt	zero,r3,e8e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e8e8>
    ea1c:	003fd706 	br	e97c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e97c>
    ea20:	89400717 	ldw	r5,28(r17)
    ea24:	000d883a 	mov	r6,zero
    ea28:	01c00044 	movi	r7,1
    ea2c:	9809883a 	mov	r4,r19
    ea30:	403ee83a 	callr	r8
    ea34:	100d883a 	mov	r6,r2
    ea38:	00bfffc4 	movi	r2,-1
    ea3c:	30801426 	beq	r6,r2,ea90 <__sflush_r+0x1e4>
    ea40:	8880030b 	ldhu	r2,12(r17)
    ea44:	8a000a17 	ldw	r8,40(r17)
    ea48:	003fae06 	br	e904 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e904>
    ea4c:	98c00017 	ldw	r3,0(r19)
    ea50:	183fba26 	beq	r3,zero,e93c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e93c>
    ea54:	01000744 	movi	r4,29
    ea58:	19000626 	beq	r3,r4,ea74 <__sflush_r+0x1c8>
    ea5c:	01000584 	movi	r4,22
    ea60:	19000426 	beq	r3,r4,ea74 <__sflush_r+0x1c8>
    ea64:	88c0030b 	ldhu	r3,12(r17)
    ea68:	18c01014 	ori	r3,r3,64
    ea6c:	88c0030d 	sth	r3,12(r17)
    ea70:	003fc306 	br	e980 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e980>
    ea74:	8880030b 	ldhu	r2,12(r17)
    ea78:	88c00417 	ldw	r3,16(r17)
    ea7c:	88000115 	stw	zero,4(r17)
    ea80:	10bdffcc 	andi	r2,r2,63487
    ea84:	8880030d 	sth	r2,12(r17)
    ea88:	88c00015 	stw	r3,0(r17)
    ea8c:	003fb306 	br	e95c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e95c>
    ea90:	98800017 	ldw	r2,0(r19)
    ea94:	103fea26 	beq	r2,zero,ea40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ea40>
    ea98:	00c00744 	movi	r3,29
    ea9c:	10c00226 	beq	r2,r3,eaa8 <__sflush_r+0x1fc>
    eaa0:	00c00584 	movi	r3,22
    eaa4:	10c0031e 	bne	r2,r3,eab4 <__sflush_r+0x208>
    eaa8:	9c000015 	stw	r16,0(r19)
    eaac:	0005883a 	mov	r2,zero
    eab0:	003fb306 	br	e980 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e980>
    eab4:	88c0030b 	ldhu	r3,12(r17)
    eab8:	3005883a 	mov	r2,r6
    eabc:	18c01014 	ori	r3,r3,64
    eac0:	88c0030d 	sth	r3,12(r17)
    eac4:	003fae06 	br	e980 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700e980>

0000eac8 <_fflush_r>:
    eac8:	defffd04 	addi	sp,sp,-12
    eacc:	dc000115 	stw	r16,4(sp)
    ead0:	dfc00215 	stw	ra,8(sp)
    ead4:	2021883a 	mov	r16,r4
    ead8:	20000226 	beq	r4,zero,eae4 <_fflush_r+0x1c>
    eadc:	20800e17 	ldw	r2,56(r4)
    eae0:	10000c26 	beq	r2,zero,eb14 <_fflush_r+0x4c>
    eae4:	2880030f 	ldh	r2,12(r5)
    eae8:	1000051e 	bne	r2,zero,eb00 <_fflush_r+0x38>
    eaec:	0005883a 	mov	r2,zero
    eaf0:	dfc00217 	ldw	ra,8(sp)
    eaf4:	dc000117 	ldw	r16,4(sp)
    eaf8:	dec00304 	addi	sp,sp,12
    eafc:	f800283a 	ret
    eb00:	8009883a 	mov	r4,r16
    eb04:	dfc00217 	ldw	ra,8(sp)
    eb08:	dc000117 	ldw	r16,4(sp)
    eb0c:	dec00304 	addi	sp,sp,12
    eb10:	000e8ac1 	jmpi	e8ac <__sflush_r>
    eb14:	d9400015 	stw	r5,0(sp)
    eb18:	000eea40 	call	eea4 <__sinit>
    eb1c:	d9400017 	ldw	r5,0(sp)
    eb20:	003ff006 	br	eae4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700eae4>

0000eb24 <fflush>:
    eb24:	20000526 	beq	r4,zero,eb3c <fflush+0x18>
    eb28:	008000b4 	movhi	r2,2
    eb2c:	109bd004 	addi	r2,r2,28480
    eb30:	200b883a 	mov	r5,r4
    eb34:	11000017 	ldw	r4,0(r2)
    eb38:	000eac81 	jmpi	eac8 <_fflush_r>
    eb3c:	008000b4 	movhi	r2,2
    eb40:	109bcf04 	addi	r2,r2,28476
    eb44:	11000017 	ldw	r4,0(r2)
    eb48:	01400074 	movhi	r5,1
    eb4c:	297ab204 	addi	r5,r5,-5432
    eb50:	000f8a81 	jmpi	f8a8 <_fwalk_reent>

0000eb54 <__fp_unlock>:
    eb54:	0005883a 	mov	r2,zero
    eb58:	f800283a 	ret

0000eb5c <_cleanup_r>:
    eb5c:	01400074 	movhi	r5,1
    eb60:	29504804 	addi	r5,r5,16672
    eb64:	000f8a81 	jmpi	f8a8 <_fwalk_reent>

0000eb68 <__sinit.part.1>:
    eb68:	defff704 	addi	sp,sp,-36
    eb6c:	00c00074 	movhi	r3,1
    eb70:	dfc00815 	stw	ra,32(sp)
    eb74:	ddc00715 	stw	r23,28(sp)
    eb78:	dd800615 	stw	r22,24(sp)
    eb7c:	dd400515 	stw	r21,20(sp)
    eb80:	dd000415 	stw	r20,16(sp)
    eb84:	dcc00315 	stw	r19,12(sp)
    eb88:	dc800215 	stw	r18,8(sp)
    eb8c:	dc400115 	stw	r17,4(sp)
    eb90:	dc000015 	stw	r16,0(sp)
    eb94:	18fad704 	addi	r3,r3,-5284
    eb98:	24000117 	ldw	r16,4(r4)
    eb9c:	20c00f15 	stw	r3,60(r4)
    eba0:	2080bb04 	addi	r2,r4,748
    eba4:	00c000c4 	movi	r3,3
    eba8:	20c0b915 	stw	r3,740(r4)
    ebac:	2080ba15 	stw	r2,744(r4)
    ebb0:	2000b815 	stw	zero,736(r4)
    ebb4:	05c00204 	movi	r23,8
    ebb8:	00800104 	movi	r2,4
    ebbc:	2025883a 	mov	r18,r4
    ebc0:	b80d883a 	mov	r6,r23
    ebc4:	81001704 	addi	r4,r16,92
    ebc8:	000b883a 	mov	r5,zero
    ebcc:	80000015 	stw	zero,0(r16)
    ebd0:	80000115 	stw	zero,4(r16)
    ebd4:	80000215 	stw	zero,8(r16)
    ebd8:	8080030d 	sth	r2,12(r16)
    ebdc:	80001915 	stw	zero,100(r16)
    ebe0:	8000038d 	sth	zero,14(r16)
    ebe4:	80000415 	stw	zero,16(r16)
    ebe8:	80000515 	stw	zero,20(r16)
    ebec:	80000615 	stw	zero,24(r16)
    ebf0:	00082300 	call	8230 <memset>
    ebf4:	05800074 	movhi	r22,1
    ebf8:	94400217 	ldw	r17,8(r18)
    ebfc:	05400074 	movhi	r21,1
    ec00:	05000074 	movhi	r20,1
    ec04:	04c00074 	movhi	r19,1
    ec08:	b5850604 	addi	r22,r22,5144
    ec0c:	ad451d04 	addi	r21,r21,5236
    ec10:	a5053c04 	addi	r20,r20,5360
    ec14:	9cc55304 	addi	r19,r19,5452
    ec18:	85800815 	stw	r22,32(r16)
    ec1c:	85400915 	stw	r21,36(r16)
    ec20:	85000a15 	stw	r20,40(r16)
    ec24:	84c00b15 	stw	r19,44(r16)
    ec28:	84000715 	stw	r16,28(r16)
    ec2c:	00800284 	movi	r2,10
    ec30:	8880030d 	sth	r2,12(r17)
    ec34:	00800044 	movi	r2,1
    ec38:	b80d883a 	mov	r6,r23
    ec3c:	89001704 	addi	r4,r17,92
    ec40:	000b883a 	mov	r5,zero
    ec44:	88000015 	stw	zero,0(r17)
    ec48:	88000115 	stw	zero,4(r17)
    ec4c:	88000215 	stw	zero,8(r17)
    ec50:	88001915 	stw	zero,100(r17)
    ec54:	8880038d 	sth	r2,14(r17)
    ec58:	88000415 	stw	zero,16(r17)
    ec5c:	88000515 	stw	zero,20(r17)
    ec60:	88000615 	stw	zero,24(r17)
    ec64:	00082300 	call	8230 <memset>
    ec68:	94000317 	ldw	r16,12(r18)
    ec6c:	00800484 	movi	r2,18
    ec70:	8c400715 	stw	r17,28(r17)
    ec74:	8d800815 	stw	r22,32(r17)
    ec78:	8d400915 	stw	r21,36(r17)
    ec7c:	8d000a15 	stw	r20,40(r17)
    ec80:	8cc00b15 	stw	r19,44(r17)
    ec84:	8080030d 	sth	r2,12(r16)
    ec88:	00800084 	movi	r2,2
    ec8c:	80000015 	stw	zero,0(r16)
    ec90:	80000115 	stw	zero,4(r16)
    ec94:	80000215 	stw	zero,8(r16)
    ec98:	80001915 	stw	zero,100(r16)
    ec9c:	8080038d 	sth	r2,14(r16)
    eca0:	80000415 	stw	zero,16(r16)
    eca4:	80000515 	stw	zero,20(r16)
    eca8:	80000615 	stw	zero,24(r16)
    ecac:	b80d883a 	mov	r6,r23
    ecb0:	000b883a 	mov	r5,zero
    ecb4:	81001704 	addi	r4,r16,92
    ecb8:	00082300 	call	8230 <memset>
    ecbc:	00800044 	movi	r2,1
    ecc0:	84000715 	stw	r16,28(r16)
    ecc4:	85800815 	stw	r22,32(r16)
    ecc8:	85400915 	stw	r21,36(r16)
    eccc:	85000a15 	stw	r20,40(r16)
    ecd0:	84c00b15 	stw	r19,44(r16)
    ecd4:	90800e15 	stw	r2,56(r18)
    ecd8:	dfc00817 	ldw	ra,32(sp)
    ecdc:	ddc00717 	ldw	r23,28(sp)
    ece0:	dd800617 	ldw	r22,24(sp)
    ece4:	dd400517 	ldw	r21,20(sp)
    ece8:	dd000417 	ldw	r20,16(sp)
    ecec:	dcc00317 	ldw	r19,12(sp)
    ecf0:	dc800217 	ldw	r18,8(sp)
    ecf4:	dc400117 	ldw	r17,4(sp)
    ecf8:	dc000017 	ldw	r16,0(sp)
    ecfc:	dec00904 	addi	sp,sp,36
    ed00:	f800283a 	ret

0000ed04 <__fp_lock>:
    ed04:	0005883a 	mov	r2,zero
    ed08:	f800283a 	ret

0000ed0c <__sfmoreglue>:
    ed0c:	defffc04 	addi	sp,sp,-16
    ed10:	dc400115 	stw	r17,4(sp)
    ed14:	2c7fffc4 	addi	r17,r5,-1
    ed18:	8c401a24 	muli	r17,r17,104
    ed1c:	dc800215 	stw	r18,8(sp)
    ed20:	2825883a 	mov	r18,r5
    ed24:	89401d04 	addi	r5,r17,116
    ed28:	dc000015 	stw	r16,0(sp)
    ed2c:	dfc00315 	stw	ra,12(sp)
    ed30:	00078dc0 	call	78dc <_malloc_r>
    ed34:	1021883a 	mov	r16,r2
    ed38:	10000726 	beq	r2,zero,ed58 <__sfmoreglue+0x4c>
    ed3c:	11000304 	addi	r4,r2,12
    ed40:	10000015 	stw	zero,0(r2)
    ed44:	14800115 	stw	r18,4(r2)
    ed48:	11000215 	stw	r4,8(r2)
    ed4c:	89801a04 	addi	r6,r17,104
    ed50:	000b883a 	mov	r5,zero
    ed54:	00082300 	call	8230 <memset>
    ed58:	8005883a 	mov	r2,r16
    ed5c:	dfc00317 	ldw	ra,12(sp)
    ed60:	dc800217 	ldw	r18,8(sp)
    ed64:	dc400117 	ldw	r17,4(sp)
    ed68:	dc000017 	ldw	r16,0(sp)
    ed6c:	dec00404 	addi	sp,sp,16
    ed70:	f800283a 	ret

0000ed74 <__sfp>:
    ed74:	defffb04 	addi	sp,sp,-20
    ed78:	dc000015 	stw	r16,0(sp)
    ed7c:	040000b4 	movhi	r16,2
    ed80:	841bcf04 	addi	r16,r16,28476
    ed84:	dcc00315 	stw	r19,12(sp)
    ed88:	2027883a 	mov	r19,r4
    ed8c:	81000017 	ldw	r4,0(r16)
    ed90:	dfc00415 	stw	ra,16(sp)
    ed94:	dc800215 	stw	r18,8(sp)
    ed98:	20800e17 	ldw	r2,56(r4)
    ed9c:	dc400115 	stw	r17,4(sp)
    eda0:	1000021e 	bne	r2,zero,edac <__sfp+0x38>
    eda4:	000eb680 	call	eb68 <__sinit.part.1>
    eda8:	81000017 	ldw	r4,0(r16)
    edac:	2480b804 	addi	r18,r4,736
    edb0:	047fffc4 	movi	r17,-1
    edb4:	91000117 	ldw	r4,4(r18)
    edb8:	94000217 	ldw	r16,8(r18)
    edbc:	213fffc4 	addi	r4,r4,-1
    edc0:	20000a16 	blt	r4,zero,edec <__sfp+0x78>
    edc4:	8080030f 	ldh	r2,12(r16)
    edc8:	10000c26 	beq	r2,zero,edfc <__sfp+0x88>
    edcc:	80c01d04 	addi	r3,r16,116
    edd0:	00000206 	br	eddc <__sfp+0x68>
    edd4:	18bfe60f 	ldh	r2,-104(r3)
    edd8:	10000826 	beq	r2,zero,edfc <__sfp+0x88>
    eddc:	213fffc4 	addi	r4,r4,-1
    ede0:	1c3ffd04 	addi	r16,r3,-12
    ede4:	18c01a04 	addi	r3,r3,104
    ede8:	247ffa1e 	bne	r4,r17,edd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700edd4>
    edec:	90800017 	ldw	r2,0(r18)
    edf0:	10001d26 	beq	r2,zero,ee68 <__sfp+0xf4>
    edf4:	1025883a 	mov	r18,r2
    edf8:	003fee06 	br	edb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700edb4>
    edfc:	00bfffc4 	movi	r2,-1
    ee00:	8080038d 	sth	r2,14(r16)
    ee04:	00800044 	movi	r2,1
    ee08:	8080030d 	sth	r2,12(r16)
    ee0c:	80001915 	stw	zero,100(r16)
    ee10:	80000015 	stw	zero,0(r16)
    ee14:	80000215 	stw	zero,8(r16)
    ee18:	80000115 	stw	zero,4(r16)
    ee1c:	80000415 	stw	zero,16(r16)
    ee20:	80000515 	stw	zero,20(r16)
    ee24:	80000615 	stw	zero,24(r16)
    ee28:	01800204 	movi	r6,8
    ee2c:	000b883a 	mov	r5,zero
    ee30:	81001704 	addi	r4,r16,92
    ee34:	00082300 	call	8230 <memset>
    ee38:	8005883a 	mov	r2,r16
    ee3c:	80000c15 	stw	zero,48(r16)
    ee40:	80000d15 	stw	zero,52(r16)
    ee44:	80001115 	stw	zero,68(r16)
    ee48:	80001215 	stw	zero,72(r16)
    ee4c:	dfc00417 	ldw	ra,16(sp)
    ee50:	dcc00317 	ldw	r19,12(sp)
    ee54:	dc800217 	ldw	r18,8(sp)
    ee58:	dc400117 	ldw	r17,4(sp)
    ee5c:	dc000017 	ldw	r16,0(sp)
    ee60:	dec00504 	addi	sp,sp,20
    ee64:	f800283a 	ret
    ee68:	01400104 	movi	r5,4
    ee6c:	9809883a 	mov	r4,r19
    ee70:	000ed0c0 	call	ed0c <__sfmoreglue>
    ee74:	90800015 	stw	r2,0(r18)
    ee78:	103fde1e 	bne	r2,zero,edf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700edf4>
    ee7c:	00800304 	movi	r2,12
    ee80:	98800015 	stw	r2,0(r19)
    ee84:	0005883a 	mov	r2,zero
    ee88:	003ff006 	br	ee4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ee4c>

0000ee8c <_cleanup>:
    ee8c:	008000b4 	movhi	r2,2
    ee90:	109bcf04 	addi	r2,r2,28476
    ee94:	11000017 	ldw	r4,0(r2)
    ee98:	01400074 	movhi	r5,1
    ee9c:	29504804 	addi	r5,r5,16672
    eea0:	000f8a81 	jmpi	f8a8 <_fwalk_reent>

0000eea4 <__sinit>:
    eea4:	20800e17 	ldw	r2,56(r4)
    eea8:	10000126 	beq	r2,zero,eeb0 <__sinit+0xc>
    eeac:	f800283a 	ret
    eeb0:	000eb681 	jmpi	eb68 <__sinit.part.1>

0000eeb4 <__sfp_lock_acquire>:
    eeb4:	f800283a 	ret

0000eeb8 <__sfp_lock_release>:
    eeb8:	f800283a 	ret

0000eebc <__sinit_lock_acquire>:
    eebc:	f800283a 	ret

0000eec0 <__sinit_lock_release>:
    eec0:	f800283a 	ret

0000eec4 <__fp_lock_all>:
    eec4:	008000b4 	movhi	r2,2
    eec8:	109bd004 	addi	r2,r2,28480
    eecc:	11000017 	ldw	r4,0(r2)
    eed0:	01400074 	movhi	r5,1
    eed4:	297b4104 	addi	r5,r5,-4860
    eed8:	000f7e41 	jmpi	f7e4 <_fwalk>

0000eedc <__fp_unlock_all>:
    eedc:	008000b4 	movhi	r2,2
    eee0:	109bd004 	addi	r2,r2,28480
    eee4:	11000017 	ldw	r4,0(r2)
    eee8:	01400074 	movhi	r5,1
    eeec:	297ad504 	addi	r5,r5,-5292
    eef0:	000f7e41 	jmpi	f7e4 <_fwalk>

0000eef4 <_malloc_trim_r>:
    eef4:	defffb04 	addi	sp,sp,-20
    eef8:	dcc00315 	stw	r19,12(sp)
    eefc:	04c000b4 	movhi	r19,2
    ef00:	dc800215 	stw	r18,8(sp)
    ef04:	dc400115 	stw	r17,4(sp)
    ef08:	dc000015 	stw	r16,0(sp)
    ef0c:	dfc00415 	stw	ra,16(sp)
    ef10:	2821883a 	mov	r16,r5
    ef14:	9cd40c04 	addi	r19,r19,20528
    ef18:	2025883a 	mov	r18,r4
    ef1c:	0017d5c0 	call	17d5c <__malloc_lock>
    ef20:	98800217 	ldw	r2,8(r19)
    ef24:	14400117 	ldw	r17,4(r2)
    ef28:	00bfff04 	movi	r2,-4
    ef2c:	88a2703a 	and	r17,r17,r2
    ef30:	8c21c83a 	sub	r16,r17,r16
    ef34:	8403fbc4 	addi	r16,r16,4079
    ef38:	8020d33a 	srli	r16,r16,12
    ef3c:	0083ffc4 	movi	r2,4095
    ef40:	843fffc4 	addi	r16,r16,-1
    ef44:	8020933a 	slli	r16,r16,12
    ef48:	1400060e 	bge	r2,r16,ef64 <_malloc_trim_r+0x70>
    ef4c:	000b883a 	mov	r5,zero
    ef50:	9009883a 	mov	r4,r18
    ef54:	00084980 	call	8498 <_sbrk_r>
    ef58:	98c00217 	ldw	r3,8(r19)
    ef5c:	1c47883a 	add	r3,r3,r17
    ef60:	10c00a26 	beq	r2,r3,ef8c <_malloc_trim_r+0x98>
    ef64:	9009883a 	mov	r4,r18
    ef68:	0017e7c0 	call	17e7c <__malloc_unlock>
    ef6c:	0005883a 	mov	r2,zero
    ef70:	dfc00417 	ldw	ra,16(sp)
    ef74:	dcc00317 	ldw	r19,12(sp)
    ef78:	dc800217 	ldw	r18,8(sp)
    ef7c:	dc400117 	ldw	r17,4(sp)
    ef80:	dc000017 	ldw	r16,0(sp)
    ef84:	dec00504 	addi	sp,sp,20
    ef88:	f800283a 	ret
    ef8c:	040bc83a 	sub	r5,zero,r16
    ef90:	9009883a 	mov	r4,r18
    ef94:	00084980 	call	8498 <_sbrk_r>
    ef98:	00ffffc4 	movi	r3,-1
    ef9c:	10c00d26 	beq	r2,r3,efd4 <_malloc_trim_r+0xe0>
    efa0:	00c000f4 	movhi	r3,3
    efa4:	18d41a04 	addi	r3,r3,20584
    efa8:	18800017 	ldw	r2,0(r3)
    efac:	99000217 	ldw	r4,8(r19)
    efb0:	8c23c83a 	sub	r17,r17,r16
    efb4:	8c400054 	ori	r17,r17,1
    efb8:	1421c83a 	sub	r16,r2,r16
    efbc:	24400115 	stw	r17,4(r4)
    efc0:	9009883a 	mov	r4,r18
    efc4:	1c000015 	stw	r16,0(r3)
    efc8:	0017e7c0 	call	17e7c <__malloc_unlock>
    efcc:	00800044 	movi	r2,1
    efd0:	003fe706 	br	ef70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ef70>
    efd4:	000b883a 	mov	r5,zero
    efd8:	9009883a 	mov	r4,r18
    efdc:	00084980 	call	8498 <_sbrk_r>
    efe0:	99000217 	ldw	r4,8(r19)
    efe4:	014003c4 	movi	r5,15
    efe8:	1107c83a 	sub	r3,r2,r4
    efec:	28ffdd0e 	bge	r5,r3,ef64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ef64>
    eff0:	014000b4 	movhi	r5,2
    eff4:	295bcd04 	addi	r5,r5,28468
    eff8:	29400017 	ldw	r5,0(r5)
    effc:	18c00054 	ori	r3,r3,1
    f000:	20c00115 	stw	r3,4(r4)
    f004:	00c000f4 	movhi	r3,3
    f008:	1145c83a 	sub	r2,r2,r5
    f00c:	18d41a04 	addi	r3,r3,20584
    f010:	18800015 	stw	r2,0(r3)
    f014:	003fd306 	br	ef64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ef64>

0000f018 <_free_r>:
    f018:	28004126 	beq	r5,zero,f120 <_free_r+0x108>
    f01c:	defffd04 	addi	sp,sp,-12
    f020:	dc400115 	stw	r17,4(sp)
    f024:	dc000015 	stw	r16,0(sp)
    f028:	2023883a 	mov	r17,r4
    f02c:	2821883a 	mov	r16,r5
    f030:	dfc00215 	stw	ra,8(sp)
    f034:	0017d5c0 	call	17d5c <__malloc_lock>
    f038:	81ffff17 	ldw	r7,-4(r16)
    f03c:	00bfff84 	movi	r2,-2
    f040:	010000b4 	movhi	r4,2
    f044:	81bffe04 	addi	r6,r16,-8
    f048:	3884703a 	and	r2,r7,r2
    f04c:	21140c04 	addi	r4,r4,20528
    f050:	308b883a 	add	r5,r6,r2
    f054:	2a400117 	ldw	r9,4(r5)
    f058:	22000217 	ldw	r8,8(r4)
    f05c:	00ffff04 	movi	r3,-4
    f060:	48c6703a 	and	r3,r9,r3
    f064:	2a005726 	beq	r5,r8,f1c4 <_free_r+0x1ac>
    f068:	28c00115 	stw	r3,4(r5)
    f06c:	39c0004c 	andi	r7,r7,1
    f070:	3800091e 	bne	r7,zero,f098 <_free_r+0x80>
    f074:	823ffe17 	ldw	r8,-8(r16)
    f078:	22400204 	addi	r9,r4,8
    f07c:	320dc83a 	sub	r6,r6,r8
    f080:	31c00217 	ldw	r7,8(r6)
    f084:	1205883a 	add	r2,r2,r8
    f088:	3a406526 	beq	r7,r9,f220 <_free_r+0x208>
    f08c:	32000317 	ldw	r8,12(r6)
    f090:	3a000315 	stw	r8,12(r7)
    f094:	41c00215 	stw	r7,8(r8)
    f098:	28cf883a 	add	r7,r5,r3
    f09c:	39c00117 	ldw	r7,4(r7)
    f0a0:	39c0004c 	andi	r7,r7,1
    f0a4:	38003a26 	beq	r7,zero,f190 <_free_r+0x178>
    f0a8:	10c00054 	ori	r3,r2,1
    f0ac:	30c00115 	stw	r3,4(r6)
    f0b0:	3087883a 	add	r3,r6,r2
    f0b4:	18800015 	stw	r2,0(r3)
    f0b8:	00c07fc4 	movi	r3,511
    f0bc:	18801936 	bltu	r3,r2,f124 <_free_r+0x10c>
    f0c0:	1004d0fa 	srli	r2,r2,3
    f0c4:	01c00044 	movi	r7,1
    f0c8:	21400117 	ldw	r5,4(r4)
    f0cc:	10c00044 	addi	r3,r2,1
    f0d0:	18c7883a 	add	r3,r3,r3
    f0d4:	1005d0ba 	srai	r2,r2,2
    f0d8:	18c7883a 	add	r3,r3,r3
    f0dc:	18c7883a 	add	r3,r3,r3
    f0e0:	1907883a 	add	r3,r3,r4
    f0e4:	3884983a 	sll	r2,r7,r2
    f0e8:	19c00017 	ldw	r7,0(r3)
    f0ec:	1a3ffe04 	addi	r8,r3,-8
    f0f0:	1144b03a 	or	r2,r2,r5
    f0f4:	32000315 	stw	r8,12(r6)
    f0f8:	31c00215 	stw	r7,8(r6)
    f0fc:	20800115 	stw	r2,4(r4)
    f100:	19800015 	stw	r6,0(r3)
    f104:	39800315 	stw	r6,12(r7)
    f108:	8809883a 	mov	r4,r17
    f10c:	dfc00217 	ldw	ra,8(sp)
    f110:	dc400117 	ldw	r17,4(sp)
    f114:	dc000017 	ldw	r16,0(sp)
    f118:	dec00304 	addi	sp,sp,12
    f11c:	0017e7c1 	jmpi	17e7c <__malloc_unlock>
    f120:	f800283a 	ret
    f124:	100ad27a 	srli	r5,r2,9
    f128:	00c00104 	movi	r3,4
    f12c:	19404a36 	bltu	r3,r5,f258 <_free_r+0x240>
    f130:	100ad1ba 	srli	r5,r2,6
    f134:	28c00e44 	addi	r3,r5,57
    f138:	18c7883a 	add	r3,r3,r3
    f13c:	29400e04 	addi	r5,r5,56
    f140:	18c7883a 	add	r3,r3,r3
    f144:	18c7883a 	add	r3,r3,r3
    f148:	1909883a 	add	r4,r3,r4
    f14c:	20c00017 	ldw	r3,0(r4)
    f150:	01c000b4 	movhi	r7,2
    f154:	213ffe04 	addi	r4,r4,-8
    f158:	39d40c04 	addi	r7,r7,20528
    f15c:	20c04426 	beq	r4,r3,f270 <_free_r+0x258>
    f160:	01ffff04 	movi	r7,-4
    f164:	19400117 	ldw	r5,4(r3)
    f168:	29ca703a 	and	r5,r5,r7
    f16c:	1140022e 	bgeu	r2,r5,f178 <_free_r+0x160>
    f170:	18c00217 	ldw	r3,8(r3)
    f174:	20fffb1e 	bne	r4,r3,f164 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f164>
    f178:	19000317 	ldw	r4,12(r3)
    f17c:	31000315 	stw	r4,12(r6)
    f180:	30c00215 	stw	r3,8(r6)
    f184:	21800215 	stw	r6,8(r4)
    f188:	19800315 	stw	r6,12(r3)
    f18c:	003fde06 	br	f108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f108>
    f190:	29c00217 	ldw	r7,8(r5)
    f194:	10c5883a 	add	r2,r2,r3
    f198:	00c000b4 	movhi	r3,2
    f19c:	18d40e04 	addi	r3,r3,20536
    f1a0:	38c03b26 	beq	r7,r3,f290 <_free_r+0x278>
    f1a4:	2a000317 	ldw	r8,12(r5)
    f1a8:	11400054 	ori	r5,r2,1
    f1ac:	3087883a 	add	r3,r6,r2
    f1b0:	3a000315 	stw	r8,12(r7)
    f1b4:	41c00215 	stw	r7,8(r8)
    f1b8:	31400115 	stw	r5,4(r6)
    f1bc:	18800015 	stw	r2,0(r3)
    f1c0:	003fbd06 	br	f0b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f0b8>
    f1c4:	39c0004c 	andi	r7,r7,1
    f1c8:	10c5883a 	add	r2,r2,r3
    f1cc:	3800071e 	bne	r7,zero,f1ec <_free_r+0x1d4>
    f1d0:	81fffe17 	ldw	r7,-8(r16)
    f1d4:	31cdc83a 	sub	r6,r6,r7
    f1d8:	30c00317 	ldw	r3,12(r6)
    f1dc:	31400217 	ldw	r5,8(r6)
    f1e0:	11c5883a 	add	r2,r2,r7
    f1e4:	28c00315 	stw	r3,12(r5)
    f1e8:	19400215 	stw	r5,8(r3)
    f1ec:	10c00054 	ori	r3,r2,1
    f1f0:	30c00115 	stw	r3,4(r6)
    f1f4:	00c000b4 	movhi	r3,2
    f1f8:	18dbce04 	addi	r3,r3,28472
    f1fc:	18c00017 	ldw	r3,0(r3)
    f200:	21800215 	stw	r6,8(r4)
    f204:	10ffc036 	bltu	r2,r3,f108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f108>
    f208:	008000f4 	movhi	r2,3
    f20c:	10a3f104 	addi	r2,r2,-28732
    f210:	11400017 	ldw	r5,0(r2)
    f214:	8809883a 	mov	r4,r17
    f218:	000eef40 	call	eef4 <_malloc_trim_r>
    f21c:	003fba06 	br	f108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f108>
    f220:	28c9883a 	add	r4,r5,r3
    f224:	21000117 	ldw	r4,4(r4)
    f228:	2100004c 	andi	r4,r4,1
    f22c:	2000391e 	bne	r4,zero,f314 <_free_r+0x2fc>
    f230:	29c00217 	ldw	r7,8(r5)
    f234:	29000317 	ldw	r4,12(r5)
    f238:	1885883a 	add	r2,r3,r2
    f23c:	10c00054 	ori	r3,r2,1
    f240:	39000315 	stw	r4,12(r7)
    f244:	21c00215 	stw	r7,8(r4)
    f248:	30c00115 	stw	r3,4(r6)
    f24c:	308d883a 	add	r6,r6,r2
    f250:	30800015 	stw	r2,0(r6)
    f254:	003fac06 	br	f108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f108>
    f258:	00c00504 	movi	r3,20
    f25c:	19401536 	bltu	r3,r5,f2b4 <_free_r+0x29c>
    f260:	28c01704 	addi	r3,r5,92
    f264:	18c7883a 	add	r3,r3,r3
    f268:	294016c4 	addi	r5,r5,91
    f26c:	003fb406 	br	f140 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f140>
    f270:	280bd0ba 	srai	r5,r5,2
    f274:	00c00044 	movi	r3,1
    f278:	38800117 	ldw	r2,4(r7)
    f27c:	194a983a 	sll	r5,r3,r5
    f280:	2007883a 	mov	r3,r4
    f284:	2884b03a 	or	r2,r5,r2
    f288:	38800115 	stw	r2,4(r7)
    f28c:	003fbb06 	br	f17c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f17c>
    f290:	21800515 	stw	r6,20(r4)
    f294:	21800415 	stw	r6,16(r4)
    f298:	10c00054 	ori	r3,r2,1
    f29c:	31c00315 	stw	r7,12(r6)
    f2a0:	31c00215 	stw	r7,8(r6)
    f2a4:	30c00115 	stw	r3,4(r6)
    f2a8:	308d883a 	add	r6,r6,r2
    f2ac:	30800015 	stw	r2,0(r6)
    f2b0:	003f9506 	br	f108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f108>
    f2b4:	00c01504 	movi	r3,84
    f2b8:	19400536 	bltu	r3,r5,f2d0 <_free_r+0x2b8>
    f2bc:	100ad33a 	srli	r5,r2,12
    f2c0:	28c01bc4 	addi	r3,r5,111
    f2c4:	18c7883a 	add	r3,r3,r3
    f2c8:	29401b84 	addi	r5,r5,110
    f2cc:	003f9c06 	br	f140 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f140>
    f2d0:	00c05504 	movi	r3,340
    f2d4:	19400536 	bltu	r3,r5,f2ec <_free_r+0x2d4>
    f2d8:	100ad3fa 	srli	r5,r2,15
    f2dc:	28c01e04 	addi	r3,r5,120
    f2e0:	18c7883a 	add	r3,r3,r3
    f2e4:	29401dc4 	addi	r5,r5,119
    f2e8:	003f9506 	br	f140 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f140>
    f2ec:	00c15504 	movi	r3,1364
    f2f0:	19400536 	bltu	r3,r5,f308 <_free_r+0x2f0>
    f2f4:	100ad4ba 	srli	r5,r2,18
    f2f8:	28c01f44 	addi	r3,r5,125
    f2fc:	18c7883a 	add	r3,r3,r3
    f300:	29401f04 	addi	r5,r5,124
    f304:	003f8e06 	br	f140 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f140>
    f308:	00c03f84 	movi	r3,254
    f30c:	01401f84 	movi	r5,126
    f310:	003f8b06 	br	f140 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f140>
    f314:	10c00054 	ori	r3,r2,1
    f318:	30c00115 	stw	r3,4(r6)
    f31c:	308d883a 	add	r6,r6,r2
    f320:	30800015 	stw	r2,0(r6)
    f324:	003f7806 	br	f108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f108>

0000f328 <__sfvwrite_r>:
    f328:	30800217 	ldw	r2,8(r6)
    f32c:	10006726 	beq	r2,zero,f4cc <__sfvwrite_r+0x1a4>
    f330:	28c0030b 	ldhu	r3,12(r5)
    f334:	defff404 	addi	sp,sp,-48
    f338:	dd400715 	stw	r21,28(sp)
    f33c:	dd000615 	stw	r20,24(sp)
    f340:	dc000215 	stw	r16,8(sp)
    f344:	dfc00b15 	stw	ra,44(sp)
    f348:	df000a15 	stw	fp,40(sp)
    f34c:	ddc00915 	stw	r23,36(sp)
    f350:	dd800815 	stw	r22,32(sp)
    f354:	dcc00515 	stw	r19,20(sp)
    f358:	dc800415 	stw	r18,16(sp)
    f35c:	dc400315 	stw	r17,12(sp)
    f360:	1880020c 	andi	r2,r3,8
    f364:	2821883a 	mov	r16,r5
    f368:	202b883a 	mov	r21,r4
    f36c:	3029883a 	mov	r20,r6
    f370:	10002726 	beq	r2,zero,f410 <__sfvwrite_r+0xe8>
    f374:	28800417 	ldw	r2,16(r5)
    f378:	10002526 	beq	r2,zero,f410 <__sfvwrite_r+0xe8>
    f37c:	1880008c 	andi	r2,r3,2
    f380:	a4400017 	ldw	r17,0(r20)
    f384:	10002a26 	beq	r2,zero,f430 <__sfvwrite_r+0x108>
    f388:	05a00034 	movhi	r22,32768
    f38c:	0027883a 	mov	r19,zero
    f390:	0025883a 	mov	r18,zero
    f394:	b5bf0004 	addi	r22,r22,-1024
    f398:	980d883a 	mov	r6,r19
    f39c:	a809883a 	mov	r4,r21
    f3a0:	90004626 	beq	r18,zero,f4bc <__sfvwrite_r+0x194>
    f3a4:	900f883a 	mov	r7,r18
    f3a8:	b480022e 	bgeu	r22,r18,f3b4 <__sfvwrite_r+0x8c>
    f3ac:	01e00034 	movhi	r7,32768
    f3b0:	39ff0004 	addi	r7,r7,-1024
    f3b4:	80800917 	ldw	r2,36(r16)
    f3b8:	81400717 	ldw	r5,28(r16)
    f3bc:	103ee83a 	callr	r2
    f3c0:	0080570e 	bge	zero,r2,f520 <__sfvwrite_r+0x1f8>
    f3c4:	a0c00217 	ldw	r3,8(r20)
    f3c8:	98a7883a 	add	r19,r19,r2
    f3cc:	90a5c83a 	sub	r18,r18,r2
    f3d0:	1885c83a 	sub	r2,r3,r2
    f3d4:	a0800215 	stw	r2,8(r20)
    f3d8:	103fef1e 	bne	r2,zero,f398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f398>
    f3dc:	0005883a 	mov	r2,zero
    f3e0:	dfc00b17 	ldw	ra,44(sp)
    f3e4:	df000a17 	ldw	fp,40(sp)
    f3e8:	ddc00917 	ldw	r23,36(sp)
    f3ec:	dd800817 	ldw	r22,32(sp)
    f3f0:	dd400717 	ldw	r21,28(sp)
    f3f4:	dd000617 	ldw	r20,24(sp)
    f3f8:	dcc00517 	ldw	r19,20(sp)
    f3fc:	dc800417 	ldw	r18,16(sp)
    f400:	dc400317 	ldw	r17,12(sp)
    f404:	dc000217 	ldw	r16,8(sp)
    f408:	dec00c04 	addi	sp,sp,48
    f40c:	f800283a 	ret
    f410:	800b883a 	mov	r5,r16
    f414:	a809883a 	mov	r4,r21
    f418:	000ced00 	call	ced0 <__swsetup_r>
    f41c:	1000eb1e 	bne	r2,zero,f7cc <__sfvwrite_r+0x4a4>
    f420:	80c0030b 	ldhu	r3,12(r16)
    f424:	a4400017 	ldw	r17,0(r20)
    f428:	1880008c 	andi	r2,r3,2
    f42c:	103fd61e 	bne	r2,zero,f388 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f388>
    f430:	1880004c 	andi	r2,r3,1
    f434:	10003f1e 	bne	r2,zero,f534 <__sfvwrite_r+0x20c>
    f438:	0039883a 	mov	fp,zero
    f43c:	0025883a 	mov	r18,zero
    f440:	90001a26 	beq	r18,zero,f4ac <__sfvwrite_r+0x184>
    f444:	1880800c 	andi	r2,r3,512
    f448:	84c00217 	ldw	r19,8(r16)
    f44c:	10002126 	beq	r2,zero,f4d4 <__sfvwrite_r+0x1ac>
    f450:	982f883a 	mov	r23,r19
    f454:	94c09336 	bltu	r18,r19,f6a4 <__sfvwrite_r+0x37c>
    f458:	1881200c 	andi	r2,r3,1152
    f45c:	10009e1e 	bne	r2,zero,f6d8 <__sfvwrite_r+0x3b0>
    f460:	81000017 	ldw	r4,0(r16)
    f464:	b80d883a 	mov	r6,r23
    f468:	e00b883a 	mov	r5,fp
    f46c:	000fce80 	call	fce8 <memmove>
    f470:	80c00217 	ldw	r3,8(r16)
    f474:	81000017 	ldw	r4,0(r16)
    f478:	9005883a 	mov	r2,r18
    f47c:	1ce7c83a 	sub	r19,r3,r19
    f480:	25cf883a 	add	r7,r4,r23
    f484:	84c00215 	stw	r19,8(r16)
    f488:	81c00015 	stw	r7,0(r16)
    f48c:	a0c00217 	ldw	r3,8(r20)
    f490:	e0b9883a 	add	fp,fp,r2
    f494:	90a5c83a 	sub	r18,r18,r2
    f498:	18a7c83a 	sub	r19,r3,r2
    f49c:	a4c00215 	stw	r19,8(r20)
    f4a0:	983fce26 	beq	r19,zero,f3dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f3dc>
    f4a4:	80c0030b 	ldhu	r3,12(r16)
    f4a8:	903fe61e 	bne	r18,zero,f444 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f444>
    f4ac:	8f000017 	ldw	fp,0(r17)
    f4b0:	8c800117 	ldw	r18,4(r17)
    f4b4:	8c400204 	addi	r17,r17,8
    f4b8:	003fe106 	br	f440 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f440>
    f4bc:	8cc00017 	ldw	r19,0(r17)
    f4c0:	8c800117 	ldw	r18,4(r17)
    f4c4:	8c400204 	addi	r17,r17,8
    f4c8:	003fb306 	br	f398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f398>
    f4cc:	0005883a 	mov	r2,zero
    f4d0:	f800283a 	ret
    f4d4:	81000017 	ldw	r4,0(r16)
    f4d8:	80800417 	ldw	r2,16(r16)
    f4dc:	11005736 	bltu	r2,r4,f63c <__sfvwrite_r+0x314>
    f4e0:	85c00517 	ldw	r23,20(r16)
    f4e4:	95c05536 	bltu	r18,r23,f63c <__sfvwrite_r+0x314>
    f4e8:	00a00034 	movhi	r2,32768
    f4ec:	10bfffc4 	addi	r2,r2,-1
    f4f0:	9009883a 	mov	r4,r18
    f4f4:	1480012e 	bgeu	r2,r18,f4fc <__sfvwrite_r+0x1d4>
    f4f8:	1009883a 	mov	r4,r2
    f4fc:	b80b883a 	mov	r5,r23
    f500:	001538c0 	call	1538c <__divsi3>
    f504:	15cf383a 	mul	r7,r2,r23
    f508:	81400717 	ldw	r5,28(r16)
    f50c:	80800917 	ldw	r2,36(r16)
    f510:	e00d883a 	mov	r6,fp
    f514:	a809883a 	mov	r4,r21
    f518:	103ee83a 	callr	r2
    f51c:	00bfdb16 	blt	zero,r2,f48c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f48c>
    f520:	8080030b 	ldhu	r2,12(r16)
    f524:	10801014 	ori	r2,r2,64
    f528:	8080030d 	sth	r2,12(r16)
    f52c:	00bfffc4 	movi	r2,-1
    f530:	003fab06 	br	f3e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f3e0>
    f534:	0027883a 	mov	r19,zero
    f538:	0011883a 	mov	r8,zero
    f53c:	0039883a 	mov	fp,zero
    f540:	0025883a 	mov	r18,zero
    f544:	90001f26 	beq	r18,zero,f5c4 <__sfvwrite_r+0x29c>
    f548:	40005a26 	beq	r8,zero,f6b4 <__sfvwrite_r+0x38c>
    f54c:	982d883a 	mov	r22,r19
    f550:	94c0012e 	bgeu	r18,r19,f558 <__sfvwrite_r+0x230>
    f554:	902d883a 	mov	r22,r18
    f558:	81000017 	ldw	r4,0(r16)
    f55c:	80800417 	ldw	r2,16(r16)
    f560:	b02f883a 	mov	r23,r22
    f564:	81c00517 	ldw	r7,20(r16)
    f568:	1100032e 	bgeu	r2,r4,f578 <__sfvwrite_r+0x250>
    f56c:	80c00217 	ldw	r3,8(r16)
    f570:	38c7883a 	add	r3,r7,r3
    f574:	1d801816 	blt	r3,r22,f5d8 <__sfvwrite_r+0x2b0>
    f578:	b1c03e16 	blt	r22,r7,f674 <__sfvwrite_r+0x34c>
    f57c:	80800917 	ldw	r2,36(r16)
    f580:	81400717 	ldw	r5,28(r16)
    f584:	e00d883a 	mov	r6,fp
    f588:	da000115 	stw	r8,4(sp)
    f58c:	a809883a 	mov	r4,r21
    f590:	103ee83a 	callr	r2
    f594:	102f883a 	mov	r23,r2
    f598:	da000117 	ldw	r8,4(sp)
    f59c:	00bfe00e 	bge	zero,r2,f520 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f520>
    f5a0:	9de7c83a 	sub	r19,r19,r23
    f5a4:	98001f26 	beq	r19,zero,f624 <__sfvwrite_r+0x2fc>
    f5a8:	a0800217 	ldw	r2,8(r20)
    f5ac:	e5f9883a 	add	fp,fp,r23
    f5b0:	95e5c83a 	sub	r18,r18,r23
    f5b4:	15efc83a 	sub	r23,r2,r23
    f5b8:	a5c00215 	stw	r23,8(r20)
    f5bc:	b83f8726 	beq	r23,zero,f3dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f3dc>
    f5c0:	903fe11e 	bne	r18,zero,f548 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f548>
    f5c4:	8f000017 	ldw	fp,0(r17)
    f5c8:	8c800117 	ldw	r18,4(r17)
    f5cc:	0011883a 	mov	r8,zero
    f5d0:	8c400204 	addi	r17,r17,8
    f5d4:	003fdb06 	br	f544 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f544>
    f5d8:	180d883a 	mov	r6,r3
    f5dc:	e00b883a 	mov	r5,fp
    f5e0:	da000115 	stw	r8,4(sp)
    f5e4:	d8c00015 	stw	r3,0(sp)
    f5e8:	000fce80 	call	fce8 <memmove>
    f5ec:	d8c00017 	ldw	r3,0(sp)
    f5f0:	80800017 	ldw	r2,0(r16)
    f5f4:	800b883a 	mov	r5,r16
    f5f8:	a809883a 	mov	r4,r21
    f5fc:	10c5883a 	add	r2,r2,r3
    f600:	80800015 	stw	r2,0(r16)
    f604:	d8c00015 	stw	r3,0(sp)
    f608:	000eac80 	call	eac8 <_fflush_r>
    f60c:	d8c00017 	ldw	r3,0(sp)
    f610:	da000117 	ldw	r8,4(sp)
    f614:	103fc21e 	bne	r2,zero,f520 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f520>
    f618:	182f883a 	mov	r23,r3
    f61c:	9de7c83a 	sub	r19,r19,r23
    f620:	983fe11e 	bne	r19,zero,f5a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f5a8>
    f624:	800b883a 	mov	r5,r16
    f628:	a809883a 	mov	r4,r21
    f62c:	000eac80 	call	eac8 <_fflush_r>
    f630:	103fbb1e 	bne	r2,zero,f520 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f520>
    f634:	0011883a 	mov	r8,zero
    f638:	003fdb06 	br	f5a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f5a8>
    f63c:	94c0012e 	bgeu	r18,r19,f644 <__sfvwrite_r+0x31c>
    f640:	9027883a 	mov	r19,r18
    f644:	980d883a 	mov	r6,r19
    f648:	e00b883a 	mov	r5,fp
    f64c:	000fce80 	call	fce8 <memmove>
    f650:	80800217 	ldw	r2,8(r16)
    f654:	80c00017 	ldw	r3,0(r16)
    f658:	14c5c83a 	sub	r2,r2,r19
    f65c:	1cc7883a 	add	r3,r3,r19
    f660:	80800215 	stw	r2,8(r16)
    f664:	80c00015 	stw	r3,0(r16)
    f668:	10004326 	beq	r2,zero,f778 <__sfvwrite_r+0x450>
    f66c:	9805883a 	mov	r2,r19
    f670:	003f8606 	br	f48c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f48c>
    f674:	b00d883a 	mov	r6,r22
    f678:	e00b883a 	mov	r5,fp
    f67c:	da000115 	stw	r8,4(sp)
    f680:	000fce80 	call	fce8 <memmove>
    f684:	80800217 	ldw	r2,8(r16)
    f688:	80c00017 	ldw	r3,0(r16)
    f68c:	da000117 	ldw	r8,4(sp)
    f690:	1585c83a 	sub	r2,r2,r22
    f694:	1dad883a 	add	r22,r3,r22
    f698:	80800215 	stw	r2,8(r16)
    f69c:	85800015 	stw	r22,0(r16)
    f6a0:	003fbf06 	br	f5a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f5a0>
    f6a4:	81000017 	ldw	r4,0(r16)
    f6a8:	9027883a 	mov	r19,r18
    f6ac:	902f883a 	mov	r23,r18
    f6b0:	003f6c06 	br	f464 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f464>
    f6b4:	900d883a 	mov	r6,r18
    f6b8:	01400284 	movi	r5,10
    f6bc:	e009883a 	mov	r4,fp
    f6c0:	000fc040 	call	fc04 <memchr>
    f6c4:	10003e26 	beq	r2,zero,f7c0 <__sfvwrite_r+0x498>
    f6c8:	10800044 	addi	r2,r2,1
    f6cc:	1727c83a 	sub	r19,r2,fp
    f6d0:	02000044 	movi	r8,1
    f6d4:	003f9d06 	br	f54c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f54c>
    f6d8:	80800517 	ldw	r2,20(r16)
    f6dc:	81400417 	ldw	r5,16(r16)
    f6e0:	81c00017 	ldw	r7,0(r16)
    f6e4:	10a7883a 	add	r19,r2,r2
    f6e8:	9885883a 	add	r2,r19,r2
    f6ec:	1026d7fa 	srli	r19,r2,31
    f6f0:	396dc83a 	sub	r22,r7,r5
    f6f4:	b1000044 	addi	r4,r22,1
    f6f8:	9885883a 	add	r2,r19,r2
    f6fc:	1027d07a 	srai	r19,r2,1
    f700:	2485883a 	add	r2,r4,r18
    f704:	980d883a 	mov	r6,r19
    f708:	9880022e 	bgeu	r19,r2,f714 <__sfvwrite_r+0x3ec>
    f70c:	1027883a 	mov	r19,r2
    f710:	100d883a 	mov	r6,r2
    f714:	18c1000c 	andi	r3,r3,1024
    f718:	18001c26 	beq	r3,zero,f78c <__sfvwrite_r+0x464>
    f71c:	300b883a 	mov	r5,r6
    f720:	a809883a 	mov	r4,r21
    f724:	00078dc0 	call	78dc <_malloc_r>
    f728:	102f883a 	mov	r23,r2
    f72c:	10002926 	beq	r2,zero,f7d4 <__sfvwrite_r+0x4ac>
    f730:	81400417 	ldw	r5,16(r16)
    f734:	b00d883a 	mov	r6,r22
    f738:	1009883a 	mov	r4,r2
    f73c:	00080e80 	call	80e8 <memcpy>
    f740:	8080030b 	ldhu	r2,12(r16)
    f744:	00fedfc4 	movi	r3,-1153
    f748:	10c4703a 	and	r2,r2,r3
    f74c:	10802014 	ori	r2,r2,128
    f750:	8080030d 	sth	r2,12(r16)
    f754:	bd89883a 	add	r4,r23,r22
    f758:	9d8fc83a 	sub	r7,r19,r22
    f75c:	85c00415 	stw	r23,16(r16)
    f760:	84c00515 	stw	r19,20(r16)
    f764:	81000015 	stw	r4,0(r16)
    f768:	9027883a 	mov	r19,r18
    f76c:	81c00215 	stw	r7,8(r16)
    f770:	902f883a 	mov	r23,r18
    f774:	003f3b06 	br	f464 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f464>
    f778:	800b883a 	mov	r5,r16
    f77c:	a809883a 	mov	r4,r21
    f780:	000eac80 	call	eac8 <_fflush_r>
    f784:	103fb926 	beq	r2,zero,f66c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f66c>
    f788:	003f6506 	br	f520 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f520>
    f78c:	a809883a 	mov	r4,r21
    f790:	0010e400 	call	10e40 <_realloc_r>
    f794:	102f883a 	mov	r23,r2
    f798:	103fee1e 	bne	r2,zero,f754 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f754>
    f79c:	81400417 	ldw	r5,16(r16)
    f7a0:	a809883a 	mov	r4,r21
    f7a4:	000f0180 	call	f018 <_free_r>
    f7a8:	8080030b 	ldhu	r2,12(r16)
    f7ac:	00ffdfc4 	movi	r3,-129
    f7b0:	1884703a 	and	r2,r3,r2
    f7b4:	00c00304 	movi	r3,12
    f7b8:	a8c00015 	stw	r3,0(r21)
    f7bc:	003f5906 	br	f524 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f524>
    f7c0:	94c00044 	addi	r19,r18,1
    f7c4:	02000044 	movi	r8,1
    f7c8:	003f6006 	br	f54c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f54c>
    f7cc:	00bfffc4 	movi	r2,-1
    f7d0:	003f0306 	br	f3e0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f3e0>
    f7d4:	00800304 	movi	r2,12
    f7d8:	a8800015 	stw	r2,0(r21)
    f7dc:	8080030b 	ldhu	r2,12(r16)
    f7e0:	003f5006 	br	f524 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f524>

0000f7e4 <_fwalk>:
    f7e4:	defff704 	addi	sp,sp,-36
    f7e8:	dd000415 	stw	r20,16(sp)
    f7ec:	dfc00815 	stw	ra,32(sp)
    f7f0:	ddc00715 	stw	r23,28(sp)
    f7f4:	dd800615 	stw	r22,24(sp)
    f7f8:	dd400515 	stw	r21,20(sp)
    f7fc:	dcc00315 	stw	r19,12(sp)
    f800:	dc800215 	stw	r18,8(sp)
    f804:	dc400115 	stw	r17,4(sp)
    f808:	dc000015 	stw	r16,0(sp)
    f80c:	2500b804 	addi	r20,r4,736
    f810:	a0002326 	beq	r20,zero,f8a0 <_fwalk+0xbc>
    f814:	282b883a 	mov	r21,r5
    f818:	002f883a 	mov	r23,zero
    f81c:	05800044 	movi	r22,1
    f820:	04ffffc4 	movi	r19,-1
    f824:	a4400117 	ldw	r17,4(r20)
    f828:	a4800217 	ldw	r18,8(r20)
    f82c:	8c7fffc4 	addi	r17,r17,-1
    f830:	88000d16 	blt	r17,zero,f868 <_fwalk+0x84>
    f834:	94000304 	addi	r16,r18,12
    f838:	94800384 	addi	r18,r18,14
    f83c:	8080000b 	ldhu	r2,0(r16)
    f840:	8c7fffc4 	addi	r17,r17,-1
    f844:	813ffd04 	addi	r4,r16,-12
    f848:	b080042e 	bgeu	r22,r2,f85c <_fwalk+0x78>
    f84c:	9080000f 	ldh	r2,0(r18)
    f850:	14c00226 	beq	r2,r19,f85c <_fwalk+0x78>
    f854:	a83ee83a 	callr	r21
    f858:	b8aeb03a 	or	r23,r23,r2
    f85c:	84001a04 	addi	r16,r16,104
    f860:	94801a04 	addi	r18,r18,104
    f864:	8cfff51e 	bne	r17,r19,f83c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f83c>
    f868:	a5000017 	ldw	r20,0(r20)
    f86c:	a03fed1e 	bne	r20,zero,f824 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f824>
    f870:	b805883a 	mov	r2,r23
    f874:	dfc00817 	ldw	ra,32(sp)
    f878:	ddc00717 	ldw	r23,28(sp)
    f87c:	dd800617 	ldw	r22,24(sp)
    f880:	dd400517 	ldw	r21,20(sp)
    f884:	dd000417 	ldw	r20,16(sp)
    f888:	dcc00317 	ldw	r19,12(sp)
    f88c:	dc800217 	ldw	r18,8(sp)
    f890:	dc400117 	ldw	r17,4(sp)
    f894:	dc000017 	ldw	r16,0(sp)
    f898:	dec00904 	addi	sp,sp,36
    f89c:	f800283a 	ret
    f8a0:	002f883a 	mov	r23,zero
    f8a4:	003ff206 	br	f870 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f870>

0000f8a8 <_fwalk_reent>:
    f8a8:	defff704 	addi	sp,sp,-36
    f8ac:	dd000415 	stw	r20,16(sp)
    f8b0:	dfc00815 	stw	ra,32(sp)
    f8b4:	ddc00715 	stw	r23,28(sp)
    f8b8:	dd800615 	stw	r22,24(sp)
    f8bc:	dd400515 	stw	r21,20(sp)
    f8c0:	dcc00315 	stw	r19,12(sp)
    f8c4:	dc800215 	stw	r18,8(sp)
    f8c8:	dc400115 	stw	r17,4(sp)
    f8cc:	dc000015 	stw	r16,0(sp)
    f8d0:	2500b804 	addi	r20,r4,736
    f8d4:	a0002326 	beq	r20,zero,f964 <_fwalk_reent+0xbc>
    f8d8:	282b883a 	mov	r21,r5
    f8dc:	2027883a 	mov	r19,r4
    f8e0:	002f883a 	mov	r23,zero
    f8e4:	05800044 	movi	r22,1
    f8e8:	04bfffc4 	movi	r18,-1
    f8ec:	a4400117 	ldw	r17,4(r20)
    f8f0:	a4000217 	ldw	r16,8(r20)
    f8f4:	8c7fffc4 	addi	r17,r17,-1
    f8f8:	88000c16 	blt	r17,zero,f92c <_fwalk_reent+0x84>
    f8fc:	84000304 	addi	r16,r16,12
    f900:	8080000b 	ldhu	r2,0(r16)
    f904:	8c7fffc4 	addi	r17,r17,-1
    f908:	817ffd04 	addi	r5,r16,-12
    f90c:	b080052e 	bgeu	r22,r2,f924 <_fwalk_reent+0x7c>
    f910:	8080008f 	ldh	r2,2(r16)
    f914:	9809883a 	mov	r4,r19
    f918:	14800226 	beq	r2,r18,f924 <_fwalk_reent+0x7c>
    f91c:	a83ee83a 	callr	r21
    f920:	b8aeb03a 	or	r23,r23,r2
    f924:	84001a04 	addi	r16,r16,104
    f928:	8cbff51e 	bne	r17,r18,f900 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f900>
    f92c:	a5000017 	ldw	r20,0(r20)
    f930:	a03fee1e 	bne	r20,zero,f8ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f8ec>
    f934:	b805883a 	mov	r2,r23
    f938:	dfc00817 	ldw	ra,32(sp)
    f93c:	ddc00717 	ldw	r23,28(sp)
    f940:	dd800617 	ldw	r22,24(sp)
    f944:	dd400517 	ldw	r21,20(sp)
    f948:	dd000417 	ldw	r20,16(sp)
    f94c:	dcc00317 	ldw	r19,12(sp)
    f950:	dc800217 	ldw	r18,8(sp)
    f954:	dc400117 	ldw	r17,4(sp)
    f958:	dc000017 	ldw	r16,0(sp)
    f95c:	dec00904 	addi	sp,sp,36
    f960:	f800283a 	ret
    f964:	002f883a 	mov	r23,zero
    f968:	003ff206 	br	f934 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f934>

0000f96c <_setlocale_r>:
    f96c:	30001b26 	beq	r6,zero,f9dc <_setlocale_r+0x70>
    f970:	014000b4 	movhi	r5,2
    f974:	defffe04 	addi	sp,sp,-8
    f978:	2952f404 	addi	r5,r5,19408
    f97c:	3009883a 	mov	r4,r6
    f980:	dc000015 	stw	r16,0(sp)
    f984:	dfc00115 	stw	ra,4(sp)
    f988:	3021883a 	mov	r16,r6
    f98c:	00088b40 	call	88b4 <strcmp>
    f990:	1000061e 	bne	r2,zero,f9ac <_setlocale_r+0x40>
    f994:	008000b4 	movhi	r2,2
    f998:	1092f304 	addi	r2,r2,19404
    f99c:	dfc00117 	ldw	ra,4(sp)
    f9a0:	dc000017 	ldw	r16,0(sp)
    f9a4:	dec00204 	addi	sp,sp,8
    f9a8:	f800283a 	ret
    f9ac:	014000b4 	movhi	r5,2
    f9b0:	2952f304 	addi	r5,r5,19404
    f9b4:	8009883a 	mov	r4,r16
    f9b8:	00088b40 	call	88b4 <strcmp>
    f9bc:	103ff526 	beq	r2,zero,f994 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f994>
    f9c0:	014000b4 	movhi	r5,2
    f9c4:	2952d604 	addi	r5,r5,19288
    f9c8:	8009883a 	mov	r4,r16
    f9cc:	00088b40 	call	88b4 <strcmp>
    f9d0:	103ff026 	beq	r2,zero,f994 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f994>
    f9d4:	0005883a 	mov	r2,zero
    f9d8:	003ff006 	br	f99c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700f99c>
    f9dc:	008000b4 	movhi	r2,2
    f9e0:	1092f304 	addi	r2,r2,19404
    f9e4:	f800283a 	ret

0000f9e8 <__locale_charset>:
    f9e8:	008000b4 	movhi	r2,2
    f9ec:	10961f04 	addi	r2,r2,22652
    f9f0:	f800283a 	ret

0000f9f4 <__locale_mb_cur_max>:
    f9f4:	008000b4 	movhi	r2,2
    f9f8:	109bd104 	addi	r2,r2,28484
    f9fc:	10800017 	ldw	r2,0(r2)
    fa00:	f800283a 	ret

0000fa04 <__locale_msgcharset>:
    fa04:	008000b4 	movhi	r2,2
    fa08:	10961704 	addi	r2,r2,22620
    fa0c:	f800283a 	ret

0000fa10 <__locale_cjk_lang>:
    fa10:	0005883a 	mov	r2,zero
    fa14:	f800283a 	ret

0000fa18 <_localeconv_r>:
    fa18:	008000b4 	movhi	r2,2
    fa1c:	10962704 	addi	r2,r2,22684
    fa20:	f800283a 	ret

0000fa24 <setlocale>:
    fa24:	008000b4 	movhi	r2,2
    fa28:	109bd004 	addi	r2,r2,28480
    fa2c:	280d883a 	mov	r6,r5
    fa30:	200b883a 	mov	r5,r4
    fa34:	11000017 	ldw	r4,0(r2)
    fa38:	000f96c1 	jmpi	f96c <_setlocale_r>

0000fa3c <localeconv>:
    fa3c:	008000b4 	movhi	r2,2
    fa40:	10962704 	addi	r2,r2,22684
    fa44:	f800283a 	ret

0000fa48 <__smakebuf_r>:
    fa48:	2880030b 	ldhu	r2,12(r5)
    fa4c:	10c0008c 	andi	r3,r2,2
    fa50:	1800411e 	bne	r3,zero,fb58 <__smakebuf_r+0x110>
    fa54:	deffec04 	addi	sp,sp,-80
    fa58:	dc000f15 	stw	r16,60(sp)
    fa5c:	2821883a 	mov	r16,r5
    fa60:	2940038f 	ldh	r5,14(r5)
    fa64:	dc401015 	stw	r17,64(sp)
    fa68:	dfc01315 	stw	ra,76(sp)
    fa6c:	dcc01215 	stw	r19,72(sp)
    fa70:	dc801115 	stw	r18,68(sp)
    fa74:	2023883a 	mov	r17,r4
    fa78:	28001c16 	blt	r5,zero,faec <__smakebuf_r+0xa4>
    fa7c:	d80d883a 	mov	r6,sp
    fa80:	001442c0 	call	1442c <_fstat_r>
    fa84:	10001816 	blt	r2,zero,fae8 <__smakebuf_r+0xa0>
    fa88:	d8800117 	ldw	r2,4(sp)
    fa8c:	00e00014 	movui	r3,32768
    fa90:	10bc000c 	andi	r2,r2,61440
    fa94:	14c80020 	cmpeqi	r19,r2,8192
    fa98:	10c03726 	beq	r2,r3,fb78 <__smakebuf_r+0x130>
    fa9c:	80c0030b 	ldhu	r3,12(r16)
    faa0:	18c20014 	ori	r3,r3,2048
    faa4:	80c0030d 	sth	r3,12(r16)
    faa8:	00c80004 	movi	r3,8192
    faac:	10c0521e 	bne	r2,r3,fbf8 <__smakebuf_r+0x1b0>
    fab0:	8140038f 	ldh	r5,14(r16)
    fab4:	8809883a 	mov	r4,r17
    fab8:	00144880 	call	14488 <_isatty_r>
    fabc:	10004c26 	beq	r2,zero,fbf0 <__smakebuf_r+0x1a8>
    fac0:	8080030b 	ldhu	r2,12(r16)
    fac4:	80c010c4 	addi	r3,r16,67
    fac8:	80c00015 	stw	r3,0(r16)
    facc:	10800054 	ori	r2,r2,1
    fad0:	8080030d 	sth	r2,12(r16)
    fad4:	00800044 	movi	r2,1
    fad8:	80c00415 	stw	r3,16(r16)
    fadc:	80800515 	stw	r2,20(r16)
    fae0:	04810004 	movi	r18,1024
    fae4:	00000706 	br	fb04 <__smakebuf_r+0xbc>
    fae8:	8080030b 	ldhu	r2,12(r16)
    faec:	10c0200c 	andi	r3,r2,128
    faf0:	18001f1e 	bne	r3,zero,fb70 <__smakebuf_r+0x128>
    faf4:	04810004 	movi	r18,1024
    faf8:	10820014 	ori	r2,r2,2048
    fafc:	8080030d 	sth	r2,12(r16)
    fb00:	0027883a 	mov	r19,zero
    fb04:	900b883a 	mov	r5,r18
    fb08:	8809883a 	mov	r4,r17
    fb0c:	00078dc0 	call	78dc <_malloc_r>
    fb10:	10002c26 	beq	r2,zero,fbc4 <__smakebuf_r+0x17c>
    fb14:	80c0030b 	ldhu	r3,12(r16)
    fb18:	01000074 	movhi	r4,1
    fb1c:	213ad704 	addi	r4,r4,-5284
    fb20:	89000f15 	stw	r4,60(r17)
    fb24:	18c02014 	ori	r3,r3,128
    fb28:	80c0030d 	sth	r3,12(r16)
    fb2c:	80800015 	stw	r2,0(r16)
    fb30:	80800415 	stw	r2,16(r16)
    fb34:	84800515 	stw	r18,20(r16)
    fb38:	98001a1e 	bne	r19,zero,fba4 <__smakebuf_r+0x15c>
    fb3c:	dfc01317 	ldw	ra,76(sp)
    fb40:	dcc01217 	ldw	r19,72(sp)
    fb44:	dc801117 	ldw	r18,68(sp)
    fb48:	dc401017 	ldw	r17,64(sp)
    fb4c:	dc000f17 	ldw	r16,60(sp)
    fb50:	dec01404 	addi	sp,sp,80
    fb54:	f800283a 	ret
    fb58:	288010c4 	addi	r2,r5,67
    fb5c:	28800015 	stw	r2,0(r5)
    fb60:	28800415 	stw	r2,16(r5)
    fb64:	00800044 	movi	r2,1
    fb68:	28800515 	stw	r2,20(r5)
    fb6c:	f800283a 	ret
    fb70:	04801004 	movi	r18,64
    fb74:	003fe006 	br	faf8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700faf8>
    fb78:	81000a17 	ldw	r4,40(r16)
    fb7c:	00c00074 	movhi	r3,1
    fb80:	18c53c04 	addi	r3,r3,5360
    fb84:	20ffc51e 	bne	r4,r3,fa9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fa9c>
    fb88:	8080030b 	ldhu	r2,12(r16)
    fb8c:	04810004 	movi	r18,1024
    fb90:	84801315 	stw	r18,76(r16)
    fb94:	1484b03a 	or	r2,r2,r18
    fb98:	8080030d 	sth	r2,12(r16)
    fb9c:	0027883a 	mov	r19,zero
    fba0:	003fd806 	br	fb04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fb04>
    fba4:	8140038f 	ldh	r5,14(r16)
    fba8:	8809883a 	mov	r4,r17
    fbac:	00144880 	call	14488 <_isatty_r>
    fbb0:	103fe226 	beq	r2,zero,fb3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fb3c>
    fbb4:	8080030b 	ldhu	r2,12(r16)
    fbb8:	10800054 	ori	r2,r2,1
    fbbc:	8080030d 	sth	r2,12(r16)
    fbc0:	003fde06 	br	fb3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fb3c>
    fbc4:	8080030b 	ldhu	r2,12(r16)
    fbc8:	10c0800c 	andi	r3,r2,512
    fbcc:	183fdb1e 	bne	r3,zero,fb3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fb3c>
    fbd0:	10800094 	ori	r2,r2,2
    fbd4:	80c010c4 	addi	r3,r16,67
    fbd8:	8080030d 	sth	r2,12(r16)
    fbdc:	00800044 	movi	r2,1
    fbe0:	80c00015 	stw	r3,0(r16)
    fbe4:	80c00415 	stw	r3,16(r16)
    fbe8:	80800515 	stw	r2,20(r16)
    fbec:	003fd306 	br	fb3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fb3c>
    fbf0:	04810004 	movi	r18,1024
    fbf4:	003fc306 	br	fb04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fb04>
    fbf8:	0027883a 	mov	r19,zero
    fbfc:	04810004 	movi	r18,1024
    fc00:	003fc006 	br	fb04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fb04>

0000fc04 <memchr>:
    fc04:	208000cc 	andi	r2,r4,3
    fc08:	280f883a 	mov	r7,r5
    fc0c:	10003426 	beq	r2,zero,fce0 <memchr+0xdc>
    fc10:	30bfffc4 	addi	r2,r6,-1
    fc14:	30001a26 	beq	r6,zero,fc80 <memchr+0x7c>
    fc18:	20c00003 	ldbu	r3,0(r4)
    fc1c:	29803fcc 	andi	r6,r5,255
    fc20:	30c0051e 	bne	r6,r3,fc38 <memchr+0x34>
    fc24:	00001806 	br	fc88 <memchr+0x84>
    fc28:	10001526 	beq	r2,zero,fc80 <memchr+0x7c>
    fc2c:	20c00003 	ldbu	r3,0(r4)
    fc30:	10bfffc4 	addi	r2,r2,-1
    fc34:	30c01426 	beq	r6,r3,fc88 <memchr+0x84>
    fc38:	21000044 	addi	r4,r4,1
    fc3c:	20c000cc 	andi	r3,r4,3
    fc40:	183ff91e 	bne	r3,zero,fc28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fc28>
    fc44:	020000c4 	movi	r8,3
    fc48:	40801136 	bltu	r8,r2,fc90 <memchr+0x8c>
    fc4c:	10000c26 	beq	r2,zero,fc80 <memchr+0x7c>
    fc50:	20c00003 	ldbu	r3,0(r4)
    fc54:	29403fcc 	andi	r5,r5,255
    fc58:	28c00b26 	beq	r5,r3,fc88 <memchr+0x84>
    fc5c:	20c00044 	addi	r3,r4,1
    fc60:	39803fcc 	andi	r6,r7,255
    fc64:	2089883a 	add	r4,r4,r2
    fc68:	00000306 	br	fc78 <memchr+0x74>
    fc6c:	18c00044 	addi	r3,r3,1
    fc70:	197fffc3 	ldbu	r5,-1(r3)
    fc74:	31400526 	beq	r6,r5,fc8c <memchr+0x88>
    fc78:	1805883a 	mov	r2,r3
    fc7c:	20fffb1e 	bne	r4,r3,fc6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fc6c>
    fc80:	0005883a 	mov	r2,zero
    fc84:	f800283a 	ret
    fc88:	2005883a 	mov	r2,r4
    fc8c:	f800283a 	ret
    fc90:	28c03fcc 	andi	r3,r5,255
    fc94:	1812923a 	slli	r9,r3,8
    fc98:	02ffbff4 	movhi	r11,65279
    fc9c:	02a02074 	movhi	r10,32897
    fca0:	48d2b03a 	or	r9,r9,r3
    fca4:	4806943a 	slli	r3,r9,16
    fca8:	5affbfc4 	addi	r11,r11,-257
    fcac:	52a02004 	addi	r10,r10,-32640
    fcb0:	48d2b03a 	or	r9,r9,r3
    fcb4:	20c00017 	ldw	r3,0(r4)
    fcb8:	48c6f03a 	xor	r3,r9,r3
    fcbc:	1acd883a 	add	r6,r3,r11
    fcc0:	00c6303a 	nor	r3,zero,r3
    fcc4:	30c6703a 	and	r3,r6,r3
    fcc8:	1a86703a 	and	r3,r3,r10
    fccc:	183fe01e 	bne	r3,zero,fc50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fc50>
    fcd0:	10bfff04 	addi	r2,r2,-4
    fcd4:	21000104 	addi	r4,r4,4
    fcd8:	40bff636 	bltu	r8,r2,fcb4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fcb4>
    fcdc:	003fdb06 	br	fc4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fc4c>
    fce0:	3005883a 	mov	r2,r6
    fce4:	003fd706 	br	fc44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fc44>

0000fce8 <memmove>:
    fce8:	2005883a 	mov	r2,r4
    fcec:	29000b2e 	bgeu	r5,r4,fd1c <memmove+0x34>
    fcf0:	298f883a 	add	r7,r5,r6
    fcf4:	21c0092e 	bgeu	r4,r7,fd1c <memmove+0x34>
    fcf8:	2187883a 	add	r3,r4,r6
    fcfc:	198bc83a 	sub	r5,r3,r6
    fd00:	30004826 	beq	r6,zero,fe24 <memmove+0x13c>
    fd04:	39ffffc4 	addi	r7,r7,-1
    fd08:	39000003 	ldbu	r4,0(r7)
    fd0c:	18ffffc4 	addi	r3,r3,-1
    fd10:	19000005 	stb	r4,0(r3)
    fd14:	28fffb1e 	bne	r5,r3,fd04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fd04>
    fd18:	f800283a 	ret
    fd1c:	00c003c4 	movi	r3,15
    fd20:	1980412e 	bgeu	r3,r6,fe28 <memmove+0x140>
    fd24:	2886b03a 	or	r3,r5,r2
    fd28:	18c000cc 	andi	r3,r3,3
    fd2c:	1800401e 	bne	r3,zero,fe30 <memmove+0x148>
    fd30:	33fffc04 	addi	r15,r6,-16
    fd34:	781ed13a 	srli	r15,r15,4
    fd38:	28c00104 	addi	r3,r5,4
    fd3c:	13400104 	addi	r13,r2,4
    fd40:	781c913a 	slli	r14,r15,4
    fd44:	2b000204 	addi	r12,r5,8
    fd48:	12c00204 	addi	r11,r2,8
    fd4c:	73800504 	addi	r14,r14,20
    fd50:	2a800304 	addi	r10,r5,12
    fd54:	12400304 	addi	r9,r2,12
    fd58:	2b9d883a 	add	r14,r5,r14
    fd5c:	2811883a 	mov	r8,r5
    fd60:	100f883a 	mov	r7,r2
    fd64:	41000017 	ldw	r4,0(r8)
    fd68:	39c00404 	addi	r7,r7,16
    fd6c:	18c00404 	addi	r3,r3,16
    fd70:	393ffc15 	stw	r4,-16(r7)
    fd74:	193ffc17 	ldw	r4,-16(r3)
    fd78:	6b400404 	addi	r13,r13,16
    fd7c:	5ac00404 	addi	r11,r11,16
    fd80:	693ffc15 	stw	r4,-16(r13)
    fd84:	61000017 	ldw	r4,0(r12)
    fd88:	4a400404 	addi	r9,r9,16
    fd8c:	42000404 	addi	r8,r8,16
    fd90:	593ffc15 	stw	r4,-16(r11)
    fd94:	51000017 	ldw	r4,0(r10)
    fd98:	63000404 	addi	r12,r12,16
    fd9c:	52800404 	addi	r10,r10,16
    fda0:	493ffc15 	stw	r4,-16(r9)
    fda4:	1bbfef1e 	bne	r3,r14,fd64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fd64>
    fda8:	79000044 	addi	r4,r15,1
    fdac:	2008913a 	slli	r4,r4,4
    fdb0:	328003cc 	andi	r10,r6,15
    fdb4:	02c000c4 	movi	r11,3
    fdb8:	1107883a 	add	r3,r2,r4
    fdbc:	290b883a 	add	r5,r5,r4
    fdc0:	5a801e2e 	bgeu	r11,r10,fe3c <memmove+0x154>
    fdc4:	1813883a 	mov	r9,r3
    fdc8:	2811883a 	mov	r8,r5
    fdcc:	500f883a 	mov	r7,r10
    fdd0:	41000017 	ldw	r4,0(r8)
    fdd4:	4a400104 	addi	r9,r9,4
    fdd8:	39ffff04 	addi	r7,r7,-4
    fddc:	493fff15 	stw	r4,-4(r9)
    fde0:	42000104 	addi	r8,r8,4
    fde4:	59fffa36 	bltu	r11,r7,fdd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fdd0>
    fde8:	513fff04 	addi	r4,r10,-4
    fdec:	2008d0ba 	srli	r4,r4,2
    fdf0:	318000cc 	andi	r6,r6,3
    fdf4:	21000044 	addi	r4,r4,1
    fdf8:	2109883a 	add	r4,r4,r4
    fdfc:	2109883a 	add	r4,r4,r4
    fe00:	1907883a 	add	r3,r3,r4
    fe04:	290b883a 	add	r5,r5,r4
    fe08:	30000b26 	beq	r6,zero,fe38 <memmove+0x150>
    fe0c:	198d883a 	add	r6,r3,r6
    fe10:	29c00003 	ldbu	r7,0(r5)
    fe14:	18c00044 	addi	r3,r3,1
    fe18:	29400044 	addi	r5,r5,1
    fe1c:	19ffffc5 	stb	r7,-1(r3)
    fe20:	19bffb1e 	bne	r3,r6,fe10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fe10>
    fe24:	f800283a 	ret
    fe28:	1007883a 	mov	r3,r2
    fe2c:	003ff606 	br	fe08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fe08>
    fe30:	1007883a 	mov	r3,r2
    fe34:	003ff506 	br	fe0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fe0c>
    fe38:	f800283a 	ret
    fe3c:	500d883a 	mov	r6,r10
    fe40:	003ff106 	br	fe08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fe08>

0000fe44 <_Balloc>:
    fe44:	20801317 	ldw	r2,76(r4)
    fe48:	defffc04 	addi	sp,sp,-16
    fe4c:	dc400115 	stw	r17,4(sp)
    fe50:	dc000015 	stw	r16,0(sp)
    fe54:	dfc00315 	stw	ra,12(sp)
    fe58:	dc800215 	stw	r18,8(sp)
    fe5c:	2023883a 	mov	r17,r4
    fe60:	2821883a 	mov	r16,r5
    fe64:	10000f26 	beq	r2,zero,fea4 <_Balloc+0x60>
    fe68:	8407883a 	add	r3,r16,r16
    fe6c:	18c7883a 	add	r3,r3,r3
    fe70:	10c7883a 	add	r3,r2,r3
    fe74:	18800017 	ldw	r2,0(r3)
    fe78:	10001126 	beq	r2,zero,fec0 <_Balloc+0x7c>
    fe7c:	11000017 	ldw	r4,0(r2)
    fe80:	19000015 	stw	r4,0(r3)
    fe84:	10000415 	stw	zero,16(r2)
    fe88:	10000315 	stw	zero,12(r2)
    fe8c:	dfc00317 	ldw	ra,12(sp)
    fe90:	dc800217 	ldw	r18,8(sp)
    fe94:	dc400117 	ldw	r17,4(sp)
    fe98:	dc000017 	ldw	r16,0(sp)
    fe9c:	dec00404 	addi	sp,sp,16
    fea0:	f800283a 	ret
    fea4:	01800844 	movi	r6,33
    fea8:	01400104 	movi	r5,4
    feac:	001405c0 	call	1405c <_calloc_r>
    feb0:	88801315 	stw	r2,76(r17)
    feb4:	103fec1e 	bne	r2,zero,fe68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fe68>
    feb8:	0005883a 	mov	r2,zero
    febc:	003ff306 	br	fe8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fe8c>
    fec0:	01400044 	movi	r5,1
    fec4:	2c24983a 	sll	r18,r5,r16
    fec8:	8809883a 	mov	r4,r17
    fecc:	91800144 	addi	r6,r18,5
    fed0:	318d883a 	add	r6,r6,r6
    fed4:	318d883a 	add	r6,r6,r6
    fed8:	001405c0 	call	1405c <_calloc_r>
    fedc:	103ff626 	beq	r2,zero,feb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700feb8>
    fee0:	14000115 	stw	r16,4(r2)
    fee4:	14800215 	stw	r18,8(r2)
    fee8:	003fe606 	br	fe84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700fe84>

0000feec <_Bfree>:
    feec:	28000826 	beq	r5,zero,ff10 <_Bfree+0x24>
    fef0:	28c00117 	ldw	r3,4(r5)
    fef4:	20801317 	ldw	r2,76(r4)
    fef8:	18c7883a 	add	r3,r3,r3
    fefc:	18c7883a 	add	r3,r3,r3
    ff00:	10c5883a 	add	r2,r2,r3
    ff04:	10c00017 	ldw	r3,0(r2)
    ff08:	28c00015 	stw	r3,0(r5)
    ff0c:	11400015 	stw	r5,0(r2)
    ff10:	f800283a 	ret

0000ff14 <__multadd>:
    ff14:	defffa04 	addi	sp,sp,-24
    ff18:	dc800315 	stw	r18,12(sp)
    ff1c:	dc400215 	stw	r17,8(sp)
    ff20:	dc000115 	stw	r16,4(sp)
    ff24:	2823883a 	mov	r17,r5
    ff28:	2c000417 	ldw	r16,16(r5)
    ff2c:	dfc00515 	stw	ra,20(sp)
    ff30:	dcc00415 	stw	r19,16(sp)
    ff34:	2025883a 	mov	r18,r4
    ff38:	29400504 	addi	r5,r5,20
    ff3c:	0011883a 	mov	r8,zero
    ff40:	28c00017 	ldw	r3,0(r5)
    ff44:	29400104 	addi	r5,r5,4
    ff48:	42000044 	addi	r8,r8,1
    ff4c:	18bfffcc 	andi	r2,r3,65535
    ff50:	1185383a 	mul	r2,r2,r6
    ff54:	1806d43a 	srli	r3,r3,16
    ff58:	11cf883a 	add	r7,r2,r7
    ff5c:	3808d43a 	srli	r4,r7,16
    ff60:	1987383a 	mul	r3,r3,r6
    ff64:	38bfffcc 	andi	r2,r7,65535
    ff68:	1907883a 	add	r3,r3,r4
    ff6c:	1808943a 	slli	r4,r3,16
    ff70:	180ed43a 	srli	r7,r3,16
    ff74:	2085883a 	add	r2,r4,r2
    ff78:	28bfff15 	stw	r2,-4(r5)
    ff7c:	443ff016 	blt	r8,r16,ff40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ff40>
    ff80:	38000926 	beq	r7,zero,ffa8 <__multadd+0x94>
    ff84:	88800217 	ldw	r2,8(r17)
    ff88:	80800f0e 	bge	r16,r2,ffc8 <__multadd+0xb4>
    ff8c:	80800144 	addi	r2,r16,5
    ff90:	1085883a 	add	r2,r2,r2
    ff94:	1085883a 	add	r2,r2,r2
    ff98:	8885883a 	add	r2,r17,r2
    ff9c:	11c00015 	stw	r7,0(r2)
    ffa0:	84000044 	addi	r16,r16,1
    ffa4:	8c000415 	stw	r16,16(r17)
    ffa8:	8805883a 	mov	r2,r17
    ffac:	dfc00517 	ldw	ra,20(sp)
    ffb0:	dcc00417 	ldw	r19,16(sp)
    ffb4:	dc800317 	ldw	r18,12(sp)
    ffb8:	dc400217 	ldw	r17,8(sp)
    ffbc:	dc000117 	ldw	r16,4(sp)
    ffc0:	dec00604 	addi	sp,sp,24
    ffc4:	f800283a 	ret
    ffc8:	89400117 	ldw	r5,4(r17)
    ffcc:	9009883a 	mov	r4,r18
    ffd0:	d9c00015 	stw	r7,0(sp)
    ffd4:	29400044 	addi	r5,r5,1
    ffd8:	000fe440 	call	fe44 <_Balloc>
    ffdc:	89800417 	ldw	r6,16(r17)
    ffe0:	89400304 	addi	r5,r17,12
    ffe4:	11000304 	addi	r4,r2,12
    ffe8:	31800084 	addi	r6,r6,2
    ffec:	318d883a 	add	r6,r6,r6
    fff0:	318d883a 	add	r6,r6,r6
    fff4:	1027883a 	mov	r19,r2
    fff8:	00080e80 	call	80e8 <memcpy>
    fffc:	d9c00017 	ldw	r7,0(sp)
   10000:	88000a26 	beq	r17,zero,1002c <__multadd+0x118>
   10004:	88c00117 	ldw	r3,4(r17)
   10008:	90801317 	ldw	r2,76(r18)
   1000c:	18c7883a 	add	r3,r3,r3
   10010:	18c7883a 	add	r3,r3,r3
   10014:	10c5883a 	add	r2,r2,r3
   10018:	10c00017 	ldw	r3,0(r2)
   1001c:	88c00015 	stw	r3,0(r17)
   10020:	14400015 	stw	r17,0(r2)
   10024:	9823883a 	mov	r17,r19
   10028:	003fd806 	br	ff8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ff8c>
   1002c:	9823883a 	mov	r17,r19
   10030:	003fd606 	br	ff8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf700ff8c>

00010034 <__s2b>:
   10034:	defff904 	addi	sp,sp,-28
   10038:	dc400115 	stw	r17,4(sp)
   1003c:	dc000015 	stw	r16,0(sp)
   10040:	2023883a 	mov	r17,r4
   10044:	2821883a 	mov	r16,r5
   10048:	39000204 	addi	r4,r7,8
   1004c:	01400244 	movi	r5,9
   10050:	dcc00315 	stw	r19,12(sp)
   10054:	dc800215 	stw	r18,8(sp)
   10058:	dfc00615 	stw	ra,24(sp)
   1005c:	dd400515 	stw	r21,20(sp)
   10060:	dd000415 	stw	r20,16(sp)
   10064:	3825883a 	mov	r18,r7
   10068:	3027883a 	mov	r19,r6
   1006c:	001538c0 	call	1538c <__divsi3>
   10070:	00c00044 	movi	r3,1
   10074:	000b883a 	mov	r5,zero
   10078:	1880030e 	bge	r3,r2,10088 <__s2b+0x54>
   1007c:	18c7883a 	add	r3,r3,r3
   10080:	29400044 	addi	r5,r5,1
   10084:	18bffd16 	blt	r3,r2,1007c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701007c>
   10088:	8809883a 	mov	r4,r17
   1008c:	000fe440 	call	fe44 <_Balloc>
   10090:	d8c00717 	ldw	r3,28(sp)
   10094:	10c00515 	stw	r3,20(r2)
   10098:	00c00044 	movi	r3,1
   1009c:	10c00415 	stw	r3,16(r2)
   100a0:	00c00244 	movi	r3,9
   100a4:	1cc0210e 	bge	r3,r19,1012c <__s2b+0xf8>
   100a8:	80eb883a 	add	r21,r16,r3
   100ac:	a829883a 	mov	r20,r21
   100b0:	84e1883a 	add	r16,r16,r19
   100b4:	a1c00007 	ldb	r7,0(r20)
   100b8:	01800284 	movi	r6,10
   100bc:	a5000044 	addi	r20,r20,1
   100c0:	100b883a 	mov	r5,r2
   100c4:	39fff404 	addi	r7,r7,-48
   100c8:	8809883a 	mov	r4,r17
   100cc:	000ff140 	call	ff14 <__multadd>
   100d0:	a43ff81e 	bne	r20,r16,100b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70100b4>
   100d4:	ace1883a 	add	r16,r21,r19
   100d8:	843ffe04 	addi	r16,r16,-8
   100dc:	9c800a0e 	bge	r19,r18,10108 <__s2b+0xd4>
   100e0:	94e5c83a 	sub	r18,r18,r19
   100e4:	84a5883a 	add	r18,r16,r18
   100e8:	81c00007 	ldb	r7,0(r16)
   100ec:	01800284 	movi	r6,10
   100f0:	84000044 	addi	r16,r16,1
   100f4:	100b883a 	mov	r5,r2
   100f8:	39fff404 	addi	r7,r7,-48
   100fc:	8809883a 	mov	r4,r17
   10100:	000ff140 	call	ff14 <__multadd>
   10104:	84bff81e 	bne	r16,r18,100e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70100e8>
   10108:	dfc00617 	ldw	ra,24(sp)
   1010c:	dd400517 	ldw	r21,20(sp)
   10110:	dd000417 	ldw	r20,16(sp)
   10114:	dcc00317 	ldw	r19,12(sp)
   10118:	dc800217 	ldw	r18,8(sp)
   1011c:	dc400117 	ldw	r17,4(sp)
   10120:	dc000017 	ldw	r16,0(sp)
   10124:	dec00704 	addi	sp,sp,28
   10128:	f800283a 	ret
   1012c:	84000284 	addi	r16,r16,10
   10130:	1827883a 	mov	r19,r3
   10134:	003fe906 	br	100dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70100dc>

00010138 <__hi0bits>:
   10138:	20bfffec 	andhi	r2,r4,65535
   1013c:	1000141e 	bne	r2,zero,10190 <__hi0bits+0x58>
   10140:	2008943a 	slli	r4,r4,16
   10144:	00800404 	movi	r2,16
   10148:	20ffc02c 	andhi	r3,r4,65280
   1014c:	1800021e 	bne	r3,zero,10158 <__hi0bits+0x20>
   10150:	2008923a 	slli	r4,r4,8
   10154:	10800204 	addi	r2,r2,8
   10158:	20fc002c 	andhi	r3,r4,61440
   1015c:	1800021e 	bne	r3,zero,10168 <__hi0bits+0x30>
   10160:	2008913a 	slli	r4,r4,4
   10164:	10800104 	addi	r2,r2,4
   10168:	20f0002c 	andhi	r3,r4,49152
   1016c:	1800031e 	bne	r3,zero,1017c <__hi0bits+0x44>
   10170:	2109883a 	add	r4,r4,r4
   10174:	10800084 	addi	r2,r2,2
   10178:	2109883a 	add	r4,r4,r4
   1017c:	20000316 	blt	r4,zero,1018c <__hi0bits+0x54>
   10180:	2110002c 	andhi	r4,r4,16384
   10184:	2000041e 	bne	r4,zero,10198 <__hi0bits+0x60>
   10188:	00800804 	movi	r2,32
   1018c:	f800283a 	ret
   10190:	0005883a 	mov	r2,zero
   10194:	003fec06 	br	10148 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010148>
   10198:	10800044 	addi	r2,r2,1
   1019c:	f800283a 	ret

000101a0 <__lo0bits>:
   101a0:	20c00017 	ldw	r3,0(r4)
   101a4:	188001cc 	andi	r2,r3,7
   101a8:	10000826 	beq	r2,zero,101cc <__lo0bits+0x2c>
   101ac:	1880004c 	andi	r2,r3,1
   101b0:	1000211e 	bne	r2,zero,10238 <__lo0bits+0x98>
   101b4:	1880008c 	andi	r2,r3,2
   101b8:	1000211e 	bne	r2,zero,10240 <__lo0bits+0xa0>
   101bc:	1806d0ba 	srli	r3,r3,2
   101c0:	00800084 	movi	r2,2
   101c4:	20c00015 	stw	r3,0(r4)
   101c8:	f800283a 	ret
   101cc:	18bfffcc 	andi	r2,r3,65535
   101d0:	10001326 	beq	r2,zero,10220 <__lo0bits+0x80>
   101d4:	0005883a 	mov	r2,zero
   101d8:	19403fcc 	andi	r5,r3,255
   101dc:	2800021e 	bne	r5,zero,101e8 <__lo0bits+0x48>
   101e0:	1806d23a 	srli	r3,r3,8
   101e4:	10800204 	addi	r2,r2,8
   101e8:	194003cc 	andi	r5,r3,15
   101ec:	2800021e 	bne	r5,zero,101f8 <__lo0bits+0x58>
   101f0:	1806d13a 	srli	r3,r3,4
   101f4:	10800104 	addi	r2,r2,4
   101f8:	194000cc 	andi	r5,r3,3
   101fc:	2800021e 	bne	r5,zero,10208 <__lo0bits+0x68>
   10200:	1806d0ba 	srli	r3,r3,2
   10204:	10800084 	addi	r2,r2,2
   10208:	1940004c 	andi	r5,r3,1
   1020c:	2800081e 	bne	r5,zero,10230 <__lo0bits+0x90>
   10210:	1806d07a 	srli	r3,r3,1
   10214:	1800051e 	bne	r3,zero,1022c <__lo0bits+0x8c>
   10218:	00800804 	movi	r2,32
   1021c:	f800283a 	ret
   10220:	1806d43a 	srli	r3,r3,16
   10224:	00800404 	movi	r2,16
   10228:	003feb06 	br	101d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70101d8>
   1022c:	10800044 	addi	r2,r2,1
   10230:	20c00015 	stw	r3,0(r4)
   10234:	f800283a 	ret
   10238:	0005883a 	mov	r2,zero
   1023c:	f800283a 	ret
   10240:	1806d07a 	srli	r3,r3,1
   10244:	00800044 	movi	r2,1
   10248:	20c00015 	stw	r3,0(r4)
   1024c:	f800283a 	ret

00010250 <__i2b>:
   10250:	defffd04 	addi	sp,sp,-12
   10254:	dc000015 	stw	r16,0(sp)
   10258:	04000044 	movi	r16,1
   1025c:	dc400115 	stw	r17,4(sp)
   10260:	2823883a 	mov	r17,r5
   10264:	800b883a 	mov	r5,r16
   10268:	dfc00215 	stw	ra,8(sp)
   1026c:	000fe440 	call	fe44 <_Balloc>
   10270:	14400515 	stw	r17,20(r2)
   10274:	14000415 	stw	r16,16(r2)
   10278:	dfc00217 	ldw	ra,8(sp)
   1027c:	dc400117 	ldw	r17,4(sp)
   10280:	dc000017 	ldw	r16,0(sp)
   10284:	dec00304 	addi	sp,sp,12
   10288:	f800283a 	ret

0001028c <__multiply>:
   1028c:	defffa04 	addi	sp,sp,-24
   10290:	dcc00315 	stw	r19,12(sp)
   10294:	dc800215 	stw	r18,8(sp)
   10298:	34c00417 	ldw	r19,16(r6)
   1029c:	2c800417 	ldw	r18,16(r5)
   102a0:	dd000415 	stw	r20,16(sp)
   102a4:	dc400115 	stw	r17,4(sp)
   102a8:	dfc00515 	stw	ra,20(sp)
   102ac:	dc000015 	stw	r16,0(sp)
   102b0:	2829883a 	mov	r20,r5
   102b4:	3023883a 	mov	r17,r6
   102b8:	94c0050e 	bge	r18,r19,102d0 <__multiply+0x44>
   102bc:	9007883a 	mov	r3,r18
   102c0:	3029883a 	mov	r20,r6
   102c4:	9825883a 	mov	r18,r19
   102c8:	2823883a 	mov	r17,r5
   102cc:	1827883a 	mov	r19,r3
   102d0:	a0800217 	ldw	r2,8(r20)
   102d4:	94e1883a 	add	r16,r18,r19
   102d8:	a1400117 	ldw	r5,4(r20)
   102dc:	1400010e 	bge	r2,r16,102e4 <__multiply+0x58>
   102e0:	29400044 	addi	r5,r5,1
   102e4:	000fe440 	call	fe44 <_Balloc>
   102e8:	8415883a 	add	r10,r16,r16
   102ec:	12c00504 	addi	r11,r2,20
   102f0:	5295883a 	add	r10,r10,r10
   102f4:	5a95883a 	add	r10,r11,r10
   102f8:	5807883a 	mov	r3,r11
   102fc:	5a80032e 	bgeu	r11,r10,1030c <__multiply+0x80>
   10300:	18000015 	stw	zero,0(r3)
   10304:	18c00104 	addi	r3,r3,4
   10308:	1abffd36 	bltu	r3,r10,10300 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010300>
   1030c:	9ce7883a 	add	r19,r19,r19
   10310:	94a5883a 	add	r18,r18,r18
   10314:	89800504 	addi	r6,r17,20
   10318:	9ce7883a 	add	r19,r19,r19
   1031c:	a3400504 	addi	r13,r20,20
   10320:	94a5883a 	add	r18,r18,r18
   10324:	34d9883a 	add	r12,r6,r19
   10328:	6c93883a 	add	r9,r13,r18
   1032c:	3300422e 	bgeu	r6,r12,10438 <__multiply+0x1ac>
   10330:	37c00017 	ldw	ra,0(r6)
   10334:	fbffffcc 	andi	r15,ra,65535
   10338:	78001b26 	beq	r15,zero,103a8 <__multiply+0x11c>
   1033c:	5811883a 	mov	r8,r11
   10340:	681d883a 	mov	r14,r13
   10344:	000f883a 	mov	r7,zero
   10348:	71000017 	ldw	r4,0(r14)
   1034c:	40c00017 	ldw	r3,0(r8)
   10350:	73800104 	addi	r14,r14,4
   10354:	217fffcc 	andi	r5,r4,65535
   10358:	2bcb383a 	mul	r5,r5,r15
   1035c:	2008d43a 	srli	r4,r4,16
   10360:	1c7fffcc 	andi	r17,r3,65535
   10364:	2c4b883a 	add	r5,r5,r17
   10368:	29cb883a 	add	r5,r5,r7
   1036c:	23c9383a 	mul	r4,r4,r15
   10370:	1806d43a 	srli	r3,r3,16
   10374:	280ed43a 	srli	r7,r5,16
   10378:	297fffcc 	andi	r5,r5,65535
   1037c:	20c7883a 	add	r3,r4,r3
   10380:	19c7883a 	add	r3,r3,r7
   10384:	1808943a 	slli	r4,r3,16
   10388:	4023883a 	mov	r17,r8
   1038c:	180ed43a 	srli	r7,r3,16
   10390:	214ab03a 	or	r5,r4,r5
   10394:	41400015 	stw	r5,0(r8)
   10398:	42000104 	addi	r8,r8,4
   1039c:	727fea36 	bltu	r14,r9,10348 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010348>
   103a0:	89c00115 	stw	r7,4(r17)
   103a4:	37c00017 	ldw	ra,0(r6)
   103a8:	f83ed43a 	srli	ra,ra,16
   103ac:	f8001f26 	beq	ra,zero,1042c <__multiply+0x1a0>
   103b0:	58c00017 	ldw	r3,0(r11)
   103b4:	681d883a 	mov	r14,r13
   103b8:	581f883a 	mov	r15,r11
   103bc:	1811883a 	mov	r8,r3
   103c0:	5825883a 	mov	r18,r11
   103c4:	000f883a 	mov	r7,zero
   103c8:	00000106 	br	103d0 <__multiply+0x144>
   103cc:	8825883a 	mov	r18,r17
   103d0:	7140000b 	ldhu	r5,0(r14)
   103d4:	4010d43a 	srli	r8,r8,16
   103d8:	193fffcc 	andi	r4,r3,65535
   103dc:	2fcb383a 	mul	r5,r5,ra
   103e0:	7bc00104 	addi	r15,r15,4
   103e4:	73800104 	addi	r14,r14,4
   103e8:	2a0b883a 	add	r5,r5,r8
   103ec:	29cb883a 	add	r5,r5,r7
   103f0:	2806943a 	slli	r3,r5,16
   103f4:	94400104 	addi	r17,r18,4
   103f8:	280ad43a 	srli	r5,r5,16
   103fc:	1908b03a 	or	r4,r3,r4
   10400:	793fff15 	stw	r4,-4(r15)
   10404:	70ffff17 	ldw	r3,-4(r14)
   10408:	8a000017 	ldw	r8,0(r17)
   1040c:	1806d43a 	srli	r3,r3,16
   10410:	413fffcc 	andi	r4,r8,65535
   10414:	1fc7383a 	mul	r3,r3,ra
   10418:	1907883a 	add	r3,r3,r4
   1041c:	1947883a 	add	r3,r3,r5
   10420:	180ed43a 	srli	r7,r3,16
   10424:	727fe936 	bltu	r14,r9,103cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70103cc>
   10428:	90c00115 	stw	r3,4(r18)
   1042c:	31800104 	addi	r6,r6,4
   10430:	5ac00104 	addi	r11,r11,4
   10434:	333fbe36 	bltu	r6,r12,10330 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010330>
   10438:	0400090e 	bge	zero,r16,10460 <__multiply+0x1d4>
   1043c:	50ffff17 	ldw	r3,-4(r10)
   10440:	52bfff04 	addi	r10,r10,-4
   10444:	18000326 	beq	r3,zero,10454 <__multiply+0x1c8>
   10448:	00000506 	br	10460 <__multiply+0x1d4>
   1044c:	50c00017 	ldw	r3,0(r10)
   10450:	1800031e 	bne	r3,zero,10460 <__multiply+0x1d4>
   10454:	843fffc4 	addi	r16,r16,-1
   10458:	52bfff04 	addi	r10,r10,-4
   1045c:	803ffb1e 	bne	r16,zero,1044c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701044c>
   10460:	14000415 	stw	r16,16(r2)
   10464:	dfc00517 	ldw	ra,20(sp)
   10468:	dd000417 	ldw	r20,16(sp)
   1046c:	dcc00317 	ldw	r19,12(sp)
   10470:	dc800217 	ldw	r18,8(sp)
   10474:	dc400117 	ldw	r17,4(sp)
   10478:	dc000017 	ldw	r16,0(sp)
   1047c:	dec00604 	addi	sp,sp,24
   10480:	f800283a 	ret

00010484 <__pow5mult>:
   10484:	defffa04 	addi	sp,sp,-24
   10488:	dcc00315 	stw	r19,12(sp)
   1048c:	dc000015 	stw	r16,0(sp)
   10490:	dfc00515 	stw	ra,20(sp)
   10494:	dd000415 	stw	r20,16(sp)
   10498:	dc800215 	stw	r18,8(sp)
   1049c:	dc400115 	stw	r17,4(sp)
   104a0:	308000cc 	andi	r2,r6,3
   104a4:	3021883a 	mov	r16,r6
   104a8:	2027883a 	mov	r19,r4
   104ac:	10002f1e 	bne	r2,zero,1056c <__pow5mult+0xe8>
   104b0:	2825883a 	mov	r18,r5
   104b4:	8021d0ba 	srai	r16,r16,2
   104b8:	80001a26 	beq	r16,zero,10524 <__pow5mult+0xa0>
   104bc:	9c401217 	ldw	r17,72(r19)
   104c0:	8800061e 	bne	r17,zero,104dc <__pow5mult+0x58>
   104c4:	00003406 	br	10598 <__pow5mult+0x114>
   104c8:	8021d07a 	srai	r16,r16,1
   104cc:	80001526 	beq	r16,zero,10524 <__pow5mult+0xa0>
   104d0:	88800017 	ldw	r2,0(r17)
   104d4:	10001c26 	beq	r2,zero,10548 <__pow5mult+0xc4>
   104d8:	1023883a 	mov	r17,r2
   104dc:	8080004c 	andi	r2,r16,1
   104e0:	103ff926 	beq	r2,zero,104c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70104c8>
   104e4:	880d883a 	mov	r6,r17
   104e8:	900b883a 	mov	r5,r18
   104ec:	9809883a 	mov	r4,r19
   104f0:	001028c0 	call	1028c <__multiply>
   104f4:	90001b26 	beq	r18,zero,10564 <__pow5mult+0xe0>
   104f8:	91000117 	ldw	r4,4(r18)
   104fc:	98c01317 	ldw	r3,76(r19)
   10500:	8021d07a 	srai	r16,r16,1
   10504:	2109883a 	add	r4,r4,r4
   10508:	2109883a 	add	r4,r4,r4
   1050c:	1907883a 	add	r3,r3,r4
   10510:	19000017 	ldw	r4,0(r3)
   10514:	91000015 	stw	r4,0(r18)
   10518:	1c800015 	stw	r18,0(r3)
   1051c:	1025883a 	mov	r18,r2
   10520:	803feb1e 	bne	r16,zero,104d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70104d0>
   10524:	9005883a 	mov	r2,r18
   10528:	dfc00517 	ldw	ra,20(sp)
   1052c:	dd000417 	ldw	r20,16(sp)
   10530:	dcc00317 	ldw	r19,12(sp)
   10534:	dc800217 	ldw	r18,8(sp)
   10538:	dc400117 	ldw	r17,4(sp)
   1053c:	dc000017 	ldw	r16,0(sp)
   10540:	dec00604 	addi	sp,sp,24
   10544:	f800283a 	ret
   10548:	880d883a 	mov	r6,r17
   1054c:	880b883a 	mov	r5,r17
   10550:	9809883a 	mov	r4,r19
   10554:	001028c0 	call	1028c <__multiply>
   10558:	88800015 	stw	r2,0(r17)
   1055c:	10000015 	stw	zero,0(r2)
   10560:	003fdd06 	br	104d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70104d8>
   10564:	1025883a 	mov	r18,r2
   10568:	003fd706 	br	104c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70104c8>
   1056c:	10bfffc4 	addi	r2,r2,-1
   10570:	1085883a 	add	r2,r2,r2
   10574:	00c000b4 	movhi	r3,2
   10578:	18d2f704 	addi	r3,r3,19420
   1057c:	1085883a 	add	r2,r2,r2
   10580:	1885883a 	add	r2,r3,r2
   10584:	11800017 	ldw	r6,0(r2)
   10588:	000f883a 	mov	r7,zero
   1058c:	000ff140 	call	ff14 <__multadd>
   10590:	1025883a 	mov	r18,r2
   10594:	003fc706 	br	104b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70104b4>
   10598:	05000044 	movi	r20,1
   1059c:	a00b883a 	mov	r5,r20
   105a0:	9809883a 	mov	r4,r19
   105a4:	000fe440 	call	fe44 <_Balloc>
   105a8:	1023883a 	mov	r17,r2
   105ac:	00809c44 	movi	r2,625
   105b0:	88800515 	stw	r2,20(r17)
   105b4:	8d000415 	stw	r20,16(r17)
   105b8:	9c401215 	stw	r17,72(r19)
   105bc:	88000015 	stw	zero,0(r17)
   105c0:	003fc606 	br	104dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70104dc>

000105c4 <__lshift>:
   105c4:	defff904 	addi	sp,sp,-28
   105c8:	dd400515 	stw	r21,20(sp)
   105cc:	dcc00315 	stw	r19,12(sp)
   105d0:	302bd17a 	srai	r21,r6,5
   105d4:	2cc00417 	ldw	r19,16(r5)
   105d8:	28800217 	ldw	r2,8(r5)
   105dc:	dd000415 	stw	r20,16(sp)
   105e0:	ace7883a 	add	r19,r21,r19
   105e4:	dc800215 	stw	r18,8(sp)
   105e8:	dc400115 	stw	r17,4(sp)
   105ec:	dc000015 	stw	r16,0(sp)
   105f0:	dfc00615 	stw	ra,24(sp)
   105f4:	9c000044 	addi	r16,r19,1
   105f8:	2823883a 	mov	r17,r5
   105fc:	3029883a 	mov	r20,r6
   10600:	2025883a 	mov	r18,r4
   10604:	29400117 	ldw	r5,4(r5)
   10608:	1400030e 	bge	r2,r16,10618 <__lshift+0x54>
   1060c:	1085883a 	add	r2,r2,r2
   10610:	29400044 	addi	r5,r5,1
   10614:	143ffd16 	blt	r2,r16,1060c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701060c>
   10618:	9009883a 	mov	r4,r18
   1061c:	000fe440 	call	fe44 <_Balloc>
   10620:	10c00504 	addi	r3,r2,20
   10624:	0540070e 	bge	zero,r21,10644 <__lshift+0x80>
   10628:	ad6b883a 	add	r21,r21,r21
   1062c:	ad6b883a 	add	r21,r21,r21
   10630:	1809883a 	mov	r4,r3
   10634:	1d47883a 	add	r3,r3,r21
   10638:	20000015 	stw	zero,0(r4)
   1063c:	21000104 	addi	r4,r4,4
   10640:	193ffd1e 	bne	r3,r4,10638 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010638>
   10644:	8a000417 	ldw	r8,16(r17)
   10648:	89000504 	addi	r4,r17,20
   1064c:	a18007cc 	andi	r6,r20,31
   10650:	4211883a 	add	r8,r8,r8
   10654:	4211883a 	add	r8,r8,r8
   10658:	2211883a 	add	r8,r4,r8
   1065c:	30002326 	beq	r6,zero,106ec <__lshift+0x128>
   10660:	02400804 	movi	r9,32
   10664:	4993c83a 	sub	r9,r9,r6
   10668:	000b883a 	mov	r5,zero
   1066c:	21c00017 	ldw	r7,0(r4)
   10670:	1815883a 	mov	r10,r3
   10674:	18c00104 	addi	r3,r3,4
   10678:	398e983a 	sll	r7,r7,r6
   1067c:	21000104 	addi	r4,r4,4
   10680:	394ab03a 	or	r5,r7,r5
   10684:	197fff15 	stw	r5,-4(r3)
   10688:	217fff17 	ldw	r5,-4(r4)
   1068c:	2a4ad83a 	srl	r5,r5,r9
   10690:	223ff636 	bltu	r4,r8,1066c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701066c>
   10694:	51400115 	stw	r5,4(r10)
   10698:	28001a1e 	bne	r5,zero,10704 <__lshift+0x140>
   1069c:	843fffc4 	addi	r16,r16,-1
   106a0:	14000415 	stw	r16,16(r2)
   106a4:	88000826 	beq	r17,zero,106c8 <__lshift+0x104>
   106a8:	89000117 	ldw	r4,4(r17)
   106ac:	90c01317 	ldw	r3,76(r18)
   106b0:	2109883a 	add	r4,r4,r4
   106b4:	2109883a 	add	r4,r4,r4
   106b8:	1907883a 	add	r3,r3,r4
   106bc:	19000017 	ldw	r4,0(r3)
   106c0:	89000015 	stw	r4,0(r17)
   106c4:	1c400015 	stw	r17,0(r3)
   106c8:	dfc00617 	ldw	ra,24(sp)
   106cc:	dd400517 	ldw	r21,20(sp)
   106d0:	dd000417 	ldw	r20,16(sp)
   106d4:	dcc00317 	ldw	r19,12(sp)
   106d8:	dc800217 	ldw	r18,8(sp)
   106dc:	dc400117 	ldw	r17,4(sp)
   106e0:	dc000017 	ldw	r16,0(sp)
   106e4:	dec00704 	addi	sp,sp,28
   106e8:	f800283a 	ret
   106ec:	21400017 	ldw	r5,0(r4)
   106f0:	18c00104 	addi	r3,r3,4
   106f4:	21000104 	addi	r4,r4,4
   106f8:	197fff15 	stw	r5,-4(r3)
   106fc:	223ffb36 	bltu	r4,r8,106ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70106ec>
   10700:	003fe606 	br	1069c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701069c>
   10704:	9c000084 	addi	r16,r19,2
   10708:	003fe406 	br	1069c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701069c>

0001070c <__mcmp>:
   1070c:	20800417 	ldw	r2,16(r4)
   10710:	28c00417 	ldw	r3,16(r5)
   10714:	10c5c83a 	sub	r2,r2,r3
   10718:	1000111e 	bne	r2,zero,10760 <__mcmp+0x54>
   1071c:	18c7883a 	add	r3,r3,r3
   10720:	18c7883a 	add	r3,r3,r3
   10724:	21000504 	addi	r4,r4,20
   10728:	29400504 	addi	r5,r5,20
   1072c:	20c5883a 	add	r2,r4,r3
   10730:	28cb883a 	add	r5,r5,r3
   10734:	00000106 	br	1073c <__mcmp+0x30>
   10738:	20800a2e 	bgeu	r4,r2,10764 <__mcmp+0x58>
   1073c:	10bfff04 	addi	r2,r2,-4
   10740:	297fff04 	addi	r5,r5,-4
   10744:	11800017 	ldw	r6,0(r2)
   10748:	28c00017 	ldw	r3,0(r5)
   1074c:	30fffa26 	beq	r6,r3,10738 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010738>
   10750:	30c00236 	bltu	r6,r3,1075c <__mcmp+0x50>
   10754:	00800044 	movi	r2,1
   10758:	f800283a 	ret
   1075c:	00bfffc4 	movi	r2,-1
   10760:	f800283a 	ret
   10764:	0005883a 	mov	r2,zero
   10768:	f800283a 	ret

0001076c <__mdiff>:
   1076c:	28c00417 	ldw	r3,16(r5)
   10770:	30800417 	ldw	r2,16(r6)
   10774:	defffa04 	addi	sp,sp,-24
   10778:	dcc00315 	stw	r19,12(sp)
   1077c:	dc800215 	stw	r18,8(sp)
   10780:	dfc00515 	stw	ra,20(sp)
   10784:	dd000415 	stw	r20,16(sp)
   10788:	dc400115 	stw	r17,4(sp)
   1078c:	dc000015 	stw	r16,0(sp)
   10790:	1887c83a 	sub	r3,r3,r2
   10794:	2825883a 	mov	r18,r5
   10798:	3027883a 	mov	r19,r6
   1079c:	1800141e 	bne	r3,zero,107f0 <__mdiff+0x84>
   107a0:	1085883a 	add	r2,r2,r2
   107a4:	1085883a 	add	r2,r2,r2
   107a8:	2a000504 	addi	r8,r5,20
   107ac:	34000504 	addi	r16,r6,20
   107b0:	4087883a 	add	r3,r8,r2
   107b4:	8085883a 	add	r2,r16,r2
   107b8:	00000106 	br	107c0 <__mdiff+0x54>
   107bc:	40c0592e 	bgeu	r8,r3,10924 <__mdiff+0x1b8>
   107c0:	18ffff04 	addi	r3,r3,-4
   107c4:	10bfff04 	addi	r2,r2,-4
   107c8:	19c00017 	ldw	r7,0(r3)
   107cc:	11400017 	ldw	r5,0(r2)
   107d0:	397ffa26 	beq	r7,r5,107bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70107bc>
   107d4:	3940592e 	bgeu	r7,r5,1093c <__mdiff+0x1d0>
   107d8:	9005883a 	mov	r2,r18
   107dc:	4023883a 	mov	r17,r8
   107e0:	9825883a 	mov	r18,r19
   107e4:	05000044 	movi	r20,1
   107e8:	1027883a 	mov	r19,r2
   107ec:	00000406 	br	10800 <__mdiff+0x94>
   107f0:	18005616 	blt	r3,zero,1094c <__mdiff+0x1e0>
   107f4:	34400504 	addi	r17,r6,20
   107f8:	2c000504 	addi	r16,r5,20
   107fc:	0029883a 	mov	r20,zero
   10800:	91400117 	ldw	r5,4(r18)
   10804:	000fe440 	call	fe44 <_Balloc>
   10808:	92400417 	ldw	r9,16(r18)
   1080c:	9b000417 	ldw	r12,16(r19)
   10810:	12c00504 	addi	r11,r2,20
   10814:	4a51883a 	add	r8,r9,r9
   10818:	6319883a 	add	r12,r12,r12
   1081c:	4211883a 	add	r8,r8,r8
   10820:	6319883a 	add	r12,r12,r12
   10824:	15000315 	stw	r20,12(r2)
   10828:	8211883a 	add	r8,r16,r8
   1082c:	8b19883a 	add	r12,r17,r12
   10830:	0007883a 	mov	r3,zero
   10834:	81400017 	ldw	r5,0(r16)
   10838:	89c00017 	ldw	r7,0(r17)
   1083c:	59800104 	addi	r6,r11,4
   10840:	293fffcc 	andi	r4,r5,65535
   10844:	20c7883a 	add	r3,r4,r3
   10848:	393fffcc 	andi	r4,r7,65535
   1084c:	1909c83a 	sub	r4,r3,r4
   10850:	280ad43a 	srli	r5,r5,16
   10854:	380ed43a 	srli	r7,r7,16
   10858:	2007d43a 	srai	r3,r4,16
   1085c:	213fffcc 	andi	r4,r4,65535
   10860:	29cbc83a 	sub	r5,r5,r7
   10864:	28c7883a 	add	r3,r5,r3
   10868:	180a943a 	slli	r5,r3,16
   1086c:	8c400104 	addi	r17,r17,4
   10870:	84000104 	addi	r16,r16,4
   10874:	2908b03a 	or	r4,r5,r4
   10878:	59000015 	stw	r4,0(r11)
   1087c:	1807d43a 	srai	r3,r3,16
   10880:	3015883a 	mov	r10,r6
   10884:	3017883a 	mov	r11,r6
   10888:	8b3fea36 	bltu	r17,r12,10834 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010834>
   1088c:	8200162e 	bgeu	r16,r8,108e8 <__mdiff+0x17c>
   10890:	8017883a 	mov	r11,r16
   10894:	59400017 	ldw	r5,0(r11)
   10898:	31800104 	addi	r6,r6,4
   1089c:	5ac00104 	addi	r11,r11,4
   108a0:	293fffcc 	andi	r4,r5,65535
   108a4:	20c7883a 	add	r3,r4,r3
   108a8:	280ed43a 	srli	r7,r5,16
   108ac:	180bd43a 	srai	r5,r3,16
   108b0:	193fffcc 	andi	r4,r3,65535
   108b4:	3947883a 	add	r3,r7,r5
   108b8:	180a943a 	slli	r5,r3,16
   108bc:	1807d43a 	srai	r3,r3,16
   108c0:	2908b03a 	or	r4,r5,r4
   108c4:	313fff15 	stw	r4,-4(r6)
   108c8:	5a3ff236 	bltu	r11,r8,10894 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010894>
   108cc:	0406303a 	nor	r3,zero,r16
   108d0:	1a07883a 	add	r3,r3,r8
   108d4:	1806d0ba 	srli	r3,r3,2
   108d8:	18c00044 	addi	r3,r3,1
   108dc:	18c7883a 	add	r3,r3,r3
   108e0:	18c7883a 	add	r3,r3,r3
   108e4:	50d5883a 	add	r10,r10,r3
   108e8:	50ffff04 	addi	r3,r10,-4
   108ec:	2000041e 	bne	r4,zero,10900 <__mdiff+0x194>
   108f0:	18ffff04 	addi	r3,r3,-4
   108f4:	19000017 	ldw	r4,0(r3)
   108f8:	4a7fffc4 	addi	r9,r9,-1
   108fc:	203ffc26 	beq	r4,zero,108f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70108f0>
   10900:	12400415 	stw	r9,16(r2)
   10904:	dfc00517 	ldw	ra,20(sp)
   10908:	dd000417 	ldw	r20,16(sp)
   1090c:	dcc00317 	ldw	r19,12(sp)
   10910:	dc800217 	ldw	r18,8(sp)
   10914:	dc400117 	ldw	r17,4(sp)
   10918:	dc000017 	ldw	r16,0(sp)
   1091c:	dec00604 	addi	sp,sp,24
   10920:	f800283a 	ret
   10924:	000b883a 	mov	r5,zero
   10928:	000fe440 	call	fe44 <_Balloc>
   1092c:	00c00044 	movi	r3,1
   10930:	10c00415 	stw	r3,16(r2)
   10934:	10000515 	stw	zero,20(r2)
   10938:	003ff206 	br	10904 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010904>
   1093c:	8023883a 	mov	r17,r16
   10940:	0029883a 	mov	r20,zero
   10944:	4021883a 	mov	r16,r8
   10948:	003fad06 	br	10800 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010800>
   1094c:	9005883a 	mov	r2,r18
   10950:	94400504 	addi	r17,r18,20
   10954:	9c000504 	addi	r16,r19,20
   10958:	9825883a 	mov	r18,r19
   1095c:	05000044 	movi	r20,1
   10960:	1027883a 	mov	r19,r2
   10964:	003fa606 	br	10800 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010800>

00010968 <__ulp>:
   10968:	295ffc2c 	andhi	r5,r5,32752
   1096c:	00bf3034 	movhi	r2,64704
   10970:	2887883a 	add	r3,r5,r2
   10974:	00c0020e 	bge	zero,r3,10980 <__ulp+0x18>
   10978:	0005883a 	mov	r2,zero
   1097c:	f800283a 	ret
   10980:	00c7c83a 	sub	r3,zero,r3
   10984:	1807d53a 	srai	r3,r3,20
   10988:	008004c4 	movi	r2,19
   1098c:	10c00b0e 	bge	r2,r3,109bc <__ulp+0x54>
   10990:	18bffb04 	addi	r2,r3,-20
   10994:	01000784 	movi	r4,30
   10998:	0007883a 	mov	r3,zero
   1099c:	20800516 	blt	r4,r2,109b4 <__ulp+0x4c>
   109a0:	010007c4 	movi	r4,31
   109a4:	2089c83a 	sub	r4,r4,r2
   109a8:	00800044 	movi	r2,1
   109ac:	1104983a 	sll	r2,r2,r4
   109b0:	f800283a 	ret
   109b4:	00800044 	movi	r2,1
   109b8:	f800283a 	ret
   109bc:	01400234 	movhi	r5,8
   109c0:	28c7d83a 	sra	r3,r5,r3
   109c4:	0005883a 	mov	r2,zero
   109c8:	f800283a 	ret

000109cc <__b2d>:
   109cc:	defffa04 	addi	sp,sp,-24
   109d0:	dc000015 	stw	r16,0(sp)
   109d4:	24000417 	ldw	r16,16(r4)
   109d8:	dc400115 	stw	r17,4(sp)
   109dc:	24400504 	addi	r17,r4,20
   109e0:	8421883a 	add	r16,r16,r16
   109e4:	8421883a 	add	r16,r16,r16
   109e8:	8c21883a 	add	r16,r17,r16
   109ec:	dc800215 	stw	r18,8(sp)
   109f0:	84bfff17 	ldw	r18,-4(r16)
   109f4:	dd000415 	stw	r20,16(sp)
   109f8:	dcc00315 	stw	r19,12(sp)
   109fc:	9009883a 	mov	r4,r18
   10a00:	2829883a 	mov	r20,r5
   10a04:	dfc00515 	stw	ra,20(sp)
   10a08:	00101380 	call	10138 <__hi0bits>
   10a0c:	00c00804 	movi	r3,32
   10a10:	1889c83a 	sub	r4,r3,r2
   10a14:	a1000015 	stw	r4,0(r20)
   10a18:	01000284 	movi	r4,10
   10a1c:	84ffff04 	addi	r19,r16,-4
   10a20:	20801216 	blt	r4,r2,10a6c <__b2d+0xa0>
   10a24:	018002c4 	movi	r6,11
   10a28:	308dc83a 	sub	r6,r6,r2
   10a2c:	9186d83a 	srl	r3,r18,r6
   10a30:	18cffc34 	orhi	r3,r3,16368
   10a34:	8cc0212e 	bgeu	r17,r19,10abc <__b2d+0xf0>
   10a38:	813ffe17 	ldw	r4,-8(r16)
   10a3c:	218cd83a 	srl	r6,r4,r6
   10a40:	10800544 	addi	r2,r2,21
   10a44:	9084983a 	sll	r2,r18,r2
   10a48:	1184b03a 	or	r2,r2,r6
   10a4c:	dfc00517 	ldw	ra,20(sp)
   10a50:	dd000417 	ldw	r20,16(sp)
   10a54:	dcc00317 	ldw	r19,12(sp)
   10a58:	dc800217 	ldw	r18,8(sp)
   10a5c:	dc400117 	ldw	r17,4(sp)
   10a60:	dc000017 	ldw	r16,0(sp)
   10a64:	dec00604 	addi	sp,sp,24
   10a68:	f800283a 	ret
   10a6c:	8cc00f2e 	bgeu	r17,r19,10aac <__b2d+0xe0>
   10a70:	117ffd44 	addi	r5,r2,-11
   10a74:	80bffe17 	ldw	r2,-8(r16)
   10a78:	28000e26 	beq	r5,zero,10ab4 <__b2d+0xe8>
   10a7c:	1949c83a 	sub	r4,r3,r5
   10a80:	9164983a 	sll	r18,r18,r5
   10a84:	1106d83a 	srl	r3,r2,r4
   10a88:	81bffe04 	addi	r6,r16,-8
   10a8c:	948ffc34 	orhi	r18,r18,16368
   10a90:	90c6b03a 	or	r3,r18,r3
   10a94:	89800e2e 	bgeu	r17,r6,10ad0 <__b2d+0x104>
   10a98:	81bffd17 	ldw	r6,-12(r16)
   10a9c:	1144983a 	sll	r2,r2,r5
   10aa0:	310ad83a 	srl	r5,r6,r4
   10aa4:	2884b03a 	or	r2,r5,r2
   10aa8:	003fe806 	br	10a4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010a4c>
   10aac:	10bffd44 	addi	r2,r2,-11
   10ab0:	1000041e 	bne	r2,zero,10ac4 <__b2d+0xf8>
   10ab4:	90cffc34 	orhi	r3,r18,16368
   10ab8:	003fe406 	br	10a4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010a4c>
   10abc:	000d883a 	mov	r6,zero
   10ac0:	003fdf06 	br	10a40 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010a40>
   10ac4:	90a4983a 	sll	r18,r18,r2
   10ac8:	0005883a 	mov	r2,zero
   10acc:	003ff906 	br	10ab4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010ab4>
   10ad0:	1144983a 	sll	r2,r2,r5
   10ad4:	003fdd06 	br	10a4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010a4c>

00010ad8 <__d2b>:
   10ad8:	defff804 	addi	sp,sp,-32
   10adc:	dc000215 	stw	r16,8(sp)
   10ae0:	3021883a 	mov	r16,r6
   10ae4:	dc400315 	stw	r17,12(sp)
   10ae8:	8022907a 	slli	r17,r16,1
   10aec:	dd000615 	stw	r20,24(sp)
   10af0:	2829883a 	mov	r20,r5
   10af4:	01400044 	movi	r5,1
   10af8:	dcc00515 	stw	r19,20(sp)
   10afc:	dc800415 	stw	r18,16(sp)
   10b00:	dfc00715 	stw	ra,28(sp)
   10b04:	3825883a 	mov	r18,r7
   10b08:	8822d57a 	srli	r17,r17,21
   10b0c:	000fe440 	call	fe44 <_Balloc>
   10b10:	1027883a 	mov	r19,r2
   10b14:	00800434 	movhi	r2,16
   10b18:	10bfffc4 	addi	r2,r2,-1
   10b1c:	808c703a 	and	r6,r16,r2
   10b20:	88000126 	beq	r17,zero,10b28 <__d2b+0x50>
   10b24:	31800434 	orhi	r6,r6,16
   10b28:	d9800015 	stw	r6,0(sp)
   10b2c:	a0002426 	beq	r20,zero,10bc0 <__d2b+0xe8>
   10b30:	d9000104 	addi	r4,sp,4
   10b34:	dd000115 	stw	r20,4(sp)
   10b38:	00101a00 	call	101a0 <__lo0bits>
   10b3c:	d8c00017 	ldw	r3,0(sp)
   10b40:	10002f1e 	bne	r2,zero,10c00 <__d2b+0x128>
   10b44:	d9000117 	ldw	r4,4(sp)
   10b48:	99000515 	stw	r4,20(r19)
   10b4c:	1821003a 	cmpeq	r16,r3,zero
   10b50:	01000084 	movi	r4,2
   10b54:	2421c83a 	sub	r16,r4,r16
   10b58:	98c00615 	stw	r3,24(r19)
   10b5c:	9c000415 	stw	r16,16(r19)
   10b60:	88001f1e 	bne	r17,zero,10be0 <__d2b+0x108>
   10b64:	10bef384 	addi	r2,r2,-1074
   10b68:	90800015 	stw	r2,0(r18)
   10b6c:	00900034 	movhi	r2,16384
   10b70:	10bfffc4 	addi	r2,r2,-1
   10b74:	8085883a 	add	r2,r16,r2
   10b78:	1085883a 	add	r2,r2,r2
   10b7c:	1085883a 	add	r2,r2,r2
   10b80:	9885883a 	add	r2,r19,r2
   10b84:	11000517 	ldw	r4,20(r2)
   10b88:	8020917a 	slli	r16,r16,5
   10b8c:	00101380 	call	10138 <__hi0bits>
   10b90:	d8c00817 	ldw	r3,32(sp)
   10b94:	8085c83a 	sub	r2,r16,r2
   10b98:	18800015 	stw	r2,0(r3)
   10b9c:	9805883a 	mov	r2,r19
   10ba0:	dfc00717 	ldw	ra,28(sp)
   10ba4:	dd000617 	ldw	r20,24(sp)
   10ba8:	dcc00517 	ldw	r19,20(sp)
   10bac:	dc800417 	ldw	r18,16(sp)
   10bb0:	dc400317 	ldw	r17,12(sp)
   10bb4:	dc000217 	ldw	r16,8(sp)
   10bb8:	dec00804 	addi	sp,sp,32
   10bbc:	f800283a 	ret
   10bc0:	d809883a 	mov	r4,sp
   10bc4:	00101a00 	call	101a0 <__lo0bits>
   10bc8:	d8c00017 	ldw	r3,0(sp)
   10bcc:	04000044 	movi	r16,1
   10bd0:	9c000415 	stw	r16,16(r19)
   10bd4:	98c00515 	stw	r3,20(r19)
   10bd8:	10800804 	addi	r2,r2,32
   10bdc:	883fe126 	beq	r17,zero,10b64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010b64>
   10be0:	00c00d44 	movi	r3,53
   10be4:	8c7ef344 	addi	r17,r17,-1075
   10be8:	88a3883a 	add	r17,r17,r2
   10bec:	1885c83a 	sub	r2,r3,r2
   10bf0:	d8c00817 	ldw	r3,32(sp)
   10bf4:	94400015 	stw	r17,0(r18)
   10bf8:	18800015 	stw	r2,0(r3)
   10bfc:	003fe706 	br	10b9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010b9c>
   10c00:	01000804 	movi	r4,32
   10c04:	2089c83a 	sub	r4,r4,r2
   10c08:	1908983a 	sll	r4,r3,r4
   10c0c:	d9400117 	ldw	r5,4(sp)
   10c10:	1886d83a 	srl	r3,r3,r2
   10c14:	2148b03a 	or	r4,r4,r5
   10c18:	99000515 	stw	r4,20(r19)
   10c1c:	d8c00015 	stw	r3,0(sp)
   10c20:	003fca06 	br	10b4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010b4c>

00010c24 <__ratio>:
   10c24:	defff904 	addi	sp,sp,-28
   10c28:	dc400315 	stw	r17,12(sp)
   10c2c:	2823883a 	mov	r17,r5
   10c30:	d9400104 	addi	r5,sp,4
   10c34:	dfc00615 	stw	ra,24(sp)
   10c38:	dcc00515 	stw	r19,20(sp)
   10c3c:	dc800415 	stw	r18,16(sp)
   10c40:	2027883a 	mov	r19,r4
   10c44:	dc000215 	stw	r16,8(sp)
   10c48:	00109cc0 	call	109cc <__b2d>
   10c4c:	d80b883a 	mov	r5,sp
   10c50:	8809883a 	mov	r4,r17
   10c54:	1025883a 	mov	r18,r2
   10c58:	1821883a 	mov	r16,r3
   10c5c:	00109cc0 	call	109cc <__b2d>
   10c60:	8a000417 	ldw	r8,16(r17)
   10c64:	99000417 	ldw	r4,16(r19)
   10c68:	d9400117 	ldw	r5,4(sp)
   10c6c:	2209c83a 	sub	r4,r4,r8
   10c70:	2010917a 	slli	r8,r4,5
   10c74:	d9000017 	ldw	r4,0(sp)
   10c78:	2909c83a 	sub	r4,r5,r4
   10c7c:	4109883a 	add	r4,r8,r4
   10c80:	01000e0e 	bge	zero,r4,10cbc <__ratio+0x98>
   10c84:	2008953a 	slli	r4,r4,20
   10c88:	2421883a 	add	r16,r4,r16
   10c8c:	100d883a 	mov	r6,r2
   10c90:	180f883a 	mov	r7,r3
   10c94:	9009883a 	mov	r4,r18
   10c98:	800b883a 	mov	r5,r16
   10c9c:	00155400 	call	15540 <__divdf3>
   10ca0:	dfc00617 	ldw	ra,24(sp)
   10ca4:	dcc00517 	ldw	r19,20(sp)
   10ca8:	dc800417 	ldw	r18,16(sp)
   10cac:	dc400317 	ldw	r17,12(sp)
   10cb0:	dc000217 	ldw	r16,8(sp)
   10cb4:	dec00704 	addi	sp,sp,28
   10cb8:	f800283a 	ret
   10cbc:	2008953a 	slli	r4,r4,20
   10cc0:	1907c83a 	sub	r3,r3,r4
   10cc4:	003ff106 	br	10c8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010c8c>

00010cc8 <_mprec_log10>:
   10cc8:	defffe04 	addi	sp,sp,-8
   10ccc:	dc000015 	stw	r16,0(sp)
   10cd0:	dfc00115 	stw	ra,4(sp)
   10cd4:	008005c4 	movi	r2,23
   10cd8:	2021883a 	mov	r16,r4
   10cdc:	11000d0e 	bge	r2,r4,10d14 <_mprec_log10+0x4c>
   10ce0:	0005883a 	mov	r2,zero
   10ce4:	00cffc34 	movhi	r3,16368
   10ce8:	843fffc4 	addi	r16,r16,-1
   10cec:	000d883a 	mov	r6,zero
   10cf0:	01d00934 	movhi	r7,16420
   10cf4:	1009883a 	mov	r4,r2
   10cf8:	180b883a 	mov	r5,r3
   10cfc:	00160800 	call	16080 <__muldf3>
   10d00:	803ff91e 	bne	r16,zero,10ce8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010ce8>
   10d04:	dfc00117 	ldw	ra,4(sp)
   10d08:	dc000017 	ldw	r16,0(sp)
   10d0c:	dec00204 	addi	sp,sp,8
   10d10:	f800283a 	ret
   10d14:	202090fa 	slli	r16,r4,3
   10d18:	008000b4 	movhi	r2,2
   10d1c:	10930e04 	addi	r2,r2,19512
   10d20:	1421883a 	add	r16,r2,r16
   10d24:	80800017 	ldw	r2,0(r16)
   10d28:	80c00117 	ldw	r3,4(r16)
   10d2c:	dfc00117 	ldw	ra,4(sp)
   10d30:	dc000017 	ldw	r16,0(sp)
   10d34:	dec00204 	addi	sp,sp,8
   10d38:	f800283a 	ret

00010d3c <__copybits>:
   10d3c:	297fffc4 	addi	r5,r5,-1
   10d40:	280fd17a 	srai	r7,r5,5
   10d44:	30c00417 	ldw	r3,16(r6)
   10d48:	30800504 	addi	r2,r6,20
   10d4c:	39c00044 	addi	r7,r7,1
   10d50:	18c7883a 	add	r3,r3,r3
   10d54:	39cf883a 	add	r7,r7,r7
   10d58:	18c7883a 	add	r3,r3,r3
   10d5c:	39cf883a 	add	r7,r7,r7
   10d60:	10c7883a 	add	r3,r2,r3
   10d64:	21cf883a 	add	r7,r4,r7
   10d68:	10c00d2e 	bgeu	r2,r3,10da0 <__copybits+0x64>
   10d6c:	200b883a 	mov	r5,r4
   10d70:	12000017 	ldw	r8,0(r2)
   10d74:	29400104 	addi	r5,r5,4
   10d78:	10800104 	addi	r2,r2,4
   10d7c:	2a3fff15 	stw	r8,-4(r5)
   10d80:	10fffb36 	bltu	r2,r3,10d70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010d70>
   10d84:	1985c83a 	sub	r2,r3,r6
   10d88:	10bffac4 	addi	r2,r2,-21
   10d8c:	1004d0ba 	srli	r2,r2,2
   10d90:	10800044 	addi	r2,r2,1
   10d94:	1085883a 	add	r2,r2,r2
   10d98:	1085883a 	add	r2,r2,r2
   10d9c:	2089883a 	add	r4,r4,r2
   10da0:	21c0032e 	bgeu	r4,r7,10db0 <__copybits+0x74>
   10da4:	20000015 	stw	zero,0(r4)
   10da8:	21000104 	addi	r4,r4,4
   10dac:	21fffd36 	bltu	r4,r7,10da4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010da4>
   10db0:	f800283a 	ret

00010db4 <__any_on>:
   10db4:	20c00417 	ldw	r3,16(r4)
   10db8:	2805d17a 	srai	r2,r5,5
   10dbc:	21000504 	addi	r4,r4,20
   10dc0:	18800d0e 	bge	r3,r2,10df8 <__any_on+0x44>
   10dc4:	18c7883a 	add	r3,r3,r3
   10dc8:	18c7883a 	add	r3,r3,r3
   10dcc:	20c7883a 	add	r3,r4,r3
   10dd0:	20c0192e 	bgeu	r4,r3,10e38 <__any_on+0x84>
   10dd4:	18bfff17 	ldw	r2,-4(r3)
   10dd8:	18ffff04 	addi	r3,r3,-4
   10ddc:	1000041e 	bne	r2,zero,10df0 <__any_on+0x3c>
   10de0:	20c0142e 	bgeu	r4,r3,10e34 <__any_on+0x80>
   10de4:	18ffff04 	addi	r3,r3,-4
   10de8:	19400017 	ldw	r5,0(r3)
   10dec:	283ffc26 	beq	r5,zero,10de0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010de0>
   10df0:	00800044 	movi	r2,1
   10df4:	f800283a 	ret
   10df8:	10c00a0e 	bge	r2,r3,10e24 <__any_on+0x70>
   10dfc:	1085883a 	add	r2,r2,r2
   10e00:	1085883a 	add	r2,r2,r2
   10e04:	294007cc 	andi	r5,r5,31
   10e08:	2087883a 	add	r3,r4,r2
   10e0c:	283ff026 	beq	r5,zero,10dd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010dd0>
   10e10:	19800017 	ldw	r6,0(r3)
   10e14:	3144d83a 	srl	r2,r6,r5
   10e18:	114a983a 	sll	r5,r2,r5
   10e1c:	317ff41e 	bne	r6,r5,10df0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010df0>
   10e20:	003feb06 	br	10dd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010dd0>
   10e24:	1085883a 	add	r2,r2,r2
   10e28:	1085883a 	add	r2,r2,r2
   10e2c:	2087883a 	add	r3,r4,r2
   10e30:	003fe706 	br	10dd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010dd0>
   10e34:	f800283a 	ret
   10e38:	0005883a 	mov	r2,zero
   10e3c:	f800283a 	ret

00010e40 <_realloc_r>:
   10e40:	defff604 	addi	sp,sp,-40
   10e44:	dc800215 	stw	r18,8(sp)
   10e48:	dfc00915 	stw	ra,36(sp)
   10e4c:	df000815 	stw	fp,32(sp)
   10e50:	ddc00715 	stw	r23,28(sp)
   10e54:	dd800615 	stw	r22,24(sp)
   10e58:	dd400515 	stw	r21,20(sp)
   10e5c:	dd000415 	stw	r20,16(sp)
   10e60:	dcc00315 	stw	r19,12(sp)
   10e64:	dc400115 	stw	r17,4(sp)
   10e68:	dc000015 	stw	r16,0(sp)
   10e6c:	3025883a 	mov	r18,r6
   10e70:	2800b726 	beq	r5,zero,11150 <_realloc_r+0x310>
   10e74:	282b883a 	mov	r21,r5
   10e78:	2029883a 	mov	r20,r4
   10e7c:	0017d5c0 	call	17d5c <__malloc_lock>
   10e80:	a8bfff17 	ldw	r2,-4(r21)
   10e84:	043fff04 	movi	r16,-4
   10e88:	90c002c4 	addi	r3,r18,11
   10e8c:	01000584 	movi	r4,22
   10e90:	acfffe04 	addi	r19,r21,-8
   10e94:	1420703a 	and	r16,r2,r16
   10e98:	20c0332e 	bgeu	r4,r3,10f68 <_realloc_r+0x128>
   10e9c:	047ffe04 	movi	r17,-8
   10ea0:	1c62703a 	and	r17,r3,r17
   10ea4:	8807883a 	mov	r3,r17
   10ea8:	88005816 	blt	r17,zero,1100c <_realloc_r+0x1cc>
   10eac:	8c805736 	bltu	r17,r18,1100c <_realloc_r+0x1cc>
   10eb0:	80c0300e 	bge	r16,r3,10f74 <_realloc_r+0x134>
   10eb4:	070000b4 	movhi	fp,2
   10eb8:	e7140c04 	addi	fp,fp,20528
   10ebc:	e1c00217 	ldw	r7,8(fp)
   10ec0:	9c09883a 	add	r4,r19,r16
   10ec4:	22000117 	ldw	r8,4(r4)
   10ec8:	21c06326 	beq	r4,r7,11058 <_realloc_r+0x218>
   10ecc:	017fff84 	movi	r5,-2
   10ed0:	414a703a 	and	r5,r8,r5
   10ed4:	214b883a 	add	r5,r4,r5
   10ed8:	29800117 	ldw	r6,4(r5)
   10edc:	3180004c 	andi	r6,r6,1
   10ee0:	30003f26 	beq	r6,zero,10fe0 <_realloc_r+0x1a0>
   10ee4:	1080004c 	andi	r2,r2,1
   10ee8:	10008326 	beq	r2,zero,110f8 <_realloc_r+0x2b8>
   10eec:	900b883a 	mov	r5,r18
   10ef0:	a009883a 	mov	r4,r20
   10ef4:	00078dc0 	call	78dc <_malloc_r>
   10ef8:	1025883a 	mov	r18,r2
   10efc:	10011e26 	beq	r2,zero,11378 <_realloc_r+0x538>
   10f00:	a93fff17 	ldw	r4,-4(r21)
   10f04:	10fffe04 	addi	r3,r2,-8
   10f08:	00bfff84 	movi	r2,-2
   10f0c:	2084703a 	and	r2,r4,r2
   10f10:	9885883a 	add	r2,r19,r2
   10f14:	1880ee26 	beq	r3,r2,112d0 <_realloc_r+0x490>
   10f18:	81bfff04 	addi	r6,r16,-4
   10f1c:	00800904 	movi	r2,36
   10f20:	1180b836 	bltu	r2,r6,11204 <_realloc_r+0x3c4>
   10f24:	00c004c4 	movi	r3,19
   10f28:	19809636 	bltu	r3,r6,11184 <_realloc_r+0x344>
   10f2c:	9005883a 	mov	r2,r18
   10f30:	a807883a 	mov	r3,r21
   10f34:	19000017 	ldw	r4,0(r3)
   10f38:	11000015 	stw	r4,0(r2)
   10f3c:	19000117 	ldw	r4,4(r3)
   10f40:	11000115 	stw	r4,4(r2)
   10f44:	18c00217 	ldw	r3,8(r3)
   10f48:	10c00215 	stw	r3,8(r2)
   10f4c:	a80b883a 	mov	r5,r21
   10f50:	a009883a 	mov	r4,r20
   10f54:	000f0180 	call	f018 <_free_r>
   10f58:	a009883a 	mov	r4,r20
   10f5c:	0017e7c0 	call	17e7c <__malloc_unlock>
   10f60:	9005883a 	mov	r2,r18
   10f64:	00001206 	br	10fb0 <_realloc_r+0x170>
   10f68:	00c00404 	movi	r3,16
   10f6c:	1823883a 	mov	r17,r3
   10f70:	003fce06 	br	10eac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010eac>
   10f74:	a825883a 	mov	r18,r21
   10f78:	8445c83a 	sub	r2,r16,r17
   10f7c:	00c003c4 	movi	r3,15
   10f80:	18802636 	bltu	r3,r2,1101c <_realloc_r+0x1dc>
   10f84:	99800117 	ldw	r6,4(r19)
   10f88:	9c07883a 	add	r3,r19,r16
   10f8c:	3180004c 	andi	r6,r6,1
   10f90:	3420b03a 	or	r16,r6,r16
   10f94:	9c000115 	stw	r16,4(r19)
   10f98:	18800117 	ldw	r2,4(r3)
   10f9c:	10800054 	ori	r2,r2,1
   10fa0:	18800115 	stw	r2,4(r3)
   10fa4:	a009883a 	mov	r4,r20
   10fa8:	0017e7c0 	call	17e7c <__malloc_unlock>
   10fac:	9005883a 	mov	r2,r18
   10fb0:	dfc00917 	ldw	ra,36(sp)
   10fb4:	df000817 	ldw	fp,32(sp)
   10fb8:	ddc00717 	ldw	r23,28(sp)
   10fbc:	dd800617 	ldw	r22,24(sp)
   10fc0:	dd400517 	ldw	r21,20(sp)
   10fc4:	dd000417 	ldw	r20,16(sp)
   10fc8:	dcc00317 	ldw	r19,12(sp)
   10fcc:	dc800217 	ldw	r18,8(sp)
   10fd0:	dc400117 	ldw	r17,4(sp)
   10fd4:	dc000017 	ldw	r16,0(sp)
   10fd8:	dec00a04 	addi	sp,sp,40
   10fdc:	f800283a 	ret
   10fe0:	017fff04 	movi	r5,-4
   10fe4:	414a703a 	and	r5,r8,r5
   10fe8:	814d883a 	add	r6,r16,r5
   10fec:	30c01f16 	blt	r6,r3,1106c <_realloc_r+0x22c>
   10ff0:	20800317 	ldw	r2,12(r4)
   10ff4:	20c00217 	ldw	r3,8(r4)
   10ff8:	a825883a 	mov	r18,r21
   10ffc:	3021883a 	mov	r16,r6
   11000:	18800315 	stw	r2,12(r3)
   11004:	10c00215 	stw	r3,8(r2)
   11008:	003fdb06 	br	10f78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010f78>
   1100c:	00800304 	movi	r2,12
   11010:	a0800015 	stw	r2,0(r20)
   11014:	0005883a 	mov	r2,zero
   11018:	003fe506 	br	10fb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010fb0>
   1101c:	98c00117 	ldw	r3,4(r19)
   11020:	9c4b883a 	add	r5,r19,r17
   11024:	11000054 	ori	r4,r2,1
   11028:	18c0004c 	andi	r3,r3,1
   1102c:	1c62b03a 	or	r17,r3,r17
   11030:	9c400115 	stw	r17,4(r19)
   11034:	29000115 	stw	r4,4(r5)
   11038:	2885883a 	add	r2,r5,r2
   1103c:	10c00117 	ldw	r3,4(r2)
   11040:	29400204 	addi	r5,r5,8
   11044:	a009883a 	mov	r4,r20
   11048:	18c00054 	ori	r3,r3,1
   1104c:	10c00115 	stw	r3,4(r2)
   11050:	000f0180 	call	f018 <_free_r>
   11054:	003fd306 	br	10fa4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010fa4>
   11058:	017fff04 	movi	r5,-4
   1105c:	414a703a 	and	r5,r8,r5
   11060:	89800404 	addi	r6,r17,16
   11064:	8151883a 	add	r8,r16,r5
   11068:	4180590e 	bge	r8,r6,111d0 <_realloc_r+0x390>
   1106c:	1080004c 	andi	r2,r2,1
   11070:	103f9e1e 	bne	r2,zero,10eec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010eec>
   11074:	adbffe17 	ldw	r22,-8(r21)
   11078:	00bfff04 	movi	r2,-4
   1107c:	9dadc83a 	sub	r22,r19,r22
   11080:	b1800117 	ldw	r6,4(r22)
   11084:	3084703a 	and	r2,r6,r2
   11088:	20002026 	beq	r4,zero,1110c <_realloc_r+0x2cc>
   1108c:	80af883a 	add	r23,r16,r2
   11090:	b96f883a 	add	r23,r23,r5
   11094:	21c05f26 	beq	r4,r7,11214 <_realloc_r+0x3d4>
   11098:	b8c01c16 	blt	r23,r3,1110c <_realloc_r+0x2cc>
   1109c:	20800317 	ldw	r2,12(r4)
   110a0:	20c00217 	ldw	r3,8(r4)
   110a4:	81bfff04 	addi	r6,r16,-4
   110a8:	01000904 	movi	r4,36
   110ac:	18800315 	stw	r2,12(r3)
   110b0:	10c00215 	stw	r3,8(r2)
   110b4:	b0c00217 	ldw	r3,8(r22)
   110b8:	b0800317 	ldw	r2,12(r22)
   110bc:	b4800204 	addi	r18,r22,8
   110c0:	18800315 	stw	r2,12(r3)
   110c4:	10c00215 	stw	r3,8(r2)
   110c8:	21801b36 	bltu	r4,r6,11138 <_realloc_r+0x2f8>
   110cc:	008004c4 	movi	r2,19
   110d0:	1180352e 	bgeu	r2,r6,111a8 <_realloc_r+0x368>
   110d4:	a8800017 	ldw	r2,0(r21)
   110d8:	b0800215 	stw	r2,8(r22)
   110dc:	a8800117 	ldw	r2,4(r21)
   110e0:	b0800315 	stw	r2,12(r22)
   110e4:	008006c4 	movi	r2,27
   110e8:	11807f36 	bltu	r2,r6,112e8 <_realloc_r+0x4a8>
   110ec:	b0800404 	addi	r2,r22,16
   110f0:	ad400204 	addi	r21,r21,8
   110f4:	00002d06 	br	111ac <_realloc_r+0x36c>
   110f8:	adbffe17 	ldw	r22,-8(r21)
   110fc:	00bfff04 	movi	r2,-4
   11100:	9dadc83a 	sub	r22,r19,r22
   11104:	b1000117 	ldw	r4,4(r22)
   11108:	2084703a 	and	r2,r4,r2
   1110c:	b03f7726 	beq	r22,zero,10eec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010eec>
   11110:	80af883a 	add	r23,r16,r2
   11114:	b8ff7516 	blt	r23,r3,10eec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010eec>
   11118:	b0800317 	ldw	r2,12(r22)
   1111c:	b0c00217 	ldw	r3,8(r22)
   11120:	81bfff04 	addi	r6,r16,-4
   11124:	01000904 	movi	r4,36
   11128:	18800315 	stw	r2,12(r3)
   1112c:	10c00215 	stw	r3,8(r2)
   11130:	b4800204 	addi	r18,r22,8
   11134:	21bfe52e 	bgeu	r4,r6,110cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70110cc>
   11138:	a80b883a 	mov	r5,r21
   1113c:	9009883a 	mov	r4,r18
   11140:	000fce80 	call	fce8 <memmove>
   11144:	b821883a 	mov	r16,r23
   11148:	b027883a 	mov	r19,r22
   1114c:	003f8a06 	br	10f78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010f78>
   11150:	300b883a 	mov	r5,r6
   11154:	dfc00917 	ldw	ra,36(sp)
   11158:	df000817 	ldw	fp,32(sp)
   1115c:	ddc00717 	ldw	r23,28(sp)
   11160:	dd800617 	ldw	r22,24(sp)
   11164:	dd400517 	ldw	r21,20(sp)
   11168:	dd000417 	ldw	r20,16(sp)
   1116c:	dcc00317 	ldw	r19,12(sp)
   11170:	dc800217 	ldw	r18,8(sp)
   11174:	dc400117 	ldw	r17,4(sp)
   11178:	dc000017 	ldw	r16,0(sp)
   1117c:	dec00a04 	addi	sp,sp,40
   11180:	00078dc1 	jmpi	78dc <_malloc_r>
   11184:	a8c00017 	ldw	r3,0(r21)
   11188:	90c00015 	stw	r3,0(r18)
   1118c:	a8c00117 	ldw	r3,4(r21)
   11190:	90c00115 	stw	r3,4(r18)
   11194:	00c006c4 	movi	r3,27
   11198:	19804536 	bltu	r3,r6,112b0 <_realloc_r+0x470>
   1119c:	90800204 	addi	r2,r18,8
   111a0:	a8c00204 	addi	r3,r21,8
   111a4:	003f6306 	br	10f34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010f34>
   111a8:	9005883a 	mov	r2,r18
   111ac:	a8c00017 	ldw	r3,0(r21)
   111b0:	b821883a 	mov	r16,r23
   111b4:	b027883a 	mov	r19,r22
   111b8:	10c00015 	stw	r3,0(r2)
   111bc:	a8c00117 	ldw	r3,4(r21)
   111c0:	10c00115 	stw	r3,4(r2)
   111c4:	a8c00217 	ldw	r3,8(r21)
   111c8:	10c00215 	stw	r3,8(r2)
   111cc:	003f6a06 	br	10f78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010f78>
   111d0:	9c67883a 	add	r19,r19,r17
   111d4:	4445c83a 	sub	r2,r8,r17
   111d8:	e4c00215 	stw	r19,8(fp)
   111dc:	10800054 	ori	r2,r2,1
   111e0:	98800115 	stw	r2,4(r19)
   111e4:	a8bfff17 	ldw	r2,-4(r21)
   111e8:	a009883a 	mov	r4,r20
   111ec:	1080004c 	andi	r2,r2,1
   111f0:	1462b03a 	or	r17,r2,r17
   111f4:	ac7fff15 	stw	r17,-4(r21)
   111f8:	0017e7c0 	call	17e7c <__malloc_unlock>
   111fc:	a805883a 	mov	r2,r21
   11200:	003f6b06 	br	10fb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010fb0>
   11204:	a80b883a 	mov	r5,r21
   11208:	9009883a 	mov	r4,r18
   1120c:	000fce80 	call	fce8 <memmove>
   11210:	003f4e06 	br	10f4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010f4c>
   11214:	89000404 	addi	r4,r17,16
   11218:	b93fbc16 	blt	r23,r4,1110c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701110c>
   1121c:	b0800317 	ldw	r2,12(r22)
   11220:	b0c00217 	ldw	r3,8(r22)
   11224:	81bfff04 	addi	r6,r16,-4
   11228:	01000904 	movi	r4,36
   1122c:	18800315 	stw	r2,12(r3)
   11230:	10c00215 	stw	r3,8(r2)
   11234:	b4800204 	addi	r18,r22,8
   11238:	21804336 	bltu	r4,r6,11348 <_realloc_r+0x508>
   1123c:	008004c4 	movi	r2,19
   11240:	11803f2e 	bgeu	r2,r6,11340 <_realloc_r+0x500>
   11244:	a8800017 	ldw	r2,0(r21)
   11248:	b0800215 	stw	r2,8(r22)
   1124c:	a8800117 	ldw	r2,4(r21)
   11250:	b0800315 	stw	r2,12(r22)
   11254:	008006c4 	movi	r2,27
   11258:	11803f36 	bltu	r2,r6,11358 <_realloc_r+0x518>
   1125c:	b0800404 	addi	r2,r22,16
   11260:	ad400204 	addi	r21,r21,8
   11264:	a8c00017 	ldw	r3,0(r21)
   11268:	10c00015 	stw	r3,0(r2)
   1126c:	a8c00117 	ldw	r3,4(r21)
   11270:	10c00115 	stw	r3,4(r2)
   11274:	a8c00217 	ldw	r3,8(r21)
   11278:	10c00215 	stw	r3,8(r2)
   1127c:	b447883a 	add	r3,r22,r17
   11280:	bc45c83a 	sub	r2,r23,r17
   11284:	e0c00215 	stw	r3,8(fp)
   11288:	10800054 	ori	r2,r2,1
   1128c:	18800115 	stw	r2,4(r3)
   11290:	b0800117 	ldw	r2,4(r22)
   11294:	a009883a 	mov	r4,r20
   11298:	1080004c 	andi	r2,r2,1
   1129c:	1462b03a 	or	r17,r2,r17
   112a0:	b4400115 	stw	r17,4(r22)
   112a4:	0017e7c0 	call	17e7c <__malloc_unlock>
   112a8:	9005883a 	mov	r2,r18
   112ac:	003f4006 	br	10fb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010fb0>
   112b0:	a8c00217 	ldw	r3,8(r21)
   112b4:	90c00215 	stw	r3,8(r18)
   112b8:	a8c00317 	ldw	r3,12(r21)
   112bc:	90c00315 	stw	r3,12(r18)
   112c0:	30801126 	beq	r6,r2,11308 <_realloc_r+0x4c8>
   112c4:	90800404 	addi	r2,r18,16
   112c8:	a8c00404 	addi	r3,r21,16
   112cc:	003f1906 	br	10f34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010f34>
   112d0:	90ffff17 	ldw	r3,-4(r18)
   112d4:	00bfff04 	movi	r2,-4
   112d8:	a825883a 	mov	r18,r21
   112dc:	1884703a 	and	r2,r3,r2
   112e0:	80a1883a 	add	r16,r16,r2
   112e4:	003f2406 	br	10f78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010f78>
   112e8:	a8800217 	ldw	r2,8(r21)
   112ec:	b0800415 	stw	r2,16(r22)
   112f0:	a8800317 	ldw	r2,12(r21)
   112f4:	b0800515 	stw	r2,20(r22)
   112f8:	31000a26 	beq	r6,r4,11324 <_realloc_r+0x4e4>
   112fc:	b0800604 	addi	r2,r22,24
   11300:	ad400404 	addi	r21,r21,16
   11304:	003fa906 	br	111ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70111ac>
   11308:	a9000417 	ldw	r4,16(r21)
   1130c:	90800604 	addi	r2,r18,24
   11310:	a8c00604 	addi	r3,r21,24
   11314:	91000415 	stw	r4,16(r18)
   11318:	a9000517 	ldw	r4,20(r21)
   1131c:	91000515 	stw	r4,20(r18)
   11320:	003f0406 	br	10f34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010f34>
   11324:	a8c00417 	ldw	r3,16(r21)
   11328:	ad400604 	addi	r21,r21,24
   1132c:	b0800804 	addi	r2,r22,32
   11330:	b0c00615 	stw	r3,24(r22)
   11334:	a8ffff17 	ldw	r3,-4(r21)
   11338:	b0c00715 	stw	r3,28(r22)
   1133c:	003f9b06 	br	111ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70111ac>
   11340:	9005883a 	mov	r2,r18
   11344:	003fc706 	br	11264 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011264>
   11348:	a80b883a 	mov	r5,r21
   1134c:	9009883a 	mov	r4,r18
   11350:	000fce80 	call	fce8 <memmove>
   11354:	003fc906 	br	1127c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701127c>
   11358:	a8800217 	ldw	r2,8(r21)
   1135c:	b0800415 	stw	r2,16(r22)
   11360:	a8800317 	ldw	r2,12(r21)
   11364:	b0800515 	stw	r2,20(r22)
   11368:	31000726 	beq	r6,r4,11388 <_realloc_r+0x548>
   1136c:	b0800604 	addi	r2,r22,24
   11370:	ad400404 	addi	r21,r21,16
   11374:	003fbb06 	br	11264 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011264>
   11378:	a009883a 	mov	r4,r20
   1137c:	0017e7c0 	call	17e7c <__malloc_unlock>
   11380:	0005883a 	mov	r2,zero
   11384:	003f0a06 	br	10fb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7010fb0>
   11388:	a8c00417 	ldw	r3,16(r21)
   1138c:	ad400604 	addi	r21,r21,24
   11390:	b0800804 	addi	r2,r22,32
   11394:	b0c00615 	stw	r3,24(r22)
   11398:	a8ffff17 	ldw	r3,-4(r21)
   1139c:	b0c00715 	stw	r3,28(r22)
   113a0:	003fb006 	br	11264 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011264>

000113a4 <__fpclassifyd>:
   113a4:	00a00034 	movhi	r2,32768
   113a8:	10bfffc4 	addi	r2,r2,-1
   113ac:	2884703a 	and	r2,r5,r2
   113b0:	10000726 	beq	r2,zero,113d0 <__fpclassifyd+0x2c>
   113b4:	00fffc34 	movhi	r3,65520
   113b8:	019ff834 	movhi	r6,32736
   113bc:	28c7883a 	add	r3,r5,r3
   113c0:	31bfffc4 	addi	r6,r6,-1
   113c4:	30c00536 	bltu	r6,r3,113dc <__fpclassifyd+0x38>
   113c8:	00800104 	movi	r2,4
   113cc:	f800283a 	ret
   113d0:	2000021e 	bne	r4,zero,113dc <__fpclassifyd+0x38>
   113d4:	00800084 	movi	r2,2
   113d8:	f800283a 	ret
   113dc:	00dffc34 	movhi	r3,32752
   113e0:	019ff834 	movhi	r6,32736
   113e4:	28cb883a 	add	r5,r5,r3
   113e8:	31bfffc4 	addi	r6,r6,-1
   113ec:	317ff62e 	bgeu	r6,r5,113c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70113c8>
   113f0:	01400434 	movhi	r5,16
   113f4:	297fffc4 	addi	r5,r5,-1
   113f8:	28800236 	bltu	r5,r2,11404 <__fpclassifyd+0x60>
   113fc:	008000c4 	movi	r2,3
   11400:	f800283a 	ret
   11404:	10c00226 	beq	r2,r3,11410 <__fpclassifyd+0x6c>
   11408:	0005883a 	mov	r2,zero
   1140c:	f800283a 	ret
   11410:	2005003a 	cmpeq	r2,r4,zero
   11414:	f800283a 	ret

00011418 <__sread>:
   11418:	defffe04 	addi	sp,sp,-8
   1141c:	dc000015 	stw	r16,0(sp)
   11420:	2821883a 	mov	r16,r5
   11424:	2940038f 	ldh	r5,14(r5)
   11428:	dfc00115 	stw	ra,4(sp)
   1142c:	001453c0 	call	1453c <_read_r>
   11430:	10000716 	blt	r2,zero,11450 <__sread+0x38>
   11434:	80c01417 	ldw	r3,80(r16)
   11438:	1887883a 	add	r3,r3,r2
   1143c:	80c01415 	stw	r3,80(r16)
   11440:	dfc00117 	ldw	ra,4(sp)
   11444:	dc000017 	ldw	r16,0(sp)
   11448:	dec00204 	addi	sp,sp,8
   1144c:	f800283a 	ret
   11450:	80c0030b 	ldhu	r3,12(r16)
   11454:	18fbffcc 	andi	r3,r3,61439
   11458:	80c0030d 	sth	r3,12(r16)
   1145c:	dfc00117 	ldw	ra,4(sp)
   11460:	dc000017 	ldw	r16,0(sp)
   11464:	dec00204 	addi	sp,sp,8
   11468:	f800283a 	ret

0001146c <__seofread>:
   1146c:	0005883a 	mov	r2,zero
   11470:	f800283a 	ret

00011474 <__swrite>:
   11474:	2880030b 	ldhu	r2,12(r5)
   11478:	defffb04 	addi	sp,sp,-20
   1147c:	dcc00315 	stw	r19,12(sp)
   11480:	dc800215 	stw	r18,8(sp)
   11484:	dc400115 	stw	r17,4(sp)
   11488:	dc000015 	stw	r16,0(sp)
   1148c:	dfc00415 	stw	ra,16(sp)
   11490:	10c0400c 	andi	r3,r2,256
   11494:	2821883a 	mov	r16,r5
   11498:	2023883a 	mov	r17,r4
   1149c:	3025883a 	mov	r18,r6
   114a0:	3827883a 	mov	r19,r7
   114a4:	18000526 	beq	r3,zero,114bc <__swrite+0x48>
   114a8:	2940038f 	ldh	r5,14(r5)
   114ac:	01c00084 	movi	r7,2
   114b0:	000d883a 	mov	r6,zero
   114b4:	00144dc0 	call	144dc <_lseek_r>
   114b8:	8080030b 	ldhu	r2,12(r16)
   114bc:	8140038f 	ldh	r5,14(r16)
   114c0:	10bbffcc 	andi	r2,r2,61439
   114c4:	980f883a 	mov	r7,r19
   114c8:	900d883a 	mov	r6,r18
   114cc:	8809883a 	mov	r4,r17
   114d0:	8080030d 	sth	r2,12(r16)
   114d4:	dfc00417 	ldw	ra,16(sp)
   114d8:	dcc00317 	ldw	r19,12(sp)
   114dc:	dc800217 	ldw	r18,8(sp)
   114e0:	dc400117 	ldw	r17,4(sp)
   114e4:	dc000017 	ldw	r16,0(sp)
   114e8:	dec00504 	addi	sp,sp,20
   114ec:	0013fa81 	jmpi	13fa8 <_write_r>

000114f0 <__sseek>:
   114f0:	defffe04 	addi	sp,sp,-8
   114f4:	dc000015 	stw	r16,0(sp)
   114f8:	2821883a 	mov	r16,r5
   114fc:	2940038f 	ldh	r5,14(r5)
   11500:	dfc00115 	stw	ra,4(sp)
   11504:	00144dc0 	call	144dc <_lseek_r>
   11508:	00ffffc4 	movi	r3,-1
   1150c:	10c00826 	beq	r2,r3,11530 <__sseek+0x40>
   11510:	80c0030b 	ldhu	r3,12(r16)
   11514:	80801415 	stw	r2,80(r16)
   11518:	18c40014 	ori	r3,r3,4096
   1151c:	80c0030d 	sth	r3,12(r16)
   11520:	dfc00117 	ldw	ra,4(sp)
   11524:	dc000017 	ldw	r16,0(sp)
   11528:	dec00204 	addi	sp,sp,8
   1152c:	f800283a 	ret
   11530:	80c0030b 	ldhu	r3,12(r16)
   11534:	18fbffcc 	andi	r3,r3,61439
   11538:	80c0030d 	sth	r3,12(r16)
   1153c:	dfc00117 	ldw	ra,4(sp)
   11540:	dc000017 	ldw	r16,0(sp)
   11544:	dec00204 	addi	sp,sp,8
   11548:	f800283a 	ret

0001154c <__sclose>:
   1154c:	2940038f 	ldh	r5,14(r5)
   11550:	00140081 	jmpi	14008 <_close_r>

00011554 <__ssprint_r>:
   11554:	30800217 	ldw	r2,8(r6)
   11558:	defff604 	addi	sp,sp,-40
   1155c:	dc800215 	stw	r18,8(sp)
   11560:	dfc00915 	stw	ra,36(sp)
   11564:	df000815 	stw	fp,32(sp)
   11568:	ddc00715 	stw	r23,28(sp)
   1156c:	dd800615 	stw	r22,24(sp)
   11570:	dd400515 	stw	r21,20(sp)
   11574:	dd000415 	stw	r20,16(sp)
   11578:	dcc00315 	stw	r19,12(sp)
   1157c:	dc400115 	stw	r17,4(sp)
   11580:	dc000015 	stw	r16,0(sp)
   11584:	3025883a 	mov	r18,r6
   11588:	10005826 	beq	r2,zero,116ec <__ssprint_r+0x198>
   1158c:	2027883a 	mov	r19,r4
   11590:	35c00017 	ldw	r23,0(r6)
   11594:	29000017 	ldw	r4,0(r5)
   11598:	28800217 	ldw	r2,8(r5)
   1159c:	2823883a 	mov	r17,r5
   115a0:	0039883a 	mov	fp,zero
   115a4:	0021883a 	mov	r16,zero
   115a8:	80003926 	beq	r16,zero,11690 <__ssprint_r+0x13c>
   115ac:	102b883a 	mov	r21,r2
   115b0:	102d883a 	mov	r22,r2
   115b4:	80803a36 	bltu	r16,r2,116a0 <__ssprint_r+0x14c>
   115b8:	88c0030b 	ldhu	r3,12(r17)
   115bc:	1881200c 	andi	r2,r3,1152
   115c0:	10002626 	beq	r2,zero,1165c <__ssprint_r+0x108>
   115c4:	88800517 	ldw	r2,20(r17)
   115c8:	89400417 	ldw	r5,16(r17)
   115cc:	81800044 	addi	r6,r16,1
   115d0:	108f883a 	add	r7,r2,r2
   115d4:	3885883a 	add	r2,r7,r2
   115d8:	100ed7fa 	srli	r7,r2,31
   115dc:	216dc83a 	sub	r22,r4,r5
   115e0:	3589883a 	add	r4,r6,r22
   115e4:	3885883a 	add	r2,r7,r2
   115e8:	102bd07a 	srai	r21,r2,1
   115ec:	a80d883a 	mov	r6,r21
   115f0:	a900022e 	bgeu	r21,r4,115fc <__ssprint_r+0xa8>
   115f4:	202b883a 	mov	r21,r4
   115f8:	200d883a 	mov	r6,r4
   115fc:	18c1000c 	andi	r3,r3,1024
   11600:	18002a26 	beq	r3,zero,116ac <__ssprint_r+0x158>
   11604:	300b883a 	mov	r5,r6
   11608:	9809883a 	mov	r4,r19
   1160c:	00078dc0 	call	78dc <_malloc_r>
   11610:	1029883a 	mov	r20,r2
   11614:	10002c26 	beq	r2,zero,116c8 <__ssprint_r+0x174>
   11618:	89400417 	ldw	r5,16(r17)
   1161c:	b00d883a 	mov	r6,r22
   11620:	1009883a 	mov	r4,r2
   11624:	00080e80 	call	80e8 <memcpy>
   11628:	8880030b 	ldhu	r2,12(r17)
   1162c:	00fedfc4 	movi	r3,-1153
   11630:	10c4703a 	and	r2,r2,r3
   11634:	10802014 	ori	r2,r2,128
   11638:	8880030d 	sth	r2,12(r17)
   1163c:	a589883a 	add	r4,r20,r22
   11640:	adadc83a 	sub	r22,r21,r22
   11644:	8d400515 	stw	r21,20(r17)
   11648:	8d800215 	stw	r22,8(r17)
   1164c:	8d000415 	stw	r20,16(r17)
   11650:	89000015 	stw	r4,0(r17)
   11654:	802b883a 	mov	r21,r16
   11658:	802d883a 	mov	r22,r16
   1165c:	b00d883a 	mov	r6,r22
   11660:	e00b883a 	mov	r5,fp
   11664:	000fce80 	call	fce8 <memmove>
   11668:	88800217 	ldw	r2,8(r17)
   1166c:	89000017 	ldw	r4,0(r17)
   11670:	90c00217 	ldw	r3,8(r18)
   11674:	1545c83a 	sub	r2,r2,r21
   11678:	2589883a 	add	r4,r4,r22
   1167c:	88800215 	stw	r2,8(r17)
   11680:	89000015 	stw	r4,0(r17)
   11684:	1c21c83a 	sub	r16,r3,r16
   11688:	94000215 	stw	r16,8(r18)
   1168c:	80001726 	beq	r16,zero,116ec <__ssprint_r+0x198>
   11690:	bf000017 	ldw	fp,0(r23)
   11694:	bc000117 	ldw	r16,4(r23)
   11698:	bdc00204 	addi	r23,r23,8
   1169c:	003fc206 	br	115a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70115a8>
   116a0:	802b883a 	mov	r21,r16
   116a4:	802d883a 	mov	r22,r16
   116a8:	003fec06 	br	1165c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701165c>
   116ac:	9809883a 	mov	r4,r19
   116b0:	0010e400 	call	10e40 <_realloc_r>
   116b4:	1029883a 	mov	r20,r2
   116b8:	103fe01e 	bne	r2,zero,1163c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701163c>
   116bc:	89400417 	ldw	r5,16(r17)
   116c0:	9809883a 	mov	r4,r19
   116c4:	000f0180 	call	f018 <_free_r>
   116c8:	88c0030b 	ldhu	r3,12(r17)
   116cc:	00800304 	movi	r2,12
   116d0:	98800015 	stw	r2,0(r19)
   116d4:	18c01014 	ori	r3,r3,64
   116d8:	88c0030d 	sth	r3,12(r17)
   116dc:	00bfffc4 	movi	r2,-1
   116e0:	90000215 	stw	zero,8(r18)
   116e4:	90000115 	stw	zero,4(r18)
   116e8:	00000206 	br	116f4 <__ssprint_r+0x1a0>
   116ec:	90000115 	stw	zero,4(r18)
   116f0:	0005883a 	mov	r2,zero
   116f4:	dfc00917 	ldw	ra,36(sp)
   116f8:	df000817 	ldw	fp,32(sp)
   116fc:	ddc00717 	ldw	r23,28(sp)
   11700:	dd800617 	ldw	r22,24(sp)
   11704:	dd400517 	ldw	r21,20(sp)
   11708:	dd000417 	ldw	r20,16(sp)
   1170c:	dcc00317 	ldw	r19,12(sp)
   11710:	dc800217 	ldw	r18,8(sp)
   11714:	dc400117 	ldw	r17,4(sp)
   11718:	dc000017 	ldw	r16,0(sp)
   1171c:	dec00a04 	addi	sp,sp,40
   11720:	f800283a 	ret

00011724 <___svfiprintf_internal_r>:
   11724:	2880030b 	ldhu	r2,12(r5)
   11728:	deffc804 	addi	sp,sp,-224
   1172c:	dcc03115 	stw	r19,196(sp)
   11730:	dfc03715 	stw	ra,220(sp)
   11734:	df003615 	stw	fp,216(sp)
   11738:	ddc03515 	stw	r23,212(sp)
   1173c:	dd803415 	stw	r22,208(sp)
   11740:	dd403315 	stw	r21,204(sp)
   11744:	dd003215 	stw	r20,200(sp)
   11748:	dc803015 	stw	r18,192(sp)
   1174c:	dc402f15 	stw	r17,188(sp)
   11750:	dc002e15 	stw	r16,184(sp)
   11754:	d9402715 	stw	r5,156(sp)
   11758:	d9002a15 	stw	r4,168(sp)
   1175c:	1080200c 	andi	r2,r2,128
   11760:	d9c02315 	stw	r7,140(sp)
   11764:	3027883a 	mov	r19,r6
   11768:	10000226 	beq	r2,zero,11774 <___svfiprintf_internal_r+0x50>
   1176c:	28800417 	ldw	r2,16(r5)
   11770:	10041d26 	beq	r2,zero,127e8 <___svfiprintf_internal_r+0x10c4>
   11774:	dac01a04 	addi	r11,sp,104
   11778:	dac01e15 	stw	r11,120(sp)
   1177c:	d8801e17 	ldw	r2,120(sp)
   11780:	dac019c4 	addi	r11,sp,103
   11784:	dd402a17 	ldw	r21,168(sp)
   11788:	ddc02717 	ldw	r23,156(sp)
   1178c:	058000b4 	movhi	r22,2
   11790:	050000b4 	movhi	r20,2
   11794:	dac01f15 	stw	r11,124(sp)
   11798:	12d7c83a 	sub	r11,r2,r11
   1179c:	b5934404 	addi	r22,r22,19728
   117a0:	a5134004 	addi	r20,r20,19712
   117a4:	dec01a15 	stw	sp,104(sp)
   117a8:	d8001c15 	stw	zero,112(sp)
   117ac:	d8001b15 	stw	zero,108(sp)
   117b0:	d811883a 	mov	r8,sp
   117b4:	d8002915 	stw	zero,164(sp)
   117b8:	d8002515 	stw	zero,148(sp)
   117bc:	dac02b15 	stw	r11,172(sp)
   117c0:	98800007 	ldb	r2,0(r19)
   117c4:	1002dd26 	beq	r2,zero,1233c <___svfiprintf_internal_r+0xc18>
   117c8:	00c00944 	movi	r3,37
   117cc:	9823883a 	mov	r17,r19
   117d0:	10c0021e 	bne	r2,r3,117dc <___svfiprintf_internal_r+0xb8>
   117d4:	00001406 	br	11828 <___svfiprintf_internal_r+0x104>
   117d8:	10c00326 	beq	r2,r3,117e8 <___svfiprintf_internal_r+0xc4>
   117dc:	8c400044 	addi	r17,r17,1
   117e0:	88800007 	ldb	r2,0(r17)
   117e4:	103ffc1e 	bne	r2,zero,117d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70117d8>
   117e8:	8ce1c83a 	sub	r16,r17,r19
   117ec:	80000e26 	beq	r16,zero,11828 <___svfiprintf_internal_r+0x104>
   117f0:	d8c01c17 	ldw	r3,112(sp)
   117f4:	d8801b17 	ldw	r2,108(sp)
   117f8:	44c00015 	stw	r19,0(r8)
   117fc:	1c07883a 	add	r3,r3,r16
   11800:	10800044 	addi	r2,r2,1
   11804:	d8c01c15 	stw	r3,112(sp)
   11808:	44000115 	stw	r16,4(r8)
   1180c:	d8801b15 	stw	r2,108(sp)
   11810:	00c001c4 	movi	r3,7
   11814:	18831e16 	blt	r3,r2,12490 <___svfiprintf_internal_r+0xd6c>
   11818:	42000204 	addi	r8,r8,8
   1181c:	dac02517 	ldw	r11,148(sp)
   11820:	5c17883a 	add	r11,r11,r16
   11824:	dac02515 	stw	r11,148(sp)
   11828:	88800007 	ldb	r2,0(r17)
   1182c:	1002c526 	beq	r2,zero,12344 <___svfiprintf_internal_r+0xc20>
   11830:	88c00047 	ldb	r3,1(r17)
   11834:	8cc00044 	addi	r19,r17,1
   11838:	d8001d85 	stb	zero,118(sp)
   1183c:	0009883a 	mov	r4,zero
   11840:	000f883a 	mov	r7,zero
   11844:	043fffc4 	movi	r16,-1
   11848:	d8002415 	stw	zero,144(sp)
   1184c:	0025883a 	mov	r18,zero
   11850:	01401604 	movi	r5,88
   11854:	01800244 	movi	r6,9
   11858:	02800a84 	movi	r10,42
   1185c:	02401b04 	movi	r9,108
   11860:	9cc00044 	addi	r19,r19,1
   11864:	18bff804 	addi	r2,r3,-32
   11868:	2881dd36 	bltu	r5,r2,11fe0 <___svfiprintf_internal_r+0x8bc>
   1186c:	100490ba 	slli	r2,r2,2
   11870:	02c00074 	movhi	r11,1
   11874:	5ac62104 	addi	r11,r11,6276
   11878:	12c5883a 	add	r2,r2,r11
   1187c:	10800017 	ldw	r2,0(r2)
   11880:	1000683a 	jmp	r2
   11884:	00011a80 	call	11a8 <_ZN4Game14updateMovementEP6Entityi+0x1e4>
   11888:	00011fe0 	cmpeqi	zero,zero,1151
   1188c:	00011fe0 	cmpeqi	zero,zero,1151
   11890:	00011a74 	movhi	zero,1129
   11894:	00011fe0 	cmpeqi	zero,zero,1151
   11898:	00011fe0 	cmpeqi	zero,zero,1151
   1189c:	00011fe0 	cmpeqi	zero,zero,1151
   118a0:	00011fe0 	cmpeqi	zero,zero,1151
   118a4:	00011fe0 	cmpeqi	zero,zero,1151
   118a8:	00011fe0 	cmpeqi	zero,zero,1151
   118ac:	000119e8 	cmpgeui	zero,zero,1127
   118b0:	00011bc4 	movi	zero,1135
   118b4:	00011fe0 	cmpeqi	zero,zero,1151
   118b8:	00011a14 	movui	zero,1128
   118bc:	00012014 	movui	zero,1152
   118c0:	00011fe0 	cmpeqi	zero,zero,1151
   118c4:	00012008 	cmpgei	zero,zero,1152
   118c8:	00011fa8 	cmpgeui	zero,zero,1150
   118cc:	00011fa8 	cmpgeui	zero,zero,1150
   118d0:	00011fa8 	cmpgeui	zero,zero,1150
   118d4:	00011fa8 	cmpgeui	zero,zero,1150
   118d8:	00011fa8 	cmpgeui	zero,zero,1150
   118dc:	00011fa8 	cmpgeui	zero,zero,1150
   118e0:	00011fa8 	cmpgeui	zero,zero,1150
   118e4:	00011fa8 	cmpgeui	zero,zero,1150
   118e8:	00011fa8 	cmpgeui	zero,zero,1150
   118ec:	00011fe0 	cmpeqi	zero,zero,1151
   118f0:	00011fe0 	cmpeqi	zero,zero,1151
   118f4:	00011fe0 	cmpeqi	zero,zero,1151
   118f8:	00011fe0 	cmpeqi	zero,zero,1151
   118fc:	00011fe0 	cmpeqi	zero,zero,1151
   11900:	00011fe0 	cmpeqi	zero,zero,1151
   11904:	00011fe0 	cmpeqi	zero,zero,1151
   11908:	00011fe0 	cmpeqi	zero,zero,1151
   1190c:	00011fe0 	cmpeqi	zero,zero,1151
   11910:	00011fe0 	cmpeqi	zero,zero,1151
   11914:	00011f44 	movi	zero,1149
   11918:	00011fe0 	cmpeqi	zero,zero,1151
   1191c:	00011fe0 	cmpeqi	zero,zero,1151
   11920:	00011fe0 	cmpeqi	zero,zero,1151
   11924:	00011fe0 	cmpeqi	zero,zero,1151
   11928:	00011fe0 	cmpeqi	zero,zero,1151
   1192c:	00011fe0 	cmpeqi	zero,zero,1151
   11930:	00011fe0 	cmpeqi	zero,zero,1151
   11934:	00011fe0 	cmpeqi	zero,zero,1151
   11938:	00011fe0 	cmpeqi	zero,zero,1151
   1193c:	00011fe0 	cmpeqi	zero,zero,1151
   11940:	000120bc 	xorhi	zero,zero,1154
   11944:	00011fe0 	cmpeqi	zero,zero,1151
   11948:	00011fe0 	cmpeqi	zero,zero,1151
   1194c:	00011fe0 	cmpeqi	zero,zero,1151
   11950:	00011fe0 	cmpeqi	zero,zero,1151
   11954:	00011fe0 	cmpeqi	zero,zero,1151
   11958:	00012054 	movui	zero,1153
   1195c:	00011fe0 	cmpeqi	zero,zero,1151
   11960:	00011fe0 	cmpeqi	zero,zero,1151
   11964:	00011d88 	cmpgei	zero,zero,1142
   11968:	00011fe0 	cmpeqi	zero,zero,1151
   1196c:	00011fe0 	cmpeqi	zero,zero,1151
   11970:	00011fe0 	cmpeqi	zero,zero,1151
   11974:	00011fe0 	cmpeqi	zero,zero,1151
   11978:	00011fe0 	cmpeqi	zero,zero,1151
   1197c:	00011fe0 	cmpeqi	zero,zero,1151
   11980:	00011fe0 	cmpeqi	zero,zero,1151
   11984:	00011fe0 	cmpeqi	zero,zero,1151
   11988:	00011fe0 	cmpeqi	zero,zero,1151
   1198c:	00011fe0 	cmpeqi	zero,zero,1151
   11990:	00011c78 	rdprs	zero,zero,1137
   11994:	00011e24 	muli	zero,zero,1144
   11998:	00011fe0 	cmpeqi	zero,zero,1151
   1199c:	00011fe0 	cmpeqi	zero,zero,1151
   119a0:	00011fe0 	cmpeqi	zero,zero,1151
   119a4:	00011e18 	cmpnei	zero,zero,1144
   119a8:	00011e24 	muli	zero,zero,1144
   119ac:	00011fe0 	cmpeqi	zero,zero,1151
   119b0:	00011fe0 	cmpeqi	zero,zero,1151
   119b4:	00011e08 	cmpgei	zero,zero,1144
   119b8:	00011fe0 	cmpeqi	zero,zero,1151
   119bc:	00011dcc 	andi	zero,zero,1143
   119c0:	00011bd4 	movui	zero,1135
   119c4:	00011a20 	cmpeqi	zero,zero,1128
   119c8:	00011f38 	rdprs	zero,zero,1148
   119cc:	00011fe0 	cmpeqi	zero,zero,1151
   119d0:	00011eec 	andhi	zero,zero,1147
   119d4:	00011fe0 	cmpeqi	zero,zero,1151
   119d8:	00011b44 	movi	zero,1133
   119dc:	00011fe0 	cmpeqi	zero,zero,1151
   119e0:	00011fe0 	cmpeqi	zero,zero,1151
   119e4:	00011aa0 	cmpeqi	zero,zero,1130
   119e8:	dac02317 	ldw	r11,140(sp)
   119ec:	5ac00017 	ldw	r11,0(r11)
   119f0:	dac02415 	stw	r11,144(sp)
   119f4:	dac02317 	ldw	r11,140(sp)
   119f8:	58800104 	addi	r2,r11,4
   119fc:	dac02417 	ldw	r11,144(sp)
   11a00:	5802e90e 	bge	r11,zero,125a8 <___svfiprintf_internal_r+0xe84>
   11a04:	dac02417 	ldw	r11,144(sp)
   11a08:	d8802315 	stw	r2,140(sp)
   11a0c:	02d7c83a 	sub	r11,zero,r11
   11a10:	dac02415 	stw	r11,144(sp)
   11a14:	94800114 	ori	r18,r18,4
   11a18:	98c00007 	ldb	r3,0(r19)
   11a1c:	003f9006 	br	11860 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011860>
   11a20:	00800c04 	movi	r2,48
   11a24:	dac02317 	ldw	r11,140(sp)
   11a28:	d8801d05 	stb	r2,116(sp)
   11a2c:	00801e04 	movi	r2,120
   11a30:	d8801d45 	stb	r2,117(sp)
   11a34:	d8001d85 	stb	zero,118(sp)
   11a38:	58c00104 	addi	r3,r11,4
   11a3c:	5f000017 	ldw	fp,0(r11)
   11a40:	0013883a 	mov	r9,zero
   11a44:	90800094 	ori	r2,r18,2
   11a48:	80032b16 	blt	r16,zero,126f8 <___svfiprintf_internal_r+0xfd4>
   11a4c:	00bfdfc4 	movi	r2,-129
   11a50:	90a4703a 	and	r18,r18,r2
   11a54:	d8c02315 	stw	r3,140(sp)
   11a58:	94800094 	ori	r18,r18,2
   11a5c:	e002dc26 	beq	fp,zero,125d0 <___svfiprintf_internal_r+0xeac>
   11a60:	010000b4 	movhi	r4,2
   11a64:	2112d704 	addi	r4,r4,19292
   11a68:	0015883a 	mov	r10,zero
   11a6c:	d9002915 	stw	r4,164(sp)
   11a70:	00002306 	br	11b00 <___svfiprintf_internal_r+0x3dc>
   11a74:	94800054 	ori	r18,r18,1
   11a78:	98c00007 	ldb	r3,0(r19)
   11a7c:	003f7806 	br	11860 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011860>
   11a80:	38803fcc 	andi	r2,r7,255
   11a84:	1080201c 	xori	r2,r2,128
   11a88:	10bfe004 	addi	r2,r2,-128
   11a8c:	1002f31e 	bne	r2,zero,1265c <___svfiprintf_internal_r+0xf38>
   11a90:	01000044 	movi	r4,1
   11a94:	01c00804 	movi	r7,32
   11a98:	98c00007 	ldb	r3,0(r19)
   11a9c:	003f7006 	br	11860 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011860>
   11aa0:	21003fcc 	andi	r4,r4,255
   11aa4:	2003aa1e 	bne	r4,zero,12950 <___svfiprintf_internal_r+0x122c>
   11aa8:	008000b4 	movhi	r2,2
   11aac:	1092d704 	addi	r2,r2,19292
   11ab0:	d8802915 	stw	r2,164(sp)
   11ab4:	9080080c 	andi	r2,r18,32
   11ab8:	1000ba26 	beq	r2,zero,11da4 <___svfiprintf_internal_r+0x680>
   11abc:	dac02317 	ldw	r11,140(sp)
   11ac0:	5f000017 	ldw	fp,0(r11)
   11ac4:	5a400117 	ldw	r9,4(r11)
   11ac8:	5ac00204 	addi	r11,r11,8
   11acc:	dac02315 	stw	r11,140(sp)
   11ad0:	9080004c 	andi	r2,r18,1
   11ad4:	10029026 	beq	r2,zero,12518 <___svfiprintf_internal_r+0xdf4>
   11ad8:	e244b03a 	or	r2,fp,r9
   11adc:	1002d41e 	bne	r2,zero,12630 <___svfiprintf_internal_r+0xf0c>
   11ae0:	d8001d85 	stb	zero,118(sp)
   11ae4:	80030b16 	blt	r16,zero,12714 <___svfiprintf_internal_r+0xff0>
   11ae8:	00bfdfc4 	movi	r2,-129
   11aec:	90a4703a 	and	r18,r18,r2
   11af0:	0015883a 	mov	r10,zero
   11af4:	80002426 	beq	r16,zero,11b88 <___svfiprintf_internal_r+0x464>
   11af8:	0039883a 	mov	fp,zero
   11afc:	0013883a 	mov	r9,zero
   11b00:	d9002917 	ldw	r4,164(sp)
   11b04:	dc401a04 	addi	r17,sp,104
   11b08:	e08003cc 	andi	r2,fp,15
   11b0c:	4806973a 	slli	r3,r9,28
   11b10:	2085883a 	add	r2,r4,r2
   11b14:	e038d13a 	srli	fp,fp,4
   11b18:	10800003 	ldbu	r2,0(r2)
   11b1c:	4812d13a 	srli	r9,r9,4
   11b20:	8c7fffc4 	addi	r17,r17,-1
   11b24:	1f38b03a 	or	fp,r3,fp
   11b28:	88800005 	stb	r2,0(r17)
   11b2c:	e244b03a 	or	r2,fp,r9
   11b30:	103ff51e 	bne	r2,zero,11b08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b08>
   11b34:	dac01e17 	ldw	r11,120(sp)
   11b38:	5c57c83a 	sub	r11,r11,r17
   11b3c:	dac02115 	stw	r11,132(sp)
   11b40:	00001406 	br	11b94 <___svfiprintf_internal_r+0x470>
   11b44:	21003fcc 	andi	r4,r4,255
   11b48:	2003741e 	bne	r4,zero,1291c <___svfiprintf_internal_r+0x11f8>
   11b4c:	9080080c 	andi	r2,r18,32
   11b50:	10014526 	beq	r2,zero,12068 <___svfiprintf_internal_r+0x944>
   11b54:	dac02317 	ldw	r11,140(sp)
   11b58:	d8001d85 	stb	zero,118(sp)
   11b5c:	58c00204 	addi	r3,r11,8
   11b60:	5f000017 	ldw	fp,0(r11)
   11b64:	5a400117 	ldw	r9,4(r11)
   11b68:	8002d916 	blt	r16,zero,126d0 <___svfiprintf_internal_r+0xfac>
   11b6c:	013fdfc4 	movi	r4,-129
   11b70:	e244b03a 	or	r2,fp,r9
   11b74:	d8c02315 	stw	r3,140(sp)
   11b78:	9124703a 	and	r18,r18,r4
   11b7c:	0015883a 	mov	r10,zero
   11b80:	1000b91e 	bne	r2,zero,11e68 <___svfiprintf_internal_r+0x744>
   11b84:	8002e61e 	bne	r16,zero,12720 <___svfiprintf_internal_r+0xffc>
   11b88:	0021883a 	mov	r16,zero
   11b8c:	d8002115 	stw	zero,132(sp)
   11b90:	dc401a04 	addi	r17,sp,104
   11b94:	d8c02117 	ldw	r3,132(sp)
   11b98:	dc002015 	stw	r16,128(sp)
   11b9c:	80c0010e 	bge	r16,r3,11ba4 <___svfiprintf_internal_r+0x480>
   11ba0:	d8c02015 	stw	r3,128(sp)
   11ba4:	52803fcc 	andi	r10,r10,255
   11ba8:	5280201c 	xori	r10,r10,128
   11bac:	52bfe004 	addi	r10,r10,-128
   11bb0:	50003c26 	beq	r10,zero,11ca4 <___svfiprintf_internal_r+0x580>
   11bb4:	dac02017 	ldw	r11,128(sp)
   11bb8:	5ac00044 	addi	r11,r11,1
   11bbc:	dac02015 	stw	r11,128(sp)
   11bc0:	00003806 	br	11ca4 <___svfiprintf_internal_r+0x580>
   11bc4:	01000044 	movi	r4,1
   11bc8:	01c00ac4 	movi	r7,43
   11bcc:	98c00007 	ldb	r3,0(r19)
   11bd0:	003f2306 	br	11860 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011860>
   11bd4:	21003fcc 	andi	r4,r4,255
   11bd8:	2003481e 	bne	r4,zero,128fc <___svfiprintf_internal_r+0x11d8>
   11bdc:	9080080c 	andi	r2,r18,32
   11be0:	10013b26 	beq	r2,zero,120d0 <___svfiprintf_internal_r+0x9ac>
   11be4:	dac02317 	ldw	r11,140(sp)
   11be8:	d8001d85 	stb	zero,118(sp)
   11bec:	58800204 	addi	r2,r11,8
   11bf0:	5f000017 	ldw	fp,0(r11)
   11bf4:	5a400117 	ldw	r9,4(r11)
   11bf8:	8002a816 	blt	r16,zero,1269c <___svfiprintf_internal_r+0xf78>
   11bfc:	013fdfc4 	movi	r4,-129
   11c00:	e246b03a 	or	r3,fp,r9
   11c04:	d8802315 	stw	r2,140(sp)
   11c08:	9124703a 	and	r18,r18,r4
   11c0c:	18013c26 	beq	r3,zero,12100 <___svfiprintf_internal_r+0x9dc>
   11c10:	0015883a 	mov	r10,zero
   11c14:	dc401a04 	addi	r17,sp,104
   11c18:	e006d0fa 	srli	r3,fp,3
   11c1c:	4808977a 	slli	r4,r9,29
   11c20:	4812d0fa 	srli	r9,r9,3
   11c24:	e70001cc 	andi	fp,fp,7
   11c28:	e0800c04 	addi	r2,fp,48
   11c2c:	8c7fffc4 	addi	r17,r17,-1
   11c30:	20f8b03a 	or	fp,r4,r3
   11c34:	88800005 	stb	r2,0(r17)
   11c38:	e246b03a 	or	r3,fp,r9
   11c3c:	183ff61e 	bne	r3,zero,11c18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011c18>
   11c40:	90c0004c 	andi	r3,r18,1
   11c44:	1800a526 	beq	r3,zero,11edc <___svfiprintf_internal_r+0x7b8>
   11c48:	10803fcc 	andi	r2,r2,255
   11c4c:	1080201c 	xori	r2,r2,128
   11c50:	10bfe004 	addi	r2,r2,-128
   11c54:	00c00c04 	movi	r3,48
   11c58:	10ffb626 	beq	r2,r3,11b34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b34>
   11c5c:	88ffffc5 	stb	r3,-1(r17)
   11c60:	d8c01e17 	ldw	r3,120(sp)
   11c64:	88bfffc4 	addi	r2,r17,-1
   11c68:	1023883a 	mov	r17,r2
   11c6c:	1887c83a 	sub	r3,r3,r2
   11c70:	d8c02115 	stw	r3,132(sp)
   11c74:	003fc706 	br	11b94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b94>
   11c78:	dac02317 	ldw	r11,140(sp)
   11c7c:	00c00044 	movi	r3,1
   11c80:	d8c02015 	stw	r3,128(sp)
   11c84:	58800017 	ldw	r2,0(r11)
   11c88:	5ac00104 	addi	r11,r11,4
   11c8c:	d8001d85 	stb	zero,118(sp)
   11c90:	d8801005 	stb	r2,64(sp)
   11c94:	dac02315 	stw	r11,140(sp)
   11c98:	d8c02115 	stw	r3,132(sp)
   11c9c:	dc401004 	addi	r17,sp,64
   11ca0:	0021883a 	mov	r16,zero
   11ca4:	90c0008c 	andi	r3,r18,2
   11ca8:	d8c02215 	stw	r3,136(sp)
   11cac:	18000326 	beq	r3,zero,11cbc <___svfiprintf_internal_r+0x598>
   11cb0:	dac02017 	ldw	r11,128(sp)
   11cb4:	5ac00084 	addi	r11,r11,2
   11cb8:	dac02015 	stw	r11,128(sp)
   11cbc:	90c0210c 	andi	r3,r18,132
   11cc0:	d8c02615 	stw	r3,152(sp)
   11cc4:	1801131e 	bne	r3,zero,12114 <___svfiprintf_internal_r+0x9f0>
   11cc8:	dac02417 	ldw	r11,144(sp)
   11ccc:	d8c02017 	ldw	r3,128(sp)
   11cd0:	58f9c83a 	sub	fp,r11,r3
   11cd4:	07010f0e 	bge	zero,fp,12114 <___svfiprintf_internal_r+0x9f0>
   11cd8:	02400404 	movi	r9,16
   11cdc:	d8c01c17 	ldw	r3,112(sp)
   11ce0:	d8801b17 	ldw	r2,108(sp)
   11ce4:	4f02d60e 	bge	r9,fp,12840 <___svfiprintf_internal_r+0x111c>
   11ce8:	014000b4 	movhi	r5,2
   11cec:	29534404 	addi	r5,r5,19728
   11cf0:	d9402815 	stw	r5,160(sp)
   11cf4:	028001c4 	movi	r10,7
   11cf8:	00000306 	br	11d08 <___svfiprintf_internal_r+0x5e4>
   11cfc:	e73ffc04 	addi	fp,fp,-16
   11d00:	42000204 	addi	r8,r8,8
   11d04:	4f00150e 	bge	r9,fp,11d5c <___svfiprintf_internal_r+0x638>
   11d08:	18c00404 	addi	r3,r3,16
   11d0c:	10800044 	addi	r2,r2,1
   11d10:	45800015 	stw	r22,0(r8)
   11d14:	42400115 	stw	r9,4(r8)
   11d18:	d8c01c15 	stw	r3,112(sp)
   11d1c:	d8801b15 	stw	r2,108(sp)
   11d20:	50bff60e 	bge	r10,r2,11cfc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011cfc>
   11d24:	d9801a04 	addi	r6,sp,104
   11d28:	b80b883a 	mov	r5,r23
   11d2c:	a809883a 	mov	r4,r21
   11d30:	da402c15 	stw	r9,176(sp)
   11d34:	da802d15 	stw	r10,180(sp)
   11d38:	00115540 	call	11554 <__ssprint_r>
   11d3c:	da402c17 	ldw	r9,176(sp)
   11d40:	da802d17 	ldw	r10,180(sp)
   11d44:	1001851e 	bne	r2,zero,1235c <___svfiprintf_internal_r+0xc38>
   11d48:	e73ffc04 	addi	fp,fp,-16
   11d4c:	d8c01c17 	ldw	r3,112(sp)
   11d50:	d8801b17 	ldw	r2,108(sp)
   11d54:	d811883a 	mov	r8,sp
   11d58:	4f3feb16 	blt	r9,fp,11d08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011d08>
   11d5c:	dac02817 	ldw	r11,160(sp)
   11d60:	e0c7883a 	add	r3,fp,r3
   11d64:	10800044 	addi	r2,r2,1
   11d68:	42c00015 	stw	r11,0(r8)
   11d6c:	47000115 	stw	fp,4(r8)
   11d70:	d8c01c15 	stw	r3,112(sp)
   11d74:	d8801b15 	stw	r2,108(sp)
   11d78:	010001c4 	movi	r4,7
   11d7c:	2081ee16 	blt	r4,r2,12538 <___svfiprintf_internal_r+0xe14>
   11d80:	42000204 	addi	r8,r8,8
   11d84:	0000e506 	br	1211c <___svfiprintf_internal_r+0x9f8>
   11d88:	21003fcc 	andi	r4,r4,255
   11d8c:	2002dd1e 	bne	r4,zero,12904 <___svfiprintf_internal_r+0x11e0>
   11d90:	008000b4 	movhi	r2,2
   11d94:	1092d204 	addi	r2,r2,19272
   11d98:	d8802915 	stw	r2,164(sp)
   11d9c:	9080080c 	andi	r2,r18,32
   11da0:	103f461e 	bne	r2,zero,11abc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011abc>
   11da4:	9080040c 	andi	r2,r18,16
   11da8:	10022e1e 	bne	r2,zero,12664 <___svfiprintf_internal_r+0xf40>
   11dac:	9080100c 	andi	r2,r18,64
   11db0:	dac02317 	ldw	r11,140(sp)
   11db4:	10027326 	beq	r2,zero,12784 <___svfiprintf_internal_r+0x1060>
   11db8:	5f00000b 	ldhu	fp,0(r11)
   11dbc:	5ac00104 	addi	r11,r11,4
   11dc0:	0013883a 	mov	r9,zero
   11dc4:	dac02315 	stw	r11,140(sp)
   11dc8:	003f4106 	br	11ad0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011ad0>
   11dcc:	21003fcc 	andi	r4,r4,255
   11dd0:	2002e11e 	bne	r4,zero,12958 <___svfiprintf_internal_r+0x1234>
   11dd4:	9080080c 	andi	r2,r18,32
   11dd8:	1002011e 	bne	r2,zero,125e0 <___svfiprintf_internal_r+0xebc>
   11ddc:	9080040c 	andi	r2,r18,16
   11de0:	10023e1e 	bne	r2,zero,126dc <___svfiprintf_internal_r+0xfb8>
   11de4:	9480100c 	andi	r18,r18,64
   11de8:	90023c26 	beq	r18,zero,126dc <___svfiprintf_internal_r+0xfb8>
   11dec:	dac02317 	ldw	r11,140(sp)
   11df0:	58800017 	ldw	r2,0(r11)
   11df4:	5ac00104 	addi	r11,r11,4
   11df8:	dac02315 	stw	r11,140(sp)
   11dfc:	dac02517 	ldw	r11,148(sp)
   11e00:	12c0000d 	sth	r11,0(r2)
   11e04:	003e6e06 	br	117c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70117c0>
   11e08:	98c00007 	ldb	r3,0(r19)
   11e0c:	1a422926 	beq	r3,r9,126b4 <___svfiprintf_internal_r+0xf90>
   11e10:	94800414 	ori	r18,r18,16
   11e14:	003e9206 	br	11860 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011860>
   11e18:	94801014 	ori	r18,r18,64
   11e1c:	98c00007 	ldb	r3,0(r19)
   11e20:	003e8f06 	br	11860 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011860>
   11e24:	21003fcc 	andi	r4,r4,255
   11e28:	2002c71e 	bne	r4,zero,12948 <___svfiprintf_internal_r+0x1224>
   11e2c:	9080080c 	andi	r2,r18,32
   11e30:	10004926 	beq	r2,zero,11f58 <___svfiprintf_internal_r+0x834>
   11e34:	dac02317 	ldw	r11,140(sp)
   11e38:	58800117 	ldw	r2,4(r11)
   11e3c:	5f000017 	ldw	fp,0(r11)
   11e40:	5ac00204 	addi	r11,r11,8
   11e44:	dac02315 	stw	r11,140(sp)
   11e48:	1013883a 	mov	r9,r2
   11e4c:	10004b16 	blt	r2,zero,11f7c <___svfiprintf_internal_r+0x858>
   11e50:	da801d83 	ldbu	r10,118(sp)
   11e54:	8001cb16 	blt	r16,zero,12584 <___svfiprintf_internal_r+0xe60>
   11e58:	00ffdfc4 	movi	r3,-129
   11e5c:	e244b03a 	or	r2,fp,r9
   11e60:	90e4703a 	and	r18,r18,r3
   11e64:	103f4726 	beq	r2,zero,11b84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b84>
   11e68:	48008c26 	beq	r9,zero,1209c <___svfiprintf_internal_r+0x978>
   11e6c:	dc802015 	stw	r18,128(sp)
   11e70:	dc002115 	stw	r16,132(sp)
   11e74:	dc401a04 	addi	r17,sp,104
   11e78:	e021883a 	mov	r16,fp
   11e7c:	da002215 	stw	r8,136(sp)
   11e80:	5039883a 	mov	fp,r10
   11e84:	4825883a 	mov	r18,r9
   11e88:	8009883a 	mov	r4,r16
   11e8c:	900b883a 	mov	r5,r18
   11e90:	01800284 	movi	r6,10
   11e94:	000f883a 	mov	r7,zero
   11e98:	0014e540 	call	14e54 <__umoddi3>
   11e9c:	10800c04 	addi	r2,r2,48
   11ea0:	8c7fffc4 	addi	r17,r17,-1
   11ea4:	8009883a 	mov	r4,r16
   11ea8:	900b883a 	mov	r5,r18
   11eac:	88800005 	stb	r2,0(r17)
   11eb0:	01800284 	movi	r6,10
   11eb4:	000f883a 	mov	r7,zero
   11eb8:	00148dc0 	call	148dc <__udivdi3>
   11ebc:	1021883a 	mov	r16,r2
   11ec0:	10c4b03a 	or	r2,r2,r3
   11ec4:	1825883a 	mov	r18,r3
   11ec8:	103fef1e 	bne	r2,zero,11e88 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011e88>
   11ecc:	dc802017 	ldw	r18,128(sp)
   11ed0:	dc002117 	ldw	r16,132(sp)
   11ed4:	da002217 	ldw	r8,136(sp)
   11ed8:	e015883a 	mov	r10,fp
   11edc:	d8c01e17 	ldw	r3,120(sp)
   11ee0:	1c47c83a 	sub	r3,r3,r17
   11ee4:	d8c02115 	stw	r3,132(sp)
   11ee8:	003f2a06 	br	11b94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b94>
   11eec:	dac02317 	ldw	r11,140(sp)
   11ef0:	d8001d85 	stb	zero,118(sp)
   11ef4:	5c400017 	ldw	r17,0(r11)
   11ef8:	5f000104 	addi	fp,r11,4
   11efc:	88022f26 	beq	r17,zero,127bc <___svfiprintf_internal_r+0x1098>
   11f00:	80022516 	blt	r16,zero,12798 <___svfiprintf_internal_r+0x1074>
   11f04:	800d883a 	mov	r6,r16
   11f08:	000b883a 	mov	r5,zero
   11f0c:	8809883a 	mov	r4,r17
   11f10:	da002c15 	stw	r8,176(sp)
   11f14:	000fc040 	call	fc04 <memchr>
   11f18:	da002c17 	ldw	r8,176(sp)
   11f1c:	10026426 	beq	r2,zero,128b0 <___svfiprintf_internal_r+0x118c>
   11f20:	1445c83a 	sub	r2,r2,r17
   11f24:	d8802115 	stw	r2,132(sp)
   11f28:	da801d83 	ldbu	r10,118(sp)
   11f2c:	df002315 	stw	fp,140(sp)
   11f30:	0021883a 	mov	r16,zero
   11f34:	003f1706 	br	11b94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b94>
   11f38:	94800814 	ori	r18,r18,32
   11f3c:	98c00007 	ldb	r3,0(r19)
   11f40:	003e4706 	br	11860 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011860>
   11f44:	21003fcc 	andi	r4,r4,255
   11f48:	2002701e 	bne	r4,zero,1290c <___svfiprintf_internal_r+0x11e8>
   11f4c:	94800414 	ori	r18,r18,16
   11f50:	9080080c 	andi	r2,r18,32
   11f54:	103fb71e 	bne	r2,zero,11e34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011e34>
   11f58:	9080040c 	andi	r2,r18,16
   11f5c:	1001ab26 	beq	r2,zero,1260c <___svfiprintf_internal_r+0xee8>
   11f60:	dac02317 	ldw	r11,140(sp)
   11f64:	5f000017 	ldw	fp,0(r11)
   11f68:	5ac00104 	addi	r11,r11,4
   11f6c:	dac02315 	stw	r11,140(sp)
   11f70:	e013d7fa 	srai	r9,fp,31
   11f74:	4805883a 	mov	r2,r9
   11f78:	103fb50e 	bge	r2,zero,11e50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011e50>
   11f7c:	0739c83a 	sub	fp,zero,fp
   11f80:	02800b44 	movi	r10,45
   11f84:	e004c03a 	cmpne	r2,fp,zero
   11f88:	0253c83a 	sub	r9,zero,r9
   11f8c:	da801d85 	stb	r10,118(sp)
   11f90:	4893c83a 	sub	r9,r9,r2
   11f94:	80023016 	blt	r16,zero,12858 <___svfiprintf_internal_r+0x1134>
   11f98:	00bfdfc4 	movi	r2,-129
   11f9c:	90a4703a 	and	r18,r18,r2
   11fa0:	483fb21e 	bne	r9,zero,11e6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011e6c>
   11fa4:	00003d06 	br	1209c <___svfiprintf_internal_r+0x978>
   11fa8:	9817883a 	mov	r11,r19
   11fac:	d8002415 	stw	zero,144(sp)
   11fb0:	18bff404 	addi	r2,r3,-48
   11fb4:	0019883a 	mov	r12,zero
   11fb8:	58c00007 	ldb	r3,0(r11)
   11fbc:	630002a4 	muli	r12,r12,10
   11fc0:	9cc00044 	addi	r19,r19,1
   11fc4:	9817883a 	mov	r11,r19
   11fc8:	1319883a 	add	r12,r2,r12
   11fcc:	18bff404 	addi	r2,r3,-48
   11fd0:	30bff92e 	bgeu	r6,r2,11fb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011fb8>
   11fd4:	db002415 	stw	r12,144(sp)
   11fd8:	18bff804 	addi	r2,r3,-32
   11fdc:	28be232e 	bgeu	r5,r2,1186c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701186c>
   11fe0:	21003fcc 	andi	r4,r4,255
   11fe4:	20024b1e 	bne	r4,zero,12914 <___svfiprintf_internal_r+0x11f0>
   11fe8:	1800d626 	beq	r3,zero,12344 <___svfiprintf_internal_r+0xc20>
   11fec:	02c00044 	movi	r11,1
   11ff0:	dac02015 	stw	r11,128(sp)
   11ff4:	d8c01005 	stb	r3,64(sp)
   11ff8:	d8001d85 	stb	zero,118(sp)
   11ffc:	dac02115 	stw	r11,132(sp)
   12000:	dc401004 	addi	r17,sp,64
   12004:	003f2606 	br	11ca0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011ca0>
   12008:	94802014 	ori	r18,r18,128
   1200c:	98c00007 	ldb	r3,0(r19)
   12010:	003e1306 	br	11860 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011860>
   12014:	98c00007 	ldb	r3,0(r19)
   12018:	9ac00044 	addi	r11,r19,1
   1201c:	1a822b26 	beq	r3,r10,128cc <___svfiprintf_internal_r+0x11a8>
   12020:	18bff404 	addi	r2,r3,-48
   12024:	0021883a 	mov	r16,zero
   12028:	30821e36 	bltu	r6,r2,128a4 <___svfiprintf_internal_r+0x1180>
   1202c:	58c00007 	ldb	r3,0(r11)
   12030:	840002a4 	muli	r16,r16,10
   12034:	5cc00044 	addi	r19,r11,1
   12038:	9817883a 	mov	r11,r19
   1203c:	80a1883a 	add	r16,r16,r2
   12040:	18bff404 	addi	r2,r3,-48
   12044:	30bff92e 	bgeu	r6,r2,1202c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701202c>
   12048:	803e060e 	bge	r16,zero,11864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011864>
   1204c:	043fffc4 	movi	r16,-1
   12050:	003e0406 	br	11864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011864>
   12054:	21003fcc 	andi	r4,r4,255
   12058:	2002371e 	bne	r4,zero,12938 <___svfiprintf_internal_r+0x1214>
   1205c:	94800414 	ori	r18,r18,16
   12060:	9080080c 	andi	r2,r18,32
   12064:	103ebb1e 	bne	r2,zero,11b54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b54>
   12068:	9080040c 	andi	r2,r18,16
   1206c:	10013b26 	beq	r2,zero,1255c <___svfiprintf_internal_r+0xe38>
   12070:	dac02317 	ldw	r11,140(sp)
   12074:	d8001d85 	stb	zero,118(sp)
   12078:	0013883a 	mov	r9,zero
   1207c:	58800104 	addi	r2,r11,4
   12080:	5f000017 	ldw	fp,0(r11)
   12084:	80013d16 	blt	r16,zero,1257c <___svfiprintf_internal_r+0xe58>
   12088:	00ffdfc4 	movi	r3,-129
   1208c:	d8802315 	stw	r2,140(sp)
   12090:	90e4703a 	and	r18,r18,r3
   12094:	0015883a 	mov	r10,zero
   12098:	e03eba26 	beq	fp,zero,11b84 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b84>
   1209c:	00800244 	movi	r2,9
   120a0:	173f7236 	bltu	r2,fp,11e6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011e6c>
   120a4:	dac02b17 	ldw	r11,172(sp)
   120a8:	e7000c04 	addi	fp,fp,48
   120ac:	df0019c5 	stb	fp,103(sp)
   120b0:	dac02115 	stw	r11,132(sp)
   120b4:	dc4019c4 	addi	r17,sp,103
   120b8:	003eb606 	br	11b94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b94>
   120bc:	21003fcc 	andi	r4,r4,255
   120c0:	20021f1e 	bne	r4,zero,12940 <___svfiprintf_internal_r+0x121c>
   120c4:	94800414 	ori	r18,r18,16
   120c8:	9080080c 	andi	r2,r18,32
   120cc:	103ec51e 	bne	r2,zero,11be4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011be4>
   120d0:	9080040c 	andi	r2,r18,16
   120d4:	10016926 	beq	r2,zero,1267c <___svfiprintf_internal_r+0xf58>
   120d8:	dac02317 	ldw	r11,140(sp)
   120dc:	d8001d85 	stb	zero,118(sp)
   120e0:	0013883a 	mov	r9,zero
   120e4:	58800104 	addi	r2,r11,4
   120e8:	5f000017 	ldw	fp,0(r11)
   120ec:	80016b16 	blt	r16,zero,1269c <___svfiprintf_internal_r+0xf78>
   120f0:	00ffdfc4 	movi	r3,-129
   120f4:	d8802315 	stw	r2,140(sp)
   120f8:	90e4703a 	and	r18,r18,r3
   120fc:	e03ec41e 	bne	fp,zero,11c10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011c10>
   12100:	0015883a 	mov	r10,zero
   12104:	8001c226 	beq	r16,zero,12810 <___svfiprintf_internal_r+0x10ec>
   12108:	0039883a 	mov	fp,zero
   1210c:	0013883a 	mov	r9,zero
   12110:	003ec006 	br	11c14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011c14>
   12114:	d8c01c17 	ldw	r3,112(sp)
   12118:	d8801b17 	ldw	r2,108(sp)
   1211c:	d9001d87 	ldb	r4,118(sp)
   12120:	20000b26 	beq	r4,zero,12150 <___svfiprintf_internal_r+0xa2c>
   12124:	d9001d84 	addi	r4,sp,118
   12128:	18c00044 	addi	r3,r3,1
   1212c:	10800044 	addi	r2,r2,1
   12130:	41000015 	stw	r4,0(r8)
   12134:	01000044 	movi	r4,1
   12138:	41000115 	stw	r4,4(r8)
   1213c:	d8c01c15 	stw	r3,112(sp)
   12140:	d8801b15 	stw	r2,108(sp)
   12144:	010001c4 	movi	r4,7
   12148:	2080e116 	blt	r4,r2,124d0 <___svfiprintf_internal_r+0xdac>
   1214c:	42000204 	addi	r8,r8,8
   12150:	dac02217 	ldw	r11,136(sp)
   12154:	58000b26 	beq	r11,zero,12184 <___svfiprintf_internal_r+0xa60>
   12158:	d9001d04 	addi	r4,sp,116
   1215c:	18c00084 	addi	r3,r3,2
   12160:	10800044 	addi	r2,r2,1
   12164:	41000015 	stw	r4,0(r8)
   12168:	01000084 	movi	r4,2
   1216c:	41000115 	stw	r4,4(r8)
   12170:	d8c01c15 	stw	r3,112(sp)
   12174:	d8801b15 	stw	r2,108(sp)
   12178:	010001c4 	movi	r4,7
   1217c:	2080dd16 	blt	r4,r2,124f4 <___svfiprintf_internal_r+0xdd0>
   12180:	42000204 	addi	r8,r8,8
   12184:	dac02617 	ldw	r11,152(sp)
   12188:	01002004 	movi	r4,128
   1218c:	59008426 	beq	r11,r4,123a0 <___svfiprintf_internal_r+0xc7c>
   12190:	dac02117 	ldw	r11,132(sp)
   12194:	82e1c83a 	sub	r16,r16,r11
   12198:	0400270e 	bge	zero,r16,12238 <___svfiprintf_internal_r+0xb14>
   1219c:	01c00404 	movi	r7,16
   121a0:	3c016a0e 	bge	r7,r16,1274c <___svfiprintf_internal_r+0x1028>
   121a4:	014000b4 	movhi	r5,2
   121a8:	29534004 	addi	r5,r5,19712
   121ac:	d9402215 	stw	r5,136(sp)
   121b0:	070001c4 	movi	fp,7
   121b4:	00000306 	br	121c4 <___svfiprintf_internal_r+0xaa0>
   121b8:	843ffc04 	addi	r16,r16,-16
   121bc:	42000204 	addi	r8,r8,8
   121c0:	3c00130e 	bge	r7,r16,12210 <___svfiprintf_internal_r+0xaec>
   121c4:	18c00404 	addi	r3,r3,16
   121c8:	10800044 	addi	r2,r2,1
   121cc:	45000015 	stw	r20,0(r8)
   121d0:	41c00115 	stw	r7,4(r8)
   121d4:	d8c01c15 	stw	r3,112(sp)
   121d8:	d8801b15 	stw	r2,108(sp)
   121dc:	e0bff60e 	bge	fp,r2,121b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70121b8>
   121e0:	d9801a04 	addi	r6,sp,104
   121e4:	b80b883a 	mov	r5,r23
   121e8:	a809883a 	mov	r4,r21
   121ec:	d9c02c15 	stw	r7,176(sp)
   121f0:	00115540 	call	11554 <__ssprint_r>
   121f4:	d9c02c17 	ldw	r7,176(sp)
   121f8:	1000581e 	bne	r2,zero,1235c <___svfiprintf_internal_r+0xc38>
   121fc:	843ffc04 	addi	r16,r16,-16
   12200:	d8c01c17 	ldw	r3,112(sp)
   12204:	d8801b17 	ldw	r2,108(sp)
   12208:	d811883a 	mov	r8,sp
   1220c:	3c3fed16 	blt	r7,r16,121c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70121c4>
   12210:	dac02217 	ldw	r11,136(sp)
   12214:	1c07883a 	add	r3,r3,r16
   12218:	10800044 	addi	r2,r2,1
   1221c:	42c00015 	stw	r11,0(r8)
   12220:	44000115 	stw	r16,4(r8)
   12224:	d8c01c15 	stw	r3,112(sp)
   12228:	d8801b15 	stw	r2,108(sp)
   1222c:	010001c4 	movi	r4,7
   12230:	20809e16 	blt	r4,r2,124ac <___svfiprintf_internal_r+0xd88>
   12234:	42000204 	addi	r8,r8,8
   12238:	dac02117 	ldw	r11,132(sp)
   1223c:	10800044 	addi	r2,r2,1
   12240:	44400015 	stw	r17,0(r8)
   12244:	58c7883a 	add	r3,r11,r3
   12248:	42c00115 	stw	r11,4(r8)
   1224c:	d8c01c15 	stw	r3,112(sp)
   12250:	d8801b15 	stw	r2,108(sp)
   12254:	010001c4 	movi	r4,7
   12258:	20807f16 	blt	r4,r2,12458 <___svfiprintf_internal_r+0xd34>
   1225c:	42000204 	addi	r8,r8,8
   12260:	9480010c 	andi	r18,r18,4
   12264:	90002926 	beq	r18,zero,1230c <___svfiprintf_internal_r+0xbe8>
   12268:	dac02417 	ldw	r11,144(sp)
   1226c:	d8802017 	ldw	r2,128(sp)
   12270:	58a1c83a 	sub	r16,r11,r2
   12274:	0400250e 	bge	zero,r16,1230c <___svfiprintf_internal_r+0xbe8>
   12278:	04400404 	movi	r17,16
   1227c:	d8801b17 	ldw	r2,108(sp)
   12280:	8c017c0e 	bge	r17,r16,12874 <___svfiprintf_internal_r+0x1150>
   12284:	014000b4 	movhi	r5,2
   12288:	29534404 	addi	r5,r5,19728
   1228c:	d9402815 	stw	r5,160(sp)
   12290:	048001c4 	movi	r18,7
   12294:	00000306 	br	122a4 <___svfiprintf_internal_r+0xb80>
   12298:	843ffc04 	addi	r16,r16,-16
   1229c:	42000204 	addi	r8,r8,8
   122a0:	8c00110e 	bge	r17,r16,122e8 <___svfiprintf_internal_r+0xbc4>
   122a4:	18c00404 	addi	r3,r3,16
   122a8:	10800044 	addi	r2,r2,1
   122ac:	45800015 	stw	r22,0(r8)
   122b0:	44400115 	stw	r17,4(r8)
   122b4:	d8c01c15 	stw	r3,112(sp)
   122b8:	d8801b15 	stw	r2,108(sp)
   122bc:	90bff60e 	bge	r18,r2,12298 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012298>
   122c0:	d9801a04 	addi	r6,sp,104
   122c4:	b80b883a 	mov	r5,r23
   122c8:	a809883a 	mov	r4,r21
   122cc:	00115540 	call	11554 <__ssprint_r>
   122d0:	1000221e 	bne	r2,zero,1235c <___svfiprintf_internal_r+0xc38>
   122d4:	843ffc04 	addi	r16,r16,-16
   122d8:	d8c01c17 	ldw	r3,112(sp)
   122dc:	d8801b17 	ldw	r2,108(sp)
   122e0:	d811883a 	mov	r8,sp
   122e4:	8c3fef16 	blt	r17,r16,122a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70122a4>
   122e8:	dac02817 	ldw	r11,160(sp)
   122ec:	1c07883a 	add	r3,r3,r16
   122f0:	10800044 	addi	r2,r2,1
   122f4:	42c00015 	stw	r11,0(r8)
   122f8:	44000115 	stw	r16,4(r8)
   122fc:	d8c01c15 	stw	r3,112(sp)
   12300:	d8801b15 	stw	r2,108(sp)
   12304:	010001c4 	movi	r4,7
   12308:	2080aa16 	blt	r4,r2,125b4 <___svfiprintf_internal_r+0xe90>
   1230c:	d8802417 	ldw	r2,144(sp)
   12310:	dac02017 	ldw	r11,128(sp)
   12314:	12c0010e 	bge	r2,r11,1231c <___svfiprintf_internal_r+0xbf8>
   12318:	5805883a 	mov	r2,r11
   1231c:	dac02517 	ldw	r11,148(sp)
   12320:	5897883a 	add	r11,r11,r2
   12324:	dac02515 	stw	r11,148(sp)
   12328:	1800531e 	bne	r3,zero,12478 <___svfiprintf_internal_r+0xd54>
   1232c:	98800007 	ldb	r2,0(r19)
   12330:	d8001b15 	stw	zero,108(sp)
   12334:	d811883a 	mov	r8,sp
   12338:	103d231e 	bne	r2,zero,117c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70117c8>
   1233c:	9823883a 	mov	r17,r19
   12340:	003d3906 	br	11828 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011828>
   12344:	d8801c17 	ldw	r2,112(sp)
   12348:	10000426 	beq	r2,zero,1235c <___svfiprintf_internal_r+0xc38>
   1234c:	d9402717 	ldw	r5,156(sp)
   12350:	d9002a17 	ldw	r4,168(sp)
   12354:	d9801a04 	addi	r6,sp,104
   12358:	00115540 	call	11554 <__ssprint_r>
   1235c:	dac02717 	ldw	r11,156(sp)
   12360:	d8802517 	ldw	r2,148(sp)
   12364:	58c0030b 	ldhu	r3,12(r11)
   12368:	18c0100c 	andi	r3,r3,64
   1236c:	1801381e 	bne	r3,zero,12850 <___svfiprintf_internal_r+0x112c>
   12370:	dfc03717 	ldw	ra,220(sp)
   12374:	df003617 	ldw	fp,216(sp)
   12378:	ddc03517 	ldw	r23,212(sp)
   1237c:	dd803417 	ldw	r22,208(sp)
   12380:	dd403317 	ldw	r21,204(sp)
   12384:	dd003217 	ldw	r20,200(sp)
   12388:	dcc03117 	ldw	r19,196(sp)
   1238c:	dc803017 	ldw	r18,192(sp)
   12390:	dc402f17 	ldw	r17,188(sp)
   12394:	dc002e17 	ldw	r16,184(sp)
   12398:	dec03804 	addi	sp,sp,224
   1239c:	f800283a 	ret
   123a0:	dac02417 	ldw	r11,144(sp)
   123a4:	d9002017 	ldw	r4,128(sp)
   123a8:	5939c83a 	sub	fp,r11,r4
   123ac:	073f780e 	bge	zero,fp,12190 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012190>
   123b0:	02400404 	movi	r9,16
   123b4:	4f01370e 	bge	r9,fp,12894 <___svfiprintf_internal_r+0x1170>
   123b8:	02c000b4 	movhi	r11,2
   123bc:	5ad34004 	addi	r11,r11,19712
   123c0:	dac02215 	stw	r11,136(sp)
   123c4:	028001c4 	movi	r10,7
   123c8:	00000306 	br	123d8 <___svfiprintf_internal_r+0xcb4>
   123cc:	e73ffc04 	addi	fp,fp,-16
   123d0:	42000204 	addi	r8,r8,8
   123d4:	4f00150e 	bge	r9,fp,1242c <___svfiprintf_internal_r+0xd08>
   123d8:	18c00404 	addi	r3,r3,16
   123dc:	10800044 	addi	r2,r2,1
   123e0:	45000015 	stw	r20,0(r8)
   123e4:	42400115 	stw	r9,4(r8)
   123e8:	d8c01c15 	stw	r3,112(sp)
   123ec:	d8801b15 	stw	r2,108(sp)
   123f0:	50bff60e 	bge	r10,r2,123cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123cc>
   123f4:	d9801a04 	addi	r6,sp,104
   123f8:	b80b883a 	mov	r5,r23
   123fc:	a809883a 	mov	r4,r21
   12400:	da402c15 	stw	r9,176(sp)
   12404:	da802d15 	stw	r10,180(sp)
   12408:	00115540 	call	11554 <__ssprint_r>
   1240c:	da402c17 	ldw	r9,176(sp)
   12410:	da802d17 	ldw	r10,180(sp)
   12414:	103fd11e 	bne	r2,zero,1235c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701235c>
   12418:	e73ffc04 	addi	fp,fp,-16
   1241c:	d8c01c17 	ldw	r3,112(sp)
   12420:	d8801b17 	ldw	r2,108(sp)
   12424:	d811883a 	mov	r8,sp
   12428:	4f3feb16 	blt	r9,fp,123d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70123d8>
   1242c:	dac02217 	ldw	r11,136(sp)
   12430:	1f07883a 	add	r3,r3,fp
   12434:	10800044 	addi	r2,r2,1
   12438:	42c00015 	stw	r11,0(r8)
   1243c:	47000115 	stw	fp,4(r8)
   12440:	d8c01c15 	stw	r3,112(sp)
   12444:	d8801b15 	stw	r2,108(sp)
   12448:	010001c4 	movi	r4,7
   1244c:	2080b616 	blt	r4,r2,12728 <___svfiprintf_internal_r+0x1004>
   12450:	42000204 	addi	r8,r8,8
   12454:	003f4e06 	br	12190 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012190>
   12458:	d9801a04 	addi	r6,sp,104
   1245c:	b80b883a 	mov	r5,r23
   12460:	a809883a 	mov	r4,r21
   12464:	00115540 	call	11554 <__ssprint_r>
   12468:	103fbc1e 	bne	r2,zero,1235c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701235c>
   1246c:	d8c01c17 	ldw	r3,112(sp)
   12470:	d811883a 	mov	r8,sp
   12474:	003f7a06 	br	12260 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012260>
   12478:	d9801a04 	addi	r6,sp,104
   1247c:	b80b883a 	mov	r5,r23
   12480:	a809883a 	mov	r4,r21
   12484:	00115540 	call	11554 <__ssprint_r>
   12488:	103fa826 	beq	r2,zero,1232c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701232c>
   1248c:	003fb306 	br	1235c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701235c>
   12490:	d9801a04 	addi	r6,sp,104
   12494:	b80b883a 	mov	r5,r23
   12498:	a809883a 	mov	r4,r21
   1249c:	00115540 	call	11554 <__ssprint_r>
   124a0:	103fae1e 	bne	r2,zero,1235c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701235c>
   124a4:	d811883a 	mov	r8,sp
   124a8:	003cdc06 	br	1181c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701181c>
   124ac:	d9801a04 	addi	r6,sp,104
   124b0:	b80b883a 	mov	r5,r23
   124b4:	a809883a 	mov	r4,r21
   124b8:	00115540 	call	11554 <__ssprint_r>
   124bc:	103fa71e 	bne	r2,zero,1235c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701235c>
   124c0:	d8c01c17 	ldw	r3,112(sp)
   124c4:	d8801b17 	ldw	r2,108(sp)
   124c8:	d811883a 	mov	r8,sp
   124cc:	003f5a06 	br	12238 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012238>
   124d0:	d9801a04 	addi	r6,sp,104
   124d4:	b80b883a 	mov	r5,r23
   124d8:	a809883a 	mov	r4,r21
   124dc:	00115540 	call	11554 <__ssprint_r>
   124e0:	103f9e1e 	bne	r2,zero,1235c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701235c>
   124e4:	d8c01c17 	ldw	r3,112(sp)
   124e8:	d8801b17 	ldw	r2,108(sp)
   124ec:	d811883a 	mov	r8,sp
   124f0:	003f1706 	br	12150 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012150>
   124f4:	d9801a04 	addi	r6,sp,104
   124f8:	b80b883a 	mov	r5,r23
   124fc:	a809883a 	mov	r4,r21
   12500:	00115540 	call	11554 <__ssprint_r>
   12504:	103f951e 	bne	r2,zero,1235c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701235c>
   12508:	d8c01c17 	ldw	r3,112(sp)
   1250c:	d8801b17 	ldw	r2,108(sp)
   12510:	d811883a 	mov	r8,sp
   12514:	003f1b06 	br	12184 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012184>
   12518:	d8001d85 	stb	zero,118(sp)
   1251c:	80007b16 	blt	r16,zero,1270c <___svfiprintf_internal_r+0xfe8>
   12520:	00ffdfc4 	movi	r3,-129
   12524:	e244b03a 	or	r2,fp,r9
   12528:	90e4703a 	and	r18,r18,r3
   1252c:	103d7026 	beq	r2,zero,11af0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011af0>
   12530:	0015883a 	mov	r10,zero
   12534:	003d7206 	br	11b00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b00>
   12538:	d9801a04 	addi	r6,sp,104
   1253c:	b80b883a 	mov	r5,r23
   12540:	a809883a 	mov	r4,r21
   12544:	00115540 	call	11554 <__ssprint_r>
   12548:	103f841e 	bne	r2,zero,1235c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701235c>
   1254c:	d8c01c17 	ldw	r3,112(sp)
   12550:	d8801b17 	ldw	r2,108(sp)
   12554:	d811883a 	mov	r8,sp
   12558:	003ef006 	br	1211c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701211c>
   1255c:	9080100c 	andi	r2,r18,64
   12560:	d8001d85 	stb	zero,118(sp)
   12564:	dac02317 	ldw	r11,140(sp)
   12568:	10008126 	beq	r2,zero,12770 <___svfiprintf_internal_r+0x104c>
   1256c:	58800104 	addi	r2,r11,4
   12570:	5f00000b 	ldhu	fp,0(r11)
   12574:	0013883a 	mov	r9,zero
   12578:	803ec30e 	bge	r16,zero,12088 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012088>
   1257c:	d8802315 	stw	r2,140(sp)
   12580:	0015883a 	mov	r10,zero
   12584:	e244b03a 	or	r2,fp,r9
   12588:	103e371e 	bne	r2,zero,11e68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011e68>
   1258c:	00800044 	movi	r2,1
   12590:	10803fcc 	andi	r2,r2,255
   12594:	00c00044 	movi	r3,1
   12598:	10c06126 	beq	r2,r3,12720 <___svfiprintf_internal_r+0xffc>
   1259c:	00c00084 	movi	r3,2
   125a0:	10fd5526 	beq	r2,r3,11af8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011af8>
   125a4:	003ed806 	br	12108 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012108>
   125a8:	d8802315 	stw	r2,140(sp)
   125ac:	98c00007 	ldb	r3,0(r19)
   125b0:	003cab06 	br	11860 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011860>
   125b4:	d9801a04 	addi	r6,sp,104
   125b8:	b80b883a 	mov	r5,r23
   125bc:	a809883a 	mov	r4,r21
   125c0:	00115540 	call	11554 <__ssprint_r>
   125c4:	103f651e 	bne	r2,zero,1235c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701235c>
   125c8:	d8c01c17 	ldw	r3,112(sp)
   125cc:	003f4f06 	br	1230c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701230c>
   125d0:	008000b4 	movhi	r2,2
   125d4:	1092d704 	addi	r2,r2,19292
   125d8:	d8802915 	stw	r2,164(sp)
   125dc:	003d4406 	br	11af0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011af0>
   125e0:	dac02317 	ldw	r11,140(sp)
   125e4:	58800017 	ldw	r2,0(r11)
   125e8:	dac02517 	ldw	r11,148(sp)
   125ec:	5807d7fa 	srai	r3,r11,31
   125f0:	dac02317 	ldw	r11,140(sp)
   125f4:	10c00115 	stw	r3,4(r2)
   125f8:	5ac00104 	addi	r11,r11,4
   125fc:	dac02315 	stw	r11,140(sp)
   12600:	dac02517 	ldw	r11,148(sp)
   12604:	12c00015 	stw	r11,0(r2)
   12608:	003c6d06 	br	117c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70117c0>
   1260c:	9080100c 	andi	r2,r18,64
   12610:	dac02317 	ldw	r11,140(sp)
   12614:	103e5326 	beq	r2,zero,11f64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011f64>
   12618:	5f00000f 	ldh	fp,0(r11)
   1261c:	5ac00104 	addi	r11,r11,4
   12620:	dac02315 	stw	r11,140(sp)
   12624:	e013d7fa 	srai	r9,fp,31
   12628:	4805883a 	mov	r2,r9
   1262c:	003e0706 	br	11e4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011e4c>
   12630:	00800c04 	movi	r2,48
   12634:	d8801d05 	stb	r2,116(sp)
   12638:	d8c01d45 	stb	r3,117(sp)
   1263c:	d8001d85 	stb	zero,118(sp)
   12640:	90800094 	ori	r2,r18,2
   12644:	80008f16 	blt	r16,zero,12884 <___svfiprintf_internal_r+0x1160>
   12648:	00bfdfc4 	movi	r2,-129
   1264c:	90a4703a 	and	r18,r18,r2
   12650:	94800094 	ori	r18,r18,2
   12654:	0015883a 	mov	r10,zero
   12658:	003d2906 	br	11b00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b00>
   1265c:	98c00007 	ldb	r3,0(r19)
   12660:	003c7f06 	br	11860 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011860>
   12664:	dac02317 	ldw	r11,140(sp)
   12668:	0013883a 	mov	r9,zero
   1266c:	5f000017 	ldw	fp,0(r11)
   12670:	5ac00104 	addi	r11,r11,4
   12674:	dac02315 	stw	r11,140(sp)
   12678:	003d1506 	br	11ad0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011ad0>
   1267c:	9080100c 	andi	r2,r18,64
   12680:	d8001d85 	stb	zero,118(sp)
   12684:	dac02317 	ldw	r11,140(sp)
   12688:	10003426 	beq	r2,zero,1275c <___svfiprintf_internal_r+0x1038>
   1268c:	58800104 	addi	r2,r11,4
   12690:	5f00000b 	ldhu	fp,0(r11)
   12694:	0013883a 	mov	r9,zero
   12698:	803e950e 	bge	r16,zero,120f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70120f0>
   1269c:	e246b03a 	or	r3,fp,r9
   126a0:	d8802315 	stw	r2,140(sp)
   126a4:	183d5a1e 	bne	r3,zero,11c10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011c10>
   126a8:	0015883a 	mov	r10,zero
   126ac:	0005883a 	mov	r2,zero
   126b0:	003fb706 	br	12590 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012590>
   126b4:	98c00043 	ldbu	r3,1(r19)
   126b8:	94800814 	ori	r18,r18,32
   126bc:	9cc00044 	addi	r19,r19,1
   126c0:	18c03fcc 	andi	r3,r3,255
   126c4:	18c0201c 	xori	r3,r3,128
   126c8:	18ffe004 	addi	r3,r3,-128
   126cc:	003c6406 	br	11860 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011860>
   126d0:	d8c02315 	stw	r3,140(sp)
   126d4:	0015883a 	mov	r10,zero
   126d8:	003faa06 	br	12584 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012584>
   126dc:	dac02317 	ldw	r11,140(sp)
   126e0:	58800017 	ldw	r2,0(r11)
   126e4:	5ac00104 	addi	r11,r11,4
   126e8:	dac02315 	stw	r11,140(sp)
   126ec:	dac02517 	ldw	r11,148(sp)
   126f0:	12c00015 	stw	r11,0(r2)
   126f4:	003c3206 	br	117c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70117c0>
   126f8:	010000b4 	movhi	r4,2
   126fc:	2112d704 	addi	r4,r4,19292
   12700:	d9002915 	stw	r4,164(sp)
   12704:	d8c02315 	stw	r3,140(sp)
   12708:	1025883a 	mov	r18,r2
   1270c:	e244b03a 	or	r2,fp,r9
   12710:	103f871e 	bne	r2,zero,12530 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012530>
   12714:	0015883a 	mov	r10,zero
   12718:	00800084 	movi	r2,2
   1271c:	003f9c06 	br	12590 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012590>
   12720:	0039883a 	mov	fp,zero
   12724:	003e5f06 	br	120a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70120a4>
   12728:	d9801a04 	addi	r6,sp,104
   1272c:	b80b883a 	mov	r5,r23
   12730:	a809883a 	mov	r4,r21
   12734:	00115540 	call	11554 <__ssprint_r>
   12738:	103f081e 	bne	r2,zero,1235c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701235c>
   1273c:	d8c01c17 	ldw	r3,112(sp)
   12740:	d8801b17 	ldw	r2,108(sp)
   12744:	d811883a 	mov	r8,sp
   12748:	003e9106 	br	12190 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012190>
   1274c:	010000b4 	movhi	r4,2
   12750:	21134004 	addi	r4,r4,19712
   12754:	d9002215 	stw	r4,136(sp)
   12758:	003ead06 	br	12210 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012210>
   1275c:	58800104 	addi	r2,r11,4
   12760:	5f000017 	ldw	fp,0(r11)
   12764:	0013883a 	mov	r9,zero
   12768:	803e610e 	bge	r16,zero,120f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70120f0>
   1276c:	003fcb06 	br	1269c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701269c>
   12770:	58800104 	addi	r2,r11,4
   12774:	5f000017 	ldw	fp,0(r11)
   12778:	0013883a 	mov	r9,zero
   1277c:	803e420e 	bge	r16,zero,12088 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012088>
   12780:	003f7e06 	br	1257c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701257c>
   12784:	5f000017 	ldw	fp,0(r11)
   12788:	5ac00104 	addi	r11,r11,4
   1278c:	0013883a 	mov	r9,zero
   12790:	dac02315 	stw	r11,140(sp)
   12794:	003cce06 	br	11ad0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011ad0>
   12798:	8809883a 	mov	r4,r17
   1279c:	da002c15 	stw	r8,176(sp)
   127a0:	00089900 	call	8990 <strlen>
   127a4:	d8802115 	stw	r2,132(sp)
   127a8:	da801d83 	ldbu	r10,118(sp)
   127ac:	df002315 	stw	fp,140(sp)
   127b0:	0021883a 	mov	r16,zero
   127b4:	da002c17 	ldw	r8,176(sp)
   127b8:	003cf606 	br	11b94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b94>
   127bc:	00800184 	movi	r2,6
   127c0:	1400012e 	bgeu	r2,r16,127c8 <___svfiprintf_internal_r+0x10a4>
   127c4:	1021883a 	mov	r16,r2
   127c8:	dc002115 	stw	r16,132(sp)
   127cc:	8005883a 	mov	r2,r16
   127d0:	80003c16 	blt	r16,zero,128c4 <___svfiprintf_internal_r+0x11a0>
   127d4:	044000b4 	movhi	r17,2
   127d8:	d8802015 	stw	r2,128(sp)
   127dc:	df002315 	stw	fp,140(sp)
   127e0:	8c52dc04 	addi	r17,r17,19312
   127e4:	003d2e06 	br	11ca0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011ca0>
   127e8:	04001004 	movi	r16,64
   127ec:	800b883a 	mov	r5,r16
   127f0:	00078dc0 	call	78dc <_malloc_r>
   127f4:	dac02717 	ldw	r11,156(sp)
   127f8:	58800015 	stw	r2,0(r11)
   127fc:	58800415 	stw	r2,16(r11)
   12800:	10004826 	beq	r2,zero,12924 <___svfiprintf_internal_r+0x1200>
   12804:	dac02717 	ldw	r11,156(sp)
   12808:	5c000515 	stw	r16,20(r11)
   1280c:	003bd906 	br	11774 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011774>
   12810:	9080004c 	andi	r2,r18,1
   12814:	0015883a 	mov	r10,zero
   12818:	10000626 	beq	r2,zero,12834 <___svfiprintf_internal_r+0x1110>
   1281c:	dac02b17 	ldw	r11,172(sp)
   12820:	00800c04 	movi	r2,48
   12824:	d88019c5 	stb	r2,103(sp)
   12828:	dac02115 	stw	r11,132(sp)
   1282c:	dc4019c4 	addi	r17,sp,103
   12830:	003cd806 	br	11b94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b94>
   12834:	d8002115 	stw	zero,132(sp)
   12838:	dc401a04 	addi	r17,sp,104
   1283c:	003cd506 	br	11b94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b94>
   12840:	010000b4 	movhi	r4,2
   12844:	21134404 	addi	r4,r4,19728
   12848:	d9002815 	stw	r4,160(sp)
   1284c:	003d4306 	br	11d5c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011d5c>
   12850:	00bfffc4 	movi	r2,-1
   12854:	003ec606 	br	12370 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012370>
   12858:	00800044 	movi	r2,1
   1285c:	10803fcc 	andi	r2,r2,255
   12860:	00c00044 	movi	r3,1
   12864:	10fd8026 	beq	r2,r3,11e68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011e68>
   12868:	00c00084 	movi	r3,2
   1286c:	10fca426 	beq	r2,r3,11b00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b00>
   12870:	003ce806 	br	11c14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011c14>
   12874:	010000b4 	movhi	r4,2
   12878:	21134404 	addi	r4,r4,19728
   1287c:	d9002815 	stw	r4,160(sp)
   12880:	003e9906 	br	122e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70122e8>
   12884:	1025883a 	mov	r18,r2
   12888:	0015883a 	mov	r10,zero
   1288c:	00800084 	movi	r2,2
   12890:	003ff206 	br	1285c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701285c>
   12894:	014000b4 	movhi	r5,2
   12898:	29534004 	addi	r5,r5,19712
   1289c:	d9402215 	stw	r5,136(sp)
   128a0:	003ee206 	br	1242c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701242c>
   128a4:	5827883a 	mov	r19,r11
   128a8:	0021883a 	mov	r16,zero
   128ac:	003bed06 	br	11864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011864>
   128b0:	dc002115 	stw	r16,132(sp)
   128b4:	da801d83 	ldbu	r10,118(sp)
   128b8:	df002315 	stw	fp,140(sp)
   128bc:	0021883a 	mov	r16,zero
   128c0:	003cb406 	br	11b94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b94>
   128c4:	0005883a 	mov	r2,zero
   128c8:	003fc206 	br	127d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70127d4>
   128cc:	d8802317 	ldw	r2,140(sp)
   128d0:	98c00043 	ldbu	r3,1(r19)
   128d4:	5827883a 	mov	r19,r11
   128d8:	14000017 	ldw	r16,0(r2)
   128dc:	10800104 	addi	r2,r2,4
   128e0:	d8802315 	stw	r2,140(sp)
   128e4:	803f760e 	bge	r16,zero,126c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70126c0>
   128e8:	18c03fcc 	andi	r3,r3,255
   128ec:	18c0201c 	xori	r3,r3,128
   128f0:	043fffc4 	movi	r16,-1
   128f4:	18ffe004 	addi	r3,r3,-128
   128f8:	003bd906 	br	11860 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011860>
   128fc:	d9c01d85 	stb	r7,118(sp)
   12900:	003cb606 	br	11bdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011bdc>
   12904:	d9c01d85 	stb	r7,118(sp)
   12908:	003d2106 	br	11d90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011d90>
   1290c:	d9c01d85 	stb	r7,118(sp)
   12910:	003d8e06 	br	11f4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011f4c>
   12914:	d9c01d85 	stb	r7,118(sp)
   12918:	003db306 	br	11fe8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011fe8>
   1291c:	d9c01d85 	stb	r7,118(sp)
   12920:	003c8a06 	br	11b4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011b4c>
   12924:	dac02a17 	ldw	r11,168(sp)
   12928:	00800304 	movi	r2,12
   1292c:	58800015 	stw	r2,0(r11)
   12930:	00bfffc4 	movi	r2,-1
   12934:	003e8e06 	br	12370 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012370>
   12938:	d9c01d85 	stb	r7,118(sp)
   1293c:	003dc706 	br	1205c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701205c>
   12940:	d9c01d85 	stb	r7,118(sp)
   12944:	003ddf06 	br	120c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70120c4>
   12948:	d9c01d85 	stb	r7,118(sp)
   1294c:	003d3706 	br	11e2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011e2c>
   12950:	d9c01d85 	stb	r7,118(sp)
   12954:	003c5406 	br	11aa8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011aa8>
   12958:	d9c01d85 	stb	r7,118(sp)
   1295c:	003d1d06 	br	11dd4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7011dd4>

00012960 <__sprint_r.part.0>:
   12960:	28801917 	ldw	r2,100(r5)
   12964:	defff604 	addi	sp,sp,-40
   12968:	dd400515 	stw	r21,20(sp)
   1296c:	dfc00915 	stw	ra,36(sp)
   12970:	df000815 	stw	fp,32(sp)
   12974:	ddc00715 	stw	r23,28(sp)
   12978:	dd800615 	stw	r22,24(sp)
   1297c:	dd000415 	stw	r20,16(sp)
   12980:	dcc00315 	stw	r19,12(sp)
   12984:	dc800215 	stw	r18,8(sp)
   12988:	dc400115 	stw	r17,4(sp)
   1298c:	dc000015 	stw	r16,0(sp)
   12990:	1088000c 	andi	r2,r2,8192
   12994:	302b883a 	mov	r21,r6
   12998:	10002e26 	beq	r2,zero,12a54 <__sprint_r.part.0+0xf4>
   1299c:	30800217 	ldw	r2,8(r6)
   129a0:	35800017 	ldw	r22,0(r6)
   129a4:	10002926 	beq	r2,zero,12a4c <__sprint_r.part.0+0xec>
   129a8:	2827883a 	mov	r19,r5
   129ac:	2029883a 	mov	r20,r4
   129b0:	b5c00104 	addi	r23,r22,4
   129b4:	04bfffc4 	movi	r18,-1
   129b8:	bc400017 	ldw	r17,0(r23)
   129bc:	b4000017 	ldw	r16,0(r22)
   129c0:	0039883a 	mov	fp,zero
   129c4:	8822d0ba 	srli	r17,r17,2
   129c8:	8800031e 	bne	r17,zero,129d8 <__sprint_r.part.0+0x78>
   129cc:	00001806 	br	12a30 <__sprint_r.part.0+0xd0>
   129d0:	84000104 	addi	r16,r16,4
   129d4:	8f001526 	beq	r17,fp,12a2c <__sprint_r.part.0+0xcc>
   129d8:	81400017 	ldw	r5,0(r16)
   129dc:	980d883a 	mov	r6,r19
   129e0:	a009883a 	mov	r4,r20
   129e4:	00143880 	call	14388 <_fputwc_r>
   129e8:	e7000044 	addi	fp,fp,1
   129ec:	14bff81e 	bne	r2,r18,129d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70129d0>
   129f0:	9005883a 	mov	r2,r18
   129f4:	a8000215 	stw	zero,8(r21)
   129f8:	a8000115 	stw	zero,4(r21)
   129fc:	dfc00917 	ldw	ra,36(sp)
   12a00:	df000817 	ldw	fp,32(sp)
   12a04:	ddc00717 	ldw	r23,28(sp)
   12a08:	dd800617 	ldw	r22,24(sp)
   12a0c:	dd400517 	ldw	r21,20(sp)
   12a10:	dd000417 	ldw	r20,16(sp)
   12a14:	dcc00317 	ldw	r19,12(sp)
   12a18:	dc800217 	ldw	r18,8(sp)
   12a1c:	dc400117 	ldw	r17,4(sp)
   12a20:	dc000017 	ldw	r16,0(sp)
   12a24:	dec00a04 	addi	sp,sp,40
   12a28:	f800283a 	ret
   12a2c:	a8800217 	ldw	r2,8(r21)
   12a30:	8c63883a 	add	r17,r17,r17
   12a34:	8c63883a 	add	r17,r17,r17
   12a38:	1445c83a 	sub	r2,r2,r17
   12a3c:	a8800215 	stw	r2,8(r21)
   12a40:	b5800204 	addi	r22,r22,8
   12a44:	bdc00204 	addi	r23,r23,8
   12a48:	103fdb1e 	bne	r2,zero,129b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70129b8>
   12a4c:	0005883a 	mov	r2,zero
   12a50:	003fe806 	br	129f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70129f4>
   12a54:	000f3280 	call	f328 <__sfvwrite_r>
   12a58:	003fe606 	br	129f4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70129f4>

00012a5c <__sprint_r>:
   12a5c:	30c00217 	ldw	r3,8(r6)
   12a60:	18000126 	beq	r3,zero,12a68 <__sprint_r+0xc>
   12a64:	00129601 	jmpi	12960 <__sprint_r.part.0>
   12a68:	30000115 	stw	zero,4(r6)
   12a6c:	0005883a 	mov	r2,zero
   12a70:	f800283a 	ret

00012a74 <___vfiprintf_internal_r>:
   12a74:	deffc904 	addi	sp,sp,-220
   12a78:	df003515 	stw	fp,212(sp)
   12a7c:	dd003115 	stw	r20,196(sp)
   12a80:	dfc03615 	stw	ra,216(sp)
   12a84:	ddc03415 	stw	r23,208(sp)
   12a88:	dd803315 	stw	r22,204(sp)
   12a8c:	dd403215 	stw	r21,200(sp)
   12a90:	dcc03015 	stw	r19,192(sp)
   12a94:	dc802f15 	stw	r18,188(sp)
   12a98:	dc402e15 	stw	r17,184(sp)
   12a9c:	dc002d15 	stw	r16,180(sp)
   12aa0:	d9002015 	stw	r4,128(sp)
   12aa4:	d9c02215 	stw	r7,136(sp)
   12aa8:	2829883a 	mov	r20,r5
   12aac:	3039883a 	mov	fp,r6
   12ab0:	20000226 	beq	r4,zero,12abc <___vfiprintf_internal_r+0x48>
   12ab4:	20800e17 	ldw	r2,56(r4)
   12ab8:	1000cf26 	beq	r2,zero,12df8 <___vfiprintf_internal_r+0x384>
   12abc:	a080030b 	ldhu	r2,12(r20)
   12ac0:	10c8000c 	andi	r3,r2,8192
   12ac4:	1800061e 	bne	r3,zero,12ae0 <___vfiprintf_internal_r+0x6c>
   12ac8:	a1001917 	ldw	r4,100(r20)
   12acc:	00f7ffc4 	movi	r3,-8193
   12ad0:	10880014 	ori	r2,r2,8192
   12ad4:	20c6703a 	and	r3,r4,r3
   12ad8:	a080030d 	sth	r2,12(r20)
   12adc:	a0c01915 	stw	r3,100(r20)
   12ae0:	10c0020c 	andi	r3,r2,8
   12ae4:	1800a926 	beq	r3,zero,12d8c <___vfiprintf_internal_r+0x318>
   12ae8:	a0c00417 	ldw	r3,16(r20)
   12aec:	1800a726 	beq	r3,zero,12d8c <___vfiprintf_internal_r+0x318>
   12af0:	1080068c 	andi	r2,r2,26
   12af4:	00c00284 	movi	r3,10
   12af8:	10c0ac26 	beq	r2,r3,12dac <___vfiprintf_internal_r+0x338>
   12afc:	da801a04 	addi	r10,sp,104
   12b00:	da801e15 	stw	r10,120(sp)
   12b04:	d8801e17 	ldw	r2,120(sp)
   12b08:	da8019c4 	addi	r10,sp,103
   12b0c:	058000b4 	movhi	r22,2
   12b10:	05c000b4 	movhi	r23,2
   12b14:	da801f15 	stw	r10,124(sp)
   12b18:	1295c83a 	sub	r10,r2,r10
   12b1c:	b5934c04 	addi	r22,r22,19760
   12b20:	bdd34804 	addi	r23,r23,19744
   12b24:	dec01a15 	stw	sp,104(sp)
   12b28:	d8001c15 	stw	zero,112(sp)
   12b2c:	d8001b15 	stw	zero,108(sp)
   12b30:	d8002615 	stw	zero,152(sp)
   12b34:	d8002315 	stw	zero,140(sp)
   12b38:	da802715 	stw	r10,156(sp)
   12b3c:	d811883a 	mov	r8,sp
   12b40:	dd002115 	stw	r20,132(sp)
   12b44:	e021883a 	mov	r16,fp
   12b48:	80800007 	ldb	r2,0(r16)
   12b4c:	1003ea26 	beq	r2,zero,13af8 <___vfiprintf_internal_r+0x1084>
   12b50:	00c00944 	movi	r3,37
   12b54:	8025883a 	mov	r18,r16
   12b58:	10c0021e 	bne	r2,r3,12b64 <___vfiprintf_internal_r+0xf0>
   12b5c:	00001606 	br	12bb8 <___vfiprintf_internal_r+0x144>
   12b60:	10c00326 	beq	r2,r3,12b70 <___vfiprintf_internal_r+0xfc>
   12b64:	94800044 	addi	r18,r18,1
   12b68:	90800007 	ldb	r2,0(r18)
   12b6c:	103ffc1e 	bne	r2,zero,12b60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012b60>
   12b70:	9423c83a 	sub	r17,r18,r16
   12b74:	88001026 	beq	r17,zero,12bb8 <___vfiprintf_internal_r+0x144>
   12b78:	d8c01c17 	ldw	r3,112(sp)
   12b7c:	d8801b17 	ldw	r2,108(sp)
   12b80:	44000015 	stw	r16,0(r8)
   12b84:	88c7883a 	add	r3,r17,r3
   12b88:	10800044 	addi	r2,r2,1
   12b8c:	44400115 	stw	r17,4(r8)
   12b90:	d8c01c15 	stw	r3,112(sp)
   12b94:	d8801b15 	stw	r2,108(sp)
   12b98:	010001c4 	movi	r4,7
   12b9c:	2080760e 	bge	r4,r2,12d78 <___vfiprintf_internal_r+0x304>
   12ba0:	1803821e 	bne	r3,zero,139ac <___vfiprintf_internal_r+0xf38>
   12ba4:	da802317 	ldw	r10,140(sp)
   12ba8:	d8001b15 	stw	zero,108(sp)
   12bac:	d811883a 	mov	r8,sp
   12bb0:	5455883a 	add	r10,r10,r17
   12bb4:	da802315 	stw	r10,140(sp)
   12bb8:	90800007 	ldb	r2,0(r18)
   12bbc:	10044626 	beq	r2,zero,13cd8 <___vfiprintf_internal_r+0x1264>
   12bc0:	90c00047 	ldb	r3,1(r18)
   12bc4:	94000044 	addi	r16,r18,1
   12bc8:	d8001d85 	stb	zero,118(sp)
   12bcc:	0009883a 	mov	r4,zero
   12bd0:	000f883a 	mov	r7,zero
   12bd4:	027fffc4 	movi	r9,-1
   12bd8:	0023883a 	mov	r17,zero
   12bdc:	0029883a 	mov	r20,zero
   12be0:	01401604 	movi	r5,88
   12be4:	01800244 	movi	r6,9
   12be8:	03400a84 	movi	r13,42
   12bec:	03001b04 	movi	r12,108
   12bf0:	84000044 	addi	r16,r16,1
   12bf4:	18bff804 	addi	r2,r3,-32
   12bf8:	28827336 	bltu	r5,r2,135c8 <___vfiprintf_internal_r+0xb54>
   12bfc:	100490ba 	slli	r2,r2,2
   12c00:	02800074 	movhi	r10,1
   12c04:	528b0504 	addi	r10,r10,11284
   12c08:	1285883a 	add	r2,r2,r10
   12c0c:	10800017 	ldw	r2,0(r2)
   12c10:	1000683a 	jmp	r2
   12c14:	000132fc 	xorhi	zero,zero,1227
   12c18:	000135c8 	cmpgei	zero,zero,1239
   12c1c:	000135c8 	cmpgei	zero,zero,1239
   12c20:	0001331c 	xori	zero,zero,1228
   12c24:	000135c8 	cmpgei	zero,zero,1239
   12c28:	000135c8 	cmpgei	zero,zero,1239
   12c2c:	000135c8 	cmpgei	zero,zero,1239
   12c30:	000135c8 	cmpgei	zero,zero,1239
   12c34:	000135c8 	cmpgei	zero,zero,1239
   12c38:	000135c8 	cmpgei	zero,zero,1239
   12c3c:	00013504 	movi	zero,1236
   12c40:	00013520 	cmpeqi	zero,zero,1236
   12c44:	000135c8 	cmpgei	zero,zero,1239
   12c48:	00012e08 	cmpgei	zero,zero,1208
   12c4c:	00013530 	cmpltui	zero,zero,1236
   12c50:	000135c8 	cmpgei	zero,zero,1239
   12c54:	00013328 	cmpgeui	zero,zero,1228
   12c58:	00013334 	movhi	zero,1228
   12c5c:	00013334 	movhi	zero,1228
   12c60:	00013334 	movhi	zero,1228
   12c64:	00013334 	movhi	zero,1228
   12c68:	00013334 	movhi	zero,1228
   12c6c:	00013334 	movhi	zero,1228
   12c70:	00013334 	movhi	zero,1228
   12c74:	00013334 	movhi	zero,1228
   12c78:	00013334 	movhi	zero,1228
   12c7c:	000135c8 	cmpgei	zero,zero,1239
   12c80:	000135c8 	cmpgei	zero,zero,1239
   12c84:	000135c8 	cmpgei	zero,zero,1239
   12c88:	000135c8 	cmpgei	zero,zero,1239
   12c8c:	000135c8 	cmpgei	zero,zero,1239
   12c90:	000135c8 	cmpgei	zero,zero,1239
   12c94:	000135c8 	cmpgei	zero,zero,1239
   12c98:	000135c8 	cmpgei	zero,zero,1239
   12c9c:	000135c8 	cmpgei	zero,zero,1239
   12ca0:	000135c8 	cmpgei	zero,zero,1239
   12ca4:	00013360 	cmpeqi	zero,zero,1229
   12ca8:	000135c8 	cmpgei	zero,zero,1239
   12cac:	000135c8 	cmpgei	zero,zero,1239
   12cb0:	000135c8 	cmpgei	zero,zero,1239
   12cb4:	000135c8 	cmpgei	zero,zero,1239
   12cb8:	000135c8 	cmpgei	zero,zero,1239
   12cbc:	000135c8 	cmpgei	zero,zero,1239
   12cc0:	000135c8 	cmpgei	zero,zero,1239
   12cc4:	000135c8 	cmpgei	zero,zero,1239
   12cc8:	000135c8 	cmpgei	zero,zero,1239
   12ccc:	000135c8 	cmpgei	zero,zero,1239
   12cd0:	00013398 	cmpnei	zero,zero,1230
   12cd4:	000135c8 	cmpgei	zero,zero,1239
   12cd8:	000135c8 	cmpgei	zero,zero,1239
   12cdc:	000135c8 	cmpgei	zero,zero,1239
   12ce0:	000135c8 	cmpgei	zero,zero,1239
   12ce4:	000135c8 	cmpgei	zero,zero,1239
   12ce8:	000133f0 	cmpltui	zero,zero,1231
   12cec:	000135c8 	cmpgei	zero,zero,1239
   12cf0:	000135c8 	cmpgei	zero,zero,1239
   12cf4:	00013460 	cmpeqi	zero,zero,1233
   12cf8:	000135c8 	cmpgei	zero,zero,1239
   12cfc:	000135c8 	cmpgei	zero,zero,1239
   12d00:	000135c8 	cmpgei	zero,zero,1239
   12d04:	000135c8 	cmpgei	zero,zero,1239
   12d08:	000135c8 	cmpgei	zero,zero,1239
   12d0c:	000135c8 	cmpgei	zero,zero,1239
   12d10:	000135c8 	cmpgei	zero,zero,1239
   12d14:	000135c8 	cmpgei	zero,zero,1239
   12d18:	000135c8 	cmpgei	zero,zero,1239
   12d1c:	000135c8 	cmpgei	zero,zero,1239
   12d20:	0001320c 	andi	zero,zero,1224
   12d24:	00013238 	rdprs	zero,zero,1224
   12d28:	000135c8 	cmpgei	zero,zero,1239
   12d2c:	000135c8 	cmpgei	zero,zero,1239
   12d30:	000135c8 	cmpgei	zero,zero,1239
   12d34:	00013570 	cmpltui	zero,zero,1237
   12d38:	00013238 	rdprs	zero,zero,1224
   12d3c:	000135c8 	cmpgei	zero,zero,1239
   12d40:	000135c8 	cmpgei	zero,zero,1239
   12d44:	000130cc 	andi	zero,zero,1219
   12d48:	000135c8 	cmpgei	zero,zero,1239
   12d4c:	000130dc 	xori	zero,zero,1219
   12d50:	00013118 	cmpnei	zero,zero,1220
   12d54:	00012e14 	movui	zero,1208
   12d58:	000130c0 	call	130c <_ZN4Game12getCharPixelEcii+0x10>
   12d5c:	000135c8 	cmpgei	zero,zero,1239
   12d60:	0001349c 	xori	zero,zero,1234
   12d64:	000135c8 	cmpgei	zero,zero,1239
   12d68:	000134f4 	movhi	zero,1235
   12d6c:	000135c8 	cmpgei	zero,zero,1239
   12d70:	000135c8 	cmpgei	zero,zero,1239
   12d74:	000131b8 	rdprs	zero,zero,1222
   12d78:	42000204 	addi	r8,r8,8
   12d7c:	da802317 	ldw	r10,140(sp)
   12d80:	5455883a 	add	r10,r10,r17
   12d84:	da802315 	stw	r10,140(sp)
   12d88:	003f8b06 	br	12bb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bb8>
   12d8c:	d9002017 	ldw	r4,128(sp)
   12d90:	a00b883a 	mov	r5,r20
   12d94:	000ced00 	call	ced0 <__swsetup_r>
   12d98:	1003b11e 	bne	r2,zero,13c60 <___vfiprintf_internal_r+0x11ec>
   12d9c:	a080030b 	ldhu	r2,12(r20)
   12da0:	00c00284 	movi	r3,10
   12da4:	1080068c 	andi	r2,r2,26
   12da8:	10ff541e 	bne	r2,r3,12afc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012afc>
   12dac:	a080038f 	ldh	r2,14(r20)
   12db0:	103f5216 	blt	r2,zero,12afc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012afc>
   12db4:	d9c02217 	ldw	r7,136(sp)
   12db8:	d9002017 	ldw	r4,128(sp)
   12dbc:	e00d883a 	mov	r6,fp
   12dc0:	a00b883a 	mov	r5,r20
   12dc4:	0013eec0 	call	13eec <__sbprintf>
   12dc8:	dfc03617 	ldw	ra,216(sp)
   12dcc:	df003517 	ldw	fp,212(sp)
   12dd0:	ddc03417 	ldw	r23,208(sp)
   12dd4:	dd803317 	ldw	r22,204(sp)
   12dd8:	dd403217 	ldw	r21,200(sp)
   12ddc:	dd003117 	ldw	r20,196(sp)
   12de0:	dcc03017 	ldw	r19,192(sp)
   12de4:	dc802f17 	ldw	r18,188(sp)
   12de8:	dc402e17 	ldw	r17,184(sp)
   12dec:	dc002d17 	ldw	r16,180(sp)
   12df0:	dec03704 	addi	sp,sp,220
   12df4:	f800283a 	ret
   12df8:	000eea40 	call	eea4 <__sinit>
   12dfc:	003f2f06 	br	12abc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012abc>
   12e00:	0463c83a 	sub	r17,zero,r17
   12e04:	d8802215 	stw	r2,136(sp)
   12e08:	a5000114 	ori	r20,r20,4
   12e0c:	80c00007 	ldb	r3,0(r16)
   12e10:	003f7706 	br	12bf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bf0>
   12e14:	00800c04 	movi	r2,48
   12e18:	da802217 	ldw	r10,136(sp)
   12e1c:	d8801d05 	stb	r2,116(sp)
   12e20:	00801e04 	movi	r2,120
   12e24:	d8801d45 	stb	r2,117(sp)
   12e28:	d8001d85 	stb	zero,118(sp)
   12e2c:	50c00104 	addi	r3,r10,4
   12e30:	54800017 	ldw	r18,0(r10)
   12e34:	0027883a 	mov	r19,zero
   12e38:	a0800094 	ori	r2,r20,2
   12e3c:	48030b16 	blt	r9,zero,13a6c <___vfiprintf_internal_r+0xff8>
   12e40:	00bfdfc4 	movi	r2,-129
   12e44:	a096703a 	and	r11,r20,r2
   12e48:	d8c02215 	stw	r3,136(sp)
   12e4c:	5d000094 	ori	r20,r11,2
   12e50:	90032b1e 	bne	r18,zero,13b00 <___vfiprintf_internal_r+0x108c>
   12e54:	008000b4 	movhi	r2,2
   12e58:	1092d704 	addi	r2,r2,19292
   12e5c:	d8802615 	stw	r2,152(sp)
   12e60:	0039883a 	mov	fp,zero
   12e64:	48017b1e 	bne	r9,zero,13454 <___vfiprintf_internal_r+0x9e0>
   12e68:	0013883a 	mov	r9,zero
   12e6c:	0027883a 	mov	r19,zero
   12e70:	dd401a04 	addi	r21,sp,104
   12e74:	4825883a 	mov	r18,r9
   12e78:	4cc0010e 	bge	r9,r19,12e80 <___vfiprintf_internal_r+0x40c>
   12e7c:	9825883a 	mov	r18,r19
   12e80:	e7003fcc 	andi	fp,fp,255
   12e84:	e700201c 	xori	fp,fp,128
   12e88:	e73fe004 	addi	fp,fp,-128
   12e8c:	e0000126 	beq	fp,zero,12e94 <___vfiprintf_internal_r+0x420>
   12e90:	94800044 	addi	r18,r18,1
   12e94:	a380008c 	andi	r14,r20,2
   12e98:	70000126 	beq	r14,zero,12ea0 <___vfiprintf_internal_r+0x42c>
   12e9c:	94800084 	addi	r18,r18,2
   12ea0:	a700210c 	andi	fp,r20,132
   12ea4:	e001df1e 	bne	fp,zero,13624 <___vfiprintf_internal_r+0xbb0>
   12ea8:	8c87c83a 	sub	r3,r17,r18
   12eac:	00c1dd0e 	bge	zero,r3,13624 <___vfiprintf_internal_r+0xbb0>
   12eb0:	01c00404 	movi	r7,16
   12eb4:	d8801c17 	ldw	r2,112(sp)
   12eb8:	38c3ad0e 	bge	r7,r3,13d70 <___vfiprintf_internal_r+0x12fc>
   12ebc:	028000b4 	movhi	r10,2
   12ec0:	52934c04 	addi	r10,r10,19760
   12ec4:	dc002915 	stw	r16,164(sp)
   12ec8:	d9801b17 	ldw	r6,108(sp)
   12ecc:	da802415 	stw	r10,144(sp)
   12ed0:	03c001c4 	movi	r15,7
   12ed4:	da402515 	stw	r9,148(sp)
   12ed8:	db802815 	stw	r14,160(sp)
   12edc:	1821883a 	mov	r16,r3
   12ee0:	00000506 	br	12ef8 <___vfiprintf_internal_r+0x484>
   12ee4:	31400084 	addi	r5,r6,2
   12ee8:	42000204 	addi	r8,r8,8
   12eec:	200d883a 	mov	r6,r4
   12ef0:	843ffc04 	addi	r16,r16,-16
   12ef4:	3c000d0e 	bge	r7,r16,12f2c <___vfiprintf_internal_r+0x4b8>
   12ef8:	10800404 	addi	r2,r2,16
   12efc:	31000044 	addi	r4,r6,1
   12f00:	45800015 	stw	r22,0(r8)
   12f04:	41c00115 	stw	r7,4(r8)
   12f08:	d8801c15 	stw	r2,112(sp)
   12f0c:	d9001b15 	stw	r4,108(sp)
   12f10:	793ff40e 	bge	r15,r4,12ee4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012ee4>
   12f14:	1001b51e 	bne	r2,zero,135ec <___vfiprintf_internal_r+0xb78>
   12f18:	843ffc04 	addi	r16,r16,-16
   12f1c:	000d883a 	mov	r6,zero
   12f20:	01400044 	movi	r5,1
   12f24:	d811883a 	mov	r8,sp
   12f28:	3c3ff316 	blt	r7,r16,12ef8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012ef8>
   12f2c:	8007883a 	mov	r3,r16
   12f30:	da402517 	ldw	r9,148(sp)
   12f34:	db802817 	ldw	r14,160(sp)
   12f38:	dc002917 	ldw	r16,164(sp)
   12f3c:	da802417 	ldw	r10,144(sp)
   12f40:	1885883a 	add	r2,r3,r2
   12f44:	40c00115 	stw	r3,4(r8)
   12f48:	42800015 	stw	r10,0(r8)
   12f4c:	d8801c15 	stw	r2,112(sp)
   12f50:	d9401b15 	stw	r5,108(sp)
   12f54:	00c001c4 	movi	r3,7
   12f58:	19426016 	blt	r3,r5,138dc <___vfiprintf_internal_r+0xe68>
   12f5c:	d8c01d87 	ldb	r3,118(sp)
   12f60:	42000204 	addi	r8,r8,8
   12f64:	29000044 	addi	r4,r5,1
   12f68:	1801b31e 	bne	r3,zero,13638 <___vfiprintf_internal_r+0xbc4>
   12f6c:	7001c026 	beq	r14,zero,13670 <___vfiprintf_internal_r+0xbfc>
   12f70:	d8c01d04 	addi	r3,sp,116
   12f74:	10800084 	addi	r2,r2,2
   12f78:	40c00015 	stw	r3,0(r8)
   12f7c:	00c00084 	movi	r3,2
   12f80:	40c00115 	stw	r3,4(r8)
   12f84:	d8801c15 	stw	r2,112(sp)
   12f88:	d9001b15 	stw	r4,108(sp)
   12f8c:	00c001c4 	movi	r3,7
   12f90:	1902650e 	bge	r3,r4,13928 <___vfiprintf_internal_r+0xeb4>
   12f94:	10029a1e 	bne	r2,zero,13a00 <___vfiprintf_internal_r+0xf8c>
   12f98:	00c02004 	movi	r3,128
   12f9c:	01000044 	movi	r4,1
   12fa0:	000b883a 	mov	r5,zero
   12fa4:	d811883a 	mov	r8,sp
   12fa8:	e0c1b31e 	bne	fp,r3,13678 <___vfiprintf_internal_r+0xc04>
   12fac:	8cb9c83a 	sub	fp,r17,r18
   12fb0:	0701b10e 	bge	zero,fp,13678 <___vfiprintf_internal_r+0xc04>
   12fb4:	01c00404 	movi	r7,16
   12fb8:	3f03890e 	bge	r7,fp,13de0 <___vfiprintf_internal_r+0x136c>
   12fbc:	00c000b4 	movhi	r3,2
   12fc0:	18d34804 	addi	r3,r3,19744
   12fc4:	d8c02415 	stw	r3,144(sp)
   12fc8:	8007883a 	mov	r3,r16
   12fcc:	034001c4 	movi	r13,7
   12fd0:	e021883a 	mov	r16,fp
   12fd4:	da402515 	stw	r9,148(sp)
   12fd8:	1839883a 	mov	fp,r3
   12fdc:	00000506 	br	12ff4 <___vfiprintf_internal_r+0x580>
   12fe0:	29800084 	addi	r6,r5,2
   12fe4:	42000204 	addi	r8,r8,8
   12fe8:	180b883a 	mov	r5,r3
   12fec:	843ffc04 	addi	r16,r16,-16
   12ff0:	3c000d0e 	bge	r7,r16,13028 <___vfiprintf_internal_r+0x5b4>
   12ff4:	10800404 	addi	r2,r2,16
   12ff8:	28c00044 	addi	r3,r5,1
   12ffc:	45c00015 	stw	r23,0(r8)
   13000:	41c00115 	stw	r7,4(r8)
   13004:	d8801c15 	stw	r2,112(sp)
   13008:	d8c01b15 	stw	r3,108(sp)
   1300c:	68fff40e 	bge	r13,r3,12fe0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012fe0>
   13010:	1002241e 	bne	r2,zero,138a4 <___vfiprintf_internal_r+0xe30>
   13014:	843ffc04 	addi	r16,r16,-16
   13018:	01800044 	movi	r6,1
   1301c:	000b883a 	mov	r5,zero
   13020:	d811883a 	mov	r8,sp
   13024:	3c3ff316 	blt	r7,r16,12ff4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012ff4>
   13028:	da402517 	ldw	r9,148(sp)
   1302c:	e007883a 	mov	r3,fp
   13030:	8039883a 	mov	fp,r16
   13034:	1821883a 	mov	r16,r3
   13038:	d8c02417 	ldw	r3,144(sp)
   1303c:	1705883a 	add	r2,r2,fp
   13040:	47000115 	stw	fp,4(r8)
   13044:	40c00015 	stw	r3,0(r8)
   13048:	d8801c15 	stw	r2,112(sp)
   1304c:	d9801b15 	stw	r6,108(sp)
   13050:	00c001c4 	movi	r3,7
   13054:	19827616 	blt	r3,r6,13a30 <___vfiprintf_internal_r+0xfbc>
   13058:	4cf9c83a 	sub	fp,r9,r19
   1305c:	42000204 	addi	r8,r8,8
   13060:	31000044 	addi	r4,r6,1
   13064:	300b883a 	mov	r5,r6
   13068:	07018516 	blt	zero,fp,13680 <___vfiprintf_internal_r+0xc0c>
   1306c:	9885883a 	add	r2,r19,r2
   13070:	45400015 	stw	r21,0(r8)
   13074:	44c00115 	stw	r19,4(r8)
   13078:	d8801c15 	stw	r2,112(sp)
   1307c:	d9001b15 	stw	r4,108(sp)
   13080:	00c001c4 	movi	r3,7
   13084:	1901dd0e 	bge	r3,r4,137fc <___vfiprintf_internal_r+0xd88>
   13088:	1002401e 	bne	r2,zero,1398c <___vfiprintf_internal_r+0xf18>
   1308c:	d8001b15 	stw	zero,108(sp)
   13090:	a2c0010c 	andi	r11,r20,4
   13094:	58000226 	beq	r11,zero,130a0 <___vfiprintf_internal_r+0x62c>
   13098:	8ca7c83a 	sub	r19,r17,r18
   1309c:	04c2f216 	blt	zero,r19,13c68 <___vfiprintf_internal_r+0x11f4>
   130a0:	8c80010e 	bge	r17,r18,130a8 <___vfiprintf_internal_r+0x634>
   130a4:	9023883a 	mov	r17,r18
   130a8:	da802317 	ldw	r10,140(sp)
   130ac:	5455883a 	add	r10,r10,r17
   130b0:	da802315 	stw	r10,140(sp)
   130b4:	d8001b15 	stw	zero,108(sp)
   130b8:	d811883a 	mov	r8,sp
   130bc:	003ea206 	br	12b48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012b48>
   130c0:	a5000814 	ori	r20,r20,32
   130c4:	80c00007 	ldb	r3,0(r16)
   130c8:	003ec906 	br	12bf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bf0>
   130cc:	80c00007 	ldb	r3,0(r16)
   130d0:	1b030926 	beq	r3,r12,13cf8 <___vfiprintf_internal_r+0x1284>
   130d4:	a5000414 	ori	r20,r20,16
   130d8:	003ec506 	br	12bf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bf0>
   130dc:	21003fcc 	andi	r4,r4,255
   130e0:	20035e1e 	bne	r4,zero,13e5c <___vfiprintf_internal_r+0x13e8>
   130e4:	a080080c 	andi	r2,r20,32
   130e8:	1002a526 	beq	r2,zero,13b80 <___vfiprintf_internal_r+0x110c>
   130ec:	da802217 	ldw	r10,136(sp)
   130f0:	50800017 	ldw	r2,0(r10)
   130f4:	da802317 	ldw	r10,140(sp)
   130f8:	5007d7fa 	srai	r3,r10,31
   130fc:	da802217 	ldw	r10,136(sp)
   13100:	10c00115 	stw	r3,4(r2)
   13104:	52800104 	addi	r10,r10,4
   13108:	da802215 	stw	r10,136(sp)
   1310c:	da802317 	ldw	r10,140(sp)
   13110:	12800015 	stw	r10,0(r2)
   13114:	003e8c06 	br	12b48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012b48>
   13118:	21003fcc 	andi	r4,r4,255
   1311c:	2003511e 	bne	r4,zero,13e64 <___vfiprintf_internal_r+0x13f0>
   13120:	a080080c 	andi	r2,r20,32
   13124:	1000a126 	beq	r2,zero,133ac <___vfiprintf_internal_r+0x938>
   13128:	da802217 	ldw	r10,136(sp)
   1312c:	d8001d85 	stb	zero,118(sp)
   13130:	50800204 	addi	r2,r10,8
   13134:	54800017 	ldw	r18,0(r10)
   13138:	54c00117 	ldw	r19,4(r10)
   1313c:	4802b416 	blt	r9,zero,13c10 <___vfiprintf_internal_r+0x119c>
   13140:	013fdfc4 	movi	r4,-129
   13144:	94c6b03a 	or	r3,r18,r19
   13148:	d8802215 	stw	r2,136(sp)
   1314c:	a128703a 	and	r20,r20,r4
   13150:	1800a226 	beq	r3,zero,133dc <___vfiprintf_internal_r+0x968>
   13154:	0039883a 	mov	fp,zero
   13158:	dd401a04 	addi	r21,sp,104
   1315c:	9006d0fa 	srli	r3,r18,3
   13160:	9808977a 	slli	r4,r19,29
   13164:	9826d0fa 	srli	r19,r19,3
   13168:	948001cc 	andi	r18,r18,7
   1316c:	90800c04 	addi	r2,r18,48
   13170:	ad7fffc4 	addi	r21,r21,-1
   13174:	20e4b03a 	or	r18,r4,r3
   13178:	a8800005 	stb	r2,0(r21)
   1317c:	94c6b03a 	or	r3,r18,r19
   13180:	183ff61e 	bne	r3,zero,1315c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701315c>
   13184:	a0c0004c 	andi	r3,r20,1
   13188:	18005926 	beq	r3,zero,132f0 <___vfiprintf_internal_r+0x87c>
   1318c:	10803fcc 	andi	r2,r2,255
   13190:	1080201c 	xori	r2,r2,128
   13194:	10bfe004 	addi	r2,r2,-128
   13198:	00c00c04 	movi	r3,48
   1319c:	10c05426 	beq	r2,r3,132f0 <___vfiprintf_internal_r+0x87c>
   131a0:	da801e17 	ldw	r10,120(sp)
   131a4:	a8bfffc4 	addi	r2,r21,-1
   131a8:	a8ffffc5 	stb	r3,-1(r21)
   131ac:	50a7c83a 	sub	r19,r10,r2
   131b0:	102b883a 	mov	r21,r2
   131b4:	003f2f06 	br	12e74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012e74>
   131b8:	21003fcc 	andi	r4,r4,255
   131bc:	2003421e 	bne	r4,zero,13ec8 <___vfiprintf_internal_r+0x1454>
   131c0:	008000b4 	movhi	r2,2
   131c4:	1092d704 	addi	r2,r2,19292
   131c8:	d8802615 	stw	r2,152(sp)
   131cc:	a080080c 	andi	r2,r20,32
   131d0:	1000aa26 	beq	r2,zero,1347c <___vfiprintf_internal_r+0xa08>
   131d4:	da802217 	ldw	r10,136(sp)
   131d8:	54800017 	ldw	r18,0(r10)
   131dc:	54c00117 	ldw	r19,4(r10)
   131e0:	52800204 	addi	r10,r10,8
   131e4:	da802215 	stw	r10,136(sp)
   131e8:	a080004c 	andi	r2,r20,1
   131ec:	1001d226 	beq	r2,zero,13938 <___vfiprintf_internal_r+0xec4>
   131f0:	94c4b03a 	or	r2,r18,r19
   131f4:	1002351e 	bne	r2,zero,13acc <___vfiprintf_internal_r+0x1058>
   131f8:	d8001d85 	stb	zero,118(sp)
   131fc:	48022216 	blt	r9,zero,13a88 <___vfiprintf_internal_r+0x1014>
   13200:	00bfdfc4 	movi	r2,-129
   13204:	a0a8703a 	and	r20,r20,r2
   13208:	003f1506 	br	12e60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012e60>
   1320c:	da802217 	ldw	r10,136(sp)
   13210:	04800044 	movi	r18,1
   13214:	d8001d85 	stb	zero,118(sp)
   13218:	50800017 	ldw	r2,0(r10)
   1321c:	52800104 	addi	r10,r10,4
   13220:	da802215 	stw	r10,136(sp)
   13224:	d8801005 	stb	r2,64(sp)
   13228:	9027883a 	mov	r19,r18
   1322c:	dd401004 	addi	r21,sp,64
   13230:	0013883a 	mov	r9,zero
   13234:	003f1706 	br	12e94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012e94>
   13238:	21003fcc 	andi	r4,r4,255
   1323c:	2003201e 	bne	r4,zero,13ec0 <___vfiprintf_internal_r+0x144c>
   13240:	a080080c 	andi	r2,r20,32
   13244:	10004b26 	beq	r2,zero,13374 <___vfiprintf_internal_r+0x900>
   13248:	da802217 	ldw	r10,136(sp)
   1324c:	50800117 	ldw	r2,4(r10)
   13250:	54800017 	ldw	r18,0(r10)
   13254:	52800204 	addi	r10,r10,8
   13258:	da802215 	stw	r10,136(sp)
   1325c:	1027883a 	mov	r19,r2
   13260:	10022c16 	blt	r2,zero,13b14 <___vfiprintf_internal_r+0x10a0>
   13264:	df001d83 	ldbu	fp,118(sp)
   13268:	48007216 	blt	r9,zero,13434 <___vfiprintf_internal_r+0x9c0>
   1326c:	00ffdfc4 	movi	r3,-129
   13270:	94c4b03a 	or	r2,r18,r19
   13274:	a0e8703a 	and	r20,r20,r3
   13278:	1000cc26 	beq	r2,zero,135ac <___vfiprintf_internal_r+0xb38>
   1327c:	98021026 	beq	r19,zero,13ac0 <___vfiprintf_internal_r+0x104c>
   13280:	dc402415 	stw	r17,144(sp)
   13284:	dc002515 	stw	r16,148(sp)
   13288:	9823883a 	mov	r17,r19
   1328c:	9021883a 	mov	r16,r18
   13290:	dd401a04 	addi	r21,sp,104
   13294:	4825883a 	mov	r18,r9
   13298:	4027883a 	mov	r19,r8
   1329c:	8009883a 	mov	r4,r16
   132a0:	880b883a 	mov	r5,r17
   132a4:	01800284 	movi	r6,10
   132a8:	000f883a 	mov	r7,zero
   132ac:	0014e540 	call	14e54 <__umoddi3>
   132b0:	10800c04 	addi	r2,r2,48
   132b4:	ad7fffc4 	addi	r21,r21,-1
   132b8:	8009883a 	mov	r4,r16
   132bc:	880b883a 	mov	r5,r17
   132c0:	a8800005 	stb	r2,0(r21)
   132c4:	01800284 	movi	r6,10
   132c8:	000f883a 	mov	r7,zero
   132cc:	00148dc0 	call	148dc <__udivdi3>
   132d0:	1021883a 	mov	r16,r2
   132d4:	10c4b03a 	or	r2,r2,r3
   132d8:	1823883a 	mov	r17,r3
   132dc:	103fef1e 	bne	r2,zero,1329c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701329c>
   132e0:	dc402417 	ldw	r17,144(sp)
   132e4:	dc002517 	ldw	r16,148(sp)
   132e8:	9013883a 	mov	r9,r18
   132ec:	9811883a 	mov	r8,r19
   132f0:	da801e17 	ldw	r10,120(sp)
   132f4:	5567c83a 	sub	r19,r10,r21
   132f8:	003ede06 	br	12e74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012e74>
   132fc:	38803fcc 	andi	r2,r7,255
   13300:	1080201c 	xori	r2,r2,128
   13304:	10bfe004 	addi	r2,r2,-128
   13308:	1002371e 	bne	r2,zero,13be8 <___vfiprintf_internal_r+0x1174>
   1330c:	01000044 	movi	r4,1
   13310:	01c00804 	movi	r7,32
   13314:	80c00007 	ldb	r3,0(r16)
   13318:	003e3506 	br	12bf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bf0>
   1331c:	a5000054 	ori	r20,r20,1
   13320:	80c00007 	ldb	r3,0(r16)
   13324:	003e3206 	br	12bf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bf0>
   13328:	a5002014 	ori	r20,r20,128
   1332c:	80c00007 	ldb	r3,0(r16)
   13330:	003e2f06 	br	12bf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bf0>
   13334:	8015883a 	mov	r10,r16
   13338:	0023883a 	mov	r17,zero
   1333c:	18bff404 	addi	r2,r3,-48
   13340:	50c00007 	ldb	r3,0(r10)
   13344:	8c4002a4 	muli	r17,r17,10
   13348:	84000044 	addi	r16,r16,1
   1334c:	8015883a 	mov	r10,r16
   13350:	1463883a 	add	r17,r2,r17
   13354:	18bff404 	addi	r2,r3,-48
   13358:	30bff92e 	bgeu	r6,r2,13340 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013340>
   1335c:	003e2506 	br	12bf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bf4>
   13360:	21003fcc 	andi	r4,r4,255
   13364:	2002d41e 	bne	r4,zero,13eb8 <___vfiprintf_internal_r+0x1444>
   13368:	a5000414 	ori	r20,r20,16
   1336c:	a080080c 	andi	r2,r20,32
   13370:	103fb51e 	bne	r2,zero,13248 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013248>
   13374:	a080040c 	andi	r2,r20,16
   13378:	1001f826 	beq	r2,zero,13b5c <___vfiprintf_internal_r+0x10e8>
   1337c:	da802217 	ldw	r10,136(sp)
   13380:	54800017 	ldw	r18,0(r10)
   13384:	52800104 	addi	r10,r10,4
   13388:	da802215 	stw	r10,136(sp)
   1338c:	9027d7fa 	srai	r19,r18,31
   13390:	9805883a 	mov	r2,r19
   13394:	003fb206 	br	13260 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013260>
   13398:	21003fcc 	andi	r4,r4,255
   1339c:	2002c41e 	bne	r4,zero,13eb0 <___vfiprintf_internal_r+0x143c>
   133a0:	a5000414 	ori	r20,r20,16
   133a4:	a080080c 	andi	r2,r20,32
   133a8:	103f5f1e 	bne	r2,zero,13128 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013128>
   133ac:	a080040c 	andi	r2,r20,16
   133b0:	10020f26 	beq	r2,zero,13bf0 <___vfiprintf_internal_r+0x117c>
   133b4:	da802217 	ldw	r10,136(sp)
   133b8:	d8001d85 	stb	zero,118(sp)
   133bc:	0027883a 	mov	r19,zero
   133c0:	50800104 	addi	r2,r10,4
   133c4:	54800017 	ldw	r18,0(r10)
   133c8:	48021116 	blt	r9,zero,13c10 <___vfiprintf_internal_r+0x119c>
   133cc:	00ffdfc4 	movi	r3,-129
   133d0:	d8802215 	stw	r2,136(sp)
   133d4:	a0e8703a 	and	r20,r20,r3
   133d8:	903f5e1e 	bne	r18,zero,13154 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013154>
   133dc:	0039883a 	mov	fp,zero
   133e0:	4802a626 	beq	r9,zero,13e7c <___vfiprintf_internal_r+0x1408>
   133e4:	0025883a 	mov	r18,zero
   133e8:	0027883a 	mov	r19,zero
   133ec:	003f5a06 	br	13158 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013158>
   133f0:	21003fcc 	andi	r4,r4,255
   133f4:	20029f1e 	bne	r4,zero,13e74 <___vfiprintf_internal_r+0x1400>
   133f8:	a5000414 	ori	r20,r20,16
   133fc:	a080080c 	andi	r2,r20,32
   13400:	10005e1e 	bne	r2,zero,1357c <___vfiprintf_internal_r+0xb08>
   13404:	a080040c 	andi	r2,r20,16
   13408:	1001a21e 	bne	r2,zero,13a94 <___vfiprintf_internal_r+0x1020>
   1340c:	a080100c 	andi	r2,r20,64
   13410:	d8001d85 	stb	zero,118(sp)
   13414:	da802217 	ldw	r10,136(sp)
   13418:	1002231e 	bne	r2,zero,13ca8 <___vfiprintf_internal_r+0x1234>
   1341c:	50800104 	addi	r2,r10,4
   13420:	54800017 	ldw	r18,0(r10)
   13424:	0027883a 	mov	r19,zero
   13428:	4801a00e 	bge	r9,zero,13aac <___vfiprintf_internal_r+0x1038>
   1342c:	d8802215 	stw	r2,136(sp)
   13430:	0039883a 	mov	fp,zero
   13434:	94c4b03a 	or	r2,r18,r19
   13438:	103f901e 	bne	r2,zero,1327c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701327c>
   1343c:	00800044 	movi	r2,1
   13440:	10803fcc 	andi	r2,r2,255
   13444:	00c00044 	movi	r3,1
   13448:	10c05926 	beq	r2,r3,135b0 <___vfiprintf_internal_r+0xb3c>
   1344c:	00c00084 	movi	r3,2
   13450:	10ffe41e 	bne	r2,r3,133e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70133e4>
   13454:	0025883a 	mov	r18,zero
   13458:	0027883a 	mov	r19,zero
   1345c:	00013d06 	br	13954 <___vfiprintf_internal_r+0xee0>
   13460:	21003fcc 	andi	r4,r4,255
   13464:	2002811e 	bne	r4,zero,13e6c <___vfiprintf_internal_r+0x13f8>
   13468:	008000b4 	movhi	r2,2
   1346c:	1092d204 	addi	r2,r2,19272
   13470:	d8802615 	stw	r2,152(sp)
   13474:	a080080c 	andi	r2,r20,32
   13478:	103f561e 	bne	r2,zero,131d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70131d4>
   1347c:	a080040c 	andi	r2,r20,16
   13480:	1001d126 	beq	r2,zero,13bc8 <___vfiprintf_internal_r+0x1154>
   13484:	da802217 	ldw	r10,136(sp)
   13488:	0027883a 	mov	r19,zero
   1348c:	54800017 	ldw	r18,0(r10)
   13490:	52800104 	addi	r10,r10,4
   13494:	da802215 	stw	r10,136(sp)
   13498:	003f5306 	br	131e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70131e8>
   1349c:	da802217 	ldw	r10,136(sp)
   134a0:	d8001d85 	stb	zero,118(sp)
   134a4:	55400017 	ldw	r21,0(r10)
   134a8:	50c00104 	addi	r3,r10,4
   134ac:	a8024226 	beq	r21,zero,13db8 <___vfiprintf_internal_r+0x1344>
   134b0:	48021816 	blt	r9,zero,13d14 <___vfiprintf_internal_r+0x12a0>
   134b4:	480d883a 	mov	r6,r9
   134b8:	000b883a 	mov	r5,zero
   134bc:	a809883a 	mov	r4,r21
   134c0:	d8c02a15 	stw	r3,168(sp)
   134c4:	da002b15 	stw	r8,172(sp)
   134c8:	da402c15 	stw	r9,176(sp)
   134cc:	000fc040 	call	fc04 <memchr>
   134d0:	d8c02a17 	ldw	r3,168(sp)
   134d4:	da002b17 	ldw	r8,172(sp)
   134d8:	da402c17 	ldw	r9,176(sp)
   134dc:	10024826 	beq	r2,zero,13e00 <___vfiprintf_internal_r+0x138c>
   134e0:	1567c83a 	sub	r19,r2,r21
   134e4:	df001d83 	ldbu	fp,118(sp)
   134e8:	d8c02215 	stw	r3,136(sp)
   134ec:	0013883a 	mov	r9,zero
   134f0:	003e6006 	br	12e74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012e74>
   134f4:	21003fcc 	andi	r4,r4,255
   134f8:	203fc026 	beq	r4,zero,133fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70133fc>
   134fc:	d9c01d85 	stb	r7,118(sp)
   13500:	003fbe06 	br	133fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70133fc>
   13504:	da802217 	ldw	r10,136(sp)
   13508:	54400017 	ldw	r17,0(r10)
   1350c:	50800104 	addi	r2,r10,4
   13510:	883e3b16 	blt	r17,zero,12e00 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012e00>
   13514:	d8802215 	stw	r2,136(sp)
   13518:	80c00007 	ldb	r3,0(r16)
   1351c:	003db406 	br	12bf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bf0>
   13520:	01000044 	movi	r4,1
   13524:	01c00ac4 	movi	r7,43
   13528:	80c00007 	ldb	r3,0(r16)
   1352c:	003db006 	br	12bf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bf0>
   13530:	80c00007 	ldb	r3,0(r16)
   13534:	82800044 	addi	r10,r16,1
   13538:	1b423c26 	beq	r3,r13,13e2c <___vfiprintf_internal_r+0x13b8>
   1353c:	18bff404 	addi	r2,r3,-48
   13540:	0013883a 	mov	r9,zero
   13544:	30822b36 	bltu	r6,r2,13df4 <___vfiprintf_internal_r+0x1380>
   13548:	50c00007 	ldb	r3,0(r10)
   1354c:	4a4002a4 	muli	r9,r9,10
   13550:	54000044 	addi	r16,r10,1
   13554:	8015883a 	mov	r10,r16
   13558:	4893883a 	add	r9,r9,r2
   1355c:	18bff404 	addi	r2,r3,-48
   13560:	30bff92e 	bgeu	r6,r2,13548 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013548>
   13564:	483da30e 	bge	r9,zero,12bf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bf4>
   13568:	027fffc4 	movi	r9,-1
   1356c:	003da106 	br	12bf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bf4>
   13570:	a5001014 	ori	r20,r20,64
   13574:	80c00007 	ldb	r3,0(r16)
   13578:	003d9d06 	br	12bf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bf0>
   1357c:	da802217 	ldw	r10,136(sp)
   13580:	d8001d85 	stb	zero,118(sp)
   13584:	50c00204 	addi	r3,r10,8
   13588:	54800017 	ldw	r18,0(r10)
   1358c:	54c00117 	ldw	r19,4(r10)
   13590:	4801ca16 	blt	r9,zero,13cbc <___vfiprintf_internal_r+0x1248>
   13594:	013fdfc4 	movi	r4,-129
   13598:	94c4b03a 	or	r2,r18,r19
   1359c:	d8c02215 	stw	r3,136(sp)
   135a0:	a128703a 	and	r20,r20,r4
   135a4:	0039883a 	mov	fp,zero
   135a8:	103f341e 	bne	r2,zero,1327c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701327c>
   135ac:	483e2e26 	beq	r9,zero,12e68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012e68>
   135b0:	0025883a 	mov	r18,zero
   135b4:	94800c04 	addi	r18,r18,48
   135b8:	dc8019c5 	stb	r18,103(sp)
   135bc:	dcc02717 	ldw	r19,156(sp)
   135c0:	dd4019c4 	addi	r21,sp,103
   135c4:	003e2b06 	br	12e74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012e74>
   135c8:	21003fcc 	andi	r4,r4,255
   135cc:	2002361e 	bne	r4,zero,13ea8 <___vfiprintf_internal_r+0x1434>
   135d0:	1801c126 	beq	r3,zero,13cd8 <___vfiprintf_internal_r+0x1264>
   135d4:	04800044 	movi	r18,1
   135d8:	d8c01005 	stb	r3,64(sp)
   135dc:	d8001d85 	stb	zero,118(sp)
   135e0:	9027883a 	mov	r19,r18
   135e4:	dd401004 	addi	r21,sp,64
   135e8:	003f1106 	br	13230 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013230>
   135ec:	d9402117 	ldw	r5,132(sp)
   135f0:	d9002017 	ldw	r4,128(sp)
   135f4:	d9801a04 	addi	r6,sp,104
   135f8:	d9c02b15 	stw	r7,172(sp)
   135fc:	dbc02a15 	stw	r15,168(sp)
   13600:	00129600 	call	12960 <__sprint_r.part.0>
   13604:	d9c02b17 	ldw	r7,172(sp)
   13608:	dbc02a17 	ldw	r15,168(sp)
   1360c:	10006d1e 	bne	r2,zero,137c4 <___vfiprintf_internal_r+0xd50>
   13610:	d9801b17 	ldw	r6,108(sp)
   13614:	d8801c17 	ldw	r2,112(sp)
   13618:	d811883a 	mov	r8,sp
   1361c:	31400044 	addi	r5,r6,1
   13620:	003e3306 	br	12ef0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012ef0>
   13624:	d9401b17 	ldw	r5,108(sp)
   13628:	d8801c17 	ldw	r2,112(sp)
   1362c:	29000044 	addi	r4,r5,1
   13630:	d8c01d87 	ldb	r3,118(sp)
   13634:	183e4d26 	beq	r3,zero,12f6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012f6c>
   13638:	00c00044 	movi	r3,1
   1363c:	d9401d84 	addi	r5,sp,118
   13640:	10c5883a 	add	r2,r2,r3
   13644:	41400015 	stw	r5,0(r8)
   13648:	40c00115 	stw	r3,4(r8)
   1364c:	d8801c15 	stw	r2,112(sp)
   13650:	d9001b15 	stw	r4,108(sp)
   13654:	014001c4 	movi	r5,7
   13658:	2900a90e 	bge	r5,r4,13900 <___vfiprintf_internal_r+0xe8c>
   1365c:	1000da1e 	bne	r2,zero,139c8 <___vfiprintf_internal_r+0xf54>
   13660:	7000ab1e 	bne	r14,zero,13910 <___vfiprintf_internal_r+0xe9c>
   13664:	000b883a 	mov	r5,zero
   13668:	1809883a 	mov	r4,r3
   1366c:	d811883a 	mov	r8,sp
   13670:	00c02004 	movi	r3,128
   13674:	e0fe4d26 	beq	fp,r3,12fac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012fac>
   13678:	4cf9c83a 	sub	fp,r9,r19
   1367c:	073e7b0e 	bge	zero,fp,1306c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701306c>
   13680:	01c00404 	movi	r7,16
   13684:	3f01900e 	bge	r7,fp,13cc8 <___vfiprintf_internal_r+0x1254>
   13688:	00c000b4 	movhi	r3,2
   1368c:	18d34804 	addi	r3,r3,19744
   13690:	d8c02415 	stw	r3,144(sp)
   13694:	034001c4 	movi	r13,7
   13698:	00000506 	br	136b0 <___vfiprintf_internal_r+0xc3c>
   1369c:	29000084 	addi	r4,r5,2
   136a0:	42000204 	addi	r8,r8,8
   136a4:	180b883a 	mov	r5,r3
   136a8:	e73ffc04 	addi	fp,fp,-16
   136ac:	3f000d0e 	bge	r7,fp,136e4 <___vfiprintf_internal_r+0xc70>
   136b0:	10800404 	addi	r2,r2,16
   136b4:	28c00044 	addi	r3,r5,1
   136b8:	45c00015 	stw	r23,0(r8)
   136bc:	41c00115 	stw	r7,4(r8)
   136c0:	d8801c15 	stw	r2,112(sp)
   136c4:	d8c01b15 	stw	r3,108(sp)
   136c8:	68fff40e 	bge	r13,r3,1369c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701369c>
   136cc:	1000101e 	bne	r2,zero,13710 <___vfiprintf_internal_r+0xc9c>
   136d0:	e73ffc04 	addi	fp,fp,-16
   136d4:	01000044 	movi	r4,1
   136d8:	000b883a 	mov	r5,zero
   136dc:	d811883a 	mov	r8,sp
   136e0:	3f3ff316 	blt	r7,fp,136b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70136b0>
   136e4:	da802417 	ldw	r10,144(sp)
   136e8:	1705883a 	add	r2,r2,fp
   136ec:	47000115 	stw	fp,4(r8)
   136f0:	42800015 	stw	r10,0(r8)
   136f4:	d8801c15 	stw	r2,112(sp)
   136f8:	d9001b15 	stw	r4,108(sp)
   136fc:	00c001c4 	movi	r3,7
   13700:	19003616 	blt	r3,r4,137dc <___vfiprintf_internal_r+0xd68>
   13704:	42000204 	addi	r8,r8,8
   13708:	21000044 	addi	r4,r4,1
   1370c:	003e5706 	br	1306c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701306c>
   13710:	d9402117 	ldw	r5,132(sp)
   13714:	d9002017 	ldw	r4,128(sp)
   13718:	d9801a04 	addi	r6,sp,104
   1371c:	d9c02b15 	stw	r7,172(sp)
   13720:	db402a15 	stw	r13,168(sp)
   13724:	00129600 	call	12960 <__sprint_r.part.0>
   13728:	d9c02b17 	ldw	r7,172(sp)
   1372c:	db402a17 	ldw	r13,168(sp)
   13730:	1000241e 	bne	r2,zero,137c4 <___vfiprintf_internal_r+0xd50>
   13734:	d9401b17 	ldw	r5,108(sp)
   13738:	d8801c17 	ldw	r2,112(sp)
   1373c:	d811883a 	mov	r8,sp
   13740:	29000044 	addi	r4,r5,1
   13744:	003fd806 	br	136a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70136a8>
   13748:	d9401b17 	ldw	r5,108(sp)
   1374c:	00c000b4 	movhi	r3,2
   13750:	18d34c04 	addi	r3,r3,19760
   13754:	d8c02415 	stw	r3,144(sp)
   13758:	29400044 	addi	r5,r5,1
   1375c:	d8c02417 	ldw	r3,144(sp)
   13760:	14c5883a 	add	r2,r2,r19
   13764:	44c00115 	stw	r19,4(r8)
   13768:	40c00015 	stw	r3,0(r8)
   1376c:	d8801c15 	stw	r2,112(sp)
   13770:	d9401b15 	stw	r5,108(sp)
   13774:	00c001c4 	movi	r3,7
   13778:	1940070e 	bge	r3,r5,13798 <___vfiprintf_internal_r+0xd24>
   1377c:	103e4826 	beq	r2,zero,130a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70130a0>
   13780:	d9402117 	ldw	r5,132(sp)
   13784:	d9002017 	ldw	r4,128(sp)
   13788:	d9801a04 	addi	r6,sp,104
   1378c:	00129600 	call	12960 <__sprint_r.part.0>
   13790:	10000c1e 	bne	r2,zero,137c4 <___vfiprintf_internal_r+0xd50>
   13794:	d8801c17 	ldw	r2,112(sp)
   13798:	8c80010e 	bge	r17,r18,137a0 <___vfiprintf_internal_r+0xd2c>
   1379c:	9023883a 	mov	r17,r18
   137a0:	da802317 	ldw	r10,140(sp)
   137a4:	5455883a 	add	r10,r10,r17
   137a8:	da802315 	stw	r10,140(sp)
   137ac:	103e4126 	beq	r2,zero,130b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70130b4>
   137b0:	d9402117 	ldw	r5,132(sp)
   137b4:	d9002017 	ldw	r4,128(sp)
   137b8:	d9801a04 	addi	r6,sp,104
   137bc:	00129600 	call	12960 <__sprint_r.part.0>
   137c0:	103e3c26 	beq	r2,zero,130b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70130b4>
   137c4:	dd002117 	ldw	r20,132(sp)
   137c8:	a080030b 	ldhu	r2,12(r20)
   137cc:	1080100c 	andi	r2,r2,64
   137d0:	1001231e 	bne	r2,zero,13c60 <___vfiprintf_internal_r+0x11ec>
   137d4:	d8802317 	ldw	r2,140(sp)
   137d8:	003d7b06 	br	12dc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012dc8>
   137dc:	1000991e 	bne	r2,zero,13a44 <___vfiprintf_internal_r+0xfd0>
   137e0:	00c00044 	movi	r3,1
   137e4:	9805883a 	mov	r2,r19
   137e8:	dd400015 	stw	r21,0(sp)
   137ec:	dcc00115 	stw	r19,4(sp)
   137f0:	dcc01c15 	stw	r19,112(sp)
   137f4:	d8c01b15 	stw	r3,108(sp)
   137f8:	d811883a 	mov	r8,sp
   137fc:	42000204 	addi	r8,r8,8
   13800:	a2c0010c 	andi	r11,r20,4
   13804:	583fe426 	beq	r11,zero,13798 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013798>
   13808:	8ca7c83a 	sub	r19,r17,r18
   1380c:	04ffe20e 	bge	zero,r19,13798 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013798>
   13810:	01c00404 	movi	r7,16
   13814:	3cffcc0e 	bge	r7,r19,13748 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013748>
   13818:	028000b4 	movhi	r10,2
   1381c:	52934c04 	addi	r10,r10,19760
   13820:	d9001b17 	ldw	r4,108(sp)
   13824:	da802415 	stw	r10,144(sp)
   13828:	382b883a 	mov	r21,r7
   1382c:	050001c4 	movi	r20,7
   13830:	df002017 	ldw	fp,128(sp)
   13834:	00000506 	br	1384c <___vfiprintf_internal_r+0xdd8>
   13838:	21400084 	addi	r5,r4,2
   1383c:	42000204 	addi	r8,r8,8
   13840:	1809883a 	mov	r4,r3
   13844:	9cfffc04 	addi	r19,r19,-16
   13848:	acffc40e 	bge	r21,r19,1375c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701375c>
   1384c:	10800404 	addi	r2,r2,16
   13850:	20c00044 	addi	r3,r4,1
   13854:	45800015 	stw	r22,0(r8)
   13858:	45400115 	stw	r21,4(r8)
   1385c:	d8801c15 	stw	r2,112(sp)
   13860:	d8c01b15 	stw	r3,108(sp)
   13864:	a0fff40e 	bge	r20,r3,13838 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013838>
   13868:	1000041e 	bne	r2,zero,1387c <___vfiprintf_internal_r+0xe08>
   1386c:	01400044 	movi	r5,1
   13870:	0009883a 	mov	r4,zero
   13874:	d811883a 	mov	r8,sp
   13878:	003ff206 	br	13844 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013844>
   1387c:	d9402117 	ldw	r5,132(sp)
   13880:	d9801a04 	addi	r6,sp,104
   13884:	e009883a 	mov	r4,fp
   13888:	00129600 	call	12960 <__sprint_r.part.0>
   1388c:	103fcd1e 	bne	r2,zero,137c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70137c4>
   13890:	d9001b17 	ldw	r4,108(sp)
   13894:	d8801c17 	ldw	r2,112(sp)
   13898:	d811883a 	mov	r8,sp
   1389c:	21400044 	addi	r5,r4,1
   138a0:	003fe806 	br	13844 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013844>
   138a4:	d9402117 	ldw	r5,132(sp)
   138a8:	d9002017 	ldw	r4,128(sp)
   138ac:	d9801a04 	addi	r6,sp,104
   138b0:	d9c02b15 	stw	r7,172(sp)
   138b4:	db402a15 	stw	r13,168(sp)
   138b8:	00129600 	call	12960 <__sprint_r.part.0>
   138bc:	d9c02b17 	ldw	r7,172(sp)
   138c0:	db402a17 	ldw	r13,168(sp)
   138c4:	103fbf1e 	bne	r2,zero,137c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70137c4>
   138c8:	d9401b17 	ldw	r5,108(sp)
   138cc:	d8801c17 	ldw	r2,112(sp)
   138d0:	d811883a 	mov	r8,sp
   138d4:	29800044 	addi	r6,r5,1
   138d8:	003dc406 	br	12fec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012fec>
   138dc:	1000d21e 	bne	r2,zero,13c28 <___vfiprintf_internal_r+0x11b4>
   138e0:	d8c01d87 	ldb	r3,118(sp)
   138e4:	18009526 	beq	r3,zero,13b3c <___vfiprintf_internal_r+0x10c8>
   138e8:	00800044 	movi	r2,1
   138ec:	d8c01d84 	addi	r3,sp,118
   138f0:	1009883a 	mov	r4,r2
   138f4:	d8c00015 	stw	r3,0(sp)
   138f8:	d8800115 	stw	r2,4(sp)
   138fc:	d811883a 	mov	r8,sp
   13900:	200b883a 	mov	r5,r4
   13904:	42000204 	addi	r8,r8,8
   13908:	21000044 	addi	r4,r4,1
   1390c:	003d9706 	br	12f6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012f6c>
   13910:	d9001d04 	addi	r4,sp,116
   13914:	00800084 	movi	r2,2
   13918:	d9000015 	stw	r4,0(sp)
   1391c:	d8800115 	stw	r2,4(sp)
   13920:	1809883a 	mov	r4,r3
   13924:	d811883a 	mov	r8,sp
   13928:	200b883a 	mov	r5,r4
   1392c:	42000204 	addi	r8,r8,8
   13930:	21000044 	addi	r4,r4,1
   13934:	003f4e06 	br	13670 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013670>
   13938:	d8001d85 	stb	zero,118(sp)
   1393c:	48005016 	blt	r9,zero,13a80 <___vfiprintf_internal_r+0x100c>
   13940:	00ffdfc4 	movi	r3,-129
   13944:	94c4b03a 	or	r2,r18,r19
   13948:	a0e8703a 	and	r20,r20,r3
   1394c:	103d4426 	beq	r2,zero,12e60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012e60>
   13950:	0039883a 	mov	fp,zero
   13954:	d9002617 	ldw	r4,152(sp)
   13958:	dd401a04 	addi	r21,sp,104
   1395c:	908003cc 	andi	r2,r18,15
   13960:	9806973a 	slli	r3,r19,28
   13964:	2085883a 	add	r2,r4,r2
   13968:	9024d13a 	srli	r18,r18,4
   1396c:	10800003 	ldbu	r2,0(r2)
   13970:	9826d13a 	srli	r19,r19,4
   13974:	ad7fffc4 	addi	r21,r21,-1
   13978:	1ca4b03a 	or	r18,r3,r18
   1397c:	a8800005 	stb	r2,0(r21)
   13980:	94c4b03a 	or	r2,r18,r19
   13984:	103ff51e 	bne	r2,zero,1395c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701395c>
   13988:	003e5906 	br	132f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70132f0>
   1398c:	d9402117 	ldw	r5,132(sp)
   13990:	d9002017 	ldw	r4,128(sp)
   13994:	d9801a04 	addi	r6,sp,104
   13998:	00129600 	call	12960 <__sprint_r.part.0>
   1399c:	103f891e 	bne	r2,zero,137c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70137c4>
   139a0:	d8801c17 	ldw	r2,112(sp)
   139a4:	d811883a 	mov	r8,sp
   139a8:	003f9506 	br	13800 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013800>
   139ac:	d9402117 	ldw	r5,132(sp)
   139b0:	d9002017 	ldw	r4,128(sp)
   139b4:	d9801a04 	addi	r6,sp,104
   139b8:	00129600 	call	12960 <__sprint_r.part.0>
   139bc:	103f811e 	bne	r2,zero,137c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70137c4>
   139c0:	d811883a 	mov	r8,sp
   139c4:	003ced06 	br	12d7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012d7c>
   139c8:	d9402117 	ldw	r5,132(sp)
   139cc:	d9002017 	ldw	r4,128(sp)
   139d0:	d9801a04 	addi	r6,sp,104
   139d4:	da402c15 	stw	r9,176(sp)
   139d8:	db802a15 	stw	r14,168(sp)
   139dc:	00129600 	call	12960 <__sprint_r.part.0>
   139e0:	da402c17 	ldw	r9,176(sp)
   139e4:	db802a17 	ldw	r14,168(sp)
   139e8:	103f761e 	bne	r2,zero,137c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70137c4>
   139ec:	d9401b17 	ldw	r5,108(sp)
   139f0:	d8801c17 	ldw	r2,112(sp)
   139f4:	d811883a 	mov	r8,sp
   139f8:	29000044 	addi	r4,r5,1
   139fc:	003d5b06 	br	12f6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012f6c>
   13a00:	d9402117 	ldw	r5,132(sp)
   13a04:	d9002017 	ldw	r4,128(sp)
   13a08:	d9801a04 	addi	r6,sp,104
   13a0c:	da402c15 	stw	r9,176(sp)
   13a10:	00129600 	call	12960 <__sprint_r.part.0>
   13a14:	da402c17 	ldw	r9,176(sp)
   13a18:	103f6a1e 	bne	r2,zero,137c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70137c4>
   13a1c:	d9401b17 	ldw	r5,108(sp)
   13a20:	d8801c17 	ldw	r2,112(sp)
   13a24:	d811883a 	mov	r8,sp
   13a28:	29000044 	addi	r4,r5,1
   13a2c:	003f1006 	br	13670 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013670>
   13a30:	1000c31e 	bne	r2,zero,13d40 <___vfiprintf_internal_r+0x12cc>
   13a34:	01000044 	movi	r4,1
   13a38:	000b883a 	mov	r5,zero
   13a3c:	d811883a 	mov	r8,sp
   13a40:	003f0d06 	br	13678 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013678>
   13a44:	d9402117 	ldw	r5,132(sp)
   13a48:	d9002017 	ldw	r4,128(sp)
   13a4c:	d9801a04 	addi	r6,sp,104
   13a50:	00129600 	call	12960 <__sprint_r.part.0>
   13a54:	103f5b1e 	bne	r2,zero,137c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70137c4>
   13a58:	d9001b17 	ldw	r4,108(sp)
   13a5c:	d8801c17 	ldw	r2,112(sp)
   13a60:	d811883a 	mov	r8,sp
   13a64:	21000044 	addi	r4,r4,1
   13a68:	003d8006 	br	1306c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701306c>
   13a6c:	010000b4 	movhi	r4,2
   13a70:	2112d704 	addi	r4,r4,19292
   13a74:	d9002615 	stw	r4,152(sp)
   13a78:	d8c02215 	stw	r3,136(sp)
   13a7c:	1029883a 	mov	r20,r2
   13a80:	94c4b03a 	or	r2,r18,r19
   13a84:	103fb21e 	bne	r2,zero,13950 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013950>
   13a88:	0039883a 	mov	fp,zero
   13a8c:	00800084 	movi	r2,2
   13a90:	003e6b06 	br	13440 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013440>
   13a94:	da802217 	ldw	r10,136(sp)
   13a98:	d8001d85 	stb	zero,118(sp)
   13a9c:	0027883a 	mov	r19,zero
   13aa0:	50800104 	addi	r2,r10,4
   13aa4:	54800017 	ldw	r18,0(r10)
   13aa8:	483e6016 	blt	r9,zero,1342c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701342c>
   13aac:	00ffdfc4 	movi	r3,-129
   13ab0:	d8802215 	stw	r2,136(sp)
   13ab4:	a0e8703a 	and	r20,r20,r3
   13ab8:	0039883a 	mov	fp,zero
   13abc:	903ebb26 	beq	r18,zero,135ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70135ac>
   13ac0:	00800244 	movi	r2,9
   13ac4:	14bdee36 	bltu	r2,r18,13280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013280>
   13ac8:	003eba06 	br	135b4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70135b4>
   13acc:	00800c04 	movi	r2,48
   13ad0:	d8c01d45 	stb	r3,117(sp)
   13ad4:	d8801d05 	stb	r2,116(sp)
   13ad8:	d8001d85 	stb	zero,118(sp)
   13adc:	a0c00094 	ori	r3,r20,2
   13ae0:	4800a916 	blt	r9,zero,13d88 <___vfiprintf_internal_r+0x1314>
   13ae4:	00bfdfc4 	movi	r2,-129
   13ae8:	a096703a 	and	r11,r20,r2
   13aec:	5d000094 	ori	r20,r11,2
   13af0:	0039883a 	mov	fp,zero
   13af4:	003f9706 	br	13954 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013954>
   13af8:	8025883a 	mov	r18,r16
   13afc:	003c2e06 	br	12bb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bb8>
   13b00:	008000b4 	movhi	r2,2
   13b04:	1092d704 	addi	r2,r2,19292
   13b08:	0039883a 	mov	fp,zero
   13b0c:	d8802615 	stw	r2,152(sp)
   13b10:	003f9006 	br	13954 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013954>
   13b14:	04a5c83a 	sub	r18,zero,r18
   13b18:	07000b44 	movi	fp,45
   13b1c:	9004c03a 	cmpne	r2,r18,zero
   13b20:	04e7c83a 	sub	r19,zero,r19
   13b24:	df001d85 	stb	fp,118(sp)
   13b28:	98a7c83a 	sub	r19,r19,r2
   13b2c:	48009f16 	blt	r9,zero,13dac <___vfiprintf_internal_r+0x1338>
   13b30:	00bfdfc4 	movi	r2,-129
   13b34:	a0a8703a 	and	r20,r20,r2
   13b38:	003dd006 	br	1327c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701327c>
   13b3c:	70004c26 	beq	r14,zero,13c70 <___vfiprintf_internal_r+0x11fc>
   13b40:	00800084 	movi	r2,2
   13b44:	d8c01d04 	addi	r3,sp,116
   13b48:	d8c00015 	stw	r3,0(sp)
   13b4c:	d8800115 	stw	r2,4(sp)
   13b50:	01000044 	movi	r4,1
   13b54:	d811883a 	mov	r8,sp
   13b58:	003f7306 	br	13928 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013928>
   13b5c:	a080100c 	andi	r2,r20,64
   13b60:	da802217 	ldw	r10,136(sp)
   13b64:	103e0626 	beq	r2,zero,13380 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013380>
   13b68:	5480000f 	ldh	r18,0(r10)
   13b6c:	52800104 	addi	r10,r10,4
   13b70:	da802215 	stw	r10,136(sp)
   13b74:	9027d7fa 	srai	r19,r18,31
   13b78:	9805883a 	mov	r2,r19
   13b7c:	003db806 	br	13260 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013260>
   13b80:	a080040c 	andi	r2,r20,16
   13b84:	1000091e 	bne	r2,zero,13bac <___vfiprintf_internal_r+0x1138>
   13b88:	a2c0100c 	andi	r11,r20,64
   13b8c:	58000726 	beq	r11,zero,13bac <___vfiprintf_internal_r+0x1138>
   13b90:	da802217 	ldw	r10,136(sp)
   13b94:	50800017 	ldw	r2,0(r10)
   13b98:	52800104 	addi	r10,r10,4
   13b9c:	da802215 	stw	r10,136(sp)
   13ba0:	da802317 	ldw	r10,140(sp)
   13ba4:	1280000d 	sth	r10,0(r2)
   13ba8:	003be706 	br	12b48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012b48>
   13bac:	da802217 	ldw	r10,136(sp)
   13bb0:	50800017 	ldw	r2,0(r10)
   13bb4:	52800104 	addi	r10,r10,4
   13bb8:	da802215 	stw	r10,136(sp)
   13bbc:	da802317 	ldw	r10,140(sp)
   13bc0:	12800015 	stw	r10,0(r2)
   13bc4:	003be006 	br	12b48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012b48>
   13bc8:	a080100c 	andi	r2,r20,64
   13bcc:	da802217 	ldw	r10,136(sp)
   13bd0:	10003026 	beq	r2,zero,13c94 <___vfiprintf_internal_r+0x1220>
   13bd4:	5480000b 	ldhu	r18,0(r10)
   13bd8:	52800104 	addi	r10,r10,4
   13bdc:	0027883a 	mov	r19,zero
   13be0:	da802215 	stw	r10,136(sp)
   13be4:	003d8006 	br	131e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70131e8>
   13be8:	80c00007 	ldb	r3,0(r16)
   13bec:	003c0006 	br	12bf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bf0>
   13bf0:	a080100c 	andi	r2,r20,64
   13bf4:	d8001d85 	stb	zero,118(sp)
   13bf8:	da802217 	ldw	r10,136(sp)
   13bfc:	1000201e 	bne	r2,zero,13c80 <___vfiprintf_internal_r+0x120c>
   13c00:	50800104 	addi	r2,r10,4
   13c04:	54800017 	ldw	r18,0(r10)
   13c08:	0027883a 	mov	r19,zero
   13c0c:	483def0e 	bge	r9,zero,133cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70133cc>
   13c10:	94c6b03a 	or	r3,r18,r19
   13c14:	d8802215 	stw	r2,136(sp)
   13c18:	183d4e1e 	bne	r3,zero,13154 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013154>
   13c1c:	0039883a 	mov	fp,zero
   13c20:	0005883a 	mov	r2,zero
   13c24:	003e0606 	br	13440 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013440>
   13c28:	d9402117 	ldw	r5,132(sp)
   13c2c:	d9002017 	ldw	r4,128(sp)
   13c30:	d9801a04 	addi	r6,sp,104
   13c34:	da402c15 	stw	r9,176(sp)
   13c38:	db802a15 	stw	r14,168(sp)
   13c3c:	00129600 	call	12960 <__sprint_r.part.0>
   13c40:	da402c17 	ldw	r9,176(sp)
   13c44:	db802a17 	ldw	r14,168(sp)
   13c48:	103ede1e 	bne	r2,zero,137c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70137c4>
   13c4c:	d9401b17 	ldw	r5,108(sp)
   13c50:	d8801c17 	ldw	r2,112(sp)
   13c54:	d811883a 	mov	r8,sp
   13c58:	29000044 	addi	r4,r5,1
   13c5c:	003e7406 	br	13630 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013630>
   13c60:	00bfffc4 	movi	r2,-1
   13c64:	003c5806 	br	12dc8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012dc8>
   13c68:	d811883a 	mov	r8,sp
   13c6c:	003ee806 	br	13810 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013810>
   13c70:	000b883a 	mov	r5,zero
   13c74:	01000044 	movi	r4,1
   13c78:	d811883a 	mov	r8,sp
   13c7c:	003e7c06 	br	13670 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013670>
   13c80:	50800104 	addi	r2,r10,4
   13c84:	5480000b 	ldhu	r18,0(r10)
   13c88:	0027883a 	mov	r19,zero
   13c8c:	483dcf0e 	bge	r9,zero,133cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70133cc>
   13c90:	003fdf06 	br	13c10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013c10>
   13c94:	54800017 	ldw	r18,0(r10)
   13c98:	52800104 	addi	r10,r10,4
   13c9c:	0027883a 	mov	r19,zero
   13ca0:	da802215 	stw	r10,136(sp)
   13ca4:	003d5006 	br	131e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70131e8>
   13ca8:	50800104 	addi	r2,r10,4
   13cac:	5480000b 	ldhu	r18,0(r10)
   13cb0:	0027883a 	mov	r19,zero
   13cb4:	483f7d0e 	bge	r9,zero,13aac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013aac>
   13cb8:	003ddc06 	br	1342c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701342c>
   13cbc:	d8c02215 	stw	r3,136(sp)
   13cc0:	0039883a 	mov	fp,zero
   13cc4:	003ddb06 	br	13434 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013434>
   13cc8:	028000b4 	movhi	r10,2
   13ccc:	52934804 	addi	r10,r10,19744
   13cd0:	da802415 	stw	r10,144(sp)
   13cd4:	003e8306 	br	136e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70136e4>
   13cd8:	d8801c17 	ldw	r2,112(sp)
   13cdc:	dd002117 	ldw	r20,132(sp)
   13ce0:	103eb926 	beq	r2,zero,137c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70137c8>
   13ce4:	d9002017 	ldw	r4,128(sp)
   13ce8:	d9801a04 	addi	r6,sp,104
   13cec:	a00b883a 	mov	r5,r20
   13cf0:	00129600 	call	12960 <__sprint_r.part.0>
   13cf4:	003eb406 	br	137c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70137c8>
   13cf8:	80c00043 	ldbu	r3,1(r16)
   13cfc:	a5000814 	ori	r20,r20,32
   13d00:	84000044 	addi	r16,r16,1
   13d04:	18c03fcc 	andi	r3,r3,255
   13d08:	18c0201c 	xori	r3,r3,128
   13d0c:	18ffe004 	addi	r3,r3,-128
   13d10:	003bb706 	br	12bf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bf0>
   13d14:	a809883a 	mov	r4,r21
   13d18:	d8c02a15 	stw	r3,168(sp)
   13d1c:	da002b15 	stw	r8,172(sp)
   13d20:	00089900 	call	8990 <strlen>
   13d24:	d8c02a17 	ldw	r3,168(sp)
   13d28:	1027883a 	mov	r19,r2
   13d2c:	df001d83 	ldbu	fp,118(sp)
   13d30:	d8c02215 	stw	r3,136(sp)
   13d34:	0013883a 	mov	r9,zero
   13d38:	da002b17 	ldw	r8,172(sp)
   13d3c:	003c4d06 	br	12e74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012e74>
   13d40:	d9402117 	ldw	r5,132(sp)
   13d44:	d9002017 	ldw	r4,128(sp)
   13d48:	d9801a04 	addi	r6,sp,104
   13d4c:	da402c15 	stw	r9,176(sp)
   13d50:	00129600 	call	12960 <__sprint_r.part.0>
   13d54:	da402c17 	ldw	r9,176(sp)
   13d58:	103e9a1e 	bne	r2,zero,137c4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70137c4>
   13d5c:	d9401b17 	ldw	r5,108(sp)
   13d60:	d8801c17 	ldw	r2,112(sp)
   13d64:	d811883a 	mov	r8,sp
   13d68:	29000044 	addi	r4,r5,1
   13d6c:	003e4206 	br	13678 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013678>
   13d70:	d9401b17 	ldw	r5,108(sp)
   13d74:	010000b4 	movhi	r4,2
   13d78:	21134c04 	addi	r4,r4,19760
   13d7c:	d9002415 	stw	r4,144(sp)
   13d80:	29400044 	addi	r5,r5,1
   13d84:	003c6d06 	br	12f3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012f3c>
   13d88:	0039883a 	mov	fp,zero
   13d8c:	00800084 	movi	r2,2
   13d90:	10803fcc 	andi	r2,r2,255
   13d94:	01000044 	movi	r4,1
   13d98:	11001e26 	beq	r2,r4,13e14 <___vfiprintf_internal_r+0x13a0>
   13d9c:	01000084 	movi	r4,2
   13da0:	11001e1e 	bne	r2,r4,13e1c <___vfiprintf_internal_r+0x13a8>
   13da4:	1829883a 	mov	r20,r3
   13da8:	003eea06 	br	13954 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013954>
   13dac:	a007883a 	mov	r3,r20
   13db0:	00800044 	movi	r2,1
   13db4:	003ff606 	br	13d90 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013d90>
   13db8:	00800184 	movi	r2,6
   13dbc:	1240012e 	bgeu	r2,r9,13dc4 <___vfiprintf_internal_r+0x1350>
   13dc0:	1013883a 	mov	r9,r2
   13dc4:	4827883a 	mov	r19,r9
   13dc8:	4825883a 	mov	r18,r9
   13dcc:	48001516 	blt	r9,zero,13e24 <___vfiprintf_internal_r+0x13b0>
   13dd0:	054000b4 	movhi	r21,2
   13dd4:	d8c02215 	stw	r3,136(sp)
   13dd8:	ad52dc04 	addi	r21,r21,19312
   13ddc:	003d1406 	br	13230 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013230>
   13de0:	028000b4 	movhi	r10,2
   13de4:	52934804 	addi	r10,r10,19744
   13de8:	da802415 	stw	r10,144(sp)
   13dec:	200d883a 	mov	r6,r4
   13df0:	003c9106 	br	13038 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013038>
   13df4:	5021883a 	mov	r16,r10
   13df8:	0013883a 	mov	r9,zero
   13dfc:	003b7d06 	br	12bf4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bf4>
   13e00:	4827883a 	mov	r19,r9
   13e04:	df001d83 	ldbu	fp,118(sp)
   13e08:	d8c02215 	stw	r3,136(sp)
   13e0c:	0013883a 	mov	r9,zero
   13e10:	003c1806 	br	12e74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012e74>
   13e14:	1829883a 	mov	r20,r3
   13e18:	003d1806 	br	1327c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701327c>
   13e1c:	1829883a 	mov	r20,r3
   13e20:	003ccd06 	br	13158 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013158>
   13e24:	0025883a 	mov	r18,zero
   13e28:	003fe906 	br	13dd0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013dd0>
   13e2c:	d8802217 	ldw	r2,136(sp)
   13e30:	80c00043 	ldbu	r3,1(r16)
   13e34:	5021883a 	mov	r16,r10
   13e38:	12400017 	ldw	r9,0(r2)
   13e3c:	10800104 	addi	r2,r2,4
   13e40:	d8802215 	stw	r2,136(sp)
   13e44:	483faf0e 	bge	r9,zero,13d04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013d04>
   13e48:	18c03fcc 	andi	r3,r3,255
   13e4c:	18c0201c 	xori	r3,r3,128
   13e50:	027fffc4 	movi	r9,-1
   13e54:	18ffe004 	addi	r3,r3,-128
   13e58:	003b6506 	br	12bf0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012bf0>
   13e5c:	d9c01d85 	stb	r7,118(sp)
   13e60:	003ca006 	br	130e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70130e4>
   13e64:	d9c01d85 	stb	r7,118(sp)
   13e68:	003cad06 	br	13120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013120>
   13e6c:	d9c01d85 	stb	r7,118(sp)
   13e70:	003d7d06 	br	13468 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013468>
   13e74:	d9c01d85 	stb	r7,118(sp)
   13e78:	003d5f06 	br	133f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70133f8>
   13e7c:	a080004c 	andi	r2,r20,1
   13e80:	0039883a 	mov	fp,zero
   13e84:	10000526 	beq	r2,zero,13e9c <___vfiprintf_internal_r+0x1428>
   13e88:	00800c04 	movi	r2,48
   13e8c:	d88019c5 	stb	r2,103(sp)
   13e90:	dcc02717 	ldw	r19,156(sp)
   13e94:	dd4019c4 	addi	r21,sp,103
   13e98:	003bf606 	br	12e74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012e74>
   13e9c:	0027883a 	mov	r19,zero
   13ea0:	dd401a04 	addi	r21,sp,104
   13ea4:	003bf306 	br	12e74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7012e74>
   13ea8:	d9c01d85 	stb	r7,118(sp)
   13eac:	003dc806 	br	135d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70135d0>
   13eb0:	d9c01d85 	stb	r7,118(sp)
   13eb4:	003d3a06 	br	133a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70133a0>
   13eb8:	d9c01d85 	stb	r7,118(sp)
   13ebc:	003d2a06 	br	13368 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013368>
   13ec0:	d9c01d85 	stb	r7,118(sp)
   13ec4:	003cde06 	br	13240 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013240>
   13ec8:	d9c01d85 	stb	r7,118(sp)
   13ecc:	003cbc06 	br	131c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70131c0>

00013ed0 <__vfiprintf_internal>:
   13ed0:	008000b4 	movhi	r2,2
   13ed4:	109bd004 	addi	r2,r2,28480
   13ed8:	300f883a 	mov	r7,r6
   13edc:	280d883a 	mov	r6,r5
   13ee0:	200b883a 	mov	r5,r4
   13ee4:	11000017 	ldw	r4,0(r2)
   13ee8:	0012a741 	jmpi	12a74 <___vfiprintf_internal_r>

00013eec <__sbprintf>:
   13eec:	2880030b 	ldhu	r2,12(r5)
   13ef0:	2ac01917 	ldw	r11,100(r5)
   13ef4:	2a80038b 	ldhu	r10,14(r5)
   13ef8:	2a400717 	ldw	r9,28(r5)
   13efc:	2a000917 	ldw	r8,36(r5)
   13f00:	defee204 	addi	sp,sp,-1144
   13f04:	00c10004 	movi	r3,1024
   13f08:	dc011a15 	stw	r16,1128(sp)
   13f0c:	10bfff4c 	andi	r2,r2,65533
   13f10:	2821883a 	mov	r16,r5
   13f14:	d8cb883a 	add	r5,sp,r3
   13f18:	dc811c15 	stw	r18,1136(sp)
   13f1c:	dc411b15 	stw	r17,1132(sp)
   13f20:	dfc11d15 	stw	ra,1140(sp)
   13f24:	2025883a 	mov	r18,r4
   13f28:	d881030d 	sth	r2,1036(sp)
   13f2c:	dac11915 	stw	r11,1124(sp)
   13f30:	da81038d 	sth	r10,1038(sp)
   13f34:	da410715 	stw	r9,1052(sp)
   13f38:	da010915 	stw	r8,1060(sp)
   13f3c:	dec10015 	stw	sp,1024(sp)
   13f40:	dec10415 	stw	sp,1040(sp)
   13f44:	d8c10215 	stw	r3,1032(sp)
   13f48:	d8c10515 	stw	r3,1044(sp)
   13f4c:	d8010615 	stw	zero,1048(sp)
   13f50:	0012a740 	call	12a74 <___vfiprintf_internal_r>
   13f54:	1023883a 	mov	r17,r2
   13f58:	10000416 	blt	r2,zero,13f6c <__sbprintf+0x80>
   13f5c:	d9410004 	addi	r5,sp,1024
   13f60:	9009883a 	mov	r4,r18
   13f64:	000eac80 	call	eac8 <_fflush_r>
   13f68:	10000d1e 	bne	r2,zero,13fa0 <__sbprintf+0xb4>
   13f6c:	d881030b 	ldhu	r2,1036(sp)
   13f70:	1080100c 	andi	r2,r2,64
   13f74:	10000326 	beq	r2,zero,13f84 <__sbprintf+0x98>
   13f78:	8080030b 	ldhu	r2,12(r16)
   13f7c:	10801014 	ori	r2,r2,64
   13f80:	8080030d 	sth	r2,12(r16)
   13f84:	8805883a 	mov	r2,r17
   13f88:	dfc11d17 	ldw	ra,1140(sp)
   13f8c:	dc811c17 	ldw	r18,1136(sp)
   13f90:	dc411b17 	ldw	r17,1132(sp)
   13f94:	dc011a17 	ldw	r16,1128(sp)
   13f98:	dec11e04 	addi	sp,sp,1144
   13f9c:	f800283a 	ret
   13fa0:	047fffc4 	movi	r17,-1
   13fa4:	003ff106 	br	13f6c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013f6c>

00013fa8 <_write_r>:
   13fa8:	defffd04 	addi	sp,sp,-12
   13fac:	2805883a 	mov	r2,r5
   13fb0:	dc000015 	stw	r16,0(sp)
   13fb4:	040000f4 	movhi	r16,3
   13fb8:	dc400115 	stw	r17,4(sp)
   13fbc:	300b883a 	mov	r5,r6
   13fc0:	8423f204 	addi	r16,r16,-28728
   13fc4:	2023883a 	mov	r17,r4
   13fc8:	380d883a 	mov	r6,r7
   13fcc:	1009883a 	mov	r4,r2
   13fd0:	dfc00215 	stw	ra,8(sp)
   13fd4:	80000015 	stw	zero,0(r16)
   13fd8:	0017b400 	call	17b40 <write>
   13fdc:	00ffffc4 	movi	r3,-1
   13fe0:	10c00526 	beq	r2,r3,13ff8 <_write_r+0x50>
   13fe4:	dfc00217 	ldw	ra,8(sp)
   13fe8:	dc400117 	ldw	r17,4(sp)
   13fec:	dc000017 	ldw	r16,0(sp)
   13ff0:	dec00304 	addi	sp,sp,12
   13ff4:	f800283a 	ret
   13ff8:	80c00017 	ldw	r3,0(r16)
   13ffc:	183ff926 	beq	r3,zero,13fe4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013fe4>
   14000:	88c00015 	stw	r3,0(r17)
   14004:	003ff706 	br	13fe4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7013fe4>

00014008 <_close_r>:
   14008:	defffd04 	addi	sp,sp,-12
   1400c:	dc000015 	stw	r16,0(sp)
   14010:	040000f4 	movhi	r16,3
   14014:	dc400115 	stw	r17,4(sp)
   14018:	8423f204 	addi	r16,r16,-28728
   1401c:	2023883a 	mov	r17,r4
   14020:	2809883a 	mov	r4,r5
   14024:	dfc00215 	stw	ra,8(sp)
   14028:	80000015 	stw	zero,0(r16)
   1402c:	00171780 	call	17178 <close>
   14030:	00ffffc4 	movi	r3,-1
   14034:	10c00526 	beq	r2,r3,1404c <_close_r+0x44>
   14038:	dfc00217 	ldw	ra,8(sp)
   1403c:	dc400117 	ldw	r17,4(sp)
   14040:	dc000017 	ldw	r16,0(sp)
   14044:	dec00304 	addi	sp,sp,12
   14048:	f800283a 	ret
   1404c:	80c00017 	ldw	r3,0(r16)
   14050:	183ff926 	beq	r3,zero,14038 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014038>
   14054:	88c00015 	stw	r3,0(r17)
   14058:	003ff706 	br	14038 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014038>

0001405c <_calloc_r>:
   1405c:	298b383a 	mul	r5,r5,r6
   14060:	defffe04 	addi	sp,sp,-8
   14064:	dfc00115 	stw	ra,4(sp)
   14068:	dc000015 	stw	r16,0(sp)
   1406c:	00078dc0 	call	78dc <_malloc_r>
   14070:	10002926 	beq	r2,zero,14118 <_calloc_r+0xbc>
   14074:	11bfff17 	ldw	r6,-4(r2)
   14078:	1021883a 	mov	r16,r2
   1407c:	00bfff04 	movi	r2,-4
   14080:	308c703a 	and	r6,r6,r2
   14084:	00c00904 	movi	r3,36
   14088:	308d883a 	add	r6,r6,r2
   1408c:	19801636 	bltu	r3,r6,140e8 <_calloc_r+0x8c>
   14090:	008004c4 	movi	r2,19
   14094:	11800b2e 	bgeu	r2,r6,140c4 <_calloc_r+0x68>
   14098:	80000015 	stw	zero,0(r16)
   1409c:	80000115 	stw	zero,4(r16)
   140a0:	008006c4 	movi	r2,27
   140a4:	11801a2e 	bgeu	r2,r6,14110 <_calloc_r+0xb4>
   140a8:	80000215 	stw	zero,8(r16)
   140ac:	80000315 	stw	zero,12(r16)
   140b0:	30c0151e 	bne	r6,r3,14108 <_calloc_r+0xac>
   140b4:	80000415 	stw	zero,16(r16)
   140b8:	80800604 	addi	r2,r16,24
   140bc:	80000515 	stw	zero,20(r16)
   140c0:	00000106 	br	140c8 <_calloc_r+0x6c>
   140c4:	8005883a 	mov	r2,r16
   140c8:	10000015 	stw	zero,0(r2)
   140cc:	10000115 	stw	zero,4(r2)
   140d0:	10000215 	stw	zero,8(r2)
   140d4:	8005883a 	mov	r2,r16
   140d8:	dfc00117 	ldw	ra,4(sp)
   140dc:	dc000017 	ldw	r16,0(sp)
   140e0:	dec00204 	addi	sp,sp,8
   140e4:	f800283a 	ret
   140e8:	000b883a 	mov	r5,zero
   140ec:	8009883a 	mov	r4,r16
   140f0:	00082300 	call	8230 <memset>
   140f4:	8005883a 	mov	r2,r16
   140f8:	dfc00117 	ldw	ra,4(sp)
   140fc:	dc000017 	ldw	r16,0(sp)
   14100:	dec00204 	addi	sp,sp,8
   14104:	f800283a 	ret
   14108:	80800404 	addi	r2,r16,16
   1410c:	003fee06 	br	140c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70140c8>
   14110:	80800204 	addi	r2,r16,8
   14114:	003fec06 	br	140c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70140c8>
   14118:	0005883a 	mov	r2,zero
   1411c:	003fee06 	br	140d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70140d8>

00014120 <_fclose_r>:
   14120:	28003926 	beq	r5,zero,14208 <_fclose_r+0xe8>
   14124:	defffc04 	addi	sp,sp,-16
   14128:	dc400115 	stw	r17,4(sp)
   1412c:	dc000015 	stw	r16,0(sp)
   14130:	dfc00315 	stw	ra,12(sp)
   14134:	dc800215 	stw	r18,8(sp)
   14138:	2023883a 	mov	r17,r4
   1413c:	2821883a 	mov	r16,r5
   14140:	20000226 	beq	r4,zero,1414c <_fclose_r+0x2c>
   14144:	20800e17 	ldw	r2,56(r4)
   14148:	10002726 	beq	r2,zero,141e8 <_fclose_r+0xc8>
   1414c:	8080030f 	ldh	r2,12(r16)
   14150:	1000071e 	bne	r2,zero,14170 <_fclose_r+0x50>
   14154:	0005883a 	mov	r2,zero
   14158:	dfc00317 	ldw	ra,12(sp)
   1415c:	dc800217 	ldw	r18,8(sp)
   14160:	dc400117 	ldw	r17,4(sp)
   14164:	dc000017 	ldw	r16,0(sp)
   14168:	dec00404 	addi	sp,sp,16
   1416c:	f800283a 	ret
   14170:	800b883a 	mov	r5,r16
   14174:	8809883a 	mov	r4,r17
   14178:	000e8ac0 	call	e8ac <__sflush_r>
   1417c:	1025883a 	mov	r18,r2
   14180:	80800b17 	ldw	r2,44(r16)
   14184:	10000426 	beq	r2,zero,14198 <_fclose_r+0x78>
   14188:	81400717 	ldw	r5,28(r16)
   1418c:	8809883a 	mov	r4,r17
   14190:	103ee83a 	callr	r2
   14194:	10001616 	blt	r2,zero,141f0 <_fclose_r+0xd0>
   14198:	8080030b 	ldhu	r2,12(r16)
   1419c:	1080200c 	andi	r2,r2,128
   141a0:	1000151e 	bne	r2,zero,141f8 <_fclose_r+0xd8>
   141a4:	81400c17 	ldw	r5,48(r16)
   141a8:	28000526 	beq	r5,zero,141c0 <_fclose_r+0xa0>
   141ac:	80801004 	addi	r2,r16,64
   141b0:	28800226 	beq	r5,r2,141bc <_fclose_r+0x9c>
   141b4:	8809883a 	mov	r4,r17
   141b8:	000f0180 	call	f018 <_free_r>
   141bc:	80000c15 	stw	zero,48(r16)
   141c0:	81401117 	ldw	r5,68(r16)
   141c4:	28000326 	beq	r5,zero,141d4 <_fclose_r+0xb4>
   141c8:	8809883a 	mov	r4,r17
   141cc:	000f0180 	call	f018 <_free_r>
   141d0:	80001115 	stw	zero,68(r16)
   141d4:	000eeb40 	call	eeb4 <__sfp_lock_acquire>
   141d8:	8000030d 	sth	zero,12(r16)
   141dc:	000eeb80 	call	eeb8 <__sfp_lock_release>
   141e0:	9005883a 	mov	r2,r18
   141e4:	003fdc06 	br	14158 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014158>
   141e8:	000eea40 	call	eea4 <__sinit>
   141ec:	003fd706 	br	1414c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701414c>
   141f0:	04bfffc4 	movi	r18,-1
   141f4:	003fe806 	br	14198 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014198>
   141f8:	81400417 	ldw	r5,16(r16)
   141fc:	8809883a 	mov	r4,r17
   14200:	000f0180 	call	f018 <_free_r>
   14204:	003fe706 	br	141a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70141a4>
   14208:	0005883a 	mov	r2,zero
   1420c:	f800283a 	ret

00014210 <fclose>:
   14210:	008000b4 	movhi	r2,2
   14214:	109bd004 	addi	r2,r2,28480
   14218:	200b883a 	mov	r5,r4
   1421c:	11000017 	ldw	r4,0(r2)
   14220:	00141201 	jmpi	14120 <_fclose_r>

00014224 <__fputwc>:
   14224:	defff804 	addi	sp,sp,-32
   14228:	dcc00415 	stw	r19,16(sp)
   1422c:	dc800315 	stw	r18,12(sp)
   14230:	dc000115 	stw	r16,4(sp)
   14234:	dfc00715 	stw	ra,28(sp)
   14238:	dd400615 	stw	r21,24(sp)
   1423c:	dd000515 	stw	r20,20(sp)
   14240:	dc400215 	stw	r17,8(sp)
   14244:	2027883a 	mov	r19,r4
   14248:	2825883a 	mov	r18,r5
   1424c:	3021883a 	mov	r16,r6
   14250:	000f9f40 	call	f9f4 <__locale_mb_cur_max>
   14254:	00c00044 	movi	r3,1
   14258:	10c03e26 	beq	r2,r3,14354 <__fputwc+0x130>
   1425c:	81c01704 	addi	r7,r16,92
   14260:	900d883a 	mov	r6,r18
   14264:	d80b883a 	mov	r5,sp
   14268:	9809883a 	mov	r4,r19
   1426c:	00146f40 	call	146f4 <_wcrtomb_r>
   14270:	1029883a 	mov	r20,r2
   14274:	00bfffc4 	movi	r2,-1
   14278:	a0802026 	beq	r20,r2,142fc <__fputwc+0xd8>
   1427c:	d9400003 	ldbu	r5,0(sp)
   14280:	a0001c26 	beq	r20,zero,142f4 <__fputwc+0xd0>
   14284:	0023883a 	mov	r17,zero
   14288:	05400284 	movi	r21,10
   1428c:	00000906 	br	142b4 <__fputwc+0x90>
   14290:	80800017 	ldw	r2,0(r16)
   14294:	11400005 	stb	r5,0(r2)
   14298:	80c00017 	ldw	r3,0(r16)
   1429c:	18c00044 	addi	r3,r3,1
   142a0:	80c00015 	stw	r3,0(r16)
   142a4:	8c400044 	addi	r17,r17,1
   142a8:	dc45883a 	add	r2,sp,r17
   142ac:	8d00112e 	bgeu	r17,r20,142f4 <__fputwc+0xd0>
   142b0:	11400003 	ldbu	r5,0(r2)
   142b4:	80c00217 	ldw	r3,8(r16)
   142b8:	18ffffc4 	addi	r3,r3,-1
   142bc:	80c00215 	stw	r3,8(r16)
   142c0:	183ff30e 	bge	r3,zero,14290 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014290>
   142c4:	80800617 	ldw	r2,24(r16)
   142c8:	18801916 	blt	r3,r2,14330 <__fputwc+0x10c>
   142cc:	80800017 	ldw	r2,0(r16)
   142d0:	11400005 	stb	r5,0(r2)
   142d4:	80800017 	ldw	r2,0(r16)
   142d8:	10c00003 	ldbu	r3,0(r2)
   142dc:	10800044 	addi	r2,r2,1
   142e0:	1d402326 	beq	r3,r21,14370 <__fputwc+0x14c>
   142e4:	80800015 	stw	r2,0(r16)
   142e8:	8c400044 	addi	r17,r17,1
   142ec:	dc45883a 	add	r2,sp,r17
   142f0:	8d3fef36 	bltu	r17,r20,142b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70142b0>
   142f4:	9005883a 	mov	r2,r18
   142f8:	00000406 	br	1430c <__fputwc+0xe8>
   142fc:	80c0030b 	ldhu	r3,12(r16)
   14300:	a005883a 	mov	r2,r20
   14304:	18c01014 	ori	r3,r3,64
   14308:	80c0030d 	sth	r3,12(r16)
   1430c:	dfc00717 	ldw	ra,28(sp)
   14310:	dd400617 	ldw	r21,24(sp)
   14314:	dd000517 	ldw	r20,20(sp)
   14318:	dcc00417 	ldw	r19,16(sp)
   1431c:	dc800317 	ldw	r18,12(sp)
   14320:	dc400217 	ldw	r17,8(sp)
   14324:	dc000117 	ldw	r16,4(sp)
   14328:	dec00804 	addi	sp,sp,32
   1432c:	f800283a 	ret
   14330:	800d883a 	mov	r6,r16
   14334:	29403fcc 	andi	r5,r5,255
   14338:	9809883a 	mov	r4,r19
   1433c:	001459c0 	call	1459c <__swbuf_r>
   14340:	10bfffe0 	cmpeqi	r2,r2,-1
   14344:	10803fcc 	andi	r2,r2,255
   14348:	103fd626 	beq	r2,zero,142a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70142a4>
   1434c:	00bfffc4 	movi	r2,-1
   14350:	003fee06 	br	1430c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701430c>
   14354:	90ffffc4 	addi	r3,r18,-1
   14358:	01003f84 	movi	r4,254
   1435c:	20ffbf36 	bltu	r4,r3,1425c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701425c>
   14360:	900b883a 	mov	r5,r18
   14364:	dc800005 	stb	r18,0(sp)
   14368:	1029883a 	mov	r20,r2
   1436c:	003fc506 	br	14284 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014284>
   14370:	800d883a 	mov	r6,r16
   14374:	a80b883a 	mov	r5,r21
   14378:	9809883a 	mov	r4,r19
   1437c:	001459c0 	call	1459c <__swbuf_r>
   14380:	10bfffe0 	cmpeqi	r2,r2,-1
   14384:	003fef06 	br	14344 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014344>

00014388 <_fputwc_r>:
   14388:	3080030b 	ldhu	r2,12(r6)
   1438c:	10c8000c 	andi	r3,r2,8192
   14390:	1800051e 	bne	r3,zero,143a8 <_fputwc_r+0x20>
   14394:	30c01917 	ldw	r3,100(r6)
   14398:	10880014 	ori	r2,r2,8192
   1439c:	3080030d 	sth	r2,12(r6)
   143a0:	18880014 	ori	r2,r3,8192
   143a4:	30801915 	stw	r2,100(r6)
   143a8:	00142241 	jmpi	14224 <__fputwc>

000143ac <fputwc>:
   143ac:	008000b4 	movhi	r2,2
   143b0:	defffc04 	addi	sp,sp,-16
   143b4:	109bd004 	addi	r2,r2,28480
   143b8:	dc000115 	stw	r16,4(sp)
   143bc:	14000017 	ldw	r16,0(r2)
   143c0:	dc400215 	stw	r17,8(sp)
   143c4:	dfc00315 	stw	ra,12(sp)
   143c8:	2023883a 	mov	r17,r4
   143cc:	80000226 	beq	r16,zero,143d8 <fputwc+0x2c>
   143d0:	80800e17 	ldw	r2,56(r16)
   143d4:	10001026 	beq	r2,zero,14418 <fputwc+0x6c>
   143d8:	2880030b 	ldhu	r2,12(r5)
   143dc:	10c8000c 	andi	r3,r2,8192
   143e0:	1800051e 	bne	r3,zero,143f8 <fputwc+0x4c>
   143e4:	28c01917 	ldw	r3,100(r5)
   143e8:	10880014 	ori	r2,r2,8192
   143ec:	2880030d 	sth	r2,12(r5)
   143f0:	18880014 	ori	r2,r3,8192
   143f4:	28801915 	stw	r2,100(r5)
   143f8:	280d883a 	mov	r6,r5
   143fc:	8009883a 	mov	r4,r16
   14400:	880b883a 	mov	r5,r17
   14404:	dfc00317 	ldw	ra,12(sp)
   14408:	dc400217 	ldw	r17,8(sp)
   1440c:	dc000117 	ldw	r16,4(sp)
   14410:	dec00404 	addi	sp,sp,16
   14414:	00142241 	jmpi	14224 <__fputwc>
   14418:	8009883a 	mov	r4,r16
   1441c:	d9400015 	stw	r5,0(sp)
   14420:	000eea40 	call	eea4 <__sinit>
   14424:	d9400017 	ldw	r5,0(sp)
   14428:	003feb06 	br	143d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70143d8>

0001442c <_fstat_r>:
   1442c:	defffd04 	addi	sp,sp,-12
   14430:	2805883a 	mov	r2,r5
   14434:	dc000015 	stw	r16,0(sp)
   14438:	040000f4 	movhi	r16,3
   1443c:	dc400115 	stw	r17,4(sp)
   14440:	8423f204 	addi	r16,r16,-28728
   14444:	2023883a 	mov	r17,r4
   14448:	300b883a 	mov	r5,r6
   1444c:	1009883a 	mov	r4,r2
   14450:	dfc00215 	stw	ra,8(sp)
   14454:	80000015 	stw	zero,0(r16)
   14458:	00172e40 	call	172e4 <fstat>
   1445c:	00ffffc4 	movi	r3,-1
   14460:	10c00526 	beq	r2,r3,14478 <_fstat_r+0x4c>
   14464:	dfc00217 	ldw	ra,8(sp)
   14468:	dc400117 	ldw	r17,4(sp)
   1446c:	dc000017 	ldw	r16,0(sp)
   14470:	dec00304 	addi	sp,sp,12
   14474:	f800283a 	ret
   14478:	80c00017 	ldw	r3,0(r16)
   1447c:	183ff926 	beq	r3,zero,14464 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014464>
   14480:	88c00015 	stw	r3,0(r17)
   14484:	003ff706 	br	14464 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014464>

00014488 <_isatty_r>:
   14488:	defffd04 	addi	sp,sp,-12
   1448c:	dc000015 	stw	r16,0(sp)
   14490:	040000f4 	movhi	r16,3
   14494:	dc400115 	stw	r17,4(sp)
   14498:	8423f204 	addi	r16,r16,-28728
   1449c:	2023883a 	mov	r17,r4
   144a0:	2809883a 	mov	r4,r5
   144a4:	dfc00215 	stw	ra,8(sp)
   144a8:	80000015 	stw	zero,0(r16)
   144ac:	00173f00 	call	173f0 <isatty>
   144b0:	00ffffc4 	movi	r3,-1
   144b4:	10c00526 	beq	r2,r3,144cc <_isatty_r+0x44>
   144b8:	dfc00217 	ldw	ra,8(sp)
   144bc:	dc400117 	ldw	r17,4(sp)
   144c0:	dc000017 	ldw	r16,0(sp)
   144c4:	dec00304 	addi	sp,sp,12
   144c8:	f800283a 	ret
   144cc:	80c00017 	ldw	r3,0(r16)
   144d0:	183ff926 	beq	r3,zero,144b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70144b8>
   144d4:	88c00015 	stw	r3,0(r17)
   144d8:	003ff706 	br	144b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70144b8>

000144dc <_lseek_r>:
   144dc:	defffd04 	addi	sp,sp,-12
   144e0:	2805883a 	mov	r2,r5
   144e4:	dc000015 	stw	r16,0(sp)
   144e8:	040000f4 	movhi	r16,3
   144ec:	dc400115 	stw	r17,4(sp)
   144f0:	300b883a 	mov	r5,r6
   144f4:	8423f204 	addi	r16,r16,-28728
   144f8:	2023883a 	mov	r17,r4
   144fc:	380d883a 	mov	r6,r7
   14500:	1009883a 	mov	r4,r2
   14504:	dfc00215 	stw	ra,8(sp)
   14508:	80000015 	stw	zero,0(r16)
   1450c:	00177280 	call	17728 <lseek>
   14510:	00ffffc4 	movi	r3,-1
   14514:	10c00526 	beq	r2,r3,1452c <_lseek_r+0x50>
   14518:	dfc00217 	ldw	ra,8(sp)
   1451c:	dc400117 	ldw	r17,4(sp)
   14520:	dc000017 	ldw	r16,0(sp)
   14524:	dec00304 	addi	sp,sp,12
   14528:	f800283a 	ret
   1452c:	80c00017 	ldw	r3,0(r16)
   14530:	183ff926 	beq	r3,zero,14518 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014518>
   14534:	88c00015 	stw	r3,0(r17)
   14538:	003ff706 	br	14518 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014518>

0001453c <_read_r>:
   1453c:	defffd04 	addi	sp,sp,-12
   14540:	2805883a 	mov	r2,r5
   14544:	dc000015 	stw	r16,0(sp)
   14548:	040000f4 	movhi	r16,3
   1454c:	dc400115 	stw	r17,4(sp)
   14550:	300b883a 	mov	r5,r6
   14554:	8423f204 	addi	r16,r16,-28728
   14558:	2023883a 	mov	r17,r4
   1455c:	380d883a 	mov	r6,r7
   14560:	1009883a 	mov	r4,r2
   14564:	dfc00215 	stw	ra,8(sp)
   14568:	80000015 	stw	zero,0(r16)
   1456c:	00178f40 	call	178f4 <read>
   14570:	00ffffc4 	movi	r3,-1
   14574:	10c00526 	beq	r2,r3,1458c <_read_r+0x50>
   14578:	dfc00217 	ldw	ra,8(sp)
   1457c:	dc400117 	ldw	r17,4(sp)
   14580:	dc000017 	ldw	r16,0(sp)
   14584:	dec00304 	addi	sp,sp,12
   14588:	f800283a 	ret
   1458c:	80c00017 	ldw	r3,0(r16)
   14590:	183ff926 	beq	r3,zero,14578 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014578>
   14594:	88c00015 	stw	r3,0(r17)
   14598:	003ff706 	br	14578 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014578>

0001459c <__swbuf_r>:
   1459c:	defffb04 	addi	sp,sp,-20
   145a0:	dcc00315 	stw	r19,12(sp)
   145a4:	dc800215 	stw	r18,8(sp)
   145a8:	dc000015 	stw	r16,0(sp)
   145ac:	dfc00415 	stw	ra,16(sp)
   145b0:	dc400115 	stw	r17,4(sp)
   145b4:	2025883a 	mov	r18,r4
   145b8:	2827883a 	mov	r19,r5
   145bc:	3021883a 	mov	r16,r6
   145c0:	20000226 	beq	r4,zero,145cc <__swbuf_r+0x30>
   145c4:	20800e17 	ldw	r2,56(r4)
   145c8:	10004226 	beq	r2,zero,146d4 <__swbuf_r+0x138>
   145cc:	80800617 	ldw	r2,24(r16)
   145d0:	8100030b 	ldhu	r4,12(r16)
   145d4:	80800215 	stw	r2,8(r16)
   145d8:	2080020c 	andi	r2,r4,8
   145dc:	10003626 	beq	r2,zero,146b8 <__swbuf_r+0x11c>
   145e0:	80c00417 	ldw	r3,16(r16)
   145e4:	18003426 	beq	r3,zero,146b8 <__swbuf_r+0x11c>
   145e8:	2088000c 	andi	r2,r4,8192
   145ec:	9c403fcc 	andi	r17,r19,255
   145f0:	10001a26 	beq	r2,zero,1465c <__swbuf_r+0xc0>
   145f4:	80800017 	ldw	r2,0(r16)
   145f8:	81000517 	ldw	r4,20(r16)
   145fc:	10c7c83a 	sub	r3,r2,r3
   14600:	1900200e 	bge	r3,r4,14684 <__swbuf_r+0xe8>
   14604:	18c00044 	addi	r3,r3,1
   14608:	81000217 	ldw	r4,8(r16)
   1460c:	11400044 	addi	r5,r2,1
   14610:	81400015 	stw	r5,0(r16)
   14614:	213fffc4 	addi	r4,r4,-1
   14618:	81000215 	stw	r4,8(r16)
   1461c:	14c00005 	stb	r19,0(r2)
   14620:	80800517 	ldw	r2,20(r16)
   14624:	10c01e26 	beq	r2,r3,146a0 <__swbuf_r+0x104>
   14628:	8080030b 	ldhu	r2,12(r16)
   1462c:	1080004c 	andi	r2,r2,1
   14630:	10000226 	beq	r2,zero,1463c <__swbuf_r+0xa0>
   14634:	00800284 	movi	r2,10
   14638:	88801926 	beq	r17,r2,146a0 <__swbuf_r+0x104>
   1463c:	8805883a 	mov	r2,r17
   14640:	dfc00417 	ldw	ra,16(sp)
   14644:	dcc00317 	ldw	r19,12(sp)
   14648:	dc800217 	ldw	r18,8(sp)
   1464c:	dc400117 	ldw	r17,4(sp)
   14650:	dc000017 	ldw	r16,0(sp)
   14654:	dec00504 	addi	sp,sp,20
   14658:	f800283a 	ret
   1465c:	81401917 	ldw	r5,100(r16)
   14660:	00b7ffc4 	movi	r2,-8193
   14664:	21080014 	ori	r4,r4,8192
   14668:	2884703a 	and	r2,r5,r2
   1466c:	80801915 	stw	r2,100(r16)
   14670:	80800017 	ldw	r2,0(r16)
   14674:	8100030d 	sth	r4,12(r16)
   14678:	81000517 	ldw	r4,20(r16)
   1467c:	10c7c83a 	sub	r3,r2,r3
   14680:	193fe016 	blt	r3,r4,14604 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014604>
   14684:	800b883a 	mov	r5,r16
   14688:	9009883a 	mov	r4,r18
   1468c:	000eac80 	call	eac8 <_fflush_r>
   14690:	1000071e 	bne	r2,zero,146b0 <__swbuf_r+0x114>
   14694:	80800017 	ldw	r2,0(r16)
   14698:	00c00044 	movi	r3,1
   1469c:	003fda06 	br	14608 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014608>
   146a0:	800b883a 	mov	r5,r16
   146a4:	9009883a 	mov	r4,r18
   146a8:	000eac80 	call	eac8 <_fflush_r>
   146ac:	103fe326 	beq	r2,zero,1463c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701463c>
   146b0:	00bfffc4 	movi	r2,-1
   146b4:	003fe206 	br	14640 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014640>
   146b8:	800b883a 	mov	r5,r16
   146bc:	9009883a 	mov	r4,r18
   146c0:	000ced00 	call	ced0 <__swsetup_r>
   146c4:	103ffa1e 	bne	r2,zero,146b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70146b0>
   146c8:	8100030b 	ldhu	r4,12(r16)
   146cc:	80c00417 	ldw	r3,16(r16)
   146d0:	003fc506 	br	145e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70145e8>
   146d4:	000eea40 	call	eea4 <__sinit>
   146d8:	003fbc06 	br	145cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70145cc>

000146dc <__swbuf>:
   146dc:	008000b4 	movhi	r2,2
   146e0:	109bd004 	addi	r2,r2,28480
   146e4:	280d883a 	mov	r6,r5
   146e8:	200b883a 	mov	r5,r4
   146ec:	11000017 	ldw	r4,0(r2)
   146f0:	001459c1 	jmpi	1459c <__swbuf_r>

000146f4 <_wcrtomb_r>:
   146f4:	defff604 	addi	sp,sp,-40
   146f8:	008000b4 	movhi	r2,2
   146fc:	dc800815 	stw	r18,32(sp)
   14700:	dc400715 	stw	r17,28(sp)
   14704:	dc000615 	stw	r16,24(sp)
   14708:	109bd204 	addi	r2,r2,28488
   1470c:	dfc00915 	stw	ra,36(sp)
   14710:	2021883a 	mov	r16,r4
   14714:	3823883a 	mov	r17,r7
   14718:	14800017 	ldw	r18,0(r2)
   1471c:	28001426 	beq	r5,zero,14770 <_wcrtomb_r+0x7c>
   14720:	d9400415 	stw	r5,16(sp)
   14724:	d9800515 	stw	r6,20(sp)
   14728:	000f9e80 	call	f9e8 <__locale_charset>
   1472c:	d9800517 	ldw	r6,20(sp)
   14730:	d9400417 	ldw	r5,16(sp)
   14734:	100f883a 	mov	r7,r2
   14738:	dc400015 	stw	r17,0(sp)
   1473c:	8009883a 	mov	r4,r16
   14740:	903ee83a 	callr	r18
   14744:	00ffffc4 	movi	r3,-1
   14748:	10c0031e 	bne	r2,r3,14758 <_wcrtomb_r+0x64>
   1474c:	88000015 	stw	zero,0(r17)
   14750:	00c02284 	movi	r3,138
   14754:	80c00015 	stw	r3,0(r16)
   14758:	dfc00917 	ldw	ra,36(sp)
   1475c:	dc800817 	ldw	r18,32(sp)
   14760:	dc400717 	ldw	r17,28(sp)
   14764:	dc000617 	ldw	r16,24(sp)
   14768:	dec00a04 	addi	sp,sp,40
   1476c:	f800283a 	ret
   14770:	000f9e80 	call	f9e8 <__locale_charset>
   14774:	100f883a 	mov	r7,r2
   14778:	dc400015 	stw	r17,0(sp)
   1477c:	000d883a 	mov	r6,zero
   14780:	d9400104 	addi	r5,sp,4
   14784:	8009883a 	mov	r4,r16
   14788:	903ee83a 	callr	r18
   1478c:	003fed06 	br	14744 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014744>

00014790 <wcrtomb>:
   14790:	defff604 	addi	sp,sp,-40
   14794:	008000b4 	movhi	r2,2
   14798:	dc800615 	stw	r18,24(sp)
   1479c:	dc400515 	stw	r17,20(sp)
   147a0:	109bd004 	addi	r2,r2,28480
   147a4:	dfc00915 	stw	ra,36(sp)
   147a8:	dd000815 	stw	r20,32(sp)
   147ac:	dcc00715 	stw	r19,28(sp)
   147b0:	dc000415 	stw	r16,16(sp)
   147b4:	3025883a 	mov	r18,r6
   147b8:	14400017 	ldw	r17,0(r2)
   147bc:	20001926 	beq	r4,zero,14824 <wcrtomb+0x94>
   147c0:	008000b4 	movhi	r2,2
   147c4:	109bd204 	addi	r2,r2,28488
   147c8:	15000017 	ldw	r20,0(r2)
   147cc:	2021883a 	mov	r16,r4
   147d0:	2827883a 	mov	r19,r5
   147d4:	000f9e80 	call	f9e8 <__locale_charset>
   147d8:	100f883a 	mov	r7,r2
   147dc:	dc800015 	stw	r18,0(sp)
   147e0:	980d883a 	mov	r6,r19
   147e4:	800b883a 	mov	r5,r16
   147e8:	8809883a 	mov	r4,r17
   147ec:	a03ee83a 	callr	r20
   147f0:	00ffffc4 	movi	r3,-1
   147f4:	10c0031e 	bne	r2,r3,14804 <wcrtomb+0x74>
   147f8:	90000015 	stw	zero,0(r18)
   147fc:	00c02284 	movi	r3,138
   14800:	88c00015 	stw	r3,0(r17)
   14804:	dfc00917 	ldw	ra,36(sp)
   14808:	dd000817 	ldw	r20,32(sp)
   1480c:	dcc00717 	ldw	r19,28(sp)
   14810:	dc800617 	ldw	r18,24(sp)
   14814:	dc400517 	ldw	r17,20(sp)
   14818:	dc000417 	ldw	r16,16(sp)
   1481c:	dec00a04 	addi	sp,sp,40
   14820:	f800283a 	ret
   14824:	008000b4 	movhi	r2,2
   14828:	109bd204 	addi	r2,r2,28488
   1482c:	14000017 	ldw	r16,0(r2)
   14830:	000f9e80 	call	f9e8 <__locale_charset>
   14834:	100f883a 	mov	r7,r2
   14838:	dc800015 	stw	r18,0(sp)
   1483c:	000d883a 	mov	r6,zero
   14840:	d9400104 	addi	r5,sp,4
   14844:	8809883a 	mov	r4,r17
   14848:	803ee83a 	callr	r16
   1484c:	003fe806 	br	147f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70147f0>

00014850 <__ascii_wctomb>:
   14850:	28000526 	beq	r5,zero,14868 <__ascii_wctomb+0x18>
   14854:	00803fc4 	movi	r2,255
   14858:	11800536 	bltu	r2,r6,14870 <__ascii_wctomb+0x20>
   1485c:	29800005 	stb	r6,0(r5)
   14860:	00800044 	movi	r2,1
   14864:	f800283a 	ret
   14868:	0005883a 	mov	r2,zero
   1486c:	f800283a 	ret
   14870:	00802284 	movi	r2,138
   14874:	20800015 	stw	r2,0(r4)
   14878:	00bfffc4 	movi	r2,-1
   1487c:	f800283a 	ret

00014880 <_wctomb_r>:
   14880:	008000b4 	movhi	r2,2
   14884:	defff904 	addi	sp,sp,-28
   14888:	109bd204 	addi	r2,r2,28488
   1488c:	dfc00615 	stw	ra,24(sp)
   14890:	dc400515 	stw	r17,20(sp)
   14894:	dc000415 	stw	r16,16(sp)
   14898:	3823883a 	mov	r17,r7
   1489c:	14000017 	ldw	r16,0(r2)
   148a0:	d9000115 	stw	r4,4(sp)
   148a4:	d9400215 	stw	r5,8(sp)
   148a8:	d9800315 	stw	r6,12(sp)
   148ac:	000f9e80 	call	f9e8 <__locale_charset>
   148b0:	d9800317 	ldw	r6,12(sp)
   148b4:	d9400217 	ldw	r5,8(sp)
   148b8:	d9000117 	ldw	r4,4(sp)
   148bc:	100f883a 	mov	r7,r2
   148c0:	dc400015 	stw	r17,0(sp)
   148c4:	803ee83a 	callr	r16
   148c8:	dfc00617 	ldw	ra,24(sp)
   148cc:	dc400517 	ldw	r17,20(sp)
   148d0:	dc000417 	ldw	r16,16(sp)
   148d4:	dec00704 	addi	sp,sp,28
   148d8:	f800283a 	ret

000148dc <__udivdi3>:
   148dc:	defff504 	addi	sp,sp,-44
   148e0:	dcc00415 	stw	r19,16(sp)
   148e4:	dc000115 	stw	r16,4(sp)
   148e8:	dfc00a15 	stw	ra,40(sp)
   148ec:	df000915 	stw	fp,36(sp)
   148f0:	ddc00815 	stw	r23,32(sp)
   148f4:	dd800715 	stw	r22,28(sp)
   148f8:	dd400615 	stw	r21,24(sp)
   148fc:	dd000515 	stw	r20,20(sp)
   14900:	dc800315 	stw	r18,12(sp)
   14904:	dc400215 	stw	r17,8(sp)
   14908:	2027883a 	mov	r19,r4
   1490c:	2821883a 	mov	r16,r5
   14910:	3800411e 	bne	r7,zero,14a18 <__udivdi3+0x13c>
   14914:	3023883a 	mov	r17,r6
   14918:	2025883a 	mov	r18,r4
   1491c:	2980522e 	bgeu	r5,r6,14a68 <__udivdi3+0x18c>
   14920:	00bfffd4 	movui	r2,65535
   14924:	282d883a 	mov	r22,r5
   14928:	1180a836 	bltu	r2,r6,14bcc <__udivdi3+0x2f0>
   1492c:	00803fc4 	movi	r2,255
   14930:	1185803a 	cmpltu	r2,r2,r6
   14934:	100490fa 	slli	r2,r2,3
   14938:	3086d83a 	srl	r3,r6,r2
   1493c:	010000b4 	movhi	r4,2
   14940:	21128d04 	addi	r4,r4,18996
   14944:	20c7883a 	add	r3,r4,r3
   14948:	18c00003 	ldbu	r3,0(r3)
   1494c:	1885883a 	add	r2,r3,r2
   14950:	00c00804 	movi	r3,32
   14954:	1887c83a 	sub	r3,r3,r2
   14958:	18000526 	beq	r3,zero,14970 <__udivdi3+0x94>
   1495c:	80e0983a 	sll	r16,r16,r3
   14960:	9884d83a 	srl	r2,r19,r2
   14964:	30e2983a 	sll	r17,r6,r3
   14968:	98e4983a 	sll	r18,r19,r3
   1496c:	142cb03a 	or	r22,r2,r16
   14970:	882ad43a 	srli	r21,r17,16
   14974:	b009883a 	mov	r4,r22
   14978:	8d3fffcc 	andi	r20,r17,65535
   1497c:	a80b883a 	mov	r5,r21
   14980:	00154e80 	call	154e8 <__umodsi3>
   14984:	b009883a 	mov	r4,r22
   14988:	a80b883a 	mov	r5,r21
   1498c:	1027883a 	mov	r19,r2
   14990:	00154840 	call	15484 <__udivsi3>
   14994:	102d883a 	mov	r22,r2
   14998:	9826943a 	slli	r19,r19,16
   1499c:	9004d43a 	srli	r2,r18,16
   149a0:	a5a1383a 	mul	r16,r20,r22
   149a4:	14c4b03a 	or	r2,r2,r19
   149a8:	1400052e 	bgeu	r2,r16,149c0 <__udivdi3+0xe4>
   149ac:	1445883a 	add	r2,r2,r17
   149b0:	b0ffffc4 	addi	r3,r22,-1
   149b4:	14400136 	bltu	r2,r17,149bc <__udivdi3+0xe0>
   149b8:	14012336 	bltu	r2,r16,14e48 <__udivdi3+0x56c>
   149bc:	182d883a 	mov	r22,r3
   149c0:	1421c83a 	sub	r16,r2,r16
   149c4:	a80b883a 	mov	r5,r21
   149c8:	8009883a 	mov	r4,r16
   149cc:	00154e80 	call	154e8 <__umodsi3>
   149d0:	1027883a 	mov	r19,r2
   149d4:	a80b883a 	mov	r5,r21
   149d8:	8009883a 	mov	r4,r16
   149dc:	00154840 	call	15484 <__udivsi3>
   149e0:	9826943a 	slli	r19,r19,16
   149e4:	a0a9383a 	mul	r20,r20,r2
   149e8:	94bfffcc 	andi	r18,r18,65535
   149ec:	94e4b03a 	or	r18,r18,r19
   149f0:	9500052e 	bgeu	r18,r20,14a08 <__udivdi3+0x12c>
   149f4:	8ca5883a 	add	r18,r17,r18
   149f8:	10ffffc4 	addi	r3,r2,-1
   149fc:	9440f136 	bltu	r18,r17,14dc4 <__udivdi3+0x4e8>
   14a00:	9500f02e 	bgeu	r18,r20,14dc4 <__udivdi3+0x4e8>
   14a04:	10bfff84 	addi	r2,r2,-2
   14a08:	b00c943a 	slli	r6,r22,16
   14a0c:	0007883a 	mov	r3,zero
   14a10:	3084b03a 	or	r2,r6,r2
   14a14:	00005906 	br	14b7c <__udivdi3+0x2a0>
   14a18:	29c05636 	bltu	r5,r7,14b74 <__udivdi3+0x298>
   14a1c:	00bfffd4 	movui	r2,65535
   14a20:	11c0622e 	bgeu	r2,r7,14bac <__udivdi3+0x2d0>
   14a24:	00804034 	movhi	r2,256
   14a28:	10bfffc4 	addi	r2,r2,-1
   14a2c:	11c0ee36 	bltu	r2,r7,14de8 <__udivdi3+0x50c>
   14a30:	00800404 	movi	r2,16
   14a34:	3886d83a 	srl	r3,r7,r2
   14a38:	010000b4 	movhi	r4,2
   14a3c:	21128d04 	addi	r4,r4,18996
   14a40:	20c7883a 	add	r3,r4,r3
   14a44:	18c00003 	ldbu	r3,0(r3)
   14a48:	05400804 	movi	r21,32
   14a4c:	1885883a 	add	r2,r3,r2
   14a50:	a8abc83a 	sub	r21,r21,r2
   14a54:	a800621e 	bne	r21,zero,14be0 <__udivdi3+0x304>
   14a58:	3c00e936 	bltu	r7,r16,14e00 <__udivdi3+0x524>
   14a5c:	9985403a 	cmpgeu	r2,r19,r6
   14a60:	0007883a 	mov	r3,zero
   14a64:	00004506 	br	14b7c <__udivdi3+0x2a0>
   14a68:	3000041e 	bne	r6,zero,14a7c <__udivdi3+0x1a0>
   14a6c:	000b883a 	mov	r5,zero
   14a70:	01000044 	movi	r4,1
   14a74:	00154840 	call	15484 <__udivsi3>
   14a78:	1023883a 	mov	r17,r2
   14a7c:	00bfffd4 	movui	r2,65535
   14a80:	14404e2e 	bgeu	r2,r17,14bbc <__udivdi3+0x2e0>
   14a84:	00804034 	movhi	r2,256
   14a88:	10bfffc4 	addi	r2,r2,-1
   14a8c:	1440d836 	bltu	r2,r17,14df0 <__udivdi3+0x514>
   14a90:	00800404 	movi	r2,16
   14a94:	8886d83a 	srl	r3,r17,r2
   14a98:	010000b4 	movhi	r4,2
   14a9c:	21128d04 	addi	r4,r4,18996
   14aa0:	20c7883a 	add	r3,r4,r3
   14aa4:	18c00003 	ldbu	r3,0(r3)
   14aa8:	1885883a 	add	r2,r3,r2
   14aac:	00c00804 	movi	r3,32
   14ab0:	1887c83a 	sub	r3,r3,r2
   14ab4:	18008f1e 	bne	r3,zero,14cf4 <__udivdi3+0x418>
   14ab8:	882ad43a 	srli	r21,r17,16
   14abc:	8461c83a 	sub	r16,r16,r17
   14ac0:	8d3fffcc 	andi	r20,r17,65535
   14ac4:	00c00044 	movi	r3,1
   14ac8:	8009883a 	mov	r4,r16
   14acc:	a80b883a 	mov	r5,r21
   14ad0:	d8c00015 	stw	r3,0(sp)
   14ad4:	00154e80 	call	154e8 <__umodsi3>
   14ad8:	8009883a 	mov	r4,r16
   14adc:	a80b883a 	mov	r5,r21
   14ae0:	1027883a 	mov	r19,r2
   14ae4:	00154840 	call	15484 <__udivsi3>
   14ae8:	9826943a 	slli	r19,r19,16
   14aec:	9008d43a 	srli	r4,r18,16
   14af0:	1521383a 	mul	r16,r2,r20
   14af4:	102d883a 	mov	r22,r2
   14af8:	24c8b03a 	or	r4,r4,r19
   14afc:	d8c00017 	ldw	r3,0(sp)
   14b00:	2400052e 	bgeu	r4,r16,14b18 <__udivdi3+0x23c>
   14b04:	2449883a 	add	r4,r4,r17
   14b08:	b0bfffc4 	addi	r2,r22,-1
   14b0c:	24400136 	bltu	r4,r17,14b14 <__udivdi3+0x238>
   14b10:	2400ca36 	bltu	r4,r16,14e3c <__udivdi3+0x560>
   14b14:	102d883a 	mov	r22,r2
   14b18:	2421c83a 	sub	r16,r4,r16
   14b1c:	a80b883a 	mov	r5,r21
   14b20:	8009883a 	mov	r4,r16
   14b24:	d8c00015 	stw	r3,0(sp)
   14b28:	00154e80 	call	154e8 <__umodsi3>
   14b2c:	1027883a 	mov	r19,r2
   14b30:	a80b883a 	mov	r5,r21
   14b34:	8009883a 	mov	r4,r16
   14b38:	00154840 	call	15484 <__udivsi3>
   14b3c:	9826943a 	slli	r19,r19,16
   14b40:	1529383a 	mul	r20,r2,r20
   14b44:	94bfffcc 	andi	r18,r18,65535
   14b48:	94e4b03a 	or	r18,r18,r19
   14b4c:	d8c00017 	ldw	r3,0(sp)
   14b50:	9500052e 	bgeu	r18,r20,14b68 <__udivdi3+0x28c>
   14b54:	8ca5883a 	add	r18,r17,r18
   14b58:	113fffc4 	addi	r4,r2,-1
   14b5c:	94409736 	bltu	r18,r17,14dbc <__udivdi3+0x4e0>
   14b60:	9500962e 	bgeu	r18,r20,14dbc <__udivdi3+0x4e0>
   14b64:	10bfff84 	addi	r2,r2,-2
   14b68:	b00c943a 	slli	r6,r22,16
   14b6c:	3084b03a 	or	r2,r6,r2
   14b70:	00000206 	br	14b7c <__udivdi3+0x2a0>
   14b74:	0007883a 	mov	r3,zero
   14b78:	0005883a 	mov	r2,zero
   14b7c:	dfc00a17 	ldw	ra,40(sp)
   14b80:	df000917 	ldw	fp,36(sp)
   14b84:	ddc00817 	ldw	r23,32(sp)
   14b88:	dd800717 	ldw	r22,28(sp)
   14b8c:	dd400617 	ldw	r21,24(sp)
   14b90:	dd000517 	ldw	r20,20(sp)
   14b94:	dcc00417 	ldw	r19,16(sp)
   14b98:	dc800317 	ldw	r18,12(sp)
   14b9c:	dc400217 	ldw	r17,8(sp)
   14ba0:	dc000117 	ldw	r16,4(sp)
   14ba4:	dec00b04 	addi	sp,sp,44
   14ba8:	f800283a 	ret
   14bac:	00803fc4 	movi	r2,255
   14bb0:	11c5803a 	cmpltu	r2,r2,r7
   14bb4:	100490fa 	slli	r2,r2,3
   14bb8:	003f9e06 	br	14a34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014a34>
   14bbc:	00803fc4 	movi	r2,255
   14bc0:	1445803a 	cmpltu	r2,r2,r17
   14bc4:	100490fa 	slli	r2,r2,3
   14bc8:	003fb206 	br	14a94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014a94>
   14bcc:	00804034 	movhi	r2,256
   14bd0:	10bfffc4 	addi	r2,r2,-1
   14bd4:	11808836 	bltu	r2,r6,14df8 <__udivdi3+0x51c>
   14bd8:	00800404 	movi	r2,16
   14bdc:	003f5606 	br	14938 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014938>
   14be0:	30aed83a 	srl	r23,r6,r2
   14be4:	3d4e983a 	sll	r7,r7,r21
   14be8:	80acd83a 	srl	r22,r16,r2
   14bec:	9884d83a 	srl	r2,r19,r2
   14bf0:	3deeb03a 	or	r23,r7,r23
   14bf4:	b824d43a 	srli	r18,r23,16
   14bf8:	8560983a 	sll	r16,r16,r21
   14bfc:	b009883a 	mov	r4,r22
   14c00:	900b883a 	mov	r5,r18
   14c04:	3568983a 	sll	r20,r6,r21
   14c08:	1420b03a 	or	r16,r2,r16
   14c0c:	00154e80 	call	154e8 <__umodsi3>
   14c10:	b009883a 	mov	r4,r22
   14c14:	900b883a 	mov	r5,r18
   14c18:	1023883a 	mov	r17,r2
   14c1c:	00154840 	call	15484 <__udivsi3>
   14c20:	8808943a 	slli	r4,r17,16
   14c24:	bf3fffcc 	andi	fp,r23,65535
   14c28:	8006d43a 	srli	r3,r16,16
   14c2c:	e0a3383a 	mul	r17,fp,r2
   14c30:	100d883a 	mov	r6,r2
   14c34:	1906b03a 	or	r3,r3,r4
   14c38:	1c40042e 	bgeu	r3,r17,14c4c <__udivdi3+0x370>
   14c3c:	1dc7883a 	add	r3,r3,r23
   14c40:	10bfffc4 	addi	r2,r2,-1
   14c44:	1dc0752e 	bgeu	r3,r23,14e1c <__udivdi3+0x540>
   14c48:	100d883a 	mov	r6,r2
   14c4c:	1c63c83a 	sub	r17,r3,r17
   14c50:	900b883a 	mov	r5,r18
   14c54:	8809883a 	mov	r4,r17
   14c58:	d9800015 	stw	r6,0(sp)
   14c5c:	00154e80 	call	154e8 <__umodsi3>
   14c60:	102d883a 	mov	r22,r2
   14c64:	8809883a 	mov	r4,r17
   14c68:	900b883a 	mov	r5,r18
   14c6c:	00154840 	call	15484 <__udivsi3>
   14c70:	b02c943a 	slli	r22,r22,16
   14c74:	e089383a 	mul	r4,fp,r2
   14c78:	843fffcc 	andi	r16,r16,65535
   14c7c:	85a0b03a 	or	r16,r16,r22
   14c80:	d9800017 	ldw	r6,0(sp)
   14c84:	8100042e 	bgeu	r16,r4,14c98 <__udivdi3+0x3bc>
   14c88:	85e1883a 	add	r16,r16,r23
   14c8c:	10ffffc4 	addi	r3,r2,-1
   14c90:	85c05e2e 	bgeu	r16,r23,14e0c <__udivdi3+0x530>
   14c94:	1805883a 	mov	r2,r3
   14c98:	300c943a 	slli	r6,r6,16
   14c9c:	a17fffcc 	andi	r5,r20,65535
   14ca0:	a028d43a 	srli	r20,r20,16
   14ca4:	3084b03a 	or	r2,r6,r2
   14ca8:	10ffffcc 	andi	r3,r2,65535
   14cac:	100cd43a 	srli	r6,r2,16
   14cb0:	194f383a 	mul	r7,r3,r5
   14cb4:	1d07383a 	mul	r3,r3,r20
   14cb8:	314b383a 	mul	r5,r6,r5
   14cbc:	3810d43a 	srli	r8,r7,16
   14cc0:	8121c83a 	sub	r16,r16,r4
   14cc4:	1947883a 	add	r3,r3,r5
   14cc8:	40c7883a 	add	r3,r8,r3
   14ccc:	350d383a 	mul	r6,r6,r20
   14cd0:	1940022e 	bgeu	r3,r5,14cdc <__udivdi3+0x400>
   14cd4:	01000074 	movhi	r4,1
   14cd8:	310d883a 	add	r6,r6,r4
   14cdc:	1828d43a 	srli	r20,r3,16
   14ce0:	a18d883a 	add	r6,r20,r6
   14ce4:	81803e36 	bltu	r16,r6,14de0 <__udivdi3+0x504>
   14ce8:	81803826 	beq	r16,r6,14dcc <__udivdi3+0x4f0>
   14cec:	0007883a 	mov	r3,zero
   14cf0:	003fa206 	br	14b7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014b7c>
   14cf4:	88e2983a 	sll	r17,r17,r3
   14cf8:	80a8d83a 	srl	r20,r16,r2
   14cfc:	80e0983a 	sll	r16,r16,r3
   14d00:	882ad43a 	srli	r21,r17,16
   14d04:	9884d83a 	srl	r2,r19,r2
   14d08:	a009883a 	mov	r4,r20
   14d0c:	a80b883a 	mov	r5,r21
   14d10:	142eb03a 	or	r23,r2,r16
   14d14:	98e4983a 	sll	r18,r19,r3
   14d18:	00154e80 	call	154e8 <__umodsi3>
   14d1c:	a009883a 	mov	r4,r20
   14d20:	a80b883a 	mov	r5,r21
   14d24:	1021883a 	mov	r16,r2
   14d28:	00154840 	call	15484 <__udivsi3>
   14d2c:	1039883a 	mov	fp,r2
   14d30:	8d3fffcc 	andi	r20,r17,65535
   14d34:	8020943a 	slli	r16,r16,16
   14d38:	b804d43a 	srli	r2,r23,16
   14d3c:	a72d383a 	mul	r22,r20,fp
   14d40:	1404b03a 	or	r2,r2,r16
   14d44:	1580062e 	bgeu	r2,r22,14d60 <__udivdi3+0x484>
   14d48:	1445883a 	add	r2,r2,r17
   14d4c:	e0ffffc4 	addi	r3,fp,-1
   14d50:	14403836 	bltu	r2,r17,14e34 <__udivdi3+0x558>
   14d54:	1580372e 	bgeu	r2,r22,14e34 <__udivdi3+0x558>
   14d58:	e73fff84 	addi	fp,fp,-2
   14d5c:	1445883a 	add	r2,r2,r17
   14d60:	15adc83a 	sub	r22,r2,r22
   14d64:	a80b883a 	mov	r5,r21
   14d68:	b009883a 	mov	r4,r22
   14d6c:	00154e80 	call	154e8 <__umodsi3>
   14d70:	1027883a 	mov	r19,r2
   14d74:	b009883a 	mov	r4,r22
   14d78:	a80b883a 	mov	r5,r21
   14d7c:	00154840 	call	15484 <__udivsi3>
   14d80:	9826943a 	slli	r19,r19,16
   14d84:	a0a1383a 	mul	r16,r20,r2
   14d88:	b93fffcc 	andi	r4,r23,65535
   14d8c:	24c8b03a 	or	r4,r4,r19
   14d90:	2400062e 	bgeu	r4,r16,14dac <__udivdi3+0x4d0>
   14d94:	2449883a 	add	r4,r4,r17
   14d98:	10ffffc4 	addi	r3,r2,-1
   14d9c:	24402336 	bltu	r4,r17,14e2c <__udivdi3+0x550>
   14da0:	2400222e 	bgeu	r4,r16,14e2c <__udivdi3+0x550>
   14da4:	10bfff84 	addi	r2,r2,-2
   14da8:	2449883a 	add	r4,r4,r17
   14dac:	e038943a 	slli	fp,fp,16
   14db0:	2421c83a 	sub	r16,r4,r16
   14db4:	e086b03a 	or	r3,fp,r2
   14db8:	003f4306 	br	14ac8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014ac8>
   14dbc:	2005883a 	mov	r2,r4
   14dc0:	003f6906 	br	14b68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014b68>
   14dc4:	1805883a 	mov	r2,r3
   14dc8:	003f0f06 	br	14a08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014a08>
   14dcc:	1806943a 	slli	r3,r3,16
   14dd0:	9d66983a 	sll	r19,r19,r21
   14dd4:	39ffffcc 	andi	r7,r7,65535
   14dd8:	19c7883a 	add	r3,r3,r7
   14ddc:	98ffc32e 	bgeu	r19,r3,14cec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014cec>
   14de0:	10bfffc4 	addi	r2,r2,-1
   14de4:	003fc106 	br	14cec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014cec>
   14de8:	00800604 	movi	r2,24
   14dec:	003f1106 	br	14a34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014a34>
   14df0:	00800604 	movi	r2,24
   14df4:	003f2706 	br	14a94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014a94>
   14df8:	00800604 	movi	r2,24
   14dfc:	003ece06 	br	14938 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014938>
   14e00:	0007883a 	mov	r3,zero
   14e04:	00800044 	movi	r2,1
   14e08:	003f5c06 	br	14b7c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014b7c>
   14e0c:	813fa12e 	bgeu	r16,r4,14c94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014c94>
   14e10:	10bfff84 	addi	r2,r2,-2
   14e14:	85e1883a 	add	r16,r16,r23
   14e18:	003f9f06 	br	14c98 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014c98>
   14e1c:	1c7f8a2e 	bgeu	r3,r17,14c48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014c48>
   14e20:	31bfff84 	addi	r6,r6,-2
   14e24:	1dc7883a 	add	r3,r3,r23
   14e28:	003f8806 	br	14c4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014c4c>
   14e2c:	1805883a 	mov	r2,r3
   14e30:	003fde06 	br	14dac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014dac>
   14e34:	1839883a 	mov	fp,r3
   14e38:	003fc906 	br	14d60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014d60>
   14e3c:	b5bfff84 	addi	r22,r22,-2
   14e40:	2449883a 	add	r4,r4,r17
   14e44:	003f3406 	br	14b18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014b18>
   14e48:	b5bfff84 	addi	r22,r22,-2
   14e4c:	1445883a 	add	r2,r2,r17
   14e50:	003edb06 	br	149c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70149c0>

00014e54 <__umoddi3>:
   14e54:	defff404 	addi	sp,sp,-48
   14e58:	df000a15 	stw	fp,40(sp)
   14e5c:	dc400315 	stw	r17,12(sp)
   14e60:	dc000215 	stw	r16,8(sp)
   14e64:	dfc00b15 	stw	ra,44(sp)
   14e68:	ddc00915 	stw	r23,36(sp)
   14e6c:	dd800815 	stw	r22,32(sp)
   14e70:	dd400715 	stw	r21,28(sp)
   14e74:	dd000615 	stw	r20,24(sp)
   14e78:	dcc00515 	stw	r19,20(sp)
   14e7c:	dc800415 	stw	r18,16(sp)
   14e80:	2021883a 	mov	r16,r4
   14e84:	2823883a 	mov	r17,r5
   14e88:	2839883a 	mov	fp,r5
   14e8c:	38003c1e 	bne	r7,zero,14f80 <__umoddi3+0x12c>
   14e90:	3027883a 	mov	r19,r6
   14e94:	2029883a 	mov	r20,r4
   14e98:	2980512e 	bgeu	r5,r6,14fe0 <__umoddi3+0x18c>
   14e9c:	00bfffd4 	movui	r2,65535
   14ea0:	11809a36 	bltu	r2,r6,1510c <__umoddi3+0x2b8>
   14ea4:	01003fc4 	movi	r4,255
   14ea8:	2189803a 	cmpltu	r4,r4,r6
   14eac:	200890fa 	slli	r4,r4,3
   14eb0:	3104d83a 	srl	r2,r6,r4
   14eb4:	00c000b4 	movhi	r3,2
   14eb8:	18d28d04 	addi	r3,r3,18996
   14ebc:	1885883a 	add	r2,r3,r2
   14ec0:	10c00003 	ldbu	r3,0(r2)
   14ec4:	00800804 	movi	r2,32
   14ec8:	1909883a 	add	r4,r3,r4
   14ecc:	1125c83a 	sub	r18,r2,r4
   14ed0:	90000526 	beq	r18,zero,14ee8 <__umoddi3+0x94>
   14ed4:	8ca2983a 	sll	r17,r17,r18
   14ed8:	8108d83a 	srl	r4,r16,r4
   14edc:	34a6983a 	sll	r19,r6,r18
   14ee0:	84a8983a 	sll	r20,r16,r18
   14ee4:	2478b03a 	or	fp,r4,r17
   14ee8:	982ed43a 	srli	r23,r19,16
   14eec:	e009883a 	mov	r4,fp
   14ef0:	9dbfffcc 	andi	r22,r19,65535
   14ef4:	b80b883a 	mov	r5,r23
   14ef8:	00154e80 	call	154e8 <__umodsi3>
   14efc:	e009883a 	mov	r4,fp
   14f00:	b80b883a 	mov	r5,r23
   14f04:	102b883a 	mov	r21,r2
   14f08:	00154840 	call	15484 <__udivsi3>
   14f0c:	a806943a 	slli	r3,r21,16
   14f10:	a008d43a 	srli	r4,r20,16
   14f14:	b085383a 	mul	r2,r22,r2
   14f18:	20c8b03a 	or	r4,r4,r3
   14f1c:	2080032e 	bgeu	r4,r2,14f2c <__umoddi3+0xd8>
   14f20:	24c9883a 	add	r4,r4,r19
   14f24:	24c00136 	bltu	r4,r19,14f2c <__umoddi3+0xd8>
   14f28:	20811036 	bltu	r4,r2,1536c <__umoddi3+0x518>
   14f2c:	20abc83a 	sub	r21,r4,r2
   14f30:	b80b883a 	mov	r5,r23
   14f34:	a809883a 	mov	r4,r21
   14f38:	00154e80 	call	154e8 <__umodsi3>
   14f3c:	1023883a 	mov	r17,r2
   14f40:	b80b883a 	mov	r5,r23
   14f44:	a809883a 	mov	r4,r21
   14f48:	00154840 	call	15484 <__udivsi3>
   14f4c:	8822943a 	slli	r17,r17,16
   14f50:	b085383a 	mul	r2,r22,r2
   14f54:	a0ffffcc 	andi	r3,r20,65535
   14f58:	1c46b03a 	or	r3,r3,r17
   14f5c:	1880042e 	bgeu	r3,r2,14f70 <__umoddi3+0x11c>
   14f60:	1cc7883a 	add	r3,r3,r19
   14f64:	1cc00236 	bltu	r3,r19,14f70 <__umoddi3+0x11c>
   14f68:	1880012e 	bgeu	r3,r2,14f70 <__umoddi3+0x11c>
   14f6c:	1cc7883a 	add	r3,r3,r19
   14f70:	1885c83a 	sub	r2,r3,r2
   14f74:	1484d83a 	srl	r2,r2,r18
   14f78:	0007883a 	mov	r3,zero
   14f7c:	00004f06 	br	150bc <__umoddi3+0x268>
   14f80:	29c04c36 	bltu	r5,r7,150b4 <__umoddi3+0x260>
   14f84:	00bfffd4 	movui	r2,65535
   14f88:	11c0582e 	bgeu	r2,r7,150ec <__umoddi3+0x298>
   14f8c:	00804034 	movhi	r2,256
   14f90:	10bfffc4 	addi	r2,r2,-1
   14f94:	11c0e736 	bltu	r2,r7,15334 <__umoddi3+0x4e0>
   14f98:	01000404 	movi	r4,16
   14f9c:	3904d83a 	srl	r2,r7,r4
   14fa0:	00c000b4 	movhi	r3,2
   14fa4:	18d28d04 	addi	r3,r3,18996
   14fa8:	1885883a 	add	r2,r3,r2
   14fac:	14c00003 	ldbu	r19,0(r2)
   14fb0:	00c00804 	movi	r3,32
   14fb4:	9927883a 	add	r19,r19,r4
   14fb8:	1ce9c83a 	sub	r20,r3,r19
   14fbc:	a000581e 	bne	r20,zero,15120 <__umoddi3+0x2cc>
   14fc0:	3c400136 	bltu	r7,r17,14fc8 <__umoddi3+0x174>
   14fc4:	8180eb36 	bltu	r16,r6,15374 <__umoddi3+0x520>
   14fc8:	8185c83a 	sub	r2,r16,r6
   14fcc:	89e3c83a 	sub	r17,r17,r7
   14fd0:	8089803a 	cmpltu	r4,r16,r2
   14fd4:	8939c83a 	sub	fp,r17,r4
   14fd8:	e007883a 	mov	r3,fp
   14fdc:	00003706 	br	150bc <__umoddi3+0x268>
   14fe0:	3000041e 	bne	r6,zero,14ff4 <__umoddi3+0x1a0>
   14fe4:	000b883a 	mov	r5,zero
   14fe8:	01000044 	movi	r4,1
   14fec:	00154840 	call	15484 <__udivsi3>
   14ff0:	1027883a 	mov	r19,r2
   14ff4:	00bfffd4 	movui	r2,65535
   14ff8:	14c0402e 	bgeu	r2,r19,150fc <__umoddi3+0x2a8>
   14ffc:	00804034 	movhi	r2,256
   15000:	10bfffc4 	addi	r2,r2,-1
   15004:	14c0cd36 	bltu	r2,r19,1533c <__umoddi3+0x4e8>
   15008:	00800404 	movi	r2,16
   1500c:	9886d83a 	srl	r3,r19,r2
   15010:	010000b4 	movhi	r4,2
   15014:	21128d04 	addi	r4,r4,18996
   15018:	20c7883a 	add	r3,r4,r3
   1501c:	18c00003 	ldbu	r3,0(r3)
   15020:	1887883a 	add	r3,r3,r2
   15024:	00800804 	movi	r2,32
   15028:	10e5c83a 	sub	r18,r2,r3
   1502c:	9000901e 	bne	r18,zero,15270 <__umoddi3+0x41c>
   15030:	982cd43a 	srli	r22,r19,16
   15034:	8ce3c83a 	sub	r17,r17,r19
   15038:	9d7fffcc 	andi	r21,r19,65535
   1503c:	b00b883a 	mov	r5,r22
   15040:	8809883a 	mov	r4,r17
   15044:	00154e80 	call	154e8 <__umodsi3>
   15048:	8809883a 	mov	r4,r17
   1504c:	b00b883a 	mov	r5,r22
   15050:	1021883a 	mov	r16,r2
   15054:	00154840 	call	15484 <__udivsi3>
   15058:	8006943a 	slli	r3,r16,16
   1505c:	a008d43a 	srli	r4,r20,16
   15060:	1545383a 	mul	r2,r2,r21
   15064:	20c8b03a 	or	r4,r4,r3
   15068:	2080042e 	bgeu	r4,r2,1507c <__umoddi3+0x228>
   1506c:	24c9883a 	add	r4,r4,r19
   15070:	24c00236 	bltu	r4,r19,1507c <__umoddi3+0x228>
   15074:	2080012e 	bgeu	r4,r2,1507c <__umoddi3+0x228>
   15078:	24c9883a 	add	r4,r4,r19
   1507c:	20a1c83a 	sub	r16,r4,r2
   15080:	b00b883a 	mov	r5,r22
   15084:	8009883a 	mov	r4,r16
   15088:	00154e80 	call	154e8 <__umodsi3>
   1508c:	1023883a 	mov	r17,r2
   15090:	b00b883a 	mov	r5,r22
   15094:	8009883a 	mov	r4,r16
   15098:	00154840 	call	15484 <__udivsi3>
   1509c:	8822943a 	slli	r17,r17,16
   150a0:	1545383a 	mul	r2,r2,r21
   150a4:	a53fffcc 	andi	r20,r20,65535
   150a8:	a446b03a 	or	r3,r20,r17
   150ac:	18bfb02e 	bgeu	r3,r2,14f70 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014f70>
   150b0:	003fab06 	br	14f60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014f60>
   150b4:	2005883a 	mov	r2,r4
   150b8:	2807883a 	mov	r3,r5
   150bc:	dfc00b17 	ldw	ra,44(sp)
   150c0:	df000a17 	ldw	fp,40(sp)
   150c4:	ddc00917 	ldw	r23,36(sp)
   150c8:	dd800817 	ldw	r22,32(sp)
   150cc:	dd400717 	ldw	r21,28(sp)
   150d0:	dd000617 	ldw	r20,24(sp)
   150d4:	dcc00517 	ldw	r19,20(sp)
   150d8:	dc800417 	ldw	r18,16(sp)
   150dc:	dc400317 	ldw	r17,12(sp)
   150e0:	dc000217 	ldw	r16,8(sp)
   150e4:	dec00c04 	addi	sp,sp,48
   150e8:	f800283a 	ret
   150ec:	04c03fc4 	movi	r19,255
   150f0:	99c9803a 	cmpltu	r4,r19,r7
   150f4:	200890fa 	slli	r4,r4,3
   150f8:	003fa806 	br	14f9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014f9c>
   150fc:	00803fc4 	movi	r2,255
   15100:	14c5803a 	cmpltu	r2,r2,r19
   15104:	100490fa 	slli	r2,r2,3
   15108:	003fc006 	br	1500c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701500c>
   1510c:	00804034 	movhi	r2,256
   15110:	10bfffc4 	addi	r2,r2,-1
   15114:	11808b36 	bltu	r2,r6,15344 <__umoddi3+0x4f0>
   15118:	01000404 	movi	r4,16
   1511c:	003f6406 	br	14eb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014eb0>
   15120:	34c4d83a 	srl	r2,r6,r19
   15124:	3d0e983a 	sll	r7,r7,r20
   15128:	8cf8d83a 	srl	fp,r17,r19
   1512c:	8d10983a 	sll	r8,r17,r20
   15130:	38aab03a 	or	r21,r7,r2
   15134:	a82cd43a 	srli	r22,r21,16
   15138:	84e2d83a 	srl	r17,r16,r19
   1513c:	e009883a 	mov	r4,fp
   15140:	b00b883a 	mov	r5,r22
   15144:	8a22b03a 	or	r17,r17,r8
   15148:	3524983a 	sll	r18,r6,r20
   1514c:	00154e80 	call	154e8 <__umodsi3>
   15150:	e009883a 	mov	r4,fp
   15154:	b00b883a 	mov	r5,r22
   15158:	102f883a 	mov	r23,r2
   1515c:	00154840 	call	15484 <__udivsi3>
   15160:	100d883a 	mov	r6,r2
   15164:	b808943a 	slli	r4,r23,16
   15168:	aa3fffcc 	andi	r8,r21,65535
   1516c:	8804d43a 	srli	r2,r17,16
   15170:	41af383a 	mul	r23,r8,r6
   15174:	8520983a 	sll	r16,r16,r20
   15178:	1104b03a 	or	r2,r2,r4
   1517c:	15c0042e 	bgeu	r2,r23,15190 <__umoddi3+0x33c>
   15180:	1545883a 	add	r2,r2,r21
   15184:	30ffffc4 	addi	r3,r6,-1
   15188:	1540742e 	bgeu	r2,r21,1535c <__umoddi3+0x508>
   1518c:	180d883a 	mov	r6,r3
   15190:	15efc83a 	sub	r23,r2,r23
   15194:	b00b883a 	mov	r5,r22
   15198:	b809883a 	mov	r4,r23
   1519c:	d9800115 	stw	r6,4(sp)
   151a0:	da000015 	stw	r8,0(sp)
   151a4:	00154e80 	call	154e8 <__umodsi3>
   151a8:	b00b883a 	mov	r5,r22
   151ac:	b809883a 	mov	r4,r23
   151b0:	1039883a 	mov	fp,r2
   151b4:	00154840 	call	15484 <__udivsi3>
   151b8:	da000017 	ldw	r8,0(sp)
   151bc:	e038943a 	slli	fp,fp,16
   151c0:	100b883a 	mov	r5,r2
   151c4:	4089383a 	mul	r4,r8,r2
   151c8:	8a3fffcc 	andi	r8,r17,65535
   151cc:	4710b03a 	or	r8,r8,fp
   151d0:	d9800117 	ldw	r6,4(sp)
   151d4:	4100042e 	bgeu	r8,r4,151e8 <__umoddi3+0x394>
   151d8:	4551883a 	add	r8,r8,r21
   151dc:	10bfffc4 	addi	r2,r2,-1
   151e0:	45405a2e 	bgeu	r8,r21,1534c <__umoddi3+0x4f8>
   151e4:	100b883a 	mov	r5,r2
   151e8:	300c943a 	slli	r6,r6,16
   151ec:	91ffffcc 	andi	r7,r18,65535
   151f0:	9004d43a 	srli	r2,r18,16
   151f4:	314cb03a 	or	r6,r6,r5
   151f8:	317fffcc 	andi	r5,r6,65535
   151fc:	300cd43a 	srli	r6,r6,16
   15200:	29d3383a 	mul	r9,r5,r7
   15204:	288b383a 	mul	r5,r5,r2
   15208:	31cf383a 	mul	r7,r6,r7
   1520c:	4806d43a 	srli	r3,r9,16
   15210:	4111c83a 	sub	r8,r8,r4
   15214:	29cb883a 	add	r5,r5,r7
   15218:	194b883a 	add	r5,r3,r5
   1521c:	3085383a 	mul	r2,r6,r2
   15220:	29c0022e 	bgeu	r5,r7,1522c <__umoddi3+0x3d8>
   15224:	00c00074 	movhi	r3,1
   15228:	10c5883a 	add	r2,r2,r3
   1522c:	2808d43a 	srli	r4,r5,16
   15230:	280a943a 	slli	r5,r5,16
   15234:	4a7fffcc 	andi	r9,r9,65535
   15238:	2085883a 	add	r2,r4,r2
   1523c:	2a4b883a 	add	r5,r5,r9
   15240:	40803636 	bltu	r8,r2,1531c <__umoddi3+0x4c8>
   15244:	40804d26 	beq	r8,r2,1537c <__umoddi3+0x528>
   15248:	4089c83a 	sub	r4,r8,r2
   1524c:	280f883a 	mov	r7,r5
   15250:	81cfc83a 	sub	r7,r16,r7
   15254:	81c7803a 	cmpltu	r3,r16,r7
   15258:	20c7c83a 	sub	r3,r4,r3
   1525c:	1cc4983a 	sll	r2,r3,r19
   15260:	3d0ed83a 	srl	r7,r7,r20
   15264:	1d06d83a 	srl	r3,r3,r20
   15268:	11c4b03a 	or	r2,r2,r7
   1526c:	003f9306 	br	150bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70150bc>
   15270:	9ca6983a 	sll	r19,r19,r18
   15274:	88e8d83a 	srl	r20,r17,r3
   15278:	80c4d83a 	srl	r2,r16,r3
   1527c:	982cd43a 	srli	r22,r19,16
   15280:	8ca2983a 	sll	r17,r17,r18
   15284:	a009883a 	mov	r4,r20
   15288:	b00b883a 	mov	r5,r22
   1528c:	1478b03a 	or	fp,r2,r17
   15290:	00154e80 	call	154e8 <__umodsi3>
   15294:	a009883a 	mov	r4,r20
   15298:	b00b883a 	mov	r5,r22
   1529c:	1023883a 	mov	r17,r2
   152a0:	00154840 	call	15484 <__udivsi3>
   152a4:	9d7fffcc 	andi	r21,r19,65535
   152a8:	880a943a 	slli	r5,r17,16
   152ac:	e008d43a 	srli	r4,fp,16
   152b0:	a885383a 	mul	r2,r21,r2
   152b4:	84a8983a 	sll	r20,r16,r18
   152b8:	2148b03a 	or	r4,r4,r5
   152bc:	2080042e 	bgeu	r4,r2,152d0 <__umoddi3+0x47c>
   152c0:	24c9883a 	add	r4,r4,r19
   152c4:	24c00236 	bltu	r4,r19,152d0 <__umoddi3+0x47c>
   152c8:	2080012e 	bgeu	r4,r2,152d0 <__umoddi3+0x47c>
   152cc:	24c9883a 	add	r4,r4,r19
   152d0:	20a3c83a 	sub	r17,r4,r2
   152d4:	b00b883a 	mov	r5,r22
   152d8:	8809883a 	mov	r4,r17
   152dc:	00154e80 	call	154e8 <__umodsi3>
   152e0:	102f883a 	mov	r23,r2
   152e4:	8809883a 	mov	r4,r17
   152e8:	b00b883a 	mov	r5,r22
   152ec:	00154840 	call	15484 <__udivsi3>
   152f0:	b82e943a 	slli	r23,r23,16
   152f4:	a885383a 	mul	r2,r21,r2
   152f8:	e13fffcc 	andi	r4,fp,65535
   152fc:	25c8b03a 	or	r4,r4,r23
   15300:	2080042e 	bgeu	r4,r2,15314 <__umoddi3+0x4c0>
   15304:	24c9883a 	add	r4,r4,r19
   15308:	24c00236 	bltu	r4,r19,15314 <__umoddi3+0x4c0>
   1530c:	2080012e 	bgeu	r4,r2,15314 <__umoddi3+0x4c0>
   15310:	24c9883a 	add	r4,r4,r19
   15314:	20a3c83a 	sub	r17,r4,r2
   15318:	003f4806 	br	1503c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701503c>
   1531c:	2c8fc83a 	sub	r7,r5,r18
   15320:	1545c83a 	sub	r2,r2,r21
   15324:	29cb803a 	cmpltu	r5,r5,r7
   15328:	1145c83a 	sub	r2,r2,r5
   1532c:	4089c83a 	sub	r4,r8,r2
   15330:	003fc706 	br	15250 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015250>
   15334:	01000604 	movi	r4,24
   15338:	003f1806 	br	14f9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014f9c>
   1533c:	00800604 	movi	r2,24
   15340:	003f3206 	br	1500c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701500c>
   15344:	01000604 	movi	r4,24
   15348:	003ed906 	br	14eb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014eb0>
   1534c:	413fa52e 	bgeu	r8,r4,151e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70151e4>
   15350:	297fff84 	addi	r5,r5,-2
   15354:	4551883a 	add	r8,r8,r21
   15358:	003fa306 	br	151e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70151e8>
   1535c:	15ff8b2e 	bgeu	r2,r23,1518c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701518c>
   15360:	31bfff84 	addi	r6,r6,-2
   15364:	1545883a 	add	r2,r2,r21
   15368:	003f8906 	br	15190 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015190>
   1536c:	24c9883a 	add	r4,r4,r19
   15370:	003eee06 	br	14f2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014f2c>
   15374:	8005883a 	mov	r2,r16
   15378:	003f1706 	br	14fd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7014fd8>
   1537c:	817fe736 	bltu	r16,r5,1531c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701531c>
   15380:	280f883a 	mov	r7,r5
   15384:	0009883a 	mov	r4,zero
   15388:	003fb106 	br	15250 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015250>

0001538c <__divsi3>:
   1538c:	20001b16 	blt	r4,zero,153fc <__divsi3+0x70>
   15390:	000f883a 	mov	r7,zero
   15394:	28001616 	blt	r5,zero,153f0 <__divsi3+0x64>
   15398:	200d883a 	mov	r6,r4
   1539c:	29001a2e 	bgeu	r5,r4,15408 <__divsi3+0x7c>
   153a0:	00800804 	movi	r2,32
   153a4:	00c00044 	movi	r3,1
   153a8:	00000106 	br	153b0 <__divsi3+0x24>
   153ac:	10000d26 	beq	r2,zero,153e4 <__divsi3+0x58>
   153b0:	294b883a 	add	r5,r5,r5
   153b4:	10bfffc4 	addi	r2,r2,-1
   153b8:	18c7883a 	add	r3,r3,r3
   153bc:	293ffb36 	bltu	r5,r4,153ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70153ac>
   153c0:	0005883a 	mov	r2,zero
   153c4:	18000726 	beq	r3,zero,153e4 <__divsi3+0x58>
   153c8:	0005883a 	mov	r2,zero
   153cc:	31400236 	bltu	r6,r5,153d8 <__divsi3+0x4c>
   153d0:	314dc83a 	sub	r6,r6,r5
   153d4:	10c4b03a 	or	r2,r2,r3
   153d8:	1806d07a 	srli	r3,r3,1
   153dc:	280ad07a 	srli	r5,r5,1
   153e0:	183ffa1e 	bne	r3,zero,153cc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70153cc>
   153e4:	38000126 	beq	r7,zero,153ec <__divsi3+0x60>
   153e8:	0085c83a 	sub	r2,zero,r2
   153ec:	f800283a 	ret
   153f0:	014bc83a 	sub	r5,zero,r5
   153f4:	39c0005c 	xori	r7,r7,1
   153f8:	003fe706 	br	15398 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015398>
   153fc:	0109c83a 	sub	r4,zero,r4
   15400:	01c00044 	movi	r7,1
   15404:	003fe306 	br	15394 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015394>
   15408:	00c00044 	movi	r3,1
   1540c:	003fee06 	br	153c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70153c8>

00015410 <__modsi3>:
   15410:	20001716 	blt	r4,zero,15470 <__modsi3+0x60>
   15414:	000f883a 	mov	r7,zero
   15418:	2005883a 	mov	r2,r4
   1541c:	28001216 	blt	r5,zero,15468 <__modsi3+0x58>
   15420:	2900162e 	bgeu	r5,r4,1547c <__modsi3+0x6c>
   15424:	01800804 	movi	r6,32
   15428:	00c00044 	movi	r3,1
   1542c:	00000106 	br	15434 <__modsi3+0x24>
   15430:	30000a26 	beq	r6,zero,1545c <__modsi3+0x4c>
   15434:	294b883a 	add	r5,r5,r5
   15438:	31bfffc4 	addi	r6,r6,-1
   1543c:	18c7883a 	add	r3,r3,r3
   15440:	293ffb36 	bltu	r5,r4,15430 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015430>
   15444:	18000526 	beq	r3,zero,1545c <__modsi3+0x4c>
   15448:	1806d07a 	srli	r3,r3,1
   1544c:	11400136 	bltu	r2,r5,15454 <__modsi3+0x44>
   15450:	1145c83a 	sub	r2,r2,r5
   15454:	280ad07a 	srli	r5,r5,1
   15458:	183ffb1e 	bne	r3,zero,15448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015448>
   1545c:	38000126 	beq	r7,zero,15464 <__modsi3+0x54>
   15460:	0085c83a 	sub	r2,zero,r2
   15464:	f800283a 	ret
   15468:	014bc83a 	sub	r5,zero,r5
   1546c:	003fec06 	br	15420 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015420>
   15470:	0109c83a 	sub	r4,zero,r4
   15474:	01c00044 	movi	r7,1
   15478:	003fe706 	br	15418 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015418>
   1547c:	00c00044 	movi	r3,1
   15480:	003ff106 	br	15448 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015448>

00015484 <__udivsi3>:
   15484:	200d883a 	mov	r6,r4
   15488:	2900152e 	bgeu	r5,r4,154e0 <__udivsi3+0x5c>
   1548c:	28001416 	blt	r5,zero,154e0 <__udivsi3+0x5c>
   15490:	00800804 	movi	r2,32
   15494:	00c00044 	movi	r3,1
   15498:	00000206 	br	154a4 <__udivsi3+0x20>
   1549c:	10000e26 	beq	r2,zero,154d8 <__udivsi3+0x54>
   154a0:	28000516 	blt	r5,zero,154b8 <__udivsi3+0x34>
   154a4:	294b883a 	add	r5,r5,r5
   154a8:	10bfffc4 	addi	r2,r2,-1
   154ac:	18c7883a 	add	r3,r3,r3
   154b0:	293ffa36 	bltu	r5,r4,1549c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701549c>
   154b4:	18000826 	beq	r3,zero,154d8 <__udivsi3+0x54>
   154b8:	0005883a 	mov	r2,zero
   154bc:	31400236 	bltu	r6,r5,154c8 <__udivsi3+0x44>
   154c0:	314dc83a 	sub	r6,r6,r5
   154c4:	10c4b03a 	or	r2,r2,r3
   154c8:	1806d07a 	srli	r3,r3,1
   154cc:	280ad07a 	srli	r5,r5,1
   154d0:	183ffa1e 	bne	r3,zero,154bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70154bc>
   154d4:	f800283a 	ret
   154d8:	0005883a 	mov	r2,zero
   154dc:	f800283a 	ret
   154e0:	00c00044 	movi	r3,1
   154e4:	003ff406 	br	154b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70154b8>

000154e8 <__umodsi3>:
   154e8:	2005883a 	mov	r2,r4
   154ec:	2900122e 	bgeu	r5,r4,15538 <__umodsi3+0x50>
   154f0:	28001116 	blt	r5,zero,15538 <__umodsi3+0x50>
   154f4:	01800804 	movi	r6,32
   154f8:	00c00044 	movi	r3,1
   154fc:	00000206 	br	15508 <__umodsi3+0x20>
   15500:	30000c26 	beq	r6,zero,15534 <__umodsi3+0x4c>
   15504:	28000516 	blt	r5,zero,1551c <__umodsi3+0x34>
   15508:	294b883a 	add	r5,r5,r5
   1550c:	31bfffc4 	addi	r6,r6,-1
   15510:	18c7883a 	add	r3,r3,r3
   15514:	293ffa36 	bltu	r5,r4,15500 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015500>
   15518:	18000626 	beq	r3,zero,15534 <__umodsi3+0x4c>
   1551c:	1806d07a 	srli	r3,r3,1
   15520:	11400136 	bltu	r2,r5,15528 <__umodsi3+0x40>
   15524:	1145c83a 	sub	r2,r2,r5
   15528:	280ad07a 	srli	r5,r5,1
   1552c:	183ffb1e 	bne	r3,zero,1551c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701551c>
   15530:	f800283a 	ret
   15534:	f800283a 	ret
   15538:	00c00044 	movi	r3,1
   1553c:	003ff706 	br	1551c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701551c>

00015540 <__divdf3>:
   15540:	defff204 	addi	sp,sp,-56
   15544:	dd400915 	stw	r21,36(sp)
   15548:	282ad53a 	srli	r21,r5,20
   1554c:	dd000815 	stw	r20,32(sp)
   15550:	2828d7fa 	srli	r20,r5,31
   15554:	dc000415 	stw	r16,16(sp)
   15558:	04000434 	movhi	r16,16
   1555c:	df000c15 	stw	fp,48(sp)
   15560:	843fffc4 	addi	r16,r16,-1
   15564:	dfc00d15 	stw	ra,52(sp)
   15568:	ddc00b15 	stw	r23,44(sp)
   1556c:	dd800a15 	stw	r22,40(sp)
   15570:	dcc00715 	stw	r19,28(sp)
   15574:	dc800615 	stw	r18,24(sp)
   15578:	dc400515 	stw	r17,20(sp)
   1557c:	ad41ffcc 	andi	r21,r21,2047
   15580:	2c20703a 	and	r16,r5,r16
   15584:	a7003fcc 	andi	fp,r20,255
   15588:	a8006126 	beq	r21,zero,15710 <__divdf3+0x1d0>
   1558c:	0081ffc4 	movi	r2,2047
   15590:	2025883a 	mov	r18,r4
   15594:	a8803726 	beq	r21,r2,15674 <__divdf3+0x134>
   15598:	80800434 	orhi	r2,r16,16
   1559c:	100490fa 	slli	r2,r2,3
   155a0:	2020d77a 	srli	r16,r4,29
   155a4:	202490fa 	slli	r18,r4,3
   155a8:	ad7f0044 	addi	r21,r21,-1023
   155ac:	80a0b03a 	or	r16,r16,r2
   155b0:	0027883a 	mov	r19,zero
   155b4:	0013883a 	mov	r9,zero
   155b8:	3804d53a 	srli	r2,r7,20
   155bc:	382cd7fa 	srli	r22,r7,31
   155c0:	04400434 	movhi	r17,16
   155c4:	8c7fffc4 	addi	r17,r17,-1
   155c8:	1081ffcc 	andi	r2,r2,2047
   155cc:	3011883a 	mov	r8,r6
   155d0:	3c62703a 	and	r17,r7,r17
   155d4:	b5c03fcc 	andi	r23,r22,255
   155d8:	10006c26 	beq	r2,zero,1578c <__divdf3+0x24c>
   155dc:	00c1ffc4 	movi	r3,2047
   155e0:	10c06426 	beq	r2,r3,15774 <__divdf3+0x234>
   155e4:	88c00434 	orhi	r3,r17,16
   155e8:	180690fa 	slli	r3,r3,3
   155ec:	3022d77a 	srli	r17,r6,29
   155f0:	301090fa 	slli	r8,r6,3
   155f4:	10bf0044 	addi	r2,r2,-1023
   155f8:	88e2b03a 	or	r17,r17,r3
   155fc:	000f883a 	mov	r7,zero
   15600:	a58cf03a 	xor	r6,r20,r22
   15604:	3cc8b03a 	or	r4,r7,r19
   15608:	a8abc83a 	sub	r21,r21,r2
   1560c:	008003c4 	movi	r2,15
   15610:	3007883a 	mov	r3,r6
   15614:	34c03fcc 	andi	r19,r6,255
   15618:	11009036 	bltu	r2,r4,1585c <__divdf3+0x31c>
   1561c:	200890ba 	slli	r4,r4,2
   15620:	00800074 	movhi	r2,1
   15624:	10958d04 	addi	r2,r2,22068
   15628:	2089883a 	add	r4,r4,r2
   1562c:	20800017 	ldw	r2,0(r4)
   15630:	1000683a 	jmp	r2
   15634:	0001585c 	xori	zero,zero,1377
   15638:	000156ac 	andhi	zero,zero,1370
   1563c:	0001584c 	andi	zero,zero,1377
   15640:	000156a0 	cmpeqi	zero,zero,1370
   15644:	0001584c 	andi	zero,zero,1377
   15648:	00015820 	cmpeqi	zero,zero,1376
   1564c:	0001584c 	andi	zero,zero,1377
   15650:	000156a0 	cmpeqi	zero,zero,1370
   15654:	000156ac 	andhi	zero,zero,1370
   15658:	000156ac 	andhi	zero,zero,1370
   1565c:	00015820 	cmpeqi	zero,zero,1376
   15660:	000156a0 	cmpeqi	zero,zero,1370
   15664:	00015690 	cmplti	zero,zero,1370
   15668:	00015690 	cmplti	zero,zero,1370
   1566c:	00015690 	cmplti	zero,zero,1370
   15670:	00015b40 	call	15b4 <_ZN4Game8drawTextEiiPc+0x8>
   15674:	2404b03a 	or	r2,r4,r16
   15678:	1000661e 	bne	r2,zero,15814 <__divdf3+0x2d4>
   1567c:	04c00204 	movi	r19,8
   15680:	0021883a 	mov	r16,zero
   15684:	0025883a 	mov	r18,zero
   15688:	02400084 	movi	r9,2
   1568c:	003fca06 	br	155b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70155b8>
   15690:	8023883a 	mov	r17,r16
   15694:	9011883a 	mov	r8,r18
   15698:	e02f883a 	mov	r23,fp
   1569c:	480f883a 	mov	r7,r9
   156a0:	00800084 	movi	r2,2
   156a4:	3881311e 	bne	r7,r2,15b6c <__divdf3+0x62c>
   156a8:	b827883a 	mov	r19,r23
   156ac:	98c0004c 	andi	r3,r19,1
   156b0:	0081ffc4 	movi	r2,2047
   156b4:	000b883a 	mov	r5,zero
   156b8:	0025883a 	mov	r18,zero
   156bc:	1004953a 	slli	r2,r2,20
   156c0:	18c03fcc 	andi	r3,r3,255
   156c4:	04400434 	movhi	r17,16
   156c8:	8c7fffc4 	addi	r17,r17,-1
   156cc:	180697fa 	slli	r3,r3,31
   156d0:	2c4a703a 	and	r5,r5,r17
   156d4:	288ab03a 	or	r5,r5,r2
   156d8:	28c6b03a 	or	r3,r5,r3
   156dc:	9005883a 	mov	r2,r18
   156e0:	dfc00d17 	ldw	ra,52(sp)
   156e4:	df000c17 	ldw	fp,48(sp)
   156e8:	ddc00b17 	ldw	r23,44(sp)
   156ec:	dd800a17 	ldw	r22,40(sp)
   156f0:	dd400917 	ldw	r21,36(sp)
   156f4:	dd000817 	ldw	r20,32(sp)
   156f8:	dcc00717 	ldw	r19,28(sp)
   156fc:	dc800617 	ldw	r18,24(sp)
   15700:	dc400517 	ldw	r17,20(sp)
   15704:	dc000417 	ldw	r16,16(sp)
   15708:	dec00e04 	addi	sp,sp,56
   1570c:	f800283a 	ret
   15710:	2404b03a 	or	r2,r4,r16
   15714:	2027883a 	mov	r19,r4
   15718:	10003926 	beq	r2,zero,15800 <__divdf3+0x2c0>
   1571c:	80012e26 	beq	r16,zero,15bd8 <__divdf3+0x698>
   15720:	8009883a 	mov	r4,r16
   15724:	d9800315 	stw	r6,12(sp)
   15728:	d9c00215 	stw	r7,8(sp)
   1572c:	00078380 	call	7838 <__clzsi2>
   15730:	d9800317 	ldw	r6,12(sp)
   15734:	d9c00217 	ldw	r7,8(sp)
   15738:	113ffd44 	addi	r4,r2,-11
   1573c:	00c00704 	movi	r3,28
   15740:	19012116 	blt	r3,r4,15bc8 <__divdf3+0x688>
   15744:	00c00744 	movi	r3,29
   15748:	147ffe04 	addi	r17,r2,-8
   1574c:	1907c83a 	sub	r3,r3,r4
   15750:	8460983a 	sll	r16,r16,r17
   15754:	98c6d83a 	srl	r3,r19,r3
   15758:	9c64983a 	sll	r18,r19,r17
   1575c:	1c20b03a 	or	r16,r3,r16
   15760:	1080fcc4 	addi	r2,r2,1011
   15764:	00abc83a 	sub	r21,zero,r2
   15768:	0027883a 	mov	r19,zero
   1576c:	0013883a 	mov	r9,zero
   15770:	003f9106 	br	155b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70155b8>
   15774:	3446b03a 	or	r3,r6,r17
   15778:	18001f1e 	bne	r3,zero,157f8 <__divdf3+0x2b8>
   1577c:	0023883a 	mov	r17,zero
   15780:	0011883a 	mov	r8,zero
   15784:	01c00084 	movi	r7,2
   15788:	003f9d06 	br	15600 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015600>
   1578c:	3446b03a 	or	r3,r6,r17
   15790:	18001526 	beq	r3,zero,157e8 <__divdf3+0x2a8>
   15794:	88011b26 	beq	r17,zero,15c04 <__divdf3+0x6c4>
   15798:	8809883a 	mov	r4,r17
   1579c:	d9800315 	stw	r6,12(sp)
   157a0:	da400115 	stw	r9,4(sp)
   157a4:	00078380 	call	7838 <__clzsi2>
   157a8:	d9800317 	ldw	r6,12(sp)
   157ac:	da400117 	ldw	r9,4(sp)
   157b0:	113ffd44 	addi	r4,r2,-11
   157b4:	00c00704 	movi	r3,28
   157b8:	19010e16 	blt	r3,r4,15bf4 <__divdf3+0x6b4>
   157bc:	00c00744 	movi	r3,29
   157c0:	123ffe04 	addi	r8,r2,-8
   157c4:	1907c83a 	sub	r3,r3,r4
   157c8:	8a22983a 	sll	r17,r17,r8
   157cc:	30c6d83a 	srl	r3,r6,r3
   157d0:	3210983a 	sll	r8,r6,r8
   157d4:	1c62b03a 	or	r17,r3,r17
   157d8:	1080fcc4 	addi	r2,r2,1011
   157dc:	0085c83a 	sub	r2,zero,r2
   157e0:	000f883a 	mov	r7,zero
   157e4:	003f8606 	br	15600 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015600>
   157e8:	0023883a 	mov	r17,zero
   157ec:	0011883a 	mov	r8,zero
   157f0:	01c00044 	movi	r7,1
   157f4:	003f8206 	br	15600 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015600>
   157f8:	01c000c4 	movi	r7,3
   157fc:	003f8006 	br	15600 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015600>
   15800:	04c00104 	movi	r19,4
   15804:	0021883a 	mov	r16,zero
   15808:	0025883a 	mov	r18,zero
   1580c:	02400044 	movi	r9,1
   15810:	003f6906 	br	155b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70155b8>
   15814:	04c00304 	movi	r19,12
   15818:	024000c4 	movi	r9,3
   1581c:	003f6606 	br	155b8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70155b8>
   15820:	01400434 	movhi	r5,16
   15824:	0007883a 	mov	r3,zero
   15828:	297fffc4 	addi	r5,r5,-1
   1582c:	04bfffc4 	movi	r18,-1
   15830:	0081ffc4 	movi	r2,2047
   15834:	003fa106 	br	156bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70156bc>
   15838:	00c00044 	movi	r3,1
   1583c:	1887c83a 	sub	r3,r3,r2
   15840:	01000e04 	movi	r4,56
   15844:	20c1210e 	bge	r4,r3,15ccc <__divdf3+0x78c>
   15848:	98c0004c 	andi	r3,r19,1
   1584c:	0005883a 	mov	r2,zero
   15850:	000b883a 	mov	r5,zero
   15854:	0025883a 	mov	r18,zero
   15858:	003f9806 	br	156bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70156bc>
   1585c:	8c00fd36 	bltu	r17,r16,15c54 <__divdf3+0x714>
   15860:	8440fb26 	beq	r16,r17,15c50 <__divdf3+0x710>
   15864:	8007883a 	mov	r3,r16
   15868:	ad7fffc4 	addi	r21,r21,-1
   1586c:	0021883a 	mov	r16,zero
   15870:	4004d63a 	srli	r2,r8,24
   15874:	8822923a 	slli	r17,r17,8
   15878:	1809883a 	mov	r4,r3
   1587c:	402c923a 	slli	r22,r8,8
   15880:	88b8b03a 	or	fp,r17,r2
   15884:	e028d43a 	srli	r20,fp,16
   15888:	d8c00015 	stw	r3,0(sp)
   1588c:	e5ffffcc 	andi	r23,fp,65535
   15890:	a00b883a 	mov	r5,r20
   15894:	00154840 	call	15484 <__udivsi3>
   15898:	d8c00017 	ldw	r3,0(sp)
   1589c:	a00b883a 	mov	r5,r20
   158a0:	d8800315 	stw	r2,12(sp)
   158a4:	1809883a 	mov	r4,r3
   158a8:	00154e80 	call	154e8 <__umodsi3>
   158ac:	d9800317 	ldw	r6,12(sp)
   158b0:	1006943a 	slli	r3,r2,16
   158b4:	9004d43a 	srli	r2,r18,16
   158b8:	b9a3383a 	mul	r17,r23,r6
   158bc:	10c4b03a 	or	r2,r2,r3
   158c0:	1440062e 	bgeu	r2,r17,158dc <__divdf3+0x39c>
   158c4:	1705883a 	add	r2,r2,fp
   158c8:	30ffffc4 	addi	r3,r6,-1
   158cc:	1700ee36 	bltu	r2,fp,15c88 <__divdf3+0x748>
   158d0:	1440ed2e 	bgeu	r2,r17,15c88 <__divdf3+0x748>
   158d4:	31bfff84 	addi	r6,r6,-2
   158d8:	1705883a 	add	r2,r2,fp
   158dc:	1463c83a 	sub	r17,r2,r17
   158e0:	a00b883a 	mov	r5,r20
   158e4:	8809883a 	mov	r4,r17
   158e8:	d9800315 	stw	r6,12(sp)
   158ec:	00154840 	call	15484 <__udivsi3>
   158f0:	a00b883a 	mov	r5,r20
   158f4:	8809883a 	mov	r4,r17
   158f8:	d8800215 	stw	r2,8(sp)
   158fc:	00154e80 	call	154e8 <__umodsi3>
   15900:	d9c00217 	ldw	r7,8(sp)
   15904:	1004943a 	slli	r2,r2,16
   15908:	94bfffcc 	andi	r18,r18,65535
   1590c:	b9d1383a 	mul	r8,r23,r7
   15910:	90a4b03a 	or	r18,r18,r2
   15914:	d9800317 	ldw	r6,12(sp)
   15918:	9200062e 	bgeu	r18,r8,15934 <__divdf3+0x3f4>
   1591c:	9725883a 	add	r18,r18,fp
   15920:	38bfffc4 	addi	r2,r7,-1
   15924:	9700d636 	bltu	r18,fp,15c80 <__divdf3+0x740>
   15928:	9200d52e 	bgeu	r18,r8,15c80 <__divdf3+0x740>
   1592c:	39ffff84 	addi	r7,r7,-2
   15930:	9725883a 	add	r18,r18,fp
   15934:	3004943a 	slli	r2,r6,16
   15938:	b012d43a 	srli	r9,r22,16
   1593c:	b1bfffcc 	andi	r6,r22,65535
   15940:	11e2b03a 	or	r17,r2,r7
   15944:	8806d43a 	srli	r3,r17,16
   15948:	893fffcc 	andi	r4,r17,65535
   1594c:	218b383a 	mul	r5,r4,r6
   15950:	30c5383a 	mul	r2,r6,r3
   15954:	2249383a 	mul	r4,r4,r9
   15958:	280ed43a 	srli	r7,r5,16
   1595c:	9225c83a 	sub	r18,r18,r8
   15960:	2089883a 	add	r4,r4,r2
   15964:	3909883a 	add	r4,r7,r4
   15968:	1a47383a 	mul	r3,r3,r9
   1596c:	2080022e 	bgeu	r4,r2,15978 <__divdf3+0x438>
   15970:	00800074 	movhi	r2,1
   15974:	1887883a 	add	r3,r3,r2
   15978:	2004d43a 	srli	r2,r4,16
   1597c:	2008943a 	slli	r4,r4,16
   15980:	297fffcc 	andi	r5,r5,65535
   15984:	10c7883a 	add	r3,r2,r3
   15988:	2149883a 	add	r4,r4,r5
   1598c:	90c0a536 	bltu	r18,r3,15c24 <__divdf3+0x6e4>
   15990:	90c0bf26 	beq	r18,r3,15c90 <__divdf3+0x750>
   15994:	90c7c83a 	sub	r3,r18,r3
   15998:	810fc83a 	sub	r7,r16,r4
   1599c:	81e5803a 	cmpltu	r18,r16,r7
   159a0:	1ca5c83a 	sub	r18,r3,r18
   159a4:	e480c126 	beq	fp,r18,15cac <__divdf3+0x76c>
   159a8:	a00b883a 	mov	r5,r20
   159ac:	9009883a 	mov	r4,r18
   159b0:	d9800315 	stw	r6,12(sp)
   159b4:	d9c00215 	stw	r7,8(sp)
   159b8:	da400115 	stw	r9,4(sp)
   159bc:	00154840 	call	15484 <__udivsi3>
   159c0:	a00b883a 	mov	r5,r20
   159c4:	9009883a 	mov	r4,r18
   159c8:	d8800015 	stw	r2,0(sp)
   159cc:	00154e80 	call	154e8 <__umodsi3>
   159d0:	d9c00217 	ldw	r7,8(sp)
   159d4:	da000017 	ldw	r8,0(sp)
   159d8:	1006943a 	slli	r3,r2,16
   159dc:	3804d43a 	srli	r2,r7,16
   159e0:	ba21383a 	mul	r16,r23,r8
   159e4:	d9800317 	ldw	r6,12(sp)
   159e8:	10c4b03a 	or	r2,r2,r3
   159ec:	da400117 	ldw	r9,4(sp)
   159f0:	1400062e 	bgeu	r2,r16,15a0c <__divdf3+0x4cc>
   159f4:	1705883a 	add	r2,r2,fp
   159f8:	40ffffc4 	addi	r3,r8,-1
   159fc:	1700ad36 	bltu	r2,fp,15cb4 <__divdf3+0x774>
   15a00:	1400ac2e 	bgeu	r2,r16,15cb4 <__divdf3+0x774>
   15a04:	423fff84 	addi	r8,r8,-2
   15a08:	1705883a 	add	r2,r2,fp
   15a0c:	1421c83a 	sub	r16,r2,r16
   15a10:	a00b883a 	mov	r5,r20
   15a14:	8009883a 	mov	r4,r16
   15a18:	d9800315 	stw	r6,12(sp)
   15a1c:	d9c00215 	stw	r7,8(sp)
   15a20:	da000015 	stw	r8,0(sp)
   15a24:	da400115 	stw	r9,4(sp)
   15a28:	00154840 	call	15484 <__udivsi3>
   15a2c:	8009883a 	mov	r4,r16
   15a30:	a00b883a 	mov	r5,r20
   15a34:	1025883a 	mov	r18,r2
   15a38:	00154e80 	call	154e8 <__umodsi3>
   15a3c:	d9c00217 	ldw	r7,8(sp)
   15a40:	1004943a 	slli	r2,r2,16
   15a44:	bcaf383a 	mul	r23,r23,r18
   15a48:	393fffcc 	andi	r4,r7,65535
   15a4c:	2088b03a 	or	r4,r4,r2
   15a50:	d9800317 	ldw	r6,12(sp)
   15a54:	da000017 	ldw	r8,0(sp)
   15a58:	da400117 	ldw	r9,4(sp)
   15a5c:	25c0062e 	bgeu	r4,r23,15a78 <__divdf3+0x538>
   15a60:	2709883a 	add	r4,r4,fp
   15a64:	90bfffc4 	addi	r2,r18,-1
   15a68:	27009436 	bltu	r4,fp,15cbc <__divdf3+0x77c>
   15a6c:	25c0932e 	bgeu	r4,r23,15cbc <__divdf3+0x77c>
   15a70:	94bfff84 	addi	r18,r18,-2
   15a74:	2709883a 	add	r4,r4,fp
   15a78:	4004943a 	slli	r2,r8,16
   15a7c:	25efc83a 	sub	r23,r4,r23
   15a80:	1490b03a 	or	r8,r2,r18
   15a84:	4008d43a 	srli	r4,r8,16
   15a88:	40ffffcc 	andi	r3,r8,65535
   15a8c:	30c5383a 	mul	r2,r6,r3
   15a90:	1a47383a 	mul	r3,r3,r9
   15a94:	310d383a 	mul	r6,r6,r4
   15a98:	100ad43a 	srli	r5,r2,16
   15a9c:	4913383a 	mul	r9,r9,r4
   15aa0:	1987883a 	add	r3,r3,r6
   15aa4:	28c7883a 	add	r3,r5,r3
   15aa8:	1980022e 	bgeu	r3,r6,15ab4 <__divdf3+0x574>
   15aac:	01000074 	movhi	r4,1
   15ab0:	4913883a 	add	r9,r9,r4
   15ab4:	1808d43a 	srli	r4,r3,16
   15ab8:	1806943a 	slli	r3,r3,16
   15abc:	10bfffcc 	andi	r2,r2,65535
   15ac0:	2253883a 	add	r9,r4,r9
   15ac4:	1887883a 	add	r3,r3,r2
   15ac8:	ba403836 	bltu	r23,r9,15bac <__divdf3+0x66c>
   15acc:	ba403626 	beq	r23,r9,15ba8 <__divdf3+0x668>
   15ad0:	42000054 	ori	r8,r8,1
   15ad4:	a880ffc4 	addi	r2,r21,1023
   15ad8:	00bf570e 	bge	zero,r2,15838 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015838>
   15adc:	40c001cc 	andi	r3,r8,7
   15ae0:	18000726 	beq	r3,zero,15b00 <__divdf3+0x5c0>
   15ae4:	40c003cc 	andi	r3,r8,15
   15ae8:	01000104 	movi	r4,4
   15aec:	19000426 	beq	r3,r4,15b00 <__divdf3+0x5c0>
   15af0:	4107883a 	add	r3,r8,r4
   15af4:	1a11803a 	cmpltu	r8,r3,r8
   15af8:	8a23883a 	add	r17,r17,r8
   15afc:	1811883a 	mov	r8,r3
   15b00:	88c0402c 	andhi	r3,r17,256
   15b04:	18000426 	beq	r3,zero,15b18 <__divdf3+0x5d8>
   15b08:	00ffc034 	movhi	r3,65280
   15b0c:	18ffffc4 	addi	r3,r3,-1
   15b10:	a8810004 	addi	r2,r21,1024
   15b14:	88e2703a 	and	r17,r17,r3
   15b18:	00c1ff84 	movi	r3,2046
   15b1c:	18bee316 	blt	r3,r2,156ac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70156ac>
   15b20:	8824977a 	slli	r18,r17,29
   15b24:	4010d0fa 	srli	r8,r8,3
   15b28:	8822927a 	slli	r17,r17,9
   15b2c:	1081ffcc 	andi	r2,r2,2047
   15b30:	9224b03a 	or	r18,r18,r8
   15b34:	880ad33a 	srli	r5,r17,12
   15b38:	98c0004c 	andi	r3,r19,1
   15b3c:	003edf06 	br	156bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70156bc>
   15b40:	8080022c 	andhi	r2,r16,8
   15b44:	10001226 	beq	r2,zero,15b90 <__divdf3+0x650>
   15b48:	8880022c 	andhi	r2,r17,8
   15b4c:	1000101e 	bne	r2,zero,15b90 <__divdf3+0x650>
   15b50:	00800434 	movhi	r2,16
   15b54:	89400234 	orhi	r5,r17,8
   15b58:	10bfffc4 	addi	r2,r2,-1
   15b5c:	b007883a 	mov	r3,r22
   15b60:	288a703a 	and	r5,r5,r2
   15b64:	4025883a 	mov	r18,r8
   15b68:	003f3106 	br	15830 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015830>
   15b6c:	008000c4 	movi	r2,3
   15b70:	3880a626 	beq	r7,r2,15e0c <__divdf3+0x8cc>
   15b74:	00800044 	movi	r2,1
   15b78:	3880521e 	bne	r7,r2,15cc4 <__divdf3+0x784>
   15b7c:	b807883a 	mov	r3,r23
   15b80:	0005883a 	mov	r2,zero
   15b84:	000b883a 	mov	r5,zero
   15b88:	0025883a 	mov	r18,zero
   15b8c:	003ecb06 	br	156bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70156bc>
   15b90:	00800434 	movhi	r2,16
   15b94:	81400234 	orhi	r5,r16,8
   15b98:	10bfffc4 	addi	r2,r2,-1
   15b9c:	a007883a 	mov	r3,r20
   15ba0:	288a703a 	and	r5,r5,r2
   15ba4:	003f2206 	br	15830 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015830>
   15ba8:	183fca26 	beq	r3,zero,15ad4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015ad4>
   15bac:	e5ef883a 	add	r23,fp,r23
   15bb0:	40bfffc4 	addi	r2,r8,-1
   15bb4:	bf00392e 	bgeu	r23,fp,15c9c <__divdf3+0x75c>
   15bb8:	1011883a 	mov	r8,r2
   15bbc:	ba7fc41e 	bne	r23,r9,15ad0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015ad0>
   15bc0:	b0ffc31e 	bne	r22,r3,15ad0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015ad0>
   15bc4:	003fc306 	br	15ad4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015ad4>
   15bc8:	143ff604 	addi	r16,r2,-40
   15bcc:	9c20983a 	sll	r16,r19,r16
   15bd0:	0025883a 	mov	r18,zero
   15bd4:	003ee206 	br	15760 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015760>
   15bd8:	d9800315 	stw	r6,12(sp)
   15bdc:	d9c00215 	stw	r7,8(sp)
   15be0:	00078380 	call	7838 <__clzsi2>
   15be4:	10800804 	addi	r2,r2,32
   15be8:	d9c00217 	ldw	r7,8(sp)
   15bec:	d9800317 	ldw	r6,12(sp)
   15bf0:	003ed106 	br	15738 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015738>
   15bf4:	147ff604 	addi	r17,r2,-40
   15bf8:	3462983a 	sll	r17,r6,r17
   15bfc:	0011883a 	mov	r8,zero
   15c00:	003ef506 	br	157d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70157d8>
   15c04:	3009883a 	mov	r4,r6
   15c08:	d9800315 	stw	r6,12(sp)
   15c0c:	da400115 	stw	r9,4(sp)
   15c10:	00078380 	call	7838 <__clzsi2>
   15c14:	10800804 	addi	r2,r2,32
   15c18:	da400117 	ldw	r9,4(sp)
   15c1c:	d9800317 	ldw	r6,12(sp)
   15c20:	003ee306 	br	157b0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70157b0>
   15c24:	85a1883a 	add	r16,r16,r22
   15c28:	8585803a 	cmpltu	r2,r16,r22
   15c2c:	1705883a 	add	r2,r2,fp
   15c30:	14a5883a 	add	r18,r2,r18
   15c34:	88bfffc4 	addi	r2,r17,-1
   15c38:	e4800c2e 	bgeu	fp,r18,15c6c <__divdf3+0x72c>
   15c3c:	90c03e36 	bltu	r18,r3,15d38 <__divdf3+0x7f8>
   15c40:	1c806926 	beq	r3,r18,15de8 <__divdf3+0x8a8>
   15c44:	90c7c83a 	sub	r3,r18,r3
   15c48:	1023883a 	mov	r17,r2
   15c4c:	003f5206 	br	15998 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015998>
   15c50:	923f0436 	bltu	r18,r8,15864 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015864>
   15c54:	800897fa 	slli	r4,r16,31
   15c58:	9004d07a 	srli	r2,r18,1
   15c5c:	8006d07a 	srli	r3,r16,1
   15c60:	902097fa 	slli	r16,r18,31
   15c64:	20a4b03a 	or	r18,r4,r2
   15c68:	003f0106 	br	15870 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015870>
   15c6c:	e4bff51e 	bne	fp,r18,15c44 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015c44>
   15c70:	85bff22e 	bgeu	r16,r22,15c3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015c3c>
   15c74:	e0c7c83a 	sub	r3,fp,r3
   15c78:	1023883a 	mov	r17,r2
   15c7c:	003f4606 	br	15998 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015998>
   15c80:	100f883a 	mov	r7,r2
   15c84:	003f2b06 	br	15934 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015934>
   15c88:	180d883a 	mov	r6,r3
   15c8c:	003f1306 	br	158dc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70158dc>
   15c90:	813fe436 	bltu	r16,r4,15c24 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015c24>
   15c94:	0007883a 	mov	r3,zero
   15c98:	003f3f06 	br	15998 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015998>
   15c9c:	ba402c36 	bltu	r23,r9,15d50 <__divdf3+0x810>
   15ca0:	4dc05426 	beq	r9,r23,15df4 <__divdf3+0x8b4>
   15ca4:	1011883a 	mov	r8,r2
   15ca8:	003f8906 	br	15ad0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015ad0>
   15cac:	023fffc4 	movi	r8,-1
   15cb0:	003f8806 	br	15ad4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015ad4>
   15cb4:	1811883a 	mov	r8,r3
   15cb8:	003f5406 	br	15a0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015a0c>
   15cbc:	1025883a 	mov	r18,r2
   15cc0:	003f6d06 	br	15a78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015a78>
   15cc4:	b827883a 	mov	r19,r23
   15cc8:	003f8206 	br	15ad4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015ad4>
   15ccc:	010007c4 	movi	r4,31
   15cd0:	20c02616 	blt	r4,r3,15d6c <__divdf3+0x82c>
   15cd4:	00800804 	movi	r2,32
   15cd8:	10c5c83a 	sub	r2,r2,r3
   15cdc:	888a983a 	sll	r5,r17,r2
   15ce0:	40c8d83a 	srl	r4,r8,r3
   15ce4:	4084983a 	sll	r2,r8,r2
   15ce8:	88e2d83a 	srl	r17,r17,r3
   15cec:	2906b03a 	or	r3,r5,r4
   15cf0:	1004c03a 	cmpne	r2,r2,zero
   15cf4:	1886b03a 	or	r3,r3,r2
   15cf8:	188001cc 	andi	r2,r3,7
   15cfc:	10000726 	beq	r2,zero,15d1c <__divdf3+0x7dc>
   15d00:	188003cc 	andi	r2,r3,15
   15d04:	01000104 	movi	r4,4
   15d08:	11000426 	beq	r2,r4,15d1c <__divdf3+0x7dc>
   15d0c:	1805883a 	mov	r2,r3
   15d10:	10c00104 	addi	r3,r2,4
   15d14:	1885803a 	cmpltu	r2,r3,r2
   15d18:	88a3883a 	add	r17,r17,r2
   15d1c:	8880202c 	andhi	r2,r17,128
   15d20:	10002726 	beq	r2,zero,15dc0 <__divdf3+0x880>
   15d24:	98c0004c 	andi	r3,r19,1
   15d28:	00800044 	movi	r2,1
   15d2c:	000b883a 	mov	r5,zero
   15d30:	0025883a 	mov	r18,zero
   15d34:	003e6106 	br	156bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70156bc>
   15d38:	85a1883a 	add	r16,r16,r22
   15d3c:	8585803a 	cmpltu	r2,r16,r22
   15d40:	1705883a 	add	r2,r2,fp
   15d44:	14a5883a 	add	r18,r2,r18
   15d48:	8c7fff84 	addi	r17,r17,-2
   15d4c:	003f1106 	br	15994 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015994>
   15d50:	b589883a 	add	r4,r22,r22
   15d54:	25ad803a 	cmpltu	r22,r4,r22
   15d58:	b739883a 	add	fp,r22,fp
   15d5c:	40bfff84 	addi	r2,r8,-2
   15d60:	bf2f883a 	add	r23,r23,fp
   15d64:	202d883a 	mov	r22,r4
   15d68:	003f9306 	br	15bb8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015bb8>
   15d6c:	013ff844 	movi	r4,-31
   15d70:	2085c83a 	sub	r2,r4,r2
   15d74:	8888d83a 	srl	r4,r17,r2
   15d78:	00800804 	movi	r2,32
   15d7c:	18802126 	beq	r3,r2,15e04 <__divdf3+0x8c4>
   15d80:	00801004 	movi	r2,64
   15d84:	10c5c83a 	sub	r2,r2,r3
   15d88:	8884983a 	sll	r2,r17,r2
   15d8c:	1204b03a 	or	r2,r2,r8
   15d90:	1004c03a 	cmpne	r2,r2,zero
   15d94:	2084b03a 	or	r2,r4,r2
   15d98:	144001cc 	andi	r17,r2,7
   15d9c:	88000d1e 	bne	r17,zero,15dd4 <__divdf3+0x894>
   15da0:	000b883a 	mov	r5,zero
   15da4:	1024d0fa 	srli	r18,r2,3
   15da8:	98c0004c 	andi	r3,r19,1
   15dac:	0005883a 	mov	r2,zero
   15db0:	9464b03a 	or	r18,r18,r17
   15db4:	003e4106 	br	156bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70156bc>
   15db8:	1007883a 	mov	r3,r2
   15dbc:	0023883a 	mov	r17,zero
   15dc0:	880a927a 	slli	r5,r17,9
   15dc4:	1805883a 	mov	r2,r3
   15dc8:	8822977a 	slli	r17,r17,29
   15dcc:	280ad33a 	srli	r5,r5,12
   15dd0:	003ff406 	br	15da4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015da4>
   15dd4:	10c003cc 	andi	r3,r2,15
   15dd8:	01000104 	movi	r4,4
   15ddc:	193ff626 	beq	r3,r4,15db8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015db8>
   15de0:	0023883a 	mov	r17,zero
   15de4:	003fca06 	br	15d10 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015d10>
   15de8:	813fd336 	bltu	r16,r4,15d38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015d38>
   15dec:	1023883a 	mov	r17,r2
   15df0:	003fa806 	br	15c94 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015c94>
   15df4:	b0ffd636 	bltu	r22,r3,15d50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015d50>
   15df8:	1011883a 	mov	r8,r2
   15dfc:	b0ff341e 	bne	r22,r3,15ad0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015ad0>
   15e00:	003f3406 	br	15ad4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015ad4>
   15e04:	0005883a 	mov	r2,zero
   15e08:	003fe006 	br	15d8c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015d8c>
   15e0c:	00800434 	movhi	r2,16
   15e10:	89400234 	orhi	r5,r17,8
   15e14:	10bfffc4 	addi	r2,r2,-1
   15e18:	b807883a 	mov	r3,r23
   15e1c:	288a703a 	and	r5,r5,r2
   15e20:	4025883a 	mov	r18,r8
   15e24:	003e8206 	br	15830 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015830>

00015e28 <__eqdf2>:
   15e28:	2804d53a 	srli	r2,r5,20
   15e2c:	3806d53a 	srli	r3,r7,20
   15e30:	02000434 	movhi	r8,16
   15e34:	423fffc4 	addi	r8,r8,-1
   15e38:	1081ffcc 	andi	r2,r2,2047
   15e3c:	0281ffc4 	movi	r10,2047
   15e40:	2a12703a 	and	r9,r5,r8
   15e44:	18c1ffcc 	andi	r3,r3,2047
   15e48:	3a10703a 	and	r8,r7,r8
   15e4c:	280ad7fa 	srli	r5,r5,31
   15e50:	380ed7fa 	srli	r7,r7,31
   15e54:	12801026 	beq	r2,r10,15e98 <__eqdf2+0x70>
   15e58:	0281ffc4 	movi	r10,2047
   15e5c:	1a800a26 	beq	r3,r10,15e88 <__eqdf2+0x60>
   15e60:	10c00226 	beq	r2,r3,15e6c <__eqdf2+0x44>
   15e64:	00800044 	movi	r2,1
   15e68:	f800283a 	ret
   15e6c:	4a3ffd1e 	bne	r9,r8,15e64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015e64>
   15e70:	21bffc1e 	bne	r4,r6,15e64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015e64>
   15e74:	29c00c26 	beq	r5,r7,15ea8 <__eqdf2+0x80>
   15e78:	103ffa1e 	bne	r2,zero,15e64 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015e64>
   15e7c:	2244b03a 	or	r2,r4,r9
   15e80:	1004c03a 	cmpne	r2,r2,zero
   15e84:	f800283a 	ret
   15e88:	3214b03a 	or	r10,r6,r8
   15e8c:	503ff426 	beq	r10,zero,15e60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015e60>
   15e90:	00800044 	movi	r2,1
   15e94:	f800283a 	ret
   15e98:	2254b03a 	or	r10,r4,r9
   15e9c:	503fee26 	beq	r10,zero,15e58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015e58>
   15ea0:	00800044 	movi	r2,1
   15ea4:	f800283a 	ret
   15ea8:	0005883a 	mov	r2,zero
   15eac:	f800283a 	ret

00015eb0 <__gedf2>:
   15eb0:	2804d53a 	srli	r2,r5,20
   15eb4:	3806d53a 	srli	r3,r7,20
   15eb8:	02000434 	movhi	r8,16
   15ebc:	423fffc4 	addi	r8,r8,-1
   15ec0:	1081ffcc 	andi	r2,r2,2047
   15ec4:	0241ffc4 	movi	r9,2047
   15ec8:	2a14703a 	and	r10,r5,r8
   15ecc:	18c1ffcc 	andi	r3,r3,2047
   15ed0:	3a10703a 	and	r8,r7,r8
   15ed4:	280ad7fa 	srli	r5,r5,31
   15ed8:	380ed7fa 	srli	r7,r7,31
   15edc:	12401d26 	beq	r2,r9,15f54 <__gedf2+0xa4>
   15ee0:	0241ffc4 	movi	r9,2047
   15ee4:	1a401226 	beq	r3,r9,15f30 <__gedf2+0x80>
   15ee8:	1000081e 	bne	r2,zero,15f0c <__gedf2+0x5c>
   15eec:	2296b03a 	or	r11,r4,r10
   15ef0:	5813003a 	cmpeq	r9,r11,zero
   15ef4:	1800091e 	bne	r3,zero,15f1c <__gedf2+0x6c>
   15ef8:	3218b03a 	or	r12,r6,r8
   15efc:	6000071e 	bne	r12,zero,15f1c <__gedf2+0x6c>
   15f00:	0005883a 	mov	r2,zero
   15f04:	5800101e 	bne	r11,zero,15f48 <__gedf2+0x98>
   15f08:	f800283a 	ret
   15f0c:	18000c1e 	bne	r3,zero,15f40 <__gedf2+0x90>
   15f10:	3212b03a 	or	r9,r6,r8
   15f14:	48000c26 	beq	r9,zero,15f48 <__gedf2+0x98>
   15f18:	0013883a 	mov	r9,zero
   15f1c:	39c03fcc 	andi	r7,r7,255
   15f20:	48000826 	beq	r9,zero,15f44 <__gedf2+0x94>
   15f24:	38000926 	beq	r7,zero,15f4c <__gedf2+0x9c>
   15f28:	00800044 	movi	r2,1
   15f2c:	f800283a 	ret
   15f30:	3212b03a 	or	r9,r6,r8
   15f34:	483fec26 	beq	r9,zero,15ee8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015ee8>
   15f38:	00bfff84 	movi	r2,-2
   15f3c:	f800283a 	ret
   15f40:	39c03fcc 	andi	r7,r7,255
   15f44:	29c00626 	beq	r5,r7,15f60 <__gedf2+0xb0>
   15f48:	283ff726 	beq	r5,zero,15f28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015f28>
   15f4c:	00bfffc4 	movi	r2,-1
   15f50:	f800283a 	ret
   15f54:	2292b03a 	or	r9,r4,r10
   15f58:	483fe126 	beq	r9,zero,15ee0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015ee0>
   15f5c:	003ff606 	br	15f38 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015f38>
   15f60:	18bff916 	blt	r3,r2,15f48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015f48>
   15f64:	10c00316 	blt	r2,r3,15f74 <__gedf2+0xc4>
   15f68:	42bff736 	bltu	r8,r10,15f48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015f48>
   15f6c:	52000326 	beq	r10,r8,15f7c <__gedf2+0xcc>
   15f70:	5200042e 	bgeu	r10,r8,15f84 <__gedf2+0xd4>
   15f74:	283fec1e 	bne	r5,zero,15f28 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015f28>
   15f78:	003ff406 	br	15f4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015f4c>
   15f7c:	313ff236 	bltu	r6,r4,15f48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015f48>
   15f80:	21bffc36 	bltu	r4,r6,15f74 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015f74>
   15f84:	0005883a 	mov	r2,zero
   15f88:	f800283a 	ret

00015f8c <__ledf2>:
   15f8c:	2804d53a 	srli	r2,r5,20
   15f90:	3810d53a 	srli	r8,r7,20
   15f94:	00c00434 	movhi	r3,16
   15f98:	18ffffc4 	addi	r3,r3,-1
   15f9c:	1081ffcc 	andi	r2,r2,2047
   15fa0:	0241ffc4 	movi	r9,2047
   15fa4:	28d4703a 	and	r10,r5,r3
   15fa8:	4201ffcc 	andi	r8,r8,2047
   15fac:	38c6703a 	and	r3,r7,r3
   15fb0:	280ad7fa 	srli	r5,r5,31
   15fb4:	380ed7fa 	srli	r7,r7,31
   15fb8:	12401f26 	beq	r2,r9,16038 <__ledf2+0xac>
   15fbc:	0241ffc4 	movi	r9,2047
   15fc0:	42401426 	beq	r8,r9,16014 <__ledf2+0x88>
   15fc4:	1000091e 	bne	r2,zero,15fec <__ledf2+0x60>
   15fc8:	2296b03a 	or	r11,r4,r10
   15fcc:	5813003a 	cmpeq	r9,r11,zero
   15fd0:	29403fcc 	andi	r5,r5,255
   15fd4:	40000a1e 	bne	r8,zero,16000 <__ledf2+0x74>
   15fd8:	30d8b03a 	or	r12,r6,r3
   15fdc:	6000081e 	bne	r12,zero,16000 <__ledf2+0x74>
   15fe0:	0005883a 	mov	r2,zero
   15fe4:	5800111e 	bne	r11,zero,1602c <__ledf2+0xa0>
   15fe8:	f800283a 	ret
   15fec:	29403fcc 	andi	r5,r5,255
   15ff0:	40000c1e 	bne	r8,zero,16024 <__ledf2+0x98>
   15ff4:	30d2b03a 	or	r9,r6,r3
   15ff8:	48000c26 	beq	r9,zero,1602c <__ledf2+0xa0>
   15ffc:	0013883a 	mov	r9,zero
   16000:	39c03fcc 	andi	r7,r7,255
   16004:	48000826 	beq	r9,zero,16028 <__ledf2+0x9c>
   16008:	38001126 	beq	r7,zero,16050 <__ledf2+0xc4>
   1600c:	00800044 	movi	r2,1
   16010:	f800283a 	ret
   16014:	30d2b03a 	or	r9,r6,r3
   16018:	483fea26 	beq	r9,zero,15fc4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015fc4>
   1601c:	00800084 	movi	r2,2
   16020:	f800283a 	ret
   16024:	39c03fcc 	andi	r7,r7,255
   16028:	39400726 	beq	r7,r5,16048 <__ledf2+0xbc>
   1602c:	2800081e 	bne	r5,zero,16050 <__ledf2+0xc4>
   16030:	00800044 	movi	r2,1
   16034:	f800283a 	ret
   16038:	2292b03a 	or	r9,r4,r10
   1603c:	483fdf26 	beq	r9,zero,15fbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7015fbc>
   16040:	00800084 	movi	r2,2
   16044:	f800283a 	ret
   16048:	4080030e 	bge	r8,r2,16058 <__ledf2+0xcc>
   1604c:	383fef26 	beq	r7,zero,1600c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701600c>
   16050:	00bfffc4 	movi	r2,-1
   16054:	f800283a 	ret
   16058:	123feb16 	blt	r2,r8,16008 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016008>
   1605c:	1abff336 	bltu	r3,r10,1602c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701602c>
   16060:	50c00326 	beq	r10,r3,16070 <__ledf2+0xe4>
   16064:	50c0042e 	bgeu	r10,r3,16078 <__ledf2+0xec>
   16068:	283fe81e 	bne	r5,zero,1600c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701600c>
   1606c:	003ff806 	br	16050 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016050>
   16070:	313fee36 	bltu	r6,r4,1602c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701602c>
   16074:	21bffc36 	bltu	r4,r6,16068 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016068>
   16078:	0005883a 	mov	r2,zero
   1607c:	f800283a 	ret

00016080 <__muldf3>:
   16080:	defff304 	addi	sp,sp,-52
   16084:	2804d53a 	srli	r2,r5,20
   16088:	dd800915 	stw	r22,36(sp)
   1608c:	282cd7fa 	srli	r22,r5,31
   16090:	dc000315 	stw	r16,12(sp)
   16094:	04000434 	movhi	r16,16
   16098:	dd400815 	stw	r21,32(sp)
   1609c:	dc800515 	stw	r18,20(sp)
   160a0:	843fffc4 	addi	r16,r16,-1
   160a4:	dfc00c15 	stw	ra,48(sp)
   160a8:	df000b15 	stw	fp,44(sp)
   160ac:	ddc00a15 	stw	r23,40(sp)
   160b0:	dd000715 	stw	r20,28(sp)
   160b4:	dcc00615 	stw	r19,24(sp)
   160b8:	dc400415 	stw	r17,16(sp)
   160bc:	1481ffcc 	andi	r18,r2,2047
   160c0:	2c20703a 	and	r16,r5,r16
   160c4:	b02b883a 	mov	r21,r22
   160c8:	b2403fcc 	andi	r9,r22,255
   160cc:	90006026 	beq	r18,zero,16250 <__muldf3+0x1d0>
   160d0:	0081ffc4 	movi	r2,2047
   160d4:	2029883a 	mov	r20,r4
   160d8:	90803626 	beq	r18,r2,161b4 <__muldf3+0x134>
   160dc:	80800434 	orhi	r2,r16,16
   160e0:	100490fa 	slli	r2,r2,3
   160e4:	2020d77a 	srli	r16,r4,29
   160e8:	202890fa 	slli	r20,r4,3
   160ec:	94bf0044 	addi	r18,r18,-1023
   160f0:	80a0b03a 	or	r16,r16,r2
   160f4:	0027883a 	mov	r19,zero
   160f8:	0039883a 	mov	fp,zero
   160fc:	3804d53a 	srli	r2,r7,20
   16100:	382ed7fa 	srli	r23,r7,31
   16104:	04400434 	movhi	r17,16
   16108:	8c7fffc4 	addi	r17,r17,-1
   1610c:	1081ffcc 	andi	r2,r2,2047
   16110:	3011883a 	mov	r8,r6
   16114:	3c62703a 	and	r17,r7,r17
   16118:	ba803fcc 	andi	r10,r23,255
   1611c:	10006d26 	beq	r2,zero,162d4 <__muldf3+0x254>
   16120:	00c1ffc4 	movi	r3,2047
   16124:	10c06526 	beq	r2,r3,162bc <__muldf3+0x23c>
   16128:	88c00434 	orhi	r3,r17,16
   1612c:	180690fa 	slli	r3,r3,3
   16130:	3022d77a 	srli	r17,r6,29
   16134:	301090fa 	slli	r8,r6,3
   16138:	10bf0044 	addi	r2,r2,-1023
   1613c:	88e2b03a 	or	r17,r17,r3
   16140:	000b883a 	mov	r5,zero
   16144:	9085883a 	add	r2,r18,r2
   16148:	2cc8b03a 	or	r4,r5,r19
   1614c:	00c003c4 	movi	r3,15
   16150:	bdacf03a 	xor	r22,r23,r22
   16154:	12c00044 	addi	r11,r2,1
   16158:	19009936 	bltu	r3,r4,163c0 <__muldf3+0x340>
   1615c:	200890ba 	slli	r4,r4,2
   16160:	00c00074 	movhi	r3,1
   16164:	18d85d04 	addi	r3,r3,24948
   16168:	20c9883a 	add	r4,r4,r3
   1616c:	20c00017 	ldw	r3,0(r4)
   16170:	1800683a 	jmp	r3
   16174:	000163c0 	call	163c <_ZN4Game8drawTextEiiPc+0x90>
   16178:	000161d4 	movui	zero,1415
   1617c:	000161d4 	movui	zero,1415
   16180:	000161d0 	cmplti	zero,zero,1415
   16184:	0001639c 	xori	zero,zero,1422
   16188:	0001639c 	xori	zero,zero,1422
   1618c:	00016384 	movi	zero,1422
   16190:	000161d0 	cmplti	zero,zero,1415
   16194:	0001639c 	xori	zero,zero,1422
   16198:	00016384 	movi	zero,1422
   1619c:	0001639c 	xori	zero,zero,1422
   161a0:	000161d0 	cmplti	zero,zero,1415
   161a4:	000163ac 	andhi	zero,zero,1422
   161a8:	000163ac 	andhi	zero,zero,1422
   161ac:	000163ac 	andhi	zero,zero,1422
   161b0:	000165c8 	cmpgei	zero,zero,1431
   161b4:	2404b03a 	or	r2,r4,r16
   161b8:	10006f1e 	bne	r2,zero,16378 <__muldf3+0x2f8>
   161bc:	04c00204 	movi	r19,8
   161c0:	0021883a 	mov	r16,zero
   161c4:	0029883a 	mov	r20,zero
   161c8:	07000084 	movi	fp,2
   161cc:	003fcb06 	br	160fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70160fc>
   161d0:	502d883a 	mov	r22,r10
   161d4:	00800084 	movi	r2,2
   161d8:	28805726 	beq	r5,r2,16338 <__muldf3+0x2b8>
   161dc:	008000c4 	movi	r2,3
   161e0:	28816626 	beq	r5,r2,1677c <__muldf3+0x6fc>
   161e4:	00800044 	movi	r2,1
   161e8:	2881411e 	bne	r5,r2,166f0 <__muldf3+0x670>
   161ec:	b02b883a 	mov	r21,r22
   161f0:	0005883a 	mov	r2,zero
   161f4:	000b883a 	mov	r5,zero
   161f8:	0029883a 	mov	r20,zero
   161fc:	1004953a 	slli	r2,r2,20
   16200:	a8c03fcc 	andi	r3,r21,255
   16204:	04400434 	movhi	r17,16
   16208:	8c7fffc4 	addi	r17,r17,-1
   1620c:	180697fa 	slli	r3,r3,31
   16210:	2c4a703a 	and	r5,r5,r17
   16214:	288ab03a 	or	r5,r5,r2
   16218:	28c6b03a 	or	r3,r5,r3
   1621c:	a005883a 	mov	r2,r20
   16220:	dfc00c17 	ldw	ra,48(sp)
   16224:	df000b17 	ldw	fp,44(sp)
   16228:	ddc00a17 	ldw	r23,40(sp)
   1622c:	dd800917 	ldw	r22,36(sp)
   16230:	dd400817 	ldw	r21,32(sp)
   16234:	dd000717 	ldw	r20,28(sp)
   16238:	dcc00617 	ldw	r19,24(sp)
   1623c:	dc800517 	ldw	r18,20(sp)
   16240:	dc400417 	ldw	r17,16(sp)
   16244:	dc000317 	ldw	r16,12(sp)
   16248:	dec00d04 	addi	sp,sp,52
   1624c:	f800283a 	ret
   16250:	2404b03a 	or	r2,r4,r16
   16254:	2027883a 	mov	r19,r4
   16258:	10004226 	beq	r2,zero,16364 <__muldf3+0x2e4>
   1625c:	8000fc26 	beq	r16,zero,16650 <__muldf3+0x5d0>
   16260:	8009883a 	mov	r4,r16
   16264:	d9800215 	stw	r6,8(sp)
   16268:	d9c00015 	stw	r7,0(sp)
   1626c:	da400115 	stw	r9,4(sp)
   16270:	00078380 	call	7838 <__clzsi2>
   16274:	d9800217 	ldw	r6,8(sp)
   16278:	d9c00017 	ldw	r7,0(sp)
   1627c:	da400117 	ldw	r9,4(sp)
   16280:	113ffd44 	addi	r4,r2,-11
   16284:	00c00704 	movi	r3,28
   16288:	1900ed16 	blt	r3,r4,16640 <__muldf3+0x5c0>
   1628c:	00c00744 	movi	r3,29
   16290:	147ffe04 	addi	r17,r2,-8
   16294:	1907c83a 	sub	r3,r3,r4
   16298:	8460983a 	sll	r16,r16,r17
   1629c:	98c6d83a 	srl	r3,r19,r3
   162a0:	9c68983a 	sll	r20,r19,r17
   162a4:	1c20b03a 	or	r16,r3,r16
   162a8:	1080fcc4 	addi	r2,r2,1011
   162ac:	00a5c83a 	sub	r18,zero,r2
   162b0:	0027883a 	mov	r19,zero
   162b4:	0039883a 	mov	fp,zero
   162b8:	003f9006 	br	160fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70160fc>
   162bc:	3446b03a 	or	r3,r6,r17
   162c0:	1800261e 	bne	r3,zero,1635c <__muldf3+0x2dc>
   162c4:	0023883a 	mov	r17,zero
   162c8:	0011883a 	mov	r8,zero
   162cc:	01400084 	movi	r5,2
   162d0:	003f9c06 	br	16144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016144>
   162d4:	3446b03a 	or	r3,r6,r17
   162d8:	18001c26 	beq	r3,zero,1634c <__muldf3+0x2cc>
   162dc:	8800ce26 	beq	r17,zero,16618 <__muldf3+0x598>
   162e0:	8809883a 	mov	r4,r17
   162e4:	d9800215 	stw	r6,8(sp)
   162e8:	da400115 	stw	r9,4(sp)
   162ec:	da800015 	stw	r10,0(sp)
   162f0:	00078380 	call	7838 <__clzsi2>
   162f4:	d9800217 	ldw	r6,8(sp)
   162f8:	da400117 	ldw	r9,4(sp)
   162fc:	da800017 	ldw	r10,0(sp)
   16300:	113ffd44 	addi	r4,r2,-11
   16304:	00c00704 	movi	r3,28
   16308:	1900bf16 	blt	r3,r4,16608 <__muldf3+0x588>
   1630c:	00c00744 	movi	r3,29
   16310:	123ffe04 	addi	r8,r2,-8
   16314:	1907c83a 	sub	r3,r3,r4
   16318:	8a22983a 	sll	r17,r17,r8
   1631c:	30c6d83a 	srl	r3,r6,r3
   16320:	3210983a 	sll	r8,r6,r8
   16324:	1c62b03a 	or	r17,r3,r17
   16328:	1080fcc4 	addi	r2,r2,1011
   1632c:	0085c83a 	sub	r2,zero,r2
   16330:	000b883a 	mov	r5,zero
   16334:	003f8306 	br	16144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016144>
   16338:	b02b883a 	mov	r21,r22
   1633c:	0081ffc4 	movi	r2,2047
   16340:	000b883a 	mov	r5,zero
   16344:	0029883a 	mov	r20,zero
   16348:	003fac06 	br	161fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70161fc>
   1634c:	0023883a 	mov	r17,zero
   16350:	0011883a 	mov	r8,zero
   16354:	01400044 	movi	r5,1
   16358:	003f7a06 	br	16144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016144>
   1635c:	014000c4 	movi	r5,3
   16360:	003f7806 	br	16144 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016144>
   16364:	04c00104 	movi	r19,4
   16368:	0021883a 	mov	r16,zero
   1636c:	0029883a 	mov	r20,zero
   16370:	07000044 	movi	fp,1
   16374:	003f6106 	br	160fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70160fc>
   16378:	04c00304 	movi	r19,12
   1637c:	070000c4 	movi	fp,3
   16380:	003f5e06 	br	160fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70160fc>
   16384:	01400434 	movhi	r5,16
   16388:	002b883a 	mov	r21,zero
   1638c:	297fffc4 	addi	r5,r5,-1
   16390:	053fffc4 	movi	r20,-1
   16394:	0081ffc4 	movi	r2,2047
   16398:	003f9806 	br	161fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70161fc>
   1639c:	8023883a 	mov	r17,r16
   163a0:	a011883a 	mov	r8,r20
   163a4:	e00b883a 	mov	r5,fp
   163a8:	003f8a06 	br	161d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70161d4>
   163ac:	8023883a 	mov	r17,r16
   163b0:	a011883a 	mov	r8,r20
   163b4:	482d883a 	mov	r22,r9
   163b8:	e00b883a 	mov	r5,fp
   163bc:	003f8506 	br	161d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70161d4>
   163c0:	a00ad43a 	srli	r5,r20,16
   163c4:	401ad43a 	srli	r13,r8,16
   163c8:	a53fffcc 	andi	r20,r20,65535
   163cc:	423fffcc 	andi	r8,r8,65535
   163d0:	4519383a 	mul	r12,r8,r20
   163d4:	4147383a 	mul	r3,r8,r5
   163d8:	6d09383a 	mul	r4,r13,r20
   163dc:	600cd43a 	srli	r6,r12,16
   163e0:	2b5d383a 	mul	r14,r5,r13
   163e4:	20c9883a 	add	r4,r4,r3
   163e8:	310d883a 	add	r6,r6,r4
   163ec:	30c0022e 	bgeu	r6,r3,163f8 <__muldf3+0x378>
   163f0:	00c00074 	movhi	r3,1
   163f4:	70dd883a 	add	r14,r14,r3
   163f8:	8826d43a 	srli	r19,r17,16
   163fc:	8bffffcc 	andi	r15,r17,65535
   16400:	7d23383a 	mul	r17,r15,r20
   16404:	7949383a 	mul	r4,r15,r5
   16408:	9d29383a 	mul	r20,r19,r20
   1640c:	8814d43a 	srli	r10,r17,16
   16410:	3012943a 	slli	r9,r6,16
   16414:	a129883a 	add	r20,r20,r4
   16418:	633fffcc 	andi	r12,r12,65535
   1641c:	5515883a 	add	r10,r10,r20
   16420:	3006d43a 	srli	r3,r6,16
   16424:	4b13883a 	add	r9,r9,r12
   16428:	2ccb383a 	mul	r5,r5,r19
   1642c:	5100022e 	bgeu	r10,r4,16438 <__muldf3+0x3b8>
   16430:	01000074 	movhi	r4,1
   16434:	290b883a 	add	r5,r5,r4
   16438:	802ad43a 	srli	r21,r16,16
   1643c:	843fffcc 	andi	r16,r16,65535
   16440:	440d383a 	mul	r6,r8,r16
   16444:	4565383a 	mul	r18,r8,r21
   16448:	8349383a 	mul	r4,r16,r13
   1644c:	500e943a 	slli	r7,r10,16
   16450:	3010d43a 	srli	r8,r6,16
   16454:	5028d43a 	srli	r20,r10,16
   16458:	2489883a 	add	r4,r4,r18
   1645c:	8abfffcc 	andi	r10,r17,65535
   16460:	3a95883a 	add	r10,r7,r10
   16464:	4119883a 	add	r12,r8,r4
   16468:	a169883a 	add	r20,r20,r5
   1646c:	1a87883a 	add	r3,r3,r10
   16470:	6d5b383a 	mul	r13,r13,r21
   16474:	6480022e 	bgeu	r12,r18,16480 <__muldf3+0x400>
   16478:	01000074 	movhi	r4,1
   1647c:	691b883a 	add	r13,r13,r4
   16480:	7c25383a 	mul	r18,r15,r16
   16484:	7d4b383a 	mul	r5,r15,r21
   16488:	84cf383a 	mul	r7,r16,r19
   1648c:	901ed43a 	srli	r15,r18,16
   16490:	6008d43a 	srli	r4,r12,16
   16494:	6010943a 	slli	r8,r12,16
   16498:	394f883a 	add	r7,r7,r5
   1649c:	333fffcc 	andi	r12,r6,65535
   164a0:	79df883a 	add	r15,r15,r7
   164a4:	235b883a 	add	r13,r4,r13
   164a8:	9d63383a 	mul	r17,r19,r21
   164ac:	4309883a 	add	r4,r8,r12
   164b0:	7940022e 	bgeu	r15,r5,164bc <__muldf3+0x43c>
   164b4:	01400074 	movhi	r5,1
   164b8:	8963883a 	add	r17,r17,r5
   164bc:	780a943a 	slli	r5,r15,16
   164c0:	91bfffcc 	andi	r6,r18,65535
   164c4:	70c7883a 	add	r3,r14,r3
   164c8:	298d883a 	add	r6,r5,r6
   164cc:	1a8f803a 	cmpltu	r7,r3,r10
   164d0:	350b883a 	add	r5,r6,r20
   164d4:	20c7883a 	add	r3,r4,r3
   164d8:	3955883a 	add	r10,r7,r5
   164dc:	1909803a 	cmpltu	r4,r3,r4
   164e0:	6a91883a 	add	r8,r13,r10
   164e4:	780cd43a 	srli	r6,r15,16
   164e8:	2219883a 	add	r12,r4,r8
   164ec:	2d0b803a 	cmpltu	r5,r5,r20
   164f0:	51cf803a 	cmpltu	r7,r10,r7
   164f4:	29ceb03a 	or	r7,r5,r7
   164f8:	4351803a 	cmpltu	r8,r8,r13
   164fc:	610b803a 	cmpltu	r5,r12,r4
   16500:	4148b03a 	or	r4,r8,r5
   16504:	398f883a 	add	r7,r7,r6
   16508:	3909883a 	add	r4,r7,r4
   1650c:	1810927a 	slli	r8,r3,9
   16510:	2449883a 	add	r4,r4,r17
   16514:	2008927a 	slli	r4,r4,9
   16518:	6022d5fa 	srli	r17,r12,23
   1651c:	1806d5fa 	srli	r3,r3,23
   16520:	4252b03a 	or	r9,r8,r9
   16524:	600a927a 	slli	r5,r12,9
   16528:	4810c03a 	cmpne	r8,r9,zero
   1652c:	2462b03a 	or	r17,r4,r17
   16530:	40c6b03a 	or	r3,r8,r3
   16534:	8900402c 	andhi	r4,r17,256
   16538:	1950b03a 	or	r8,r3,r5
   1653c:	20000726 	beq	r4,zero,1655c <__muldf3+0x4dc>
   16540:	4006d07a 	srli	r3,r8,1
   16544:	880497fa 	slli	r2,r17,31
   16548:	4200004c 	andi	r8,r8,1
   1654c:	8822d07a 	srli	r17,r17,1
   16550:	1a10b03a 	or	r8,r3,r8
   16554:	1210b03a 	or	r8,r2,r8
   16558:	5805883a 	mov	r2,r11
   1655c:	1140ffc4 	addi	r5,r2,1023
   16560:	0140440e 	bge	zero,r5,16674 <__muldf3+0x5f4>
   16564:	40c001cc 	andi	r3,r8,7
   16568:	18000726 	beq	r3,zero,16588 <__muldf3+0x508>
   1656c:	40c003cc 	andi	r3,r8,15
   16570:	01000104 	movi	r4,4
   16574:	19000426 	beq	r3,r4,16588 <__muldf3+0x508>
   16578:	4107883a 	add	r3,r8,r4
   1657c:	1a11803a 	cmpltu	r8,r3,r8
   16580:	8a23883a 	add	r17,r17,r8
   16584:	1811883a 	mov	r8,r3
   16588:	88c0402c 	andhi	r3,r17,256
   1658c:	18000426 	beq	r3,zero,165a0 <__muldf3+0x520>
   16590:	11410004 	addi	r5,r2,1024
   16594:	00bfc034 	movhi	r2,65280
   16598:	10bfffc4 	addi	r2,r2,-1
   1659c:	88a2703a 	and	r17,r17,r2
   165a0:	0081ff84 	movi	r2,2046
   165a4:	117f6416 	blt	r2,r5,16338 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016338>
   165a8:	8828977a 	slli	r20,r17,29
   165ac:	4010d0fa 	srli	r8,r8,3
   165b0:	8822927a 	slli	r17,r17,9
   165b4:	2881ffcc 	andi	r2,r5,2047
   165b8:	a228b03a 	or	r20,r20,r8
   165bc:	880ad33a 	srli	r5,r17,12
   165c0:	b02b883a 	mov	r21,r22
   165c4:	003f0d06 	br	161fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70161fc>
   165c8:	8080022c 	andhi	r2,r16,8
   165cc:	10000926 	beq	r2,zero,165f4 <__muldf3+0x574>
   165d0:	8880022c 	andhi	r2,r17,8
   165d4:	1000071e 	bne	r2,zero,165f4 <__muldf3+0x574>
   165d8:	00800434 	movhi	r2,16
   165dc:	89400234 	orhi	r5,r17,8
   165e0:	10bfffc4 	addi	r2,r2,-1
   165e4:	b82b883a 	mov	r21,r23
   165e8:	288a703a 	and	r5,r5,r2
   165ec:	4029883a 	mov	r20,r8
   165f0:	003f6806 	br	16394 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016394>
   165f4:	00800434 	movhi	r2,16
   165f8:	81400234 	orhi	r5,r16,8
   165fc:	10bfffc4 	addi	r2,r2,-1
   16600:	288a703a 	and	r5,r5,r2
   16604:	003f6306 	br	16394 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016394>
   16608:	147ff604 	addi	r17,r2,-40
   1660c:	3462983a 	sll	r17,r6,r17
   16610:	0011883a 	mov	r8,zero
   16614:	003f4406 	br	16328 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016328>
   16618:	3009883a 	mov	r4,r6
   1661c:	d9800215 	stw	r6,8(sp)
   16620:	da400115 	stw	r9,4(sp)
   16624:	da800015 	stw	r10,0(sp)
   16628:	00078380 	call	7838 <__clzsi2>
   1662c:	10800804 	addi	r2,r2,32
   16630:	da800017 	ldw	r10,0(sp)
   16634:	da400117 	ldw	r9,4(sp)
   16638:	d9800217 	ldw	r6,8(sp)
   1663c:	003f3006 	br	16300 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016300>
   16640:	143ff604 	addi	r16,r2,-40
   16644:	9c20983a 	sll	r16,r19,r16
   16648:	0029883a 	mov	r20,zero
   1664c:	003f1606 	br	162a8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70162a8>
   16650:	d9800215 	stw	r6,8(sp)
   16654:	d9c00015 	stw	r7,0(sp)
   16658:	da400115 	stw	r9,4(sp)
   1665c:	00078380 	call	7838 <__clzsi2>
   16660:	10800804 	addi	r2,r2,32
   16664:	da400117 	ldw	r9,4(sp)
   16668:	d9c00017 	ldw	r7,0(sp)
   1666c:	d9800217 	ldw	r6,8(sp)
   16670:	003f0306 	br	16280 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016280>
   16674:	00c00044 	movi	r3,1
   16678:	1947c83a 	sub	r3,r3,r5
   1667c:	00800e04 	movi	r2,56
   16680:	10feda16 	blt	r2,r3,161ec <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70161ec>
   16684:	008007c4 	movi	r2,31
   16688:	10c01b16 	blt	r2,r3,166f8 <__muldf3+0x678>
   1668c:	00800804 	movi	r2,32
   16690:	10c5c83a 	sub	r2,r2,r3
   16694:	888a983a 	sll	r5,r17,r2
   16698:	40c8d83a 	srl	r4,r8,r3
   1669c:	4084983a 	sll	r2,r8,r2
   166a0:	88e2d83a 	srl	r17,r17,r3
   166a4:	2906b03a 	or	r3,r5,r4
   166a8:	1004c03a 	cmpne	r2,r2,zero
   166ac:	1886b03a 	or	r3,r3,r2
   166b0:	188001cc 	andi	r2,r3,7
   166b4:	10000726 	beq	r2,zero,166d4 <__muldf3+0x654>
   166b8:	188003cc 	andi	r2,r3,15
   166bc:	01000104 	movi	r4,4
   166c0:	11000426 	beq	r2,r4,166d4 <__muldf3+0x654>
   166c4:	1805883a 	mov	r2,r3
   166c8:	10c00104 	addi	r3,r2,4
   166cc:	1885803a 	cmpltu	r2,r3,r2
   166d0:	88a3883a 	add	r17,r17,r2
   166d4:	8880202c 	andhi	r2,r17,128
   166d8:	10001c26 	beq	r2,zero,1674c <__muldf3+0x6cc>
   166dc:	b02b883a 	mov	r21,r22
   166e0:	00800044 	movi	r2,1
   166e4:	000b883a 	mov	r5,zero
   166e8:	0029883a 	mov	r20,zero
   166ec:	003ec306 	br	161fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70161fc>
   166f0:	5805883a 	mov	r2,r11
   166f4:	003f9906 	br	1655c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701655c>
   166f8:	00bff844 	movi	r2,-31
   166fc:	1145c83a 	sub	r2,r2,r5
   16700:	8888d83a 	srl	r4,r17,r2
   16704:	00800804 	movi	r2,32
   16708:	18801a26 	beq	r3,r2,16774 <__muldf3+0x6f4>
   1670c:	00801004 	movi	r2,64
   16710:	10c5c83a 	sub	r2,r2,r3
   16714:	8884983a 	sll	r2,r17,r2
   16718:	1204b03a 	or	r2,r2,r8
   1671c:	1004c03a 	cmpne	r2,r2,zero
   16720:	2084b03a 	or	r2,r4,r2
   16724:	144001cc 	andi	r17,r2,7
   16728:	88000d1e 	bne	r17,zero,16760 <__muldf3+0x6e0>
   1672c:	000b883a 	mov	r5,zero
   16730:	1028d0fa 	srli	r20,r2,3
   16734:	b02b883a 	mov	r21,r22
   16738:	0005883a 	mov	r2,zero
   1673c:	a468b03a 	or	r20,r20,r17
   16740:	003eae06 	br	161fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70161fc>
   16744:	1007883a 	mov	r3,r2
   16748:	0023883a 	mov	r17,zero
   1674c:	880a927a 	slli	r5,r17,9
   16750:	1805883a 	mov	r2,r3
   16754:	8822977a 	slli	r17,r17,29
   16758:	280ad33a 	srli	r5,r5,12
   1675c:	003ff406 	br	16730 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016730>
   16760:	10c003cc 	andi	r3,r2,15
   16764:	01000104 	movi	r4,4
   16768:	193ff626 	beq	r3,r4,16744 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016744>
   1676c:	0023883a 	mov	r17,zero
   16770:	003fd506 	br	166c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70166c8>
   16774:	0005883a 	mov	r2,zero
   16778:	003fe706 	br	16718 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016718>
   1677c:	00800434 	movhi	r2,16
   16780:	89400234 	orhi	r5,r17,8
   16784:	10bfffc4 	addi	r2,r2,-1
   16788:	b02b883a 	mov	r21,r22
   1678c:	288a703a 	and	r5,r5,r2
   16790:	4029883a 	mov	r20,r8
   16794:	003eff06 	br	16394 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016394>

00016798 <__subdf3>:
   16798:	02000434 	movhi	r8,16
   1679c:	423fffc4 	addi	r8,r8,-1
   167a0:	defffb04 	addi	sp,sp,-20
   167a4:	2a14703a 	and	r10,r5,r8
   167a8:	3812d53a 	srli	r9,r7,20
   167ac:	3a10703a 	and	r8,r7,r8
   167b0:	2006d77a 	srli	r3,r4,29
   167b4:	3004d77a 	srli	r2,r6,29
   167b8:	dc000015 	stw	r16,0(sp)
   167bc:	501490fa 	slli	r10,r10,3
   167c0:	2820d53a 	srli	r16,r5,20
   167c4:	401090fa 	slli	r8,r8,3
   167c8:	dc800215 	stw	r18,8(sp)
   167cc:	dc400115 	stw	r17,4(sp)
   167d0:	dfc00415 	stw	ra,16(sp)
   167d4:	202290fa 	slli	r17,r4,3
   167d8:	dcc00315 	stw	r19,12(sp)
   167dc:	4a41ffcc 	andi	r9,r9,2047
   167e0:	0101ffc4 	movi	r4,2047
   167e4:	2824d7fa 	srli	r18,r5,31
   167e8:	8401ffcc 	andi	r16,r16,2047
   167ec:	50c6b03a 	or	r3,r10,r3
   167f0:	380ed7fa 	srli	r7,r7,31
   167f4:	408ab03a 	or	r5,r8,r2
   167f8:	300c90fa 	slli	r6,r6,3
   167fc:	49009626 	beq	r9,r4,16a58 <__subdf3+0x2c0>
   16800:	39c0005c 	xori	r7,r7,1
   16804:	8245c83a 	sub	r2,r16,r9
   16808:	3c807426 	beq	r7,r18,169dc <__subdf3+0x244>
   1680c:	0080af0e 	bge	zero,r2,16acc <__subdf3+0x334>
   16810:	48002a1e 	bne	r9,zero,168bc <__subdf3+0x124>
   16814:	2988b03a 	or	r4,r5,r6
   16818:	20009a1e 	bne	r4,zero,16a84 <__subdf3+0x2ec>
   1681c:	888001cc 	andi	r2,r17,7
   16820:	10000726 	beq	r2,zero,16840 <__subdf3+0xa8>
   16824:	888003cc 	andi	r2,r17,15
   16828:	01000104 	movi	r4,4
   1682c:	11000426 	beq	r2,r4,16840 <__subdf3+0xa8>
   16830:	890b883a 	add	r5,r17,r4
   16834:	2c63803a 	cmpltu	r17,r5,r17
   16838:	1c47883a 	add	r3,r3,r17
   1683c:	2823883a 	mov	r17,r5
   16840:	1880202c 	andhi	r2,r3,128
   16844:	10005926 	beq	r2,zero,169ac <__subdf3+0x214>
   16848:	84000044 	addi	r16,r16,1
   1684c:	0081ffc4 	movi	r2,2047
   16850:	8080be26 	beq	r16,r2,16b4c <__subdf3+0x3b4>
   16854:	017fe034 	movhi	r5,65408
   16858:	297fffc4 	addi	r5,r5,-1
   1685c:	1946703a 	and	r3,r3,r5
   16860:	1804977a 	slli	r2,r3,29
   16864:	1806927a 	slli	r3,r3,9
   16868:	8822d0fa 	srli	r17,r17,3
   1686c:	8401ffcc 	andi	r16,r16,2047
   16870:	180ad33a 	srli	r5,r3,12
   16874:	9100004c 	andi	r4,r18,1
   16878:	1444b03a 	or	r2,r2,r17
   1687c:	80c1ffcc 	andi	r3,r16,2047
   16880:	1820953a 	slli	r16,r3,20
   16884:	20c03fcc 	andi	r3,r4,255
   16888:	180897fa 	slli	r4,r3,31
   1688c:	00c00434 	movhi	r3,16
   16890:	18ffffc4 	addi	r3,r3,-1
   16894:	28c6703a 	and	r3,r5,r3
   16898:	1c06b03a 	or	r3,r3,r16
   1689c:	1906b03a 	or	r3,r3,r4
   168a0:	dfc00417 	ldw	ra,16(sp)
   168a4:	dcc00317 	ldw	r19,12(sp)
   168a8:	dc800217 	ldw	r18,8(sp)
   168ac:	dc400117 	ldw	r17,4(sp)
   168b0:	dc000017 	ldw	r16,0(sp)
   168b4:	dec00504 	addi	sp,sp,20
   168b8:	f800283a 	ret
   168bc:	0101ffc4 	movi	r4,2047
   168c0:	813fd626 	beq	r16,r4,1681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701681c>
   168c4:	29402034 	orhi	r5,r5,128
   168c8:	01000e04 	movi	r4,56
   168cc:	2080a316 	blt	r4,r2,16b5c <__subdf3+0x3c4>
   168d0:	010007c4 	movi	r4,31
   168d4:	2080c616 	blt	r4,r2,16bf0 <__subdf3+0x458>
   168d8:	01000804 	movi	r4,32
   168dc:	2089c83a 	sub	r4,r4,r2
   168e0:	2910983a 	sll	r8,r5,r4
   168e4:	308ed83a 	srl	r7,r6,r2
   168e8:	3108983a 	sll	r4,r6,r4
   168ec:	2884d83a 	srl	r2,r5,r2
   168f0:	41ccb03a 	or	r6,r8,r7
   168f4:	2008c03a 	cmpne	r4,r4,zero
   168f8:	310cb03a 	or	r6,r6,r4
   168fc:	898dc83a 	sub	r6,r17,r6
   16900:	89a3803a 	cmpltu	r17,r17,r6
   16904:	1887c83a 	sub	r3,r3,r2
   16908:	1c47c83a 	sub	r3,r3,r17
   1690c:	3023883a 	mov	r17,r6
   16910:	1880202c 	andhi	r2,r3,128
   16914:	10002326 	beq	r2,zero,169a4 <__subdf3+0x20c>
   16918:	04c02034 	movhi	r19,128
   1691c:	9cffffc4 	addi	r19,r19,-1
   16920:	1ce6703a 	and	r19,r3,r19
   16924:	98007a26 	beq	r19,zero,16b10 <__subdf3+0x378>
   16928:	9809883a 	mov	r4,r19
   1692c:	00078380 	call	7838 <__clzsi2>
   16930:	113ffe04 	addi	r4,r2,-8
   16934:	00c007c4 	movi	r3,31
   16938:	19007b16 	blt	r3,r4,16b28 <__subdf3+0x390>
   1693c:	00800804 	movi	r2,32
   16940:	1105c83a 	sub	r2,r2,r4
   16944:	8884d83a 	srl	r2,r17,r2
   16948:	9906983a 	sll	r3,r19,r4
   1694c:	8922983a 	sll	r17,r17,r4
   16950:	10c4b03a 	or	r2,r2,r3
   16954:	24007816 	blt	r4,r16,16b38 <__subdf3+0x3a0>
   16958:	2421c83a 	sub	r16,r4,r16
   1695c:	80c00044 	addi	r3,r16,1
   16960:	010007c4 	movi	r4,31
   16964:	20c09516 	blt	r4,r3,16bbc <__subdf3+0x424>
   16968:	01400804 	movi	r5,32
   1696c:	28cbc83a 	sub	r5,r5,r3
   16970:	88c8d83a 	srl	r4,r17,r3
   16974:	8962983a 	sll	r17,r17,r5
   16978:	114a983a 	sll	r5,r2,r5
   1697c:	10c6d83a 	srl	r3,r2,r3
   16980:	8804c03a 	cmpne	r2,r17,zero
   16984:	290ab03a 	or	r5,r5,r4
   16988:	28a2b03a 	or	r17,r5,r2
   1698c:	0021883a 	mov	r16,zero
   16990:	003fa206 	br	1681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701681c>
   16994:	2090b03a 	or	r8,r4,r2
   16998:	40018e26 	beq	r8,zero,16fd4 <__subdf3+0x83c>
   1699c:	1007883a 	mov	r3,r2
   169a0:	2023883a 	mov	r17,r4
   169a4:	888001cc 	andi	r2,r17,7
   169a8:	103f9e1e 	bne	r2,zero,16824 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016824>
   169ac:	1804977a 	slli	r2,r3,29
   169b0:	8822d0fa 	srli	r17,r17,3
   169b4:	1810d0fa 	srli	r8,r3,3
   169b8:	9100004c 	andi	r4,r18,1
   169bc:	1444b03a 	or	r2,r2,r17
   169c0:	00c1ffc4 	movi	r3,2047
   169c4:	80c02826 	beq	r16,r3,16a68 <__subdf3+0x2d0>
   169c8:	01400434 	movhi	r5,16
   169cc:	297fffc4 	addi	r5,r5,-1
   169d0:	80e0703a 	and	r16,r16,r3
   169d4:	414a703a 	and	r5,r8,r5
   169d8:	003fa806 	br	1687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701687c>
   169dc:	0080630e 	bge	zero,r2,16b6c <__subdf3+0x3d4>
   169e0:	48003026 	beq	r9,zero,16aa4 <__subdf3+0x30c>
   169e4:	0101ffc4 	movi	r4,2047
   169e8:	813f8c26 	beq	r16,r4,1681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701681c>
   169ec:	29402034 	orhi	r5,r5,128
   169f0:	01000e04 	movi	r4,56
   169f4:	2080a90e 	bge	r4,r2,16c9c <__subdf3+0x504>
   169f8:	298cb03a 	or	r6,r5,r6
   169fc:	3012c03a 	cmpne	r9,r6,zero
   16a00:	0005883a 	mov	r2,zero
   16a04:	4c53883a 	add	r9,r9,r17
   16a08:	4c63803a 	cmpltu	r17,r9,r17
   16a0c:	10c7883a 	add	r3,r2,r3
   16a10:	88c7883a 	add	r3,r17,r3
   16a14:	4823883a 	mov	r17,r9
   16a18:	1880202c 	andhi	r2,r3,128
   16a1c:	1000d026 	beq	r2,zero,16d60 <__subdf3+0x5c8>
   16a20:	84000044 	addi	r16,r16,1
   16a24:	0081ffc4 	movi	r2,2047
   16a28:	8080fe26 	beq	r16,r2,16e24 <__subdf3+0x68c>
   16a2c:	00bfe034 	movhi	r2,65408
   16a30:	10bfffc4 	addi	r2,r2,-1
   16a34:	1886703a 	and	r3,r3,r2
   16a38:	880ad07a 	srli	r5,r17,1
   16a3c:	180497fa 	slli	r2,r3,31
   16a40:	8900004c 	andi	r4,r17,1
   16a44:	2922b03a 	or	r17,r5,r4
   16a48:	1806d07a 	srli	r3,r3,1
   16a4c:	1462b03a 	or	r17,r2,r17
   16a50:	3825883a 	mov	r18,r7
   16a54:	003f7106 	br	1681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701681c>
   16a58:	2984b03a 	or	r2,r5,r6
   16a5c:	103f6826 	beq	r2,zero,16800 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016800>
   16a60:	39c03fcc 	andi	r7,r7,255
   16a64:	003f6706 	br	16804 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016804>
   16a68:	4086b03a 	or	r3,r8,r2
   16a6c:	18015226 	beq	r3,zero,16fb8 <__subdf3+0x820>
   16a70:	00c00434 	movhi	r3,16
   16a74:	41400234 	orhi	r5,r8,8
   16a78:	18ffffc4 	addi	r3,r3,-1
   16a7c:	28ca703a 	and	r5,r5,r3
   16a80:	003f7e06 	br	1687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701687c>
   16a84:	10bfffc4 	addi	r2,r2,-1
   16a88:	1000491e 	bne	r2,zero,16bb0 <__subdf3+0x418>
   16a8c:	898fc83a 	sub	r7,r17,r6
   16a90:	89e3803a 	cmpltu	r17,r17,r7
   16a94:	1947c83a 	sub	r3,r3,r5
   16a98:	1c47c83a 	sub	r3,r3,r17
   16a9c:	3823883a 	mov	r17,r7
   16aa0:	003f9b06 	br	16910 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016910>
   16aa4:	2988b03a 	or	r4,r5,r6
   16aa8:	203f5c26 	beq	r4,zero,1681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701681c>
   16aac:	10bfffc4 	addi	r2,r2,-1
   16ab0:	1000931e 	bne	r2,zero,16d00 <__subdf3+0x568>
   16ab4:	898d883a 	add	r6,r17,r6
   16ab8:	3463803a 	cmpltu	r17,r6,r17
   16abc:	1947883a 	add	r3,r3,r5
   16ac0:	88c7883a 	add	r3,r17,r3
   16ac4:	3023883a 	mov	r17,r6
   16ac8:	003fd306 	br	16a18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016a18>
   16acc:	1000541e 	bne	r2,zero,16c20 <__subdf3+0x488>
   16ad0:	80800044 	addi	r2,r16,1
   16ad4:	1081ffcc 	andi	r2,r2,2047
   16ad8:	01000044 	movi	r4,1
   16adc:	2080a20e 	bge	r4,r2,16d68 <__subdf3+0x5d0>
   16ae0:	8989c83a 	sub	r4,r17,r6
   16ae4:	8905803a 	cmpltu	r2,r17,r4
   16ae8:	1967c83a 	sub	r19,r3,r5
   16aec:	98a7c83a 	sub	r19,r19,r2
   16af0:	9880202c 	andhi	r2,r19,128
   16af4:	10006326 	beq	r2,zero,16c84 <__subdf3+0x4ec>
   16af8:	3463c83a 	sub	r17,r6,r17
   16afc:	28c7c83a 	sub	r3,r5,r3
   16b00:	344d803a 	cmpltu	r6,r6,r17
   16b04:	19a7c83a 	sub	r19,r3,r6
   16b08:	3825883a 	mov	r18,r7
   16b0c:	983f861e 	bne	r19,zero,16928 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016928>
   16b10:	8809883a 	mov	r4,r17
   16b14:	00078380 	call	7838 <__clzsi2>
   16b18:	10800804 	addi	r2,r2,32
   16b1c:	113ffe04 	addi	r4,r2,-8
   16b20:	00c007c4 	movi	r3,31
   16b24:	193f850e 	bge	r3,r4,1693c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701693c>
   16b28:	10bff604 	addi	r2,r2,-40
   16b2c:	8884983a 	sll	r2,r17,r2
   16b30:	0023883a 	mov	r17,zero
   16b34:	243f880e 	bge	r4,r16,16958 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016958>
   16b38:	00ffe034 	movhi	r3,65408
   16b3c:	18ffffc4 	addi	r3,r3,-1
   16b40:	8121c83a 	sub	r16,r16,r4
   16b44:	10c6703a 	and	r3,r2,r3
   16b48:	003f3406 	br	1681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701681c>
   16b4c:	9100004c 	andi	r4,r18,1
   16b50:	000b883a 	mov	r5,zero
   16b54:	0005883a 	mov	r2,zero
   16b58:	003f4806 	br	1687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701687c>
   16b5c:	298cb03a 	or	r6,r5,r6
   16b60:	300cc03a 	cmpne	r6,r6,zero
   16b64:	0005883a 	mov	r2,zero
   16b68:	003f6406 	br	168fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70168fc>
   16b6c:	10009a1e 	bne	r2,zero,16dd8 <__subdf3+0x640>
   16b70:	82400044 	addi	r9,r16,1
   16b74:	4881ffcc 	andi	r2,r9,2047
   16b78:	02800044 	movi	r10,1
   16b7c:	5080670e 	bge	r10,r2,16d1c <__subdf3+0x584>
   16b80:	0081ffc4 	movi	r2,2047
   16b84:	4880af26 	beq	r9,r2,16e44 <__subdf3+0x6ac>
   16b88:	898d883a 	add	r6,r17,r6
   16b8c:	1945883a 	add	r2,r3,r5
   16b90:	3447803a 	cmpltu	r3,r6,r17
   16b94:	1887883a 	add	r3,r3,r2
   16b98:	182297fa 	slli	r17,r3,31
   16b9c:	300cd07a 	srli	r6,r6,1
   16ba0:	1806d07a 	srli	r3,r3,1
   16ba4:	4821883a 	mov	r16,r9
   16ba8:	89a2b03a 	or	r17,r17,r6
   16bac:	003f1b06 	br	1681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701681c>
   16bb0:	0101ffc4 	movi	r4,2047
   16bb4:	813f441e 	bne	r16,r4,168c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70168c8>
   16bb8:	003f1806 	br	1681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701681c>
   16bbc:	843ff844 	addi	r16,r16,-31
   16bc0:	01400804 	movi	r5,32
   16bc4:	1408d83a 	srl	r4,r2,r16
   16bc8:	19405026 	beq	r3,r5,16d0c <__subdf3+0x574>
   16bcc:	01401004 	movi	r5,64
   16bd0:	28c7c83a 	sub	r3,r5,r3
   16bd4:	10c4983a 	sll	r2,r2,r3
   16bd8:	88a2b03a 	or	r17,r17,r2
   16bdc:	8822c03a 	cmpne	r17,r17,zero
   16be0:	2462b03a 	or	r17,r4,r17
   16be4:	0007883a 	mov	r3,zero
   16be8:	0021883a 	mov	r16,zero
   16bec:	003f6d06 	br	169a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70169a4>
   16bf0:	11fff804 	addi	r7,r2,-32
   16bf4:	01000804 	movi	r4,32
   16bf8:	29ced83a 	srl	r7,r5,r7
   16bfc:	11004526 	beq	r2,r4,16d14 <__subdf3+0x57c>
   16c00:	01001004 	movi	r4,64
   16c04:	2089c83a 	sub	r4,r4,r2
   16c08:	2904983a 	sll	r2,r5,r4
   16c0c:	118cb03a 	or	r6,r2,r6
   16c10:	300cc03a 	cmpne	r6,r6,zero
   16c14:	398cb03a 	or	r6,r7,r6
   16c18:	0005883a 	mov	r2,zero
   16c1c:	003f3706 	br	168fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70168fc>
   16c20:	80002a26 	beq	r16,zero,16ccc <__subdf3+0x534>
   16c24:	0101ffc4 	movi	r4,2047
   16c28:	49006626 	beq	r9,r4,16dc4 <__subdf3+0x62c>
   16c2c:	0085c83a 	sub	r2,zero,r2
   16c30:	18c02034 	orhi	r3,r3,128
   16c34:	01000e04 	movi	r4,56
   16c38:	20807e16 	blt	r4,r2,16e34 <__subdf3+0x69c>
   16c3c:	010007c4 	movi	r4,31
   16c40:	2080e716 	blt	r4,r2,16fe0 <__subdf3+0x848>
   16c44:	01000804 	movi	r4,32
   16c48:	2089c83a 	sub	r4,r4,r2
   16c4c:	1914983a 	sll	r10,r3,r4
   16c50:	8890d83a 	srl	r8,r17,r2
   16c54:	8908983a 	sll	r4,r17,r4
   16c58:	1884d83a 	srl	r2,r3,r2
   16c5c:	5222b03a 	or	r17,r10,r8
   16c60:	2006c03a 	cmpne	r3,r4,zero
   16c64:	88e2b03a 	or	r17,r17,r3
   16c68:	3463c83a 	sub	r17,r6,r17
   16c6c:	2885c83a 	sub	r2,r5,r2
   16c70:	344d803a 	cmpltu	r6,r6,r17
   16c74:	1187c83a 	sub	r3,r2,r6
   16c78:	4821883a 	mov	r16,r9
   16c7c:	3825883a 	mov	r18,r7
   16c80:	003f2306 	br	16910 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016910>
   16c84:	24d0b03a 	or	r8,r4,r19
   16c88:	40001b1e 	bne	r8,zero,16cf8 <__subdf3+0x560>
   16c8c:	0005883a 	mov	r2,zero
   16c90:	0009883a 	mov	r4,zero
   16c94:	0021883a 	mov	r16,zero
   16c98:	003f4906 	br	169c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70169c0>
   16c9c:	010007c4 	movi	r4,31
   16ca0:	20803a16 	blt	r4,r2,16d8c <__subdf3+0x5f4>
   16ca4:	01000804 	movi	r4,32
   16ca8:	2089c83a 	sub	r4,r4,r2
   16cac:	2912983a 	sll	r9,r5,r4
   16cb0:	3090d83a 	srl	r8,r6,r2
   16cb4:	3108983a 	sll	r4,r6,r4
   16cb8:	2884d83a 	srl	r2,r5,r2
   16cbc:	4a12b03a 	or	r9,r9,r8
   16cc0:	2008c03a 	cmpne	r4,r4,zero
   16cc4:	4912b03a 	or	r9,r9,r4
   16cc8:	003f4e06 	br	16a04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016a04>
   16ccc:	1c48b03a 	or	r4,r3,r17
   16cd0:	20003c26 	beq	r4,zero,16dc4 <__subdf3+0x62c>
   16cd4:	0084303a 	nor	r2,zero,r2
   16cd8:	1000381e 	bne	r2,zero,16dbc <__subdf3+0x624>
   16cdc:	3463c83a 	sub	r17,r6,r17
   16ce0:	28c5c83a 	sub	r2,r5,r3
   16ce4:	344d803a 	cmpltu	r6,r6,r17
   16ce8:	1187c83a 	sub	r3,r2,r6
   16cec:	4821883a 	mov	r16,r9
   16cf0:	3825883a 	mov	r18,r7
   16cf4:	003f0606 	br	16910 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016910>
   16cf8:	2023883a 	mov	r17,r4
   16cfc:	003f0906 	br	16924 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016924>
   16d00:	0101ffc4 	movi	r4,2047
   16d04:	813f3a1e 	bne	r16,r4,169f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70169f0>
   16d08:	003ec406 	br	1681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701681c>
   16d0c:	0005883a 	mov	r2,zero
   16d10:	003fb106 	br	16bd8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016bd8>
   16d14:	0005883a 	mov	r2,zero
   16d18:	003fbc06 	br	16c0c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016c0c>
   16d1c:	1c44b03a 	or	r2,r3,r17
   16d20:	80008e1e 	bne	r16,zero,16f5c <__subdf3+0x7c4>
   16d24:	1000c826 	beq	r2,zero,17048 <__subdf3+0x8b0>
   16d28:	2984b03a 	or	r2,r5,r6
   16d2c:	103ebb26 	beq	r2,zero,1681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701681c>
   16d30:	8989883a 	add	r4,r17,r6
   16d34:	1945883a 	add	r2,r3,r5
   16d38:	2447803a 	cmpltu	r3,r4,r17
   16d3c:	1887883a 	add	r3,r3,r2
   16d40:	1880202c 	andhi	r2,r3,128
   16d44:	2023883a 	mov	r17,r4
   16d48:	103f1626 	beq	r2,zero,169a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70169a4>
   16d4c:	00bfe034 	movhi	r2,65408
   16d50:	10bfffc4 	addi	r2,r2,-1
   16d54:	5021883a 	mov	r16,r10
   16d58:	1886703a 	and	r3,r3,r2
   16d5c:	003eaf06 	br	1681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701681c>
   16d60:	3825883a 	mov	r18,r7
   16d64:	003f0f06 	br	169a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70169a4>
   16d68:	1c44b03a 	or	r2,r3,r17
   16d6c:	8000251e 	bne	r16,zero,16e04 <__subdf3+0x66c>
   16d70:	1000661e 	bne	r2,zero,16f0c <__subdf3+0x774>
   16d74:	2990b03a 	or	r8,r5,r6
   16d78:	40009626 	beq	r8,zero,16fd4 <__subdf3+0x83c>
   16d7c:	2807883a 	mov	r3,r5
   16d80:	3023883a 	mov	r17,r6
   16d84:	3825883a 	mov	r18,r7
   16d88:	003ea406 	br	1681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701681c>
   16d8c:	127ff804 	addi	r9,r2,-32
   16d90:	01000804 	movi	r4,32
   16d94:	2a52d83a 	srl	r9,r5,r9
   16d98:	11008c26 	beq	r2,r4,16fcc <__subdf3+0x834>
   16d9c:	01001004 	movi	r4,64
   16da0:	2085c83a 	sub	r2,r4,r2
   16da4:	2884983a 	sll	r2,r5,r2
   16da8:	118cb03a 	or	r6,r2,r6
   16dac:	300cc03a 	cmpne	r6,r6,zero
   16db0:	4992b03a 	or	r9,r9,r6
   16db4:	0005883a 	mov	r2,zero
   16db8:	003f1206 	br	16a04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016a04>
   16dbc:	0101ffc4 	movi	r4,2047
   16dc0:	493f9c1e 	bne	r9,r4,16c34 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016c34>
   16dc4:	2807883a 	mov	r3,r5
   16dc8:	3023883a 	mov	r17,r6
   16dcc:	4821883a 	mov	r16,r9
   16dd0:	3825883a 	mov	r18,r7
   16dd4:	003e9106 	br	1681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701681c>
   16dd8:	80001f1e 	bne	r16,zero,16e58 <__subdf3+0x6c0>
   16ddc:	1c48b03a 	or	r4,r3,r17
   16de0:	20005a26 	beq	r4,zero,16f4c <__subdf3+0x7b4>
   16de4:	0084303a 	nor	r2,zero,r2
   16de8:	1000561e 	bne	r2,zero,16f44 <__subdf3+0x7ac>
   16dec:	89a3883a 	add	r17,r17,r6
   16df0:	1945883a 	add	r2,r3,r5
   16df4:	898d803a 	cmpltu	r6,r17,r6
   16df8:	3087883a 	add	r3,r6,r2
   16dfc:	4821883a 	mov	r16,r9
   16e00:	003f0506 	br	16a18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016a18>
   16e04:	10002b1e 	bne	r2,zero,16eb4 <__subdf3+0x71c>
   16e08:	2984b03a 	or	r2,r5,r6
   16e0c:	10008026 	beq	r2,zero,17010 <__subdf3+0x878>
   16e10:	2807883a 	mov	r3,r5
   16e14:	3023883a 	mov	r17,r6
   16e18:	3825883a 	mov	r18,r7
   16e1c:	0401ffc4 	movi	r16,2047
   16e20:	003e7e06 	br	1681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701681c>
   16e24:	3809883a 	mov	r4,r7
   16e28:	0011883a 	mov	r8,zero
   16e2c:	0005883a 	mov	r2,zero
   16e30:	003ee306 	br	169c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70169c0>
   16e34:	1c62b03a 	or	r17,r3,r17
   16e38:	8822c03a 	cmpne	r17,r17,zero
   16e3c:	0005883a 	mov	r2,zero
   16e40:	003f8906 	br	16c68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016c68>
   16e44:	3809883a 	mov	r4,r7
   16e48:	4821883a 	mov	r16,r9
   16e4c:	0011883a 	mov	r8,zero
   16e50:	0005883a 	mov	r2,zero
   16e54:	003eda06 	br	169c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70169c0>
   16e58:	0101ffc4 	movi	r4,2047
   16e5c:	49003b26 	beq	r9,r4,16f4c <__subdf3+0x7b4>
   16e60:	0085c83a 	sub	r2,zero,r2
   16e64:	18c02034 	orhi	r3,r3,128
   16e68:	01000e04 	movi	r4,56
   16e6c:	20806e16 	blt	r4,r2,17028 <__subdf3+0x890>
   16e70:	010007c4 	movi	r4,31
   16e74:	20807716 	blt	r4,r2,17054 <__subdf3+0x8bc>
   16e78:	01000804 	movi	r4,32
   16e7c:	2089c83a 	sub	r4,r4,r2
   16e80:	1914983a 	sll	r10,r3,r4
   16e84:	8890d83a 	srl	r8,r17,r2
   16e88:	8908983a 	sll	r4,r17,r4
   16e8c:	1884d83a 	srl	r2,r3,r2
   16e90:	5222b03a 	or	r17,r10,r8
   16e94:	2006c03a 	cmpne	r3,r4,zero
   16e98:	88e2b03a 	or	r17,r17,r3
   16e9c:	89a3883a 	add	r17,r17,r6
   16ea0:	1145883a 	add	r2,r2,r5
   16ea4:	898d803a 	cmpltu	r6,r17,r6
   16ea8:	3087883a 	add	r3,r6,r2
   16eac:	4821883a 	mov	r16,r9
   16eb0:	003ed906 	br	16a18 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016a18>
   16eb4:	2984b03a 	or	r2,r5,r6
   16eb8:	10004226 	beq	r2,zero,16fc4 <__subdf3+0x82c>
   16ebc:	1808d0fa 	srli	r4,r3,3
   16ec0:	8822d0fa 	srli	r17,r17,3
   16ec4:	1806977a 	slli	r3,r3,29
   16ec8:	2080022c 	andhi	r2,r4,8
   16ecc:	1c62b03a 	or	r17,r3,r17
   16ed0:	10000826 	beq	r2,zero,16ef4 <__subdf3+0x75c>
   16ed4:	2812d0fa 	srli	r9,r5,3
   16ed8:	4880022c 	andhi	r2,r9,8
   16edc:	1000051e 	bne	r2,zero,16ef4 <__subdf3+0x75c>
   16ee0:	300cd0fa 	srli	r6,r6,3
   16ee4:	2804977a 	slli	r2,r5,29
   16ee8:	4809883a 	mov	r4,r9
   16eec:	3825883a 	mov	r18,r7
   16ef0:	11a2b03a 	or	r17,r2,r6
   16ef4:	8806d77a 	srli	r3,r17,29
   16ef8:	200890fa 	slli	r4,r4,3
   16efc:	882290fa 	slli	r17,r17,3
   16f00:	0401ffc4 	movi	r16,2047
   16f04:	1906b03a 	or	r3,r3,r4
   16f08:	003e4406 	br	1681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701681c>
   16f0c:	2984b03a 	or	r2,r5,r6
   16f10:	103e4226 	beq	r2,zero,1681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701681c>
   16f14:	8989c83a 	sub	r4,r17,r6
   16f18:	8911803a 	cmpltu	r8,r17,r4
   16f1c:	1945c83a 	sub	r2,r3,r5
   16f20:	1205c83a 	sub	r2,r2,r8
   16f24:	1200202c 	andhi	r8,r2,128
   16f28:	403e9a26 	beq	r8,zero,16994 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016994>
   16f2c:	3463c83a 	sub	r17,r6,r17
   16f30:	28c5c83a 	sub	r2,r5,r3
   16f34:	344d803a 	cmpltu	r6,r6,r17
   16f38:	1187c83a 	sub	r3,r2,r6
   16f3c:	3825883a 	mov	r18,r7
   16f40:	003e3606 	br	1681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701681c>
   16f44:	0101ffc4 	movi	r4,2047
   16f48:	493fc71e 	bne	r9,r4,16e68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016e68>
   16f4c:	2807883a 	mov	r3,r5
   16f50:	3023883a 	mov	r17,r6
   16f54:	4821883a 	mov	r16,r9
   16f58:	003e3006 	br	1681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701681c>
   16f5c:	10003626 	beq	r2,zero,17038 <__subdf3+0x8a0>
   16f60:	2984b03a 	or	r2,r5,r6
   16f64:	10001726 	beq	r2,zero,16fc4 <__subdf3+0x82c>
   16f68:	1808d0fa 	srli	r4,r3,3
   16f6c:	8822d0fa 	srli	r17,r17,3
   16f70:	1806977a 	slli	r3,r3,29
   16f74:	2080022c 	andhi	r2,r4,8
   16f78:	1c62b03a 	or	r17,r3,r17
   16f7c:	10000726 	beq	r2,zero,16f9c <__subdf3+0x804>
   16f80:	2812d0fa 	srli	r9,r5,3
   16f84:	4880022c 	andhi	r2,r9,8
   16f88:	1000041e 	bne	r2,zero,16f9c <__subdf3+0x804>
   16f8c:	300cd0fa 	srli	r6,r6,3
   16f90:	2804977a 	slli	r2,r5,29
   16f94:	4809883a 	mov	r4,r9
   16f98:	11a2b03a 	or	r17,r2,r6
   16f9c:	8806d77a 	srli	r3,r17,29
   16fa0:	200890fa 	slli	r4,r4,3
   16fa4:	882290fa 	slli	r17,r17,3
   16fa8:	3825883a 	mov	r18,r7
   16fac:	1906b03a 	or	r3,r3,r4
   16fb0:	0401ffc4 	movi	r16,2047
   16fb4:	003e1906 	br	1681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701681c>
   16fb8:	000b883a 	mov	r5,zero
   16fbc:	0005883a 	mov	r2,zero
   16fc0:	003e2e06 	br	1687c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701687c>
   16fc4:	0401ffc4 	movi	r16,2047
   16fc8:	003e1406 	br	1681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701681c>
   16fcc:	0005883a 	mov	r2,zero
   16fd0:	003f7506 	br	16da8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016da8>
   16fd4:	0005883a 	mov	r2,zero
   16fd8:	0009883a 	mov	r4,zero
   16fdc:	003e7806 	br	169c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70169c0>
   16fe0:	123ff804 	addi	r8,r2,-32
   16fe4:	01000804 	movi	r4,32
   16fe8:	1a10d83a 	srl	r8,r3,r8
   16fec:	11002526 	beq	r2,r4,17084 <__subdf3+0x8ec>
   16ff0:	01001004 	movi	r4,64
   16ff4:	2085c83a 	sub	r2,r4,r2
   16ff8:	1884983a 	sll	r2,r3,r2
   16ffc:	1444b03a 	or	r2,r2,r17
   17000:	1004c03a 	cmpne	r2,r2,zero
   17004:	40a2b03a 	or	r17,r8,r2
   17008:	0005883a 	mov	r2,zero
   1700c:	003f1606 	br	16c68 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016c68>
   17010:	02000434 	movhi	r8,16
   17014:	0009883a 	mov	r4,zero
   17018:	423fffc4 	addi	r8,r8,-1
   1701c:	00bfffc4 	movi	r2,-1
   17020:	0401ffc4 	movi	r16,2047
   17024:	003e6606 	br	169c0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70169c0>
   17028:	1c62b03a 	or	r17,r3,r17
   1702c:	8822c03a 	cmpne	r17,r17,zero
   17030:	0005883a 	mov	r2,zero
   17034:	003f9906 	br	16e9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016e9c>
   17038:	2807883a 	mov	r3,r5
   1703c:	3023883a 	mov	r17,r6
   17040:	0401ffc4 	movi	r16,2047
   17044:	003df506 	br	1681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701681c>
   17048:	2807883a 	mov	r3,r5
   1704c:	3023883a 	mov	r17,r6
   17050:	003df206 	br	1681c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701681c>
   17054:	123ff804 	addi	r8,r2,-32
   17058:	01000804 	movi	r4,32
   1705c:	1a10d83a 	srl	r8,r3,r8
   17060:	11000a26 	beq	r2,r4,1708c <__subdf3+0x8f4>
   17064:	01001004 	movi	r4,64
   17068:	2085c83a 	sub	r2,r4,r2
   1706c:	1884983a 	sll	r2,r3,r2
   17070:	1444b03a 	or	r2,r2,r17
   17074:	1004c03a 	cmpne	r2,r2,zero
   17078:	40a2b03a 	or	r17,r8,r2
   1707c:	0005883a 	mov	r2,zero
   17080:	003f8606 	br	16e9c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016e9c>
   17084:	0005883a 	mov	r2,zero
   17088:	003fdc06 	br	16ffc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7016ffc>
   1708c:	0005883a 	mov	r2,zero
   17090:	003ff706 	br	17070 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017070>

00017094 <__floatunsidf>:
   17094:	defffe04 	addi	sp,sp,-8
   17098:	dc000015 	stw	r16,0(sp)
   1709c:	dfc00115 	stw	ra,4(sp)
   170a0:	2021883a 	mov	r16,r4
   170a4:	20002226 	beq	r4,zero,17130 <__floatunsidf+0x9c>
   170a8:	00078380 	call	7838 <__clzsi2>
   170ac:	01010784 	movi	r4,1054
   170b0:	2089c83a 	sub	r4,r4,r2
   170b4:	01810cc4 	movi	r6,1075
   170b8:	310dc83a 	sub	r6,r6,r4
   170bc:	00c007c4 	movi	r3,31
   170c0:	1980120e 	bge	r3,r6,1710c <__floatunsidf+0x78>
   170c4:	00c104c4 	movi	r3,1043
   170c8:	1907c83a 	sub	r3,r3,r4
   170cc:	80ca983a 	sll	r5,r16,r3
   170d0:	00800434 	movhi	r2,16
   170d4:	10bfffc4 	addi	r2,r2,-1
   170d8:	2101ffcc 	andi	r4,r4,2047
   170dc:	0021883a 	mov	r16,zero
   170e0:	288a703a 	and	r5,r5,r2
   170e4:	2008953a 	slli	r4,r4,20
   170e8:	00c00434 	movhi	r3,16
   170ec:	18ffffc4 	addi	r3,r3,-1
   170f0:	28c6703a 	and	r3,r5,r3
   170f4:	8005883a 	mov	r2,r16
   170f8:	1906b03a 	or	r3,r3,r4
   170fc:	dfc00117 	ldw	ra,4(sp)
   17100:	dc000017 	ldw	r16,0(sp)
   17104:	dec00204 	addi	sp,sp,8
   17108:	f800283a 	ret
   1710c:	00c002c4 	movi	r3,11
   17110:	188bc83a 	sub	r5,r3,r2
   17114:	814ad83a 	srl	r5,r16,r5
   17118:	00c00434 	movhi	r3,16
   1711c:	18ffffc4 	addi	r3,r3,-1
   17120:	81a0983a 	sll	r16,r16,r6
   17124:	2101ffcc 	andi	r4,r4,2047
   17128:	28ca703a 	and	r5,r5,r3
   1712c:	003fed06 	br	170e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70170e4>
   17130:	0009883a 	mov	r4,zero
   17134:	000b883a 	mov	r5,zero
   17138:	003fea06 	br	170e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70170e4>

0001713c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1713c:	defffe04 	addi	sp,sp,-8
   17140:	dfc00115 	stw	ra,4(sp)
   17144:	df000015 	stw	fp,0(sp)
   17148:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1714c:	d0a02117 	ldw	r2,-32636(gp)
   17150:	10000326 	beq	r2,zero,17160 <alt_get_errno+0x24>
   17154:	d0a02117 	ldw	r2,-32636(gp)
   17158:	103ee83a 	callr	r2
   1715c:	00000106 	br	17164 <alt_get_errno+0x28>
   17160:	d0a83b04 	addi	r2,gp,-24340
}
   17164:	e037883a 	mov	sp,fp
   17168:	dfc00117 	ldw	ra,4(sp)
   1716c:	df000017 	ldw	fp,0(sp)
   17170:	dec00204 	addi	sp,sp,8
   17174:	f800283a 	ret

00017178 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   17178:	defffb04 	addi	sp,sp,-20
   1717c:	dfc00415 	stw	ra,16(sp)
   17180:	df000315 	stw	fp,12(sp)
   17184:	df000304 	addi	fp,sp,12
   17188:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1718c:	e0bfff17 	ldw	r2,-4(fp)
   17190:	10000616 	blt	r2,zero,171ac <close+0x34>
   17194:	e0bfff17 	ldw	r2,-4(fp)
   17198:	10c00324 	muli	r3,r2,12
   1719c:	008000b4 	movhi	r2,2
   171a0:	10963f04 	addi	r2,r2,22780
   171a4:	1885883a 	add	r2,r3,r2
   171a8:	00000106 	br	171b0 <close+0x38>
   171ac:	0005883a 	mov	r2,zero
   171b0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   171b4:	e0bffd17 	ldw	r2,-12(fp)
   171b8:	10001926 	beq	r2,zero,17220 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   171bc:	e0bffd17 	ldw	r2,-12(fp)
   171c0:	10800017 	ldw	r2,0(r2)
   171c4:	10800417 	ldw	r2,16(r2)
   171c8:	10000626 	beq	r2,zero,171e4 <close+0x6c>
   171cc:	e0bffd17 	ldw	r2,-12(fp)
   171d0:	10800017 	ldw	r2,0(r2)
   171d4:	10800417 	ldw	r2,16(r2)
   171d8:	e13ffd17 	ldw	r4,-12(fp)
   171dc:	103ee83a 	callr	r2
   171e0:	00000106 	br	171e8 <close+0x70>
   171e4:	0005883a 	mov	r2,zero
   171e8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   171ec:	e13fff17 	ldw	r4,-4(fp)
   171f0:	00179f00 	call	179f0 <alt_release_fd>
    if (rval < 0)
   171f4:	e0bffe17 	ldw	r2,-8(fp)
   171f8:	1000070e 	bge	r2,zero,17218 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   171fc:	001713c0 	call	1713c <alt_get_errno>
   17200:	1007883a 	mov	r3,r2
   17204:	e0bffe17 	ldw	r2,-8(fp)
   17208:	0085c83a 	sub	r2,zero,r2
   1720c:	18800015 	stw	r2,0(r3)
      return -1;
   17210:	00bfffc4 	movi	r2,-1
   17214:	00000706 	br	17234 <close+0xbc>
    }
    return 0;
   17218:	0005883a 	mov	r2,zero
   1721c:	00000506 	br	17234 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   17220:	001713c0 	call	1713c <alt_get_errno>
   17224:	1007883a 	mov	r3,r2
   17228:	00801444 	movi	r2,81
   1722c:	18800015 	stw	r2,0(r3)
    return -1;
   17230:	00bfffc4 	movi	r2,-1
  }
}
   17234:	e037883a 	mov	sp,fp
   17238:	dfc00117 	ldw	ra,4(sp)
   1723c:	df000017 	ldw	fp,0(sp)
   17240:	dec00204 	addi	sp,sp,8
   17244:	f800283a 	ret

00017248 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   17248:	defffc04 	addi	sp,sp,-16
   1724c:	df000315 	stw	fp,12(sp)
   17250:	df000304 	addi	fp,sp,12
   17254:	e13ffd15 	stw	r4,-12(fp)
   17258:	e17ffe15 	stw	r5,-8(fp)
   1725c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   17260:	e0bfff17 	ldw	r2,-4(fp)
}
   17264:	e037883a 	mov	sp,fp
   17268:	df000017 	ldw	fp,0(sp)
   1726c:	dec00104 	addi	sp,sp,4
   17270:	f800283a 	ret

00017274 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   17274:	defffd04 	addi	sp,sp,-12
   17278:	df000215 	stw	fp,8(sp)
   1727c:	df000204 	addi	fp,sp,8
   17280:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   17284:	d0284745 	stb	zero,-24291(gp)
   17288:	e0bfff17 	ldw	r2,-4(fp)
   1728c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   17290:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   17294:	10000226 	beq	r2,zero,172a0 <_exit+0x2c>
    ALT_SIM_FAIL();
   17298:	002af070 	cmpltui	zero,zero,43969
   1729c:	00000106 	br	172a4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   172a0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   172a4:	003fff06 	br	172a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70172a4>

000172a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   172a8:	defffe04 	addi	sp,sp,-8
   172ac:	dfc00115 	stw	ra,4(sp)
   172b0:	df000015 	stw	fp,0(sp)
   172b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   172b8:	d0a02117 	ldw	r2,-32636(gp)
   172bc:	10000326 	beq	r2,zero,172cc <alt_get_errno+0x24>
   172c0:	d0a02117 	ldw	r2,-32636(gp)
   172c4:	103ee83a 	callr	r2
   172c8:	00000106 	br	172d0 <alt_get_errno+0x28>
   172cc:	d0a83b04 	addi	r2,gp,-24340
}
   172d0:	e037883a 	mov	sp,fp
   172d4:	dfc00117 	ldw	ra,4(sp)
   172d8:	df000017 	ldw	fp,0(sp)
   172dc:	dec00204 	addi	sp,sp,8
   172e0:	f800283a 	ret

000172e4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   172e4:	defffb04 	addi	sp,sp,-20
   172e8:	dfc00415 	stw	ra,16(sp)
   172ec:	df000315 	stw	fp,12(sp)
   172f0:	df000304 	addi	fp,sp,12
   172f4:	e13ffe15 	stw	r4,-8(fp)
   172f8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   172fc:	e0bffe17 	ldw	r2,-8(fp)
   17300:	10000616 	blt	r2,zero,1731c <fstat+0x38>
   17304:	e0bffe17 	ldw	r2,-8(fp)
   17308:	10c00324 	muli	r3,r2,12
   1730c:	008000b4 	movhi	r2,2
   17310:	10963f04 	addi	r2,r2,22780
   17314:	1885883a 	add	r2,r3,r2
   17318:	00000106 	br	17320 <fstat+0x3c>
   1731c:	0005883a 	mov	r2,zero
   17320:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   17324:	e0bffd17 	ldw	r2,-12(fp)
   17328:	10001026 	beq	r2,zero,1736c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1732c:	e0bffd17 	ldw	r2,-12(fp)
   17330:	10800017 	ldw	r2,0(r2)
   17334:	10800817 	ldw	r2,32(r2)
   17338:	10000726 	beq	r2,zero,17358 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   1733c:	e0bffd17 	ldw	r2,-12(fp)
   17340:	10800017 	ldw	r2,0(r2)
   17344:	10800817 	ldw	r2,32(r2)
   17348:	e17fff17 	ldw	r5,-4(fp)
   1734c:	e13ffd17 	ldw	r4,-12(fp)
   17350:	103ee83a 	callr	r2
   17354:	00000a06 	br	17380 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   17358:	e0bfff17 	ldw	r2,-4(fp)
   1735c:	00c80004 	movi	r3,8192
   17360:	10c00115 	stw	r3,4(r2)
      return 0;
   17364:	0005883a 	mov	r2,zero
   17368:	00000506 	br	17380 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1736c:	00172a80 	call	172a8 <alt_get_errno>
   17370:	1007883a 	mov	r3,r2
   17374:	00801444 	movi	r2,81
   17378:	18800015 	stw	r2,0(r3)
    return -1;
   1737c:	00bfffc4 	movi	r2,-1
  }
}
   17380:	e037883a 	mov	sp,fp
   17384:	dfc00117 	ldw	ra,4(sp)
   17388:	df000017 	ldw	fp,0(sp)
   1738c:	dec00204 	addi	sp,sp,8
   17390:	f800283a 	ret

00017394 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
   17394:	deffff04 	addi	sp,sp,-4
   17398:	df000015 	stw	fp,0(sp)
   1739c:	d839883a 	mov	fp,sp
  return 0;
   173a0:	0005883a 	mov	r2,zero
}
   173a4:	e037883a 	mov	sp,fp
   173a8:	df000017 	ldw	fp,0(sp)
   173ac:	dec00104 	addi	sp,sp,4
   173b0:	f800283a 	ret

000173b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   173b4:	defffe04 	addi	sp,sp,-8
   173b8:	dfc00115 	stw	ra,4(sp)
   173bc:	df000015 	stw	fp,0(sp)
   173c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   173c4:	d0a02117 	ldw	r2,-32636(gp)
   173c8:	10000326 	beq	r2,zero,173d8 <alt_get_errno+0x24>
   173cc:	d0a02117 	ldw	r2,-32636(gp)
   173d0:	103ee83a 	callr	r2
   173d4:	00000106 	br	173dc <alt_get_errno+0x28>
   173d8:	d0a83b04 	addi	r2,gp,-24340
}
   173dc:	e037883a 	mov	sp,fp
   173e0:	dfc00117 	ldw	ra,4(sp)
   173e4:	df000017 	ldw	fp,0(sp)
   173e8:	dec00204 	addi	sp,sp,8
   173ec:	f800283a 	ret

000173f0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   173f0:	deffed04 	addi	sp,sp,-76
   173f4:	dfc01215 	stw	ra,72(sp)
   173f8:	df001115 	stw	fp,68(sp)
   173fc:	df001104 	addi	fp,sp,68
   17400:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   17404:	e0bfff17 	ldw	r2,-4(fp)
   17408:	10000616 	blt	r2,zero,17424 <isatty+0x34>
   1740c:	e0bfff17 	ldw	r2,-4(fp)
   17410:	10c00324 	muli	r3,r2,12
   17414:	008000b4 	movhi	r2,2
   17418:	10963f04 	addi	r2,r2,22780
   1741c:	1885883a 	add	r2,r3,r2
   17420:	00000106 	br	17428 <isatty+0x38>
   17424:	0005883a 	mov	r2,zero
   17428:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1742c:	e0bfef17 	ldw	r2,-68(fp)
   17430:	10000e26 	beq	r2,zero,1746c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   17434:	e0bfef17 	ldw	r2,-68(fp)
   17438:	10800017 	ldw	r2,0(r2)
   1743c:	10800817 	ldw	r2,32(r2)
   17440:	1000021e 	bne	r2,zero,1744c <isatty+0x5c>
    {
      return 1;
   17444:	00800044 	movi	r2,1
   17448:	00000d06 	br	17480 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1744c:	e0bff004 	addi	r2,fp,-64
   17450:	100b883a 	mov	r5,r2
   17454:	e13fff17 	ldw	r4,-4(fp)
   17458:	00172e40 	call	172e4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1745c:	e0bff117 	ldw	r2,-60(fp)
   17460:	10880020 	cmpeqi	r2,r2,8192
   17464:	10803fcc 	andi	r2,r2,255
   17468:	00000506 	br	17480 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1746c:	00173b40 	call	173b4 <alt_get_errno>
   17470:	1007883a 	mov	r3,r2
   17474:	00801444 	movi	r2,81
   17478:	18800015 	stw	r2,0(r3)
    return 0;
   1747c:	0005883a 	mov	r2,zero
  }
}
   17480:	e037883a 	mov	sp,fp
   17484:	dfc00117 	ldw	ra,4(sp)
   17488:	df000017 	ldw	fp,0(sp)
   1748c:	dec00204 	addi	sp,sp,8
   17490:	f800283a 	ret

00017494 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17494:	defffe04 	addi	sp,sp,-8
   17498:	dfc00115 	stw	ra,4(sp)
   1749c:	df000015 	stw	fp,0(sp)
   174a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   174a4:	d0a02117 	ldw	r2,-32636(gp)
   174a8:	10000326 	beq	r2,zero,174b8 <alt_get_errno+0x24>
   174ac:	d0a02117 	ldw	r2,-32636(gp)
   174b0:	103ee83a 	callr	r2
   174b4:	00000106 	br	174bc <alt_get_errno+0x28>
   174b8:	d0a83b04 	addi	r2,gp,-24340
}
   174bc:	e037883a 	mov	sp,fp
   174c0:	dfc00117 	ldw	ra,4(sp)
   174c4:	df000017 	ldw	fp,0(sp)
   174c8:	dec00204 	addi	sp,sp,8
   174cc:	f800283a 	ret

000174d0 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
   174d0:	defffb04 	addi	sp,sp,-20
   174d4:	dfc00415 	stw	ra,16(sp)
   174d8:	df000315 	stw	fp,12(sp)
   174dc:	df000304 	addi	fp,sp,12
   174e0:	e13ffe15 	stw	r4,-8(fp)
   174e4:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
   174e8:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
   174ec:	e0bffe17 	ldw	r2,-8(fp)
   174f0:	00802f16 	blt	zero,r2,175b0 <kill+0xe0>
  {
    switch (sig)
   174f4:	e0bfff17 	ldw	r2,-4(fp)
   174f8:	10800828 	cmpgeui	r2,r2,32
   174fc:	1000291e 	bne	r2,zero,175a4 <kill+0xd4>
   17500:	e0bfff17 	ldw	r2,-4(fp)
   17504:	100690ba 	slli	r3,r2,2
   17508:	00800074 	movhi	r2,1
   1750c:	109d4704 	addi	r2,r2,29980
   17510:	1885883a 	add	r2,r3,r2
   17514:	10800017 	ldw	r2,0(r2)
   17518:	1000683a 	jmp	r2
   1751c:	000175c4 	movi	zero,1495
   17520:	000175a4 	muli	zero,zero,1494
   17524:	000175a4 	muli	zero,zero,1494
   17528:	0001759c 	xori	zero,zero,1494
   1752c:	0001759c 	xori	zero,zero,1494
   17530:	0001759c 	xori	zero,zero,1494
   17534:	0001759c 	xori	zero,zero,1494
   17538:	000175a4 	muli	zero,zero,1494
   1753c:	0001759c 	xori	zero,zero,1494
   17540:	0001759c 	xori	zero,zero,1494
   17544:	0001759c 	xori	zero,zero,1494
   17548:	0001759c 	xori	zero,zero,1494
   1754c:	0001759c 	xori	zero,zero,1494
   17550:	0001759c 	xori	zero,zero,1494
   17554:	0001759c 	xori	zero,zero,1494
   17558:	0001759c 	xori	zero,zero,1494
   1755c:	000175c4 	movi	zero,1495
   17560:	000175a4 	muli	zero,zero,1494
   17564:	000175a4 	muli	zero,zero,1494
   17568:	000175a4 	muli	zero,zero,1494
   1756c:	000175c4 	movi	zero,1495
   17570:	000175a4 	muli	zero,zero,1494
   17574:	000175a4 	muli	zero,zero,1494
   17578:	0001759c 	xori	zero,zero,1494
   1757c:	0001759c 	xori	zero,zero,1494
   17580:	0001759c 	xori	zero,zero,1494
   17584:	0001759c 	xori	zero,zero,1494
   17588:	0001759c 	xori	zero,zero,1494
   1758c:	000175a4 	muli	zero,zero,1494
   17590:	000175a4 	muli	zero,zero,1494
   17594:	0001759c 	xori	zero,zero,1494
   17598:	0001759c 	xori	zero,zero,1494
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
   1759c:	0009883a 	mov	r4,zero
   175a0:	00172740 	call	17274 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
   175a4:	00800584 	movi	r2,22
   175a8:	e0bffd15 	stw	r2,-12(fp)
   175ac:	00000606 	br	175c8 <kill+0xf8>
    }
  }

  else if (pid > 0)
   175b0:	e0bffe17 	ldw	r2,-8(fp)
   175b4:	0080040e 	bge	zero,r2,175c8 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
   175b8:	008000c4 	movi	r2,3
   175bc:	e0bffd15 	stw	r2,-12(fp)
   175c0:	00000106 	br	175c8 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
   175c4:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
   175c8:	e0bffd17 	ldw	r2,-12(fp)
   175cc:	10000626 	beq	r2,zero,175e8 <kill+0x118>
  {
    ALT_ERRNO = status;
   175d0:	00174940 	call	17494 <alt_get_errno>
   175d4:	1007883a 	mov	r3,r2
   175d8:	e0bffd17 	ldw	r2,-12(fp)
   175dc:	18800015 	stw	r2,0(r3)
    return -1;
   175e0:	00bfffc4 	movi	r2,-1
   175e4:	00000106 	br	175ec <kill+0x11c>
  }

  return 0;
   175e8:	0005883a 	mov	r2,zero
}
   175ec:	e037883a 	mov	sp,fp
   175f0:	dfc00117 	ldw	ra,4(sp)
   175f4:	df000017 	ldw	fp,0(sp)
   175f8:	dec00204 	addi	sp,sp,8
   175fc:	f800283a 	ret

00017600 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   17600:	defffc04 	addi	sp,sp,-16
   17604:	df000315 	stw	fp,12(sp)
   17608:	df000304 	addi	fp,sp,12
   1760c:	e13ffd15 	stw	r4,-12(fp)
   17610:	e17ffe15 	stw	r5,-8(fp)
   17614:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   17618:	e0fffe17 	ldw	r3,-8(fp)
   1761c:	e0bffd17 	ldw	r2,-12(fp)
   17620:	18800c26 	beq	r3,r2,17654 <alt_load_section+0x54>
  {
    while( to != end )
   17624:	00000806 	br	17648 <alt_load_section+0x48>
    {
      *to++ = *from++;
   17628:	e0bffe17 	ldw	r2,-8(fp)
   1762c:	10c00104 	addi	r3,r2,4
   17630:	e0fffe15 	stw	r3,-8(fp)
   17634:	e0fffd17 	ldw	r3,-12(fp)
   17638:	19000104 	addi	r4,r3,4
   1763c:	e13ffd15 	stw	r4,-12(fp)
   17640:	18c00017 	ldw	r3,0(r3)
   17644:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   17648:	e0fffe17 	ldw	r3,-8(fp)
   1764c:	e0bfff17 	ldw	r2,-4(fp)
   17650:	18bff51e 	bne	r3,r2,17628 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7017628>
    {
      *to++ = *from++;
    }
  }
}
   17654:	0001883a 	nop
   17658:	e037883a 	mov	sp,fp
   1765c:	df000017 	ldw	fp,0(sp)
   17660:	dec00104 	addi	sp,sp,4
   17664:	f800283a 	ret

00017668 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   17668:	defffe04 	addi	sp,sp,-8
   1766c:	dfc00115 	stw	ra,4(sp)
   17670:	df000015 	stw	fp,0(sp)
   17674:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   17678:	018000b4 	movhi	r6,2
   1767c:	319bfc04 	addi	r6,r6,28656
   17680:	014000b4 	movhi	r5,2
   17684:	29540c04 	addi	r5,r5,20528
   17688:	010000b4 	movhi	r4,2
   1768c:	211bfc04 	addi	r4,r4,28656
   17690:	00176000 	call	17600 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   17694:	01800034 	movhi	r6,0
   17698:	31809204 	addi	r6,r6,584
   1769c:	01400034 	movhi	r5,0
   176a0:	29400804 	addi	r5,r5,32
   176a4:	01000034 	movhi	r4,0
   176a8:	21000804 	addi	r4,r4,32
   176ac:	00176000 	call	17600 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   176b0:	018000b4 	movhi	r6,2
   176b4:	31940c04 	addi	r6,r6,20528
   176b8:	014000b4 	movhi	r5,2
   176bc:	294d4304 	addi	r5,r5,13580
   176c0:	010000b4 	movhi	r4,2
   176c4:	210d4304 	addi	r4,r4,13580
   176c8:	00176000 	call	17600 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   176cc:	00221a80 	call	221a8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   176d0:	00223f80 	call	223f8 <alt_icache_flush_all>
}
   176d4:	0001883a 	nop
   176d8:	e037883a 	mov	sp,fp
   176dc:	dfc00117 	ldw	ra,4(sp)
   176e0:	df000017 	ldw	fp,0(sp)
   176e4:	dec00204 	addi	sp,sp,8
   176e8:	f800283a 	ret

000176ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   176ec:	defffe04 	addi	sp,sp,-8
   176f0:	dfc00115 	stw	ra,4(sp)
   176f4:	df000015 	stw	fp,0(sp)
   176f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   176fc:	d0a02117 	ldw	r2,-32636(gp)
   17700:	10000326 	beq	r2,zero,17710 <alt_get_errno+0x24>
   17704:	d0a02117 	ldw	r2,-32636(gp)
   17708:	103ee83a 	callr	r2
   1770c:	00000106 	br	17714 <alt_get_errno+0x28>
   17710:	d0a83b04 	addi	r2,gp,-24340
}
   17714:	e037883a 	mov	sp,fp
   17718:	dfc00117 	ldw	ra,4(sp)
   1771c:	df000017 	ldw	fp,0(sp)
   17720:	dec00204 	addi	sp,sp,8
   17724:	f800283a 	ret

00017728 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   17728:	defff904 	addi	sp,sp,-28
   1772c:	dfc00615 	stw	ra,24(sp)
   17730:	df000515 	stw	fp,20(sp)
   17734:	df000504 	addi	fp,sp,20
   17738:	e13ffd15 	stw	r4,-12(fp)
   1773c:	e17ffe15 	stw	r5,-8(fp)
   17740:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   17744:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   17748:	e0bffd17 	ldw	r2,-12(fp)
   1774c:	10000616 	blt	r2,zero,17768 <lseek+0x40>
   17750:	e0bffd17 	ldw	r2,-12(fp)
   17754:	10c00324 	muli	r3,r2,12
   17758:	008000b4 	movhi	r2,2
   1775c:	10963f04 	addi	r2,r2,22780
   17760:	1885883a 	add	r2,r3,r2
   17764:	00000106 	br	1776c <lseek+0x44>
   17768:	0005883a 	mov	r2,zero
   1776c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   17770:	e0bffc17 	ldw	r2,-16(fp)
   17774:	10001026 	beq	r2,zero,177b8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   17778:	e0bffc17 	ldw	r2,-16(fp)
   1777c:	10800017 	ldw	r2,0(r2)
   17780:	10800717 	ldw	r2,28(r2)
   17784:	10000926 	beq	r2,zero,177ac <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   17788:	e0bffc17 	ldw	r2,-16(fp)
   1778c:	10800017 	ldw	r2,0(r2)
   17790:	10800717 	ldw	r2,28(r2)
   17794:	e1bfff17 	ldw	r6,-4(fp)
   17798:	e17ffe17 	ldw	r5,-8(fp)
   1779c:	e13ffc17 	ldw	r4,-16(fp)
   177a0:	103ee83a 	callr	r2
   177a4:	e0bffb15 	stw	r2,-20(fp)
   177a8:	00000506 	br	177c0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   177ac:	00bfde84 	movi	r2,-134
   177b0:	e0bffb15 	stw	r2,-20(fp)
   177b4:	00000206 	br	177c0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   177b8:	00bfebc4 	movi	r2,-81
   177bc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   177c0:	e0bffb17 	ldw	r2,-20(fp)
   177c4:	1000070e 	bge	r2,zero,177e4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   177c8:	00176ec0 	call	176ec <alt_get_errno>
   177cc:	1007883a 	mov	r3,r2
   177d0:	e0bffb17 	ldw	r2,-20(fp)
   177d4:	0085c83a 	sub	r2,zero,r2
   177d8:	18800015 	stw	r2,0(r3)
    rc = -1;
   177dc:	00bfffc4 	movi	r2,-1
   177e0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   177e4:	e0bffb17 	ldw	r2,-20(fp)
}
   177e8:	e037883a 	mov	sp,fp
   177ec:	dfc00117 	ldw	ra,4(sp)
   177f0:	df000017 	ldw	fp,0(sp)
   177f4:	dec00204 	addi	sp,sp,8
   177f8:	f800283a 	ret

000177fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   177fc:	defff904 	addi	sp,sp,-28
   17800:	dfc00615 	stw	ra,24(sp)
   17804:	df000515 	stw	fp,20(sp)
   17808:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1780c:	0009883a 	mov	r4,zero
   17810:	001f75c0 	call	1f75c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   17814:	00187b80 	call	187b8 <OSInit>
   17818:	01000044 	movi	r4,1
   1781c:	001d1180 	call	1d118 <OSSemCreate>
   17820:	d0a84415 	stw	r2,-24304(gp)
   17824:	01000044 	movi	r4,1
   17828:	001d1180 	call	1d118 <OSSemCreate>
   1782c:	d0a84615 	stw	r2,-24296(gp)
   17830:	d0a83f04 	addi	r2,gp,-24324
   17834:	e0bffc15 	stw	r2,-16(fp)
   17838:	00800044 	movi	r2,1
   1783c:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
   17840:	e0bffd0b 	ldhu	r2,-12(fp)
   17844:	1009883a 	mov	r4,r2
   17848:	001d1180 	call	1d118 <OSSemCreate>
   1784c:	1007883a 	mov	r3,r2
   17850:	e0bffc17 	ldw	r2,-16(fp)
   17854:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   17858:	001f7940 	call	1f794 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1785c:	018000b4 	movhi	r6,2
   17860:	31935304 	addi	r6,r6,19788
   17864:	014000b4 	movhi	r5,2
   17868:	29535304 	addi	r5,r5,19788
   1786c:	010000b4 	movhi	r4,2
   17870:	21135304 	addi	r4,r4,19788
   17874:	00224f00 	call	224f0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   17878:	00222a80 	call	222a8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1787c:	010000b4 	movhi	r4,2
   17880:	2108c204 	addi	r4,r4,8968
   17884:	00231700 	call	23170 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   17888:	d0a84017 	ldw	r2,-24320(gp)
   1788c:	d0e84117 	ldw	r3,-24316(gp)
   17890:	d1284217 	ldw	r4,-24312(gp)
   17894:	200d883a 	mov	r6,r4
   17898:	180b883a 	mov	r5,r3
   1789c:	1009883a 	mov	r4,r2
   178a0:	0003f3c0 	call	3f3c <main>
   178a4:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
   178a8:	01000044 	movi	r4,1
   178ac:	00171780 	call	17178 <close>
  exit (result);
   178b0:	e13ffb17 	ldw	r4,-20(fp)
   178b4:	00231840 	call	23184 <exit>

000178b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   178b8:	defffe04 	addi	sp,sp,-8
   178bc:	dfc00115 	stw	ra,4(sp)
   178c0:	df000015 	stw	fp,0(sp)
   178c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   178c8:	d0a02117 	ldw	r2,-32636(gp)
   178cc:	10000326 	beq	r2,zero,178dc <alt_get_errno+0x24>
   178d0:	d0a02117 	ldw	r2,-32636(gp)
   178d4:	103ee83a 	callr	r2
   178d8:	00000106 	br	178e0 <alt_get_errno+0x28>
   178dc:	d0a83b04 	addi	r2,gp,-24340
}
   178e0:	e037883a 	mov	sp,fp
   178e4:	dfc00117 	ldw	ra,4(sp)
   178e8:	df000017 	ldw	fp,0(sp)
   178ec:	dec00204 	addi	sp,sp,8
   178f0:	f800283a 	ret

000178f4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   178f4:	defff904 	addi	sp,sp,-28
   178f8:	dfc00615 	stw	ra,24(sp)
   178fc:	df000515 	stw	fp,20(sp)
   17900:	df000504 	addi	fp,sp,20
   17904:	e13ffd15 	stw	r4,-12(fp)
   17908:	e17ffe15 	stw	r5,-8(fp)
   1790c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   17910:	e0bffd17 	ldw	r2,-12(fp)
   17914:	10000616 	blt	r2,zero,17930 <read+0x3c>
   17918:	e0bffd17 	ldw	r2,-12(fp)
   1791c:	10c00324 	muli	r3,r2,12
   17920:	008000b4 	movhi	r2,2
   17924:	10963f04 	addi	r2,r2,22780
   17928:	1885883a 	add	r2,r3,r2
   1792c:	00000106 	br	17934 <read+0x40>
   17930:	0005883a 	mov	r2,zero
   17934:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   17938:	e0bffb17 	ldw	r2,-20(fp)
   1793c:	10002226 	beq	r2,zero,179c8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   17940:	e0bffb17 	ldw	r2,-20(fp)
   17944:	10800217 	ldw	r2,8(r2)
   17948:	108000cc 	andi	r2,r2,3
   1794c:	10800060 	cmpeqi	r2,r2,1
   17950:	1000181e 	bne	r2,zero,179b4 <read+0xc0>
        (fd->dev->read))
   17954:	e0bffb17 	ldw	r2,-20(fp)
   17958:	10800017 	ldw	r2,0(r2)
   1795c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   17960:	10001426 	beq	r2,zero,179b4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   17964:	e0bffb17 	ldw	r2,-20(fp)
   17968:	10800017 	ldw	r2,0(r2)
   1796c:	10800517 	ldw	r2,20(r2)
   17970:	e0ffff17 	ldw	r3,-4(fp)
   17974:	180d883a 	mov	r6,r3
   17978:	e17ffe17 	ldw	r5,-8(fp)
   1797c:	e13ffb17 	ldw	r4,-20(fp)
   17980:	103ee83a 	callr	r2
   17984:	e0bffc15 	stw	r2,-16(fp)
   17988:	e0bffc17 	ldw	r2,-16(fp)
   1798c:	1000070e 	bge	r2,zero,179ac <read+0xb8>
        {
          ALT_ERRNO = -rval;
   17990:	00178b80 	call	178b8 <alt_get_errno>
   17994:	1007883a 	mov	r3,r2
   17998:	e0bffc17 	ldw	r2,-16(fp)
   1799c:	0085c83a 	sub	r2,zero,r2
   179a0:	18800015 	stw	r2,0(r3)
          return -1;
   179a4:	00bfffc4 	movi	r2,-1
   179a8:	00000c06 	br	179dc <read+0xe8>
        }
        return rval;
   179ac:	e0bffc17 	ldw	r2,-16(fp)
   179b0:	00000a06 	br	179dc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   179b4:	00178b80 	call	178b8 <alt_get_errno>
   179b8:	1007883a 	mov	r3,r2
   179bc:	00800344 	movi	r2,13
   179c0:	18800015 	stw	r2,0(r3)
   179c4:	00000406 	br	179d8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   179c8:	00178b80 	call	178b8 <alt_get_errno>
   179cc:	1007883a 	mov	r3,r2
   179d0:	00801444 	movi	r2,81
   179d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   179d8:	00bfffc4 	movi	r2,-1
}
   179dc:	e037883a 	mov	sp,fp
   179e0:	dfc00117 	ldw	ra,4(sp)
   179e4:	df000017 	ldw	fp,0(sp)
   179e8:	dec00204 	addi	sp,sp,8
   179ec:	f800283a 	ret

000179f0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   179f0:	defffe04 	addi	sp,sp,-8
   179f4:	df000115 	stw	fp,4(sp)
   179f8:	df000104 	addi	fp,sp,4
   179fc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   17a00:	e0bfff17 	ldw	r2,-4(fp)
   17a04:	108000d0 	cmplti	r2,r2,3
   17a08:	10000d1e 	bne	r2,zero,17a40 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   17a0c:	008000b4 	movhi	r2,2
   17a10:	10963f04 	addi	r2,r2,22780
   17a14:	e0ffff17 	ldw	r3,-4(fp)
   17a18:	18c00324 	muli	r3,r3,12
   17a1c:	10c5883a 	add	r2,r2,r3
   17a20:	10800204 	addi	r2,r2,8
   17a24:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   17a28:	008000b4 	movhi	r2,2
   17a2c:	10963f04 	addi	r2,r2,22780
   17a30:	e0ffff17 	ldw	r3,-4(fp)
   17a34:	18c00324 	muli	r3,r3,12
   17a38:	10c5883a 	add	r2,r2,r3
   17a3c:	10000015 	stw	zero,0(r2)
  }
}
   17a40:	0001883a 	nop
   17a44:	e037883a 	mov	sp,fp
   17a48:	df000017 	ldw	fp,0(sp)
   17a4c:	dec00104 	addi	sp,sp,4
   17a50:	f800283a 	ret

00017a54 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   17a54:	defff904 	addi	sp,sp,-28
   17a58:	df000615 	stw	fp,24(sp)
   17a5c:	df000604 	addi	fp,sp,24
   17a60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17a64:	0005303a 	rdctl	r2,status
   17a68:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17a6c:	e0fffe17 	ldw	r3,-8(fp)
   17a70:	00bfff84 	movi	r2,-2
   17a74:	1884703a 	and	r2,r3,r2
   17a78:	1001703a 	wrctl	status,r2
  
  return context;
   17a7c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   17a80:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   17a84:	d0a02217 	ldw	r2,-32632(gp)
   17a88:	10c000c4 	addi	r3,r2,3
   17a8c:	00bfff04 	movi	r2,-4
   17a90:	1884703a 	and	r2,r3,r2
   17a94:	d0a02215 	stw	r2,-32632(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   17a98:	d0e02217 	ldw	r3,-32632(gp)
   17a9c:	e0bfff17 	ldw	r2,-4(fp)
   17aa0:	1887883a 	add	r3,r3,r2
   17aa4:	00810034 	movhi	r2,1024
   17aa8:	10800004 	addi	r2,r2,0
   17aac:	10c0062e 	bgeu	r2,r3,17ac8 <sbrk+0x74>
   17ab0:	e0bffb17 	ldw	r2,-20(fp)
   17ab4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17ab8:	e0bffa17 	ldw	r2,-24(fp)
   17abc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   17ac0:	00bfffc4 	movi	r2,-1
   17ac4:	00000b06 	br	17af4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   17ac8:	d0a02217 	ldw	r2,-32632(gp)
   17acc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   17ad0:	d0e02217 	ldw	r3,-32632(gp)
   17ad4:	e0bfff17 	ldw	r2,-4(fp)
   17ad8:	1885883a 	add	r2,r3,r2
   17adc:	d0a02215 	stw	r2,-32632(gp)
   17ae0:	e0bffb17 	ldw	r2,-20(fp)
   17ae4:	e0bffc15 	stw	r2,-16(fp)
   17ae8:	e0bffc17 	ldw	r2,-16(fp)
   17aec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   17af0:	e0bffd17 	ldw	r2,-12(fp)
} 
   17af4:	e037883a 	mov	sp,fp
   17af8:	df000017 	ldw	fp,0(sp)
   17afc:	dec00104 	addi	sp,sp,4
   17b00:	f800283a 	ret

00017b04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   17b04:	defffe04 	addi	sp,sp,-8
   17b08:	dfc00115 	stw	ra,4(sp)
   17b0c:	df000015 	stw	fp,0(sp)
   17b10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   17b14:	d0a02117 	ldw	r2,-32636(gp)
   17b18:	10000326 	beq	r2,zero,17b28 <alt_get_errno+0x24>
   17b1c:	d0a02117 	ldw	r2,-32636(gp)
   17b20:	103ee83a 	callr	r2
   17b24:	00000106 	br	17b2c <alt_get_errno+0x28>
   17b28:	d0a83b04 	addi	r2,gp,-24340
}
   17b2c:	e037883a 	mov	sp,fp
   17b30:	dfc00117 	ldw	ra,4(sp)
   17b34:	df000017 	ldw	fp,0(sp)
   17b38:	dec00204 	addi	sp,sp,8
   17b3c:	f800283a 	ret

00017b40 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   17b40:	defff904 	addi	sp,sp,-28
   17b44:	dfc00615 	stw	ra,24(sp)
   17b48:	df000515 	stw	fp,20(sp)
   17b4c:	df000504 	addi	fp,sp,20
   17b50:	e13ffd15 	stw	r4,-12(fp)
   17b54:	e17ffe15 	stw	r5,-8(fp)
   17b58:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   17b5c:	e0bffd17 	ldw	r2,-12(fp)
   17b60:	10000616 	blt	r2,zero,17b7c <write+0x3c>
   17b64:	e0bffd17 	ldw	r2,-12(fp)
   17b68:	10c00324 	muli	r3,r2,12
   17b6c:	008000b4 	movhi	r2,2
   17b70:	10963f04 	addi	r2,r2,22780
   17b74:	1885883a 	add	r2,r3,r2
   17b78:	00000106 	br	17b80 <write+0x40>
   17b7c:	0005883a 	mov	r2,zero
   17b80:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   17b84:	e0bffb17 	ldw	r2,-20(fp)
   17b88:	10002126 	beq	r2,zero,17c10 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   17b8c:	e0bffb17 	ldw	r2,-20(fp)
   17b90:	10800217 	ldw	r2,8(r2)
   17b94:	108000cc 	andi	r2,r2,3
   17b98:	10001826 	beq	r2,zero,17bfc <write+0xbc>
   17b9c:	e0bffb17 	ldw	r2,-20(fp)
   17ba0:	10800017 	ldw	r2,0(r2)
   17ba4:	10800617 	ldw	r2,24(r2)
   17ba8:	10001426 	beq	r2,zero,17bfc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   17bac:	e0bffb17 	ldw	r2,-20(fp)
   17bb0:	10800017 	ldw	r2,0(r2)
   17bb4:	10800617 	ldw	r2,24(r2)
   17bb8:	e0ffff17 	ldw	r3,-4(fp)
   17bbc:	180d883a 	mov	r6,r3
   17bc0:	e17ffe17 	ldw	r5,-8(fp)
   17bc4:	e13ffb17 	ldw	r4,-20(fp)
   17bc8:	103ee83a 	callr	r2
   17bcc:	e0bffc15 	stw	r2,-16(fp)
   17bd0:	e0bffc17 	ldw	r2,-16(fp)
   17bd4:	1000070e 	bge	r2,zero,17bf4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   17bd8:	0017b040 	call	17b04 <alt_get_errno>
   17bdc:	1007883a 	mov	r3,r2
   17be0:	e0bffc17 	ldw	r2,-16(fp)
   17be4:	0085c83a 	sub	r2,zero,r2
   17be8:	18800015 	stw	r2,0(r3)
        return -1;
   17bec:	00bfffc4 	movi	r2,-1
   17bf0:	00000c06 	br	17c24 <write+0xe4>
      }
      return rval;
   17bf4:	e0bffc17 	ldw	r2,-16(fp)
   17bf8:	00000a06 	br	17c24 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   17bfc:	0017b040 	call	17b04 <alt_get_errno>
   17c00:	1007883a 	mov	r3,r2
   17c04:	00800344 	movi	r2,13
   17c08:	18800015 	stw	r2,0(r3)
   17c0c:	00000406 	br	17c20 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   17c10:	0017b040 	call	17b04 <alt_get_errno>
   17c14:	1007883a 	mov	r3,r2
   17c18:	00801444 	movi	r2,81
   17c1c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   17c20:	00bfffc4 	movi	r2,-1
}
   17c24:	e037883a 	mov	sp,fp
   17c28:	dfc00117 	ldw	ra,4(sp)
   17c2c:	df000017 	ldw	fp,0(sp)
   17c30:	dec00204 	addi	sp,sp,8
   17c34:	f800283a 	ret

00017c38 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
   17c38:	deffdf04 	addi	sp,sp,-132
   17c3c:	dfc02015 	stw	ra,128(sp)
   17c40:	df001f15 	stw	fp,124(sp)
   17c44:	df001f04 	addi	fp,sp,124
   17c48:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   17c4c:	e0bfe204 	addi	r2,fp,-120
   17c50:	100b883a 	mov	r5,r2
   17c54:	01003fc4 	movi	r4,255
   17c58:	001f0a00 	call	1f0a0 <OSTaskQuery>
   17c5c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   17c60:	e0bffe83 	ldbu	r2,-6(fp)
   17c64:	10803fcc 	andi	r2,r2,255
   17c68:	10001e1e 	bne	r2,zero,17ce4 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
   17c6c:	e0bfee83 	ldbu	r2,-70(fp)
   17c70:	10803fcc 	andi	r2,r2,255
   17c74:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
   17c78:	d0a84417 	ldw	r2,-24304(gp)
   17c7c:	e0fffd04 	addi	r3,fp,-12
   17c80:	180b883a 	mov	r5,r3
   17c84:	1009883a 	mov	r4,r2
   17c88:	001d8b80 	call	1d8b8 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
   17c8c:	e0bffe43 	ldbu	r2,-7(fp)
   17c90:	10803fcc 	andi	r2,r2,255
   17c94:	10000726 	beq	r2,zero,17cb4 <__env_lock+0x7c>
   17c98:	d0a02317 	ldw	r2,-32628(gp)
   17c9c:	e0ffe117 	ldw	r3,-124(fp)
   17ca0:	1880041e 	bne	r3,r2,17cb4 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
   17ca4:	d0a84317 	ldw	r2,-24308(gp)
   17ca8:	10800044 	addi	r2,r2,1
   17cac:	d0a84315 	stw	r2,-24308(gp)
   17cb0:	00000a06 	br	17cdc <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
   17cb4:	d0a84417 	ldw	r2,-24304(gp)
   17cb8:	e0fffe84 	addi	r3,fp,-6
   17cbc:	180d883a 	mov	r6,r3
   17cc0:	000b883a 	mov	r5,zero
   17cc4:	1009883a 	mov	r4,r2
   17cc8:	001d4300 	call	1d430 <OSSemPend>
    locks  = 1;
   17ccc:	00800044 	movi	r2,1
   17cd0:	d0a84315 	stw	r2,-24308(gp)
    lockid = id;
   17cd4:	e0bfe117 	ldw	r2,-124(fp)
   17cd8:	d0a02315 	stw	r2,-32628(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   17cdc:	0001883a 	nop
   17ce0:	00000106 	br	17ce8 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   17ce4:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   17ce8:	e037883a 	mov	sp,fp
   17cec:	dfc00117 	ldw	ra,4(sp)
   17cf0:	df000017 	ldw	fp,0(sp)
   17cf4:	dec00204 	addi	sp,sp,8
   17cf8:	f800283a 	ret

00017cfc <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
   17cfc:	defffd04 	addi	sp,sp,-12
   17d00:	dfc00215 	stw	ra,8(sp)
   17d04:	df000115 	stw	fp,4(sp)
   17d08:	df000104 	addi	fp,sp,4
   17d0c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
   17d10:	d0a84317 	ldw	r2,-24308(gp)
   17d14:	10000b26 	beq	r2,zero,17d44 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
   17d18:	d0a84317 	ldw	r2,-24308(gp)
   17d1c:	10bfffc4 	addi	r2,r2,-1
   17d20:	d0a84315 	stw	r2,-24308(gp)
   17d24:	d0a84317 	ldw	r2,-24308(gp)
   17d28:	1000071e 	bne	r2,zero,17d48 <__env_unlock+0x4c>
  {
    lockid = -1;
   17d2c:	00bfffc4 	movi	r2,-1
   17d30:	d0a02315 	stw	r2,-32628(gp)
    OSSemPost( alt_envsem );
   17d34:	d0a84417 	ldw	r2,-24304(gp)
   17d38:	1009883a 	mov	r4,r2
   17d3c:	001d7a80 	call	1d7a8 <OSSemPost>
   17d40:	00000106 	br	17d48 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
   17d44:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   17d48:	e037883a 	mov	sp,fp
   17d4c:	dfc00117 	ldw	ra,4(sp)
   17d50:	df000017 	ldw	fp,0(sp)
   17d54:	dec00204 	addi	sp,sp,8
   17d58:	f800283a 	ret

00017d5c <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
   17d5c:	deffdb04 	addi	sp,sp,-148
   17d60:	dfc02415 	stw	ra,144(sp)
   17d64:	df002315 	stw	fp,140(sp)
   17d68:	df002304 	addi	fp,sp,140
   17d6c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17d70:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
   17d74:	d0a84743 	ldbu	r2,-24291(gp)
   17d78:	10803fcc 	andi	r2,r2,255
   17d7c:	10800060 	cmpeqi	r2,r2,1
   17d80:	10003626 	beq	r2,zero,17e5c <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
   17d84:	e0bfe204 	addi	r2,fp,-120
   17d88:	100b883a 	mov	r5,r2
   17d8c:	01003fc4 	movi	r4,255
   17d90:	001f0a00 	call	1f0a0 <OSTaskQuery>
   17d94:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
   17d98:	e0bffe83 	ldbu	r2,-6(fp)
   17d9c:	10803fcc 	andi	r2,r2,255
   17da0:	1000301e 	bne	r2,zero,17e64 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
   17da4:	e0bfee83 	ldbu	r2,-70(fp)
   17da8:	10803fcc 	andi	r2,r2,255
   17dac:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
   17db0:	d0a84617 	ldw	r2,-24296(gp)
   17db4:	e0fffd04 	addi	r3,fp,-12
   17db8:	180b883a 	mov	r5,r3
   17dbc:	1009883a 	mov	r4,r2
   17dc0:	001d8b80 	call	1d8b8 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17dc4:	0005303a 	rdctl	r2,status
   17dc8:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17dcc:	e0ffe117 	ldw	r3,-124(fp)
   17dd0:	00bfff84 	movi	r2,-2
   17dd4:	1884703a 	and	r2,r3,r2
   17dd8:	1001703a 	wrctl	status,r2
  
  return context;
   17ddc:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
   17de0:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
   17de4:	e0bffd0b 	ldhu	r2,-12(fp)
   17de8:	10bfffcc 	andi	r2,r2,65535
   17dec:	10000b1e 	bne	r2,zero,17e1c <__malloc_lock+0xc0>
   17df0:	d0a02417 	ldw	r2,-32624(gp)
   17df4:	e0ffde17 	ldw	r3,-136(fp)
   17df8:	1880081e 	bne	r3,r2,17e1c <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
   17dfc:	d0a84517 	ldw	r2,-24300(gp)
   17e00:	10800044 	addi	r2,r2,1
   17e04:	d0a84515 	stw	r2,-24300(gp)
   17e08:	e0bfdd17 	ldw	r2,-140(fp)
   17e0c:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17e10:	e0bfdf17 	ldw	r2,-132(fp)
   17e14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
   17e18:	00000e06 	br	17e54 <__malloc_lock+0xf8>
   17e1c:	e0bfdd17 	ldw	r2,-140(fp)
   17e20:	e0bfe015 	stw	r2,-128(fp)
   17e24:	e0bfe017 	ldw	r2,-128(fp)
   17e28:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
   17e2c:	d0a84617 	ldw	r2,-24296(gp)
   17e30:	e0fffe84 	addi	r3,fp,-6
   17e34:	180d883a 	mov	r6,r3
   17e38:	000b883a 	mov	r5,zero
   17e3c:	1009883a 	mov	r4,r2
   17e40:	001d4300 	call	1d430 <OSSemPend>
    locks  = 1;
   17e44:	00800044 	movi	r2,1
   17e48:	d0a84515 	stw	r2,-24300(gp)
    lockid = id;
   17e4c:	e0bfde17 	ldw	r2,-136(fp)
   17e50:	d0a02415 	stw	r2,-32624(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
   17e54:	0001883a 	nop
   17e58:	00000306 	br	17e68 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
   17e5c:	0001883a 	nop
   17e60:	00000106 	br	17e68 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
   17e64:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
   17e68:	e037883a 	mov	sp,fp
   17e6c:	dfc00117 	ldw	ra,4(sp)
   17e70:	df000017 	ldw	fp,0(sp)
   17e74:	dec00204 	addi	sp,sp,8
   17e78:	f800283a 	ret

00017e7c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   17e7c:	defff804 	addi	sp,sp,-32
   17e80:	dfc00715 	stw	ra,28(sp)
   17e84:	df000615 	stw	fp,24(sp)
   17e88:	df000604 	addi	fp,sp,24
   17e8c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17e90:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
   17e94:	d0a84743 	ldbu	r2,-24291(gp)
   17e98:	10803fcc 	andi	r2,r2,255
   17e9c:	10800060 	cmpeqi	r2,r2,1
   17ea0:	10002326 	beq	r2,zero,17f30 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   17ea4:	0005303a 	rdctl	r2,status
   17ea8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   17eac:	e0fffe17 	ldw	r3,-8(fp)
   17eb0:	00bfff84 	movi	r2,-2
   17eb4:	1884703a 	and	r2,r3,r2
   17eb8:	1001703a 	wrctl	status,r2
  
  return context;
   17ebc:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
   17ec0:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
   17ec4:	d0a84517 	ldw	r2,-24300(gp)
   17ec8:	1000051e 	bne	r2,zero,17ee0 <__malloc_unlock+0x64>
   17ecc:	e0bffa17 	ldw	r2,-24(fp)
   17ed0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   17ed4:	e0bffb17 	ldw	r2,-20(fp)
   17ed8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
   17edc:	00001506 	br	17f34 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
   17ee0:	d0a84517 	ldw	r2,-24300(gp)
   17ee4:	10bfffc4 	addi	r2,r2,-1
   17ee8:	d0a84515 	stw	r2,-24300(gp)
   17eec:	d0a84517 	ldw	r2,-24300(gp)
   17ef0:	10000a1e 	bne	r2,zero,17f1c <__malloc_unlock+0xa0>
  {
    lockid = -1;
   17ef4:	00bfffc4 	movi	r2,-1
   17ef8:	d0a02415 	stw	r2,-32624(gp)
   17efc:	e0bffa17 	ldw	r2,-24(fp)
   17f00:	e0bffc15 	stw	r2,-16(fp)
   17f04:	e0bffc17 	ldw	r2,-16(fp)
   17f08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
   17f0c:	d0a84617 	ldw	r2,-24296(gp)
   17f10:	1009883a 	mov	r4,r2
   17f14:	001d7a80 	call	1d7a8 <OSSemPost>
   17f18:	00000606 	br	17f34 <__malloc_unlock+0xb8>
   17f1c:	e0bffa17 	ldw	r2,-24(fp)
   17f20:	e0bffd15 	stw	r2,-12(fp)
   17f24:	e0bffd17 	ldw	r2,-12(fp)
   17f28:	1001703a 	wrctl	status,r2
   17f2c:	00000106 	br	17f34 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
   17f30:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
   17f34:	e037883a 	mov	sp,fp
   17f38:	dfc00117 	ldw	ra,4(sp)
   17f3c:	df000017 	ldw	fp,0(sp)
   17f40:	dec00204 	addi	sp,sp,8
   17f44:	f800283a 	ret

00017f48 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   17f48:	defff704 	addi	sp,sp,-36
   17f4c:	dfc00815 	stw	ra,32(sp)
   17f50:	df000715 	stw	fp,28(sp)
   17f54:	df000704 	addi	fp,sp,28
   17f58:	e13ffd15 	stw	r4,-12(fp)
   17f5c:	e17ffe15 	stw	r5,-8(fp)
   17f60:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   17f64:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   17f68:	e0bfff17 	ldw	r2,-4(fp)
   17f6c:	1000021e 	bne	r2,zero,17f78 <OSEventNameGet+0x30>
        return (0);
   17f70:	0005883a 	mov	r2,zero
   17f74:	00003706 	br	18054 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   17f78:	e0bffd17 	ldw	r2,-12(fp)
   17f7c:	1000051e 	bne	r2,zero,17f94 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
   17f80:	e0bfff17 	ldw	r2,-4(fp)
   17f84:	00c00104 	movi	r3,4
   17f88:	10c00005 	stb	r3,0(r2)
        return (0);
   17f8c:	0005883a 	mov	r2,zero
   17f90:	00003006 	br	18054 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   17f94:	e0bffe17 	ldw	r2,-8(fp)
   17f98:	1000051e 	bne	r2,zero,17fb0 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   17f9c:	e0bfff17 	ldw	r2,-4(fp)
   17fa0:	00c00304 	movi	r3,12
   17fa4:	10c00005 	stb	r3,0(r2)
        return (0);
   17fa8:	0005883a 	mov	r2,zero
   17fac:	00002906 	br	18054 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   17fb0:	d0a85503 	ldbu	r2,-24236(gp)
   17fb4:	10803fcc 	andi	r2,r2,255
   17fb8:	10000526 	beq	r2,zero,17fd0 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
   17fbc:	e0bfff17 	ldw	r2,-4(fp)
   17fc0:	00c00444 	movi	r3,17
   17fc4:	10c00005 	stb	r3,0(r2)
        return (0);
   17fc8:	0005883a 	mov	r2,zero
   17fcc:	00002106 	br	18054 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
   17fd0:	e0bffd17 	ldw	r2,-12(fp)
   17fd4:	10800003 	ldbu	r2,0(r2)
   17fd8:	10803fcc 	andi	r2,r2,255
   17fdc:	10bfffc4 	addi	r2,r2,-1
   17fe0:	10800128 	cmpgeui	r2,r2,4
   17fe4:	10000526 	beq	r2,zero,17ffc <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   17fe8:	e0bfff17 	ldw	r2,-4(fp)
   17fec:	00c00044 	movi	r3,1
   17ff0:	10c00005 	stb	r3,0(r2)
             return (0);
   17ff4:	0005883a 	mov	r2,zero
   17ff8:	00001606 	br	18054 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   17ffc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18000:	0005303a 	rdctl	r2,status
   18004:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18008:	e0fffb17 	ldw	r3,-20(fp)
   1800c:	00bfff84 	movi	r2,-2
   18010:	1884703a 	and	r2,r3,r2
   18014:	1001703a 	wrctl	status,r2
  
  return context;
   18018:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
   1801c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
   18020:	e0bffd17 	ldw	r2,-12(fp)
   18024:	10800384 	addi	r2,r2,14
   18028:	100b883a 	mov	r5,r2
   1802c:	e13ffe17 	ldw	r4,-8(fp)
   18030:	00199cc0 	call	199cc <OS_StrCopy>
   18034:	e0bffa05 	stb	r2,-24(fp)
   18038:	e0bff917 	ldw	r2,-28(fp)
   1803c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18040:	e0bffc17 	ldw	r2,-16(fp)
   18044:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   18048:	e0bfff17 	ldw	r2,-4(fp)
   1804c:	10000005 	stb	zero,0(r2)
    return (len);
   18050:	e0bffa03 	ldbu	r2,-24(fp)
}
   18054:	e037883a 	mov	sp,fp
   18058:	dfc00117 	ldw	ra,4(sp)
   1805c:	df000017 	ldw	fp,0(sp)
   18060:	dec00204 	addi	sp,sp,8
   18064:	f800283a 	ret

00018068 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
   18068:	defff604 	addi	sp,sp,-40
   1806c:	dfc00915 	stw	ra,36(sp)
   18070:	df000815 	stw	fp,32(sp)
   18074:	df000804 	addi	fp,sp,32
   18078:	e13ffd15 	stw	r4,-12(fp)
   1807c:	e17ffe15 	stw	r5,-8(fp)
   18080:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18084:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   18088:	e0bfff17 	ldw	r2,-4(fp)
   1808c:	10004026 	beq	r2,zero,18190 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
   18090:	e0bffd17 	ldw	r2,-12(fp)
   18094:	1000041e 	bne	r2,zero,180a8 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   18098:	e0bfff17 	ldw	r2,-4(fp)
   1809c:	00c00104 	movi	r3,4
   180a0:	10c00005 	stb	r3,0(r2)
        return;
   180a4:	00003b06 	br	18194 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   180a8:	e0bffe17 	ldw	r2,-8(fp)
   180ac:	1000041e 	bne	r2,zero,180c0 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   180b0:	e0bfff17 	ldw	r2,-4(fp)
   180b4:	00c00304 	movi	r3,12
   180b8:	10c00005 	stb	r3,0(r2)
        return;
   180bc:	00003506 	br	18194 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   180c0:	d0a85503 	ldbu	r2,-24236(gp)
   180c4:	10803fcc 	andi	r2,r2,255
   180c8:	10000426 	beq	r2,zero,180dc <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   180cc:	e0bfff17 	ldw	r2,-4(fp)
   180d0:	00c00484 	movi	r3,18
   180d4:	10c00005 	stb	r3,0(r2)
        return;
   180d8:	00002e06 	br	18194 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
   180dc:	e0bffd17 	ldw	r2,-12(fp)
   180e0:	10800003 	ldbu	r2,0(r2)
   180e4:	10803fcc 	andi	r2,r2,255
   180e8:	10bfffc4 	addi	r2,r2,-1
   180ec:	10800128 	cmpgeui	r2,r2,4
   180f0:	10000426 	beq	r2,zero,18104 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
   180f4:	e0bfff17 	ldw	r2,-4(fp)
   180f8:	00c00044 	movi	r3,1
   180fc:	10c00005 	stb	r3,0(r2)
             return;
   18100:	00002406 	br	18194 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
   18104:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18108:	0005303a 	rdctl	r2,status
   1810c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18110:	e0fffc17 	ldw	r3,-16(fp)
   18114:	00bfff84 	movi	r2,-2
   18118:	1884703a 	and	r2,r3,r2
   1811c:	1001703a 	wrctl	status,r2
  
  return context;
   18120:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
   18124:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
   18128:	e13ffe17 	ldw	r4,-8(fp)
   1812c:	0019a400 	call	19a40 <OS_StrLen>
   18130:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
   18134:	e0bffa03 	ldbu	r2,-24(fp)
   18138:	10800830 	cmpltui	r2,r2,32
   1813c:	1000081e 	bne	r2,zero,18160 <OSEventNameSet+0xf8>
   18140:	e0bff817 	ldw	r2,-32(fp)
   18144:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18148:	e0bff917 	ldw	r2,-28(fp)
   1814c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
   18150:	e0bfff17 	ldw	r2,-4(fp)
   18154:	00c002c4 	movi	r3,11
   18158:	10c00005 	stb	r3,0(r2)
        return;
   1815c:	00000d06 	br	18194 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
   18160:	e0bffd17 	ldw	r2,-12(fp)
   18164:	10800384 	addi	r2,r2,14
   18168:	e17ffe17 	ldw	r5,-8(fp)
   1816c:	1009883a 	mov	r4,r2
   18170:	00199cc0 	call	199cc <OS_StrCopy>
   18174:	e0bff817 	ldw	r2,-32(fp)
   18178:	e0bffb15 	stw	r2,-20(fp)
   1817c:	e0bffb17 	ldw	r2,-20(fp)
   18180:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   18184:	e0bfff17 	ldw	r2,-4(fp)
   18188:	10000005 	stb	zero,0(r2)
   1818c:	00000106 	br	18194 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   18190:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   18194:	e037883a 	mov	sp,fp
   18198:	dfc00117 	ldw	ra,4(sp)
   1819c:	df000017 	ldw	fp,0(sp)
   181a0:	dec00204 	addi	sp,sp,8
   181a4:	f800283a 	ret

000181a8 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
   181a8:	deffed04 	addi	sp,sp,-76
   181ac:	dfc01215 	stw	ra,72(sp)
   181b0:	df001115 	stw	fp,68(sp)
   181b4:	df001104 	addi	fp,sp,68
   181b8:	e13ffc15 	stw	r4,-16(fp)
   181bc:	e17ffd15 	stw	r5,-12(fp)
   181c0:	e1bffe15 	stw	r6,-8(fp)
   181c4:	3805883a 	mov	r2,r7
   181c8:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
   181cc:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
   181d0:	e0800217 	ldw	r2,8(fp)
   181d4:	1000021e 	bne	r2,zero,181e0 <OSEventPendMulti+0x38>
        return (0);
   181d8:	0005883a 	mov	r2,zero
   181dc:	00017106 	br	187a4 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
   181e0:	e0bffc17 	ldw	r2,-16(fp)
   181e4:	1000051e 	bne	r2,zero,181fc <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
   181e8:	e0800217 	ldw	r2,8(fp)
   181ec:	00c00104 	movi	r3,4
   181f0:	10c00005 	stb	r3,0(r2)
        return (0);
   181f4:	0005883a 	mov	r2,zero
   181f8:	00016a06 	br	187a4 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
   181fc:	e0bffd17 	ldw	r2,-12(fp)
   18200:	1000051e 	bne	r2,zero,18218 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
   18204:	e0800217 	ldw	r2,8(fp)
   18208:	00c00104 	movi	r3,4
   1820c:	10c00005 	stb	r3,0(r2)
        return (0);
   18210:	0005883a 	mov	r2,zero
   18214:	00016306 	br	187a4 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
   18218:	e0bffe17 	ldw	r2,-8(fp)
   1821c:	1000051e 	bne	r2,zero,18234 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
   18220:	e0800217 	ldw	r2,8(fp)
   18224:	00c00104 	movi	r3,4
   18228:	10c00005 	stb	r3,0(r2)
        return (0);
   1822c:	0005883a 	mov	r2,zero
   18230:	00015c06 	br	187a4 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
   18234:	e0bffd17 	ldw	r2,-12(fp)
   18238:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
   1823c:	e0bffc17 	ldw	r2,-16(fp)
   18240:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
   18244:	e0bfef17 	ldw	r2,-68(fp)
   18248:	10800017 	ldw	r2,0(r2)
   1824c:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
   18250:	00001906 	br	182b8 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
   18254:	e0bff017 	ldw	r2,-64(fp)
   18258:	10800003 	ldbu	r2,0(r2)
   1825c:	10803fcc 	andi	r2,r2,255
   18260:	10c000a0 	cmpeqi	r3,r2,2
   18264:	1800091e 	bne	r3,zero,1828c <OSEventPendMulti+0xe4>
   18268:	10c000e0 	cmpeqi	r3,r2,3
   1826c:	1800091e 	bne	r3,zero,18294 <OSEventPendMulti+0xec>
   18270:	10800060 	cmpeqi	r2,r2,1
   18274:	1000091e 	bne	r2,zero,1829c <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
   18278:	e0800217 	ldw	r2,8(fp)
   1827c:	00c00044 	movi	r3,1
   18280:	10c00005 	stb	r3,0(r2)
                 return (0);
   18284:	0005883a 	mov	r2,zero
   18288:	00014606 	br	187a4 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
   1828c:	0001883a 	nop
   18290:	00000306 	br	182a0 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
   18294:	0001883a 	nop
   18298:	00000106 	br	182a0 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
   1829c:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
   182a0:	e0bfef17 	ldw	r2,-68(fp)
   182a4:	10800104 	addi	r2,r2,4
   182a8:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   182ac:	e0bfef17 	ldw	r2,-68(fp)
   182b0:	10800017 	ldw	r2,0(r2)
   182b4:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
   182b8:	e0bff017 	ldw	r2,-64(fp)
   182bc:	103fe51e 	bne	r2,zero,18254 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018254>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
   182c0:	d0a85503 	ldbu	r2,-24236(gp)
   182c4:	10803fcc 	andi	r2,r2,255
   182c8:	10000526 	beq	r2,zero,182e0 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
   182cc:	e0800217 	ldw	r2,8(fp)
   182d0:	00c00084 	movi	r3,2
   182d4:	10c00005 	stb	r3,0(r2)
        return (0);
   182d8:	0005883a 	mov	r2,zero
   182dc:	00013106 	br	187a4 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
   182e0:	d0a84703 	ldbu	r2,-24292(gp)
   182e4:	10803fcc 	andi	r2,r2,255
   182e8:	10000526 	beq	r2,zero,18300 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
   182ec:	e0800217 	ldw	r2,8(fp)
   182f0:	00c00344 	movi	r3,13
   182f4:	10c00005 	stb	r3,0(r2)
        return (0);
   182f8:	0005883a 	mov	r2,zero
   182fc:	00012906 	br	187a4 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18300:	0005303a 	rdctl	r2,status
   18304:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18308:	e0fffb17 	ldw	r3,-20(fp)
   1830c:	00bfff84 	movi	r2,-2
   18310:	1884703a 	and	r2,r3,r2
   18314:	1001703a 	wrctl	status,r2
  
  return context;
   18318:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
   1831c:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
   18320:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
   18324:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
   18328:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
   1832c:	e0bffc17 	ldw	r2,-16(fp)
   18330:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
   18334:	e0bfef17 	ldw	r2,-68(fp)
   18338:	10800017 	ldw	r2,0(r2)
   1833c:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   18340:	00008106 	br	18548 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
   18344:	e0bff017 	ldw	r2,-64(fp)
   18348:	10800003 	ldbu	r2,0(r2)
   1834c:	10803fcc 	andi	r2,r2,255
   18350:	10c000a0 	cmpeqi	r3,r2,2
   18354:	18003c1e 	bne	r3,zero,18448 <OSEventPendMulti+0x2a0>
   18358:	10c000e0 	cmpeqi	r3,r2,3
   1835c:	1800031e 	bne	r3,zero,1836c <OSEventPendMulti+0x1c4>
   18360:	10800060 	cmpeqi	r2,r2,1
   18364:	10001e1e 	bne	r2,zero,183e0 <OSEventPendMulti+0x238>
   18368:	00006606 	br	18504 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
   1836c:	e0bff017 	ldw	r2,-64(fp)
   18370:	1080020b 	ldhu	r2,8(r2)
   18374:	10bfffcc 	andi	r2,r2,65535
   18378:	10001526 	beq	r2,zero,183d0 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
   1837c:	e0bff017 	ldw	r2,-64(fp)
   18380:	1080020b 	ldhu	r2,8(r2)
   18384:	10bfffc4 	addi	r2,r2,-1
   18388:	1007883a 	mov	r3,r2
   1838c:	e0bff017 	ldw	r2,-64(fp)
   18390:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
   18394:	e0bffd17 	ldw	r2,-12(fp)
   18398:	10c00104 	addi	r3,r2,4
   1839c:	e0fffd15 	stw	r3,-12(fp)
   183a0:	e0fff017 	ldw	r3,-64(fp)
   183a4:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
   183a8:	00800044 	movi	r2,1
   183ac:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
   183b0:	e0bffe17 	ldw	r2,-8(fp)
   183b4:	10c00104 	addi	r3,r2,4
   183b8:	e0fffe15 	stw	r3,-8(fp)
   183bc:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
   183c0:	e0bff18b 	ldhu	r2,-58(fp)
   183c4:	10800044 	addi	r2,r2,1
   183c8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
   183cc:	00005806 	br	18530 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
   183d0:	e0bff203 	ldbu	r2,-56(fp)
   183d4:	10800054 	ori	r2,r2,1
   183d8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   183dc:	00005406 	br	18530 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
   183e0:	e0bff017 	ldw	r2,-64(fp)
   183e4:	10800117 	ldw	r2,4(r2)
   183e8:	10001326 	beq	r2,zero,18438 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
   183ec:	e0bffe17 	ldw	r2,-8(fp)
   183f0:	10c00104 	addi	r3,r2,4
   183f4:	e0fffe15 	stw	r3,-8(fp)
   183f8:	e0fff017 	ldw	r3,-64(fp)
   183fc:	18c00117 	ldw	r3,4(r3)
   18400:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
   18404:	e0bff017 	ldw	r2,-64(fp)
   18408:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
   1840c:	e0bffd17 	ldw	r2,-12(fp)
   18410:	10c00104 	addi	r3,r2,4
   18414:	e0fffd15 	stw	r3,-12(fp)
   18418:	e0fff017 	ldw	r3,-64(fp)
   1841c:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
   18420:	00800044 	movi	r2,1
   18424:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   18428:	e0bff18b 	ldhu	r2,-58(fp)
   1842c:	10800044 	addi	r2,r2,1
   18430:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
   18434:	00003e06 	br	18530 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
   18438:	e0bff203 	ldbu	r2,-56(fp)
   1843c:	10800094 	ori	r2,r2,2
   18440:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   18444:	00003a06 	br	18530 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
   18448:	e0bff017 	ldw	r2,-64(fp)
   1844c:	10800117 	ldw	r2,4(r2)
   18450:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
   18454:	e0bff517 	ldw	r2,-44(fp)
   18458:	1080058b 	ldhu	r2,22(r2)
   1845c:	10bfffcc 	andi	r2,r2,65535
   18460:	10002426 	beq	r2,zero,184f4 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
   18464:	e0bffe17 	ldw	r2,-8(fp)
   18468:	10c00104 	addi	r3,r2,4
   1846c:	e0fffe15 	stw	r3,-8(fp)
   18470:	e0fff517 	ldw	r3,-44(fp)
   18474:	18c00417 	ldw	r3,16(r3)
   18478:	19400104 	addi	r5,r3,4
   1847c:	e13ff517 	ldw	r4,-44(fp)
   18480:	21400415 	stw	r5,16(r4)
   18484:	18c00017 	ldw	r3,0(r3)
   18488:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
   1848c:	e0bff517 	ldw	r2,-44(fp)
   18490:	10c00417 	ldw	r3,16(r2)
   18494:	e0bff517 	ldw	r2,-44(fp)
   18498:	10800217 	ldw	r2,8(r2)
   1849c:	1880041e 	bne	r3,r2,184b0 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
   184a0:	e0bff517 	ldw	r2,-44(fp)
   184a4:	10c00117 	ldw	r3,4(r2)
   184a8:	e0bff517 	ldw	r2,-44(fp)
   184ac:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
   184b0:	e0bff517 	ldw	r2,-44(fp)
   184b4:	1080058b 	ldhu	r2,22(r2)
   184b8:	10bfffc4 	addi	r2,r2,-1
   184bc:	1007883a 	mov	r3,r2
   184c0:	e0bff517 	ldw	r2,-44(fp)
   184c4:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
   184c8:	e0bffd17 	ldw	r2,-12(fp)
   184cc:	10c00104 	addi	r3,r2,4
   184d0:	e0fffd15 	stw	r3,-12(fp)
   184d4:	e0fff017 	ldw	r3,-64(fp)
   184d8:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
   184dc:	00800044 	movi	r2,1
   184e0:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
   184e4:	e0bff18b 	ldhu	r2,-58(fp)
   184e8:	10800044 	addi	r2,r2,1
   184ec:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
   184f0:	00000f06 	br	18530 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
   184f4:	e0bff203 	ldbu	r2,-56(fp)
   184f8:	10800114 	ori	r2,r2,4
   184fc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
   18500:	00000b06 	br	18530 <OSEventPendMulti+0x388>
   18504:	e0bff317 	ldw	r2,-52(fp)
   18508:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1850c:	e0bff417 	ldw	r2,-48(fp)
   18510:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
   18514:	e0bffd17 	ldw	r2,-12(fp)
   18518:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
   1851c:	e0800217 	ldw	r2,8(fp)
   18520:	00c00044 	movi	r3,1
   18524:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
   18528:	e0bff18b 	ldhu	r2,-58(fp)
   1852c:	00009d06 	br	187a4 <OSEventPendMulti+0x5fc>
        }
        pevents++;
   18530:	e0bfef17 	ldw	r2,-68(fp)
   18534:	10800104 	addi	r2,r2,4
   18538:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
   1853c:	e0bfef17 	ldw	r2,-68(fp)
   18540:	10800017 	ldw	r2,0(r2)
   18544:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
   18548:	e0bff017 	ldw	r2,-64(fp)
   1854c:	103f7d1e 	bne	r2,zero,18344 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018344>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
   18550:	e0bff103 	ldbu	r2,-60(fp)
   18554:	10800058 	cmpnei	r2,r2,1
   18558:	10000a1e 	bne	r2,zero,18584 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
   1855c:	e0bffd17 	ldw	r2,-12(fp)
   18560:	10000015 	stw	zero,0(r2)
   18564:	e0bff317 	ldw	r2,-52(fp)
   18568:	e0bff615 	stw	r2,-40(fp)
   1856c:	e0bff617 	ldw	r2,-40(fp)
   18570:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
   18574:	e0800217 	ldw	r2,8(fp)
   18578:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
   1857c:	e0bff18b 	ldhu	r2,-58(fp)
   18580:	00008806 	br	187a4 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
   18584:	d0a85617 	ldw	r2,-24232(gp)
   18588:	d0e85617 	ldw	r3,-24232(gp)
   1858c:	19000c03 	ldbu	r4,48(r3)
   18590:	e0fff203 	ldbu	r3,-56(fp)
   18594:	20c6b03a 	or	r3,r4,r3
   18598:	1809883a 	mov	r4,r3
   1859c:	00ffe004 	movi	r3,-128
   185a0:	20c6b03a 	or	r3,r4,r3
   185a4:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   185a8:	d0a85617 	ldw	r2,-24232(gp)
   185ac:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
   185b0:	d0a85617 	ldw	r2,-24232(gp)
   185b4:	e0ffff0b 	ldhu	r3,-4(fp)
   185b8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
   185bc:	e13ffc17 	ldw	r4,-16(fp)
   185c0:	00190e40 	call	190e4 <OS_EventTaskWaitMulti>
   185c4:	e0bff317 	ldw	r2,-52(fp)
   185c8:	e0bff915 	stw	r2,-28(fp)
   185cc:	e0bff917 	ldw	r2,-28(fp)
   185d0:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
   185d4:	00198880 	call	19888 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   185d8:	0005303a 	rdctl	r2,status
   185dc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   185e0:	e0fff717 	ldw	r3,-36(fp)
   185e4:	00bfff84 	movi	r2,-2
   185e8:	1884703a 	and	r2,r3,r2
   185ec:	1001703a 	wrctl	status,r2
  
  return context;
   185f0:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
   185f4:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
   185f8:	d0a85617 	ldw	r2,-24232(gp)
   185fc:	10800c43 	ldbu	r2,49(r2)
   18600:	10803fcc 	andi	r2,r2,255
   18604:	10000226 	beq	r2,zero,18610 <OSEventPendMulti+0x468>
   18608:	108000a0 	cmpeqi	r2,r2,2
   1860c:	10001826 	beq	r2,zero,18670 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
   18610:	d0a85617 	ldw	r2,-24232(gp)
   18614:	10800717 	ldw	r2,28(r2)
   18618:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
   1861c:	e0bff017 	ldw	r2,-64(fp)
   18620:	10000b26 	beq	r2,zero,18650 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
   18624:	e0bffd17 	ldw	r2,-12(fp)
   18628:	10c00104 	addi	r3,r2,4
   1862c:	e0fffd15 	stw	r3,-12(fp)
   18630:	e0fff017 	ldw	r3,-64(fp)
   18634:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
   18638:	e0bffd17 	ldw	r2,-12(fp)
   1863c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
   18640:	e0bff18b 	ldhu	r2,-58(fp)
   18644:	10800044 	addi	r2,r2,1
   18648:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
   1864c:	00000d06 	br	18684 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
   18650:	d0a85617 	ldw	r2,-24232(gp)
   18654:	00c00044 	movi	r3,1
   18658:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   1865c:	d0a85617 	ldw	r2,-24232(gp)
   18660:	e17ffc17 	ldw	r5,-16(fp)
   18664:	1009883a 	mov	r4,r2
   18668:	00192ec0 	call	192ec <OS_EventTaskRemoveMulti>
             }
			 break;
   1866c:	00000506 	br	18684 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
   18670:	d0a85617 	ldw	r2,-24232(gp)
   18674:	e17ffc17 	ldw	r5,-16(fp)
   18678:	1009883a 	mov	r4,r2
   1867c:	00192ec0 	call	192ec <OS_EventTaskRemoveMulti>
             break;
   18680:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
   18684:	d0a85617 	ldw	r2,-24232(gp)
   18688:	10800c43 	ldbu	r2,49(r2)
   1868c:	10803fcc 	andi	r2,r2,255
   18690:	10000326 	beq	r2,zero,186a0 <OSEventPendMulti+0x4f8>
   18694:	108000a0 	cmpeqi	r2,r2,2
   18698:	1000231e 	bne	r2,zero,18728 <OSEventPendMulti+0x580>
   1869c:	00002a06 	br	18748 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
   186a0:	e0bff017 	ldw	r2,-64(fp)
   186a4:	10800003 	ldbu	r2,0(r2)
   186a8:	10803fcc 	andi	r2,r2,255
   186ac:	0080100e 	bge	zero,r2,186f0 <OSEventPendMulti+0x548>
   186b0:	10c000d0 	cmplti	r3,r2,3
   186b4:	1800071e 	bne	r3,zero,186d4 <OSEventPendMulti+0x52c>
   186b8:	108000e0 	cmpeqi	r2,r2,3
   186bc:	10000c26 	beq	r2,zero,186f0 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
   186c0:	e0bffe17 	ldw	r2,-8(fp)
   186c4:	10c00104 	addi	r3,r2,4
   186c8:	e0fffe15 	stw	r3,-8(fp)
   186cc:	10000015 	stw	zero,0(r2)
                      break;
   186d0:	00001206 	br	1871c <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
   186d4:	e0bffe17 	ldw	r2,-8(fp)
   186d8:	10c00104 	addi	r3,r2,4
   186dc:	e0fffe15 	stw	r3,-8(fp)
   186e0:	d0e85617 	ldw	r3,-24232(gp)
   186e4:	18c00917 	ldw	r3,36(r3)
   186e8:	10c00015 	stw	r3,0(r2)
                      break;
   186ec:	00000b06 	br	1871c <OSEventPendMulti+0x574>
   186f0:	e0bff317 	ldw	r2,-52(fp)
   186f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   186f8:	e0bff817 	ldw	r2,-32(fp)
   186fc:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
   18700:	e0bffd17 	ldw	r2,-12(fp)
   18704:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
   18708:	e0800217 	ldw	r2,8(fp)
   1870c:	00c00044 	movi	r3,1
   18710:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
   18714:	e0bff18b 	ldhu	r2,-58(fp)
   18718:	00002206 	br	187a4 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
   1871c:	e0800217 	ldw	r2,8(fp)
   18720:	10000005 	stb	zero,0(r2)
             break;
   18724:	00001006 	br	18768 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
   18728:	e0bffe17 	ldw	r2,-8(fp)
   1872c:	10c00104 	addi	r3,r2,4
   18730:	e0fffe15 	stw	r3,-8(fp)
   18734:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
   18738:	e0800217 	ldw	r2,8(fp)
   1873c:	00c00384 	movi	r3,14
   18740:	10c00005 	stb	r3,0(r2)
             break;
   18744:	00000806 	br	18768 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
   18748:	e0bffe17 	ldw	r2,-8(fp)
   1874c:	10c00104 	addi	r3,r2,4
   18750:	e0fffe15 	stw	r3,-8(fp)
   18754:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
   18758:	e0800217 	ldw	r2,8(fp)
   1875c:	00c00284 	movi	r3,10
   18760:	10c00005 	stb	r3,0(r2)
             break;
   18764:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
   18768:	d0a85617 	ldw	r2,-24232(gp)
   1876c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
   18770:	d0a85617 	ldw	r2,-24232(gp)
   18774:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
   18778:	d0a85617 	ldw	r2,-24232(gp)
   1877c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   18780:	d0a85617 	ldw	r2,-24232(gp)
   18784:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
   18788:	d0a85617 	ldw	r2,-24232(gp)
   1878c:	10000915 	stw	zero,36(r2)
   18790:	e0bff317 	ldw	r2,-52(fp)
   18794:	e0bffa15 	stw	r2,-24(fp)
   18798:	e0bffa17 	ldw	r2,-24(fp)
   1879c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
   187a0:	e0bff18b 	ldhu	r2,-58(fp)
}
   187a4:	e037883a 	mov	sp,fp
   187a8:	dfc00117 	ldw	ra,4(sp)
   187ac:	df000017 	ldw	fp,0(sp)
   187b0:	dec00204 	addi	sp,sp,8
   187b4:	f800283a 	ret

000187b8 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
   187b8:	defffe04 	addi	sp,sp,-8
   187bc:	dfc00115 	stw	ra,4(sp)
   187c0:	df000015 	stw	fp,0(sp)
   187c4:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
   187c8:	0022ddc0 	call	22ddc <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
   187cc:	00195340 	call	19534 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
   187d0:	001957c0 	call	1957c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
   187d4:	00196e80 	call	196e8 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
   187d8:	00194540 	call	19454 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
   187dc:	001b5980 	call	1b598 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
   187e0:	001be980 	call	1be98 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
   187e4:	001cfc00 	call	1cfc0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
   187e8:	00195e80 	call	195e8 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
   187ec:	00196680 	call	19668 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
   187f0:	0022dfc0 	call	22dfc <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
   187f4:	0019f6c0 	call	19f6c <OSDebugInit>
#endif
}
   187f8:	0001883a 	nop
   187fc:	e037883a 	mov	sp,fp
   18800:	dfc00117 	ldw	ra,4(sp)
   18804:	df000017 	ldw	fp,0(sp)
   18808:	dec00204 	addi	sp,sp,8
   1880c:	f800283a 	ret

00018810 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
   18810:	deffff04 	addi	sp,sp,-4
   18814:	df000015 	stw	fp,0(sp)
   18818:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
   1881c:	d0a84743 	ldbu	r2,-24291(gp)
   18820:	10803fcc 	andi	r2,r2,255
   18824:	10800058 	cmpnei	r2,r2,1
   18828:	1000071e 	bne	r2,zero,18848 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
   1882c:	d0a85503 	ldbu	r2,-24236(gp)
   18830:	10803fcc 	andi	r2,r2,255
   18834:	10803fe0 	cmpeqi	r2,r2,255
   18838:	1000031e 	bne	r2,zero,18848 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
   1883c:	d0a85503 	ldbu	r2,-24236(gp)
   18840:	10800044 	addi	r2,r2,1
   18844:	d0a85505 	stb	r2,-24236(gp)
        }
    }
}
   18848:	0001883a 	nop
   1884c:	e037883a 	mov	sp,fp
   18850:	df000017 	ldw	fp,0(sp)
   18854:	dec00104 	addi	sp,sp,4
   18858:	f800283a 	ret

0001885c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
   1885c:	defffb04 	addi	sp,sp,-20
   18860:	dfc00415 	stw	ra,16(sp)
   18864:	df000315 	stw	fp,12(sp)
   18868:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1886c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
   18870:	d0a84743 	ldbu	r2,-24291(gp)
   18874:	10803fcc 	andi	r2,r2,255
   18878:	10800058 	cmpnei	r2,r2,1
   1887c:	10002f1e 	bne	r2,zero,1893c <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18880:	0005303a 	rdctl	r2,status
   18884:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18888:	e0ffff17 	ldw	r3,-4(fp)
   1888c:	00bfff84 	movi	r2,-2
   18890:	1884703a 	and	r2,r3,r2
   18894:	1001703a 	wrctl	status,r2
  
  return context;
   18898:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   1889c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
   188a0:	d0a85503 	ldbu	r2,-24236(gp)
   188a4:	10803fcc 	andi	r2,r2,255
   188a8:	10000326 	beq	r2,zero,188b8 <OSIntExit+0x5c>
            OSIntNesting--;
   188ac:	d0a85503 	ldbu	r2,-24236(gp)
   188b0:	10bfffc4 	addi	r2,r2,-1
   188b4:	d0a85505 	stb	r2,-24236(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
   188b8:	d0a85503 	ldbu	r2,-24236(gp)
   188bc:	10803fcc 	andi	r2,r2,255
   188c0:	10001a1e 	bne	r2,zero,1892c <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
   188c4:	d0a84703 	ldbu	r2,-24292(gp)
   188c8:	10803fcc 	andi	r2,r2,255
   188cc:	1000171e 	bne	r2,zero,1892c <OSIntExit+0xd0>
                OS_SchedNew();
   188d0:	00199580 	call	19958 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
   188d4:	d0e84903 	ldbu	r3,-24284(gp)
   188d8:	d0a84943 	ldbu	r2,-24283(gp)
   188dc:	18c03fcc 	andi	r3,r3,255
   188e0:	10803fcc 	andi	r2,r2,255
   188e4:	18801126 	beq	r3,r2,1892c <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
   188e8:	d0a84903 	ldbu	r2,-24284(gp)
   188ec:	10c03fcc 	andi	r3,r2,255
   188f0:	00800134 	movhi	r2,4
   188f4:	10a09804 	addi	r2,r2,-32160
   188f8:	18c7883a 	add	r3,r3,r3
   188fc:	18c7883a 	add	r3,r3,r3
   18900:	10c5883a 	add	r2,r2,r3
   18904:	10800017 	ldw	r2,0(r2)
   18908:	d0a85115 	stw	r2,-24252(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
   1890c:	d0a85117 	ldw	r2,-24252(gp)
   18910:	10c00e17 	ldw	r3,56(r2)
   18914:	18c00044 	addi	r3,r3,1
   18918:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
   1891c:	d0a84c17 	ldw	r2,-24272(gp)
   18920:	10800044 	addi	r2,r2,1
   18924:	d0a84c15 	stw	r2,-24272(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
   18928:	0022b080 	call	22b08 <OSCtxSw>
   1892c:	e0bffd17 	ldw	r2,-12(fp)
   18930:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18934:	e0bffe17 	ldw	r2,-8(fp)
   18938:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   1893c:	0001883a 	nop
   18940:	e037883a 	mov	sp,fp
   18944:	dfc00117 	ldw	ra,4(sp)
   18948:	df000017 	ldw	fp,0(sp)
   1894c:	dec00204 	addi	sp,sp,8
   18950:	f800283a 	ret

00018954 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
   18954:	defffc04 	addi	sp,sp,-16
   18958:	df000315 	stw	fp,12(sp)
   1895c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18960:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
   18964:	d0a84743 	ldbu	r2,-24291(gp)
   18968:	10803fcc 	andi	r2,r2,255
   1896c:	10800058 	cmpnei	r2,r2,1
   18970:	1000161e 	bne	r2,zero,189cc <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18974:	0005303a 	rdctl	r2,status
   18978:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1897c:	e0ffff17 	ldw	r3,-4(fp)
   18980:	00bfff84 	movi	r2,-2
   18984:	1884703a 	and	r2,r3,r2
   18988:	1001703a 	wrctl	status,r2
  
  return context;
   1898c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   18990:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
   18994:	d0a85503 	ldbu	r2,-24236(gp)
   18998:	10803fcc 	andi	r2,r2,255
   1899c:	1000071e 	bne	r2,zero,189bc <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
   189a0:	d0a84703 	ldbu	r2,-24292(gp)
   189a4:	10803fcc 	andi	r2,r2,255
   189a8:	10803fe0 	cmpeqi	r2,r2,255
   189ac:	1000031e 	bne	r2,zero,189bc <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
   189b0:	d0a84703 	ldbu	r2,-24292(gp)
   189b4:	10800044 	addi	r2,r2,1
   189b8:	d0a84705 	stb	r2,-24292(gp)
   189bc:	e0bffd17 	ldw	r2,-12(fp)
   189c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   189c4:	e0bffe17 	ldw	r2,-8(fp)
   189c8:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
   189cc:	0001883a 	nop
   189d0:	e037883a 	mov	sp,fp
   189d4:	df000017 	ldw	fp,0(sp)
   189d8:	dec00104 	addi	sp,sp,4
   189dc:	f800283a 	ret

000189e0 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
   189e0:	defff804 	addi	sp,sp,-32
   189e4:	dfc00715 	stw	ra,28(sp)
   189e8:	df000615 	stw	fp,24(sp)
   189ec:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   189f0:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
   189f4:	d0a84743 	ldbu	r2,-24291(gp)
   189f8:	10803fcc 	andi	r2,r2,255
   189fc:	10800058 	cmpnei	r2,r2,1
   18a00:	1000281e 	bne	r2,zero,18aa4 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18a04:	0005303a 	rdctl	r2,status
   18a08:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18a0c:	e0ffff17 	ldw	r3,-4(fp)
   18a10:	00bfff84 	movi	r2,-2
   18a14:	1884703a 	and	r2,r3,r2
   18a18:	1001703a 	wrctl	status,r2
  
  return context;
   18a1c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
   18a20:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
   18a24:	d0a84703 	ldbu	r2,-24292(gp)
   18a28:	10803fcc 	andi	r2,r2,255
   18a2c:	10001926 	beq	r2,zero,18a94 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
   18a30:	d0a84703 	ldbu	r2,-24292(gp)
   18a34:	10bfffc4 	addi	r2,r2,-1
   18a38:	d0a84705 	stb	r2,-24292(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
   18a3c:	d0a84703 	ldbu	r2,-24292(gp)
   18a40:	10803fcc 	andi	r2,r2,255
   18a44:	10000e1e 	bne	r2,zero,18a80 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
   18a48:	d0a85503 	ldbu	r2,-24236(gp)
   18a4c:	10803fcc 	andi	r2,r2,255
   18a50:	1000061e 	bne	r2,zero,18a6c <OSSchedUnlock+0x8c>
   18a54:	e0bffa17 	ldw	r2,-24(fp)
   18a58:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18a5c:	e0bffb17 	ldw	r2,-20(fp)
   18a60:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
   18a64:	00198880 	call	19888 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
   18a68:	00000e06 	br	18aa4 <OSSchedUnlock+0xc4>
   18a6c:	e0bffa17 	ldw	r2,-24(fp)
   18a70:	e0bffc15 	stw	r2,-16(fp)
   18a74:	e0bffc17 	ldw	r2,-16(fp)
   18a78:	1001703a 	wrctl	status,r2
   18a7c:	00000906 	br	18aa4 <OSSchedUnlock+0xc4>
   18a80:	e0bffa17 	ldw	r2,-24(fp)
   18a84:	e0bffd15 	stw	r2,-12(fp)
   18a88:	e0bffd17 	ldw	r2,-12(fp)
   18a8c:	1001703a 	wrctl	status,r2
   18a90:	00000406 	br	18aa4 <OSSchedUnlock+0xc4>
   18a94:	e0bffa17 	ldw	r2,-24(fp)
   18a98:	e0bffe15 	stw	r2,-8(fp)
   18a9c:	e0bffe17 	ldw	r2,-8(fp)
   18aa0:	1001703a 	wrctl	status,r2
   18aa4:	0001883a 	nop
   18aa8:	e037883a 	mov	sp,fp
   18aac:	dfc00117 	ldw	ra,4(sp)
   18ab0:	df000017 	ldw	fp,0(sp)
   18ab4:	dec00204 	addi	sp,sp,8
   18ab8:	f800283a 	ret

00018abc <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
   18abc:	defffe04 	addi	sp,sp,-8
   18ac0:	dfc00115 	stw	ra,4(sp)
   18ac4:	df000015 	stw	fp,0(sp)
   18ac8:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
   18acc:	d0a84743 	ldbu	r2,-24291(gp)
   18ad0:	10803fcc 	andi	r2,r2,255
   18ad4:	10000f1e 	bne	r2,zero,18b14 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
   18ad8:	00199580 	call	19958 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
   18adc:	d0a84903 	ldbu	r2,-24284(gp)
   18ae0:	d0a84945 	stb	r2,-24283(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
   18ae4:	d0a84903 	ldbu	r2,-24284(gp)
   18ae8:	10c03fcc 	andi	r3,r2,255
   18aec:	00800134 	movhi	r2,4
   18af0:	10a09804 	addi	r2,r2,-32160
   18af4:	18c7883a 	add	r3,r3,r3
   18af8:	18c7883a 	add	r3,r3,r3
   18afc:	10c5883a 	add	r2,r2,r3
   18b00:	10800017 	ldw	r2,0(r2)
   18b04:	d0a85115 	stw	r2,-24252(gp)
        OSTCBCur      = OSTCBHighRdy;
   18b08:	d0a85117 	ldw	r2,-24252(gp)
   18b0c:	d0a85615 	stw	r2,-24232(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
   18b10:	0022b940 	call	22b94 <OSStartHighRdy>
    }
}
   18b14:	0001883a 	nop
   18b18:	e037883a 	mov	sp,fp
   18b1c:	dfc00117 	ldw	ra,4(sp)
   18b20:	df000017 	ldw	fp,0(sp)
   18b24:	dec00204 	addi	sp,sp,8
   18b28:	f800283a 	ret

00018b2c <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
   18b2c:	defff904 	addi	sp,sp,-28
   18b30:	dfc00615 	stw	ra,24(sp)
   18b34:	df000515 	stw	fp,20(sp)
   18b38:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   18b3c:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
   18b40:	01000084 	movi	r4,2
   18b44:	001f2340 	call	1f234 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18b48:	0005303a 	rdctl	r2,status
   18b4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18b50:	e0fffc17 	ldw	r3,-16(fp)
   18b54:	00bfff84 	movi	r2,-2
   18b58:	1884703a 	and	r2,r3,r2
   18b5c:	1001703a 	wrctl	status,r2
  
  return context;
   18b60:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
   18b64:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
   18b68:	d0284815 	stw	zero,-24288(gp)
   18b6c:	e0bffb17 	ldw	r2,-20(fp)
   18b70:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18b74:	e0bffd17 	ldw	r2,-12(fp)
   18b78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
   18b7c:	0009883a 	mov	r4,zero
   18b80:	001f2340 	call	1f234 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18b84:	0005303a 	rdctl	r2,status
   18b88:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18b8c:	e0fffe17 	ldw	r3,-8(fp)
   18b90:	00bfff84 	movi	r2,-2
   18b94:	1884703a 	and	r2,r3,r2
   18b98:	1001703a 	wrctl	status,r2
  
  return context;
   18b9c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
   18ba0:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
   18ba4:	d0a84817 	ldw	r2,-24288(gp)
   18ba8:	d0a84d15 	stw	r2,-24268(gp)
    OSStatRdy    = OS_TRUE;
   18bac:	00800044 	movi	r2,1
   18bb0:	d0a85905 	stb	r2,-24220(gp)
   18bb4:	e0bffb17 	ldw	r2,-20(fp)
   18bb8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18bbc:	e0bfff17 	ldw	r2,-4(fp)
   18bc0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   18bc4:	0001883a 	nop
   18bc8:	e037883a 	mov	sp,fp
   18bcc:	dfc00117 	ldw	ra,4(sp)
   18bd0:	df000017 	ldw	fp,0(sp)
   18bd4:	dec00204 	addi	sp,sp,8
   18bd8:	f800283a 	ret

00018bdc <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
   18bdc:	defff704 	addi	sp,sp,-36
   18be0:	dfc00815 	stw	ra,32(sp)
   18be4:	df000715 	stw	fp,28(sp)
   18be8:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   18bec:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
   18bf0:	0022dbc0 	call	22dbc <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18bf4:	0005303a 	rdctl	r2,status
   18bf8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18bfc:	e0fffd17 	ldw	r3,-12(fp)
   18c00:	00bfff84 	movi	r2,-2
   18c04:	1884703a 	and	r2,r3,r2
   18c08:	1001703a 	wrctl	status,r2
  
  return context;
   18c0c:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
   18c10:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
   18c14:	d0a85717 	ldw	r2,-24228(gp)
   18c18:	10800044 	addi	r2,r2,1
   18c1c:	d0a85715 	stw	r2,-24228(gp)
   18c20:	e0bffb17 	ldw	r2,-20(fp)
   18c24:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18c28:	e0bfff17 	ldw	r2,-4(fp)
   18c2c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
   18c30:	d0a84743 	ldbu	r2,-24291(gp)
   18c34:	10803fcc 	andi	r2,r2,255
   18c38:	10800058 	cmpnei	r2,r2,1
   18c3c:	10006a1e 	bne	r2,zero,18de8 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
   18c40:	d0a84b03 	ldbu	r2,-24276(gp)
   18c44:	10803fcc 	andi	r2,r2,255
   18c48:	10c00060 	cmpeqi	r3,r2,1
   18c4c:	1800061e 	bne	r3,zero,18c68 <OSTimeTick+0x8c>
   18c50:	10c000a0 	cmpeqi	r3,r2,2
   18c54:	1800061e 	bne	r3,zero,18c70 <OSTimeTick+0x94>
   18c58:	10000a1e 	bne	r2,zero,18c84 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
   18c5c:	00800044 	movi	r2,1
   18c60:	e0bffa05 	stb	r2,-24(fp)
                 break;
   18c64:	00000b06 	br	18c94 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
   18c68:	e03ffa05 	stb	zero,-24(fp)
                 break;
   18c6c:	00000906 	br	18c94 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
   18c70:	00800044 	movi	r2,1
   18c74:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
   18c78:	00800044 	movi	r2,1
   18c7c:	d0a84b05 	stb	r2,-24276(gp)
                 break;
   18c80:	00000406 	br	18c94 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
   18c84:	00800044 	movi	r2,1
   18c88:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
   18c8c:	d0284b05 	stb	zero,-24276(gp)
                 break;
   18c90:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
   18c94:	e0bffa03 	ldbu	r2,-24(fp)
   18c98:	10005226 	beq	r2,zero,18de4 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
   18c9c:	d0a84a17 	ldw	r2,-24280(gp)
   18ca0:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   18ca4:	00004906 	br	18dcc <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   18ca8:	0005303a 	rdctl	r2,status
   18cac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   18cb0:	e0fffc17 	ldw	r3,-16(fp)
   18cb4:	00bfff84 	movi	r2,-2
   18cb8:	1884703a 	and	r2,r3,r2
   18cbc:	1001703a 	wrctl	status,r2
  
  return context;
   18cc0:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
   18cc4:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
   18cc8:	e0bff917 	ldw	r2,-28(fp)
   18ccc:	10800b8b 	ldhu	r2,46(r2)
   18cd0:	10bfffcc 	andi	r2,r2,65535
   18cd4:	10003626 	beq	r2,zero,18db0 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
   18cd8:	e0bff917 	ldw	r2,-28(fp)
   18cdc:	10800b8b 	ldhu	r2,46(r2)
   18ce0:	10bfffc4 	addi	r2,r2,-1
   18ce4:	1007883a 	mov	r3,r2
   18ce8:	e0bff917 	ldw	r2,-28(fp)
   18cec:	10c00b8d 	sth	r3,46(r2)
   18cf0:	e0bff917 	ldw	r2,-28(fp)
   18cf4:	10800b8b 	ldhu	r2,46(r2)
   18cf8:	10bfffcc 	andi	r2,r2,65535
   18cfc:	10002c1e 	bne	r2,zero,18db0 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   18d00:	e0bff917 	ldw	r2,-28(fp)
   18d04:	10800c03 	ldbu	r2,48(r2)
   18d08:	10803fcc 	andi	r2,r2,255
   18d0c:	10800dcc 	andi	r2,r2,55
   18d10:	10000b26 	beq	r2,zero,18d40 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
   18d14:	e0bff917 	ldw	r2,-28(fp)
   18d18:	10c00c03 	ldbu	r3,48(r2)
   18d1c:	00bff204 	movi	r2,-56
   18d20:	1884703a 	and	r2,r3,r2
   18d24:	1007883a 	mov	r3,r2
   18d28:	e0bff917 	ldw	r2,-28(fp)
   18d2c:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
   18d30:	e0bff917 	ldw	r2,-28(fp)
   18d34:	00c00044 	movi	r3,1
   18d38:	10c00c45 	stb	r3,49(r2)
   18d3c:	00000206 	br	18d48 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   18d40:	e0bff917 	ldw	r2,-28(fp)
   18d44:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
   18d48:	e0bff917 	ldw	r2,-28(fp)
   18d4c:	10800c03 	ldbu	r2,48(r2)
   18d50:	10803fcc 	andi	r2,r2,255
   18d54:	1080020c 	andi	r2,r2,8
   18d58:	1000151e 	bne	r2,zero,18db0 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
   18d5c:	e0bff917 	ldw	r2,-28(fp)
   18d60:	10c00d83 	ldbu	r3,54(r2)
   18d64:	d0a85303 	ldbu	r2,-24244(gp)
   18d68:	1884b03a 	or	r2,r3,r2
   18d6c:	d0a85305 	stb	r2,-24244(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   18d70:	e0bff917 	ldw	r2,-28(fp)
   18d74:	10800d03 	ldbu	r2,52(r2)
   18d78:	10c03fcc 	andi	r3,r2,255
   18d7c:	e0bff917 	ldw	r2,-28(fp)
   18d80:	10800d03 	ldbu	r2,52(r2)
   18d84:	11003fcc 	andi	r4,r2,255
   18d88:	d0a85344 	addi	r2,gp,-24243
   18d8c:	2085883a 	add	r2,r4,r2
   18d90:	11000003 	ldbu	r4,0(r2)
   18d94:	e0bff917 	ldw	r2,-28(fp)
   18d98:	10800d43 	ldbu	r2,53(r2)
   18d9c:	2084b03a 	or	r2,r4,r2
   18da0:	1009883a 	mov	r4,r2
   18da4:	d0a85344 	addi	r2,gp,-24243
   18da8:	1885883a 	add	r2,r3,r2
   18dac:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
   18db0:	e0bff917 	ldw	r2,-28(fp)
   18db4:	10800517 	ldw	r2,20(r2)
   18db8:	e0bff915 	stw	r2,-28(fp)
   18dbc:	e0bffb17 	ldw	r2,-20(fp)
   18dc0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   18dc4:	e0bffe17 	ldw	r2,-8(fp)
   18dc8:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
   18dcc:	e0bff917 	ldw	r2,-28(fp)
   18dd0:	10800c83 	ldbu	r2,50(r2)
   18dd4:	10803fcc 	andi	r2,r2,255
   18dd8:	10800518 	cmpnei	r2,r2,20
   18ddc:	103fb21e 	bne	r2,zero,18ca8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7018ca8>
   18de0:	00000106 	br	18de8 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
   18de4:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
   18de8:	e037883a 	mov	sp,fp
   18dec:	dfc00117 	ldw	ra,4(sp)
   18df0:	df000017 	ldw	fp,0(sp)
   18df4:	dec00204 	addi	sp,sp,8
   18df8:	f800283a 	ret

00018dfc <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
   18dfc:	deffff04 	addi	sp,sp,-4
   18e00:	df000015 	stw	fp,0(sp)
   18e04:	d839883a 	mov	fp,sp
    return (OS_VERSION);
   18e08:	00804784 	movi	r2,286
}
   18e0c:	e037883a 	mov	sp,fp
   18e10:	df000017 	ldw	fp,0(sp)
   18e14:	dec00104 	addi	sp,sp,4
   18e18:	f800283a 	ret

00018e1c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
   18e1c:	deffff04 	addi	sp,sp,-4
   18e20:	df000015 	stw	fp,0(sp)
   18e24:	d839883a 	mov	fp,sp
}
   18e28:	0001883a 	nop
   18e2c:	e037883a 	mov	sp,fp
   18e30:	df000017 	ldw	fp,0(sp)
   18e34:	dec00104 	addi	sp,sp,4
   18e38:	f800283a 	ret

00018e3c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
   18e3c:	defff804 	addi	sp,sp,-32
   18e40:	dfc00715 	stw	ra,28(sp)
   18e44:	df000615 	stw	fp,24(sp)
   18e48:	df000604 	addi	fp,sp,24
   18e4c:	e13ffc15 	stw	r4,-16(fp)
   18e50:	e17ffd15 	stw	r5,-12(fp)
   18e54:	3007883a 	mov	r3,r6
   18e58:	3805883a 	mov	r2,r7
   18e5c:	e0fffe05 	stb	r3,-8(fp)
   18e60:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
   18e64:	e0bffc17 	ldw	r2,-16(fp)
   18e68:	10800283 	ldbu	r2,10(r2)
   18e6c:	10c03fcc 	andi	r3,r2,255
   18e70:	008000b4 	movhi	r2,2
   18e74:	10935704 	addi	r2,r2,19804
   18e78:	10c5883a 	add	r2,r2,r3
   18e7c:	10800003 	ldbu	r2,0(r2)
   18e80:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
   18e84:	e0bffa03 	ldbu	r2,-24(fp)
   18e88:	e0fffc17 	ldw	r3,-16(fp)
   18e8c:	1885883a 	add	r2,r3,r2
   18e90:	108002c4 	addi	r2,r2,11
   18e94:	10800003 	ldbu	r2,0(r2)
   18e98:	10c03fcc 	andi	r3,r2,255
   18e9c:	008000b4 	movhi	r2,2
   18ea0:	10935704 	addi	r2,r2,19804
   18ea4:	10c5883a 	add	r2,r2,r3
   18ea8:	10800003 	ldbu	r2,0(r2)
   18eac:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
   18eb0:	e0bffa03 	ldbu	r2,-24(fp)
   18eb4:	100490fa 	slli	r2,r2,3
   18eb8:	1007883a 	mov	r3,r2
   18ebc:	e0bffa43 	ldbu	r2,-23(fp)
   18ec0:	1885883a 	add	r2,r3,r2
   18ec4:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
   18ec8:	e0fffa83 	ldbu	r3,-22(fp)
   18ecc:	00800134 	movhi	r2,4
   18ed0:	10a09804 	addi	r2,r2,-32160
   18ed4:	18c7883a 	add	r3,r3,r3
   18ed8:	18c7883a 	add	r3,r3,r3
   18edc:	10c5883a 	add	r2,r2,r3
   18ee0:	10800017 	ldw	r2,0(r2)
   18ee4:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
   18ee8:	e0bffb17 	ldw	r2,-20(fp)
   18eec:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
   18ef0:	e0bffb17 	ldw	r2,-20(fp)
   18ef4:	e0fffd17 	ldw	r3,-12(fp)
   18ef8:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
   18efc:	e0bffb17 	ldw	r2,-20(fp)
   18f00:	10800c03 	ldbu	r2,48(r2)
   18f04:	1007883a 	mov	r3,r2
   18f08:	e0bffe03 	ldbu	r2,-8(fp)
   18f0c:	0084303a 	nor	r2,zero,r2
   18f10:	1884703a 	and	r2,r3,r2
   18f14:	1007883a 	mov	r3,r2
   18f18:	e0bffb17 	ldw	r2,-20(fp)
   18f1c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
   18f20:	e0bffb17 	ldw	r2,-20(fp)
   18f24:	e0ffff03 	ldbu	r3,-4(fp)
   18f28:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
   18f2c:	e0bffb17 	ldw	r2,-20(fp)
   18f30:	10800c03 	ldbu	r2,48(r2)
   18f34:	10803fcc 	andi	r2,r2,255
   18f38:	1080020c 	andi	r2,r2,8
   18f3c:	1000111e 	bne	r2,zero,18f84 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
   18f40:	e0bffb17 	ldw	r2,-20(fp)
   18f44:	10c00d83 	ldbu	r3,54(r2)
   18f48:	d0a85303 	ldbu	r2,-24244(gp)
   18f4c:	1884b03a 	or	r2,r3,r2
   18f50:	d0a85305 	stb	r2,-24244(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
   18f54:	e0fffa03 	ldbu	r3,-24(fp)
   18f58:	e13ffa03 	ldbu	r4,-24(fp)
   18f5c:	d0a85344 	addi	r2,gp,-24243
   18f60:	2085883a 	add	r2,r4,r2
   18f64:	11000003 	ldbu	r4,0(r2)
   18f68:	e0bffb17 	ldw	r2,-20(fp)
   18f6c:	10800d43 	ldbu	r2,53(r2)
   18f70:	2084b03a 	or	r2,r4,r2
   18f74:	1009883a 	mov	r4,r2
   18f78:	d0a85344 	addi	r2,gp,-24243
   18f7c:	1885883a 	add	r2,r3,r2
   18f80:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
   18f84:	e17ffc17 	ldw	r5,-16(fp)
   18f88:	e13ffb17 	ldw	r4,-20(fp)
   18f8c:	00192340 	call	19234 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
   18f90:	e0bffb17 	ldw	r2,-20(fp)
   18f94:	10800817 	ldw	r2,32(r2)
   18f98:	10000826 	beq	r2,zero,18fbc <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   18f9c:	e0bffb17 	ldw	r2,-20(fp)
   18fa0:	10800817 	ldw	r2,32(r2)
   18fa4:	100b883a 	mov	r5,r2
   18fa8:	e13ffb17 	ldw	r4,-20(fp)
   18fac:	00192ec0 	call	192ec <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
   18fb0:	e0bffb17 	ldw	r2,-20(fp)
   18fb4:	e0fffc17 	ldw	r3,-16(fp)
   18fb8:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
   18fbc:	e0bffa83 	ldbu	r2,-22(fp)
}
   18fc0:	e037883a 	mov	sp,fp
   18fc4:	dfc00117 	ldw	ra,4(sp)
   18fc8:	df000017 	ldw	fp,0(sp)
   18fcc:	dec00204 	addi	sp,sp,8
   18fd0:	f800283a 	ret

00018fd4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
   18fd4:	defffd04 	addi	sp,sp,-12
   18fd8:	df000215 	stw	fp,8(sp)
   18fdc:	df000204 	addi	fp,sp,8
   18fe0:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
   18fe4:	d0a85617 	ldw	r2,-24232(gp)
   18fe8:	e0ffff17 	ldw	r3,-4(fp)
   18fec:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
   18ff0:	d0a85617 	ldw	r2,-24232(gp)
   18ff4:	10800d03 	ldbu	r2,52(r2)
   18ff8:	10803fcc 	andi	r2,r2,255
   18ffc:	d0e85617 	ldw	r3,-24232(gp)
   19000:	18c00d03 	ldbu	r3,52(r3)
   19004:	18c03fcc 	andi	r3,r3,255
   19008:	e13fff17 	ldw	r4,-4(fp)
   1900c:	20c7883a 	add	r3,r4,r3
   19010:	18c002c4 	addi	r3,r3,11
   19014:	19000003 	ldbu	r4,0(r3)
   19018:	d0e85617 	ldw	r3,-24232(gp)
   1901c:	18c00d43 	ldbu	r3,53(r3)
   19020:	20c6b03a 	or	r3,r4,r3
   19024:	1809883a 	mov	r4,r3
   19028:	e0ffff17 	ldw	r3,-4(fp)
   1902c:	1885883a 	add	r2,r3,r2
   19030:	108002c4 	addi	r2,r2,11
   19034:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   19038:	e0bfff17 	ldw	r2,-4(fp)
   1903c:	10c00283 	ldbu	r3,10(r2)
   19040:	d0a85617 	ldw	r2,-24232(gp)
   19044:	10800d83 	ldbu	r2,54(r2)
   19048:	1884b03a 	or	r2,r3,r2
   1904c:	1007883a 	mov	r3,r2
   19050:	e0bfff17 	ldw	r2,-4(fp)
   19054:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   19058:	d0a85617 	ldw	r2,-24232(gp)
   1905c:	10800d03 	ldbu	r2,52(r2)
   19060:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   19064:	e0fffe03 	ldbu	r3,-8(fp)
   19068:	e13ffe03 	ldbu	r4,-8(fp)
   1906c:	d0a85344 	addi	r2,gp,-24243
   19070:	2085883a 	add	r2,r4,r2
   19074:	10800003 	ldbu	r2,0(r2)
   19078:	1009883a 	mov	r4,r2
   1907c:	d0a85617 	ldw	r2,-24232(gp)
   19080:	10800d43 	ldbu	r2,53(r2)
   19084:	0084303a 	nor	r2,zero,r2
   19088:	2084703a 	and	r2,r4,r2
   1908c:	1009883a 	mov	r4,r2
   19090:	d0a85344 	addi	r2,gp,-24243
   19094:	1885883a 	add	r2,r3,r2
   19098:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1909c:	e0fffe03 	ldbu	r3,-8(fp)
   190a0:	d0a85344 	addi	r2,gp,-24243
   190a4:	1885883a 	add	r2,r3,r2
   190a8:	10800003 	ldbu	r2,0(r2)
   190ac:	10803fcc 	andi	r2,r2,255
   190b0:	1000071e 	bne	r2,zero,190d0 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   190b4:	d0a85617 	ldw	r2,-24232(gp)
   190b8:	10800d83 	ldbu	r2,54(r2)
   190bc:	0084303a 	nor	r2,zero,r2
   190c0:	1007883a 	mov	r3,r2
   190c4:	d0a85303 	ldbu	r2,-24244(gp)
   190c8:	1884703a 	and	r2,r3,r2
   190cc:	d0a85305 	stb	r2,-24244(gp)
    }
}
   190d0:	0001883a 	nop
   190d4:	e037883a 	mov	sp,fp
   190d8:	df000017 	ldw	fp,0(sp)
   190dc:	dec00104 	addi	sp,sp,4
   190e0:	f800283a 	ret

000190e4 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
   190e4:	defffb04 	addi	sp,sp,-20
   190e8:	df000415 	stw	fp,16(sp)
   190ec:	df000404 	addi	fp,sp,16
   190f0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
   190f4:	d0a85617 	ldw	r2,-24232(gp)
   190f8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
   190fc:	d0a85617 	ldw	r2,-24232(gp)
   19100:	e0ffff17 	ldw	r3,-4(fp)
   19104:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
   19108:	e0bfff17 	ldw	r2,-4(fp)
   1910c:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
   19110:	e0bffc17 	ldw	r2,-16(fp)
   19114:	10800017 	ldw	r2,0(r2)
   19118:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   1911c:	00002006 	br	191a0 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
   19120:	d0a85617 	ldw	r2,-24232(gp)
   19124:	10800d03 	ldbu	r2,52(r2)
   19128:	10803fcc 	andi	r2,r2,255
   1912c:	d0e85617 	ldw	r3,-24232(gp)
   19130:	18c00d03 	ldbu	r3,52(r3)
   19134:	18c03fcc 	andi	r3,r3,255
   19138:	e13ffd17 	ldw	r4,-12(fp)
   1913c:	20c7883a 	add	r3,r4,r3
   19140:	18c002c4 	addi	r3,r3,11
   19144:	19000003 	ldbu	r4,0(r3)
   19148:	d0e85617 	ldw	r3,-24232(gp)
   1914c:	18c00d43 	ldbu	r3,53(r3)
   19150:	20c6b03a 	or	r3,r4,r3
   19154:	1809883a 	mov	r4,r3
   19158:	e0fffd17 	ldw	r3,-12(fp)
   1915c:	1885883a 	add	r2,r3,r2
   19160:	108002c4 	addi	r2,r2,11
   19164:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
   19168:	e0bffd17 	ldw	r2,-12(fp)
   1916c:	10c00283 	ldbu	r3,10(r2)
   19170:	d0a85617 	ldw	r2,-24232(gp)
   19174:	10800d83 	ldbu	r2,54(r2)
   19178:	1884b03a 	or	r2,r3,r2
   1917c:	1007883a 	mov	r3,r2
   19180:	e0bffd17 	ldw	r2,-12(fp)
   19184:	10c00285 	stb	r3,10(r2)
        pevents++;
   19188:	e0bffc17 	ldw	r2,-16(fp)
   1918c:	10800104 	addi	r2,r2,4
   19190:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
   19194:	e0bffc17 	ldw	r2,-16(fp)
   19198:	10800017 	ldw	r2,0(r2)
   1919c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
   191a0:	e0bffd17 	ldw	r2,-12(fp)
   191a4:	103fde1e 	bne	r2,zero,19120 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019120>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
   191a8:	d0a85617 	ldw	r2,-24232(gp)
   191ac:	10800d03 	ldbu	r2,52(r2)
   191b0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
   191b4:	e0fffe03 	ldbu	r3,-8(fp)
   191b8:	e13ffe03 	ldbu	r4,-8(fp)
   191bc:	d0a85344 	addi	r2,gp,-24243
   191c0:	2085883a 	add	r2,r4,r2
   191c4:	10800003 	ldbu	r2,0(r2)
   191c8:	1009883a 	mov	r4,r2
   191cc:	d0a85617 	ldw	r2,-24232(gp)
   191d0:	10800d43 	ldbu	r2,53(r2)
   191d4:	0084303a 	nor	r2,zero,r2
   191d8:	2084703a 	and	r2,r4,r2
   191dc:	1009883a 	mov	r4,r2
   191e0:	d0a85344 	addi	r2,gp,-24243
   191e4:	1885883a 	add	r2,r3,r2
   191e8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   191ec:	e0fffe03 	ldbu	r3,-8(fp)
   191f0:	d0a85344 	addi	r2,gp,-24243
   191f4:	1885883a 	add	r2,r3,r2
   191f8:	10800003 	ldbu	r2,0(r2)
   191fc:	10803fcc 	andi	r2,r2,255
   19200:	1000071e 	bne	r2,zero,19220 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
   19204:	d0a85617 	ldw	r2,-24232(gp)
   19208:	10800d83 	ldbu	r2,54(r2)
   1920c:	0084303a 	nor	r2,zero,r2
   19210:	1007883a 	mov	r3,r2
   19214:	d0a85303 	ldbu	r2,-24244(gp)
   19218:	1884703a 	and	r2,r3,r2
   1921c:	d0a85305 	stb	r2,-24244(gp)
    }
}
   19220:	0001883a 	nop
   19224:	e037883a 	mov	sp,fp
   19228:	df000017 	ldw	fp,0(sp)
   1922c:	dec00104 	addi	sp,sp,4
   19230:	f800283a 	ret

00019234 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
   19234:	defffc04 	addi	sp,sp,-16
   19238:	df000315 	stw	fp,12(sp)
   1923c:	df000304 	addi	fp,sp,12
   19240:	e13ffe15 	stw	r4,-8(fp)
   19244:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
   19248:	e0bffe17 	ldw	r2,-8(fp)
   1924c:	10800d03 	ldbu	r2,52(r2)
   19250:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
   19254:	e0bffd03 	ldbu	r2,-12(fp)
   19258:	e0fffd03 	ldbu	r3,-12(fp)
   1925c:	e13fff17 	ldw	r4,-4(fp)
   19260:	20c7883a 	add	r3,r4,r3
   19264:	18c002c4 	addi	r3,r3,11
   19268:	18c00003 	ldbu	r3,0(r3)
   1926c:	1809883a 	mov	r4,r3
   19270:	e0fffe17 	ldw	r3,-8(fp)
   19274:	18c00d43 	ldbu	r3,53(r3)
   19278:	00c6303a 	nor	r3,zero,r3
   1927c:	20c6703a 	and	r3,r4,r3
   19280:	1809883a 	mov	r4,r3
   19284:	e0ffff17 	ldw	r3,-4(fp)
   19288:	1885883a 	add	r2,r3,r2
   1928c:	108002c4 	addi	r2,r2,11
   19290:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
   19294:	e0bffd03 	ldbu	r2,-12(fp)
   19298:	e0ffff17 	ldw	r3,-4(fp)
   1929c:	1885883a 	add	r2,r3,r2
   192a0:	108002c4 	addi	r2,r2,11
   192a4:	10800003 	ldbu	r2,0(r2)
   192a8:	10803fcc 	andi	r2,r2,255
   192ac:	10000a1e 	bne	r2,zero,192d8 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
   192b0:	e0bfff17 	ldw	r2,-4(fp)
   192b4:	10800283 	ldbu	r2,10(r2)
   192b8:	1007883a 	mov	r3,r2
   192bc:	e0bffe17 	ldw	r2,-8(fp)
   192c0:	10800d83 	ldbu	r2,54(r2)
   192c4:	0084303a 	nor	r2,zero,r2
   192c8:	1884703a 	and	r2,r3,r2
   192cc:	1007883a 	mov	r3,r2
   192d0:	e0bfff17 	ldw	r2,-4(fp)
   192d4:	10c00285 	stb	r3,10(r2)
    }
}
   192d8:	0001883a 	nop
   192dc:	e037883a 	mov	sp,fp
   192e0:	df000017 	ldw	fp,0(sp)
   192e4:	dec00104 	addi	sp,sp,4
   192e8:	f800283a 	ret

000192ec <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
   192ec:	defffa04 	addi	sp,sp,-24
   192f0:	df000515 	stw	fp,20(sp)
   192f4:	df000504 	addi	fp,sp,20
   192f8:	e13ffe15 	stw	r4,-8(fp)
   192fc:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
   19300:	e0bffe17 	ldw	r2,-8(fp)
   19304:	10800d03 	ldbu	r2,52(r2)
   19308:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
   1930c:	e0bffe17 	ldw	r2,-8(fp)
   19310:	10800d83 	ldbu	r2,54(r2)
   19314:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
   19318:	e0bffe17 	ldw	r2,-8(fp)
   1931c:	10800d43 	ldbu	r2,53(r2)
   19320:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
   19324:	e0bfff17 	ldw	r2,-4(fp)
   19328:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
   1932c:	e0bffb17 	ldw	r2,-20(fp)
   19330:	10800017 	ldw	r2,0(r2)
   19334:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   19338:	00002506 	br	193d0 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
   1933c:	e0bffd03 	ldbu	r2,-12(fp)
   19340:	e0fffd03 	ldbu	r3,-12(fp)
   19344:	e13ffc17 	ldw	r4,-16(fp)
   19348:	20c7883a 	add	r3,r4,r3
   1934c:	18c002c4 	addi	r3,r3,11
   19350:	18c00003 	ldbu	r3,0(r3)
   19354:	1809883a 	mov	r4,r3
   19358:	e0fffd83 	ldbu	r3,-10(fp)
   1935c:	00c6303a 	nor	r3,zero,r3
   19360:	20c6703a 	and	r3,r4,r3
   19364:	1809883a 	mov	r4,r3
   19368:	e0fffc17 	ldw	r3,-16(fp)
   1936c:	1885883a 	add	r2,r3,r2
   19370:	108002c4 	addi	r2,r2,11
   19374:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
   19378:	e0bffd03 	ldbu	r2,-12(fp)
   1937c:	e0fffc17 	ldw	r3,-16(fp)
   19380:	1885883a 	add	r2,r3,r2
   19384:	108002c4 	addi	r2,r2,11
   19388:	10800003 	ldbu	r2,0(r2)
   1938c:	10803fcc 	andi	r2,r2,255
   19390:	1000091e 	bne	r2,zero,193b8 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
   19394:	e0bffc17 	ldw	r2,-16(fp)
   19398:	10800283 	ldbu	r2,10(r2)
   1939c:	1007883a 	mov	r3,r2
   193a0:	e0bffd43 	ldbu	r2,-11(fp)
   193a4:	0084303a 	nor	r2,zero,r2
   193a8:	1884703a 	and	r2,r3,r2
   193ac:	1007883a 	mov	r3,r2
   193b0:	e0bffc17 	ldw	r2,-16(fp)
   193b4:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
   193b8:	e0bffb17 	ldw	r2,-20(fp)
   193bc:	10800104 	addi	r2,r2,4
   193c0:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
   193c4:	e0bffb17 	ldw	r2,-20(fp)
   193c8:	10800017 	ldw	r2,0(r2)
   193cc:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
   193d0:	e0bffc17 	ldw	r2,-16(fp)
   193d4:	103fd91e 	bne	r2,zero,1933c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701933c>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
   193d8:	0001883a 	nop
   193dc:	e037883a 	mov	sp,fp
   193e0:	df000017 	ldw	fp,0(sp)
   193e4:	dec00104 	addi	sp,sp,4
   193e8:	f800283a 	ret

000193ec <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
   193ec:	defffc04 	addi	sp,sp,-16
   193f0:	df000315 	stw	fp,12(sp)
   193f4:	df000304 	addi	fp,sp,12
   193f8:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
   193fc:	e0bfff17 	ldw	r2,-4(fp)
   19400:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
   19404:	e0bfff17 	ldw	r2,-4(fp)
   19408:	108002c4 	addi	r2,r2,11
   1940c:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   19410:	e03ffe05 	stb	zero,-8(fp)
   19414:	00000706 	br	19434 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
   19418:	e0bffd17 	ldw	r2,-12(fp)
   1941c:	10c00044 	addi	r3,r2,1
   19420:	e0fffd15 	stw	r3,-12(fp)
   19424:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   19428:	e0bffe03 	ldbu	r2,-8(fp)
   1942c:	10800044 	addi	r2,r2,1
   19430:	e0bffe05 	stb	r2,-8(fp)
   19434:	e0bffe03 	ldbu	r2,-8(fp)
   19438:	108000f0 	cmpltui	r2,r2,3
   1943c:	103ff61e 	bne	r2,zero,19418 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019418>
        *ptbl++ = 0;
    }
}
   19440:	0001883a 	nop
   19444:	e037883a 	mov	sp,fp
   19448:	df000017 	ldw	fp,0(sp)
   1944c:	dec00104 	addi	sp,sp,4
   19450:	f800283a 	ret

00019454 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
   19454:	defffb04 	addi	sp,sp,-20
   19458:	dfc00415 	stw	ra,16(sp)
   1945c:	df000315 	stw	fp,12(sp)
   19460:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
   19464:	0142d004 	movi	r5,2880
   19468:	010000f4 	movhi	r4,3
   1946c:	211c8404 	addi	r4,r4,29200
   19470:	00197cc0 	call	197cc <OS_MemClr>
    pevent1 = &OSEventTbl[0];
   19474:	008000f4 	movhi	r2,3
   19478:	109c8404 	addi	r2,r2,29200
   1947c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
   19480:	008000f4 	movhi	r2,3
   19484:	109c9004 	addi	r2,r2,29248
   19488:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   1948c:	e03ffd0d 	sth	zero,-12(fp)
   19490:	00001306 	br	194e0 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
   19494:	e0bffe17 	ldw	r2,-8(fp)
   19498:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
   1949c:	e0bffe17 	ldw	r2,-8(fp)
   194a0:	e0ffff17 	ldw	r3,-4(fp)
   194a4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
   194a8:	e0bffe17 	ldw	r2,-8(fp)
   194ac:	00c00fc4 	movi	r3,63
   194b0:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
   194b4:	e0bffe17 	ldw	r2,-8(fp)
   194b8:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
   194bc:	e0bffe17 	ldw	r2,-8(fp)
   194c0:	10800c04 	addi	r2,r2,48
   194c4:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
   194c8:	e0bfff17 	ldw	r2,-4(fp)
   194cc:	10800c04 	addi	r2,r2,48
   194d0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
   194d4:	e0bffd0b 	ldhu	r2,-12(fp)
   194d8:	10800044 	addi	r2,r2,1
   194dc:	e0bffd0d 	sth	r2,-12(fp)
   194e0:	e0bffd0b 	ldhu	r2,-12(fp)
   194e4:	10800ef0 	cmpltui	r2,r2,59
   194e8:	103fea1e 	bne	r2,zero,19494 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019494>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
   194ec:	e0bffe17 	ldw	r2,-8(fp)
   194f0:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
   194f4:	e0bffe17 	ldw	r2,-8(fp)
   194f8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
   194fc:	e0bffe17 	ldw	r2,-8(fp)
   19500:	00c00fc4 	movi	r3,63
   19504:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
   19508:	e0bffe17 	ldw	r2,-8(fp)
   1950c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
   19510:	008000f4 	movhi	r2,3
   19514:	109c8404 	addi	r2,r2,29200
   19518:	d0a85415 	stw	r2,-24240(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
   1951c:	0001883a 	nop
   19520:	e037883a 	mov	sp,fp
   19524:	dfc00117 	ldw	ra,4(sp)
   19528:	df000017 	ldw	fp,0(sp)
   1952c:	dec00204 	addi	sp,sp,8
   19530:	f800283a 	ret

00019534 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
   19534:	deffff04 	addi	sp,sp,-4
   19538:	df000015 	stw	fp,0(sp)
   1953c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
   19540:	d0285715 	stw	zero,-24228(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
   19544:	d0285505 	stb	zero,-24236(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
   19548:	d0284705 	stb	zero,-24292(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
   1954c:	d0284f45 	stb	zero,-24259(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
   19550:	d0284745 	stb	zero,-24291(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
   19554:	d0284c15 	stw	zero,-24272(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
   19558:	d0284815 	stw	zero,-24288(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
   1955c:	d0285a15 	stw	zero,-24216(gp)
    OSIdleCtrMax  = 0L;
   19560:	d0284d15 	stw	zero,-24268(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
   19564:	d0285905 	stb	zero,-24220(gp)
#endif
}
   19568:	0001883a 	nop
   1956c:	e037883a 	mov	sp,fp
   19570:	df000017 	ldw	fp,0(sp)
   19574:	dec00104 	addi	sp,sp,4
   19578:	f800283a 	ret

0001957c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
   1957c:	defffd04 	addi	sp,sp,-12
   19580:	df000215 	stw	fp,8(sp)
   19584:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
   19588:	d0285305 	stb	zero,-24244(gp)
    prdytbl       = &OSRdyTbl[0];
   1958c:	d0a85344 	addi	r2,gp,-24243
   19590:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   19594:	e03ffe05 	stb	zero,-8(fp)
   19598:	00000706 	br	195b8 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
   1959c:	e0bfff17 	ldw	r2,-4(fp)
   195a0:	10c00044 	addi	r3,r2,1
   195a4:	e0ffff15 	stw	r3,-4(fp)
   195a8:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
   195ac:	e0bffe03 	ldbu	r2,-8(fp)
   195b0:	10800044 	addi	r2,r2,1
   195b4:	e0bffe05 	stb	r2,-8(fp)
   195b8:	e0bffe03 	ldbu	r2,-8(fp)
   195bc:	108000f0 	cmpltui	r2,r2,3
   195c0:	103ff61e 	bne	r2,zero,1959c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701959c>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
   195c4:	d0284945 	stb	zero,-24283(gp)
    OSPrioHighRdy = 0;
   195c8:	d0284905 	stb	zero,-24284(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
   195cc:	d0285115 	stw	zero,-24252(gp)
    OSTCBCur      = (OS_TCB *)0;
   195d0:	d0285615 	stw	zero,-24232(gp)
}
   195d4:	0001883a 	nop
   195d8:	e037883a 	mov	sp,fp
   195dc:	df000017 	ldw	fp,0(sp)
   195e0:	dec00104 	addi	sp,sp,4
   195e4:	f800283a 	ret

000195e8 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
   195e8:	defff804 	addi	sp,sp,-32
   195ec:	dfc00715 	stw	ra,28(sp)
   195f0:	df000615 	stw	fp,24(sp)
   195f4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
   195f8:	008000c4 	movi	r2,3
   195fc:	d8800415 	stw	r2,16(sp)
   19600:	d8000315 	stw	zero,12(sp)
   19604:	00808004 	movi	r2,512
   19608:	d8800215 	stw	r2,8(sp)
   1960c:	008000f4 	movhi	r2,3
   19610:	109a8404 	addi	r2,r2,27152
   19614:	d8800115 	stw	r2,4(sp)
   19618:	00bfffd4 	movui	r2,65535
   1961c:	d8800015 	stw	r2,0(sp)
   19620:	01c00504 	movi	r7,20
   19624:	018000f4 	movhi	r6,3
   19628:	319c8304 	addi	r6,r6,29196
   1962c:	000b883a 	mov	r5,zero
   19630:	010000b4 	movhi	r4,2
   19634:	2126a504 	addi	r4,r4,-25964
   19638:	001e1640 	call	1e164 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
   1963c:	e1bfff04 	addi	r6,fp,-4
   19640:	014000b4 	movhi	r5,2
   19644:	29539704 	addi	r5,r5,20060
   19648:	01000504 	movi	r4,20
   1964c:	001e9740 	call	1e974 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
   19650:	0001883a 	nop
   19654:	e037883a 	mov	sp,fp
   19658:	dfc00117 	ldw	ra,4(sp)
   1965c:	df000017 	ldw	fp,0(sp)
   19660:	dec00204 	addi	sp,sp,8
   19664:	f800283a 	ret

00019668 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
   19668:	defff804 	addi	sp,sp,-32
   1966c:	dfc00715 	stw	ra,28(sp)
   19670:	df000615 	stw	fp,24(sp)
   19674:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
   19678:	008000c4 	movi	r2,3
   1967c:	d8800415 	stw	r2,16(sp)
   19680:	d8000315 	stw	zero,12(sp)
   19684:	00808004 	movi	r2,512
   19688:	d8800215 	stw	r2,8(sp)
   1968c:	008000f4 	movhi	r2,3
   19690:	10980c04 	addi	r2,r2,24624
   19694:	d8800115 	stw	r2,4(sp)
   19698:	00bfff94 	movui	r2,65534
   1969c:	d8800015 	stw	r2,0(sp)
   196a0:	01c004c4 	movi	r7,19
   196a4:	018000f4 	movhi	r6,3
   196a8:	319a0b04 	addi	r6,r6,26668
   196ac:	000b883a 	mov	r5,zero
   196b0:	010000b4 	movhi	r4,2
   196b4:	2126bc04 	addi	r4,r4,-25872
   196b8:	001e1640 	call	1e164 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
   196bc:	e1bfff04 	addi	r6,fp,-4
   196c0:	014000b4 	movhi	r5,2
   196c4:	29539b04 	addi	r5,r5,20076
   196c8:	010004c4 	movi	r4,19
   196cc:	001e9740 	call	1e974 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
   196d0:	0001883a 	nop
   196d4:	e037883a 	mov	sp,fp
   196d8:	dfc00117 	ldw	ra,4(sp)
   196dc:	df000017 	ldw	fp,0(sp)
   196e0:	dec00204 	addi	sp,sp,8
   196e4:	f800283a 	ret

000196e8 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
   196e8:	defffb04 	addi	sp,sp,-20
   196ec:	dfc00415 	stw	ra,16(sp)
   196f0:	df000315 	stw	fp,12(sp)
   196f4:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
   196f8:	01414404 	movi	r5,1296
   196fc:	010000f4 	movhi	r4,3
   19700:	211f5404 	addi	r4,r4,32080
   19704:	00197cc0 	call	197cc <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
   19708:	01401504 	movi	r5,84
   1970c:	01000134 	movhi	r4,4
   19710:	21209804 	addi	r4,r4,-32160
   19714:	00197cc0 	call	197cc <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
   19718:	008000f4 	movhi	r2,3
   1971c:	109f5404 	addi	r2,r2,32080
   19720:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
   19724:	008000f4 	movhi	r2,3
   19728:	109f6f04 	addi	r2,r2,32188
   1972c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   19730:	e03ffd05 	stb	zero,-12(fp)
   19734:	00001106 	br	1977c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
   19738:	e0bffe17 	ldw	r2,-8(fp)
   1973c:	e0ffff17 	ldw	r3,-4(fp)
   19740:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
   19744:	e0bffe17 	ldw	r2,-8(fp)
   19748:	00c00fc4 	movi	r3,63
   1974c:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   19750:	e0bffe17 	ldw	r2,-8(fp)
   19754:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
   19758:	e0bffe17 	ldw	r2,-8(fp)
   1975c:	10801b04 	addi	r2,r2,108
   19760:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
   19764:	e0bfff17 	ldw	r2,-4(fp)
   19768:	10801b04 	addi	r2,r2,108
   1976c:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
   19770:	e0bffd03 	ldbu	r2,-12(fp)
   19774:	10800044 	addi	r2,r2,1
   19778:	e0bffd05 	stb	r2,-12(fp)
   1977c:	e0bffd03 	ldbu	r2,-12(fp)
   19780:	108002f0 	cmpltui	r2,r2,11
   19784:	103fec1e 	bne	r2,zero,19738 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019738>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
   19788:	e0bffe17 	ldw	r2,-8(fp)
   1978c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
   19790:	e0bffe17 	ldw	r2,-8(fp)
   19794:	00c00fc4 	movi	r3,63
   19798:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
   1979c:	e0bffe17 	ldw	r2,-8(fp)
   197a0:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
   197a4:	d0284a15 	stw	zero,-24280(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
   197a8:	008000f4 	movhi	r2,3
   197ac:	109f5404 	addi	r2,r2,32080
   197b0:	d0a84e15 	stw	r2,-24264(gp)
}
   197b4:	0001883a 	nop
   197b8:	e037883a 	mov	sp,fp
   197bc:	dfc00117 	ldw	ra,4(sp)
   197c0:	df000017 	ldw	fp,0(sp)
   197c4:	dec00204 	addi	sp,sp,8
   197c8:	f800283a 	ret

000197cc <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
   197cc:	defffd04 	addi	sp,sp,-12
   197d0:	df000215 	stw	fp,8(sp)
   197d4:	df000204 	addi	fp,sp,8
   197d8:	e13ffe15 	stw	r4,-8(fp)
   197dc:	2805883a 	mov	r2,r5
   197e0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   197e4:	00000706 	br	19804 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
   197e8:	e0bffe17 	ldw	r2,-8(fp)
   197ec:	10c00044 	addi	r3,r2,1
   197f0:	e0fffe15 	stw	r3,-8(fp)
   197f4:	10000005 	stb	zero,0(r2)
        size--;
   197f8:	e0bfff0b 	ldhu	r2,-4(fp)
   197fc:	10bfffc4 	addi	r2,r2,-1
   19800:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
   19804:	e0bfff0b 	ldhu	r2,-4(fp)
   19808:	103ff71e 	bne	r2,zero,197e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70197e8>
        *pdest++ = (INT8U)0;
        size--;
    }
}
   1980c:	0001883a 	nop
   19810:	e037883a 	mov	sp,fp
   19814:	df000017 	ldw	fp,0(sp)
   19818:	dec00104 	addi	sp,sp,4
   1981c:	f800283a 	ret

00019820 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
   19820:	defffc04 	addi	sp,sp,-16
   19824:	df000315 	stw	fp,12(sp)
   19828:	df000304 	addi	fp,sp,12
   1982c:	e13ffd15 	stw	r4,-12(fp)
   19830:	e17ffe15 	stw	r5,-8(fp)
   19834:	3005883a 	mov	r2,r6
   19838:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
   1983c:	00000b06 	br	1986c <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
   19840:	e0bffd17 	ldw	r2,-12(fp)
   19844:	10c00044 	addi	r3,r2,1
   19848:	e0fffd15 	stw	r3,-12(fp)
   1984c:	e0fffe17 	ldw	r3,-8(fp)
   19850:	19000044 	addi	r4,r3,1
   19854:	e13ffe15 	stw	r4,-8(fp)
   19858:	18c00003 	ldbu	r3,0(r3)
   1985c:	10c00005 	stb	r3,0(r2)
        size--;
   19860:	e0bfff0b 	ldhu	r2,-4(fp)
   19864:	10bfffc4 	addi	r2,r2,-1
   19868:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
   1986c:	e0bfff0b 	ldhu	r2,-4(fp)
   19870:	103ff31e 	bne	r2,zero,19840 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019840>
        *pdest++ = *psrc++;
        size--;
    }
}
   19874:	0001883a 	nop
   19878:	e037883a 	mov	sp,fp
   1987c:	df000017 	ldw	fp,0(sp)
   19880:	dec00104 	addi	sp,sp,4
   19884:	f800283a 	ret

00019888 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
   19888:	defffb04 	addi	sp,sp,-20
   1988c:	dfc00415 	stw	ra,16(sp)
   19890:	df000315 	stw	fp,12(sp)
   19894:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   19898:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1989c:	0005303a 	rdctl	r2,status
   198a0:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   198a4:	e0ffff17 	ldw	r3,-4(fp)
   198a8:	00bfff84 	movi	r2,-2
   198ac:	1884703a 	and	r2,r3,r2
   198b0:	1001703a 	wrctl	status,r2
  
  return context;
   198b4:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
   198b8:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
   198bc:	d0a85503 	ldbu	r2,-24236(gp)
   198c0:	10803fcc 	andi	r2,r2,255
   198c4:	10001a1e 	bne	r2,zero,19930 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
   198c8:	d0a84703 	ldbu	r2,-24292(gp)
   198cc:	10803fcc 	andi	r2,r2,255
   198d0:	1000171e 	bne	r2,zero,19930 <OS_Sched+0xa8>
            OS_SchedNew();
   198d4:	00199580 	call	19958 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
   198d8:	d0e84903 	ldbu	r3,-24284(gp)
   198dc:	d0a84943 	ldbu	r2,-24283(gp)
   198e0:	18c03fcc 	andi	r3,r3,255
   198e4:	10803fcc 	andi	r2,r2,255
   198e8:	18801126 	beq	r3,r2,19930 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
   198ec:	d0a84903 	ldbu	r2,-24284(gp)
   198f0:	10c03fcc 	andi	r3,r2,255
   198f4:	00800134 	movhi	r2,4
   198f8:	10a09804 	addi	r2,r2,-32160
   198fc:	18c7883a 	add	r3,r3,r3
   19900:	18c7883a 	add	r3,r3,r3
   19904:	10c5883a 	add	r2,r2,r3
   19908:	10800017 	ldw	r2,0(r2)
   1990c:	d0a85115 	stw	r2,-24252(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
   19910:	d0a85117 	ldw	r2,-24252(gp)
   19914:	10c00e17 	ldw	r3,56(r2)
   19918:	18c00044 	addi	r3,r3,1
   1991c:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
   19920:	d0a84c17 	ldw	r2,-24272(gp)
   19924:	10800044 	addi	r2,r2,1
   19928:	d0a84c15 	stw	r2,-24272(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
   1992c:	0022b080 	call	22b08 <OSCtxSw>
   19930:	e0bffd17 	ldw	r2,-12(fp)
   19934:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19938:	e0bffe17 	ldw	r2,-8(fp)
   1993c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
   19940:	0001883a 	nop
   19944:	e037883a 	mov	sp,fp
   19948:	dfc00117 	ldw	ra,4(sp)
   1994c:	df000017 	ldw	fp,0(sp)
   19950:	dec00204 	addi	sp,sp,8
   19954:	f800283a 	ret

00019958 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
   19958:	defffe04 	addi	sp,sp,-8
   1995c:	df000115 	stw	fp,4(sp)
   19960:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
   19964:	d0a85303 	ldbu	r2,-24244(gp)
   19968:	10c03fcc 	andi	r3,r2,255
   1996c:	008000b4 	movhi	r2,2
   19970:	10935704 	addi	r2,r2,19804
   19974:	10c5883a 	add	r2,r2,r3
   19978:	10800003 	ldbu	r2,0(r2)
   1997c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
   19980:	e0bfff03 	ldbu	r2,-4(fp)
   19984:	100490fa 	slli	r2,r2,3
   19988:	1009883a 	mov	r4,r2
   1998c:	e0ffff03 	ldbu	r3,-4(fp)
   19990:	d0a85344 	addi	r2,gp,-24243
   19994:	1885883a 	add	r2,r3,r2
   19998:	10800003 	ldbu	r2,0(r2)
   1999c:	10c03fcc 	andi	r3,r2,255
   199a0:	008000b4 	movhi	r2,2
   199a4:	10935704 	addi	r2,r2,19804
   199a8:	10c5883a 	add	r2,r2,r3
   199ac:	10800003 	ldbu	r2,0(r2)
   199b0:	2085883a 	add	r2,r4,r2
   199b4:	d0a84905 	stb	r2,-24284(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
   199b8:	0001883a 	nop
   199bc:	e037883a 	mov	sp,fp
   199c0:	df000017 	ldw	fp,0(sp)
   199c4:	dec00104 	addi	sp,sp,4
   199c8:	f800283a 	ret

000199cc <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
   199cc:	defffc04 	addi	sp,sp,-16
   199d0:	df000315 	stw	fp,12(sp)
   199d4:	df000304 	addi	fp,sp,12
   199d8:	e13ffe15 	stw	r4,-8(fp)
   199dc:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
   199e0:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
   199e4:	00000b06 	br	19a14 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
   199e8:	e0bffe17 	ldw	r2,-8(fp)
   199ec:	10c00044 	addi	r3,r2,1
   199f0:	e0fffe15 	stw	r3,-8(fp)
   199f4:	e0ffff17 	ldw	r3,-4(fp)
   199f8:	19000044 	addi	r4,r3,1
   199fc:	e13fff15 	stw	r4,-4(fp)
   19a00:	18c00003 	ldbu	r3,0(r3)
   19a04:	10c00005 	stb	r3,0(r2)
        len++;
   19a08:	e0bffd03 	ldbu	r2,-12(fp)
   19a0c:	10800044 	addi	r2,r2,1
   19a10:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   19a14:	e0bfff17 	ldw	r2,-4(fp)
   19a18:	10800003 	ldbu	r2,0(r2)
   19a1c:	10803fcc 	andi	r2,r2,255
   19a20:	103ff11e 	bne	r2,zero,199e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70199e8>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
   19a24:	e0bffe17 	ldw	r2,-8(fp)
   19a28:	10000005 	stb	zero,0(r2)
    return (len);
   19a2c:	e0bffd03 	ldbu	r2,-12(fp)
}
   19a30:	e037883a 	mov	sp,fp
   19a34:	df000017 	ldw	fp,0(sp)
   19a38:	dec00104 	addi	sp,sp,4
   19a3c:	f800283a 	ret

00019a40 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
   19a40:	defffd04 	addi	sp,sp,-12
   19a44:	df000215 	stw	fp,8(sp)
   19a48:	df000204 	addi	fp,sp,8
   19a4c:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
   19a50:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
   19a54:	00000606 	br	19a70 <OS_StrLen+0x30>
        psrc++;
   19a58:	e0bfff17 	ldw	r2,-4(fp)
   19a5c:	10800044 	addi	r2,r2,1
   19a60:	e0bfff15 	stw	r2,-4(fp)
        len++;
   19a64:	e0bffe03 	ldbu	r2,-8(fp)
   19a68:	10800044 	addi	r2,r2,1
   19a6c:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
   19a70:	e0bfff17 	ldw	r2,-4(fp)
   19a74:	10800003 	ldbu	r2,0(r2)
   19a78:	10803fcc 	andi	r2,r2,255
   19a7c:	103ff61e 	bne	r2,zero,19a58 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019a58>
        psrc++;
        len++;
    }
    return (len);
   19a80:	e0bffe03 	ldbu	r2,-8(fp)
}
   19a84:	e037883a 	mov	sp,fp
   19a88:	df000017 	ldw	fp,0(sp)
   19a8c:	dec00104 	addi	sp,sp,4
   19a90:	f800283a 	ret

00019a94 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
   19a94:	defffa04 	addi	sp,sp,-24
   19a98:	dfc00515 	stw	ra,20(sp)
   19a9c:	df000415 	stw	fp,16(sp)
   19aa0:	df000404 	addi	fp,sp,16
   19aa4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19aa8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19aac:	0005303a 	rdctl	r2,status
   19ab0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19ab4:	e0fffd17 	ldw	r3,-12(fp)
   19ab8:	00bfff84 	movi	r2,-2
   19abc:	1884703a 	and	r2,r3,r2
   19ac0:	1001703a 	wrctl	status,r2
  
  return context;
   19ac4:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
   19ac8:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
   19acc:	d0a84817 	ldw	r2,-24288(gp)
   19ad0:	10800044 	addi	r2,r2,1
   19ad4:	d0a84815 	stw	r2,-24288(gp)
   19ad8:	e0bffc17 	ldw	r2,-16(fp)
   19adc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19ae0:	e0bffe17 	ldw	r2,-8(fp)
   19ae4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
   19ae8:	0022e1c0 	call	22e1c <OSTaskIdleHook>
    }
   19aec:	003fef06 	br	19aac <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019aac>

00019af0 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
   19af0:	defff804 	addi	sp,sp,-32
   19af4:	dfc00715 	stw	ra,28(sp)
   19af8:	df000615 	stw	fp,24(sp)
   19afc:	dc400515 	stw	r17,20(sp)
   19b00:	dc000415 	stw	r16,16(sp)
   19b04:	df000604 	addi	fp,sp,24
   19b08:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   19b0c:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   19b10:	00000206 	br	19b1c <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
   19b14:	01000044 	movi	r4,1
   19b18:	001f2340 	call	1f234 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
   19b1c:	d0a85903 	ldbu	r2,-24220(gp)
   19b20:	10803fcc 	andi	r2,r2,255
   19b24:	103ffb26 	beq	r2,zero,19b14 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019b14>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
   19b28:	d0e84d17 	ldw	r3,-24268(gp)
   19b2c:	00947b34 	movhi	r2,20972
   19b30:	10a147c4 	addi	r2,r2,-31457
   19b34:	1888383a 	mulxuu	r4,r3,r2
   19b38:	1885383a 	mul	r2,r3,r2
   19b3c:	1021883a 	mov	r16,r2
   19b40:	2023883a 	mov	r17,r4
   19b44:	8804d17a 	srli	r2,r17,5
   19b48:	d0a84d15 	stw	r2,-24268(gp)
    if (OSIdleCtrMax == 0L) {
   19b4c:	d0a84d17 	ldw	r2,-24268(gp)
   19b50:	1000031e 	bne	r2,zero,19b60 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
   19b54:	d0284f05 	stb	zero,-24260(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
   19b58:	01003fc4 	movi	r4,255
   19b5c:	001eebc0 	call	1eebc <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19b60:	0005303a 	rdctl	r2,status
   19b64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19b68:	e0fffb17 	ldw	r3,-20(fp)
   19b6c:	00bfff84 	movi	r2,-2
   19b70:	1884703a 	and	r2,r3,r2
   19b74:	1001703a 	wrctl	status,r2
  
  return context;
   19b78:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
   19b7c:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
   19b80:	d0a84817 	ldw	r2,-24288(gp)
   19b84:	d0a85a15 	stw	r2,-24216(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
   19b88:	d0284815 	stw	zero,-24288(gp)
   19b8c:	e0bffa17 	ldw	r2,-24(fp)
   19b90:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19b94:	e0bffc17 	ldw	r2,-16(fp)
   19b98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
   19b9c:	d0e85a17 	ldw	r3,-24216(gp)
   19ba0:	d0a84d17 	ldw	r2,-24268(gp)
   19ba4:	1885203a 	divu	r2,r3,r2
   19ba8:	1007883a 	mov	r3,r2
   19bac:	00801904 	movi	r2,100
   19bb0:	10c5c83a 	sub	r2,r2,r3
   19bb4:	d0a84f05 	stb	r2,-24260(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
   19bb8:	0022d9c0 	call	22d9c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
   19bbc:	0019bcc0 	call	19bcc <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
   19bc0:	0009883a 	mov	r4,zero
   19bc4:	001f2340 	call	1f234 <OSTimeDly>
    }
   19bc8:	003fe506 	br	19b60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019b60>

00019bcc <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
   19bcc:	defffa04 	addi	sp,sp,-24
   19bd0:	dfc00515 	stw	ra,20(sp)
   19bd4:	df000415 	stw	fp,16(sp)
   19bd8:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   19bdc:	e03ffc05 	stb	zero,-16(fp)
   19be0:	00002406 	br	19c74 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
   19be4:	e0bffc03 	ldbu	r2,-16(fp)
   19be8:	e0fffe04 	addi	r3,fp,-8
   19bec:	180b883a 	mov	r5,r3
   19bf0:	1009883a 	mov	r4,r2
   19bf4:	001ecfc0 	call	1ecfc <OSTaskStkChk>
   19bf8:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
   19bfc:	e0bffc43 	ldbu	r2,-15(fp)
   19c00:	1000191e 	bne	r2,zero,19c68 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
   19c04:	e0fffc03 	ldbu	r3,-16(fp)
   19c08:	00800134 	movhi	r2,4
   19c0c:	10a09804 	addi	r2,r2,-32160
   19c10:	18c7883a 	add	r3,r3,r3
   19c14:	18c7883a 	add	r3,r3,r3
   19c18:	10c5883a 	add	r2,r2,r3
   19c1c:	10800017 	ldw	r2,0(r2)
   19c20:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
   19c24:	e0bffd17 	ldw	r2,-12(fp)
   19c28:	10000f26 	beq	r2,zero,19c68 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
   19c2c:	e0bffd17 	ldw	r2,-12(fp)
   19c30:	10800060 	cmpeqi	r2,r2,1
   19c34:	10000c1e 	bne	r2,zero,19c68 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
   19c38:	e0bffd17 	ldw	r2,-12(fp)
   19c3c:	10c00217 	ldw	r3,8(r2)
   19c40:	e0bffd17 	ldw	r2,-12(fp)
   19c44:	10800317 	ldw	r2,12(r2)
   19c48:	1085883a 	add	r2,r2,r2
   19c4c:	1085883a 	add	r2,r2,r2
   19c50:	1887883a 	add	r3,r3,r2
   19c54:	e0bffd17 	ldw	r2,-12(fp)
   19c58:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
   19c5c:	e0ffff17 	ldw	r3,-4(fp)
   19c60:	e0bffd17 	ldw	r2,-12(fp)
   19c64:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
   19c68:	e0bffc03 	ldbu	r2,-16(fp)
   19c6c:	10800044 	addi	r2,r2,1
   19c70:	e0bffc05 	stb	r2,-16(fp)
   19c74:	e0bffc03 	ldbu	r2,-16(fp)
   19c78:	10800570 	cmpltui	r2,r2,21
   19c7c:	103fd91e 	bne	r2,zero,19be4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7019be4>
#endif
                }
            }
        }
    }
}
   19c80:	0001883a 	nop
   19c84:	e037883a 	mov	sp,fp
   19c88:	dfc00117 	ldw	ra,4(sp)
   19c8c:	df000017 	ldw	fp,0(sp)
   19c90:	dec00204 	addi	sp,sp,8
   19c94:	f800283a 	ret

00019c98 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
   19c98:	defff204 	addi	sp,sp,-56
   19c9c:	dfc00d15 	stw	ra,52(sp)
   19ca0:	df000c15 	stw	fp,48(sp)
   19ca4:	df000c04 	addi	fp,sp,48
   19ca8:	e17ffc15 	stw	r5,-16(fp)
   19cac:	e1bffd15 	stw	r6,-12(fp)
   19cb0:	3807883a 	mov	r3,r7
   19cb4:	e0800417 	ldw	r2,16(fp)
   19cb8:	e13ffb05 	stb	r4,-20(fp)
   19cbc:	e0fffe0d 	sth	r3,-8(fp)
   19cc0:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   19cc4:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19cc8:	0005303a 	rdctl	r2,status
   19ccc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19cd0:	e0fffa17 	ldw	r3,-24(fp)
   19cd4:	00bfff84 	movi	r2,-2
   19cd8:	1884703a 	and	r2,r3,r2
   19cdc:	1001703a 	wrctl	status,r2
  
  return context;
   19ce0:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
   19ce4:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
   19ce8:	d0a84e17 	ldw	r2,-24264(gp)
   19cec:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
   19cf0:	e0bff617 	ldw	r2,-40(fp)
   19cf4:	10009326 	beq	r2,zero,19f44 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
   19cf8:	e0bff617 	ldw	r2,-40(fp)
   19cfc:	10800517 	ldw	r2,20(r2)
   19d00:	d0a84e15 	stw	r2,-24264(gp)
   19d04:	e0bff417 	ldw	r2,-48(fp)
   19d08:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19d0c:	e0bff817 	ldw	r2,-32(fp)
   19d10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
   19d14:	e0bff617 	ldw	r2,-40(fp)
   19d18:	e0fffc17 	ldw	r3,-16(fp)
   19d1c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
   19d20:	e0bff617 	ldw	r2,-40(fp)
   19d24:	e0fffb03 	ldbu	r3,-20(fp)
   19d28:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
   19d2c:	e0bff617 	ldw	r2,-40(fp)
   19d30:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
   19d34:	e0bff617 	ldw	r2,-40(fp)
   19d38:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
   19d3c:	e0bff617 	ldw	r2,-40(fp)
   19d40:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
   19d44:	e0bff617 	ldw	r2,-40(fp)
   19d48:	e0c00317 	ldw	r3,12(fp)
   19d4c:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
   19d50:	e0bff617 	ldw	r2,-40(fp)
   19d54:	e0c00217 	ldw	r3,8(fp)
   19d58:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
   19d5c:	e0bff617 	ldw	r2,-40(fp)
   19d60:	e0fffd17 	ldw	r3,-12(fp)
   19d64:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
   19d68:	e0bff617 	ldw	r2,-40(fp)
   19d6c:	e0ffff0b 	ldhu	r3,-4(fp)
   19d70:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
   19d74:	e0bff617 	ldw	r2,-40(fp)
   19d78:	e0fffe0b 	ldhu	r3,-8(fp)
   19d7c:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
   19d80:	e0bff617 	ldw	r2,-40(fp)
   19d84:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
   19d88:	e0bffb03 	ldbu	r2,-20(fp)
   19d8c:	1004d0fa 	srli	r2,r2,3
   19d90:	1007883a 	mov	r3,r2
   19d94:	e0bff617 	ldw	r2,-40(fp)
   19d98:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
   19d9c:	e0bffb03 	ldbu	r2,-20(fp)
   19da0:	108001cc 	andi	r2,r2,7
   19da4:	1007883a 	mov	r3,r2
   19da8:	e0bff617 	ldw	r2,-40(fp)
   19dac:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
   19db0:	e0bff617 	ldw	r2,-40(fp)
   19db4:	10800d03 	ldbu	r2,52(r2)
   19db8:	10803fcc 	andi	r2,r2,255
   19dbc:	00c00044 	movi	r3,1
   19dc0:	1884983a 	sll	r2,r3,r2
   19dc4:	1007883a 	mov	r3,r2
   19dc8:	e0bff617 	ldw	r2,-40(fp)
   19dcc:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
   19dd0:	e0bff617 	ldw	r2,-40(fp)
   19dd4:	10800cc3 	ldbu	r2,51(r2)
   19dd8:	10803fcc 	andi	r2,r2,255
   19ddc:	00c00044 	movi	r3,1
   19de0:	1884983a 	sll	r2,r3,r2
   19de4:	1007883a 	mov	r3,r2
   19de8:	e0bff617 	ldw	r2,-40(fp)
   19dec:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
   19df0:	e0bff617 	ldw	r2,-40(fp)
   19df4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
   19df8:	e0bff617 	ldw	r2,-40(fp)
   19dfc:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
   19e00:	e0bff617 	ldw	r2,-40(fp)
   19e04:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
   19e08:	e0bff617 	ldw	r2,-40(fp)
   19e0c:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
   19e10:	e0bff617 	ldw	r2,-40(fp)
   19e14:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
   19e18:	e0bff617 	ldw	r2,-40(fp)
   19e1c:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
   19e20:	e0bff617 	ldw	r2,-40(fp)
   19e24:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
   19e28:	e0bff617 	ldw	r2,-40(fp)
   19e2c:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
   19e30:	e0bff617 	ldw	r2,-40(fp)
   19e34:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
   19e38:	e0bff617 	ldw	r2,-40(fp)
   19e3c:	00c00fc4 	movi	r3,63
   19e40:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   19e44:	e0bff617 	ldw	r2,-40(fp)
   19e48:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
   19e4c:	e13ff617 	ldw	r4,-40(fp)
   19e50:	0022e3c0 	call	22e3c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
   19e54:	e13ff617 	ldw	r4,-40(fp)
   19e58:	0022d340 	call	22d34 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   19e5c:	0005303a 	rdctl	r2,status
   19e60:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   19e64:	e0fff517 	ldw	r3,-44(fp)
   19e68:	00bfff84 	movi	r2,-2
   19e6c:	1884703a 	and	r2,r3,r2
   19e70:	1001703a 	wrctl	status,r2
  
  return context;
   19e74:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
   19e78:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
   19e7c:	e0fffb03 	ldbu	r3,-20(fp)
   19e80:	00800134 	movhi	r2,4
   19e84:	10a09804 	addi	r2,r2,-32160
   19e88:	18c7883a 	add	r3,r3,r3
   19e8c:	18c7883a 	add	r3,r3,r3
   19e90:	10c5883a 	add	r2,r2,r3
   19e94:	e0fff617 	ldw	r3,-40(fp)
   19e98:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
   19e9c:	d0e84a17 	ldw	r3,-24280(gp)
   19ea0:	e0bff617 	ldw	r2,-40(fp)
   19ea4:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
   19ea8:	e0bff617 	ldw	r2,-40(fp)
   19eac:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
   19eb0:	d0a84a17 	ldw	r2,-24280(gp)
   19eb4:	10000326 	beq	r2,zero,19ec4 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
   19eb8:	d0a84a17 	ldw	r2,-24280(gp)
   19ebc:	e0fff617 	ldw	r3,-40(fp)
   19ec0:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
   19ec4:	e0bff617 	ldw	r2,-40(fp)
   19ec8:	d0a84a15 	stw	r2,-24280(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
   19ecc:	e0bff617 	ldw	r2,-40(fp)
   19ed0:	10c00d83 	ldbu	r3,54(r2)
   19ed4:	d0a85303 	ldbu	r2,-24244(gp)
   19ed8:	1884b03a 	or	r2,r3,r2
   19edc:	d0a85305 	stb	r2,-24244(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   19ee0:	e0bff617 	ldw	r2,-40(fp)
   19ee4:	10800d03 	ldbu	r2,52(r2)
   19ee8:	10c03fcc 	andi	r3,r2,255
   19eec:	e0bff617 	ldw	r2,-40(fp)
   19ef0:	10800d03 	ldbu	r2,52(r2)
   19ef4:	11003fcc 	andi	r4,r2,255
   19ef8:	d0a85344 	addi	r2,gp,-24243
   19efc:	2085883a 	add	r2,r4,r2
   19f00:	11000003 	ldbu	r4,0(r2)
   19f04:	e0bff617 	ldw	r2,-40(fp)
   19f08:	10800d43 	ldbu	r2,53(r2)
   19f0c:	2084b03a 	or	r2,r4,r2
   19f10:	1009883a 	mov	r4,r2
   19f14:	d0a85344 	addi	r2,gp,-24243
   19f18:	1885883a 	add	r2,r3,r2
   19f1c:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
   19f20:	d0a84f43 	ldbu	r2,-24259(gp)
   19f24:	10800044 	addi	r2,r2,1
   19f28:	d0a84f45 	stb	r2,-24259(gp)
   19f2c:	e0bff417 	ldw	r2,-48(fp)
   19f30:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   19f34:	e0bff717 	ldw	r2,-36(fp)
   19f38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   19f3c:	0005883a 	mov	r2,zero
   19f40:	00000506 	br	19f58 <OS_TCBInit+0x2c0>
   19f44:	e0bff417 	ldw	r2,-48(fp)
   19f48:	e0bff915 	stw	r2,-28(fp)
   19f4c:	e0bff917 	ldw	r2,-28(fp)
   19f50:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
   19f54:	00801084 	movi	r2,66
}
   19f58:	e037883a 	mov	sp,fp
   19f5c:	dfc00117 	ldw	ra,4(sp)
   19f60:	df000017 	ldw	fp,0(sp)
   19f64:	dec00204 	addi	sp,sp,8
   19f68:	f800283a 	ret

00019f6c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
   19f6c:	defffe04 	addi	sp,sp,-8
   19f70:	df000115 	stw	fp,4(sp)
   19f74:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
   19f78:	d0a02504 	addi	r2,gp,-32620
   19f7c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
   19f80:	d0a02604 	addi	r2,gp,-32616
   19f84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
   19f88:	d0a02784 	addi	r2,gp,-32610
   19f8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
   19f90:	d0a02804 	addi	r2,gp,-32608
   19f94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
   19f98:	d0a02704 	addi	r2,gp,-32612
   19f9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
   19fa0:	d0a02884 	addi	r2,gp,-32606
   19fa4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
   19fa8:	d0a02904 	addi	r2,gp,-32604
   19fac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
   19fb0:	d0a02984 	addi	r2,gp,-32602
   19fb4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
   19fb8:	d0a02a04 	addi	r2,gp,-32600
   19fbc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
   19fc0:	d0a02a84 	addi	r2,gp,-32598
   19fc4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
   19fc8:	d0a02b04 	addi	r2,gp,-32596
   19fcc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
   19fd0:	d0a02b84 	addi	r2,gp,-32594
   19fd4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
   19fd8:	d0a02c04 	addi	r2,gp,-32592
   19fdc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
   19fe0:	d0a02c84 	addi	r2,gp,-32590
   19fe4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
   19fe8:	d0a02d04 	addi	r2,gp,-32588
   19fec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
   19ff0:	d0a02d84 	addi	r2,gp,-32586
   19ff4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
   19ff8:	d0a02e04 	addi	r2,gp,-32584
   19ffc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
   1a000:	d0a02e84 	addi	r2,gp,-32582
   1a004:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
   1a008:	d0a02f04 	addi	r2,gp,-32580
   1a00c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
   1a010:	d0a02f84 	addi	r2,gp,-32578
   1a014:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
   1a018:	d0a03004 	addi	r2,gp,-32576
   1a01c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
   1a020:	d0a03084 	addi	r2,gp,-32574
   1a024:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
   1a028:	d0a03104 	addi	r2,gp,-32572
   1a02c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
   1a030:	d0a03184 	addi	r2,gp,-32570
   1a034:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
   1a038:	d0a03204 	addi	r2,gp,-32568
   1a03c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
   1a040:	d0a03284 	addi	r2,gp,-32566
   1a044:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
   1a048:	d0a03304 	addi	r2,gp,-32564
   1a04c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
   1a050:	d0a03384 	addi	r2,gp,-32562
   1a054:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
   1a058:	d0a03404 	addi	r2,gp,-32560
   1a05c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
   1a060:	d0a03484 	addi	r2,gp,-32558
   1a064:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
   1a068:	d0a03504 	addi	r2,gp,-32556
   1a06c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
   1a070:	d0a03584 	addi	r2,gp,-32554
   1a074:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
   1a078:	d0a03604 	addi	r2,gp,-32552
   1a07c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
   1a080:	d0a03684 	addi	r2,gp,-32550
   1a084:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
   1a088:	d0a03704 	addi	r2,gp,-32548
   1a08c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
   1a090:	d0a03784 	addi	r2,gp,-32546
   1a094:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
   1a098:	d0a03804 	addi	r2,gp,-32544
   1a09c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
   1a0a0:	d0a03884 	addi	r2,gp,-32542
   1a0a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
   1a0a8:	d0a03904 	addi	r2,gp,-32540
   1a0ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
   1a0b0:	d0a03984 	addi	r2,gp,-32538
   1a0b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
   1a0b8:	d0a03a04 	addi	r2,gp,-32536
   1a0bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
   1a0c0:	d0a03a84 	addi	r2,gp,-32534
   1a0c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
   1a0c8:	d0a03b04 	addi	r2,gp,-32532
   1a0cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
   1a0d0:	d0a03b84 	addi	r2,gp,-32530
   1a0d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
   1a0d8:	d0a03c04 	addi	r2,gp,-32528
   1a0dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
   1a0e0:	d0a04104 	addi	r2,gp,-32508
   1a0e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
   1a0e8:	0001883a 	nop
   1a0ec:	e037883a 	mov	sp,fp
   1a0f0:	df000017 	ldw	fp,0(sp)
   1a0f4:	dec00104 	addi	sp,sp,4
   1a0f8:	f800283a 	ret

0001a0fc <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
   1a0fc:	defff204 	addi	sp,sp,-56
   1a100:	df000d15 	stw	fp,52(sp)
   1a104:	df000d04 	addi	fp,sp,52
   1a108:	e13ffc15 	stw	r4,-16(fp)
   1a10c:	2807883a 	mov	r3,r5
   1a110:	3005883a 	mov	r2,r6
   1a114:	e1ffff15 	stw	r7,-4(fp)
   1a118:	e0fffd0d 	sth	r3,-12(fp)
   1a11c:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1a120:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1a124:	e0bfff17 	ldw	r2,-4(fp)
   1a128:	1000021e 	bne	r2,zero,1a134 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
   1a12c:	0005883a 	mov	r2,zero
   1a130:	0000b006 	br	1a3f4 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1a134:	e0bffc17 	ldw	r2,-16(fp)
   1a138:	1000051e 	bne	r2,zero,1a150 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1a13c:	e0bfff17 	ldw	r2,-4(fp)
   1a140:	00c01b84 	movi	r3,110
   1a144:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1a148:	0005883a 	mov	r2,zero
   1a14c:	0000a906 	br	1a3f4 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   1a150:	e0bffc17 	ldw	r2,-16(fp)
   1a154:	10800003 	ldbu	r2,0(r2)
   1a158:	10803fcc 	andi	r2,r2,255
   1a15c:	10800160 	cmpeqi	r2,r2,5
   1a160:	1000051e 	bne	r2,zero,1a178 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
   1a164:	e0bfff17 	ldw	r2,-4(fp)
   1a168:	00c00044 	movi	r3,1
   1a16c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1a170:	0005883a 	mov	r2,zero
   1a174:	00009f06 	br	1a3f4 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   1a178:	e0fffe03 	ldbu	r3,-8(fp)
   1a17c:	00bfe004 	movi	r2,-128
   1a180:	1884703a 	and	r2,r3,r2
   1a184:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
   1a188:	e0bff503 	ldbu	r2,-44(fp)
   1a18c:	10000626 	beq	r2,zero,1a1a8 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
   1a190:	e0bffe03 	ldbu	r2,-8(fp)
   1a194:	10801fcc 	andi	r2,r2,127
   1a198:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   1a19c:	00800044 	movi	r2,1
   1a1a0:	e0bff385 	stb	r2,-50(fp)
   1a1a4:	00000106 	br	1a1ac <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
   1a1a8:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
   1a1ac:	e0bfff17 	ldw	r2,-4(fp)
   1a1b0:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a1b4:	0005303a 	rdctl	r2,status
   1a1b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a1bc:	e0fffb17 	ldw	r3,-20(fp)
   1a1c0:	00bfff84 	movi	r2,-2
   1a1c4:	1884703a 	and	r2,r3,r2
   1a1c8:	1001703a 	wrctl	status,r2
  
  return context;
   1a1cc:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
   1a1d0:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
   1a1d4:	e0bffe03 	ldbu	r2,-8(fp)
   1a1d8:	10c00060 	cmpeqi	r3,r2,1
   1a1dc:	18005f1e 	bne	r3,zero,1a35c <OSFlagAccept+0x260>
   1a1e0:	10c00088 	cmpgei	r3,r2,2
   1a1e4:	1800021e 	bne	r3,zero,1a1f0 <OSFlagAccept+0xf4>
   1a1e8:	10003f26 	beq	r2,zero,1a2e8 <OSFlagAccept+0x1ec>
   1a1ec:	00007706 	br	1a3cc <OSFlagAccept+0x2d0>
   1a1f0:	10c000a0 	cmpeqi	r3,r2,2
   1a1f4:	1800031e 	bne	r3,zero,1a204 <OSFlagAccept+0x108>
   1a1f8:	108000e0 	cmpeqi	r2,r2,3
   1a1fc:	10001e1e 	bne	r2,zero,1a278 <OSFlagAccept+0x17c>
   1a200:	00007206 	br	1a3cc <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1a204:	e0bffc17 	ldw	r2,-16(fp)
   1a208:	10c0020b 	ldhu	r3,8(r2)
   1a20c:	e0bffd0b 	ldhu	r2,-12(fp)
   1a210:	1884703a 	and	r2,r3,r2
   1a214:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1a218:	e0fff30b 	ldhu	r3,-52(fp)
   1a21c:	e0bffd0b 	ldhu	r2,-12(fp)
   1a220:	18800d1e 	bne	r3,r2,1a258 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1a224:	e0bff383 	ldbu	r2,-50(fp)
   1a228:	10800058 	cmpnei	r2,r2,1
   1a22c:	10000d1e 	bne	r2,zero,1a264 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   1a230:	e0bffc17 	ldw	r2,-16(fp)
   1a234:	1080020b 	ldhu	r2,8(r2)
   1a238:	1007883a 	mov	r3,r2
   1a23c:	e0bff30b 	ldhu	r2,-52(fp)
   1a240:	0084303a 	nor	r2,zero,r2
   1a244:	1884703a 	and	r2,r3,r2
   1a248:	1007883a 	mov	r3,r2
   1a24c:	e0bffc17 	ldw	r2,-16(fp)
   1a250:	10c0020d 	sth	r3,8(r2)
   1a254:	00000306 	br	1a264 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1a258:	e0bfff17 	ldw	r2,-4(fp)
   1a25c:	00c01c04 	movi	r3,112
   1a260:	10c00005 	stb	r3,0(r2)
   1a264:	e0bff417 	ldw	r2,-48(fp)
   1a268:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a26c:	e0bff617 	ldw	r2,-40(fp)
   1a270:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1a274:	00005e06 	br	1a3f0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
   1a278:	e0bffc17 	ldw	r2,-16(fp)
   1a27c:	10c0020b 	ldhu	r3,8(r2)
   1a280:	e0bffd0b 	ldhu	r2,-12(fp)
   1a284:	1884703a 	and	r2,r3,r2
   1a288:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   1a28c:	e0bff30b 	ldhu	r2,-52(fp)
   1a290:	10000d26 	beq	r2,zero,1a2c8 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1a294:	e0bff383 	ldbu	r2,-50(fp)
   1a298:	10800058 	cmpnei	r2,r2,1
   1a29c:	10000d1e 	bne	r2,zero,1a2d4 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   1a2a0:	e0bffc17 	ldw	r2,-16(fp)
   1a2a4:	1080020b 	ldhu	r2,8(r2)
   1a2a8:	1007883a 	mov	r3,r2
   1a2ac:	e0bff30b 	ldhu	r2,-52(fp)
   1a2b0:	0084303a 	nor	r2,zero,r2
   1a2b4:	1884703a 	and	r2,r3,r2
   1a2b8:	1007883a 	mov	r3,r2
   1a2bc:	e0bffc17 	ldw	r2,-16(fp)
   1a2c0:	10c0020d 	sth	r3,8(r2)
   1a2c4:	00000306 	br	1a2d4 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1a2c8:	e0bfff17 	ldw	r2,-4(fp)
   1a2cc:	00c01c04 	movi	r3,112
   1a2d0:	10c00005 	stb	r3,0(r2)
   1a2d4:	e0bff417 	ldw	r2,-48(fp)
   1a2d8:	e0bff715 	stw	r2,-36(fp)
   1a2dc:	e0bff717 	ldw	r2,-36(fp)
   1a2e0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1a2e4:	00004206 	br	1a3f0 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   1a2e8:	e0bffc17 	ldw	r2,-16(fp)
   1a2ec:	1080020b 	ldhu	r2,8(r2)
   1a2f0:	0084303a 	nor	r2,zero,r2
   1a2f4:	1007883a 	mov	r3,r2
   1a2f8:	e0bffd0b 	ldhu	r2,-12(fp)
   1a2fc:	1884703a 	and	r2,r3,r2
   1a300:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1a304:	e0fff30b 	ldhu	r3,-52(fp)
   1a308:	e0bffd0b 	ldhu	r2,-12(fp)
   1a30c:	18800b1e 	bne	r3,r2,1a33c <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1a310:	e0bff383 	ldbu	r2,-50(fp)
   1a314:	10800058 	cmpnei	r2,r2,1
   1a318:	10000b1e 	bne	r2,zero,1a348 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   1a31c:	e0bffc17 	ldw	r2,-16(fp)
   1a320:	10c0020b 	ldhu	r3,8(r2)
   1a324:	e0bff30b 	ldhu	r2,-52(fp)
   1a328:	1884b03a 	or	r2,r3,r2
   1a32c:	1007883a 	mov	r3,r2
   1a330:	e0bffc17 	ldw	r2,-16(fp)
   1a334:	10c0020d 	sth	r3,8(r2)
   1a338:	00000306 	br	1a348 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1a33c:	e0bfff17 	ldw	r2,-4(fp)
   1a340:	00c01c04 	movi	r3,112
   1a344:	10c00005 	stb	r3,0(r2)
   1a348:	e0bff417 	ldw	r2,-48(fp)
   1a34c:	e0bff815 	stw	r2,-32(fp)
   1a350:	e0bff817 	ldw	r2,-32(fp)
   1a354:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1a358:	00002506 	br	1a3f0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   1a35c:	e0bffc17 	ldw	r2,-16(fp)
   1a360:	1080020b 	ldhu	r2,8(r2)
   1a364:	0084303a 	nor	r2,zero,r2
   1a368:	1007883a 	mov	r3,r2
   1a36c:	e0bffd0b 	ldhu	r2,-12(fp)
   1a370:	1884703a 	and	r2,r3,r2
   1a374:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   1a378:	e0bff30b 	ldhu	r2,-52(fp)
   1a37c:	10000b26 	beq	r2,zero,1a3ac <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1a380:	e0bff383 	ldbu	r2,-50(fp)
   1a384:	10800058 	cmpnei	r2,r2,1
   1a388:	10000b1e 	bne	r2,zero,1a3b8 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   1a38c:	e0bffc17 	ldw	r2,-16(fp)
   1a390:	10c0020b 	ldhu	r3,8(r2)
   1a394:	e0bff30b 	ldhu	r2,-52(fp)
   1a398:	1884b03a 	or	r2,r3,r2
   1a39c:	1007883a 	mov	r3,r2
   1a3a0:	e0bffc17 	ldw	r2,-16(fp)
   1a3a4:	10c0020d 	sth	r3,8(r2)
   1a3a8:	00000306 	br	1a3b8 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
   1a3ac:	e0bfff17 	ldw	r2,-4(fp)
   1a3b0:	00c01c04 	movi	r3,112
   1a3b4:	10c00005 	stb	r3,0(r2)
   1a3b8:	e0bff417 	ldw	r2,-48(fp)
   1a3bc:	e0bff915 	stw	r2,-28(fp)
   1a3c0:	e0bff917 	ldw	r2,-28(fp)
   1a3c4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
   1a3c8:	00000906 	br	1a3f0 <OSFlagAccept+0x2f4>
   1a3cc:	e0bff417 	ldw	r2,-48(fp)
   1a3d0:	e0bffa15 	stw	r2,-24(fp)
   1a3d4:	e0bffa17 	ldw	r2,-24(fp)
   1a3d8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   1a3dc:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
   1a3e0:	e0bfff17 	ldw	r2,-4(fp)
   1a3e4:	00c01bc4 	movi	r3,111
   1a3e8:	10c00005 	stb	r3,0(r2)
             break;
   1a3ec:	0001883a 	nop
    }
    return (flags_rdy);
   1a3f0:	e0bff30b 	ldhu	r2,-52(fp)
}
   1a3f4:	e037883a 	mov	sp,fp
   1a3f8:	df000017 	ldw	fp,0(sp)
   1a3fc:	dec00104 	addi	sp,sp,4
   1a400:	f800283a 	ret

0001a404 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
   1a404:	defff804 	addi	sp,sp,-32
   1a408:	df000715 	stw	fp,28(sp)
   1a40c:	df000704 	addi	fp,sp,28
   1a410:	2005883a 	mov	r2,r4
   1a414:	e17fff15 	stw	r5,-4(fp)
   1a418:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
   1a41c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
   1a420:	e0bfff17 	ldw	r2,-4(fp)
   1a424:	1000021e 	bne	r2,zero,1a430 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
   1a428:	0005883a 	mov	r2,zero
   1a42c:	00003306 	br	1a4fc <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
   1a430:	d0a85503 	ldbu	r2,-24236(gp)
   1a434:	10803fcc 	andi	r2,r2,255
   1a438:	10000526 	beq	r2,zero,1a450 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
   1a43c:	e0bfff17 	ldw	r2,-4(fp)
   1a440:	00c00404 	movi	r3,16
   1a444:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
   1a448:	0005883a 	mov	r2,zero
   1a44c:	00002b06 	br	1a4fc <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a450:	0005303a 	rdctl	r2,status
   1a454:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a458:	e0fffd17 	ldw	r3,-12(fp)
   1a45c:	00bfff84 	movi	r2,-2
   1a460:	1884703a 	and	r2,r3,r2
   1a464:	1001703a 	wrctl	status,r2
  
  return context;
   1a468:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1a46c:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
   1a470:	d0a85817 	ldw	r2,-24224(gp)
   1a474:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
   1a478:	e0bffb17 	ldw	r2,-20(fp)
   1a47c:	10001726 	beq	r2,zero,1a4dc <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
   1a480:	d0a85817 	ldw	r2,-24224(gp)
   1a484:	10800117 	ldw	r2,4(r2)
   1a488:	d0a85815 	stw	r2,-24224(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
   1a48c:	e0bffb17 	ldw	r2,-20(fp)
   1a490:	00c00144 	movi	r3,5
   1a494:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
   1a498:	e0bffb17 	ldw	r2,-20(fp)
   1a49c:	e0fffe0b 	ldhu	r3,-8(fp)
   1a4a0:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
   1a4a4:	e0bffb17 	ldw	r2,-20(fp)
   1a4a8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
   1a4ac:	e0bffb17 	ldw	r2,-20(fp)
   1a4b0:	00c00fc4 	movi	r3,63
   1a4b4:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1a4b8:	e0bffb17 	ldw	r2,-20(fp)
   1a4bc:	100002c5 	stb	zero,11(r2)
   1a4c0:	e0bff917 	ldw	r2,-28(fp)
   1a4c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a4c8:	e0bffa17 	ldw	r2,-24(fp)
   1a4cc:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
   1a4d0:	e0bfff17 	ldw	r2,-4(fp)
   1a4d4:	10000005 	stb	zero,0(r2)
   1a4d8:	00000706 	br	1a4f8 <OSFlagCreate+0xf4>
   1a4dc:	e0bff917 	ldw	r2,-28(fp)
   1a4e0:	e0bffc15 	stw	r2,-16(fp)
   1a4e4:	e0bffc17 	ldw	r2,-16(fp)
   1a4e8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
   1a4ec:	e0bfff17 	ldw	r2,-4(fp)
   1a4f0:	00c01c84 	movi	r3,114
   1a4f4:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
   1a4f8:	e0bffb17 	ldw	r2,-20(fp)
}
   1a4fc:	e037883a 	mov	sp,fp
   1a500:	df000017 	ldw	fp,0(sp)
   1a504:	dec00104 	addi	sp,sp,4
   1a508:	f800283a 	ret

0001a50c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
   1a50c:	defff204 	addi	sp,sp,-56
   1a510:	dfc00d15 	stw	ra,52(sp)
   1a514:	df000c15 	stw	fp,48(sp)
   1a518:	df000c04 	addi	fp,sp,48
   1a51c:	e13ffd15 	stw	r4,-12(fp)
   1a520:	2805883a 	mov	r2,r5
   1a524:	e1bfff15 	stw	r6,-4(fp)
   1a528:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1a52c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1a530:	e0bfff17 	ldw	r2,-4(fp)
   1a534:	1000021e 	bne	r2,zero,1a540 <OSFlagDel+0x34>
        return (pgrp);
   1a538:	e0bffd17 	ldw	r2,-12(fp)
   1a53c:	00008006 	br	1a740 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1a540:	e0bffd17 	ldw	r2,-12(fp)
   1a544:	1000051e 	bne	r2,zero,1a55c <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1a548:	e0bfff17 	ldw	r2,-4(fp)
   1a54c:	00c01b84 	movi	r3,110
   1a550:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1a554:	e0bffd17 	ldw	r2,-12(fp)
   1a558:	00007906 	br	1a740 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1a55c:	d0a85503 	ldbu	r2,-24236(gp)
   1a560:	10803fcc 	andi	r2,r2,255
   1a564:	10000526 	beq	r2,zero,1a57c <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1a568:	e0bfff17 	ldw	r2,-4(fp)
   1a56c:	00c003c4 	movi	r3,15
   1a570:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1a574:	e0bffd17 	ldw	r2,-12(fp)
   1a578:	00007106 	br	1a740 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
   1a57c:	e0bffd17 	ldw	r2,-12(fp)
   1a580:	10800003 	ldbu	r2,0(r2)
   1a584:	10803fcc 	andi	r2,r2,255
   1a588:	10800160 	cmpeqi	r2,r2,5
   1a58c:	1000051e 	bne	r2,zero,1a5a4 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
   1a590:	e0bfff17 	ldw	r2,-4(fp)
   1a594:	00c00044 	movi	r3,1
   1a598:	10c00005 	stb	r3,0(r2)
        return (pgrp);
   1a59c:	e0bffd17 	ldw	r2,-12(fp)
   1a5a0:	00006706 	br	1a740 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a5a4:	0005303a 	rdctl	r2,status
   1a5a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a5ac:	e0fffc17 	ldw	r3,-16(fp)
   1a5b0:	00bfff84 	movi	r2,-2
   1a5b4:	1884703a 	and	r2,r3,r2
   1a5b8:	1001703a 	wrctl	status,r2
  
  return context;
   1a5bc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1a5c0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
   1a5c4:	e0bffd17 	ldw	r2,-12(fp)
   1a5c8:	10800117 	ldw	r2,4(r2)
   1a5cc:	10000326 	beq	r2,zero,1a5dc <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1a5d0:	00800044 	movi	r2,1
   1a5d4:	e0bff405 	stb	r2,-48(fp)
   1a5d8:	00000106 	br	1a5e0 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1a5dc:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   1a5e0:	e0bffe03 	ldbu	r2,-8(fp)
   1a5e4:	10000326 	beq	r2,zero,1a5f4 <OSFlagDel+0xe8>
   1a5e8:	10800060 	cmpeqi	r2,r2,1
   1a5ec:	1000231e 	bne	r2,zero,1a67c <OSFlagDel+0x170>
   1a5f0:	00004806 	br	1a714 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
   1a5f4:	e0bff403 	ldbu	r2,-48(fp)
   1a5f8:	1000161e 	bne	r2,zero,1a654 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
   1a5fc:	e0bffd17 	ldw	r2,-12(fp)
   1a600:	00c00fc4 	movi	r3,63
   1a604:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1a608:	e0bffd17 	ldw	r2,-12(fp)
   1a60c:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1a610:	e0bffd17 	ldw	r2,-12(fp)
   1a614:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
   1a618:	d0e85817 	ldw	r3,-24224(gp)
   1a61c:	e0bffd17 	ldw	r2,-12(fp)
   1a620:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1a624:	e0bffd17 	ldw	r2,-12(fp)
   1a628:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
   1a62c:	e0bffd17 	ldw	r2,-12(fp)
   1a630:	d0a85815 	stw	r2,-24224(gp)
   1a634:	e0bff717 	ldw	r2,-36(fp)
   1a638:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a63c:	e0bff817 	ldw	r2,-32(fp)
   1a640:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
   1a644:	e0bfff17 	ldw	r2,-4(fp)
   1a648:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
   1a64c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
   1a650:	00003a06 	br	1a73c <OSFlagDel+0x230>
   1a654:	e0bff717 	ldw	r2,-36(fp)
   1a658:	e0bff915 	stw	r2,-28(fp)
   1a65c:	e0bff917 	ldw	r2,-28(fp)
   1a660:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
   1a664:	e0bfff17 	ldw	r2,-4(fp)
   1a668:	00c01244 	movi	r3,73
   1a66c:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
   1a670:	e0bffd17 	ldw	r2,-12(fp)
   1a674:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   1a678:	00003006 	br	1a73c <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1a67c:	e0bffd17 	ldw	r2,-12(fp)
   1a680:	10800117 	ldw	r2,4(r2)
   1a684:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   1a688:	00000606 	br	1a6a4 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
   1a68c:	000b883a 	mov	r5,zero
   1a690:	e13ff517 	ldw	r4,-44(fp)
   1a694:	001b6780 	call	1b678 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   1a698:	e0bff517 	ldw	r2,-44(fp)
   1a69c:	10800017 	ldw	r2,0(r2)
   1a6a0:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
   1a6a4:	e0bff517 	ldw	r2,-44(fp)
   1a6a8:	103ff81e 	bne	r2,zero,1a68c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701a68c>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
   1a6ac:	e0bffd17 	ldw	r2,-12(fp)
   1a6b0:	00c00fc4 	movi	r3,63
   1a6b4:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
   1a6b8:	e0bffd17 	ldw	r2,-12(fp)
   1a6bc:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1a6c0:	e0bffd17 	ldw	r2,-12(fp)
   1a6c4:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
   1a6c8:	d0e85817 	ldw	r3,-24224(gp)
   1a6cc:	e0bffd17 	ldw	r2,-12(fp)
   1a6d0:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
   1a6d4:	e0bffd17 	ldw	r2,-12(fp)
   1a6d8:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
   1a6dc:	e0bffd17 	ldw	r2,-12(fp)
   1a6e0:	d0a85815 	stw	r2,-24224(gp)
   1a6e4:	e0bff717 	ldw	r2,-36(fp)
   1a6e8:	e0bffa15 	stw	r2,-24(fp)
   1a6ec:	e0bffa17 	ldw	r2,-24(fp)
   1a6f0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1a6f4:	e0bff403 	ldbu	r2,-48(fp)
   1a6f8:	10800058 	cmpnei	r2,r2,1
   1a6fc:	1000011e 	bne	r2,zero,1a704 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1a700:	00198880 	call	19888 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
   1a704:	e0bfff17 	ldw	r2,-4(fp)
   1a708:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
   1a70c:	e03ff615 	stw	zero,-40(fp)
             break;
   1a710:	00000a06 	br	1a73c <OSFlagDel+0x230>
   1a714:	e0bff717 	ldw	r2,-36(fp)
   1a718:	e0bffb15 	stw	r2,-20(fp)
   1a71c:	e0bffb17 	ldw	r2,-20(fp)
   1a720:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
   1a724:	e0bfff17 	ldw	r2,-4(fp)
   1a728:	00c001c4 	movi	r3,7
   1a72c:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
   1a730:	e0bffd17 	ldw	r2,-12(fp)
   1a734:	e0bff615 	stw	r2,-40(fp)
             break;
   1a738:	0001883a 	nop
    }
    return (pgrp_return);
   1a73c:	e0bff617 	ldw	r2,-40(fp)
}
   1a740:	e037883a 	mov	sp,fp
   1a744:	dfc00117 	ldw	ra,4(sp)
   1a748:	df000017 	ldw	fp,0(sp)
   1a74c:	dec00204 	addi	sp,sp,8
   1a750:	f800283a 	ret

0001a754 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   1a754:	defff604 	addi	sp,sp,-40
   1a758:	dfc00915 	stw	ra,36(sp)
   1a75c:	df000815 	stw	fp,32(sp)
   1a760:	df000804 	addi	fp,sp,32
   1a764:	e13ffd15 	stw	r4,-12(fp)
   1a768:	e17ffe15 	stw	r5,-8(fp)
   1a76c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a770:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1a774:	e0bfff17 	ldw	r2,-4(fp)
   1a778:	1000021e 	bne	r2,zero,1a784 <OSFlagNameGet+0x30>
        return (0);
   1a77c:	0005883a 	mov	r2,zero
   1a780:	00003906 	br	1a868 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   1a784:	e0bffd17 	ldw	r2,-12(fp)
   1a788:	1000051e 	bne	r2,zero,1a7a0 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1a78c:	e0bfff17 	ldw	r2,-4(fp)
   1a790:	00c01b84 	movi	r3,110
   1a794:	10c00005 	stb	r3,0(r2)
        return (0);
   1a798:	0005883a 	mov	r2,zero
   1a79c:	00003206 	br	1a868 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1a7a0:	e0bffe17 	ldw	r2,-8(fp)
   1a7a4:	1000051e 	bne	r2,zero,1a7bc <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1a7a8:	e0bfff17 	ldw	r2,-4(fp)
   1a7ac:	00c00304 	movi	r3,12
   1a7b0:	10c00005 	stb	r3,0(r2)
        return (0);
   1a7b4:	0005883a 	mov	r2,zero
   1a7b8:	00002b06 	br	1a868 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1a7bc:	d0a85503 	ldbu	r2,-24236(gp)
   1a7c0:	10803fcc 	andi	r2,r2,255
   1a7c4:	10000526 	beq	r2,zero,1a7dc <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   1a7c8:	e0bfff17 	ldw	r2,-4(fp)
   1a7cc:	00c00444 	movi	r3,17
   1a7d0:	10c00005 	stb	r3,0(r2)
        return (0);
   1a7d4:	0005883a 	mov	r2,zero
   1a7d8:	00002306 	br	1a868 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a7dc:	0005303a 	rdctl	r2,status
   1a7e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a7e4:	e0fffc17 	ldw	r3,-16(fp)
   1a7e8:	00bfff84 	movi	r2,-2
   1a7ec:	1884703a 	and	r2,r3,r2
   1a7f0:	1001703a 	wrctl	status,r2
  
  return context;
   1a7f4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1a7f8:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1a7fc:	e0bffd17 	ldw	r2,-12(fp)
   1a800:	10800003 	ldbu	r2,0(r2)
   1a804:	10803fcc 	andi	r2,r2,255
   1a808:	10800160 	cmpeqi	r2,r2,5
   1a80c:	1000091e 	bne	r2,zero,1a834 <OSFlagNameGet+0xe0>
   1a810:	e0bff817 	ldw	r2,-32(fp)
   1a814:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a818:	e0bff917 	ldw	r2,-28(fp)
   1a81c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   1a820:	e0bfff17 	ldw	r2,-4(fp)
   1a824:	00c00044 	movi	r3,1
   1a828:	10c00005 	stb	r3,0(r2)
        return (0);
   1a82c:	0005883a 	mov	r2,zero
   1a830:	00000d06 	br	1a868 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
   1a834:	e0bffd17 	ldw	r2,-12(fp)
   1a838:	10800284 	addi	r2,r2,10
   1a83c:	100b883a 	mov	r5,r2
   1a840:	e13ffe17 	ldw	r4,-8(fp)
   1a844:	00199cc0 	call	199cc <OS_StrCopy>
   1a848:	e0bffb05 	stb	r2,-20(fp)
   1a84c:	e0bff817 	ldw	r2,-32(fp)
   1a850:	e0bffa15 	stw	r2,-24(fp)
   1a854:	e0bffa17 	ldw	r2,-24(fp)
   1a858:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1a85c:	e0bfff17 	ldw	r2,-4(fp)
   1a860:	10000005 	stb	zero,0(r2)
    return (len);
   1a864:	e0bffb03 	ldbu	r2,-20(fp)
}
   1a868:	e037883a 	mov	sp,fp
   1a86c:	dfc00117 	ldw	ra,4(sp)
   1a870:	df000017 	ldw	fp,0(sp)
   1a874:	dec00204 	addi	sp,sp,8
   1a878:	f800283a 	ret

0001a87c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
   1a87c:	defff504 	addi	sp,sp,-44
   1a880:	dfc00a15 	stw	ra,40(sp)
   1a884:	df000915 	stw	fp,36(sp)
   1a888:	df000904 	addi	fp,sp,36
   1a88c:	e13ffd15 	stw	r4,-12(fp)
   1a890:	e17ffe15 	stw	r5,-8(fp)
   1a894:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1a898:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1a89c:	e0bfff17 	ldw	r2,-4(fp)
   1a8a0:	10004326 	beq	r2,zero,1a9b0 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
   1a8a4:	e0bffd17 	ldw	r2,-12(fp)
   1a8a8:	1000041e 	bne	r2,zero,1a8bc <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1a8ac:	e0bfff17 	ldw	r2,-4(fp)
   1a8b0:	00c01b84 	movi	r3,110
   1a8b4:	10c00005 	stb	r3,0(r2)
        return;
   1a8b8:	00003e06 	br	1a9b4 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1a8bc:	e0bffe17 	ldw	r2,-8(fp)
   1a8c0:	1000041e 	bne	r2,zero,1a8d4 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   1a8c4:	e0bfff17 	ldw	r2,-4(fp)
   1a8c8:	00c00304 	movi	r3,12
   1a8cc:	10c00005 	stb	r3,0(r2)
        return;
   1a8d0:	00003806 	br	1a9b4 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1a8d4:	d0a85503 	ldbu	r2,-24236(gp)
   1a8d8:	10803fcc 	andi	r2,r2,255
   1a8dc:	10000426 	beq	r2,zero,1a8f0 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   1a8e0:	e0bfff17 	ldw	r2,-4(fp)
   1a8e4:	00c00484 	movi	r3,18
   1a8e8:	10c00005 	stb	r3,0(r2)
        return;
   1a8ec:	00003106 	br	1a9b4 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1a8f0:	0005303a 	rdctl	r2,status
   1a8f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1a8f8:	e0fffc17 	ldw	r3,-16(fp)
   1a8fc:	00bfff84 	movi	r2,-2
   1a900:	1884703a 	and	r2,r3,r2
   1a904:	1001703a 	wrctl	status,r2
  
  return context;
   1a908:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1a90c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
   1a910:	e0bffd17 	ldw	r2,-12(fp)
   1a914:	10800003 	ldbu	r2,0(r2)
   1a918:	10803fcc 	andi	r2,r2,255
   1a91c:	10800160 	cmpeqi	r2,r2,5
   1a920:	1000081e 	bne	r2,zero,1a944 <OSFlagNameSet+0xc8>
   1a924:	e0bff717 	ldw	r2,-36(fp)
   1a928:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1a92c:	e0bff817 	ldw	r2,-32(fp)
   1a930:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
   1a934:	e0bfff17 	ldw	r2,-4(fp)
   1a938:	00c00044 	movi	r3,1
   1a93c:	10c00005 	stb	r3,0(r2)
        return;
   1a940:	00001c06 	br	1a9b4 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   1a944:	e13ffe17 	ldw	r4,-8(fp)
   1a948:	0019a400 	call	19a40 <OS_StrLen>
   1a94c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
   1a950:	e0bffa03 	ldbu	r2,-24(fp)
   1a954:	10800830 	cmpltui	r2,r2,32
   1a958:	1000081e 	bne	r2,zero,1a97c <OSFlagNameSet+0x100>
   1a95c:	e0bff717 	ldw	r2,-36(fp)
   1a960:	e0bff915 	stw	r2,-28(fp)
   1a964:	e0bff917 	ldw	r2,-28(fp)
   1a968:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
   1a96c:	e0bfff17 	ldw	r2,-4(fp)
   1a970:	00c01cc4 	movi	r3,115
   1a974:	10c00005 	stb	r3,0(r2)
        return;
   1a978:	00000e06 	br	1a9b4 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
   1a97c:	e0bffd17 	ldw	r2,-12(fp)
   1a980:	10800284 	addi	r2,r2,10
   1a984:	e17ffe17 	ldw	r5,-8(fp)
   1a988:	1009883a 	mov	r4,r2
   1a98c:	00199cc0 	call	199cc <OS_StrCopy>
   1a990:	e0bff717 	ldw	r2,-36(fp)
   1a994:	e0bffb15 	stw	r2,-20(fp)
   1a998:	e0bffb17 	ldw	r2,-20(fp)
   1a99c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1a9a0:	e0bfff17 	ldw	r2,-4(fp)
   1a9a4:	10000005 	stb	zero,0(r2)
    return;
   1a9a8:	0001883a 	nop
   1a9ac:	00000106 	br	1a9b4 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   1a9b0:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
   1a9b4:	e037883a 	mov	sp,fp
   1a9b8:	dfc00117 	ldw	ra,4(sp)
   1a9bc:	df000017 	ldw	fp,0(sp)
   1a9c0:	dec00204 	addi	sp,sp,8
   1a9c4:	f800283a 	ret

0001a9c8 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
   1a9c8:	deffe104 	addi	sp,sp,-124
   1a9cc:	dfc01e15 	stw	ra,120(sp)
   1a9d0:	df001d15 	stw	fp,116(sp)
   1a9d4:	df001d04 	addi	fp,sp,116
   1a9d8:	e13ffc15 	stw	r4,-16(fp)
   1a9dc:	2809883a 	mov	r4,r5
   1a9e0:	3007883a 	mov	r3,r6
   1a9e4:	3805883a 	mov	r2,r7
   1a9e8:	e13ffd0d 	sth	r4,-12(fp)
   1a9ec:	e0fffe05 	stb	r3,-8(fp)
   1a9f0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1a9f4:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1a9f8:	e0800217 	ldw	r2,8(fp)
   1a9fc:	1000021e 	bne	r2,zero,1aa08 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
   1aa00:	0005883a 	mov	r2,zero
   1aa04:	00015906 	br	1af6c <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
   1aa08:	e0bffc17 	ldw	r2,-16(fp)
   1aa0c:	1000051e 	bne	r2,zero,1aa24 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1aa10:	e0800217 	ldw	r2,8(fp)
   1aa14:	00c01b84 	movi	r3,110
   1aa18:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1aa1c:	0005883a 	mov	r2,zero
   1aa20:	00015206 	br	1af6c <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1aa24:	d0a85503 	ldbu	r2,-24236(gp)
   1aa28:	10803fcc 	andi	r2,r2,255
   1aa2c:	10000526 	beq	r2,zero,1aa44 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
   1aa30:	e0800217 	ldw	r2,8(fp)
   1aa34:	00c00084 	movi	r3,2
   1aa38:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1aa3c:	0005883a 	mov	r2,zero
   1aa40:	00014a06 	br	1af6c <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
   1aa44:	d0a84703 	ldbu	r2,-24292(gp)
   1aa48:	10803fcc 	andi	r2,r2,255
   1aa4c:	10000526 	beq	r2,zero,1aa64 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
   1aa50:	e0800217 	ldw	r2,8(fp)
   1aa54:	00c00344 	movi	r3,13
   1aa58:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1aa5c:	0005883a 	mov	r2,zero
   1aa60:	00014206 	br	1af6c <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
   1aa64:	e0bffc17 	ldw	r2,-16(fp)
   1aa68:	10800003 	ldbu	r2,0(r2)
   1aa6c:	10803fcc 	andi	r2,r2,255
   1aa70:	10800160 	cmpeqi	r2,r2,5
   1aa74:	1000051e 	bne	r2,zero,1aa8c <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
   1aa78:	e0800217 	ldw	r2,8(fp)
   1aa7c:	00c00044 	movi	r3,1
   1aa80:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1aa84:	0005883a 	mov	r2,zero
   1aa88:	00013806 	br	1af6c <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
   1aa8c:	e0fffe03 	ldbu	r3,-8(fp)
   1aa90:	00bfe004 	movi	r2,-128
   1aa94:	1884703a 	and	r2,r3,r2
   1aa98:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
   1aa9c:	e0bfe603 	ldbu	r2,-104(fp)
   1aaa0:	10000626 	beq	r2,zero,1aabc <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
   1aaa4:	e0bffe03 	ldbu	r2,-8(fp)
   1aaa8:	10801fcc 	andi	r2,r2,127
   1aaac:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
   1aab0:	00800044 	movi	r2,1
   1aab4:	e0bfe405 	stb	r2,-112(fp)
   1aab8:	00000106 	br	1aac0 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
   1aabc:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1aac0:	0005303a 	rdctl	r2,status
   1aac4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1aac8:	e0fff617 	ldw	r3,-40(fp)
   1aacc:	00bfff84 	movi	r2,-2
   1aad0:	1884703a 	and	r2,r3,r2
   1aad4:	1001703a 	wrctl	status,r2
  
  return context;
   1aad8:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   1aadc:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
   1aae0:	e0bffe03 	ldbu	r2,-8(fp)
   1aae4:	10c00060 	cmpeqi	r3,r2,1
   1aae8:	1800921e 	bne	r3,zero,1ad34 <OSFlagPend+0x36c>
   1aaec:	10c00088 	cmpgei	r3,r2,2
   1aaf0:	1800021e 	bne	r3,zero,1aafc <OSFlagPend+0x134>
   1aaf4:	10006126 	beq	r2,zero,1ac7c <OSFlagPend+0x2b4>
   1aaf8:	0000bb06 	br	1ade8 <OSFlagPend+0x420>
   1aafc:	10c000a0 	cmpeqi	r3,r2,2
   1ab00:	1800031e 	bne	r3,zero,1ab10 <OSFlagPend+0x148>
   1ab04:	108000e0 	cmpeqi	r2,r2,3
   1ab08:	10002f1e 	bne	r2,zero,1abc8 <OSFlagPend+0x200>
   1ab0c:	0000b606 	br	1ade8 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
   1ab10:	e0bffc17 	ldw	r2,-16(fp)
   1ab14:	10c0020b 	ldhu	r3,8(r2)
   1ab18:	e0bffd0b 	ldhu	r2,-12(fp)
   1ab1c:	1884703a 	and	r2,r3,r2
   1ab20:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1ab24:	e0ffe80b 	ldhu	r3,-96(fp)
   1ab28:	e0bffd0b 	ldhu	r2,-12(fp)
   1ab2c:	1880171e 	bne	r3,r2,1ab8c <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1ab30:	e0bfe403 	ldbu	r2,-112(fp)
   1ab34:	10800058 	cmpnei	r2,r2,1
   1ab38:	1000091e 	bne	r2,zero,1ab60 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
   1ab3c:	e0bffc17 	ldw	r2,-16(fp)
   1ab40:	1080020b 	ldhu	r2,8(r2)
   1ab44:	1007883a 	mov	r3,r2
   1ab48:	e0bfe80b 	ldhu	r2,-96(fp)
   1ab4c:	0084303a 	nor	r2,zero,r2
   1ab50:	1884703a 	and	r2,r3,r2
   1ab54:	1007883a 	mov	r3,r2
   1ab58:	e0bffc17 	ldw	r2,-16(fp)
   1ab5c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1ab60:	d0a85617 	ldw	r2,-24232(gp)
   1ab64:	e0ffe80b 	ldhu	r3,-96(fp)
   1ab68:	10c00b0d 	sth	r3,44(r2)
   1ab6c:	e0bfe517 	ldw	r2,-108(fp)
   1ab70:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ab74:	e0bfe717 	ldw	r2,-100(fp)
   1ab78:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1ab7c:	e0800217 	ldw	r2,8(fp)
   1ab80:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1ab84:	e0bfe80b 	ldhu	r2,-96(fp)
   1ab88:	0000f806 	br	1af6c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1ab8c:	e13ffd0b 	ldhu	r4,-12(fp)
   1ab90:	e17ffe03 	ldbu	r5,-8(fp)
   1ab94:	e0bfff0b 	ldhu	r2,-4(fp)
   1ab98:	e0fff704 	addi	r3,fp,-36
   1ab9c:	d8800015 	stw	r2,0(sp)
   1aba0:	280f883a 	mov	r7,r5
   1aba4:	200d883a 	mov	r6,r4
   1aba8:	180b883a 	mov	r5,r3
   1abac:	e13ffc17 	ldw	r4,-16(fp)
   1abb0:	001b4380 	call	1b438 <OS_FlagBlock>
   1abb4:	e0bfe517 	ldw	r2,-108(fp)
   1abb8:	e0bfe915 	stw	r2,-92(fp)
   1abbc:	e0bfe917 	ldw	r2,-92(fp)
   1abc0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1abc4:	00009206 	br	1ae10 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
   1abc8:	e0bffc17 	ldw	r2,-16(fp)
   1abcc:	10c0020b 	ldhu	r3,8(r2)
   1abd0:	e0bffd0b 	ldhu	r2,-12(fp)
   1abd4:	1884703a 	and	r2,r3,r2
   1abd8:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
   1abdc:	e0bfe80b 	ldhu	r2,-96(fp)
   1abe0:	10001726 	beq	r2,zero,1ac40 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1abe4:	e0bfe403 	ldbu	r2,-112(fp)
   1abe8:	10800058 	cmpnei	r2,r2,1
   1abec:	1000091e 	bne	r2,zero,1ac14 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
   1abf0:	e0bffc17 	ldw	r2,-16(fp)
   1abf4:	1080020b 	ldhu	r2,8(r2)
   1abf8:	1007883a 	mov	r3,r2
   1abfc:	e0bfe80b 	ldhu	r2,-96(fp)
   1ac00:	0084303a 	nor	r2,zero,r2
   1ac04:	1884703a 	and	r2,r3,r2
   1ac08:	1007883a 	mov	r3,r2
   1ac0c:	e0bffc17 	ldw	r2,-16(fp)
   1ac10:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1ac14:	d0a85617 	ldw	r2,-24232(gp)
   1ac18:	e0ffe80b 	ldhu	r3,-96(fp)
   1ac1c:	10c00b0d 	sth	r3,44(r2)
   1ac20:	e0bfe517 	ldw	r2,-108(fp)
   1ac24:	e0bfea15 	stw	r2,-88(fp)
   1ac28:	e0bfea17 	ldw	r2,-88(fp)
   1ac2c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1ac30:	e0800217 	ldw	r2,8(fp)
   1ac34:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1ac38:	e0bfe80b 	ldhu	r2,-96(fp)
   1ac3c:	0000cb06 	br	1af6c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1ac40:	e13ffd0b 	ldhu	r4,-12(fp)
   1ac44:	e17ffe03 	ldbu	r5,-8(fp)
   1ac48:	e0bfff0b 	ldhu	r2,-4(fp)
   1ac4c:	e0fff704 	addi	r3,fp,-36
   1ac50:	d8800015 	stw	r2,0(sp)
   1ac54:	280f883a 	mov	r7,r5
   1ac58:	200d883a 	mov	r6,r4
   1ac5c:	180b883a 	mov	r5,r3
   1ac60:	e13ffc17 	ldw	r4,-16(fp)
   1ac64:	001b4380 	call	1b438 <OS_FlagBlock>
   1ac68:	e0bfe517 	ldw	r2,-108(fp)
   1ac6c:	e0bfeb15 	stw	r2,-84(fp)
   1ac70:	e0bfeb17 	ldw	r2,-84(fp)
   1ac74:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1ac78:	00006506 	br	1ae10 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
   1ac7c:	e0bffc17 	ldw	r2,-16(fp)
   1ac80:	1080020b 	ldhu	r2,8(r2)
   1ac84:	0084303a 	nor	r2,zero,r2
   1ac88:	1007883a 	mov	r3,r2
   1ac8c:	e0bffd0b 	ldhu	r2,-12(fp)
   1ac90:	1884703a 	and	r2,r3,r2
   1ac94:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
   1ac98:	e0ffe80b 	ldhu	r3,-96(fp)
   1ac9c:	e0bffd0b 	ldhu	r2,-12(fp)
   1aca0:	1880151e 	bne	r3,r2,1acf8 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1aca4:	e0bfe403 	ldbu	r2,-112(fp)
   1aca8:	10800058 	cmpnei	r2,r2,1
   1acac:	1000071e 	bne	r2,zero,1accc <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
   1acb0:	e0bffc17 	ldw	r2,-16(fp)
   1acb4:	10c0020b 	ldhu	r3,8(r2)
   1acb8:	e0bfe80b 	ldhu	r2,-96(fp)
   1acbc:	1884b03a 	or	r2,r3,r2
   1acc0:	1007883a 	mov	r3,r2
   1acc4:	e0bffc17 	ldw	r2,-16(fp)
   1acc8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1accc:	d0a85617 	ldw	r2,-24232(gp)
   1acd0:	e0ffe80b 	ldhu	r3,-96(fp)
   1acd4:	10c00b0d 	sth	r3,44(r2)
   1acd8:	e0bfe517 	ldw	r2,-108(fp)
   1acdc:	e0bfec15 	stw	r2,-80(fp)
   1ace0:	e0bfec17 	ldw	r2,-80(fp)
   1ace4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1ace8:	e0800217 	ldw	r2,8(fp)
   1acec:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1acf0:	e0bfe80b 	ldhu	r2,-96(fp)
   1acf4:	00009d06 	br	1af6c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1acf8:	e13ffd0b 	ldhu	r4,-12(fp)
   1acfc:	e17ffe03 	ldbu	r5,-8(fp)
   1ad00:	e0bfff0b 	ldhu	r2,-4(fp)
   1ad04:	e0fff704 	addi	r3,fp,-36
   1ad08:	d8800015 	stw	r2,0(sp)
   1ad0c:	280f883a 	mov	r7,r5
   1ad10:	200d883a 	mov	r6,r4
   1ad14:	180b883a 	mov	r5,r3
   1ad18:	e13ffc17 	ldw	r4,-16(fp)
   1ad1c:	001b4380 	call	1b438 <OS_FlagBlock>
   1ad20:	e0bfe517 	ldw	r2,-108(fp)
   1ad24:	e0bfed15 	stw	r2,-76(fp)
   1ad28:	e0bfed17 	ldw	r2,-76(fp)
   1ad2c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1ad30:	00003706 	br	1ae10 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
   1ad34:	e0bffc17 	ldw	r2,-16(fp)
   1ad38:	1080020b 	ldhu	r2,8(r2)
   1ad3c:	0084303a 	nor	r2,zero,r2
   1ad40:	1007883a 	mov	r3,r2
   1ad44:	e0bffd0b 	ldhu	r2,-12(fp)
   1ad48:	1884703a 	and	r2,r3,r2
   1ad4c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
   1ad50:	e0bfe80b 	ldhu	r2,-96(fp)
   1ad54:	10001526 	beq	r2,zero,1adac <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
   1ad58:	e0bfe403 	ldbu	r2,-112(fp)
   1ad5c:	10800058 	cmpnei	r2,r2,1
   1ad60:	1000071e 	bne	r2,zero,1ad80 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
   1ad64:	e0bffc17 	ldw	r2,-16(fp)
   1ad68:	10c0020b 	ldhu	r3,8(r2)
   1ad6c:	e0bfe80b 	ldhu	r2,-96(fp)
   1ad70:	1884b03a 	or	r2,r3,r2
   1ad74:	1007883a 	mov	r3,r2
   1ad78:	e0bffc17 	ldw	r2,-16(fp)
   1ad7c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
   1ad80:	d0a85617 	ldw	r2,-24232(gp)
   1ad84:	e0ffe80b 	ldhu	r3,-96(fp)
   1ad88:	10c00b0d 	sth	r3,44(r2)
   1ad8c:	e0bfe517 	ldw	r2,-108(fp)
   1ad90:	e0bfee15 	stw	r2,-72(fp)
   1ad94:	e0bfee17 	ldw	r2,-72(fp)
   1ad98:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
   1ad9c:	e0800217 	ldw	r2,8(fp)
   1ada0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
   1ada4:	e0bfe80b 	ldhu	r2,-96(fp)
   1ada8:	00007006 	br	1af6c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
   1adac:	e13ffd0b 	ldhu	r4,-12(fp)
   1adb0:	e17ffe03 	ldbu	r5,-8(fp)
   1adb4:	e0bfff0b 	ldhu	r2,-4(fp)
   1adb8:	e0fff704 	addi	r3,fp,-36
   1adbc:	d8800015 	stw	r2,0(sp)
   1adc0:	280f883a 	mov	r7,r5
   1adc4:	200d883a 	mov	r6,r4
   1adc8:	180b883a 	mov	r5,r3
   1adcc:	e13ffc17 	ldw	r4,-16(fp)
   1add0:	001b4380 	call	1b438 <OS_FlagBlock>
   1add4:	e0bfe517 	ldw	r2,-108(fp)
   1add8:	e0bfef15 	stw	r2,-68(fp)
   1addc:	e0bfef17 	ldw	r2,-68(fp)
   1ade0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
   1ade4:	00000a06 	br	1ae10 <OSFlagPend+0x448>
   1ade8:	e0bfe517 	ldw	r2,-108(fp)
   1adec:	e0bff015 	stw	r2,-64(fp)
   1adf0:	e0bff017 	ldw	r2,-64(fp)
   1adf4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
   1adf8:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
   1adfc:	e0800217 	ldw	r2,8(fp)
   1ae00:	00c01bc4 	movi	r3,111
   1ae04:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
   1ae08:	e0bfe80b 	ldhu	r2,-96(fp)
   1ae0c:	00005706 	br	1af6c <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
   1ae10:	00198880 	call	19888 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ae14:	0005303a 	rdctl	r2,status
   1ae18:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ae1c:	e0fff117 	ldw	r3,-60(fp)
   1ae20:	00bfff84 	movi	r2,-2
   1ae24:	1884703a 	and	r2,r3,r2
   1ae28:	1001703a 	wrctl	status,r2
  
  return context;
   1ae2c:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
   1ae30:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
   1ae34:	d0a85617 	ldw	r2,-24232(gp)
   1ae38:	10800c43 	ldbu	r2,49(r2)
   1ae3c:	10803fcc 	andi	r2,r2,255
   1ae40:	10001c26 	beq	r2,zero,1aeb4 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
   1ae44:	d0a85617 	ldw	r2,-24232(gp)
   1ae48:	10800c43 	ldbu	r2,49(r2)
   1ae4c:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1ae50:	d0a85617 	ldw	r2,-24232(gp)
   1ae54:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
   1ae58:	e0bff704 	addi	r2,fp,-36
   1ae5c:	1009883a 	mov	r4,r2
   1ae60:	001b76c0 	call	1b76c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
   1ae64:	d0a85617 	ldw	r2,-24232(gp)
   1ae68:	10000c05 	stb	zero,48(r2)
   1ae6c:	e0bfe517 	ldw	r2,-108(fp)
   1ae70:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ae74:	e0bff217 	ldw	r2,-56(fp)
   1ae78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
   1ae7c:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
   1ae80:	e0bff303 	ldbu	r2,-52(fp)
   1ae84:	108000a0 	cmpeqi	r2,r2,2
   1ae88:	10000426 	beq	r2,zero,1ae9c <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
   1ae8c:	e0800217 	ldw	r2,8(fp)
   1ae90:	00c00384 	movi	r3,14
   1ae94:	10c00005 	stb	r3,0(r2)
                 break;
   1ae98:	00000406 	br	1aeac <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
   1ae9c:	e0800217 	ldw	r2,8(fp)
   1aea0:	00c00284 	movi	r3,10
   1aea4:	10c00005 	stb	r3,0(r2)
                 break;
   1aea8:	0001883a 	nop
        }
        return (flags_rdy);
   1aeac:	e0bfe80b 	ldhu	r2,-96(fp)
   1aeb0:	00002e06 	br	1af6c <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
   1aeb4:	d0a85617 	ldw	r2,-24232(gp)
   1aeb8:	10800b0b 	ldhu	r2,44(r2)
   1aebc:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
   1aec0:	e0bfe403 	ldbu	r2,-112(fp)
   1aec4:	10800058 	cmpnei	r2,r2,1
   1aec8:	1000211e 	bne	r2,zero,1af50 <OSFlagPend+0x588>
        switch (wait_type) {
   1aecc:	e0bffe03 	ldbu	r2,-8(fp)
   1aed0:	10001616 	blt	r2,zero,1af2c <OSFlagPend+0x564>
   1aed4:	10c00090 	cmplti	r3,r2,2
   1aed8:	18000c1e 	bne	r3,zero,1af0c <OSFlagPend+0x544>
   1aedc:	10800108 	cmpgei	r2,r2,4
   1aee0:	1000121e 	bne	r2,zero,1af2c <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
   1aee4:	e0bffc17 	ldw	r2,-16(fp)
   1aee8:	1080020b 	ldhu	r2,8(r2)
   1aeec:	1007883a 	mov	r3,r2
   1aef0:	e0bfe80b 	ldhu	r2,-96(fp)
   1aef4:	0084303a 	nor	r2,zero,r2
   1aef8:	1884703a 	and	r2,r3,r2
   1aefc:	1007883a 	mov	r3,r2
   1af00:	e0bffc17 	ldw	r2,-16(fp)
   1af04:	10c0020d 	sth	r3,8(r2)
                 break;
   1af08:	00001106 	br	1af50 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
   1af0c:	e0bffc17 	ldw	r2,-16(fp)
   1af10:	10c0020b 	ldhu	r3,8(r2)
   1af14:	e0bfe80b 	ldhu	r2,-96(fp)
   1af18:	1884b03a 	or	r2,r3,r2
   1af1c:	1007883a 	mov	r3,r2
   1af20:	e0bffc17 	ldw	r2,-16(fp)
   1af24:	10c0020d 	sth	r3,8(r2)
                 break;
   1af28:	00000906 	br	1af50 <OSFlagPend+0x588>
   1af2c:	e0bfe517 	ldw	r2,-108(fp)
   1af30:	e0bff415 	stw	r2,-48(fp)
   1af34:	e0bff417 	ldw	r2,-48(fp)
   1af38:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   1af3c:	e0800217 	ldw	r2,8(fp)
   1af40:	00c01bc4 	movi	r3,111
   1af44:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   1af48:	0005883a 	mov	r2,zero
   1af4c:	00000706 	br	1af6c <OSFlagPend+0x5a4>
   1af50:	e0bfe517 	ldw	r2,-108(fp)
   1af54:	e0bff515 	stw	r2,-44(fp)
   1af58:	e0bff517 	ldw	r2,-44(fp)
   1af5c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
   1af60:	e0800217 	ldw	r2,8(fp)
   1af64:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
   1af68:	e0bfe80b 	ldhu	r2,-96(fp)
}
   1af6c:	e037883a 	mov	sp,fp
   1af70:	dfc00117 	ldw	ra,4(sp)
   1af74:	df000017 	ldw	fp,0(sp)
   1af78:	dec00204 	addi	sp,sp,8
   1af7c:	f800283a 	ret

0001af80 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
   1af80:	defffb04 	addi	sp,sp,-20
   1af84:	df000415 	stw	fp,16(sp)
   1af88:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
   1af8c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1af90:	0005303a 	rdctl	r2,status
   1af94:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1af98:	e0fffe17 	ldw	r3,-8(fp)
   1af9c:	00bfff84 	movi	r2,-2
   1afa0:	1884703a 	and	r2,r3,r2
   1afa4:	1001703a 	wrctl	status,r2
  
  return context;
   1afa8:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1afac:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
   1afb0:	d0a85617 	ldw	r2,-24232(gp)
   1afb4:	10800b0b 	ldhu	r2,44(r2)
   1afb8:	e0bffd0d 	sth	r2,-12(fp)
   1afbc:	e0bffc17 	ldw	r2,-16(fp)
   1afc0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1afc4:	e0bfff17 	ldw	r2,-4(fp)
   1afc8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
   1afcc:	e0bffd0b 	ldhu	r2,-12(fp)
}
   1afd0:	e037883a 	mov	sp,fp
   1afd4:	df000017 	ldw	fp,0(sp)
   1afd8:	dec00104 	addi	sp,sp,4
   1afdc:	f800283a 	ret

0001afe0 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
   1afe0:	deffef04 	addi	sp,sp,-68
   1afe4:	dfc01015 	stw	ra,64(sp)
   1afe8:	df000f15 	stw	fp,60(sp)
   1afec:	df000f04 	addi	fp,sp,60
   1aff0:	e13ffc15 	stw	r4,-16(fp)
   1aff4:	2807883a 	mov	r3,r5
   1aff8:	3005883a 	mov	r2,r6
   1affc:	e1ffff15 	stw	r7,-4(fp)
   1b000:	e0fffd0d 	sth	r3,-12(fp)
   1b004:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
   1b008:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1b00c:	e0bfff17 	ldw	r2,-4(fp)
   1b010:	1000021e 	bne	r2,zero,1b01c <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
   1b014:	0005883a 	mov	r2,zero
   1b018:	0000d106 	br	1b360 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
   1b01c:	e0bffc17 	ldw	r2,-16(fp)
   1b020:	1000051e 	bne	r2,zero,1b038 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1b024:	e0bfff17 	ldw	r2,-4(fp)
   1b028:	00c01b84 	movi	r3,110
   1b02c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1b030:	0005883a 	mov	r2,zero
   1b034:	0000ca06 	br	1b360 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
   1b038:	e0bffc17 	ldw	r2,-16(fp)
   1b03c:	10800003 	ldbu	r2,0(r2)
   1b040:	10803fcc 	andi	r2,r2,255
   1b044:	10800160 	cmpeqi	r2,r2,5
   1b048:	1000051e 	bne	r2,zero,1b060 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
   1b04c:	e0bfff17 	ldw	r2,-4(fp)
   1b050:	00c00044 	movi	r3,1
   1b054:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1b058:	0005883a 	mov	r2,zero
   1b05c:	0000c006 	br	1b360 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b060:	0005303a 	rdctl	r2,status
   1b064:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b068:	e0fffb17 	ldw	r3,-20(fp)
   1b06c:	00bfff84 	movi	r2,-2
   1b070:	1884703a 	and	r2,r3,r2
   1b074:	1001703a 	wrctl	status,r2
  
  return context;
   1b078:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
   1b07c:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
   1b080:	e0bffe03 	ldbu	r2,-8(fp)
   1b084:	10000326 	beq	r2,zero,1b094 <OSFlagPost+0xb4>
   1b088:	10800060 	cmpeqi	r2,r2,1
   1b08c:	10000b1e 	bne	r2,zero,1b0bc <OSFlagPost+0xdc>
   1b090:	00001206 	br	1b0dc <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
   1b094:	e0bffc17 	ldw	r2,-16(fp)
   1b098:	1080020b 	ldhu	r2,8(r2)
   1b09c:	1007883a 	mov	r3,r2
   1b0a0:	e0bffd0b 	ldhu	r2,-12(fp)
   1b0a4:	0084303a 	nor	r2,zero,r2
   1b0a8:	1884703a 	and	r2,r3,r2
   1b0ac:	1007883a 	mov	r3,r2
   1b0b0:	e0bffc17 	ldw	r2,-16(fp)
   1b0b4:	10c0020d 	sth	r3,8(r2)
             break;
   1b0b8:	00001106 	br	1b100 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
   1b0bc:	e0bffc17 	ldw	r2,-16(fp)
   1b0c0:	10c0020b 	ldhu	r3,8(r2)
   1b0c4:	e0bffd0b 	ldhu	r2,-12(fp)
   1b0c8:	1884b03a 	or	r2,r3,r2
   1b0cc:	1007883a 	mov	r3,r2
   1b0d0:	e0bffc17 	ldw	r2,-16(fp)
   1b0d4:	10c0020d 	sth	r3,8(r2)
             break;
   1b0d8:	00000906 	br	1b100 <OSFlagPost+0x120>
   1b0dc:	e0bff317 	ldw	r2,-52(fp)
   1b0e0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b0e4:	e0bff417 	ldw	r2,-48(fp)
   1b0e8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
   1b0ec:	e0bfff17 	ldw	r2,-4(fp)
   1b0f0:	00c01c44 	movi	r3,113
   1b0f4:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
   1b0f8:	0005883a 	mov	r2,zero
   1b0fc:	00009806 	br	1b360 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
   1b100:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1b104:	e0bffc17 	ldw	r2,-16(fp)
   1b108:	10800117 	ldw	r2,4(r2)
   1b10c:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   1b110:	00007706 	br	1b2f0 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
   1b114:	e0bff117 	ldw	r2,-60(fp)
   1b118:	10800483 	ldbu	r2,18(r2)
   1b11c:	10803fcc 	andi	r2,r2,255
   1b120:	10c00060 	cmpeqi	r3,r2,1
   1b124:	18004a1e 	bne	r3,zero,1b250 <OSFlagPost+0x270>
   1b128:	10c00088 	cmpgei	r3,r2,2
   1b12c:	1800021e 	bne	r3,zero,1b138 <OSFlagPost+0x158>
   1b130:	10002f26 	beq	r2,zero,1b1f0 <OSFlagPost+0x210>
   1b134:	00005b06 	br	1b2a4 <OSFlagPost+0x2c4>
   1b138:	10c000a0 	cmpeqi	r3,r2,2
   1b13c:	1800031e 	bne	r3,zero,1b14c <OSFlagPost+0x16c>
   1b140:	108000e0 	cmpeqi	r2,r2,3
   1b144:	1000171e 	bne	r2,zero,1b1a4 <OSFlagPost+0x1c4>
   1b148:	00005606 	br	1b2a4 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1b14c:	e0bffc17 	ldw	r2,-16(fp)
   1b150:	10c0020b 	ldhu	r3,8(r2)
   1b154:	e0bff117 	ldw	r2,-60(fp)
   1b158:	1080040b 	ldhu	r2,16(r2)
   1b15c:	1884703a 	and	r2,r3,r2
   1b160:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   1b164:	e0bff117 	ldw	r2,-60(fp)
   1b168:	1080040b 	ldhu	r2,16(r2)
   1b16c:	10ffffcc 	andi	r3,r2,65535
   1b170:	e0bff60b 	ldhu	r2,-40(fp)
   1b174:	1880541e 	bne	r3,r2,1b2c8 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1b178:	e0bff60b 	ldhu	r2,-40(fp)
   1b17c:	100b883a 	mov	r5,r2
   1b180:	e13ff117 	ldw	r4,-60(fp)
   1b184:	001b6780 	call	1b678 <OS_FlagTaskRdy>
   1b188:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1b18c:	e0bff683 	ldbu	r2,-38(fp)
   1b190:	10800058 	cmpnei	r2,r2,1
   1b194:	10004c1e 	bne	r2,zero,1b2c8 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1b198:	00800044 	movi	r2,1
   1b19c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1b1a0:	00004906 	br	1b2c8 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1b1a4:	e0bffc17 	ldw	r2,-16(fp)
   1b1a8:	10c0020b 	ldhu	r3,8(r2)
   1b1ac:	e0bff117 	ldw	r2,-60(fp)
   1b1b0:	1080040b 	ldhu	r2,16(r2)
   1b1b4:	1884703a 	and	r2,r3,r2
   1b1b8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   1b1bc:	e0bff60b 	ldhu	r2,-40(fp)
   1b1c0:	10004326 	beq	r2,zero,1b2d0 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1b1c4:	e0bff60b 	ldhu	r2,-40(fp)
   1b1c8:	100b883a 	mov	r5,r2
   1b1cc:	e13ff117 	ldw	r4,-60(fp)
   1b1d0:	001b6780 	call	1b678 <OS_FlagTaskRdy>
   1b1d4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1b1d8:	e0bff683 	ldbu	r2,-38(fp)
   1b1dc:	10800058 	cmpnei	r2,r2,1
   1b1e0:	10003b1e 	bne	r2,zero,1b2d0 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1b1e4:	00800044 	movi	r2,1
   1b1e8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1b1ec:	00003806 	br	1b2d0 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1b1f0:	e0bffc17 	ldw	r2,-16(fp)
   1b1f4:	1080020b 	ldhu	r2,8(r2)
   1b1f8:	0084303a 	nor	r2,zero,r2
   1b1fc:	1007883a 	mov	r3,r2
   1b200:	e0bff117 	ldw	r2,-60(fp)
   1b204:	1080040b 	ldhu	r2,16(r2)
   1b208:	1884703a 	and	r2,r3,r2
   1b20c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
   1b210:	e0bff117 	ldw	r2,-60(fp)
   1b214:	1080040b 	ldhu	r2,16(r2)
   1b218:	10ffffcc 	andi	r3,r2,65535
   1b21c:	e0bff60b 	ldhu	r2,-40(fp)
   1b220:	18802d1e 	bne	r3,r2,1b2d8 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1b224:	e0bff60b 	ldhu	r2,-40(fp)
   1b228:	100b883a 	mov	r5,r2
   1b22c:	e13ff117 	ldw	r4,-60(fp)
   1b230:	001b6780 	call	1b678 <OS_FlagTaskRdy>
   1b234:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1b238:	e0bff683 	ldbu	r2,-38(fp)
   1b23c:	10800058 	cmpnei	r2,r2,1
   1b240:	1000251e 	bne	r2,zero,1b2d8 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1b244:	00800044 	movi	r2,1
   1b248:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1b24c:	00002206 	br	1b2d8 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
   1b250:	e0bffc17 	ldw	r2,-16(fp)
   1b254:	1080020b 	ldhu	r2,8(r2)
   1b258:	0084303a 	nor	r2,zero,r2
   1b25c:	1007883a 	mov	r3,r2
   1b260:	e0bff117 	ldw	r2,-60(fp)
   1b264:	1080040b 	ldhu	r2,16(r2)
   1b268:	1884703a 	and	r2,r3,r2
   1b26c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
   1b270:	e0bff60b 	ldhu	r2,-40(fp)
   1b274:	10001a26 	beq	r2,zero,1b2e0 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
   1b278:	e0bff60b 	ldhu	r2,-40(fp)
   1b27c:	100b883a 	mov	r5,r2
   1b280:	e13ff117 	ldw	r4,-60(fp)
   1b284:	001b6780 	call	1b678 <OS_FlagTaskRdy>
   1b288:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
   1b28c:	e0bff683 	ldbu	r2,-38(fp)
   1b290:	10800058 	cmpnei	r2,r2,1
   1b294:	1000121e 	bne	r2,zero,1b2e0 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
   1b298:	00800044 	movi	r2,1
   1b29c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
   1b2a0:	00000f06 	br	1b2e0 <OSFlagPost+0x300>
   1b2a4:	e0bff317 	ldw	r2,-52(fp)
   1b2a8:	e0bff515 	stw	r2,-44(fp)
   1b2ac:	e0bff517 	ldw	r2,-44(fp)
   1b2b0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
   1b2b4:	e0bfff17 	ldw	r2,-4(fp)
   1b2b8:	00c01bc4 	movi	r3,111
   1b2bc:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
   1b2c0:	0005883a 	mov	r2,zero
   1b2c4:	00002606 	br	1b360 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1b2c8:	0001883a 	nop
   1b2cc:	00000506 	br	1b2e4 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1b2d0:	0001883a 	nop
   1b2d4:	00000306 	br	1b2e4 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1b2d8:	0001883a 	nop
   1b2dc:	00000106 	br	1b2e4 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
   1b2e0:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
   1b2e4:	e0bff117 	ldw	r2,-60(fp)
   1b2e8:	10800017 	ldw	r2,0(r2)
   1b2ec:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
   1b2f0:	e0bff117 	ldw	r2,-60(fp)
   1b2f4:	103f871e 	bne	r2,zero,1b114 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b114>
   1b2f8:	e0bff317 	ldw	r2,-52(fp)
   1b2fc:	e0bff715 	stw	r2,-36(fp)
   1b300:	e0bff717 	ldw	r2,-36(fp)
   1b304:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
   1b308:	e0bff203 	ldbu	r2,-56(fp)
   1b30c:	10800058 	cmpnei	r2,r2,1
   1b310:	1000011e 	bne	r2,zero,1b318 <OSFlagPost+0x338>
        OS_Sched();
   1b314:	00198880 	call	19888 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b318:	0005303a 	rdctl	r2,status
   1b31c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b320:	e0fffa17 	ldw	r3,-24(fp)
   1b324:	00bfff84 	movi	r2,-2
   1b328:	1884703a 	and	r2,r3,r2
   1b32c:	1001703a 	wrctl	status,r2
  
  return context;
   1b330:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
   1b334:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
   1b338:	e0bffc17 	ldw	r2,-16(fp)
   1b33c:	1080020b 	ldhu	r2,8(r2)
   1b340:	e0bff90d 	sth	r2,-28(fp)
   1b344:	e0bff317 	ldw	r2,-52(fp)
   1b348:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b34c:	e0bff817 	ldw	r2,-32(fp)
   1b350:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
   1b354:	e0bfff17 	ldw	r2,-4(fp)
   1b358:	10000005 	stb	zero,0(r2)
    return (flags_cur);
   1b35c:	e0bff90b 	ldhu	r2,-28(fp)
}
   1b360:	e037883a 	mov	sp,fp
   1b364:	dfc00117 	ldw	ra,4(sp)
   1b368:	df000017 	ldw	fp,0(sp)
   1b36c:	dec00204 	addi	sp,sp,8
   1b370:	f800283a 	ret

0001b374 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
   1b374:	defff904 	addi	sp,sp,-28
   1b378:	df000615 	stw	fp,24(sp)
   1b37c:	df000604 	addi	fp,sp,24
   1b380:	e13ffe15 	stw	r4,-8(fp)
   1b384:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
   1b388:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
   1b38c:	e0bfff17 	ldw	r2,-4(fp)
   1b390:	1000021e 	bne	r2,zero,1b39c <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
   1b394:	0005883a 	mov	r2,zero
   1b398:	00002306 	br	1b428 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
   1b39c:	e0bffe17 	ldw	r2,-8(fp)
   1b3a0:	1000051e 	bne	r2,zero,1b3b8 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
   1b3a4:	e0bfff17 	ldw	r2,-4(fp)
   1b3a8:	00c01b84 	movi	r3,110
   1b3ac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1b3b0:	0005883a 	mov	r2,zero
   1b3b4:	00001c06 	br	1b428 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
   1b3b8:	e0bffe17 	ldw	r2,-8(fp)
   1b3bc:	10800003 	ldbu	r2,0(r2)
   1b3c0:	10803fcc 	andi	r2,r2,255
   1b3c4:	10800160 	cmpeqi	r2,r2,5
   1b3c8:	1000051e 	bne	r2,zero,1b3e0 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1b3cc:	e0bfff17 	ldw	r2,-4(fp)
   1b3d0:	00c00044 	movi	r3,1
   1b3d4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
   1b3d8:	0005883a 	mov	r2,zero
   1b3dc:	00001206 	br	1b428 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b3e0:	0005303a 	rdctl	r2,status
   1b3e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b3e8:	e0fffc17 	ldw	r3,-16(fp)
   1b3ec:	00bfff84 	movi	r2,-2
   1b3f0:	1884703a 	and	r2,r3,r2
   1b3f4:	1001703a 	wrctl	status,r2
  
  return context;
   1b3f8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1b3fc:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
   1b400:	e0bffe17 	ldw	r2,-8(fp)
   1b404:	1080020b 	ldhu	r2,8(r2)
   1b408:	e0bffb0d 	sth	r2,-20(fp)
   1b40c:	e0bffa17 	ldw	r2,-24(fp)
   1b410:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b414:	e0bffd17 	ldw	r2,-12(fp)
   1b418:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1b41c:	e0bfff17 	ldw	r2,-4(fp)
   1b420:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
   1b424:	e0bffb0b 	ldhu	r2,-20(fp)
}
   1b428:	e037883a 	mov	sp,fp
   1b42c:	df000017 	ldw	fp,0(sp)
   1b430:	dec00104 	addi	sp,sp,4
   1b434:	f800283a 	ret

0001b438 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
   1b438:	defff804 	addi	sp,sp,-32
   1b43c:	df000715 	stw	fp,28(sp)
   1b440:	df000704 	addi	fp,sp,28
   1b444:	e13ffb15 	stw	r4,-20(fp)
   1b448:	e17ffc15 	stw	r5,-16(fp)
   1b44c:	3009883a 	mov	r4,r6
   1b450:	3807883a 	mov	r3,r7
   1b454:	e0800117 	ldw	r2,4(fp)
   1b458:	e13ffd0d 	sth	r4,-12(fp)
   1b45c:	e0fffe05 	stb	r3,-8(fp)
   1b460:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
   1b464:	d0a85617 	ldw	r2,-24232(gp)
   1b468:	d0e85617 	ldw	r3,-24232(gp)
   1b46c:	18c00c03 	ldbu	r3,48(r3)
   1b470:	18c00814 	ori	r3,r3,32
   1b474:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
   1b478:	d0a85617 	ldw	r2,-24232(gp)
   1b47c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
   1b480:	d0a85617 	ldw	r2,-24232(gp)
   1b484:	e0ffff0b 	ldhu	r3,-4(fp)
   1b488:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
   1b48c:	d0a85617 	ldw	r2,-24232(gp)
   1b490:	e0fffc17 	ldw	r3,-16(fp)
   1b494:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
   1b498:	e0bffc17 	ldw	r2,-16(fp)
   1b49c:	e0fffd0b 	ldhu	r3,-12(fp)
   1b4a0:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
   1b4a4:	e0bffc17 	ldw	r2,-16(fp)
   1b4a8:	e0fffe03 	ldbu	r3,-8(fp)
   1b4ac:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
   1b4b0:	d0e85617 	ldw	r3,-24232(gp)
   1b4b4:	e0bffc17 	ldw	r2,-16(fp)
   1b4b8:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
   1b4bc:	e0bffb17 	ldw	r2,-20(fp)
   1b4c0:	10c00117 	ldw	r3,4(r2)
   1b4c4:	e0bffc17 	ldw	r2,-16(fp)
   1b4c8:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
   1b4cc:	e0bffc17 	ldw	r2,-16(fp)
   1b4d0:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
   1b4d4:	e0bffc17 	ldw	r2,-16(fp)
   1b4d8:	e0fffb17 	ldw	r3,-20(fp)
   1b4dc:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
   1b4e0:	e0bffb17 	ldw	r2,-20(fp)
   1b4e4:	10800117 	ldw	r2,4(r2)
   1b4e8:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
   1b4ec:	e0bff917 	ldw	r2,-28(fp)
   1b4f0:	10000326 	beq	r2,zero,1b500 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
   1b4f4:	e0bff917 	ldw	r2,-28(fp)
   1b4f8:	e0fffc17 	ldw	r3,-16(fp)
   1b4fc:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
   1b500:	e0bffb17 	ldw	r2,-20(fp)
   1b504:	e0fffc17 	ldw	r3,-16(fp)
   1b508:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
   1b50c:	d0a85617 	ldw	r2,-24232(gp)
   1b510:	10800d03 	ldbu	r2,52(r2)
   1b514:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1b518:	e0fffa03 	ldbu	r3,-24(fp)
   1b51c:	e13ffa03 	ldbu	r4,-24(fp)
   1b520:	d0a85344 	addi	r2,gp,-24243
   1b524:	2085883a 	add	r2,r4,r2
   1b528:	10800003 	ldbu	r2,0(r2)
   1b52c:	1009883a 	mov	r4,r2
   1b530:	d0a85617 	ldw	r2,-24232(gp)
   1b534:	10800d43 	ldbu	r2,53(r2)
   1b538:	0084303a 	nor	r2,zero,r2
   1b53c:	2084703a 	and	r2,r4,r2
   1b540:	1009883a 	mov	r4,r2
   1b544:	d0a85344 	addi	r2,gp,-24243
   1b548:	1885883a 	add	r2,r3,r2
   1b54c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
   1b550:	e0fffa03 	ldbu	r3,-24(fp)
   1b554:	d0a85344 	addi	r2,gp,-24243
   1b558:	1885883a 	add	r2,r3,r2
   1b55c:	10800003 	ldbu	r2,0(r2)
   1b560:	10803fcc 	andi	r2,r2,255
   1b564:	1000071e 	bne	r2,zero,1b584 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1b568:	d0a85617 	ldw	r2,-24232(gp)
   1b56c:	10800d83 	ldbu	r2,54(r2)
   1b570:	0084303a 	nor	r2,zero,r2
   1b574:	1007883a 	mov	r3,r2
   1b578:	d0a85303 	ldbu	r2,-24244(gp)
   1b57c:	1884703a 	and	r2,r3,r2
   1b580:	d0a85305 	stb	r2,-24244(gp)
    }
}
   1b584:	0001883a 	nop
   1b588:	e037883a 	mov	sp,fp
   1b58c:	df000017 	ldw	fp,0(sp)
   1b590:	dec00104 	addi	sp,sp,4
   1b594:	f800283a 	ret

0001b598 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
   1b598:	defffb04 	addi	sp,sp,-20
   1b59c:	dfc00415 	stw	ra,16(sp)
   1b5a0:	df000315 	stw	fp,12(sp)
   1b5a4:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
   1b5a8:	0140dc04 	movi	r5,880
   1b5ac:	010000f4 	movhi	r4,3
   1b5b0:	21142404 	addi	r4,r4,20624
   1b5b4:	00197cc0 	call	197cc <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
   1b5b8:	008000f4 	movhi	r2,3
   1b5bc:	10942404 	addi	r2,r2,20624
   1b5c0:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
   1b5c4:	008000f4 	movhi	r2,3
   1b5c8:	10942f04 	addi	r2,r2,20668
   1b5cc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   1b5d0:	e03ffd0d 	sth	zero,-12(fp)
   1b5d4:	00001306 	br	1b624 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1b5d8:	e0bffe17 	ldw	r2,-8(fp)
   1b5dc:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
   1b5e0:	e0bffe17 	ldw	r2,-8(fp)
   1b5e4:	e0ffff17 	ldw	r3,-4(fp)
   1b5e8:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
   1b5ec:	e0bffe17 	ldw	r2,-8(fp)
   1b5f0:	00c00fc4 	movi	r3,63
   1b5f4:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   1b5f8:	e0bffe17 	ldw	r2,-8(fp)
   1b5fc:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
   1b600:	e0bffe17 	ldw	r2,-8(fp)
   1b604:	10800b04 	addi	r2,r2,44
   1b608:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
   1b60c:	e0bfff17 	ldw	r2,-4(fp)
   1b610:	10800b04 	addi	r2,r2,44
   1b614:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
   1b618:	e0bffd0b 	ldhu	r2,-12(fp)
   1b61c:	10800044 	addi	r2,r2,1
   1b620:	e0bffd0d 	sth	r2,-12(fp)
   1b624:	e0bffd0b 	ldhu	r2,-12(fp)
   1b628:	108004f0 	cmpltui	r2,r2,19
   1b62c:	103fea1e 	bne	r2,zero,1b5d8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b5d8>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
   1b630:	e0bffe17 	ldw	r2,-8(fp)
   1b634:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
   1b638:	e0bffe17 	ldw	r2,-8(fp)
   1b63c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
   1b640:	e0bffe17 	ldw	r2,-8(fp)
   1b644:	00c00fc4 	movi	r3,63
   1b648:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
   1b64c:	e0bffe17 	ldw	r2,-8(fp)
   1b650:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
   1b654:	008000f4 	movhi	r2,3
   1b658:	10942404 	addi	r2,r2,20624
   1b65c:	d0a85815 	stw	r2,-24224(gp)
#endif
}
   1b660:	0001883a 	nop
   1b664:	e037883a 	mov	sp,fp
   1b668:	dfc00117 	ldw	ra,4(sp)
   1b66c:	df000017 	ldw	fp,0(sp)
   1b670:	dec00204 	addi	sp,sp,8
   1b674:	f800283a 	ret

0001b678 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
   1b678:	defffa04 	addi	sp,sp,-24
   1b67c:	dfc00515 	stw	ra,20(sp)
   1b680:	df000415 	stw	fp,16(sp)
   1b684:	df000404 	addi	fp,sp,16
   1b688:	e13ffe15 	stw	r4,-8(fp)
   1b68c:	2805883a 	mov	r2,r5
   1b690:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
   1b694:	e0bffe17 	ldw	r2,-8(fp)
   1b698:	10800217 	ldw	r2,8(r2)
   1b69c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
   1b6a0:	e0bffd17 	ldw	r2,-12(fp)
   1b6a4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
   1b6a8:	e0bffd17 	ldw	r2,-12(fp)
   1b6ac:	e0ffff0b 	ldhu	r3,-4(fp)
   1b6b0:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
   1b6b4:	e0bffd17 	ldw	r2,-12(fp)
   1b6b8:	10c00c03 	ldbu	r3,48(r2)
   1b6bc:	00bff7c4 	movi	r2,-33
   1b6c0:	1884703a 	and	r2,r3,r2
   1b6c4:	1007883a 	mov	r3,r2
   1b6c8:	e0bffd17 	ldw	r2,-12(fp)
   1b6cc:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
   1b6d0:	e0bffd17 	ldw	r2,-12(fp)
   1b6d4:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
   1b6d8:	e0bffd17 	ldw	r2,-12(fp)
   1b6dc:	10800c03 	ldbu	r2,48(r2)
   1b6e0:	10803fcc 	andi	r2,r2,255
   1b6e4:	1000181e 	bne	r2,zero,1b748 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
   1b6e8:	e0bffd17 	ldw	r2,-12(fp)
   1b6ec:	10c00d83 	ldbu	r3,54(r2)
   1b6f0:	d0a85303 	ldbu	r2,-24244(gp)
   1b6f4:	1884b03a 	or	r2,r3,r2
   1b6f8:	d0a85305 	stb	r2,-24244(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1b6fc:	e0bffd17 	ldw	r2,-12(fp)
   1b700:	10800d03 	ldbu	r2,52(r2)
   1b704:	10c03fcc 	andi	r3,r2,255
   1b708:	e0bffd17 	ldw	r2,-12(fp)
   1b70c:	10800d03 	ldbu	r2,52(r2)
   1b710:	11003fcc 	andi	r4,r2,255
   1b714:	d0a85344 	addi	r2,gp,-24243
   1b718:	2085883a 	add	r2,r4,r2
   1b71c:	11000003 	ldbu	r4,0(r2)
   1b720:	e0bffd17 	ldw	r2,-12(fp)
   1b724:	10800d43 	ldbu	r2,53(r2)
   1b728:	2084b03a 	or	r2,r4,r2
   1b72c:	1009883a 	mov	r4,r2
   1b730:	d0a85344 	addi	r2,gp,-24243
   1b734:	1885883a 	add	r2,r3,r2
   1b738:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
   1b73c:	00800044 	movi	r2,1
   1b740:	e0bffc05 	stb	r2,-16(fp)
   1b744:	00000106 	br	1b74c <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
   1b748:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
   1b74c:	e13ffe17 	ldw	r4,-8(fp)
   1b750:	001b76c0 	call	1b76c <OS_FlagUnlink>
    return (sched);
   1b754:	e0bffc03 	ldbu	r2,-16(fp)
}
   1b758:	e037883a 	mov	sp,fp
   1b75c:	dfc00117 	ldw	ra,4(sp)
   1b760:	df000017 	ldw	fp,0(sp)
   1b764:	dec00204 	addi	sp,sp,8
   1b768:	f800283a 	ret

0001b76c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
   1b76c:	defffa04 	addi	sp,sp,-24
   1b770:	df000515 	stw	fp,20(sp)
   1b774:	df000504 	addi	fp,sp,20
   1b778:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
   1b77c:	e0bfff17 	ldw	r2,-4(fp)
   1b780:	10800117 	ldw	r2,4(r2)
   1b784:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
   1b788:	e0bfff17 	ldw	r2,-4(fp)
   1b78c:	10800017 	ldw	r2,0(r2)
   1b790:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
   1b794:	e0bffb17 	ldw	r2,-20(fp)
   1b798:	10000b1e 	bne	r2,zero,1b7c8 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
   1b79c:	e0bfff17 	ldw	r2,-4(fp)
   1b7a0:	10800317 	ldw	r2,12(r2)
   1b7a4:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
   1b7a8:	e0bffd17 	ldw	r2,-12(fp)
   1b7ac:	e0fffc17 	ldw	r3,-16(fp)
   1b7b0:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
   1b7b4:	e0bffc17 	ldw	r2,-16(fp)
   1b7b8:	10000b26 	beq	r2,zero,1b7e8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
   1b7bc:	e0bffc17 	ldw	r2,-16(fp)
   1b7c0:	10000115 	stw	zero,4(r2)
   1b7c4:	00000806 	br	1b7e8 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
   1b7c8:	e0bffb17 	ldw	r2,-20(fp)
   1b7cc:	e0fffc17 	ldw	r3,-16(fp)
   1b7d0:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
   1b7d4:	e0bffc17 	ldw	r2,-16(fp)
   1b7d8:	10000326 	beq	r2,zero,1b7e8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
   1b7dc:	e0bffc17 	ldw	r2,-16(fp)
   1b7e0:	e0fffb17 	ldw	r3,-20(fp)
   1b7e4:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
   1b7e8:	e0bfff17 	ldw	r2,-4(fp)
   1b7ec:	10800217 	ldw	r2,8(r2)
   1b7f0:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
   1b7f4:	e0bffe17 	ldw	r2,-8(fp)
   1b7f8:	10000a15 	stw	zero,40(r2)
#endif
}
   1b7fc:	0001883a 	nop
   1b800:	e037883a 	mov	sp,fp
   1b804:	df000017 	ldw	fp,0(sp)
   1b808:	dec00104 	addi	sp,sp,4
   1b80c:	f800283a 	ret

0001b810 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
   1b810:	defff404 	addi	sp,sp,-48
   1b814:	df000b15 	stw	fp,44(sp)
   1b818:	df000b04 	addi	fp,sp,44
   1b81c:	e13ffc15 	stw	r4,-16(fp)
   1b820:	e17ffd15 	stw	r5,-12(fp)
   1b824:	e1bffe15 	stw	r6,-8(fp)
   1b828:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1b82c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1b830:	e0bfff17 	ldw	r2,-4(fp)
   1b834:	1000021e 	bne	r2,zero,1b840 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
   1b838:	0005883a 	mov	r2,zero
   1b83c:	00006506 	br	1b9d4 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
   1b840:	e0bffc17 	ldw	r2,-16(fp)
   1b844:	1000051e 	bne	r2,zero,1b85c <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   1b848:	e0bfff17 	ldw	r2,-4(fp)
   1b84c:	00c01884 	movi	r3,98
   1b850:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1b854:	0005883a 	mov	r2,zero
   1b858:	00005e06 	br	1b9d4 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
   1b85c:	e0bffc17 	ldw	r2,-16(fp)
   1b860:	108000cc 	andi	r2,r2,3
   1b864:	10000526 	beq	r2,zero,1b87c <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
   1b868:	e0bfff17 	ldw	r2,-4(fp)
   1b86c:	00c01884 	movi	r3,98
   1b870:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1b874:	0005883a 	mov	r2,zero
   1b878:	00005606 	br	1b9d4 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
   1b87c:	e0bffd17 	ldw	r2,-12(fp)
   1b880:	108000a8 	cmpgeui	r2,r2,2
   1b884:	1000051e 	bne	r2,zero,1b89c <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
   1b888:	e0bfff17 	ldw	r2,-4(fp)
   1b88c:	00c016c4 	movi	r3,91
   1b890:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1b894:	0005883a 	mov	r2,zero
   1b898:	00004e06 	br	1b9d4 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
   1b89c:	e0bffe17 	ldw	r2,-8(fp)
   1b8a0:	10800128 	cmpgeui	r2,r2,4
   1b8a4:	1000051e 	bne	r2,zero,1b8bc <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
   1b8a8:	e0bfff17 	ldw	r2,-4(fp)
   1b8ac:	00c01704 	movi	r3,92
   1b8b0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1b8b4:	0005883a 	mov	r2,zero
   1b8b8:	00004606 	br	1b9d4 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1b8bc:	0005303a 	rdctl	r2,status
   1b8c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1b8c4:	e0fffb17 	ldw	r3,-20(fp)
   1b8c8:	00bfff84 	movi	r2,-2
   1b8cc:	1884703a 	and	r2,r3,r2
   1b8d0:	1001703a 	wrctl	status,r2
  
  return context;
   1b8d4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1b8d8:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
   1b8dc:	d0a85017 	ldw	r2,-24256(gp)
   1b8e0:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
   1b8e4:	d0a85017 	ldw	r2,-24256(gp)
   1b8e8:	10000326 	beq	r2,zero,1b8f8 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
   1b8ec:	d0a85017 	ldw	r2,-24256(gp)
   1b8f0:	10800117 	ldw	r2,4(r2)
   1b8f4:	d0a85015 	stw	r2,-24256(gp)
   1b8f8:	e0bff817 	ldw	r2,-32(fp)
   1b8fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1b900:	e0bff917 	ldw	r2,-28(fp)
   1b904:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
   1b908:	e0bffa17 	ldw	r2,-24(fp)
   1b90c:	1000051e 	bne	r2,zero,1b924 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
   1b910:	e0bfff17 	ldw	r2,-4(fp)
   1b914:	00c01684 	movi	r3,90
   1b918:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
   1b91c:	0005883a 	mov	r2,zero
   1b920:	00002c06 	br	1b9d4 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
   1b924:	e0bffc17 	ldw	r2,-16(fp)
   1b928:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
   1b92c:	e0fffc17 	ldw	r3,-16(fp)
   1b930:	e0bffe17 	ldw	r2,-8(fp)
   1b934:	1885883a 	add	r2,r3,r2
   1b938:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
   1b93c:	e03ff715 	stw	zero,-36(fp)
   1b940:	00000c06 	br	1b974 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
   1b944:	e0bff617 	ldw	r2,-40(fp)
   1b948:	e0fff517 	ldw	r3,-44(fp)
   1b94c:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
   1b950:	e0bff517 	ldw	r2,-44(fp)
   1b954:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
   1b958:	e0fff517 	ldw	r3,-44(fp)
   1b95c:	e0bffe17 	ldw	r2,-8(fp)
   1b960:	1885883a 	add	r2,r3,r2
   1b964:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
   1b968:	e0bff717 	ldw	r2,-36(fp)
   1b96c:	10800044 	addi	r2,r2,1
   1b970:	e0bff715 	stw	r2,-36(fp)
   1b974:	e0bffd17 	ldw	r2,-12(fp)
   1b978:	10bfffc4 	addi	r2,r2,-1
   1b97c:	e0fff717 	ldw	r3,-36(fp)
   1b980:	18bff036 	bltu	r3,r2,1b944 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701b944>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
   1b984:	e0bff617 	ldw	r2,-40(fp)
   1b988:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
   1b98c:	e0bffa17 	ldw	r2,-24(fp)
   1b990:	e0fffc17 	ldw	r3,-16(fp)
   1b994:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
   1b998:	e0bffa17 	ldw	r2,-24(fp)
   1b99c:	e0fffc17 	ldw	r3,-16(fp)
   1b9a0:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
   1b9a4:	e0bffa17 	ldw	r2,-24(fp)
   1b9a8:	e0fffd17 	ldw	r3,-12(fp)
   1b9ac:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
   1b9b0:	e0bffa17 	ldw	r2,-24(fp)
   1b9b4:	e0fffd17 	ldw	r3,-12(fp)
   1b9b8:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
   1b9bc:	e0bffa17 	ldw	r2,-24(fp)
   1b9c0:	e0fffe17 	ldw	r3,-8(fp)
   1b9c4:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
   1b9c8:	e0bfff17 	ldw	r2,-4(fp)
   1b9cc:	10000005 	stb	zero,0(r2)
    return (pmem);
   1b9d0:	e0bffa17 	ldw	r2,-24(fp)
}
   1b9d4:	e037883a 	mov	sp,fp
   1b9d8:	df000017 	ldw	fp,0(sp)
   1b9dc:	dec00104 	addi	sp,sp,4
   1b9e0:	f800283a 	ret

0001b9e4 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
   1b9e4:	defff804 	addi	sp,sp,-32
   1b9e8:	df000715 	stw	fp,28(sp)
   1b9ec:	df000704 	addi	fp,sp,28
   1b9f0:	e13ffe15 	stw	r4,-8(fp)
   1b9f4:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1b9f8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1b9fc:	e0bfff17 	ldw	r2,-4(fp)
   1ba00:	1000021e 	bne	r2,zero,1ba0c <OSMemGet+0x28>
        return ((void *)0);
   1ba04:	0005883a 	mov	r2,zero
   1ba08:	00002e06 	br	1bac4 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
   1ba0c:	e0bffe17 	ldw	r2,-8(fp)
   1ba10:	1000051e 	bne	r2,zero,1ba28 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1ba14:	e0bfff17 	ldw	r2,-4(fp)
   1ba18:	00c01804 	movi	r3,96
   1ba1c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1ba20:	0005883a 	mov	r2,zero
   1ba24:	00002706 	br	1bac4 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ba28:	0005303a 	rdctl	r2,status
   1ba2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ba30:	e0fffd17 	ldw	r3,-12(fp)
   1ba34:	00bfff84 	movi	r2,-2
   1ba38:	1884703a 	and	r2,r3,r2
   1ba3c:	1001703a 	wrctl	status,r2
  
  return context;
   1ba40:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1ba44:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
   1ba48:	e0bffe17 	ldw	r2,-8(fp)
   1ba4c:	10800417 	ldw	r2,16(r2)
   1ba50:	10001426 	beq	r2,zero,1baa4 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
   1ba54:	e0bffe17 	ldw	r2,-8(fp)
   1ba58:	10800117 	ldw	r2,4(r2)
   1ba5c:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
   1ba60:	e0bffb17 	ldw	r2,-20(fp)
   1ba64:	10c00017 	ldw	r3,0(r2)
   1ba68:	e0bffe17 	ldw	r2,-8(fp)
   1ba6c:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
   1ba70:	e0bffe17 	ldw	r2,-8(fp)
   1ba74:	10800417 	ldw	r2,16(r2)
   1ba78:	10ffffc4 	addi	r3,r2,-1
   1ba7c:	e0bffe17 	ldw	r2,-8(fp)
   1ba80:	10c00415 	stw	r3,16(r2)
   1ba84:	e0bff917 	ldw	r2,-28(fp)
   1ba88:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ba8c:	e0bffa17 	ldw	r2,-24(fp)
   1ba90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
   1ba94:	e0bfff17 	ldw	r2,-4(fp)
   1ba98:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
   1ba9c:	e0bffb17 	ldw	r2,-20(fp)
   1baa0:	00000806 	br	1bac4 <OSMemGet+0xe0>
   1baa4:	e0bff917 	ldw	r2,-28(fp)
   1baa8:	e0bffc15 	stw	r2,-16(fp)
   1baac:	e0bffc17 	ldw	r2,-16(fp)
   1bab0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
   1bab4:	e0bfff17 	ldw	r2,-4(fp)
   1bab8:	00c01744 	movi	r3,93
   1babc:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
   1bac0:	0005883a 	mov	r2,zero
}
   1bac4:	e037883a 	mov	sp,fp
   1bac8:	df000017 	ldw	fp,0(sp)
   1bacc:	dec00104 	addi	sp,sp,4
   1bad0:	f800283a 	ret

0001bad4 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   1bad4:	defff704 	addi	sp,sp,-36
   1bad8:	dfc00815 	stw	ra,32(sp)
   1badc:	df000715 	stw	fp,28(sp)
   1bae0:	df000704 	addi	fp,sp,28
   1bae4:	e13ffd15 	stw	r4,-12(fp)
   1bae8:	e17ffe15 	stw	r5,-8(fp)
   1baec:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1baf0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1baf4:	e0bfff17 	ldw	r2,-4(fp)
   1baf8:	1000021e 	bne	r2,zero,1bb04 <OSMemNameGet+0x30>
        return (0);
   1bafc:	0005883a 	mov	r2,zero
   1bb00:	00002b06 	br	1bbb0 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   1bb04:	e0bffd17 	ldw	r2,-12(fp)
   1bb08:	1000051e 	bne	r2,zero,1bb20 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1bb0c:	e0bfff17 	ldw	r2,-4(fp)
   1bb10:	00c01804 	movi	r3,96
   1bb14:	10c00005 	stb	r3,0(r2)
        return (0);
   1bb18:	0005883a 	mov	r2,zero
   1bb1c:	00002406 	br	1bbb0 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1bb20:	e0bffe17 	ldw	r2,-8(fp)
   1bb24:	1000051e 	bne	r2,zero,1bb3c <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
   1bb28:	e0bfff17 	ldw	r2,-4(fp)
   1bb2c:	00c00304 	movi	r3,12
   1bb30:	10c00005 	stb	r3,0(r2)
        return (0);
   1bb34:	0005883a 	mov	r2,zero
   1bb38:	00001d06 	br	1bbb0 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1bb3c:	d0a85503 	ldbu	r2,-24236(gp)
   1bb40:	10803fcc 	andi	r2,r2,255
   1bb44:	10000526 	beq	r2,zero,1bb5c <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
   1bb48:	e0bfff17 	ldw	r2,-4(fp)
   1bb4c:	00c00444 	movi	r3,17
   1bb50:	10c00005 	stb	r3,0(r2)
        return (0);
   1bb54:	0005883a 	mov	r2,zero
   1bb58:	00001506 	br	1bbb0 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bb5c:	0005303a 	rdctl	r2,status
   1bb60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bb64:	e0fffb17 	ldw	r3,-20(fp)
   1bb68:	00bfff84 	movi	r2,-2
   1bb6c:	1884703a 	and	r2,r3,r2
   1bb70:	1001703a 	wrctl	status,r2
  
  return context;
   1bb74:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
   1bb78:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
   1bb7c:	e0bffd17 	ldw	r2,-12(fp)
   1bb80:	10800504 	addi	r2,r2,20
   1bb84:	100b883a 	mov	r5,r2
   1bb88:	e13ffe17 	ldw	r4,-8(fp)
   1bb8c:	00199cc0 	call	199cc <OS_StrCopy>
   1bb90:	e0bffa05 	stb	r2,-24(fp)
   1bb94:	e0bff917 	ldw	r2,-28(fp)
   1bb98:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bb9c:	e0bffc17 	ldw	r2,-16(fp)
   1bba0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1bba4:	e0bfff17 	ldw	r2,-4(fp)
   1bba8:	10000005 	stb	zero,0(r2)
    return (len);
   1bbac:	e0bffa03 	ldbu	r2,-24(fp)
}
   1bbb0:	e037883a 	mov	sp,fp
   1bbb4:	dfc00117 	ldw	ra,4(sp)
   1bbb8:	df000017 	ldw	fp,0(sp)
   1bbbc:	dec00204 	addi	sp,sp,8
   1bbc0:	f800283a 	ret

0001bbc4 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
   1bbc4:	defff604 	addi	sp,sp,-40
   1bbc8:	dfc00915 	stw	ra,36(sp)
   1bbcc:	df000815 	stw	fp,32(sp)
   1bbd0:	df000804 	addi	fp,sp,32
   1bbd4:	e13ffd15 	stw	r4,-12(fp)
   1bbd8:	e17ffe15 	stw	r5,-8(fp)
   1bbdc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1bbe0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1bbe4:	e0bfff17 	ldw	r2,-4(fp)
   1bbe8:	10003526 	beq	r2,zero,1bcc0 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
   1bbec:	e0bffd17 	ldw	r2,-12(fp)
   1bbf0:	1000041e 	bne	r2,zero,1bc04 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
   1bbf4:	e0bfff17 	ldw	r2,-4(fp)
   1bbf8:	00c01804 	movi	r3,96
   1bbfc:	10c00005 	stb	r3,0(r2)
        return;
   1bc00:	00003006 	br	1bcc4 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
   1bc04:	e0bffe17 	ldw	r2,-8(fp)
   1bc08:	1000041e 	bne	r2,zero,1bc1c <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
   1bc0c:	e0bfff17 	ldw	r2,-4(fp)
   1bc10:	00c00304 	movi	r3,12
   1bc14:	10c00005 	stb	r3,0(r2)
        return;
   1bc18:	00002a06 	br	1bcc4 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1bc1c:	d0a85503 	ldbu	r2,-24236(gp)
   1bc20:	10803fcc 	andi	r2,r2,255
   1bc24:	10000426 	beq	r2,zero,1bc38 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
   1bc28:	e0bfff17 	ldw	r2,-4(fp)
   1bc2c:	00c00484 	movi	r3,18
   1bc30:	10c00005 	stb	r3,0(r2)
        return;
   1bc34:	00002306 	br	1bcc4 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bc38:	0005303a 	rdctl	r2,status
   1bc3c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bc40:	e0fffc17 	ldw	r3,-16(fp)
   1bc44:	00bfff84 	movi	r2,-2
   1bc48:	1884703a 	and	r2,r3,r2
   1bc4c:	1001703a 	wrctl	status,r2
  
  return context;
   1bc50:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1bc54:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
   1bc58:	e13ffe17 	ldw	r4,-8(fp)
   1bc5c:	0019a400 	call	19a40 <OS_StrLen>
   1bc60:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
   1bc64:	e0bffa03 	ldbu	r2,-24(fp)
   1bc68:	10800830 	cmpltui	r2,r2,32
   1bc6c:	1000081e 	bne	r2,zero,1bc90 <OSMemNameSet+0xcc>
   1bc70:	e0bff817 	ldw	r2,-32(fp)
   1bc74:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bc78:	e0bff917 	ldw	r2,-28(fp)
   1bc7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
   1bc80:	e0bfff17 	ldw	r2,-4(fp)
   1bc84:	00c018c4 	movi	r3,99
   1bc88:	10c00005 	stb	r3,0(r2)
        return;
   1bc8c:	00000d06 	br	1bcc4 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
   1bc90:	e0bffd17 	ldw	r2,-12(fp)
   1bc94:	10800504 	addi	r2,r2,20
   1bc98:	e17ffe17 	ldw	r5,-8(fp)
   1bc9c:	1009883a 	mov	r4,r2
   1bca0:	00199cc0 	call	199cc <OS_StrCopy>
   1bca4:	e0bff817 	ldw	r2,-32(fp)
   1bca8:	e0bffb15 	stw	r2,-20(fp)
   1bcac:	e0bffb17 	ldw	r2,-20(fp)
   1bcb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1bcb4:	e0bfff17 	ldw	r2,-4(fp)
   1bcb8:	10000005 	stb	zero,0(r2)
   1bcbc:	00000106 	br	1bcc4 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
   1bcc0:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   1bcc4:	e037883a 	mov	sp,fp
   1bcc8:	dfc00117 	ldw	ra,4(sp)
   1bccc:	df000017 	ldw	fp,0(sp)
   1bcd0:	dec00204 	addi	sp,sp,8
   1bcd4:	f800283a 	ret

0001bcd8 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
   1bcd8:	defff904 	addi	sp,sp,-28
   1bcdc:	df000615 	stw	fp,24(sp)
   1bce0:	df000604 	addi	fp,sp,24
   1bce4:	e13ffe15 	stw	r4,-8(fp)
   1bce8:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1bcec:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   1bcf0:	e0bffe17 	ldw	r2,-8(fp)
   1bcf4:	1000021e 	bne	r2,zero,1bd00 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   1bcf8:	00801804 	movi	r2,96
   1bcfc:	00002806 	br	1bda0 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
   1bd00:	e0bfff17 	ldw	r2,-4(fp)
   1bd04:	1000021e 	bne	r2,zero,1bd10 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
   1bd08:	008017c4 	movi	r2,95
   1bd0c:	00002406 	br	1bda0 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bd10:	0005303a 	rdctl	r2,status
   1bd14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bd18:	e0fffd17 	ldw	r3,-12(fp)
   1bd1c:	00bfff84 	movi	r2,-2
   1bd20:	1884703a 	and	r2,r3,r2
   1bd24:	1001703a 	wrctl	status,r2
  
  return context;
   1bd28:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1bd2c:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
   1bd30:	e0bffe17 	ldw	r2,-8(fp)
   1bd34:	10c00417 	ldw	r3,16(r2)
   1bd38:	e0bffe17 	ldw	r2,-8(fp)
   1bd3c:	10800317 	ldw	r2,12(r2)
   1bd40:	18800636 	bltu	r3,r2,1bd5c <OSMemPut+0x84>
   1bd44:	e0bffa17 	ldw	r2,-24(fp)
   1bd48:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1bd4c:	e0bffb17 	ldw	r2,-20(fp)
   1bd50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
   1bd54:	00801784 	movi	r2,94
   1bd58:	00001106 	br	1bda0 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
   1bd5c:	e0bffe17 	ldw	r2,-8(fp)
   1bd60:	10c00117 	ldw	r3,4(r2)
   1bd64:	e0bfff17 	ldw	r2,-4(fp)
   1bd68:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
   1bd6c:	e0bffe17 	ldw	r2,-8(fp)
   1bd70:	e0ffff17 	ldw	r3,-4(fp)
   1bd74:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
   1bd78:	e0bffe17 	ldw	r2,-8(fp)
   1bd7c:	10800417 	ldw	r2,16(r2)
   1bd80:	10c00044 	addi	r3,r2,1
   1bd84:	e0bffe17 	ldw	r2,-8(fp)
   1bd88:	10c00415 	stw	r3,16(r2)
   1bd8c:	e0bffa17 	ldw	r2,-24(fp)
   1bd90:	e0bffc15 	stw	r2,-16(fp)
   1bd94:	e0bffc17 	ldw	r2,-16(fp)
   1bd98:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
   1bd9c:	0005883a 	mov	r2,zero
}
   1bda0:	e037883a 	mov	sp,fp
   1bda4:	df000017 	ldw	fp,0(sp)
   1bda8:	dec00104 	addi	sp,sp,4
   1bdac:	f800283a 	ret

0001bdb0 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
   1bdb0:	defffa04 	addi	sp,sp,-24
   1bdb4:	df000515 	stw	fp,20(sp)
   1bdb8:	df000504 	addi	fp,sp,20
   1bdbc:	e13ffe15 	stw	r4,-8(fp)
   1bdc0:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1bdc4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
   1bdc8:	e0bffe17 	ldw	r2,-8(fp)
   1bdcc:	1000021e 	bne	r2,zero,1bdd8 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
   1bdd0:	00801804 	movi	r2,96
   1bdd4:	00002c06 	br	1be88 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
   1bdd8:	e0bfff17 	ldw	r2,-4(fp)
   1bddc:	1000021e 	bne	r2,zero,1bde8 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
   1bde0:	00801844 	movi	r2,97
   1bde4:	00002806 	br	1be88 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bde8:	0005303a 	rdctl	r2,status
   1bdec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bdf0:	e0fffc17 	ldw	r3,-16(fp)
   1bdf4:	00bfff84 	movi	r2,-2
   1bdf8:	1884703a 	and	r2,r3,r2
   1bdfc:	1001703a 	wrctl	status,r2
  
  return context;
   1be00:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1be04:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
   1be08:	e0bffe17 	ldw	r2,-8(fp)
   1be0c:	10c00017 	ldw	r3,0(r2)
   1be10:	e0bfff17 	ldw	r2,-4(fp)
   1be14:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
   1be18:	e0bffe17 	ldw	r2,-8(fp)
   1be1c:	10c00117 	ldw	r3,4(r2)
   1be20:	e0bfff17 	ldw	r2,-4(fp)
   1be24:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
   1be28:	e0bffe17 	ldw	r2,-8(fp)
   1be2c:	10c00217 	ldw	r3,8(r2)
   1be30:	e0bfff17 	ldw	r2,-4(fp)
   1be34:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
   1be38:	e0bffe17 	ldw	r2,-8(fp)
   1be3c:	10c00317 	ldw	r3,12(r2)
   1be40:	e0bfff17 	ldw	r2,-4(fp)
   1be44:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
   1be48:	e0bffe17 	ldw	r2,-8(fp)
   1be4c:	10c00417 	ldw	r3,16(r2)
   1be50:	e0bfff17 	ldw	r2,-4(fp)
   1be54:	10c00415 	stw	r3,16(r2)
   1be58:	e0bffb17 	ldw	r2,-20(fp)
   1be5c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1be60:	e0bffd17 	ldw	r2,-12(fp)
   1be64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
   1be68:	e0bfff17 	ldw	r2,-4(fp)
   1be6c:	10c00317 	ldw	r3,12(r2)
   1be70:	e0bfff17 	ldw	r2,-4(fp)
   1be74:	10800417 	ldw	r2,16(r2)
   1be78:	1887c83a 	sub	r3,r3,r2
   1be7c:	e0bfff17 	ldw	r2,-4(fp)
   1be80:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
   1be84:	0005883a 	mov	r2,zero
}
   1be88:	e037883a 	mov	sp,fp
   1be8c:	df000017 	ldw	fp,0(sp)
   1be90:	dec00104 	addi	sp,sp,4
   1be94:	f800283a 	ret

0001be98 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
   1be98:	defffc04 	addi	sp,sp,-16
   1be9c:	dfc00315 	stw	ra,12(sp)
   1bea0:	df000215 	stw	fp,8(sp)
   1bea4:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
   1bea8:	01430c04 	movi	r5,3120
   1beac:	010000f4 	movhi	r4,3
   1beb0:	21150004 	addi	r4,r4,21504
   1beb4:	00197cc0 	call	197cc <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
   1beb8:	008000f4 	movhi	r2,3
   1bebc:	10950004 	addi	r2,r2,21504
   1bec0:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   1bec4:	e03fff0d 	sth	zero,-4(fp)
   1bec8:	00001306 	br	1bf18 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
   1becc:	e0bfff0b 	ldhu	r2,-4(fp)
   1bed0:	10800044 	addi	r2,r2,1
   1bed4:	10c00d24 	muli	r3,r2,52
   1bed8:	008000f4 	movhi	r2,3
   1bedc:	10950004 	addi	r2,r2,21504
   1bee0:	1887883a 	add	r3,r3,r2
   1bee4:	e0bffe17 	ldw	r2,-8(fp)
   1bee8:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
   1beec:	e0bffe17 	ldw	r2,-8(fp)
   1bef0:	00c00fc4 	movi	r3,63
   1bef4:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
   1bef8:	e0bffe17 	ldw	r2,-8(fp)
   1befc:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
   1bf00:	e0bffe17 	ldw	r2,-8(fp)
   1bf04:	10800d04 	addi	r2,r2,52
   1bf08:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
   1bf0c:	e0bfff0b 	ldhu	r2,-4(fp)
   1bf10:	10800044 	addi	r2,r2,1
   1bf14:	e0bfff0d 	sth	r2,-4(fp)
   1bf18:	e0bfff0b 	ldhu	r2,-4(fp)
   1bf1c:	10800ef0 	cmpltui	r2,r2,59
   1bf20:	103fea1e 	bne	r2,zero,1becc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701becc>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
   1bf24:	e0bffe17 	ldw	r2,-8(fp)
   1bf28:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
   1bf2c:	e0bffe17 	ldw	r2,-8(fp)
   1bf30:	00c00fc4 	movi	r3,63
   1bf34:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
   1bf38:	e0bffe17 	ldw	r2,-8(fp)
   1bf3c:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
   1bf40:	008000f4 	movhi	r2,3
   1bf44:	10950004 	addi	r2,r2,21504
   1bf48:	d0a85015 	stw	r2,-24256(gp)
#endif
}
   1bf4c:	0001883a 	nop
   1bf50:	e037883a 	mov	sp,fp
   1bf54:	dfc00117 	ldw	ra,4(sp)
   1bf58:	df000017 	ldw	fp,0(sp)
   1bf5c:	dec00204 	addi	sp,sp,8
   1bf60:	f800283a 	ret

0001bf64 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
   1bf64:	defff804 	addi	sp,sp,-32
   1bf68:	df000715 	stw	fp,28(sp)
   1bf6c:	df000704 	addi	fp,sp,28
   1bf70:	e13ffe15 	stw	r4,-8(fp)
   1bf74:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1bf78:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1bf7c:	e0bfff17 	ldw	r2,-4(fp)
   1bf80:	1000021e 	bne	r2,zero,1bf8c <OSQAccept+0x28>
        return ((void *)0);
   1bf84:	0005883a 	mov	r2,zero
   1bf88:	00004206 	br	1c094 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   1bf8c:	e0bffe17 	ldw	r2,-8(fp)
   1bf90:	1000051e 	bne	r2,zero,1bfa8 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   1bf94:	e0bfff17 	ldw	r2,-4(fp)
   1bf98:	00c00104 	movi	r3,4
   1bf9c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1bfa0:	0005883a 	mov	r2,zero
   1bfa4:	00003b06 	br	1c094 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   1bfa8:	e0bffe17 	ldw	r2,-8(fp)
   1bfac:	10800003 	ldbu	r2,0(r2)
   1bfb0:	10803fcc 	andi	r2,r2,255
   1bfb4:	108000a0 	cmpeqi	r2,r2,2
   1bfb8:	1000051e 	bne	r2,zero,1bfd0 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
   1bfbc:	e0bfff17 	ldw	r2,-4(fp)
   1bfc0:	00c00044 	movi	r3,1
   1bfc4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1bfc8:	0005883a 	mov	r2,zero
   1bfcc:	00003106 	br	1c094 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1bfd0:	0005303a 	rdctl	r2,status
   1bfd4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1bfd8:	e0fffd17 	ldw	r3,-12(fp)
   1bfdc:	00bfff84 	movi	r2,-2
   1bfe0:	1884703a 	and	r2,r3,r2
   1bfe4:	1001703a 	wrctl	status,r2
  
  return context;
   1bfe8:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1bfec:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   1bff0:	e0bffe17 	ldw	r2,-8(fp)
   1bff4:	10800117 	ldw	r2,4(r2)
   1bff8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   1bffc:	e0bffc17 	ldw	r2,-16(fp)
   1c000:	1080058b 	ldhu	r2,22(r2)
   1c004:	10bfffcc 	andi	r2,r2,65535
   1c008:	10001926 	beq	r2,zero,1c070 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   1c00c:	e0bffc17 	ldw	r2,-16(fp)
   1c010:	10800417 	ldw	r2,16(r2)
   1c014:	11000104 	addi	r4,r2,4
   1c018:	e0fffc17 	ldw	r3,-16(fp)
   1c01c:	19000415 	stw	r4,16(r3)
   1c020:	10800017 	ldw	r2,0(r2)
   1c024:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1c028:	e0bffc17 	ldw	r2,-16(fp)
   1c02c:	1080058b 	ldhu	r2,22(r2)
   1c030:	10bfffc4 	addi	r2,r2,-1
   1c034:	1007883a 	mov	r3,r2
   1c038:	e0bffc17 	ldw	r2,-16(fp)
   1c03c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   1c040:	e0bffc17 	ldw	r2,-16(fp)
   1c044:	10c00417 	ldw	r3,16(r2)
   1c048:	e0bffc17 	ldw	r2,-16(fp)
   1c04c:	10800217 	ldw	r2,8(r2)
   1c050:	1880041e 	bne	r3,r2,1c064 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
   1c054:	e0bffc17 	ldw	r2,-16(fp)
   1c058:	10c00117 	ldw	r3,4(r2)
   1c05c:	e0bffc17 	ldw	r2,-16(fp)
   1c060:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
   1c064:	e0bfff17 	ldw	r2,-4(fp)
   1c068:	10000005 	stb	zero,0(r2)
   1c06c:	00000406 	br	1c080 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
   1c070:	e0bfff17 	ldw	r2,-4(fp)
   1c074:	00c007c4 	movi	r3,31
   1c078:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
   1c07c:	e03ff915 	stw	zero,-28(fp)
   1c080:	e0bffa17 	ldw	r2,-24(fp)
   1c084:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c088:	e0bffb17 	ldw	r2,-20(fp)
   1c08c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
   1c090:	e0bff917 	ldw	r2,-28(fp)
}
   1c094:	e037883a 	mov	sp,fp
   1c098:	df000017 	ldw	fp,0(sp)
   1c09c:	dec00104 	addi	sp,sp,4
   1c0a0:	f800283a 	ret

0001c0a4 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
   1c0a4:	defff404 	addi	sp,sp,-48
   1c0a8:	dfc00b15 	stw	ra,44(sp)
   1c0ac:	df000a15 	stw	fp,40(sp)
   1c0b0:	df000a04 	addi	fp,sp,40
   1c0b4:	e13ffe15 	stw	r4,-8(fp)
   1c0b8:	2805883a 	mov	r2,r5
   1c0bc:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1c0c0:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   1c0c4:	d0a85503 	ldbu	r2,-24236(gp)
   1c0c8:	10803fcc 	andi	r2,r2,255
   1c0cc:	10000226 	beq	r2,zero,1c0d8 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   1c0d0:	0005883a 	mov	r2,zero
   1c0d4:	00005906 	br	1c23c <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c0d8:	0005303a 	rdctl	r2,status
   1c0dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c0e0:	e0fffd17 	ldw	r3,-12(fp)
   1c0e4:	00bfff84 	movi	r2,-2
   1c0e8:	1884703a 	and	r2,r3,r2
   1c0ec:	1001703a 	wrctl	status,r2
  
  return context;
   1c0f0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1c0f4:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
   1c0f8:	d0a85417 	ldw	r2,-24240(gp)
   1c0fc:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   1c100:	d0a85417 	ldw	r2,-24240(gp)
   1c104:	10000326 	beq	r2,zero,1c114 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1c108:	d0a85417 	ldw	r2,-24240(gp)
   1c10c:	10800117 	ldw	r2,4(r2)
   1c110:	d0a85415 	stw	r2,-24240(gp)
   1c114:	e0bff717 	ldw	r2,-36(fp)
   1c118:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c11c:	e0bff817 	ldw	r2,-32(fp)
   1c120:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   1c124:	e0bff617 	ldw	r2,-40(fp)
   1c128:	10004326 	beq	r2,zero,1c238 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c12c:	0005303a 	rdctl	r2,status
   1c130:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c134:	e0fff917 	ldw	r3,-28(fp)
   1c138:	00bfff84 	movi	r2,-2
   1c13c:	1884703a 	and	r2,r3,r2
   1c140:	1001703a 	wrctl	status,r2
  
  return context;
   1c144:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
   1c148:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
   1c14c:	d0a85217 	ldw	r2,-24248(gp)
   1c150:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   1c154:	e0bffb17 	ldw	r2,-20(fp)
   1c158:	10002d26 	beq	r2,zero,1c210 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   1c15c:	d0a85217 	ldw	r2,-24248(gp)
   1c160:	10800017 	ldw	r2,0(r2)
   1c164:	d0a85215 	stw	r2,-24248(gp)
   1c168:	e0bff717 	ldw	r2,-36(fp)
   1c16c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c170:	e0bffa17 	ldw	r2,-24(fp)
   1c174:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
   1c178:	e0bffb17 	ldw	r2,-20(fp)
   1c17c:	e0fffe17 	ldw	r3,-8(fp)
   1c180:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
   1c184:	e0bfff0b 	ldhu	r2,-4(fp)
   1c188:	1085883a 	add	r2,r2,r2
   1c18c:	1085883a 	add	r2,r2,r2
   1c190:	1007883a 	mov	r3,r2
   1c194:	e0bffe17 	ldw	r2,-8(fp)
   1c198:	10c7883a 	add	r3,r2,r3
   1c19c:	e0bffb17 	ldw	r2,-20(fp)
   1c1a0:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
   1c1a4:	e0bffb17 	ldw	r2,-20(fp)
   1c1a8:	e0fffe17 	ldw	r3,-8(fp)
   1c1ac:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
   1c1b0:	e0bffb17 	ldw	r2,-20(fp)
   1c1b4:	e0fffe17 	ldw	r3,-8(fp)
   1c1b8:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
   1c1bc:	e0bffb17 	ldw	r2,-20(fp)
   1c1c0:	e0ffff0b 	ldhu	r3,-4(fp)
   1c1c4:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
   1c1c8:	e0bffb17 	ldw	r2,-20(fp)
   1c1cc:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
   1c1d0:	e0bff617 	ldw	r2,-40(fp)
   1c1d4:	00c00084 	movi	r3,2
   1c1d8:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
   1c1dc:	e0bff617 	ldw	r2,-40(fp)
   1c1e0:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
   1c1e4:	e0bff617 	ldw	r2,-40(fp)
   1c1e8:	e0fffb17 	ldw	r3,-20(fp)
   1c1ec:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
   1c1f0:	e0bff617 	ldw	r2,-40(fp)
   1c1f4:	00c00fc4 	movi	r3,63
   1c1f8:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
   1c1fc:	e0bff617 	ldw	r2,-40(fp)
   1c200:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
   1c204:	e13ff617 	ldw	r4,-40(fp)
   1c208:	00193ec0 	call	193ec <OS_EventWaitListInit>
   1c20c:	00000a06 	br	1c238 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   1c210:	d0e85417 	ldw	r3,-24240(gp)
   1c214:	e0bff617 	ldw	r2,-40(fp)
   1c218:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
   1c21c:	e0bff617 	ldw	r2,-40(fp)
   1c220:	d0a85415 	stw	r2,-24240(gp)
   1c224:	e0bff717 	ldw	r2,-36(fp)
   1c228:	e0bffc15 	stw	r2,-16(fp)
   1c22c:	e0bffc17 	ldw	r2,-16(fp)
   1c230:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
   1c234:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
   1c238:	e0bff617 	ldw	r2,-40(fp)
}
   1c23c:	e037883a 	mov	sp,fp
   1c240:	dfc00117 	ldw	ra,4(sp)
   1c244:	df000017 	ldw	fp,0(sp)
   1c248:	dec00204 	addi	sp,sp,8
   1c24c:	f800283a 	ret

0001c250 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1c250:	defff204 	addi	sp,sp,-56
   1c254:	dfc00d15 	stw	ra,52(sp)
   1c258:	df000c15 	stw	fp,48(sp)
   1c25c:	df000c04 	addi	fp,sp,48
   1c260:	e13ffd15 	stw	r4,-12(fp)
   1c264:	2805883a 	mov	r2,r5
   1c268:	e1bfff15 	stw	r6,-4(fp)
   1c26c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1c270:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1c274:	e0bfff17 	ldw	r2,-4(fp)
   1c278:	1000021e 	bne	r2,zero,1c284 <OSQDel+0x34>
        return (pevent);
   1c27c:	e0bffd17 	ldw	r2,-12(fp)
   1c280:	00008e06 	br	1c4bc <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1c284:	e0bffd17 	ldw	r2,-12(fp)
   1c288:	1000051e 	bne	r2,zero,1c2a0 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1c28c:	e0bfff17 	ldw	r2,-4(fp)
   1c290:	00c00104 	movi	r3,4
   1c294:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1c298:	e0bffd17 	ldw	r2,-12(fp)
   1c29c:	00008706 	br	1c4bc <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   1c2a0:	e0bffd17 	ldw	r2,-12(fp)
   1c2a4:	10800003 	ldbu	r2,0(r2)
   1c2a8:	10803fcc 	andi	r2,r2,255
   1c2ac:	108000a0 	cmpeqi	r2,r2,2
   1c2b0:	1000051e 	bne	r2,zero,1c2c8 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1c2b4:	e0bfff17 	ldw	r2,-4(fp)
   1c2b8:	00c00044 	movi	r3,1
   1c2bc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1c2c0:	e0bffd17 	ldw	r2,-12(fp)
   1c2c4:	00007d06 	br	1c4bc <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1c2c8:	d0a85503 	ldbu	r2,-24236(gp)
   1c2cc:	10803fcc 	andi	r2,r2,255
   1c2d0:	10000526 	beq	r2,zero,1c2e8 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   1c2d4:	e0bfff17 	ldw	r2,-4(fp)
   1c2d8:	00c003c4 	movi	r3,15
   1c2dc:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1c2e0:	e0bffd17 	ldw	r2,-12(fp)
   1c2e4:	00007506 	br	1c4bc <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c2e8:	0005303a 	rdctl	r2,status
   1c2ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c2f0:	e0fffc17 	ldw	r3,-16(fp)
   1c2f4:	00bfff84 	movi	r2,-2
   1c2f8:	1884703a 	and	r2,r3,r2
   1c2fc:	1001703a 	wrctl	status,r2
  
  return context;
   1c300:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1c304:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
   1c308:	e0bffd17 	ldw	r2,-12(fp)
   1c30c:	10800283 	ldbu	r2,10(r2)
   1c310:	10803fcc 	andi	r2,r2,255
   1c314:	10000326 	beq	r2,zero,1c324 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1c318:	00800044 	movi	r2,1
   1c31c:	e0bff405 	stb	r2,-48(fp)
   1c320:	00000106 	br	1c328 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1c324:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
   1c328:	e0bffe03 	ldbu	r2,-8(fp)
   1c32c:	10000326 	beq	r2,zero,1c33c <OSQDel+0xec>
   1c330:	10800060 	cmpeqi	r2,r2,1
   1c334:	1000301e 	bne	r2,zero,1c3f8 <OSQDel+0x1a8>
   1c338:	00005506 	br	1c490 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
   1c33c:	e0bff403 	ldbu	r2,-48(fp)
   1c340:	10001e1e 	bne	r2,zero,1c3bc <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1c344:	e0bffd17 	ldw	r2,-12(fp)
   1c348:	00c00fc4 	movi	r3,63
   1c34c:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   1c350:	e0bffd17 	ldw	r2,-12(fp)
   1c354:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   1c358:	e0bffd17 	ldw	r2,-12(fp)
   1c35c:	10800117 	ldw	r2,4(r2)
   1c360:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
   1c364:	d0e85217 	ldw	r3,-24248(gp)
   1c368:	e0bff817 	ldw	r2,-32(fp)
   1c36c:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
   1c370:	e0bff817 	ldw	r2,-32(fp)
   1c374:	d0a85215 	stw	r2,-24248(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1c378:	e0bffd17 	ldw	r2,-12(fp)
   1c37c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   1c380:	d0e85417 	ldw	r3,-24240(gp)
   1c384:	e0bffd17 	ldw	r2,-12(fp)
   1c388:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   1c38c:	e0bffd17 	ldw	r2,-12(fp)
   1c390:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   1c394:	e0bffd17 	ldw	r2,-12(fp)
   1c398:	d0a85415 	stw	r2,-24240(gp)
   1c39c:	e0bff617 	ldw	r2,-40(fp)
   1c3a0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c3a4:	e0bff717 	ldw	r2,-36(fp)
   1c3a8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   1c3ac:	e0bfff17 	ldw	r2,-4(fp)
   1c3b0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   1c3b4:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1c3b8:	00003f06 	br	1c4b8 <OSQDel+0x268>
   1c3bc:	e0bff617 	ldw	r2,-40(fp)
   1c3c0:	e0bff915 	stw	r2,-28(fp)
   1c3c4:	e0bff917 	ldw	r2,-28(fp)
   1c3c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   1c3cc:	e0bfff17 	ldw	r2,-4(fp)
   1c3d0:	00c01244 	movi	r3,73
   1c3d4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1c3d8:	e0bffd17 	ldw	r2,-12(fp)
   1c3dc:	e0bff515 	stw	r2,-44(fp)
             }
             break;
   1c3e0:	00003506 	br	1c4b8 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
   1c3e4:	000f883a 	mov	r7,zero
   1c3e8:	01800104 	movi	r6,4
   1c3ec:	000b883a 	mov	r5,zero
   1c3f0:	e13ffd17 	ldw	r4,-12(fp)
   1c3f4:	0018e3c0 	call	18e3c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
   1c3f8:	e0bffd17 	ldw	r2,-12(fp)
   1c3fc:	10800283 	ldbu	r2,10(r2)
   1c400:	10803fcc 	andi	r2,r2,255
   1c404:	103ff71e 	bne	r2,zero,1c3e4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701c3e4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1c408:	e0bffd17 	ldw	r2,-12(fp)
   1c40c:	00c00fc4 	movi	r3,63
   1c410:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   1c414:	e0bffd17 	ldw	r2,-12(fp)
   1c418:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   1c41c:	e0bffd17 	ldw	r2,-12(fp)
   1c420:	10800117 	ldw	r2,4(r2)
   1c424:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
   1c428:	d0e85217 	ldw	r3,-24248(gp)
   1c42c:	e0bff817 	ldw	r2,-32(fp)
   1c430:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
   1c434:	e0bff817 	ldw	r2,-32(fp)
   1c438:	d0a85215 	stw	r2,-24248(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1c43c:	e0bffd17 	ldw	r2,-12(fp)
   1c440:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   1c444:	d0e85417 	ldw	r3,-24240(gp)
   1c448:	e0bffd17 	ldw	r2,-12(fp)
   1c44c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1c450:	e0bffd17 	ldw	r2,-12(fp)
   1c454:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1c458:	e0bffd17 	ldw	r2,-12(fp)
   1c45c:	d0a85415 	stw	r2,-24240(gp)
   1c460:	e0bff617 	ldw	r2,-40(fp)
   1c464:	e0bffa15 	stw	r2,-24(fp)
   1c468:	e0bffa17 	ldw	r2,-24(fp)
   1c46c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1c470:	e0bff403 	ldbu	r2,-48(fp)
   1c474:	10800058 	cmpnei	r2,r2,1
   1c478:	1000011e 	bne	r2,zero,1c480 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1c47c:	00198880 	call	19888 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   1c480:	e0bfff17 	ldw	r2,-4(fp)
   1c484:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   1c488:	e03ff515 	stw	zero,-44(fp)
             break;
   1c48c:	00000a06 	br	1c4b8 <OSQDel+0x268>
   1c490:	e0bff617 	ldw	r2,-40(fp)
   1c494:	e0bffb15 	stw	r2,-20(fp)
   1c498:	e0bffb17 	ldw	r2,-20(fp)
   1c49c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   1c4a0:	e0bfff17 	ldw	r2,-4(fp)
   1c4a4:	00c001c4 	movi	r3,7
   1c4a8:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   1c4ac:	e0bffd17 	ldw	r2,-12(fp)
   1c4b0:	e0bff515 	stw	r2,-44(fp)
             break;
   1c4b4:	0001883a 	nop
    }
    return (pevent_return);
   1c4b8:	e0bff517 	ldw	r2,-44(fp)
}
   1c4bc:	e037883a 	mov	sp,fp
   1c4c0:	dfc00117 	ldw	ra,4(sp)
   1c4c4:	df000017 	ldw	fp,0(sp)
   1c4c8:	dec00204 	addi	sp,sp,8
   1c4cc:	f800283a 	ret

0001c4d0 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
   1c4d0:	defffa04 	addi	sp,sp,-24
   1c4d4:	df000515 	stw	fp,20(sp)
   1c4d8:	df000504 	addi	fp,sp,20
   1c4dc:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1c4e0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1c4e4:	e0bfff17 	ldw	r2,-4(fp)
   1c4e8:	1000021e 	bne	r2,zero,1c4f4 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
   1c4ec:	00800104 	movi	r2,4
   1c4f0:	00002106 	br	1c578 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1c4f4:	e0bfff17 	ldw	r2,-4(fp)
   1c4f8:	10800003 	ldbu	r2,0(r2)
   1c4fc:	10803fcc 	andi	r2,r2,255
   1c500:	108000a0 	cmpeqi	r2,r2,2
   1c504:	1000021e 	bne	r2,zero,1c510 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
   1c508:	00800044 	movi	r2,1
   1c50c:	00001a06 	br	1c578 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c510:	0005303a 	rdctl	r2,status
   1c514:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c518:	e0fffd17 	ldw	r3,-12(fp)
   1c51c:	00bfff84 	movi	r2,-2
   1c520:	1884703a 	and	r2,r3,r2
   1c524:	1001703a 	wrctl	status,r2
  
  return context;
   1c528:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1c52c:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   1c530:	e0bfff17 	ldw	r2,-4(fp)
   1c534:	10800117 	ldw	r2,4(r2)
   1c538:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
   1c53c:	e0bffc17 	ldw	r2,-16(fp)
   1c540:	10c00117 	ldw	r3,4(r2)
   1c544:	e0bffc17 	ldw	r2,-16(fp)
   1c548:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
   1c54c:	e0bffc17 	ldw	r2,-16(fp)
   1c550:	10c00117 	ldw	r3,4(r2)
   1c554:	e0bffc17 	ldw	r2,-16(fp)
   1c558:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
   1c55c:	e0bffc17 	ldw	r2,-16(fp)
   1c560:	1000058d 	sth	zero,22(r2)
   1c564:	e0bffb17 	ldw	r2,-20(fp)
   1c568:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c56c:	e0bffe17 	ldw	r2,-8(fp)
   1c570:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1c574:	0005883a 	mov	r2,zero
}
   1c578:	e037883a 	mov	sp,fp
   1c57c:	df000017 	ldw	fp,0(sp)
   1c580:	dec00104 	addi	sp,sp,4
   1c584:	f800283a 	ret

0001c588 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1c588:	defff304 	addi	sp,sp,-52
   1c58c:	dfc00c15 	stw	ra,48(sp)
   1c590:	df000b15 	stw	fp,44(sp)
   1c594:	df000b04 	addi	fp,sp,44
   1c598:	e13ffd15 	stw	r4,-12(fp)
   1c59c:	2805883a 	mov	r2,r5
   1c5a0:	e1bfff15 	stw	r6,-4(fp)
   1c5a4:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1c5a8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
   1c5ac:	e0bfff17 	ldw	r2,-4(fp)
   1c5b0:	1000021e 	bne	r2,zero,1c5bc <OSQPend+0x34>
        return ((void *)0);
   1c5b4:	0005883a 	mov	r2,zero
   1c5b8:	00009106 	br	1c800 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
   1c5bc:	e0bffd17 	ldw	r2,-12(fp)
   1c5c0:	1000051e 	bne	r2,zero,1c5d8 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1c5c4:	e0bfff17 	ldw	r2,-4(fp)
   1c5c8:	00c00104 	movi	r3,4
   1c5cc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1c5d0:	0005883a 	mov	r2,zero
   1c5d4:	00008a06 	br	1c800 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   1c5d8:	e0bffd17 	ldw	r2,-12(fp)
   1c5dc:	10800003 	ldbu	r2,0(r2)
   1c5e0:	10803fcc 	andi	r2,r2,255
   1c5e4:	108000a0 	cmpeqi	r2,r2,2
   1c5e8:	1000051e 	bne	r2,zero,1c600 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1c5ec:	e0bfff17 	ldw	r2,-4(fp)
   1c5f0:	00c00044 	movi	r3,1
   1c5f4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1c5f8:	0005883a 	mov	r2,zero
   1c5fc:	00008006 	br	1c800 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
   1c600:	d0a85503 	ldbu	r2,-24236(gp)
   1c604:	10803fcc 	andi	r2,r2,255
   1c608:	10000526 	beq	r2,zero,1c620 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   1c60c:	e0bfff17 	ldw	r2,-4(fp)
   1c610:	00c00084 	movi	r3,2
   1c614:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1c618:	0005883a 	mov	r2,zero
   1c61c:	00007806 	br	1c800 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
   1c620:	d0a84703 	ldbu	r2,-24292(gp)
   1c624:	10803fcc 	andi	r2,r2,255
   1c628:	10000526 	beq	r2,zero,1c640 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   1c62c:	e0bfff17 	ldw	r2,-4(fp)
   1c630:	00c00344 	movi	r3,13
   1c634:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
   1c638:	0005883a 	mov	r2,zero
   1c63c:	00007006 	br	1c800 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c640:	0005303a 	rdctl	r2,status
   1c644:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c648:	e0fffc17 	ldw	r3,-16(fp)
   1c64c:	00bfff84 	movi	r2,-2
   1c650:	1884703a 	and	r2,r3,r2
   1c654:	1001703a 	wrctl	status,r2
  
  return context;
   1c658:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1c65c:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   1c660:	e0bffd17 	ldw	r2,-12(fp)
   1c664:	10800117 	ldw	r2,4(r2)
   1c668:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
   1c66c:	e0bff817 	ldw	r2,-32(fp)
   1c670:	1080058b 	ldhu	r2,22(r2)
   1c674:	10bfffcc 	andi	r2,r2,65535
   1c678:	10001e26 	beq	r2,zero,1c6f4 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   1c67c:	e0bff817 	ldw	r2,-32(fp)
   1c680:	10800417 	ldw	r2,16(r2)
   1c684:	11000104 	addi	r4,r2,4
   1c688:	e0fff817 	ldw	r3,-32(fp)
   1c68c:	19000415 	stw	r4,16(r3)
   1c690:	10800017 	ldw	r2,0(r2)
   1c694:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   1c698:	e0bff817 	ldw	r2,-32(fp)
   1c69c:	1080058b 	ldhu	r2,22(r2)
   1c6a0:	10bfffc4 	addi	r2,r2,-1
   1c6a4:	1007883a 	mov	r3,r2
   1c6a8:	e0bff817 	ldw	r2,-32(fp)
   1c6ac:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   1c6b0:	e0bff817 	ldw	r2,-32(fp)
   1c6b4:	10c00417 	ldw	r3,16(r2)
   1c6b8:	e0bff817 	ldw	r2,-32(fp)
   1c6bc:	10800217 	ldw	r2,8(r2)
   1c6c0:	1880041e 	bne	r3,r2,1c6d4 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
   1c6c4:	e0bff817 	ldw	r2,-32(fp)
   1c6c8:	10c00117 	ldw	r3,4(r2)
   1c6cc:	e0bff817 	ldw	r2,-32(fp)
   1c6d0:	10c00415 	stw	r3,16(r2)
   1c6d4:	e0bff617 	ldw	r2,-40(fp)
   1c6d8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c6dc:	e0bff717 	ldw	r2,-36(fp)
   1c6e0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1c6e4:	e0bfff17 	ldw	r2,-4(fp)
   1c6e8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
   1c6ec:	e0bff517 	ldw	r2,-44(fp)
   1c6f0:	00004306 	br	1c800 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   1c6f4:	d0a85617 	ldw	r2,-24232(gp)
   1c6f8:	d0e85617 	ldw	r3,-24232(gp)
   1c6fc:	18c00c03 	ldbu	r3,48(r3)
   1c700:	18c00114 	ori	r3,r3,4
   1c704:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1c708:	d0a85617 	ldw	r2,-24232(gp)
   1c70c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   1c710:	d0a85617 	ldw	r2,-24232(gp)
   1c714:	e0fffe0b 	ldhu	r3,-8(fp)
   1c718:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   1c71c:	e13ffd17 	ldw	r4,-12(fp)
   1c720:	0018fd40 	call	18fd4 <OS_EventTaskWait>
   1c724:	e0bff617 	ldw	r2,-40(fp)
   1c728:	e0bffb15 	stw	r2,-20(fp)
   1c72c:	e0bffb17 	ldw	r2,-20(fp)
   1c730:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
   1c734:	00198880 	call	19888 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c738:	0005303a 	rdctl	r2,status
   1c73c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c740:	e0fff917 	ldw	r3,-28(fp)
   1c744:	00bfff84 	movi	r2,-2
   1c748:	1884703a 	and	r2,r3,r2
   1c74c:	1001703a 	wrctl	status,r2
  
  return context;
   1c750:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   1c754:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1c758:	d0a85617 	ldw	r2,-24232(gp)
   1c75c:	10800c43 	ldbu	r2,49(r2)
   1c760:	10803fcc 	andi	r2,r2,255
   1c764:	10000326 	beq	r2,zero,1c774 <OSQPend+0x1ec>
   1c768:	108000a0 	cmpeqi	r2,r2,2
   1c76c:	1000071e 	bne	r2,zero,1c78c <OSQPend+0x204>
   1c770:	00000b06 	br	1c7a0 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
   1c774:	d0a85617 	ldw	r2,-24232(gp)
   1c778:	10800917 	ldw	r2,36(r2)
   1c77c:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
   1c780:	e0bfff17 	ldw	r2,-4(fp)
   1c784:	10000005 	stb	zero,0(r2)
             break;
   1c788:	00000e06 	br	1c7c4 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
   1c78c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   1c790:	e0bfff17 	ldw	r2,-4(fp)
   1c794:	00c00384 	movi	r3,14
   1c798:	10c00005 	stb	r3,0(r2)
             break;
   1c79c:	00000906 	br	1c7c4 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
   1c7a0:	d0a85617 	ldw	r2,-24232(gp)
   1c7a4:	e17ffd17 	ldw	r5,-12(fp)
   1c7a8:	1009883a 	mov	r4,r2
   1c7ac:	00192340 	call	19234 <OS_EventTaskRemove>
             pmsg = (void *)0;
   1c7b0:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   1c7b4:	e0bfff17 	ldw	r2,-4(fp)
   1c7b8:	00c00284 	movi	r3,10
   1c7bc:	10c00005 	stb	r3,0(r2)
             break;
   1c7c0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   1c7c4:	d0a85617 	ldw	r2,-24232(gp)
   1c7c8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   1c7cc:	d0a85617 	ldw	r2,-24232(gp)
   1c7d0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   1c7d4:	d0a85617 	ldw	r2,-24232(gp)
   1c7d8:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1c7dc:	d0a85617 	ldw	r2,-24232(gp)
   1c7e0:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   1c7e4:	d0a85617 	ldw	r2,-24232(gp)
   1c7e8:	10000915 	stw	zero,36(r2)
   1c7ec:	e0bff617 	ldw	r2,-40(fp)
   1c7f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c7f4:	e0bffa17 	ldw	r2,-24(fp)
   1c7f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
   1c7fc:	e0bff517 	ldw	r2,-44(fp)
}
   1c800:	e037883a 	mov	sp,fp
   1c804:	dfc00117 	ldw	ra,4(sp)
   1c808:	df000017 	ldw	fp,0(sp)
   1c80c:	dec00204 	addi	sp,sp,8
   1c810:	f800283a 	ret

0001c814 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1c814:	defff604 	addi	sp,sp,-40
   1c818:	dfc00915 	stw	ra,36(sp)
   1c81c:	df000815 	stw	fp,32(sp)
   1c820:	df000804 	addi	fp,sp,32
   1c824:	e13ffd15 	stw	r4,-12(fp)
   1c828:	2805883a 	mov	r2,r5
   1c82c:	e1bfff15 	stw	r6,-4(fp)
   1c830:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1c834:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1c838:	e0bfff17 	ldw	r2,-4(fp)
   1c83c:	1000021e 	bne	r2,zero,1c848 <OSQPendAbort+0x34>
        return (0);
   1c840:	0005883a 	mov	r2,zero
   1c844:	00004906 	br	1c96c <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1c848:	e0bffd17 	ldw	r2,-12(fp)
   1c84c:	1000051e 	bne	r2,zero,1c864 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1c850:	e0bfff17 	ldw	r2,-4(fp)
   1c854:	00c00104 	movi	r3,4
   1c858:	10c00005 	stb	r3,0(r2)
        return (0);
   1c85c:	0005883a 	mov	r2,zero
   1c860:	00004206 	br	1c96c <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   1c864:	e0bffd17 	ldw	r2,-12(fp)
   1c868:	10800003 	ldbu	r2,0(r2)
   1c86c:	10803fcc 	andi	r2,r2,255
   1c870:	108000a0 	cmpeqi	r2,r2,2
   1c874:	1000051e 	bne	r2,zero,1c88c <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1c878:	e0bfff17 	ldw	r2,-4(fp)
   1c87c:	00c00044 	movi	r3,1
   1c880:	10c00005 	stb	r3,0(r2)
        return (0);
   1c884:	0005883a 	mov	r2,zero
   1c888:	00003806 	br	1c96c <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c88c:	0005303a 	rdctl	r2,status
   1c890:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c894:	e0fffc17 	ldw	r3,-16(fp)
   1c898:	00bfff84 	movi	r2,-2
   1c89c:	1884703a 	and	r2,r3,r2
   1c8a0:	1001703a 	wrctl	status,r2
  
  return context;
   1c8a4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1c8a8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
   1c8ac:	e0bffd17 	ldw	r2,-12(fp)
   1c8b0:	10800283 	ldbu	r2,10(r2)
   1c8b4:	10803fcc 	andi	r2,r2,255
   1c8b8:	10002526 	beq	r2,zero,1c950 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
   1c8bc:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1c8c0:	e0bffe03 	ldbu	r2,-8(fp)
   1c8c4:	10800060 	cmpeqi	r2,r2,1
   1c8c8:	10000e26 	beq	r2,zero,1c904 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   1c8cc:	00000806 	br	1c8f0 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   1c8d0:	01c00084 	movi	r7,2
   1c8d4:	01800104 	movi	r6,4
   1c8d8:	000b883a 	mov	r5,zero
   1c8dc:	e13ffd17 	ldw	r4,-12(fp)
   1c8e0:	0018e3c0 	call	18e3c <OS_EventTaskRdy>
                     nbr_tasks++;
   1c8e4:	e0bff803 	ldbu	r2,-32(fp)
   1c8e8:	10800044 	addi	r2,r2,1
   1c8ec:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
   1c8f0:	e0bffd17 	ldw	r2,-12(fp)
   1c8f4:	10800283 	ldbu	r2,10(r2)
   1c8f8:	10803fcc 	andi	r2,r2,255
   1c8fc:	103ff41e 	bne	r2,zero,1c8d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701c8d0>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1c900:	00000906 	br	1c928 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   1c904:	01c00084 	movi	r7,2
   1c908:	01800104 	movi	r6,4
   1c90c:	000b883a 	mov	r5,zero
   1c910:	e13ffd17 	ldw	r4,-12(fp)
   1c914:	0018e3c0 	call	18e3c <OS_EventTaskRdy>
                 nbr_tasks++;
   1c918:	e0bff803 	ldbu	r2,-32(fp)
   1c91c:	10800044 	addi	r2,r2,1
   1c920:	e0bff805 	stb	r2,-32(fp)
                 break;
   1c924:	0001883a 	nop
   1c928:	e0bff917 	ldw	r2,-28(fp)
   1c92c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1c930:	e0bffa17 	ldw	r2,-24(fp)
   1c934:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
   1c938:	00198880 	call	19888 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1c93c:	e0bfff17 	ldw	r2,-4(fp)
   1c940:	00c00384 	movi	r3,14
   1c944:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1c948:	e0bff803 	ldbu	r2,-32(fp)
   1c94c:	00000706 	br	1c96c <OSQPendAbort+0x158>
   1c950:	e0bff917 	ldw	r2,-28(fp)
   1c954:	e0bffb15 	stw	r2,-20(fp)
   1c958:	e0bffb17 	ldw	r2,-20(fp)
   1c95c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1c960:	e0bfff17 	ldw	r2,-4(fp)
   1c964:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
   1c968:	0005883a 	mov	r2,zero
}
   1c96c:	e037883a 	mov	sp,fp
   1c970:	dfc00117 	ldw	ra,4(sp)
   1c974:	df000017 	ldw	fp,0(sp)
   1c978:	dec00204 	addi	sp,sp,8
   1c97c:	f800283a 	ret

0001c980 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
   1c980:	defff604 	addi	sp,sp,-40
   1c984:	dfc00915 	stw	ra,36(sp)
   1c988:	df000815 	stw	fp,32(sp)
   1c98c:	df000804 	addi	fp,sp,32
   1c990:	e13ffe15 	stw	r4,-8(fp)
   1c994:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1c998:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   1c99c:	e0bffe17 	ldw	r2,-8(fp)
   1c9a0:	1000021e 	bne	r2,zero,1c9ac <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
   1c9a4:	00800104 	movi	r2,4
   1c9a8:	00004a06 	br	1cad4 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   1c9ac:	e0bffe17 	ldw	r2,-8(fp)
   1c9b0:	10800003 	ldbu	r2,0(r2)
   1c9b4:	10803fcc 	andi	r2,r2,255
   1c9b8:	108000a0 	cmpeqi	r2,r2,2
   1c9bc:	1000021e 	bne	r2,zero,1c9c8 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
   1c9c0:	00800044 	movi	r2,1
   1c9c4:	00004306 	br	1cad4 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1c9c8:	0005303a 	rdctl	r2,status
   1c9cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1c9d0:	e0fffd17 	ldw	r3,-12(fp)
   1c9d4:	00bfff84 	movi	r2,-2
   1c9d8:	1884703a 	and	r2,r3,r2
   1c9dc:	1001703a 	wrctl	status,r2
  
  return context;
   1c9e0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1c9e4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
   1c9e8:	e0bffe17 	ldw	r2,-8(fp)
   1c9ec:	10800283 	ldbu	r2,10(r2)
   1c9f0:	10803fcc 	andi	r2,r2,255
   1c9f4:	10000c26 	beq	r2,zero,1ca28 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1c9f8:	000f883a 	mov	r7,zero
   1c9fc:	01800104 	movi	r6,4
   1ca00:	e17fff17 	ldw	r5,-4(fp)
   1ca04:	e13ffe17 	ldw	r4,-8(fp)
   1ca08:	0018e3c0 	call	18e3c <OS_EventTaskRdy>
   1ca0c:	e0bff817 	ldw	r2,-32(fp)
   1ca10:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ca14:	e0bff917 	ldw	r2,-28(fp)
   1ca18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
   1ca1c:	00198880 	call	19888 <OS_Sched>
        return (OS_ERR_NONE);
   1ca20:	0005883a 	mov	r2,zero
   1ca24:	00002b06 	br	1cad4 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   1ca28:	e0bffe17 	ldw	r2,-8(fp)
   1ca2c:	10800117 	ldw	r2,4(r2)
   1ca30:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   1ca34:	e0bffb17 	ldw	r2,-20(fp)
   1ca38:	10c0058b 	ldhu	r3,22(r2)
   1ca3c:	e0bffb17 	ldw	r2,-20(fp)
   1ca40:	1080050b 	ldhu	r2,20(r2)
   1ca44:	18ffffcc 	andi	r3,r3,65535
   1ca48:	10bfffcc 	andi	r2,r2,65535
   1ca4c:	18800636 	bltu	r3,r2,1ca68 <OSQPost+0xe8>
   1ca50:	e0bff817 	ldw	r2,-32(fp)
   1ca54:	e0bffa15 	stw	r2,-24(fp)
   1ca58:	e0bffa17 	ldw	r2,-24(fp)
   1ca5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1ca60:	00800784 	movi	r2,30
   1ca64:	00001b06 	br	1cad4 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   1ca68:	e0bffb17 	ldw	r2,-20(fp)
   1ca6c:	10800317 	ldw	r2,12(r2)
   1ca70:	11000104 	addi	r4,r2,4
   1ca74:	e0fffb17 	ldw	r3,-20(fp)
   1ca78:	19000315 	stw	r4,12(r3)
   1ca7c:	e0ffff17 	ldw	r3,-4(fp)
   1ca80:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   1ca84:	e0bffb17 	ldw	r2,-20(fp)
   1ca88:	1080058b 	ldhu	r2,22(r2)
   1ca8c:	10800044 	addi	r2,r2,1
   1ca90:	1007883a 	mov	r3,r2
   1ca94:	e0bffb17 	ldw	r2,-20(fp)
   1ca98:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   1ca9c:	e0bffb17 	ldw	r2,-20(fp)
   1caa0:	10c00317 	ldw	r3,12(r2)
   1caa4:	e0bffb17 	ldw	r2,-20(fp)
   1caa8:	10800217 	ldw	r2,8(r2)
   1caac:	1880041e 	bne	r3,r2,1cac0 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
   1cab0:	e0bffb17 	ldw	r2,-20(fp)
   1cab4:	10c00117 	ldw	r3,4(r2)
   1cab8:	e0bffb17 	ldw	r2,-20(fp)
   1cabc:	10c00315 	stw	r3,12(r2)
   1cac0:	e0bff817 	ldw	r2,-32(fp)
   1cac4:	e0bffc15 	stw	r2,-16(fp)
   1cac8:	e0bffc17 	ldw	r2,-16(fp)
   1cacc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1cad0:	0005883a 	mov	r2,zero
}
   1cad4:	e037883a 	mov	sp,fp
   1cad8:	dfc00117 	ldw	ra,4(sp)
   1cadc:	df000017 	ldw	fp,0(sp)
   1cae0:	dec00204 	addi	sp,sp,8
   1cae4:	f800283a 	ret

0001cae8 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
   1cae8:	defff604 	addi	sp,sp,-40
   1caec:	dfc00915 	stw	ra,36(sp)
   1caf0:	df000815 	stw	fp,32(sp)
   1caf4:	df000804 	addi	fp,sp,32
   1caf8:	e13ffe15 	stw	r4,-8(fp)
   1cafc:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1cb00:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1cb04:	e0bffe17 	ldw	r2,-8(fp)
   1cb08:	1000021e 	bne	r2,zero,1cb14 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
   1cb0c:	00800104 	movi	r2,4
   1cb10:	00004c06 	br	1cc44 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1cb14:	e0bffe17 	ldw	r2,-8(fp)
   1cb18:	10800003 	ldbu	r2,0(r2)
   1cb1c:	10803fcc 	andi	r2,r2,255
   1cb20:	108000a0 	cmpeqi	r2,r2,2
   1cb24:	1000021e 	bne	r2,zero,1cb30 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
   1cb28:	00800044 	movi	r2,1
   1cb2c:	00004506 	br	1cc44 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cb30:	0005303a 	rdctl	r2,status
   1cb34:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cb38:	e0fffd17 	ldw	r3,-12(fp)
   1cb3c:	00bfff84 	movi	r2,-2
   1cb40:	1884703a 	and	r2,r3,r2
   1cb44:	1001703a 	wrctl	status,r2
  
  return context;
   1cb48:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1cb4c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
   1cb50:	e0bffe17 	ldw	r2,-8(fp)
   1cb54:	10800283 	ldbu	r2,10(r2)
   1cb58:	10803fcc 	andi	r2,r2,255
   1cb5c:	10000c26 	beq	r2,zero,1cb90 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1cb60:	000f883a 	mov	r7,zero
   1cb64:	01800104 	movi	r6,4
   1cb68:	e17fff17 	ldw	r5,-4(fp)
   1cb6c:	e13ffe17 	ldw	r4,-8(fp)
   1cb70:	0018e3c0 	call	18e3c <OS_EventTaskRdy>
   1cb74:	e0bff817 	ldw	r2,-32(fp)
   1cb78:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cb7c:	e0bff917 	ldw	r2,-28(fp)
   1cb80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
   1cb84:	00198880 	call	19888 <OS_Sched>
        return (OS_ERR_NONE);
   1cb88:	0005883a 	mov	r2,zero
   1cb8c:	00002d06 	br	1cc44 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   1cb90:	e0bffe17 	ldw	r2,-8(fp)
   1cb94:	10800117 	ldw	r2,4(r2)
   1cb98:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   1cb9c:	e0bffb17 	ldw	r2,-20(fp)
   1cba0:	10c0058b 	ldhu	r3,22(r2)
   1cba4:	e0bffb17 	ldw	r2,-20(fp)
   1cba8:	1080050b 	ldhu	r2,20(r2)
   1cbac:	18ffffcc 	andi	r3,r3,65535
   1cbb0:	10bfffcc 	andi	r2,r2,65535
   1cbb4:	18800636 	bltu	r3,r2,1cbd0 <OSQPostFront+0xe8>
   1cbb8:	e0bff817 	ldw	r2,-32(fp)
   1cbbc:	e0bffa15 	stw	r2,-24(fp)
   1cbc0:	e0bffa17 	ldw	r2,-24(fp)
   1cbc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1cbc8:	00800784 	movi	r2,30
   1cbcc:	00001d06 	br	1cc44 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   1cbd0:	e0bffb17 	ldw	r2,-20(fp)
   1cbd4:	10c00417 	ldw	r3,16(r2)
   1cbd8:	e0bffb17 	ldw	r2,-20(fp)
   1cbdc:	10800117 	ldw	r2,4(r2)
   1cbe0:	1880041e 	bne	r3,r2,1cbf4 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
   1cbe4:	e0bffb17 	ldw	r2,-20(fp)
   1cbe8:	10c00217 	ldw	r3,8(r2)
   1cbec:	e0bffb17 	ldw	r2,-20(fp)
   1cbf0:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
   1cbf4:	e0bffb17 	ldw	r2,-20(fp)
   1cbf8:	10800417 	ldw	r2,16(r2)
   1cbfc:	10ffff04 	addi	r3,r2,-4
   1cc00:	e0bffb17 	ldw	r2,-20(fp)
   1cc04:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   1cc08:	e0bffb17 	ldw	r2,-20(fp)
   1cc0c:	10800417 	ldw	r2,16(r2)
   1cc10:	e0ffff17 	ldw	r3,-4(fp)
   1cc14:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   1cc18:	e0bffb17 	ldw	r2,-20(fp)
   1cc1c:	1080058b 	ldhu	r2,22(r2)
   1cc20:	10800044 	addi	r2,r2,1
   1cc24:	1007883a 	mov	r3,r2
   1cc28:	e0bffb17 	ldw	r2,-20(fp)
   1cc2c:	10c0058d 	sth	r3,22(r2)
   1cc30:	e0bff817 	ldw	r2,-32(fp)
   1cc34:	e0bffc15 	stw	r2,-16(fp)
   1cc38:	e0bffc17 	ldw	r2,-16(fp)
   1cc3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1cc40:	0005883a 	mov	r2,zero
}
   1cc44:	e037883a 	mov	sp,fp
   1cc48:	dfc00117 	ldw	ra,4(sp)
   1cc4c:	df000017 	ldw	fp,0(sp)
   1cc50:	dec00204 	addi	sp,sp,8
   1cc54:	f800283a 	ret

0001cc58 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
   1cc58:	defff504 	addi	sp,sp,-44
   1cc5c:	dfc00a15 	stw	ra,40(sp)
   1cc60:	df000915 	stw	fp,36(sp)
   1cc64:	df000904 	addi	fp,sp,36
   1cc68:	e13ffd15 	stw	r4,-12(fp)
   1cc6c:	e17ffe15 	stw	r5,-8(fp)
   1cc70:	3005883a 	mov	r2,r6
   1cc74:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1cc78:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1cc7c:	e0bffd17 	ldw	r2,-12(fp)
   1cc80:	1000021e 	bne	r2,zero,1cc8c <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
   1cc84:	00800104 	movi	r2,4
   1cc88:	00007106 	br	1ce50 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   1cc8c:	e0bffd17 	ldw	r2,-12(fp)
   1cc90:	10800003 	ldbu	r2,0(r2)
   1cc94:	10803fcc 	andi	r2,r2,255
   1cc98:	108000a0 	cmpeqi	r2,r2,2
   1cc9c:	1000021e 	bne	r2,zero,1cca8 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
   1cca0:	00800044 	movi	r2,1
   1cca4:	00006a06 	br	1ce50 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1cca8:	0005303a 	rdctl	r2,status
   1ccac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ccb0:	e0fffc17 	ldw	r3,-16(fp)
   1ccb4:	00bfff84 	movi	r2,-2
   1ccb8:	1884703a 	and	r2,r3,r2
   1ccbc:	1001703a 	wrctl	status,r2
  
  return context;
   1ccc0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1ccc4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
   1ccc8:	e0bffd17 	ldw	r2,-12(fp)
   1cccc:	10800283 	ldbu	r2,10(r2)
   1ccd0:	10803fcc 	andi	r2,r2,255
   1ccd4:	10001d26 	beq	r2,zero,1cd4c <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
   1ccd8:	e0bfff03 	ldbu	r2,-4(fp)
   1ccdc:	1080004c 	andi	r2,r2,1
   1cce0:	10000b26 	beq	r2,zero,1cd10 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   1cce4:	00000506 	br	1ccfc <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1cce8:	000f883a 	mov	r7,zero
   1ccec:	01800104 	movi	r6,4
   1ccf0:	e17ffe17 	ldw	r5,-8(fp)
   1ccf4:	e13ffd17 	ldw	r4,-12(fp)
   1ccf8:	0018e3c0 	call	18e3c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
   1ccfc:	e0bffd17 	ldw	r2,-12(fp)
   1cd00:	10800283 	ldbu	r2,10(r2)
   1cd04:	10803fcc 	andi	r2,r2,255
   1cd08:	103ff71e 	bne	r2,zero,1cce8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701cce8>
   1cd0c:	00000506 	br	1cd24 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   1cd10:	000f883a 	mov	r7,zero
   1cd14:	01800104 	movi	r6,4
   1cd18:	e17ffe17 	ldw	r5,-8(fp)
   1cd1c:	e13ffd17 	ldw	r4,-12(fp)
   1cd20:	0018e3c0 	call	18e3c <OS_EventTaskRdy>
   1cd24:	e0bff717 	ldw	r2,-36(fp)
   1cd28:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cd2c:	e0bff817 	ldw	r2,-32(fp)
   1cd30:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
   1cd34:	e0bfff03 	ldbu	r2,-4(fp)
   1cd38:	1080010c 	andi	r2,r2,4
   1cd3c:	1000011e 	bne	r2,zero,1cd44 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
   1cd40:	00198880 	call	19888 <OS_Sched>
        }
        return (OS_ERR_NONE);
   1cd44:	0005883a 	mov	r2,zero
   1cd48:	00004106 	br	1ce50 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   1cd4c:	e0bffd17 	ldw	r2,-12(fp)
   1cd50:	10800117 	ldw	r2,4(r2)
   1cd54:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   1cd58:	e0bffa17 	ldw	r2,-24(fp)
   1cd5c:	10c0058b 	ldhu	r3,22(r2)
   1cd60:	e0bffa17 	ldw	r2,-24(fp)
   1cd64:	1080050b 	ldhu	r2,20(r2)
   1cd68:	18ffffcc 	andi	r3,r3,65535
   1cd6c:	10bfffcc 	andi	r2,r2,65535
   1cd70:	18800636 	bltu	r3,r2,1cd8c <OSQPostOpt+0x134>
   1cd74:	e0bff717 	ldw	r2,-36(fp)
   1cd78:	e0bff915 	stw	r2,-28(fp)
   1cd7c:	e0bff917 	ldw	r2,-28(fp)
   1cd80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
   1cd84:	00800784 	movi	r2,30
   1cd88:	00003106 	br	1ce50 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
   1cd8c:	e0bfff03 	ldbu	r2,-4(fp)
   1cd90:	1080008c 	andi	r2,r2,2
   1cd94:	10001326 	beq	r2,zero,1cde4 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   1cd98:	e0bffa17 	ldw	r2,-24(fp)
   1cd9c:	10c00417 	ldw	r3,16(r2)
   1cda0:	e0bffa17 	ldw	r2,-24(fp)
   1cda4:	10800117 	ldw	r2,4(r2)
   1cda8:	1880041e 	bne	r3,r2,1cdbc <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   1cdac:	e0bffa17 	ldw	r2,-24(fp)
   1cdb0:	10c00217 	ldw	r3,8(r2)
   1cdb4:	e0bffa17 	ldw	r2,-24(fp)
   1cdb8:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
   1cdbc:	e0bffa17 	ldw	r2,-24(fp)
   1cdc0:	10800417 	ldw	r2,16(r2)
   1cdc4:	10ffff04 	addi	r3,r2,-4
   1cdc8:	e0bffa17 	ldw	r2,-24(fp)
   1cdcc:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   1cdd0:	e0bffa17 	ldw	r2,-24(fp)
   1cdd4:	10800417 	ldw	r2,16(r2)
   1cdd8:	e0fffe17 	ldw	r3,-8(fp)
   1cddc:	10c00015 	stw	r3,0(r2)
   1cde0:	00001006 	br	1ce24 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   1cde4:	e0bffa17 	ldw	r2,-24(fp)
   1cde8:	10800317 	ldw	r2,12(r2)
   1cdec:	11000104 	addi	r4,r2,4
   1cdf0:	e0fffa17 	ldw	r3,-24(fp)
   1cdf4:	19000315 	stw	r4,12(r3)
   1cdf8:	e0fffe17 	ldw	r3,-8(fp)
   1cdfc:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   1ce00:	e0bffa17 	ldw	r2,-24(fp)
   1ce04:	10c00317 	ldw	r3,12(r2)
   1ce08:	e0bffa17 	ldw	r2,-24(fp)
   1ce0c:	10800217 	ldw	r2,8(r2)
   1ce10:	1880041e 	bne	r3,r2,1ce24 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
   1ce14:	e0bffa17 	ldw	r2,-24(fp)
   1ce18:	10c00117 	ldw	r3,4(r2)
   1ce1c:	e0bffa17 	ldw	r2,-24(fp)
   1ce20:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   1ce24:	e0bffa17 	ldw	r2,-24(fp)
   1ce28:	1080058b 	ldhu	r2,22(r2)
   1ce2c:	10800044 	addi	r2,r2,1
   1ce30:	1007883a 	mov	r3,r2
   1ce34:	e0bffa17 	ldw	r2,-24(fp)
   1ce38:	10c0058d 	sth	r3,22(r2)
   1ce3c:	e0bff717 	ldw	r2,-36(fp)
   1ce40:	e0bffb15 	stw	r2,-20(fp)
   1ce44:	e0bffb17 	ldw	r2,-20(fp)
   1ce48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1ce4c:	0005883a 	mov	r2,zero
}
   1ce50:	e037883a 	mov	sp,fp
   1ce54:	dfc00117 	ldw	ra,4(sp)
   1ce58:	df000017 	ldw	fp,0(sp)
   1ce5c:	dec00204 	addi	sp,sp,8
   1ce60:	f800283a 	ret

0001ce64 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
   1ce64:	defff604 	addi	sp,sp,-40
   1ce68:	df000915 	stw	fp,36(sp)
   1ce6c:	df000904 	addi	fp,sp,36
   1ce70:	e13ffe15 	stw	r4,-8(fp)
   1ce74:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1ce78:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
   1ce7c:	e0bffe17 	ldw	r2,-8(fp)
   1ce80:	1000021e 	bne	r2,zero,1ce8c <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1ce84:	00800104 	movi	r2,4
   1ce88:	00004906 	br	1cfb0 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
   1ce8c:	e0bfff17 	ldw	r2,-4(fp)
   1ce90:	1000021e 	bne	r2,zero,1ce9c <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1ce94:	00800244 	movi	r2,9
   1ce98:	00004506 	br	1cfb0 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   1ce9c:	e0bffe17 	ldw	r2,-8(fp)
   1cea0:	10800003 	ldbu	r2,0(r2)
   1cea4:	10803fcc 	andi	r2,r2,255
   1cea8:	108000a0 	cmpeqi	r2,r2,2
   1ceac:	1000021e 	bne	r2,zero,1ceb8 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   1ceb0:	00800044 	movi	r2,1
   1ceb4:	00003e06 	br	1cfb0 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ceb8:	0005303a 	rdctl	r2,status
   1cebc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1cec0:	e0fffd17 	ldw	r3,-12(fp)
   1cec4:	00bfff84 	movi	r2,-2
   1cec8:	1884703a 	and	r2,r3,r2
   1cecc:	1001703a 	wrctl	status,r2
  
  return context;
   1ced0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1ced4:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   1ced8:	e0bffe17 	ldw	r2,-8(fp)
   1cedc:	10c00283 	ldbu	r3,10(r2)
   1cee0:	e0bfff17 	ldw	r2,-4(fp)
   1cee4:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
   1cee8:	e0bffe17 	ldw	r2,-8(fp)
   1ceec:	108002c4 	addi	r2,r2,11
   1cef0:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
   1cef4:	e0bfff17 	ldw	r2,-4(fp)
   1cef8:	10800204 	addi	r2,r2,8
   1cefc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1cf00:	e03ff705 	stb	zero,-36(fp)
   1cf04:	00000b06 	br	1cf34 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
   1cf08:	e0bff917 	ldw	r2,-28(fp)
   1cf0c:	10c00044 	addi	r3,r2,1
   1cf10:	e0fff915 	stw	r3,-28(fp)
   1cf14:	e0fff817 	ldw	r3,-32(fp)
   1cf18:	19000044 	addi	r4,r3,1
   1cf1c:	e13ff815 	stw	r4,-32(fp)
   1cf20:	18c00003 	ldbu	r3,0(r3)
   1cf24:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1cf28:	e0bff703 	ldbu	r2,-36(fp)
   1cf2c:	10800044 	addi	r2,r2,1
   1cf30:	e0bff705 	stb	r2,-36(fp)
   1cf34:	e0bff703 	ldbu	r2,-36(fp)
   1cf38:	108000f0 	cmpltui	r2,r2,3
   1cf3c:	103ff21e 	bne	r2,zero,1cf08 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701cf08>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
   1cf40:	e0bffe17 	ldw	r2,-8(fp)
   1cf44:	10800117 	ldw	r2,4(r2)
   1cf48:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
   1cf4c:	e0bffc17 	ldw	r2,-16(fp)
   1cf50:	1080058b 	ldhu	r2,22(r2)
   1cf54:	10bfffcc 	andi	r2,r2,65535
   1cf58:	10000626 	beq	r2,zero,1cf74 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   1cf5c:	e0bffc17 	ldw	r2,-16(fp)
   1cf60:	10800417 	ldw	r2,16(r2)
   1cf64:	10c00017 	ldw	r3,0(r2)
   1cf68:	e0bfff17 	ldw	r2,-4(fp)
   1cf6c:	10c00015 	stw	r3,0(r2)
   1cf70:	00000206 	br	1cf7c <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
   1cf74:	e0bfff17 	ldw	r2,-4(fp)
   1cf78:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
   1cf7c:	e0bffc17 	ldw	r2,-16(fp)
   1cf80:	10c0058b 	ldhu	r3,22(r2)
   1cf84:	e0bfff17 	ldw	r2,-4(fp)
   1cf88:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
   1cf8c:	e0bffc17 	ldw	r2,-16(fp)
   1cf90:	10c0050b 	ldhu	r3,20(r2)
   1cf94:	e0bfff17 	ldw	r2,-4(fp)
   1cf98:	10c0018d 	sth	r3,6(r2)
   1cf9c:	e0bffa17 	ldw	r2,-24(fp)
   1cfa0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1cfa4:	e0bffb17 	ldw	r2,-20(fp)
   1cfa8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1cfac:	0005883a 	mov	r2,zero
}
   1cfb0:	e037883a 	mov	sp,fp
   1cfb4:	df000017 	ldw	fp,0(sp)
   1cfb8:	dec00104 	addi	sp,sp,4
   1cfbc:	f800283a 	ret

0001cfc0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
   1cfc0:	defffb04 	addi	sp,sp,-20
   1cfc4:	dfc00415 	stw	ra,16(sp)
   1cfc8:	df000315 	stw	fp,12(sp)
   1cfcc:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   1cfd0:	01407804 	movi	r5,480
   1cfd4:	010000f4 	movhi	r4,3
   1cfd8:	211a0c04 	addi	r4,r4,26672
   1cfdc:	00197cc0 	call	197cc <OS_MemClr>
    pq1 = &OSQTbl[0];
   1cfe0:	008000f4 	movhi	r2,3
   1cfe4:	109a0c04 	addi	r2,r2,26672
   1cfe8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
   1cfec:	008000f4 	movhi	r2,3
   1cff0:	109a1204 	addi	r2,r2,26696
   1cff4:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   1cff8:	e03ffd0d 	sth	zero,-12(fp)
   1cffc:	00000c06 	br	1d030 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
   1d000:	e0bffe17 	ldw	r2,-8(fp)
   1d004:	e0ffff17 	ldw	r3,-4(fp)
   1d008:	10c00015 	stw	r3,0(r2)
        pq1++;
   1d00c:	e0bffe17 	ldw	r2,-8(fp)
   1d010:	10800604 	addi	r2,r2,24
   1d014:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
   1d018:	e0bfff17 	ldw	r2,-4(fp)
   1d01c:	10800604 	addi	r2,r2,24
   1d020:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
   1d024:	e0bffd0b 	ldhu	r2,-12(fp)
   1d028:	10800044 	addi	r2,r2,1
   1d02c:	e0bffd0d 	sth	r2,-12(fp)
   1d030:	e0bffd0b 	ldhu	r2,-12(fp)
   1d034:	108004f0 	cmpltui	r2,r2,19
   1d038:	103ff11e 	bne	r2,zero,1d000 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701d000>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
   1d03c:	e0bffe17 	ldw	r2,-8(fp)
   1d040:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
   1d044:	008000f4 	movhi	r2,3
   1d048:	109a0c04 	addi	r2,r2,26672
   1d04c:	d0a85215 	stw	r2,-24248(gp)
#endif
}
   1d050:	0001883a 	nop
   1d054:	e037883a 	mov	sp,fp
   1d058:	dfc00117 	ldw	ra,4(sp)
   1d05c:	df000017 	ldw	fp,0(sp)
   1d060:	dec00204 	addi	sp,sp,8
   1d064:	f800283a 	ret

0001d068 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
   1d068:	defffa04 	addi	sp,sp,-24
   1d06c:	df000515 	stw	fp,20(sp)
   1d070:	df000504 	addi	fp,sp,20
   1d074:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1d078:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1d07c:	e0bfff17 	ldw	r2,-4(fp)
   1d080:	1000021e 	bne	r2,zero,1d08c <OSSemAccept+0x24>
        return (0);
   1d084:	0005883a 	mov	r2,zero
   1d088:	00001f06 	br	1d108 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1d08c:	e0bfff17 	ldw	r2,-4(fp)
   1d090:	10800003 	ldbu	r2,0(r2)
   1d094:	10803fcc 	andi	r2,r2,255
   1d098:	108000e0 	cmpeqi	r2,r2,3
   1d09c:	1000021e 	bne	r2,zero,1d0a8 <OSSemAccept+0x40>
        return (0);
   1d0a0:	0005883a 	mov	r2,zero
   1d0a4:	00001806 	br	1d108 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d0a8:	0005303a 	rdctl	r2,status
   1d0ac:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d0b0:	e0fffe17 	ldw	r3,-8(fp)
   1d0b4:	00bfff84 	movi	r2,-2
   1d0b8:	1884703a 	and	r2,r3,r2
   1d0bc:	1001703a 	wrctl	status,r2
  
  return context;
   1d0c0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1d0c4:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
   1d0c8:	e0bfff17 	ldw	r2,-4(fp)
   1d0cc:	1080020b 	ldhu	r2,8(r2)
   1d0d0:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
   1d0d4:	e0bffd0b 	ldhu	r2,-12(fp)
   1d0d8:	10000626 	beq	r2,zero,1d0f4 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
   1d0dc:	e0bfff17 	ldw	r2,-4(fp)
   1d0e0:	1080020b 	ldhu	r2,8(r2)
   1d0e4:	10bfffc4 	addi	r2,r2,-1
   1d0e8:	1007883a 	mov	r3,r2
   1d0ec:	e0bfff17 	ldw	r2,-4(fp)
   1d0f0:	10c0020d 	sth	r3,8(r2)
   1d0f4:	e0bffb17 	ldw	r2,-20(fp)
   1d0f8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d0fc:	e0bffc17 	ldw	r2,-16(fp)
   1d100:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
   1d104:	e0bffd0b 	ldhu	r2,-12(fp)
}
   1d108:	e037883a 	mov	sp,fp
   1d10c:	df000017 	ldw	fp,0(sp)
   1d110:	dec00104 	addi	sp,sp,4
   1d114:	f800283a 	ret

0001d118 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
   1d118:	defff904 	addi	sp,sp,-28
   1d11c:	dfc00615 	stw	ra,24(sp)
   1d120:	df000515 	stw	fp,20(sp)
   1d124:	df000504 	addi	fp,sp,20
   1d128:	2005883a 	mov	r2,r4
   1d12c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1d130:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1d134:	d0a85503 	ldbu	r2,-24236(gp)
   1d138:	10803fcc 	andi	r2,r2,255
   1d13c:	10000226 	beq	r2,zero,1d148 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
   1d140:	0005883a 	mov	r2,zero
   1d144:	00002506 	br	1d1dc <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d148:	0005303a 	rdctl	r2,status
   1d14c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d150:	e0fffe17 	ldw	r3,-8(fp)
   1d154:	00bfff84 	movi	r2,-2
   1d158:	1884703a 	and	r2,r3,r2
   1d15c:	1001703a 	wrctl	status,r2
  
  return context;
   1d160:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1d164:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
   1d168:	d0a85417 	ldw	r2,-24240(gp)
   1d16c:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
   1d170:	d0a85417 	ldw	r2,-24240(gp)
   1d174:	10000326 	beq	r2,zero,1d184 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   1d178:	d0a85417 	ldw	r2,-24240(gp)
   1d17c:	10800117 	ldw	r2,4(r2)
   1d180:	d0a85415 	stw	r2,-24240(gp)
   1d184:	e0bffb17 	ldw	r2,-20(fp)
   1d188:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d18c:	e0bffc17 	ldw	r2,-16(fp)
   1d190:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
   1d194:	e0bffd17 	ldw	r2,-12(fp)
   1d198:	10000f26 	beq	r2,zero,1d1d8 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
   1d19c:	e0bffd17 	ldw	r2,-12(fp)
   1d1a0:	00c000c4 	movi	r3,3
   1d1a4:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
   1d1a8:	e0bffd17 	ldw	r2,-12(fp)
   1d1ac:	e0ffff0b 	ldhu	r3,-4(fp)
   1d1b0:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
   1d1b4:	e0bffd17 	ldw	r2,-12(fp)
   1d1b8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
   1d1bc:	e0bffd17 	ldw	r2,-12(fp)
   1d1c0:	00c00fc4 	movi	r3,63
   1d1c4:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
   1d1c8:	e0bffd17 	ldw	r2,-12(fp)
   1d1cc:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
   1d1d0:	e13ffd17 	ldw	r4,-12(fp)
   1d1d4:	00193ec0 	call	193ec <OS_EventWaitListInit>
    }
    return (pevent);
   1d1d8:	e0bffd17 	ldw	r2,-12(fp)
}
   1d1dc:	e037883a 	mov	sp,fp
   1d1e0:	dfc00117 	ldw	ra,4(sp)
   1d1e4:	df000017 	ldw	fp,0(sp)
   1d1e8:	dec00204 	addi	sp,sp,8
   1d1ec:	f800283a 	ret

0001d1f0 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1d1f0:	defff304 	addi	sp,sp,-52
   1d1f4:	dfc00c15 	stw	ra,48(sp)
   1d1f8:	df000b15 	stw	fp,44(sp)
   1d1fc:	df000b04 	addi	fp,sp,44
   1d200:	e13ffd15 	stw	r4,-12(fp)
   1d204:	2805883a 	mov	r2,r5
   1d208:	e1bfff15 	stw	r6,-4(fp)
   1d20c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1d210:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
   1d214:	e0bfff17 	ldw	r2,-4(fp)
   1d218:	1000021e 	bne	r2,zero,1d224 <OSSemDel+0x34>
        return (pevent);
   1d21c:	e0bffd17 	ldw	r2,-12(fp)
   1d220:	00007e06 	br	1d41c <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1d224:	e0bffd17 	ldw	r2,-12(fp)
   1d228:	1000051e 	bne	r2,zero,1d240 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1d22c:	e0bfff17 	ldw	r2,-4(fp)
   1d230:	00c00104 	movi	r3,4
   1d234:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1d238:	e0bffd17 	ldw	r2,-12(fp)
   1d23c:	00007706 	br	1d41c <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   1d240:	e0bffd17 	ldw	r2,-12(fp)
   1d244:	10800003 	ldbu	r2,0(r2)
   1d248:	10803fcc 	andi	r2,r2,255
   1d24c:	108000e0 	cmpeqi	r2,r2,3
   1d250:	1000051e 	bne	r2,zero,1d268 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1d254:	e0bfff17 	ldw	r2,-4(fp)
   1d258:	00c00044 	movi	r3,1
   1d25c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1d260:	e0bffd17 	ldw	r2,-12(fp)
   1d264:	00006d06 	br	1d41c <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
   1d268:	d0a85503 	ldbu	r2,-24236(gp)
   1d26c:	10803fcc 	andi	r2,r2,255
   1d270:	10000526 	beq	r2,zero,1d288 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
   1d274:	e0bfff17 	ldw	r2,-4(fp)
   1d278:	00c003c4 	movi	r3,15
   1d27c:	10c00005 	stb	r3,0(r2)
        return (pevent);
   1d280:	e0bffd17 	ldw	r2,-12(fp)
   1d284:	00006506 	br	1d41c <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d288:	0005303a 	rdctl	r2,status
   1d28c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d290:	e0fffc17 	ldw	r3,-16(fp)
   1d294:	00bfff84 	movi	r2,-2
   1d298:	1884703a 	and	r2,r3,r2
   1d29c:	1001703a 	wrctl	status,r2
  
  return context;
   1d2a0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1d2a4:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
   1d2a8:	e0bffd17 	ldw	r2,-12(fp)
   1d2ac:	10800283 	ldbu	r2,10(r2)
   1d2b0:	10803fcc 	andi	r2,r2,255
   1d2b4:	10000326 	beq	r2,zero,1d2c4 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
   1d2b8:	00800044 	movi	r2,1
   1d2bc:	e0bff505 	stb	r2,-44(fp)
   1d2c0:	00000106 	br	1d2c8 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
   1d2c4:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
   1d2c8:	e0bffe03 	ldbu	r2,-8(fp)
   1d2cc:	10000326 	beq	r2,zero,1d2dc <OSSemDel+0xec>
   1d2d0:	10800060 	cmpeqi	r2,r2,1
   1d2d4:	1000281e 	bne	r2,zero,1d378 <OSSemDel+0x188>
   1d2d8:	00004506 	br	1d3f0 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
   1d2dc:	e0bff503 	ldbu	r2,-44(fp)
   1d2e0:	1000161e 	bne	r2,zero,1d33c <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
   1d2e4:	e0bffd17 	ldw	r2,-12(fp)
   1d2e8:	00c00fc4 	movi	r3,63
   1d2ec:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
   1d2f0:	e0bffd17 	ldw	r2,-12(fp)
   1d2f4:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1d2f8:	e0bffd17 	ldw	r2,-12(fp)
   1d2fc:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   1d300:	d0e85417 	ldw	r3,-24240(gp)
   1d304:	e0bffd17 	ldw	r2,-12(fp)
   1d308:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
   1d30c:	e0bffd17 	ldw	r2,-12(fp)
   1d310:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
   1d314:	e0bffd17 	ldw	r2,-12(fp)
   1d318:	d0a85415 	stw	r2,-24240(gp)
   1d31c:	e0bff717 	ldw	r2,-36(fp)
   1d320:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d324:	e0bff817 	ldw	r2,-32(fp)
   1d328:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
   1d32c:	e0bfff17 	ldw	r2,-4(fp)
   1d330:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
   1d334:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
   1d338:	00003706 	br	1d418 <OSSemDel+0x228>
   1d33c:	e0bff717 	ldw	r2,-36(fp)
   1d340:	e0bff915 	stw	r2,-28(fp)
   1d344:	e0bff917 	ldw	r2,-28(fp)
   1d348:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
   1d34c:	e0bfff17 	ldw	r2,-4(fp)
   1d350:	00c01244 	movi	r3,73
   1d354:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
   1d358:	e0bffd17 	ldw	r2,-12(fp)
   1d35c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
   1d360:	00002d06 	br	1d418 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   1d364:	000f883a 	mov	r7,zero
   1d368:	01800044 	movi	r6,1
   1d36c:	000b883a 	mov	r5,zero
   1d370:	e13ffd17 	ldw	r4,-12(fp)
   1d374:	0018e3c0 	call	18e3c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
   1d378:	e0bffd17 	ldw	r2,-12(fp)
   1d37c:	10800283 	ldbu	r2,10(r2)
   1d380:	10803fcc 	andi	r2,r2,255
   1d384:	103ff71e 	bne	r2,zero,1d364 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701d364>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
   1d388:	e0bffd17 	ldw	r2,-12(fp)
   1d38c:	00c00fc4 	movi	r3,63
   1d390:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
   1d394:	e0bffd17 	ldw	r2,-12(fp)
   1d398:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   1d39c:	e0bffd17 	ldw	r2,-12(fp)
   1d3a0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   1d3a4:	d0e85417 	ldw	r3,-24240(gp)
   1d3a8:	e0bffd17 	ldw	r2,-12(fp)
   1d3ac:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
   1d3b0:	e0bffd17 	ldw	r2,-12(fp)
   1d3b4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
   1d3b8:	e0bffd17 	ldw	r2,-12(fp)
   1d3bc:	d0a85415 	stw	r2,-24240(gp)
   1d3c0:	e0bff717 	ldw	r2,-36(fp)
   1d3c4:	e0bffa15 	stw	r2,-24(fp)
   1d3c8:	e0bffa17 	ldw	r2,-24(fp)
   1d3cc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   1d3d0:	e0bff503 	ldbu	r2,-44(fp)
   1d3d4:	10800058 	cmpnei	r2,r2,1
   1d3d8:	1000011e 	bne	r2,zero,1d3e0 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
   1d3dc:	00198880 	call	19888 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
   1d3e0:	e0bfff17 	ldw	r2,-4(fp)
   1d3e4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
   1d3e8:	e03ff615 	stw	zero,-40(fp)
             break;
   1d3ec:	00000a06 	br	1d418 <OSSemDel+0x228>
   1d3f0:	e0bff717 	ldw	r2,-36(fp)
   1d3f4:	e0bffb15 	stw	r2,-20(fp)
   1d3f8:	e0bffb17 	ldw	r2,-20(fp)
   1d3fc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
   1d400:	e0bfff17 	ldw	r2,-4(fp)
   1d404:	00c001c4 	movi	r3,7
   1d408:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
   1d40c:	e0bffd17 	ldw	r2,-12(fp)
   1d410:	e0bff615 	stw	r2,-40(fp)
             break;
   1d414:	0001883a 	nop
    }
    return (pevent_return);
   1d418:	e0bff617 	ldw	r2,-40(fp)
}
   1d41c:	e037883a 	mov	sp,fp
   1d420:	dfc00117 	ldw	ra,4(sp)
   1d424:	df000017 	ldw	fp,0(sp)
   1d428:	dec00204 	addi	sp,sp,8
   1d42c:	f800283a 	ret

0001d430 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
   1d430:	defff504 	addi	sp,sp,-44
   1d434:	dfc00a15 	stw	ra,40(sp)
   1d438:	df000915 	stw	fp,36(sp)
   1d43c:	df000904 	addi	fp,sp,36
   1d440:	e13ffd15 	stw	r4,-12(fp)
   1d444:	2805883a 	mov	r2,r5
   1d448:	e1bfff15 	stw	r6,-4(fp)
   1d44c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1d450:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1d454:	e0bfff17 	ldw	r2,-4(fp)
   1d458:	10007226 	beq	r2,zero,1d624 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1d45c:	e0bffd17 	ldw	r2,-12(fp)
   1d460:	1000041e 	bne	r2,zero,1d474 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
   1d464:	e0bfff17 	ldw	r2,-4(fp)
   1d468:	00c00104 	movi	r3,4
   1d46c:	10c00005 	stb	r3,0(r2)
        return;
   1d470:	00006d06 	br	1d628 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1d474:	e0bffd17 	ldw	r2,-12(fp)
   1d478:	10800003 	ldbu	r2,0(r2)
   1d47c:	10803fcc 	andi	r2,r2,255
   1d480:	108000e0 	cmpeqi	r2,r2,3
   1d484:	1000041e 	bne	r2,zero,1d498 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
   1d488:	e0bfff17 	ldw	r2,-4(fp)
   1d48c:	00c00044 	movi	r3,1
   1d490:	10c00005 	stb	r3,0(r2)
        return;
   1d494:	00006406 	br	1d628 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
   1d498:	d0a85503 	ldbu	r2,-24236(gp)
   1d49c:	10803fcc 	andi	r2,r2,255
   1d4a0:	10000426 	beq	r2,zero,1d4b4 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   1d4a4:	e0bfff17 	ldw	r2,-4(fp)
   1d4a8:	00c00084 	movi	r3,2
   1d4ac:	10c00005 	stb	r3,0(r2)
        return;
   1d4b0:	00005d06 	br	1d628 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
   1d4b4:	d0a84703 	ldbu	r2,-24292(gp)
   1d4b8:	10803fcc 	andi	r2,r2,255
   1d4bc:	10000426 	beq	r2,zero,1d4d0 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   1d4c0:	e0bfff17 	ldw	r2,-4(fp)
   1d4c4:	00c00344 	movi	r3,13
   1d4c8:	10c00005 	stb	r3,0(r2)
        return;
   1d4cc:	00005606 	br	1d628 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d4d0:	0005303a 	rdctl	r2,status
   1d4d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d4d8:	e0fffc17 	ldw	r3,-16(fp)
   1d4dc:	00bfff84 	movi	r2,-2
   1d4e0:	1884703a 	and	r2,r3,r2
   1d4e4:	1001703a 	wrctl	status,r2
  
  return context;
   1d4e8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1d4ec:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
   1d4f0:	e0bffd17 	ldw	r2,-12(fp)
   1d4f4:	1080020b 	ldhu	r2,8(r2)
   1d4f8:	10bfffcc 	andi	r2,r2,65535
   1d4fc:	10000d26 	beq	r2,zero,1d534 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
   1d500:	e0bffd17 	ldw	r2,-12(fp)
   1d504:	1080020b 	ldhu	r2,8(r2)
   1d508:	10bfffc4 	addi	r2,r2,-1
   1d50c:	1007883a 	mov	r3,r2
   1d510:	e0bffd17 	ldw	r2,-12(fp)
   1d514:	10c0020d 	sth	r3,8(r2)
   1d518:	e0bff717 	ldw	r2,-36(fp)
   1d51c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d520:	e0bff817 	ldw	r2,-32(fp)
   1d524:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
   1d528:	e0bfff17 	ldw	r2,-4(fp)
   1d52c:	10000005 	stb	zero,0(r2)
        return;
   1d530:	00003d06 	br	1d628 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
   1d534:	d0a85617 	ldw	r2,-24232(gp)
   1d538:	d0e85617 	ldw	r3,-24232(gp)
   1d53c:	18c00c03 	ldbu	r3,48(r3)
   1d540:	18c00054 	ori	r3,r3,1
   1d544:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   1d548:	d0a85617 	ldw	r2,-24232(gp)
   1d54c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
   1d550:	d0a85617 	ldw	r2,-24232(gp)
   1d554:	e0fffe0b 	ldhu	r3,-8(fp)
   1d558:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   1d55c:	e13ffd17 	ldw	r4,-12(fp)
   1d560:	0018fd40 	call	18fd4 <OS_EventTaskWait>
   1d564:	e0bff717 	ldw	r2,-36(fp)
   1d568:	e0bffb15 	stw	r2,-20(fp)
   1d56c:	e0bffb17 	ldw	r2,-20(fp)
   1d570:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
   1d574:	00198880 	call	19888 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d578:	0005303a 	rdctl	r2,status
   1d57c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d580:	e0fff917 	ldw	r3,-28(fp)
   1d584:	00bfff84 	movi	r2,-2
   1d588:	1884703a 	and	r2,r3,r2
   1d58c:	1001703a 	wrctl	status,r2
  
  return context;
   1d590:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
   1d594:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   1d598:	d0a85617 	ldw	r2,-24232(gp)
   1d59c:	10800c43 	ldbu	r2,49(r2)
   1d5a0:	10803fcc 	andi	r2,r2,255
   1d5a4:	10000326 	beq	r2,zero,1d5b4 <OSSemPend+0x184>
   1d5a8:	108000a0 	cmpeqi	r2,r2,2
   1d5ac:	1000041e 	bne	r2,zero,1d5c0 <OSSemPend+0x190>
   1d5b0:	00000706 	br	1d5d0 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
   1d5b4:	e0bfff17 	ldw	r2,-4(fp)
   1d5b8:	10000005 	stb	zero,0(r2)
             break;
   1d5bc:	00000c06 	br	1d5f0 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   1d5c0:	e0bfff17 	ldw	r2,-4(fp)
   1d5c4:	00c00384 	movi	r3,14
   1d5c8:	10c00005 	stb	r3,0(r2)
             break;
   1d5cc:	00000806 	br	1d5f0 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
   1d5d0:	d0a85617 	ldw	r2,-24232(gp)
   1d5d4:	e17ffd17 	ldw	r5,-12(fp)
   1d5d8:	1009883a 	mov	r4,r2
   1d5dc:	00192340 	call	19234 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   1d5e0:	e0bfff17 	ldw	r2,-4(fp)
   1d5e4:	00c00284 	movi	r3,10
   1d5e8:	10c00005 	stb	r3,0(r2)
             break;
   1d5ec:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   1d5f0:	d0a85617 	ldw	r2,-24232(gp)
   1d5f4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   1d5f8:	d0a85617 	ldw	r2,-24232(gp)
   1d5fc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   1d600:	d0a85617 	ldw	r2,-24232(gp)
   1d604:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   1d608:	d0a85617 	ldw	r2,-24232(gp)
   1d60c:	10000815 	stw	zero,32(r2)
   1d610:	e0bff717 	ldw	r2,-36(fp)
   1d614:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d618:	e0bffa17 	ldw	r2,-24(fp)
   1d61c:	1001703a 	wrctl	status,r2
   1d620:	00000106 	br	1d628 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   1d624:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
   1d628:	e037883a 	mov	sp,fp
   1d62c:	dfc00117 	ldw	ra,4(sp)
   1d630:	df000017 	ldw	fp,0(sp)
   1d634:	dec00204 	addi	sp,sp,8
   1d638:	f800283a 	ret

0001d63c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
   1d63c:	defff604 	addi	sp,sp,-40
   1d640:	dfc00915 	stw	ra,36(sp)
   1d644:	df000815 	stw	fp,32(sp)
   1d648:	df000804 	addi	fp,sp,32
   1d64c:	e13ffd15 	stw	r4,-12(fp)
   1d650:	2805883a 	mov	r2,r5
   1d654:	e1bfff15 	stw	r6,-4(fp)
   1d658:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1d65c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1d660:	e0bfff17 	ldw	r2,-4(fp)
   1d664:	1000021e 	bne	r2,zero,1d670 <OSSemPendAbort+0x34>
        return (0);
   1d668:	0005883a 	mov	r2,zero
   1d66c:	00004906 	br	1d794 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1d670:	e0bffd17 	ldw	r2,-12(fp)
   1d674:	1000051e 	bne	r2,zero,1d68c <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
   1d678:	e0bfff17 	ldw	r2,-4(fp)
   1d67c:	00c00104 	movi	r3,4
   1d680:	10c00005 	stb	r3,0(r2)
        return (0);
   1d684:	0005883a 	mov	r2,zero
   1d688:	00004206 	br	1d794 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1d68c:	e0bffd17 	ldw	r2,-12(fp)
   1d690:	10800003 	ldbu	r2,0(r2)
   1d694:	10803fcc 	andi	r2,r2,255
   1d698:	108000e0 	cmpeqi	r2,r2,3
   1d69c:	1000051e 	bne	r2,zero,1d6b4 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
   1d6a0:	e0bfff17 	ldw	r2,-4(fp)
   1d6a4:	00c00044 	movi	r3,1
   1d6a8:	10c00005 	stb	r3,0(r2)
        return (0);
   1d6ac:	0005883a 	mov	r2,zero
   1d6b0:	00003806 	br	1d794 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d6b4:	0005303a 	rdctl	r2,status
   1d6b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d6bc:	e0fffc17 	ldw	r3,-16(fp)
   1d6c0:	00bfff84 	movi	r2,-2
   1d6c4:	1884703a 	and	r2,r3,r2
   1d6c8:	1001703a 	wrctl	status,r2
  
  return context;
   1d6cc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1d6d0:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
   1d6d4:	e0bffd17 	ldw	r2,-12(fp)
   1d6d8:	10800283 	ldbu	r2,10(r2)
   1d6dc:	10803fcc 	andi	r2,r2,255
   1d6e0:	10002526 	beq	r2,zero,1d778 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
   1d6e4:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
   1d6e8:	e0bffe03 	ldbu	r2,-8(fp)
   1d6ec:	10800060 	cmpeqi	r2,r2,1
   1d6f0:	10000e26 	beq	r2,zero,1d72c <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1d6f4:	00000806 	br	1d718 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1d6f8:	01c00084 	movi	r7,2
   1d6fc:	01800044 	movi	r6,1
   1d700:	000b883a 	mov	r5,zero
   1d704:	e13ffd17 	ldw	r4,-12(fp)
   1d708:	0018e3c0 	call	18e3c <OS_EventTaskRdy>
                     nbr_tasks++;
   1d70c:	e0bff803 	ldbu	r2,-32(fp)
   1d710:	10800044 	addi	r2,r2,1
   1d714:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
   1d718:	e0bffd17 	ldw	r2,-12(fp)
   1d71c:	10800283 	ldbu	r2,10(r2)
   1d720:	10803fcc 	andi	r2,r2,255
   1d724:	103ff41e 	bne	r2,zero,1d6f8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701d6f8>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
   1d728:	00000906 	br	1d750 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
   1d72c:	01c00084 	movi	r7,2
   1d730:	01800044 	movi	r6,1
   1d734:	000b883a 	mov	r5,zero
   1d738:	e13ffd17 	ldw	r4,-12(fp)
   1d73c:	0018e3c0 	call	18e3c <OS_EventTaskRdy>
                 nbr_tasks++;
   1d740:	e0bff803 	ldbu	r2,-32(fp)
   1d744:	10800044 	addi	r2,r2,1
   1d748:	e0bff805 	stb	r2,-32(fp)
                 break;
   1d74c:	0001883a 	nop
   1d750:	e0bff917 	ldw	r2,-28(fp)
   1d754:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d758:	e0bffa17 	ldw	r2,-24(fp)
   1d75c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   1d760:	00198880 	call	19888 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
   1d764:	e0bfff17 	ldw	r2,-4(fp)
   1d768:	00c00384 	movi	r3,14
   1d76c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
   1d770:	e0bff803 	ldbu	r2,-32(fp)
   1d774:	00000706 	br	1d794 <OSSemPendAbort+0x158>
   1d778:	e0bff917 	ldw	r2,-28(fp)
   1d77c:	e0bffb15 	stw	r2,-20(fp)
   1d780:	e0bffb17 	ldw	r2,-20(fp)
   1d784:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1d788:	e0bfff17 	ldw	r2,-4(fp)
   1d78c:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
   1d790:	0005883a 	mov	r2,zero
}
   1d794:	e037883a 	mov	sp,fp
   1d798:	dfc00117 	ldw	ra,4(sp)
   1d79c:	df000017 	ldw	fp,0(sp)
   1d7a0:	dec00204 	addi	sp,sp,8
   1d7a4:	f800283a 	ret

0001d7a8 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
   1d7a8:	defff804 	addi	sp,sp,-32
   1d7ac:	dfc00715 	stw	ra,28(sp)
   1d7b0:	df000615 	stw	fp,24(sp)
   1d7b4:	df000604 	addi	fp,sp,24
   1d7b8:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1d7bc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1d7c0:	e0bfff17 	ldw	r2,-4(fp)
   1d7c4:	1000021e 	bne	r2,zero,1d7d0 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
   1d7c8:	00800104 	movi	r2,4
   1d7cc:	00003506 	br	1d8a4 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1d7d0:	e0bfff17 	ldw	r2,-4(fp)
   1d7d4:	10800003 	ldbu	r2,0(r2)
   1d7d8:	10803fcc 	andi	r2,r2,255
   1d7dc:	108000e0 	cmpeqi	r2,r2,3
   1d7e0:	1000021e 	bne	r2,zero,1d7ec <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
   1d7e4:	00800044 	movi	r2,1
   1d7e8:	00002e06 	br	1d8a4 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d7ec:	0005303a 	rdctl	r2,status
   1d7f0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d7f4:	e0fffe17 	ldw	r3,-8(fp)
   1d7f8:	00bfff84 	movi	r2,-2
   1d7fc:	1884703a 	and	r2,r3,r2
   1d800:	1001703a 	wrctl	status,r2
  
  return context;
   1d804:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1d808:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
   1d80c:	e0bfff17 	ldw	r2,-4(fp)
   1d810:	10800283 	ldbu	r2,10(r2)
   1d814:	10803fcc 	andi	r2,r2,255
   1d818:	10000c26 	beq	r2,zero,1d84c <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
   1d81c:	000f883a 	mov	r7,zero
   1d820:	01800044 	movi	r6,1
   1d824:	000b883a 	mov	r5,zero
   1d828:	e13fff17 	ldw	r4,-4(fp)
   1d82c:	0018e3c0 	call	18e3c <OS_EventTaskRdy>
   1d830:	e0bffa17 	ldw	r2,-24(fp)
   1d834:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d838:	e0bffb17 	ldw	r2,-20(fp)
   1d83c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
   1d840:	00198880 	call	19888 <OS_Sched>
        return (OS_ERR_NONE);
   1d844:	0005883a 	mov	r2,zero
   1d848:	00001606 	br	1d8a4 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
   1d84c:	e0bfff17 	ldw	r2,-4(fp)
   1d850:	1080020b 	ldhu	r2,8(r2)
   1d854:	10ffffcc 	andi	r3,r2,65535
   1d858:	00bfffd4 	movui	r2,65535
   1d85c:	18800c26 	beq	r3,r2,1d890 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
   1d860:	e0bfff17 	ldw	r2,-4(fp)
   1d864:	1080020b 	ldhu	r2,8(r2)
   1d868:	10800044 	addi	r2,r2,1
   1d86c:	1007883a 	mov	r3,r2
   1d870:	e0bfff17 	ldw	r2,-4(fp)
   1d874:	10c0020d 	sth	r3,8(r2)
   1d878:	e0bffa17 	ldw	r2,-24(fp)
   1d87c:	e0bffc15 	stw	r2,-16(fp)
   1d880:	e0bffc17 	ldw	r2,-16(fp)
   1d884:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
   1d888:	0005883a 	mov	r2,zero
   1d88c:	00000506 	br	1d8a4 <OSSemPost+0xfc>
   1d890:	e0bffa17 	ldw	r2,-24(fp)
   1d894:	e0bffd15 	stw	r2,-12(fp)
   1d898:	e0bffd17 	ldw	r2,-12(fp)
   1d89c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
   1d8a0:	00800c84 	movi	r2,50
}
   1d8a4:	e037883a 	mov	sp,fp
   1d8a8:	dfc00117 	ldw	ra,4(sp)
   1d8ac:	df000017 	ldw	fp,0(sp)
   1d8b0:	dec00204 	addi	sp,sp,8
   1d8b4:	f800283a 	ret

0001d8b8 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
   1d8b8:	defff704 	addi	sp,sp,-36
   1d8bc:	df000815 	stw	fp,32(sp)
   1d8c0:	df000804 	addi	fp,sp,32
   1d8c4:	e13ffe15 	stw	r4,-8(fp)
   1d8c8:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
   1d8cc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
   1d8d0:	e0bffe17 	ldw	r2,-8(fp)
   1d8d4:	1000021e 	bne	r2,zero,1d8e0 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
   1d8d8:	00800104 	movi	r2,4
   1d8dc:	00003606 	br	1d9b8 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
   1d8e0:	e0bfff17 	ldw	r2,-4(fp)
   1d8e4:	1000021e 	bne	r2,zero,1d8f0 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
   1d8e8:	00800244 	movi	r2,9
   1d8ec:	00003206 	br	1d9b8 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
   1d8f0:	e0bffe17 	ldw	r2,-8(fp)
   1d8f4:	10800003 	ldbu	r2,0(r2)
   1d8f8:	10803fcc 	andi	r2,r2,255
   1d8fc:	108000e0 	cmpeqi	r2,r2,3
   1d900:	1000021e 	bne	r2,zero,1d90c <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
   1d904:	00800044 	movi	r2,1
   1d908:	00002b06 	br	1d9b8 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1d90c:	0005303a 	rdctl	r2,status
   1d910:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1d914:	e0fffd17 	ldw	r3,-12(fp)
   1d918:	00bfff84 	movi	r2,-2
   1d91c:	1884703a 	and	r2,r3,r2
   1d920:	1001703a 	wrctl	status,r2
  
  return context;
   1d924:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
   1d928:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
   1d92c:	e0bffe17 	ldw	r2,-8(fp)
   1d930:	10c00283 	ldbu	r3,10(r2)
   1d934:	e0bfff17 	ldw	r2,-4(fp)
   1d938:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
   1d93c:	e0bffe17 	ldw	r2,-8(fp)
   1d940:	108002c4 	addi	r2,r2,11
   1d944:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
   1d948:	e0bfff17 	ldw	r2,-4(fp)
   1d94c:	10800084 	addi	r2,r2,2
   1d950:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1d954:	e03ffa05 	stb	zero,-24(fp)
   1d958:	00000b06 	br	1d988 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
   1d95c:	e0bff917 	ldw	r2,-28(fp)
   1d960:	10c00044 	addi	r3,r2,1
   1d964:	e0fff915 	stw	r3,-28(fp)
   1d968:	e0fff817 	ldw	r3,-32(fp)
   1d96c:	19000044 	addi	r4,r3,1
   1d970:	e13ff815 	stw	r4,-32(fp)
   1d974:	18c00003 	ldbu	r3,0(r3)
   1d978:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
   1d97c:	e0bffa03 	ldbu	r2,-24(fp)
   1d980:	10800044 	addi	r2,r2,1
   1d984:	e0bffa05 	stb	r2,-24(fp)
   1d988:	e0bffa03 	ldbu	r2,-24(fp)
   1d98c:	108000f0 	cmpltui	r2,r2,3
   1d990:	103ff21e 	bne	r2,zero,1d95c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701d95c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
   1d994:	e0bffe17 	ldw	r2,-8(fp)
   1d998:	10c0020b 	ldhu	r3,8(r2)
   1d99c:	e0bfff17 	ldw	r2,-4(fp)
   1d9a0:	10c0000d 	sth	r3,0(r2)
   1d9a4:	e0bffb17 	ldw	r2,-20(fp)
   1d9a8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1d9ac:	e0bffc17 	ldw	r2,-16(fp)
   1d9b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1d9b4:	0005883a 	mov	r2,zero
}
   1d9b8:	e037883a 	mov	sp,fp
   1d9bc:	df000017 	ldw	fp,0(sp)
   1d9c0:	dec00104 	addi	sp,sp,4
   1d9c4:	f800283a 	ret

0001d9c8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
   1d9c8:	defff904 	addi	sp,sp,-28
   1d9cc:	df000615 	stw	fp,24(sp)
   1d9d0:	df000604 	addi	fp,sp,24
   1d9d4:	e13ffd15 	stw	r4,-12(fp)
   1d9d8:	2805883a 	mov	r2,r5
   1d9dc:	e1bfff15 	stw	r6,-4(fp)
   1d9e0:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1d9e4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
   1d9e8:	e0bfff17 	ldw	r2,-4(fp)
   1d9ec:	10003126 	beq	r2,zero,1dab4 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
   1d9f0:	e0bffd17 	ldw	r2,-12(fp)
   1d9f4:	1000041e 	bne	r2,zero,1da08 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
   1d9f8:	e0bfff17 	ldw	r2,-4(fp)
   1d9fc:	00c00104 	movi	r3,4
   1da00:	10c00005 	stb	r3,0(r2)
        return;
   1da04:	00002c06 	br	1dab8 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
   1da08:	e0bffd17 	ldw	r2,-12(fp)
   1da0c:	10800003 	ldbu	r2,0(r2)
   1da10:	10803fcc 	andi	r2,r2,255
   1da14:	108000e0 	cmpeqi	r2,r2,3
   1da18:	1000041e 	bne	r2,zero,1da2c <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
   1da1c:	e0bfff17 	ldw	r2,-4(fp)
   1da20:	00c00044 	movi	r3,1
   1da24:	10c00005 	stb	r3,0(r2)
        return;
   1da28:	00002306 	br	1dab8 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1da2c:	0005303a 	rdctl	r2,status
   1da30:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1da34:	e0fffc17 	ldw	r3,-16(fp)
   1da38:	00bfff84 	movi	r2,-2
   1da3c:	1884703a 	and	r2,r3,r2
   1da40:	1001703a 	wrctl	status,r2
  
  return context;
   1da44:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1da48:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
   1da4c:	e0bfff17 	ldw	r2,-4(fp)
   1da50:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
   1da54:	e0bffd17 	ldw	r2,-12(fp)
   1da58:	1080020b 	ldhu	r2,8(r2)
   1da5c:	10bfffcc 	andi	r2,r2,65535
   1da60:	10000426 	beq	r2,zero,1da74 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
   1da64:	e0bffd17 	ldw	r2,-12(fp)
   1da68:	e0fffe0b 	ldhu	r3,-8(fp)
   1da6c:	10c0020d 	sth	r3,8(r2)
   1da70:	00000b06 	br	1daa0 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
   1da74:	e0bffd17 	ldw	r2,-12(fp)
   1da78:	10800283 	ldbu	r2,10(r2)
   1da7c:	10803fcc 	andi	r2,r2,255
   1da80:	1000041e 	bne	r2,zero,1da94 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
   1da84:	e0bffd17 	ldw	r2,-12(fp)
   1da88:	e0fffe0b 	ldhu	r3,-8(fp)
   1da8c:	10c0020d 	sth	r3,8(r2)
   1da90:	00000306 	br	1daa0 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
   1da94:	e0bfff17 	ldw	r2,-4(fp)
   1da98:	00c01244 	movi	r3,73
   1da9c:	10c00005 	stb	r3,0(r2)
   1daa0:	e0bffa17 	ldw	r2,-24(fp)
   1daa4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1daa8:	e0bffb17 	ldw	r2,-20(fp)
   1daac:	1001703a 	wrctl	status,r2
   1dab0:	00000106 	br	1dab8 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
   1dab4:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
   1dab8:	e037883a 	mov	sp,fp
   1dabc:	df000017 	ldw	fp,0(sp)
   1dac0:	dec00104 	addi	sp,sp,4
   1dac4:	f800283a 	ret

0001dac8 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
   1dac8:	defff104 	addi	sp,sp,-60
   1dacc:	dfc00e15 	stw	ra,56(sp)
   1dad0:	df000d15 	stw	fp,52(sp)
   1dad4:	df000d04 	addi	fp,sp,52
   1dad8:	2007883a 	mov	r3,r4
   1dadc:	2805883a 	mov	r2,r5
   1dae0:	e0fffe05 	stb	r3,-8(fp)
   1dae4:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
   1dae8:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
   1daec:	e0bffe03 	ldbu	r2,-8(fp)
   1daf0:	10800530 	cmpltui	r2,r2,20
   1daf4:	1000051e 	bne	r2,zero,1db0c <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
   1daf8:	e0bffe03 	ldbu	r2,-8(fp)
   1dafc:	10803fe0 	cmpeqi	r2,r2,255
   1db00:	1000021e 	bne	r2,zero,1db0c <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
   1db04:	00800a84 	movi	r2,42
   1db08:	00012606 	br	1dfa4 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
   1db0c:	e0bfff03 	ldbu	r2,-4(fp)
   1db10:	10800530 	cmpltui	r2,r2,20
   1db14:	1000021e 	bne	r2,zero,1db20 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
   1db18:	00800a84 	movi	r2,42
   1db1c:	00012106 	br	1dfa4 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1db20:	0005303a 	rdctl	r2,status
   1db24:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1db28:	e0fffd17 	ldw	r3,-12(fp)
   1db2c:	00bfff84 	movi	r2,-2
   1db30:	1884703a 	and	r2,r3,r2
   1db34:	1001703a 	wrctl	status,r2
  
  return context;
   1db38:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1db3c:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
   1db40:	e0ffff03 	ldbu	r3,-4(fp)
   1db44:	00800134 	movhi	r2,4
   1db48:	10a09804 	addi	r2,r2,-32160
   1db4c:	18c7883a 	add	r3,r3,r3
   1db50:	18c7883a 	add	r3,r3,r3
   1db54:	10c5883a 	add	r2,r2,r3
   1db58:	10800017 	ldw	r2,0(r2)
   1db5c:	10000626 	beq	r2,zero,1db78 <OSTaskChangePrio+0xb0>
   1db60:	e0bff517 	ldw	r2,-44(fp)
   1db64:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1db68:	e0bff617 	ldw	r2,-40(fp)
   1db6c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
   1db70:	00800a04 	movi	r2,40
   1db74:	00010b06 	br	1dfa4 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
   1db78:	e0bffe03 	ldbu	r2,-8(fp)
   1db7c:	10803fd8 	cmpnei	r2,r2,255
   1db80:	1000031e 	bne	r2,zero,1db90 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
   1db84:	d0a85617 	ldw	r2,-24232(gp)
   1db88:	10800c83 	ldbu	r2,50(r2)
   1db8c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
   1db90:	e0fffe03 	ldbu	r3,-8(fp)
   1db94:	00800134 	movhi	r2,4
   1db98:	10a09804 	addi	r2,r2,-32160
   1db9c:	18c7883a 	add	r3,r3,r3
   1dba0:	18c7883a 	add	r3,r3,r3
   1dba4:	10c5883a 	add	r2,r2,r3
   1dba8:	10800017 	ldw	r2,0(r2)
   1dbac:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
   1dbb0:	e0bff817 	ldw	r2,-32(fp)
   1dbb4:	1000061e 	bne	r2,zero,1dbd0 <OSTaskChangePrio+0x108>
   1dbb8:	e0bff517 	ldw	r2,-44(fp)
   1dbbc:	e0bff715 	stw	r2,-36(fp)
   1dbc0:	e0bff717 	ldw	r2,-36(fp)
   1dbc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
   1dbc8:	00800a44 	movi	r2,41
   1dbcc:	0000f506 	br	1dfa4 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
   1dbd0:	e0bff817 	ldw	r2,-32(fp)
   1dbd4:	10800058 	cmpnei	r2,r2,1
   1dbd8:	1000061e 	bne	r2,zero,1dbf4 <OSTaskChangePrio+0x12c>
   1dbdc:	e0bff517 	ldw	r2,-44(fp)
   1dbe0:	e0bff915 	stw	r2,-28(fp)
   1dbe4:	e0bff917 	ldw	r2,-28(fp)
   1dbe8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
   1dbec:	008010c4 	movi	r2,67
   1dbf0:	0000ec06 	br	1dfa4 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
   1dbf4:	e0bfff03 	ldbu	r2,-4(fp)
   1dbf8:	1004d0fa 	srli	r2,r2,3
   1dbfc:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
   1dc00:	e0bfff03 	ldbu	r2,-4(fp)
   1dc04:	108001cc 	andi	r2,r2,7
   1dc08:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
   1dc0c:	e0bffb03 	ldbu	r2,-20(fp)
   1dc10:	00c00044 	movi	r3,1
   1dc14:	1884983a 	sll	r2,r3,r2
   1dc18:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
   1dc1c:	e0bffb43 	ldbu	r2,-19(fp)
   1dc20:	00c00044 	movi	r3,1
   1dc24:	1884983a 	sll	r2,r3,r2
   1dc28:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
   1dc2c:	e0fffe03 	ldbu	r3,-8(fp)
   1dc30:	00800134 	movhi	r2,4
   1dc34:	10a09804 	addi	r2,r2,-32160
   1dc38:	18c7883a 	add	r3,r3,r3
   1dc3c:	18c7883a 	add	r3,r3,r3
   1dc40:	10c5883a 	add	r2,r2,r3
   1dc44:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
   1dc48:	e0ffff03 	ldbu	r3,-4(fp)
   1dc4c:	00800134 	movhi	r2,4
   1dc50:	10a09804 	addi	r2,r2,-32160
   1dc54:	18c7883a 	add	r3,r3,r3
   1dc58:	18c7883a 	add	r3,r3,r3
   1dc5c:	10c5883a 	add	r2,r2,r3
   1dc60:	e0fff817 	ldw	r3,-32(fp)
   1dc64:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
   1dc68:	e0bff817 	ldw	r2,-32(fp)
   1dc6c:	10800d03 	ldbu	r2,52(r2)
   1dc70:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
   1dc74:	e0bff817 	ldw	r2,-32(fp)
   1dc78:	10800d83 	ldbu	r2,54(r2)
   1dc7c:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
   1dc80:	e0bff817 	ldw	r2,-32(fp)
   1dc84:	10800d43 	ldbu	r2,53(r2)
   1dc88:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
   1dc8c:	e0fffc03 	ldbu	r3,-16(fp)
   1dc90:	d0a85344 	addi	r2,gp,-24243
   1dc94:	1885883a 	add	r2,r3,r2
   1dc98:	10c00003 	ldbu	r3,0(r2)
   1dc9c:	e0bffc83 	ldbu	r2,-14(fp)
   1dca0:	1884703a 	and	r2,r3,r2
   1dca4:	10803fcc 	andi	r2,r2,255
   1dca8:	10002826 	beq	r2,zero,1dd4c <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
   1dcac:	e0fffc03 	ldbu	r3,-16(fp)
   1dcb0:	e13ffc03 	ldbu	r4,-16(fp)
   1dcb4:	d0a85344 	addi	r2,gp,-24243
   1dcb8:	2085883a 	add	r2,r4,r2
   1dcbc:	10800003 	ldbu	r2,0(r2)
   1dcc0:	1009883a 	mov	r4,r2
   1dcc4:	e0bffc83 	ldbu	r2,-14(fp)
   1dcc8:	0084303a 	nor	r2,zero,r2
   1dccc:	2084703a 	and	r2,r4,r2
   1dcd0:	1009883a 	mov	r4,r2
   1dcd4:	d0a85344 	addi	r2,gp,-24243
   1dcd8:	1885883a 	add	r2,r3,r2
   1dcdc:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
   1dce0:	e0fffc03 	ldbu	r3,-16(fp)
   1dce4:	d0a85344 	addi	r2,gp,-24243
   1dce8:	1885883a 	add	r2,r3,r2
   1dcec:	10800003 	ldbu	r2,0(r2)
   1dcf0:	10803fcc 	andi	r2,r2,255
   1dcf4:	1000061e 	bne	r2,zero,1dd10 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
   1dcf8:	e0bffc43 	ldbu	r2,-15(fp)
   1dcfc:	0084303a 	nor	r2,zero,r2
   1dd00:	1007883a 	mov	r3,r2
   1dd04:	d0a85303 	ldbu	r2,-24244(gp)
   1dd08:	1884703a 	and	r2,r3,r2
   1dd0c:	d0a85305 	stb	r2,-24244(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
   1dd10:	d0e85303 	ldbu	r3,-24244(gp)
   1dd14:	e0bffb83 	ldbu	r2,-18(fp)
   1dd18:	1884b03a 	or	r2,r3,r2
   1dd1c:	d0a85305 	stb	r2,-24244(gp)
         OSRdyTbl[y_new] |= bitx_new;
   1dd20:	e0fffb03 	ldbu	r3,-20(fp)
   1dd24:	e13ffb03 	ldbu	r4,-20(fp)
   1dd28:	d0a85344 	addi	r2,gp,-24243
   1dd2c:	2085883a 	add	r2,r4,r2
   1dd30:	11000003 	ldbu	r4,0(r2)
   1dd34:	e0bffbc3 	ldbu	r2,-17(fp)
   1dd38:	2084b03a 	or	r2,r4,r2
   1dd3c:	1009883a 	mov	r4,r2
   1dd40:	d0a85344 	addi	r2,gp,-24243
   1dd44:	1885883a 	add	r2,r3,r2
   1dd48:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
   1dd4c:	e0bff817 	ldw	r2,-32(fp)
   1dd50:	10800717 	ldw	r2,28(r2)
   1dd54:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
   1dd58:	e0bff317 	ldw	r2,-52(fp)
   1dd5c:	10003326 	beq	r2,zero,1de2c <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
   1dd60:	e0bffc03 	ldbu	r2,-16(fp)
   1dd64:	e0fffc03 	ldbu	r3,-16(fp)
   1dd68:	e13ff317 	ldw	r4,-52(fp)
   1dd6c:	20c7883a 	add	r3,r4,r3
   1dd70:	18c002c4 	addi	r3,r3,11
   1dd74:	18c00003 	ldbu	r3,0(r3)
   1dd78:	1809883a 	mov	r4,r3
   1dd7c:	e0fffc83 	ldbu	r3,-14(fp)
   1dd80:	00c6303a 	nor	r3,zero,r3
   1dd84:	20c6703a 	and	r3,r4,r3
   1dd88:	1809883a 	mov	r4,r3
   1dd8c:	e0fff317 	ldw	r3,-52(fp)
   1dd90:	1885883a 	add	r2,r3,r2
   1dd94:	108002c4 	addi	r2,r2,11
   1dd98:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
   1dd9c:	e0bffc03 	ldbu	r2,-16(fp)
   1dda0:	e0fff317 	ldw	r3,-52(fp)
   1dda4:	1885883a 	add	r2,r3,r2
   1dda8:	108002c4 	addi	r2,r2,11
   1ddac:	10800003 	ldbu	r2,0(r2)
   1ddb0:	10803fcc 	andi	r2,r2,255
   1ddb4:	1000091e 	bne	r2,zero,1dddc <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
   1ddb8:	e0bff317 	ldw	r2,-52(fp)
   1ddbc:	10800283 	ldbu	r2,10(r2)
   1ddc0:	1007883a 	mov	r3,r2
   1ddc4:	e0bffc43 	ldbu	r2,-15(fp)
   1ddc8:	0084303a 	nor	r2,zero,r2
   1ddcc:	1884703a 	and	r2,r3,r2
   1ddd0:	1007883a 	mov	r3,r2
   1ddd4:	e0bff317 	ldw	r2,-52(fp)
   1ddd8:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
   1dddc:	e0bff317 	ldw	r2,-52(fp)
   1dde0:	10c00283 	ldbu	r3,10(r2)
   1dde4:	e0bffb83 	ldbu	r2,-18(fp)
   1dde8:	1884b03a 	or	r2,r3,r2
   1ddec:	1007883a 	mov	r3,r2
   1ddf0:	e0bff317 	ldw	r2,-52(fp)
   1ddf4:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
   1ddf8:	e0bffb03 	ldbu	r2,-20(fp)
   1ddfc:	e0fffb03 	ldbu	r3,-20(fp)
   1de00:	e13ff317 	ldw	r4,-52(fp)
   1de04:	20c7883a 	add	r3,r4,r3
   1de08:	18c002c4 	addi	r3,r3,11
   1de0c:	19000003 	ldbu	r4,0(r3)
   1de10:	e0fffbc3 	ldbu	r3,-17(fp)
   1de14:	20c6b03a 	or	r3,r4,r3
   1de18:	1809883a 	mov	r4,r3
   1de1c:	e0fff317 	ldw	r3,-52(fp)
   1de20:	1885883a 	add	r2,r3,r2
   1de24:	108002c4 	addi	r2,r2,11
   1de28:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
   1de2c:	e0bff817 	ldw	r2,-32(fp)
   1de30:	10800817 	ldw	r2,32(r2)
   1de34:	10004226 	beq	r2,zero,1df40 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
   1de38:	e0bff817 	ldw	r2,-32(fp)
   1de3c:	10800817 	ldw	r2,32(r2)
   1de40:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
   1de44:	e0bff417 	ldw	r2,-48(fp)
   1de48:	10800017 	ldw	r2,0(r2)
   1de4c:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
   1de50:	00003906 	br	1df38 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
   1de54:	e0bffc03 	ldbu	r2,-16(fp)
   1de58:	e0fffc03 	ldbu	r3,-16(fp)
   1de5c:	e13ff317 	ldw	r4,-52(fp)
   1de60:	20c7883a 	add	r3,r4,r3
   1de64:	18c002c4 	addi	r3,r3,11
   1de68:	18c00003 	ldbu	r3,0(r3)
   1de6c:	1809883a 	mov	r4,r3
   1de70:	e0fffc83 	ldbu	r3,-14(fp)
   1de74:	00c6303a 	nor	r3,zero,r3
   1de78:	20c6703a 	and	r3,r4,r3
   1de7c:	1809883a 	mov	r4,r3
   1de80:	e0fff317 	ldw	r3,-52(fp)
   1de84:	1885883a 	add	r2,r3,r2
   1de88:	108002c4 	addi	r2,r2,11
   1de8c:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
   1de90:	e0bffc03 	ldbu	r2,-16(fp)
   1de94:	e0fff317 	ldw	r3,-52(fp)
   1de98:	1885883a 	add	r2,r3,r2
   1de9c:	108002c4 	addi	r2,r2,11
   1dea0:	10800003 	ldbu	r2,0(r2)
   1dea4:	10803fcc 	andi	r2,r2,255
   1dea8:	1000091e 	bne	r2,zero,1ded0 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
   1deac:	e0bff317 	ldw	r2,-52(fp)
   1deb0:	10800283 	ldbu	r2,10(r2)
   1deb4:	1007883a 	mov	r3,r2
   1deb8:	e0bffc43 	ldbu	r2,-15(fp)
   1debc:	0084303a 	nor	r2,zero,r2
   1dec0:	1884703a 	and	r2,r3,r2
   1dec4:	1007883a 	mov	r3,r2
   1dec8:	e0bff317 	ldw	r2,-52(fp)
   1decc:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
   1ded0:	e0bff317 	ldw	r2,-52(fp)
   1ded4:	10c00283 	ldbu	r3,10(r2)
   1ded8:	e0bffb83 	ldbu	r2,-18(fp)
   1dedc:	1884b03a 	or	r2,r3,r2
   1dee0:	1007883a 	mov	r3,r2
   1dee4:	e0bff317 	ldw	r2,-52(fp)
   1dee8:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
   1deec:	e0bffb03 	ldbu	r2,-20(fp)
   1def0:	e0fffb03 	ldbu	r3,-20(fp)
   1def4:	e13ff317 	ldw	r4,-52(fp)
   1def8:	20c7883a 	add	r3,r4,r3
   1defc:	18c002c4 	addi	r3,r3,11
   1df00:	19000003 	ldbu	r4,0(r3)
   1df04:	e0fffbc3 	ldbu	r3,-17(fp)
   1df08:	20c6b03a 	or	r3,r4,r3
   1df0c:	1809883a 	mov	r4,r3
   1df10:	e0fff317 	ldw	r3,-52(fp)
   1df14:	1885883a 	add	r2,r3,r2
   1df18:	108002c4 	addi	r2,r2,11
   1df1c:	11000005 	stb	r4,0(r2)
            pevents++;
   1df20:	e0bff417 	ldw	r2,-48(fp)
   1df24:	10800104 	addi	r2,r2,4
   1df28:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
   1df2c:	e0bff417 	ldw	r2,-48(fp)
   1df30:	10800017 	ldw	r2,0(r2)
   1df34:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
   1df38:	e0bff317 	ldw	r2,-52(fp)
   1df3c:	103fc51e 	bne	r2,zero,1de54 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701de54>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
   1df40:	e0bff817 	ldw	r2,-32(fp)
   1df44:	e0ffff03 	ldbu	r3,-4(fp)
   1df48:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
   1df4c:	e0bff817 	ldw	r2,-32(fp)
   1df50:	e0fffb03 	ldbu	r3,-20(fp)
   1df54:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
   1df58:	e0bff817 	ldw	r2,-32(fp)
   1df5c:	e0fffb43 	ldbu	r3,-19(fp)
   1df60:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
   1df64:	e0bff817 	ldw	r2,-32(fp)
   1df68:	e0fffb83 	ldbu	r3,-18(fp)
   1df6c:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
   1df70:	e0bff817 	ldw	r2,-32(fp)
   1df74:	e0fffbc3 	ldbu	r3,-17(fp)
   1df78:	10c00d45 	stb	r3,53(r2)
   1df7c:	e0bff517 	ldw	r2,-44(fp)
   1df80:	e0bffa15 	stw	r2,-24(fp)
   1df84:	e0bffa17 	ldw	r2,-24(fp)
   1df88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1df8c:	d0a84743 	ldbu	r2,-24291(gp)
   1df90:	10803fcc 	andi	r2,r2,255
   1df94:	10800058 	cmpnei	r2,r2,1
   1df98:	1000011e 	bne	r2,zero,1dfa0 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
   1df9c:	00198880 	call	19888 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1dfa0:	0005883a 	mov	r2,zero
}
   1dfa4:	e037883a 	mov	sp,fp
   1dfa8:	dfc00117 	ldw	ra,4(sp)
   1dfac:	df000017 	ldw	fp,0(sp)
   1dfb0:	dec00204 	addi	sp,sp,8
   1dfb4:	f800283a 	ret

0001dfb8 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
   1dfb8:	deffee04 	addi	sp,sp,-72
   1dfbc:	dfc01115 	stw	ra,68(sp)
   1dfc0:	df001015 	stw	fp,64(sp)
   1dfc4:	df001004 	addi	fp,sp,64
   1dfc8:	e13ffc15 	stw	r4,-16(fp)
   1dfcc:	e17ffd15 	stw	r5,-12(fp)
   1dfd0:	e1bffe15 	stw	r6,-8(fp)
   1dfd4:	3805883a 	mov	r2,r7
   1dfd8:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1dfdc:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1dfe0:	e0bfff03 	ldbu	r2,-4(fp)
   1dfe4:	10800570 	cmpltui	r2,r2,21
   1dfe8:	1000021e 	bne	r2,zero,1dff4 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
   1dfec:	00800a84 	movi	r2,42
   1dff0:	00005706 	br	1e150 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1dff4:	0005303a 	rdctl	r2,status
   1dff8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1dffc:	e0fffb17 	ldw	r3,-20(fp)
   1e000:	00bfff84 	movi	r2,-2
   1e004:	1884703a 	and	r2,r3,r2
   1e008:	1001703a 	wrctl	status,r2
  
  return context;
   1e00c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1e010:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1e014:	d0a85503 	ldbu	r2,-24236(gp)
   1e018:	10803fcc 	andi	r2,r2,255
   1e01c:	10000626 	beq	r2,zero,1e038 <OSTaskCreate+0x80>
   1e020:	e0bff317 	ldw	r2,-52(fp)
   1e024:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e028:	e0bff417 	ldw	r2,-48(fp)
   1e02c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1e030:	00800f04 	movi	r2,60
   1e034:	00004606 	br	1e150 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1e038:	e0ffff03 	ldbu	r3,-4(fp)
   1e03c:	00800134 	movhi	r2,4
   1e040:	10a09804 	addi	r2,r2,-32160
   1e044:	18c7883a 	add	r3,r3,r3
   1e048:	18c7883a 	add	r3,r3,r3
   1e04c:	10c5883a 	add	r2,r2,r3
   1e050:	10800017 	ldw	r2,0(r2)
   1e054:	1000391e 	bne	r2,zero,1e13c <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1e058:	e0ffff03 	ldbu	r3,-4(fp)
   1e05c:	00800134 	movhi	r2,4
   1e060:	10a09804 	addi	r2,r2,-32160
   1e064:	18c7883a 	add	r3,r3,r3
   1e068:	18c7883a 	add	r3,r3,r3
   1e06c:	10c5883a 	add	r2,r2,r3
   1e070:	00c00044 	movi	r3,1
   1e074:	10c00015 	stw	r3,0(r2)
   1e078:	e0bff317 	ldw	r2,-52(fp)
   1e07c:	e0bff515 	stw	r2,-44(fp)
   1e080:	e0bff517 	ldw	r2,-44(fp)
   1e084:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
   1e088:	000f883a 	mov	r7,zero
   1e08c:	e1bffe17 	ldw	r6,-8(fp)
   1e090:	e17ffd17 	ldw	r5,-12(fp)
   1e094:	e13ffc17 	ldw	r4,-16(fp)
   1e098:	0022bd80 	call	22bd8 <OSTaskStkInit>
   1e09c:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
   1e0a0:	e0bfff03 	ldbu	r2,-4(fp)
   1e0a4:	d8000215 	stw	zero,8(sp)
   1e0a8:	d8000115 	stw	zero,4(sp)
   1e0ac:	d8000015 	stw	zero,0(sp)
   1e0b0:	000f883a 	mov	r7,zero
   1e0b4:	000d883a 	mov	r6,zero
   1e0b8:	e17ff717 	ldw	r5,-36(fp)
   1e0bc:	1009883a 	mov	r4,r2
   1e0c0:	0019c980 	call	19c98 <OS_TCBInit>
   1e0c4:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
   1e0c8:	e0bff803 	ldbu	r2,-32(fp)
   1e0cc:	1000061e 	bne	r2,zero,1e0e8 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
   1e0d0:	d0a84743 	ldbu	r2,-24291(gp)
   1e0d4:	10803fcc 	andi	r2,r2,255
   1e0d8:	10800058 	cmpnei	r2,r2,1
   1e0dc:	1000151e 	bne	r2,zero,1e134 <OSTaskCreate+0x17c>
                OS_Sched();
   1e0e0:	00198880 	call	19888 <OS_Sched>
   1e0e4:	00001306 	br	1e134 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e0e8:	0005303a 	rdctl	r2,status
   1e0ec:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e0f0:	e0fffa17 	ldw	r3,-24(fp)
   1e0f4:	00bfff84 	movi	r2,-2
   1e0f8:	1884703a 	and	r2,r3,r2
   1e0fc:	1001703a 	wrctl	status,r2
  
  return context;
   1e100:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1e104:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
   1e108:	e0ffff03 	ldbu	r3,-4(fp)
   1e10c:	00800134 	movhi	r2,4
   1e110:	10a09804 	addi	r2,r2,-32160
   1e114:	18c7883a 	add	r3,r3,r3
   1e118:	18c7883a 	add	r3,r3,r3
   1e11c:	10c5883a 	add	r2,r2,r3
   1e120:	10000015 	stw	zero,0(r2)
   1e124:	e0bff317 	ldw	r2,-52(fp)
   1e128:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e12c:	e0bff617 	ldw	r2,-40(fp)
   1e130:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1e134:	e0bff803 	ldbu	r2,-32(fp)
   1e138:	00000506 	br	1e150 <OSTaskCreate+0x198>
   1e13c:	e0bff317 	ldw	r2,-52(fp)
   1e140:	e0bff915 	stw	r2,-28(fp)
   1e144:	e0bff917 	ldw	r2,-28(fp)
   1e148:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1e14c:	00800a04 	movi	r2,40
}
   1e150:	e037883a 	mov	sp,fp
   1e154:	dfc00117 	ldw	ra,4(sp)
   1e158:	df000017 	ldw	fp,0(sp)
   1e15c:	dec00204 	addi	sp,sp,8
   1e160:	f800283a 	ret

0001e164 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
   1e164:	deffec04 	addi	sp,sp,-80
   1e168:	dfc01315 	stw	ra,76(sp)
   1e16c:	df001215 	stw	fp,72(sp)
   1e170:	df001204 	addi	fp,sp,72
   1e174:	e13ffa15 	stw	r4,-24(fp)
   1e178:	e17ffb15 	stw	r5,-20(fp)
   1e17c:	e1bffc15 	stw	r6,-16(fp)
   1e180:	3809883a 	mov	r4,r7
   1e184:	e0c00217 	ldw	r3,8(fp)
   1e188:	e0800617 	ldw	r2,24(fp)
   1e18c:	e13ffd05 	stb	r4,-12(fp)
   1e190:	e0fffe0d 	sth	r3,-8(fp)
   1e194:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
   1e198:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
   1e19c:	e0bffd03 	ldbu	r2,-12(fp)
   1e1a0:	10800570 	cmpltui	r2,r2,21
   1e1a4:	1000021e 	bne	r2,zero,1e1b0 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
   1e1a8:	00800a84 	movi	r2,42
   1e1ac:	00006106 	br	1e334 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e1b0:	0005303a 	rdctl	r2,status
   1e1b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e1b8:	e0fff917 	ldw	r3,-28(fp)
   1e1bc:	00bfff84 	movi	r2,-2
   1e1c0:	1884703a 	and	r2,r3,r2
   1e1c4:	1001703a 	wrctl	status,r2
  
  return context;
   1e1c8:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1e1cc:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
   1e1d0:	d0a85503 	ldbu	r2,-24236(gp)
   1e1d4:	10803fcc 	andi	r2,r2,255
   1e1d8:	10000626 	beq	r2,zero,1e1f4 <OSTaskCreateExt+0x90>
   1e1dc:	e0bff117 	ldw	r2,-60(fp)
   1e1e0:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e1e4:	e0bff217 	ldw	r2,-56(fp)
   1e1e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
   1e1ec:	00800f04 	movi	r2,60
   1e1f0:	00005006 	br	1e334 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
   1e1f4:	e0fffd03 	ldbu	r3,-12(fp)
   1e1f8:	00800134 	movhi	r2,4
   1e1fc:	10a09804 	addi	r2,r2,-32160
   1e200:	18c7883a 	add	r3,r3,r3
   1e204:	18c7883a 	add	r3,r3,r3
   1e208:	10c5883a 	add	r2,r2,r3
   1e20c:	10800017 	ldw	r2,0(r2)
   1e210:	1000431e 	bne	r2,zero,1e320 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
   1e214:	e0fffd03 	ldbu	r3,-12(fp)
   1e218:	00800134 	movhi	r2,4
   1e21c:	10a09804 	addi	r2,r2,-32160
   1e220:	18c7883a 	add	r3,r3,r3
   1e224:	18c7883a 	add	r3,r3,r3
   1e228:	10c5883a 	add	r2,r2,r3
   1e22c:	00c00044 	movi	r3,1
   1e230:	10c00015 	stw	r3,0(r2)
   1e234:	e0bff117 	ldw	r2,-60(fp)
   1e238:	e0bff315 	stw	r2,-52(fp)
   1e23c:	e0bff317 	ldw	r2,-52(fp)
   1e240:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
   1e244:	e0bfff0b 	ldhu	r2,-4(fp)
   1e248:	100d883a 	mov	r6,r2
   1e24c:	e1400417 	ldw	r5,16(fp)
   1e250:	e1000317 	ldw	r4,12(fp)
   1e254:	001f1c40 	call	1f1c4 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
   1e258:	e0bfff0b 	ldhu	r2,-4(fp)
   1e25c:	100f883a 	mov	r7,r2
   1e260:	e1bffc17 	ldw	r6,-16(fp)
   1e264:	e17ffb17 	ldw	r5,-20(fp)
   1e268:	e13ffa17 	ldw	r4,-24(fp)
   1e26c:	0022bd80 	call	22bd8 <OSTaskStkInit>
   1e270:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
   1e274:	e0fffd03 	ldbu	r3,-12(fp)
   1e278:	e13ffe0b 	ldhu	r4,-8(fp)
   1e27c:	e0bfff0b 	ldhu	r2,-4(fp)
   1e280:	d8800215 	stw	r2,8(sp)
   1e284:	e0800517 	ldw	r2,20(fp)
   1e288:	d8800115 	stw	r2,4(sp)
   1e28c:	e0800417 	ldw	r2,16(fp)
   1e290:	d8800015 	stw	r2,0(sp)
   1e294:	200f883a 	mov	r7,r4
   1e298:	e1800317 	ldw	r6,12(fp)
   1e29c:	e17ff517 	ldw	r5,-44(fp)
   1e2a0:	1809883a 	mov	r4,r3
   1e2a4:	0019c980 	call	19c98 <OS_TCBInit>
   1e2a8:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
   1e2ac:	e0bff603 	ldbu	r2,-40(fp)
   1e2b0:	1000061e 	bne	r2,zero,1e2cc <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
   1e2b4:	d0a84743 	ldbu	r2,-24291(gp)
   1e2b8:	10803fcc 	andi	r2,r2,255
   1e2bc:	10800058 	cmpnei	r2,r2,1
   1e2c0:	1000151e 	bne	r2,zero,1e318 <OSTaskCreateExt+0x1b4>
                OS_Sched();
   1e2c4:	00198880 	call	19888 <OS_Sched>
   1e2c8:	00001306 	br	1e318 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e2cc:	0005303a 	rdctl	r2,status
   1e2d0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e2d4:	e0fff817 	ldw	r3,-32(fp)
   1e2d8:	00bfff84 	movi	r2,-2
   1e2dc:	1884703a 	and	r2,r3,r2
   1e2e0:	1001703a 	wrctl	status,r2
  
  return context;
   1e2e4:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
   1e2e8:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
   1e2ec:	e0fffd03 	ldbu	r3,-12(fp)
   1e2f0:	00800134 	movhi	r2,4
   1e2f4:	10a09804 	addi	r2,r2,-32160
   1e2f8:	18c7883a 	add	r3,r3,r3
   1e2fc:	18c7883a 	add	r3,r3,r3
   1e300:	10c5883a 	add	r2,r2,r3
   1e304:	10000015 	stw	zero,0(r2)
   1e308:	e0bff117 	ldw	r2,-60(fp)
   1e30c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e310:	e0bff417 	ldw	r2,-48(fp)
   1e314:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
   1e318:	e0bff603 	ldbu	r2,-40(fp)
   1e31c:	00000506 	br	1e334 <OSTaskCreateExt+0x1d0>
   1e320:	e0bff117 	ldw	r2,-60(fp)
   1e324:	e0bff715 	stw	r2,-36(fp)
   1e328:	e0bff717 	ldw	r2,-36(fp)
   1e32c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
   1e330:	00800a04 	movi	r2,40
}
   1e334:	e037883a 	mov	sp,fp
   1e338:	dfc00117 	ldw	ra,4(sp)
   1e33c:	df000017 	ldw	fp,0(sp)
   1e340:	dec00204 	addi	sp,sp,8
   1e344:	f800283a 	ret

0001e348 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
   1e348:	defff404 	addi	sp,sp,-48
   1e34c:	dfc00b15 	stw	ra,44(sp)
   1e350:	df000a15 	stw	fp,40(sp)
   1e354:	df000a04 	addi	fp,sp,40
   1e358:	2005883a 	mov	r2,r4
   1e35c:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
   1e360:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
   1e364:	d0a85503 	ldbu	r2,-24236(gp)
   1e368:	10803fcc 	andi	r2,r2,255
   1e36c:	10000226 	beq	r2,zero,1e378 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
   1e370:	00801004 	movi	r2,64
   1e374:	0000c006 	br	1e678 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
   1e378:	e0bfff03 	ldbu	r2,-4(fp)
   1e37c:	10800518 	cmpnei	r2,r2,20
   1e380:	1000021e 	bne	r2,zero,1e38c <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
   1e384:	00800f84 	movi	r2,62
   1e388:	0000bb06 	br	1e678 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
   1e38c:	e0bfff03 	ldbu	r2,-4(fp)
   1e390:	10800530 	cmpltui	r2,r2,20
   1e394:	1000051e 	bne	r2,zero,1e3ac <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
   1e398:	e0bfff03 	ldbu	r2,-4(fp)
   1e39c:	10803fe0 	cmpeqi	r2,r2,255
   1e3a0:	1000021e 	bne	r2,zero,1e3ac <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
   1e3a4:	00800a84 	movi	r2,42
   1e3a8:	0000b306 	br	1e678 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e3ac:	0005303a 	rdctl	r2,status
   1e3b0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e3b4:	e0fffe17 	ldw	r3,-8(fp)
   1e3b8:	00bfff84 	movi	r2,-2
   1e3bc:	1884703a 	and	r2,r3,r2
   1e3c0:	1001703a 	wrctl	status,r2
  
  return context;
   1e3c4:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
   1e3c8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
   1e3cc:	e0bfff03 	ldbu	r2,-4(fp)
   1e3d0:	10803fd8 	cmpnei	r2,r2,255
   1e3d4:	1000031e 	bne	r2,zero,1e3e4 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
   1e3d8:	d0a85617 	ldw	r2,-24232(gp)
   1e3dc:	10800c83 	ldbu	r2,50(r2)
   1e3e0:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1e3e4:	e0ffff03 	ldbu	r3,-4(fp)
   1e3e8:	00800134 	movhi	r2,4
   1e3ec:	10a09804 	addi	r2,r2,-32160
   1e3f0:	18c7883a 	add	r3,r3,r3
   1e3f4:	18c7883a 	add	r3,r3,r3
   1e3f8:	10c5883a 	add	r2,r2,r3
   1e3fc:	10800017 	ldw	r2,0(r2)
   1e400:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
   1e404:	e0bff817 	ldw	r2,-32(fp)
   1e408:	1000061e 	bne	r2,zero,1e424 <OSTaskDel+0xdc>
   1e40c:	e0bff617 	ldw	r2,-40(fp)
   1e410:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e414:	e0bff717 	ldw	r2,-36(fp)
   1e418:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1e41c:	008010c4 	movi	r2,67
   1e420:	00009506 	br	1e678 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
   1e424:	e0bff817 	ldw	r2,-32(fp)
   1e428:	10800058 	cmpnei	r2,r2,1
   1e42c:	1000061e 	bne	r2,zero,1e448 <OSTaskDel+0x100>
   1e430:	e0bff617 	ldw	r2,-40(fp)
   1e434:	e0bff915 	stw	r2,-28(fp)
   1e438:	e0bff917 	ldw	r2,-28(fp)
   1e43c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1e440:	00800f44 	movi	r2,61
   1e444:	00008c06 	br	1e678 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
   1e448:	e0bff817 	ldw	r2,-32(fp)
   1e44c:	10800d03 	ldbu	r2,52(r2)
   1e450:	10c03fcc 	andi	r3,r2,255
   1e454:	e0bff817 	ldw	r2,-32(fp)
   1e458:	10800d03 	ldbu	r2,52(r2)
   1e45c:	11003fcc 	andi	r4,r2,255
   1e460:	d0a85344 	addi	r2,gp,-24243
   1e464:	2085883a 	add	r2,r4,r2
   1e468:	10800003 	ldbu	r2,0(r2)
   1e46c:	1009883a 	mov	r4,r2
   1e470:	e0bff817 	ldw	r2,-32(fp)
   1e474:	10800d43 	ldbu	r2,53(r2)
   1e478:	0084303a 	nor	r2,zero,r2
   1e47c:	2084703a 	and	r2,r4,r2
   1e480:	1009883a 	mov	r4,r2
   1e484:	d0a85344 	addi	r2,gp,-24243
   1e488:	1885883a 	add	r2,r3,r2
   1e48c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
   1e490:	e0bff817 	ldw	r2,-32(fp)
   1e494:	10800d03 	ldbu	r2,52(r2)
   1e498:	10c03fcc 	andi	r3,r2,255
   1e49c:	d0a85344 	addi	r2,gp,-24243
   1e4a0:	1885883a 	add	r2,r3,r2
   1e4a4:	10800003 	ldbu	r2,0(r2)
   1e4a8:	10803fcc 	andi	r2,r2,255
   1e4ac:	1000071e 	bne	r2,zero,1e4cc <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
   1e4b0:	e0bff817 	ldw	r2,-32(fp)
   1e4b4:	10800d83 	ldbu	r2,54(r2)
   1e4b8:	0084303a 	nor	r2,zero,r2
   1e4bc:	1007883a 	mov	r3,r2
   1e4c0:	d0a85303 	ldbu	r2,-24244(gp)
   1e4c4:	1884703a 	and	r2,r3,r2
   1e4c8:	d0a85305 	stb	r2,-24244(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
   1e4cc:	e0bff817 	ldw	r2,-32(fp)
   1e4d0:	10800717 	ldw	r2,28(r2)
   1e4d4:	10000526 	beq	r2,zero,1e4ec <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
   1e4d8:	e0bff817 	ldw	r2,-32(fp)
   1e4dc:	10800717 	ldw	r2,28(r2)
   1e4e0:	100b883a 	mov	r5,r2
   1e4e4:	e13ff817 	ldw	r4,-32(fp)
   1e4e8:	00192340 	call	19234 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
   1e4ec:	e0bff817 	ldw	r2,-32(fp)
   1e4f0:	10800817 	ldw	r2,32(r2)
   1e4f4:	10000526 	beq	r2,zero,1e50c <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
   1e4f8:	e0bff817 	ldw	r2,-32(fp)
   1e4fc:	10800817 	ldw	r2,32(r2)
   1e500:	100b883a 	mov	r5,r2
   1e504:	e13ff817 	ldw	r4,-32(fp)
   1e508:	00192ec0 	call	192ec <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
   1e50c:	e0bff817 	ldw	r2,-32(fp)
   1e510:	10800a17 	ldw	r2,40(r2)
   1e514:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
   1e518:	e0bffb17 	ldw	r2,-20(fp)
   1e51c:	10000226 	beq	r2,zero,1e528 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
   1e520:	e13ffb17 	ldw	r4,-20(fp)
   1e524:	001b76c0 	call	1b76c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
   1e528:	e0bff817 	ldw	r2,-32(fp)
   1e52c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
   1e530:	e0bff817 	ldw	r2,-32(fp)
   1e534:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
   1e538:	e0bff817 	ldw	r2,-32(fp)
   1e53c:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
   1e540:	d0a84703 	ldbu	r2,-24292(gp)
   1e544:	10803fcc 	andi	r2,r2,255
   1e548:	10803fe0 	cmpeqi	r2,r2,255
   1e54c:	1000031e 	bne	r2,zero,1e55c <OSTaskDel+0x214>
        OSLockNesting++;
   1e550:	d0a84703 	ldbu	r2,-24292(gp)
   1e554:	10800044 	addi	r2,r2,1
   1e558:	d0a84705 	stb	r2,-24292(gp)
   1e55c:	e0bff617 	ldw	r2,-40(fp)
   1e560:	e0bffd15 	stw	r2,-12(fp)
   1e564:	e0bffd17 	ldw	r2,-12(fp)
   1e568:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
   1e56c:	0018e1c0 	call	18e1c <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e570:	0005303a 	rdctl	r2,status
   1e574:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e578:	e0fffa17 	ldw	r3,-24(fp)
   1e57c:	00bfff84 	movi	r2,-2
   1e580:	1884703a 	and	r2,r3,r2
   1e584:	1001703a 	wrctl	status,r2
  
  return context;
   1e588:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
   1e58c:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
   1e590:	d0a84703 	ldbu	r2,-24292(gp)
   1e594:	10803fcc 	andi	r2,r2,255
   1e598:	10000326 	beq	r2,zero,1e5a8 <OSTaskDel+0x260>
        OSLockNesting--;
   1e59c:	d0a84703 	ldbu	r2,-24292(gp)
   1e5a0:	10bfffc4 	addi	r2,r2,-1
   1e5a4:	d0a84705 	stb	r2,-24292(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
   1e5a8:	e13ff817 	ldw	r4,-32(fp)
   1e5ac:	0022d580 	call	22d58 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
   1e5b0:	d0a84f43 	ldbu	r2,-24259(gp)
   1e5b4:	10bfffc4 	addi	r2,r2,-1
   1e5b8:	d0a84f45 	stb	r2,-24259(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
   1e5bc:	e0ffff03 	ldbu	r3,-4(fp)
   1e5c0:	00800134 	movhi	r2,4
   1e5c4:	10a09804 	addi	r2,r2,-32160
   1e5c8:	18c7883a 	add	r3,r3,r3
   1e5cc:	18c7883a 	add	r3,r3,r3
   1e5d0:	10c5883a 	add	r2,r2,r3
   1e5d4:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
   1e5d8:	e0bff817 	ldw	r2,-32(fp)
   1e5dc:	10800617 	ldw	r2,24(r2)
   1e5e0:	1000071e 	bne	r2,zero,1e600 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
   1e5e4:	e0bff817 	ldw	r2,-32(fp)
   1e5e8:	10800517 	ldw	r2,20(r2)
   1e5ec:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
   1e5f0:	e0bff817 	ldw	r2,-32(fp)
   1e5f4:	10800517 	ldw	r2,20(r2)
   1e5f8:	d0a84a15 	stw	r2,-24280(gp)
   1e5fc:	00000a06 	br	1e628 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
   1e600:	e0bff817 	ldw	r2,-32(fp)
   1e604:	10800617 	ldw	r2,24(r2)
   1e608:	e0fff817 	ldw	r3,-32(fp)
   1e60c:	18c00517 	ldw	r3,20(r3)
   1e610:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
   1e614:	e0bff817 	ldw	r2,-32(fp)
   1e618:	10800517 	ldw	r2,20(r2)
   1e61c:	e0fff817 	ldw	r3,-32(fp)
   1e620:	18c00617 	ldw	r3,24(r3)
   1e624:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
   1e628:	d0e84e17 	ldw	r3,-24264(gp)
   1e62c:	e0bff817 	ldw	r2,-32(fp)
   1e630:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
   1e634:	e0bff817 	ldw	r2,-32(fp)
   1e638:	d0a84e15 	stw	r2,-24264(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
   1e63c:	e0bff817 	ldw	r2,-32(fp)
   1e640:	00c00fc4 	movi	r3,63
   1e644:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
   1e648:	e0bff817 	ldw	r2,-32(fp)
   1e64c:	10001345 	stb	zero,77(r2)
   1e650:	e0bff617 	ldw	r2,-40(fp)
   1e654:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e658:	e0bffc17 	ldw	r2,-16(fp)
   1e65c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
   1e660:	d0a84743 	ldbu	r2,-24291(gp)
   1e664:	10803fcc 	andi	r2,r2,255
   1e668:	10800058 	cmpnei	r2,r2,1
   1e66c:	1000011e 	bne	r2,zero,1e674 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
   1e670:	00198880 	call	19888 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1e674:	0005883a 	mov	r2,zero
}
   1e678:	e037883a 	mov	sp,fp
   1e67c:	dfc00117 	ldw	ra,4(sp)
   1e680:	df000017 	ldw	fp,0(sp)
   1e684:	dec00204 	addi	sp,sp,8
   1e688:	f800283a 	ret

0001e68c <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
   1e68c:	defff504 	addi	sp,sp,-44
   1e690:	df000a15 	stw	fp,40(sp)
   1e694:	df000a04 	addi	fp,sp,40
   1e698:	2005883a 	mov	r2,r4
   1e69c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1e6a0:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
   1e6a4:	e0bfff03 	ldbu	r2,-4(fp)
   1e6a8:	10800518 	cmpnei	r2,r2,20
   1e6ac:	1000021e 	bne	r2,zero,1e6b8 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
   1e6b0:	00800f84 	movi	r2,62
   1e6b4:	00004506 	br	1e7cc <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1e6b8:	e0bfff03 	ldbu	r2,-4(fp)
   1e6bc:	10800530 	cmpltui	r2,r2,20
   1e6c0:	1000051e 	bne	r2,zero,1e6d8 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
   1e6c4:	e0bfff03 	ldbu	r2,-4(fp)
   1e6c8:	10803fe0 	cmpeqi	r2,r2,255
   1e6cc:	1000021e 	bne	r2,zero,1e6d8 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
   1e6d0:	00800a84 	movi	r2,42
   1e6d4:	00003d06 	br	1e7cc <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
   1e6d8:	e0bfff03 	ldbu	r2,-4(fp)
   1e6dc:	10803fd8 	cmpnei	r2,r2,255
   1e6e0:	1000111e 	bne	r2,zero,1e728 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e6e4:	0005303a 	rdctl	r2,status
   1e6e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e6ec:	e0fff917 	ldw	r3,-28(fp)
   1e6f0:	00bfff84 	movi	r2,-2
   1e6f4:	1884703a 	and	r2,r3,r2
   1e6f8:	1001703a 	wrctl	status,r2
  
  return context;
   1e6fc:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
   1e700:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
   1e704:	d0a85617 	ldw	r2,-24232(gp)
   1e708:	10800dc3 	ldbu	r2,55(r2)
   1e70c:	e0bff805 	stb	r2,-32(fp)
   1e710:	e0bff617 	ldw	r2,-40(fp)
   1e714:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e718:	e0bffe17 	ldw	r2,-8(fp)
   1e71c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
   1e720:	e0bff803 	ldbu	r2,-32(fp)
   1e724:	00002906 	br	1e7cc <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e728:	0005303a 	rdctl	r2,status
   1e72c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e730:	e0fff717 	ldw	r3,-36(fp)
   1e734:	00bfff84 	movi	r2,-2
   1e738:	1884703a 	and	r2,r3,r2
   1e73c:	1001703a 	wrctl	status,r2
  
  return context;
   1e740:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
   1e744:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1e748:	e0ffff03 	ldbu	r3,-4(fp)
   1e74c:	00800134 	movhi	r2,4
   1e750:	10a09804 	addi	r2,r2,-32160
   1e754:	18c7883a 	add	r3,r3,r3
   1e758:	18c7883a 	add	r3,r3,r3
   1e75c:	10c5883a 	add	r2,r2,r3
   1e760:	10800017 	ldw	r2,0(r2)
   1e764:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
   1e768:	e0bffb17 	ldw	r2,-20(fp)
   1e76c:	1000061e 	bne	r2,zero,1e788 <OSTaskDelReq+0xfc>
   1e770:	e0bff617 	ldw	r2,-40(fp)
   1e774:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e778:	e0bffa17 	ldw	r2,-24(fp)
   1e77c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
   1e780:	008010c4 	movi	r2,67
   1e784:	00001106 	br	1e7cc <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
   1e788:	e0bffb17 	ldw	r2,-20(fp)
   1e78c:	10800058 	cmpnei	r2,r2,1
   1e790:	1000061e 	bne	r2,zero,1e7ac <OSTaskDelReq+0x120>
   1e794:	e0bff617 	ldw	r2,-40(fp)
   1e798:	e0bffc15 	stw	r2,-16(fp)
   1e79c:	e0bffc17 	ldw	r2,-16(fp)
   1e7a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
   1e7a4:	00800f44 	movi	r2,61
   1e7a8:	00000806 	br	1e7cc <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
   1e7ac:	e0bffb17 	ldw	r2,-20(fp)
   1e7b0:	00c00fc4 	movi	r3,63
   1e7b4:	10c00dc5 	stb	r3,55(r2)
   1e7b8:	e0bff617 	ldw	r2,-40(fp)
   1e7bc:	e0bffd15 	stw	r2,-12(fp)
   1e7c0:	e0bffd17 	ldw	r2,-12(fp)
   1e7c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1e7c8:	0005883a 	mov	r2,zero
}
   1e7cc:	e037883a 	mov	sp,fp
   1e7d0:	df000017 	ldw	fp,0(sp)
   1e7d4:	dec00104 	addi	sp,sp,4
   1e7d8:	f800283a 	ret

0001e7dc <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1e7dc:	defff404 	addi	sp,sp,-48
   1e7e0:	dfc00b15 	stw	ra,44(sp)
   1e7e4:	df000a15 	stw	fp,40(sp)
   1e7e8:	df000a04 	addi	fp,sp,40
   1e7ec:	2005883a 	mov	r2,r4
   1e7f0:	e17ffe15 	stw	r5,-8(fp)
   1e7f4:	e1bfff15 	stw	r6,-4(fp)
   1e7f8:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
   1e7fc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
   1e800:	e0bfff17 	ldw	r2,-4(fp)
   1e804:	1000021e 	bne	r2,zero,1e810 <OSTaskNameGet+0x34>
        return (0);
   1e808:	0005883a 	mov	r2,zero
   1e80c:	00005406 	br	1e960 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
   1e810:	e0bffd03 	ldbu	r2,-12(fp)
   1e814:	10800570 	cmpltui	r2,r2,21
   1e818:	1000081e 	bne	r2,zero,1e83c <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
   1e81c:	e0bffd03 	ldbu	r2,-12(fp)
   1e820:	10803fe0 	cmpeqi	r2,r2,255
   1e824:	1000051e 	bne	r2,zero,1e83c <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
   1e828:	e0bfff17 	ldw	r2,-4(fp)
   1e82c:	00c00a84 	movi	r3,42
   1e830:	10c00005 	stb	r3,0(r2)
            return (0);
   1e834:	0005883a 	mov	r2,zero
   1e838:	00004906 	br	1e960 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
   1e83c:	e0bffe17 	ldw	r2,-8(fp)
   1e840:	1000051e 	bne	r2,zero,1e858 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
   1e844:	e0bfff17 	ldw	r2,-4(fp)
   1e848:	00c00304 	movi	r3,12
   1e84c:	10c00005 	stb	r3,0(r2)
        return (0);
   1e850:	0005883a 	mov	r2,zero
   1e854:	00004206 	br	1e960 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
   1e858:	d0a85503 	ldbu	r2,-24236(gp)
   1e85c:	10803fcc 	andi	r2,r2,255
   1e860:	10000526 	beq	r2,zero,1e878 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
   1e864:	e0bfff17 	ldw	r2,-4(fp)
   1e868:	00c00444 	movi	r3,17
   1e86c:	10c00005 	stb	r3,0(r2)
        return (0);
   1e870:	0005883a 	mov	r2,zero
   1e874:	00003a06 	br	1e960 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e878:	0005303a 	rdctl	r2,status
   1e87c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1e880:	e0fffc17 	ldw	r3,-16(fp)
   1e884:	00bfff84 	movi	r2,-2
   1e888:	1884703a 	and	r2,r3,r2
   1e88c:	1001703a 	wrctl	status,r2
  
  return context;
   1e890:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1e894:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
   1e898:	e0bffd03 	ldbu	r2,-12(fp)
   1e89c:	10803fd8 	cmpnei	r2,r2,255
   1e8a0:	1000031e 	bne	r2,zero,1e8b0 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
   1e8a4:	d0a85617 	ldw	r2,-24232(gp)
   1e8a8:	10800c83 	ldbu	r2,50(r2)
   1e8ac:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1e8b0:	e0fffd03 	ldbu	r3,-12(fp)
   1e8b4:	00800134 	movhi	r2,4
   1e8b8:	10a09804 	addi	r2,r2,-32160
   1e8bc:	18c7883a 	add	r3,r3,r3
   1e8c0:	18c7883a 	add	r3,r3,r3
   1e8c4:	10c5883a 	add	r2,r2,r3
   1e8c8:	10800017 	ldw	r2,0(r2)
   1e8cc:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
   1e8d0:	e0bff817 	ldw	r2,-32(fp)
   1e8d4:	1000091e 	bne	r2,zero,1e8fc <OSTaskNameGet+0x120>
   1e8d8:	e0bff617 	ldw	r2,-40(fp)
   1e8dc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1e8e0:	e0bff717 	ldw	r2,-36(fp)
   1e8e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1e8e8:	e0bfff17 	ldw	r2,-4(fp)
   1e8ec:	00c010c4 	movi	r3,67
   1e8f0:	10c00005 	stb	r3,0(r2)
        return (0);
   1e8f4:	0005883a 	mov	r2,zero
   1e8f8:	00001906 	br	1e960 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
   1e8fc:	e0bff817 	ldw	r2,-32(fp)
   1e900:	10800058 	cmpnei	r2,r2,1
   1e904:	1000091e 	bne	r2,zero,1e92c <OSTaskNameGet+0x150>
   1e908:	e0bff617 	ldw	r2,-40(fp)
   1e90c:	e0bff915 	stw	r2,-28(fp)
   1e910:	e0bff917 	ldw	r2,-28(fp)
   1e914:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1e918:	e0bfff17 	ldw	r2,-4(fp)
   1e91c:	00c010c4 	movi	r3,67
   1e920:	10c00005 	stb	r3,0(r2)
        return (0);
   1e924:	0005883a 	mov	r2,zero
   1e928:	00000d06 	br	1e960 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
   1e92c:	e0bff817 	ldw	r2,-32(fp)
   1e930:	10801304 	addi	r2,r2,76
   1e934:	100b883a 	mov	r5,r2
   1e938:	e13ffe17 	ldw	r4,-8(fp)
   1e93c:	00199cc0 	call	199cc <OS_StrCopy>
   1e940:	e0bffb05 	stb	r2,-20(fp)
   1e944:	e0bff617 	ldw	r2,-40(fp)
   1e948:	e0bffa15 	stw	r2,-24(fp)
   1e94c:	e0bffa17 	ldw	r2,-24(fp)
   1e950:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1e954:	e0bfff17 	ldw	r2,-4(fp)
   1e958:	10000005 	stb	zero,0(r2)
    return (len);
   1e95c:	e0bffb03 	ldbu	r2,-20(fp)
}
   1e960:	e037883a 	mov	sp,fp
   1e964:	dfc00117 	ldw	ra,4(sp)
   1e968:	df000017 	ldw	fp,0(sp)
   1e96c:	dec00204 	addi	sp,sp,8
   1e970:	f800283a 	ret

0001e974 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
   1e974:	defff304 	addi	sp,sp,-52
   1e978:	dfc00c15 	stw	ra,48(sp)
   1e97c:	df000b15 	stw	fp,44(sp)
   1e980:	df000b04 	addi	fp,sp,44
   1e984:	2005883a 	mov	r2,r4
   1e988:	e17ffe15 	stw	r5,-8(fp)
   1e98c:	e1bfff15 	stw	r6,-4(fp)
   1e990:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1e994:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
   1e998:	e0bfff17 	ldw	r2,-4(fp)
   1e99c:	10005c26 	beq	r2,zero,1eb10 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
   1e9a0:	e0bffd03 	ldbu	r2,-12(fp)
   1e9a4:	10800570 	cmpltui	r2,r2,21
   1e9a8:	1000071e 	bne	r2,zero,1e9c8 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
   1e9ac:	e0bffd03 	ldbu	r2,-12(fp)
   1e9b0:	10803fe0 	cmpeqi	r2,r2,255
   1e9b4:	1000041e 	bne	r2,zero,1e9c8 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
   1e9b8:	e0bfff17 	ldw	r2,-4(fp)
   1e9bc:	00c00a84 	movi	r3,42
   1e9c0:	10c00005 	stb	r3,0(r2)
            return;
   1e9c4:	00005306 	br	1eb14 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
   1e9c8:	e0bffe17 	ldw	r2,-8(fp)
   1e9cc:	1000041e 	bne	r2,zero,1e9e0 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
   1e9d0:	e0bfff17 	ldw	r2,-4(fp)
   1e9d4:	00c00304 	movi	r3,12
   1e9d8:	10c00005 	stb	r3,0(r2)
        return;
   1e9dc:	00004d06 	br	1eb14 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
   1e9e0:	d0a85503 	ldbu	r2,-24236(gp)
   1e9e4:	10803fcc 	andi	r2,r2,255
   1e9e8:	10000426 	beq	r2,zero,1e9fc <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
   1e9ec:	e0bfff17 	ldw	r2,-4(fp)
   1e9f0:	00c00484 	movi	r3,18
   1e9f4:	10c00005 	stb	r3,0(r2)
        return;
   1e9f8:	00004606 	br	1eb14 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1e9fc:	0005303a 	rdctl	r2,status
   1ea00:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ea04:	e0fffc17 	ldw	r3,-16(fp)
   1ea08:	00bfff84 	movi	r2,-2
   1ea0c:	1884703a 	and	r2,r3,r2
   1ea10:	1001703a 	wrctl	status,r2
  
  return context;
   1ea14:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
   1ea18:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
   1ea1c:	e0bffd03 	ldbu	r2,-12(fp)
   1ea20:	10803fd8 	cmpnei	r2,r2,255
   1ea24:	1000031e 	bne	r2,zero,1ea34 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
   1ea28:	d0a85617 	ldw	r2,-24232(gp)
   1ea2c:	10800c83 	ldbu	r2,50(r2)
   1ea30:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1ea34:	e0fffd03 	ldbu	r3,-12(fp)
   1ea38:	00800134 	movhi	r2,4
   1ea3c:	10a09804 	addi	r2,r2,-32160
   1ea40:	18c7883a 	add	r3,r3,r3
   1ea44:	18c7883a 	add	r3,r3,r3
   1ea48:	10c5883a 	add	r2,r2,r3
   1ea4c:	10800017 	ldw	r2,0(r2)
   1ea50:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
   1ea54:	e0bff717 	ldw	r2,-36(fp)
   1ea58:	1000081e 	bne	r2,zero,1ea7c <OSTaskNameSet+0x108>
   1ea5c:	e0bff517 	ldw	r2,-44(fp)
   1ea60:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1ea64:	e0bff617 	ldw	r2,-40(fp)
   1ea68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1ea6c:	e0bfff17 	ldw	r2,-4(fp)
   1ea70:	00c010c4 	movi	r3,67
   1ea74:	10c00005 	stb	r3,0(r2)
        return;
   1ea78:	00002606 	br	1eb14 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
   1ea7c:	e0bff717 	ldw	r2,-36(fp)
   1ea80:	10800058 	cmpnei	r2,r2,1
   1ea84:	1000081e 	bne	r2,zero,1eaa8 <OSTaskNameSet+0x134>
   1ea88:	e0bff517 	ldw	r2,-44(fp)
   1ea8c:	e0bff815 	stw	r2,-32(fp)
   1ea90:	e0bff817 	ldw	r2,-32(fp)
   1ea94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
   1ea98:	e0bfff17 	ldw	r2,-4(fp)
   1ea9c:	00c010c4 	movi	r3,67
   1eaa0:	10c00005 	stb	r3,0(r2)
        return;
   1eaa4:	00001b06 	br	1eb14 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
   1eaa8:	e13ffe17 	ldw	r4,-8(fp)
   1eaac:	0019a400 	call	19a40 <OS_StrLen>
   1eab0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
   1eab4:	e0bffa03 	ldbu	r2,-24(fp)
   1eab8:	10800830 	cmpltui	r2,r2,32
   1eabc:	1000081e 	bne	r2,zero,1eae0 <OSTaskNameSet+0x16c>
   1eac0:	e0bff517 	ldw	r2,-44(fp)
   1eac4:	e0bff915 	stw	r2,-28(fp)
   1eac8:	e0bff917 	ldw	r2,-28(fp)
   1eacc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
   1ead0:	e0bfff17 	ldw	r2,-4(fp)
   1ead4:	00c01044 	movi	r3,65
   1ead8:	10c00005 	stb	r3,0(r2)
        return;
   1eadc:	00000d06 	br	1eb14 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
   1eae0:	e0bff717 	ldw	r2,-36(fp)
   1eae4:	10801304 	addi	r2,r2,76
   1eae8:	e17ffe17 	ldw	r5,-8(fp)
   1eaec:	1009883a 	mov	r4,r2
   1eaf0:	00199cc0 	call	199cc <OS_StrCopy>
   1eaf4:	e0bff517 	ldw	r2,-44(fp)
   1eaf8:	e0bffb15 	stw	r2,-20(fp)
   1eafc:	e0bffb17 	ldw	r2,-20(fp)
   1eb00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
   1eb04:	e0bfff17 	ldw	r2,-4(fp)
   1eb08:	10000005 	stb	zero,0(r2)
   1eb0c:	00000106 	br	1eb14 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
   1eb10:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
   1eb14:	e037883a 	mov	sp,fp
   1eb18:	dfc00117 	ldw	ra,4(sp)
   1eb1c:	df000017 	ldw	fp,0(sp)
   1eb20:	dec00204 	addi	sp,sp,8
   1eb24:	f800283a 	ret

0001eb28 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
   1eb28:	defff404 	addi	sp,sp,-48
   1eb2c:	dfc00b15 	stw	ra,44(sp)
   1eb30:	df000a15 	stw	fp,40(sp)
   1eb34:	df000a04 	addi	fp,sp,40
   1eb38:	2005883a 	mov	r2,r4
   1eb3c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
   1eb40:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
   1eb44:	e0bfff03 	ldbu	r2,-4(fp)
   1eb48:	10800530 	cmpltui	r2,r2,20
   1eb4c:	1000021e 	bne	r2,zero,1eb58 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1eb50:	00800a84 	movi	r2,42
   1eb54:	00006406 	br	1ece8 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1eb58:	0005303a 	rdctl	r2,status
   1eb5c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1eb60:	e0fffe17 	ldw	r3,-8(fp)
   1eb64:	00bfff84 	movi	r2,-2
   1eb68:	1884703a 	and	r2,r3,r2
   1eb6c:	1001703a 	wrctl	status,r2
  
  return context;
   1eb70:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1eb74:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
   1eb78:	e0ffff03 	ldbu	r3,-4(fp)
   1eb7c:	00800134 	movhi	r2,4
   1eb80:	10a09804 	addi	r2,r2,-32160
   1eb84:	18c7883a 	add	r3,r3,r3
   1eb88:	18c7883a 	add	r3,r3,r3
   1eb8c:	10c5883a 	add	r2,r2,r3
   1eb90:	10800017 	ldw	r2,0(r2)
   1eb94:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
   1eb98:	e0bff817 	ldw	r2,-32(fp)
   1eb9c:	1000061e 	bne	r2,zero,1ebb8 <OSTaskResume+0x90>
   1eba0:	e0bff617 	ldw	r2,-40(fp)
   1eba4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1eba8:	e0bff717 	ldw	r2,-36(fp)
   1ebac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
   1ebb0:	00801184 	movi	r2,70
   1ebb4:	00004c06 	br	1ece8 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
   1ebb8:	e0bff817 	ldw	r2,-32(fp)
   1ebbc:	10800058 	cmpnei	r2,r2,1
   1ebc0:	1000061e 	bne	r2,zero,1ebdc <OSTaskResume+0xb4>
   1ebc4:	e0bff617 	ldw	r2,-40(fp)
   1ebc8:	e0bff915 	stw	r2,-28(fp)
   1ebcc:	e0bff917 	ldw	r2,-28(fp)
   1ebd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1ebd4:	008010c4 	movi	r2,67
   1ebd8:	00004306 	br	1ece8 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
   1ebdc:	e0bff817 	ldw	r2,-32(fp)
   1ebe0:	10800c03 	ldbu	r2,48(r2)
   1ebe4:	10803fcc 	andi	r2,r2,255
   1ebe8:	1080020c 	andi	r2,r2,8
   1ebec:	10003926 	beq	r2,zero,1ecd4 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
   1ebf0:	e0bff817 	ldw	r2,-32(fp)
   1ebf4:	10c00c03 	ldbu	r3,48(r2)
   1ebf8:	00bffdc4 	movi	r2,-9
   1ebfc:	1884703a 	and	r2,r3,r2
   1ec00:	1007883a 	mov	r3,r2
   1ec04:	e0bff817 	ldw	r2,-32(fp)
   1ec08:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
   1ec0c:	e0bff817 	ldw	r2,-32(fp)
   1ec10:	10800c03 	ldbu	r2,48(r2)
   1ec14:	10803fcc 	andi	r2,r2,255
   1ec18:	1000281e 	bne	r2,zero,1ecbc <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
   1ec1c:	e0bff817 	ldw	r2,-32(fp)
   1ec20:	10800b8b 	ldhu	r2,46(r2)
   1ec24:	10bfffcc 	andi	r2,r2,65535
   1ec28:	10001f1e 	bne	r2,zero,1eca8 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
   1ec2c:	e0bff817 	ldw	r2,-32(fp)
   1ec30:	10c00d83 	ldbu	r3,54(r2)
   1ec34:	d0a85303 	ldbu	r2,-24244(gp)
   1ec38:	1884b03a 	or	r2,r3,r2
   1ec3c:	d0a85305 	stb	r2,-24244(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1ec40:	e0bff817 	ldw	r2,-32(fp)
   1ec44:	10800d03 	ldbu	r2,52(r2)
   1ec48:	10c03fcc 	andi	r3,r2,255
   1ec4c:	e0bff817 	ldw	r2,-32(fp)
   1ec50:	10800d03 	ldbu	r2,52(r2)
   1ec54:	11003fcc 	andi	r4,r2,255
   1ec58:	d0a85344 	addi	r2,gp,-24243
   1ec5c:	2085883a 	add	r2,r4,r2
   1ec60:	11000003 	ldbu	r4,0(r2)
   1ec64:	e0bff817 	ldw	r2,-32(fp)
   1ec68:	10800d43 	ldbu	r2,53(r2)
   1ec6c:	2084b03a 	or	r2,r4,r2
   1ec70:	1009883a 	mov	r4,r2
   1ec74:	d0a85344 	addi	r2,gp,-24243
   1ec78:	1885883a 	add	r2,r3,r2
   1ec7c:	11000005 	stb	r4,0(r2)
   1ec80:	e0bff617 	ldw	r2,-40(fp)
   1ec84:	e0bffa15 	stw	r2,-24(fp)
   1ec88:	e0bffa17 	ldw	r2,-24(fp)
   1ec8c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
   1ec90:	d0a84743 	ldbu	r2,-24291(gp)
   1ec94:	10803fcc 	andi	r2,r2,255
   1ec98:	10800058 	cmpnei	r2,r2,1
   1ec9c:	10000b1e 	bne	r2,zero,1eccc <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
   1eca0:	00198880 	call	19888 <OS_Sched>
   1eca4:	00000906 	br	1eccc <OSTaskResume+0x1a4>
   1eca8:	e0bff617 	ldw	r2,-40(fp)
   1ecac:	e0bffb15 	stw	r2,-20(fp)
   1ecb0:	e0bffb17 	ldw	r2,-20(fp)
   1ecb4:	1001703a 	wrctl	status,r2
   1ecb8:	00000406 	br	1eccc <OSTaskResume+0x1a4>
   1ecbc:	e0bff617 	ldw	r2,-40(fp)
   1ecc0:	e0bffc15 	stw	r2,-16(fp)
   1ecc4:	e0bffc17 	ldw	r2,-16(fp)
   1ecc8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
   1eccc:	0005883a 	mov	r2,zero
   1ecd0:	00000506 	br	1ece8 <OSTaskResume+0x1c0>
   1ecd4:	e0bff617 	ldw	r2,-40(fp)
   1ecd8:	e0bffd15 	stw	r2,-12(fp)
   1ecdc:	e0bffd17 	ldw	r2,-12(fp)
   1ece0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
   1ece4:	00801104 	movi	r2,68
}
   1ece8:	e037883a 	mov	sp,fp
   1ecec:	dfc00117 	ldw	ra,4(sp)
   1ecf0:	df000017 	ldw	fp,0(sp)
   1ecf4:	dec00204 	addi	sp,sp,8
   1ecf8:	f800283a 	ret

0001ecfc <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
   1ecfc:	defff304 	addi	sp,sp,-52
   1ed00:	df000c15 	stw	fp,48(sp)
   1ed04:	df000c04 	addi	fp,sp,48
   1ed08:	2005883a 	mov	r2,r4
   1ed0c:	e17fff15 	stw	r5,-4(fp)
   1ed10:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
   1ed14:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
   1ed18:	e0bffe03 	ldbu	r2,-8(fp)
   1ed1c:	10800570 	cmpltui	r2,r2,21
   1ed20:	1000051e 	bne	r2,zero,1ed38 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
   1ed24:	e0bffe03 	ldbu	r2,-8(fp)
   1ed28:	10803fe0 	cmpeqi	r2,r2,255
   1ed2c:	1000021e 	bne	r2,zero,1ed38 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
   1ed30:	00800a84 	movi	r2,42
   1ed34:	00005d06 	br	1eeac <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
   1ed38:	e0bfff17 	ldw	r2,-4(fp)
   1ed3c:	1000021e 	bne	r2,zero,1ed48 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
   1ed40:	00800244 	movi	r2,9
   1ed44:	00005906 	br	1eeac <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
   1ed48:	e0bfff17 	ldw	r2,-4(fp)
   1ed4c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
   1ed50:	e0bfff17 	ldw	r2,-4(fp)
   1ed54:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ed58:	0005303a 	rdctl	r2,status
   1ed5c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ed60:	e0fffd17 	ldw	r3,-12(fp)
   1ed64:	00bfff84 	movi	r2,-2
   1ed68:	1884703a 	and	r2,r3,r2
   1ed6c:	1001703a 	wrctl	status,r2
  
  return context;
   1ed70:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
   1ed74:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
   1ed78:	e0bffe03 	ldbu	r2,-8(fp)
   1ed7c:	10803fd8 	cmpnei	r2,r2,255
   1ed80:	1000031e 	bne	r2,zero,1ed90 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
   1ed84:	d0a85617 	ldw	r2,-24232(gp)
   1ed88:	10800c83 	ldbu	r2,50(r2)
   1ed8c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1ed90:	e0fffe03 	ldbu	r3,-8(fp)
   1ed94:	00800134 	movhi	r2,4
   1ed98:	10a09804 	addi	r2,r2,-32160
   1ed9c:	18c7883a 	add	r3,r3,r3
   1eda0:	18c7883a 	add	r3,r3,r3
   1eda4:	10c5883a 	add	r2,r2,r3
   1eda8:	10800017 	ldw	r2,0(r2)
   1edac:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
   1edb0:	e0bff817 	ldw	r2,-32(fp)
   1edb4:	1000061e 	bne	r2,zero,1edd0 <OSTaskStkChk+0xd4>
   1edb8:	e0bff617 	ldw	r2,-40(fp)
   1edbc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1edc0:	e0bff717 	ldw	r2,-36(fp)
   1edc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1edc8:	008010c4 	movi	r2,67
   1edcc:	00003706 	br	1eeac <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1edd0:	e0bff817 	ldw	r2,-32(fp)
   1edd4:	10800058 	cmpnei	r2,r2,1
   1edd8:	1000061e 	bne	r2,zero,1edf4 <OSTaskStkChk+0xf8>
   1eddc:	e0bff617 	ldw	r2,-40(fp)
   1ede0:	e0bff915 	stw	r2,-28(fp)
   1ede4:	e0bff917 	ldw	r2,-28(fp)
   1ede8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1edec:	008010c4 	movi	r2,67
   1edf0:	00002e06 	br	1eeac <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
   1edf4:	e0bff817 	ldw	r2,-32(fp)
   1edf8:	1080040b 	ldhu	r2,16(r2)
   1edfc:	10bfffcc 	andi	r2,r2,65535
   1ee00:	1080004c 	andi	r2,r2,1
   1ee04:	1000061e 	bne	r2,zero,1ee20 <OSTaskStkChk+0x124>
   1ee08:	e0bff617 	ldw	r2,-40(fp)
   1ee0c:	e0bffa15 	stw	r2,-24(fp)
   1ee10:	e0bffa17 	ldw	r2,-24(fp)
   1ee14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
   1ee18:	00801144 	movi	r2,69
   1ee1c:	00002306 	br	1eeac <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
   1ee20:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
   1ee24:	e0bff817 	ldw	r2,-32(fp)
   1ee28:	10800317 	ldw	r2,12(r2)
   1ee2c:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
   1ee30:	e0bff817 	ldw	r2,-32(fp)
   1ee34:	10800217 	ldw	r2,8(r2)
   1ee38:	e0bff415 	stw	r2,-48(fp)
   1ee3c:	e0bff617 	ldw	r2,-40(fp)
   1ee40:	e0bffb15 	stw	r2,-20(fp)
   1ee44:	e0bffb17 	ldw	r2,-20(fp)
   1ee48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1ee4c:	00000306 	br	1ee5c <OSTaskStkChk+0x160>
        nfree++;
   1ee50:	e0bff517 	ldw	r2,-44(fp)
   1ee54:	10800044 	addi	r2,r2,1
   1ee58:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
   1ee5c:	e0bff417 	ldw	r2,-48(fp)
   1ee60:	10c00104 	addi	r3,r2,4
   1ee64:	e0fff415 	stw	r3,-48(fp)
   1ee68:	10800017 	ldw	r2,0(r2)
   1ee6c:	103ff826 	beq	r2,zero,1ee50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701ee50>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
   1ee70:	e0bff517 	ldw	r2,-44(fp)
   1ee74:	1085883a 	add	r2,r2,r2
   1ee78:	1085883a 	add	r2,r2,r2
   1ee7c:	1007883a 	mov	r3,r2
   1ee80:	e0bfff17 	ldw	r2,-4(fp)
   1ee84:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
   1ee88:	e0fffc17 	ldw	r3,-16(fp)
   1ee8c:	e0bff517 	ldw	r2,-44(fp)
   1ee90:	1885c83a 	sub	r2,r3,r2
   1ee94:	1085883a 	add	r2,r2,r2
   1ee98:	1085883a 	add	r2,r2,r2
   1ee9c:	1007883a 	mov	r3,r2
   1eea0:	e0bfff17 	ldw	r2,-4(fp)
   1eea4:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
   1eea8:	0005883a 	mov	r2,zero
}
   1eeac:	e037883a 	mov	sp,fp
   1eeb0:	df000017 	ldw	fp,0(sp)
   1eeb4:	dec00104 	addi	sp,sp,4
   1eeb8:	f800283a 	ret

0001eebc <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
   1eebc:	defff504 	addi	sp,sp,-44
   1eec0:	dfc00a15 	stw	ra,40(sp)
   1eec4:	df000915 	stw	fp,36(sp)
   1eec8:	df000904 	addi	fp,sp,36
   1eecc:	2005883a 	mov	r2,r4
   1eed0:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1eed4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
   1eed8:	e0bfff03 	ldbu	r2,-4(fp)
   1eedc:	10800518 	cmpnei	r2,r2,20
   1eee0:	1000021e 	bne	r2,zero,1eeec <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
   1eee4:	008011c4 	movi	r2,71
   1eee8:	00006806 	br	1f08c <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
   1eeec:	e0bfff03 	ldbu	r2,-4(fp)
   1eef0:	10800530 	cmpltui	r2,r2,20
   1eef4:	1000051e 	bne	r2,zero,1ef0c <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
   1eef8:	e0bfff03 	ldbu	r2,-4(fp)
   1eefc:	10803fe0 	cmpeqi	r2,r2,255
   1ef00:	1000021e 	bne	r2,zero,1ef0c <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
   1ef04:	00800a84 	movi	r2,42
   1ef08:	00006006 	br	1f08c <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1ef0c:	0005303a 	rdctl	r2,status
   1ef10:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1ef14:	e0fffe17 	ldw	r3,-8(fp)
   1ef18:	00bfff84 	movi	r2,-2
   1ef1c:	1884703a 	and	r2,r3,r2
   1ef20:	1001703a 	wrctl	status,r2
  
  return context;
   1ef24:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
   1ef28:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
   1ef2c:	e0bfff03 	ldbu	r2,-4(fp)
   1ef30:	10803fd8 	cmpnei	r2,r2,255
   1ef34:	1000061e 	bne	r2,zero,1ef50 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
   1ef38:	d0a85617 	ldw	r2,-24232(gp)
   1ef3c:	10800c83 	ldbu	r2,50(r2)
   1ef40:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
   1ef44:	00800044 	movi	r2,1
   1ef48:	e0bff705 	stb	r2,-36(fp)
   1ef4c:	00000906 	br	1ef74 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
   1ef50:	d0a85617 	ldw	r2,-24232(gp)
   1ef54:	10800c83 	ldbu	r2,50(r2)
   1ef58:	10c03fcc 	andi	r3,r2,255
   1ef5c:	e0bfff03 	ldbu	r2,-4(fp)
   1ef60:	1880031e 	bne	r3,r2,1ef70 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
   1ef64:	00800044 	movi	r2,1
   1ef68:	e0bff705 	stb	r2,-36(fp)
   1ef6c:	00000106 	br	1ef74 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
   1ef70:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1ef74:	e0ffff03 	ldbu	r3,-4(fp)
   1ef78:	00800134 	movhi	r2,4
   1ef7c:	10a09804 	addi	r2,r2,-32160
   1ef80:	18c7883a 	add	r3,r3,r3
   1ef84:	18c7883a 	add	r3,r3,r3
   1ef88:	10c5883a 	add	r2,r2,r3
   1ef8c:	10800017 	ldw	r2,0(r2)
   1ef90:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
   1ef94:	e0bffa17 	ldw	r2,-24(fp)
   1ef98:	1000061e 	bne	r2,zero,1efb4 <OSTaskSuspend+0xf8>
   1ef9c:	e0bff817 	ldw	r2,-32(fp)
   1efa0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1efa4:	e0bff917 	ldw	r2,-28(fp)
   1efa8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
   1efac:	00801204 	movi	r2,72
   1efb0:	00003606 	br	1f08c <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
   1efb4:	e0bffa17 	ldw	r2,-24(fp)
   1efb8:	10800058 	cmpnei	r2,r2,1
   1efbc:	1000061e 	bne	r2,zero,1efd8 <OSTaskSuspend+0x11c>
   1efc0:	e0bff817 	ldw	r2,-32(fp)
   1efc4:	e0bffb15 	stw	r2,-20(fp)
   1efc8:	e0bffb17 	ldw	r2,-20(fp)
   1efcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1efd0:	008010c4 	movi	r2,67
   1efd4:	00002d06 	br	1f08c <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
   1efd8:	e0bffa17 	ldw	r2,-24(fp)
   1efdc:	10800d03 	ldbu	r2,52(r2)
   1efe0:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
   1efe4:	e0fffd03 	ldbu	r3,-12(fp)
   1efe8:	e13ffd03 	ldbu	r4,-12(fp)
   1efec:	d0a85344 	addi	r2,gp,-24243
   1eff0:	2085883a 	add	r2,r4,r2
   1eff4:	10800003 	ldbu	r2,0(r2)
   1eff8:	1009883a 	mov	r4,r2
   1effc:	e0bffa17 	ldw	r2,-24(fp)
   1f000:	10800d43 	ldbu	r2,53(r2)
   1f004:	0084303a 	nor	r2,zero,r2
   1f008:	2084703a 	and	r2,r4,r2
   1f00c:	1009883a 	mov	r4,r2
   1f010:	d0a85344 	addi	r2,gp,-24243
   1f014:	1885883a 	add	r2,r3,r2
   1f018:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
   1f01c:	e0fffd03 	ldbu	r3,-12(fp)
   1f020:	d0a85344 	addi	r2,gp,-24243
   1f024:	1885883a 	add	r2,r3,r2
   1f028:	10800003 	ldbu	r2,0(r2)
   1f02c:	10803fcc 	andi	r2,r2,255
   1f030:	1000071e 	bne	r2,zero,1f050 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
   1f034:	e0bffa17 	ldw	r2,-24(fp)
   1f038:	10800d83 	ldbu	r2,54(r2)
   1f03c:	0084303a 	nor	r2,zero,r2
   1f040:	1007883a 	mov	r3,r2
   1f044:	d0a85303 	ldbu	r2,-24244(gp)
   1f048:	1884703a 	and	r2,r3,r2
   1f04c:	d0a85305 	stb	r2,-24244(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
   1f050:	e0bffa17 	ldw	r2,-24(fp)
   1f054:	10800c03 	ldbu	r2,48(r2)
   1f058:	10800214 	ori	r2,r2,8
   1f05c:	1007883a 	mov	r3,r2
   1f060:	e0bffa17 	ldw	r2,-24(fp)
   1f064:	10c00c05 	stb	r3,48(r2)
   1f068:	e0bff817 	ldw	r2,-32(fp)
   1f06c:	e0bffc15 	stw	r2,-16(fp)
   1f070:	e0bffc17 	ldw	r2,-16(fp)
   1f074:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
   1f078:	e0bff703 	ldbu	r2,-36(fp)
   1f07c:	10800058 	cmpnei	r2,r2,1
   1f080:	1000011e 	bne	r2,zero,1f088 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
   1f084:	00198880 	call	19888 <OS_Sched>
    }
    return (OS_ERR_NONE);
   1f088:	0005883a 	mov	r2,zero
}
   1f08c:	e037883a 	mov	sp,fp
   1f090:	dfc00117 	ldw	ra,4(sp)
   1f094:	df000017 	ldw	fp,0(sp)
   1f098:	dec00204 	addi	sp,sp,8
   1f09c:	f800283a 	ret

0001f0a0 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
   1f0a0:	defff604 	addi	sp,sp,-40
   1f0a4:	dfc00915 	stw	ra,36(sp)
   1f0a8:	df000815 	stw	fp,32(sp)
   1f0ac:	df000804 	addi	fp,sp,32
   1f0b0:	2005883a 	mov	r2,r4
   1f0b4:	e17fff15 	stw	r5,-4(fp)
   1f0b8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1f0bc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
   1f0c0:	e0bffe03 	ldbu	r2,-8(fp)
   1f0c4:	10800570 	cmpltui	r2,r2,21
   1f0c8:	1000051e 	bne	r2,zero,1f0e0 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
   1f0cc:	e0bffe03 	ldbu	r2,-8(fp)
   1f0d0:	10803fe0 	cmpeqi	r2,r2,255
   1f0d4:	1000021e 	bne	r2,zero,1f0e0 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
   1f0d8:	00800a84 	movi	r2,42
   1f0dc:	00003406 	br	1f1b0 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
   1f0e0:	e0bfff17 	ldw	r2,-4(fp)
   1f0e4:	1000021e 	bne	r2,zero,1f0f0 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
   1f0e8:	00800244 	movi	r2,9
   1f0ec:	00003006 	br	1f1b0 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f0f0:	0005303a 	rdctl	r2,status
   1f0f4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f0f8:	e0fffd17 	ldw	r3,-12(fp)
   1f0fc:	00bfff84 	movi	r2,-2
   1f100:	1884703a 	and	r2,r3,r2
   1f104:	1001703a 	wrctl	status,r2
  
  return context;
   1f108:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
   1f10c:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
   1f110:	e0bffe03 	ldbu	r2,-8(fp)
   1f114:	10803fd8 	cmpnei	r2,r2,255
   1f118:	1000031e 	bne	r2,zero,1f128 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
   1f11c:	d0a85617 	ldw	r2,-24232(gp)
   1f120:	10800c83 	ldbu	r2,50(r2)
   1f124:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
   1f128:	e0fffe03 	ldbu	r3,-8(fp)
   1f12c:	00800134 	movhi	r2,4
   1f130:	10a09804 	addi	r2,r2,-32160
   1f134:	18c7883a 	add	r3,r3,r3
   1f138:	18c7883a 	add	r3,r3,r3
   1f13c:	10c5883a 	add	r2,r2,r3
   1f140:	10800017 	ldw	r2,0(r2)
   1f144:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
   1f148:	e0bffa17 	ldw	r2,-24(fp)
   1f14c:	1000061e 	bne	r2,zero,1f168 <OSTaskQuery+0xc8>
   1f150:	e0bff817 	ldw	r2,-32(fp)
   1f154:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f158:	e0bff917 	ldw	r2,-28(fp)
   1f15c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
   1f160:	00800a44 	movi	r2,41
   1f164:	00001206 	br	1f1b0 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
   1f168:	e0bffa17 	ldw	r2,-24(fp)
   1f16c:	10800058 	cmpnei	r2,r2,1
   1f170:	1000061e 	bne	r2,zero,1f18c <OSTaskQuery+0xec>
   1f174:	e0bff817 	ldw	r2,-32(fp)
   1f178:	e0bffb15 	stw	r2,-20(fp)
   1f17c:	e0bffb17 	ldw	r2,-20(fp)
   1f180:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
   1f184:	008010c4 	movi	r2,67
   1f188:	00000906 	br	1f1b0 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
   1f18c:	01801b04 	movi	r6,108
   1f190:	e17ffa17 	ldw	r5,-24(fp)
   1f194:	e13fff17 	ldw	r4,-4(fp)
   1f198:	00198200 	call	19820 <OS_MemCopy>
   1f19c:	e0bff817 	ldw	r2,-32(fp)
   1f1a0:	e0bffc15 	stw	r2,-16(fp)
   1f1a4:	e0bffc17 	ldw	r2,-16(fp)
   1f1a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
   1f1ac:	0005883a 	mov	r2,zero
}
   1f1b0:	e037883a 	mov	sp,fp
   1f1b4:	dfc00117 	ldw	ra,4(sp)
   1f1b8:	df000017 	ldw	fp,0(sp)
   1f1bc:	dec00204 	addi	sp,sp,8
   1f1c0:	f800283a 	ret

0001f1c4 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
   1f1c4:	defffc04 	addi	sp,sp,-16
   1f1c8:	df000315 	stw	fp,12(sp)
   1f1cc:	df000304 	addi	fp,sp,12
   1f1d0:	e13ffd15 	stw	r4,-12(fp)
   1f1d4:	e17ffe15 	stw	r5,-8(fp)
   1f1d8:	3005883a 	mov	r2,r6
   1f1dc:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
   1f1e0:	e0bfff0b 	ldhu	r2,-4(fp)
   1f1e4:	1080004c 	andi	r2,r2,1
   1f1e8:	10000d26 	beq	r2,zero,1f220 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
   1f1ec:	e0bfff0b 	ldhu	r2,-4(fp)
   1f1f0:	1080008c 	andi	r2,r2,2
   1f1f4:	10000a26 	beq	r2,zero,1f220 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1f1f8:	00000706 	br	1f218 <OS_TaskStkClr+0x54>
                size--;
   1f1fc:	e0bffe17 	ldw	r2,-8(fp)
   1f200:	10bfffc4 	addi	r2,r2,-1
   1f204:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
   1f208:	e0bffd17 	ldw	r2,-12(fp)
   1f20c:	10c00104 	addi	r3,r2,4
   1f210:	e0fffd15 	stw	r3,-12(fp)
   1f214:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
   1f218:	e0bffe17 	ldw	r2,-8(fp)
   1f21c:	103ff71e 	bne	r2,zero,1f1fc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701f1fc>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
   1f220:	0001883a 	nop
   1f224:	e037883a 	mov	sp,fp
   1f228:	df000017 	ldw	fp,0(sp)
   1f22c:	dec00104 	addi	sp,sp,4
   1f230:	f800283a 	ret

0001f234 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
   1f234:	defff904 	addi	sp,sp,-28
   1f238:	dfc00615 	stw	ra,24(sp)
   1f23c:	df000515 	stw	fp,20(sp)
   1f240:	df000504 	addi	fp,sp,20
   1f244:	2005883a 	mov	r2,r4
   1f248:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1f24c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1f250:	d0a85503 	ldbu	r2,-24236(gp)
   1f254:	10803fcc 	andi	r2,r2,255
   1f258:	1000311e 	bne	r2,zero,1f320 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
   1f25c:	e0bfff0b 	ldhu	r2,-4(fp)
   1f260:	10003026 	beq	r2,zero,1f324 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f264:	0005303a 	rdctl	r2,status
   1f268:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f26c:	e0fffe17 	ldw	r3,-8(fp)
   1f270:	00bfff84 	movi	r2,-2
   1f274:	1884703a 	and	r2,r3,r2
   1f278:	1001703a 	wrctl	status,r2
  
  return context;
   1f27c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
   1f280:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
   1f284:	d0a85617 	ldw	r2,-24232(gp)
   1f288:	10800d03 	ldbu	r2,52(r2)
   1f28c:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
   1f290:	e0fffd03 	ldbu	r3,-12(fp)
   1f294:	e13ffd03 	ldbu	r4,-12(fp)
   1f298:	d0a85344 	addi	r2,gp,-24243
   1f29c:	2085883a 	add	r2,r4,r2
   1f2a0:	10800003 	ldbu	r2,0(r2)
   1f2a4:	1009883a 	mov	r4,r2
   1f2a8:	d0a85617 	ldw	r2,-24232(gp)
   1f2ac:	10800d43 	ldbu	r2,53(r2)
   1f2b0:	0084303a 	nor	r2,zero,r2
   1f2b4:	2084703a 	and	r2,r4,r2
   1f2b8:	1009883a 	mov	r4,r2
   1f2bc:	d0a85344 	addi	r2,gp,-24243
   1f2c0:	1885883a 	add	r2,r3,r2
   1f2c4:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
   1f2c8:	e0fffd03 	ldbu	r3,-12(fp)
   1f2cc:	d0a85344 	addi	r2,gp,-24243
   1f2d0:	1885883a 	add	r2,r3,r2
   1f2d4:	10800003 	ldbu	r2,0(r2)
   1f2d8:	10803fcc 	andi	r2,r2,255
   1f2dc:	1000071e 	bne	r2,zero,1f2fc <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
   1f2e0:	d0a85617 	ldw	r2,-24232(gp)
   1f2e4:	10800d83 	ldbu	r2,54(r2)
   1f2e8:	0084303a 	nor	r2,zero,r2
   1f2ec:	1007883a 	mov	r3,r2
   1f2f0:	d0a85303 	ldbu	r2,-24244(gp)
   1f2f4:	1884703a 	and	r2,r3,r2
   1f2f8:	d0a85305 	stb	r2,-24244(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
   1f2fc:	d0a85617 	ldw	r2,-24232(gp)
   1f300:	e0ffff0b 	ldhu	r3,-4(fp)
   1f304:	10c00b8d 	sth	r3,46(r2)
   1f308:	e0bffb17 	ldw	r2,-20(fp)
   1f30c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f310:	e0bffc17 	ldw	r2,-16(fp)
   1f314:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
   1f318:	00198880 	call	19888 <OS_Sched>
   1f31c:	00000106 	br	1f324 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
   1f320:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
   1f324:	e037883a 	mov	sp,fp
   1f328:	dfc00117 	ldw	ra,4(sp)
   1f32c:	df000017 	ldw	fp,0(sp)
   1f330:	dec00204 	addi	sp,sp,8
   1f334:	f800283a 	ret

0001f338 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
   1f338:	defff804 	addi	sp,sp,-32
   1f33c:	dfc00715 	stw	ra,28(sp)
   1f340:	df000615 	stw	fp,24(sp)
   1f344:	df000604 	addi	fp,sp,24
   1f348:	2015883a 	mov	r10,r4
   1f34c:	2809883a 	mov	r4,r5
   1f350:	3007883a 	mov	r3,r6
   1f354:	3805883a 	mov	r2,r7
   1f358:	e2bffc05 	stb	r10,-16(fp)
   1f35c:	e13ffd05 	stb	r4,-12(fp)
   1f360:	e0fffe05 	stb	r3,-8(fp)
   1f364:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
   1f368:	d0a85503 	ldbu	r2,-24236(gp)
   1f36c:	10803fcc 	andi	r2,r2,255
   1f370:	10000226 	beq	r2,zero,1f37c <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
   1f374:	00801544 	movi	r2,85
   1f378:	00004206 	br	1f484 <OSTimeDlyHMSM+0x14c>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
   1f37c:	e0bffc03 	ldbu	r2,-16(fp)
   1f380:	1000081e 	bne	r2,zero,1f3a4 <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
   1f384:	e0bffd03 	ldbu	r2,-12(fp)
   1f388:	1000061e 	bne	r2,zero,1f3a4 <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
   1f38c:	e0bffe03 	ldbu	r2,-8(fp)
   1f390:	1000041e 	bne	r2,zero,1f3a4 <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
   1f394:	e0bfff0b 	ldhu	r2,-4(fp)
   1f398:	1000021e 	bne	r2,zero,1f3a4 <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
   1f39c:	00801504 	movi	r2,84
   1f3a0:	00003806 	br	1f484 <OSTimeDlyHMSM+0x14c>
                }
            }
        }
    }
    if (minutes > 59) {
   1f3a4:	e0bffd03 	ldbu	r2,-12(fp)
   1f3a8:	10800f30 	cmpltui	r2,r2,60
   1f3ac:	1000021e 	bne	r2,zero,1f3b8 <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
   1f3b0:	00801444 	movi	r2,81
   1f3b4:	00003306 	br	1f484 <OSTimeDlyHMSM+0x14c>
    }
    if (seconds > 59) {
   1f3b8:	e0bffe03 	ldbu	r2,-8(fp)
   1f3bc:	10800f30 	cmpltui	r2,r2,60
   1f3c0:	1000021e 	bne	r2,zero,1f3cc <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
   1f3c4:	00801484 	movi	r2,82
   1f3c8:	00002e06 	br	1f484 <OSTimeDlyHMSM+0x14c>
    }
    if (ms > 999) {
   1f3cc:	e0bfff0b 	ldhu	r2,-4(fp)
   1f3d0:	1080fa30 	cmpltui	r2,r2,1000
   1f3d4:	1000021e 	bne	r2,zero,1f3e0 <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
   1f3d8:	008014c4 	movi	r2,83
   1f3dc:	00002906 	br	1f484 <OSTimeDlyHMSM+0x14c>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1f3e0:	e0bffc03 	ldbu	r2,-16(fp)
   1f3e4:	10c38424 	muli	r3,r2,3600
   1f3e8:	e0bffd03 	ldbu	r2,-12(fp)
   1f3ec:	10800f24 	muli	r2,r2,60
   1f3f0:	1887883a 	add	r3,r3,r2
   1f3f4:	e0bffe03 	ldbu	r2,-8(fp)
   1f3f8:	1885883a 	add	r2,r3,r2
   1f3fc:	100890fa 	slli	r4,r2,3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
   1f400:	e0bfff0b 	ldhu	r2,-4(fp)
   1f404:	10800f84 	addi	r2,r2,62
   1f408:	100690fa 	slli	r3,r2,3
   1f40c:	008418b4 	movhi	r2,4194
   1f410:	109374c4 	addi	r2,r2,19923
   1f414:	188a383a 	mulxuu	r5,r3,r2
   1f418:	1885383a 	mul	r2,r3,r2
   1f41c:	1011883a 	mov	r8,r2
   1f420:	2813883a 	mov	r9,r5
   1f424:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
   1f428:	2085883a 	add	r2,r4,r2
   1f42c:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
   1f430:	e0bffb17 	ldw	r2,-20(fp)
   1f434:	1004d43a 	srli	r2,r2,16
   1f438:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
   1f43c:	e0bffb17 	ldw	r2,-20(fp)
   1f440:	10bfffcc 	andi	r2,r2,65535
   1f444:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
   1f448:	e0bffb17 	ldw	r2,-20(fp)
   1f44c:	10bfffcc 	andi	r2,r2,65535
   1f450:	1009883a 	mov	r4,r2
   1f454:	001f2340 	call	1f234 <OSTimeDly>
    while (loops > 0) {
   1f458:	00000706 	br	1f478 <OSTimeDlyHMSM+0x140>
        OSTimeDly((INT16U)32768u);
   1f45c:	01200014 	movui	r4,32768
   1f460:	001f2340 	call	1f234 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
   1f464:	01200014 	movui	r4,32768
   1f468:	001f2340 	call	1f234 <OSTimeDly>
        loops--;
   1f46c:	e0bffa0b 	ldhu	r2,-24(fp)
   1f470:	10bfffc4 	addi	r2,r2,-1
   1f474:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
   1f478:	e0bffa0b 	ldhu	r2,-24(fp)
   1f47c:	103ff71e 	bne	r2,zero,1f45c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf701f45c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
   1f480:	0005883a 	mov	r2,zero
}
   1f484:	e037883a 	mov	sp,fp
   1f488:	dfc00117 	ldw	ra,4(sp)
   1f48c:	df000017 	ldw	fp,0(sp)
   1f490:	dec00204 	addi	sp,sp,8
   1f494:	f800283a 	ret

0001f498 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
   1f498:	defff504 	addi	sp,sp,-44
   1f49c:	dfc00a15 	stw	ra,40(sp)
   1f4a0:	df000915 	stw	fp,36(sp)
   1f4a4:	df000904 	addi	fp,sp,36
   1f4a8:	2005883a 	mov	r2,r4
   1f4ac:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
   1f4b0:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
   1f4b4:	e0bfff03 	ldbu	r2,-4(fp)
   1f4b8:	10800530 	cmpltui	r2,r2,20
   1f4bc:	1000021e 	bne	r2,zero,1f4c8 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
   1f4c0:	00800a84 	movi	r2,42
   1f4c4:	00006406 	br	1f658 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f4c8:	0005303a 	rdctl	r2,status
   1f4cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f4d0:	e0fffe17 	ldw	r3,-8(fp)
   1f4d4:	00bfff84 	movi	r2,-2
   1f4d8:	1884703a 	and	r2,r3,r2
   1f4dc:	1001703a 	wrctl	status,r2
  
  return context;
   1f4e0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
   1f4e4:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
   1f4e8:	e0ffff03 	ldbu	r3,-4(fp)
   1f4ec:	00800134 	movhi	r2,4
   1f4f0:	10a09804 	addi	r2,r2,-32160
   1f4f4:	18c7883a 	add	r3,r3,r3
   1f4f8:	18c7883a 	add	r3,r3,r3
   1f4fc:	10c5883a 	add	r2,r2,r3
   1f500:	10800017 	ldw	r2,0(r2)
   1f504:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
   1f508:	e0bff917 	ldw	r2,-28(fp)
   1f50c:	1000061e 	bne	r2,zero,1f528 <OSTimeDlyResume+0x90>
   1f510:	e0bff717 	ldw	r2,-36(fp)
   1f514:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f518:	e0bff817 	ldw	r2,-32(fp)
   1f51c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1f520:	008010c4 	movi	r2,67
   1f524:	00004c06 	br	1f658 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
   1f528:	e0bff917 	ldw	r2,-28(fp)
   1f52c:	10800058 	cmpnei	r2,r2,1
   1f530:	1000061e 	bne	r2,zero,1f54c <OSTimeDlyResume+0xb4>
   1f534:	e0bff717 	ldw	r2,-36(fp)
   1f538:	e0bffa15 	stw	r2,-24(fp)
   1f53c:	e0bffa17 	ldw	r2,-24(fp)
   1f540:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
   1f544:	008010c4 	movi	r2,67
   1f548:	00004306 	br	1f658 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
   1f54c:	e0bff917 	ldw	r2,-28(fp)
   1f550:	10800b8b 	ldhu	r2,46(r2)
   1f554:	10bfffcc 	andi	r2,r2,65535
   1f558:	1000061e 	bne	r2,zero,1f574 <OSTimeDlyResume+0xdc>
   1f55c:	e0bff717 	ldw	r2,-36(fp)
   1f560:	e0bffb15 	stw	r2,-20(fp)
   1f564:	e0bffb17 	ldw	r2,-20(fp)
   1f568:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
   1f56c:	00801404 	movi	r2,80
   1f570:	00003906 	br	1f658 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
   1f574:	e0bff917 	ldw	r2,-28(fp)
   1f578:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
   1f57c:	e0bff917 	ldw	r2,-28(fp)
   1f580:	10800c03 	ldbu	r2,48(r2)
   1f584:	10803fcc 	andi	r2,r2,255
   1f588:	10800dcc 	andi	r2,r2,55
   1f58c:	10000b26 	beq	r2,zero,1f5bc <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
   1f590:	e0bff917 	ldw	r2,-28(fp)
   1f594:	10c00c03 	ldbu	r3,48(r2)
   1f598:	00bff204 	movi	r2,-56
   1f59c:	1884703a 	and	r2,r3,r2
   1f5a0:	1007883a 	mov	r3,r2
   1f5a4:	e0bff917 	ldw	r2,-28(fp)
   1f5a8:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
   1f5ac:	e0bff917 	ldw	r2,-28(fp)
   1f5b0:	00c00044 	movi	r3,1
   1f5b4:	10c00c45 	stb	r3,49(r2)
   1f5b8:	00000206 	br	1f5c4 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
   1f5bc:	e0bff917 	ldw	r2,-28(fp)
   1f5c0:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
   1f5c4:	e0bff917 	ldw	r2,-28(fp)
   1f5c8:	10800c03 	ldbu	r2,48(r2)
   1f5cc:	10803fcc 	andi	r2,r2,255
   1f5d0:	1080020c 	andi	r2,r2,8
   1f5d4:	10001b1e 	bne	r2,zero,1f644 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
   1f5d8:	e0bff917 	ldw	r2,-28(fp)
   1f5dc:	10c00d83 	ldbu	r3,54(r2)
   1f5e0:	d0a85303 	ldbu	r2,-24244(gp)
   1f5e4:	1884b03a 	or	r2,r3,r2
   1f5e8:	d0a85305 	stb	r2,-24244(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
   1f5ec:	e0bff917 	ldw	r2,-28(fp)
   1f5f0:	10800d03 	ldbu	r2,52(r2)
   1f5f4:	10c03fcc 	andi	r3,r2,255
   1f5f8:	e0bff917 	ldw	r2,-28(fp)
   1f5fc:	10800d03 	ldbu	r2,52(r2)
   1f600:	11003fcc 	andi	r4,r2,255
   1f604:	d0a85344 	addi	r2,gp,-24243
   1f608:	2085883a 	add	r2,r4,r2
   1f60c:	11000003 	ldbu	r4,0(r2)
   1f610:	e0bff917 	ldw	r2,-28(fp)
   1f614:	10800d43 	ldbu	r2,53(r2)
   1f618:	2084b03a 	or	r2,r4,r2
   1f61c:	1009883a 	mov	r4,r2
   1f620:	d0a85344 	addi	r2,gp,-24243
   1f624:	1885883a 	add	r2,r3,r2
   1f628:	11000005 	stb	r4,0(r2)
   1f62c:	e0bff717 	ldw	r2,-36(fp)
   1f630:	e0bffc15 	stw	r2,-16(fp)
   1f634:	e0bffc17 	ldw	r2,-16(fp)
   1f638:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
   1f63c:	00198880 	call	19888 <OS_Sched>
   1f640:	00000406 	br	1f654 <OSTimeDlyResume+0x1bc>
   1f644:	e0bff717 	ldw	r2,-36(fp)
   1f648:	e0bffd15 	stw	r2,-12(fp)
   1f64c:	e0bffd17 	ldw	r2,-12(fp)
   1f650:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
   1f654:	0005883a 	mov	r2,zero
}
   1f658:	e037883a 	mov	sp,fp
   1f65c:	dfc00117 	ldw	ra,4(sp)
   1f660:	df000017 	ldw	fp,0(sp)
   1f664:	dec00204 	addi	sp,sp,8
   1f668:	f800283a 	ret

0001f66c <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
   1f66c:	defffb04 	addi	sp,sp,-20
   1f670:	df000415 	stw	fp,16(sp)
   1f674:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1f678:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f67c:	0005303a 	rdctl	r2,status
   1f680:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f684:	e0fffe17 	ldw	r3,-8(fp)
   1f688:	00bfff84 	movi	r2,-2
   1f68c:	1884703a 	and	r2,r3,r2
   1f690:	1001703a 	wrctl	status,r2
  
  return context;
   1f694:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
   1f698:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
   1f69c:	d0a85717 	ldw	r2,-24228(gp)
   1f6a0:	e0bffd15 	stw	r2,-12(fp)
   1f6a4:	e0bffc17 	ldw	r2,-16(fp)
   1f6a8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f6ac:	e0bfff17 	ldw	r2,-4(fp)
   1f6b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
   1f6b4:	e0bffd17 	ldw	r2,-12(fp)
}
   1f6b8:	e037883a 	mov	sp,fp
   1f6bc:	df000017 	ldw	fp,0(sp)
   1f6c0:	dec00104 	addi	sp,sp,4
   1f6c4:	f800283a 	ret

0001f6c8 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
   1f6c8:	defffb04 	addi	sp,sp,-20
   1f6cc:	df000415 	stw	fp,16(sp)
   1f6d0:	df000404 	addi	fp,sp,16
   1f6d4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
   1f6d8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1f6dc:	0005303a 	rdctl	r2,status
   1f6e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1f6e4:	e0fffd17 	ldw	r3,-12(fp)
   1f6e8:	00bfff84 	movi	r2,-2
   1f6ec:	1884703a 	and	r2,r3,r2
   1f6f0:	1001703a 	wrctl	status,r2
  
  return context;
   1f6f4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
   1f6f8:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
   1f6fc:	e0bfff17 	ldw	r2,-4(fp)
   1f700:	d0a85715 	stw	r2,-24228(gp)
   1f704:	e0bffc17 	ldw	r2,-16(fp)
   1f708:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1f70c:	e0bffe17 	ldw	r2,-8(fp)
   1f710:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
   1f714:	0001883a 	nop
   1f718:	e037883a 	mov	sp,fp
   1f71c:	df000017 	ldw	fp,0(sp)
   1f720:	dec00104 	addi	sp,sp,4
   1f724:	f800283a 	ret

0001f728 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   1f728:	defffd04 	addi	sp,sp,-12
   1f72c:	dfc00215 	stw	ra,8(sp)
   1f730:	df000115 	stw	fp,4(sp)
   1f734:	df000104 	addi	fp,sp,4
   1f738:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1f73c:	d1601e04 	addi	r5,gp,-32648
   1f740:	e13fff17 	ldw	r4,-4(fp)
   1f744:	00222040 	call	22204 <alt_dev_llist_insert>
}
   1f748:	e037883a 	mov	sp,fp
   1f74c:	dfc00117 	ldw	ra,4(sp)
   1f750:	df000017 	ldw	fp,0(sp)
   1f754:	dec00204 	addi	sp,sp,8
   1f758:	f800283a 	ret

0001f75c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   1f75c:	defffd04 	addi	sp,sp,-12
   1f760:	dfc00215 	stw	ra,8(sp)
   1f764:	df000115 	stw	fp,4(sp)
   1f768:	df000104 	addi	fp,sp,4
   1f76c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, Nios2);
   1f770:	0022ae40 	call	22ae4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1f774:	00800044 	movi	r2,1
   1f778:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   1f77c:	0001883a 	nop
   1f780:	e037883a 	mov	sp,fp
   1f784:	dfc00117 	ldw	ra,4(sp)
   1f788:	df000017 	ldw	fp,0(sp)
   1f78c:	dec00204 	addi	sp,sp,8
   1f790:	f800283a 	ret

0001f794 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1f794:	defffc04 	addi	sp,sp,-16
   1f798:	dfc00315 	stw	ra,12(sp)
   1f79c:	df000215 	stw	fp,8(sp)
   1f7a0:	df000204 	addi	fp,sp,8
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
   1f7a4:	01c00204 	movi	r7,8
   1f7a8:	000d883a 	mov	r6,zero
   1f7ac:	000b883a 	mov	r5,zero
   1f7b0:	01040034 	movhi	r4,4096
   1f7b4:	21080004 	addi	r4,r4,8192
   1f7b8:	0020d480 	call	20d48 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
   1f7bc:	01800204 	movi	r6,8
   1f7c0:	000b883a 	mov	r5,zero
   1f7c4:	010000b4 	movhi	r4,2
   1f7c8:	2116a904 	addi	r4,r4,23204
   1f7cc:	002010c0 	call	2010c <altera_avalon_jtag_uart_init>
   1f7d0:	010000b4 	movhi	r4,2
   1f7d4:	21169f04 	addi	r4,r4,23164
   1f7d8:	001f7280 	call	1f728 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SysID);
   1f7dc:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
   1f7e0:	010000b4 	movhi	r4,2
   1f7e4:	211aba04 	addi	r4,r4,27368
   1f7e8:	001f7280 	call	1f728 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_SUBSYSTEM_AUDIO, Audio_Subsystem_Audio);
   1f7ec:	010000b4 	movhi	r4,2
   1f7f0:	211ac604 	addi	r4,r4,27416
   1f7f4:	001f7280 	call	1f728 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
   1f7f8:	010000b4 	movhi	r4,2
   1f7fc:	211ad204 	addi	r4,r4,27464
   1f800:	0020e700 	call	20e70 <alt_up_character_lcd_init>
   1f804:	010000b4 	movhi	r4,2
   1f808:	211ad204 	addi	r4,r4,27464
   1f80c:	001f7280 	call	1f728 <alt_dev_reg>
    ALTERA_UP_AVALON_IRDA_INIT ( IRDA, IrDA);
   1f810:	010000b4 	movhi	r4,2
   1f814:	211add04 	addi	r4,r4,27508
   1f818:	001f7280 	call	1f728 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( EXPANSION_JP5, Expansion_JP5);
   1f81c:	010000b4 	movhi	r4,2
   1f820:	211ae804 	addi	r4,r4,27552
   1f824:	001f7280 	call	1f728 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( GREEN_LEDS, Green_LEDs);
   1f828:	010000b4 	movhi	r4,2
   1f82c:	211af304 	addi	r4,r4,27596
   1f830:	001f7280 	call	1f728 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
   1f834:	010000b4 	movhi	r4,2
   1f838:	211afe04 	addi	r4,r4,27640
   1f83c:	001f7280 	call	1f728 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
   1f840:	010000b4 	movhi	r4,2
   1f844:	211b0904 	addi	r4,r4,27684
   1f848:	001f7280 	call	1f728 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
   1f84c:	010000b4 	movhi	r4,2
   1f850:	211b1404 	addi	r4,r4,27728
   1f854:	001f7280 	call	1f728 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
   1f858:	010000b4 	movhi	r4,2
   1f85c:	211b1f04 	addi	r4,r4,27772
   1f860:	001f7280 	call	1f728 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
   1f864:	010000b4 	movhi	r4,2
   1f868:	211b2a04 	addi	r4,r4,27816
   1f86c:	001f7280 	call	1f728 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
   1f870:	010000b4 	movhi	r4,2
   1f874:	211b3504 	addi	r4,r4,27860
   1f878:	00217640 	call	21764 <alt_up_ps2_init>
   1f87c:	010000b4 	movhi	r4,2
   1f880:	211b3504 	addi	r4,r4,27860
   1f884:	001f7280 	call	1f728 <alt_dev_reg>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
   1f888:	010000b4 	movhi	r4,2
   1f88c:	211b4304 	addi	r4,r4,27916
   1f890:	00217640 	call	21764 <alt_up_ps2_init>
   1f894:	010000b4 	movhi	r4,2
   1f898:	211b4304 	addi	r4,r4,27916
   1f89c:	001f7280 	call	1f728 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
   1f8a0:	010000b4 	movhi	r4,2
   1f8a4:	211b5104 	addi	r4,r4,27972
   1f8a8:	001f7280 	call	1f728 <alt_dev_reg>
    ALTERA_UP_AVALON_USB_INIT ( USB, USB);
   1f8ac:	010000b4 	movhi	r4,2
   1f8b0:	211b5c04 	addi	r4,r4,28016
   1f8b4:	001f7280 	call	1f728 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VGA_SUBSYSTEM_CHAR_BUF_SUBSYSTEM_CHAR_BUF_DMA, VGA_Subsystem_Char_Buf_Subsystem_Char_Buf_DMA);
   1f8b8:	008000b4 	movhi	r2,2
   1f8bc:	109b6904 	addi	r2,r2,28068
   1f8c0:	10800a17 	ldw	r2,40(r2)
   1f8c4:	10800017 	ldw	r2,0(r2)
   1f8c8:	1007883a 	mov	r3,r2
   1f8cc:	008000b4 	movhi	r2,2
   1f8d0:	109b6904 	addi	r2,r2,28068
   1f8d4:	10c00b15 	stw	r3,44(r2)
   1f8d8:	008000b4 	movhi	r2,2
   1f8dc:	109b6904 	addi	r2,r2,28068
   1f8e0:	10800a17 	ldw	r2,40(r2)
   1f8e4:	10800104 	addi	r2,r2,4
   1f8e8:	10800017 	ldw	r2,0(r2)
   1f8ec:	1007883a 	mov	r3,r2
   1f8f0:	008000b4 	movhi	r2,2
   1f8f4:	109b6904 	addi	r2,r2,28068
   1f8f8:	10c00c15 	stw	r3,48(r2)
   1f8fc:	008000b4 	movhi	r2,2
   1f900:	109b6904 	addi	r2,r2,28068
   1f904:	10800a17 	ldw	r2,40(r2)
   1f908:	10800204 	addi	r2,r2,8
   1f90c:	10800017 	ldw	r2,0(r2)
   1f910:	10ffffcc 	andi	r3,r2,65535
   1f914:	008000b4 	movhi	r2,2
   1f918:	109b6904 	addi	r2,r2,28068
   1f91c:	10c01115 	stw	r3,68(r2)
   1f920:	008000b4 	movhi	r2,2
   1f924:	109b6904 	addi	r2,r2,28068
   1f928:	10800a17 	ldw	r2,40(r2)
   1f92c:	10800204 	addi	r2,r2,8
   1f930:	10800017 	ldw	r2,0(r2)
   1f934:	1006d43a 	srli	r3,r2,16
   1f938:	008000b4 	movhi	r2,2
   1f93c:	109b6904 	addi	r2,r2,28068
   1f940:	10c01215 	stw	r3,72(r2)
   1f944:	008000b4 	movhi	r2,2
   1f948:	109b6904 	addi	r2,r2,28068
   1f94c:	10800a17 	ldw	r2,40(r2)
   1f950:	10800304 	addi	r2,r2,12
   1f954:	10800017 	ldw	r2,0(r2)
   1f958:	1005d07a 	srai	r2,r2,1
   1f95c:	10c0004c 	andi	r3,r2,1
   1f960:	008000b4 	movhi	r2,2
   1f964:	109b6904 	addi	r2,r2,28068
   1f968:	10c00d15 	stw	r3,52(r2)
   1f96c:	008000b4 	movhi	r2,2
   1f970:	109b6904 	addi	r2,r2,28068
   1f974:	10800a17 	ldw	r2,40(r2)
   1f978:	10800304 	addi	r2,r2,12
   1f97c:	10800017 	ldw	r2,0(r2)
   1f980:	1005d23a 	srai	r2,r2,8
   1f984:	10c003cc 	andi	r3,r2,15
   1f988:	008000b4 	movhi	r2,2
   1f98c:	109b6904 	addi	r2,r2,28068
   1f990:	10c00e15 	stw	r3,56(r2)
   1f994:	008000b4 	movhi	r2,2
   1f998:	109b6904 	addi	r2,r2,28068
   1f99c:	10800a17 	ldw	r2,40(r2)
   1f9a0:	10800304 	addi	r2,r2,12
   1f9a4:	10800017 	ldw	r2,0(r2)
   1f9a8:	1005d1ba 	srai	r2,r2,6
   1f9ac:	10c000cc 	andi	r3,r2,3
   1f9b0:	008000b4 	movhi	r2,2
   1f9b4:	109b6904 	addi	r2,r2,28068
   1f9b8:	10c00f15 	stw	r3,60(r2)
   1f9bc:	008000b4 	movhi	r2,2
   1f9c0:	109b6904 	addi	r2,r2,28068
   1f9c4:	10800e17 	ldw	r2,56(r2)
   1f9c8:	1007883a 	mov	r3,r2
   1f9cc:	008000b4 	movhi	r2,2
   1f9d0:	109b6904 	addi	r2,r2,28068
   1f9d4:	10800f17 	ldw	r2,60(r2)
   1f9d8:	1885383a 	mul	r2,r3,r2
   1f9dc:	e0bffe05 	stb	r2,-8(fp)
   1f9e0:	e0bffe03 	ldbu	r2,-8(fp)
   1f9e4:	10800268 	cmpgeui	r2,r2,9
   1f9e8:	1000051e 	bne	r2,zero,1fa00 <alt_sys_init+0x26c>
   1f9ec:	008000b4 	movhi	r2,2
   1f9f0:	109b6904 	addi	r2,r2,28068
   1f9f4:	00c00044 	movi	r3,1
   1f9f8:	10c01015 	stw	r3,64(r2)
   1f9fc:	00000c06 	br	1fa30 <alt_sys_init+0x29c>
   1fa00:	e0bffe03 	ldbu	r2,-8(fp)
   1fa04:	10800468 	cmpgeui	r2,r2,17
   1fa08:	1000051e 	bne	r2,zero,1fa20 <alt_sys_init+0x28c>
   1fa0c:	008000b4 	movhi	r2,2
   1fa10:	109b6904 	addi	r2,r2,28068
   1fa14:	00c00084 	movi	r3,2
   1fa18:	10c01015 	stw	r3,64(r2)
   1fa1c:	00000406 	br	1fa30 <alt_sys_init+0x29c>
   1fa20:	008000b4 	movhi	r2,2
   1fa24:	109b6904 	addi	r2,r2,28068
   1fa28:	00c00104 	movi	r3,4
   1fa2c:	10c01015 	stw	r3,64(r2)
   1fa30:	008000b4 	movhi	r2,2
   1fa34:	109b6904 	addi	r2,r2,28068
   1fa38:	10800a17 	ldw	r2,40(r2)
   1fa3c:	10800304 	addi	r2,r2,12
   1fa40:	10800017 	ldw	r2,0(r2)
   1fa44:	1005d43a 	srai	r2,r2,16
   1fa48:	e0bffe45 	stb	r2,-7(fp)
   1fa4c:	008000b4 	movhi	r2,2
   1fa50:	109b6904 	addi	r2,r2,28068
   1fa54:	10800a17 	ldw	r2,40(r2)
   1fa58:	10800304 	addi	r2,r2,12
   1fa5c:	10800017 	ldw	r2,0(r2)
   1fa60:	1004d63a 	srli	r2,r2,24
   1fa64:	e0bffe85 	stb	r2,-6(fp)
   1fa68:	008000b4 	movhi	r2,2
   1fa6c:	109b6904 	addi	r2,r2,28068
   1fa70:	10801017 	ldw	r2,64(r2)
   1fa74:	10800058 	cmpnei	r2,r2,1
   1fa78:	1000041e 	bne	r2,zero,1fa8c <alt_sys_init+0x2f8>
   1fa7c:	008000b4 	movhi	r2,2
   1fa80:	109b6904 	addi	r2,r2,28068
   1fa84:	10001315 	stw	zero,76(r2)
   1fa88:	00000e06 	br	1fac4 <alt_sys_init+0x330>
   1fa8c:	008000b4 	movhi	r2,2
   1fa90:	109b6904 	addi	r2,r2,28068
   1fa94:	10801017 	ldw	r2,64(r2)
   1fa98:	10800098 	cmpnei	r2,r2,2
   1fa9c:	1000051e 	bne	r2,zero,1fab4 <alt_sys_init+0x320>
   1faa0:	008000b4 	movhi	r2,2
   1faa4:	109b6904 	addi	r2,r2,28068
   1faa8:	00c00044 	movi	r3,1
   1faac:	10c01315 	stw	r3,76(r2)
   1fab0:	00000406 	br	1fac4 <alt_sys_init+0x330>
   1fab4:	008000b4 	movhi	r2,2
   1fab8:	109b6904 	addi	r2,r2,28068
   1fabc:	00c00084 	movi	r3,2
   1fac0:	10c01315 	stw	r3,76(r2)
   1fac4:	e0bffe43 	ldbu	r2,-7(fp)
   1fac8:	00c00804 	movi	r3,32
   1facc:	1885c83a 	sub	r2,r3,r2
   1fad0:	00ffffc4 	movi	r3,-1
   1fad4:	1886d83a 	srl	r3,r3,r2
   1fad8:	008000b4 	movhi	r2,2
   1fadc:	109b6904 	addi	r2,r2,28068
   1fae0:	10c01415 	stw	r3,80(r2)
   1fae4:	e0fffe43 	ldbu	r3,-7(fp)
   1fae8:	008000b4 	movhi	r2,2
   1faec:	109b6904 	addi	r2,r2,28068
   1faf0:	10801317 	ldw	r2,76(r2)
   1faf4:	1887883a 	add	r3,r3,r2
   1faf8:	008000b4 	movhi	r2,2
   1fafc:	109b6904 	addi	r2,r2,28068
   1fb00:	10c01515 	stw	r3,84(r2)
   1fb04:	e0bffe83 	ldbu	r2,-6(fp)
   1fb08:	00c00804 	movi	r3,32
   1fb0c:	1885c83a 	sub	r2,r3,r2
   1fb10:	00ffffc4 	movi	r3,-1
   1fb14:	1886d83a 	srl	r3,r3,r2
   1fb18:	008000b4 	movhi	r2,2
   1fb1c:	109b6904 	addi	r2,r2,28068
   1fb20:	10c01615 	stw	r3,88(r2)
   1fb24:	010000b4 	movhi	r4,2
   1fb28:	211b6904 	addi	r4,r4,28068
   1fb2c:	001f7280 	call	1f728 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_IN_SUBSYSTEM_VIDEO_IN_DMA, Video_In_Subsystem_Video_In_DMA);
   1fb30:	008000b4 	movhi	r2,2
   1fb34:	109b8004 	addi	r2,r2,28160
   1fb38:	10800a17 	ldw	r2,40(r2)
   1fb3c:	10800017 	ldw	r2,0(r2)
   1fb40:	1007883a 	mov	r3,r2
   1fb44:	008000b4 	movhi	r2,2
   1fb48:	109b8004 	addi	r2,r2,28160
   1fb4c:	10c00b15 	stw	r3,44(r2)
   1fb50:	008000b4 	movhi	r2,2
   1fb54:	109b8004 	addi	r2,r2,28160
   1fb58:	10800a17 	ldw	r2,40(r2)
   1fb5c:	10800104 	addi	r2,r2,4
   1fb60:	10800017 	ldw	r2,0(r2)
   1fb64:	1007883a 	mov	r3,r2
   1fb68:	008000b4 	movhi	r2,2
   1fb6c:	109b8004 	addi	r2,r2,28160
   1fb70:	10c00c15 	stw	r3,48(r2)
   1fb74:	008000b4 	movhi	r2,2
   1fb78:	109b8004 	addi	r2,r2,28160
   1fb7c:	10800a17 	ldw	r2,40(r2)
   1fb80:	10800204 	addi	r2,r2,8
   1fb84:	10800017 	ldw	r2,0(r2)
   1fb88:	10ffffcc 	andi	r3,r2,65535
   1fb8c:	008000b4 	movhi	r2,2
   1fb90:	109b8004 	addi	r2,r2,28160
   1fb94:	10c01115 	stw	r3,68(r2)
   1fb98:	008000b4 	movhi	r2,2
   1fb9c:	109b8004 	addi	r2,r2,28160
   1fba0:	10800a17 	ldw	r2,40(r2)
   1fba4:	10800204 	addi	r2,r2,8
   1fba8:	10800017 	ldw	r2,0(r2)
   1fbac:	1006d43a 	srli	r3,r2,16
   1fbb0:	008000b4 	movhi	r2,2
   1fbb4:	109b8004 	addi	r2,r2,28160
   1fbb8:	10c01215 	stw	r3,72(r2)
   1fbbc:	008000b4 	movhi	r2,2
   1fbc0:	109b8004 	addi	r2,r2,28160
   1fbc4:	10800a17 	ldw	r2,40(r2)
   1fbc8:	10800304 	addi	r2,r2,12
   1fbcc:	10800017 	ldw	r2,0(r2)
   1fbd0:	1005d07a 	srai	r2,r2,1
   1fbd4:	10c0004c 	andi	r3,r2,1
   1fbd8:	008000b4 	movhi	r2,2
   1fbdc:	109b8004 	addi	r2,r2,28160
   1fbe0:	10c00d15 	stw	r3,52(r2)
   1fbe4:	008000b4 	movhi	r2,2
   1fbe8:	109b8004 	addi	r2,r2,28160
   1fbec:	10800a17 	ldw	r2,40(r2)
   1fbf0:	10800304 	addi	r2,r2,12
   1fbf4:	10800017 	ldw	r2,0(r2)
   1fbf8:	1005d23a 	srai	r2,r2,8
   1fbfc:	10c003cc 	andi	r3,r2,15
   1fc00:	008000b4 	movhi	r2,2
   1fc04:	109b8004 	addi	r2,r2,28160
   1fc08:	10c00e15 	stw	r3,56(r2)
   1fc0c:	008000b4 	movhi	r2,2
   1fc10:	109b8004 	addi	r2,r2,28160
   1fc14:	10800a17 	ldw	r2,40(r2)
   1fc18:	10800304 	addi	r2,r2,12
   1fc1c:	10800017 	ldw	r2,0(r2)
   1fc20:	1005d1ba 	srai	r2,r2,6
   1fc24:	10c000cc 	andi	r3,r2,3
   1fc28:	008000b4 	movhi	r2,2
   1fc2c:	109b8004 	addi	r2,r2,28160
   1fc30:	10c00f15 	stw	r3,60(r2)
   1fc34:	008000b4 	movhi	r2,2
   1fc38:	109b8004 	addi	r2,r2,28160
   1fc3c:	10800e17 	ldw	r2,56(r2)
   1fc40:	1007883a 	mov	r3,r2
   1fc44:	008000b4 	movhi	r2,2
   1fc48:	109b8004 	addi	r2,r2,28160
   1fc4c:	10800f17 	ldw	r2,60(r2)
   1fc50:	1885383a 	mul	r2,r3,r2
   1fc54:	e0bffec5 	stb	r2,-5(fp)
   1fc58:	e0bffec3 	ldbu	r2,-5(fp)
   1fc5c:	10800268 	cmpgeui	r2,r2,9
   1fc60:	1000051e 	bne	r2,zero,1fc78 <alt_sys_init+0x4e4>
   1fc64:	008000b4 	movhi	r2,2
   1fc68:	109b8004 	addi	r2,r2,28160
   1fc6c:	00c00044 	movi	r3,1
   1fc70:	10c01015 	stw	r3,64(r2)
   1fc74:	00000c06 	br	1fca8 <alt_sys_init+0x514>
   1fc78:	e0bffec3 	ldbu	r2,-5(fp)
   1fc7c:	10800468 	cmpgeui	r2,r2,17
   1fc80:	1000051e 	bne	r2,zero,1fc98 <alt_sys_init+0x504>
   1fc84:	008000b4 	movhi	r2,2
   1fc88:	109b8004 	addi	r2,r2,28160
   1fc8c:	00c00084 	movi	r3,2
   1fc90:	10c01015 	stw	r3,64(r2)
   1fc94:	00000406 	br	1fca8 <alt_sys_init+0x514>
   1fc98:	008000b4 	movhi	r2,2
   1fc9c:	109b8004 	addi	r2,r2,28160
   1fca0:	00c00104 	movi	r3,4
   1fca4:	10c01015 	stw	r3,64(r2)
   1fca8:	008000b4 	movhi	r2,2
   1fcac:	109b8004 	addi	r2,r2,28160
   1fcb0:	10800a17 	ldw	r2,40(r2)
   1fcb4:	10800304 	addi	r2,r2,12
   1fcb8:	10800017 	ldw	r2,0(r2)
   1fcbc:	1005d43a 	srai	r2,r2,16
   1fcc0:	e0bfff05 	stb	r2,-4(fp)
   1fcc4:	008000b4 	movhi	r2,2
   1fcc8:	109b8004 	addi	r2,r2,28160
   1fccc:	10800a17 	ldw	r2,40(r2)
   1fcd0:	10800304 	addi	r2,r2,12
   1fcd4:	10800017 	ldw	r2,0(r2)
   1fcd8:	1004d63a 	srli	r2,r2,24
   1fcdc:	e0bfff45 	stb	r2,-3(fp)
   1fce0:	008000b4 	movhi	r2,2
   1fce4:	109b8004 	addi	r2,r2,28160
   1fce8:	10801017 	ldw	r2,64(r2)
   1fcec:	10800058 	cmpnei	r2,r2,1
   1fcf0:	1000041e 	bne	r2,zero,1fd04 <alt_sys_init+0x570>
   1fcf4:	008000b4 	movhi	r2,2
   1fcf8:	109b8004 	addi	r2,r2,28160
   1fcfc:	10001315 	stw	zero,76(r2)
   1fd00:	00000e06 	br	1fd3c <alt_sys_init+0x5a8>
   1fd04:	008000b4 	movhi	r2,2
   1fd08:	109b8004 	addi	r2,r2,28160
   1fd0c:	10801017 	ldw	r2,64(r2)
   1fd10:	10800098 	cmpnei	r2,r2,2
   1fd14:	1000051e 	bne	r2,zero,1fd2c <alt_sys_init+0x598>
   1fd18:	008000b4 	movhi	r2,2
   1fd1c:	109b8004 	addi	r2,r2,28160
   1fd20:	00c00044 	movi	r3,1
   1fd24:	10c01315 	stw	r3,76(r2)
   1fd28:	00000406 	br	1fd3c <alt_sys_init+0x5a8>
   1fd2c:	008000b4 	movhi	r2,2
   1fd30:	109b8004 	addi	r2,r2,28160
   1fd34:	00c00084 	movi	r3,2
   1fd38:	10c01315 	stw	r3,76(r2)
   1fd3c:	e0bfff03 	ldbu	r2,-4(fp)
   1fd40:	00c00804 	movi	r3,32
   1fd44:	1885c83a 	sub	r2,r3,r2
   1fd48:	00ffffc4 	movi	r3,-1
   1fd4c:	1886d83a 	srl	r3,r3,r2
   1fd50:	008000b4 	movhi	r2,2
   1fd54:	109b8004 	addi	r2,r2,28160
   1fd58:	10c01415 	stw	r3,80(r2)
   1fd5c:	e0ffff03 	ldbu	r3,-4(fp)
   1fd60:	008000b4 	movhi	r2,2
   1fd64:	109b8004 	addi	r2,r2,28160
   1fd68:	10801317 	ldw	r2,76(r2)
   1fd6c:	1887883a 	add	r3,r3,r2
   1fd70:	008000b4 	movhi	r2,2
   1fd74:	109b8004 	addi	r2,r2,28160
   1fd78:	10c01515 	stw	r3,84(r2)
   1fd7c:	e0bfff43 	ldbu	r2,-3(fp)
   1fd80:	00c00804 	movi	r3,32
   1fd84:	1885c83a 	sub	r2,r3,r2
   1fd88:	00ffffc4 	movi	r3,-1
   1fd8c:	1886d83a 	srl	r3,r3,r2
   1fd90:	008000b4 	movhi	r2,2
   1fd94:	109b8004 	addi	r2,r2,28160
   1fd98:	10c01615 	stw	r3,88(r2)
   1fd9c:	010000b4 	movhi	r4,2
   1fda0:	211b8004 	addi	r4,r4,28160
   1fda4:	001f7280 	call	1f728 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_SUBSYSTEM_VGA_PIXEL_DMA, VGA_Subsystem_VGA_Pixel_DMA);
   1fda8:	008000b4 	movhi	r2,2
   1fdac:	109b9704 	addi	r2,r2,28252
   1fdb0:	10800a17 	ldw	r2,40(r2)
   1fdb4:	10800017 	ldw	r2,0(r2)
   1fdb8:	1007883a 	mov	r3,r2
   1fdbc:	008000b4 	movhi	r2,2
   1fdc0:	109b9704 	addi	r2,r2,28252
   1fdc4:	10c00b15 	stw	r3,44(r2)
   1fdc8:	008000b4 	movhi	r2,2
   1fdcc:	109b9704 	addi	r2,r2,28252
   1fdd0:	10800a17 	ldw	r2,40(r2)
   1fdd4:	10800104 	addi	r2,r2,4
   1fdd8:	10800017 	ldw	r2,0(r2)
   1fddc:	1007883a 	mov	r3,r2
   1fde0:	008000b4 	movhi	r2,2
   1fde4:	109b9704 	addi	r2,r2,28252
   1fde8:	10c00c15 	stw	r3,48(r2)
   1fdec:	008000b4 	movhi	r2,2
   1fdf0:	109b9704 	addi	r2,r2,28252
   1fdf4:	10800a17 	ldw	r2,40(r2)
   1fdf8:	10800204 	addi	r2,r2,8
   1fdfc:	10800017 	ldw	r2,0(r2)
   1fe00:	10ffffcc 	andi	r3,r2,65535
   1fe04:	008000b4 	movhi	r2,2
   1fe08:	109b9704 	addi	r2,r2,28252
   1fe0c:	10c00f15 	stw	r3,60(r2)
   1fe10:	008000b4 	movhi	r2,2
   1fe14:	109b9704 	addi	r2,r2,28252
   1fe18:	10800a17 	ldw	r2,40(r2)
   1fe1c:	10800204 	addi	r2,r2,8
   1fe20:	10800017 	ldw	r2,0(r2)
   1fe24:	1006d43a 	srli	r3,r2,16
   1fe28:	008000b4 	movhi	r2,2
   1fe2c:	109b9704 	addi	r2,r2,28252
   1fe30:	10c01015 	stw	r3,64(r2)
   1fe34:	008000b4 	movhi	r2,2
   1fe38:	109b9704 	addi	r2,r2,28252
   1fe3c:	10800a17 	ldw	r2,40(r2)
   1fe40:	10800304 	addi	r2,r2,12
   1fe44:	10800017 	ldw	r2,0(r2)
   1fe48:	1005d07a 	srai	r2,r2,1
   1fe4c:	10c0004c 	andi	r3,r2,1
   1fe50:	008000b4 	movhi	r2,2
   1fe54:	109b9704 	addi	r2,r2,28252
   1fe58:	10c00d15 	stw	r3,52(r2)
   1fe5c:	008000b4 	movhi	r2,2
   1fe60:	109b9704 	addi	r2,r2,28252
   1fe64:	10800a17 	ldw	r2,40(r2)
   1fe68:	10800304 	addi	r2,r2,12
   1fe6c:	10800017 	ldw	r2,0(r2)
   1fe70:	1005d13a 	srai	r2,r2,4
   1fe74:	10c003cc 	andi	r3,r2,15
   1fe78:	008000b4 	movhi	r2,2
   1fe7c:	109b9704 	addi	r2,r2,28252
   1fe80:	10c00e15 	stw	r3,56(r2)
   1fe84:	008000b4 	movhi	r2,2
   1fe88:	109b9704 	addi	r2,r2,28252
   1fe8c:	10800a17 	ldw	r2,40(r2)
   1fe90:	10800304 	addi	r2,r2,12
   1fe94:	10800017 	ldw	r2,0(r2)
   1fe98:	1005d43a 	srai	r2,r2,16
   1fe9c:	e0bfff85 	stb	r2,-2(fp)
   1fea0:	008000b4 	movhi	r2,2
   1fea4:	109b9704 	addi	r2,r2,28252
   1fea8:	10800a17 	ldw	r2,40(r2)
   1feac:	10800304 	addi	r2,r2,12
   1feb0:	10800017 	ldw	r2,0(r2)
   1feb4:	1004d63a 	srli	r2,r2,24
   1feb8:	e0bfffc5 	stb	r2,-1(fp)
   1febc:	008000b4 	movhi	r2,2
   1fec0:	109b9704 	addi	r2,r2,28252
   1fec4:	10800e17 	ldw	r2,56(r2)
   1fec8:	10800058 	cmpnei	r2,r2,1
   1fecc:	1000041e 	bne	r2,zero,1fee0 <alt_sys_init+0x74c>
   1fed0:	008000b4 	movhi	r2,2
   1fed4:	109b9704 	addi	r2,r2,28252
   1fed8:	10001115 	stw	zero,68(r2)
   1fedc:	00000e06 	br	1ff18 <alt_sys_init+0x784>
   1fee0:	008000b4 	movhi	r2,2
   1fee4:	109b9704 	addi	r2,r2,28252
   1fee8:	10800e17 	ldw	r2,56(r2)
   1feec:	10800098 	cmpnei	r2,r2,2
   1fef0:	1000051e 	bne	r2,zero,1ff08 <alt_sys_init+0x774>
   1fef4:	008000b4 	movhi	r2,2
   1fef8:	109b9704 	addi	r2,r2,28252
   1fefc:	00c00044 	movi	r3,1
   1ff00:	10c01115 	stw	r3,68(r2)
   1ff04:	00000406 	br	1ff18 <alt_sys_init+0x784>
   1ff08:	008000b4 	movhi	r2,2
   1ff0c:	109b9704 	addi	r2,r2,28252
   1ff10:	00c00084 	movi	r3,2
   1ff14:	10c01115 	stw	r3,68(r2)
   1ff18:	e0bfff83 	ldbu	r2,-2(fp)
   1ff1c:	00c00804 	movi	r3,32
   1ff20:	1885c83a 	sub	r2,r3,r2
   1ff24:	00ffffc4 	movi	r3,-1
   1ff28:	1886d83a 	srl	r3,r3,r2
   1ff2c:	008000b4 	movhi	r2,2
   1ff30:	109b9704 	addi	r2,r2,28252
   1ff34:	10c01215 	stw	r3,72(r2)
   1ff38:	e0ffff83 	ldbu	r3,-2(fp)
   1ff3c:	008000b4 	movhi	r2,2
   1ff40:	109b9704 	addi	r2,r2,28252
   1ff44:	10801117 	ldw	r2,68(r2)
   1ff48:	1887883a 	add	r3,r3,r2
   1ff4c:	008000b4 	movhi	r2,2
   1ff50:	109b9704 	addi	r2,r2,28252
   1ff54:	10c01315 	stw	r3,76(r2)
   1ff58:	e0bfffc3 	ldbu	r2,-1(fp)
   1ff5c:	00c00804 	movi	r3,32
   1ff60:	1885c83a 	sub	r2,r3,r2
   1ff64:	00ffffc4 	movi	r3,-1
   1ff68:	1886d83a 	srl	r3,r3,r2
   1ff6c:	008000b4 	movhi	r2,2
   1ff70:	109b9704 	addi	r2,r2,28252
   1ff74:	10c01415 	stw	r3,80(r2)
   1ff78:	010000b4 	movhi	r4,2
   1ff7c:	211b9704 	addi	r4,r4,28252
   1ff80:	001f7280 	call	1f728 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
   1ff84:	010000b4 	movhi	r4,2
   1ff88:	211bac04 	addi	r4,r4,28336
   1ff8c:	001f7280 	call	1f728 <alt_dev_reg>
}
   1ff90:	0001883a 	nop
   1ff94:	e037883a 	mov	sp,fp
   1ff98:	dfc00117 	ldw	ra,4(sp)
   1ff9c:	df000017 	ldw	fp,0(sp)
   1ffa0:	dec00204 	addi	sp,sp,8
   1ffa4:	f800283a 	ret

0001ffa8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1ffa8:	defffa04 	addi	sp,sp,-24
   1ffac:	dfc00515 	stw	ra,20(sp)
   1ffb0:	df000415 	stw	fp,16(sp)
   1ffb4:	df000404 	addi	fp,sp,16
   1ffb8:	e13ffd15 	stw	r4,-12(fp)
   1ffbc:	e17ffe15 	stw	r5,-8(fp)
   1ffc0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1ffc4:	e0bffd17 	ldw	r2,-12(fp)
   1ffc8:	10800017 	ldw	r2,0(r2)
   1ffcc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   1ffd0:	e0bffc17 	ldw	r2,-16(fp)
   1ffd4:	10c00a04 	addi	r3,r2,40
   1ffd8:	e0bffd17 	ldw	r2,-12(fp)
   1ffdc:	10800217 	ldw	r2,8(r2)
   1ffe0:	100f883a 	mov	r7,r2
   1ffe4:	e1bfff17 	ldw	r6,-4(fp)
   1ffe8:	e17ffe17 	ldw	r5,-8(fp)
   1ffec:	1809883a 	mov	r4,r3
   1fff0:	002074c0 	call	2074c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   1fff4:	e037883a 	mov	sp,fp
   1fff8:	dfc00117 	ldw	ra,4(sp)
   1fffc:	df000017 	ldw	fp,0(sp)
   20000:	dec00204 	addi	sp,sp,8
   20004:	f800283a 	ret

00020008 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   20008:	defffa04 	addi	sp,sp,-24
   2000c:	dfc00515 	stw	ra,20(sp)
   20010:	df000415 	stw	fp,16(sp)
   20014:	df000404 	addi	fp,sp,16
   20018:	e13ffd15 	stw	r4,-12(fp)
   2001c:	e17ffe15 	stw	r5,-8(fp)
   20020:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   20024:	e0bffd17 	ldw	r2,-12(fp)
   20028:	10800017 	ldw	r2,0(r2)
   2002c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   20030:	e0bffc17 	ldw	r2,-16(fp)
   20034:	10c00a04 	addi	r3,r2,40
   20038:	e0bffd17 	ldw	r2,-12(fp)
   2003c:	10800217 	ldw	r2,8(r2)
   20040:	100f883a 	mov	r7,r2
   20044:	e1bfff17 	ldw	r6,-4(fp)
   20048:	e17ffe17 	ldw	r5,-8(fp)
   2004c:	1809883a 	mov	r4,r3
   20050:	0020a080 	call	20a08 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   20054:	e037883a 	mov	sp,fp
   20058:	dfc00117 	ldw	ra,4(sp)
   2005c:	df000017 	ldw	fp,0(sp)
   20060:	dec00204 	addi	sp,sp,8
   20064:	f800283a 	ret

00020068 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   20068:	defffc04 	addi	sp,sp,-16
   2006c:	dfc00315 	stw	ra,12(sp)
   20070:	df000215 	stw	fp,8(sp)
   20074:	df000204 	addi	fp,sp,8
   20078:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2007c:	e0bfff17 	ldw	r2,-4(fp)
   20080:	10800017 	ldw	r2,0(r2)
   20084:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   20088:	e0bffe17 	ldw	r2,-8(fp)
   2008c:	10c00a04 	addi	r3,r2,40
   20090:	e0bfff17 	ldw	r2,-4(fp)
   20094:	10800217 	ldw	r2,8(r2)
   20098:	100b883a 	mov	r5,r2
   2009c:	1809883a 	mov	r4,r3
   200a0:	00205f40 	call	205f4 <altera_avalon_jtag_uart_close>
}
   200a4:	e037883a 	mov	sp,fp
   200a8:	dfc00117 	ldw	ra,4(sp)
   200ac:	df000017 	ldw	fp,0(sp)
   200b0:	dec00204 	addi	sp,sp,8
   200b4:	f800283a 	ret

000200b8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   200b8:	defffa04 	addi	sp,sp,-24
   200bc:	dfc00515 	stw	ra,20(sp)
   200c0:	df000415 	stw	fp,16(sp)
   200c4:	df000404 	addi	fp,sp,16
   200c8:	e13ffd15 	stw	r4,-12(fp)
   200cc:	e17ffe15 	stw	r5,-8(fp)
   200d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   200d4:	e0bffd17 	ldw	r2,-12(fp)
   200d8:	10800017 	ldw	r2,0(r2)
   200dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   200e0:	e0bffc17 	ldw	r2,-16(fp)
   200e4:	10800a04 	addi	r2,r2,40
   200e8:	e1bfff17 	ldw	r6,-4(fp)
   200ec:	e17ffe17 	ldw	r5,-8(fp)
   200f0:	1009883a 	mov	r4,r2
   200f4:	002065c0 	call	2065c <altera_avalon_jtag_uart_ioctl>
}
   200f8:	e037883a 	mov	sp,fp
   200fc:	dfc00117 	ldw	ra,4(sp)
   20100:	df000017 	ldw	fp,0(sp)
   20104:	dec00204 	addi	sp,sp,8
   20108:	f800283a 	ret

0002010c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2010c:	defff204 	addi	sp,sp,-56
   20110:	dfc00d15 	stw	ra,52(sp)
   20114:	df000c15 	stw	fp,48(sp)
   20118:	df000c04 	addi	fp,sp,48
   2011c:	e13ff915 	stw	r4,-28(fp)
   20120:	e17ffa15 	stw	r5,-24(fp)
   20124:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
   20128:	e0bff917 	ldw	r2,-28(fp)
   2012c:	10800c04 	addi	r2,r2,48
   20130:	e0bff415 	stw	r2,-48(fp)
   20134:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
   20138:	e0bff80b 	ldhu	r2,-32(fp)
   2013c:	e0fff884 	addi	r3,fp,-30
   20140:	180b883a 	mov	r5,r3
   20144:	1009883a 	mov	r4,r2
   20148:	001a4040 	call	1a404 <OSFlagCreate>
   2014c:	1007883a 	mov	r3,r2
   20150:	e0bff417 	ldw	r2,-48(fp)
   20154:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
   20158:	e0bff917 	ldw	r2,-28(fp)
   2015c:	10800a04 	addi	r2,r2,40
   20160:	e0bff515 	stw	r2,-44(fp)
   20164:	00800044 	movi	r2,1
   20168:	e0bff78d 	sth	r2,-34(fp)
   2016c:	e0bff78b 	ldhu	r2,-34(fp)
   20170:	1009883a 	mov	r4,r2
   20174:	001d1180 	call	1d118 <OSSemCreate>
   20178:	1007883a 	mov	r3,r2
   2017c:	e0bff517 	ldw	r2,-44(fp)
   20180:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
   20184:	e0bff917 	ldw	r2,-28(fp)
   20188:	10800b04 	addi	r2,r2,44
   2018c:	e0bff615 	stw	r2,-40(fp)
   20190:	00800044 	movi	r2,1
   20194:	e0bff70d 	sth	r2,-36(fp)
   20198:	e0bff70b 	ldhu	r2,-36(fp)
   2019c:	1009883a 	mov	r4,r2
   201a0:	001d1180 	call	1d118 <OSSemCreate>
   201a4:	1007883a 	mov	r3,r2
   201a8:	e0bff617 	ldw	r2,-40(fp)
   201ac:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   201b0:	e0bff917 	ldw	r2,-28(fp)
   201b4:	00c00044 	movi	r3,1
   201b8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   201bc:	e0bff917 	ldw	r2,-28(fp)
   201c0:	10800017 	ldw	r2,0(r2)
   201c4:	10800104 	addi	r2,r2,4
   201c8:	1007883a 	mov	r3,r2
   201cc:	e0bff917 	ldw	r2,-28(fp)
   201d0:	10800817 	ldw	r2,32(r2)
   201d4:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   201d8:	e0bffb17 	ldw	r2,-20(fp)
   201dc:	018000b4 	movhi	r6,2
   201e0:	31809204 	addi	r6,r6,584
   201e4:	e17ff917 	ldw	r5,-28(fp)
   201e8:	1009883a 	mov	r4,r2
   201ec:	002256c0 	call	2256c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   201f0:	e0bff917 	ldw	r2,-28(fp)
   201f4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   201f8:	e0bff917 	ldw	r2,-28(fp)
   201fc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   20200:	d0e85c17 	ldw	r3,-24208(gp)
   20204:	e1fff917 	ldw	r7,-28(fp)
   20208:	018000b4 	movhi	r6,2
   2020c:	31813c04 	addi	r6,r6,1264
   20210:	180b883a 	mov	r5,r3
   20214:	1009883a 	mov	r4,r2
   20218:	002207c0 	call	2207c <alt_alarm_start>
   2021c:	1000040e 	bge	r2,zero,20230 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   20220:	e0fff917 	ldw	r3,-28(fp)
   20224:	00a00034 	movhi	r2,32768
   20228:	10bfffc4 	addi	r2,r2,-1
   2022c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   20230:	0001883a 	nop
   20234:	e037883a 	mov	sp,fp
   20238:	dfc00117 	ldw	ra,4(sp)
   2023c:	df000017 	ldw	fp,0(sp)
   20240:	dec00204 	addi	sp,sp,8
   20244:	f800283a 	ret

00020248 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   20248:	defff104 	addi	sp,sp,-60
   2024c:	dfc00e15 	stw	ra,56(sp)
   20250:	df000d15 	stw	fp,52(sp)
   20254:	df000d04 	addi	fp,sp,52
   20258:	e13ffe15 	stw	r4,-8(fp)
   2025c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   20260:	e0bffe17 	ldw	r2,-8(fp)
   20264:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
   20268:	e0bff517 	ldw	r2,-44(fp)
   2026c:	10800017 	ldw	r2,0(r2)
   20270:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20274:	e0bff617 	ldw	r2,-40(fp)
   20278:	10800104 	addi	r2,r2,4
   2027c:	10800037 	ldwio	r2,0(r2)
   20280:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   20284:	e0bff717 	ldw	r2,-36(fp)
   20288:	1080c00c 	andi	r2,r2,768
   2028c:	10009126 	beq	r2,zero,204d4 <altera_avalon_jtag_uart_irq+0x28c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   20290:	e0bff717 	ldw	r2,-36(fp)
   20294:	1080400c 	andi	r2,r2,256
   20298:	10004726 	beq	r2,zero,203b8 <altera_avalon_jtag_uart_irq+0x170>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2029c:	00800074 	movhi	r2,1
   202a0:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   202a4:	e0bff517 	ldw	r2,-44(fp)
   202a8:	10800d17 	ldw	r2,52(r2)
   202ac:	10800044 	addi	r2,r2,1
   202b0:	1081ffcc 	andi	r2,r2,2047
   202b4:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
   202b8:	e0bff517 	ldw	r2,-44(fp)
   202bc:	10c00e17 	ldw	r3,56(r2)
   202c0:	e0bff817 	ldw	r2,-32(fp)
   202c4:	18802726 	beq	r3,r2,20364 <altera_avalon_jtag_uart_irq+0x11c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   202c8:	e0bff617 	ldw	r2,-40(fp)
   202cc:	10800037 	ldwio	r2,0(r2)
   202d0:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   202d4:	e0bff317 	ldw	r2,-52(fp)
   202d8:	10a0000c 	andi	r2,r2,32768
   202dc:	10002326 	beq	r2,zero,2036c <altera_avalon_jtag_uart_irq+0x124>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   202e0:	e0bff517 	ldw	r2,-44(fp)
   202e4:	10800d17 	ldw	r2,52(r2)
   202e8:	e0fff317 	ldw	r3,-52(fp)
   202ec:	1809883a 	mov	r4,r3
   202f0:	e0fff517 	ldw	r3,-44(fp)
   202f4:	1885883a 	add	r2,r3,r2
   202f8:	10801104 	addi	r2,r2,68
   202fc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20300:	e0bff517 	ldw	r2,-44(fp)
   20304:	10800d17 	ldw	r2,52(r2)
   20308:	10800044 	addi	r2,r2,1
   2030c:	10c1ffcc 	andi	r3,r2,2047
   20310:	e0bff517 	ldw	r2,-44(fp)
   20314:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
   20318:	e0bff517 	ldw	r2,-44(fp)
   2031c:	10800c17 	ldw	r2,48(r2)
   20320:	e0bffa15 	stw	r2,-24(fp)
   20324:	00800044 	movi	r2,1
   20328:	e0bffb0d 	sth	r2,-20(fp)
   2032c:	00800044 	movi	r2,1
   20330:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   20334:	d0a84743 	ldbu	r2,-24291(gp)
   20338:	10803fcc 	andi	r2,r2,255
   2033c:	103fd926 	beq	r2,zero,202a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70202a4>
  {
    OSFlagPost (group, flags, opt, &err);
   20340:	e0bffb0b 	ldhu	r2,-20(fp)
   20344:	e0fffb83 	ldbu	r3,-18(fp)
   20348:	e13ffcc4 	addi	r4,fp,-13
   2034c:	200f883a 	mov	r7,r4
   20350:	180d883a 	mov	r6,r3
   20354:	100b883a 	mov	r5,r2
   20358:	e13ffa17 	ldw	r4,-24(fp)
   2035c:	001afe00 	call	1afe0 <OSFlagPost>
      }
   20360:	003fd006 	br	202a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70202a4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   20364:	0001883a 	nop
   20368:	00000106 	br	20370 <altera_avalon_jtag_uart_irq+0x128>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   2036c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   20370:	e0bff317 	ldw	r2,-52(fp)
   20374:	10bfffec 	andhi	r2,r2,65535
   20378:	10000f26 	beq	r2,zero,203b8 <altera_avalon_jtag_uart_irq+0x170>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2037c:	e0bff517 	ldw	r2,-44(fp)
   20380:	10c00817 	ldw	r3,32(r2)
   20384:	00bfff84 	movi	r2,-2
   20388:	1886703a 	and	r3,r3,r2
   2038c:	e0bff517 	ldw	r2,-44(fp)
   20390:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   20394:	e0bff617 	ldw	r2,-40(fp)
   20398:	10800104 	addi	r2,r2,4
   2039c:	1007883a 	mov	r3,r2
   203a0:	e0bff517 	ldw	r2,-44(fp)
   203a4:	10800817 	ldw	r2,32(r2)
   203a8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   203ac:	e0bff617 	ldw	r2,-40(fp)
   203b0:	10800104 	addi	r2,r2,4
   203b4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   203b8:	e0bff717 	ldw	r2,-36(fp)
   203bc:	1080800c 	andi	r2,r2,512
   203c0:	103fac26 	beq	r2,zero,20274 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7020274>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   203c4:	e0bff717 	ldw	r2,-36(fp)
   203c8:	1004d43a 	srli	r2,r2,16
   203cc:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   203d0:	00002606 	br	2046c <altera_avalon_jtag_uart_irq+0x224>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   203d4:	e0bff617 	ldw	r2,-40(fp)
   203d8:	e0fff517 	ldw	r3,-44(fp)
   203dc:	18c01017 	ldw	r3,64(r3)
   203e0:	e13ff517 	ldw	r4,-44(fp)
   203e4:	20c7883a 	add	r3,r4,r3
   203e8:	18c21104 	addi	r3,r3,2116
   203ec:	18c00003 	ldbu	r3,0(r3)
   203f0:	18c03fcc 	andi	r3,r3,255
   203f4:	18c0201c 	xori	r3,r3,128
   203f8:	18ffe004 	addi	r3,r3,-128
   203fc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20400:	e0bff517 	ldw	r2,-44(fp)
   20404:	10801017 	ldw	r2,64(r2)
   20408:	10800044 	addi	r2,r2,1
   2040c:	10c1ffcc 	andi	r3,r2,2047
   20410:	e0bff517 	ldw	r2,-44(fp)
   20414:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
   20418:	e0bff517 	ldw	r2,-44(fp)
   2041c:	10800c17 	ldw	r2,48(r2)
   20420:	e0bff915 	stw	r2,-28(fp)
   20424:	00800084 	movi	r2,2
   20428:	e0bffc0d 	sth	r2,-16(fp)
   2042c:	00800044 	movi	r2,1
   20430:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   20434:	d0a84743 	ldbu	r2,-24291(gp)
   20438:	10803fcc 	andi	r2,r2,255
   2043c:	10000826 	beq	r2,zero,20460 <altera_avalon_jtag_uart_irq+0x218>
  {
    OSFlagPost (group, flags, opt, &err);
   20440:	e0bffc0b 	ldhu	r2,-16(fp)
   20444:	e0fffc83 	ldbu	r3,-14(fp)
   20448:	e13ffd04 	addi	r4,fp,-12
   2044c:	200f883a 	mov	r7,r4
   20450:	180d883a 	mov	r6,r3
   20454:	100b883a 	mov	r5,r2
   20458:	e13ff917 	ldw	r4,-28(fp)
   2045c:	001afe00 	call	1afe0 <OSFlagPost>

        space--;
   20460:	e0bff417 	ldw	r2,-48(fp)
   20464:	10bfffc4 	addi	r2,r2,-1
   20468:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2046c:	e0bff417 	ldw	r2,-48(fp)
   20470:	10000526 	beq	r2,zero,20488 <altera_avalon_jtag_uart_irq+0x240>
   20474:	e0bff517 	ldw	r2,-44(fp)
   20478:	10c01017 	ldw	r3,64(r2)
   2047c:	e0bff517 	ldw	r2,-44(fp)
   20480:	10800f17 	ldw	r2,60(r2)
   20484:	18bfd31e 	bne	r3,r2,203d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70203d4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   20488:	e0bff417 	ldw	r2,-48(fp)
   2048c:	103f7926 	beq	r2,zero,20274 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7020274>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   20490:	e0bff517 	ldw	r2,-44(fp)
   20494:	10c00817 	ldw	r3,32(r2)
   20498:	00bfff44 	movi	r2,-3
   2049c:	1886703a 	and	r3,r3,r2
   204a0:	e0bff517 	ldw	r2,-44(fp)
   204a4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   204a8:	e0bff517 	ldw	r2,-44(fp)
   204ac:	10800017 	ldw	r2,0(r2)
   204b0:	10800104 	addi	r2,r2,4
   204b4:	1007883a 	mov	r3,r2
   204b8:	e0bff517 	ldw	r2,-44(fp)
   204bc:	10800817 	ldw	r2,32(r2)
   204c0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   204c4:	e0bff617 	ldw	r2,-40(fp)
   204c8:	10800104 	addi	r2,r2,4
   204cc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   204d0:	003f6806 	br	20274 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7020274>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   204d4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   204d8:	0001883a 	nop
   204dc:	e037883a 	mov	sp,fp
   204e0:	dfc00117 	ldw	ra,4(sp)
   204e4:	df000017 	ldw	fp,0(sp)
   204e8:	dec00204 	addi	sp,sp,8
   204ec:	f800283a 	ret

000204f0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   204f0:	defff904 	addi	sp,sp,-28
   204f4:	dfc00615 	stw	ra,24(sp)
   204f8:	df000515 	stw	fp,20(sp)
   204fc:	df000504 	addi	fp,sp,20
   20500:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   20504:	e0bfff17 	ldw	r2,-4(fp)
   20508:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2050c:	e0bffb17 	ldw	r2,-20(fp)
   20510:	10800017 	ldw	r2,0(r2)
   20514:	10800104 	addi	r2,r2,4
   20518:	10800037 	ldwio	r2,0(r2)
   2051c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   20520:	e0bffc17 	ldw	r2,-16(fp)
   20524:	1081000c 	andi	r2,r2,1024
   20528:	10000b26 	beq	r2,zero,20558 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2052c:	e0bffb17 	ldw	r2,-20(fp)
   20530:	10800017 	ldw	r2,0(r2)
   20534:	10800104 	addi	r2,r2,4
   20538:	1007883a 	mov	r3,r2
   2053c:	e0bffb17 	ldw	r2,-20(fp)
   20540:	10800817 	ldw	r2,32(r2)
   20544:	10810014 	ori	r2,r2,1024
   20548:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   2054c:	e0bffb17 	ldw	r2,-20(fp)
   20550:	10000915 	stw	zero,36(r2)
   20554:	00002106 	br	205dc <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   20558:	e0bffb17 	ldw	r2,-20(fp)
   2055c:	10c00917 	ldw	r3,36(r2)
   20560:	00a00034 	movhi	r2,32768
   20564:	10bfff04 	addi	r2,r2,-4
   20568:	10c01c36 	bltu	r2,r3,205dc <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
   2056c:	e0bffb17 	ldw	r2,-20(fp)
   20570:	10800917 	ldw	r2,36(r2)
   20574:	10c00044 	addi	r3,r2,1
   20578:	e0bffb17 	ldw	r2,-20(fp)
   2057c:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
   20580:	e0bffb17 	ldw	r2,-20(fp)
   20584:	10c00917 	ldw	r3,36(r2)
   20588:	e0bffb17 	ldw	r2,-20(fp)
   2058c:	10800117 	ldw	r2,4(r2)
   20590:	18801236 	bltu	r3,r2,205dc <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
   20594:	e0bffb17 	ldw	r2,-20(fp)
   20598:	10800c17 	ldw	r2,48(r2)
   2059c:	e0bffd15 	stw	r2,-12(fp)
   205a0:	00800104 	movi	r2,4
   205a4:	e0bffe0d 	sth	r2,-8(fp)
   205a8:	00800044 	movi	r2,1
   205ac:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
   205b0:	d0a84743 	ldbu	r2,-24291(gp)
   205b4:	10803fcc 	andi	r2,r2,255
   205b8:	10000826 	beq	r2,zero,205dc <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
   205bc:	e0bffe0b 	ldhu	r2,-8(fp)
   205c0:	e0fffe83 	ldbu	r3,-6(fp)
   205c4:	e13ffec4 	addi	r4,fp,-5
   205c8:	200f883a 	mov	r7,r4
   205cc:	180d883a 	mov	r6,r3
   205d0:	100b883a 	mov	r5,r2
   205d4:	e13ffd17 	ldw	r4,-12(fp)
   205d8:	001afe00 	call	1afe0 <OSFlagPost>
   205dc:	d0a85c17 	ldw	r2,-24208(gp)
    }
  }

  return alt_ticks_per_second();
}
   205e0:	e037883a 	mov	sp,fp
   205e4:	dfc00117 	ldw	ra,4(sp)
   205e8:	df000017 	ldw	fp,0(sp)
   205ec:	dec00204 	addi	sp,sp,8
   205f0:	f800283a 	ret

000205f4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   205f4:	defffd04 	addi	sp,sp,-12
   205f8:	df000215 	stw	fp,8(sp)
   205fc:	df000204 	addi	fp,sp,8
   20600:	e13ffe15 	stw	r4,-8(fp)
   20604:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   20608:	00000506 	br	20620 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2060c:	e0bfff17 	ldw	r2,-4(fp)
   20610:	1090000c 	andi	r2,r2,16384
   20614:	10000226 	beq	r2,zero,20620 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   20618:	00bffd44 	movi	r2,-11
   2061c:	00000b06 	br	2064c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   20620:	e0bffe17 	ldw	r2,-8(fp)
   20624:	10c01017 	ldw	r3,64(r2)
   20628:	e0bffe17 	ldw	r2,-8(fp)
   2062c:	10800f17 	ldw	r2,60(r2)
   20630:	18800526 	beq	r3,r2,20648 <altera_avalon_jtag_uart_close+0x54>
   20634:	e0bffe17 	ldw	r2,-8(fp)
   20638:	10c00917 	ldw	r3,36(r2)
   2063c:	e0bffe17 	ldw	r2,-8(fp)
   20640:	10800117 	ldw	r2,4(r2)
   20644:	18bff136 	bltu	r3,r2,2060c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf702060c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   20648:	0005883a 	mov	r2,zero
}
   2064c:	e037883a 	mov	sp,fp
   20650:	df000017 	ldw	fp,0(sp)
   20654:	dec00104 	addi	sp,sp,4
   20658:	f800283a 	ret

0002065c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2065c:	defffa04 	addi	sp,sp,-24
   20660:	df000515 	stw	fp,20(sp)
   20664:	df000504 	addi	fp,sp,20
   20668:	e13ffd15 	stw	r4,-12(fp)
   2066c:	e17ffe15 	stw	r5,-8(fp)
   20670:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   20674:	00bff9c4 	movi	r2,-25
   20678:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2067c:	e0bffe17 	ldw	r2,-8(fp)
   20680:	10da8060 	cmpeqi	r3,r2,27137
   20684:	1800031e 	bne	r3,zero,20694 <altera_avalon_jtag_uart_ioctl+0x38>
   20688:	109a80a0 	cmpeqi	r2,r2,27138
   2068c:	1000181e 	bne	r2,zero,206f0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   20690:	00002906 	br	20738 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   20694:	e0bffd17 	ldw	r2,-12(fp)
   20698:	10c00117 	ldw	r3,4(r2)
   2069c:	00a00034 	movhi	r2,32768
   206a0:	10bfffc4 	addi	r2,r2,-1
   206a4:	18802126 	beq	r3,r2,2072c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   206a8:	e0bfff17 	ldw	r2,-4(fp)
   206ac:	10800017 	ldw	r2,0(r2)
   206b0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   206b4:	e0bffc17 	ldw	r2,-16(fp)
   206b8:	10800090 	cmplti	r2,r2,2
   206bc:	1000061e 	bne	r2,zero,206d8 <altera_avalon_jtag_uart_ioctl+0x7c>
   206c0:	e0fffc17 	ldw	r3,-16(fp)
   206c4:	00a00034 	movhi	r2,32768
   206c8:	10bfffc4 	addi	r2,r2,-1
   206cc:	18800226 	beq	r3,r2,206d8 <altera_avalon_jtag_uart_ioctl+0x7c>
   206d0:	e0bffc17 	ldw	r2,-16(fp)
   206d4:	00000206 	br	206e0 <altera_avalon_jtag_uart_ioctl+0x84>
   206d8:	00a00034 	movhi	r2,32768
   206dc:	10bfff84 	addi	r2,r2,-2
   206e0:	e0fffd17 	ldw	r3,-12(fp)
   206e4:	18800115 	stw	r2,4(r3)
      rc = 0;
   206e8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   206ec:	00000f06 	br	2072c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   206f0:	e0bffd17 	ldw	r2,-12(fp)
   206f4:	10c00117 	ldw	r3,4(r2)
   206f8:	00a00034 	movhi	r2,32768
   206fc:	10bfffc4 	addi	r2,r2,-1
   20700:	18800c26 	beq	r3,r2,20734 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   20704:	e0bffd17 	ldw	r2,-12(fp)
   20708:	10c00917 	ldw	r3,36(r2)
   2070c:	e0bffd17 	ldw	r2,-12(fp)
   20710:	10800117 	ldw	r2,4(r2)
   20714:	1885803a 	cmpltu	r2,r3,r2
   20718:	10c03fcc 	andi	r3,r2,255
   2071c:	e0bfff17 	ldw	r2,-4(fp)
   20720:	10c00015 	stw	r3,0(r2)
      rc = 0;
   20724:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   20728:	00000206 	br	20734 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   2072c:	0001883a 	nop
   20730:	00000106 	br	20738 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   20734:	0001883a 	nop

  default:
    break;
  }

  return rc;
   20738:	e0bffb17 	ldw	r2,-20(fp)
}
   2073c:	e037883a 	mov	sp,fp
   20740:	df000017 	ldw	fp,0(sp)
   20744:	dec00104 	addi	sp,sp,4
   20748:	f800283a 	ret

0002074c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2074c:	deffed04 	addi	sp,sp,-76
   20750:	dfc01215 	stw	ra,72(sp)
   20754:	df001115 	stw	fp,68(sp)
   20758:	df001104 	addi	fp,sp,68
   2075c:	e13ffc15 	stw	r4,-16(fp)
   20760:	e17ffd15 	stw	r5,-12(fp)
   20764:	e1bffe15 	stw	r6,-8(fp)
   20768:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2076c:	e0bffd17 	ldw	r2,-12(fp)
   20770:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
   20774:	e0bffc17 	ldw	r2,-16(fp)
   20778:	10800a17 	ldw	r2,40(r2)
   2077c:	e0bff815 	stw	r2,-32(fp)
   20780:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
   20784:	e0bff90b 	ldhu	r2,-28(fp)
   20788:	e0fffb04 	addi	r3,fp,-20
   2078c:	180d883a 	mov	r6,r3
   20790:	100b883a 	mov	r5,r2
   20794:	e13ff817 	ldw	r4,-32(fp)
   20798:	001d4300 	call	1d430 <OSSemPend>

  while (space > 0)
   2079c:	00006106 	br	20924 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   207a0:	e0bffc17 	ldw	r2,-16(fp)
   207a4:	10800d17 	ldw	r2,52(r2)
   207a8:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
   207ac:	e0bffc17 	ldw	r2,-16(fp)
   207b0:	10800e17 	ldw	r2,56(r2)
   207b4:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
   207b8:	e0fff317 	ldw	r3,-52(fp)
   207bc:	e0bff417 	ldw	r2,-48(fp)
   207c0:	18800536 	bltu	r3,r2,207d8 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
   207c4:	e0fff317 	ldw	r3,-52(fp)
   207c8:	e0bff417 	ldw	r2,-48(fp)
   207cc:	1885c83a 	sub	r2,r3,r2
   207d0:	e0bff115 	stw	r2,-60(fp)
   207d4:	00000406 	br	207e8 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   207d8:	00c20004 	movi	r3,2048
   207dc:	e0bff417 	ldw	r2,-48(fp)
   207e0:	1885c83a 	sub	r2,r3,r2
   207e4:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   207e8:	e0bff117 	ldw	r2,-60(fp)
   207ec:	10001e26 	beq	r2,zero,20868 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
   207f0:	e0fffe17 	ldw	r3,-8(fp)
   207f4:	e0bff117 	ldw	r2,-60(fp)
   207f8:	1880022e 	bgeu	r3,r2,20804 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
   207fc:	e0bffe17 	ldw	r2,-8(fp)
   20800:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   20804:	e0bffc17 	ldw	r2,-16(fp)
   20808:	10c01104 	addi	r3,r2,68
   2080c:	e0bff417 	ldw	r2,-48(fp)
   20810:	1885883a 	add	r2,r3,r2
   20814:	e1bff117 	ldw	r6,-60(fp)
   20818:	100b883a 	mov	r5,r2
   2081c:	e13ff017 	ldw	r4,-64(fp)
   20820:	00080e80 	call	80e8 <memcpy>
      ptr   += n;
   20824:	e0fff017 	ldw	r3,-64(fp)
   20828:	e0bff117 	ldw	r2,-60(fp)
   2082c:	1885883a 	add	r2,r3,r2
   20830:	e0bff015 	stw	r2,-64(fp)
      space -= n;
   20834:	e0fffe17 	ldw	r3,-8(fp)
   20838:	e0bff117 	ldw	r2,-60(fp)
   2083c:	1885c83a 	sub	r2,r3,r2
   20840:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20844:	e0fff417 	ldw	r3,-48(fp)
   20848:	e0bff117 	ldw	r2,-60(fp)
   2084c:	1885883a 	add	r2,r3,r2
   20850:	10c1ffcc 	andi	r3,r2,2047
   20854:	e0bffc17 	ldw	r2,-16(fp)
   20858:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
   2085c:	e0bffe17 	ldw	r2,-8(fp)
   20860:	00bfcf16 	blt	zero,r2,207a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70207a0>
   20864:	00000106 	br	2086c <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   20868:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   2086c:	e0fff017 	ldw	r3,-64(fp)
   20870:	e0bffd17 	ldw	r2,-12(fp)
   20874:	18802e1e 	bne	r3,r2,20930 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   20878:	e0bfff17 	ldw	r2,-4(fp)
   2087c:	1090000c 	andi	r2,r2,16384
   20880:	10002d1e 	bne	r2,zero,20938 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
   20884:	d0a84743 	ldbu	r2,-24291(gp)
   20888:	10803fcc 	andi	r2,r2,255
   2088c:	10800058 	cmpnei	r2,r2,1
   20890:	1000161e 	bne	r2,zero,208ec <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
   20894:	e0bffc17 	ldw	r2,-16(fp)
   20898:	10800c17 	ldw	r2,48(r2)
   2089c:	e0bff215 	stw	r2,-56(fp)
   208a0:	00800144 	movi	r2,5
   208a4:	e0bff98d 	sth	r2,-26(fp)
   208a8:	00bfe0c4 	movi	r2,-125
   208ac:	e0bffa05 	stb	r2,-24(fp)
   208b0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   208b4:	d0a84743 	ldbu	r2,-24291(gp)
   208b8:	10803fcc 	andi	r2,r2,255
   208bc:	10001526 	beq	r2,zero,20914 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   208c0:	e0fff98b 	ldhu	r3,-26(fp)
   208c4:	e13ffa03 	ldbu	r4,-24(fp)
   208c8:	e17ffa8b 	ldhu	r5,-22(fp)
   208cc:	e0bffb44 	addi	r2,fp,-19
   208d0:	d8800015 	stw	r2,0(sp)
   208d4:	280f883a 	mov	r7,r5
   208d8:	200d883a 	mov	r6,r4
   208dc:	180b883a 	mov	r5,r3
   208e0:	e13ff217 	ldw	r4,-56(fp)
   208e4:	001a9c80 	call	1a9c8 <OSFlagPend>
   208e8:	00000a06 	br	20914 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   208ec:	0001883a 	nop
   208f0:	e0bffc17 	ldw	r2,-16(fp)
   208f4:	10c00d17 	ldw	r3,52(r2)
   208f8:	e0bff317 	ldw	r2,-52(fp)
   208fc:	1880051e 	bne	r3,r2,20914 <altera_avalon_jtag_uart_read+0x1c8>
   20900:	e0bffc17 	ldw	r2,-16(fp)
   20904:	10c00917 	ldw	r3,36(r2)
   20908:	e0bffc17 	ldw	r2,-16(fp)
   2090c:	10800117 	ldw	r2,4(r2)
   20910:	18bff736 	bltu	r3,r2,208f0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70208f0>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   20914:	e0bffc17 	ldw	r2,-16(fp)
   20918:	10c00d17 	ldw	r3,52(r2)
   2091c:	e0bff317 	ldw	r2,-52(fp)
   20920:	18800726 	beq	r3,r2,20940 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   20924:	e0bffe17 	ldw	r2,-8(fp)
   20928:	00bf9d16 	blt	zero,r2,207a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70207a0>
   2092c:	00000506 	br	20944 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   20930:	0001883a 	nop
   20934:	00000306 	br	20944 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   20938:	0001883a 	nop
   2093c:	00000106 	br	20944 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   20940:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
   20944:	e0bffc17 	ldw	r2,-16(fp)
   20948:	10800a17 	ldw	r2,40(r2)
   2094c:	1009883a 	mov	r4,r2
   20950:	001d7a80 	call	1d7a8 <OSSemPost>

  if (ptr != buffer)
   20954:	e0fff017 	ldw	r3,-64(fp)
   20958:	e0bffd17 	ldw	r2,-12(fp)
   2095c:	18801826 	beq	r3,r2,209c0 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20960:	0005303a 	rdctl	r2,status
   20964:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20968:	e0fff717 	ldw	r3,-36(fp)
   2096c:	00bfff84 	movi	r2,-2
   20970:	1884703a 	and	r2,r3,r2
   20974:	1001703a 	wrctl	status,r2
  
  return context;
   20978:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2097c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   20980:	e0bffc17 	ldw	r2,-16(fp)
   20984:	10800817 	ldw	r2,32(r2)
   20988:	10c00054 	ori	r3,r2,1
   2098c:	e0bffc17 	ldw	r2,-16(fp)
   20990:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   20994:	e0bffc17 	ldw	r2,-16(fp)
   20998:	10800017 	ldw	r2,0(r2)
   2099c:	10800104 	addi	r2,r2,4
   209a0:	1007883a 	mov	r3,r2
   209a4:	e0bffc17 	ldw	r2,-16(fp)
   209a8:	10800817 	ldw	r2,32(r2)
   209ac:	18800035 	stwio	r2,0(r3)
   209b0:	e0bff617 	ldw	r2,-40(fp)
   209b4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   209b8:	e0bff517 	ldw	r2,-44(fp)
   209bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   209c0:	e0fff017 	ldw	r3,-64(fp)
   209c4:	e0bffd17 	ldw	r2,-12(fp)
   209c8:	18800426 	beq	r3,r2,209dc <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
   209cc:	e0fff017 	ldw	r3,-64(fp)
   209d0:	e0bffd17 	ldw	r2,-12(fp)
   209d4:	1885c83a 	sub	r2,r3,r2
   209d8:	00000606 	br	209f4 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
   209dc:	e0bfff17 	ldw	r2,-4(fp)
   209e0:	1090000c 	andi	r2,r2,16384
   209e4:	10000226 	beq	r2,zero,209f0 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
   209e8:	00bffd44 	movi	r2,-11
   209ec:	00000106 	br	209f4 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
   209f0:	00bffec4 	movi	r2,-5
}
   209f4:	e037883a 	mov	sp,fp
   209f8:	dfc00117 	ldw	ra,4(sp)
   209fc:	df000017 	ldw	fp,0(sp)
   20a00:	dec00204 	addi	sp,sp,8
   20a04:	f800283a 	ret

00020a08 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   20a08:	deffed04 	addi	sp,sp,-76
   20a0c:	dfc01215 	stw	ra,72(sp)
   20a10:	df001115 	stw	fp,68(sp)
   20a14:	df001104 	addi	fp,sp,68
   20a18:	e13ffc15 	stw	r4,-16(fp)
   20a1c:	e17ffd15 	stw	r5,-12(fp)
   20a20:	e1bffe15 	stw	r6,-8(fp)
   20a24:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   20a28:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   20a2c:	e0bffd17 	ldw	r2,-12(fp)
   20a30:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
   20a34:	e0bffc17 	ldw	r2,-16(fp)
   20a38:	10800b17 	ldw	r2,44(r2)
   20a3c:	e0bff815 	stw	r2,-32(fp)
   20a40:	e03ff90d 	sth	zero,-28(fp)
   20a44:	e0bff90b 	ldhu	r2,-28(fp)
   20a48:	e0fffb44 	addi	r3,fp,-19
   20a4c:	180d883a 	mov	r6,r3
   20a50:	100b883a 	mov	r5,r2
   20a54:	e13ff817 	ldw	r4,-32(fp)
   20a58:	001d4300 	call	1d430 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   20a5c:	00003706 	br	20b3c <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   20a60:	e0bffc17 	ldw	r2,-16(fp)
   20a64:	10800f17 	ldw	r2,60(r2)
   20a68:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
   20a6c:	e0bffc17 	ldw	r2,-16(fp)
   20a70:	10801017 	ldw	r2,64(r2)
   20a74:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
   20a78:	e0fff417 	ldw	r3,-48(fp)
   20a7c:	e0bff017 	ldw	r2,-64(fp)
   20a80:	1880062e 	bgeu	r3,r2,20a9c <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
   20a84:	e0fff017 	ldw	r3,-64(fp)
   20a88:	e0bff417 	ldw	r2,-48(fp)
   20a8c:	1885c83a 	sub	r2,r3,r2
   20a90:	10bfffc4 	addi	r2,r2,-1
   20a94:	e0bff115 	stw	r2,-60(fp)
   20a98:	00000b06 	br	20ac8 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
   20a9c:	e0bff017 	ldw	r2,-64(fp)
   20aa0:	10000526 	beq	r2,zero,20ab8 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   20aa4:	00c20004 	movi	r3,2048
   20aa8:	e0bff417 	ldw	r2,-48(fp)
   20aac:	1885c83a 	sub	r2,r3,r2
   20ab0:	e0bff115 	stw	r2,-60(fp)
   20ab4:	00000406 	br	20ac8 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   20ab8:	00c1ffc4 	movi	r3,2047
   20abc:	e0bff417 	ldw	r2,-48(fp)
   20ac0:	1885c83a 	sub	r2,r3,r2
   20ac4:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
   20ac8:	e0bff117 	ldw	r2,-60(fp)
   20acc:	10001e26 	beq	r2,zero,20b48 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
   20ad0:	e0fffe17 	ldw	r3,-8(fp)
   20ad4:	e0bff117 	ldw	r2,-60(fp)
   20ad8:	1880022e 	bgeu	r3,r2,20ae4 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
   20adc:	e0bffe17 	ldw	r2,-8(fp)
   20ae0:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   20ae4:	e0bffc17 	ldw	r2,-16(fp)
   20ae8:	10c21104 	addi	r3,r2,2116
   20aec:	e0bff417 	ldw	r2,-48(fp)
   20af0:	1885883a 	add	r2,r3,r2
   20af4:	e1bff117 	ldw	r6,-60(fp)
   20af8:	e17ffd17 	ldw	r5,-12(fp)
   20afc:	1009883a 	mov	r4,r2
   20b00:	00080e80 	call	80e8 <memcpy>
      ptr   += n;
   20b04:	e0fffd17 	ldw	r3,-12(fp)
   20b08:	e0bff117 	ldw	r2,-60(fp)
   20b0c:	1885883a 	add	r2,r3,r2
   20b10:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   20b14:	e0fffe17 	ldw	r3,-8(fp)
   20b18:	e0bff117 	ldw	r2,-60(fp)
   20b1c:	1885c83a 	sub	r2,r3,r2
   20b20:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20b24:	e0fff417 	ldw	r3,-48(fp)
   20b28:	e0bff117 	ldw	r2,-60(fp)
   20b2c:	1885883a 	add	r2,r3,r2
   20b30:	10c1ffcc 	andi	r3,r2,2047
   20b34:	e0bffc17 	ldw	r2,-16(fp)
   20b38:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   20b3c:	e0bffe17 	ldw	r2,-8(fp)
   20b40:	00bfc716 	blt	zero,r2,20a60 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7020a60>
   20b44:	00000106 	br	20b4c <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   20b48:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20b4c:	0005303a 	rdctl	r2,status
   20b50:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20b54:	e0fff717 	ldw	r3,-36(fp)
   20b58:	00bfff84 	movi	r2,-2
   20b5c:	1884703a 	and	r2,r3,r2
   20b60:	1001703a 	wrctl	status,r2
  
  return context;
   20b64:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   20b68:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   20b6c:	e0bffc17 	ldw	r2,-16(fp)
   20b70:	10800817 	ldw	r2,32(r2)
   20b74:	10c00094 	ori	r3,r2,2
   20b78:	e0bffc17 	ldw	r2,-16(fp)
   20b7c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   20b80:	e0bffc17 	ldw	r2,-16(fp)
   20b84:	10800017 	ldw	r2,0(r2)
   20b88:	10800104 	addi	r2,r2,4
   20b8c:	1007883a 	mov	r3,r2
   20b90:	e0bffc17 	ldw	r2,-16(fp)
   20b94:	10800817 	ldw	r2,32(r2)
   20b98:	18800035 	stwio	r2,0(r3)
   20b9c:	e0bff617 	ldw	r2,-40(fp)
   20ba0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20ba4:	e0bff317 	ldw	r2,-52(fp)
   20ba8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   20bac:	e0bffe17 	ldw	r2,-8(fp)
   20bb0:	00802a0e 	bge	zero,r2,20c5c <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
   20bb4:	e0bfff17 	ldw	r2,-4(fp)
   20bb8:	1090000c 	andi	r2,r2,16384
   20bbc:	10002a1e 	bne	r2,zero,20c68 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
   20bc0:	d0a84743 	ldbu	r2,-24291(gp)
   20bc4:	10803fcc 	andi	r2,r2,255
   20bc8:	10800058 	cmpnei	r2,r2,1
   20bcc:	1000161e 	bne	r2,zero,20c28 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
   20bd0:	e0bffc17 	ldw	r2,-16(fp)
   20bd4:	10800c17 	ldw	r2,48(r2)
   20bd8:	e0bff515 	stw	r2,-44(fp)
   20bdc:	00800184 	movi	r2,6
   20be0:	e0bff98d 	sth	r2,-26(fp)
   20be4:	00bfe0c4 	movi	r2,-125
   20be8:	e0bffa05 	stb	r2,-24(fp)
   20bec:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
   20bf0:	d0a84743 	ldbu	r2,-24291(gp)
   20bf4:	10803fcc 	andi	r2,r2,255
   20bf8:	10001526 	beq	r2,zero,20c50 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
   20bfc:	e0fff98b 	ldhu	r3,-26(fp)
   20c00:	e13ffa03 	ldbu	r4,-24(fp)
   20c04:	e17ffa8b 	ldhu	r5,-22(fp)
   20c08:	e0bffb04 	addi	r2,fp,-20
   20c0c:	d8800015 	stw	r2,0(sp)
   20c10:	280f883a 	mov	r7,r5
   20c14:	200d883a 	mov	r6,r4
   20c18:	180b883a 	mov	r5,r3
   20c1c:	e13ff517 	ldw	r4,-44(fp)
   20c20:	001a9c80 	call	1a9c8 <OSFlagPend>
   20c24:	00000a06 	br	20c50 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   20c28:	0001883a 	nop
   20c2c:	e0bffc17 	ldw	r2,-16(fp)
   20c30:	10c01017 	ldw	r3,64(r2)
   20c34:	e0bff017 	ldw	r2,-64(fp)
   20c38:	1880051e 	bne	r3,r2,20c50 <altera_avalon_jtag_uart_write+0x248>
   20c3c:	e0bffc17 	ldw	r2,-16(fp)
   20c40:	10c00917 	ldw	r3,36(r2)
   20c44:	e0bffc17 	ldw	r2,-16(fp)
   20c48:	10800117 	ldw	r2,4(r2)
   20c4c:	18bff736 	bltu	r3,r2,20c2c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7020c2c>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   20c50:	e0bffc17 	ldw	r2,-16(fp)
   20c54:	10800917 	ldw	r2,36(r2)
   20c58:	1000051e 	bne	r2,zero,20c70 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
   20c5c:	e0bffe17 	ldw	r2,-8(fp)
   20c60:	00bfb616 	blt	zero,r2,20b3c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7020b3c>
   20c64:	00000306 	br	20c74 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   20c68:	0001883a 	nop
   20c6c:	00000106 	br	20c74 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   20c70:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
   20c74:	e0bffc17 	ldw	r2,-16(fp)
   20c78:	10800b17 	ldw	r2,44(r2)
   20c7c:	1009883a 	mov	r4,r2
   20c80:	001d7a80 	call	1d7a8 <OSSemPost>

  if (ptr != start)
   20c84:	e0fffd17 	ldw	r3,-12(fp)
   20c88:	e0bff217 	ldw	r2,-56(fp)
   20c8c:	18800426 	beq	r3,r2,20ca0 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
   20c90:	e0fffd17 	ldw	r3,-12(fp)
   20c94:	e0bff217 	ldw	r2,-56(fp)
   20c98:	1885c83a 	sub	r2,r3,r2
   20c9c:	00000606 	br	20cb8 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
   20ca0:	e0bfff17 	ldw	r2,-4(fp)
   20ca4:	1090000c 	andi	r2,r2,16384
   20ca8:	10000226 	beq	r2,zero,20cb4 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
   20cac:	00bffd44 	movi	r2,-11
   20cb0:	00000106 	br	20cb8 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   20cb4:	00bffec4 	movi	r2,-5
}
   20cb8:	e037883a 	mov	sp,fp
   20cbc:	dfc00117 	ldw	ra,4(sp)
   20cc0:	df000017 	ldw	fp,0(sp)
   20cc4:	dec00204 	addi	sp,sp,8
   20cc8:	f800283a 	ret

00020ccc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   20ccc:	defff904 	addi	sp,sp,-28
   20cd0:	dfc00615 	stw	ra,24(sp)
   20cd4:	df000515 	stw	fp,20(sp)
   20cd8:	df000504 	addi	fp,sp,20
   20cdc:	e13ffe15 	stw	r4,-8(fp)
   20ce0:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   20ce4:	0007883a 	mov	r3,zero
   20ce8:	e0bffe17 	ldw	r2,-8(fp)
   20cec:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   20cf0:	e0bffe17 	ldw	r2,-8(fp)
   20cf4:	10800104 	addi	r2,r2,4
   20cf8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   20cfc:	0005303a 	rdctl	r2,status
   20d00:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   20d04:	e0fffc17 	ldw	r3,-16(fp)
   20d08:	00bfff84 	movi	r2,-2
   20d0c:	1884703a 	and	r2,r3,r2
   20d10:	1001703a 	wrctl	status,r2
  
  return context;
   20d14:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   20d18:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
   20d1c:	00229dc0 	call	229dc <alt_tick>
   20d20:	e0bffb17 	ldw	r2,-20(fp)
   20d24:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   20d28:	e0bffd17 	ldw	r2,-12(fp)
   20d2c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   20d30:	0001883a 	nop
   20d34:	e037883a 	mov	sp,fp
   20d38:	dfc00117 	ldw	ra,4(sp)
   20d3c:	df000017 	ldw	fp,0(sp)
   20d40:	dec00204 	addi	sp,sp,8
   20d44:	f800283a 	ret

00020d48 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   20d48:	defff904 	addi	sp,sp,-28
   20d4c:	dfc00615 	stw	ra,24(sp)
   20d50:	df000515 	stw	fp,20(sp)
   20d54:	df000504 	addi	fp,sp,20
   20d58:	e13ffc15 	stw	r4,-16(fp)
   20d5c:	e17ffd15 	stw	r5,-12(fp)
   20d60:	e1bffe15 	stw	r6,-8(fp)
   20d64:	e1ffff15 	stw	r7,-4(fp)
   20d68:	e0bfff17 	ldw	r2,-4(fp)
   20d6c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   20d70:	d0a85c17 	ldw	r2,-24208(gp)
   20d74:	1000021e 	bne	r2,zero,20d80 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   20d78:	e0bffb17 	ldw	r2,-20(fp)
   20d7c:	d0a85c15 	stw	r2,-24208(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   20d80:	e0bffc17 	ldw	r2,-16(fp)
   20d84:	10800104 	addi	r2,r2,4
   20d88:	00c001c4 	movi	r3,7
   20d8c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
   20d90:	018000b4 	movhi	r6,2
   20d94:	31833304 	addi	r6,r6,3276
   20d98:	e17ffc17 	ldw	r5,-16(fp)
   20d9c:	e13ffe17 	ldw	r4,-8(fp)
   20da0:	002256c0 	call	2256c <alt_irq_register>
#endif  
}
   20da4:	0001883a 	nop
   20da8:	e037883a 	mov	sp,fp
   20dac:	dfc00117 	ldw	ra,4(sp)
   20db0:	df000017 	ldw	fp,0(sp)
   20db4:	dec00204 	addi	sp,sp,8
   20db8:	f800283a 	ret

00020dbc <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
   20dbc:	defffc04 	addi	sp,sp,-16
   20dc0:	df000315 	stw	fp,12(sp)
   20dc4:	df000304 	addi	fp,sp,12
   20dc8:	e13ffe15 	stw	r4,-8(fp)
   20dcc:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
   20dd0:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
   20dd4:	e0bfff17 	ldw	r2,-4(fp)
   20dd8:	1000061e 	bne	r2,zero,20df4 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
   20ddc:	e0bffe17 	ldw	r2,-8(fp)
   20de0:	1007883a 	mov	r3,r2
   20de4:	e0bffd03 	ldbu	r2,-12(fp)
   20de8:	1884b03a 	or	r2,r3,r2
   20dec:	e0bffd05 	stb	r2,-12(fp)
   20df0:	00000806 	br	20e14 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
   20df4:	e0bffe17 	ldw	r2,-8(fp)
   20df8:	1007883a 	mov	r3,r2
   20dfc:	e0bffd03 	ldbu	r2,-12(fp)
   20e00:	1884b03a 	or	r2,r3,r2
   20e04:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
   20e08:	e0bffd03 	ldbu	r2,-12(fp)
   20e0c:	10801014 	ori	r2,r2,64
   20e10:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
   20e14:	e0fffd03 	ldbu	r3,-12(fp)
   20e18:	00bfe004 	movi	r2,-128
   20e1c:	1884b03a 	or	r2,r3,r2
}
   20e20:	e037883a 	mov	sp,fp
   20e24:	df000017 	ldw	fp,0(sp)
   20e28:	dec00104 	addi	sp,sp,4
   20e2c:	f800283a 	ret

00020e30 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
   20e30:	defffd04 	addi	sp,sp,-12
   20e34:	df000215 	stw	fp,8(sp)
   20e38:	df000204 	addi	fp,sp,8
   20e3c:	e13ffe15 	stw	r4,-8(fp)
   20e40:	2805883a 	mov	r2,r5
   20e44:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
   20e48:	e0bffe17 	ldw	r2,-8(fp)
   20e4c:	10800a17 	ldw	r2,40(r2)
   20e50:	1007883a 	mov	r3,r2
   20e54:	e0bfff03 	ldbu	r2,-4(fp)
   20e58:	18800025 	stbio	r2,0(r3)
}
   20e5c:	0001883a 	nop
   20e60:	e037883a 	mov	sp,fp
   20e64:	df000017 	ldw	fp,0(sp)
   20e68:	dec00104 	addi	sp,sp,4
   20e6c:	f800283a 	ret

00020e70 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
   20e70:	defffe04 	addi	sp,sp,-8
   20e74:	df000115 	stw	fp,4(sp)
   20e78:	df000104 	addi	fp,sp,4
   20e7c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
   20e80:	e0bfff17 	ldw	r2,-4(fp)
   20e84:	10800a17 	ldw	r2,40(r2)
   20e88:	1007883a 	mov	r3,r2
   20e8c:	00800044 	movi	r2,1
   20e90:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
   20e94:	0001883a 	nop
   20e98:	e037883a 	mov	sp,fp
   20e9c:	df000017 	ldw	fp,0(sp)
   20ea0:	dec00104 	addi	sp,sp,4
   20ea4:	f800283a 	ret

00020ea8 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
   20ea8:	defffc04 	addi	sp,sp,-16
   20eac:	dfc00315 	stw	ra,12(sp)
   20eb0:	df000215 	stw	fp,8(sp)
   20eb4:	df000204 	addi	fp,sp,8
   20eb8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
   20ebc:	d1601e04 	addi	r5,gp,-32648
   20ec0:	e13fff17 	ldw	r4,-4(fp)
   20ec4:	00223680 	call	22368 <alt_find_dev>
   20ec8:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   20ecc:	e0bffe17 	ldw	r2,-8(fp)
}
   20ed0:	e037883a 	mov	sp,fp
   20ed4:	dfc00117 	ldw	ra,4(sp)
   20ed8:	df000017 	ldw	fp,0(sp)
   20edc:	dec00204 	addi	sp,sp,8
   20ee0:	f800283a 	ret

00020ee4 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
   20ee4:	defffb04 	addi	sp,sp,-20
   20ee8:	df000415 	stw	fp,16(sp)
   20eec:	df000404 	addi	fp,sp,16
   20ef0:	e13ffd15 	stw	r4,-12(fp)
   20ef4:	e17ffe15 	stw	r5,-8(fp)
   20ef8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
   20efc:	e03ffc15 	stw	zero,-16(fp)
   20f00:	00000f06 	br	20f40 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
   20f04:	e0bffd17 	ldw	r2,-12(fp)
   20f08:	10800a17 	ldw	r2,40(r2)
   20f0c:	10800044 	addi	r2,r2,1
   20f10:	1009883a 	mov	r4,r2
   20f14:	e0fffe17 	ldw	r3,-8(fp)
   20f18:	e0bffc17 	ldw	r2,-16(fp)
   20f1c:	1885883a 	add	r2,r3,r2
   20f20:	10800003 	ldbu	r2,0(r2)
   20f24:	10803fcc 	andi	r2,r2,255
   20f28:	1080201c 	xori	r2,r2,128
   20f2c:	10bfe004 	addi	r2,r2,-128
   20f30:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
   20f34:	e0bffc17 	ldw	r2,-16(fp)
   20f38:	10800044 	addi	r2,r2,1
   20f3c:	e0bffc15 	stw	r2,-16(fp)
   20f40:	e0fffc17 	ldw	r3,-16(fp)
   20f44:	e0bfff17 	ldw	r2,-4(fp)
   20f48:	18bfee36 	bltu	r3,r2,20f04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7020f04>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
   20f4c:	0001883a 	nop
   20f50:	e037883a 	mov	sp,fp
   20f54:	df000017 	ldw	fp,0(sp)
   20f58:	dec00104 	addi	sp,sp,4
   20f5c:	f800283a 	ret

00020f60 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
   20f60:	defffd04 	addi	sp,sp,-12
   20f64:	df000215 	stw	fp,8(sp)
   20f68:	df000204 	addi	fp,sp,8
   20f6c:	e13ffe15 	stw	r4,-8(fp)
   20f70:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
   20f74:	00000d06 	br	20fac <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
   20f78:	e0bffe17 	ldw	r2,-8(fp)
   20f7c:	10800a17 	ldw	r2,40(r2)
   20f80:	10800044 	addi	r2,r2,1
   20f84:	1007883a 	mov	r3,r2
   20f88:	e0bfff17 	ldw	r2,-4(fp)
   20f8c:	10800003 	ldbu	r2,0(r2)
   20f90:	10803fcc 	andi	r2,r2,255
   20f94:	1080201c 	xori	r2,r2,128
   20f98:	10bfe004 	addi	r2,r2,-128
   20f9c:	18800025 	stbio	r2,0(r3)
		++ptr;
   20fa0:	e0bfff17 	ldw	r2,-4(fp)
   20fa4:	10800044 	addi	r2,r2,1
   20fa8:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
   20fac:	e0bfff17 	ldw	r2,-4(fp)
   20fb0:	10800003 	ldbu	r2,0(r2)
   20fb4:	10803fcc 	andi	r2,r2,255
   20fb8:	1080201c 	xori	r2,r2,128
   20fbc:	10bfe004 	addi	r2,r2,-128
   20fc0:	103fed1e 	bne	r2,zero,20f78 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7020f78>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
   20fc4:	0001883a 	nop
   20fc8:	e037883a 	mov	sp,fp
   20fcc:	df000017 	ldw	fp,0(sp)
   20fd0:	dec00104 	addi	sp,sp,4
   20fd4:	f800283a 	ret

00020fd8 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
   20fd8:	defffb04 	addi	sp,sp,-20
   20fdc:	dfc00415 	stw	ra,16(sp)
   20fe0:	df000315 	stw	fp,12(sp)
   20fe4:	df000304 	addi	fp,sp,12
   20fe8:	e13ffd15 	stw	r4,-12(fp)
   20fec:	e17ffe15 	stw	r5,-8(fp)
   20ff0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
   20ff4:	e0bffd17 	ldw	r2,-12(fp)
   20ff8:	10800017 	ldw	r2,0(r2)
   20ffc:	e0ffff17 	ldw	r3,-4(fp)
   21000:	180d883a 	mov	r6,r3
   21004:	e17ffe17 	ldw	r5,-8(fp)
   21008:	1009883a 	mov	r4,r2
   2100c:	0020ee40 	call	20ee4 <alt_up_character_lcd_write>
	return 0;
   21010:	0005883a 	mov	r2,zero
}
   21014:	e037883a 	mov	sp,fp
   21018:	dfc00117 	ldw	ra,4(sp)
   2101c:	df000017 	ldw	fp,0(sp)
   21020:	dec00204 	addi	sp,sp,8
   21024:	f800283a 	ret

00021028 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
   21028:	defffa04 	addi	sp,sp,-24
   2102c:	dfc00515 	stw	ra,20(sp)
   21030:	df000415 	stw	fp,16(sp)
   21034:	df000404 	addi	fp,sp,16
   21038:	e13ffd15 	stw	r4,-12(fp)
   2103c:	e17ffe15 	stw	r5,-8(fp)
   21040:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
   21044:	e0bffe17 	ldw	r2,-8(fp)
   21048:	10800a28 	cmpgeui	r2,r2,40
   2104c:	1000031e 	bne	r2,zero,2105c <alt_up_character_lcd_set_cursor_pos+0x34>
   21050:	e0bfff17 	ldw	r2,-4(fp)
   21054:	108000b0 	cmpltui	r2,r2,2
   21058:	1000021e 	bne	r2,zero,21064 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
   2105c:	00bfffc4 	movi	r2,-1
   21060:	00000906 	br	21088 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   21064:	e17fff17 	ldw	r5,-4(fp)
   21068:	e13ffe17 	ldw	r4,-8(fp)
   2106c:	0020dbc0 	call	20dbc <get_DDRAM_addr>
   21070:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
   21074:	e0bffc03 	ldbu	r2,-16(fp)
   21078:	100b883a 	mov	r5,r2
   2107c:	e13ffd17 	ldw	r4,-12(fp)
   21080:	0020e300 	call	20e30 <alt_up_character_lcd_send_cmd>
	return 0;
   21084:	0005883a 	mov	r2,zero
}
   21088:	e037883a 	mov	sp,fp
   2108c:	dfc00117 	ldw	ra,4(sp)
   21090:	df000017 	ldw	fp,0(sp)
   21094:	dec00204 	addi	sp,sp,8
   21098:	f800283a 	ret

0002109c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   2109c:	defffb04 	addi	sp,sp,-20
   210a0:	dfc00415 	stw	ra,16(sp)
   210a4:	df000315 	stw	fp,12(sp)
   210a8:	df000304 	addi	fp,sp,12
   210ac:	e13ffe15 	stw	r4,-8(fp)
   210b0:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   210b4:	e0bfff17 	ldw	r2,-4(fp)
   210b8:	10001526 	beq	r2,zero,21110 <alt_up_character_lcd_shift_cursor+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   210bc:	e0bfff17 	ldw	r2,-4(fp)
   210c0:	0080020e 	bge	zero,r2,210cc <alt_up_character_lcd_shift_cursor+0x30>
   210c4:	00800504 	movi	r2,20
   210c8:	00000106 	br	210d0 <alt_up_character_lcd_shift_cursor+0x34>
   210cc:	00800404 	movi	r2,16
   210d0:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   210d4:	e0bfff17 	ldw	r2,-4(fp)
   210d8:	1000010e 	bge	r2,zero,210e0 <alt_up_character_lcd_shift_cursor+0x44>
   210dc:	0085c83a 	sub	r2,zero,r2
   210e0:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   210e4:	00000406 	br	210f8 <alt_up_character_lcd_shift_cursor+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   210e8:	e0bffd43 	ldbu	r2,-11(fp)
   210ec:	100b883a 	mov	r5,r2
   210f0:	e13ffe17 	ldw	r4,-8(fp)
   210f4:	0020e300 	call	20e30 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   210f8:	e0bffd03 	ldbu	r2,-12(fp)
   210fc:	10ffffc4 	addi	r3,r2,-1
   21100:	e0fffd05 	stb	r3,-12(fp)
   21104:	10803fcc 	andi	r2,r2,255
   21108:	103ff71e 	bne	r2,zero,210e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70210e8>
   2110c:	00000106 	br	21114 <alt_up_character_lcd_shift_cursor+0x78>

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   21110:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   21114:	e037883a 	mov	sp,fp
   21118:	dfc00117 	ldw	ra,4(sp)
   2111c:	df000017 	ldw	fp,0(sp)
   21120:	dec00204 	addi	sp,sp,8
   21124:	f800283a 	ret

00021128 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
   21128:	defffb04 	addi	sp,sp,-20
   2112c:	dfc00415 	stw	ra,16(sp)
   21130:	df000315 	stw	fp,12(sp)
   21134:	df000304 	addi	fp,sp,12
   21138:	e13ffe15 	stw	r4,-8(fp)
   2113c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
   21140:	e0bfff17 	ldw	r2,-4(fp)
   21144:	10001526 	beq	r2,zero,2119c <alt_up_character_lcd_shift_display+0x74>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
   21148:	e0bfff17 	ldw	r2,-4(fp)
   2114c:	0080020e 	bge	zero,r2,21158 <alt_up_character_lcd_shift_display+0x30>
   21150:	00800704 	movi	r2,28
   21154:	00000106 	br	2115c <alt_up_character_lcd_shift_display+0x34>
   21158:	00800604 	movi	r2,24
   2115c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
   21160:	e0bfff17 	ldw	r2,-4(fp)
   21164:	1000010e 	bge	r2,zero,2116c <alt_up_character_lcd_shift_display+0x44>
   21168:	0085c83a 	sub	r2,zero,r2
   2116c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   21170:	00000406 	br	21184 <alt_up_character_lcd_shift_display+0x5c>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
   21174:	e0bffd43 	ldbu	r2,-11(fp)
   21178:	100b883a 	mov	r5,r2
   2117c:	e13ffe17 	ldw	r4,-8(fp)
   21180:	0020e300 	call	20e30 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
   21184:	e0bffd03 	ldbu	r2,-12(fp)
   21188:	10ffffc4 	addi	r3,r2,-1
   2118c:	e0fffd05 	stb	r3,-12(fp)
   21190:	10803fcc 	andi	r2,r2,255
   21194:	103ff71e 	bne	r2,zero,21174 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7021174>
   21198:	00000106 	br	211a0 <alt_up_character_lcd_shift_display+0x78>

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;
   2119c:	0001883a 	nop
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
   211a0:	e037883a 	mov	sp,fp
   211a4:	dfc00117 	ldw	ra,4(sp)
   211a8:	df000017 	ldw	fp,0(sp)
   211ac:	dec00204 	addi	sp,sp,8
   211b0:	f800283a 	ret

000211b4 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
   211b4:	defffa04 	addi	sp,sp,-24
   211b8:	dfc00515 	stw	ra,20(sp)
   211bc:	df000415 	stw	fp,16(sp)
   211c0:	df000404 	addi	fp,sp,16
   211c4:	e13ffd15 	stw	r4,-12(fp)
   211c8:	e17ffe15 	stw	r5,-8(fp)
   211cc:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
   211d0:	e0bffe17 	ldw	r2,-8(fp)
   211d4:	10800a28 	cmpgeui	r2,r2,40
   211d8:	1000031e 	bne	r2,zero,211e8 <alt_up_character_lcd_erase_pos+0x34>
   211dc:	e0bfff17 	ldw	r2,-4(fp)
   211e0:	108000b0 	cmpltui	r2,r2,2
   211e4:	1000021e 	bne	r2,zero,211f0 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
   211e8:	00bfffc4 	movi	r2,-1
   211ec:	00000f06 	br	2122c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
   211f0:	e17fff17 	ldw	r5,-4(fp)
   211f4:	e13ffe17 	ldw	r4,-8(fp)
   211f8:	0020dbc0 	call	20dbc <get_DDRAM_addr>
   211fc:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
   21200:	e0bffc03 	ldbu	r2,-16(fp)
   21204:	100b883a 	mov	r5,r2
   21208:	e13ffd17 	ldw	r4,-12(fp)
   2120c:	0020e300 	call	20e30 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
   21210:	e0bffd17 	ldw	r2,-12(fp)
   21214:	10800a17 	ldw	r2,40(r2)
   21218:	10800044 	addi	r2,r2,1
   2121c:	1007883a 	mov	r3,r2
   21220:	00800084 	movi	r2,2
   21224:	18800025 	stbio	r2,0(r3)
	return 0;
   21228:	0005883a 	mov	r2,zero
}
   2122c:	e037883a 	mov	sp,fp
   21230:	dfc00117 	ldw	ra,4(sp)
   21234:	df000017 	ldw	fp,0(sp)
   21238:	dec00204 	addi	sp,sp,8
   2123c:	f800283a 	ret

00021240 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
   21240:	defffd04 	addi	sp,sp,-12
   21244:	dfc00215 	stw	ra,8(sp)
   21248:	df000115 	stw	fp,4(sp)
   2124c:	df000104 	addi	fp,sp,4
   21250:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
   21254:	01400304 	movi	r5,12
   21258:	e13fff17 	ldw	r4,-4(fp)
   2125c:	0020e300 	call	20e30 <alt_up_character_lcd_send_cmd>
}
   21260:	0001883a 	nop
   21264:	e037883a 	mov	sp,fp
   21268:	dfc00117 	ldw	ra,4(sp)
   2126c:	df000017 	ldw	fp,0(sp)
   21270:	dec00204 	addi	sp,sp,8
   21274:	f800283a 	ret

00021278 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
   21278:	defffd04 	addi	sp,sp,-12
   2127c:	dfc00215 	stw	ra,8(sp)
   21280:	df000115 	stw	fp,4(sp)
   21284:	df000104 	addi	fp,sp,4
   21288:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
   2128c:	014003c4 	movi	r5,15
   21290:	e13fff17 	ldw	r4,-4(fp)
   21294:	0020e300 	call	20e30 <alt_up_character_lcd_send_cmd>
}
   21298:	0001883a 	nop
   2129c:	e037883a 	mov	sp,fp
   212a0:	dfc00117 	ldw	ra,4(sp)
   212a4:	df000017 	ldw	fp,0(sp)
   212a8:	dec00204 	addi	sp,sp,8
   212ac:	f800283a 	ret

000212b0 <alt_up_irda_enable_read_interrupt>:
#include "altera_up_avalon_irda.h"
#include "altera_up_avalon_irda_regs.h"


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
   212b0:	defffd04 	addi	sp,sp,-12
   212b4:	df000215 	stw	fp,8(sp)
   212b8:	df000204 	addi	fp,sp,8
   212bc:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   212c0:	e0bfff17 	ldw	r2,-4(fp)
   212c4:	10800a17 	ldw	r2,40(r2)
   212c8:	10800104 	addi	r2,r2,4
   212cc:	10800037 	ldwio	r2,0(r2)
   212d0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
   212d4:	e0bffe17 	ldw	r2,-8(fp)
   212d8:	10800054 	ori	r2,r2,1
   212dc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   212e0:	e0bfff17 	ldw	r2,-4(fp)
   212e4:	10800a17 	ldw	r2,40(r2)
   212e8:	10800104 	addi	r2,r2,4
   212ec:	1007883a 	mov	r3,r2
   212f0:	e0bffe17 	ldw	r2,-8(fp)
   212f4:	18800035 	stwio	r2,0(r3)
}
   212f8:	0001883a 	nop
   212fc:	e037883a 	mov	sp,fp
   21300:	df000017 	ldw	fp,0(sp)
   21304:	dec00104 	addi	sp,sp,4
   21308:	f800283a 	ret

0002130c <alt_up_irda_disable_read_interrupt>:

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
   2130c:	defffd04 	addi	sp,sp,-12
   21310:	df000215 	stw	fp,8(sp)
   21314:	df000204 	addi	fp,sp,8
   21318:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   2131c:	e0bfff17 	ldw	r2,-4(fp)
   21320:	10800a17 	ldw	r2,40(r2)
   21324:	10800104 	addi	r2,r2,4
   21328:	10800037 	ldwio	r2,0(r2)
   2132c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
   21330:	e0fffe17 	ldw	r3,-8(fp)
   21334:	00bfff84 	movi	r2,-2
   21338:	1884703a 	and	r2,r3,r2
   2133c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
   21340:	e0bfff17 	ldw	r2,-4(fp)
   21344:	10800a17 	ldw	r2,40(r2)
   21348:	10800104 	addi	r2,r2,4
   2134c:	1007883a 	mov	r3,r2
   21350:	e0bffe17 	ldw	r2,-8(fp)
   21354:	18800035 	stwio	r2,0(r3)
}
   21358:	0001883a 	nop
   2135c:	e037883a 	mov	sp,fp
   21360:	df000017 	ldw	fp,0(sp)
   21364:	dec00104 	addi	sp,sp,4
   21368:	f800283a 	ret

0002136c <alt_up_irda_get_used_space_in_read_FIFO>:

unsigned alt_up_irda_get_used_space_in_read_FIFO(alt_up_irda_dev *irda)
{
   2136c:	defffd04 	addi	sp,sp,-12
   21370:	df000215 	stw	fp,8(sp)
   21374:	df000204 	addi	fp,sp,8
   21378:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   2137c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
   21380:	e0bfff17 	ldw	r2,-4(fp)
   21384:	10800a17 	ldw	r2,40(r2)
   21388:	10800084 	addi	r2,r2,2
   2138c:	1080002b 	ldhuio	r2,0(r2)
   21390:	10bfffcc 	andi	r2,r2,65535
   21394:	e0bffe0d 	sth	r2,-8(fp)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
   21398:	e0bffe0b 	ldhu	r2,-8(fp)
}
   2139c:	e037883a 	mov	sp,fp
   213a0:	df000017 	ldw	fp,0(sp)
   213a4:	dec00104 	addi	sp,sp,4
   213a8:	f800283a 	ret

000213ac <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
   213ac:	defffd04 	addi	sp,sp,-12
   213b0:	df000215 	stw	fp,8(sp)
   213b4:	df000204 	addi	fp,sp,8
   213b8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
   213bc:	e0bfff17 	ldw	r2,-4(fp)
   213c0:	10800a17 	ldw	r2,40(r2)
   213c4:	10800104 	addi	r2,r2,4
   213c8:	10800037 	ldwio	r2,0(r2)
   213cc:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
   213d0:	e0bffe17 	ldw	r2,-8(fp)
   213d4:	1004d43a 	srli	r2,r2,16
}
   213d8:	e037883a 	mov	sp,fp
   213dc:	df000017 	ldw	fp,0(sp)
   213e0:	dec00104 	addi	sp,sp,4
   213e4:	f800283a 	ret

000213e8 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
   213e8:	defffd04 	addi	sp,sp,-12
   213ec:	df000215 	stw	fp,8(sp)
   213f0:	df000204 	addi	fp,sp,8
   213f4:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
   213f8:	e0bfff17 	ldw	r2,-4(fp)
   213fc:	1080800c 	andi	r2,r2,512
   21400:	1004d27a 	srli	r2,r2,9
   21404:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   21408:	e0bffe17 	ldw	r2,-8(fp)
   2140c:	10000226 	beq	r2,zero,21418 <alt_up_irda_check_parity+0x30>
   21410:	00bfffc4 	movi	r2,-1
   21414:	00000106 	br	2141c <alt_up_irda_check_parity+0x34>
   21418:	0005883a 	mov	r2,zero
}
   2141c:	e037883a 	mov	sp,fp
   21420:	df000017 	ldw	fp,0(sp)
   21424:	dec00104 	addi	sp,sp,4
   21428:	f800283a 	ret

0002142c <alt_up_irda_write_data>:

int alt_up_irda_write_data(alt_up_irda_dev *irda, alt_u8 data)
{
   2142c:	defffd04 	addi	sp,sp,-12
   21430:	df000215 	stw	fp,8(sp)
   21434:	df000204 	addi	fp,sp,8
   21438:	e13ffe15 	stw	r4,-8(fp)
   2143c:	2805883a 	mov	r2,r5
   21440:	e0bfff05 	stb	r2,-4(fp)
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
   21444:	e0bffe17 	ldw	r2,-8(fp)
   21448:	10800a17 	ldw	r2,40(r2)
   2144c:	1007883a 	mov	r3,r2
   21450:	e0bfff03 	ldbu	r2,-4(fp)
   21454:	18800035 	stwio	r2,0(r3)
	return 0;
   21458:	0005883a 	mov	r2,zero
}
   2145c:	e037883a 	mov	sp,fp
   21460:	df000017 	ldw	fp,0(sp)
   21464:	dec00104 	addi	sp,sp,4
   21468:	f800283a 	ret

0002146c <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
   2146c:	defffa04 	addi	sp,sp,-24
   21470:	dfc00515 	stw	ra,20(sp)
   21474:	df000415 	stw	fp,16(sp)
   21478:	df000404 	addi	fp,sp,16
   2147c:	e13ffd15 	stw	r4,-12(fp)
   21480:	e17ffe15 	stw	r5,-8(fp)
   21484:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
   21488:	e0bffd17 	ldw	r2,-12(fp)
   2148c:	10800a17 	ldw	r2,40(r2)
   21490:	10800037 	ldwio	r2,0(r2)
   21494:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
   21498:	e0bffc17 	ldw	r2,-16(fp)
   2149c:	1007883a 	mov	r3,r2
   214a0:	e0bffe17 	ldw	r2,-8(fp)
   214a4:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_irda_check_parity(data_reg);
   214a8:	e13ffc17 	ldw	r4,-16(fp)
   214ac:	00213e80 	call	213e8 <alt_up_irda_check_parity>
   214b0:	1007883a 	mov	r3,r2
   214b4:	e0bfff17 	ldw	r2,-4(fp)
   214b8:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
   214bc:	e0bffc17 	ldw	r2,-16(fp)
   214c0:	10a0000c 	andi	r2,r2,32768
   214c4:	1004d3fa 	srli	r2,r2,15
   214c8:	10bfffc4 	addi	r2,r2,-1
}
   214cc:	e037883a 	mov	sp,fp
   214d0:	dfc00117 	ldw	ra,4(sp)
   214d4:	df000017 	ldw	fp,0(sp)
   214d8:	dec00204 	addi	sp,sp,8
   214dc:	f800283a 	ret

000214e0 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
   214e0:	defff804 	addi	sp,sp,-32
   214e4:	dfc00715 	stw	ra,28(sp)
   214e8:	df000615 	stw	fp,24(sp)
   214ec:	df000604 	addi	fp,sp,24
   214f0:	e13ffd15 	stw	r4,-12(fp)
   214f4:	e17ffe15 	stw	r5,-8(fp)
   214f8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   214fc:	e0bffd17 	ldw	r2,-12(fp)
   21500:	10800017 	ldw	r2,0(r2)
   21504:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   21508:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   2150c:	00000c06 	br	21540 <alt_up_irda_read_fd+0x60>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
   21510:	e0bffe17 	ldw	r2,-8(fp)
   21514:	10c00044 	addi	r3,r2,1
   21518:	e0fffe15 	stw	r3,-8(fp)
   2151c:	e0fffc04 	addi	r3,fp,-16
   21520:	180d883a 	mov	r6,r3
   21524:	100b883a 	mov	r5,r2
   21528:	e13ffb17 	ldw	r4,-20(fp)
   2152c:	002146c0 	call	2146c <alt_up_irda_read_data>
   21530:	1000081e 	bne	r2,zero,21554 <alt_up_irda_read_fd+0x74>
			count++;
   21534:	e0bffa17 	ldw	r2,-24(fp)
   21538:	10800044 	addi	r2,r2,1
   2153c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   21540:	e0bfff17 	ldw	r2,-4(fp)
   21544:	10ffffc4 	addi	r3,r2,-1
   21548:	e0ffff15 	stw	r3,-4(fp)
   2154c:	103ff01e 	bne	r2,zero,21510 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7021510>
   21550:	00000106 	br	21558 <alt_up_irda_read_fd+0x78>
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   21554:	0001883a 	nop
	}
	return count;
   21558:	e0bffa17 	ldw	r2,-24(fp)
}
   2155c:	e037883a 	mov	sp,fp
   21560:	dfc00117 	ldw	ra,4(sp)
   21564:	df000017 	ldw	fp,0(sp)
   21568:	dec00204 	addi	sp,sp,8
   2156c:	f800283a 	ret

00021570 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
   21570:	defff904 	addi	sp,sp,-28
   21574:	dfc00615 	stw	ra,24(sp)
   21578:	df000515 	stw	fp,20(sp)
   2157c:	df000504 	addi	fp,sp,20
   21580:	e13ffd15 	stw	r4,-12(fp)
   21584:	e17ffe15 	stw	r5,-8(fp)
   21588:	e1bfff15 	stw	r6,-4(fp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
   2158c:	e0bffd17 	ldw	r2,-12(fp)
   21590:	10800017 	ldw	r2,0(r2)
   21594:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   21598:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   2159c:	00000c06 	br	215d0 <alt_up_irda_write_fd+0x60>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
   215a0:	e0bffe17 	ldw	r2,-8(fp)
   215a4:	10c00044 	addi	r3,r2,1
   215a8:	e0fffe15 	stw	r3,-8(fp)
   215ac:	10800003 	ldbu	r2,0(r2)
   215b0:	10803fcc 	andi	r2,r2,255
   215b4:	100b883a 	mov	r5,r2
   215b8:	e13ffc17 	ldw	r4,-16(fp)
   215bc:	002142c0 	call	2142c <alt_up_irda_write_data>
   215c0:	1000081e 	bne	r2,zero,215e4 <alt_up_irda_write_fd+0x74>
			count++;
   215c4:	e0bffb17 	ldw	r2,-20(fp)
   215c8:	10800044 	addi	r2,r2,1
   215cc:	e0bffb15 	stw	r2,-20(fp)

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
   215d0:	e0bfff17 	ldw	r2,-4(fp)
   215d4:	10ffffc4 	addi	r3,r2,-1
   215d8:	e0ffff15 	stw	r3,-4(fp)
   215dc:	103ff01e 	bne	r2,zero,215a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70215a0>
   215e0:	00000106 	br	215e8 <alt_up_irda_write_fd+0x78>
	{
		if (alt_up_irda_write_data(irda, (alt_u8) *ptr++)==0)
			count++;
		else
			break;
   215e4:	0001883a 	nop
	}
	return count;
   215e8:	e0bffb17 	ldw	r2,-20(fp)
}
   215ec:	e037883a 	mov	sp,fp
   215f0:	dfc00117 	ldw	ra,4(sp)
   215f4:	df000017 	ldw	fp,0(sp)
   215f8:	dec00204 	addi	sp,sp,8
   215fc:	f800283a 	ret

00021600 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
   21600:	defffc04 	addi	sp,sp,-16
   21604:	dfc00315 	stw	ra,12(sp)
   21608:	df000215 	stw	fp,8(sp)
   2160c:	df000204 	addi	fp,sp,8
   21610:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
   21614:	d1601e04 	addi	r5,gp,-32648
   21618:	e13fff17 	ldw	r4,-4(fp)
   2161c:	00223680 	call	22368 <alt_find_dev>
   21620:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   21624:	e0bffe17 	ldw	r2,-8(fp)
}
   21628:	e037883a 	mov	sp,fp
   2162c:	dfc00117 	ldw	ra,4(sp)
   21630:	df000017 	ldw	fp,0(sp)
   21634:	dec00204 	addi	sp,sp,8
   21638:	f800283a 	ret

0002163c <read_RI_bit>:


//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
   2163c:	defffd04 	addi	sp,sp,-12
   21640:	df000215 	stw	fp,8(sp)
   21644:	df000204 	addi	fp,sp,8
   21648:	e13fff15 	stw	r4,-4(fp)
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
   2164c:	e0bfff17 	ldw	r2,-4(fp)
   21650:	1080400c 	andi	r2,r2,256
   21654:	1004d23a 	srli	r2,r2,8
   21658:	e0bffe05 	stb	r2,-8(fp)
	return ri;
   2165c:	e0bffe03 	ldbu	r2,-8(fp)
}
   21660:	e037883a 	mov	sp,fp
   21664:	df000017 	ldw	fp,0(sp)
   21668:	dec00104 	addi	sp,sp,4
   2166c:	f800283a 	ret

00021670 <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
   21670:	defffd04 	addi	sp,sp,-12
   21674:	df000215 	stw	fp,8(sp)
   21678:	df000204 	addi	fp,sp,8
   2167c:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
   21680:	e0bfff17 	ldw	r2,-4(fp)
   21684:	1080004c 	andi	r2,r2,1
   21688:	e0bffe05 	stb	r2,-8(fp)
	return re;
   2168c:	e0bffe03 	ldbu	r2,-8(fp)
}
   21690:	e037883a 	mov	sp,fp
   21694:	df000017 	ldw	fp,0(sp)
   21698:	dec00104 	addi	sp,sp,4
   2169c:	f800283a 	ret

000216a0 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
   216a0:	defffd04 	addi	sp,sp,-12
   216a4:	df000215 	stw	fp,8(sp)
   216a8:	df000204 	addi	fp,sp,8
   216ac:	e13fff15 	stw	r4,-4(fp)
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
   216b0:	e0bfff17 	ldw	r2,-4(fp)
   216b4:	1081000c 	andi	r2,r2,1024
   216b8:	1004d2ba 	srli	r2,r2,10
   216bc:	e0bffe05 	stb	r2,-8(fp)
	return re;
   216c0:	e0bffe03 	ldbu	r2,-8(fp)
}
   216c4:	e037883a 	mov	sp,fp
   216c8:	df000017 	ldw	fp,0(sp)
   216cc:	dec00104 	addi	sp,sp,4
   216d0:	f800283a 	ret

000216d4 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
   216d4:	defffd04 	addi	sp,sp,-12
   216d8:	df000215 	stw	fp,8(sp)
   216dc:	df000204 	addi	fp,sp,8
   216e0:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
   216e4:	e0bfff17 	ldw	r2,-4(fp)
   216e8:	1004d43a 	srli	r2,r2,16
   216ec:	e0bffe0d 	sth	r2,-8(fp)
	return ravail;
   216f0:	e0bffe0b 	ldhu	r2,-8(fp)
}
   216f4:	e037883a 	mov	sp,fp
   216f8:	df000017 	ldw	fp,0(sp)
   216fc:	dec00104 	addi	sp,sp,4
   21700:	f800283a 	ret

00021704 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
   21704:	defffd04 	addi	sp,sp,-12
   21708:	df000215 	stw	fp,8(sp)
   2170c:	df000204 	addi	fp,sp,8
   21710:	e13fff15 	stw	r4,-4(fp)
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
   21714:	e0bfff17 	ldw	r2,-4(fp)
   21718:	10a0000c 	andi	r2,r2,32768
   2171c:	1004d3fa 	srli	r2,r2,15
   21720:	e0bffe05 	stb	r2,-8(fp)
	return rvalid;
   21724:	e0bffe03 	ldbu	r2,-8(fp)
}
   21728:	e037883a 	mov	sp,fp
   2172c:	df000017 	ldw	fp,0(sp)
   21730:	dec00104 	addi	sp,sp,4
   21734:	f800283a 	ret

00021738 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
   21738:	defffd04 	addi	sp,sp,-12
   2173c:	df000215 	stw	fp,8(sp)
   21740:	df000204 	addi	fp,sp,8
   21744:	e13fff15 	stw	r4,-4(fp)
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
   21748:	e0bfff17 	ldw	r2,-4(fp)
   2174c:	e0bffe05 	stb	r2,-8(fp)
	return data;
   21750:	e0bffe03 	ldbu	r2,-8(fp)
}
   21754:	e037883a 	mov	sp,fp
   21758:	df000017 	ldw	fp,0(sp)
   2175c:	dec00104 	addi	sp,sp,4
   21760:	f800283a 	ret

00021764 <alt_up_ps2_init>:

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
   21764:	defffb04 	addi	sp,sp,-20
   21768:	dfc00415 	stw	ra,16(sp)
   2176c:	df000315 	stw	fp,12(sp)
   21770:	df000304 	addi	fp,sp,12
   21774:	e13fff15 	stw	r4,-4(fp)
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
   21778:	01403fc4 	movi	r5,255
   2177c:	e13fff17 	ldw	r4,-4(fp)
   21780:	00219c40 	call	219c4 <alt_up_ps2_write_data_byte_with_ack>
   21784:	e0bffd15 	stw	r2,-12(fp)
	if (status == 0)
   21788:	e0bffd17 	ldw	r2,-12(fp)
   2178c:	1000211e 	bne	r2,zero,21814 <alt_up_ps2_init+0xb0>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   21790:	e0bffe04 	addi	r2,fp,-8
   21794:	100b883a 	mov	r5,r2
   21798:	e13fff17 	ldw	r4,-4(fp)
   2179c:	0021a280 	call	21a28 <alt_up_ps2_read_data_byte_timeout>
   217a0:	e0bffd15 	stw	r2,-12(fp)
		if (status == 0 && byte == 0xAA)
   217a4:	e0bffd17 	ldw	r2,-12(fp)
   217a8:	10001a1e 	bne	r2,zero,21814 <alt_up_ps2_init+0xb0>
   217ac:	e0bffe03 	ldbu	r2,-8(fp)
   217b0:	10803fcc 	andi	r2,r2,255
   217b4:	10802a98 	cmpnei	r2,r2,170
   217b8:	1000161e 	bne	r2,zero,21814 <alt_up_ps2_init+0xb0>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
   217bc:	e0bffe04 	addi	r2,fp,-8
   217c0:	100b883a 	mov	r5,r2
   217c4:	e13fff17 	ldw	r4,-4(fp)
   217c8:	0021a280 	call	21a28 <alt_up_ps2_read_data_byte_timeout>
   217cc:	e0bffd15 	stw	r2,-12(fp)
			if (status == -ETIMEDOUT)
   217d0:	e0bffd17 	ldw	r2,-12(fp)
   217d4:	10bfe318 	cmpnei	r2,r2,-116
   217d8:	1000041e 	bne	r2,zero,217ec <alt_up_ps2_init+0x88>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
   217dc:	e0bfff17 	ldw	r2,-4(fp)
   217e0:	00c00044 	movi	r3,1
   217e4:	10c00d15 	stw	r3,52(r2)
				ps2->device_type = PS2_MOUSE;
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
			}
		}
	}
}
   217e8:	00000a06 	br	21814 <alt_up_ps2_init+0xb0>
			if (status == -ETIMEDOUT)
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
			}
			else if (status == 0 && byte == 0x00)
   217ec:	e0bffd17 	ldw	r2,-12(fp)
   217f0:	1000081e 	bne	r2,zero,21814 <alt_up_ps2_init+0xb0>
   217f4:	e0bffe03 	ldbu	r2,-8(fp)
   217f8:	10803fcc 	andi	r2,r2,255
   217fc:	1000051e 	bne	r2,zero,21814 <alt_up_ps2_init+0xb0>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
   21800:	e0bfff17 	ldw	r2,-4(fp)
   21804:	10000d15 	stw	zero,52(r2)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
   21808:	01403d04 	movi	r5,244
   2180c:	e13fff17 	ldw	r4,-4(fp)
   21810:	00218e80 	call	218e8 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
   21814:	0001883a 	nop
   21818:	e037883a 	mov	sp,fp
   2181c:	dfc00117 	ldw	ra,4(sp)
   21820:	df000017 	ldw	fp,0(sp)
   21824:	dec00204 	addi	sp,sp,8
   21828:	f800283a 	ret

0002182c <alt_up_ps2_enable_read_interrupt>:

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
   2182c:	defffd04 	addi	sp,sp,-12
   21830:	df000215 	stw	fp,8(sp)
   21834:	df000204 	addi	fp,sp,8
   21838:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   2183c:	e0bfff17 	ldw	r2,-4(fp)
   21840:	10800a17 	ldw	r2,40(r2)
   21844:	10800104 	addi	r2,r2,4
   21848:	10800037 	ldwio	r2,0(r2)
   2184c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   21850:	e0bffe17 	ldw	r2,-8(fp)
   21854:	10800054 	ori	r2,r2,1
   21858:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   2185c:	e0bfff17 	ldw	r2,-4(fp)
   21860:	10800a17 	ldw	r2,40(r2)
   21864:	10800104 	addi	r2,r2,4
   21868:	1007883a 	mov	r3,r2
   2186c:	e0bffe17 	ldw	r2,-8(fp)
   21870:	18800035 	stwio	r2,0(r3)
}
   21874:	0001883a 	nop
   21878:	e037883a 	mov	sp,fp
   2187c:	df000017 	ldw	fp,0(sp)
   21880:	dec00104 	addi	sp,sp,4
   21884:	f800283a 	ret

00021888 <alt_up_ps2_disable_read_interrupt>:

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
   21888:	defffd04 	addi	sp,sp,-12
   2188c:	df000215 	stw	fp,8(sp)
   21890:	df000204 	addi	fp,sp,8
   21894:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
   21898:	e0bfff17 	ldw	r2,-4(fp)
   2189c:	10800a17 	ldw	r2,40(r2)
   218a0:	10800104 	addi	r2,r2,4
   218a4:	10800037 	ldwio	r2,0(r2)
   218a8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
   218ac:	e0fffe17 	ldw	r3,-8(fp)
   218b0:	00bfff84 	movi	r2,-2
   218b4:	1884703a 	and	r2,r3,r2
   218b8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
   218bc:	e0bfff17 	ldw	r2,-4(fp)
   218c0:	10800a17 	ldw	r2,40(r2)
   218c4:	10800104 	addi	r2,r2,4
   218c8:	1007883a 	mov	r3,r2
   218cc:	e0bffe17 	ldw	r2,-8(fp)
   218d0:	18800035 	stwio	r2,0(r3)
}
   218d4:	0001883a 	nop
   218d8:	e037883a 	mov	sp,fp
   218dc:	df000017 	ldw	fp,0(sp)
   218e0:	dec00104 	addi	sp,sp,4
   218e4:	f800283a 	ret

000218e8 <alt_up_ps2_write_data_byte>:

int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
   218e8:	defffb04 	addi	sp,sp,-20
   218ec:	dfc00415 	stw	ra,16(sp)
   218f0:	df000315 	stw	fp,12(sp)
   218f4:	df000304 	addi	fp,sp,12
   218f8:	e13ffe15 	stw	r4,-8(fp)
   218fc:	2805883a 	mov	r2,r5
   21900:	e0bfff05 	stb	r2,-4(fp)
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
   21904:	e0bffe17 	ldw	r2,-8(fp)
   21908:	10800a17 	ldw	r2,40(r2)
   2190c:	1007883a 	mov	r3,r2
   21910:	e0bfff03 	ldbu	r2,-4(fp)
   21914:	18800025 	stbio	r2,0(r3)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
   21918:	e0bffe17 	ldw	r2,-8(fp)
   2191c:	10800a17 	ldw	r2,40(r2)
   21920:	10800104 	addi	r2,r2,4
   21924:	10800037 	ldwio	r2,0(r2)
   21928:	e0bffd15 	stw	r2,-12(fp)
	if (read_CE_bit(ctrl_reg))
   2192c:	e13ffd17 	ldw	r4,-12(fp)
   21930:	00216a00 	call	216a0 <read_CE_bit>
   21934:	10803fcc 	andi	r2,r2,255
   21938:	10000226 	beq	r2,zero,21944 <alt_up_ps2_write_data_byte+0x5c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
   2193c:	00bffec4 	movi	r2,-5
   21940:	00000106 	br	21948 <alt_up_ps2_write_data_byte+0x60>
	}
	return 0;
   21944:	0005883a 	mov	r2,zero
}
   21948:	e037883a 	mov	sp,fp
   2194c:	dfc00117 	ldw	ra,4(sp)
   21950:	df000017 	ldw	fp,0(sp)
   21954:	dec00204 	addi	sp,sp,8
   21958:	f800283a 	ret

0002195c <alt_up_ps2_wait_for_ack>:

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
   2195c:	defffc04 	addi	sp,sp,-16
   21960:	dfc00315 	stw	ra,12(sp)
   21964:	df000215 	stw	fp,8(sp)
   21968:	df000204 	addi	fp,sp,8
   2196c:	e13fff15 	stw	r4,-4(fp)
	unsigned char data = 0;
   21970:	e03ffe45 	stb	zero,-7(fp)
	unsigned char status = 0;
   21974:	e03ffe05 	stb	zero,-8(fp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
   21978:	e0bffe44 	addi	r2,fp,-7
   2197c:	100b883a 	mov	r5,r2
   21980:	e13fff17 	ldw	r4,-4(fp)
   21984:	0021a280 	call	21a28 <alt_up_ps2_read_data_byte_timeout>
   21988:	e0bffe05 	stb	r2,-8(fp)
		if ( status == 0)
   2198c:	e0bffe03 	ldbu	r2,-8(fp)
   21990:	1000061e 	bne	r2,zero,219ac <alt_up_ps2_wait_for_ack+0x50>
		{
			if (data == PS2_ACK)
   21994:	e0bffe43 	ldbu	r2,-7(fp)
   21998:	10803fcc 	andi	r2,r2,255
   2199c:	10803e98 	cmpnei	r2,r2,250
   219a0:	103ff51e 	bne	r2,zero,21978 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7021978>
				return 0;
   219a4:	0005883a 	mov	r2,zero
   219a8:	00000106 	br	219b0 <alt_up_ps2_wait_for_ack+0x54>
		}
		else 
		{
			return status;
   219ac:	e0bffe03 	ldbu	r2,-8(fp)
		}
	} while(1);
	return -ETIMEDOUT;
}
   219b0:	e037883a 	mov	sp,fp
   219b4:	dfc00117 	ldw	ra,4(sp)
   219b8:	df000017 	ldw	fp,0(sp)
   219bc:	dec00204 	addi	sp,sp,8
   219c0:	f800283a 	ret

000219c4 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
   219c4:	defffa04 	addi	sp,sp,-24
   219c8:	dfc00515 	stw	ra,20(sp)
   219cc:	df000415 	stw	fp,16(sp)
   219d0:	df000404 	addi	fp,sp,16
   219d4:	e13ffe15 	stw	r4,-8(fp)
   219d8:	2805883a 	mov	r2,r5
   219dc:	e0bfff05 	stb	r2,-4(fp)
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
   219e0:	e0bfff03 	ldbu	r2,-4(fp)
   219e4:	100b883a 	mov	r5,r2
   219e8:	e13ffe17 	ldw	r4,-8(fp)
   219ec:	00218e80 	call	218e8 <alt_up_ps2_write_data_byte>
   219f0:	e0bffc15 	stw	r2,-16(fp)
	if ( send_status != 0)
   219f4:	e0bffc17 	ldw	r2,-16(fp)
   219f8:	10000226 	beq	r2,zero,21a04 <alt_up_ps2_write_data_byte_with_ack+0x40>
		// return on sending error
		return send_status;
   219fc:	e0bffc17 	ldw	r2,-16(fp)
   21a00:	00000406 	br	21a14 <alt_up_ps2_write_data_byte_with_ack+0x50>

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
   21a04:	e13ffe17 	ldw	r4,-8(fp)
   21a08:	002195c0 	call	2195c <alt_up_ps2_wait_for_ack>
   21a0c:	e0bffd15 	stw	r2,-12(fp)
	return ack_status;
   21a10:	e0bffd17 	ldw	r2,-12(fp)
}
   21a14:	e037883a 	mov	sp,fp
   21a18:	dfc00117 	ldw	ra,4(sp)
   21a1c:	df000017 	ldw	fp,0(sp)
   21a20:	dec00204 	addi	sp,sp,8
   21a24:	f800283a 	ret

00021a28 <alt_up_ps2_read_data_byte_timeout>:

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   21a28:	defffa04 	addi	sp,sp,-24
   21a2c:	dfc00515 	stw	ra,20(sp)
   21a30:	df000415 	stw	fp,16(sp)
   21a34:	df000404 	addi	fp,sp,16
   21a38:	e13ffe15 	stw	r4,-8(fp)
   21a3c:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   21a40:	e03ffd15 	stw	zero,-12(fp)
	unsigned int count = 0;
   21a44:	e03ffc15 	stw	zero,-16(fp)
	do {
		count++;
   21a48:	e0bffc17 	ldw	r2,-16(fp)
   21a4c:	10800044 	addi	r2,r2,1
   21a50:	e0bffc15 	stw	r2,-16(fp)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   21a54:	e0bffe17 	ldw	r2,-8(fp)
   21a58:	10800a17 	ldw	r2,40(r2)
   21a5c:	10800037 	ldwio	r2,0(r2)
   21a60:	e0bffd15 	stw	r2,-12(fp)
		if (read_data_valid(data_reg))
   21a64:	e13ffd17 	ldw	r4,-12(fp)
   21a68:	00217040 	call	21704 <read_data_valid>
   21a6c:	10803fcc 	andi	r2,r2,255
   21a70:	10000726 	beq	r2,zero,21a90 <alt_up_ps2_read_data_byte_timeout+0x68>
		{
			*byte = read_data_byte(data_reg);
   21a74:	e13ffd17 	ldw	r4,-12(fp)
   21a78:	00217380 	call	21738 <read_data_byte>
   21a7c:	1007883a 	mov	r3,r2
   21a80:	e0bfff17 	ldw	r2,-4(fp)
   21a84:	10c00005 	stb	r3,0(r2)
			return 0;
   21a88:	0005883a 	mov	r2,zero
   21a8c:	00000806 	br	21ab0 <alt_up_ps2_read_data_byte_timeout+0x88>
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
   21a90:	e0bffe17 	ldw	r2,-8(fp)
   21a94:	10800c17 	ldw	r2,48(r2)
   21a98:	103feb26 	beq	r2,zero,21a48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7021a48>
   21a9c:	e0bffe17 	ldw	r2,-8(fp)
   21aa0:	10c00c17 	ldw	r3,48(r2)
   21aa4:	e0bffc17 	ldw	r2,-16(fp)
   21aa8:	18bfe72e 	bgeu	r3,r2,21a48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7021a48>
		{
			return -ETIMEDOUT;
   21aac:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
   21ab0:	e037883a 	mov	sp,fp
   21ab4:	dfc00117 	ldw	ra,4(sp)
   21ab8:	df000017 	ldw	fp,0(sp)
   21abc:	dec00204 	addi	sp,sp,8
   21ac0:	f800283a 	ret

00021ac4 <alt_up_ps2_read_data_byte>:

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
   21ac4:	defffb04 	addi	sp,sp,-20
   21ac8:	dfc00415 	stw	ra,16(sp)
   21acc:	df000315 	stw	fp,12(sp)
   21ad0:	df000304 	addi	fp,sp,12
   21ad4:	e13ffe15 	stw	r4,-8(fp)
   21ad8:	e17fff15 	stw	r5,-4(fp)
	unsigned int data_reg = 0; 
   21adc:	e03ffd15 	stw	zero,-12(fp)
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   21ae0:	e0bffe17 	ldw	r2,-8(fp)
   21ae4:	10800a17 	ldw	r2,40(r2)
   21ae8:	10800037 	ldwio	r2,0(r2)
   21aec:	e0bffd15 	stw	r2,-12(fp)
	if (read_data_valid(data_reg))
   21af0:	e13ffd17 	ldw	r4,-12(fp)
   21af4:	00217040 	call	21704 <read_data_valid>
   21af8:	10803fcc 	andi	r2,r2,255
   21afc:	10000726 	beq	r2,zero,21b1c <alt_up_ps2_read_data_byte+0x58>
	{
		*byte = read_data_byte(data_reg);
   21b00:	e13ffd17 	ldw	r4,-12(fp)
   21b04:	00217380 	call	21738 <read_data_byte>
   21b08:	1007883a 	mov	r3,r2
   21b0c:	e0bfff17 	ldw	r2,-4(fp)
   21b10:	10c00005 	stb	r3,0(r2)
		return 0;
   21b14:	0005883a 	mov	r2,zero
   21b18:	00000106 	br	21b20 <alt_up_ps2_read_data_byte+0x5c>
	}
	return -1;
   21b1c:	00bfffc4 	movi	r2,-1
}
   21b20:	e037883a 	mov	sp,fp
   21b24:	dfc00117 	ldw	ra,4(sp)
   21b28:	df000017 	ldw	fp,0(sp)
   21b2c:	dec00204 	addi	sp,sp,8
   21b30:	f800283a 	ret

00021b34 <alt_up_ps2_clear_fifo>:

void alt_up_ps2_clear_fifo(alt_up_ps2_dev *ps2)
{
   21b34:	defffb04 	addi	sp,sp,-20
   21b38:	dfc00415 	stw	ra,16(sp)
   21b3c:	df000315 	stw	fp,12(sp)
   21b40:	df000304 	addi	fp,sp,12
   21b44:	e13fff15 	stw	r4,-4(fp)
	// The DATA byte of the data register will be automatically cleared after a read
	// So we simply keep reading it until there are no available bytes
	alt_u16 num = 0;
   21b48:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int data_reg = 0;
   21b4c:	e03ffe15 	stw	zero,-8(fp)
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
   21b50:	e0bfff17 	ldw	r2,-4(fp)
   21b54:	10800a17 	ldw	r2,40(r2)
   21b58:	10800037 	ldwio	r2,0(r2)
   21b5c:	e0bffe15 	stw	r2,-8(fp)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
   21b60:	e13ffe17 	ldw	r4,-8(fp)
   21b64:	00216d40 	call	216d4 <read_num_bytes_available>
   21b68:	e0bffd0d 	sth	r2,-12(fp)
	} while (num > 0);
   21b6c:	e0bffd0b 	ldhu	r2,-12(fp)
   21b70:	103ff71e 	bne	r2,zero,21b50 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7021b50>
}
   21b74:	0001883a 	nop
   21b78:	e037883a 	mov	sp,fp
   21b7c:	dfc00117 	ldw	ra,4(sp)
   21b80:	df000017 	ldw	fp,0(sp)
   21b84:	dec00204 	addi	sp,sp,8
   21b88:	f800283a 	ret

00021b8c <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
   21b8c:	defff804 	addi	sp,sp,-32
   21b90:	dfc00715 	stw	ra,28(sp)
   21b94:	df000615 	stw	fp,24(sp)
   21b98:	df000604 	addi	fp,sp,24
   21b9c:	e13ffd15 	stw	r4,-12(fp)
   21ba0:	e17ffe15 	stw	r5,-8(fp)
   21ba4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   21ba8:	e0bffd17 	ldw	r2,-12(fp)
   21bac:	10800017 	ldw	r2,0(r2)
   21bb0:	e0bffa15 	stw	r2,-24(fp)
	int status = 0;
   21bb4:	e03ffb15 	stw	zero,-20(fp)
	int count = 0;
   21bb8:	e03ffc15 	stw	zero,-16(fp)
	while (count < len);
   21bbc:	e0fffc17 	ldw	r3,-16(fp)
   21bc0:	e0bfff17 	ldw	r2,-4(fp)
   21bc4:	18bffd16 	blt	r3,r2,21bbc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7021bbc>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
   21bc8:	e0bffe17 	ldw	r2,-8(fp)
   21bcc:	10c00044 	addi	r3,r2,1
   21bd0:	e0fffe15 	stw	r3,-8(fp)
   21bd4:	100b883a 	mov	r5,r2
   21bd8:	e13ffa17 	ldw	r4,-24(fp)
   21bdc:	0021a280 	call	21a28 <alt_up_ps2_read_data_byte_timeout>
   21be0:	e0bffb15 	stw	r2,-20(fp)
		if (status!=0)
   21be4:	e0bffb17 	ldw	r2,-20(fp)
   21be8:	10000226 	beq	r2,zero,21bf4 <alt_up_ps2_read_fd+0x68>
			return count;
   21bec:	e0bffc17 	ldw	r2,-16(fp)
   21bf0:	00000406 	br	21c04 <alt_up_ps2_read_fd+0x78>
		count++;
   21bf4:	e0bffc17 	ldw	r2,-16(fp)
   21bf8:	10800044 	addi	r2,r2,1
   21bfc:	e0bffc15 	stw	r2,-16(fp)
	} 
	return count;
   21c00:	e0bffc17 	ldw	r2,-16(fp)
}
   21c04:	e037883a 	mov	sp,fp
   21c08:	dfc00117 	ldw	ra,4(sp)
   21c0c:	df000017 	ldw	fp,0(sp)
   21c10:	dec00204 	addi	sp,sp,8
   21c14:	f800283a 	ret

00021c18 <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
   21c18:	defff804 	addi	sp,sp,-32
   21c1c:	dfc00715 	stw	ra,28(sp)
   21c20:	df000615 	stw	fp,24(sp)
   21c24:	df000604 	addi	fp,sp,24
   21c28:	e13ffd15 	stw	r4,-12(fp)
   21c2c:	e17ffe15 	stw	r5,-8(fp)
   21c30:	e1bfff15 	stw	r6,-4(fp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
   21c34:	e0bffd17 	ldw	r2,-12(fp)
   21c38:	10800017 	ldw	r2,0(r2)
   21c3c:	e0bffb15 	stw	r2,-20(fp)
	int status = 0;
   21c40:	e03ffc15 	stw	zero,-16(fp)
	int count = 0;
   21c44:	e03ffa15 	stw	zero,-24(fp)
	while (count < len)
   21c48:	00001006 	br	21c8c <alt_up_ps2_write_fd+0x74>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
   21c4c:	e0bffe17 	ldw	r2,-8(fp)
   21c50:	10c00044 	addi	r3,r2,1
   21c54:	e0fffe15 	stw	r3,-8(fp)
   21c58:	10800003 	ldbu	r2,0(r2)
   21c5c:	10803fcc 	andi	r2,r2,255
   21c60:	100b883a 	mov	r5,r2
   21c64:	e13ffb17 	ldw	r4,-20(fp)
   21c68:	00218e80 	call	218e8 <alt_up_ps2_write_data_byte>
   21c6c:	e0bffc15 	stw	r2,-16(fp)
		if (status!=0)
   21c70:	e0bffc17 	ldw	r2,-16(fp)
   21c74:	10000226 	beq	r2,zero,21c80 <alt_up_ps2_write_fd+0x68>
			return count;
   21c78:	e0bffa17 	ldw	r2,-24(fp)
   21c7c:	00000706 	br	21c9c <alt_up_ps2_write_fd+0x84>
		count++;
   21c80:	e0bffa17 	ldw	r2,-24(fp)
   21c84:	10800044 	addi	r2,r2,1
   21c88:	e0bffa15 	stw	r2,-24(fp)
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
   21c8c:	e0fffa17 	ldw	r3,-24(fp)
   21c90:	e0bfff17 	ldw	r2,-4(fp)
   21c94:	18bfed16 	blt	r3,r2,21c4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7021c4c>
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
	}
	return count;
   21c98:	e0bffa17 	ldw	r2,-24(fp)
}
   21c9c:	e037883a 	mov	sp,fp
   21ca0:	dfc00117 	ldw	ra,4(sp)
   21ca4:	df000017 	ldw	fp,0(sp)
   21ca8:	dec00204 	addi	sp,sp,8
   21cac:	f800283a 	ret

00021cb0 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
   21cb0:	defffc04 	addi	sp,sp,-16
   21cb4:	dfc00315 	stw	ra,12(sp)
   21cb8:	df000215 	stw	fp,8(sp)
   21cbc:	df000204 	addi	fp,sp,8
   21cc0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
   21cc4:	d1601e04 	addi	r5,gp,-32648
   21cc8:	e13fff17 	ldw	r4,-4(fp)
   21ccc:	00223680 	call	22368 <alt_find_dev>
   21cd0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   21cd4:	e0bffe17 	ldw	r2,-8(fp)
}
   21cd8:	e037883a 	mov	sp,fp
   21cdc:	dfc00117 	ldw	ra,4(sp)
   21ce0:	df000017 	ldw	fp,0(sp)
   21ce4:	dec00204 	addi	sp,sp,8
   21ce8:	f800283a 	ret

00021cec <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
   21cec:	defffd04 	addi	sp,sp,-12
   21cf0:	df000215 	stw	fp,8(sp)
   21cf4:	df000204 	addi	fp,sp,8
   21cf8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   21cfc:	e0bfff17 	ldw	r2,-4(fp)
   21d00:	10800a17 	ldw	r2,40(r2)
   21d04:	10800104 	addi	r2,r2,4
   21d08:	10800037 	ldwio	r2,0(r2)
   21d0c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
   21d10:	e0bffe17 	ldw	r2,-8(fp)
   21d14:	10800054 	ori	r2,r2,1
   21d18:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   21d1c:	e0bfff17 	ldw	r2,-4(fp)
   21d20:	10800a17 	ldw	r2,40(r2)
   21d24:	10800104 	addi	r2,r2,4
   21d28:	1007883a 	mov	r3,r2
   21d2c:	e0bffe17 	ldw	r2,-8(fp)
   21d30:	18800035 	stwio	r2,0(r3)
}
   21d34:	0001883a 	nop
   21d38:	e037883a 	mov	sp,fp
   21d3c:	df000017 	ldw	fp,0(sp)
   21d40:	dec00104 	addi	sp,sp,4
   21d44:	f800283a 	ret

00021d48 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
   21d48:	defffd04 	addi	sp,sp,-12
   21d4c:	df000215 	stw	fp,8(sp)
   21d50:	df000204 	addi	fp,sp,8
   21d54:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   21d58:	e0bfff17 	ldw	r2,-4(fp)
   21d5c:	10800a17 	ldw	r2,40(r2)
   21d60:	10800104 	addi	r2,r2,4
   21d64:	10800037 	ldwio	r2,0(r2)
   21d68:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
   21d6c:	e0fffe17 	ldw	r3,-8(fp)
   21d70:	00bfff84 	movi	r2,-2
   21d74:	1884703a 	and	r2,r3,r2
   21d78:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
   21d7c:	e0bfff17 	ldw	r2,-4(fp)
   21d80:	10800a17 	ldw	r2,40(r2)
   21d84:	10800104 	addi	r2,r2,4
   21d88:	1007883a 	mov	r3,r2
   21d8c:	e0bffe17 	ldw	r2,-8(fp)
   21d90:	18800035 	stwio	r2,0(r3)
}
   21d94:	0001883a 	nop
   21d98:	e037883a 	mov	sp,fp
   21d9c:	df000017 	ldw	fp,0(sp)
   21da0:	dec00104 	addi	sp,sp,4
   21da4:	f800283a 	ret

00021da8 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
   21da8:	defffd04 	addi	sp,sp,-12
   21dac:	df000215 	stw	fp,8(sp)
   21db0:	df000204 	addi	fp,sp,8
   21db4:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
   21db8:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
   21dbc:	e0bfff17 	ldw	r2,-4(fp)
   21dc0:	10800a17 	ldw	r2,40(r2)
   21dc4:	10800084 	addi	r2,r2,2
   21dc8:	1080002b 	ldhuio	r2,0(r2)
   21dcc:	10bfffcc 	andi	r2,r2,65535
   21dd0:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
   21dd4:	e0bffe0b 	ldhu	r2,-8(fp)
}
   21dd8:	e037883a 	mov	sp,fp
   21ddc:	df000017 	ldw	fp,0(sp)
   21de0:	dec00104 	addi	sp,sp,4
   21de4:	f800283a 	ret

00021de8 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
   21de8:	defffd04 	addi	sp,sp,-12
   21dec:	df000215 	stw	fp,8(sp)
   21df0:	df000204 	addi	fp,sp,8
   21df4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
   21df8:	e0bfff17 	ldw	r2,-4(fp)
   21dfc:	10800a17 	ldw	r2,40(r2)
   21e00:	10800104 	addi	r2,r2,4
   21e04:	10800037 	ldwio	r2,0(r2)
   21e08:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
   21e0c:	e0bffe17 	ldw	r2,-8(fp)
   21e10:	1004d43a 	srli	r2,r2,16
}
   21e14:	e037883a 	mov	sp,fp
   21e18:	df000017 	ldw	fp,0(sp)
   21e1c:	dec00104 	addi	sp,sp,4
   21e20:	f800283a 	ret

00021e24 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
   21e24:	defffd04 	addi	sp,sp,-12
   21e28:	df000215 	stw	fp,8(sp)
   21e2c:	df000204 	addi	fp,sp,8
   21e30:	e13fff15 	stw	r4,-4(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
   21e34:	e0bfff17 	ldw	r2,-4(fp)
   21e38:	1080800c 	andi	r2,r2,512
   21e3c:	1004d27a 	srli	r2,r2,9
   21e40:	e0bffe15 	stw	r2,-8(fp)
	return (parity_error ? -1 : 0);
   21e44:	e0bffe17 	ldw	r2,-8(fp)
   21e48:	10000226 	beq	r2,zero,21e54 <alt_up_rs232_check_parity+0x30>
   21e4c:	00bfffc4 	movi	r2,-1
   21e50:	00000106 	br	21e58 <alt_up_rs232_check_parity+0x34>
   21e54:	0005883a 	mov	r2,zero
}
   21e58:	e037883a 	mov	sp,fp
   21e5c:	df000017 	ldw	fp,0(sp)
   21e60:	dec00104 	addi	sp,sp,4
   21e64:	f800283a 	ret

00021e68 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
   21e68:	defffd04 	addi	sp,sp,-12
   21e6c:	df000215 	stw	fp,8(sp)
   21e70:	df000204 	addi	fp,sp,8
   21e74:	e13ffe15 	stw	r4,-8(fp)
   21e78:	2805883a 	mov	r2,r5
   21e7c:	e0bfff05 	stb	r2,-4(fp)
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
   21e80:	e0bffe17 	ldw	r2,-8(fp)
   21e84:	10800a17 	ldw	r2,40(r2)
   21e88:	1007883a 	mov	r3,r2
   21e8c:	e0bfff03 	ldbu	r2,-4(fp)
   21e90:	18800035 	stwio	r2,0(r3)
	return 0;
   21e94:	0005883a 	mov	r2,zero
}
   21e98:	e037883a 	mov	sp,fp
   21e9c:	df000017 	ldw	fp,0(sp)
   21ea0:	dec00104 	addi	sp,sp,4
   21ea4:	f800283a 	ret

00021ea8 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
   21ea8:	defffa04 	addi	sp,sp,-24
   21eac:	dfc00515 	stw	ra,20(sp)
   21eb0:	df000415 	stw	fp,16(sp)
   21eb4:	df000404 	addi	fp,sp,16
   21eb8:	e13ffd15 	stw	r4,-12(fp)
   21ebc:	e17ffe15 	stw	r5,-8(fp)
   21ec0:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
   21ec4:	e0bffd17 	ldw	r2,-12(fp)
   21ec8:	10800a17 	ldw	r2,40(r2)
   21ecc:	10800037 	ldwio	r2,0(r2)
   21ed0:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
   21ed4:	e0bffc17 	ldw	r2,-16(fp)
   21ed8:	1007883a 	mov	r3,r2
   21edc:	e0bffe17 	ldw	r2,-8(fp)
   21ee0:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
   21ee4:	e13ffc17 	ldw	r4,-16(fp)
   21ee8:	0021e240 	call	21e24 <alt_up_rs232_check_parity>
   21eec:	1007883a 	mov	r3,r2
   21ef0:	e0bfff17 	ldw	r2,-4(fp)
   21ef4:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
   21ef8:	e0bffc17 	ldw	r2,-16(fp)
   21efc:	10a0000c 	andi	r2,r2,32768
   21f00:	1004d3fa 	srli	r2,r2,15
   21f04:	10bfffc4 	addi	r2,r2,-1
}
   21f08:	e037883a 	mov	sp,fp
   21f0c:	dfc00117 	ldw	ra,4(sp)
   21f10:	df000017 	ldw	fp,0(sp)
   21f14:	dec00204 	addi	sp,sp,8
   21f18:	f800283a 	ret

00021f1c <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
   21f1c:	defff804 	addi	sp,sp,-32
   21f20:	dfc00715 	stw	ra,28(sp)
   21f24:	df000615 	stw	fp,24(sp)
   21f28:	df000604 	addi	fp,sp,24
   21f2c:	e13ffd15 	stw	r4,-12(fp)
   21f30:	e17ffe15 	stw	r5,-8(fp)
   21f34:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   21f38:	e0bffd17 	ldw	r2,-12(fp)
   21f3c:	10800017 	ldw	r2,0(r2)
   21f40:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
   21f44:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
   21f48:	00000c06 	br	21f7c <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
   21f4c:	e0bffe17 	ldw	r2,-8(fp)
   21f50:	10c00044 	addi	r3,r2,1
   21f54:	e0fffe15 	stw	r3,-8(fp)
   21f58:	e0fffc04 	addi	r3,fp,-16
   21f5c:	180d883a 	mov	r6,r3
   21f60:	100b883a 	mov	r5,r2
   21f64:	e13ffb17 	ldw	r4,-20(fp)
   21f68:	0021ea80 	call	21ea8 <alt_up_rs232_read_data>
   21f6c:	1000081e 	bne	r2,zero,21f90 <alt_up_rs232_read_fd+0x74>
			count++;
   21f70:	e0bffa17 	ldw	r2,-24(fp)
   21f74:	10800044 	addi	r2,r2,1
   21f78:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
   21f7c:	e0bfff17 	ldw	r2,-4(fp)
   21f80:	10ffffc4 	addi	r3,r2,-1
   21f84:	e0ffff15 	stw	r3,-4(fp)
   21f88:	103ff01e 	bne	r2,zero,21f4c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7021f4c>
   21f8c:	00000106 	br	21f94 <alt_up_rs232_read_fd+0x78>
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
			count++;
		else
			break;
   21f90:	0001883a 	nop
	}
	return count;
   21f94:	e0bffa17 	ldw	r2,-24(fp)
}
   21f98:	e037883a 	mov	sp,fp
   21f9c:	dfc00117 	ldw	ra,4(sp)
   21fa0:	df000017 	ldw	fp,0(sp)
   21fa4:	dec00204 	addi	sp,sp,8
   21fa8:	f800283a 	ret

00021fac <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
   21fac:	defff904 	addi	sp,sp,-28
   21fb0:	dfc00615 	stw	ra,24(sp)
   21fb4:	df000515 	stw	fp,20(sp)
   21fb8:	df000504 	addi	fp,sp,20
   21fbc:	e13ffd15 	stw	r4,-12(fp)
   21fc0:	e17ffe15 	stw	r5,-8(fp)
   21fc4:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
   21fc8:	e0bffd17 	ldw	r2,-12(fp)
   21fcc:	10800017 	ldw	r2,0(r2)
   21fd0:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
   21fd4:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
   21fd8:	00000d06 	br	22010 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
   21fdc:	e0bffe17 	ldw	r2,-8(fp)
   21fe0:	10800003 	ldbu	r2,0(r2)
   21fe4:	10803fcc 	andi	r2,r2,255
   21fe8:	100b883a 	mov	r5,r2
   21fec:	e13ffc17 	ldw	r4,-16(fp)
   21ff0:	0021e680 	call	21e68 <alt_up_rs232_write_data>
   21ff4:	10000b1e 	bne	r2,zero,22024 <alt_up_rs232_write_fd+0x78>
		{
			count++;
   21ff8:	e0bffb17 	ldw	r2,-20(fp)
   21ffc:	10800044 	addi	r2,r2,1
   22000:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
   22004:	e0bffe17 	ldw	r2,-8(fp)
   22008:	10800044 	addi	r2,r2,1
   2200c:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
   22010:	e0bfff17 	ldw	r2,-4(fp)
   22014:	10ffffc4 	addi	r3,r2,-1
   22018:	e0ffff15 	stw	r3,-4(fp)
   2201c:	103fef1e 	bne	r2,zero,21fdc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7021fdc>
   22020:	00000106 	br	22028 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
			ptr++;
		}
		else
			break;
   22024:	0001883a 	nop
	}
	return count;
   22028:	e0bffb17 	ldw	r2,-20(fp)
}
   2202c:	e037883a 	mov	sp,fp
   22030:	dfc00117 	ldw	ra,4(sp)
   22034:	df000017 	ldw	fp,0(sp)
   22038:	dec00204 	addi	sp,sp,8
   2203c:	f800283a 	ret

00022040 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
   22040:	defffc04 	addi	sp,sp,-16
   22044:	dfc00315 	stw	ra,12(sp)
   22048:	df000215 	stw	fp,8(sp)
   2204c:	df000204 	addi	fp,sp,8
   22050:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
   22054:	d1601e04 	addi	r5,gp,-32648
   22058:	e13fff17 	ldw	r4,-4(fp)
   2205c:	00223680 	call	22368 <alt_find_dev>
   22060:	e0bffe15 	stw	r2,-8(fp)

  return dev;
   22064:	e0bffe17 	ldw	r2,-8(fp)
}
   22068:	e037883a 	mov	sp,fp
   2206c:	dfc00117 	ldw	ra,4(sp)
   22070:	df000017 	ldw	fp,0(sp)
   22074:	dec00204 	addi	sp,sp,8
   22078:	f800283a 	ret

0002207c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2207c:	defff504 	addi	sp,sp,-44
   22080:	df000a15 	stw	fp,40(sp)
   22084:	df000a04 	addi	fp,sp,40
   22088:	e13ffc15 	stw	r4,-16(fp)
   2208c:	e17ffd15 	stw	r5,-12(fp)
   22090:	e1bffe15 	stw	r6,-8(fp)
   22094:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   22098:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2209c:	d0a85c17 	ldw	r2,-24208(gp)
  
  if (alt_ticks_per_second ())
   220a0:	10003c26 	beq	r2,zero,22194 <alt_alarm_start+0x118>
  {
    if (alarm)
   220a4:	e0bffc17 	ldw	r2,-16(fp)
   220a8:	10003826 	beq	r2,zero,2218c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   220ac:	e0bffc17 	ldw	r2,-16(fp)
   220b0:	e0fffe17 	ldw	r3,-8(fp)
   220b4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   220b8:	e0bffc17 	ldw	r2,-16(fp)
   220bc:	e0ffff17 	ldw	r3,-4(fp)
   220c0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   220c4:	0005303a 	rdctl	r2,status
   220c8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   220cc:	e0fff917 	ldw	r3,-28(fp)
   220d0:	00bfff84 	movi	r2,-2
   220d4:	1884703a 	and	r2,r3,r2
   220d8:	1001703a 	wrctl	status,r2
  
  return context;
   220dc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   220e0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   220e4:	d0a85d17 	ldw	r2,-24204(gp)
      
      current_nticks = alt_nticks();
   220e8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   220ec:	e0fffd17 	ldw	r3,-12(fp)
   220f0:	e0bff617 	ldw	r2,-40(fp)
   220f4:	1885883a 	add	r2,r3,r2
   220f8:	10c00044 	addi	r3,r2,1
   220fc:	e0bffc17 	ldw	r2,-16(fp)
   22100:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   22104:	e0bffc17 	ldw	r2,-16(fp)
   22108:	10c00217 	ldw	r3,8(r2)
   2210c:	e0bff617 	ldw	r2,-40(fp)
   22110:	1880042e 	bgeu	r3,r2,22124 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   22114:	e0bffc17 	ldw	r2,-16(fp)
   22118:	00c00044 	movi	r3,1
   2211c:	10c00405 	stb	r3,16(r2)
   22120:	00000206 	br	2212c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   22124:	e0bffc17 	ldw	r2,-16(fp)
   22128:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2212c:	e0bffc17 	ldw	r2,-16(fp)
   22130:	d0e04304 	addi	r3,gp,-32500
   22134:	e0fffa15 	stw	r3,-24(fp)
   22138:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2213c:	e0bffb17 	ldw	r2,-20(fp)
   22140:	e0fffa17 	ldw	r3,-24(fp)
   22144:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   22148:	e0bffa17 	ldw	r2,-24(fp)
   2214c:	10c00017 	ldw	r3,0(r2)
   22150:	e0bffb17 	ldw	r2,-20(fp)
   22154:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   22158:	e0bffa17 	ldw	r2,-24(fp)
   2215c:	10800017 	ldw	r2,0(r2)
   22160:	e0fffb17 	ldw	r3,-20(fp)
   22164:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   22168:	e0bffa17 	ldw	r2,-24(fp)
   2216c:	e0fffb17 	ldw	r3,-20(fp)
   22170:	10c00015 	stw	r3,0(r2)
   22174:	e0bff817 	ldw	r2,-32(fp)
   22178:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2217c:	e0bff717 	ldw	r2,-36(fp)
   22180:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   22184:	0005883a 	mov	r2,zero
   22188:	00000306 	br	22198 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   2218c:	00bffa84 	movi	r2,-22
   22190:	00000106 	br	22198 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   22194:	00bfde84 	movi	r2,-134
  }
}
   22198:	e037883a 	mov	sp,fp
   2219c:	df000017 	ldw	fp,0(sp)
   221a0:	dec00104 	addi	sp,sp,4
   221a4:	f800283a 	ret

000221a8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   221a8:	deffff04 	addi	sp,sp,-4
   221ac:	df000015 	stw	fp,0(sp)
   221b0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   221b4:	0001883a 	nop
   221b8:	e037883a 	mov	sp,fp
   221bc:	df000017 	ldw	fp,0(sp)
   221c0:	dec00104 	addi	sp,sp,4
   221c4:	f800283a 	ret

000221c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   221c8:	defffe04 	addi	sp,sp,-8
   221cc:	dfc00115 	stw	ra,4(sp)
   221d0:	df000015 	stw	fp,0(sp)
   221d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   221d8:	d0a02117 	ldw	r2,-32636(gp)
   221dc:	10000326 	beq	r2,zero,221ec <alt_get_errno+0x24>
   221e0:	d0a02117 	ldw	r2,-32636(gp)
   221e4:	103ee83a 	callr	r2
   221e8:	00000106 	br	221f0 <alt_get_errno+0x28>
   221ec:	d0a83b04 	addi	r2,gp,-24340
}
   221f0:	e037883a 	mov	sp,fp
   221f4:	dfc00117 	ldw	ra,4(sp)
   221f8:	df000017 	ldw	fp,0(sp)
   221fc:	dec00204 	addi	sp,sp,8
   22200:	f800283a 	ret

00022204 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   22204:	defffa04 	addi	sp,sp,-24
   22208:	dfc00515 	stw	ra,20(sp)
   2220c:	df000415 	stw	fp,16(sp)
   22210:	df000404 	addi	fp,sp,16
   22214:	e13ffe15 	stw	r4,-8(fp)
   22218:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2221c:	e0bffe17 	ldw	r2,-8(fp)
   22220:	10000326 	beq	r2,zero,22230 <alt_dev_llist_insert+0x2c>
   22224:	e0bffe17 	ldw	r2,-8(fp)
   22228:	10800217 	ldw	r2,8(r2)
   2222c:	1000061e 	bne	r2,zero,22248 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   22230:	00221c80 	call	221c8 <alt_get_errno>
   22234:	1007883a 	mov	r3,r2
   22238:	00800584 	movi	r2,22
   2223c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   22240:	00bffa84 	movi	r2,-22
   22244:	00001306 	br	22294 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   22248:	e0bffe17 	ldw	r2,-8(fp)
   2224c:	e0ffff17 	ldw	r3,-4(fp)
   22250:	e0fffc15 	stw	r3,-16(fp)
   22254:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   22258:	e0bffd17 	ldw	r2,-12(fp)
   2225c:	e0fffc17 	ldw	r3,-16(fp)
   22260:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   22264:	e0bffc17 	ldw	r2,-16(fp)
   22268:	10c00017 	ldw	r3,0(r2)
   2226c:	e0bffd17 	ldw	r2,-12(fp)
   22270:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   22274:	e0bffc17 	ldw	r2,-16(fp)
   22278:	10800017 	ldw	r2,0(r2)
   2227c:	e0fffd17 	ldw	r3,-12(fp)
   22280:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   22284:	e0bffc17 	ldw	r2,-16(fp)
   22288:	e0fffd17 	ldw	r3,-12(fp)
   2228c:	10c00015 	stw	r3,0(r2)

  return 0;  
   22290:	0005883a 	mov	r2,zero
}
   22294:	e037883a 	mov	sp,fp
   22298:	dfc00117 	ldw	ra,4(sp)
   2229c:	df000017 	ldw	fp,0(sp)
   222a0:	dec00204 	addi	sp,sp,8
   222a4:	f800283a 	ret

000222a8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   222a8:	defffd04 	addi	sp,sp,-12
   222ac:	dfc00215 	stw	ra,8(sp)
   222b0:	df000115 	stw	fp,4(sp)
   222b4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   222b8:	008000b4 	movhi	r2,2
   222bc:	108d4204 	addi	r2,r2,13576
   222c0:	e0bfff15 	stw	r2,-4(fp)
   222c4:	00000606 	br	222e0 <_do_ctors+0x38>
        (*ctor) (); 
   222c8:	e0bfff17 	ldw	r2,-4(fp)
   222cc:	10800017 	ldw	r2,0(r2)
   222d0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   222d4:	e0bfff17 	ldw	r2,-4(fp)
   222d8:	10bfff04 	addi	r2,r2,-4
   222dc:	e0bfff15 	stw	r2,-4(fp)
   222e0:	e0ffff17 	ldw	r3,-4(fp)
   222e4:	008000b4 	movhi	r2,2
   222e8:	108d4204 	addi	r2,r2,13576
   222ec:	18bff62e 	bgeu	r3,r2,222c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70222c8>
        (*ctor) (); 
}
   222f0:	0001883a 	nop
   222f4:	e037883a 	mov	sp,fp
   222f8:	dfc00117 	ldw	ra,4(sp)
   222fc:	df000017 	ldw	fp,0(sp)
   22300:	dec00204 	addi	sp,sp,8
   22304:	f800283a 	ret

00022308 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   22308:	defffd04 	addi	sp,sp,-12
   2230c:	dfc00215 	stw	ra,8(sp)
   22310:	df000115 	stw	fp,4(sp)
   22314:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22318:	008000b4 	movhi	r2,2
   2231c:	108d4204 	addi	r2,r2,13576
   22320:	e0bfff15 	stw	r2,-4(fp)
   22324:	00000606 	br	22340 <_do_dtors+0x38>
        (*dtor) (); 
   22328:	e0bfff17 	ldw	r2,-4(fp)
   2232c:	10800017 	ldw	r2,0(r2)
   22330:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22334:	e0bfff17 	ldw	r2,-4(fp)
   22338:	10bfff04 	addi	r2,r2,-4
   2233c:	e0bfff15 	stw	r2,-4(fp)
   22340:	e0ffff17 	ldw	r3,-4(fp)
   22344:	008000b4 	movhi	r2,2
   22348:	108d4304 	addi	r2,r2,13580
   2234c:	18bff62e 	bgeu	r3,r2,22328 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7022328>
        (*dtor) (); 
}
   22350:	0001883a 	nop
   22354:	e037883a 	mov	sp,fp
   22358:	dfc00117 	ldw	ra,4(sp)
   2235c:	df000017 	ldw	fp,0(sp)
   22360:	dec00204 	addi	sp,sp,8
   22364:	f800283a 	ret

00022368 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   22368:	defffa04 	addi	sp,sp,-24
   2236c:	dfc00515 	stw	ra,20(sp)
   22370:	df000415 	stw	fp,16(sp)
   22374:	df000404 	addi	fp,sp,16
   22378:	e13ffe15 	stw	r4,-8(fp)
   2237c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   22380:	e0bfff17 	ldw	r2,-4(fp)
   22384:	10800017 	ldw	r2,0(r2)
   22388:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2238c:	e13ffe17 	ldw	r4,-8(fp)
   22390:	00089900 	call	8990 <strlen>
   22394:	10800044 	addi	r2,r2,1
   22398:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2239c:	00000d06 	br	223d4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   223a0:	e0bffc17 	ldw	r2,-16(fp)
   223a4:	10800217 	ldw	r2,8(r2)
   223a8:	e0fffd17 	ldw	r3,-12(fp)
   223ac:	180d883a 	mov	r6,r3
   223b0:	e17ffe17 	ldw	r5,-8(fp)
   223b4:	1009883a 	mov	r4,r2
   223b8:	00231bc0 	call	231bc <memcmp>
   223bc:	1000021e 	bne	r2,zero,223c8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   223c0:	e0bffc17 	ldw	r2,-16(fp)
   223c4:	00000706 	br	223e4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   223c8:	e0bffc17 	ldw	r2,-16(fp)
   223cc:	10800017 	ldw	r2,0(r2)
   223d0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   223d4:	e0fffc17 	ldw	r3,-16(fp)
   223d8:	e0bfff17 	ldw	r2,-4(fp)
   223dc:	18bff01e 	bne	r3,r2,223a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70223a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   223e0:	0005883a 	mov	r2,zero
}
   223e4:	e037883a 	mov	sp,fp
   223e8:	dfc00117 	ldw	ra,4(sp)
   223ec:	df000017 	ldw	fp,0(sp)
   223f0:	dec00204 	addi	sp,sp,8
   223f4:	f800283a 	ret

000223f8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   223f8:	defffe04 	addi	sp,sp,-8
   223fc:	dfc00115 	stw	ra,4(sp)
   22400:	df000015 	stw	fp,0(sp)
   22404:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   22408:	01440004 	movi	r5,4096
   2240c:	0009883a 	mov	r4,zero
   22410:	00230440 	call	23044 <alt_icache_flush>
#endif
}
   22414:	0001883a 	nop
   22418:	e037883a 	mov	sp,fp
   2241c:	dfc00117 	ldw	ra,4(sp)
   22420:	df000017 	ldw	fp,0(sp)
   22424:	dec00204 	addi	sp,sp,8
   22428:	f800283a 	ret

0002242c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2242c:	defff904 	addi	sp,sp,-28
   22430:	dfc00615 	stw	ra,24(sp)
   22434:	df000515 	stw	fp,20(sp)
   22438:	df000504 	addi	fp,sp,20
   2243c:	e13ffc15 	stw	r4,-16(fp)
   22440:	e17ffd15 	stw	r5,-12(fp)
   22444:	e1bffe15 	stw	r6,-8(fp)
   22448:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   2244c:	e1bfff17 	ldw	r6,-4(fp)
   22450:	e17ffe17 	ldw	r5,-8(fp)
   22454:	e13ffd17 	ldw	r4,-12(fp)
   22458:	00227ec0 	call	227ec <open>
   2245c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   22460:	e0bffb17 	ldw	r2,-20(fp)
   22464:	10001c16 	blt	r2,zero,224d8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   22468:	008000b4 	movhi	r2,2
   2246c:	10963f04 	addi	r2,r2,22780
   22470:	e0fffb17 	ldw	r3,-20(fp)
   22474:	18c00324 	muli	r3,r3,12
   22478:	10c5883a 	add	r2,r2,r3
   2247c:	10c00017 	ldw	r3,0(r2)
   22480:	e0bffc17 	ldw	r2,-16(fp)
   22484:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   22488:	008000b4 	movhi	r2,2
   2248c:	10963f04 	addi	r2,r2,22780
   22490:	e0fffb17 	ldw	r3,-20(fp)
   22494:	18c00324 	muli	r3,r3,12
   22498:	10c5883a 	add	r2,r2,r3
   2249c:	10800104 	addi	r2,r2,4
   224a0:	10c00017 	ldw	r3,0(r2)
   224a4:	e0bffc17 	ldw	r2,-16(fp)
   224a8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   224ac:	008000b4 	movhi	r2,2
   224b0:	10963f04 	addi	r2,r2,22780
   224b4:	e0fffb17 	ldw	r3,-20(fp)
   224b8:	18c00324 	muli	r3,r3,12
   224bc:	10c5883a 	add	r2,r2,r3
   224c0:	10800204 	addi	r2,r2,8
   224c4:	10c00017 	ldw	r3,0(r2)
   224c8:	e0bffc17 	ldw	r2,-16(fp)
   224cc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   224d0:	e13ffb17 	ldw	r4,-20(fp)
   224d4:	00179f00 	call	179f0 <alt_release_fd>
  }
} 
   224d8:	0001883a 	nop
   224dc:	e037883a 	mov	sp,fp
   224e0:	dfc00117 	ldw	ra,4(sp)
   224e4:	df000017 	ldw	fp,0(sp)
   224e8:	dec00204 	addi	sp,sp,8
   224ec:	f800283a 	ret

000224f0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   224f0:	defffb04 	addi	sp,sp,-20
   224f4:	dfc00415 	stw	ra,16(sp)
   224f8:	df000315 	stw	fp,12(sp)
   224fc:	df000304 	addi	fp,sp,12
   22500:	e13ffd15 	stw	r4,-12(fp)
   22504:	e17ffe15 	stw	r5,-8(fp)
   22508:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2250c:	01c07fc4 	movi	r7,511
   22510:	01800044 	movi	r6,1
   22514:	e17ffd17 	ldw	r5,-12(fp)
   22518:	010000b4 	movhi	r4,2
   2251c:	21164204 	addi	r4,r4,22792
   22520:	002242c0 	call	2242c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   22524:	01c07fc4 	movi	r7,511
   22528:	000d883a 	mov	r6,zero
   2252c:	e17ffe17 	ldw	r5,-8(fp)
   22530:	010000b4 	movhi	r4,2
   22534:	21163f04 	addi	r4,r4,22780
   22538:	002242c0 	call	2242c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2253c:	01c07fc4 	movi	r7,511
   22540:	01800044 	movi	r6,1
   22544:	e17fff17 	ldw	r5,-4(fp)
   22548:	010000b4 	movhi	r4,2
   2254c:	21164504 	addi	r4,r4,22804
   22550:	002242c0 	call	2242c <alt_open_fd>
}  
   22554:	0001883a 	nop
   22558:	e037883a 	mov	sp,fp
   2255c:	dfc00117 	ldw	ra,4(sp)
   22560:	df000017 	ldw	fp,0(sp)
   22564:	dec00204 	addi	sp,sp,8
   22568:	f800283a 	ret

0002256c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   2256c:	defff004 	addi	sp,sp,-64
   22570:	df000f15 	stw	fp,60(sp)
   22574:	df000f04 	addi	fp,sp,60
   22578:	e13ffd15 	stw	r4,-12(fp)
   2257c:	e17ffe15 	stw	r5,-8(fp)
   22580:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   22584:	00bffa84 	movi	r2,-22
   22588:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2258c:	e0bffd17 	ldw	r2,-12(fp)
   22590:	10800828 	cmpgeui	r2,r2,32
   22594:	1000501e 	bne	r2,zero,226d8 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22598:	0005303a 	rdctl	r2,status
   2259c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   225a0:	e0fff617 	ldw	r3,-40(fp)
   225a4:	00bfff84 	movi	r2,-2
   225a8:	1884703a 	and	r2,r3,r2
   225ac:	1001703a 	wrctl	status,r2
  
  return context;
   225b0:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   225b4:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
   225b8:	00800134 	movhi	r2,4
   225bc:	10a0ad04 	addi	r2,r2,-32076
   225c0:	e0fffd17 	ldw	r3,-12(fp)
   225c4:	180690fa 	slli	r3,r3,3
   225c8:	10c5883a 	add	r2,r2,r3
   225cc:	e0ffff17 	ldw	r3,-4(fp)
   225d0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   225d4:	00800134 	movhi	r2,4
   225d8:	10a0ad04 	addi	r2,r2,-32076
   225dc:	e0fffd17 	ldw	r3,-12(fp)
   225e0:	180690fa 	slli	r3,r3,3
   225e4:	10c5883a 	add	r2,r2,r3
   225e8:	10800104 	addi	r2,r2,4
   225ec:	e0fffe17 	ldw	r3,-8(fp)
   225f0:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   225f4:	e0bfff17 	ldw	r2,-4(fp)
   225f8:	10001926 	beq	r2,zero,22660 <alt_irq_register+0xf4>
   225fc:	e0bffd17 	ldw	r2,-12(fp)
   22600:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22604:	0005303a 	rdctl	r2,status
   22608:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2260c:	e0fff717 	ldw	r3,-36(fp)
   22610:	00bfff84 	movi	r2,-2
   22614:	1884703a 	and	r2,r3,r2
   22618:	1001703a 	wrctl	status,r2
  
  return context;
   2261c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   22620:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
   22624:	00c00044 	movi	r3,1
   22628:	e0bff217 	ldw	r2,-56(fp)
   2262c:	1884983a 	sll	r2,r3,r2
   22630:	1007883a 	mov	r3,r2
   22634:	d0a85b17 	ldw	r2,-24212(gp)
   22638:	1884b03a 	or	r2,r3,r2
   2263c:	d0a85b15 	stw	r2,-24212(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   22640:	d0a85b17 	ldw	r2,-24212(gp)
   22644:	100170fa 	wrctl	ienable,r2
   22648:	e0bff817 	ldw	r2,-32(fp)
   2264c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   22650:	e0bff917 	ldw	r2,-28(fp)
   22654:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   22658:	0005883a 	mov	r2,zero
   2265c:	00001906 	br	226c4 <alt_irq_register+0x158>
   22660:	e0bffd17 	ldw	r2,-12(fp)
   22664:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22668:	0005303a 	rdctl	r2,status
   2266c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22670:	e0fffa17 	ldw	r3,-24(fp)
   22674:	00bfff84 	movi	r2,-2
   22678:	1884703a 	and	r2,r3,r2
   2267c:	1001703a 	wrctl	status,r2
  
  return context;
   22680:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   22684:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
   22688:	00c00044 	movi	r3,1
   2268c:	e0bff417 	ldw	r2,-48(fp)
   22690:	1884983a 	sll	r2,r3,r2
   22694:	0084303a 	nor	r2,zero,r2
   22698:	1007883a 	mov	r3,r2
   2269c:	d0a85b17 	ldw	r2,-24212(gp)
   226a0:	1884703a 	and	r2,r3,r2
   226a4:	d0a85b15 	stw	r2,-24212(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   226a8:	d0a85b17 	ldw	r2,-24212(gp)
   226ac:	100170fa 	wrctl	ienable,r2
   226b0:	e0bffb17 	ldw	r2,-20(fp)
   226b4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   226b8:	e0bffc17 	ldw	r2,-16(fp)
   226bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   226c0:	0005883a 	mov	r2,zero
   226c4:	e0bff115 	stw	r2,-60(fp)
   226c8:	e0bff317 	ldw	r2,-52(fp)
   226cc:	e0bff515 	stw	r2,-44(fp)
   226d0:	e0bff517 	ldw	r2,-44(fp)
   226d4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   226d8:	e0bff117 	ldw	r2,-60(fp)
}
   226dc:	e037883a 	mov	sp,fp
   226e0:	df000017 	ldw	fp,0(sp)
   226e4:	dec00104 	addi	sp,sp,4
   226e8:	f800283a 	ret

000226ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   226ec:	defffe04 	addi	sp,sp,-8
   226f0:	dfc00115 	stw	ra,4(sp)
   226f4:	df000015 	stw	fp,0(sp)
   226f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   226fc:	d0a02117 	ldw	r2,-32636(gp)
   22700:	10000326 	beq	r2,zero,22710 <alt_get_errno+0x24>
   22704:	d0a02117 	ldw	r2,-32636(gp)
   22708:	103ee83a 	callr	r2
   2270c:	00000106 	br	22714 <alt_get_errno+0x28>
   22710:	d0a83b04 	addi	r2,gp,-24340
}
   22714:	e037883a 	mov	sp,fp
   22718:	dfc00117 	ldw	ra,4(sp)
   2271c:	df000017 	ldw	fp,0(sp)
   22720:	dec00204 	addi	sp,sp,8
   22724:	f800283a 	ret

00022728 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   22728:	defffd04 	addi	sp,sp,-12
   2272c:	df000215 	stw	fp,8(sp)
   22730:	df000204 	addi	fp,sp,8
   22734:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   22738:	e0bfff17 	ldw	r2,-4(fp)
   2273c:	10800217 	ldw	r2,8(r2)
   22740:	10d00034 	orhi	r3,r2,16384
   22744:	e0bfff17 	ldw	r2,-4(fp)
   22748:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2274c:	e03ffe15 	stw	zero,-8(fp)
   22750:	00001d06 	br	227c8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   22754:	008000b4 	movhi	r2,2
   22758:	10963f04 	addi	r2,r2,22780
   2275c:	e0fffe17 	ldw	r3,-8(fp)
   22760:	18c00324 	muli	r3,r3,12
   22764:	10c5883a 	add	r2,r2,r3
   22768:	10c00017 	ldw	r3,0(r2)
   2276c:	e0bfff17 	ldw	r2,-4(fp)
   22770:	10800017 	ldw	r2,0(r2)
   22774:	1880111e 	bne	r3,r2,227bc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   22778:	008000b4 	movhi	r2,2
   2277c:	10963f04 	addi	r2,r2,22780
   22780:	e0fffe17 	ldw	r3,-8(fp)
   22784:	18c00324 	muli	r3,r3,12
   22788:	10c5883a 	add	r2,r2,r3
   2278c:	10800204 	addi	r2,r2,8
   22790:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   22794:	1000090e 	bge	r2,zero,227bc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   22798:	e0bffe17 	ldw	r2,-8(fp)
   2279c:	10c00324 	muli	r3,r2,12
   227a0:	008000b4 	movhi	r2,2
   227a4:	10963f04 	addi	r2,r2,22780
   227a8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   227ac:	e0bfff17 	ldw	r2,-4(fp)
   227b0:	18800226 	beq	r3,r2,227bc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   227b4:	00bffcc4 	movi	r2,-13
   227b8:	00000806 	br	227dc <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   227bc:	e0bffe17 	ldw	r2,-8(fp)
   227c0:	10800044 	addi	r2,r2,1
   227c4:	e0bffe15 	stw	r2,-8(fp)
   227c8:	d0a02017 	ldw	r2,-32640(gp)
   227cc:	1007883a 	mov	r3,r2
   227d0:	e0bffe17 	ldw	r2,-8(fp)
   227d4:	18bfdf2e 	bgeu	r3,r2,22754 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7022754>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   227d8:	0005883a 	mov	r2,zero
}
   227dc:	e037883a 	mov	sp,fp
   227e0:	df000017 	ldw	fp,0(sp)
   227e4:	dec00104 	addi	sp,sp,4
   227e8:	f800283a 	ret

000227ec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   227ec:	defff604 	addi	sp,sp,-40
   227f0:	dfc00915 	stw	ra,36(sp)
   227f4:	df000815 	stw	fp,32(sp)
   227f8:	df000804 	addi	fp,sp,32
   227fc:	e13ffd15 	stw	r4,-12(fp)
   22800:	e17ffe15 	stw	r5,-8(fp)
   22804:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   22808:	00bfffc4 	movi	r2,-1
   2280c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   22810:	00bffb44 	movi	r2,-19
   22814:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   22818:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2281c:	d1601e04 	addi	r5,gp,-32648
   22820:	e13ffd17 	ldw	r4,-12(fp)
   22824:	00223680 	call	22368 <alt_find_dev>
   22828:	e0bff815 	stw	r2,-32(fp)
   2282c:	e0bff817 	ldw	r2,-32(fp)
   22830:	1000051e 	bne	r2,zero,22848 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   22834:	e13ffd17 	ldw	r4,-12(fp)
   22838:	0022e600 	call	22e60 <alt_find_file>
   2283c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   22840:	00800044 	movi	r2,1
   22844:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   22848:	e0bff817 	ldw	r2,-32(fp)
   2284c:	10002926 	beq	r2,zero,228f4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   22850:	e13ff817 	ldw	r4,-32(fp)
   22854:	0022f680 	call	22f68 <alt_get_fd>
   22858:	e0bff915 	stw	r2,-28(fp)
   2285c:	e0bff917 	ldw	r2,-28(fp)
   22860:	1000030e 	bge	r2,zero,22870 <open+0x84>
    {
      status = index;
   22864:	e0bff917 	ldw	r2,-28(fp)
   22868:	e0bffa15 	stw	r2,-24(fp)
   2286c:	00002306 	br	228fc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   22870:	e0bff917 	ldw	r2,-28(fp)
   22874:	10c00324 	muli	r3,r2,12
   22878:	008000b4 	movhi	r2,2
   2287c:	10963f04 	addi	r2,r2,22780
   22880:	1885883a 	add	r2,r3,r2
   22884:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   22888:	e0fffe17 	ldw	r3,-8(fp)
   2288c:	00900034 	movhi	r2,16384
   22890:	10bfffc4 	addi	r2,r2,-1
   22894:	1886703a 	and	r3,r3,r2
   22898:	e0bffc17 	ldw	r2,-16(fp)
   2289c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   228a0:	e0bffb17 	ldw	r2,-20(fp)
   228a4:	1000051e 	bne	r2,zero,228bc <open+0xd0>
   228a8:	e13ffc17 	ldw	r4,-16(fp)
   228ac:	00227280 	call	22728 <alt_file_locked>
   228b0:	e0bffa15 	stw	r2,-24(fp)
   228b4:	e0bffa17 	ldw	r2,-24(fp)
   228b8:	10001016 	blt	r2,zero,228fc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   228bc:	e0bff817 	ldw	r2,-32(fp)
   228c0:	10800317 	ldw	r2,12(r2)
   228c4:	10000826 	beq	r2,zero,228e8 <open+0xfc>
   228c8:	e0bff817 	ldw	r2,-32(fp)
   228cc:	10800317 	ldw	r2,12(r2)
   228d0:	e1ffff17 	ldw	r7,-4(fp)
   228d4:	e1bffe17 	ldw	r6,-8(fp)
   228d8:	e17ffd17 	ldw	r5,-12(fp)
   228dc:	e13ffc17 	ldw	r4,-16(fp)
   228e0:	103ee83a 	callr	r2
   228e4:	00000106 	br	228ec <open+0x100>
   228e8:	0005883a 	mov	r2,zero
   228ec:	e0bffa15 	stw	r2,-24(fp)
   228f0:	00000206 	br	228fc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   228f4:	00bffb44 	movi	r2,-19
   228f8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   228fc:	e0bffa17 	ldw	r2,-24(fp)
   22900:	1000090e 	bge	r2,zero,22928 <open+0x13c>
  {
    alt_release_fd (index);  
   22904:	e13ff917 	ldw	r4,-28(fp)
   22908:	00179f00 	call	179f0 <alt_release_fd>
    ALT_ERRNO = -status;
   2290c:	00226ec0 	call	226ec <alt_get_errno>
   22910:	1007883a 	mov	r3,r2
   22914:	e0bffa17 	ldw	r2,-24(fp)
   22918:	0085c83a 	sub	r2,zero,r2
   2291c:	18800015 	stw	r2,0(r3)
    return -1;
   22920:	00bfffc4 	movi	r2,-1
   22924:	00000106 	br	2292c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   22928:	e0bff917 	ldw	r2,-28(fp)
}
   2292c:	e037883a 	mov	sp,fp
   22930:	dfc00117 	ldw	ra,4(sp)
   22934:	df000017 	ldw	fp,0(sp)
   22938:	dec00204 	addi	sp,sp,8
   2293c:	f800283a 	ret

00022940 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   22940:	defffa04 	addi	sp,sp,-24
   22944:	df000515 	stw	fp,20(sp)
   22948:	df000504 	addi	fp,sp,20
   2294c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   22950:	0005303a 	rdctl	r2,status
   22954:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22958:	e0fffc17 	ldw	r3,-16(fp)
   2295c:	00bfff84 	movi	r2,-2
   22960:	1884703a 	and	r2,r3,r2
   22964:	1001703a 	wrctl	status,r2
  
  return context;
   22968:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2296c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   22970:	e0bfff17 	ldw	r2,-4(fp)
   22974:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   22978:	e0bffd17 	ldw	r2,-12(fp)
   2297c:	10800017 	ldw	r2,0(r2)
   22980:	e0fffd17 	ldw	r3,-12(fp)
   22984:	18c00117 	ldw	r3,4(r3)
   22988:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   2298c:	e0bffd17 	ldw	r2,-12(fp)
   22990:	10800117 	ldw	r2,4(r2)
   22994:	e0fffd17 	ldw	r3,-12(fp)
   22998:	18c00017 	ldw	r3,0(r3)
   2299c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   229a0:	e0bffd17 	ldw	r2,-12(fp)
   229a4:	e0fffd17 	ldw	r3,-12(fp)
   229a8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   229ac:	e0bffd17 	ldw	r2,-12(fp)
   229b0:	e0fffd17 	ldw	r3,-12(fp)
   229b4:	10c00015 	stw	r3,0(r2)
   229b8:	e0bffb17 	ldw	r2,-20(fp)
   229bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   229c0:	e0bffe17 	ldw	r2,-8(fp)
   229c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   229c8:	0001883a 	nop
   229cc:	e037883a 	mov	sp,fp
   229d0:	df000017 	ldw	fp,0(sp)
   229d4:	dec00104 	addi	sp,sp,4
   229d8:	f800283a 	ret

000229dc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   229dc:	defffb04 	addi	sp,sp,-20
   229e0:	dfc00415 	stw	ra,16(sp)
   229e4:	df000315 	stw	fp,12(sp)
   229e8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   229ec:	d0a04317 	ldw	r2,-32500(gp)
   229f0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   229f4:	d0a85d17 	ldw	r2,-24204(gp)
   229f8:	10800044 	addi	r2,r2,1
   229fc:	d0a85d15 	stw	r2,-24204(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   22a00:	00002e06 	br	22abc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   22a04:	e0bffd17 	ldw	r2,-12(fp)
   22a08:	10800017 	ldw	r2,0(r2)
   22a0c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   22a10:	e0bffd17 	ldw	r2,-12(fp)
   22a14:	10800403 	ldbu	r2,16(r2)
   22a18:	10803fcc 	andi	r2,r2,255
   22a1c:	10000426 	beq	r2,zero,22a30 <alt_tick+0x54>
   22a20:	d0a85d17 	ldw	r2,-24204(gp)
   22a24:	1000021e 	bne	r2,zero,22a30 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   22a28:	e0bffd17 	ldw	r2,-12(fp)
   22a2c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   22a30:	e0bffd17 	ldw	r2,-12(fp)
   22a34:	10800217 	ldw	r2,8(r2)
   22a38:	d0e85d17 	ldw	r3,-24204(gp)
   22a3c:	18801d36 	bltu	r3,r2,22ab4 <alt_tick+0xd8>
   22a40:	e0bffd17 	ldw	r2,-12(fp)
   22a44:	10800403 	ldbu	r2,16(r2)
   22a48:	10803fcc 	andi	r2,r2,255
   22a4c:	1000191e 	bne	r2,zero,22ab4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   22a50:	e0bffd17 	ldw	r2,-12(fp)
   22a54:	10800317 	ldw	r2,12(r2)
   22a58:	e0fffd17 	ldw	r3,-12(fp)
   22a5c:	18c00517 	ldw	r3,20(r3)
   22a60:	1809883a 	mov	r4,r3
   22a64:	103ee83a 	callr	r2
   22a68:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   22a6c:	e0bfff17 	ldw	r2,-4(fp)
   22a70:	1000031e 	bne	r2,zero,22a80 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   22a74:	e13ffd17 	ldw	r4,-12(fp)
   22a78:	00229400 	call	22940 <alt_alarm_stop>
   22a7c:	00000d06 	br	22ab4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   22a80:	e0bffd17 	ldw	r2,-12(fp)
   22a84:	10c00217 	ldw	r3,8(r2)
   22a88:	e0bfff17 	ldw	r2,-4(fp)
   22a8c:	1887883a 	add	r3,r3,r2
   22a90:	e0bffd17 	ldw	r2,-12(fp)
   22a94:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   22a98:	e0bffd17 	ldw	r2,-12(fp)
   22a9c:	10c00217 	ldw	r3,8(r2)
   22aa0:	d0a85d17 	ldw	r2,-24204(gp)
   22aa4:	1880032e 	bgeu	r3,r2,22ab4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   22aa8:	e0bffd17 	ldw	r2,-12(fp)
   22aac:	00c00044 	movi	r3,1
   22ab0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   22ab4:	e0bffe17 	ldw	r2,-8(fp)
   22ab8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   22abc:	e0fffd17 	ldw	r3,-12(fp)
   22ac0:	d0a04304 	addi	r2,gp,-32500
   22ac4:	18bfcf1e 	bne	r3,r2,22a04 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7022a04>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   22ac8:	0018bdc0 	call	18bdc <OSTimeTick>
}
   22acc:	0001883a 	nop
   22ad0:	e037883a 	mov	sp,fp
   22ad4:	dfc00117 	ldw	ra,4(sp)
   22ad8:	df000017 	ldw	fp,0(sp)
   22adc:	dec00204 	addi	sp,sp,8
   22ae0:	f800283a 	ret

00022ae4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   22ae4:	deffff04 	addi	sp,sp,-4
   22ae8:	df000015 	stw	fp,0(sp)
   22aec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   22af0:	000170fa 	wrctl	ienable,zero
}
   22af4:	0001883a 	nop
   22af8:	e037883a 	mov	sp,fp
   22afc:	df000017 	ldw	fp,0(sp)
   22b00:	dec00104 	addi	sp,sp,4
   22b04:	f800283a 	ret

00022b08 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
   22b08:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
   22b0c:	d0e01917 	ldw	r3,-32668(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
   22b10:	d1285617 	ldw	r4,-24232(gp)

      stw ra,  0(sp)
   22b14:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
   22b18:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
   22b1c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
   22b20:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
   22b24:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
   22b28:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
   22b2c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
   22b30:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
   22b34:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
   22b38:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
   22b3c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
   22b40:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   22b44:	0022d7c0 	call	22d7c <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
   22b48:	d1285117 	ldw	r4,-24252(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
   22b4c:	d1684907 	ldb	r5,-24284(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
   22b50:	d1285615 	stw	r4,-24232(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
   22b54:	d1684945 	stb	r5,-24283(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
   22b58:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
   22b5c:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
   22b60:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
   22b64:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
   22b68:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
   22b6c:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
   22b70:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
   22b74:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
   22b78:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
   22b7c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
   22b80:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
   22b84:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
   22b88:	d0e01915 	stw	r3,-32668(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
   22b8c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
   22b90:	f800283a 	ret

00022b94 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
   22b94:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
   22b98:	047fff84 	movi	r17,-2
      and   r18, r18, r17
   22b9c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
   22ba0:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
   22ba4:	0022d7c0 	call	22d7c <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
   22ba8:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
   22bac:	d4a84745 	stb	r18,-24291(gp)

      /*
       * start execution of the new task.
       */

      br 9b
   22bb0:	003fe506 	br	22b48 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7022b48>

00022bb4 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
   22bb4:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
   22bb8:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
   22bbc:	10800054 	ori	r2,r2,1
      wrctl status, r2
   22bc0:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
   22bc4:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
   22bc8:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
   22bcc:	dec00204 	addi	sp,sp,8

      callr r2
   22bd0:	103ee83a 	callr	r2

      nop
   22bd4:	0001883a 	nop

00022bd8 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
   22bd8:	defff704 	addi	sp,sp,-36
   22bdc:	dfc00815 	stw	ra,32(sp)
   22be0:	df000715 	stw	fp,28(sp)
   22be4:	df000704 	addi	fp,sp,28
   22be8:	e13ffc15 	stw	r4,-16(fp)
   22bec:	e17ffd15 	stw	r5,-12(fp)
   22bf0:	e1bffe15 	stw	r6,-8(fp)
   22bf4:	3805883a 	mov	r2,r7
   22bf8:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
   22bfc:	e0fffe17 	ldw	r3,-8(fp)
   22c00:	00bfff04 	movi	r2,-4
   22c04:	1884703a 	and	r2,r3,r2
   22c08:	10bef704 	addi	r2,r2,-1060
   22c0c:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
   22c10:	01810904 	movi	r6,1060
   22c14:	000b883a 	mov	r5,zero
   22c18:	e13ff917 	ldw	r4,-28(fp)
   22c1c:	00082300 	call	8230 <memset>
   22c20:	e0bff917 	ldw	r2,-28(fp)
   22c24:	10c0bb04 	addi	r3,r2,748
   22c28:	e0bff917 	ldw	r2,-28(fp)
   22c2c:	10c00115 	stw	r3,4(r2)
   22c30:	e0bff917 	ldw	r2,-28(fp)
   22c34:	10c0d504 	addi	r3,r2,852
   22c38:	e0bff917 	ldw	r2,-28(fp)
   22c3c:	10c00215 	stw	r3,8(r2)
   22c40:	e0bff917 	ldw	r2,-28(fp)
   22c44:	10c0ef04 	addi	r3,r2,956
   22c48:	e0bff917 	ldw	r2,-28(fp)
   22c4c:	10c00315 	stw	r3,12(r2)
   22c50:	e0fff917 	ldw	r3,-28(fp)
   22c54:	008000b4 	movhi	r2,2
   22c58:	10940b04 	addi	r2,r2,20524
   22c5c:	18800d15 	stw	r2,52(r3)
   22c60:	e0bff917 	ldw	r2,-28(fp)
   22c64:	00c00044 	movi	r3,1
   22c68:	10c02915 	stw	r3,164(r2)
   22c6c:	10002a15 	stw	zero,168(r2)
   22c70:	e0bff917 	ldw	r2,-28(fp)
   22c74:	00ccc384 	movi	r3,13070
   22c78:	10c02b0d 	sth	r3,172(r2)
   22c7c:	e0bff917 	ldw	r2,-28(fp)
   22c80:	00eaf344 	movi	r3,-21555
   22c84:	10c02b8d 	sth	r3,174(r2)
   22c88:	e0bff917 	ldw	r2,-28(fp)
   22c8c:	00c48d04 	movi	r3,4660
   22c90:	10c02c0d 	sth	r3,176(r2)
   22c94:	e0bff917 	ldw	r2,-28(fp)
   22c98:	00f99b44 	movi	r3,-6547
   22c9c:	10c02c8d 	sth	r3,178(r2)
   22ca0:	e0bff917 	ldw	r2,-28(fp)
   22ca4:	00f7bb04 	movi	r3,-8468
   22ca8:	10c02d0d 	sth	r3,180(r2)
   22cac:	e0bff917 	ldw	r2,-28(fp)
   22cb0:	00c00144 	movi	r3,5
   22cb4:	10c02d8d 	sth	r3,182(r2)
   22cb8:	e0bff917 	ldw	r2,-28(fp)
   22cbc:	00c002c4 	movi	r3,11
   22cc0:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
   22cc4:	e0bff917 	ldw	r2,-28(fp)
   22cc8:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
   22ccc:	e0bffa17 	ldw	r2,-24(fp)
   22cd0:	10bff304 	addi	r2,r2,-52
   22cd4:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
   22cd8:	e0bffb17 	ldw	r2,-20(fp)
   22cdc:	10800c04 	addi	r2,r2,48
   22ce0:	e0fffc17 	ldw	r3,-16(fp)
   22ce4:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
   22ce8:	e0bffb17 	ldw	r2,-20(fp)
   22cec:	10800b04 	addi	r2,r2,44
   22cf0:	e0fffd17 	ldw	r3,-12(fp)
   22cf4:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
   22cf8:	e0bffb17 	ldw	r2,-20(fp)
   22cfc:	10800a04 	addi	r2,r2,40
   22d00:	e0fff917 	ldw	r3,-28(fp)
   22d04:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
   22d08:	008000b4 	movhi	r2,2
   22d0c:	108aed04 	addi	r2,r2,11188
   22d10:	10c00104 	addi	r3,r2,4
   22d14:	e0bffb17 	ldw	r2,-20(fp)
   22d18:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
   22d1c:	e0bffb17 	ldw	r2,-20(fp)
}
   22d20:	e037883a 	mov	sp,fp
   22d24:	dfc00117 	ldw	ra,4(sp)
   22d28:	df000017 	ldw	fp,0(sp)
   22d2c:	dec00204 	addi	sp,sp,8
   22d30:	f800283a 	ret

00022d34 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
   22d34:	defffe04 	addi	sp,sp,-8
   22d38:	df000115 	stw	fp,4(sp)
   22d3c:	df000104 	addi	fp,sp,4
   22d40:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
   22d44:	0001883a 	nop
   22d48:	e037883a 	mov	sp,fp
   22d4c:	df000017 	ldw	fp,0(sp)
   22d50:	dec00104 	addi	sp,sp,4
   22d54:	f800283a 	ret

00022d58 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
   22d58:	defffe04 	addi	sp,sp,-8
   22d5c:	df000115 	stw	fp,4(sp)
   22d60:	df000104 	addi	fp,sp,4
   22d64:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
   22d68:	0001883a 	nop
   22d6c:	e037883a 	mov	sp,fp
   22d70:	df000017 	ldw	fp,0(sp)
   22d74:	dec00104 	addi	sp,sp,4
   22d78:	f800283a 	ret

00022d7c <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
   22d7c:	deffff04 	addi	sp,sp,-4
   22d80:	df000015 	stw	fp,0(sp)
   22d84:	d839883a 	mov	fp,sp
}
   22d88:	0001883a 	nop
   22d8c:	e037883a 	mov	sp,fp
   22d90:	df000017 	ldw	fp,0(sp)
   22d94:	dec00104 	addi	sp,sp,4
   22d98:	f800283a 	ret

00022d9c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
   22d9c:	deffff04 	addi	sp,sp,-4
   22da0:	df000015 	stw	fp,0(sp)
   22da4:	d839883a 	mov	fp,sp
}
   22da8:	0001883a 	nop
   22dac:	e037883a 	mov	sp,fp
   22db0:	df000017 	ldw	fp,0(sp)
   22db4:	dec00104 	addi	sp,sp,4
   22db8:	f800283a 	ret

00022dbc <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
   22dbc:	deffff04 	addi	sp,sp,-4
   22dc0:	df000015 	stw	fp,0(sp)
   22dc4:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
   22dc8:	0001883a 	nop
   22dcc:	e037883a 	mov	sp,fp
   22dd0:	df000017 	ldw	fp,0(sp)
   22dd4:	dec00104 	addi	sp,sp,4
   22dd8:	f800283a 	ret

00022ddc <OSInitHookBegin>:

void OSInitHookBegin(void)
{
   22ddc:	deffff04 	addi	sp,sp,-4
   22de0:	df000015 	stw	fp,0(sp)
   22de4:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
   22de8:	0001883a 	nop
   22dec:	e037883a 	mov	sp,fp
   22df0:	df000017 	ldw	fp,0(sp)
   22df4:	dec00104 	addi	sp,sp,4
   22df8:	f800283a 	ret

00022dfc <OSInitHookEnd>:

void OSInitHookEnd(void)
{
   22dfc:	deffff04 	addi	sp,sp,-4
   22e00:	df000015 	stw	fp,0(sp)
   22e04:	d839883a 	mov	fp,sp
}
   22e08:	0001883a 	nop
   22e0c:	e037883a 	mov	sp,fp
   22e10:	df000017 	ldw	fp,0(sp)
   22e14:	dec00104 	addi	sp,sp,4
   22e18:	f800283a 	ret

00022e1c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
   22e1c:	deffff04 	addi	sp,sp,-4
   22e20:	df000015 	stw	fp,0(sp)
   22e24:	d839883a 	mov	fp,sp
}
   22e28:	0001883a 	nop
   22e2c:	e037883a 	mov	sp,fp
   22e30:	df000017 	ldw	fp,0(sp)
   22e34:	dec00104 	addi	sp,sp,4
   22e38:	f800283a 	ret

00022e3c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
   22e3c:	defffe04 	addi	sp,sp,-8
   22e40:	df000115 	stw	fp,4(sp)
   22e44:	df000104 	addi	fp,sp,4
   22e48:	e13fff15 	stw	r4,-4(fp)
}
   22e4c:	0001883a 	nop
   22e50:	e037883a 	mov	sp,fp
   22e54:	df000017 	ldw	fp,0(sp)
   22e58:	dec00104 	addi	sp,sp,4
   22e5c:	f800283a 	ret

00022e60 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   22e60:	defffb04 	addi	sp,sp,-20
   22e64:	dfc00415 	stw	ra,16(sp)
   22e68:	df000315 	stw	fp,12(sp)
   22e6c:	df000304 	addi	fp,sp,12
   22e70:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   22e74:	d0a01c17 	ldw	r2,-32656(gp)
   22e78:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   22e7c:	00003106 	br	22f44 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   22e80:	e0bffd17 	ldw	r2,-12(fp)
   22e84:	10800217 	ldw	r2,8(r2)
   22e88:	1009883a 	mov	r4,r2
   22e8c:	00089900 	call	8990 <strlen>
   22e90:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   22e94:	e0bffd17 	ldw	r2,-12(fp)
   22e98:	10c00217 	ldw	r3,8(r2)
   22e9c:	e0bffe17 	ldw	r2,-8(fp)
   22ea0:	10bfffc4 	addi	r2,r2,-1
   22ea4:	1885883a 	add	r2,r3,r2
   22ea8:	10800003 	ldbu	r2,0(r2)
   22eac:	10803fcc 	andi	r2,r2,255
   22eb0:	1080201c 	xori	r2,r2,128
   22eb4:	10bfe004 	addi	r2,r2,-128
   22eb8:	10800bd8 	cmpnei	r2,r2,47
   22ebc:	1000031e 	bne	r2,zero,22ecc <alt_find_file+0x6c>
    {
      len -= 1;
   22ec0:	e0bffe17 	ldw	r2,-8(fp)
   22ec4:	10bfffc4 	addi	r2,r2,-1
   22ec8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   22ecc:	e0bffe17 	ldw	r2,-8(fp)
   22ed0:	e0ffff17 	ldw	r3,-4(fp)
   22ed4:	1885883a 	add	r2,r3,r2
   22ed8:	10800003 	ldbu	r2,0(r2)
   22edc:	10803fcc 	andi	r2,r2,255
   22ee0:	1080201c 	xori	r2,r2,128
   22ee4:	10bfe004 	addi	r2,r2,-128
   22ee8:	10800be0 	cmpeqi	r2,r2,47
   22eec:	1000081e 	bne	r2,zero,22f10 <alt_find_file+0xb0>
   22ef0:	e0bffe17 	ldw	r2,-8(fp)
   22ef4:	e0ffff17 	ldw	r3,-4(fp)
   22ef8:	1885883a 	add	r2,r3,r2
   22efc:	10800003 	ldbu	r2,0(r2)
   22f00:	10803fcc 	andi	r2,r2,255
   22f04:	1080201c 	xori	r2,r2,128
   22f08:	10bfe004 	addi	r2,r2,-128
   22f0c:	10000a1e 	bne	r2,zero,22f38 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   22f10:	e0bffd17 	ldw	r2,-12(fp)
   22f14:	10800217 	ldw	r2,8(r2)
   22f18:	e0fffe17 	ldw	r3,-8(fp)
   22f1c:	180d883a 	mov	r6,r3
   22f20:	e17fff17 	ldw	r5,-4(fp)
   22f24:	1009883a 	mov	r4,r2
   22f28:	00231bc0 	call	231bc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   22f2c:	1000021e 	bne	r2,zero,22f38 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   22f30:	e0bffd17 	ldw	r2,-12(fp)
   22f34:	00000706 	br	22f54 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   22f38:	e0bffd17 	ldw	r2,-12(fp)
   22f3c:	10800017 	ldw	r2,0(r2)
   22f40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   22f44:	e0fffd17 	ldw	r3,-12(fp)
   22f48:	d0a01c04 	addi	r2,gp,-32656
   22f4c:	18bfcc1e 	bne	r3,r2,22e80 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7022e80>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   22f50:	0005883a 	mov	r2,zero
}
   22f54:	e037883a 	mov	sp,fp
   22f58:	dfc00117 	ldw	ra,4(sp)
   22f5c:	df000017 	ldw	fp,0(sp)
   22f60:	dec00204 	addi	sp,sp,8
   22f64:	f800283a 	ret

00022f68 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   22f68:	defff904 	addi	sp,sp,-28
   22f6c:	dfc00615 	stw	ra,24(sp)
   22f70:	df000515 	stw	fp,20(sp)
   22f74:	df000504 	addi	fp,sp,20
   22f78:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   22f7c:	00bffa04 	movi	r2,-24
   22f80:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
   22f84:	d0a83f17 	ldw	r2,-24324(gp)
   22f88:	e0bffd15 	stw	r2,-12(fp)
   22f8c:	e03ffe0d 	sth	zero,-8(fp)
   22f90:	e0bffe0b 	ldhu	r2,-8(fp)
   22f94:	e0fffe84 	addi	r3,fp,-6
   22f98:	180d883a 	mov	r6,r3
   22f9c:	100b883a 	mov	r5,r2
   22fa0:	e13ffd17 	ldw	r4,-12(fp)
   22fa4:	001d4300 	call	1d430 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   22fa8:	e03ffb15 	stw	zero,-20(fp)
   22fac:	00001906 	br	23014 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
   22fb0:	008000b4 	movhi	r2,2
   22fb4:	10963f04 	addi	r2,r2,22780
   22fb8:	e0fffb17 	ldw	r3,-20(fp)
   22fbc:	18c00324 	muli	r3,r3,12
   22fc0:	10c5883a 	add	r2,r2,r3
   22fc4:	10800017 	ldw	r2,0(r2)
   22fc8:	10000f1e 	bne	r2,zero,23008 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
   22fcc:	008000b4 	movhi	r2,2
   22fd0:	10963f04 	addi	r2,r2,22780
   22fd4:	e0fffb17 	ldw	r3,-20(fp)
   22fd8:	18c00324 	muli	r3,r3,12
   22fdc:	10c5883a 	add	r2,r2,r3
   22fe0:	e0ffff17 	ldw	r3,-4(fp)
   22fe4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   22fe8:	d0e02017 	ldw	r3,-32640(gp)
   22fec:	e0bffb17 	ldw	r2,-20(fp)
   22ff0:	1880020e 	bge	r3,r2,22ffc <alt_get_fd+0x94>
      {
        alt_max_fd = i;
   22ff4:	e0bffb17 	ldw	r2,-20(fp)
   22ff8:	d0a02015 	stw	r2,-32640(gp)
      }
      rc = i;
   22ffc:	e0bffb17 	ldw	r2,-20(fp)
   23000:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
   23004:	00000606 	br	23020 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   23008:	e0bffb17 	ldw	r2,-20(fp)
   2300c:	10800044 	addi	r2,r2,1
   23010:	e0bffb15 	stw	r2,-20(fp)
   23014:	e0bffb17 	ldw	r2,-20(fp)
   23018:	10800810 	cmplti	r2,r2,32
   2301c:	103fe41e 	bne	r2,zero,22fb0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7022fb0>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
   23020:	d0a83f17 	ldw	r2,-24324(gp)
   23024:	1009883a 	mov	r4,r2
   23028:	001d7a80 	call	1d7a8 <OSSemPost>

  return rc;
   2302c:	e0bffc17 	ldw	r2,-16(fp)
}
   23030:	e037883a 	mov	sp,fp
   23034:	dfc00117 	ldw	ra,4(sp)
   23038:	df000017 	ldw	fp,0(sp)
   2303c:	dec00204 	addi	sp,sp,8
   23040:	f800283a 	ret

00023044 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   23044:	defffb04 	addi	sp,sp,-20
   23048:	df000415 	stw	fp,16(sp)
   2304c:	df000404 	addi	fp,sp,16
   23050:	e13ffe15 	stw	r4,-8(fp)
   23054:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   23058:	e0bfff17 	ldw	r2,-4(fp)
   2305c:	10840070 	cmpltui	r2,r2,4097
   23060:	1000021e 	bne	r2,zero,2306c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   23064:	00840004 	movi	r2,4096
   23068:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   2306c:	e0fffe17 	ldw	r3,-8(fp)
   23070:	e0bfff17 	ldw	r2,-4(fp)
   23074:	1885883a 	add	r2,r3,r2
   23078:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2307c:	e0bffe17 	ldw	r2,-8(fp)
   23080:	e0bffc15 	stw	r2,-16(fp)
   23084:	00000506 	br	2309c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   23088:	e0bffc17 	ldw	r2,-16(fp)
   2308c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   23090:	e0bffc17 	ldw	r2,-16(fp)
   23094:	10800804 	addi	r2,r2,32
   23098:	e0bffc15 	stw	r2,-16(fp)
   2309c:	e0fffc17 	ldw	r3,-16(fp)
   230a0:	e0bffd17 	ldw	r2,-12(fp)
   230a4:	18bff836 	bltu	r3,r2,23088 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7023088>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   230a8:	e0bffe17 	ldw	r2,-8(fp)
   230ac:	108007cc 	andi	r2,r2,31
   230b0:	10000226 	beq	r2,zero,230bc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   230b4:	e0bffc17 	ldw	r2,-16(fp)
   230b8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   230bc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   230c0:	0001883a 	nop
   230c4:	e037883a 	mov	sp,fp
   230c8:	df000017 	ldw	fp,0(sp)
   230cc:	dec00104 	addi	sp,sp,4
   230d0:	f800283a 	ret

000230d4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   230d4:	defffe04 	addi	sp,sp,-8
   230d8:	df000115 	stw	fp,4(sp)
   230dc:	df000104 	addi	fp,sp,4
   230e0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   230e4:	e0bfff17 	ldw	r2,-4(fp)
   230e8:	10bffe84 	addi	r2,r2,-6
   230ec:	10c00428 	cmpgeui	r3,r2,16
   230f0:	18001a1e 	bne	r3,zero,2315c <alt_exception_cause_generated_bad_addr+0x88>
   230f4:	100690ba 	slli	r3,r2,2
   230f8:	008000b4 	movhi	r2,2
   230fc:	108c4304 	addi	r2,r2,12556
   23100:	1885883a 	add	r2,r3,r2
   23104:	10800017 	ldw	r2,0(r2)
   23108:	1000683a 	jmp	r2
   2310c:	0002314c 	andi	zero,zero,2245
   23110:	0002314c 	andi	zero,zero,2245
   23114:	0002315c 	xori	zero,zero,2245
   23118:	0002315c 	xori	zero,zero,2245
   2311c:	0002315c 	xori	zero,zero,2245
   23120:	0002314c 	andi	zero,zero,2245
   23124:	00023154 	movui	zero,2245
   23128:	0002315c 	xori	zero,zero,2245
   2312c:	0002314c 	andi	zero,zero,2245
   23130:	0002314c 	andi	zero,zero,2245
   23134:	0002315c 	xori	zero,zero,2245
   23138:	0002314c 	andi	zero,zero,2245
   2313c:	00023154 	movui	zero,2245
   23140:	0002315c 	xori	zero,zero,2245
   23144:	0002315c 	xori	zero,zero,2245
   23148:	0002314c 	andi	zero,zero,2245
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   2314c:	00800044 	movi	r2,1
   23150:	00000306 	br	23160 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   23154:	0005883a 	mov	r2,zero
   23158:	00000106 	br	23160 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   2315c:	0005883a 	mov	r2,zero
  }
}
   23160:	e037883a 	mov	sp,fp
   23164:	df000017 	ldw	fp,0(sp)
   23168:	dec00104 	addi	sp,sp,4
   2316c:	f800283a 	ret

00023170 <atexit>:
   23170:	200b883a 	mov	r5,r4
   23174:	000f883a 	mov	r7,zero
   23178:	000d883a 	mov	r6,zero
   2317c:	0009883a 	mov	r4,zero
   23180:	00232381 	jmpi	23238 <__register_exitproc>

00023184 <exit>:
   23184:	defffe04 	addi	sp,sp,-8
   23188:	000b883a 	mov	r5,zero
   2318c:	dc000015 	stw	r16,0(sp)
   23190:	dfc00115 	stw	ra,4(sp)
   23194:	2021883a 	mov	r16,r4
   23198:	00233500 	call	23350 <__call_exitprocs>
   2319c:	008000b4 	movhi	r2,2
   231a0:	109bcf04 	addi	r2,r2,28476
   231a4:	11000017 	ldw	r4,0(r2)
   231a8:	20800f17 	ldw	r2,60(r4)
   231ac:	10000126 	beq	r2,zero,231b4 <exit+0x30>
   231b0:	103ee83a 	callr	r2
   231b4:	8009883a 	mov	r4,r16
   231b8:	00172740 	call	17274 <_exit>

000231bc <memcmp>:
   231bc:	01c000c4 	movi	r7,3
   231c0:	3980192e 	bgeu	r7,r6,23228 <memcmp+0x6c>
   231c4:	2144b03a 	or	r2,r4,r5
   231c8:	11c4703a 	and	r2,r2,r7
   231cc:	10000f26 	beq	r2,zero,2320c <memcmp+0x50>
   231d0:	20800003 	ldbu	r2,0(r4)
   231d4:	28c00003 	ldbu	r3,0(r5)
   231d8:	10c0151e 	bne	r2,r3,23230 <memcmp+0x74>
   231dc:	31bfff84 	addi	r6,r6,-2
   231e0:	01ffffc4 	movi	r7,-1
   231e4:	00000406 	br	231f8 <memcmp+0x3c>
   231e8:	20800003 	ldbu	r2,0(r4)
   231ec:	28c00003 	ldbu	r3,0(r5)
   231f0:	31bfffc4 	addi	r6,r6,-1
   231f4:	10c00e1e 	bne	r2,r3,23230 <memcmp+0x74>
   231f8:	21000044 	addi	r4,r4,1
   231fc:	29400044 	addi	r5,r5,1
   23200:	31fff91e 	bne	r6,r7,231e8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70231e8>
   23204:	0005883a 	mov	r2,zero
   23208:	f800283a 	ret
   2320c:	20c00017 	ldw	r3,0(r4)
   23210:	28800017 	ldw	r2,0(r5)
   23214:	18bfee1e 	bne	r3,r2,231d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70231d0>
   23218:	31bfff04 	addi	r6,r6,-4
   2321c:	21000104 	addi	r4,r4,4
   23220:	29400104 	addi	r5,r5,4
   23224:	39bff936 	bltu	r7,r6,2320c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf702320c>
   23228:	303fe91e 	bne	r6,zero,231d0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70231d0>
   2322c:	003ff506 	br	23204 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7023204>
   23230:	10c5c83a 	sub	r2,r2,r3
   23234:	f800283a 	ret

00023238 <__register_exitproc>:
   23238:	defffa04 	addi	sp,sp,-24
   2323c:	dc000315 	stw	r16,12(sp)
   23240:	040000b4 	movhi	r16,2
   23244:	841bcf04 	addi	r16,r16,28476
   23248:	80c00017 	ldw	r3,0(r16)
   2324c:	dc400415 	stw	r17,16(sp)
   23250:	dfc00515 	stw	ra,20(sp)
   23254:	18805217 	ldw	r2,328(r3)
   23258:	2023883a 	mov	r17,r4
   2325c:	10003726 	beq	r2,zero,2333c <__register_exitproc+0x104>
   23260:	10c00117 	ldw	r3,4(r2)
   23264:	010007c4 	movi	r4,31
   23268:	20c00e16 	blt	r4,r3,232a4 <__register_exitproc+0x6c>
   2326c:	1a000044 	addi	r8,r3,1
   23270:	8800221e 	bne	r17,zero,232fc <__register_exitproc+0xc4>
   23274:	18c00084 	addi	r3,r3,2
   23278:	18c7883a 	add	r3,r3,r3
   2327c:	18c7883a 	add	r3,r3,r3
   23280:	12000115 	stw	r8,4(r2)
   23284:	10c7883a 	add	r3,r2,r3
   23288:	19400015 	stw	r5,0(r3)
   2328c:	0005883a 	mov	r2,zero
   23290:	dfc00517 	ldw	ra,20(sp)
   23294:	dc400417 	ldw	r17,16(sp)
   23298:	dc000317 	ldw	r16,12(sp)
   2329c:	dec00604 	addi	sp,sp,24
   232a0:	f800283a 	ret
   232a4:	00800034 	movhi	r2,0
   232a8:	109e2d04 	addi	r2,r2,30900
   232ac:	10002626 	beq	r2,zero,23348 <__register_exitproc+0x110>
   232b0:	01006404 	movi	r4,400
   232b4:	d9400015 	stw	r5,0(sp)
   232b8:	d9800115 	stw	r6,4(sp)
   232bc:	d9c00215 	stw	r7,8(sp)
   232c0:	00078b40 	call	78b4 <malloc>
   232c4:	d9400017 	ldw	r5,0(sp)
   232c8:	d9800117 	ldw	r6,4(sp)
   232cc:	d9c00217 	ldw	r7,8(sp)
   232d0:	10001d26 	beq	r2,zero,23348 <__register_exitproc+0x110>
   232d4:	81000017 	ldw	r4,0(r16)
   232d8:	10000115 	stw	zero,4(r2)
   232dc:	02000044 	movi	r8,1
   232e0:	22405217 	ldw	r9,328(r4)
   232e4:	0007883a 	mov	r3,zero
   232e8:	12400015 	stw	r9,0(r2)
   232ec:	20805215 	stw	r2,328(r4)
   232f0:	10006215 	stw	zero,392(r2)
   232f4:	10006315 	stw	zero,396(r2)
   232f8:	883fde26 	beq	r17,zero,23274 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7023274>
   232fc:	18c9883a 	add	r4,r3,r3
   23300:	2109883a 	add	r4,r4,r4
   23304:	1109883a 	add	r4,r2,r4
   23308:	21802215 	stw	r6,136(r4)
   2330c:	01800044 	movi	r6,1
   23310:	12406217 	ldw	r9,392(r2)
   23314:	30cc983a 	sll	r6,r6,r3
   23318:	4992b03a 	or	r9,r9,r6
   2331c:	12406215 	stw	r9,392(r2)
   23320:	21c04215 	stw	r7,264(r4)
   23324:	01000084 	movi	r4,2
   23328:	893fd21e 	bne	r17,r4,23274 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7023274>
   2332c:	11006317 	ldw	r4,396(r2)
   23330:	218cb03a 	or	r6,r4,r6
   23334:	11806315 	stw	r6,396(r2)
   23338:	003fce06 	br	23274 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7023274>
   2333c:	18805304 	addi	r2,r3,332
   23340:	18805215 	stw	r2,328(r3)
   23344:	003fc606 	br	23260 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7023260>
   23348:	00bfffc4 	movi	r2,-1
   2334c:	003fd006 	br	23290 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7023290>

00023350 <__call_exitprocs>:
   23350:	defff504 	addi	sp,sp,-44
   23354:	df000915 	stw	fp,36(sp)
   23358:	dd400615 	stw	r21,24(sp)
   2335c:	dc800315 	stw	r18,12(sp)
   23360:	dfc00a15 	stw	ra,40(sp)
   23364:	ddc00815 	stw	r23,32(sp)
   23368:	dd800715 	stw	r22,28(sp)
   2336c:	dd000515 	stw	r20,20(sp)
   23370:	dcc00415 	stw	r19,16(sp)
   23374:	dc400215 	stw	r17,8(sp)
   23378:	dc000115 	stw	r16,4(sp)
   2337c:	d9000015 	stw	r4,0(sp)
   23380:	2839883a 	mov	fp,r5
   23384:	04800044 	movi	r18,1
   23388:	057fffc4 	movi	r21,-1
   2338c:	008000b4 	movhi	r2,2
   23390:	109bcf04 	addi	r2,r2,28476
   23394:	12000017 	ldw	r8,0(r2)
   23398:	45005217 	ldw	r20,328(r8)
   2339c:	44c05204 	addi	r19,r8,328
   233a0:	a0001c26 	beq	r20,zero,23414 <__call_exitprocs+0xc4>
   233a4:	a0800117 	ldw	r2,4(r20)
   233a8:	15ffffc4 	addi	r23,r2,-1
   233ac:	b8000d16 	blt	r23,zero,233e4 <__call_exitprocs+0x94>
   233b0:	14000044 	addi	r16,r2,1
   233b4:	8421883a 	add	r16,r16,r16
   233b8:	8421883a 	add	r16,r16,r16
   233bc:	84402004 	addi	r17,r16,128
   233c0:	a463883a 	add	r17,r20,r17
   233c4:	a421883a 	add	r16,r20,r16
   233c8:	e0001e26 	beq	fp,zero,23444 <__call_exitprocs+0xf4>
   233cc:	80804017 	ldw	r2,256(r16)
   233d0:	e0801c26 	beq	fp,r2,23444 <__call_exitprocs+0xf4>
   233d4:	bdffffc4 	addi	r23,r23,-1
   233d8:	843fff04 	addi	r16,r16,-4
   233dc:	8c7fff04 	addi	r17,r17,-4
   233e0:	bd7ff91e 	bne	r23,r21,233c8 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70233c8>
   233e4:	00800034 	movhi	r2,0
   233e8:	109e3204 	addi	r2,r2,30920
   233ec:	10000926 	beq	r2,zero,23414 <__call_exitprocs+0xc4>
   233f0:	a0800117 	ldw	r2,4(r20)
   233f4:	1000301e 	bne	r2,zero,234b8 <__call_exitprocs+0x168>
   233f8:	a0800017 	ldw	r2,0(r20)
   233fc:	10003226 	beq	r2,zero,234c8 <__call_exitprocs+0x178>
   23400:	a009883a 	mov	r4,r20
   23404:	98800015 	stw	r2,0(r19)
   23408:	00078c80 	call	78c8 <free>
   2340c:	9d000017 	ldw	r20,0(r19)
   23410:	a03fe41e 	bne	r20,zero,233a4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70233a4>
   23414:	dfc00a17 	ldw	ra,40(sp)
   23418:	df000917 	ldw	fp,36(sp)
   2341c:	ddc00817 	ldw	r23,32(sp)
   23420:	dd800717 	ldw	r22,28(sp)
   23424:	dd400617 	ldw	r21,24(sp)
   23428:	dd000517 	ldw	r20,20(sp)
   2342c:	dcc00417 	ldw	r19,16(sp)
   23430:	dc800317 	ldw	r18,12(sp)
   23434:	dc400217 	ldw	r17,8(sp)
   23438:	dc000117 	ldw	r16,4(sp)
   2343c:	dec00b04 	addi	sp,sp,44
   23440:	f800283a 	ret
   23444:	a0800117 	ldw	r2,4(r20)
   23448:	80c00017 	ldw	r3,0(r16)
   2344c:	10bfffc4 	addi	r2,r2,-1
   23450:	15c01426 	beq	r2,r23,234a4 <__call_exitprocs+0x154>
   23454:	80000015 	stw	zero,0(r16)
   23458:	183fde26 	beq	r3,zero,233d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70233d4>
   2345c:	95c8983a 	sll	r4,r18,r23
   23460:	a0806217 	ldw	r2,392(r20)
   23464:	a5800117 	ldw	r22,4(r20)
   23468:	2084703a 	and	r2,r4,r2
   2346c:	10000b26 	beq	r2,zero,2349c <__call_exitprocs+0x14c>
   23470:	a0806317 	ldw	r2,396(r20)
   23474:	2088703a 	and	r4,r4,r2
   23478:	20000c1e 	bne	r4,zero,234ac <__call_exitprocs+0x15c>
   2347c:	89400017 	ldw	r5,0(r17)
   23480:	d9000017 	ldw	r4,0(sp)
   23484:	183ee83a 	callr	r3
   23488:	a0800117 	ldw	r2,4(r20)
   2348c:	15bfbf1e 	bne	r2,r22,2338c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf702338c>
   23490:	98800017 	ldw	r2,0(r19)
   23494:	153fcf26 	beq	r2,r20,233d4 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70233d4>
   23498:	003fbc06 	br	2338c <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf702338c>
   2349c:	183ee83a 	callr	r3
   234a0:	003ff906 	br	23488 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7023488>
   234a4:	a5c00115 	stw	r23,4(r20)
   234a8:	003feb06 	br	23458 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7023458>
   234ac:	89000017 	ldw	r4,0(r17)
   234b0:	183ee83a 	callr	r3
   234b4:	003ff406 	br	23488 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf7023488>
   234b8:	a0800017 	ldw	r2,0(r20)
   234bc:	a027883a 	mov	r19,r20
   234c0:	1029883a 	mov	r20,r2
   234c4:	003fb606 	br	233a0 <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70233a0>
   234c8:	0005883a 	mov	r2,zero
   234cc:	003ffb06 	br	234bc <__alt_mem_VGA_Subsystem_Char_Buf_Subsystem_Onchip_SRAM+0xf70234bc>
   234d0:	01110bff 	0x1110bff
   234d4:	01010004 	movi	r4,1024
   234d8:	7f000105 	stb	fp,4(r15)
   234dc:	007d0000 	call	7d000 <__alt_heap_start+0x44c4c>
   234e0:	00000000 	call	0 <__alt_mem_SDRAM>
   234e4:	01883a00 	call	1883a0 <__alt_heap_start+0x14ffec>
   234e8:	010d0bff 	0x10d0bff
   234ec:	01010002 	0x1010002
	...
   234f8:	010d0bff 	0x10d0bff
   234fc:	01010004 	movi	r4,1024
   23500:	00000100 	call	10 <__alt_mem_SDRAM+0x10>
   23504:	00000000 	call	0 <__alt_mem_SDRAM>
   23508:	00005df0 	cmpltui	zero,zero,375
